{"sha": "3641bd553429d959870ac3e863e3253394d37fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0MWJkNTUzNDI5ZDk1OTg3MGFjM2U4NjNlMzI1MzM5NGQzN2ZhZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-09-17T11:18:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-09-17T11:18:27Z"}, "message": "tune-1.cc: Use VERIFY, clean up a bit.\n\n2004-09-17  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/ext/mt_allocator/tune-1.cc: Use VERIFY, clean\n\tup a bit.\n\t* testsuite/ext/mt_allocator/tune-2.cc: Likewise.\n\t* testsuite/ext/mt_allocator/tune-3.cc: Likewise.\n\t* testsuite/ext/mt_allocator/tune-4.cc: Likewise.\n\nFrom-SVN: r87638", "tree": {"sha": "ddd5c32f622e0b4c58689584d8abc46a38c437d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddd5c32f622e0b4c58689584d8abc46a38c437d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3641bd553429d959870ac3e863e3253394d37fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3641bd553429d959870ac3e863e3253394d37fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3641bd553429d959870ac3e863e3253394d37fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3641bd553429d959870ac3e863e3253394d37fae/comments", "author": null, "committer": null, "parents": [{"sha": "b01d837fa2551257b38de18320be91ccfb93380c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01d837fa2551257b38de18320be91ccfb93380c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01d837fa2551257b38de18320be91ccfb93380c"}], "stats": {"total": 102, "additions": 48, "deletions": 54}, "files": [{"sha": "6dfa61ead49a3b4742e7038d9aea7c4ff06a46ce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3641bd553429d959870ac3e863e3253394d37fae", "patch": "@@ -1,3 +1,11 @@\n+2004-09-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/ext/mt_allocator/tune-1.cc: Use VERIFY, clean\n+\tup a bit.\n+\t* testsuite/ext/mt_allocator/tune-2.cc: Likewise.\n+\t* testsuite/ext/mt_allocator/tune-3.cc: Likewise.\n+\t* testsuite/ext/mt_allocator/tune-4.cc: Likewise.\n+\n 2004-09-17  Paolo Carlini  <pcarlini@suse.de>\n \t    Andrea Arcangeli  <andrea@suse.de>\n "}, {"sha": "fa4dd45b41d9f37f8ba69e986421d523582ac7d4", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-1.cc", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc?ref=3641bd553429d959870ac3e863e3253394d37fae", "patch": "@@ -18,20 +18,17 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-#include <cassert>\n+#include <testsuite_hooks.h>\n #include <memory>\n #include <ext/mt_allocator.h>\n \n-struct pod\n-{\n-  int i;\n-};\n-\n // Tune characteristics. \n // __common_pool_policy\n void test01()\n {\n-  typedef pod value_type;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef __gnu_test::pod_int value_type;\n #ifdef __GTHREADS\n   typedef __gnu_cxx::__common_pool_policy<true> policy_type;\n #else\n@@ -46,17 +43,17 @@ void test01()\n \n   allocator_type a;\n   tune_type t1 = a._M_get_options();  \n-  assert(t1._M_align == t_default._M_align);\n+  VERIFY( t1._M_align == t_default._M_align );\n   a._M_set_options(t_opt);\n-  tune_type t2 = a._M_get_options();  \n-  assert(t1._M_align != t2._M_align);\n+  tune_type t2 = a._M_get_options();\n+  VERIFY( t1._M_align != t2._M_align );\n \n   allocator_type::pointer p1 = a.allocate(128);\n   allocator_type::pointer p2 = a.allocate(5128);\n   a._M_set_options(t_single);\n   t1 = a._M_get_options();  \n-  assert(t1._M_max_threads != t_single._M_max_threads);\n-  assert(t1._M_max_threads == t_opt._M_max_threads);\n+  VERIFY( t1._M_max_threads != t_single._M_max_threads );\n+  VERIFY( t1._M_max_threads == t_opt._M_max_threads );\n \n   a.deallocate(p1, 128);\n   a.deallocate(p2, 5128);"}, {"sha": "60e9b38ebffebae5f832235a63074551ea6d7e99", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-2.cc", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc?ref=3641bd553429d959870ac3e863e3253394d37fae", "patch": "@@ -18,20 +18,17 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-#include <cassert>\n+#include <testsuite_hooks.h>\n #include <memory>\n #include <ext/mt_allocator.h>\n \n-struct pod\n-{\n-  int i;\n-};\n-\n // Tune characteristics. \n // __per_type_pool_policy\n void test02()\n {\n-  typedef pod value_type;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef __gnu_test::pod_int value_type;\n #ifdef __GTHREADS\n   typedef __gnu_cxx::__per_type_pool_policy<value_type, true> policy_type;\n #else\n@@ -46,23 +43,22 @@ void test02()\n \n   allocator_type a;\n   tune_type t1 = a._M_get_options();  \n-  assert(t1._M_align == t_default._M_align);\n+  VERIFY( t1._M_align == t_default._M_align );\n   a._M_set_options(t_opt);\n-  tune_type t2 = a._M_get_options();  \n-  assert(t1._M_align != t2._M_align);\n+  tune_type t2 = a._M_get_options();\n+  VERIFY( t1._M_align != t2._M_align );\n \n   allocator_type::pointer p1 = a.allocate(128);\n   allocator_type::pointer p2 = a.allocate(5128);\n   a._M_set_options(t_single);\n   t1 = a._M_get_options();  \n-  assert(t1._M_max_threads != t_single._M_max_threads);\n-  assert(t1._M_max_threads == t_opt._M_max_threads);\n+  VERIFY( t1._M_max_threads != t_single._M_max_threads );\n+  VERIFY( t1._M_max_threads == t_opt._M_max_threads );\n \n   a.deallocate(p1, 128);\n   a.deallocate(p2, 5128);\n }\n \n-\n int main()\n {\n   test02();"}, {"sha": "e1d2105d3af96c8cd00bbb35995ef9ab06f8a062", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-3.cc", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc?ref=3641bd553429d959870ac3e863e3253394d37fae", "patch": "@@ -18,15 +18,10 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-#include <cassert>\n+#include <testsuite_hooks.h>\n #include <memory>\n #include <ext/mt_allocator.h>\n \n-struct pod\n-{\n-  int i;\n-};\n-\n // Tune characteristics, two of same type\n template<typename _Tp>\n struct test_policy\n@@ -43,6 +38,8 @@ struct test_policy<__gnu_cxx::__common_pool_policy<_Thread> >\n template<typename _Tp, typename _Cp>\n void test03()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   typedef __gnu_cxx::__pool_base::_Tune tune_type;\n   typedef _Tp value_type;\n   typedef _Cp policy_type;\n@@ -58,29 +55,28 @@ void test03()\n   tune_type t2;\n   if (test_policy<policy_type>::per_type())\n     {\n-      assert(t1._M_align == t_default._M_align);\n+      VERIFY( t1._M_align == t_default._M_align );\n       a._M_set_options(t_opt);\n-      t2 = a._M_get_options();  \n-      assert(t1._M_align != t2._M_align);\n+      t2 = a._M_get_options();\n+      VERIFY( t1._M_align != t2._M_align );\n     }\n   else\n     t2 = t1;\n \n-\n   // Lock tune settings.\n   typename allocator_type::pointer p1 = a.allocate(128);\n \n   allocator_type a2;\n   tune_type t3 = a2._M_get_options();  \n   tune_type t4;\n-  assert(t3._M_max_threads == t2._M_max_threads);\n+  VERIFY( t3._M_max_threads == t2._M_max_threads );\n \n   typename allocator_type::pointer p2 = a2.allocate(5128);\n \n   a2._M_set_options(t_single);\n-  t4 = a2._M_get_options();  \n-  assert(t4._M_max_threads != t_single._M_max_threads);\n-  assert(t4._M_max_threads == t3._M_max_threads);\n+  t4 = a2._M_get_options();\n+  VERIFY( t4._M_max_threads != t_single._M_max_threads );\n+  VERIFY( t4._M_max_threads == t3._M_max_threads );\n \n   a.deallocate(p1, 128);\n   a2.deallocate(p2, 5128);"}, {"sha": "da85295a5defdf42e6daef1c4deaadf992d0be53", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-4.cc", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3641bd553429d959870ac3e863e3253394d37fae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc?ref=3641bd553429d959870ac3e863e3253394d37fae", "patch": "@@ -18,15 +18,10 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-#include <cassert>\n+#include <testsuite_hooks.h>\n #include <memory>\n #include <ext/mt_allocator.h>\n \n-struct pod\n-{\n-  int i;\n-};\n-\n // Tune characteristics, two of same type\n template<typename _Tp>\n struct test_policy\n@@ -49,6 +44,8 @@ struct pod2\n template<typename _Tp, typename _Cp>\n void test04()\n {\n+  bool test __attribute__((unused)) = true;\n+  \n   typedef __gnu_cxx::__pool_base::_Tune tune_type;\n   typedef _Tp value_type;\n   typedef _Cp policy_type;\n@@ -63,10 +60,10 @@ void test04()\n   tune_type t2;\n   if (test_policy<policy_type>::per_type())\n     {\n-      assert(t1._M_align == t_default._M_align);\n+      VERIFY( t1._M_align == t_default._M_align );\n       a._M_set_options(t_opt);\n       t2 = a._M_get_options();  \n-      assert(t1._M_align != t2._M_align);\n+      VERIFY( t1._M_align != t2._M_align );\n     }\n   else\n     t2 = t1;\n@@ -85,21 +82,21 @@ void test04()\n   // Both policy_type and rebind_type::policy_type have same characteristics.\n   if (test_policy<policy_type>::per_type())\n     {\n-      assert(t3._M_align == t_default._M_align);\n+      VERIFY( t3._M_align == t_default._M_align );\n       a2._M_set_options(t_opt);\n-      t4 = a2._M_get_options();  \n-      assert(t3._M_align != t4._M_align);\n+      t4 = a2._M_get_options();\n+      VERIFY( t3._M_align != t4._M_align );\n       t3 = t4;\n     }\n   else\n-    assert(t3._M_max_threads == t2._M_max_threads);\n+    VERIFY( t3._M_max_threads == t2._M_max_threads );\n \n   typename rebind_type::pointer p2 = a2.allocate(5128);\n \n   a2._M_set_options(t_single);\n-  t4 = a2._M_get_options();  \n-  assert(t4._M_max_threads != t_single._M_max_threads);\n-  assert(t4._M_max_threads == t3._M_max_threads);\n+  t4 = a2._M_get_options();\n+  VERIFY( t4._M_max_threads != t_single._M_max_threads );\n+  VERIFY( t4._M_max_threads == t3._M_max_threads );\n \n   a.deallocate(p1, 128);\n   a2.deallocate(p2, 5128);"}]}