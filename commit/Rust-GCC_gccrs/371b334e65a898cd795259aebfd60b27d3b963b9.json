{"sha": "371b334e65a898cd795259aebfd60b27d3b963b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxYjMzNGU2NWE4OThjZDc5NTI1OWFlYmZkNjBiMjdkM2I5NjNiOQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-05T07:44:33Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-05T07:44:33Z"}, "message": "re PR fortran/43696 ([OOP] Bogus error: Passed-object dummy argument must not be POINTER)\n\n2010-05-05  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43696\n\t* resolve.c (resolve_fl_derived): Some fixes for class variables.\n\t* symbol.c (gfc_build_class_symbol): Add separate class container for\n\tclass pointers.\n\n\n2010-05-05  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43696\n\t* gfortran.dg/class_17.f03: New.\n\nFrom-SVN: r159056", "tree": {"sha": "23926038722f4a6af948a57c29017730e4298e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23926038722f4a6af948a57c29017730e4298e45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/371b334e65a898cd795259aebfd60b27d3b963b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371b334e65a898cd795259aebfd60b27d3b963b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371b334e65a898cd795259aebfd60b27d3b963b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371b334e65a898cd795259aebfd60b27d3b963b9/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6c345e9765f7c51739a61733b5acdb44feff17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6c345e9765f7c51739a61733b5acdb44feff17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6c345e9765f7c51739a61733b5acdb44feff17"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "0641cbfab67884f157c2e88454fd0b535600cd18", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=371b334e65a898cd795259aebfd60b27d3b963b9", "patch": "@@ -1,3 +1,10 @@\n+2010-05-05  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43696\n+\t* resolve.c (resolve_fl_derived): Some fixes for class variables.\n+\t* symbol.c (gfc_build_class_symbol): Add separate class container for\n+\tclass pointers.\n+\n 2010-05-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/43592"}, {"sha": "d92c69c030cf51897a9737ec26c22fe0243aabbe", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=371b334e65a898cd795259aebfd60b27d3b963b9", "patch": "@@ -10794,7 +10794,7 @@ resolve_fl_derived (gfc_symbol *sym)\n       \n       /* If this type is an extension, see if this component has the same name\n \t as an inherited type-bound procedure.  */\n-      if (super_type\n+      if (super_type && !sym->attr.is_class\n \t  && gfc_find_typebound_proc (super_type, NULL, c->name, true, NULL))\n \t{\n \t  gfc_error (\"Component '%s' of '%s' at %L has the same name as an\"\n@@ -10841,7 +10841,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t    }\n \t}\n \n-      if (c->ts.type == BT_DERIVED && c->attr.pointer\n+      if (!sym->attr.is_class && c->ts.type == BT_DERIVED && c->attr.pointer\n \t  && c->ts.u.derived->components == NULL\n \t  && !c->ts.u.derived->attr.zero_comp)\n \t{\n@@ -10851,6 +10851,16 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  return FAILURE;\n \t}\n \n+      if (c->ts.type == BT_CLASS && c->ts.u.derived->components->attr.pointer\n+\t  && c->ts.u.derived->components->ts.u.derived->components == NULL\n+\t  && !c->ts.u.derived->components->ts.u.derived->attr.zero_comp)\n+\t{\n+\t  gfc_error (\"The pointer component '%s' of '%s' at %L is a type \"\n+\t\t     \"that has not been declared\", c->name, sym->name,\n+\t\t     &c->loc);\n+\t  return FAILURE;\n+\t}\n+\n       /* C437.  */\n       if (c->ts.type == BT_CLASS\n \t  && !(c->ts.u.derived->components->attr.pointer"}, {"sha": "8403578b81e3aaa6f30e818f25dbd0739ed2e5db", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=371b334e65a898cd795259aebfd60b27d3b963b9", "patch": "@@ -4720,6 +4720,8 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n     sprintf (name, \".class.%s.%d.a\", ts->u.derived->name, (*as)->rank);\n   else if ((*as) && (*as)->rank)\n     sprintf (name, \".class.%s.%d\", ts->u.derived->name, (*as)->rank);\n+  else if (attr->pointer)\n+    sprintf (name, \".class.%s.p\", ts->u.derived->name);\n   else if (attr->allocatable)\n     sprintf (name, \".class.%s.a\", ts->u.derived->name);\n   else"}, {"sha": "f8273f0704634df564fc758ed6f1f8a9bbfaad6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=371b334e65a898cd795259aebfd60b27d3b963b9", "patch": "@@ -1,3 +1,8 @@\n+2010-05-05  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43696\n+\t* gfortran.dg/class_17.f03: New.\n+\n 2010-05-04  Mike Stump  <mikestump@comcast.net>\n \n \tPR objc/35165"}, {"sha": "b015c1319f6a86f448e1f457d80b7fb190f2c97f", "filename": "gcc/testsuite/gfortran.dg/class_17.f03", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_17.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b334e65a898cd795259aebfd60b27d3b963b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_17.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_17.f03?ref=371b334e65a898cd795259aebfd60b27d3b963b9", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do compile }\n+!\n+! PR 43696: [OOP] Bogus error: Passed-object dummy argument must not be POINTER\n+!\n+! Contributed by Hans-Werner Boschmann <boschmann@tp1.physik.uni-siegen.de>\n+\n+\n+MODULE error_stack_module\n+  implicit none\n+\n+  type,abstract::serializable_class\n+   contains\n+     procedure(ser_DTV_RF),deferred::read_formatted\n+  end type serializable_class\n+\n+  abstract interface\n+     subroutine ser_DTV_RF(dtv,unit,iotype,v_list,iostat,iomsg)\n+       import serializable_class\n+       CLASS(serializable_class),INTENT(INOUT) :: dtv\n+       INTEGER, INTENT(IN) :: unit\n+       CHARACTER (LEN=*), INTENT(IN) :: iotype\n+       INTEGER, INTENT(IN) :: v_list(:)\n+       INTEGER, INTENT(OUT) :: iostat\n+       CHARACTER (LEN=*), INTENT(INOUT) :: iomsg\n+     end subroutine ser_DTV_RF\n+  end interface\n+\n+  type,extends(serializable_class)::error_type\n+     class(error_type),pointer::next=>null()\n+   contains\n+     procedure::read_formatted=>error_read_formatted\n+  end type error_type\n+\n+contains\n+\n+  recursive subroutine error_read_formatted(dtv,unit,iotype,v_list,iostat,iomsg)\n+    CLASS(error_type),INTENT(INOUT) :: dtv\n+    INTEGER, INTENT(IN) :: unit\n+    CHARACTER (LEN=*), INTENT(IN) :: iotype\n+    INTEGER, INTENT(IN) :: v_list(:)\n+    INTEGER, INTENT(OUT) :: iostat\n+    CHARACTER (LEN=*), INTENT(INOUT) :: iomsg\n+    character(8),allocatable::type\n+    character(8),allocatable::next\n+    call basic_read_string(unit,type)\n+    call basic_read_string(unit,next)\n+    if(next==\"NEXT\")then\n+       allocate(dtv%next)\n+       call dtv%next%read_formatted(unit,iotype,v_list,iostat,iomsg)\n+    end if\n+  end subroutine error_read_formatted\n+\n+end MODULE error_stack_module\n+\n+\n+module b_module\n+  implicit none\n+  type::b_type\n+     class(not_yet_defined_type_type),pointer::b_component  ! { dg-error \"is a type that has not been declared\" }\n+  end type b_type\n+end module b_module\n+ \n+\n+! { dg-final { cleanup-modules \"error_stack_module b_module\" } }"}]}