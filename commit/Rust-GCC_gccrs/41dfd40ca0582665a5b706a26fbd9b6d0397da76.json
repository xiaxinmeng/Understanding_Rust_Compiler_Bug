{"sha": "41dfd40ca0582665a5b706a26fbd9b6d0397da76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkZmQ0MGNhMDU4MjY2NWE1YjcwNmEyNmZiZDliNmQwMzk3ZGE3Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-05T01:42:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-05T01:42:54Z"}, "message": "Fix error in last change.\n\nFrom-SVN: r8215", "tree": {"sha": "43f216ea99f2e8bc20013eba14108ee9a95a0b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f216ea99f2e8bc20013eba14108ee9a95a0b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41dfd40ca0582665a5b706a26fbd9b6d0397da76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dfd40ca0582665a5b706a26fbd9b6d0397da76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41dfd40ca0582665a5b706a26fbd9b6d0397da76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dfd40ca0582665a5b706a26fbd9b6d0397da76/comments", "author": null, "committer": null, "parents": [{"sha": "34661f5c30b84d318e5fcc27182b2abba52c1889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34661f5c30b84d318e5fcc27182b2abba52c1889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34661f5c30b84d318e5fcc27182b2abba52c1889"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "963dae08a0dd5b2c5145f245334a3252be4a51b5", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41dfd40ca0582665a5b706a26fbd9b6d0397da76/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41dfd40ca0582665a5b706a26fbd9b6d0397da76/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=41dfd40ca0582665a5b706a26fbd9b6d0397da76", "patch": "@@ -9109,9 +9109,6 @@ do_jump_for_compare (comparison, if_false_label, if_true_label)\n       rtx prev = get_last_insn ();\n       rtx branch = 0;\n \n-      if (prev != 0)\n-\tprev = PREV_INSN (prev);\n-\n       /* Output the branch with the opposite condition.  Then try to invert\n \t what is generated.  If more than one insn is a branch, or if the\n \t branch is not the last insn written, abort. If we can't invert\n@@ -9123,14 +9120,17 @@ do_jump_for_compare (comparison, if_false_label, if_true_label)\n       else\n \tabort ();\n \n-      /* Here we get the insn before what was just emitted.\n-\t On some machines, emitting the branch can discard\n-\t the previous compare insn and emit a replacement.  */\n+      /* Here we get the first insn that was just emitted.  It used to be  the\n+\t case that, on some machines, emitting the branch would discard\n+\t the previous compare insn and emit a replacement.  This isn't\n+\t done anymore, but abort if we see that PREV is deleted.  */\n+\n       if (prev == 0)\n-\t/* If there's only one preceding insn...  */\n \tinsn = get_insns ();\n+      else if (INSN_DELETED_P (prev))\n+\tabort ();\n       else\n-\tinsn = NEXT_INSN (NEXT_INSN (prev));\n+\tinsn = NEXT_INSN (prev);\n \n       for (; insn; insn = NEXT_INSN (insn))\n \tif (GET_CODE (insn) == JUMP_INSN)"}]}