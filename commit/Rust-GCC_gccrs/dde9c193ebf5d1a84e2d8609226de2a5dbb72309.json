{"sha": "dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlOWMxOTNlYmY1ZDFhODRlMmQ4NjA5MjI2ZGUyYTVkYmI3MjMwOQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-30T11:43:29Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-30T11:43:29Z"}, "message": "Adjust relevant test cases wrt -ftrack-macro-expansion=[0|2]\n\nEven after all the patches I have already submitted, some test cases\nwhere errors happens on tokens that are defined in macros see their\noutput change in an incompatible way, when you run them with or\nwithout -ftrack-macro-expansion.\n\nI think this is expected, because the (spelling) locus inside the\ndefinition of the macro pointed to with -ftrack-macro-expansion is\ndifferent from the locus of the expansion point of the macro pointed\nto without -ftrack-macro-expansion.\n\nIn those cases this patch either adjusts the test case and forces it\nbe run either with -ftrack-macro-expansion, or it just forces it to be\nrun without -ftrack-macro-expansion.\n\nThere are so many libstdc++ tests that were failing because of that\nbenign issue that I preferred to just run them with\n-ftrack-macro-expansion diabled, after inspecting each of them to be\nsure there was nothing more serious underneath.\n\nBoostrapped on x86_64-unknown-linux-gnu against trunk with and without\n-ftrack-macro-expansion turned on.\n\ngcc/testsuite/\n\n\t* objc.dg/foreach-7.m: Force the test case to run without\n\t-ftrack-macro-expansion.\n\t* c-c++-common/tm/attrib-1.c: Likewise.\n\t* c-c++-common/warn-ommitted-condop.c: Likewise.\n\t* gcc.dg/assign-warn-1.c: Likewise.\n\t* gcc.dg/assign-warn-2.c: Likewise.\n\t* gcc.dg/attr-alloc_size.c: Likewise.\n\t* gcc.dg/builtin-stringop-chk-1.c: Likewise.\n\t* gcc.dg/builtin-stringop-chk-2.c: Likewise.\n\t* gcc.dg/builtin-strncat-chk-1.c: Likewise.\n\t* gcc.dg/c90-const-expr-9.c: Likewise.\n\t* gcc.dg/c99-const-expr-9.c: Likewise.\n\t* gcc.dg/cpp/direct2.c: Likewise.  Adjust.\n\t* gcc.dg/cpp/direct2s.c: Likewise.\n\t* gcc/testsuite/gcc.dg/cpp/pr28709.c: Likewise.\n\t* gcc.dg/cpp/pragma-diagnostic-1.c: Likewise.\n\t* gcc.dg/dfp/composite-type.c: Likewise.\n\t* gcc.dg/uninit-6-O0.c: Adjust the test case and force it to run\n\twith -ftrack-macro-expansion\n\t* g++.dg/cpp0x/constexpr-ex3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-overflow.C: Likewise.\n\t* g++.dg/ext/cleanup-1.C: Likewise.\n\t* g++.dg/ext/gnu-inline-global-reject.C: Likewise.\n\t* g++.dg/template/sfinae10.C: Likewise.\n\t* g++.dg/tm/wrap-2.C: Likewise.\n\t* g++.dg/warn/Wconversion-real-integer.C: Likewise.\n\t* g++.dg/warn/Wsign-conversion.C: Likewise.\n\t* g++.dg/warn/multiple-overflow-warn-1.C: Likewise.\n\t* g++.old-deja/g++.mike/p10769b.C: Likewise.\n\t* g++.dg/warn/Wdouble-promotion.C: Adjust the test case and force\n\tit to run with -ftrack-macro-expansion.\n\t* libstdc++-v3/scripts/testsuite_flags.in: By default, run the\n\ttest cases without -ftrack-macro-expansion.\n\nFrom-SVN: r186976", "tree": {"sha": "dfd182e7835b11147797ec58659bd0cdb81e372b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd182e7835b11147797ec58659bd0cdb81e372b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/comments", "author": null, "committer": null, "parents": [{"sha": "34c8879087689377b44c833c752948fc496f4f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c8879087689377b44c833c752948fc496f4f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c8879087689377b44c833c752948fc496f4f50"}], "stats": {"total": 124, "additions": 83, "deletions": 41}, "files": [{"sha": "000d0a865f477248f0d409add2e99beadfd9d81f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,40 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tAdjust relevant test cases wrt -ftrack-macro-expansion=[0|2]\n+\t* objc.dg/foreach-7.m: Force the test case to run without\n+\t-ftrack-macro-expansion.\n+\t* c-c++-common/tm/attrib-1.c: Likewise.\n+\t* c-c++-common/warn-ommitted-condop.c: Likewise.\n+\t* gcc.dg/assign-warn-1.c: Likewise.\n+\t* gcc.dg/assign-warn-2.c: Likewise.\n+\t* gcc.dg/attr-alloc_size.c: Likewise.\n+\t* gcc.dg/builtin-stringop-chk-1.c: Likewise.\n+\t* gcc.dg/builtin-stringop-chk-2.c: Likewise.\n+\t* gcc.dg/builtin-strncat-chk-1.c: Likewise.\n+\t* gcc.dg/c90-const-expr-9.c: Likewise.\n+\t* gcc.dg/c99-const-expr-9.c: Likewise.\n+\t* gcc.dg/cpp/direct2.c: Likewise.  Adjust.\n+\t* gcc.dg/cpp/direct2s.c: Likewise.\n+\t* gcc/testsuite/gcc.dg/cpp/pr28709.c: Likewise.\n+\t* gcc.dg/cpp/pragma-diagnostic-1.c: Likewise.\n+\t* gcc.dg/dfp/composite-type.c: Likewise.\n+\t* gcc.dg/uninit-6-O0.c: Adjust the test case and force it to run\n+\twith -ftrack-macro-expansion\n+\t* g++.dg/cpp0x/constexpr-ex3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-overflow.C: Likewise.\n+\t* g++.dg/ext/cleanup-1.C: Likewise.\n+\t* g++.dg/ext/gnu-inline-global-reject.C: Likewise.\n+\t* g++.dg/template/sfinae10.C: Likewise.\n+\t* g++.dg/tm/wrap-2.C: Likewise.\n+\t* g++.dg/warn/Wconversion-real-integer.C: Likewise.\n+\t* g++.dg/warn/Wsign-conversion.C: Likewise.\n+\t* g++.dg/warn/multiple-overflow-warn-1.C: Likewise.\n+\t* g++.old-deja/g++.mike/p10769b.C: Likewise.\n+\t* g++.dg/warn/Wdouble-promotion.C: Adjust the test case and force\n+\tit to run with -ftrack-macro-expansion.\n+\t* libstdc++-v3/scripts/testsuite_flags.in: By default, run the\n+\ttest cases without -ftrack-macro-expansion.\n+\n \tFix location for static class members\n \t* g++.dg/template/sfinae6_neg.C: Adjust.\n "}, {"sha": "534fa0e9ea495db8ef95c79a9517cd260500b4a5", "filename": "gcc/testsuite/c-c++-common/tm/attrib-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fattrib-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fattrib-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fattrib-1.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-tm\" } */\n+/* { dg-options \"-fgnu-tm -ftrack-macro-expansion=0\" } */\n \n #define TC\t__attribute__((transaction_callable))\n #define TU\t__attribute__((transaction_unsafe))"}, {"sha": "0726f043916008d159ad960c6272b34884c5fbad", "filename": "gcc/testsuite/c-c++-common/warn-ommitted-condop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-Wparentheses\" } */\n+/* { dg-options \"-Wparentheses -ftrack-macro-expansion=0\" } */\n \n extern void f2 (int);\n "}, {"sha": "5c0b1e21cb7d04659e8ad992dc4e717d0a237daf", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++0x\" }\n+// { dg-options \"-std=c++0x -ftrack-macro-expansion=0\" }\n \n #define SA(X) static_assert (X, #X)\n "}, {"sha": "3eb27aa0a88bbffd3647d9aa7d87ed24090ef0bd", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-overflow.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-overflow.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-overflow.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-overflow.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++0x -w\" }\n+// { dg-options \"-std=c++0x -w -ftrack-macro-expansion=0\" }\n \n #include <limits.h>\n extern constexpr int max_s = INT_MAX + 1;  // { dg-error \"\" }"}, {"sha": "7cf14c9981249cf57dce429186976328707a7b26", "filename": "gcc/testsuite/g++.dg/ext/cleanup-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcleanup-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcleanup-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcleanup-1.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wall\" } */\n+/* { dg-options \"-Wall -ftrack-macro-expansion=0\" } */\n /* Validate expected warnings and errors.  */\n \n #define U\t__attribute__((unused))"}, {"sha": "fc7385d809a745d63a9a5f5b98e950aef8684556", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-global-reject.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -4,7 +4,7 @@\n */\n \n /* { dg-do compile } */\n-/* { dg-options \" -ansi -Wno-long-long\" } */\n+/* { dg-options \" -ansi -Wno-long-long -ftrack-macro-expansion=0\" } */\n \n #include \"gnu-inline-common.h\"\n "}, {"sha": "3b1d26bea8c1562d70bb605cb8e015d2f62b740c", "filename": "gcc/testsuite/g++.dg/template/sfinae10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae10.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,7 +1,7 @@\n // DR 339\n //\n // Test of the use of various unary operators with SFINAE\n-\n+// { dg-options \"-fmessage-length=0 -pedantic-errors -Wno-long-long -ftrack-macro-expansion=0 \" }\n // Boilerplate helpers\n typedef char yes_type;\n struct no_type { char data[2]; };"}, {"sha": "e2948c8c575ff348e8333d2dbafae55c7e4c9e76", "filename": "gcc/testsuite/g++.dg/tm/wrap-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fwrap-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fwrap-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fwrap-2.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-tm\" } */\n+/* { dg-options \"-fgnu-tm -ftrack-macro-expansion=0\" } */\n \n #define W(X)\t__attribute__((transaction_wrap(X)))\n void f1(void);"}, {"sha": "3b6d1f3c437c0af837f7906c1f11e3e05c71fd19", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -3,7 +3,7 @@\n    gcc/testsuite/gcc.dg/Wconversion-real-integer.c */\n \n /* { dg-do compile }\n-/* { dg-options \"-Wconversion\" } */\n+/* { dg-options \"-Wconversion -ftrack-macro-expansion=0\" } */\n /* { dg-require-effective-target int32plus } */\n #include <limits.h>\n "}, {"sha": "98d2eeda79e773cb6cb115b598051f59791d8a20", "filename": "gcc/testsuite/g++.dg/warn/Wdouble-promotion.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdouble-promotion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdouble-promotion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdouble-promotion.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wdouble-promotion\" } */\n+/* { dg-options \"-Wdouble-promotion -ftrack-macro-expansion=2\" } */\n \n #include <stddef.h>\n \n /* Some targets do not provide <complex.h> so we define I ourselves.  */\n #define I 1.0iF\n-#define ID ((_Complex double)I)\n+#define ID ((_Complex double)I) // { dg-warning \"implicit\" }\n \n float f;\n double d;\n@@ -36,7 +36,7 @@ usual_arithmetic_conversions(void)\n \n   local_cf = cf + 1.0;       /* { dg-warning \"implicit\" } */\n   local_cf = cf - d;         /* { dg-warning \"implicit\" } */\n-  local_cf = cf + 1.0 * ID;  /* { dg-warning \"implicit\" } */\n+  local_cf = cf + 1.0 * ID;  /* { dg-message \"expanded from here\" } */\n   local_cf = cf - cd;        /* { dg-warning \"implicit\" } */\n   \n   local_f = i ? f : d;       /* { dg-warning \"implicit\" } */"}, {"sha": "f6a0cccdffc8de6df0522041414bd0aa5e9517ae", "filename": "gcc/testsuite/g++.dg/warn/Wsign-conversion.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -3,7 +3,7 @@\n    C++ equivalent of gcc/testsuite/gcc.dg/Wsign-conversion.c  */\n \n // { dg-do compile } \n-// { dg-options \"-fsigned-char -Wsign-conversion\" } \n+// { dg-options \"-fsigned-char -Wsign-conversion -ftrack-macro-expansion=0\" } \n #include <limits.h>\n \n void fsc (signed char sc);"}, {"sha": "c941c1333215a1cd16e26d61488572ccdb21a272", "filename": "gcc/testsuite/g++.dg/warn/multiple-overflow-warn-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,6 +1,6 @@\n /* PR c/19978 : Test for duplicated warnings (unary operators).  */\n /* { dg-do compile } */\n-/* { dg-options \"-Woverflow\" } */\n+/* { dg-options \"-Woverflow -ftrack-macro-expansion=0\" } */\n \n #include <limits.h>\n "}, {"sha": "9c2dd297111f83e068a59a0b2b83135fdc308e41", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10769b.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"\" }\n+// { dg-options \"-ftrack-macro-expansion=0\" }\n // prms-id: 10769\n \n #define PMF2PF(PMF) ((void (*)())(PMF))"}, {"sha": "f26a5447ea0cd56540cc6ecc0d11df05906d0d65", "filename": "gcc/testsuite/gcc.dg/assign-warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,7 +1,7 @@\n /* Test diagnostics for bad implicit type conversions.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-pedantic\" } */\n+/* { dg-options \"-pedantic -ftrack-macro-expansion=0\" } */\n \n #define TESTARG(ID, TL, TR) void ID##F(TL); void ID##F2(TR x) { ID##F(x); } extern int dummy\n #define TESTARP(ID, TL, TR) struct { void (*x)(TL); } ID##Fp; void ID##F2(TR x) { ID##Fp.x(x); } extern int dummy"}, {"sha": "1e5eb1ca6e59d6562271c3dd4e7c69d65afa535b", "filename": "gcc/testsuite/gcc.dg/assign-warn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -2,7 +2,7 @@\n    -pedantic-errors test.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-pedantic-errors\" } */\n+/* { dg-options \"-pedantic-errors -ftrack-macro-expansion=0\" } */\n \n #define TESTARG(ID, TL, TR) void ID##F(TL); void ID##F2(TR x) { ID##F(x); } extern int dummy\n #define TESTARP(ID, TL, TR) struct { void (*x)(TL); } ID##Fp; void ID##F2(TR x) { ID##Fp.x(x); } extern int dummy"}, {"sha": "e8129ceae961c6d25468471ab295aaecef31f44d", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Wall\" } */\n+/* { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n \n extern void abort (void);\n "}, {"sha": "beecab652e362acefed5276e7062c83acbf93231", "filename": "gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,7 +1,7 @@\n /* Test whether buffer overflow warnings for __*_chk builtins\n    are emitted properly.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -std=gnu99\" } */\n+/* { dg-options \"-O2 -std=gnu99 -ftrack-macro-expansion=0\" } */\n /* { dg-options \"-mstructure-size-boundary=8 -O2 -std=gnu99\" { target arm*-*-* } } */\n \n extern void abort (void);"}, {"sha": "7c2bb60981643e9d7cffac240a92ce3ade5122d7", "filename": "gcc/testsuite/gcc.dg/builtin-stringop-chk-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-2.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -3,7 +3,7 @@\n    incorrectly determined to be 0 while it should be (size_t) -1\n    (== unknown).  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -ftrack-macro-expansion=0\" } */\n \n #include \"../gcc.c-torture/execute/builtins/chk.h\"\n    "}, {"sha": "44677f16778257bec02bdf1c9f6494c7481a31bd", "filename": "gcc/testsuite/gcc.dg/builtin-strncat-chk-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-strncat-chk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-strncat-chk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-strncat-chk-1.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,7 +1,7 @@\n /* Test whether buffer overflow warnings for __strncat_chk builtin\n    are emitted properly.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -std=gnu99\" } */\n+/* { dg-options \"-O2 -std=gnu99 -ftrack-macro-expansion=0\" } */\n \n extern void abort (void);\n "}, {"sha": "4793a14b6c4e61f1beaf6b50f8d89c346629ebc6", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -3,7 +3,7 @@\n    expansion.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors -ftrack-macro-expansion=0\" } */\n \n struct s {\n   int a;"}, {"sha": "11e0b2c08b31b4b2545ea186c6c6915f0919c393", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-9.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -3,7 +3,7 @@\n    expansion.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors -ftrack-macro-expansion=0\" } */\n \n struct s {\n   int a;"}, {"sha": "1ce40bfb58fa5278ea1282bf39c37da7571191e0", "filename": "gcc/testsuite/gcc.dg/cpp/direct2.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -4,18 +4,20 @@\n /* Test of prohibition on directives which result from macro expansion.\n    See also direct2s.c */\n \n-/* { dg-do compile } */\n+/* \n+   { dg-options \"-ftrack-macro-expansion=0\" }\n+   { dg-do compile } */\n \n #define HASH #\n #define HASHDEFINE #define\n #define HASHINCLUDE #include\n \n HASH include \"somerandomfile\" /*{ dg-error \"stray\" \"non-include\" }*/\n-/*{ dg-bogus \"No such\" \"don't execute non-include\" { target *-*-* } 13 }*/\n-int resync_parser_1; /*{ dg-error \"parse|syntax|expected\" \"\" { target *-*-* } 13 }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include\" { target *-*-* } 15 }*/\n+int resync_parser_1; /*{ dg-error \"parse|syntax|expected\" \"\" { target *-*-* } 15 }*/\n \n HASHINCLUDE <somerandomfile> /*{ dg-error \"stray|expected\" \"non-include 2\" }*/\n-/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 17 }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 19 }*/\n int resync_parser_2;\n \n void g1 ()\n@@ -43,4 +45,4 @@ void f ()\n #define starslash *##/\n \n slashstar starslash /* { dg-error \"parse error|syntax error|expected\" \"not a comment\" } */\n-/* { dg-error \"does not give\" \"paste warning(s)\" { target *-*-* } 45 } */\n+/* { dg-error \"does not give\" \"paste warning(s)\" { target *-*-* } 47 } */"}, {"sha": "592321419443cd9963afa6c38a89e1624c88a0a7", "filename": "gcc/testsuite/gcc.dg/cpp/direct2s.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -6,7 +6,7 @@\n    should be identical.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-save-temps -ansi -pedantic-errors\" } */\n+/* { dg-options \"-save-temps -ansi -pedantic-errors -ftrack-macro-expansion=0\" } */\n \n #define HASH #\n #define HASHDEFINE #define"}, {"sha": "cb1755a34abdc4cb1a221ce382269c5f83ba34a0", "filename": "gcc/testsuite/gcc.dg/cpp/pr28709.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr28709.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr28709.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr28709.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,8 +1,10 @@\n /* Copyright (C) 2006 Free Software Foundation, Inc.  */\n /* PR preprocessor/28709 */\n \n-/* { dg-do compile } */\n+/* { dg-options \"-ftrack-macro-expansion=0\" }\n+   { dg-do compile } */\n+\n #define foo - ## >>\n foo;\n-/* { dg-error \"expected identifier.*'-'\" \"\" { target *-*-* } 6 } */\n-/* { dg-error pasting \"\" { target *-*-* } 6 } */\n+/* { dg-error \"expected identifier.*'-'\" \"\" { target *-*-* } 8 } */\n+/* { dg-error pasting \"\" { target *-*-* } 8 } */"}, {"sha": "add7360c5f8cba786b3763caf9621a37d236aefc", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-diagnostic-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-diagnostic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-diagnostic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-diagnostic-1.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,5 @@\n /*\n-  { dg-options \"-Wuninitialized\" }\n+  { dg-options \"-Wuninitialized -ftrack-macro-expansion=0\" }\n   { dg-do compile }\n */\n "}, {"sha": "6bf35f5c9417e0e42e65ecd639add84bab210357", "filename": "gcc/testsuite/gcc.dg/dfp/composite-type.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -Wall\" } */\n+/* { dg-options \"-O -Wall -ftrack-macro-expansion=0\" } */\n \n /* C99 6.2.7: Compatible type and composite type.  */\n "}, {"sha": "fe9815efbb660a2c4efa6214b6b9568cc6af6b9a", "filename": "gcc/testsuite/gcc.dg/uninit-6-O0.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -2,7 +2,7 @@\n    This one inspired by java/class.c:build_utf8_ref.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-Wuninitialized\" } */\n+/* { dg-options \"-Wuninitialized -ftrack-macro-expansion=2\" } */\n \n #include <stddef.h>\n \n@@ -24,7 +24,7 @@ do {\t\t\t\t\t\t\t\t\\\n      tmp->car = 0; tmp->cdr = 0; tmp->type = TYPE;\t\t\\\n      tmp->data = VALUE;\t\t\t\t\t\t\\\n      if (TREE->car)\t\t\t\t\t\t\\\n-\t LAST->cdr = tmp;\t\t\t\t\t\\\n+\t LAST->cdr = tmp;\t  /* { dg-bogus \"field\" \"uninitialized variable warning\" { xfail *-*-* } } */\t\t\t\t\\\n      else\t\t\t\t\t\t\t\\\n \t TREE->car = tmp;\t\t\t\t\t\\\n      LAST = tmp;\t\t\t\t\t\t\\\n@@ -39,7 +39,7 @@ make_something(int a, int b, int c)\n     rv = malloc (sizeof (struct tree));\n     rv->car = 0;\n \n-    APPEND(rv, field, INTEGER_T, a);  /* { dg-bogus \"field\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+    APPEND(rv, field, INTEGER_T, a);\n     APPEND(rv, field, PTR_T, b);\n     APPEND(rv, field, INTEGER_T, c);\n "}, {"sha": "a82869223b174056fdff3504d902f57400aa3cac", "filename": "gcc/testsuite/objc.dg/foreach-7.m", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-7.m?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -1,5 +1,8 @@\n /* Test basic Objective-C foreach syntax.  This tests warnings and errors.  */\n-/* { dg-do compile } */\n+/* \n+   { dg-options \"-ftrack-macro-expansion=0\" }\n+   { dg-do compile } \n+*/\n \n #import \"../objc-obj-c++-shared/TestsuiteObject.h\"\n #import <objc/objc.h>\n@@ -37,10 +40,10 @@ int main (void)\n   id object = nil;\n \n   for (typedef int my_typedef in array) /* { dg-error \"declaration of non-variable\" } */\n-    ;                                   /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 39 } */\n+    ;                                   /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 42 } */\n \n   for (function () in nil) /* { dg-error \"invalid iterating variable in fast enumeration\" } */\n-    ;                      /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 42 } */\n+    ;                      /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 45 } */\n \n   for (object_function () in nil) /* { dg-error \"invalid iterating variable in fast enumeration\" } */\n     ;"}, {"sha": "7b16bb1cbe5513a96582abf127566532d4da1be3", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde9c193ebf5d1a84e2d8609226de2a5dbb72309/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=dde9c193ebf5d1a84e2d8609226de2a5dbb72309", "patch": "@@ -54,7 +54,7 @@ case ${query} in\n       echo ${CC}\n       ;;\n     --cxxflags)\n-      CXXFLAGS_default=\"-D_GLIBCXX_ASSERT -fmessage-length=0\"\n+      CXXFLAGS_default=\"-D_GLIBCXX_ASSERT -fmessage-length=0 -ftrack-macro-expansion=0\"\n       CXXFLAGS_config=\"@SECTION_FLAGS@ @CXXFLAGS@ @EXTRA_CXX_FLAGS@\"\n       echo ${CXXFLAGS_default} ${CXXFLAGS_config}\n       ;;"}]}