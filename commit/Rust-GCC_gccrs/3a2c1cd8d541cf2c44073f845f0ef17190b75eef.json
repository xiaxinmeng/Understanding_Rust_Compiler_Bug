{"sha": "3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyYzFjZDhkNTQxY2YyYzQ0MDczZjg0NWYwZWYxNzE5MGI3NWVlZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-03T01:03:27Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-03T01:03:27Z"}, "message": "Add cygwin32; Put eabi .sdata2/.sbss2 into read-only memory\n\nFrom-SVN: r11162", "tree": {"sha": "0710d7018e71ed2fd547e76a568e6d68667b6e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0710d7018e71ed2fd547e76a568e6d68667b6e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/comments", "author": null, "committer": null, "parents": [{"sha": "d787aad9e533c6dac57c40a49346456957f45b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d787aad9e533c6dac57c40a49346456957f45b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d787aad9e533c6dac57c40a49346456957f45b41"}], "stats": {"total": 352, "additions": 347, "deletions": 5}, "files": [{"sha": "1145e2c9ce9262538386bd6771e28156786efc22", "filename": "gcc/config.sub", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.sub?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -653,7 +653,8 @@ case $os in\n \t      | -hiux* | -386bsd* | -netbsd* | -freebsd* | -riscix* \\\n \t      | -lynxos* | -bosx* | -nextstep* | -cxux* | -aout* | -elf* \\\n \t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n-\t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux*)\n+\t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\\n+\t      | -cygwin32* | -pe*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-sunos5*)"}, {"sha": "4ac4c91a3b18d8cff5e27f970b0d25a2f012aa34", "filename": "gcc/config/i386/cygwin32.asm", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fcygwin32.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fcygwin32.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin32.asm?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -0,0 +1,32 @@\n+/* stuff needed for libgcc1 on win32. */\n+\n+#ifdef L_chkstk\n+\n+\t.global ___chkstk\n+\t.global\t__alloca\n+___chkstk:\n+__alloca:\n+\tpushl  %ecx\t\t/* save temp */\n+\tmovl   %esp,%ecx\t/* get sp */\n+\taddl   $0x8,%ecx\t/* and point to return addr */\n+\n+probe: \tcmpl   $0x1000,%eax\t/* > 4k ?*/\n+\tjb    done\t\t\n+\n+\tsubl   $0x1000,%ecx  \t\t/* yes, move pointer down 4k*/\n+\torl    $0x0,(%ecx)   \t\t/* probe there */\n+\tsubl   $0x1000,%eax  \t \t/* decrement count */\n+\tjmp    probe           \t \t/* and do it again */\n+\n+done: \tsubl   %eax,%ecx\t   \n+\torl    $0x0,(%ecx)\t/* less that 4k, just peek here */\n+\n+\tmovl   %esp,%eax\n+\tmovl   %ecx,%esp\t/* decrement stack */\n+\n+\tmovl   (%eax),%ecx\t/* recover saved temp */\n+\tmovl   4(%eax),%eax\t/* get return address */\n+\tjmp    *%eax\t\n+\n+\n+#endif"}, {"sha": "9a5ed33b4db5b25f92c1c5d75ab5745e2042f611", "filename": "gcc/config/i386/cygwin32.h", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin32.h?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -0,0 +1,204 @@\n+/* Operating system specific defines to be used when targeting GCC for\n+   hosting on Windows NT 3.x, using a unix style C library and tools.\n+\n+   This is different to the winnt.h file, since that is used\n+   to build GCC for use with a windows style library and tool\n+   set, winnt.h uses the Microsoft tools to do that.\n+\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA. */\n+\n+\n+#define YES_UNDERSCORES\n+\n+#include \"i386/gas.h\"\n+\n+\n+#ifdef CPP_PREDEFINES\n+#undef CPP_PREDEFINES\n+#endif\n+\n+#define CPP_PREDEFINES \"-Di386 -D__WIN32__ \\\n+  -DPOSIX -D__CYGWIN32__ -DWINNT  -D_X86_=1 -D__STDC__=1\\\n+  -D__stdcall=__attribute__((__stdcall__)) \\\n+  -D__cdecl=__attribute__((__cdecl__)) \\\n+  -Asystem(winnt) -Acpu(i386) -Amachine(i386)\"\n+\n+/* We have to dynamic link to get to the system dlls,\n+   and I've put all of libc and libm and the unix stuff into\n+   cygwin.dll, the import library is called 'libcygwin.a' */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"-lcygwin\"\n+\n+/* No need for libgcc, it's in the shared library. */\n+#undef LIBGCC_SPEC\n+#define LIBGCC_SPEC \"\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!:crt0%O%s}\"\n+\n+#define SIZE_TYPE \"unsigned int\"\n+#define PTRDIFF_TYPE \"int\"\n+#define WCHAR_UNSIGNED 1\n+#define WCHAR_TYPE_SIZE 16\n+#define WCHAR_TYPE \"short unsigned int\"\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 64\n+#define HAVE_ATEXIT 1\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_ctor, in_dtor\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n+  CTOR_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTOR_SECTION_FUNCTION\n+\n+#define CTOR_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+ctor_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctor)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t.section .ctor\\n\");\t\t\\\n+      in_section = in_ctor;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTOR_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+dtor_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtor)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t.section .dtor\\n\");\t\t\\\n+      in_section = in_dtor;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n+  do {\t\t\t\t\t\t\\\n+    ctor_section ();\t\t\t\t\\\n+    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\\\n+  } while (0)\n+\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n+  do {\t\t\t\t\t\t\\\n+    dtor_section ();                   \t\t\\\n+    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    assemble_name (FILE, NAME);              \t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\\\n+  } while (0)\n+\n+/* Define this macro if references to a symbol must be treated\n+   differently depending on something about the variable or\n+   function named by the symbol (such as what section it is in).\n+\n+   On i386, if using PIC, mark a SYMBOL_REF for a non-global symbol\n+   so that we may access it directly in the GOT.\n+\n+   On i386 running Windows NT, modify the assembler name with a suffix \n+   consisting of an atsign (@) followed by string of digits that represents\n+   the number of bytes of arguments passed to the function, if it has the \n+   attribute STDCALL. */\n+\n+#ifdef ENCODE_SECTION_INFO\n+#undef ENCODE_SECTION_INFO\n+#define ENCODE_SECTION_INFO(DECL) \t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if (flag_pic)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n+\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\t\\\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\t\t\\\n+\t  = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n+\t     || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (TREE_CODE (DECL) == FUNCTION_DECL) \t\t\t\t\\\n+      if (lookup_attribute (\"stdcall\",\t\t\t\t\t\\\n+\t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (DECL))))\t\\\n+        XEXP (DECL_RTL (DECL), 0) = \t\t\t\t\t\\\n+          gen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (DECL)); \t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+#endif\n+\n+/* Emit code to check the stack when allocating more that 20\n+   bytes in one go. */\n+\n+#define CHECK_STACK_LIMIT 20\n+\n+\n+\n+/* By default, target has a 80387, uses IEEE compatible arithmetic,\n+   and returns float values in the 387 and needs stack probes */\n+#undef TARGET_DEFAULT\n+\n+#define TARGET_DEFAULT \\\n+   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE) \n+\n+#define DBX_DEBUGGING_INFO \n+#define SDB_DEBUGGING_INFO \n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+\n+/* A C statement to output something to the assembler file to switch to section\n+   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n+   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n+   define this macro in such cases.  */\n+\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+  fprintf (FILE, \"\\t.section %s\\n\", NAME)\n+\n+#undef  ASM_OUTPUT_SOURCE_LINE\n+#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    static int sym_lineno = 1;\t\t\t\t\t\t\\\n+    fprintf (file, \"\\t.stabn 68,0,%d,.LM%d-\",\t\t\t\t\\\n+\t     line, sym_lineno);\t\t\t\t\t\t\\\n+    assemble_name (file, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n+    fprintf (file, \"\\n.LM%d:\\n\", sym_lineno);\t\t\t\t\\\n+    sym_lineno += 1;\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* Generate a blank trailing N_SO to mark the end of the .o file, since\n+   we can't depend upon the linker to mark .o file boundaries with\n+   embedded stabs.  */\n+\n+#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n+  fprintf (FILE,\t\t\t\t\t\t\t\\\n+\t   \"\\t.text\\n\\t.stabs \\\"\\\",%d,0,0,Letext\\nLetext:\\n\", N_SO)\n+\n+/* Make LBRAC and RBRAC addresses relative to the start of the\n+   function.  The native Solaris stabs debugging format works this\n+   way, gdb expects it, and it reduces the number of relocation\n+   entries.  */\n+\n+#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n+\n+/* In order for relative line numbers to work, we must output the\n+   stabs entry for the function name first.  */\n+\n+#define DBX_FUNCTION_FIRST"}, {"sha": "cc523cb0522f0893988f1b0354485180e4a43f22", "filename": "gcc/config/i386/t-cygwin32", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Ft-cygwin32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Ft-cygwin32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygwin32?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -0,0 +1,9 @@\n+# CYGNUS LOCAL entire file\n+LIBGCC1 = libgcc1-asm.a\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = i386/cygwin32.asm\n+LIB1ASMFUNCS = _chkstk\n+\n+winnt.o: $(srcdir)/config/i386/winnt.c\n+\t$(CC) -I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/i386/winnt.c\n+"}, {"sha": "b81c1514a08cf79fa4a5f6035c9847416bd27bb8", "filename": "gcc/config/i386/x-cygwin32", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fx-cygwin32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fx-cygwin32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-cygwin32?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -0,0 +1,2 @@\n+USE_COLLECT2 =\n+LANGUAGES=c c++ objective-c"}, {"sha": "1ee4c47a3fdbe81ee41ecb316560e9b66a2ff256", "filename": "gcc/config/i386/xm-cygwin32.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -0,0 +1,30 @@\n+/* Configuration for GNU C-compiler for hosting on Windows NT.\n+   using a unix style C library.\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#define NO_STAB_H\n+\n+#include \"i386/xm-i386.h\"\n+\n+#define HAVE_STRERROR\n+#define HAVE_RUSAGE\n+#define HAVE_FILE_H\n+\n+"}, {"sha": "26e96bb7bdc49830773f4e893193ce257bc92dbe", "filename": "gcc/config/rs6000/cygwin32.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Frs6000%2Fcygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Frs6000%2Fcygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcygwin32.h?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -0,0 +1,64 @@\n+/* Operating system specific defines to be used when targeting GCC for\n+   hosting on Windows NT 3.x, using the Cygnus API \n+\n+   This is different to the winnt.h file, since that is used\n+   to build GCC for use with a windows style library and tool\n+   set, winnt.h uses the Microsoft tools to do that.\n+\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA. */\n+\n+\n+/* Ugly hack */\n+#include \"rs6000/win-nt.h\"\n+\n+\n+#ifdef CPP_PREDEFINES\n+#undef CPP_PREDEFINES\n+#endif\n+\n+#define\tCPP_PREDEFINES \"-DWIN32 -D__WIN32__ -D__WINNT__ \\\n+  -D__CYGWIN32__ -DPOSIX \\\n+  -D_POWER -DPPC -Asystem(winnt) -Acpu(powerpc) -Amachine(powerpc)\"\n+\n+/* We have to dynamic link to get to the system dlls,\n+   and I've put all of libc and libm and the unix stuff into\n+   cygwin.dll, the import library is called 'libcygwin.a' */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"-lcygwin\"\n+\n+\n+#undef\tLINK_SPEC\n+#define\tLINK_SPEC \"%{V} %{v:%{!V:-V}}\"\n+\n+\n+/* No need for libgcc, it's in the shared library. */\n+#undef LIBGCC_SPEC\n+#define LIBGCC_SPEC \"\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!:crt0%O%s}\"\n+\n+#define PTRDIFF_TYPE \"int\"\n+#define WCHAR_UNSIGNED 1\n+#define WCHAR_TYPE_SIZE 16\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+/* XXX set up stack probing */"}, {"sha": "62008231b608929cf284f42f0434d8de9cb15846", "filename": "gcc/config/rs6000/eabi-ci.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -85,15 +85,15 @@ _SDA_BASE_:\n \t.type\t__SBSS_START__,@object\n __SBSS_START__:\n \n-\t.section \".sdata2\",\"aw\"\n+\t.section \".sdata2\",\"a\"\n \t.weak\t_SDA2_BASE_\n \t.type\t_SDA2_BASE_,@object\n \t.globl\t__SDATA2_START__\n \t.type\t__SDATA2_START__,@object\n __SDATA2_START__:\n _SDA2_BASE_:\n \n-\t.section \".sbss2\",\"aw\"\n+\t.section \".sbss2\",\"a\",@nobits\n \t.globl\t__SBSS2_START__\n \t.type\t__SBSS2_START__,@object\n __SBSS2_START__:"}, {"sha": "fdcfb62ae2dcb54c775c1cb109dbf17b2ce1fb35", "filename": "gcc/config/rs6000/eabi-cn.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2c1cd8d541cf2c44073f845f0ef17190b75eef/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm?ref=3a2c1cd8d541cf2c44073f845f0ef17190b75eef", "patch": "@@ -79,12 +79,12 @@ __SDATA_END__:\n \t.type\t__SBSS_END__,@object\n __SBSS_END__:\n \n-\t.section \".sdata2\",\"aw\"\n+\t.section \".sdata2\",\"a\"\n \t.globl\t__SDATA2_END__\n \t.type\t__SDATA2_END__,@object\n __SDATA2_END__:\n \n-\t.section \".sbss2\",\"aw\"\n+\t.section \".sbss2\",\"a\"\n \t.globl\t__SBSS2_END__\n \t.type\t__SBSS2_END__,@object\n __SBSS2_END__:"}]}