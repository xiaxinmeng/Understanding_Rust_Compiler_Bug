{"sha": "32ce1e4f244830404328e5a45d062c2f5bee662d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJjZTFlNGYyNDQ4MzA0MDQzMjhlNWE0NWQwNjJjMmY1YmVlNjYyZA==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2016-12-02T15:30:37Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2016-12-02T15:30:37Z"}, "message": "Handling ARMv8-M Security Extension's cmse_nonsecure_call attribute\n\n    gcc/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t        Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm.c (gimplify.h): New include.\n\t(arm_handle_cmse_nonsecure_call): New.\n\t(arm_attribute_table): Added cmse_nonsecure_call.\n\t(arm_comp_type_attributes): Deny compatibility of function types\n\twith without the cmse_nonsecure_call attribute.\n\t* doc/extend.texi (ARM ARMv8-M Security Extensions): New attribute.\n\n    gcc/testsuite/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t        Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/cmse-3.c: Add tests.\n\t* gcc.target/arm/cmse/cmse-4.c: Add tests.\n\t* gcc.target/arm/cmse/cmse-15.c: New.\n\n\nCo-Authored-By: Thomas Preud'homme <thomas.preudhomme@arm.com>\n\nFrom-SVN: r243191", "tree": {"sha": "cab196205186467cde60d3c97b01bbb2ea3770d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cab196205186467cde60d3c97b01bbb2ea3770d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ce1e4f244830404328e5a45d062c2f5bee662d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ce1e4f244830404328e5a45d062c2f5bee662d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ce1e4f244830404328e5a45d062c2f5bee662d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ce1e4f244830404328e5a45d062c2f5bee662d/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de954d6a5fb7dbb2c4c0a646a5e59727b06847c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de954d6a5fb7dbb2c4c0a646a5e59727b06847c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de954d6a5fb7dbb2c4c0a646a5e59727b06847c1"}], "stats": {"total": 192, "additions": 190, "deletions": 2}, "files": [{"sha": "ce79fdd107725b529f7d83aaa6dd95d935e849f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32ce1e4f244830404328e5a45d062c2f5bee662d", "patch": "@@ -1,3 +1,13 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.c (gimplify.h): New include.\n+\t(arm_handle_cmse_nonsecure_call): New.\n+\t(arm_attribute_table): Added cmse_nonsecure_call.\n+\t(arm_comp_type_attributes): Deny compatibility of function types\n+\twith without the cmse_nonsecure_call attribute.\n+\t* doc/extend.texi (ARM ARMv8-M Security Extensions): New attribute.\n+\n 2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "a6b07b295e3ca6679b1edd988fcf01929b0e06f3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=32ce1e4f244830404328e5a45d062c2f5bee662d", "patch": "@@ -63,6 +63,7 @@\n #include \"tm-constrs.h\"\n #include \"rtl-iter.h\"\n #include \"optabs-libfuncs.h\"\n+#include \"gimplify.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -137,6 +138,7 @@ static tree arm_handle_isr_attribute (tree *, tree, tree, int, bool *);\n static tree arm_handle_notshared_attribute (tree *, tree, tree, int, bool *);\n #endif\n static tree arm_handle_cmse_nonsecure_entry (tree *, tree, tree, int, bool *);\n+static tree arm_handle_cmse_nonsecure_call (tree *, tree, tree, int, bool *);\n static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static int arm_comp_type_attributes (const_tree, const_tree);\n@@ -348,6 +350,8 @@ static const struct attribute_spec arm_attribute_table[] =\n   /* ARMv8-M Security Extensions support.  */\n   { \"cmse_nonsecure_entry\", 0, 0, true, false, false,\n     arm_handle_cmse_nonsecure_entry, false },\n+  { \"cmse_nonsecure_call\", 0, 0, true, false, false,\n+    arm_handle_cmse_nonsecure_call, true },\n   { NULL,           0, 0, false, false, false, NULL, false }\n };\n \f\n@@ -6753,6 +6757,78 @@ arm_handle_cmse_nonsecure_entry (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+\n+/* Called upon detection of the use of the cmse_nonsecure_call attribute, this\n+   function will check whether the attribute is allowed here and will add the\n+   attribute to the function type tree or otherwise issue a diagnostic.  The\n+   reason we check this at declaration time is to only allow the use of the\n+   attribute with declarations of function pointers and not function\n+   declarations.  This function checks NODE is of the expected type and issues\n+   diagnostics otherwise using NAME.  If it is not of the expected type\n+   *NO_ADD_ATTRS will be set to true.  */\n+\n+static tree\n+arm_handle_cmse_nonsecure_call (tree *node, tree name,\n+\t\t\t\t tree /* args */,\n+\t\t\t\t int /* flags */,\n+\t\t\t\t bool *no_add_attrs)\n+{\n+  tree decl = NULL_TREE, fntype = NULL_TREE;\n+  tree main_variant, type;\n+\n+  if (!use_cmse)\n+    {\n+      *no_add_attrs = true;\n+      warning (OPT_Wattributes, \"%qE attribute ignored without -mcmse option.\",\n+\t       name);\n+      return NULL_TREE;\n+    }\n+\n+  if (TREE_CODE (*node) == VAR_DECL || TREE_CODE (*node) == TYPE_DECL)\n+    {\n+      decl = *node;\n+      fntype = TREE_TYPE (decl);\n+    }\n+\n+  while (fntype != NULL_TREE && TREE_CODE (fntype) == POINTER_TYPE)\n+    fntype = TREE_TYPE (fntype);\n+\n+  if (!decl || TREE_CODE (fntype) != FUNCTION_TYPE)\n+    {\n+\twarning (OPT_Wattributes, \"%qE attribute only applies to base type of a \"\n+\t\t \"function pointer\", name);\n+\t*no_add_attrs = true;\n+\treturn NULL_TREE;\n+    }\n+\n+  *no_add_attrs |= cmse_func_args_or_return_in_stack (NULL, name, fntype);\n+\n+  if (*no_add_attrs)\n+    return NULL_TREE;\n+\n+  /* Prevent trees being shared among function types with and without\n+     cmse_nonsecure_call attribute.  */\n+  type = TREE_TYPE (decl);\n+\n+  type = build_distinct_type_copy (type);\n+  TREE_TYPE (decl) = type;\n+  fntype = type;\n+\n+  while (TREE_CODE (fntype) != FUNCTION_TYPE)\n+    {\n+      type = fntype;\n+      fntype = TREE_TYPE (fntype);\n+      fntype = build_distinct_type_copy (fntype);\n+      TREE_TYPE (type) = fntype;\n+    }\n+\n+  /* Construct a type attribute and add it to the function type.  */\n+  tree attrs = tree_cons (get_identifier (\"cmse_nonsecure_call\"), NULL_TREE,\n+\t\t\t  TYPE_ATTRIBUTES (fntype));\n+  TYPE_ATTRIBUTES (fntype) = attrs;\n+  return NULL_TREE;\n+}\n+\n /* Return 0 if the attributes for two types are incompatible, 1 if they\n    are compatible, and 2 if they are nearly compatible (which causes a\n    warning to be generated).  */\n@@ -6793,6 +6869,14 @@ arm_comp_type_attributes (const_tree type1, const_tree type2)\n   if (l1 != l2)\n     return 0;\n \n+  l1 = lookup_attribute (\"cmse_nonsecure_call\",\n+\t\t\t TYPE_ATTRIBUTES (type1)) != NULL;\n+  l2 = lookup_attribute (\"cmse_nonsecure_call\",\n+\t\t\t TYPE_ATTRIBUTES (type2)) != NULL;\n+\n+  if (l1 != l2)\n+    return 0;\n+\n   return 1;\n }\n "}, {"sha": "0fa59ff1baf77ccc48a3049559ae489dd3ed3d1a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=32ce1e4f244830404328e5a45d062c2f5bee662d", "patch": "@@ -12648,8 +12648,8 @@ Security Extensions: Requiremenets on Development Tools Engineering\n Specification, which can be found at\n @uref{http://infocenter.arm.com/help/topic/com.arm.doc.ecm0359818/ECM0359818_armv8m_security_extensions_reqs_on_dev_tools_1_0.pdf}.\n \n-As part of the Security Extensions GCC implements a new function attribute\n-@code{cmse_nonsecure_entry}.\n+As part of the Security Extensions GCC implements two new function attributes:\n+@code{cmse_nonsecure_entry} and @code{cmse_nonsecure_call}.\n \n As part of the Security Extensions GCC implements the intrinsics below.  FPTR\n is used here to mean any function pointer type."}, {"sha": "ca431e4a548c5dbf2d2c8ebb86b526a23c18279c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32ce1e4f244830404328e5a45d062c2f5bee662d", "patch": "@@ -1,3 +1,10 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* gcc.target/arm/cmse/cmse-3.c: Add tests.\n+\t* gcc.target/arm/cmse/cmse-4.c: Add tests.\n+\t* gcc.target/arm/cmse/cmse-15.c: New.\n+\n 2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "4e9ace1f3f33b8a8653797e29ca62eb3dd7ae918", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-15.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-15.c?ref=32ce1e4f244830404328e5a45d062c2f5bee662d", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+int __attribute__ ((cmse_nonsecure_call)) (*ns_foo) (void);\n+int (*s_bar) (void);\n+int __attribute__ ((cmse_nonsecure_call)) (**ns_foo2) (void);\n+int (**s_bar2) (void);\n+\n+typedef int __attribute__ ((cmse_nonsecure_call)) ns_foo_t (void);\n+typedef int s_bar_t (void);\n+typedef int __attribute__ ((cmse_nonsecure_call)) (* ns_foo_ptr) (void);\n+typedef int (*s_bar_ptr) (void);\n+\n+int nonsecure0 (ns_foo_t * ns_foo_p)\n+{\n+  return ns_foo_p ();\n+}\n+\n+int nonsecure1 (ns_foo_t ** ns_foo_p)\n+{\n+  return (*ns_foo_p) ();\n+}\n+\n+int nonsecure2 (ns_foo_ptr ns_foo_p)\n+{\n+  return ns_foo_p ();\n+}\n+int nonsecure3 (ns_foo_ptr * ns_foo_p)\n+{\n+  return (*ns_foo_p) ();\n+}\n+\n+int secure0 (s_bar_t * s_bar_p)\n+{\n+  return s_bar_p ();\n+}\n+\n+int secure1 (s_bar_t ** s_bar_p)\n+{\n+  return (*s_bar_p) ();\n+}\n+\n+int secure2 (s_bar_ptr s_bar_p)\n+{\n+  return s_bar_p ();\n+}\n+\n+int secure3 (s_bar_ptr * s_bar_p)\n+{\n+  return (*s_bar_p) ();\n+}\n+\n+int nonsecure4 (void)\n+{\n+  return ns_foo ();\n+}\n+\n+int nonsecure5 (void)\n+{\n+  return (*ns_foo2) ();\n+}\n+\n+int secure4 (void)\n+{\n+  return s_bar ();\n+}\n+\n+int secure5 (void)\n+{\n+  return (*s_bar2) ();\n+}\n+/* { dg-final { scan-assembler-times \"bl\\\\s+__gnu_cmse_nonsecure_call\" 6 } } */"}, {"sha": "7f92a4c28b3333e4c8fdc256211f3ed74a383cd4", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-3.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-3.c?ref=32ce1e4f244830404328e5a45d062c2f5bee662d", "patch": "@@ -35,3 +35,11 @@ norf (struct span2 a) {}\n \n void __attribute__ ((cmse_nonsecure_entry))\n foo2 (long long a, int b, union test_union c) {} /* { dg-error \"not available to functions with arguments passed on the stack\" } */\n+\n+typedef void __attribute__ ((cmse_nonsecure_call)) bar2 (long long a, int b, long long c); /* { dg-error \"not available to functions with arguments passed on the stack\" } */\n+\n+typedef void __attribute__ ((cmse_nonsecure_call)) baz2 (long long a, int b, struct span c); /* { dg-error \"not available to functions with arguments passed on the stack\" } */\n+\n+typedef struct span __attribute__ ((cmse_nonsecure_call)) qux2 (void); /* { dg-error \"not available to functions that return value on the stack\" } */\n+\n+typedef void __attribute__ ((cmse_nonsecure_call)) norf2 (int a, ...); /* { dg-error \"not available to functions with variable number of arguments\" } */"}, {"sha": "d0999a4181ac022b115ae20cf3e1c8bf78f6becf", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-4.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ce1e4f244830404328e5a45d062c2f5bee662d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-4.c?ref=32ce1e4f244830404328e5a45d062c2f5bee662d", "patch": "@@ -19,9 +19,16 @@ baz (void)\n   return qux ();\n }\n \n+void __attribute__ ((cmse_nonsecure_call))\n+quux (void) {} /* { dg-warning \"attribute only applies to base type of a function pointer\" } */\n+\n+int __attribute__ ((cmse_nonsecure_call)) norf; /* { dg-warning \"attribute only applies to base type of a function pointer\" } */\n+\n /* { dg-final { scan-assembler-times \"bxns\" 2 } } */\n /* { dg-final { scan-assembler \"foo:\" } } */\n /* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n /* { dg-final { scan-assembler-not \"__acle_se_bar:\" } } */\n /* { dg-final { scan-assembler \"baz:\" } } */\n /* { dg-final { scan-assembler \"__acle_se_baz:\" } } */\n+/* { dg-final { scan-assembler-not \"__acle_se_quux:\" } } */\n+/* { dg-final { scan-assembler-not \"__acle_se_norf:\" } } */"}]}