{"sha": "bddbfe5f6707bb2a3a4085d35c3c0753800dd5df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRkYmZlNWY2NzA3YmIyYTNhNDA4NWQzNWMzYzA3NTM4MDBkZDVkZg==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@ds2.pg.gda.pl", "date": "2004-02-28T20:06:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-02-28T20:06:01Z"}, "message": "mips.md: Complete the unfinished R4000 multiply/shift errata workaround.\n\n\t* config/mips/mips.md: Complete the unfinished R4000\n\tmultiply/shift errata workaround.  Improve documentation.\n\t(hazard): Use TARGET_FIX_R4000 to decide whether an \"imul\" instruction\n\thas a hilo hazard.\n\t(mulsi3, mulsi3_internal, mulsi3_r4000): Use TARGET_FIX_R4000.\n\t(muldi3, muldi3_internal): Likewise.\n\t(muldi3_internal2): Remove, replacing with...\n\t(muldi3_mult3, muldi3_r4000): ...these new patterns.\n\t(mulsidi3): Take the errata into account.\n\t(mulsidi3_32bit): Remove, replacing with...\n\t(mulsidi3_32bit_internal, mulsidi3_32bit_r4000): ...these new patterns.\n\t(mulsidi3_64bit, mulsidi3_64bit_parts): Disable if TARGET_FIX_R4000.\n\t(umulsidi3): Take the errata into account.\n\t(umulsidi3_32bit): Remove, replacing with..\n\t(umulsidi3_32bit_internal, umulsidi3_32bit_r4000): ...these patterns.\n\t(umulsi3_highpart, umulsi3_highpart_internal): Disable if\n\tTARGET_FIX_R4000.\n\t(smulsi3_highpart, smulsi3_highpart_internal): Likewise.\n\t(smuldi3_highpart, umuldi3_highpart): Likewise.\n\t* doc/invoke.texi: Document the errata workaround.\n\nFrom-SVN: r78622", "tree": {"sha": "3406ca6d90e692f93d6143cdc9697f10661275f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3406ca6d90e692f93d6143cdc9697f10661275f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df/comments", "author": null, "committer": null, "parents": [{"sha": "4649040309b011c972e0ffbd0e1c336cb490eed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4649040309b011c972e0ffbd0e1c336cb490eed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4649040309b011c972e0ffbd0e1c336cb490eed3"}], "stats": {"total": 190, "additions": 150, "deletions": 40}, "files": [{"sha": "91fc11554d8f90523a2fb898761449198cf2255e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bddbfe5f6707bb2a3a4085d35c3c0753800dd5df", "patch": "@@ -1,3 +1,26 @@\n+2004-02-28  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n+\n+\t* config/mips/mips.md: Complete the unfinished R4000\n+\tmultiply/shift errata workaround.  Improve documentation.\n+\t(hazard): Use TARGET_FIX_R4000 to decide whether an \"imul\" instruction\n+\thas a hilo hazard.\n+\t(mulsi3, mulsi3_internal, mulsi3_r4000): Use TARGET_FIX_R4000.\n+\t(muldi3, muldi3_internal): Likewise.\n+\t(muldi3_internal2): Remove, replacing with...\n+\t(muldi3_mult3, muldi3_r4000): ...these new patterns.\n+\t(mulsidi3): Take the errata into account.\n+\t(mulsidi3_32bit): Remove, replacing with...\n+\t(mulsidi3_32bit_internal, mulsidi3_32bit_r4000): ...these new patterns.\n+\t(mulsidi3_64bit, mulsidi3_64bit_parts): Disable if TARGET_FIX_R4000.\n+\t(umulsidi3): Take the errata into account.\n+\t(umulsidi3_32bit): Remove, replacing with..\n+\t(umulsidi3_32bit_internal, umulsidi3_32bit_r4000): ...these patterns.\n+\t(umulsi3_highpart, umulsi3_highpart_internal): Disable if\n+\tTARGET_FIX_R4000.\n+\t(smulsi3_highpart, smulsi3_highpart_internal): Likewise.\n+\t(smuldi3_highpart, umuldi3_highpart): Likewise.\n+\t* doc/invoke.texi: Document the errata workaround.\n+\n 2004-02-28  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n \n \t* config/mips/mips-protos.h (mips_idiv_insns): Declare."}, {"sha": "0858040ef4c884b69695764e9c2984174bd67be3", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 124, "deletions": 40, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=bddbfe5f6707bb2a3a4085d35c3c0753800dd5df", "patch": "@@ -233,7 +233,7 @@\n \n \t ;; The r4000 multiplication patterns include an mflo instruction.\n \t (and (eq_attr \"type\" \"imul\")\n-\t      (ne (symbol_ref \"TARGET_MIPS4000\") (const_int 0)))\n+\t      (ne (symbol_ref \"TARGET_FIX_R4000\") (const_int 0)))\n \t (const_string \"hilo\")\n \n \t (and (eq_attr \"type\" \"hilo\")\n@@ -1420,9 +1420,51 @@\n    (set_attr \"length\"\t\"8\")])\n \n \n-;; ??? The R4000 (only) has a cpu bug.  If a double-word shift executes while\n-;; a multiply is in progress, it may give an incorrect result.  Avoid\n-;; this by keeping the mflo with the mult on the R4000.\n+;; The original R4000 has a cpu bug.  If a double-word or a variable\n+;; shift executes while an integer multiplication is in progress, the\n+;; shift may give an incorrect result.  Avoid this by keeping the mflo\n+;; with the mult on the R4000.\n+;;\n+;; From \"MIPS R4000PC/SC Errata, Processor Revision 2.2 and 3.0\"\n+;; (also valid for MIPS R4000MC processors):\n+;;\n+;; \"16. R4000PC, R4000SC: Please refer to errata 28 for an update to\n+;;\tthis errata description.\n+;;\tThe following code sequence causes the R4000 to incorrectly\n+;;\texecute the Double Shift Right Arithmetic 32 (dsra32)\n+;;\tinstruction.  If the dsra32 instruction is executed during an\n+;;\tinteger multiply, the dsra32 will only shift by the amount in\n+;;\tspecified in the instruction rather than the amount plus 32\n+;;\tbits.\n+;;\tinstruction 1:\t\tmult\trs,rt\t\tinteger multiply\n+;;\tinstruction 2-12:\tdsra32\trd,rt,rs\tdoubleword shift\n+;;\t\t\t\t\t\t\tright arithmetic + 32\n+;;\tWorkaround: A dsra32 instruction placed after an integer\n+;;\tmultiply should not be one of the 11 instructions after the\n+;;\tmultiply instruction.\"\n+;;\n+;; and:\n+;;\n+;; \"28. R4000PC, R4000SC: The text from errata 16 should be replaced by\n+;;\tthe following description.\n+;;\tAll extended shifts (shift by n+32) and variable shifts (32 and\n+;;\t64-bit versions) may produce incorrect results under the\n+;;\tfollowing conditions:\n+;;\t1) An integer multiply is currently executing\n+;;\t2) These types of shift instructions are executed immediately\n+;;\t   following an integer divide instruction.\n+;;\tWorkaround:\n+;;\t1) Make sure no integer multiply is running wihen these\n+;;\t   instruction are executed.  If this cannot be predicted at\n+;;\t   compile time, then insert a \"mfhi\" to R0 instruction\n+;;\t   immediately after the integer multiply instruction.  This\n+;;\t   will cause the integer multiply to complete before the shift\n+;;\t   is executed.\n+;;\t2) Separate integer divide and these two classes of shift\n+;;\t   instructions by another instruction or a noop.\"\n+;;\n+;; These processors have PRId values of 0x00004220 and 0x00004300,\n+;; respectively.\n \n (define_expand \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -1432,7 +1474,7 @@\n {\n   if (GENERATE_MULT3_SI || TARGET_MAD)\n     emit_insn (gen_mulsi3_mult3 (operands[0], operands[1], operands[2]));\n-  else if (!TARGET_MIPS4000 || TARGET_MIPS16)\n+  else if (!TARGET_FIX_R4000)\n     emit_insn (gen_mulsi3_internal (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_mulsi3_r4000 (operands[0], operands[1], operands[2]));\n@@ -1498,7 +1540,7 @@\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:SI 3 \"=h\"))]\n-  \"!TARGET_MIPS4000 || TARGET_MIPS16\"\n+  \"!TARGET_FIX_R4000\"\n   \"mult\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")])\n@@ -1509,7 +1551,7 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:SI 3 \"=h\"))\n    (clobber (match_scratch:SI 4 \"=l\"))]\n-  \"TARGET_MIPS4000 && !TARGET_MIPS16\"\n+  \"TARGET_FIX_R4000\"\n   \"mult\\t%1,%2\\;mflo\\t%0\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -1829,42 +1871,47 @@\n \t\t (match_operand:DI 2 \"register_operand\" \"\")))]\n   \"TARGET_64BIT\"\n {\n-  if (GENERATE_MULT3_DI || TARGET_MIPS4000)\n-    emit_insn (gen_muldi3_internal2 (operands[0], operands[1], operands[2]));\n-  else\n+  if (GENERATE_MULT3_DI)\n+    emit_insn (gen_muldi3_mult3 (operands[0], operands[1], operands[2]));\n+  else if (!TARGET_FIX_R4000)\n     emit_insn (gen_muldi3_internal (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_muldi3_r4000 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n+(define_insn \"muldi3_mult3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n+   (clobber (match_scratch:DI 3 \"=h\"))\n+   (clobber (match_scratch:DI 4 \"=l\"))]\n+  \"TARGET_64BIT && GENERATE_MULT3_DI\"\n+  \"dmult\\t%0,%1,%2\"\n+  [(set_attr \"type\"\t\"imul\")\n+   (set_attr \"mode\"\t\"DI\")])\n+\n (define_insn \"muldi3_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n \t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:DI 3 \"=h\"))]\n-  \"TARGET_64BIT && !TARGET_MIPS4000\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n   \"dmult\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"DI\")])\n \n-(define_insn \"muldi3_internal2\"\n+(define_insn \"muldi3_r4000\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=l\"))]\n-  \"TARGET_64BIT && (GENERATE_MULT3_DI || TARGET_MIPS4000)\"\n-{\n-  if (GENERATE_MULT3_DI)\n-    return \"dmult\\t%0,%1,%2\";\n-  else\n-    return \"dmult\\t%1,%2\\;mflo\\t%0\";\n-}\n+  \"TARGET_64BIT && TARGET_FIX_R4000\"\n+  \"dmult\\t%1,%2\\;mflo\\t%0\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set (attr \"length\")\n-\t(if_then_else (ne (symbol_ref \"GENERATE_MULT3_DI\") (const_int 0))\n-\t\t      (const_int 4)\n-\t\t      (const_int 8)))])\n+   (set_attr \"length\"\t\"8\")])\n \n ;; ??? We could define a mulditi3 pattern when TARGET_64BIT.\n \n@@ -1877,25 +1924,43 @@\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))])]\n-  \"\"\n+  \"!TARGET_64BIT || !TARGET_FIX_R4000\"\n {\n   if (!TARGET_64BIT)\n     {\n-      emit_insn (gen_mulsidi3_32bit (operands[0], operands[1], operands[2]));\n+      if (!TARGET_FIX_R4000)\n+\temit_insn (gen_mulsidi3_32bit_internal (operands[0], operands[1],\n+\t\t\t\t\t\toperands[2]));\n+      else\n+\temit_insn (gen_mulsidi3_32bit_r4000 (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n       DONE;\n     }\n })\n \n-(define_insn \"mulsidi3_32bit\"\n+(define_insn \"mulsidi3_32bit_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n \t(mult:DI\n \t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_64BIT && !TARGET_FIX_R4000\"\n   \"mult\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")])\n \n+(define_insn \"mulsidi3_32bit_r4000\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(mult:DI\n+\t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n+   (clobber (match_scratch:DI 3 \"=l\"))\n+   (clobber (match_scratch:DI 4 \"=h\"))]\n+  \"!TARGET_64BIT && TARGET_FIX_R4000\"\n+  \"mult\\t%1,%2\\;mflo\\t%L0;mfhi\\t%M0\"\n+  [(set_attr \"type\"\t\"imul\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"12\")])\n+\n (define_insn_and_split \"*mulsidi3_64bit\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(mult:DI (match_operator:DI 1 \"extend_operator\"\n@@ -1905,7 +1970,8 @@\n    (clobber (match_scratch:DI 5 \"=l\"))\n    (clobber (match_scratch:DI 6 \"=h\"))\n    (clobber (match_scratch:DI 7 \"=d\"))]\n-  \"TARGET_64BIT && GET_CODE (operands[1]) == GET_CODE (operands[2])\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\n+   && GET_CODE (operands[1]) == GET_CODE (operands[2])\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n@@ -1956,7 +2022,8 @@\n \t      (match_operator:DI 4 \"extend_operator\" [(match_dup 2)])\n \t      (match_operator:DI 5 \"extend_operator\" [(match_dup 3)]))\n \t   (const_int 32)))]\n-  \"TARGET_64BIT && GET_CODE (operands[4]) == GET_CODE (operands[5])\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\n+   && GET_CODE (operands[4]) == GET_CODE (operands[5])\"\n {\n   if (GET_CODE (operands[4]) == SIGN_EXTEND)\n     return \"mult\\t%2,%3\";\n@@ -1975,26 +2042,43 @@\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))])]\n-  \"\"\n+  \"!TARGET_64BIT || !TARGET_FIX_R4000\"\n {\n   if (!TARGET_64BIT)\n     {\n-      emit_insn (gen_umulsidi3_32bit (operands[0], operands[1],\n-\t\t\t\t      operands[2]));\n+      if (!TARGET_FIX_R4000)\n+\temit_insn (gen_umulsidi3_32bit_internal (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2]));\n+      else\n+\temit_insn (gen_umulsidi3_32bit_r4000 (operands[0], operands[1],\n+\t\t\t\t\t      operands[2]));\n       DONE;\n     }\n })\n \n-(define_insn \"umulsidi3_32bit\"\n+(define_insn \"umulsidi3_32bit_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n \t(mult:DI\n \t   (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_64BIT && !TARGET_FIX_R4000\"\n   \"multu\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")])\n \n+(define_insn \"umulsidi3_32bit_r4000\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(mult:DI\n+\t   (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n+   (clobber (match_scratch:DI 3 \"=l\"))\n+   (clobber (match_scratch:DI 4 \"=h\"))]\n+  \"!TARGET_64BIT && TARGET_FIX_R4000\"\n+  \"multu\\t%1,%2\\;mflo\\t%L0;mfhi\\t%M0\"\n+  [(set_attr \"type\"\t\"imul\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"12\")])\n+\n ;; Widening multiply with negation.\n (define_insn \"*muls_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n@@ -2064,7 +2148,7 @@\n \t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"\")))\n \t  (const_int 32))))]\n-  \"\"\n+  \"ISA_HAS_MULHI || !TARGET_FIX_R4000\"\n {\n   if (ISA_HAS_MULHI)\n     emit_insn (gen_umulsi3_highpart_mulhi_internal (operands[0], operands[1],\n@@ -2083,7 +2167,7 @@\n \t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n-  \"!ISA_HAS_MULHI\"\n+  \"!ISA_HAS_MULHI && !TARGET_FIX_R4000\"\n   \"multu\\t%1,%2\"\n   [(set_attr \"type\"   \"imul\")\n    (set_attr \"mode\"   \"SI\")\n@@ -2131,7 +2215,7 @@\n \t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"\")))\n          (const_int 32))))]\n-  \"\"\n+  \"ISA_HAS_MULHI || !TARGET_FIX_R4000\"\n {\n   if (ISA_HAS_MULHI)\n     emit_insn (gen_smulsi3_highpart_mulhi_internal (operands[0], operands[1],\n@@ -2150,7 +2234,7 @@\n \t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n-  \"!ISA_HAS_MULHI\"\n+  \"!ISA_HAS_MULHI && !TARGET_FIX_R4000\"\n   \"mult\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -2199,7 +2283,7 @@\n \t   (sign_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n          (const_int 64))))\n    (clobber (match_scratch:DI 3 \"=l\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n   \"dmult\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"DI\")])\n@@ -2213,7 +2297,7 @@\n \t   (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n \t  (const_int 64))))\n    (clobber (match_scratch:DI 3 \"=l\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n   \"dmultu\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"DI\")])"}, {"sha": "c39eb467f3a35215fb501a969d1661ce0590b0ae", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddbfe5f6707bb2a3a4085d35c3c0753800dd5df/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bddbfe5f6707bb2a3a4085d35c3c0753800dd5df", "patch": "@@ -8055,6 +8055,9 @@ Work around certain R4000 CPU errata:\n @item\n A double-word or a variable shift may give an incorrect result if executed\n immediately after starting an integer division.\n+@item\n+A double-word or a variable shift may give an incorrect result if executed\n+while an integer multiplication is in progress.\n @end itemize\n \n @item -mfix-sb1"}]}