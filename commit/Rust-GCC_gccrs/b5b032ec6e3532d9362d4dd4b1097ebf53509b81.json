{"sha": "b5b032ec6e3532d9362d4dd4b1097ebf53509b81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViMDMyZWM2ZTM1MzJkOTM2MmQ0ZGQ0YjEwOTdlYmY1MzUwOWI4MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-10T20:55:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:40Z"}, "message": "[Ada] Small improvement to Expand_N_Unchecked_Type_Conversion\n\n2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Unchecked_Type_Conversion): Also fold the\n\tconversion for literals of enumeration types.", "tree": {"sha": "e2ceefe47e821ce189dd5293f4de2c68e348c27f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ceefe47e821ce189dd5293f4de2c68e348c27f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5b032ec6e3532d9362d4dd4b1097ebf53509b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b032ec6e3532d9362d4dd4b1097ebf53509b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b032ec6e3532d9362d4dd4b1097ebf53509b81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b032ec6e3532d9362d4dd4b1097ebf53509b81/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93b3110d75423001107785967a9f9c962e96d2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b3110d75423001107785967a9f9c962e96d2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b3110d75423001107785967a9f9c962e96d2e9"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "8d6ddd7cd4c82a41a5d4e41d9ac2153221d457af", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b032ec6e3532d9362d4dd4b1097ebf53509b81/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b032ec6e3532d9362d4dd4b1097ebf53509b81/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b5b032ec6e3532d9362d4dd4b1097ebf53509b81", "patch": "@@ -12460,7 +12460,7 @@ package body Exp_Ch4 is\n       --  If we have a conversion of a compile time known value to a target\n       --  type and the value is in range of the target type, then we can simply\n       --  replace the construct by an integer literal of the correct type. We\n-      --  only apply this to integer types being converted. Possibly it may\n+      --  only apply this to discrete types being converted. Possibly it may\n       --  apply in other cases, but it is too much trouble to worry about.\n \n       --  Note that we do not do this transformation if the Kill_Range_Check\n@@ -12473,13 +12473,13 @@ package body Exp_Ch4 is\n \n       if Is_Integer_Type (Target_Type)\n         and then not Has_Biased_Representation (Target_Type)\n-        and then Is_Integer_Type (Operand_Type)\n+        and then Is_Discrete_Type (Operand_Type)\n         and then not Has_Biased_Representation (Operand_Type)\n         and then Compile_Time_Known_Value (Operand)\n         and then not Kill_Range_Check (N)\n       then\n          declare\n-            Val : constant Uint := Expr_Value (Operand);\n+            Val : constant Uint := Expr_Rep_Value (Operand);\n \n          begin\n             if Compile_Time_Known_Value (Type_Low_Bound (Target_Type))"}]}