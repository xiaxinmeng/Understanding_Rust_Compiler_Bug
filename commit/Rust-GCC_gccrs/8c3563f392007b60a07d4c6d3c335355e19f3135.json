{"sha": "8c3563f392007b60a07d4c6d3c335355e19f3135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzNTYzZjM5MjAwN2I2MGEwN2Q0YzZkM2MzMzUzNTVlMTlmMzEzNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-12-18T08:33:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-12-18T08:33:26Z"}, "message": "re PR tree-optimization/77291 (False positive for -Warray-bounds)\n\n2017-12-18  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/77291\n\t* tree.c (array_at_struct_end_p): Return true if the underlying\n\tobject has space for at least one element in excess of what\n\tthe array domain specifies.\n\n\t* gcc.dg/Warray-bounds-26.c: New testcase.\n\nFrom-SVN: r255775", "tree": {"sha": "32629a20d90cf5322cdbb3af02b73c4748820461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32629a20d90cf5322cdbb3af02b73c4748820461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c3563f392007b60a07d4c6d3c335355e19f3135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3563f392007b60a07d4c6d3c335355e19f3135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3563f392007b60a07d4c6d3c335355e19f3135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3563f392007b60a07d4c6d3c335355e19f3135/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "040a4493a64b308366d1d2fcb5611143d90c3c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040a4493a64b308366d1d2fcb5611143d90c3c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040a4493a64b308366d1d2fcb5611143d90c3c6d"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "c9a5f2123a1adeed58bbe635de77051027bbd1da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c3563f392007b60a07d4c6d3c335355e19f3135", "patch": "@@ -1,3 +1,10 @@\n+2017-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/77291\n+\t* tree.c (array_at_struct_end_p): Return true if the underlying\n+\tobject has space for at least one element in excess of what\n+\tthe array domain specifies.\n+\n 2017-12-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi (x86 Function Attributes): Reformat nocf_check"}, {"sha": "8fe9a88b33aaf541a341807a5b599dbc0bded56b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c3563f392007b60a07d4c6d3c335355e19f3135", "patch": "@@ -1,3 +1,8 @@\n+2017-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/77291\n+\t* gcc.dg/Warray-bounds-26.c: New testcase.\n+\n 2017-12-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/guality/guality.h (guality_check): Cast %lli arguments"}, {"sha": "85bdb3ea14647e151d3923284506779189ab9c8c", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-26.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-26.c?ref=8c3563f392007b60a07d4c6d3c335355e19f3135", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+struct Rec {\n+  unsigned char data[1];  // actually variable length\n+};\n+\n+union U {\n+  unsigned char buf[42];\n+  struct Rec rec;\n+};\n+\n+int Load()\n+{\n+  union U u;\n+  return u.rec.data[1]; /* { dg-bogus \"array bound\" } */\n+}"}, {"sha": "65e945afe06cd166f799d8cc1fb6af68a504f082", "filename": "gcc/tree.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3563f392007b60a07d4c6d3c335355e19f3135/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8c3563f392007b60a07d4c6d3c335355e19f3135", "patch": "@@ -12644,6 +12644,7 @@ array_at_struct_end_p (tree ref)\n   if (TREE_CODE (ref) == STRING_CST)\n     return false;\n \n+  tree ref_to_array = ref;\n   while (handled_component_p (ref))\n     {\n       /* If the reference chain contains a component reference to a\n@@ -12682,35 +12683,43 @@ array_at_struct_end_p (tree ref)\n   /* The array now is at struct end.  Treat flexible arrays as\n      always subject to extend, even into just padding constrained by\n      an underlying decl.  */\n-  if (! TYPE_SIZE (atype))\n+  if (! TYPE_SIZE (atype)\n+      || ! TYPE_DOMAIN (atype)\n+      || ! TYPE_MAX_VALUE (TYPE_DOMAIN (atype)))\n     return true;\n \n-  tree size = NULL;\n-\n   if (TREE_CODE (ref) == MEM_REF\n       && TREE_CODE (TREE_OPERAND (ref, 0)) == ADDR_EXPR)\n-    {\n-      size = TYPE_SIZE (TREE_TYPE (ref));\n-      ref = TREE_OPERAND (TREE_OPERAND (ref, 0), 0);\n-    }\n+    ref = TREE_OPERAND (TREE_OPERAND (ref, 0), 0);\n \n   /* If the reference is based on a declared entity, the size of the array\n      is constrained by its given domain.  (Do not trust commons PR/69368).  */\n   if (DECL_P (ref)\n-      /* Be sure the size of MEM_REF target match.  For example:\n-\n-\t   char buf[10];\n-\t   struct foo *str = (struct foo *)&buf;\n-\n-\t   str->trailin_array[2] = 1;\n+      && !(flag_unconstrained_commons\n+\t   && VAR_P (ref) && DECL_COMMON (ref))\n+      && DECL_SIZE_UNIT (ref)\n+      && TREE_CODE (DECL_SIZE_UNIT (ref)) == INTEGER_CST)\n+    {\n+      /* Check whether the array domain covers all of the available\n+         padding.  */\n+      HOST_WIDE_INT offset;\n+      if (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (atype))) != INTEGER_CST\n+\t  || TREE_CODE (TYPE_MAX_VALUE (TYPE_DOMAIN (atype))) != INTEGER_CST\n+          || TREE_CODE (TYPE_MIN_VALUE (TYPE_DOMAIN (atype))) != INTEGER_CST)\n+\treturn true;\n+      if (! get_addr_base_and_unit_offset (ref_to_array, &offset))\n+\treturn true;\n \n-\t is valid because BUF allocate enough space.  */\n+      /* If at least one extra element fits it is a flexarray.  */\n+      if (wi::les_p ((wi::to_offset (TYPE_MAX_VALUE (TYPE_DOMAIN (atype)))\n+\t\t      - wi::to_offset (TYPE_MIN_VALUE (TYPE_DOMAIN (atype)))\n+\t\t      + 2)\n+\t\t     * wi::to_offset (TYPE_SIZE_UNIT (TREE_TYPE (atype))),\n+\t\t     wi::to_offset (DECL_SIZE_UNIT (ref)) - offset))\n+\treturn true;\n \n-      && (!size || (DECL_SIZE (ref) != NULL\n-\t\t    && operand_equal_p (DECL_SIZE (ref), size, 0)))\n-      && !(flag_unconstrained_commons\n-\t   && VAR_P (ref) && DECL_COMMON (ref)))\n-    return false;\n+      return false;\n+    }\n \n   return true;\n }"}]}