{"sha": "104c99ef18d7f5550ef18ca443dc2e4b2ac1641a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0Yzk5ZWYxOGQ3ZjU1NTBlZjE4Y2E0NDNkYzJlNGIyYWMxNjQxYQ==", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2017-01-19T13:08:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T13:08:16Z"}, "message": "exp_ch7.adb (Build_Invariant_Procedure_Body): Semi-insert the body into the tree for GNATprove by setting its Parent field.\n\n2017-01-19  Claire Dross  <dross@adacore.com>\n\n\t* exp_ch7.adb (Build_Invariant_Procedure_Body): Semi-insert the\n\tbody into the tree for GNATprove by setting its Parent field. The\n\tcomponents invariants of composite types are not checked by\n\tthe composite type's invariant procedure in GNATprove mode.\n\t(Build_Invariant_Procedure_Declaration): Semi-insert the\n\tdeclaration into the tree for GNATprove by setting its Parent\n\tfield.\n\t* freeze.adb (Freeze_Arry_Type):In GNATprove mode, do not add\n\tthe component invariants to the array type  invariant procedure\n\tso that the procedure can be used to  check the array type\n\tinvariants if any.\n\t(Freeze_Record_Type): In GNATprove mode, do\n\tnot add the component invariants to the record type  invariant\n\tprocedure so that the procedure can be used to\tcheck the record\n\ttype invariants if any.\n\nFrom-SVN: r244629", "tree": {"sha": "1b2d3ee78f60b1dd2b9a6527f3936ecbb8d3ad00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b2d3ee78f60b1dd2b9a6527f3936ecbb8d3ad00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "374c09e8b0560f150266deb324004e482f4c424e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374c09e8b0560f150266deb324004e482f4c424e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374c09e8b0560f150266deb324004e482f4c424e"}], "stats": {"total": 166, "additions": 114, "deletions": 52}, "files": [{"sha": "9743e60bf2c7b86e205772bca33114ee59f0dab6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=104c99ef18d7f5550ef18ca443dc2e4b2ac1641a", "patch": "@@ -1,3 +1,21 @@\n+2017-01-19  Claire Dross  <dross@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Invariant_Procedure_Body): Semi-insert the\n+\tbody into the tree for GNATprove by setting its Parent field. The\n+\tcomponents invariants of composite types are not checked by\n+\tthe composite type's invariant procedure in GNATprove mode.\n+\t(Build_Invariant_Procedure_Declaration): Semi-insert the\n+\tdeclaration into the tree for GNATprove by setting its Parent\n+\tfield.\n+\t* freeze.adb (Freeze_Arry_Type):In GNATprove mode, do not add\n+\tthe component invariants to the array type  invariant procedure\n+\tso that the procedure can be used to  check the array type\n+\tinvariants if any.\n+\t(Freeze_Record_Type): In GNATprove mode, do\n+\tnot add the component invariants to the record type  invariant\n+\tprocedure so that the procedure can be used to\tcheck the record\n+\ttype invariants if any.\n+\n 2017-01-19  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* lib-xref-spark_specific.adb: Minor reformatting."}, {"sha": "93573a29ea349d69979be5f0acfb17376aa77af4", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 82, "deletions": 49, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=104c99ef18d7f5550ef18ca443dc2e4b2ac1641a", "patch": "@@ -3581,30 +3581,41 @@ package body Exp_Ch7 is\n \n          begin\n             if Has_Invariants (Comp_Typ) then\n-               Proc_Id := Invariant_Procedure (Base_Type (Comp_Typ));\n \n-               --  The component type should have an invariant procedure if it\n-               --  has invariants of its own or inherits class-wide invariants\n-               --  from parent or interface types.\n+               --  In GNATprove mode, the component invariants are checked by\n+               --  other means. They should not be added to the array type\n+               --  invariant procedure, so that the procedure can be used to\n+               --  check the array type invariants if any.\n \n-               pragma Assert (Present (Proc_Id));\n+               if GNATprove_Mode then\n+                  null;\n \n-               --  Generate:\n-               --    <Comp_Typ>Invariant (_object (<Indices>));\n+               else\n+                  Proc_Id := Invariant_Procedure (Base_Type (Comp_Typ));\n \n-               --  Note that the invariant procedure may have a null body if\n-               --  assertions are disabled or Assertion_Polity Ignore is in\n-               --  effect.\n+                  --  The component type should have an invariant procedure\n+                  --  if it has invariants of its own or inherits class-wide\n+                  --  invariants from parent or interface types.\n \n-               if not Has_Null_Body (Proc_Id) then\n-                  Append_New_To (Comp_Checks,\n-                    Make_Procedure_Call_Statement (Loc,\n-                      Name                   =>\n-                        New_Occurrence_Of (Proc_Id, Loc),\n-                      Parameter_Associations => New_List (\n-                        Make_Indexed_Component (Loc,\n-                          Prefix      => New_Occurrence_Of (Obj_Id, Loc),\n-                          Expressions => New_Copy_List (Indices)))));\n+                  pragma Assert (Present (Proc_Id));\n+\n+                  --  Generate:\n+                  --    <Comp_Typ>Invariant (_object (<Indices>));\n+\n+                  --  Note that the invariant procedure may have a null body if\n+                  --  assertions are disabled or Assertion_Policy Ignore is in\n+                  --  effect.\n+\n+                  if not Has_Null_Body (Proc_Id) then\n+                     Append_New_To (Comp_Checks,\n+                       Make_Procedure_Call_Statement (Loc,\n+                         Name                   =>\n+                           New_Occurrence_Of (Proc_Id, Loc),\n+                         Parameter_Associations => New_List (\n+                           Make_Indexed_Component (Loc,\n+                             Prefix      => New_Occurrence_Of (Obj_Id, Loc),\n+                             Expressions => New_Copy_List (Indices)))));\n+                  end if;\n                end if;\n \n                Produced_Check := True;\n@@ -3653,7 +3664,7 @@ package body Exp_Ch7 is\n                --    end loop;\n \n                --  Note that the invariant procedure may have a null body if\n-               --  assertions are disabled or Assertion_Polity Ignore is in\n+               --  assertions are disabled or Assertion_Policy Ignore is in\n                --  effect.\n \n                if Present (Comp_Checks) then\n@@ -3928,33 +3939,44 @@ package body Exp_Ch7 is\n             --  this case verify the access value itself.\n \n             if Has_Invariants (Comp_Typ) then\n-               Proc_Id := Invariant_Procedure (Base_Type (Comp_Typ));\n \n-               --  The component type should have an invariant procedure if it\n-               --  has invariants of its own or inherits class-wide invariants\n-               --  from parent or interface types.\n+               --  In GNATprove mode, the component invariants are checked by\n+               --  other means. They should not be added to the record type\n+               --  invariant procedure, so that the procedure can be used to\n+               --  check the record type invariants if any.\n \n-               pragma Assert (Present (Proc_Id));\n+               if GNATprove_Mode then\n+                  null;\n \n-               --  Generate:\n-               --    <Comp_Typ>Invariant (T (_object).<Comp_Id>);\n+               else\n+                  Proc_Id := Invariant_Procedure (Base_Type (Comp_Typ));\n \n-               --  Note that the invariant procedure may have a null body if\n-               --  assertions are disabled or Assertion_Polity Ignore is in\n-               --  effect.\n+                  --  The component type should have an invariant procedure\n+                  --  if it has invariants of its own or inherits class-wide\n+                  --  invariants from parent or interface types.\n \n-               if not Has_Null_Body (Proc_Id) then\n-                  Append_New_To (Comp_Checks,\n-                    Make_Procedure_Call_Statement (Loc,\n-                      Name                   =>\n-                        New_Occurrence_Of (Proc_Id, Loc),\n-                      Parameter_Associations => New_List (\n-                        Make_Selected_Component (Loc,\n-                          Prefix        =>\n-                            Unchecked_Convert_To\n-                              (T, New_Occurrence_Of (Obj_Id, Loc)),\n-                          Selector_Name =>\n-                            New_Occurrence_Of (Comp_Id, Loc)))));\n+                  pragma Assert (Present (Proc_Id));\n+\n+                  --  Generate:\n+                  --    <Comp_Typ>Invariant (T (_object).<Comp_Id>);\n+\n+                  --  Note that the invariant procedure may have a null body if\n+                  --  assertions are disabled or Assertion_Policy Ignore is in\n+                  --  effect.\n+\n+                  if not Has_Null_Body (Proc_Id) then\n+                     Append_New_To (Comp_Checks,\n+                       Make_Procedure_Call_Statement (Loc,\n+                         Name                   =>\n+                           New_Occurrence_Of (Proc_Id, Loc),\n+                         Parameter_Associations => New_List (\n+                           Make_Selected_Component (Loc,\n+                             Prefix        =>\n+                               Unchecked_Convert_To\n+                                 (T, New_Occurrence_Of (Obj_Id, Loc)),\n+                             Selector_Name =>\n+                               New_Occurrence_Of (Comp_Id, Loc)))));\n+                  end if;\n                end if;\n \n                Produced_Check           := True;\n@@ -4667,13 +4689,19 @@ package body Exp_Ch7 is\n       Set_Corresponding_Spec (Proc_Body, Proc_Id);\n \n       --  The body should not be inserted into the tree when the context is\n-      --  ASIS, GNATprove or a generic unit because it is not part of the\n-      --  template. Note that the body must still be generated in order to\n-      --  resolve the invariants.\n+      --  ASIS or a generic unit because it is not part of the template. Note\n+      --  that the body must still be generated in order to resolve the\n+      --  invariants.\n \n-      if ASIS_Mode or GNATprove_Mode or Inside_A_Generic then\n+      if ASIS_Mode or Inside_A_Generic then\n          null;\n \n+      --  Semi-insert the body into the tree for GNATprove by setting its\n+      --  Parent field. This allows for proper upstream tree traversals.\n+\n+      elsif GNATprove_Mode then\n+         Set_Parent (Proc_Body, Parent (Declaration_Node (Work_Typ)));\n+\n       --  Otherwise the body is part of the freezing actions of the type\n \n       else\n@@ -4865,12 +4893,17 @@ package body Exp_Ch7 is\n                     New_Occurrence_Of (Work_Typ, Loc)))));\n \n       --  The declaration should not be inserted into the tree when the context\n-      --  is ASIS, GNATprove or a generic unit because it is not part of the\n-      --  template.\n+      --  is ASIS or a generic unit because it is not part of the template.\n \n-      if ASIS_Mode or GNATprove_Mode or Inside_A_Generic then\n+      if ASIS_Mode or Inside_A_Generic then\n          null;\n \n+      --  Semi-insert the declaration into the tree for GNATprove by setting\n+      --  its Parent field. This allows for proper upstream tree traversals.\n+\n+      elsif GNATprove_Mode then\n+         Set_Parent (Proc_Decl, Parent (Typ_Decl));\n+\n       --  Otherwise insert the declaration\n \n       else"}, {"sha": "fcbf994df82a8e3cab556da63c6c76e89bd8d116", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104c99ef18d7f5550ef18ca443dc2e4b2ac1641a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=104c99ef18d7f5550ef18ca443dc2e4b2ac1641a", "patch": "@@ -2439,9 +2439,15 @@ package body Freeze is\n             end if;\n \n             --  The array type requires its own invariant procedure in order to\n-            --  verify the component invariant over all elements.\n-\n-            if Has_Invariants (Component_Type (Arr)) then\n+            --  verify the component invariant over all elements. In GNATprove\n+            --  mode, the component invariants are checked by other means. They\n+            --  should not be added to the array type invariant procedure, so\n+            --  that the procedure can be used to check the array type\n+            --  invariants if any.\n+\n+            if Has_Invariants (Component_Type (Arr))\n+              and then not GNATprove_Mode\n+            then\n                Set_Has_Own_Invariants (Arr);\n \n                --  The array type is an implementation base type. Propagate the\n@@ -4362,9 +4368,14 @@ package body Freeze is\n                --  order to verify the invariant of each individual component.\n                --  Do not consider internal components such as _parent because\n                --  parent class-wide invariants are always inherited.\n+               --  In GNATprove mode, the component invariants are checked by\n+               --  other means. They should not be added to the record type\n+               --  invariant procedure, so that the procedure can be used to\n+               --  check the recordy type invariants if any.\n \n                if Comes_From_Source (Comp)\n                  and then Has_Invariants (Etype (Comp))\n+                   and then not GNATprove_Mode\n                then\n                   Set_Has_Own_Invariants (Rec);\n                end if;"}]}