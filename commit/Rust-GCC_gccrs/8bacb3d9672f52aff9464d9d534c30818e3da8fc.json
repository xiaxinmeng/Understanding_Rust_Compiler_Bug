{"sha": "8bacb3d9672f52aff9464d9d534c30818e3da8fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhY2IzZDk2NzJmNTJhZmY5NDY0ZDlkNTM0YzMwODE4ZTNkYThmYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-02-23T18:14:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-02-23T18:14:28Z"}, "message": "* execute/20000223-1.c: New test.\n\nFrom-SVN: r32117", "tree": {"sha": "66de3f6ec1364e7e89085bc6b86ac66e24b37bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66de3f6ec1364e7e89085bc6b86ac66e24b37bff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bacb3d9672f52aff9464d9d534c30818e3da8fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bacb3d9672f52aff9464d9d534c30818e3da8fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bacb3d9672f52aff9464d9d534c30818e3da8fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bacb3d9672f52aff9464d9d534c30818e3da8fc/comments", "author": null, "committer": null, "parents": [{"sha": "b23875c9b544eb01e0e2d39118c6f4f0466bb1db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23875c9b544eb01e0e2d39118c6f4f0466bb1db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23875c9b544eb01e0e2d39118c6f4f0466bb1db"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "1c0a9d709921951b7c9a95c097a2c12ecadad586", "filename": "gcc/testsuite/gcc.c-torture/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bacb3d9672f52aff9464d9d534c30818e3da8fc/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bacb3d9672f52aff9464d9d534c30818e3da8fc/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog?ref=8bacb3d9672f52aff9464d9d534c30818e3da8fc", "patch": "@@ -1,3 +1,7 @@\n+2000-02-23  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* execute/20000223-1.c: New test.\n+\n 2000-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* compile/20000127-1.c: New test."}, {"sha": "db6180b757a6a7e44a49aac4240d716ccd529f89", "filename": "gcc/testsuite/gcc.c-torture/execute/20000223-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bacb3d9672f52aff9464d9d534c30818e3da8fc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bacb3d9672f52aff9464d9d534c30818e3da8fc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000223-1.c?ref=8bacb3d9672f52aff9464d9d534c30818e3da8fc", "patch": "@@ -0,0 +1,61 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Nathan Sidwell 23 Feb 2000 <nathan@codesourcery.com> */\n+\n+/* __alignof__ should never return a non-power of 2\n+   eg, sizeof(long double) might be 12, but that means it must be alignable\n+   on a 4 byte boundary. */\n+\n+void check (char const *type, int align)\n+{\n+  if ((align & -align) != align)\n+    {\n+      abort ();\n+    }\n+}\n+\n+#define QUOTE_(s) #s\n+#define QUOTE(s) QUOTE_(s)\n+\n+#define check(t) check(QUOTE(t), __alignof__(t))\n+\n+// This struct should have an alignment of the lcm of all the types. If one of\n+// the base alignments is not a power of two, then A cannot be power of two\n+// aligned.\n+struct A\n+{\n+  char c;\n+  signed short ss;\n+  unsigned short us;\n+  signed int si;\n+  unsigned int ui;\n+  signed long sl;\n+  unsigned long ul;\n+  signed long long sll;\n+  unsigned long long ull;\n+  float f;\n+  double d;\n+  long double ld;\n+  void *dp;\n+  void (*fp)();\n+};\n+\n+int main ()\n+{\n+  check (void);\n+  check (char);\n+  check (signed short);\n+  check (unsigned short);\n+  check (signed int);\n+  check (unsigned int);\n+  check (signed long);\n+  check (unsigned long);\n+  check (signed long long);\n+  check (unsigned long long);\n+  check (float);\n+  check (double);\n+  check (long double);\n+  check (void *);\n+  check (void (*)());\n+  check (struct A);\n+  return 0;\n+}"}]}