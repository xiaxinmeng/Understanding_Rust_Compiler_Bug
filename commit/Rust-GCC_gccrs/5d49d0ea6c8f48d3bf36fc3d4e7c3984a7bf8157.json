{"sha": "5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0OWQwZWE2YzhmNDhkM2JmMzZmYzNkNGU3YzM5ODRhN2JmODE1Nw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-10-28T10:27:15Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-10-28T10:27:15Z"}, "message": "re PR target/39715 ([cond-optab] extra sign extensions on Thumb)\n\n2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR rtl-optimization/39715\n\t* combine.c (simplify_comparison): Use extensions to\n\twiden comparisons.  Try an ANDing first.\n\ntestsuite:\n2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR rtl-optimization/39715\n\t* gcc.target/arm/thumb-bitfld1.c: New.\n\nFrom-SVN: r153651", "tree": {"sha": "c38260869bb0cdd6998d12a09d64ae13ccd20f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c38260869bb0cdd6998d12a09d64ae13ccd20f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "582021baa76be44ef884eebd0f7ab99599f4b890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582021baa76be44ef884eebd0f7ab99599f4b890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582021baa76be44ef884eebd0f7ab99599f4b890"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "db1d1c8d782a1697e24511d8e812c10551bf8089", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "patch": "@@ -1,3 +1,9 @@\n+2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR rtl-optimization/39715\n+\t* combine.c (simplify_comparison): Use extensions to\n+\twiden comparisons.  Try an ANDing first.\n+\n 2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/40741"}, {"sha": "80c538ec49024bd6d082ab175dc66acd4523af80", "filename": "gcc/combine.c", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "patch": "@@ -11467,6 +11467,22 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t{\n \t  int zero_extended;\n \n+\t  /* If this is a test for negative, we can make an explicit\n+\t     test of the sign bit.  Test this first so we can use\n+\t     a paradoxical subreg to extend OP0.  */\n+\n+\t  if (op1 == const0_rtx && (code == LT || code == GE)\n+\t      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+\t    {\n+\t      op0 = simplify_gen_binary (AND, tmode,\n+\t\t\t\t\t gen_lowpart (tmode, op0),\n+\t\t\t\t\t GEN_INT ((HOST_WIDE_INT) 1\n+\t\t\t\t\t\t  << (GET_MODE_BITSIZE (mode)\n+\t\t\t\t\t\t      - 1)));\n+\t      code = (code == LT) ? NE : EQ;\n+\t      break;\n+\t    }\n+\n \t  /* If the only nonzero bits in OP0 and OP1 are those in the\n \t     narrower mode and this is an equality or unsigned comparison,\n \t     we can use the wider mode.  Similarly for sign-extended\n@@ -11497,27 +11513,20 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t\t\t\t\t\t\tXEXP (op0, 0)),\n \t\t\t\t\t   gen_lowpart (tmode,\n \t\t\t\t\t\t\tXEXP (op0, 1)));\n-\n-\t      op0 = gen_lowpart (tmode, op0);\n-\t      if (zero_extended && CONST_INT_P (op1))\n-\t\top1 = GEN_INT (INTVAL (op1) & GET_MODE_MASK (mode));\n-\t      op1 = gen_lowpart (tmode, op1);\n-\t      break;\n-\t    }\n-\n-\t  /* If this is a test for negative, we can make an explicit\n-\t     test of the sign bit.  */\n-\n-\t  if (op1 == const0_rtx && (code == LT || code == GE)\n-\t      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n-\t    {\n-\t      op0 = simplify_gen_binary (AND, tmode,\n-\t\t\t\t\t gen_lowpart (tmode, op0),\n-\t\t\t\t\t GEN_INT ((HOST_WIDE_INT) 1\n-\t\t\t\t\t\t  << (GET_MODE_BITSIZE (mode)\n-\t\t\t\t\t\t      - 1)));\n-\t      code = (code == LT) ? NE : EQ;\n-\t      break;\n+\t      else\n+\t\t{\n+\t\t  if (zero_extended)\n+\t\t    {\n+\t\t      op0 = simplify_gen_unary (ZERO_EXTEND, tmode, op0, mode);\n+\t\t      op1 = simplify_gen_unary (ZERO_EXTEND, tmode, op1, mode);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      op0 = simplify_gen_unary (SIGN_EXTEND, tmode, op0, mode);\n+\t\t      op1 = simplify_gen_unary (SIGN_EXTEND, tmode, op1, mode);\n+\t\t    }\n+\t\t  break;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "1d59b71e4eba66d9f5bcaff49f45cd3e42881b1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "patch": "@@ -1,3 +1,8 @@\n+2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR rtl-optimization/39715\n+\t* gcc.target/arm/thumb-bitfld1.c: New.\n+\n 2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/40741"}, {"sha": "7741b4f45f3c05a67299251b21206d23c4c855c8", "filename": "gcc/testsuite/gcc.target/arm/thumb-bitfld1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-bitfld1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-bitfld1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-bitfld1.c?ref=5d49d0ea6c8f48d3bf36fc3d4e7c3984a7bf8157", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mthumb -march=armv5t\" }  */\n+\n+struct foo\n+{\n+  unsigned b31 : 1;\n+  unsigned b30 : 1;\n+  unsigned b29 : 1;\n+  unsigned b28 : 1;\n+  unsigned rest : 28;\n+};\n+foo(a)\n+     struct foo a;\n+{\n+  return a.b30;\n+}\n+\n+/* { dg-final { scan-assembler-times \"lsl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lsr\" 1 } } */"}]}