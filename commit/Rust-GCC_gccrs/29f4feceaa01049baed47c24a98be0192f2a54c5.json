{"sha": "29f4feceaa01049baed47c24a98be0192f2a54c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmNGZlY2VhYTAxMDQ5YmFlZDQ3YzI0YTk4YmUwMTkyZjJhNTRjNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-29T07:35:47Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-29T07:35:47Z"}, "message": "Remove accidental commit\n\nFrom-SVN: r66206", "tree": {"sha": "9bd94adf464a1fa3470b4382857e8773eb3f3a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bd94adf464a1fa3470b4382857e8773eb3f3a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f4feceaa01049baed47c24a98be0192f2a54c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f4feceaa01049baed47c24a98be0192f2a54c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f4feceaa01049baed47c24a98be0192f2a54c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f4feceaa01049baed47c24a98be0192f2a54c5/comments", "author": null, "committer": null, "parents": [{"sha": "0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "5c3df09b5f3bbccd6f4374d629bf0f02abe90274", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f4feceaa01049baed47c24a98be0192f2a54c5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f4feceaa01049baed47c24a98be0192f2a54c5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=29f4feceaa01049baed47c24a98be0192f2a54c5", "patch": "@@ -7551,24 +7551,11 @@ reshape_init (tree type, tree *initp)\n \t    {\n \t      /* Loop through the initializable fields, gathering\n \t\t initializers.  */\n-\t      while (*initp)\n+              /* FIXME support non-trivial labeled initializers.  */\n+\t      while (*initp && field)\n \t\t{\n \t\t  tree field_init;\n \n-\t\t  /* Handle designated initializers, as an extension.  */\n-\t\t  if (TREE_PURPOSE (*initp))\n-\t\t    {\n-\t\t      if (pedantic)\n-\t\t\tpedwarn (\"ISO C++ does not allow designated initializers\");\n-\t\t      field = lookup_field_1 (type, TREE_PURPOSE (*initp),\n-\t\t\t\t\t      /*want_type=*/false);\n-\t\t      if (!field || TREE_CODE (field) != FIELD_DECL)\n-\t\t\terror (\"`%T' has no non-static data member named `%D'\",\n-\t\t\t       type, TREE_PURPOSE (*initp));\n-\t\t    }\n-\t\t  if (!field)\n-\t\t    break;\n-\n \t\t  field_init = reshape_init (TREE_TYPE (field), initp);\n \t\t  TREE_CHAIN (field_init) = CONSTRUCTOR_ELTS (new_init);\n \t\t  CONSTRUCTOR_ELTS (new_init) = field_init;"}]}