{"sha": "f337b93018fa596ef1878588c5efd4dd16caab73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzN2I5MzAxOGZhNTk2ZWYxODc4NTg4YzVlZmQ0ZGQxNmNhYWI3Mw==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-05-09T17:21:03Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-09T17:21:03Z"}, "message": "s390.md: (\"SHIFT\"): New mode macro.\n\n2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.md: (\"SHIFT\"): New mode macro.\n\t(\"lr\", \"shift\"): New mode attributes.\n\t(\"ashldi3\", \"lshrdi3\"): Merge.\n\t(\"*ashldi3_31\", \"*lshrdi3\"_31): Merge.\n\t(\"*ashldi3_64\", \"*lshrdi3\"_64): Merge.\n\t(\"ashlsi3\", \"lshrsi3\"): Merge.\n\nFrom-SVN: r99455", "tree": {"sha": "c0f9893ee5dc526dd80fc8123f9ef5ac46f4641c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f9893ee5dc526dd80fc8123f9ef5ac46f4641c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f337b93018fa596ef1878588c5efd4dd16caab73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f337b93018fa596ef1878588c5efd4dd16caab73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f337b93018fa596ef1878588c5efd4dd16caab73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f337b93018fa596ef1878588c5efd4dd16caab73/comments", "author": null, "committer": null, "parents": [{"sha": "9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a91a21f2a05da796a1b0f3a04bbb9f1834698bf"}], "stats": {"total": 104, "additions": 39, "deletions": 65}, "files": [{"sha": "c0d57d60a9b9a55251c6b54d379ba7e893a5e084", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f337b93018fa596ef1878588c5efd4dd16caab73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f337b93018fa596ef1878588c5efd4dd16caab73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f337b93018fa596ef1878588c5efd4dd16caab73", "patch": "@@ -1,3 +1,12 @@\n+2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md: (\"SHIFT\"): New mode macro.\n+\t(\"lr\", \"shift\"): New mode attributes.\n+\t(\"ashldi3\", \"lshrdi3\"): Merge.\n+\t(\"*ashldi3_31\", \"*lshrdi3\"_31): Merge.\n+\t(\"*ashldi3_64\", \"*lshrdi3\"_64): Merge.\n+\t(\"ashlsi3\", \"lshrsi3\"): Merge.\n+\n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.md: (\"DSI\", \"SCOND\"): New mode "}, {"sha": "39e9aba1b5729731f3b22cfb5afb18a38aabcfc4", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 30, "deletions": 65, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f337b93018fa596ef1878588c5efd4dd16caab73/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f337b93018fa596ef1878588c5efd4dd16caab73/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f337b93018fa596ef1878588c5efd4dd16caab73", "patch": "@@ -259,6 +259,18 @@\n ;; This macro allows to unify all 'sCOND' patterns.\n (define_code_macro SCOND [ltu gtu leu geu])\n \n+;; This macro allows some 'ashift' and 'lshiftrt' pattern to be defined from\n+;; the same template.\n+(define_code_macro SHIFT [ashift lshiftrt])\n+\n+\n+;; In SHIFT templates, a string like \"s<lr>dl\" will expand to \"sldl\" in \n+;; 'ashift' and \"srdl\" in 'lshiftrt'.\n+(define_code_attr lr [(ashift \"l\") (lshiftrt \"r\")])\n+\n+;; In SHIFT templates, this attribute holds the correct standard name for the\n+;; pattern itself and the corresponding function calls. \n+(define_code_attr shift [(ashift \"ashl\") (lshiftrt \"lshr\")])\n \n ;; This attribute handles differences in the instruction 'type' and will result\n ;; in \"RRE\" for DImode and \"RR\" for SImode.\n@@ -6329,35 +6341,35 @@\n \n \n ;;\n-;;- Arithmetic shift instructions.\n+;;- Shift instructions.\n ;;\n \n ;\n-; ashldi3 instruction pattern(s).\n+; (ashl|lshr)di3 instruction pattern(s).\n ;\n \n-(define_expand \"ashldi3\"\n+(define_expand \"<shift>di3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                   (match_operand:SI 2 \"shift_count_operand\" \"\")))]\n+        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                  (match_operand:SI 2 \"shift_count_operand\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"*ashldi3_31\"\n+(define_insn \"*<shift>di3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                  (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"!TARGET_64BIT\"\n-  \"sldl\\t%0,%Y2\"\n+  \"s<lr>dl\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*ashldi3_64\"\n+(define_insn \"*<shift>di3_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashift:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                  (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"TARGET_64BIT\"\n-  \"sllg\\t%0,%1,%Y2\"\n+  \"s<lr>lg\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -6442,15 +6454,15 @@\n \n \n ;\n-; ashlsi3 instruction pattern(s).\n+; (ashl|lshr)si3 instruction pattern(s).\n ;\n \n-(define_insn \"ashlsi3\"\n+(define_insn \"<shift>si3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                   (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+        (SHIFT:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                  (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n   \"\"\n-  \"sll\\t%0,%Y2\"\n+  \"s<lr>l\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n@@ -6493,53 +6505,6 @@\n    (set_attr \"atype\"    \"reg\")])\n \n \n-;;\n-;;- logical shift instructions.\n-;;\n-\n-;\n-; lshrdi3 instruction pattern(s).\n-;\n-\n-(define_expand \"lshrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                     (match_operand:SI 2 \"shift_count_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-(define_insn \"*lshrdi3_31\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n-  \"!TARGET_64BIT\"\n-  \"srdl\\t%0,%Y2\"\n-   [(set_attr \"op_type\"  \"RS\")\n-    (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*lshrdi3_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n-  \"TARGET_64BIT\"\n-  \"srlg\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-;\n-; lshrsi3 instruction pattern(s).\n-;\n-\n-(define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n-  \"\"\n-  \"srl\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-\n ;;\n ;; Branch instruction patterns.\n ;;"}]}