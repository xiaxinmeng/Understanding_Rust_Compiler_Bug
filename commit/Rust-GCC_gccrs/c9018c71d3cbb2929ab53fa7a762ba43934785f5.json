{"sha": "c9018c71d3cbb2929ab53fa7a762ba43934785f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwMThjNzFkM2NiYjI5MjlhYjUzZmE3YTc2MmJhNDM5MzQ3ODVmNQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-19T11:43:53Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-19T11:43:53Z"}, "message": "re PR fortran/34505 (FLOAT/SNGL: Not accepted as actual argument; diagnostics problems)\n\ngcc/fortran/:\n2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/34505\n\t* intrinsic.h (gfc_check_float): New prototype.\n\t(gfc_check_sngl): New prototype.\n\t* check.c (gfc_check_float): New.\n\t(gfc_check_sngl): New.\n\t* intrinsic.c (add_functions): Moved DFLOAT from aliasing DBLE\n\tto be a specific for REAL. Added check routines for FLOAT, DFLOAT\n\tand SNGL.\n\t* intrinsic.texi: Removed individual nodes of FLOAT, DFLOAT and SNGL,\n\tadded them to the list of specifics of REAL instead.\n\ngcc/testsuite/:\n2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/34505\n\t* gfortran.dg/dfloat_1.f90: Add warnings for non-default kind\n\targuments; add check for return value kind.\n\t* gfortran.dg/float_1.f90: Likewise.\n\nFrom-SVN: r159558", "tree": {"sha": "f42d8a016dbee6c93a1f1d422d13a0837cba65d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42d8a016dbee6c93a1f1d422d13a0837cba65d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9018c71d3cbb2929ab53fa7a762ba43934785f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9018c71d3cbb2929ab53fa7a762ba43934785f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9018c71d3cbb2929ab53fa7a762ba43934785f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9018c71d3cbb2929ab53fa7a762ba43934785f5/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81f3232690f1ad1fea044d6e6b60930acd7f16e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f3232690f1ad1fea044d6e6b60930acd7f16e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f3232690f1ad1fea044d6e6b60930acd7f16e7"}], "stats": {"total": 208, "additions": 76, "deletions": 132}, "files": [{"sha": "09d758ac6e2cd586d4e42cab0b47b7c3096e49ef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -1,3 +1,16 @@\n+2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34505\n+\t* intrinsic.h (gfc_check_float): New prototype.\n+\t(gfc_check_sngl): New prototype.\n+\t* check.c (gfc_check_float): New.\n+\t(gfc_check_sngl): New.\n+\t* intrinsic.c (add_functions): Moved DFLOAT from aliasing DBLE\n+\tto be a specific for REAL. Added check routines for FLOAT, DFLOAT\n+\tand SNGL.\n+\t* intrinsic.texi: Removed individual nodes of FLOAT, DFLOAT and SNGL,\n+\tadded them to the list of specifics of REAL instead.\n+\n 2010-05-17  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/43990"}, {"sha": "3a68c29b543f3557322276a4d79925711f3a9e29", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -1244,6 +1244,20 @@ gfc_check_eoshift (gfc_expr *array, gfc_expr *shift, gfc_expr *boundary,\n   return SUCCESS;\n }\n \n+gfc_try\n+gfc_check_float (gfc_expr *a)\n+{\n+  if (type_check (a, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if ((a->ts.kind != gfc_default_integer_kind)\n+      && gfc_notify_std (GFC_STD_GNU, \"GNU extension: non-default INTEGER\"\n+\t\t\t \"kind argument to %s intrinsic at %L\",\n+\t\t\t gfc_current_intrinsic, &a->where) == FAILURE\t)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n \n /* A single complex argument.  */\n \n@@ -1256,7 +1270,6 @@ gfc_check_fn_c (gfc_expr *a)\n   return SUCCESS;\n }\n \n-\n /* A single real argument.  */\n \n gfc_try\n@@ -2953,6 +2966,20 @@ gfc_check_sleep_sub (gfc_expr *seconds)\n   return SUCCESS;\n }\n \n+gfc_try\n+gfc_check_sngl (gfc_expr *a)\n+{\n+  if (type_check (a, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if ((a->ts.kind != gfc_default_double_kind)\n+      && gfc_notify_std (GFC_STD_GNU, \"GNU extension: non double precision\"\n+\t\t\t \"REAL argument to %s intrinsic at %L\",\n+\t\t\t gfc_current_intrinsic, &a->where) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n \n gfc_try\n gfc_check_spread (gfc_expr *source, gfc_expr *dim, gfc_expr *ncopies)"}, {"sha": "02dea3039fd7da32b0648cf64938746159209872", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -1476,8 +1476,6 @@ add_functions (void)\n \t     gfc_check_dble, gfc_simplify_dble, gfc_resolve_dble,\n \t     a, BT_REAL, dr, REQUIRED);\n \n-  make_alias (\"dfloat\", GFC_STD_GNU);\n-\n   make_generic (\"dble\", GFC_ISYM_DBLE, GFC_STD_F77);\n \n   add_sym_1 (\"digits\", GFC_ISYM_DIGITS, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n@@ -2293,11 +2291,15 @@ add_functions (void)\n \t     a, BT_UNKNOWN, dr, REQUIRED);\n \n   add_sym_1 (\"float\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n-\t     gfc_check_i, gfc_simplify_float, NULL,\n+\t     gfc_check_float, gfc_simplify_float, NULL,\n \t     a, BT_INTEGER, di, REQUIRED);\n \n+  add_sym_1 (\"dfloat\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n+\t     gfc_check_float, gfc_simplify_dble, gfc_resolve_dble,\n+\t     a, BT_REAL, dr, REQUIRED);\n+\n   add_sym_1 (\"sngl\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sngl, NULL,\n+\t     gfc_check_sngl, gfc_simplify_sngl, NULL,\n \t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);"}, {"sha": "2e1b95eb3752ecbcea82ac221586e41f594b990b", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -59,6 +59,7 @@ gfc_try gfc_check_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_dtime_etime (gfc_expr *);\n gfc_try gfc_check_fgetputc (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_fgetput (gfc_expr *);\n+gfc_try gfc_check_float (gfc_expr *);\n gfc_try gfc_check_fstat (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_ftell (gfc_expr *);\n gfc_try gfc_check_fn_c (gfc_expr *);\n@@ -134,6 +135,7 @@ gfc_try gfc_check_size (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_sign (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_signal (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_sizeof (gfc_expr *);\n+gfc_try gfc_check_sngl (gfc_expr *);\n gfc_try gfc_check_spread (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_srand (gfc_expr *);\n gfc_try gfc_check_stat (gfc_expr *, gfc_expr *);"}, {"sha": "bc0ea8dce3ad9447580848561f4b15be5872b290", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 9, "deletions": 122, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -92,7 +92,6 @@ Some basic guidelines for editing this document:\n * @code{DATE_AND_TIME}: DATE_AND_TIME, Date and time subroutine\n * @code{DBLE}:          DBLE,      Double precision conversion function\n * @code{DCMPLX}:        DCMPLX,    Double complex conversion function\n-* @code{DFLOAT}:        DFLOAT,    Double precision conversion function\n * @code{DIGITS}:        DIGITS,    Significant digits function\n * @code{DIM}:           DIM,       Positive difference\n * @code{DOT_PRODUCT}:   DOT_PRODUCT, Dot product function\n@@ -111,7 +110,6 @@ Some basic guidelines for editing this document:\n * @code{FDATE}:         FDATE,     Subroutine (or function) to get the current time as a string\n * @code{FGET}:          FGET,      Read a single character in stream mode from stdin\n * @code{FGETC}:         FGETC,     Read a single character in stream mode\n-* @code{FLOAT}:         FLOAT,     Convert integer to default real\n * @code{FLOOR}:         FLOOR,     Integer floor function\n * @code{FLUSH}:         FLUSH,     Flush I/O unit(s)\n * @code{FNUM}:          FNUM,      File number function\n@@ -241,7 +239,6 @@ Some basic guidelines for editing this document:\n * @code{SIZE}:          SIZE,      Function to determine the size of an array\n * @code{SIZEOF}:        SIZEOF,    Determine the size in bytes of an expression\n * @code{SLEEP}:         SLEEP,     Sleep for the specified number of seconds\n-* @code{SNGL}:          SNGL,      Convert double precision real to default real\n * @code{SPACING}:       SPACING,   Smallest distance between two numbers of a given type\n * @code{SPREAD}:        SPREAD,    Add a dimension to an array \n * @code{SQRT}:          SQRT,      Square-root function\n@@ -3102,7 +3099,7 @@ end program test_dble\n @end smallexample\n \n @item @emph{See also}:\n-@ref{DFLOAT}, @ref{FLOAT}, @ref{REAL}\n+@ref{REAL}\n @end table\n \n \n@@ -3156,47 +3153,6 @@ end program test_dcmplx\n @end table\n \n \n-\n-@node DFLOAT\n-@section @code{DFLOAT} --- Double conversion function \n-@fnindex DFLOAT\n-@cindex conversion, to real\n-\n-@table @asis\n-@item @emph{Description}:\n-@code{DFLOAT(A)} Converts @var{A} to double precision real type.\n-\n-@item @emph{Standard}:\n-GNU extension\n-\n-@item @emph{Class}:\n-Elemental function\n-\n-@item @emph{Syntax}:\n-@code{RESULT = DFLOAT(A)}\n-\n-@item @emph{Arguments}:\n-@multitable @columnfractions .15 .70\n-@item @var{A} @tab The type shall be @code{INTEGER}.\n-@end multitable\n-\n-@item @emph{Return value}:\n-The return value is of type double precision real.\n-\n-@item @emph{Example}:\n-@smallexample\n-program test_dfloat\n-    integer :: i = 5\n-    print *, dfloat(i)\n-end program test_dfloat\n-@end smallexample\n-\n-@item @emph{See also}:\n-@ref{DBLE}, @ref{FLOAT}, @ref{REAL}\n-@end table\n-\n-\n-\n @node DIGITS\n @section @code{DIGITS} --- Significant binary digits function\n @fnindex DIGITS\n@@ -4030,46 +3986,6 @@ end program test_fdate\n \n \n \n-@node FLOAT\n-@section @code{FLOAT} --- Convert integer to default real\n-@fnindex FLOAT\n-@cindex conversion, to real\n-\n-@table @asis\n-@item @emph{Description}:\n-@code{FLOAT(A)} converts the integer @var{A} to a default real value.\n-\n-@item @emph{Standard}:\n-Fortran 77 and later\n-\n-@item @emph{Class}:\n-Elemental function\n-\n-@item @emph{Syntax}:\n-@code{RESULT = FLOAT(A)}\n-\n-@item @emph{Arguments}:\n-@multitable @columnfractions .15 .70\n-@item @var{A} @tab The type shall be @code{INTEGER}.\n-@end multitable\n-\n-@item @emph{Return value}:\n-The return value is of type default @code{REAL}.\n-\n-@item @emph{Example}:\n-@smallexample\n-program test_float\n-    integer :: i = 1\n-    if (float(i) /= 1.) call abort\n-end program test_float\n-@end smallexample\n-\n-@item @emph{See also}:\n-@ref{DBLE}, @ref{DFLOAT}, @ref{REAL}\n-@end table\n-\n-\n-\n @node FGET\n @section @code{FGET} --- Read a single character in stream mode from stdin \n @fnindex FGET\n@@ -9154,6 +9070,9 @@ See @code{PRECISION} for an example.\n @section @code{REAL} --- Convert to real type \n @fnindex REAL\n @fnindex REALPART\n+@fnindex FLOAT\n+@fnindex DFLOAT\n+@fnindex SNGL\n @cindex conversion, to real\n @cindex complex numbers, real part\n \n@@ -9210,13 +9129,15 @@ end program test_real\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name           @tab Argument           @tab Return type     @tab Standard\n-@item @code{REAL(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n+@item Name             @tab Argument           @tab Return type     @tab Standard\n+@item @code{FLOAT(A)}  @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n+@item @code{DFLOAT(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(8)}  @tab GNU extension\n+@item @code{SNGL(A)}   @tab @code{INTEGER(8)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n @end multitable\n \n \n @item @emph{See also}:\n-@ref{DBLE}, @ref{DFLOAT}, @ref{FLOAT}\n+@ref{DBLE}\n \n @end table\n \n@@ -10215,40 +10136,6 @@ end\n \n \n \n-@node SNGL\n-@section @code{SNGL} --- Convert double precision real to default real\n-@fnindex SNGL\n-@cindex conversion, to real\n-\n-@table @asis\n-@item @emph{Description}:\n-@code{SNGL(A)} converts the double precision real @var{A}\n-to a default real value. This is an archaic form of @code{REAL}\n-that is specific to one type for @var{A}.\n-\n-@item @emph{Standard}:\n-Fortran 77 and later\n-\n-@item @emph{Class}:\n-Elemental function\n-\n-@item @emph{Syntax}:\n-@code{RESULT = SNGL(A)}\n-\n-@item @emph{Arguments}:\n-@multitable @columnfractions .15 .70\n-@item @var{A} @tab The type shall be a double precision @code{REAL}.\n-@end multitable\n-\n-@item @emph{Return value}:\n-The return value is of type default @code{REAL}.\n-\n-@item @emph{See also}:\n-@ref{DBLE}\n-@end table\n-\n-\n-\n @node SPACING\n @section @code{SPACING} --- Smallest distance between two numbers of a given type\n @fnindex SPACING"}, {"sha": "135c9b2fc5d947e6ac6e402fa7491879fe72e507", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -1,3 +1,10 @@\n+2010-05-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34505\n+\t* gfortran.dg/dfloat_1.f90: Add warnings for non-default kind\n+\targuments; add check for return value kind.\n+\t* gfortran.dg/float_1.f90: Likewise.\n+\n 2010-05-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/20011009-1.c (COMMENT): Define."}, {"sha": "6971c6a1313d12b033f136d6809aa5bbcdefa136", "filename": "gcc/testsuite/gfortran.dg/dfloat_1.f90", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdfloat_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdfloat_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdfloat_1.f90?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -8,8 +8,11 @@ program dfloat_1\n    i2 = -4_2\n    i4 = 4_4\n    i8 = 10_8\n-   if (dfloat(i2) /= -4.d0) call abort()\n+   if (dfloat(i2) /= -4.d0) call abort()       ! { dg-warning \"non-default INTEGER\" }\n    if (dfloat(i4) /= 4.d0) call abort()\n-   if (dfloat(i8) /= 10.d0) call abort()\n+   if (dfloat(i8) /= 10.d0) call abort()       ! { dg-warning \"non-default INTEGER\" }\n    if (dfloat(i4*i2) /= -16.d0) call abort()\n+\n+   if (kind(dfloat(i4)) /= kind(1.0_8)) call abort\n+   if (kind(dfloat(i8)) /= kind(1.0_8)) call abort   ! { dg-warning \"non-default INTEGER\" }\n end program dfloat_1"}, {"sha": "0f3c0626cb0c21647111b5f00cf2a1acfbdf2f2b", "filename": "gcc/testsuite/gfortran.dg/float_1.f90", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffloat_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9018c71d3cbb2929ab53fa7a762ba43934785f5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffloat_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffloat_1.f90?ref=c9018c71d3cbb2929ab53fa7a762ba43934785f5", "patch": "@@ -5,8 +5,11 @@ program test_float\n    integer(2) :: i2 = 1\n    integer(4) :: i4 = 1\n    integer(8) :: i8 = 1\n-   if (float(i1) /= 1.) call abort\n-   if (float(i2) /= 1.) call abort\n+   if (float(i1) /= 1.) call abort                ! { dg-warning \"non-default INTEGER\" }\n+   if (float(i2) /= 1.) call abort                ! { dg-warning \"non-default INTEGER\" }\n    if (float(i4) /= 1.) call abort\n-   if (float(i8) /= 1.) call abort\n+   if (float(i8) /= 1.) call abort                ! { dg-warning \"non-default INTEGER\" }\n+\n+   if (kind(float(i4)) /= kind(1.0)) call abort\n+   if (kind(float(i8)) /= kind(1.0)) call abort   ! { dg-warning \"non-default INTEGER\" }\n end program test_float"}]}