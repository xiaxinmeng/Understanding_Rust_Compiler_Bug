{"sha": "d8d9514c872857d35c69331bf672b8eb94939e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkOTUxNGM4NzI4NTdkMzVjNjkzMzFiZjY3MmI4ZWI5NDkzOWUyMQ==", "commit": {"author": {"name": "Vlad Lazar", "email": "vlad.lazar@arm.com", "date": "2018-09-13T13:43:48Z"}, "committer": {"name": "Vlad Lazar", "email": "vladlazar@gcc.gnu.org", "date": "2018-09-13T13:43:48Z"}, "message": "Schedule by INSN_COST in case of tie\n\n2018-09-13  Vlad Lazar  <vlad.lazar@arm.com>\n\n\t* haifa-sched.c (rank_for_schedule): Schedule by INSN_COST.\n\t(rfs_decision): New scheduling decision.\n\nFrom-SVN: r264270", "tree": {"sha": "4346e9e7761c4a0faba4c250647cfcca10ebf403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4346e9e7761c4a0faba4c250647cfcca10ebf403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d9514c872857d35c69331bf672b8eb94939e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d9514c872857d35c69331bf672b8eb94939e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d9514c872857d35c69331bf672b8eb94939e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d9514c872857d35c69331bf672b8eb94939e21/comments", "author": null, "committer": null, "parents": [{"sha": "2aa4cc744ff8ebfaaec69edf8d21411cecc0b783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa4cc744ff8ebfaaec69edf8d21411cecc0b783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa4cc744ff8ebfaaec69edf8d21411cecc0b783"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "b754f10ff6661aaff8022423d4639125f4a6cf0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9514c872857d35c69331bf672b8eb94939e21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9514c872857d35c69331bf672b8eb94939e21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8d9514c872857d35c69331bf672b8eb94939e21", "patch": "@@ -1,3 +1,8 @@\n+2018-09-13  Vlad Lazar  <vlad.lazar@arm.com>\n+\n+\t* haifa-sched.c (rank_for_schedule): Schedule by INSN_COST.\n+\t(rfs_decision): New scheduling decision.\n+\n 2018-09-13  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/87134"}, {"sha": "1fdc9df9fb26f23758ec8326cec91eecc4c917c1", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9514c872857d35c69331bf672b8eb94939e21/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9514c872857d35c69331bf672b8eb94939e21/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=d8d9514c872857d35c69331bf672b8eb94939e21", "patch": "@@ -2542,15 +2542,15 @@ enum rfs_decision {\n   RFS_SCHED_GROUP, RFS_PRESSURE_DELAY, RFS_PRESSURE_TICK,\n   RFS_FEEDS_BACKTRACK_INSN, RFS_PRIORITY, RFS_SPECULATION,\n   RFS_SCHED_RANK, RFS_LAST_INSN, RFS_PRESSURE_INDEX,\n-  RFS_DEP_COUNT, RFS_TIE, RFS_FUSION, RFS_N };\n+  RFS_DEP_COUNT, RFS_TIE, RFS_FUSION, RFS_COST, RFS_N };\n \n /* Corresponding strings for print outs.  */\n static const char *rfs_str[RFS_N] = {\n   \"RFS_LIVE_RANGE_SHRINK1\", \"RFS_LIVE_RANGE_SHRINK2\",\n   \"RFS_SCHED_GROUP\", \"RFS_PRESSURE_DELAY\", \"RFS_PRESSURE_TICK\",\n   \"RFS_FEEDS_BACKTRACK_INSN\", \"RFS_PRIORITY\", \"RFS_SPECULATION\",\n   \"RFS_SCHED_RANK\", \"RFS_LAST_INSN\", \"RFS_PRESSURE_INDEX\",\n-  \"RFS_DEP_COUNT\", \"RFS_TIE\", \"RFS_FUSION\" };\n+  \"RFS_DEP_COUNT\", \"RFS_TIE\", \"RFS_FUSION\", \"RFS_COST\" };\n \n /* Statistical breakdown of rank_for_schedule decisions.  */\n struct rank_for_schedule_stats_t { unsigned stats[RFS_N]; };\n@@ -2803,6 +2803,14 @@ rank_for_schedule (const void *x, const void *y)\n   if (flag_sched_dep_count_heuristic && val != 0)\n     return rfs_result (RFS_DEP_COUNT, val, tmp, tmp2);\n \n+  /* Sort by INSN_COST rather than INSN_LUID.  This means that instructions\n+     which take longer to execute are prioritised and it leads to more\n+     dual-issue opportunities on in-order cores which have this feature.  */\n+\n+  if (INSN_COST (tmp) != INSN_COST (tmp2))\n+    return rfs_result (RFS_COST, INSN_COST (tmp2) - INSN_COST (tmp),\n+\t\t       tmp, tmp2);\n+\n   /* If insns are equally good, sort by INSN_LUID (original insn order),\n      so that we make the sort stable.  This minimizes instruction movement,\n      thus minimizing sched's effect on debugging and cross-jumping.  */"}]}