{"sha": "3e0297630411f86aeb2d559cd4b379fec46a4654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwMjk3NjMwNDExZjg2YWViMmQ1NTljZDRiMzc5ZmVjNDZhNDY1NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-04-07T23:52:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-04-07T23:52:32Z"}, "message": "function.h (rtl): Rename to x_rtl.\n\n\n\t* function.h (rtl): Rename to x_rtl.\n\t(crtl): New define.\n\t(return_label, naked_return_label, stack_slot_list, parm_birth_insn,\n\tframe_offset, stack_check_probe_note, arg_pointer_save_area,\n\tused_temp_slots avail_temp_slots, temp_slot_level,\n\tnonlocal_goto_handler_labels): Update accesstors.\n\t(rtl): New global variable.\n\t(struct function): Move some fileds to rtl_data.\n\t(get_arg_pointer_save_area): Update prototype.\n\t* builtins.c (expand_builtin_setjmp_receiver): Update call of\n\tget_arg_pointer_save_area.\n\t* expr.c (init_expr): Update\n\t* function.c (get_frame_size): Update\n\t(assign_stack_local): Update\n\t(expand_function_end): Update.\n\t(get_art_pointer_save_area): Update\n\t* function.h \n\t* emit-rtl.c (rtl): Declare.\n\t(regno_reg_rtx): Declare.\n\t(first_insn, last_insn, cur_insn_uid, last_location, first_label_num):\n\tUpdate.\n\t(gen_reg_rtx): Update.\n\t* varasm.c (n_deferred_constatns): Update accestor.\n\t(init_varasm_status): Do not allocate varasm_status.\n\t(force_const_mem, get_pool_size, output_constant_pool): Update.\n\t* stmt.c (force_label_rtx): Do not use x_ prefixes.\n\t(expand_nl_goto_receiver): Update get_arg_pointer_save_area.\n\t* m32c/m32.c (m32c_leaf_function_p, m32c_function_needs_enter): Update.\n\t* sparc/sparc.h (INIT_EXPANDERS): Update.\n\t* ia64/ia64.h (INIT_EXPANDERS): Update.\n\nFrom-SVN: r133994", "tree": {"sha": "4160eb6c77f2042142a19b7b0d431545c848a42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4160eb6c77f2042142a19b7b0d431545c848a42b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0297630411f86aeb2d559cd4b379fec46a4654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0297630411f86aeb2d559cd4b379fec46a4654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0297630411f86aeb2d559cd4b379fec46a4654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0297630411f86aeb2d559cd4b379fec46a4654/comments", "author": null, "committer": null, "parents": [{"sha": "47583040f760ccfa6948622033a4835c8b747c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47583040f760ccfa6948622033a4835c8b747c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47583040f760ccfa6948622033a4835c8b747c5a"}], "stats": {"total": 158, "additions": 98, "deletions": 60}, "files": [{"sha": "7867fa1a382665836266b41361784109d7a794df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -1,3 +1,36 @@\n+2008-04-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* function.h (rtl): Rename to x_rtl.\n+\t(crtl): New define.\n+\t(return_label, naked_return_label, stack_slot_list, parm_birth_insn,\n+\tframe_offset, stack_check_probe_note, arg_pointer_save_area,\n+\tused_temp_slots avail_temp_slots, temp_slot_level,\n+\tnonlocal_goto_handler_labels): Update accesstors.\n+\t(rtl): New global variable.\n+\t(struct function): Move some fileds to rtl_data.\n+\t(get_arg_pointer_save_area): Update prototype.\n+\t* builtins.c (expand_builtin_setjmp_receiver): Update call of\n+\tget_arg_pointer_save_area.\n+\t* expr.c (init_expr): Update\n+\t* function.c (get_frame_size): Update\n+\t(assign_stack_local): Update\n+\t(expand_function_end): Update.\n+\t(get_art_pointer_save_area): Update\n+\t* function.h \n+\t* emit-rtl.c (rtl): Declare.\n+\t(regno_reg_rtx): Declare.\n+\t(first_insn, last_insn, cur_insn_uid, last_location, first_label_num):\n+\tUpdate.\n+\t(gen_reg_rtx): Update.\n+\t* varasm.c (n_deferred_constatns): Update accestor.\n+\t(init_varasm_status): Do not allocate varasm_status.\n+\t(force_const_mem, get_pool_size, output_constant_pool): Update.\n+\t* stmt.c (force_label_rtx): Do not use x_ prefixes.\n+\t(expand_nl_goto_receiver): Update get_arg_pointer_save_area.\n+\t* m32c/m32.c (m32c_leaf_function_p, m32c_function_needs_enter): Update.\n+\t* sparc/sparc.h (INIT_EXPANDERS): Update.\n+\t* ia64/ia64.h (INIT_EXPANDERS): Update.\n+\n 2008-04-07  James E. Wilson  <wilson@tuliptree.org>\n \n \t* reload.c (push_secondary_reload): Add missing break to for loop."}, {"sha": "a4306e8cd837d699de31bd6d3a8d035881832b60", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -982,7 +982,7 @@ enum reg_class\n #define INIT_EXPANDERS\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n     ia64_init_expanders ();                             \\\n-    if (rtl.emit.regno_pointer_align)\t\\\n+    if (crtl->emit.regno_pointer_align)\t\\\n       REGNO_POINTER_ALIGN (ARG_POINTER_REGNUM) = 64;\t\\\n   } while (0)\n "}, {"sha": "f1346f4677514da81677f91d9fd3aca50f06c4f9", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -3889,20 +3889,20 @@ m32c_leaf_function_p (void)\n   struct sequence_stack *seq;\n   int rv;\n \n-  saved_first = rtl.emit.x_first_insn;\n-  saved_last = rtl.emit.x_last_insn;\n-  for (seq = rtl.emit.sequence_stack; seq && seq->next; seq = seq->next)\n+  saved_first = crtl->emit.x_first_insn;\n+  saved_last = crtl->emit.x_last_insn;\n+  for (seq = crtl->emit.sequence_stack; seq && seq->next; seq = seq->next)\n     ;\n   if (seq)\n     {\n-      rtl.emit.x_first_insn = seq->first;\n-      rtl.emit.x_last_insn = seq->last;\n+      crtl->emit.x_first_insn = seq->first;\n+      crtl->emit.x_last_insn = seq->last;\n     }\n \n   rv = leaf_function_p ();\n \n-  rtl.emit.x_first_insn = saved_first;\n-  rtl.emit.x_last_insn = saved_last;\n+  crtl->emit.x_first_insn = saved_first;\n+  crtl->emit.x_last_insn = saved_last;\n   return rv;\n }\n \n@@ -3918,7 +3918,7 @@ m32c_function_needs_enter (void)\n   rtx fb = gen_rtx_REG (Pmode, FB_REGNO);\n \n   insn = get_insns ();\n-  for (seq = rtl.emit.sequence_stack;\n+  for (seq = crtl->emit.sequence_stack;\n        seq;\n        insn = seq->first, seq = seq->next);\n "}, {"sha": "d1c607c84b137e27700ef287c8b59e5d941b3f07", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -953,7 +953,7 @@ extern int sparc_mode_class[];\n /* Given the stack bias, the stack pointer isn't actually aligned.  */\n #define INIT_EXPANDERS\t\t\t\t\t\t\t \\\n   do {\t\t\t\t\t\t\t\t\t \\\n-    if (rtl.emit.regno_pointer_align && SPARC_STACK_BIAS)\t \\\n+    if (crtl->emit.regno_pointer_align && SPARC_STACK_BIAS)\t \\\n       {\t\t\t\t\t\t\t\t\t \\\n \tREGNO_POINTER_ALIGN (STACK_POINTER_REGNUM) = BITS_PER_UNIT;\t \\\n \tREGNO_POINTER_ALIGN (HARD_FRAME_POINTER_REGNUM) = BITS_PER_UNIT; \\"}, {"sha": "aa9e96584a14bf35dd57052a8676675e40ad63e4", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -68,7 +68,7 @@ enum machine_mode ptr_mode;\t/* Mode whose width is POINTER_SIZE.  */\n \n /* Datastructures maintained for currently processed function in RTL form.  */\n \n-struct rtl_data rtl;\n+struct rtl_data x_rtl;\n \n /* Indexed by pseudo register number, gives the rtx for that pseudo.\n    Allocated in parallel with regno_pointer_align.  \n@@ -172,11 +172,11 @@ static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n      htab_t const_fixed_htab;\n \n-#define first_insn (rtl.emit.x_first_insn)\n-#define last_insn (rtl.emit.x_last_insn)\n-#define cur_insn_uid (rtl.emit.x_cur_insn_uid)\n-#define last_location (rtl.emit.x_last_location)\n-#define first_label_num (rtl.emit.x_first_label_num)\n+#define first_insn (crtl->emit.x_first_insn)\n+#define last_insn (crtl->emit.x_last_insn)\n+#define cur_insn_uid (crtl->emit.x_cur_insn_uid)\n+#define last_location (crtl->emit.x_last_location)\n+#define first_label_num (crtl->emit.x_first_label_num)\n \n static rtx make_call_insn_raw (rtx);\n static rtx change_address_1 (rtx, enum machine_mode, rtx, int);\n@@ -887,22 +887,22 @@ gen_reg_rtx (enum machine_mode mode)\n   /* Make sure regno_pointer_align, and regno_reg_rtx are large\n      enough to have an element for this pseudo reg number.  */\n \n-  if (reg_rtx_no == rtl.emit.regno_pointer_align_length)\n+  if (reg_rtx_no == crtl->emit.regno_pointer_align_length)\n     {\n-      int old_size = rtl.emit.regno_pointer_align_length;\n+      int old_size = crtl->emit.regno_pointer_align_length;\n       char *new;\n       rtx *new1;\n \n-      new = xrealloc (rtl.emit.regno_pointer_align, old_size * 2);\n+      new = xrealloc (crtl->emit.regno_pointer_align, old_size * 2);\n       memset (new + old_size, 0, old_size);\n-      rtl.emit.regno_pointer_align = (unsigned char *) new;\n+      crtl->emit.regno_pointer_align = (unsigned char *) new;\n \n       new1 = ggc_realloc (regno_reg_rtx,\n \t\t\t  old_size * 2 * sizeof (rtx));\n       memset (new1 + old_size, 0, old_size * sizeof (rtx));\n       regno_reg_rtx = new1;\n \n-      rtl.emit.regno_pointer_align_length = old_size * 2;\n+      crtl->emit.regno_pointer_align_length = old_size * 2;\n     }\n \n   val = gen_raw_REG (mode, reg_rtx_no);\n@@ -5009,14 +5009,14 @@ init_emit (void)\n \n   /* Init the tables that describe all the pseudo regs.  */\n \n-  rtl.emit.regno_pointer_align_length = LAST_VIRTUAL_REGISTER + 101;\n+  crtl->emit.regno_pointer_align_length = LAST_VIRTUAL_REGISTER + 101;\n \n-  rtl.emit.regno_pointer_align\n-    = xcalloc (rtl.emit.regno_pointer_align_length\n+  crtl->emit.regno_pointer_align\n+    = xcalloc (crtl->emit.regno_pointer_align_length\n \t       * sizeof (unsigned char), 1);\n \n   regno_reg_rtx\n-    = ggc_alloc (rtl.emit.regno_pointer_align_length * sizeof (rtx));\n+    = ggc_alloc (crtl->emit.regno_pointer_align_length * sizeof (rtx));\n \n   /* Put copies of all the hard registers into regno_reg_rtx.  */\n   memcpy (regno_reg_rtx,"}, {"sha": "98f7c1d8ecdb3ef31501670cbdf5fe8edc8e2118", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -344,7 +344,7 @@ init_expr_target (void)\n void\n init_expr (void)\n {\n-  memset (&rtl.expr, 0, sizeof (rtl.expr));\n+  memset (&crtl->expr, 0, sizeof (crtl->expr));\n }\n \f\n /* Copy data from FROM to TO, where the machine modes are not the same."}, {"sha": "a2fdcaa406657d1d7e007212965c8fbbe17d0b2f", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -281,10 +281,10 @@ free_after_compilation (struct function *f)\n   VEC_free (int, heap, prologue);\n   VEC_free (int, heap, epilogue);\n   VEC_free (int, heap, sibcall_epilogue);\n-  if (rtl.emit.regno_pointer_align)\n-    free (rtl.emit.regno_pointer_align);\n+  if (crtl->emit.regno_pointer_align)\n+    free (crtl->emit.regno_pointer_align);\n \n-  memset (&rtl, 0, sizeof (rtl));\n+  memset (crtl, 0, sizeof (struct rtl_data));\n   f->eh = NULL;\n   f->machine = NULL;\n   f->cfg = NULL;\n@@ -3904,7 +3904,7 @@ push_struct_function (tree fndecl)\n static void\n prepare_function_start (void)\n {\n-  gcc_assert (!rtl.emit.x_last_insn);\n+  gcc_assert (!crtl->emit.x_last_insn);\n   init_emit ();\n   init_varasm_status ();\n   init_expr ();"}, {"sha": "5c9d63f11fc7aedc432a99c6b4494b66bdd25447", "filename": "gcc/function.h", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -87,13 +87,13 @@ struct emit_status GTY(())\n    FIXME: We could put it into emit_status struct, but gengtype is not able to deal\n    with length attribute nested in top level structures.  */\n \n-extern GTY ((length (\"rtl.emit.x_reg_rtx_no\"))) rtx * regno_reg_rtx;\n+extern GTY ((length (\"crtl->emit.x_reg_rtx_no\"))) rtx * regno_reg_rtx;\n \n /* For backward compatibility... eventually these should all go away.  */\n-#define reg_rtx_no (rtl.emit.x_reg_rtx_no)\n-#define seq_stack (rtl.emit.sequence_stack)\n+#define reg_rtx_no (crtl->emit.x_reg_rtx_no)\n+#define seq_stack (crtl->emit.sequence_stack)\n \n-#define REGNO_POINTER_ALIGN(REGNO) (rtl.emit.regno_pointer_align[REGNO])\n+#define REGNO_POINTER_ALIGN(REGNO) (crtl->emit.regno_pointer_align[REGNO])\n \n struct expr_status GTY(())\n {\n@@ -136,12 +136,12 @@ struct expr_status GTY(())\n   rtx x_forced_labels;\n };\n \n-#define pending_stack_adjust (rtl.expr.x_pending_stack_adjust)\n-#define inhibit_defer_pop (rtl.expr.x_inhibit_defer_pop)\n-#define saveregs_value (rtl.expr.x_saveregs_value)\n-#define apply_args_value (rtl.expr.x_apply_args_value)\n-#define forced_labels (rtl.expr.x_forced_labels)\n-#define stack_pointer_delta (rtl.expr.x_stack_pointer_delta)\n+#define pending_stack_adjust (crtl->expr.x_pending_stack_adjust)\n+#define inhibit_defer_pop (crtl->expr.x_inhibit_defer_pop)\n+#define saveregs_value (crtl->expr.x_saveregs_value)\n+#define apply_args_value (crtl->expr.x_apply_args_value)\n+#define forced_labels (crtl->expr.x_forced_labels)\n+#define stack_pointer_delta (crtl->expr.x_stack_pointer_delta)\n \n struct gimple_df;\n struct temp_slot;\n@@ -193,7 +193,7 @@ struct rtl_data GTY(())\n   rtx x_naked_return_label;\n \n   /* List (chain of EXPR_LISTs) of all stack slots in this function.\n-     Made for the sake of unshare_all_rtl.  */\n+     Made for the sake of unshare_all_crtl->  */\n   rtx x_stack_slot_list;\n \n   /* Place after which to insert the tail_recursion_label if we need one.  */\n@@ -226,19 +226,24 @@ struct rtl_data GTY(())\n   int inl_max_label_num;\n };\n \n-#define return_label (rtl.x_return_label)\n-#define naked_return_label (rtl.x_naked_return_label)\n-#define stack_slot_list (rtl.x_stack_slot_list)\n-#define parm_birth_insn (rtl.x_parm_birth_insn)\n-#define frame_offset (rtl.x_frame_offset)\n-#define stack_check_probe_note (rtl.x_stack_check_probe_note)\n-#define arg_pointer_save_area (rtl.x_arg_pointer_save_area)\n-#define used_temp_slots (rtl.x_used_temp_slots)\n-#define avail_temp_slots (rtl.x_avail_temp_slots)\n-#define temp_slot_level (rtl.x_temp_slot_level)\n-#define nonlocal_goto_handler_labels (rtl.x_nonlocal_goto_handler_labels)\n-\n-extern GTY(()) struct rtl_data rtl;\n+#define return_label (crtl->x_return_label)\n+#define naked_return_label (crtl->x_naked_return_label)\n+#define stack_slot_list (crtl->x_stack_slot_list)\n+#define parm_birth_insn (crtl->x_parm_birth_insn)\n+#define frame_offset (crtl->x_frame_offset)\n+#define stack_check_probe_note (crtl->x_stack_check_probe_note)\n+#define arg_pointer_save_area (crtl->x_arg_pointer_save_area)\n+#define used_temp_slots (crtl->x_used_temp_slots)\n+#define avail_temp_slots (crtl->x_avail_temp_slots)\n+#define temp_slot_level (crtl->x_temp_slot_level)\n+#define nonlocal_goto_handler_labels (crtl->x_nonlocal_goto_handler_labels)\n+\n+extern GTY(()) struct rtl_data x_rtl;\n+\n+/* Accestor to RTL datastructures.  We keep them statically allocated now since\n+   we never keep multiple functions.  For threaded compiler we might however\n+   want to do differntly.  */\n+#define crtl (&x_rtl)\n \n /* This structure can save all the important global and static variables\n    describing the status of the current function.  */"}, {"sha": "fdfb98f37a37785ab03530a47871342f3947dfea", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0297630411f86aeb2d559cd4b379fec46a4654/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3e0297630411f86aeb2d559cd4b379fec46a4654", "patch": "@@ -70,7 +70,7 @@ struct addr_const;\n struct constant_descriptor_rtx;\n struct rtx_constant_pool;\n \n-#define n_deferred_constants (rtl.varasm.deferred_constants)\n+#define n_deferred_constants (crtl->varasm.deferred_constants)\n \n /* Number for making the label on the next\n    constant that is stored in memory.  */\n@@ -3456,8 +3456,8 @@ create_constant_pool (void)\n void\n init_varasm_status (void)\n {\n-  rtl.varasm.pool = create_constant_pool ();\n-  rtl.varasm.deferred_constants = 0;\n+  crtl->varasm.pool = create_constant_pool ();\n+  crtl->varasm.deferred_constants = 0;\n }\n \f\n /* Given a MINUS expression, simplify it if both sides\n@@ -3494,7 +3494,7 @@ force_const_mem (enum machine_mode mode, rtx x)\n   /* Decide which pool to use.  */\n   pool = (targetm.use_blocks_for_constant_p (mode, x)\n \t  ? shared_constant_pool\n-\t  : rtl.varasm.pool);\n+\t  : crtl->varasm.pool);\n \n   /* Lookup the value in the hashtable.  */\n   tmp.constant = x;\n@@ -3606,7 +3606,7 @@ get_pool_mode (const_rtx addr)\n int\n get_pool_size (void)\n {\n-  return rtl.varasm.pool->offset;\n+  return crtl->varasm.pool->offset;\n }\n \f\n /* Worker function for output_constant_pool_1.  Emit assembly for X\n@@ -3848,7 +3848,7 @@ static void\n output_constant_pool (const char *fnname ATTRIBUTE_UNUSED,\n \t\t      tree fndecl ATTRIBUTE_UNUSED)\n {\n-  struct rtx_constant_pool *pool = rtl.varasm.pool;\n+  struct rtx_constant_pool *pool = crtl->varasm.pool;\n \n   /* It is possible for gcc to call force_const_mem and then to later\n      discard the instructions which refer to the constant.  In such a"}]}