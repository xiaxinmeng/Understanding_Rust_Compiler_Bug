{"sha": "6869c12de3dacfec29bbe662904b8343831e94bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2OWMxMmRlM2RhY2ZlYzI5YmJlNjYyOTA0YjgzNDM4MzFlOTRiZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-23T16:22:28Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-23T16:22:28Z"}, "message": "re PR fortran/83149 ([6- and 7-branches] Missing test for sym->ns->proc_name: crash_signal in toplev.c:325)\n\n2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/83149\n\t* trans-decl.c (gfc_finish_var_decl): Test sym->ns->proc_name\n\tbefore accessing its components.\n\n2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/83149\n\t* gfortran.dg/pr83149_1.f90: New test.\n\t* gfortran.dg/pr83149.f90: Additional source for previous.\n\nFrom-SVN: r257934", "tree": {"sha": "9a45f2964bb87f833b4ad29e6e51c3caaff530da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a45f2964bb87f833b4ad29e6e51c3caaff530da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6869c12de3dacfec29bbe662904b8343831e94bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6869c12de3dacfec29bbe662904b8343831e94bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6869c12de3dacfec29bbe662904b8343831e94bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6869c12de3dacfec29bbe662904b8343831e94bd/comments", "author": null, "committer": null, "parents": [{"sha": "32995c0244ae42436a1ee89de20a082fa2a71d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32995c0244ae42436a1ee89de20a082fa2a71d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32995c0244ae42436a1ee89de20a082fa2a71d93"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "60469d08eaacb2a560434f4a7a6222f4c067bf52", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6869c12de3dacfec29bbe662904b8343831e94bd", "patch": "@@ -1,3 +1,9 @@\n+2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83149\n+\t* trans-decl.c (gfc_finish_var_decl): Test sym->ns->proc_name\n+\tbefore accessing its components.\n+\n 2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/83148"}, {"sha": "6742d2e16b06aadb7382f873e6aa22e9852cf731", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=6869c12de3dacfec29bbe662904b8343831e94bd", "patch": "@@ -609,10 +609,12 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n      function scope.  */\n   if (current_function_decl != NULL_TREE)\n     {\n-      if (sym->ns->proc_name->backend_decl == current_function_decl\n-\t  || sym->result == sym)\n+      if (sym->ns->proc_name\n+\t  && (sym->ns->proc_name->backend_decl == current_function_decl\n+\t      || sym->result == sym))\n \tgfc_add_decl_to_function (decl);\n-      else if (sym->ns->proc_name->attr.flavor == FL_LABEL)\n+      else if (sym->ns->proc_name\n+\t       && sym->ns->proc_name->attr.flavor == FL_LABEL)\n \t/* This is a BLOCK construct.  */\n \tadd_decl_as_local (decl);\n       else\n@@ -704,7 +706,8 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n     }\n \n   /* Keep variables larger than max-stack-var-size off stack.  */\n-  if (!sym->ns->proc_name->attr.recursive && !sym->attr.automatic\n+  if (!(sym->ns->proc_name && sym->ns->proc_name->attr.recursive)\n+      && !sym->attr.automatic\n       && INTEGER_CST_P (DECL_SIZE_UNIT (decl))\n       && !gfc_can_put_var_on_stack (DECL_SIZE_UNIT (decl))\n \t /* Put variable length auto array pointers always into stack.  */"}, {"sha": "dfe208d7fddad1939511adbe337b3a142dae5e0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6869c12de3dacfec29bbe662904b8343831e94bd", "patch": "@@ -1,3 +1,9 @@\n+2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83149\n+\t* gfortran.dg/pr83149_1.f90: New test.\n+\t* gfortran.dg/pr83149.f90: Additional source for previous.\n+\n 2018-02-23  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR testsuite/80551"}, {"sha": "fc0607e136951dc2812c5454600d49e73ee22522", "filename": "gcc/testsuite/gfortran.dg/pr83149.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149.f90?ref=6869c12de3dacfec29bbe662904b8343831e94bd", "patch": "@@ -0,0 +1,14 @@\n+! Compiled with pr83149_1.f90\n+!\n+module mod1\n+  integer :: ncells\n+end module\n+\n+module mod2\n+contains\n+  function get() result(array)\n+    use mod1\n+    real array(ncells)\n+    array = 1.0\n+  end function\n+end module"}, {"sha": "3a8f5d55d9b776a28d7624a4b0d3374c671a3042", "filename": "gcc/testsuite/gfortran.dg/pr83149_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6869c12de3dacfec29bbe662904b8343831e94bd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_1.f90?ref=6869c12de3dacfec29bbe662904b8343831e94bd", "patch": "@@ -0,0 +1,24 @@\n+! Compiled with pr83149.f90\n+! { dg-do run }\n+! { dg-options \"-fno-whole-file\" }\n+! { dg-compile-aux-modules \"pr83149.f90\" }\n+! { dg-additional-sources pr83149.f90 }\n+!\n+! Contributed by Neil Carlson  <neil.n.carlson@gmail.com>\n+!\n+subroutine sub(s)\n+  use mod2\n+  real :: s\n+  s = sum(get())\n+end\n+\n+  use mod1\n+  real :: s\n+  ncells = 2\n+  call sub (s)\n+  if (int (s) .ne. ncells) stop 1\n+  ncells = 10\n+  call sub (s)\n+  if (int (s) .ne. ncells) stop 2\n+end\n+"}]}