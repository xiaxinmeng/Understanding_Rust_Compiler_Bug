{"sha": "87c2080b056ea2b7f145cba927f36e4f40900205", "node_id": "C_kwDOANBUbNoAKDg3YzIwODBiMDU2ZWEyYjdmMTQ1Y2JhOTI3ZjM2ZTRmNDA5MDAyMDU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-10-13T15:47:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-15T23:50:07Z"}, "message": "c++: Add -fimplicit-constexpr\n\nWith each successive C++ standard the restrictions on the use of the\nconstexpr keyword for functions get weaker and weaker; it recently occurred\nto me that it is heading toward the same fate as the C register keyword,\nwhich was once useful for optimization but became obsolete.  Similarly, it\nseems to me that we should be able to just treat inlines as constexpr\nfunctions and not make people add the extra keyword everywhere.\n\nThere were a lot of testcase changes needed; many disabling errors about\nnon-constexpr functions that are now constexpr, and many disabling implicit\nconstexpr so that the tests can check the same thing as before, whether\nthat's mangling or whatever.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Add -fimplicit-constexpr.\n\t* c-cppbuiltin.c: Define __cpp_implicit_constexpr.\n\t* c-opts.c (c_common_post_options): Disable below C++14.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (struct lang_decl_fn): Add implicit_constexpr.\n\t(decl_implicit_constexpr_p): New.\n\t* class.c (type_maybe_constexpr_destructor): Use\n\tTYPE_HAS_TRIVIAL_DESTRUCTOR and maybe_constexpr_fn.\n\t(finalize_literal_type_property): Simplify.\n\t* constexpr.c (is_valid_constexpr_fn): Check for dtor.\n\t(maybe_save_constexpr_fundef): Try to set DECL_DECLARED_CONSTEXPR_P\n\ton inlines.\n\t(cxx_eval_call_expression): Use maybe_constexpr_fn.\n\t(maybe_constexpr_fn): Handle flag_implicit_constexpr.\n\t(var_in_maybe_constexpr_fn): Use maybe_constexpr_fn.\n\t(potential_constant_expression_1): Likewise.\n\t(decl_implicit_constexpr_p): New.\n\t* decl.c (validate_constexpr_redeclaration): Allow change with\n\t-fimplicit-constexpr.\n\t(grok_special_member_properties): Use maybe_constexpr_fn.\n\t* error.c (dump_function_decl): Don't print 'constexpr'\n\tif it's implicit.\n\t* Make-lang.in (check-c++-all): Update.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/to_address/1_neg.cc: Adjust error.\n\t* testsuite/26_numerics/random/concept.cc: Adjust asserts.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/g++-dg.exp: Handle \"impcx\".\n\t* lib/target-supports.exp\n\t(check_effective_target_implicit_constexpr): New.\n\t* g++.dg/abi/abi-tag16.C:\n\t* g++.dg/abi/abi-tag18a.C:\n\t* g++.dg/abi/guard4.C:\n\t* g++.dg/abi/lambda-defarg1.C:\n\t* g++.dg/abi/mangle26.C:\n\t* g++.dg/cpp0x/constexpr-diag3.C:\n\t* g++.dg/cpp0x/constexpr-ex1.C:\n\t* g++.dg/cpp0x/constexpr-ice5.C:\n\t* g++.dg/cpp0x/constexpr-incomplete2.C:\n\t* g++.dg/cpp0x/constexpr-memfn1.C:\n\t* g++.dg/cpp0x/constexpr-neg3.C:\n\t* g++.dg/cpp0x/constexpr-specialization.C:\n\t* g++.dg/cpp0x/inh-ctor19.C:\n\t* g++.dg/cpp0x/inh-ctor30.C:\n\t* g++.dg/cpp0x/lambda/lambda-mangle3.C:\n\t* g++.dg/cpp0x/lambda/lambda-mangle5.C:\n\t* g++.dg/cpp1y/auto-fn12.C:\n\t* g++.dg/cpp1y/constexpr-loop5.C:\n\t* g++.dg/cpp1z/constexpr-lambda7.C:\n\t* g++.dg/cpp2a/constexpr-dtor3.C:\n\t* g++.dg/cpp2a/constexpr-new13.C:\n\t* g++.dg/cpp2a/constinit11.C:\n\t* g++.dg/cpp2a/constinit12.C:\n\t* g++.dg/cpp2a/constinit14.C:\n\t* g++.dg/cpp2a/constinit15.C:\n\t* g++.dg/cpp2a/spaceship-constexpr1.C:\n\t* g++.dg/cpp2a/spaceship-eq3.C:\n\t* g++.dg/cpp2a/udlit-class-nttp-neg2.C:\n\t* g++.dg/debug/dwarf2/auto1.C:\n\t* g++.dg/debug/dwarf2/cdtor-1.C:\n\t* g++.dg/debug/dwarf2/lambda1.C:\n\t* g++.dg/debug/dwarf2/pr54508.C:\n\t* g++.dg/debug/dwarf2/pubnames-2.C:\n\t* g++.dg/debug/dwarf2/pubnames-3.C:\n\t* g++.dg/ext/is_literal_type3.C:\n\t* g++.dg/ext/visibility/template7.C:\n\t* g++.dg/gcov/gcov-12.C:\n\t* g++.dg/gcov/gcov-2.C:\n\t* g++.dg/ipa/devirt-35.C:\n\t* g++.dg/ipa/devirt-36.C:\n\t* g++.dg/ipa/devirt-37.C:\n\t* g++.dg/ipa/devirt-44.C:\n\t* g++.dg/ipa/imm-devirt-1.C:\n\t* g++.dg/lookup/builtin5.C:\n\t* g++.dg/lto/inline-crossmodule-1_0.C:\n\t* g++.dg/modules/enum-1_a.C:\n\t* g++.dg/modules/fn-inline-1_c.C:\n\t* g++.dg/modules/pmf-1_b.C:\n\t* g++.dg/modules/used-1_c.C:\n\t* g++.dg/tls/thread_local11.C:\n\t* g++.dg/tls/thread_local11a.C:\n\t* g++.dg/tm/pr46653.C:\n\t* g++.dg/ubsan/pr70035.C:\n\t* g++.old-deja/g++.other/delete6.C:\n\t* g++.dg/modules/pmf-1_a.H:\n\tAdjust for implicit constexpr.", "tree": {"sha": "f088b9fa589fd828ad401f6555416bc0a343cb9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f088b9fa589fd828ad401f6555416bc0a343cb9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87c2080b056ea2b7f145cba927f36e4f40900205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c2080b056ea2b7f145cba927f36e4f40900205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c2080b056ea2b7f145cba927f36e4f40900205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c2080b056ea2b7f145cba927f36e4f40900205/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e4163a092ce08ba3a88a05ac2fa3f23b1cec28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e4163a092ce08ba3a88a05ac2fa3f23b1cec28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e4163a092ce08ba3a88a05ac2fa3f23b1cec28"}], "stats": {"total": 314, "additions": 211, "deletions": 103}, "files": [{"sha": "eb34d5af004554396f301c53785fa80a672208d3", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1111,6 +1111,8 @@ c_cpp_builtins (cpp_reader *pfile)\n       if (cxx_dialect >= cxx11 && strcmp (thread_model, \"single\") != 0)\n \tcpp_define (pfile, \"__STDCPP_THREADS__=1\");\n #endif\n+      if (flag_implicit_constexpr)\n+\tcpp_define (pfile, \"__cpp_implicit_constexpr=20211111L\");\n     }\n   /* Note that we define this for C as well, so that we know if\n      __attribute__((cleanup)) will interface with EH.  */"}, {"sha": "62f58295c119cd2ac8453c51c2fbbd1c824d364b", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1052,6 +1052,9 @@ c_common_post_options (const char **pfilename)\n       && flag_strong_eval_order == -1)\n     flag_strong_eval_order = (cxx_dialect >= cxx17 ? 2 : 1);\n \n+  if (flag_implicit_constexpr && cxx_dialect < cxx14)\n+    flag_implicit_constexpr = false;\n+\n   /* Global sized deallocation is new in C++14.  */\n   if (flag_sized_deallocation == -1)\n     flag_sized_deallocation = (cxx_dialect >= cxx14);"}, {"sha": "8a4cd634f77e71dec62c1023150270f61e38e0cf", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1712,6 +1712,10 @@ fimplement-inlines\n C++ ObjC++ Var(flag_implement_inlines) Init(1)\n Export functions even if they can be inlined.\n \n+fimplicit-constexpr\n+C++ ObjC++ Var(flag_implicit_constexpr)\n+Make inline functions constexpr by default.\n+\n fimplicit-inline-templates\n C++ ObjC++ Var(flag_implicit_inline_templates) Init(1)\n Emit implicit instantiations of inline templates."}, {"sha": "de1fc0249e67d9a2af51fa39335768a598a078a8", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -221,7 +221,7 @@ check-c++17:\n \n # Run the testsuite in all standard conformance levels.\n check-c++-all:\n-\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --stds=98,11,14,17,2a,concepts\" check-g++\n+\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --stds=98,11,14,17,20,23,impcx\" check-g++\n \n # Run the testsuite with garbage collection at every opportunity.\n check-g++-strict-gc:"}, {"sha": "c30a44f039b2428063eba8fbba83459d94995894", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -5547,10 +5547,16 @@ type_has_constexpr_destructor (tree t)\n static bool\n type_maybe_constexpr_destructor (tree t)\n {\n+  /* Until C++20, only trivial destruction is constexpr.  */\n+  if (TYPE_HAS_TRIVIAL_DESTRUCTOR (t))\n+    return true;\n+  if (cxx_dialect < cxx20)\n+    return false;\n   if (CLASS_TYPE_P (t) && CLASSTYPE_LAZY_DESTRUCTOR (t))\n     /* Assume it's constexpr.  */\n     return true;\n-  return type_has_constexpr_destructor (t);\n+  tree fn = CLASSTYPE_DESTRUCTOR (t);\n+  return (fn && maybe_constexpr_fn (fn));\n }\n \n /* Returns true iff class TYPE has a virtual destructor.  */\n@@ -5823,8 +5829,7 @@ finalize_literal_type_property (tree t)\n   if (cxx_dialect < cxx11)\n     CLASSTYPE_LITERAL_P (t) = false;\n   else if (CLASSTYPE_LITERAL_P (t)\n-\t   && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n-\t   && (cxx_dialect < cxx20 || !type_maybe_constexpr_destructor (t)))\n+\t   && !type_maybe_constexpr_destructor (t))\n     CLASSTYPE_LITERAL_P (t) = false;\n   else if (CLASSTYPE_LITERAL_P (t) && LAMBDA_TYPE_P (t))\n     CLASSTYPE_LITERAL_P (t) = (cxx_dialect >= cxx17);"}, {"sha": "69d9d3daeca7e651eb1c6469da944a75ae4c566c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 74, "deletions": 11, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"cgraph.h\"\n #include \"opts.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static bool verify_constant (tree, bool, bool *, bool *);\n #define VERIFY_CONSTANT(X)\t\t\t\t\t\t\\\n@@ -220,6 +222,17 @@ is_valid_constexpr_fn (tree fun, bool complain)\n \tinform (DECL_SOURCE_LOCATION (fun),\n \t\t\"lambdas are implicitly %<constexpr%> only in C++17 and later\");\n     }\n+  else if (DECL_DESTRUCTOR_P (fun))\n+    {\n+      if (cxx_dialect < cxx20)\n+\t{\n+\t  ret = false;\n+\t  if (complain)\n+\t    error_at (DECL_SOURCE_LOCATION (fun),\n+\t\t      \"%<constexpr%> destructors only available\"\n+\t\t      \" with %<-std=c++20%> or %<-std=gnu++20%>\");\n+\t}\n+    }\n   else if (!DECL_CONSTRUCTOR_P (fun))\n     {\n       tree rettype = TREE_TYPE (TREE_TYPE (fun));\n@@ -865,20 +878,39 @@ void\n maybe_save_constexpr_fundef (tree fun)\n {\n   if (processing_template_decl\n-      || !DECL_DECLARED_CONSTEXPR_P (fun)\n       || cp_function_chain->invalid_constexpr\n       || (DECL_CLONED_FUNCTION_P (fun) && !DECL_DELETING_DESTRUCTOR_P (fun)))\n     return;\n \n-  bool complain = !DECL_GENERATED_P (fun);\n+  /* With -fimplicit-constexpr, try to make inlines constexpr.  We'll\n+     actually set DECL_DECLARED_CONSTEXPR_P below if the checks pass.  */\n+  bool implicit = false;\n+  if (flag_implicit_constexpr)\n+    {\n+      if (DECL_DELETING_DESTRUCTOR_P (fun)\n+\t  && decl_implicit_constexpr_p (DECL_CLONED_FUNCTION (fun)))\n+\t/* Don't inherit implicit constexpr from the non-deleting\n+\t   destructor.  */\n+\tDECL_DECLARED_CONSTEXPR_P (fun) = false;\n+\n+      if (!DECL_DECLARED_CONSTEXPR_P (fun)\n+\t  && DECL_DECLARED_INLINE_P (fun)\n+\t  && !lookup_attribute (\"noinline\", DECL_ATTRIBUTES (fun)))\n+\timplicit = true;\n+    }\n+\n+  if (!DECL_DECLARED_CONSTEXPR_P (fun) && !implicit)\n+    return;\n+\n+  bool complain = !DECL_GENERATED_P (fun) && !implicit;\n \n   if (!is_valid_constexpr_fn (fun, complain))\n     return;\n \n   tree massaged = massage_constexpr_body (fun, DECL_SAVED_TREE (fun));\n   if (massaged == NULL_TREE || massaged == error_mark_node)\n     {\n-      if (!DECL_CONSTRUCTOR_P (fun))\n+      if (!DECL_CONSTRUCTOR_P (fun) && complain)\n \terror (\"body of %<constexpr%> function %qD not a return-statement\",\n \t       fun);\n       return;\n@@ -907,6 +939,21 @@ maybe_save_constexpr_fundef (tree fun)\n   if (!potential && complain)\n     return;\n \n+  if (implicit)\n+    {\n+      if (potential)\n+\t{\n+\t  DECL_DECLARED_CONSTEXPR_P (fun) = true;\n+\t  DECL_LANG_SPECIFIC (fun)->u.fn.implicit_constexpr = true;\n+\t  if (DECL_CONSTRUCTOR_P (fun))\n+\t    TYPE_HAS_CONSTEXPR_CTOR (DECL_CONTEXT (fun)) = true;\n+\t}\n+      else\n+\t/* Don't bother keeping the pre-generic body of unsuitable functions\n+\t   not explicitly declared constexpr.  */\n+\treturn;\n+    }\n+\n   constexpr_fundef entry = {fun, NULL_TREE, NULL_TREE, NULL_TREE};\n   bool clear_ctx = false;\n   if (DECL_RESULT (fun) && DECL_CONTEXT (DECL_RESULT (fun)) == NULL_TREE)\n@@ -2404,7 +2451,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t   lval, non_constant_p, overflow_p);\n   if (DECL_THUNK_P (fun))\n     return cxx_eval_thunk_call (ctx, t, fun, lval, non_constant_p, overflow_p);\n-  if (!DECL_DECLARED_CONSTEXPR_P (fun))\n+  if (!maybe_constexpr_fn (fun))\n     {\n       if (TREE_CODE (t) == CALL_EXPR\n \t  && cxx_replaceable_global_alloc_fn (fun)\n@@ -5229,7 +5276,9 @@ bool\n maybe_constexpr_fn (tree t)\n {\n   return (DECL_DECLARED_CONSTEXPR_P (t)\n-\t  || (cxx_dialect >= cxx17 && LAMBDA_FUNCTION_P (t)));\n+\t  || (cxx_dialect >= cxx17 && LAMBDA_FUNCTION_P (t))\n+\t  || (flag_implicit_constexpr\n+\t      && DECL_DECLARED_INLINE_P (STRIP_TEMPLATE (t))));\n }\n \n /* True if T was declared in a function that might be constexpr: either a\n@@ -5238,11 +5287,8 @@ maybe_constexpr_fn (tree t)\n bool\n var_in_maybe_constexpr_fn (tree t)\n {\n-  if (cxx_dialect >= cxx17\n-      && DECL_FUNCTION_SCOPE_P (t)\n-      && LAMBDA_FUNCTION_P (DECL_CONTEXT (t)))\n-    return true;\n-  return var_in_constexpr_fn (t);\n+  return (DECL_FUNCTION_SCOPE_P (t)\n+\t  && maybe_constexpr_fn (DECL_CONTEXT (t)));\n }\n \n /* We're assigning INIT to TARGET.  In do_build_copy_constructor and\n@@ -8219,7 +8265,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t      {\n \t\tif (builtin_valid_in_constant_expr_p (fun))\n \t\t  return true;\n-\t\tif (!DECL_DECLARED_CONSTEXPR_P (fun)\n+\t\tif (!maybe_constexpr_fn (fun)\n \t\t    /* Allow any built-in function; if the expansion\n \t\t       isn't constant, we'll deal with that then.  */\n \t\t    && !fndecl_built_in_p (fun)\n@@ -9257,6 +9303,23 @@ is_nondependent_static_init_expression (tree t)\n \t  && !instantiation_dependent_expression_p (t));\n }\n \n+/* True iff FN is an implicitly constexpr function.  */\n+\n+bool\n+decl_implicit_constexpr_p (tree fn)\n+{\n+  if (!(flag_implicit_constexpr\n+\t&& TREE_CODE (fn) == FUNCTION_DECL\n+\t&& DECL_DECLARED_CONSTEXPR_P (fn)))\n+    return false;\n+\n+  if (DECL_CLONED_FUNCTION_P (fn))\n+    fn = DECL_CLONED_FUNCTION (fn);\n+\n+  return (DECL_LANG_SPECIFIC (fn)\n+\t  && DECL_LANG_SPECIFIC (fn)->u.fn.implicit_constexpr);\n+}\n+\n /* Finalize constexpr processing after parsing.  */\n \n void"}, {"sha": "acc98c9c452a1aa063c8326fe7d9bddaf63910cf", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -2868,8 +2868,9 @@ struct GTY(()) lang_decl_fn {\n   unsigned immediate_fn_p : 1;\n   unsigned maybe_deleted : 1;\n   unsigned coroutine_p : 1;\n+  unsigned implicit_constexpr : 1;\n \n-  unsigned spare : 10;\n+  unsigned spare : 9;\n \n   /* 32-bits padding on 64-bit host.  */\n \n@@ -8315,6 +8316,7 @@ extern vec<tree> cx_error_context               (void);\n extern tree fold_sizeof_expr\t\t\t(tree);\n extern void clear_cv_and_fold_caches\t\t(void);\n extern tree unshare_constructor\t\t\t(tree CXX_MEM_STAT_INFO);\n+extern bool decl_implicit_constexpr_p\t\t(tree);\n \n /* An RAII sentinel used to restrict constexpr evaluation so that it\n    doesn't do anything that causes extra DECL_UID generation.  */"}, {"sha": "2ddf0e4a5247e78fdc90d44ea6f86d7ac6099102", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1290,6 +1290,12 @@ validate_constexpr_redeclaration (tree old_decl, tree new_decl)\n     }\n   if (TREE_CODE (old_decl) == FUNCTION_DECL)\n     {\n+      /* With -fimplicit-constexpr, ignore changes in the constexpr\n+\t keyword.  */\n+      if (flag_implicit_constexpr\n+\t  && (DECL_IMMEDIATE_FUNCTION_P (new_decl)\n+\t      == DECL_IMMEDIATE_FUNCTION_P (old_decl)))\n+\treturn true;\n       if (fndecl_built_in_p (old_decl))\n \t{\n \t  /* Hide a built-in declaration.  */\n@@ -14863,7 +14869,7 @@ grok_special_member_properties (tree decl)\n       if (is_list_ctor (decl))\n \tTYPE_HAS_LIST_CTOR (class_type) = 1;\n \n-      if (DECL_DECLARED_CONSTEXPR_P (decl)\n+      if (maybe_constexpr_fn (decl)\n \t  && !ctor && !move_fn_p (decl))\n \tTYPE_HAS_CONSTEXPR_CTOR (class_type) = 1;\n     }"}, {"sha": "872479369ab226ee97c1bf4990a9c6972a84c5d2", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1686,7 +1686,8 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n   exceptions = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (t));\n \n   /* Likewise for the constexpr specifier, in case t is a specialization.  */\n-  constexpr_p = DECL_DECLARED_CONSTEXPR_P (t);\n+  constexpr_p = (DECL_DECLARED_CONSTEXPR_P (t)\n+\t\t && !decl_implicit_constexpr_p (t));\n \n   /* Pretty print template instantiations only.  */\n   if (DECL_USE_TEMPLATE (t) && DECL_TEMPLATE_INFO (t)"}, {"sha": "3027d7906f51fb02a889b3f5ab95a4e8946bbdb4", "filename": "gcc/testsuite/g++.dg/abi/abi-tag16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -Wabi=9 }\n+// { dg-options \"-Wabi=9 -fno-implicit-constexpr\" }\n // { dg-final { scan-assembler \"_ZGVZN1N1FEvE4NameB5cxx11\" } }\n namespace std {\n   __extension__ inline namespace __cxx11 __attribute__((abi_tag(\"cxx11\"))) {"}, {"sha": "c6fb1607a418c1c8eb526365b33a42b19d09bacf", "filename": "gcc/testsuite/g++.dg/abi/abi-tag18a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n // { dg-skip-if \"PR 70349\" { hppa*-*-hpux* && { ! lp64 } } }\n-// { dg-options -fabi-version=9 }\n+// { dg-options \"-fabi-version=9 -fno-implicit-constexpr\" }\n // { dg-final { scan-assembler \"_Z1fB7__test1v\" } }\n // { dg-final { scan-assembler \"_ZZ1fB7__test1vEN1T1gB7__test2Ev\" } }\n // { dg-final { scan-assembler \"_ZZZ1fB7__test1vEN1T1gEvE1x\" } }"}, {"sha": "71e6744e3810d5c5ced91c7eb11c9bac3afc579d", "filename": "gcc/testsuite/g++.dg/abi/guard4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fguard4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fguard4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fguard4.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -3,9 +3,10 @@\n \n namespace x {\n   struct s {\n-    s() {}\n+    s();\n     static int a;\n   };\n+  s::s() {}\n   // { dg-final { scan-assembler {.weak[^\\n]*_ZGVN1x1bE} } }\n   struct s __attribute__((weak)) b = s();\n }"}, {"sha": "79e4fa64ac57245c6a483550ec683c40a3ac994d", "filename": "gcc/testsuite/g++.dg/abi/lambda-defarg1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-defarg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-defarg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-defarg1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,6 @@\n // PR c++/91241\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options -fkeep-inline-functions }\n \n struct A {\n   int *b(const int & = []() -> int { return 0; }(),"}, {"sha": "2041d778b9a63638d34a72e63dc5ed6c821b7bed", "filename": "gcc/testsuite/g++.dg/abi/mangle26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle26.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,7 +1,7 @@\n // Test of std mangling\n \n // { dg-do compile }\n-// { dg-options \"-fno-inline\" }\n+// { dg-options \"-fno-inline -fno-implicit-constexpr\" }\n \n namespace std {\n   struct A {"}, {"sha": "c167bb1d8bc1bb8787385de4b0a33b413ca40fe9", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag3.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -13,7 +13,7 @@ int main()\n \n // --------------------\n \n-struct complex \t\t\t// { dg-message \"no .constexpr. constructor\" }\n+struct complex \t\t\t// { dg-message \"no .constexpr. constructor\" \"\" { target { ! implicit_constexpr } } }\n {\n   complex(double r, double i) : re(r), im(i) { }\n   constexpr double real() const { return re; } // { dg-error \"not a literal type\" \"\" { target c++11_only } }\n@@ -24,23 +24,23 @@ private:\n   double im;\n };\n \n-constexpr complex co1(0, 1);\t   // { dg-error \"19:the type .const complex. of .constexpr. variable .co1. is not literal\" }\n-constexpr double dd2 = co1.real(); // { dg-error \"|in .constexpr. expansion of \" }\n+constexpr complex co1(0, 1);\t   // { dg-error \"19:the type .const complex. of .constexpr. variable .co1. is not literal\" \"\" { target { ! implicit_constexpr } } }\n+constexpr double dd2 = co1.real(); // { dg-error \"|in .constexpr. expansion of \" \"\" { target { ! implicit_constexpr } } }\n \n // --------------------\n \n-struct base\t\t       // { dg-message \"no .constexpr. constructor\" }\n+struct base\t\t       // { dg-message \"no .constexpr. constructor\" \"\" { target { ! implicit_constexpr } } }\n {\n   int _M_i;\n   base() : _M_i(5) { }\n };\n \n-struct derived : public base\t// { dg-message \"base class\" }\n+struct derived : public base\t// { dg-message \"base class\" \"\" { target { ! implicit_constexpr } } }\n {\n-  constexpr derived(): base() { } // { dg-error \"non-.constexpr. function\" }\n+  constexpr derived(): base() { } // { dg-error \"non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }\n };\n \n-constexpr derived obj;\t\t// { dg-error \"not literal\" }\n+constexpr derived obj;\t\t// { dg-error \"not literal\" \"\" { target { ! implicit_constexpr } } }\n \n // --------------------\n "}, {"sha": "1d5c58b4090b1f1c55d647e8ea7b2c6f4101684b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -87,7 +87,7 @@ struct resource {\n   }\n };\n constexpr resource f(resource d)\n-{ return d; }                  // { dg-error \"non-.constexpr.\" }\n-constexpr resource d = f(9);   // { dg-message \".constexpr.\" }\n+{ return d; }                  // { dg-error \"non-.constexpr.\" \"\" { target { ! implicit_constexpr } } }\n+constexpr resource d = f(9);   // { dg-message \".constexpr.\" \"\" { target { ! implicit_constexpr } } }\n \n // 4.4 floating-point constant expressions"}, {"sha": "e934421c2f4880b82ce1bb90da3e97293c0954d6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice5.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -9,5 +9,5 @@ struct A\n struct B\n {\n   A a[1];\n-  constexpr B() : a() {} // { dg-error \"non-constant|non-.constexpr.\" }\n+  constexpr B() : a() {} // { dg-error \"non-constant|non-.constexpr.\" \"\" { target { ! implicit_constexpr } } }\n };"}, {"sha": "c018eded1de1fe9b59336a451d3421952581414c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-incomplete2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -28,4 +28,4 @@ struct D\n   C<D> c;\n };\n \n-constexpr D d {};\t\t// { dg-error \"non-.constexpr. function\" }\n+constexpr D d {};\t\t// { dg-error \"non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }"}, {"sha": "37255282ded7bddb3e5f48f41328955f7934038f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-memfn1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -13,6 +13,6 @@ constexpr X X::g(X x) { return x; }\n struct Y\n {\n   Y() { }\n-  constexpr Y f(Y y) { return y; }  // { dg-error \"constexpr\" }\n-  static constexpr Y g(Y y) { return y; } // { dg-error \"constexpr\" }\n+  constexpr Y f(Y y) { return y; }  // { dg-error \"constexpr\" \"\" { target { ! implicit_constexpr } } }\n+  static constexpr Y g(Y y) { return y; } // { dg-error \"constexpr\" \"\" { target { ! implicit_constexpr } } }\n };"}, {"sha": "89559d7605882908ee5629bde65f13af2febc1c3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-neg3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg3.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -9,7 +9,7 @@ struct A\n template<typename> struct B\n {\n   A a;\n-  constexpr int bar() { return a.foo(); } // { dg-error \"foo\" }\n+  constexpr int bar() { return a.foo(); } // { dg-error \"foo\" \"\" { target { ! implicit_constexpr } } }\n };\n \n-constexpr int i = B<void>().bar(); // { dg-error \"bar\" }\n+constexpr int i = B<void>().bar(); // { dg-error \"bar\" \"\" { target { ! implicit_constexpr } } }"}, {"sha": "acda6e0bcbfd42f6791d370ddd3cf3b6f40fd767", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-specialization.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-specialization.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-specialization.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-specialization.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -3,10 +3,10 @@\n \n template<typename T> constexpr int foo(T);\n template<> int foo(int);\n-template<> int foo(int);            // { dg-message \"previous declaration 'int foo\" }\n-template<> constexpr int foo(int);  // { dg-error \"redeclaration 'constexpr int foo\" }\n+template<> int foo(int);            // { dg-message \"previous declaration 'int foo\" \"\" { target { ! implicit_constexpr } } }\n+template<> constexpr int foo(int);  // { dg-error \"redeclaration 'constexpr int foo\" \"\" { target { ! implicit_constexpr } } }\n \n template<typename T> int bar(T);\n template<> constexpr int bar(int);\n-template<> constexpr int bar(int);  // { dg-message \"previous declaration 'constexpr int bar\" }\n-template<> int bar(int);            // { dg-error \"redeclaration 'int bar\" }\n+template<> constexpr int bar(int);  // { dg-message \"previous declaration 'constexpr int bar\" \"\" { target { ! implicit_constexpr } } }\n+template<> int bar(int);            // { dg-error \"redeclaration 'int bar\" \"\" { target { ! implicit_constexpr } } }"}, {"sha": "3476f9607ac004f4c426bebe2d2ca4620ec59be4", "filename": "gcc/testsuite/g++.dg/cpp0x/inh-ctor19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor19.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -11,4 +11,4 @@ struct B : A\n   using A::A;\n };\n \n-constexpr B b;  // { dg-error \"literal\" }\n+constexpr B b;  // { dg-error \"literal\" \"\" { target { ! implicit_constexpr } } }"}, {"sha": "c978f0c376164df662409358ec49fe555a9753c8", "filename": "gcc/testsuite/g++.dg/cpp0x/inh-ctor30.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor30.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,7 @@\n // PR c++/81860\n // { dg-do compile { target c++11 } }\n // { dg-final { scan-assembler \"_ZN1AIjEC\\[12\\]Ev\" } }\n+// { dg-additional-options -fno-implicit-constexpr }\n \n template <typename T>\n struct A"}, {"sha": "2120d8c72fe9d0543e70f1a4d836096444a5eb08", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle3.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,7 @@\n // PR c++/51818\n // { dg-do compile { target c++11 } }\n // { dg-final { scan-assembler \"_ZN1AC1IN3foo3barMUlvE_EEET_\" } }\n+// { dg-additional-options -fno-implicit-constexpr }\n \n struct A\n {"}, {"sha": "23df3a2b41675b882c3155f2eac5326352309500", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle5.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle5.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options -fkeep-inline-functions }\n // { dg-final { scan-assembler \"_ZZN1AIiEC4IiEET_S2_Ed_NKUlvE_clEv\" } }\n \n template <class T> struct A"}, {"sha": "98885799de989ce1d1fa5f158afeeb9205451100", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn12.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++14 } }\n // { dg-final { scan-assembler \"_ZN1AIiEcvDaEv\" } }\n+// { dg-additional-options -fno-implicit-constexpr }\n \n template <class T>\n struct A {"}, {"sha": "150aadfe6094b12d2c4e10cb61c553286e6701c9", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-loop5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-loop5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-loop5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-loop5.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -9,11 +9,11 @@ template<typename>\n constexpr int count()\n {\n     auto item = thing {};\n-    for(; (item.foo(), false);); // { dg-error \"foo\" }\n+    for(; (item.foo(), false);); // { dg-error \"foo\" \"\" { target { ! implicit_constexpr } } }\n     return 0;\n }\n \n int main()\n {\n-    static_assert( count<int>() == 0, \"\" ); // { dg-error \"\" }\n+    static_assert( count<int>() == 0, \"\" ); // { dg-error \"\" \"\" { target { ! implicit_constexpr } } }\n }"}, {"sha": "faac00ca9974f3ec3cec51c040c15cb091278aaf", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -8,5 +8,5 @@ struct NonLiteral {\n   int n;\n };\n \n-static_assert( ID (NonLiteral{3}).n == 3); // { dg-error \"non-literal\" }\n+static_assert( ID (NonLiteral{3}).n == 3); // { dg-error \"non-literal\" \"\" { target { ! implicit_constexpr } } }\n // { dg-prune-output \"static assertion\" }"}, {"sha": "a68a6b4af8bc517e7dbc3444509109e01b869f02", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor3.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -7,16 +7,16 @@ struct S\n   constexpr ~S () {}\n   int s;\n };\n-struct T\t// { dg-message \"'T' is not literal because\" }\n-{\t\t// { dg-message \"'T' does not have 'constexpr' destructor\" \"\" { target *-*-* } .-1 }\n+struct T\t// { dg-message \"'T' is not literal because\" \"\" { target { ! implicit_constexpr } } }\n+{\t\t// { dg-message \"'T' does not have 'constexpr' destructor\" \"\" { target { ! implicit_constexpr } } .-1 }\n   constexpr T () : t (0) {}\n-  ~T () {}\t// { dg-message \"defaulted destructor calls non-'constexpr' 'T::~T\\\\(\\\\)'\" }\n+  ~T () {}\t// { dg-message \"defaulted destructor calls non-'constexpr' 'T::~T\\\\(\\\\)'\" \"\" { target { ! implicit_constexpr } } }\n   int t;\n };\n struct U : public S\n {\n   constexpr U () : u (0) {}\n-  constexpr ~U () = default;\t// { dg-error \"explicitly defaulted function 'constexpr U::~U\\\\(\\\\)' cannot be declared 'constexpr' because the implicit declaration is not 'constexpr'\" }\n+  constexpr ~U () = default;\t// { dg-error \"explicitly defaulted function 'constexpr U::~U\\\\(\\\\)' cannot be declared 'constexpr' because the implicit declaration is not 'constexpr'\" \"\" { target { ! implicit_constexpr } } }\n   int u;\n   T t;\n };\n@@ -100,11 +100,11 @@ struct W8\n struct X : public T\n {\n   constexpr X () : x (0) {}\n-  constexpr ~X () = default;\t// { dg-error \"explicitly defaulted function 'constexpr X::~X\\\\(\\\\)' cannot be declared 'constexpr' because the implicit declaration is not 'constexpr'\" }\n+  constexpr ~X () = default;\t// { dg-error \"explicitly defaulted function 'constexpr X::~X\\\\(\\\\)' cannot be declared 'constexpr' because the implicit declaration is not 'constexpr'\" \"\" { target { ! implicit_constexpr } } }\n   int x;\n };\n constexpr S s;\n-constexpr T t;\t// { dg-error \"the type 'const T' of 'constexpr' variable 't' is not literal\" }\n+constexpr T t;\t// { dg-error \"the type 'const T' of 'constexpr' variable 't' is not literal\" \"\" { target { ! implicit_constexpr } } }\n constexpr W0 w1;\n constexpr W0 w2 = 12;\n constexpr W1 w3 = 5;\t// { dg-message \"in 'constexpr' expansion of\" }\n@@ -167,19 +167,19 @@ constexpr int x5 = f5 ();\t// { dg-message \"in 'constexpr' expansion of\" }\n void\n f6 ()\n {\n-  constexpr T t2;\t// { dg-error \"the type 'const T' of 'constexpr' variable 't2' is not literal\" }\n+  constexpr T t2;\t// { dg-error \"the type 'const T' of 'constexpr' variable 't2' is not literal\" \"\" { target { ! implicit_constexpr } } }\n }\n \n constexpr int\n f7 ()\n {\n-  constexpr T t3;\t// { dg-error \"the type 'const T' of 'constexpr' variable 't3' is not literal\" }\n+  constexpr T t3;\t// { dg-error \"the type 'const T' of 'constexpr' variable 't3' is not literal\" \"\" { target { ! implicit_constexpr } } }\n   return 0;\n }\n \n constexpr int\n f8 ()\n {\n-  T t4;\t\t\t// { dg-error \"variable 't4' of non-literal type 'T' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  T t4;\t\t\t// { dg-error \"variable 't4' of non-literal type 'T' in 'constexpr' function only available with\" \"\" { target { c++20_down && { ! implicit_constexpr } } } }\n   return 0;\n }"}, {"sha": "7eed50c7f4cfdbd1313d8b505df92fe54a3d69de", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new13.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -9,7 +9,7 @@ struct A {\n \n struct B : A {\n   constexpr B () : b (0) {}\n-  virtual int foo () { return 0 + b * 4; }\t// { dg-message \"declared here\" }\n+  virtual int foo () { return 0 + b * 4; }\t// { dg-message \"declared here\" \"\" { target { ! implicit_constexpr } } }\n   int b;\n };\n \n@@ -18,7 +18,7 @@ foo ()\n {\n   A *a = new B ();\n   a->a = 4;\n-  int r = a->foo ();\t// { dg-error \"call to non-.constexpr. function\" }\n+  int r = a->foo ();\t// { dg-error \"call to non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }\n   delete a;\n   return r;\n }"}, {"sha": "b090277181411dadb3f3f2904c512138e165a8a2", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit11.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -39,9 +39,9 @@ constinit thread_local const int &r2 = gl;\n constinit const int &r3 // { dg-error \"variable .r3. does not have a constant initializer\" }\n   = foo (); // { dg-error \"call to non-.constexpr. function\" }\n constinit const literal &r4 = 42;\n-constinit const nonliteral &r5 // { dg-error \"variable .r5. does not have a constant initializer\" }\n-  = 42; // { dg-error \"call to non-.constexpr. function\" }\n-constinit const int &r6 = nonliteral(2).m; // { dg-error \"variable .r6. does not have a constant initializer|call to non-.constexpr. function\" }\n+constinit const nonliteral &r5 // { dg-error \"variable .r5. does not have a constant initializer\" \"\" { target { ! implicit_constexpr } } }\n+  = 42; // { dg-error \"call to non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }\n+constinit const int &r6 = nonliteral(2).m; // { dg-error \"variable .r6. does not have a constant initializer|call to non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }\n \n constinit pod p1;\n constinit pod p2 = { 42 };\n@@ -64,8 +64,8 @@ constinit thread_local literal l11{};\n pod S::p;\n constinit pod S::pc(S::p); // { dg-error \"variable .S::pc. does not have a constant initializer|not usable\" }\n \n-constinit const nonliteral S::n(42); // { dg-error \"variable .S::n. does not have a constant initializer|call to non-.constexpr. function\" }\n-constinit int n1 = nonliteral{42}.m; // { dg-error \"variable .n1. does not have a constant initializer|temporary of non-literal type\" }\n+constinit const nonliteral S::n(42); // { dg-error \"variable .S::n. does not have a constant initializer|call to non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }\n+constinit int n1 = nonliteral{42}.m; // { dg-error \"variable .n1. does not have a constant initializer|temporary of non-literal type\" \"\" { target { ! implicit_constexpr } } }\n constinit int n2 = literal{42}.m;\n \n void"}, {"sha": "faa1b430cee96b3266a002f3d2e9b8b27e8b9bcf", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -8,7 +8,7 @@ struct S {\n template <class T>\n struct U {\n   T m;\n-  constexpr U(int i) : m(i) { } // { dg-error \"call to non-.constexpr. function\" }\n+  constexpr U(int i) : m(i) { } // { dg-error \"call to non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }\n };\n \n-constinit U<S> u(42); // { dg-error \"does not have a constant initializer|called in a constant expression\" }\n+constinit U<S> u(42); // { dg-error \"does not have a constant initializer|called in a constant expression\" \"\" { target { ! implicit_constexpr } } }"}, {"sha": "06c4cb46722f6f4049fd7a9e0aafaac7a6f462a6", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit14.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile { target c++20 } }\n \n struct Value {\n-  Value() : v{new int{42}} {}\n+  Value() : v{new int{42}} {}\t// { dg-error \"result of 'operator new'\" \"\" { target implicit_constexpr } }\n   int* v;\n };\n "}, {"sha": "b6215587badb54343e965481ff9732a02f378794", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit15.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -6,7 +6,7 @@ struct B {\n };\n \n struct A {\n-    constinit static inline B b1{}; // { dg-error \"does not have a constant initializer|call to non-.constexpr. function\" }\n+    constinit static inline B b1{}; // { dg-error \"does not have a constant initializer|call to non-.constexpr. function\" \"\" { target { ! implicit_constexpr } } }\n };\n \n int main() {"}, {"sha": "dff59271a1e67fdf6485c28fc2ed713fdb896bd5", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-constexpr1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -9,7 +9,7 @@ struct A\n struct B\n {\n   A a;\n-  bool operator==(const B&) const = default; // { dg-error \"A::operator==\" }\n+  bool operator==(const B&) const = default; // { dg-error \"A::operator==\" \"\" { target { ! implicit_constexpr } } }\n };\n \n-constexpr bool x = B() == B();\t// { dg-error \"non-.constexpr\" }\n+constexpr bool x = B() == B();\t// { dg-error \"non-.constexpr\" \"\" { target { ! implicit_constexpr } } }"}, {"sha": "7a517a8016c4f1c15e3e343aaddbf64ddb507667", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-eq3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-eq3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-eq3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-eq3.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -12,5 +12,5 @@ struct D\n };\n \n constexpr D d{A()};\n-static_assert (d == d);\t\t// { dg-error \"non-constant|constexpr\" }\n-static_assert (!(d != d));\t// { dg-error \"non-constant|constexpr\" }\n+static_assert (d == d);\t\t// { dg-error \"constant|constexpr\" }\n+static_assert (!(d != d));\t// { dg-error \"constant|constexpr\" }"}, {"sha": "ab7c012f5f47c481b95baa965a0b1ff40526026f", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp-neg2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -9,5 +9,5 @@ struct non_literal_class {\n   // auto operator<=> (const non_literal_fixed_string&) = default;\n };\n \n-template <non_literal_class> // { dg-error \"11:is not a valid type for a template non-type parameter because it is not structural\" }\n-int operator\"\" _udl();       // { dg-error \"5:literal operator template .int operator\\\"\\\"_udl\\\\(\\\\). has invalid parameter list\" }\n+template <non_literal_class> // { dg-error \"11:is not a valid type for a template non-type parameter because it is not structural\" \"\" { target { ! implicit_constexpr } } }\n+int operator\"\" _udl();       // { dg-error \"5:literal operator template .int operator\\\"\\\"_udl\\\\(\\\\). has invalid parameter list\" \"\" { target { ! implicit_constexpr } } }"}, {"sha": "3e5867d258c8fb4ec0979192215211600bbbeecd", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/auto1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,6 @@\n // PR c++/53756\n // { dg-do compile { target c++14 } }\n-// { dg-options \"-gdwarf-2 -dA -fno-debug-types-section\" }\n+// { dg-options \"-gdwarf-2 -dA -fno-debug-types-section -fno-inline\" }\n // We're looking for something like\n \n // .uleb128 0x3    # (DIE (0x33) DW_TAG_subprogram)"}, {"sha": "b211c02c894095722eb92f0862717c85f8ec7030", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/cdtor-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fcdtor-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fcdtor-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fcdtor-1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n // origin PR debug/49047\n-// { dg-options \"-gdwarf-2 -dA -fno-merge-debug-strings\" }\n+// { dg-options \"-gdwarf-2 -dA -fno-merge-debug-strings -fno-implicit-constexpr\" }\n // { dg-do compile }\n \n struct K"}, {"sha": "b2566c7aa7a060a5b6733e61a0058d404569f9c1", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/lambda1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flambda1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flambda1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flambda1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,6 @@\n // PR c++/43912\n // { dg-do compile { target c++11 } }\n-// { dg-options \"-gdwarf-2 -dA -fno-merge-debug-strings -gno-strict-dwarf\" }\n+// { dg-options \"-gdwarf-2 -dA -fno-merge-debug-strings -gno-strict-dwarf -fno-inline\" }\n \n // Check for the local alias variables that point to the members of the closure.\n // { dg-final { scan-assembler-times \"DW_TAG_variable\\[^.\\]*\\.ascii \\\"j.0\\\"\" 4 { xfail { powerpc-ibm-aix* } } } }"}, {"sha": "0a3721ee6b1bc302cb7e173836411b9b3d84b672", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr54508.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr54508.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr54508.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr54508.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,6 @@\n // PR debug/54508\n // { dg-do compile }\n-// { dg-options \"-gdwarf-2 -g2 -dA -fno-merge-debug-strings\" }\n+// { dg-options \"-gdwarf-2 -g2 -dA -fno-merge-debug-strings -fno-inline\" }\n \n // { dg-final { scan-assembler \"\\\"cbase\\\\\\\\0\\\"\\[ \\t\\]+\\[#;/!|@\\]+ +DW_AT_name\" } }\n // { dg-final { scan-assembler \"\\\"OPCODE\\\\\\\\0\\\"\\[ \\t\\]+\\[#;/!|@\\]+ +DW_AT_name\" } }"}, {"sha": "1fb5004df4012fc61de85fb7ea1268778d6dedb8", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pubnames-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-2.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile { target c++11 } }\n // { dg-skip-if \"\" { powerpc-ibm-aix* } }\n-// { dg-options \"-gpubnames -gdwarf-4 -fno-debug-types-section -dA\" }\n+// { dg-options \"-gpubnames -gdwarf-4 -fno-debug-types-section -dA -fno-inline\" }\n // { dg-final { scan-assembler-times \"\\.section\\[\\t \\]\\[^\\n\\]*debug_pubnames\" 1 } }\n // { dg-final { scan-assembler \"\\\"\\\\(anonymous namespace\\\\)\\\\\\\\0\\\"+\\[ \\t\\]+\\[#;/|@!]+\\[ \\t\\]+external name\" } }\n // { dg-final { scan-assembler \"\\\"one\\\\\\\\0\\\"+\\[ \\t\\]+\\[#;/|@!]+\\[ \\t\\]+external name\" } }"}, {"sha": "37e04fb6c972c603cb822dd620b2ea3c6b9e0e83", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pubnames-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-3.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile { target c++11 } }\n // { dg-skip-if \"\" { powerpc-ibm-aix* } }\n-// { dg-options \"-gpubnames -gdwarf-4 -fdebug-types-section -dA\" }\n+// { dg-options \"-gpubnames -gdwarf-4 -fdebug-types-section -dA -fno-inline\" }\n // { dg-final { scan-assembler-times \"\\.section\\[\\t \\]\\[^\\n\\]*debug_pubnames\" 1 } }\n // { dg-final { scan-assembler \"\\\"\\\\(anonymous namespace\\\\)\\\\\\\\0\\\"+\\[ \\t\\]+\\[#;/|@!]+\\[ \\t\\]+external name\" } }\n // { dg-final { scan-assembler \"\\\"one\\\\\\\\0\\\"+\\[ \\t\\]+\\[#;/|@!]+\\[ \\t\\]+external name\" } }"}, {"sha": "4fede879a42a13c6b54dffba6fc10fc5e6f5d2f3", "filename": "gcc/testsuite/g++.dg/ext/is_literal_type3.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_literal_type3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_literal_type3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_literal_type3.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -6,7 +6,11 @@ struct S {\n   int n;\n };\n \n+#if __cpp_implicit_constexpr\n+static_assert(__is_literal_type(S), \"\");\n+#else\n static_assert(!__is_literal_type(S), \"\");\n+#endif\n \n #ifdef __cpp_constexpr_dynamic_alloc\n struct T {"}, {"sha": "f1490fa3d32dd145109a261d8694311273de71f6", "filename": "gcc/testsuite/g++.dg/ext/visibility/template7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate7.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,6 @@\n // PR c++/35688\n // { dg-require-visibility \"\" }\n-// { dg-options \"-fvisibility=hidden\" }\n+// { dg-options \"-fvisibility=hidden -fno-inline\" }\n \n // { dg-final { scan-hidden \"_ZN1s6vectorI1AEC1Ev\" } }\n // { dg-final { scan-hidden \"_ZN1s3fooI1AEEvT_\" } }"}, {"sha": "9f2b29b4da501fe5cd35bd67145b6491a6cb447e", "filename": "gcc/testsuite/g++.dg/gcov/gcov-12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-12.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n /* PR 51113 */\n-/* { dg-options \"-fprofile-arcs -ftest-coverage -fpic\" } */\n+/* { dg-options \"-fprofile-arcs -ftest-coverage -fpic -fno-implicit-constexpr\" } */\n /* { dg-do run { target native } } */\n /* { dg-additional-sources \"gcovpart-12b.C\" } */\n "}, {"sha": "05db15de7cc5896dfb96739efd3dd8c0f8b51ec7", "filename": "gcc/testsuite/g++.dg/gcov/gcov-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,6 +1,6 @@\n /* Verify line coverage counts for simple member functions. */\n \n-/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-options \"-fprofile-arcs -ftest-coverage -fno-implicit-constexpr\" } */\n /* { dg-do run { target native } } */\n \n class C {"}, {"sha": "ca9ccb7a1334d8f45addb881435aa9b3edddff11", "filename": "gcc/testsuite/g++.dg/ipa/devirt-35.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-35.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -15,7 +15,6 @@ m(struct B *b)\n                   //  test2 may change the type of A by placement new.\n                   // C++ standard is bit imprecise about this.\n }\n-/* { dg-final { scan-tree-dump \"converting indirect call to function virtual int B::t\"  \"fre1\"  } } */\n-/* { dg-final { scan-ipa-dump \"to virtual int B::t\"  \"devirt\"  } } */\n+/* { dg-final { scan-tree-dump \"converting indirect call to function virtual int B::t\"  \"fre1\" { target { ! implicit_constexpr } } } } */\n+/* { dg-final { scan-ipa-dump \"to virtual int B::t\"  \"devirt\" { target { ! implicit_constexpr } } } } */\n /* { dg-final { scan-ipa-dump \"1 speculatively devirtualized\"  \"devirt\"  } } */\n-"}, {"sha": "60b830186bb7553c8a1415fd71261158f0a611a8", "filename": "gcc/testsuite/g++.dg/ipa/devirt-36.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-36.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -18,7 +18,7 @@ m(struct B *b)\n                   //  test2 may change the type of A by placement new.\n                   // C++ standard is bit imprecise about this.\n }\n-/* { dg-final { scan-tree-dump \"converting indirect call to function virtual int B::t\"  \"fre1\"  } } */\n-/* { dg-final { scan-ipa-dump \"to virtual int B::t\"  \"devirt\"  } } */\n+/* { dg-final { scan-tree-dump \"converting indirect call to function virtual int B::t\"  \"fre1\" { target { ! implicit_constexpr } } } } */\n+/* { dg-final { scan-ipa-dump \"to virtual int B::t\"  \"devirt\" { target { ! implicit_constexpr } } } } */\n /* { dg-final { scan-ipa-dump \"1 speculatively devirtualized\"  \"devirt\"  } } */\n "}, {"sha": "df5ab901f82a7604b7cbde021ff71371f5421f43", "filename": "gcc/testsuite/g++.dg/ipa/devirt-37.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -33,4 +33,4 @@ t()\n /* { dg-final { scan-tree-dump \"No dynamic type change found.\"  \"fre3\"  } } */\n /* { dg-final { scan-tree-dump \"Checking vtbl store:\"  \"fre3\"  } } */\n /* { dg-final { scan-tree-dump \"Function call may change dynamic type:extcall\"  \"fre3\"  } } */\n-/* { dg-final { scan-tree-dump \"converting indirect call to function virtual void\"  \"fre3\"  } } */\n+/* { dg-final { scan-tree-dump \"converting indirect call to function virtual void\"  \"fre3\" { target { ! implicit_constexpr } } } } */"}, {"sha": "ed211e1173997eb10bf895d7bb0404ccf85b25ef", "filename": "gcc/testsuite/g++.dg/ipa/devirt-44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fno-ipa-cp -fdump-ipa-inline-details -fno-early-inlining\" } */\n+/* { dg-options \"-O3 -fno-ipa-cp -fdump-ipa-inline-details -fno-early-inlining -fno-implicit-constexpr\" } */\n struct A {\n   virtual int foo () {return 1;}\n   void wrapfoo () {foo();}"}, {"sha": "fa31cfbae5452929375a82ace2acaa8b65d03978", "filename": "gcc/testsuite/g++.dg/ipa/imm-devirt-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -60,7 +60,7 @@ int main (int argc, char *argv[])\n \n /* middleman_2 gets early inlined and the virtual call should get turned to\n    a direct call.  */\n-/* { dg-final { scan-tree-dump \"Inlining int middleman_1\" \"einline\"  } } */\n-/* { dg-final { scan-tree-dump \"Inlining int middleman_2\" \"einline\"  } } */\n+/* { dg-final { scan-tree-dump \"Inlining int middleman_1\" \"einline\" { target { ! implicit_constexpr } } } } */\n+/* { dg-final { scan-tree-dump \"Inlining int middleman_2\" \"einline\" { target { ! implicit_constexpr } } } } */\n /* { dg-final { scan-tree-dump \"B::foo \\\\(\" \"einline\"  } } */\n /* { dg-final { scan-tree-dump-times \"OBJ_TYPE_REF\" 2 \"einline\"  } } */"}, {"sha": "652e3f58b67831c2dbe2556ceb01dbc294ea2593", "filename": "gcc/testsuite/g++.dg/lookup/builtin5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin5.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n // PR c++/37276\n-\n+// { dg-additional-options -fno-inline }\n // { dg-final { scan-assembler \"_ZSt5atanhd\" } }\n \n namespace std"}, {"sha": "0294dcc4bfb7000c6a3338f855f541d0760be27d", "filename": "gcc/testsuite/g++.dg/lto/inline-crossmodule-1_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Finline-crossmodule-1_0.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n // { dg-lto-do link }\n-/* { dg-lto-options { \"-O2 -fno-early-inlining -flto -fdump-ipa-inline-details\" } } */\n+/* { dg-lto-options { \"-O2 -fno-early-inlining -fno-implicit-constexpr -flto -fdump-ipa-inline-details\" } } */\n #include \"inline-crossmodule-1.h\"\n int a::key ()\n {"}, {"sha": "24cad2864648476d63a86a6e824d53062cbf9788", "filename": "gcc/testsuite/g++.dg/modules/enum-1_a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-1_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-1_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-1_a.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n // { dg-module-do run }\n-// { dg-additional-options \"-fmodules-ts -fdump-lang-module-uid\" }\n+// { dg-additional-options \"-fmodules-ts -fdump-lang-module-uid -fno-implicit-constexpr\" }\n export module enUm;\n // { dg-module-cmi \"enUm\" }\n "}, {"sha": "2b8bbdcd1af96b30483be01c2de61d5e9c15f055", "filename": "gcc/testsuite/g++.dg/modules/fn-inline-1_c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ffn-inline-1_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ffn-inline-1_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ffn-inline-1_c.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options \"-fmodules-ts\" }\n+// { dg-additional-options \"-fmodules-ts -fno-inline\" }\n import bob;\n \n int main ()"}, {"sha": "a7b3fc370ecdf80089f65a90e49954e8a1679a2c", "filename": "gcc/testsuite/g++.dg/modules/pmf-1_a.H", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpmf-1_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpmf-1_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpmf-1_a.H?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options -fmodule-header }\n+// { dg-additional-options \"-fmodule-header -fno-implicit-constexpr\" }\n // { dg-module-cmi {} }\n \n #include \"pmf-1.h\""}, {"sha": "cb2a35bbc3b1a998c056f3b9fb210d682bf0a871", "filename": "gcc/testsuite/g++.dg/modules/pmf-1_b.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpmf-1_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpmf-1_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpmf-1_b.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options \"-fmodules-ts -fno-module-lazy -fdump-lang-module-alias\" }\n+// { dg-additional-options \"-fmodules-ts -fno-module-lazy -fdump-lang-module-alias -fno-implicit-constexpr\" }\n \n #include \"pmf-1.h\"\n import \"pmf-1_a.H\";"}, {"sha": "b51a19fb8d754f5520a749a654bd38dffed05ff3", "filename": "gcc/testsuite/g++.dg/modules/used-1_c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fused-1_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fused-1_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fused-1_c.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options -fmodules-ts }\n+// { dg-additional-options \"-fmodules-ts -fno-inline\" }\n \n import \"used-1_b.H\";\n "}, {"sha": "7e83a4537543a41efb7ea7ffb9194985f7687cd1", "filename": "gcc/testsuite/g++.dg/tls/thread_local11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile { target c++11 } }\n // { dg-add-options tls }\n // { dg-require-effective-target tls_runtime }\n-// { dg-additional-options \"-fdump-tree-gimple\" }\n+// { dg-additional-options \"-fdump-tree-gimple -fno-implicit-constexpr\" }\n // { dg-final { scan-tree-dump-times \"_ZTW2s1\" 2 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"_ZTW2s2\" 2 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"_ZTW2s3\" 2 \"gimple\" } }"}, {"sha": "a6283984eb79d58e9e8d55d199e2478af7bd1a02", "filename": "gcc/testsuite/g++.dg/tls/thread_local11a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11a.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -3,7 +3,7 @@\n // { dg-add-options tls }\n // { dg-require-alias \"\" }\n // { dg-require-effective-target tls_runtime }\n-// { dg-additional-options \"-fdump-tree-gimple\" }\n+// { dg-additional-options \"-fdump-tree-gimple -fno-implicit-constexpr\" }\n // { dg-final { scan-tree-dump-times \"_ZTH2s1\" 1 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"_ZTH2s2\" 1 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"_ZTH2s3\" 1 \"gimple\" } }"}, {"sha": "a4649eb5ffc941f15b80204f9afe37f7c135331c", "filename": "gcc/testsuite/g++.dg/tm/pr46653.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr46653.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr46653.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr46653.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-fgnu-tm -O\" }\n+// { dg-options \"-fgnu-tm -O -fno-implicit-constexpr\" }\n \n class shared_count\n {"}, {"sha": "521dcb8d8c022cd9dc8d8c4d3bbba5e6cd4ac942", "filename": "gcc/testsuite/g++.dg/ubsan/pr70035.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70035.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70035.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70035.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -1,7 +1,7 @@\n // PR c++/70035\n // { dg-do run }\n // { dg-shouldfail \"ubsan\" }\n-// { dg-options \"-fsanitize=vptr -fno-sanitize-recover=undefined\" }\n+// { dg-options \"-fsanitize=vptr -fno-sanitize-recover=undefined -fno-implicit-constexpr\" }\n \n struct A {\n   A (int) {}"}, {"sha": "56cfa000e8d531562a6f576a75aa3ecea15942ba", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete6.C?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -25,4 +25,4 @@ inline void A::operator delete(void*p)\n \n int main()\n {A *ap=new A;\n-delete ap;}\n+delete ap;}\t\t\t// { dg-prune-output \"unallocated object 'i'\" }"}, {"sha": "fd06d278faafaf3d657842ca135c564e22cebefc", "filename": "gcc/testsuite/lib/g++-dg.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -57,7 +57,8 @@ proc g++-dg-runtest { testcases flags default-extra-flags } {\n \t    set option_list { }\n \t    foreach x $std_list {\n \t\t# Handle \"concepts\" as C++17 plus Concepts TS.\n-\t\tif { $x eq \"concepts\" } then { set x \"17 -fconcepts\" }\n+\t\tif { $x eq \"concepts\" } then { set x \"17 -fconcepts\"\n+\t\t} elseif { $x eq \"impcx\" } then { set x \"23 -fimplicit-constexpr\" }\n \t\tlappend option_list \"${std_prefix}$x\"\n \t    }\n \t} else {"}, {"sha": "c928d99a14be1192b5f4154a833b9fef5c8cf0e7", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -10232,6 +10232,10 @@ proc check_effective_target_concepts { } {\n     return [check-flags { \"\" { } { -fconcepts } }]\n }\n \n+proc check_effective_target_implicit_constexpr { } {\n+    return [check-flags { \"\" { } { -fimplicit-constexpr } }]\n+}\n+\n # Return 1 if expensive testcases should be run.\n \n proc check_effective_target_run_expensive_tests { } {"}, {"sha": "5030f89b345287a7d604778d6ebdac5512641321", "filename": "libstdc++-v3/testsuite/20_util/to_address/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1_neg.cc?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -32,5 +32,5 @@ struct P\n void test01()\n {\n   P p;\n-  std::to_address(p); // { dg-error \"required from here\" }\n+  std::to_address(p); // { dg-error \"\" }\n }"}, {"sha": "0a0cbbf7c4e1f624cc482d65fd5e87df9609bc5a", "filename": "libstdc++-v3/testsuite/26_numerics/random/concept.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c2080b056ea2b7f145cba927f36e4f40900205/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c2080b056ea2b7f145cba927f36e4f40900205/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc?ref=87c2080b056ea2b7f145cba927f36e4f40900205", "patch": "@@ -227,7 +227,11 @@ struct N12\n   static constexpr unsigned max() { return 1; }\n };\n \n+#if __cpp_implicit_constexpr\n+static_assert( std::uniform_random_bit_generator<N12> ); // LWG 3150\n+#else\n static_assert( ! std::uniform_random_bit_generator<N12> ); // LWG 3150\n+#endif\n \n struct N13\n {\n@@ -236,7 +240,11 @@ struct N13\n   static unsigned max() { return 1; } // not constexpr\n };\n \n+#if __cpp_implicit_constexpr\n+static_assert( std::uniform_random_bit_generator<N13> ); // LWG 3150\n+#else\n static_assert( ! std::uniform_random_bit_generator<N13> ); // LWG 3150\n+#endif\n \n struct N14\n {"}]}