{"sha": "c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiMWI0OWIxZWNmM2VmOTVmY2RmOThjMmVkNDFlZGVmZDRjODk5MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-11-30T14:30:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-11-30T14:30:00Z"}, "message": "tree-vectorizer.h (vectorizable_function): Export.\n\n2006-11-30  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vectorizable_function): Export.\n\t* tree-vect-transform.c (vectorizable_function): Likewise.\n        * tree-vect-patterns.c (vect_recog_pow_pattern): Set\n        type_in to scalar type in recognition of squaring.\n\tMake sure the target can vectorize sqrt in recognition\n\tof sqrt, set type_in to vector type in this case.\n\n\t* gcc.dg/vect/vect-pow-1.c: Rename ...\n\t* gcc.dg/vect/fast-math-vect-pow-1.c: ... to this.  Use\n\tfloats instead of doubles, check successful vectorization.\n\nFrom-SVN: r119362", "tree": {"sha": "af44eced0f1123048c473eb4dc1a457dd2088947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af44eced0f1123048c473eb4dc1a457dd2088947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c4ace25d7f3d08c0c080ec0bf4d90cd403989a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4ace25d7f3d08c0c080ec0bf4d90cd403989a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4ace25d7f3d08c0c080ec0bf4d90cd403989a7"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "a73f82a496bc1dd975dc82720ff4368700579683", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "patch": "@@ -1,3 +1,12 @@\n+2006-11-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vectorizable_function): Export.\n+\t* tree-vect-transform.c (vectorizable_function): Likewise.\n+        * tree-vect-patterns.c (vect_recog_pow_pattern): Set\n+        type_in to scalar type in recognition of squaring.\n+\tMake sure the target can vectorize sqrt in recognition\n+\tof sqrt, set type_in to vector type in this case.\n+\n 2006-11-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (R10_REG): New constant."}, {"sha": "dc05938ab5de972c85892f190b3feb796e2de8b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "patch": "@@ -1,3 +1,9 @@\n+2006-11-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-pow-1.c: Rename ...\n+\t* gcc.dg/vect/fast-math-vect-pow-1.c: ... to this.  Use\n+\tfloats instead of doubles, check successful vectorization.\n+\n 2006-11-29  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n         PR target/29945"}, {"sha": "4d000f192f1b2eeb0c8177c5ee4630c6488812fe", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-vect-pow-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-pow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-pow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-pow-1.c?ref=c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+\n+float x[256];\n+\n+void foo(void)\n+{\n+  int i;\n+  for (i=0; i<256; ++i)\n+    x[i] = x[i] * x[i];\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2c29cbaf6de754aed6733fd90820ad47fd26d7c5", "filename": "gcc/testsuite/gcc.dg/vect/vect-pow-1.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4ace25d7f3d08c0c080ec0bf4d90cd403989a7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4ace25d7f3d08c0c080ec0bf4d90cd403989a7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-1.c?ref=3c4ace25d7f3d08c0c080ec0bf4d90cd403989a7", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fdump-tree-vect-details\" } */\n-\n-double x[256];\n-\n-void foo(void)\n-{\n-  int i;\n-  for (i=0; i<256; ++i)\n-    x[i] = x[i] * x[i];\n-}\n-\n-/* { dg-final { scan-tree-dump \"pattern recognized\" \"vect\" } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6d5d3dcf35c40426fdc56d224e02b5431b61b1af", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "patch": "@@ -466,23 +466,31 @@ vect_recog_pow_pattern (tree last_stmt, tree *type_in, tree *type_out)\n   /* We now have a pow or powi builtin function call with a constant\n      exponent.  */\n \n-  *type_in = get_vectype_for_scalar_type (TREE_TYPE (base));\n   *type_out = NULL_TREE;\n \n   /* Catch squaring.  */\n   if ((host_integerp (exp, 0)\n        && tree_low_cst (exp, 0) == 2)\n       || (TREE_CODE (exp) == REAL_CST\n           && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconst2)))\n-    return build2 (MULT_EXPR, TREE_TYPE (base), base, base);\n+    {\n+      *type_in = TREE_TYPE (base);\n+      return build2 (MULT_EXPR, TREE_TYPE (base), base, base);\n+    }\n \n   /* Catch square root.  */\n   if (TREE_CODE (exp) == REAL_CST\n       && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconsthalf))\n     {\n       tree newfn = mathfn_built_in (TREE_TYPE (base), BUILT_IN_SQRT);\n       tree newarglist = build_tree_list (NULL_TREE, base);\n-      return build_function_call_expr (newfn, newarglist);\n+      *type_in = get_vectype_for_scalar_type (TREE_TYPE (base));\n+      if (*type_in)\n+\t{\n+\t  newfn = build_function_call_expr (newfn, newarglist);\n+\t  if (vectorizable_function (newfn, *type_in))\n+\t    return newfn;\n+\t}\n     }\n \n   return NULL_TREE;"}, {"sha": "769b4af10b0a29d16360ea707b1f6a894c2c4de6", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "patch": "@@ -1570,7 +1570,7 @@ vectorizable_reduction (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt)\n    true if the target has a vectorized version of the function,\n    or false if the function cannot be vectorized.  */\n \n-static bool\n+bool\n vectorizable_function (tree call, tree vectype)\n {\n   tree fndecl = get_callee_fndecl (call);"}, {"sha": "0c026b14d0ce12babfa99206bc0e6c680e82eb67", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "patch": "@@ -398,6 +398,7 @@ extern bool vectorizable_operation (tree, block_stmt_iterator *, tree *);\n extern bool vectorizable_type_promotion (tree, block_stmt_iterator *, tree *);\n extern bool vectorizable_type_demotion (tree, block_stmt_iterator *, tree *);\n extern bool vectorizable_assignment (tree, block_stmt_iterator *, tree *);\n+extern bool vectorizable_function (tree, tree);\n extern bool vectorizable_call (tree, block_stmt_iterator *, tree *);\n extern bool vectorizable_condition (tree, block_stmt_iterator *, tree *);\n extern bool vectorizable_live_operation (tree, block_stmt_iterator *, tree *);"}]}