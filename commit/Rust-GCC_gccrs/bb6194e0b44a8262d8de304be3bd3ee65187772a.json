{"sha": "bb6194e0b44a8262d8de304be3bd3ee65187772a", "node_id": "C_kwDOANBUbNoAKGJiNjE5NGUwYjQ0YTgyNjJkOGRlMzA0YmUzYmQzZWU2NTE4Nzc3MmE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-06T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-06T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "76e79da2d72ba5eb75d94345f154e960d87a4ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e79da2d72ba5eb75d94345f154e960d87a4ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb6194e0b44a8262d8de304be3bd3ee65187772a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6194e0b44a8262d8de304be3bd3ee65187772a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6194e0b44a8262d8de304be3bd3ee65187772a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6194e0b44a8262d8de304be3bd3ee65187772a/comments", "author": null, "committer": null, "parents": [{"sha": "433516e1c6b1f8eeceeceb83cec5ea02a14065dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433516e1c6b1f8eeceeceb83cec5ea02a14065dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/433516e1c6b1f8eeceeceb83cec5ea02a14065dc"}], "stats": {"total": 456, "additions": 455, "deletions": 1}, "files": [{"sha": "0369c48d0c4ee69dbf09fce07622a80c0cfe05cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1,3 +1,52 @@\n+2021-10-05  qing zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle-end/102359\n+\t* gimplify.c (gimplify_decl_expr): Not add initialization for an\n+\tauto variable when it has been initialized by frontend.\n+\n+2021-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (jt_path_registry::cancel_invalid_paths):\n+\tLoosen restrictions\n+\n+2021-10-05  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* common/config/avr/avr-common.c (avr_handle_option): Mark\n+\targument as ATTRIBUTE_UNUSED.\n+\n+2021-10-05  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config/lm32/uclinux-elf.h (LINK_GCC_C_SEQUENCE_SPEC):\n+\tUndefine before redefinition.\n+\n+2021-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* toplev.c (no_backend): Remove global var.\n+\t(process_options): Pass in no_backend, move post_options\n+\tlanghook call to toplev::main.\n+\t(do_compile): Pass in no_backend, move process_options call\n+\tto toplev::main.\n+\t(toplev::run_self_tests): Check no_backend at the caller.\n+\t(toplev::main): Call post_options and process_options\n+\tsplit out from do_compile, do self-tests only if\n+\tno_backend is initialized.\n+\n+2021-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (dump_function_to_file): Dump the UID of the\n+\tfunction as part of the name when requested.\n+\t* tree-pretty-print.c (dump_function_name): Dump the UID when\n+\trequested and the langhook produced the actual name.\n+\n+2021-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102587\n+\tPR middle-end/102285\n+\t* internal-fn.c (expand_DEFERRED_INIT): Fall back to\n+\tzero-initialization as last resort, use the constant\n+\tsize as given by the DEFERRED_INIT argument to build\n+\tthe initializer.\n+\n 2021-10-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97573"}, {"sha": "46eae114d58fd9b6686bc0071ff25230b2bb6989", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1 +1 @@\n-20211005\n+20211006"}, {"sha": "feadd5e63b661c956ef674e8c877882a26a62262", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1,3 +1,265 @@\n+2021-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu): Do not wrap boolean values\n+\treferenced in pragmas.\n+\n+2021-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Do not set the\n+\tDECL_DISREGARD_INLINE_LIMITS flag if -gnatd.8 is specified.\n+\n+2021-10-05  Bob Duff  <duff@adacore.com>\n+\n+\t* gcc-interface/trans.c (set_end_locus_from_node): Check that\n+\tHandled_Statement_Sequence is not Empty before calling\n+\tEnd_Label, because the Empty node has no End_Label, and\n+\tdepending on the exact node layout chosen by gen_il, calling\n+\tEnd_Label might crash, or might work OK by accident.\n+\n+2021-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/cuintp.c: Adjust placement of include directive.\n+\t* gcc-interface/targtyps.c: Likewise.\n+\n+2021-10-05  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm.rst: Add...\n+\t* doc/gnat_rm/security_hardening_features.rst: New.\n+\t* doc/gnat_rm/about_this_guide.rst: Link to new chapter.\n+\t* gnat_rm.texi: Regenerate.\n+\t* gcc-interface/utils.c (handle_strub_attribute): New.\n+\t(gnat_internal_attribute_table): Add strub.\n+\t* libgnat/a-except.adb: Make Rcheck_CE_* strub-callable.\n+\t* libgnat/a-except.ads (Raise_Exception): Likewise.\n+\t(Raise_Exception_Always): Likewise.\n+\t* libgnat/s-arit128.ads (Multiply_With_Ovflo_Check128):\n+\tLikewise.\n+\t* libgnat/s-arit64.ads (Multiply_With_Ovflo_Check64):\n+\tLikewise.\n+\t* libgnat/s-secsta.ads (SS_Allocate, SS_Mark, SS_Release):\n+\tLikewise.\n+\n+2021-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch9.adb (Install_Private_Data_Declarations): Copy the Sloc of\n+\tcomponents for the local renamings as well as the Comes_From_Source\n+\tflag, and also set Warnings_Off on them.  Use Nam local variable.\n+\n+2021-10-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnarl/a-tasini.ads (Set_Initialization_Handler): Update\n+\tcomments.\n+\n+2021-10-05  Corentin Gay  <gay@adacore.com>\n+\n+\t* init.c (QNX): Add #include errno.h.\n+\n+2021-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Fpt_Attribute): Likewise.\n+\t* snames.ads-tmpl (Name_Unaligned_Valid): Delete.\n+\n+2021-10-05  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Forbid use of\n+\tCompile_Time_(Error|Warning) as configuration pragma.\n+\t* doc/gnat_ugn/the_gnat_compilation_model.rst:\n+\tCompile_Time_(Error|Warning) and Compiler_Unit(_Warning) are not\n+\tconfiguration pragmas and shall not be listed as such.  The\n+\tfollowing pragmas are either obsolete or undocumented:\n+\tNo_Run_Time, Propagate_Exceptions, Rational, Ravenscar,\n+\tRestricted_Run_Time, Short_Descriptors, Universal_Data.  Fix\n+\tsome typos (notably on Restriction_Warnings).\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Move\n+\tRename_Pragma documentation to alphabetical order.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2021-10-05  Corentin Gay  <gay@adacore.com>\n+\n+\t* adaint.c (QNX): Add #include for sys/time.h.\n+\n+2021-10-05  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-forstr.adb (Next_Format): When there is no more\n+\tformat specifier found issue a proper error message instead of\n+\traising a contraint error.\n+\n+2021-10-05  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-forstr.adb (Get_Formatted): Fix computation of the\n+\tnumber of zero to use in the formatted string. This was a wrong\n+\tcopy/paste.\n+\n+2021-10-05  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-forstr.adb (Get_Formatted): Minor code clean-up.\n+\n+2021-10-05  Etienne Servais  <servais@adacore.com>\n+\n+\t* libgnat/a-zchhan.ads, libgnat/a-zchhan.adb\n+\t(Character_Set_Version, Is_Basic, To_Basic): New.\n+\t* libgnat/a-zchuni.ads, libgnat/a-zchuni.adb (Is_Basic,\n+\tTo_Basic): New.\n+\n+2021-10-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Improve error message.\n+\n+2021-10-05  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* aspects.ads (type Aspect_Id): Add\n+\tAspect_Designated_Storage_Model and Aspect_Storage_Model_Type.\n+\t(Aspect_Argument): Add associations for the above new aspects.\n+\t(Is_Representation_Aspect): Likewise.\n+\t(Aspect_Names, Aspect_Delay): Likewise.\n+\t* exp_ch4.adb (Expand_N_Allocator): Call Find_Storage_Op rather\n+\tthan Find_Prim_Op.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Likewise.\n+\t* exp_util.ads (Find_Storage_Op): New function that locates\n+\teither a primitive operation of a storage pool or an operation\n+\tof a storage-model type specified in its Storage_Model_Type\n+\taspect.\n+\t* exp_util.adb (Find_Storage_Op): New function that calls either\n+\tFind_Prim_Op or Get_Storage_Model_Type_Entity to locate a\n+\tstorage-related operation that is associated with a type.\n+\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): Analyzes,\n+\tresolves, and validates the arguments of aspect\n+\tDesignated_Storage_Model_Type.\n+\t(Analyze_Aspect_Specifications): Sets delay-related flags on\n+\tstorage-model aspects when Delay_Required. Checks that aspect\n+\tDesignated_Storage_Model is only specified for an access type\n+\tand that aspect Storage_Model_Type is only specified on an\n+\timmutably limited type. Also records such aspects for their\n+\tassociated types.\n+\t(Check_Aspect_At_Freeze_Point): Resolve each of the argument\n+\tassociations given for a Storage_Model_Type aspect.\n+\t(Resolve_Storage_Model_Type_Argument): New procedure that\n+\tresolves an argument given in the association for a given entity\n+\tname associated with a type with aspect Storage_Model_Type,\n+\tensuring that it has the proper kind or profile.\n+\t(Validate_Storage_Model_Type_Aspect): New procedure that checks\n+\tthe legality and completeness of the entity associations given\n+\tin a Storage_Model_Type aspect.\n+\t* sem_util.ads (package Storage_Model_Support): New nested\n+\tpackage that encapsulates a set of convenient utility functions\n+\tfor retrieving entities, etc. associated with\n+\tstorage-model-related types and objects.\n+\t(Get_Storage_Model_Type_Entity): New function to return a\n+\tspecified entity associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t(Has_Designated_Storage_Model_Aspect): New function that returns\n+\twhether a type has aspect Designated_Storage_Model.\n+\t(Has_Storage_Model_Type_Aspect): New function that returns\n+\twhether a type has aspect Storage_Model_Type.\n+\t(Storage_Model_Object): New function that returns the object\n+\tEntity_Id associated with a type's Designated_Storage_Model\n+\taspect.\n+\t(Storage_Model_Type): New function that returns the type\n+\tassociated with a storage-model object (when the object's type\n+\tspecifies Storage_Model_Type).\n+\t(Storage_Model_Address_Type): New function that returns the\n+\tAddress_Type associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t(Storage_Model_Null_Address): New function that returns the\n+\tNull_Address constant associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t(Storage_Model_Allocate): New function that returns the Allocate\n+\tprocedure associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t(Storage_Model_Deallocate): New function that returns the\n+\tDeallocate procedure associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t(Storage_Model_Copy_From): New function that returns the\n+\tCopy_From procedure associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t(Storage_Model_Copy_To): New function that returns the Copy_To\n+\tprocedure associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t(Storage_Model_Storage_Size): New function that returns the\n+\tStorage_Size function associated with a type that has aspect\n+\tStorage_Model_Type.\n+\t* sem_util.adb (package Storage_Model_Support): Body of new\n+\tnested package that contains the implementations the utility\n+\tfunctions declared in the spec of this package.\n+\t* snames.ads-tmpl: Add new names Name_Designated_Storage_Pool,\n+\tName_Storage_Model, Name_Storage_Model_Type, Name_Address_Type,\n+\tName_Copy_From, Name_Copy_To, and Name_Null_Address for the new\n+\taspects and associated aspect arguments.\n+\n+2021-10-05  Richard Kenner  <kenner@adacore.com>\n+\n+\t* debug.adb: Add documentation for -gnatd_t.\n+\n+2021-10-05  Corentin Gay  <gay@adacore.com>\n+\n+\t* sysdep.c (__gnat_is_file_not_found_error): Add else if case.\n+\n+2021-10-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Build_Class_Wide_Expression): Replace entities\n+\tof both identifiers and operator symbols.\n+\n+2021-10-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprogram): Copy ghost status from parent\n+\tto derived subprogram.\n+\n+2021-10-05  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/a-strunb.ads, libgnat/a-strunb__shared.ads: Add\n+\tDefault_Initial_Condition to Unbounded_String.\n+\n+2021-10-05  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cfdlli.ads: Use pragma Assertion_Policy to disable\n+\tcontract cases at execution.\n+\t* libgnat/a-cfinve.ads: Idem.\n+\t* libgnat/a-cofove.ads: Idem.\n+\t* libgnat/a-cfhase.ads: Idem.\n+\t* libgnat/a-cfhama.ads: Idem.\n+\t* libgnat/a-cforse.ads: Idem.\n+\t* libgnat/a-cforma.ads: Idem.\n+\n+2021-10-05  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch4.adb (P_Iterated_Component_Association): Parse these\n+\tfeatures the same way in all language versions.  Move the call\n+\tto Error_Msg_Ada_2022_Feature into semantic analysis.\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association,\n+\tResolve_Iterated_Association): Move the call to\n+\tError_Msg_Ada_2022_Feature here from par-ch4.adb.\n+\n+2021-10-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve): Recognize specially that case.\n+\n+2021-10-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-strmap.adb: Add ghost code for proof.\n+\t(To_Range): This is the most involved proof, as it requires\n+\tcreating the result of the call to To_Domain as a ghost\n+\tvariable, and show the unicity of this result in order to prove\n+\tthe postcondition.\n+\t* libgnat/a-strmap.ads: (SPARK_Proof_Sorted_Character_Sequence):\n+\tNew ghost function.\n+\t(To_Domain): Add postcondition regarding sorting of result.\n+\t(To_Range): Fix postcondition that should compare Length instead\n+\tof Last for the results of To_Domain and To_Range, as the value\n+\tof Last for an empty result is not specified in the Ada RM.\n+\n+2021-10-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-chahan.adb: Add loop invariants as needed to prove\n+\tsubprograms.  Also use extended return statements where\n+\tappropriate and not done already.  Mark data with\n+\tRelaxed_Initialization where needed for initialization by parts.\n+\tConvert regular functions to expression functions where needed\n+\tfor proof.\n+\t* libgnat/a-chahan.ads: Add postconditions.\n+\t* libgnat/a-strmap.ads (Model): New ghost function to create a\n+\tpublicly visible model of the private data Character_Mapping,\n+\tneeded in order to prove subprograms in Ada.Characters.Handling.\n+\n 2021-10-04  Justin Squirek  <squirek@adacore.com>\n \n \t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:"}, {"sha": "24096bb585475d923d8c604996fc7bd48438bd17", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1,3 +1,9 @@\n+2021-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/102605\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression):\n+\tAccept more address _Literals.\n+\n 2021-10-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97573"}, {"sha": "663c0b174b40914b488fe61e9d387329d800a233", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1,3 +1,22 @@\n+2021-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102548\n+\t* tree.c (apply_identity_attributes): Fix handling of the\n+\tcase where an attribute in the list doesn't affect type\n+\tidentity but some attribute before it does.\n+\n+2021-10-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102547\n+\t* constexpr.c (potential_constant_expression_1): Handle\n+\tNONTYPE_ARGUMENT_PACK.\n+\n+2021-10-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98930\n+\t* pt.c (has_value_dependent_address): Return true for a static\n+\tlocal variable from a function template.\n+\n 2021-10-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97573"}, {"sha": "7f1f510548a93d23133b34aedc1e25043e26459d", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1,3 +1,9 @@\n+2021-10-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* d-spec.cc (lang_specific_driver): Push the -static-libstdc++\n+\toption back onto the command line for targets without support\n+\tfor -Bstatic/dynamic.\n+\n 2021-10-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/102574"}, {"sha": "ec22122f0b8545a20320a9e33f9385ea54d9f5fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1,3 +1,57 @@\n+2021-10-05  qing zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle-end/102359\n+\t* g++.dg/pr102359_1.C: New test.\n+\t* g++.dg/pr102359_2.C: New test.\n+\n+2021-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102548\n+\t* g++.target/i386/pr102548.C: New test.\n+\n+2021-10-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102547\n+\t* g++.dg/cpp0x/variadic-partial2.C: New test.\n+\t* g++.dg/cpp0x/variadic-partial2a.C: New test.\n+\n+2021-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-thread-valid.c: New test.\n+\n+2021-10-05  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.target/s390/pr80725.c: Ensure computed goto is used on\n+\ta pointer type.\n+\n+2021-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/102605\n+\t* gcc.dg/gimplefe-46.c: New testcase.\n+\n+2021-10-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98930\n+\t* g++.dg/cpp1z/nontype4.C: New test.\n+\t* g++.dg/cpp1z/nontype4a.C: New test.\n+\n+2021-10-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/pr43711.f90: Add dg-error + dg-prune-output,\n+\tremove dg-excess-errors to change XFAIL to PASS.\n+\n+2021-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102587\n+\tPR middle-end/102285\n+\t* gcc.target/aarch64/sve/pr102587-1.c: Add -march=armv8.3-a+sve.\n+\t* gcc.target/aarch64/sve/pr102587-2.c: Likewise.\n+\n+2021-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* gfortran.dg/predict-2.f90: Adjust to avoid redundant\n+\tinner loop preheader checking code.\n+\n 2021-10-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97573"}, {"sha": "614361fcd7b416e7b65fe6ef6fe0e05e2b88fe4a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6194e0b44a8262d8de304be3bd3ee65187772a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6194e0b44a8262d8de304be3bd3ee65187772a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb6194e0b44a8262d8de304be3bd3ee65187772a", "patch": "@@ -1,3 +1,61 @@\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string_view/requirements/trivially_copyable.cc:\n+\tNew test.\n+\t* testsuite/23_containers/span/trivially_copyable.cc: New test.\n+\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/utility.h (__is_in_place_type_v): Define\n+\tvariable template to detect in_place_type_t specializations.\n+\t(__is_in_place_type): Replace class template with alias\n+\ttemplate using __is_in_place_type_v.\n+\t* include/std/any (any(T&&)): Check __is_in_place_type first and\n+\tavoid instantiating is_copy_constructible unnecessarily.\n+\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/integer_comparisons/greater.cc: New test.\n+\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/volatile_ptr.cc:\n+\tCheck result matches non-volatile pointer.\n+\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/102535\n+\t* testsuite/20_util/is_trivially_constructible/value.cc: Adjust\n+\texpected value for C++20.\n+\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_function.h (_Any_data::_M_access): Add\n+\tnoexcept.\n+\t(_Function_base::_Base_manager::_M_get_pointer): Likewise.\n+\t(_Function_base::_Base_manager::_M_not_empty_function):\n+\tLikewise.\n+\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ostream (operator<<(const volatile void*)):\n+\tAdd new overload, as per P1147R1.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/volatile_ptr.cc:\n+\tNew test.\n+\n+2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_queue.h\n+\t(__cpp_lib_adaptor_iterator_pair_constructor): Set to correct\n+\tvalue.\n+\t* include/bits/stl_stack.h\n+\t(__cpp_lib_adaptor_iterator_pair_constructor): Likewise.\n+\t* include/std/version\n+\t(__cpp_lib_adaptor_iterator_pair_constructor): Likewise.\n+\t* testsuite/23_containers/queue/cons_from_iters.cc: Update\n+\texpected value.\n+\t* testsuite/23_containers/stack/cons_from_iters.cc: Likewise.\n+\n 2021-10-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/forward_list.h (forward_list): Use non-deduced"}]}