{"sha": "586de2189808556ae88977242de6ef5cf6ea39fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2ZGUyMTg5ODA4NTU2YWU4ODk3NzI0MmRlNmVmNWNmNmVhMzlmZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-23T15:49:56Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-23T15:49:56Z"}, "message": "arc-protos.h (arc_select_cc_mode, gen_compare_reg): Wrap in RTX_CODE macro guard.\n\n\t* config/arc/arc-protos.h arc_select_cc_mode, gen_compare_reg):\n\tWrap in RTX_CODE macro guard.\n\t* config/arm/pe.c (arm_dllexport_p, arm_dllimport_p,\n\tarm_dllexport_name_p, arm_dllimport_name_p, arm_mark_dllexport,\n\tarm_mark_dllimport, arm_pe_encode_section_info,\n\tarm_pe_unique_section): Use ISO-C function declarations.\n\t* config/c4x/c4x-c.c (c4x_parse_pragma, c4x_pr_CODE_SECTION,\n\tc4x_pr_DATA_SECTION, c4x_pr_FUNC_IS_PURE,\n\tc4x_pr_FUNC_NEVER_RETURNS, c4x_pr_INTERRUPT, c4x_pr_ignored):\n\tLikewise.\n\t* config/iq2000/iq2000.h (ASM_OUTPUT_SKIP): Fix format warning.\n\t* config/m68hc11/m68hc11.h (ASM_OUTPUT_EXTERNAL): Undef before\n\tdefining.\n\t* config/mips/mips.h (ASM_DECLARE_OBJECT_NAME): Fix format\n\twarnings.\n\t* config/mn10300/mn10300.h (OUTPUT_ADDR_CONST_EXTRA): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_output_function_epilogue): Likewise.\n\t(register_move_cost): Use ISO-C function declarations.\n\t* config/pdp11/pdp11.h (PRINT_OPERAND): Fix format warnings.\n\t* config/score/score-protos.h (score_declare_object): Add\n\tATTRIBUTE_PRINTF_4.\n\t* config/score/score.h (ASM_DECLARE_OBJECT_NAME): Fix format\n\twarnings.\n\t* final.c (profile_function): Avoid empty if-bodies.\n\t\n\t\n\t* calls.c (must_pass_in_stack_var_size,\n\tmust_pass_in_stack_var_size_or_pad): Constify.\n\t* config/alpha/alpha-protos.h (function_value): Likewise.\n\t* config/alpha/alpha.c (alpha_return_in_memory,\n\talpha_pass_by_reference, function_value,\n\tunicosmk_must_pass_in_stack, TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES):\n\tLikewise.\n\t* config/arc/arc.c (arc_return_in_memory, arc_pass_by_reference,\n\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n\tTARGET_PROMOTE_PROTOTYPES): Likewise.\n\t* config/arm/arm-protos.h (arm_return_in_memory,\n\tarm_pad_arg_upward, arm_function_value): Likewise.\n\t* config/arm/arm.c (arm_pass_by_reference,\n\tarm_promote_prototypes, arm_return_in_msb, arm_must_pass_in_stack,\n\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n\tarm_function_value, arm_return_in_memory, arm_pad_arg_upward):\n\tLikewise.\n\t* config/arm/arm.h (ARM_DECLARE_FUNCTION_NAME): Likewise.\n\t* config/avr/avr-protos.h (avr_function_value): Likewise.\n\t* config/avr/avr.c (avr_return_in_memory,\n\tgas_output_limited_string, gas_output_ascii, avr_function_value,\n\tavr_return_in_memory): Likewise.\n\t* config/bfin/bfin-protos.h (bfin_return_in_memory): Likewise.\n\t* config/bfin/bfin.c (bfin_pass_by_reference,\n\tbfin_return_in_memory, TARGET_PROMOTE_PROTOTYPES,\n\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN):\n\tLikewise.\n\t* config/cris/cris.c (cris_pass_by_reference,\n\tTARGET_PROMOTE_FUNCTION_ARGS): Likewise.\n\t* config/crx/crx.c (crx_return_in_memory): Likewise.\n\t* config/darwin.c (function_base, machopic_function_base_name):\n\tLikewise.\n\t* config/fr30/fr30.c (fr30_must_pass_in_stack,\n\tTARGET_PROMOTE_PROTOTYPES): Likewise.\n\t* config/frv/frv.c (frv_must_pass_in_stack): Likewise.\n\t* config/h8300/h8300.c (h8300_return_in_memory): Likewise.\n\t* config/i386/i386-protos.h (ix86_return_in_memory,\n\tix86_sol10_return_in_memory): Likewise.\n\t* config/i386/i386.c (ix86_function_value,\n\tix86_function_sseregparm, ix86_must_pass_in_stack,\n\ttype_natural_mode, classify_argument, examine_argument,\n\tconstruct_container, ix86_pass_by_reference, function_value_32,\n\tfunction_value_64, ix86_function_value_1, return_in_memory_32,\n\treturn_in_memory_64, return_in_memory_ms_64,\n\tix86_return_in_memory, ix86_sol10_return_in_memory,\n\tTARGET_PROMOTE_PROTOTYPES): Likewise.\n\t* config/ia64/ia64-protos.h (ia64_function_value,\n\tia64_hpux_function_arg_padding): Likewise.\n\t* config/ia64/ia64.c (hfa_element_mode, ia64_return_in_memory,\n\tia64_function_value, bundle_state_hash, bundle_state_eq_p,\n\tia64_hpux_function_arg_padding): Likewise.\n\t* config/iq2000/iq2000-protos.h (function_arg,\n\tiq2000_function_value): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_return_in_memory,\n\tiq2000_pass_by_reference, TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n\tfunction_arg, iq2000_function_value): Likewise.\n\t* config/m32c/m32c-protos.h (m32c_function_value,\n\tm32c_promote_function_return): Likewise.\n\t* config/m32c/m32c.c (m32c_pass_by_reference,\n\tm32c_promote_prototypes, m32c_promote_function_return,\n\tm32c_function_value): Likewise.\n\t* config/m32r/m32r.c (m32r_return_in_memory,\n\tm32r_pass_by_reference, TARGET_PROMOTE_PROTOTYPES,\n\tm32r_in_small_data_p): Likewise.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_function_arg_padding):\n\tLikewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_return_in_memory,\n\tm68hc11_function_arg_padding): Likewise.\n\t* config/m68k/m68k-protos.h (m68k_function_value): Likewise.\n\t* config/m68k/m68k.c (TARGET_PROMOTE_PROTOTYPES,\n\tm68k_function_value): Likewise.\n\t* config/mcore/mcore-protos.h (mcore_num_arg_regs,\n\tmcore_function_value): Likewise.\n\t* config/mcore/mcore.c (handle_structs_in_regs,\n\tmcore_return_in_memory, TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n\tmcore_num_arg_regs, mcore_function_value): Likewise.\n\t* config/mips/mips-protos.h (mips_pad_arg_upward,\n\tmips_function_value): Likewise.\n\t* config/mips/mips.c (mips_fpr_return_fields, mips_return_in_msb,\n\tmips_return_in_memory, mips_pass_by_reference, mips_callee_copies,\n\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n\tTARGET_PROMOTE_PROTOTYPES, mips_pad_arg_upward,\n\tmips_function_value): Likewise.\n\t* config/mmix/mmix-protos.h (mmix_function_outgoing_value):\n\tLikewise.\n\t* config/mmix/mmix.c (mmix_pass_by_reference,\n\tTARGET_PROMOTE_FUNCTION_ARGS, mmix_function_outgoing_value,\n\tmmix_encode_section_info): Likewise.\n\t* config/mn10300/mn10300-protos.h (mn10300_function_value):\n\tLikewise.\n\t* config/mn10300/mn10300.c (mn10300_return_in_memory,\n\tmn10300_pass_by_reference, TARGET_PROMOTE_PROTOTYPES,\n\tmn10300_function_value): Likewise.\n\t* config/mt/mt-protos.h (mt_function_value): Likewise.\n\t* config/mt/mt.c (mt_pass_by_reference, mt_function_value,\n\tmt_pass_in_stack, TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t* config/pa/pa-protos.h (function_arg_padding, function_value,\n\tpa_return_in_memory): Likewise.\n\t* config/pa/pa.c (pa_pass_by_reference,\n\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n\tfunction_arg_padding, function_value, pa_return_in_memory):\n\tLikewise.\n\t* config/pdp11/pdp11.c (pdp11_return_in_memory): Likewise.\n\t* config/rs6000/rs6000-protos.h (rs6000_function_value,\n\tfunction_arg_padding): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_return_in_memory,\n\trs6000_darwin64_record_arg_recurse, rs6000_darwin64_record_arg,\n\trs6000_pass_by_reference, rs6000_must_pass_in_stack,\n\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n\tfunction_arg_padding, altivec_expand_dst_builtin,\n\taltivec_expand_builtin, rs6000_expand_builtin, spe_init_builtins,\n\taltivec_init_builtins, rs6000_common_init_builtins,\n\trs6000_function_value): Likewise.\n\t* s390/s390-protos.h (s390_function_value): Likewise.\n\t* config/s390/s390.c (s390_function_arg_size,\n\ts390_pass_by_reference, s390_return_in_memory,\n\ts390_function_value, TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t* config/score/score-protos.h (score_function_value): Likewise.\n\t* config/score/score.c (score_arg_partial_bytes,\n\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n\tTARGET_PROMOTE_PROTOTYPES, score_return_in_memory,\n\tscore_pass_by_reference, score_add_offset, score_function_value):\n\tLikewise.\n\t* config/sh/sh-protos.h (sh_attr_renesas_p,\n\tsh_promote_prototypes): Likewise.\n\t* config/sh/sh.c (sh_return_in_memory, sh_pass_by_reference,\n\tsh_callee_copies, sh_promote_prototypes, shcompact_byref,\n\tsh_attr_renesas_p): Likewise.\n\t* config/sparc/sparc-protos.h (function_value,\n\tfunction_arg_padding): Likewise.\n\t* config/sparc/sparc.c (sparc_promote_prototypes,\n\tsparc_return_in_memory, sparc_pass_by_reference,\n\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n\tfunction_arg_record_value_2, function_arg_record_value_1,\n\tfunction_arg_record_value, function_arg_record_value,\n\tfunction_arg_padding, function_value): Likewise.\n\t* config/spu/spu-protos.h (spu_function_value): Likewise.\n\t* config/spu/spu.c (spu_pass_by_reference, spu_return_in_memory,\n\tspu_function_value): Likewise.\n\t* config/stormy16/stormy16-protos.h (xstormy16_function_value):\n\tLikewise.\n\t* config/stormy16/stormy16.c (xstormy16_return_in_memory,\n\txstormy16_function_value, TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES):\n\tLikewise.\n\t* config/v850/v850.c (v850_return_in_memory,\n\tv850_pass_by_reference, TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t* config/vax/vax.c (TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_return_in_msb,\n\txtensa_return_in_memory, TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES):\n\tLikewise.\n\t* explow.c (promote_mode, hard_function_value): Likewise.\n\t* expr.h (hard_function_value, promote_mode): Likewise.\n\t* function.c (aggregate_value_p): Likewise.\n\t* hooks.c (hook_bool_const_tree_true): New.\n\t* hooks.h (hook_bool_const_tree_true): New.\n\t* sdbout.c (SET_KNOWN_TYPE_TAG, plain_type_1): Constify.\n\t* target-def.h (TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n\tTARGET_RETURN_IN_MSB): Likewise.\n\t* target.h (promote_function_args, promote_function_return,\n\tpromote_prototypes, return_in_memory, return_in_msb,\n\tpass_by_reference, must_pass_in_stack, callee_copies,\n\tfunction_value): Likewise.\n\t* targhooks.c (default_return_in_memory,\n\thook_pass_by_reference_must_pass_in_stack,\n\thook_callee_copies_named,\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_false,\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true,\n\tdefault_function_value): Likewise. \n\t* targhooks.h (default_return_in_memory,\n\thook_pass_by_reference_must_pass_in_stack,\n\thook_callee_copies_named,\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_false,\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true,\n\tdefault_function_value): Likewise.\n\t* tree-ssa-structalias.c (const_equiv_class_label_t): New.\n\t(equiv_class_label_hash, equiv_class_label_eq): Constify.\n\t* tree-vectorizer.c (bb_in_loop_p): Likewise.\n\t* tree.c (needs_to_live_in_memory): Likewise.\n\t* tree.h (struct tree_type, needs_to_live_in_memory,\n\taggregate_value_p, must_pass_in_stack_var_size,\n\tmust_pass_in_stack_var_size_or_pad): Likewise.\n\t* vmsdbgout.c (write_debug_addr, write_debug_delta4,\n\twrite_debug_string, ASM_OUTPUT_DEBUG_STRING, write_rtnbeg,\n\tlookup_filename): Likewise.\n\nFrom-SVN: r127743", "tree": {"sha": "3a4f791f6f5c7a9f6ccccafa9e01b0c8516ede8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4f791f6f5c7a9f6ccccafa9e01b0c8516ede8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/586de2189808556ae88977242de6ef5cf6ea39fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586de2189808556ae88977242de6ef5cf6ea39fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586de2189808556ae88977242de6ef5cf6ea39fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586de2189808556ae88977242de6ef5cf6ea39fd/comments", "author": null, "committer": null, "parents": [{"sha": "1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1406ee9086b171a7189fe0c9758727ca5c8c5fe4"}], "stats": {"total": 1042, "additions": 632, "deletions": 410}, "files": [{"sha": "756ad1aa59215f142a56fce5149c0a769addb5f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1,3 +1,223 @@\n+2007-08-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* config/arc/arc-protos.h arc_select_cc_mode, gen_compare_reg):\n+\tWrap in RTX_CODE macro guard.\n+\t* config/arm/pe.c (arm_dllexport_p, arm_dllimport_p,\n+\tarm_dllexport_name_p, arm_dllimport_name_p, arm_mark_dllexport,\n+\tarm_mark_dllimport, arm_pe_encode_section_info,\n+\tarm_pe_unique_section): Use ISO-C function declarations.\n+\t* config/c4x/c4x-c.c (c4x_parse_pragma, c4x_pr_CODE_SECTION,\n+\tc4x_pr_DATA_SECTION, c4x_pr_FUNC_IS_PURE,\n+\tc4x_pr_FUNC_NEVER_RETURNS, c4x_pr_INTERRUPT, c4x_pr_ignored):\n+\tLikewise.\n+\t* config/iq2000/iq2000.h (ASM_OUTPUT_SKIP): Fix format warning.\n+\t* config/m68hc11/m68hc11.h (ASM_OUTPUT_EXTERNAL): Undef before\n+\tdefining.\n+\t* config/mips/mips.h (ASM_DECLARE_OBJECT_NAME): Fix format\n+\twarnings.\n+\t* config/mn10300/mn10300.h (OUTPUT_ADDR_CONST_EXTRA): Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_output_function_epilogue): Likewise.\n+\t(register_move_cost): Use ISO-C function declarations.\n+\t* config/pdp11/pdp11.h (PRINT_OPERAND): Fix format warnings.\n+\t* config/score/score-protos.h (score_declare_object): Add\n+\tATTRIBUTE_PRINTF_4.\n+\t* config/score/score.h (ASM_DECLARE_OBJECT_NAME): Fix format\n+\twarnings.\n+\t* final.c (profile_function): Avoid empty if-bodies.\n+\t\n+\t\n+\t* calls.c (must_pass_in_stack_var_size,\n+\tmust_pass_in_stack_var_size_or_pad): Constify.\n+\t* config/alpha/alpha-protos.h (function_value): Likewise.\n+\t* config/alpha/alpha.c (alpha_return_in_memory,\n+\talpha_pass_by_reference, function_value,\n+\tunicosmk_must_pass_in_stack, TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES):\n+\tLikewise.\n+\t* config/arc/arc.c (arc_return_in_memory, arc_pass_by_reference,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n+\tTARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t* config/arm/arm-protos.h (arm_return_in_memory,\n+\tarm_pad_arg_upward, arm_function_value): Likewise.\n+\t* config/arm/arm.c (arm_pass_by_reference,\n+\tarm_promote_prototypes, arm_return_in_msb, arm_must_pass_in_stack,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n+\tarm_function_value, arm_return_in_memory, arm_pad_arg_upward):\n+\tLikewise.\n+\t* config/arm/arm.h (ARM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* config/avr/avr-protos.h (avr_function_value): Likewise.\n+\t* config/avr/avr.c (avr_return_in_memory,\n+\tgas_output_limited_string, gas_output_ascii, avr_function_value,\n+\tavr_return_in_memory): Likewise.\n+\t* config/bfin/bfin-protos.h (bfin_return_in_memory): Likewise.\n+\t* config/bfin/bfin.c (bfin_pass_by_reference,\n+\tbfin_return_in_memory, TARGET_PROMOTE_PROTOTYPES,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN):\n+\tLikewise.\n+\t* config/cris/cris.c (cris_pass_by_reference,\n+\tTARGET_PROMOTE_FUNCTION_ARGS): Likewise.\n+\t* config/crx/crx.c (crx_return_in_memory): Likewise.\n+\t* config/darwin.c (function_base, machopic_function_base_name):\n+\tLikewise.\n+\t* config/fr30/fr30.c (fr30_must_pass_in_stack,\n+\tTARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t* config/frv/frv.c (frv_must_pass_in_stack): Likewise.\n+\t* config/h8300/h8300.c (h8300_return_in_memory): Likewise.\n+\t* config/i386/i386-protos.h (ix86_return_in_memory,\n+\tix86_sol10_return_in_memory): Likewise.\n+\t* config/i386/i386.c (ix86_function_value,\n+\tix86_function_sseregparm, ix86_must_pass_in_stack,\n+\ttype_natural_mode, classify_argument, examine_argument,\n+\tconstruct_container, ix86_pass_by_reference, function_value_32,\n+\tfunction_value_64, ix86_function_value_1, return_in_memory_32,\n+\treturn_in_memory_64, return_in_memory_ms_64,\n+\tix86_return_in_memory, ix86_sol10_return_in_memory,\n+\tTARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t* config/ia64/ia64-protos.h (ia64_function_value,\n+\tia64_hpux_function_arg_padding): Likewise.\n+\t* config/ia64/ia64.c (hfa_element_mode, ia64_return_in_memory,\n+\tia64_function_value, bundle_state_hash, bundle_state_eq_p,\n+\tia64_hpux_function_arg_padding): Likewise.\n+\t* config/iq2000/iq2000-protos.h (function_arg,\n+\tiq2000_function_value): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_return_in_memory,\n+\tiq2000_pass_by_reference, TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n+\tfunction_arg, iq2000_function_value): Likewise.\n+\t* config/m32c/m32c-protos.h (m32c_function_value,\n+\tm32c_promote_function_return): Likewise.\n+\t* config/m32c/m32c.c (m32c_pass_by_reference,\n+\tm32c_promote_prototypes, m32c_promote_function_return,\n+\tm32c_function_value): Likewise.\n+\t* config/m32r/m32r.c (m32r_return_in_memory,\n+\tm32r_pass_by_reference, TARGET_PROMOTE_PROTOTYPES,\n+\tm32r_in_small_data_p): Likewise.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_function_arg_padding):\n+\tLikewise.\n+\t* config/m68hc11/m68hc11.c (m68hc11_return_in_memory,\n+\tm68hc11_function_arg_padding): Likewise.\n+\t* config/m68k/m68k-protos.h (m68k_function_value): Likewise.\n+\t* config/m68k/m68k.c (TARGET_PROMOTE_PROTOTYPES,\n+\tm68k_function_value): Likewise.\n+\t* config/mcore/mcore-protos.h (mcore_num_arg_regs,\n+\tmcore_function_value): Likewise.\n+\t* config/mcore/mcore.c (handle_structs_in_regs,\n+\tmcore_return_in_memory, TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n+\tmcore_num_arg_regs, mcore_function_value): Likewise.\n+\t* config/mips/mips-protos.h (mips_pad_arg_upward,\n+\tmips_function_value): Likewise.\n+\t* config/mips/mips.c (mips_fpr_return_fields, mips_return_in_msb,\n+\tmips_return_in_memory, mips_pass_by_reference, mips_callee_copies,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n+\tTARGET_PROMOTE_PROTOTYPES, mips_pad_arg_upward,\n+\tmips_function_value): Likewise.\n+\t* config/mmix/mmix-protos.h (mmix_function_outgoing_value):\n+\tLikewise.\n+\t* config/mmix/mmix.c (mmix_pass_by_reference,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, mmix_function_outgoing_value,\n+\tmmix_encode_section_info): Likewise.\n+\t* config/mn10300/mn10300-protos.h (mn10300_function_value):\n+\tLikewise.\n+\t* config/mn10300/mn10300.c (mn10300_return_in_memory,\n+\tmn10300_pass_by_reference, TARGET_PROMOTE_PROTOTYPES,\n+\tmn10300_function_value): Likewise.\n+\t* config/mt/mt-protos.h (mt_function_value): Likewise.\n+\t* config/mt/mt.c (mt_pass_by_reference, mt_function_value,\n+\tmt_pass_in_stack, TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t* config/pa/pa-protos.h (function_arg_padding, function_value,\n+\tpa_return_in_memory): Likewise.\n+\t* config/pa/pa.c (pa_pass_by_reference,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n+\tfunction_arg_padding, function_value, pa_return_in_memory):\n+\tLikewise.\n+\t* config/pdp11/pdp11.c (pdp11_return_in_memory): Likewise.\n+\t* config/rs6000/rs6000-protos.h (rs6000_function_value,\n+\tfunction_arg_padding): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_return_in_memory,\n+\trs6000_darwin64_record_arg_recurse, rs6000_darwin64_record_arg,\n+\trs6000_pass_by_reference, rs6000_must_pass_in_stack,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n+\tfunction_arg_padding, altivec_expand_dst_builtin,\n+\taltivec_expand_builtin, rs6000_expand_builtin, spe_init_builtins,\n+\taltivec_init_builtins, rs6000_common_init_builtins,\n+\trs6000_function_value): Likewise.\n+\t* s390/s390-protos.h (s390_function_value): Likewise.\n+\t* config/s390/s390.c (s390_function_arg_size,\n+\ts390_pass_by_reference, s390_return_in_memory,\n+\ts390_function_value, TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t* config/score/score-protos.h (score_function_value): Likewise.\n+\t* config/score/score.c (score_arg_partial_bytes,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n+\tTARGET_PROMOTE_PROTOTYPES, score_return_in_memory,\n+\tscore_pass_by_reference, score_add_offset, score_function_value):\n+\tLikewise.\n+\t* config/sh/sh-protos.h (sh_attr_renesas_p,\n+\tsh_promote_prototypes): Likewise.\n+\t* config/sh/sh.c (sh_return_in_memory, sh_pass_by_reference,\n+\tsh_callee_copies, sh_promote_prototypes, shcompact_byref,\n+\tsh_attr_renesas_p): Likewise.\n+\t* config/sparc/sparc-protos.h (function_value,\n+\tfunction_arg_padding): Likewise.\n+\t* config/sparc/sparc.c (sparc_promote_prototypes,\n+\tsparc_return_in_memory, sparc_pass_by_reference,\n+\tTARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n+\tfunction_arg_record_value_2, function_arg_record_value_1,\n+\tfunction_arg_record_value, function_arg_record_value,\n+\tfunction_arg_padding, function_value): Likewise.\n+\t* config/spu/spu-protos.h (spu_function_value): Likewise.\n+\t* config/spu/spu.c (spu_pass_by_reference, spu_return_in_memory,\n+\tspu_function_value): Likewise.\n+\t* config/stormy16/stormy16-protos.h (xstormy16_function_value):\n+\tLikewise.\n+\t* config/stormy16/stormy16.c (xstormy16_return_in_memory,\n+\txstormy16_function_value, TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES):\n+\tLikewise.\n+\t* config/v850/v850.c (v850_return_in_memory,\n+\tv850_pass_by_reference, TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t* config/vax/vax.c (TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_return_in_msb,\n+\txtensa_return_in_memory, TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES):\n+\tLikewise.\n+\t* explow.c (promote_mode, hard_function_value): Likewise.\n+\t* expr.h (hard_function_value, promote_mode): Likewise.\n+\t* function.c (aggregate_value_p): Likewise.\n+\t* hooks.c (hook_bool_const_tree_true): New.\n+\t* hooks.h (hook_bool_const_tree_true): New.\n+\t* sdbout.c (SET_KNOWN_TYPE_TAG, plain_type_1): Constify.\n+\t* target-def.h (TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, TARGET_PROMOTE_PROTOTYPES,\n+\tTARGET_RETURN_IN_MSB): Likewise.\n+\t* target.h (promote_function_args, promote_function_return,\n+\tpromote_prototypes, return_in_memory, return_in_msb,\n+\tpass_by_reference, must_pass_in_stack, callee_copies,\n+\tfunction_value): Likewise.\n+\t* targhooks.c (default_return_in_memory,\n+\thook_pass_by_reference_must_pass_in_stack,\n+\thook_callee_copies_named,\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_false,\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true,\n+\tdefault_function_value): Likewise. \n+\t* targhooks.h (default_return_in_memory,\n+\thook_pass_by_reference_must_pass_in_stack,\n+\thook_callee_copies_named,\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_false,\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true,\n+\tdefault_function_value): Likewise.\n+\t* tree-ssa-structalias.c (const_equiv_class_label_t): New.\n+\t(equiv_class_label_hash, equiv_class_label_eq): Constify.\n+\t* tree-vectorizer.c (bb_in_loop_p): Likewise.\n+\t* tree.c (needs_to_live_in_memory): Likewise.\n+\t* tree.h (struct tree_type, needs_to_live_in_memory,\n+\taggregate_value_p, must_pass_in_stack_var_size,\n+\tmust_pass_in_stack_var_size_or_pad): Likewise.\n+\t* vmsdbgout.c (write_debug_addr, write_debug_delta4,\n+\twrite_debug_string, ASM_OUTPUT_DEBUG_STRING, write_rtnbeg,\n+\tlookup_filename): Likewise.\n+\n 2007-08-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/17390"}, {"sha": "657439a60eb6c44e492e7aa51eefcd54397e6927", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -4426,7 +4426,7 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \n bool\n must_pass_in_stack_var_size (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t     tree type)\n+\t\t\t     const_tree type)\n {\n   if (!type)\n     return false;\n@@ -4448,7 +4448,7 @@ must_pass_in_stack_var_size (enum machine_mode mode ATTRIBUTE_UNUSED,\n /* ??? Should be able to merge these two by examining BLOCK_REG_PADDING.  */\n \n bool\n-must_pass_in_stack_var_size_or_pad (enum machine_mode mode, tree type)\n+must_pass_in_stack_var_size_or_pad (enum machine_mode mode, const_tree type)\n {\n   if (!type)\n     return false;"}, {"sha": "df2ae6814d2b1c689db38e7639cc412684cdebdc", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -78,7 +78,7 @@ extern void alpha_initialize_trampoline (rtx, rtx, rtx, int, int, int);\n extern void alpha_va_start (tree, rtx);\n extern rtx alpha_va_arg (tree, tree);\n extern rtx function_arg (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n-extern rtx function_value (tree, tree, enum machine_mode);\n+extern rtx function_value (const_tree, const_tree, enum machine_mode);\n \n extern void alpha_start_function (FILE *, const char *, tree);\n extern void alpha_end_function (FILE *, const char *, tree);"}, {"sha": "4b4eb05cb6b8c3b27958cb64b517bd5bc6428e87", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -5646,7 +5646,7 @@ alpha_arg_partial_bytes (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n /* Return true if TYPE must be returned in memory, instead of in registers.  */\n \n static bool\n-alpha_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n+alpha_return_in_memory (const_tree type, const_tree fndecl ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = VOIDmode;\n   int size;\n@@ -5696,7 +5696,7 @@ alpha_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n static bool\n alpha_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \t\t\t enum machine_mode mode,\n-\t\t\t tree type ATTRIBUTE_UNUSED,\n+\t\t\t const_tree type ATTRIBUTE_UNUSED,\n \t\t\t bool named ATTRIBUTE_UNUSED)\n {\n   return mode == TFmode || mode == TCmode;\n@@ -5711,7 +5711,7 @@ alpha_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n    $f0 for floating-point functions.  */\n \n rtx\n-function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n+function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n \t\tenum machine_mode mode)\n {\n   unsigned int regnum, dummy;\n@@ -9751,7 +9751,7 @@ alpha_use_linkage (rtx linkage ATTRIBUTE_UNUSED,\n    registers.  */\n \n static bool\n-unicosmk_must_pass_in_stack (enum machine_mode mode, tree type)\n+unicosmk_must_pass_in_stack (enum machine_mode mode, const_tree type)\n {\n   if (type == NULL)\n     return false;\n@@ -10664,11 +10664,11 @@ alpha_init_libfuncs (void)\n #define TARGET_MACHINE_DEPENDENT_REORG alpha_reorg\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_false\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY alpha_return_in_memory\n #undef TARGET_PASS_BY_REFERENCE"}, {"sha": "9eadf354b21d1b07589e29c11173f0996117dfc6", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -19,10 +19,12 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void arc_va_start (tree, rtx);\n \n+#ifdef RTX_CODE\n extern enum machine_mode arc_select_cc_mode (enum rtx_code, rtx, rtx);\n \n /* Define the function that build the compare insn for scc and bcc.  */\n extern struct rtx_def *gen_compare_reg (enum rtx_code, rtx, rtx);\n+#endif\n \n /* Declarations for various fns used in the .md file.  */\n extern const char *output_shift (rtx *);"}, {"sha": "a1e04af8c8f89b909ec72836cca6b6146c643f2b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -94,9 +94,9 @@ static void arc_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n static bool arc_rtx_costs (rtx, int, int, int *);\n static int arc_address_cost (rtx);\n static void arc_external_libcall (rtx);\n-static bool arc_return_in_memory (tree, tree);\n+static bool arc_return_in_memory (const_tree, const_tree);\n static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t   tree, bool);\n+\t\t\t\t   const_tree, bool);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -128,11 +128,11 @@ static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_ADDRESS_COST arc_address_cost\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY arc_return_in_memory\n@@ -2316,7 +2316,7 @@ arc_external_libcall (rtx fun ATTRIBUTE_UNUSED)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-arc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+arc_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   if (AGGREGATE_TYPE_P (type))\n     return true;\n@@ -2332,7 +2332,7 @@ arc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \n static bool\n arc_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n-\t\t       enum machine_mode mode, tree type,\n+\t\t       enum machine_mode mode, const_tree type,\n \t\t       bool named ATTRIBUTE_UNUSED)\n {\n   unsigned HOST_WIDE_INT size;"}, {"sha": "775cd92e8658a60ff0d4994db88b59bd7a8a9b54", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -43,7 +43,7 @@ extern void arm_output_fn_unwind (FILE *, bool);\n   \n \n #ifdef TREE_CODE\n-extern int arm_return_in_memory (tree);\n+extern int arm_return_in_memory (const_tree);\n #endif\n #ifdef RTX_CODE\n extern bool arm_vector_mode_supported_p (enum machine_mode);\n@@ -156,10 +156,10 @@ extern bool arm_output_addr_const_extra (FILE *, rtx);\n #if defined TREE_CODE\n extern rtx arm_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n-extern bool arm_pad_arg_upward (enum machine_mode, tree);\n+extern bool arm_pad_arg_upward (enum machine_mode, const_tree);\n extern bool arm_pad_reg_upward (enum machine_mode, tree, int);\n extern bool arm_needs_doubleword_align (enum machine_mode, tree);\n-extern rtx arm_function_value(tree, tree);\n+extern rtx arm_function_value(const_tree, const_tree);\n #endif\n extern int arm_apply_result_size (void);\n "}, {"sha": "b466dafe71df302e9cf9a3dd612b29d42a00367f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -169,12 +169,12 @@ static void aof_asm_init_sections (void);\n static void arm_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int *, int);\n static bool arm_pass_by_reference (CUMULATIVE_ARGS *,\n-\t\t\t\t   enum machine_mode, tree, bool);\n-static bool arm_promote_prototypes (tree);\n+\t\t\t\t   enum machine_mode, const_tree, bool);\n+static bool arm_promote_prototypes (const_tree);\n static bool arm_default_short_enums (void);\n static bool arm_align_anon_bitfield (void);\n-static bool arm_return_in_msb (tree);\n-static bool arm_must_pass_in_stack (enum machine_mode, tree);\n+static bool arm_return_in_msb (const_tree);\n+static bool arm_must_pass_in_stack (enum machine_mode, const_tree);\n #ifdef TARGET_UNWIND_INFO\n static void arm_unwind_emit (FILE *, rtx);\n static bool arm_output_ttype (rtx);\n@@ -299,9 +299,9 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n #define TARGET_INIT_LIBFUNCS arm_init_libfuncs\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES arm_promote_prototypes\n #undef TARGET_PASS_BY_REFERENCE\n@@ -2702,7 +2702,7 @@ arm_canonicalize_comparison (enum rtx_code code, enum machine_mode mode,\n /* Define how to find the value returned by a function.  */\n \n rtx\n-arm_function_value(tree type, tree func ATTRIBUTE_UNUSED)\n+arm_function_value(const_tree type, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   int unsignedp ATTRIBUTE_UNUSED;\n@@ -2755,7 +2755,7 @@ arm_apply_result_size (void)\n    or in a register (false).  This is called by the macro\n    RETURN_IN_MEMORY.  */\n int\n-arm_return_in_memory (tree type)\n+arm_return_in_memory (const_tree type)\n {\n   HOST_WIDE_INT size;\n \n@@ -3010,7 +3010,7 @@ arm_arg_partial_bytes (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n static bool\n arm_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t       tree type, bool named ATTRIBUTE_UNUSED)\n+\t\t       const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   return type && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST;\n }\n@@ -6523,7 +6523,7 @@ coproc_secondary_reload_class (enum machine_mode mode, rtx x, bool wb)\n    register.  */\n \n static bool\n-arm_return_in_msb (tree valtype)\n+arm_return_in_msb (const_tree valtype)\n {\n   return (TARGET_AAPCS_BASED\n           && BYTES_BIG_ENDIAN\n@@ -8179,7 +8179,7 @@ arm_reload_out_hi (rtx *operands)\n    (padded to the size of a word) should be passed in a register.  */\n \n static bool\n-arm_must_pass_in_stack (enum machine_mode mode, tree type)\n+arm_must_pass_in_stack (enum machine_mode mode, const_tree type)\n {\n   if (TARGET_AAPCS_BASED)\n     return must_pass_in_stack_var_size (mode, type);\n@@ -8195,7 +8195,7 @@ arm_must_pass_in_stack (enum machine_mode mode, tree type)\n    aggregate types are placed in the lowest memory address.  */\n \n bool\n-arm_pad_arg_upward (enum machine_mode mode, tree type)\n+arm_pad_arg_upward (enum machine_mode mode, const_tree type)\n {\n   if (!TARGET_AAPCS_BASED)\n     return DEFAULT_FUNCTION_ARG_PADDING(mode, type) == upward;\n@@ -18177,7 +18177,7 @@ arm_no_early_mul_dep (rtx producer, rtx consumer)\n    using APCS or ATPCS.  */\n \n static bool\n-arm_promote_prototypes (tree t ATTRIBUTE_UNUSED)\n+arm_promote_prototypes (const_tree t ATTRIBUTE_UNUSED)\n {\n     return !TARGET_AAPCS_BASED;\n }"}, {"sha": "ac97a1fabf50873120ca4d4083719c811e646853", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -2401,7 +2401,7 @@ extern int making_const_table;\n            fprintf (STREAM, \"\\t.thumb\\n\\t.thumb_func\\n\") ;\t\\\n         }\t\t\t\t\t\t\\\n       if (TARGET_POKE_FUNCTION_NAME)\t\t\t\\\n-        arm_poke_function_name (STREAM, (char *) NAME);\t\\\n+        arm_poke_function_name (STREAM, (const char *) NAME);\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "90bc729938651da0576ac3bc31a8e7fe45d03a47", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -39,8 +39,7 @@ extern int current_function_anonymous_args;\n tree current_class_type; /* FIXME */\n \n int\n-arm_dllexport_p (decl)\n-     tree decl;\n+arm_dllexport_p (tree decl)\n {\n   tree exp;\n \n@@ -57,8 +56,7 @@ arm_dllexport_p (decl)\n /* Return nonzero if DECL is a dllimport'd object.  */\n \n int\n-arm_dllimport_p (decl)\n-     tree decl;\n+arm_dllimport_p (tree decl)\n {\n   tree imp;\n \n@@ -79,17 +77,15 @@ arm_dllimport_p (decl)\n /* Return nonzero if SYMBOL is marked as being dllexport'd.  */\n \n int\n-arm_dllexport_name_p (symbol)\n-     const char * symbol;\n+arm_dllexport_name_p (const char *symbol)\n {\n   return symbol[0] == ARM_PE_FLAG_CHAR && symbol[1] == 'e' && symbol[2] == '.';\n }\n \n /* Return nonzero if SYMBOL is marked as being dllimport'd.  */\n \n int\n-arm_dllimport_name_p (symbol)\n-     const char * symbol;\n+arm_dllimport_name_p (const char *symbol)\n {\n   return symbol[0] == ARM_PE_FLAG_CHAR && symbol[1] == 'i' && symbol[2] == '.';\n }\n@@ -98,8 +94,7 @@ arm_dllimport_name_p (symbol)\n    Note that we override the previous setting (e.g.: dllimport).  */\n \n void\n-arm_mark_dllexport (decl)\n-     tree decl;\n+arm_mark_dllexport (tree decl)\n {\n   const char * oldname;\n   char * newname;\n@@ -134,8 +129,7 @@ arm_mark_dllexport (decl)\n /* Mark a DECL as being dllimport'd.  */\n \n void\n-arm_mark_dllimport (decl)\n-     tree decl;\n+arm_mark_dllimport (tree decl)\n {\n   const char * oldname;\n   char * newname;\n@@ -201,10 +195,7 @@ arm_mark_dllimport (decl)\n }\n \n void\n-arm_pe_encode_section_info (decl, rtl, first)\n-     tree decl;\n-     rtx rtl;\n-     int first ATTRIBUTE_UNUSED;\n+arm_pe_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n {\n   /* This bit is copied from arm_encode_section_info.  */\n   if (optimize > 0 && TREE_CONSTANT (decl))\n@@ -239,9 +230,7 @@ arm_pe_encode_section_info (decl, rtl, first)\n }\n \n void\n-arm_pe_unique_section (decl, reloc)\n-     tree decl;\n-     int reloc;\n+arm_pe_unique_section (tree decl, int reloc)\n {\n   int len;\n   const char * name;"}, {"sha": "7d04b7aaa91d7a3d8d5b2c18f891d357b4bd1451", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -43,7 +43,7 @@ extern void asm_output_external (FILE *file, tree decl, char *name);\n extern int avr_progmem_p (tree decl, tree attributes);\n \n #ifdef RTX_CODE /* inside TREE_CODE */\n-extern rtx avr_function_value (tree type, tree func);\n+extern rtx avr_function_value (const_tree type, const_tree func);\n extern void init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t\t\t\t  rtx libname, tree fndecl);\n extern rtx function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,"}, {"sha": "1382479369fed6c98461628f4ded7d2b122b21a6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -78,7 +78,7 @@ static void avr_asm_out_dtor (rtx, int);\n static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code);\n static bool avr_rtx_costs (rtx, int, int, int *);\n static int avr_address_cost (rtx);\n-static bool avr_return_in_memory (tree, tree);\n+static bool avr_return_in_memory (const_tree, const_tree);\n static struct machine_function * avr_init_machine_status (void);\n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -4475,7 +4475,7 @@ avr_assemble_integer (rtx x, unsigned int size, int aligned_p)\n void\n gas_output_limited_string(FILE *file, const char *str)\n {\n-  const unsigned char *_limited_str = (unsigned char *) str;\n+  const unsigned char *_limited_str = (const unsigned char *) str;\n   unsigned ch;\n   fprintf (file, \"%s\\\"\", STRING_ASM_OP);\n   for (; (ch = *_limited_str); _limited_str++)\n@@ -4528,7 +4528,7 @@ gas_output_ascii(FILE *file, const char *str, size_t length)\n \t      fprintf (file, \"\\\"\\n\");\n \t      bytes_in_chunk = 0;\n \t    }\n-\t  gas_output_limited_string (file, (char*)_ascii_bytes);\n+\t  gas_output_limited_string (file, (const char*)_ascii_bytes);\n \t  _ascii_bytes = p;\n \t}\n       else\n@@ -5615,7 +5615,7 @@ avr_libcall_value (enum machine_mode mode)\n    function returns a value of data type VALTYPE.  */\n \n rtx\n-avr_function_value (tree type, tree func ATTRIBUTE_UNUSED)\n+avr_function_value (const_tree type, const_tree func ATTRIBUTE_UNUSED)\n {\n   unsigned int offs;\n   \n@@ -5935,7 +5935,7 @@ avr_asm_out_dtor (rtx symbol, int priority)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-avr_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+avr_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   if (TYPE_MODE (type) == BLKmode)\n     {"}, {"sha": "ad5e7b4b93066910ca04b079fe44267261ae125b", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -86,7 +86,7 @@ extern void asm_conditional_branch (rtx, rtx *, int, int);\n extern rtx bfin_gen_compare (rtx, Mmode);\n \n extern int bfin_local_alignment (tree, int);\n-extern int bfin_return_in_memory (tree);\n+extern int bfin_return_in_memory (const_tree);\n extern void initialize_trampoline (rtx, rtx, rtx);\n extern bool bfin_legitimate_address_p (Mmode, rtx, int);\n extern rtx bfin_va_arg (tree, tree);"}, {"sha": "6b178ee2c5917d2a372bd9967c44dd3849dfe7c9", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1608,7 +1608,7 @@ bfin_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n static bool\n bfin_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\ttree type, bool named ATTRIBUTE_UNUSED)\n+\t\t\tconst_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   return type && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST;\n }\n@@ -1618,7 +1618,7 @@ bfin_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n    RETURN_IN_MEMORY.  */\n \n int\n-bfin_return_in_memory (tree type)\n+bfin_return_in_memory (const_tree type)\n {\n   int size = int_size_in_bytes (type);\n   return size > 2 * UNITS_PER_WORD || size == -1;\n@@ -5374,11 +5374,11 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #define TARGET_SCHED_ISSUE_RATE bfin_issue_rate\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n \n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES bfin_arg_partial_bytes"}, {"sha": "3e132b5d9fd1540cb78a479f82687212c0ae2050", "filename": "gcc/config/c4x/c4x-c.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -60,10 +60,7 @@ static int c4x_parse_pragma (const char *, tree *, tree *);\n   do { warning (OPT_Wpragmas, gmsgid, arg); return -1; } while (0)\n \n static int\n-c4x_parse_pragma (name, func, sect)\n-     const char *name;\n-     tree *func;\n-     tree *sect;\n+c4x_parse_pragma (const char *name, tree *func, tree *sect)\n {\n   tree f, s, x;\n \n@@ -93,8 +90,7 @@ c4x_parse_pragma (name, func, sect)\n }\n \n void\n-c4x_pr_CODE_SECTION (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+c4x_pr_CODE_SECTION (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   tree func, sect;\n \n@@ -106,8 +102,7 @@ c4x_pr_CODE_SECTION (pfile)\n }\n \n void\n-c4x_pr_DATA_SECTION (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+c4x_pr_DATA_SECTION (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   tree func, sect;\n \n@@ -119,8 +114,7 @@ c4x_pr_DATA_SECTION (pfile)\n }\n \n void\n-c4x_pr_FUNC_IS_PURE (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+c4x_pr_FUNC_IS_PURE (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   tree func;\n \n@@ -130,8 +124,7 @@ c4x_pr_FUNC_IS_PURE (pfile)\n }\n \n void\n-c4x_pr_FUNC_NEVER_RETURNS (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+c4x_pr_FUNC_NEVER_RETURNS (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   tree func;\n \n@@ -141,8 +134,7 @@ c4x_pr_FUNC_NEVER_RETURNS (pfile)\n }\n \n void\n-c4x_pr_INTERRUPT (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+c4x_pr_INTERRUPT (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   tree func;\n \n@@ -154,7 +146,6 @@ c4x_pr_INTERRUPT (pfile)\n /* Used for FUNC_CANNOT_INLINE, FUNC_EXT_CALLED, FUNC_IS_SYSTEM,\n    FUNC_NO_GLOBAL_ASG, and FUNC_NO_IND_ASG.  */\n void\n-c4x_pr_ignored (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+c4x_pr_ignored (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n }"}, {"sha": "02c52b02394080f9704a4b9347817a39ff1d29e9", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -119,7 +119,7 @@ static void cris_init_libfuncs (void);\n static bool cris_rtx_costs (rtx, int, int, int *);\n static int cris_address_cost (rtx);\n static bool cris_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t    tree, bool);\n+\t\t\t\t    const_tree, bool);\n static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static tree cris_md_asm_clobbers (tree, tree, tree);\n@@ -169,7 +169,7 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #define TARGET_ADDRESS_COST cris_address_cost\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX cris_struct_value_rtx\n #undef TARGET_SETUP_INCOMING_VARARGS\n@@ -3402,7 +3402,7 @@ cris_setup_incoming_varargs (CUMULATIVE_ARGS *ca,\n \n static bool\n cris_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode, tree type,\n+\t\t\tenum machine_mode mode, const_tree type,\n \t\t\tbool named ATTRIBUTE_UNUSED)\n {\n   return (targetm.calls.must_pass_in_stack (mode, type)"}, {"sha": "5be938bc06d736969a8d3448f41fb80c38429324", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -135,7 +135,7 @@ rtx crx_compare_op1 = NULL_RTX;\n static bool crx_fixed_condition_code_regs (unsigned int *, unsigned int *);\n static rtx crx_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n \t\t\t\t int incoming ATTRIBUTE_UNUSED);\n-static bool crx_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED);\n+static bool crx_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED);\n static int crx_address_cost (rtx);\n \n /*****************************************************************************/\n@@ -204,7 +204,7 @@ crx_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n /* Implements hook TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-crx_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+crx_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   if (TYPE_MODE (type) == BLKmode)\n     {"}, {"sha": "1996624f22e5ca9aba2a960d16a301fe792b5594", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -267,7 +267,7 @@ machopic_define_symbol (rtx mem)\n   SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_DEFINED;\n }\n \n-static GTY(()) char * function_base;\n+static GTY(()) const char * function_base;\n \n const char *\n machopic_function_base_name (void)\n@@ -276,8 +276,7 @@ machopic_function_base_name (void)\n   gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n \n   if (function_base == NULL)\n-    function_base =\n-      (char *) ggc_alloc_string (\"<pic base>\", sizeof (\"<pic base>\"));\n+    function_base = ggc_alloc_string (\"<pic base>\", sizeof (\"<pic base>\"));\n \n   current_function_uses_pic_offset_table = 1;\n "}, {"sha": "7856f879090d8d5b740ca66096e09e27f68b2c47", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -122,7 +122,7 @@ static struct fr30_frame_info \tzero_frame_info;\n \n static void fr30_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n-static bool fr30_must_pass_in_stack (enum machine_mode, tree);\n+static bool fr30_must_pass_in_stack (enum machine_mode, const_tree);\n static int fr30_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n \n@@ -153,7 +153,7 @@ static int fr30_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_ASM_ALIGNED_SI_OP \"\\t.word\\t\"\n \n #undef  TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef  TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE hook_pass_by_reference_must_pass_in_stack\n #undef  TARGET_ARG_PARTIAL_BYTES\n@@ -669,7 +669,7 @@ fr30_print_operand (FILE *file, rtx x, int code)\n    in registers.  */\n \n static bool\n-fr30_must_pass_in_stack (enum machine_mode mode, tree type)\n+fr30_must_pass_in_stack (enum machine_mode mode, const_tree type)\n {\n   if (mode == BLKmode)\n     return true;"}, {"sha": "92674bba8e1dfdd539674ab0b63f4da4b0d75652", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -375,7 +375,7 @@ static void frv_output_const_unspec\t\t(FILE *,\n \t\t\t\t\t\t const struct frv_unspec *);\n static bool frv_function_ok_for_sibcall\t\t(tree, tree);\n static rtx frv_struct_value_rtx\t\t\t(tree, int);\n-static bool frv_must_pass_in_stack (enum machine_mode mode, tree type);\n+static bool frv_must_pass_in_stack (enum machine_mode mode, const_tree type);\n static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n@@ -3114,7 +3114,7 @@ frv_init_cumulative_args (CUMULATIVE_ARGS *cum,\n    in registers.  */\n \n static bool\n-frv_must_pass_in_stack (enum machine_mode mode, tree type)\n+frv_must_pass_in_stack (enum machine_mode mode, const_tree type)\n {\n   if (mode == BLKmode)\n     return true;"}, {"sha": "96b6311ce7cb34414bd99ca3f81e59ea23ff9c17", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -5706,7 +5706,7 @@ h8300_init_libfuncs (void)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-h8300_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+h8300_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return (TYPE_MODE (type) == BLKmode\n \t  || GET_MODE_SIZE (TYPE_MODE (type)) > (TARGET_H8300 ? 4 : 8));"}, {"sha": "76c8f84a94b5f8a351eed105f7a355a6b42e04c4", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -133,8 +133,8 @@ extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_value_regno_p (int);\n extern bool ix86_function_arg_regno_p (int);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n-extern int ix86_return_in_memory (tree);\n-extern int ix86_sol10_return_in_memory (tree);\n+extern int ix86_return_in_memory (const_tree);\n+extern int ix86_sol10_return_in_memory (const_tree);\n extern void ix86_va_start (tree, rtx);\n extern rtx ix86_va_arg (tree, tree);\n "}, {"sha": "9fcceef1273a0e69e8e2db85b9a029b1f5e5b7ab", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1573,7 +1573,7 @@ static bool ext_80387_constants_init = 0;\n \n \f\n static struct machine_function * ix86_init_machine_status (void);\n-static rtx ix86_function_value (tree, tree, bool);\n+static rtx ix86_function_value (const_tree, const_tree, bool);\n static int ix86_function_regparm (tree, tree);\n static void ix86_compute_frame_layout (struct ix86_frame *);\n static bool ix86_expand_vector_init_one_nonzero (bool, enum machine_mode,\n@@ -3011,7 +3011,7 @@ ix86_function_regparm (tree type, tree decl)\n    indirectly or considering a libcall.  Otherwise return 0.  */\n \n static int\n-ix86_function_sseregparm (tree type, tree decl)\n+ix86_function_sseregparm (const_tree type, const_tree decl)\n {\n   gcc_assert (!TARGET_64BIT);\n \n@@ -3038,7 +3038,8 @@ ix86_function_sseregparm (tree type, tree decl)\n      (and DFmode for SSE2) arguments in SSE registers.  */\n   if (decl && TARGET_SSE_MATH && flag_unit_at_a_time && !profile_flag)\n     {\n-      struct cgraph_local_info *i = cgraph_local_info (decl);\n+      /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n+      struct cgraph_local_info *i = cgraph_local_info ((tree)CONST_CAST(decl));\n       if (i && i->local)\n \treturn TARGET_SSE2 ? 2 : 1;\n     }\n@@ -3182,7 +3183,7 @@ ix86_function_arg_regno_p (int regno)\n /* Return if we do not know how to pass TYPE solely in registers.  */\n \n static bool\n-ix86_must_pass_in_stack (enum machine_mode mode, tree type)\n+ix86_must_pass_in_stack (enum machine_mode mode, const_tree type)\n {\n   if (must_pass_in_stack_var_size_or_pad (mode, type))\n     return true;\n@@ -3263,7 +3264,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n    the middle-end decides to do with these vector types.  */\n \n static enum machine_mode\n-type_natural_mode (tree type)\n+type_natural_mode (const_tree type)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n \n@@ -3377,7 +3378,7 @@ merge_classes (enum x86_64_reg_class class1, enum x86_64_reg_class class2)\n */\n \n static int\n-classify_argument (enum machine_mode mode, tree type,\n+classify_argument (enum machine_mode mode, const_tree type,\n \t\t   enum x86_64_reg_class classes[MAX_CLASSES], int bit_offset)\n {\n   HOST_WIDE_INT bytes =\n@@ -3649,7 +3650,7 @@ classify_argument (enum machine_mode mode, tree type,\n /* Examine the argument and return set number of register required in each\n    class.  Return 0 iff parameter should be passed in memory.  */\n static int\n-examine_argument (enum machine_mode mode, tree type, int in_return,\n+examine_argument (enum machine_mode mode, const_tree type, int in_return,\n \t\t  int *int_nregs, int *sse_nregs)\n {\n   enum x86_64_reg_class regclass[MAX_CLASSES];\n@@ -3692,7 +3693,7 @@ examine_argument (enum machine_mode mode, tree type, int in_return,\n \n static rtx\n construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n-\t\t     tree type, int in_return, int nintregs, int nsseregs,\n+\t\t     const_tree type, int in_return, int nintregs, int nsseregs,\n \t\t     const int *intreg, int sse_regno)\n {\n   /* The following variables hold the static issued_error state.  */\n@@ -4191,7 +4192,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode omode,\n static bool\n ix86_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\ttree type, bool named ATTRIBUTE_UNUSED)\n+\t\t\tconst_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   if (TARGET_64BIT_MS_ABI)\n     {\n@@ -4342,7 +4343,7 @@ ix86_function_value_regno_p (int regno)\n \n static rtx\n function_value_32 (enum machine_mode orig_mode, enum machine_mode mode,\n-\t\t   tree fntype, tree fn)\n+\t\t   const_tree fntype, const_tree fn)\n {\n   unsigned int regno;\n \n@@ -4381,7 +4382,7 @@ function_value_32 (enum machine_mode orig_mode, enum machine_mode mode,\n \n static rtx\n function_value_64 (enum machine_mode orig_mode, enum machine_mode mode,\n-\t\t   tree valtype)\n+\t\t   const_tree valtype)\n {\n   rtx ret;\n \n@@ -4438,10 +4439,10 @@ function_value_ms_64 (enum machine_mode orig_mode, enum machine_mode mode)\n }\n \n static rtx\n-ix86_function_value_1 (tree valtype, tree fntype_or_decl,\n+ix86_function_value_1 (const_tree valtype, const_tree fntype_or_decl,\n \t\t       enum machine_mode orig_mode, enum machine_mode mode)\n {\n-  tree fn, fntype;\n+  const_tree fn, fntype;\n \n   fn = NULL_TREE;\n   if (fntype_or_decl && DECL_P (fntype_or_decl))\n@@ -4457,7 +4458,7 @@ ix86_function_value_1 (tree valtype, tree fntype_or_decl,\n }\n \n static rtx\n-ix86_function_value (tree valtype, tree fntype_or_decl,\n+ix86_function_value (const_tree valtype, const_tree fntype_or_decl,\n \t\t     bool outgoing ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode, orig_mode;\n@@ -4476,7 +4477,7 @@ ix86_libcall_value (enum machine_mode mode)\n /* Return true iff type is returned in memory.  */\n \n static int\n-return_in_memory_32 (tree type, enum machine_mode mode)\n+return_in_memory_32 (const_tree type, enum machine_mode mode)\n {\n   HOST_WIDE_INT size;\n \n@@ -4516,14 +4517,14 @@ return_in_memory_32 (tree type, enum machine_mode mode)\n }\n \n static int\n-return_in_memory_64 (tree type, enum machine_mode mode)\n+return_in_memory_64 (const_tree type, enum machine_mode mode)\n {\n   int needed_intregs, needed_sseregs;\n   return !examine_argument (mode, type, 1, &needed_intregs, &needed_sseregs);\n }\n \n static int\n-return_in_memory_ms_64 (tree type, enum machine_mode mode)\n+return_in_memory_ms_64 (const_tree type, enum machine_mode mode)\n {\n   HOST_WIDE_INT size = int_size_in_bytes (type);\n \n@@ -4536,9 +4537,9 @@ return_in_memory_ms_64 (tree type, enum machine_mode mode)\n }\n \n int\n-ix86_return_in_memory (tree type)\n+ix86_return_in_memory (const_tree type)\n {\n-  enum machine_mode mode = type_natural_mode (type);\n+  const enum machine_mode mode = type_natural_mode (type);\n \n   if (TARGET_64BIT_MS_ABI)\n     return return_in_memory_ms_64 (type, mode);\n@@ -4554,7 +4555,7 @@ ix86_return_in_memory (tree type)\n    are returned in memory, rather than in MMX registers.  */\n \n int \n-ix86_sol10_return_in_memory (tree type)\n+ix86_sol10_return_in_memory (const_tree type)\n {\n   int size;\n   enum machine_mode mode = type_natural_mode (type);\n@@ -23633,7 +23634,7 @@ static const struct attribute_spec ix86_attribute_table[] =\n #define TARGET_MD_ASM_CLOBBERS ix86_md_asm_clobbers\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX ix86_struct_value_rtx\n #undef TARGET_SETUP_INCOMING_VARARGS"}, {"sha": "e3b78641eb8d5103fdef1c5268a4f88091d6c71d", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -77,7 +77,7 @@ extern rtx ia64_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t      tree, int, int);\n extern rtx ia64_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern rtx ia64_va_arg (tree, tree);\n-extern rtx ia64_function_value (tree, tree);\n+extern rtx ia64_function_value (const_tree, const_tree);\n #endif /* RTX_CODE */\n \n extern void ia64_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n@@ -100,7 +100,7 @@ extern void ia64_split_return_addr_rtx (rtx);\n \n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction'.  */\n-extern enum direction ia64_hpux_function_arg_padding (enum machine_mode, tree);\n+extern enum direction ia64_hpux_function_arg_padding (enum machine_mode, const_tree);\n #endif /* ARGS_SIZE_RTX */\n \n extern void ia64_hpux_handle_builtin_pragma (struct cpp_reader *);"}, {"sha": "14b4689f8c8dbbcafdb30016eeeb5a134a6bef25", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -195,13 +195,13 @@ static rtx gen_movdi_x (rtx, rtx, rtx);\n static rtx gen_fr_spill_x (rtx, rtx, rtx);\n static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n-static enum machine_mode hfa_element_mode (tree, bool);\n+static enum machine_mode hfa_element_mode (const_tree, bool);\n static void ia64_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static int ia64_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static bool ia64_function_ok_for_sibcall (tree, tree);\n-static bool ia64_return_in_memory (tree, tree);\n+static bool ia64_return_in_memory (const_tree, const_tree);\n static bool ia64_rtx_costs (rtx, int, int, int *);\n static void fix_range (const char *);\n static bool ia64_handle_option (size_t, const char *, int);\n@@ -3870,7 +3870,7 @@ ia64_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    aggregates are excluded because our parallels crash the middle-end.  */\n \n static enum machine_mode\n-hfa_element_mode (tree type, bool nested)\n+hfa_element_mode (const_tree type, bool nested)\n {\n   enum machine_mode element_mode = VOIDmode;\n   enum machine_mode mode;\n@@ -4346,7 +4346,7 @@ ia64_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n    in a register.  */\n \n static bool\n-ia64_return_in_memory (tree valtype, tree fntype ATTRIBUTE_UNUSED)\n+ia64_return_in_memory (const_tree valtype, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   enum machine_mode hfa_mode;\n@@ -4382,7 +4382,7 @@ ia64_return_in_memory (tree valtype, tree fntype ATTRIBUTE_UNUSED)\n /* Return rtx for register that holds the function return value.  */\n \n rtx\n-ia64_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+ia64_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   enum machine_mode hfa_mode;\n@@ -7376,7 +7376,8 @@ static htab_t bundle_state_table;\n static unsigned\n bundle_state_hash (const void *bundle_state)\n {\n-  const struct bundle_state *state = (struct bundle_state *) bundle_state;\n+  const struct bundle_state *const state\n+    = (const struct bundle_state *) bundle_state;\n   unsigned result, i;\n \n   for (result = i = 0; i < dfa_state_size; i++)\n@@ -7390,8 +7391,10 @@ bundle_state_hash (const void *bundle_state)\n static int\n bundle_state_eq_p (const void *bundle_state_1, const void *bundle_state_2)\n {\n-  const struct bundle_state * state1 = (struct bundle_state *) bundle_state_1;\n-  const struct bundle_state * state2 = (struct bundle_state *) bundle_state_2;\n+  const struct bundle_state *const state1\n+    = (const struct bundle_state *) bundle_state_1;\n+  const struct bundle_state *const state2\n+    = (const struct bundle_state *) bundle_state_2;\n \n   return (state1->insn_num == state2->insn_num\n \t  && memcmp (state1->dfa_state, state2->dfa_state,\n@@ -9235,7 +9238,7 @@ ia64_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n    most significant bits of the stack slot.  */\n \n enum direction\n-ia64_hpux_function_arg_padding (enum machine_mode mode, tree type)\n+ia64_hpux_function_arg_padding (enum machine_mode mode, const_tree type)\n {\n    /* Exception to normal case for structures/unions/etc.  */\n "}, {"sha": "9b6837ef9753ba32c9052a370506480732678a35", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -47,9 +47,9 @@ extern void             gen_conditional_branch (rtx *, enum rtx_code);\n #ifdef TREE_CODE\n extern void             init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\n extern void             function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n-extern struct rtx_def * function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n+extern struct rtx_def * function_arg (CUMULATIVE_ARGS *, enum machine_mode, const_tree, int);\n extern void             iq2000_va_start (tree, rtx);\n-extern rtx              iq2000_function_value (tree, tree);\n+extern rtx              iq2000_function_value (const_tree, const_tree);\n #endif\n \n #endif /* ! GCC_IQ2000_PROTOS_H */"}, {"sha": "782aa72cbb1ba9e06f364fff0444a6b52019c2de", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -157,16 +157,15 @@ static section *iq2000_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t   unsigned HOST_WIDE_INT);\n static void iq2000_init_builtins      (void);\n static rtx  iq2000_expand_builtin     (tree, rtx, rtx, enum machine_mode, int);\n-static bool iq2000_return_in_memory   (tree, tree);\n+static bool iq2000_return_in_memory   (const_tree, const_tree);\n static void iq2000_setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t\t   enum machine_mode, tree, int *,\n \t\t\t\t\t   int);\n static bool iq2000_rtx_costs          (rtx, int, int, int *);\n static int  iq2000_address_cost       (rtx);\n static section *iq2000_select_section (tree, int, unsigned HOST_WIDE_INT);\n-static bool iq2000_return_in_memory   (tree, tree);\n static bool iq2000_pass_by_reference  (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t       tree, bool);\n+\t\t\t\t       const_tree, bool);\n static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, bool);\n \n@@ -191,11 +190,11 @@ static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_HAVE_SWITCHABLE_BSS_SECTIONS false\n \n #undef  TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_const_tree_true\n #undef  TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_const_tree_true\n #undef  TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES\thook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES\thook_bool_const_tree_true\n \n #undef  TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY\t\tiq2000_return_in_memory\n@@ -1184,7 +1183,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n    and type TYPE in CUM, or 0 if the argument is to be passed on the stack.  */\n \n struct rtx_def *\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n+function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, const_tree type,\n \t      int named)\n {\n   rtx ret;\n@@ -1202,7 +1201,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t       \"function_arg( {gp reg found = %d, arg # = %2d, words = %2d}, %4s, \",\n \t       cum->gp_reg_found, cum->arg_number, cum->arg_words,\n \t       GET_MODE_NAME (mode));\n-      fprintf (stderr, \"%p\", (void *) type);\n+      fprintf (stderr, \"%p\", (const void *) type);\n       fprintf (stderr, \", %d ) = \", named);\n     }\n \n@@ -2199,7 +2198,7 @@ iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n    FUNC.  */\n \n rtx\n-iq2000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+iq2000_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   int reg = GP_RETURN;\n   enum machine_mode mode = TYPE_MODE (valtype);\n@@ -2216,7 +2215,7 @@ iq2000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n \n static bool\n iq2000_pass_by_reference (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t\t  tree type, bool named ATTRIBUTE_UNUSED)\n+\t\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int size;\n \n@@ -2825,7 +2824,7 @@ iq2000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-iq2000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+iq2000_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return ((int_size_in_bytes (type) > (2 * UNITS_PER_WORD))\n \t  || (int_size_in_bytes (type) == -1));"}, {"sha": "dcf7ab62f06f0059e2703d260b0c52de972b3649", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -756,7 +756,8 @@ while (0)\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(STREAM,SIZE)\t\t\t\t\t\\\n-  fprintf (STREAM, \"\\t.space\\t%u\\n\", (SIZE))\n+  fprintf (STREAM, \"\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\t\\\n+           (unsigned HOST_WIDE_INT)(SIZE))\n \n #define ASM_OUTPUT_ALIGN(STREAM,LOG)\t\t\t\t\t\\\n   if ((LOG) != 0)                       \t\t\t\t\\"}, {"sha": "a63191c21abbfd4207b85818fe99596912d386b4", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -50,7 +50,7 @@ void m32c_unpend_compare (void);\n #if defined(RTX_CODE) && defined(TREE_CODE)\n \n rtx  m32c_function_arg (CUMULATIVE_ARGS *, MM, tree, int);\n-rtx  m32c_function_value (tree, tree);\n+rtx  m32c_function_value (const_tree, const_tree);\n \n #endif\n \n@@ -110,7 +110,7 @@ int  m32c_split_psi_p (rtx *);\n void m32c_function_arg_advance (CUMULATIVE_ARGS *, MM, tree, int);\n tree m32c_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n void m32c_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n-bool m32c_promote_function_return (tree);\n+bool m32c_promote_function_return (const_tree);\n int  m32c_special_page_vector_p (tree);\n \n #endif"}, {"sha": "fabf999057f19004c7169f2ea0d3fb762c4fbac7", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -69,8 +69,8 @@ static bool m32c_fixed_condition_code_regs (unsigned int *, unsigned int *);\n static struct machine_function *m32c_init_machine_status (void);\n static void m32c_insert_attributes (tree, tree *);\n static bool m32c_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t    tree, bool);\n-static bool m32c_promote_prototypes (tree);\n+\t\t\t\t    const_tree, bool);\n+static bool m32c_promote_prototypes (const_tree);\n static int m32c_pushm_popm (Push_Pop_Type);\n static bool m32c_strict_argument_naming (CUMULATIVE_ARGS *);\n static rtx m32c_struct_value_rtx (tree, int);\n@@ -445,7 +445,7 @@ m32c_init_expanders (void)\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n #define TARGET_PROMOTE_FUNCTION_RETURN m32c_promote_function_return\n bool\n-m32c_promote_function_return (tree fntype ATTRIBUTE_UNUSED)\n+m32c_promote_function_return (const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return false;\n }\n@@ -1427,7 +1427,7 @@ m32c_initial_elimination_offset (int from, int to)\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES m32c_promote_prototypes\n static bool\n-m32c_promote_prototypes (tree fntype ATTRIBUTE_UNUSED)\n+m32c_promote_prototypes (const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return 0;\n }\n@@ -1514,7 +1514,7 @@ m32c_function_arg (CUMULATIVE_ARGS * ca,\n static bool\n m32c_pass_by_reference (CUMULATIVE_ARGS * ca ATTRIBUTE_UNUSED,\n \t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\ttree type ATTRIBUTE_UNUSED,\n+\t\t\tconst_tree type ATTRIBUTE_UNUSED,\n \t\t\tbool named ATTRIBUTE_UNUSED)\n {\n   return 0;\n@@ -1639,10 +1639,10 @@ m32c_libcall_value (enum machine_mode mode)\n /* Implements FUNCTION_VALUE.  Functions and libcalls have the same\n    conventions.  */\n rtx\n-m32c_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+m32c_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   /* return reg or parallel */\n-  enum machine_mode mode = TYPE_MODE (valtype);\n+  const enum machine_mode mode = TYPE_MODE (valtype);\n   return m32c_libcall_value (mode);\n }\n "}, {"sha": "ab459b6008c734c76b2dd7fcfc8afe6cecc73e47", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -81,13 +81,13 @@ static int    m32r_issue_rate (void);\n \n static void m32r_encode_section_info (tree, rtx, int);\n static bool m32r_in_small_data_p (tree);\n-static bool m32r_return_in_memory (tree, tree);\n+static bool m32r_return_in_memory (const_tree, const_tree);\n static void m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static void init_idents (void);\n static bool m32r_rtx_costs (rtx, int, int, int *);\n static bool m32r_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t    tree, bool);\n+\t\t\t\t    const_tree, bool);\n static int m32r_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n \f\n@@ -129,7 +129,7 @@ static int m32r_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n #undef  TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef  TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY m32r_return_in_memory\n #undef  TARGET_SETUP_INCOMING_VARARGS\n@@ -458,7 +458,7 @@ m32r_in_small_data_p (tree decl)\n   section = DECL_SECTION_NAME (decl);\n   if (section)\n     {\n-      char *name = (char *) TREE_STRING_POINTER (section);\n+      const char *const name = TREE_STRING_POINTER (section);\n       if (strcmp (name, \".sdata\") == 0 || strcmp (name, \".sbss\") == 0)\n \treturn true;\n     }\n@@ -639,7 +639,7 @@ memreg_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n static bool\n m32r_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode, tree type,\n+\t\t\tenum machine_mode mode, const_tree type,\n \t\t\tbool named ATTRIBUTE_UNUSED)\n {\n   int size;\n@@ -1006,7 +1006,7 @@ m32r_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-m32r_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+m32r_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return m32r_pass_by_reference (NULL, TYPE_MODE (type), type, false);\n }"}, {"sha": "1e9cf585904a9267b14227e25201c985f0fb5516", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -111,7 +111,7 @@ extern void m68hc11_init_cumulative_args (CUMULATIVE_ARGS*, tree, rtx);\n extern rtx m68hc11_function_arg (const CUMULATIVE_ARGS* ,\n                                  enum machine_mode,\n                                  tree, int);\n-extern int m68hc11_function_arg_padding (enum machine_mode, tree);\n+extern int m68hc11_function_arg_padding (enum machine_mode, const_tree);\n \n extern void m68hc11_function_epilogue (FILE*,int);\n "}, {"sha": "0232eda25d9cfb2170bf0d792de383365466aa0f", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -88,7 +88,7 @@ static int autoinc_mode (rtx);\n static int m68hc11_make_autoinc_notes (rtx *, void *);\n static void m68hc11_init_libfuncs (void);\n static rtx m68hc11_struct_value_rtx (tree, int);\n-static bool m68hc11_return_in_memory (tree, tree);\n+static bool m68hc11_return_in_memory (const_tree, const_tree);\n \n /* Must be set to 1 to produce debug messages.  */\n int debug_m6811 = 0;\n@@ -1479,7 +1479,7 @@ m68hc11_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n    Structures are stored left shifted in their argument slot.  */\n int\n-m68hc11_function_arg_padding (enum machine_mode mode, tree type)\n+m68hc11_function_arg_padding (enum machine_mode mode, const_tree type)\n {\n   if (type != 0 && AGGREGATE_TYPE_P (type))\n     return upward;\n@@ -5483,7 +5483,7 @@ m68hc11_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n    in the register (D + X = 4).  */\n \n static bool\n-m68hc11_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+m68hc11_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   if (TYPE_MODE (type) == BLKmode)\n     {"}, {"sha": "7034c93b30ec316188631d78d35d673cc97b7c7e", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1407,6 +1407,7 @@ do {                                                                    \\\n /* Output #ident as a .ident.  */\n \n /* output external reference */\n+#undef ASM_OUTPUT_EXTERNAL\n #define ASM_OUTPUT_EXTERNAL(FILE,DECL,NAME) \\\n   {fputs (\"\\t; extern\\t\", FILE); \\\n   assemble_name (FILE, NAME); \\"}, {"sha": "c6d6d33a3a8194f17c5500f28fc00cb1095da6e9", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -60,7 +60,7 @@ extern bool m68k_matches_u_p (rtx);\n extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern int valid_dbcc_comparison_p_2 (rtx, enum machine_mode);\n extern rtx m68k_libcall_value (enum machine_mode);\n-extern rtx m68k_function_value (tree, tree);\n+extern rtx m68k_function_value (const_tree, const_tree);\n extern int emit_move_sequence (rtx *, enum machine_mode, rtx);\n extern bool m68k_movem_pattern_p (rtx, rtx, HOST_WIDE_INT, bool);\n extern const char *m68k_output_movem (rtx *, rtx, HOST_WIDE_INT, bool);"}, {"sha": "11c0a4a8cb0a0de7370a6d3e61a71f1e194b16cc", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -194,7 +194,7 @@ int m68k_last_compare_had_fp_operands;\n #define TARGET_ATTRIBUTE_TABLE m68k_attribute_table\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX m68k_struct_value_rtx\n@@ -4347,7 +4347,7 @@ m68k_libcall_value (enum machine_mode mode)\n }\n \n rtx\n-m68k_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+m68k_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n "}, {"sha": "93c7c11e766c89f1c1e589902d3c9e862abd8848", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -36,11 +36,11 @@ extern int          mcore_naked_function_p       \t(void);\n \n #ifdef TREE_CODE\n #ifdef HAVE_MACHINE_MODES\n-extern int          mcore_num_arg_regs           \t(enum machine_mode, tree);\n+extern int          mcore_num_arg_regs           \t(enum machine_mode, const_tree);\n #endif /* HAVE_MACHINE_MODES */\n \n #ifdef RTX_CODE\n-extern rtx          mcore_function_value         \t(tree, tree);\n+extern rtx          mcore_function_value         \t(const_tree, const_tree);\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */\n "}, {"sha": "cb54ee5a4f3c8d81657da658b224cfebfd8dccc8", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -126,7 +126,7 @@ static rtx        emit_new_cond_insn            (rtx, int);\n static rtx        conditionalize_block          (rtx);\n static void       conditionalize_optimization   (void);\n static void       mcore_reorg                   (void);\n-static rtx        handle_structs_in_regs        (enum machine_mode, tree, int);\n+static rtx        handle_structs_in_regs        (enum machine_mode, const_tree, int);\n static void       mcore_mark_dllexport          (tree);\n static void       mcore_mark_dllimport          (tree);\n static int        mcore_dllexport_p             (tree);\n@@ -145,7 +145,7 @@ static int        mcore_and_cost               \t(rtx);\n static int        mcore_ior_cost               \t(rtx);\n static bool       mcore_rtx_costs\t\t(rtx, int, int, int *);\n static void       mcore_external_libcall\t(rtx);\n-static bool       mcore_return_in_memory\t(tree, tree);\n+static bool       mcore_return_in_memory\t(const_tree, const_tree);\n static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, bool);\n@@ -187,11 +187,11 @@ static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,\n #define TARGET_MACHINE_DEPENDENT_REORG\tmcore_reorg\n \n #undef  TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_const_tree_true\n #undef  TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_const_tree_true\n #undef  TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES\thook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES\thook_bool_const_tree_true\n \n #undef  TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY\t\tmcore_return_in_memory\n@@ -2662,7 +2662,7 @@ mcore_override_options (void)\n    hold a function argument of mode MODE and type TYPE.  */\n \n int\n-mcore_num_arg_regs (enum machine_mode mode, tree type)\n+mcore_num_arg_regs (enum machine_mode mode, const_tree type)\n {\n   int size;\n \n@@ -2678,7 +2678,7 @@ mcore_num_arg_regs (enum machine_mode mode, tree type)\n }\n \n static rtx\n-handle_structs_in_regs (enum machine_mode mode, tree type, int reg)\n+handle_structs_in_regs (enum machine_mode mode, const_tree type, int reg)\n {\n   int size;\n \n@@ -2722,7 +2722,7 @@ handle_structs_in_regs (enum machine_mode mode, tree type, int reg)\n }\n \n rtx\n-mcore_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+mcore_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   int unsigned_p;\n@@ -3102,8 +3102,8 @@ mcore_external_libcall (rtx fun)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-mcore_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+mcore_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n-  HOST_WIDE_INT size = int_size_in_bytes (type);\n+  const HOST_WIDE_INT size = int_size_in_bytes (type);\n   return (size == -1 || size > 2 * UNITS_PER_WORD);\n }"}, {"sha": "623774961e2182b771abdd1124730100803a06eb", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -223,7 +223,7 @@ extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n extern struct rtx_def *function_arg (const CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, int);\n extern int function_arg_boundary (enum machine_mode, tree);\n-extern bool mips_pad_arg_upward (enum machine_mode, tree);\n+extern bool mips_pad_arg_upward (enum machine_mode, const_tree);\n extern bool mips_pad_reg_upward (enum machine_mode, tree);\n extern void mips_va_start (tree, rtx);\n \n@@ -262,7 +262,7 @@ extern enum mips_loadgp_style mips_current_loadgp_style (void);\n extern void mips_expand_prologue (void);\n extern void mips_expand_epilogue (int);\n extern int mips_can_use_return_insn (void);\n-extern struct rtx_def *mips_function_value (tree, tree, enum machine_mode);\n+extern struct rtx_def *mips_function_value (const_tree, const_tree, enum machine_mode);\n \n extern bool mips_cannot_change_mode_class (enum machine_mode,\n \t\t\t\t\t   enum machine_mode, enum reg_class);"}, {"sha": "f6b56f7868c6e8995a0406f17697a600b57889a1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -346,8 +346,8 @@ static section *mips_select_rtx_section (enum machine_mode, rtx,\n static section *mips_function_rodata_section (tree);\n static bool mips_in_small_data_p (tree);\n static bool mips_use_anchors_for_symbol_p (rtx);\n-static int mips_fpr_return_fields (tree, tree *);\n-static bool mips_return_in_msb (tree);\n+static int mips_fpr_return_fields (const_tree, tree *);\n+static bool mips_return_in_msb (const_tree);\n static rtx mips_return_fpr_pair (enum machine_mode mode,\n \t\t\t\t enum machine_mode mode1, HOST_WIDE_INT,\n \t\t\t\t enum machine_mode mode2, HOST_WIDE_INT);\n@@ -381,7 +381,7 @@ static bool mips_strict_matching_cpu_name_p (const char *, const char *);\n static bool mips_matching_cpu_name_p (const char *, const char *);\n static const struct mips_cpu_info *mips_parse_cpu (const char *);\n static const struct mips_cpu_info *mips_cpu_info_from_isa (int);\n-static bool mips_return_in_memory (tree, tree);\n+static bool mips_return_in_memory (const_tree, const_tree);\n static bool mips_strict_argument_naming (CUMULATIVE_ARGS *);\n static void mips_macc_chains_record (rtx);\n static void mips_macc_chains_reorder (rtx *, int);\n@@ -402,9 +402,9 @@ static void mips_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n static tree mips_build_builtin_va_list (void);\n static tree mips_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool mips_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode mode,\n-\t\t\t\t    tree, bool);\n+\t\t\t\t    const_tree, bool);\n static bool mips_callee_copies (CUMULATIVE_ARGS *, enum machine_mode mode,\n-\t\t\t\ttree, bool);\n+\t\t\t\tconst_tree, bool);\n static int mips_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode mode,\n \t\t\t\t   tree, bool);\n static bool mips_valid_pointer_mode (enum machine_mode);\n@@ -1278,11 +1278,11 @@ static const unsigned char mips16e_save_restore_regs[] = {\n #define TARGET_GIMPLIFY_VA_ARG_EXPR mips_gimplify_va_arg_expr\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY mips_return_in_memory\n@@ -4376,7 +4376,7 @@ function_arg_boundary (enum machine_mode mode, tree type)\n    byte does.  */\n \n bool\n-mips_pad_arg_upward (enum machine_mode mode, tree type)\n+mips_pad_arg_upward (enum machine_mode mode, const_tree type)\n {\n   /* On little-endian targets, the first byte of every stack argument\n      is passed in the first byte of the stack slot.  */\n@@ -8439,7 +8439,7 @@ mips_use_anchors_for_symbol_p (rtx symbol)\n    type.  */\n \n static int\n-mips_fpr_return_fields (tree valtype, tree *fields)\n+mips_fpr_return_fields (const_tree valtype, tree *fields)\n {\n   tree field;\n   int i;\n@@ -8479,7 +8479,7 @@ mips_fpr_return_fields (tree valtype, tree *fields)\n       - the structure is not returned in floating-point registers.  */\n \n static bool\n-mips_return_in_msb (tree valtype)\n+mips_return_in_msb (const_tree valtype)\n {\n   tree fields[2];\n \n@@ -8524,7 +8524,7 @@ mips_return_fpr_pair (enum machine_mode mode,\n    VALTYPE is null and MODE is the mode of the return value.  */\n \n rtx\n-mips_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n+mips_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n \t\t     enum machine_mode mode)\n {\n   if (valtype)\n@@ -8600,7 +8600,7 @@ mips_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n \n static bool\n mips_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode, tree type,\n+\t\t\tenum machine_mode mode, const_tree type,\n \t\t\tbool named ATTRIBUTE_UNUSED)\n {\n   if (mips_abi == ABI_EABI)\n@@ -8624,7 +8624,7 @@ mips_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n static bool\n mips_callee_copies (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t\t    enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t    tree type ATTRIBUTE_UNUSED, bool named)\n+\t\t    const_tree type ATTRIBUTE_UNUSED, bool named)\n {\n   return mips_abi == ABI_EABI && named;\n }\n@@ -10808,7 +10808,7 @@ mips_hard_regno_nregs (int regno, enum machine_mode mode)\n    course.  */\n \n static bool\n-mips_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n+mips_return_in_memory (const_tree type, const_tree fndecl ATTRIBUTE_UNUSED)\n {\n   if (TARGET_OLDABI)\n     return (TYPE_MODE (type) == BLKmode);"}, {"sha": "71809c2d5a73fd60438ab1497a91e84cb0f885b8", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -2613,7 +2613,7 @@ while (0)\n \n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(STREAM, NAME, DECL) \\\n-  mips_declare_object (STREAM, NAME, \"\", \":\\n\", 0)\n+  mips_declare_object (STREAM, NAME, \"\", \":\\n\")\n \n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl\\t\""}, {"sha": "c963147717f07d2442b89d318f849ef8e4e705b4", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -53,7 +53,7 @@ extern int mmix_local_regno (int);\n extern int mmix_dbx_register_number (int);\n extern int mmix_use_simple_return (void);\n extern void mmix_make_decl_one_only (tree);\n-extern rtx mmix_function_outgoing_value (tree, tree);\n+extern rtx mmix_function_outgoing_value (const_tree, const_tree);\n extern int mmix_function_value_regno_p (int);\n extern int mmix_data_alignment (tree, int);\n extern int mmix_constant_alignment (tree, int);"}, {"sha": "38fd0722d4ed7f3bca84b53dd6e74bf082be97c0", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -134,8 +134,8 @@ static void mmix_file_start (void);\n static void mmix_file_end (void);\n static bool mmix_rtx_costs (rtx, int, int, int *);\n static rtx mmix_struct_value_rtx (tree, int);\n-static bool mmix_pass_by_reference (const CUMULATIVE_ARGS *,\n-\t\t\t\t    enum machine_mode, tree, bool);\n+static bool mmix_pass_by_reference (CUMULATIVE_ARGS *,\n+\t\t\t\t    enum machine_mode, const_tree, bool);\n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n    for a general description.  */\n@@ -187,7 +187,7 @@ static bool mmix_pass_by_reference (const CUMULATIVE_ARGS *,\n #define TARGET_MACHINE_DEPENDENT_REORG mmix_reorg\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #if 0\n /* Apparently not doing TRT if int < register-size.  FIXME: Perhaps\n    FUNCTION_VALUE and LIBCALL_VALUE needs tweaking as some ports say.  */\n@@ -592,8 +592,8 @@ mmix_function_arg (const CUMULATIVE_ARGS *argsp,\n    everything that goes by value.  */\n \n static bool\n-mmix_pass_by_reference (const CUMULATIVE_ARGS *argsp, enum machine_mode mode,\n-\t\t\ttree type, bool named ATTRIBUTE_UNUSED)\n+mmix_pass_by_reference (CUMULATIVE_ARGS *argsp, enum machine_mode mode,\n+\t\t\tconst_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   /* FIXME: Check: I'm not sure the must_pass_in_stack check is\n      necessary.  */\n@@ -624,7 +624,7 @@ mmix_function_arg_regno_p (int regno, int incoming)\n /* FUNCTION_OUTGOING_VALUE.  */\n \n rtx\n-mmix_function_outgoing_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+mmix_function_outgoing_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = TYPE_MODE (valtype);\n   enum machine_mode cmode;\n@@ -1141,7 +1141,7 @@ mmix_encode_section_info (tree decl, rtx rtl, int first)\n       char *newstr;\n \n       /* Why is the return type of ggc_alloc_string const?  */\n-      newstr = (char *) ggc_alloc_string (\"\", len + 1);\n+      newstr = (char *) CONST_CAST (ggc_alloc_string (\"\", len + 1));\n \n       strcpy (newstr + 1, str);\n       *newstr = '@';"}, {"sha": "633988b73d7f15dea223beaeab78f4139ee5d480", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -48,7 +48,7 @@ extern bool mn10300_wide_const_load_uses_clr (rtx operands[2]);\n #ifdef TREE_CODE\n extern struct rtx_def *function_arg (CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, int);\n-extern rtx mn10300_function_value (tree, tree, int);\n+extern rtx mn10300_function_value (const_tree, const_tree, int);\n #endif /* TREE_CODE */\n \n extern void expand_prologue (void);"}, {"sha": "0fb57cc1bd1aa607f23db21b4ff2b8822d501b37", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -72,10 +72,10 @@ static int mn10300_address_cost_1 (rtx, int *);\n static int mn10300_address_cost (rtx);\n static bool mn10300_rtx_costs (rtx, int, int, int *);\n static void mn10300_file_start (void);\n-static bool mn10300_return_in_memory (tree, tree);\n+static bool mn10300_return_in_memory (const_tree, const_tree);\n static rtx mn10300_builtin_saveregs (void);\n static bool mn10300_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t       tree, bool);\n+\t\t\t\t       const_tree, bool);\n static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      tree, bool);\n \f\n@@ -102,7 +102,7 @@ static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_ENCODE_SECTION_INFO mn10300_encode_section_info\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY mn10300_return_in_memory\n #undef TARGET_PASS_BY_REFERENCE\n@@ -1431,7 +1431,7 @@ initial_offset (int from, int to)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-mn10300_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+mn10300_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   /* Return values > 8 bytes in length in memory.  */\n   return (int_size_in_bytes (type) > 8\n@@ -1482,7 +1482,7 @@ mn10300_va_start (tree valist, rtx nextarg)\n \n static bool\n mn10300_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-\t\t\t   enum machine_mode mode, tree type,\n+\t\t\t   enum machine_mode mode, const_tree type,\n \t\t\t   bool named ATTRIBUTE_UNUSED)\n {\n   unsigned HOST_WIDE_INT size;\n@@ -1592,7 +1592,7 @@ mn10300_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    callers relying on this extra copy.  */\n \n rtx\n-mn10300_function_value (tree valtype, tree func, int outgoing)\n+mn10300_function_value (const_tree valtype, const_tree func, int outgoing)\n {\n   rtx rv;\n   enum machine_mode mode = TYPE_MODE (valtype);"}, {"sha": "9cb8244c1f63ee9d5b32a47f2bc5ece95c08c96c", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -734,7 +734,7 @@ while (0)\n \tswitch (XINT ((X), 1))\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t  case UNSPEC_INT_LABEL:\t\t\t\t\t\\\n-\t    asm_fprintf ((STREAM), \".%LLIL%d\",\t\t\t\t\\\n+\t    asm_fprintf ((STREAM), \".%LLIL\" HOST_WIDE_INT_PRINT_DEC,\t\\\n  \t\t\t INTVAL (XVECEXP ((X), 0, 0)));\t\t\t\\\n \t    break;\t\t\t\t\t\t\t\\\n \t  case UNSPEC_PIC:\t\t\t\t\t\t\\"}, {"sha": "5c959edd9ad1584ca20b4e36ff8a09f5b2adfef1", "filename": "gcc/config/mt/mt-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmt%2Fmt-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmt%2Fmt-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -60,6 +60,6 @@ extern void         mt_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree,\n extern rtx          mt_function_arg\t (const CUMULATIVE_ARGS *, enum machine_mode, tree, int, int);\n extern void\t    mt_va_start\t (tree, rtx);\n extern enum reg_class mt_secondary_reload_class (enum reg_class, enum machine_mode, rtx);\n-extern rtx\t    mt_function_value\t (tree, enum machine_mode, tree);\n+extern rtx\t    mt_function_value\t (const_tree, enum machine_mode, const_tree);\n #endif\n #endif"}, {"sha": "9e281a154e193a09e302ab39ba4e07b1503428cf", "filename": "gcc/config/mt/mt.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmt%2Fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fmt%2Fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -631,9 +631,9 @@ mt_arg_partial_bytes (CUMULATIVE_ARGS * pcum,\n /* Implement TARGET_PASS_BY_REFERENCE hook.  */\n static bool\n mt_pass_by_reference (CUMULATIVE_ARGS * cum ATTRIBUTE_UNUSED,\n-\t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t       tree type,\n-\t\t       bool named ATTRIBUTE_UNUSED)\n+\t\t      enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t      const_tree type,\n+\t\t      bool named ATTRIBUTE_UNUSED)\n {\n   return (type && int_size_in_bytes (type) > 4 * UNITS_PER_WORD);\n }\n@@ -1464,7 +1464,7 @@ mt_secondary_reload_class (enum reg_class class ATTRIBUTE_UNUSED,\n /* Handle FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE, and LIBCALL_VALUE\n    macros.  */\n rtx\n-mt_function_value (tree valtype, enum machine_mode mode, tree func_decl ATTRIBUTE_UNUSED)\n+mt_function_value (const_tree valtype, enum machine_mode mode, const_tree func_decl ATTRIBUTE_UNUSED)\n {\n   if ((mode) == DImode || (mode) == DFmode)\n     return gen_rtx_MEM (mode, gen_rtx_REG (mode, RETURN_VALUE_REGNUM));\n@@ -1631,7 +1631,7 @@ mt_split_words (enum machine_mode nmode,\n \n /* Implement TARGET_MUST_PASS_IN_STACK hook.  */\n static bool\n-mt_pass_in_stack (enum machine_mode mode ATTRIBUTE_UNUSED, tree type)\n+mt_pass_in_stack (enum machine_mode mode ATTRIBUTE_UNUSED, const_tree type)\n {\n   return (((type) != 0\n \t   && (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST\n@@ -2469,7 +2469,7 @@ const struct attribute_spec mt_attribute_table[];\n #undef  TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX\t\tmt_struct_value_rtx\n #undef  TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES\thook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES\thook_bool_const_tree_true\n #undef  TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE\tmt_pass_by_reference\n #undef  TARGET_MUST_PASS_IN_STACK"}, {"sha": "9d5c2b9e7f2fe58161d80b849a917d293469e0c9", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -124,7 +124,7 @@ extern int pc_or_label_operand (rtx, enum machine_mode);\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n #ifdef TREE_CODE\n-extern enum direction function_arg_padding (enum machine_mode, tree);\n+extern enum direction function_arg_padding (enum machine_mode, const_tree);\n #endif\n #endif /* ARGS_SIZE_RTX */\n extern int non_hard_reg_operand (rtx, enum machine_mode);\n@@ -160,9 +160,9 @@ extern int reloc_needed (tree);\n #ifdef RTX_CODE\n extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t tree, int);\n-extern rtx function_value (tree, tree);\n+extern rtx function_value (const_tree, const_tree);\n #endif\n-extern bool pa_return_in_memory (tree, tree);\n+extern bool pa_return_in_memory (const_tree, const_tree);\n #endif /* TREE_CODE */\n \n extern void pa_asm_output_aligned_bss (FILE *, const char *,"}, {"sha": "cc9bb106aefa2418455368f23260e5dc4c54280c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -148,7 +148,7 @@ static void pa_hpux_init_libfuncs (void);\n #endif\n static rtx pa_struct_value_rtx (tree, int);\n static bool pa_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t  tree, bool);\n+\t\t\t\t  const_tree, bool);\n static int pa_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t tree, bool);\n static struct machine_function * pa_init_machine_status (void);\n@@ -285,9 +285,9 @@ static size_t n_deferred_plabels = 0;\n #endif\n \n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX pa_struct_value_rtx\n@@ -5789,7 +5789,7 @@ pa_eh_return_handler_rtx (void)\n \n static bool\n pa_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n-\t\t      enum machine_mode mode, tree type,\n+\t\t      enum machine_mode mode, const_tree type,\n \t\t      bool named ATTRIBUTE_UNUSED)\n {\n   HOST_WIDE_INT size;\n@@ -5806,7 +5806,7 @@ pa_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n }\n \n enum direction\n-function_arg_padding (enum machine_mode mode, tree type)\n+function_arg_padding (enum machine_mode mode, const_tree type)\n {\n   if (mode == BLKmode\n       || (TARGET_64BIT && type && AGGREGATE_TYPE_P (type)))\n@@ -9032,7 +9032,7 @@ insn_refs_are_delayed (rtx insn)\n    to match the HP Compiler ABI.  */\n \n rtx\n-function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode valmode;\n \n@@ -9492,7 +9492,7 @@ pa_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n bool\n-pa_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+pa_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   /* SOM ABI says that objects larger than 64 bits are returned in memory.\n      PA64 ABI says that objects larger than 128 bits are returned in memory."}, {"sha": "ba649eac60f97c3f3a8c54c2c3ae47963b05531e", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -146,7 +146,7 @@ static bool pdp11_assemble_integer (rtx, unsigned int, int);\n static void pdp11_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void pdp11_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static bool pdp11_rtx_costs (rtx, int, int, int *);\n-static bool pdp11_return_in_memory (tree, tree);\n+static bool pdp11_return_in_memory (const_tree, const_tree);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -384,7 +384,8 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t/* change fp -> r5 due to the compile error on libgcc2.c */\n \tfor (i =7 ; i >= 0 ; i--)\t\t\t\t\t\n \t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\t\t\n-\t\tfprintf(stream, \"\\tmov %#o(r5), %s\\n\",(-fsize-2*j--)&0xffff, reg_names[i]);\n+\t\tfprintf(stream, \"\\tmov %#\" HOST_WIDE_INT_PRINT \"o(r5), %s\\n\",\n+\t\t\t(-fsize-2*j--)&0xffff, reg_names[i]);\n \n \t/* get ACs */\t\t\t\t\t\t\n \tvia_ac = FIRST_PSEUDO_REGISTER -1;\n@@ -402,7 +403,8 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t\t&& df_regs_ever_live_p (i)\n \t\t&& ! call_used_regs[i])\n \t    {\n-\t\tfprintf(stream, \"\\tldd %#o(r5), %s\\n\", (-fsize-k)&0xffff, reg_names[i]);\n+\t\tfprintf(stream, \"\\tldd %#\" HOST_WIDE_INT_PRINT \"o(r5), %s\\n\",\n+\t\t\t(-fsize-k)&0xffff, reg_names[i]);\n \t\tk -= 8;\n \t    }\n \t    \n@@ -412,7 +414,8 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t    {\n \t        gcc_assert (LOAD_FPU_REG_P(via_ac));\n \t\t    \n-\t\tfprintf(stream, \"\\tldd %#o(r5), %s\\n\", (-fsize-k)&0xffff, reg_names[via_ac]);\n+\t\tfprintf(stream, \"\\tldd %#\" HOST_WIDE_INT_PRINT \"o(r5), %s\\n\",\n+\t\t\t(-fsize-k)&0xffff, reg_names[via_ac]);\n \t\tfprintf(stream, \"\\tstd %s, %s\\n\", reg_names[via_ac], reg_names[i]);\n \t\tk -= 8;\n \t    }\n@@ -453,7 +456,8 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t\tfprintf(stream, \"\\tmov (sp)+, %s\\n\", reg_names[i]);\t\n \t\t\t\t\t\t\t\t\n \tif (fsize)\t\t\t\t\t\t\n-\t    fprintf((stream), \"\\tadd $%#o, sp\\n\", (fsize)&0xffff);      \t\t\n+\t    fprintf((stream), \"\\tadd $%#\" HOST_WIDE_INT_PRINT \"o, sp\\n\",\n+\t\t    (fsize)&0xffff);      \t\t\n     }\t\t\t\n \t\t\t\t\t\n     fprintf (stream, \"\\trts pc\\n\");\t\t\t\t\t\n@@ -1080,8 +1084,7 @@ static const int move_costs[N_REG_CLASSES][N_REG_CLASSES] =\n    -- as we do here with 22 -- or not ? */\n \n int \n-register_move_cost(c1, c2)\n-  enum reg_class c1, c2;\n+register_move_cost(enum reg_class c1, enum reg_class c2)\n {\n     return move_costs[(int)c1][(int)c2];\n }\n@@ -1752,7 +1755,7 @@ output_addr_const_pdp11 (FILE *file, rtx x)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-pdp11_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+pdp11_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   /* Should probably return DImode and DFmode in memory, lest\n      we fill up all regs!"}, {"sha": "4b8c231376e6f8358b657fc6680a526addc957bb", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -983,7 +983,7 @@ extern struct rtx_def *cc0_reg_rtx;\n       long sval[2];\t\t\t\t\t\t\t\\\n       REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n       REAL_VALUE_TO_TARGET_DOUBLE (r, sval);\t\t\t\t\\\n-      fprintf (FILE, \"$%#o\", sval[0] >> 16); }\t\t\t\t\\\n+      fprintf (FILE, \"$%#lo\", sval[0] >> 16); }\t\t\t\t\\\n   else { putc ('$', FILE); output_addr_const_pdp11 (FILE, X); }}\n \f\n /* Print a memory address as an operand to reference that memory location.  */"}, {"sha": "94b23a54f6049a01341872f5bb8252aef1670d05", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -123,15 +123,15 @@ extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n extern int function_arg_boundary (enum machine_mode, tree);\n extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern tree altivec_resolve_overloaded_builtin (tree, tree);\n-extern rtx rs6000_function_value (tree, tree);\n+extern rtx rs6000_function_value (const_tree, const_tree);\n extern rtx rs6000_libcall_value (enum machine_mode);\n extern rtx rs6000_va_arg (tree, tree);\n extern int function_ok_for_sibcall (tree);\n extern void rs6000_elf_declare_function_name (FILE *, const char *, tree);\n extern bool rs6000_elf_in_small_data_p (tree);\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n-extern enum direction function_arg_padding (enum machine_mode, tree);\n+extern enum direction function_arg_padding (enum machine_mode, const_tree);\n #endif /* ARGS_SIZE_RTX */\n \n #endif /* TREE_CODE */"}, {"sha": "4a96b7b1da53558c94d882a8e0ca25330ce65b7d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -740,7 +740,7 @@ static void rs6000_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void rs6000_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t    tree);\n static rtx rs6000_emit_set_long_const (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n-static bool rs6000_return_in_memory (tree, tree);\n+static bool rs6000_return_in_memory (const_tree, const_tree);\n static void rs6000_file_start (void);\n #if TARGET_ELF\n static int rs6000_elf_reloc_rw_mask (void);\n@@ -871,16 +871,16 @@ static void rs6000_darwin64_record_arg_flush (CUMULATIVE_ARGS *,\n \t\t\t\t\t      HOST_WIDE_INT,\n \t\t\t\t\t      rtx[], int *);\n static void rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *,\n-\t\t\t\t\t       tree, HOST_WIDE_INT,\n-\t\t\t\t\t       rtx[], int *);\n-static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, tree, int, bool);\n+\t\t\t\t\t\tconst_tree, HOST_WIDE_INT,\n+\t\t\t\t\t\trtx[], int *);\n+static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree, int, bool);\n static rtx rs6000_mixed_function_arg (enum machine_mode, tree, int);\n static void rs6000_move_block_from_reg (int regno, rtx x, int nregs);\n static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree,\n \t\t\t\t    int *, int);\n static bool rs6000_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t      tree, bool);\n+\t\t\t\t      const_tree, bool);\n static int rs6000_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, bool);\n static const char *invalid_arg_for_unprototyped_fn (tree, tree, tree);\n@@ -893,7 +893,7 @@ static void rs6000_darwin_file_start (void);\n \n static tree rs6000_build_builtin_va_list (void);\n static tree rs6000_gimplify_va_arg (tree, tree, tree *, tree *);\n-static bool rs6000_must_pass_in_stack (enum machine_mode, tree);\n+static bool rs6000_must_pass_in_stack (enum machine_mode, const_tree);\n static bool rs6000_scalar_mode_supported_p (enum machine_mode);\n static bool rs6000_vector_mode_supported_p (enum machine_mode);\n static int get_vec_cmp_insn (enum rtx_code, enum machine_mode,\n@@ -1125,9 +1125,9 @@ static const char alt_reg_names[][8] =\n /* On rs6000, function arguments are promoted, as are function return\n    values.  */\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n \n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY rs6000_return_in_memory\n@@ -4765,7 +4765,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n    memory always.  The cast to unsigned makes -1 > 8.  */\n \n static bool\n-rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+rs6000_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   /* In the darwin64 abi, try to use registers for larger structs\n      if possible.  */\n@@ -4887,7 +4887,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n /* Return true if TYPE must be passed on the stack and not in registers.  */\n \n static bool\n-rs6000_must_pass_in_stack (enum machine_mode mode, tree type)\n+rs6000_must_pass_in_stack (enum machine_mode mode, const_tree type)\n {\n   if (DEFAULT_ABI == ABI_AIX || TARGET_64BIT)\n     return must_pass_in_stack_var_size (mode, type);\n@@ -4905,7 +4905,7 @@ rs6000_must_pass_in_stack (enum machine_mode mode, tree type)\n    argument slot.  */\n \n enum direction\n-function_arg_padding (enum machine_mode mode, tree type)\n+function_arg_padding (enum machine_mode mode, const_tree type)\n {\n #ifndef AGGREGATE_PADDING_FIXED\n #define AGGREGATE_PADDING_FIXED 0\n@@ -5464,7 +5464,7 @@ rs6000_darwin64_record_arg_flush (CUMULATIVE_ARGS *cum,\n /* Recursive workhorse for the following.  */\n \n static void\n-rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, tree type,\n+rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, const_tree type,\n \t\t\t\t    HOST_WIDE_INT startbitpos, rtx rvec[],\n \t\t\t\t    int *k)\n {\n@@ -5534,7 +5534,7 @@ rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, tree type,\n    calling convention.  */\n \n static rtx\n-rs6000_darwin64_record_arg (CUMULATIVE_ARGS *orig_cum, tree type,\n+rs6000_darwin64_record_arg (CUMULATIVE_ARGS *orig_cum, const_tree type,\n \t\t\t    int named, bool retval)\n {\n   rtx rvec[FIRST_PSEUDO_REGISTER];\n@@ -5992,7 +5992,7 @@ rs6000_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static bool\n rs6000_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-\t\t\t  enum machine_mode mode, tree type,\n+\t\t\t  enum machine_mode mode, const_tree type,\n \t\t\t  bool named ATTRIBUTE_UNUSED)\n {\n   if (DEFAULT_ABI == ABI_V4 && TARGET_IEEEQUAD && mode == TFmode)\n@@ -7737,13 +7737,13 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n   tree arg0, arg1, arg2;\n   enum machine_mode mode0, mode1, mode2;\n   rtx pat, op0, op1, op2;\n-  struct builtin_description *d;\n+  const struct builtin_description *d;\n   size_t i;\n \n   *expandedp = false;\n \n   /* Handle DST variants.  */\n-  d = (struct builtin_description *) bdesc_dst;\n+  d = bdesc_dst;\n   for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n     if (d->code == fcode)\n       {\n@@ -7896,8 +7896,8 @@ altivec_expand_vec_ext_builtin (tree exp, rtx target)\n static rtx\n altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n {\n-  struct builtin_description *d;\n-  struct builtin_description_predicates *dp;\n+  const struct builtin_description *d;\n+  const struct builtin_description_predicates *dp;\n   size_t i;\n   enum insn_code icode;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n@@ -8026,13 +8026,13 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     }\n \n   /* Expand abs* operations.  */\n-  d = (struct builtin_description *) bdesc_abs;\n+  d = bdesc_abs;\n   for (i = 0; i < ARRAY_SIZE (bdesc_abs); i++, d++)\n     if (d->code == fcode)\n       return altivec_expand_abs_builtin (d->icode, exp, target);\n \n   /* Expand the AltiVec predicates.  */\n-  dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n+  dp = bdesc_altivec_preds;\n   for (i = 0; i < ARRAY_SIZE (bdesc_altivec_preds); i++, dp++)\n     if (dp->code == fcode)\n       return altivec_expand_predicate_builtin (dp->icode, dp->opcode,\n@@ -8407,7 +8407,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n-  struct builtin_description *d;\n+  const struct builtin_description *d;\n   size_t i;\n   rtx ret;\n   bool success;\n@@ -8492,7 +8492,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       return rs6000_expand_binop_builtin (d->icode, exp, target);\n \n   /* Handle simple ternary operations.  */\n-  d = (struct builtin_description *) bdesc_3arg;\n+  d = bdesc_3arg;\n   for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n     if (d->code == fcode)\n       return rs6000_expand_ternop_builtin (d->icode, exp, target);\n@@ -8867,8 +8867,8 @@ spe_init_builtins (void)\n static void\n altivec_init_builtins (void)\n {\n-  struct builtin_description *d;\n-  struct builtin_description_predicates *dp;\n+  const struct builtin_description *d;\n+  const struct builtin_description_predicates *dp;\n   size_t i;\n   tree ftype;\n \n@@ -9049,12 +9049,12 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_vec_ctu\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_CTU);\n \n   /* Add the DST variants.  */\n-  d = (struct builtin_description *) bdesc_dst;\n+  d = bdesc_dst;\n   for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n     def_builtin (d->mask, d->name, void_ftype_pcvoid_int_int, d->code);\n \n   /* Initialize the predicates.  */\n-  dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n+  dp = bdesc_altivec_preds;\n   for (i = 0; i < ARRAY_SIZE (bdesc_altivec_preds); i++, dp++)\n     {\n       enum machine_mode mode1;\n@@ -9092,7 +9092,7 @@ altivec_init_builtins (void)\n     }\n \n   /* Initialize the abs* operators.  */\n-  d = (struct builtin_description *) bdesc_abs;\n+  d = bdesc_abs;\n   for (i = 0; i < ARRAY_SIZE (bdesc_abs); i++, d++)\n     {\n       enum machine_mode mode0;\n@@ -9223,7 +9223,7 @@ altivec_init_builtins (void)\n static void\n rs6000_common_init_builtins (void)\n {\n-  struct builtin_description *d;\n+  const struct builtin_description *d;\n   size_t i;\n \n   tree v4sf_ftype_v4sf_v4sf_v16qi\n@@ -9420,7 +9420,7 @@ rs6000_common_init_builtins (void)\n \t\t\t\tV8HI_type_node, V8HI_type_node, NULL_TREE);\n \n   /* Add the simple ternary operators.  */\n-  d = (struct builtin_description *) bdesc_3arg;\n+  d = bdesc_3arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_3arg); i++, d++)\n     {\n       enum machine_mode mode0, mode1, mode2, mode3;\n@@ -20762,7 +20762,7 @@ rs6000_complex_function_value (enum machine_mode mode)\n    fp1, unless -msoft-float.  */\n \n rtx\n-rs6000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+rs6000_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   unsigned int regno;"}, {"sha": "bfefb0daa33aa5a06622234dcd63eff9f5af1dee", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -121,7 +121,7 @@ extern void s390_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, int);\n #ifdef RTX_CODE\n extern rtx s390_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n-extern rtx s390_function_value (tree, enum machine_mode);\n+extern rtx s390_function_value (const_tree, enum machine_mode);\n extern void s390_va_start (tree, rtx);\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */"}, {"sha": "7ac92a42a74b0828605d03779d7b8c8d407abd12", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -7644,7 +7644,7 @@ s390_emit_epilogue (bool sibcall)\n    MODE must be specified.  */\n \n static int\n-s390_function_arg_size (enum machine_mode mode, tree type)\n+s390_function_arg_size (enum machine_mode mode, const_tree type)\n {\n   if (type)\n     return int_size_in_bytes (type);\n@@ -7742,7 +7742,7 @@ s390_function_arg_integer (enum machine_mode mode, tree type)\n \n static bool\n s390_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode, tree type,\n+\t\t\tenum machine_mode mode, const_tree type,\n \t\t\tbool named ATTRIBUTE_UNUSED)\n {\n   int size = s390_function_arg_size (mode, type);\n@@ -7842,7 +7842,7 @@ s390_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n    hidden first argument.  */\n \n static bool\n-s390_return_in_memory (tree type, tree fundecl ATTRIBUTE_UNUSED)\n+s390_return_in_memory (const_tree type, const_tree fundecl ATTRIBUTE_UNUSED)\n {\n   /* We accept small integral (and similar) types.  */\n   if (INTEGRAL_TYPE_P (type)\n@@ -7869,7 +7869,7 @@ s390_return_in_memory (tree type, tree fundecl ATTRIBUTE_UNUSED)\n    value of mode MODE from a libcall.  */\n \n rtx\n-s390_function_value (tree type, enum machine_mode mode)\n+s390_function_value (const_tree type, enum machine_mode mode)\n {\n   if (type)\n     {\n@@ -9318,9 +9318,9 @@ s390_reorg (void)\n #define TARGET_GIMPLIFY_VA_ARG_EXPR s390_gimplify_va_arg\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE s390_pass_by_reference\n "}, {"sha": "ea99eeafb2941a8b6efa90eb29f9a5131db2113e", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -55,7 +55,7 @@ void score_init_cumulative_args (CUMULATIVE_ARGS *cum,\n void score_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n                                  tree type, int named);\n \n-rtx score_function_value (tree valtype, tree func, enum machine_mode mode);\n+rtx score_function_value (const_tree valtype, const_tree func, enum machine_mode mode);\n \n rtx score_va_arg (tree va_list, tree type);\n \n@@ -71,7 +71,8 @@ int score_register_move_cost (enum machine_mode mode, enum reg_class to,\n                               enum reg_class from);\n \n void score_declare_object (FILE *stream, const char *name,\n-                           const char *directive, const char *fmt, ...);\n+                           const char *directive, const char *fmt, ...)\n+     ATTRIBUTE_PRINTF_4;\n \n void score_declare_object_name (FILE *stream, const char *name, tree decl);\n "}, {"sha": "2f21444c2ab32fb75712846465a9749ac88ce558", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -59,8 +59,8 @@\n #define CE_REG_CLASS_P(C) \\\n   ((C) == HI_REG || (C) == LO_REG || (C) == CE_REGS)\n \n-static int score_arg_partial_bytes (const CUMULATIVE_ARGS *,\n-                                    enum machine_mode, tree, int);\n+static int score_arg_partial_bytes (CUMULATIVE_ARGS *,\n+                                    enum machine_mode, tree, bool);\n \n static int score_symbol_insns (enum score_symbol_type);\n \n@@ -104,13 +104,13 @@ static int score_address_cost (rtx);\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK  hook_bool_tree_hwi_hwi_tree_true\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS    hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS    hook_bool_const_tree_true\n \n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN  hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN  hook_bool_const_tree_true\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES       hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES       hook_bool_const_tree_true\n \n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK       must_pass_in_stack_var_size\n@@ -137,7 +137,7 @@ static int score_address_cost (rtx);\n    small structures are returned in a register.\n    Objects with varying size must still be returned in memory.  */\n static bool\n-score_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n+score_return_in_memory (const_tree type, const_tree fndecl ATTRIBUTE_UNUSED)\n {\n   return ((TYPE_MODE (type) == BLKmode)\n           || (int_size_in_bytes (type) > 2 * UNITS_PER_WORD)\n@@ -147,7 +147,7 @@ score_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n /* Return nonzero when an argument must be passed by reference.  */\n static bool\n score_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-                         enum machine_mode mode, tree type,\n+                         enum machine_mode mode, const_tree type,\n                          bool named ATTRIBUTE_UNUSED)\n {\n   /* If we have a variable-sized parameter, we have no choice.  */\n@@ -156,7 +156,7 @@ score_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \n /* Return a legitimate address for REG + OFFSET.  */\n static rtx\n-score_add_offset (rtx temp, rtx reg, HOST_WIDE_INT offset)\n+score_add_offset (rtx temp ATTRIBUTE_UNUSED, rtx reg, HOST_WIDE_INT offset)\n {\n   if (!IMM_IN_RANGE (offset, 15, 1))\n     {\n@@ -685,8 +685,8 @@ score_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n /* Implement TARGET_ARG_PARTIAL_BYTES macro.  */\n static int\n-score_arg_partial_bytes (const CUMULATIVE_ARGS *cum,\n-                         enum machine_mode mode, tree type, int named)\n+score_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n+                         enum machine_mode mode, tree type, bool named)\n {\n   struct score_arg_info info;\n   classify_arg (cum, mode, type, named, &info);\n@@ -730,7 +730,7 @@ score_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    VALTYPE is the return type and MODE is VOIDmode.  For libcalls,\n    VALTYPE is null and MODE is the mode of the return value.  */\n rtx\n-score_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n+score_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n                       enum machine_mode mode)\n {\n   if (valtype)"}, {"sha": "d2c78012c244707e52eca26469b28deb4a08ec75", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -791,7 +791,7 @@ typedef struct score_args\n \n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(STREAM, NAME, DECL) \\\n-  score_declare_object (STREAM, NAME, \"\", \":\\n\", 0)\n+  score_declare_object (STREAM, NAME, \"\", \":\\n\")\n \n /* This says how to output an external.  It would be possible not to\n    output anything and let undefined symbol become external. However"}, {"sha": "e236a0ecd1ade27ff1381783e51c7cf84609134a", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -137,7 +137,7 @@ extern int initial_elimination_offset (int, int);\n extern int fldi_ok (void);\n extern int sh_hard_regno_rename_ok (unsigned int, unsigned int);\n extern int sh_cfun_interrupt_handler_p (void);\n-extern int sh_attr_renesas_p (tree);\n+extern int sh_attr_renesas_p (const_tree);\n extern int sh_cfun_attr_renesas_p (void);\n extern void sh_initialize_trampoline (rtx, rtx, rtx);\n extern bool sh_cannot_change_mode_class\n@@ -161,7 +161,7 @@ extern rtx sh_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern void sh_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern int sh_pass_in_reg_p (CUMULATIVE_ARGS *, enum machine_mode, tree);\n extern void sh_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, signed int, enum machine_mode);\n-extern bool sh_promote_prototypes (tree);\n+extern bool sh_promote_prototypes (const_tree);\n \n extern rtx replace_n_hard_rtx (rtx, rtx *, int , int);\n extern int shmedia_cleanup_truncate (rtx *, void *);"}, {"sha": "655c4d4ca795053a91df9bfbb09483aef3a8cd1a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -242,17 +242,17 @@ static struct save_entry_s *sh5_schedule_saves (HARD_REG_SET *,\n \t\t\t\t\t\tstruct save_schedule_s *, int);\n \n static rtx sh_struct_value_rtx (tree, int);\n-static bool sh_return_in_memory (tree, tree);\n+static bool sh_return_in_memory (const_tree, const_tree);\n static rtx sh_builtin_saveregs (void);\n static void sh_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n static bool sh_strict_argument_naming (CUMULATIVE_ARGS *);\n static bool sh_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n static tree sh_build_builtin_va_list (void);\n static tree sh_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool sh_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t  tree, bool);\n+\t\t\t\t  const_tree, bool);\n static bool sh_callee_copies (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t      tree, bool);\n+\t\t\t      const_tree, bool);\n static int sh_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t         tree, bool);\n static int sh_dwarf_calling_convention (tree);\n@@ -7354,7 +7354,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n }\n \n bool\n-sh_promote_prototypes (tree type)\n+sh_promote_prototypes (const_tree type)\n {\n   if (TARGET_HITACHI)\n     return 0;\n@@ -7369,8 +7369,8 @@ sh_promote_prototypes (tree type)\n    loads them into the full 64-bits registers.  */\n \n static int\n-shcompact_byref (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t tree type, bool named)\n+shcompact_byref (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t const_tree type, bool named)\n {\n   unsigned HOST_WIDE_INT size;\n \n@@ -7394,7 +7394,7 @@ shcompact_byref (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static bool\n sh_pass_by_reference (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t      tree type, bool named)\n+\t\t      const_tree type, bool named)\n {\n   if (targetm.calls.must_pass_in_stack (mode, type))\n     return true;\n@@ -7416,7 +7416,7 @@ sh_pass_by_reference (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static bool\n sh_callee_copies (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t  tree type, bool named ATTRIBUTE_UNUSED)\n+\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   /* ??? How can it possibly be correct to return true only on the\n      caller side of the equation?  Is there someplace else in the\n@@ -7715,7 +7715,7 @@ sh_struct_value_rtx (tree fndecl, int incoming ATTRIBUTE_UNUSED)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-sh_return_in_memory (tree type, tree fndecl)\n+sh_return_in_memory (const_tree type, const_tree fndecl)\n {\n   if (TARGET_SH5)\n     {\n@@ -8052,7 +8052,7 @@ sh_handle_renesas_attribute (tree *node ATTRIBUTE_UNUSED,\n \n /* True if __attribute__((renesas)) or -mrenesas.  */\n int\n-sh_attr_renesas_p (tree td)\n+sh_attr_renesas_p (const_tree td)\n {\n   if (TARGET_HITACHI)\n     return 1;"}, {"sha": "217948af08d885fa2300db725ab7ab3826499b5d", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #define __SPARC_PROTOS_H__\n \n #ifdef TREE_CODE\n-extern struct rtx_def *function_value (tree, enum machine_mode, int);\n+extern struct rtx_def *function_value (const_tree, enum machine_mode, int);\n extern void function_arg_advance (CUMULATIVE_ARGS *,\n \t\t\t\t  enum machine_mode, tree, int);\n extern struct rtx_def *function_arg (const CUMULATIVE_ARGS *,\n@@ -36,7 +36,7 @@ extern void sparc_va_start (tree, rtx);\n extern unsigned long sparc_type_code (tree);\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n-extern enum direction function_arg_padding (enum machine_mode, tree);\n+extern enum direction function_arg_padding (enum machine_mode, const_tree);\n #endif /* ARGS_SIZE_RTX */\n #endif /* TREE_CODE */\n "}, {"sha": "a219ee9bf69bb9be2341a12d92e7fd6b820797b5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -381,14 +381,14 @@ static rtx sparc_tls_got (void);\n static const char *get_some_local_dynamic_name (void);\n static int get_some_local_dynamic_name_1 (rtx *, void *);\n static bool sparc_rtx_costs (rtx, int, int, int *);\n-static bool sparc_promote_prototypes (tree);\n+static bool sparc_promote_prototypes (const_tree);\n static rtx sparc_struct_value_rtx (tree, int);\n-static bool sparc_return_in_memory (tree, tree);\n+static bool sparc_return_in_memory (const_tree, const_tree);\n static bool sparc_strict_argument_naming (CUMULATIVE_ARGS *);\n static tree sparc_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool sparc_vector_mode_supported_p (enum machine_mode);\n static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n-\t\t\t\t     enum machine_mode, tree, bool);\n+\t\t\t\t     enum machine_mode, const_tree, bool);\n static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree, bool);\n static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n@@ -494,13 +494,13 @@ static bool fpu_option_set = false;\n    no-op for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime\n    test for this value.  */\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n \n /* This is only needed for TARGET_ARCH64, but since PROMOTE_FUNCTION_MODE is a\n    no-op for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime\n    test for this value.  */\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n \n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES sparc_promote_prototypes\n@@ -4469,7 +4469,7 @@ init_cumulative_args (struct sparc_args *cum, tree fntype,\n    When a prototype says `char' or `short', really pass an `int'.  */\n \n static bool\n-sparc_promote_prototypes (tree fntype ATTRIBUTE_UNUSED)\n+sparc_promote_prototypes (const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return TARGET_ARCH32 ? true : false;\n }\n@@ -4681,17 +4681,17 @@ struct function_arg_record_value_parms\n static void function_arg_record_value_3\n  (HOST_WIDE_INT, struct function_arg_record_value_parms *);\n static void function_arg_record_value_2\n- (tree, HOST_WIDE_INT, struct function_arg_record_value_parms *, bool);\n+ (const_tree, HOST_WIDE_INT, struct function_arg_record_value_parms *, bool);\n static void function_arg_record_value_1\n- (tree, HOST_WIDE_INT, struct function_arg_record_value_parms *, bool);\n-static rtx function_arg_record_value (tree, enum machine_mode, int, int, int);\n+ (const_tree, HOST_WIDE_INT, struct function_arg_record_value_parms *, bool);\n+static rtx function_arg_record_value (const_tree, enum machine_mode, int, int, int);\n static rtx function_arg_union_value (int, enum machine_mode, int, int);\n \n /* A subroutine of function_arg_record_value.  Traverse the structure\n    recursively and determine how many registers will be required.  */\n \n static void\n-function_arg_record_value_1 (tree type, HOST_WIDE_INT startbitpos,\n+function_arg_record_value_1 (const_tree type, HOST_WIDE_INT startbitpos,\n \t\t\t     struct function_arg_record_value_parms *parms,\n \t\t\t     bool packed_p)\n {\n@@ -4847,7 +4847,7 @@ function_arg_record_value_3 (HOST_WIDE_INT bitpos,\n    to make that happen.  */\n \n static void\n-function_arg_record_value_2 (tree type, HOST_WIDE_INT startbitpos,\n+function_arg_record_value_2 (const_tree type, HOST_WIDE_INT startbitpos,\n \t\t\t     struct function_arg_record_value_parms *parms,\n \t\t\t     bool packed_p)\n {\n@@ -4954,7 +4954,7 @@ function_arg_record_value_2 (tree type, HOST_WIDE_INT startbitpos,\n    REGBASE is the regno of the base register for the parameter array.  */\n    \n static rtx\n-function_arg_record_value (tree type, enum machine_mode mode,\n+function_arg_record_value (const_tree type, enum machine_mode mode,\n \t\t\t   int slotno, int named, int regbase)\n {\n   HOST_WIDE_INT typesize = int_size_in_bytes (type);\n@@ -5327,7 +5327,7 @@ sparc_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static bool\n sparc_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-\t\t\t enum machine_mode mode, tree type,\n+\t\t\t enum machine_mode mode, const_tree type,\n \t\t\t bool named ATTRIBUTE_UNUSED)\n {\n   if (TARGET_ARCH32)\n@@ -5424,7 +5424,7 @@ function_arg_advance (struct sparc_args *cum, enum machine_mode mode,\n    argument slot.  */\n \n enum direction\n-function_arg_padding (enum machine_mode mode, tree type)\n+function_arg_padding (enum machine_mode mode, const_tree type)\n {\n   if (TARGET_ARCH64 && type != 0 && AGGREGATE_TYPE_P (type))\n     return upward;\n@@ -5437,7 +5437,7 @@ function_arg_padding (enum machine_mode mode, tree type)\n    Specify whether to return the return value in memory.  */\n \n static bool\n-sparc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+sparc_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   if (TARGET_ARCH32)\n     /* Original SPARC 32-bit ABI says that structures and unions,\n@@ -5545,7 +5545,7 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n    except that up to 32 bytes may be returned in registers.  */\n \n rtx\n-function_value (tree type, enum machine_mode mode, int incoming_p)\n+function_value (const_tree type, enum machine_mode mode, int incoming_p)\n {\n   /* Beware that the two values are swapped here wrt function_arg.  */\n   int regbase = (incoming_p"}, {"sha": "b00fc5d4efc2b7e16a3320e1146d3208e5c08df3", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -59,7 +59,7 @@ extern int spu_legitimate_address (enum machine_mode mode, rtx x,\n \t\t\t\t   int reg_ok_strict);\n extern rtx spu_legitimize_address (rtx x, rtx oldx, enum machine_mode mode);\n extern int spu_initial_elimination_offset (int from, int to);\n-extern rtx spu_function_value (tree type, tree func);\n+extern rtx spu_function_value (const_tree type, const_tree func);\n extern rtx spu_function_arg (int cum, enum machine_mode mode, tree type,\n \t\t\t     int named);\n extern void spu_va_start (tree valist, rtx nextarg);"}, {"sha": "4a9a139a3dea3df6c7b2a2dcb48a02f720a1cf69", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -113,8 +113,8 @@ static tree spu_handle_vector_attribute (tree * node, tree name, tree args,\n \t\t\t\t\t int flags,\n \t\t\t\t\t unsigned char *no_add_attrs);\n static int spu_naked_function_p (tree func);\n-static unsigned char spu_pass_by_reference (int *cum, enum machine_mode mode,\n-\t\t\t\t\t    tree type, unsigned char named);\n+static unsigned char spu_pass_by_reference (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t\t\t    const_tree type, unsigned char named);\n static tree spu_build_builtin_va_list (void);\n static tree spu_gimplify_va_arg_expr (tree valist, tree type, tree * pre_p,\n \t\t\t\t      tree * post_p);\n@@ -128,7 +128,7 @@ static unsigned char spu_rtx_costs (rtx x, int code, int outer_code,\n \t\t\t\t    int *total);\n static unsigned char spu_function_ok_for_sibcall (tree decl, tree exp);\n static void spu_init_libfuncs (void);\n-static bool spu_return_in_memory (tree type, tree fntype);\n+static bool spu_return_in_memory (const_tree type, const_tree fntype);\n static void fix_range (const char *);\n static void spu_encode_section_info (tree, rtx, int);\n static tree spu_builtin_mul_widen_even (tree);\n@@ -3020,7 +3020,7 @@ spu_initial_elimination_offset (int from, int to)\n }\n \n rtx\n-spu_function_value (tree type, tree func ATTRIBUTE_UNUSED)\n+spu_function_value (const_tree type, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n   int byte_size = ((mode == BLKmode)\n@@ -3102,7 +3102,7 @@ spu_function_arg (CUMULATIVE_ARGS cum,\n static bool\n spu_pass_by_reference (CUMULATIVE_ARGS * cum ATTRIBUTE_UNUSED,\n \t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t       tree type, bool named ATTRIBUTE_UNUSED)\n+\t\t       const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   return type && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST;\n }\n@@ -4396,7 +4396,7 @@ spu_gen_subreg (enum machine_mode mode, rtx x)\n }\n \n static bool\n-spu_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+spu_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return (TYPE_MODE (type) == BLKmode\n \t  && ((type) == 0"}, {"sha": "c3c1c7aeec5d283783fbd2e46a3f1906be96d57f", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -44,7 +44,7 @@ extern rtx xstormy16_function_arg\n #if defined (TREE_CODE) && defined (RTX_CODE)\n extern void xstormy16_expand_builtin_va_start (tree, rtx);\n extern void xstormy16_initialize_trampoline (rtx, rtx, rtx);\n-extern rtx xstormy16_function_value (tree, tree);\n+extern rtx xstormy16_function_value (const_tree, const_tree);\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "b41440e6d4eadaa3df41d275d66e7bb17eead7c0", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -58,7 +58,7 @@ static void xstormy16_init_builtins (void);\n static rtx xstormy16_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static bool xstormy16_rtx_costs (rtx, int, int, int *);\n static int xstormy16_address_cost (rtx);\n-static bool xstormy16_return_in_memory (tree, tree);\n+static bool xstormy16_return_in_memory (const_tree, const_tree);\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -1515,7 +1515,7 @@ xstormy16_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n /* Worker function for FUNCTION_VALUE.  */\n \n rtx\n-xstormy16_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+xstormy16_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   mode = TYPE_MODE (valtype);\n@@ -2637,9 +2637,9 @@ xstormy16_reorg (void)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-xstormy16_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n-  HOST_WIDE_INT size = int_size_in_bytes (type);\n+  const HOST_WIDE_INT size = int_size_in_bytes (type);\n   return (size == -1 || size > UNITS_PER_WORD * NUM_ARGUMENT_REGISTERS);\n }\n \f\n@@ -2670,11 +2670,11 @@ xstormy16_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n #define TARGET_GIMPLIFY_VA_ARG_EXPR xstormy16_expand_builtin_va_arg\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY xstormy16_return_in_memory"}, {"sha": "85991db47e37c3437b70b15fceeb590d06113111", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -66,11 +66,11 @@ static void v850_asm_init_sections   (void);\n static section *v850_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void v850_encode_data_area    (tree, rtx);\n static void v850_encode_section_info (tree, rtx, int);\n-static bool v850_return_in_memory    (tree, tree);\n+static bool v850_return_in_memory    (const_tree, const_tree);\n static void v850_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static bool v850_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t    tree, bool);\n+\t\t\t\t    const_tree, bool);\n static int v850_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n \n@@ -143,7 +143,7 @@ static GTY(()) section *zbss_section;\n #define TARGET_MACHINE_DEPENDENT_REORG v850_reorg\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY v850_return_in_memory\n@@ -223,7 +223,7 @@ v850_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n \f\n static bool\n v850_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode, tree type,\n+\t\t\tenum machine_mode mode, const_tree type,\n \t\t\tbool named ATTRIBUTE_UNUSED)\n {\n   unsigned HOST_WIDE_INT size;\n@@ -2929,7 +2929,7 @@ v850_select_section (tree exp,\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-v850_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+v850_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   /* Return values > 8 bytes in length in memory.  */\n   return int_size_in_bytes (type) > 8 || TYPE_MODE (type) == BLKmode;"}, {"sha": "6cfd7e0d1dc33cbf5626f472c4b5681be0ec6f08", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -82,7 +82,7 @@ static rtx vax_struct_value_rtx (tree, int);\n #define TARGET_ADDRESS_COST vax_address_cost\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX vax_struct_value_rtx"}, {"sha": "cc37a7f38e7944610fb6dc18129551c1a4211eac", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -130,7 +130,7 @@ static rtx gen_float_relational (enum rtx_code, rtx, rtx);\n static rtx gen_conditional_move (rtx);\n static rtx fixup_subreg_mem (rtx);\n static struct machine_function * xtensa_init_machine_status (void);\n-static bool xtensa_return_in_msb (tree);\n+static bool xtensa_return_in_msb (const_tree);\n static void printx (FILE *, signed int);\n static void xtensa_function_epilogue (FILE *, HOST_WIDE_INT);\n static rtx xtensa_builtin_saveregs (void);\n@@ -140,7 +140,7 @@ static section *xtensa_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t   unsigned HOST_WIDE_INT);\n static bool xtensa_rtx_costs (rtx, int, int, int *);\n static tree xtensa_build_builtin_va_list (void);\n-static bool xtensa_return_in_memory (tree, tree);\n+static bool xtensa_return_in_memory (const_tree, const_tree);\n static tree xtensa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static void xtensa_init_builtins (void);\n static tree xtensa_fold_builtin (tree, tree, bool);\n@@ -179,11 +179,11 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #define TARGET_BUILD_BUILTIN_VA_LIST xtensa_build_builtin_va_list\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY xtensa_return_in_memory\n@@ -1842,7 +1842,7 @@ function_arg_boundary (enum machine_mode mode, tree type)\n \n \n static bool\n-xtensa_return_in_msb (tree valtype)\n+xtensa_return_in_msb (const_tree valtype)\n {\n   return (TARGET_BIG_ENDIAN\n \t  && AGGREGATE_TYPE_P (valtype)\n@@ -3100,7 +3100,7 @@ xtensa_rtx_costs (rtx x, int code, int outer_code, int *total)\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n-xtensa_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+xtensa_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   return ((unsigned HOST_WIDE_INT) int_size_in_bytes (type)\n \t  > 4 * UNITS_PER_WORD);"}, {"sha": "c669e3f17588268060b5e71bc65ebcde94037bb4", "filename": "gcc/explow.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -778,10 +778,10 @@ copy_to_suggested_reg (rtx x, rtx target, enum machine_mode mode)\n #endif\n \n enum machine_mode\n-promote_mode (tree type, enum machine_mode mode, int *punsignedp,\n+promote_mode (const_tree type, enum machine_mode mode, int *punsignedp,\n \t      int for_call ATTRIBUTE_UNUSED)\n {\n-  enum tree_code code = TREE_CODE (type);\n+  const enum tree_code code = TREE_CODE (type);\n   int unsignedp = *punsignedp;\n \n #ifndef PROMOTE_MODE\n@@ -1476,7 +1476,7 @@ probe_stack_range (HOST_WIDE_INT first, rtx size)\n    and 0 otherwise.  */\n \n rtx\n-hard_function_value (tree valtype, tree func, tree fntype,\n+hard_function_value (const_tree valtype, const_tree func, const_tree fntype,\n \t\t     int outgoing ATTRIBUTE_UNUSED)\n {\n   rtx val;"}, {"sha": "ed5b84b004e028831748555e098591497f772537", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -567,7 +567,7 @@ extern HOST_WIDE_INT int_expr_size (tree);\n \n /* Return an rtx that refers to the value returned by a function\n    in its original home.  This becomes invalid if any more code is emitted.  */\n-extern rtx hard_function_value (tree, tree, tree, int);\n+extern rtx hard_function_value (const_tree, const_tree, const_tree, int);\n \n extern rtx prepare_call_address (rtx, rtx, rtx *, int, int);\n \n@@ -688,7 +688,7 @@ extern rtx force_reg (enum machine_mode, rtx);\n extern rtx force_not_mem (rtx);\n \n /* Return mode and signedness to use when object is promoted.  */\n-extern enum machine_mode promote_mode (tree, enum machine_mode, int *, int);\n+extern enum machine_mode promote_mode (const_tree, enum machine_mode, int *, int);\n \n /* Remove some bytes from the stack.  An rtx says how many.  */\n extern void adjust_stack (rtx);"}, {"sha": "aac9a9e3c0fa18818ca90d1ab0f0f75fbf3575f5", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1523,7 +1523,9 @@ profile_function (FILE *file ATTRIBUTE_UNUSED)\n \n #if defined(ASM_OUTPUT_REG_PUSH)\n   if (sval && svrtx != NULL_RTX && REG_P (svrtx))\n-    ASM_OUTPUT_REG_PUSH (file, REGNO (svrtx));\n+    {\n+      ASM_OUTPUT_REG_PUSH (file, REGNO (svrtx));\n+    }\n #endif\n \n #if defined(STATIC_CHAIN_INCOMING_REGNUM) && defined(ASM_OUTPUT_REG_PUSH)\n@@ -1554,7 +1556,9 @@ profile_function (FILE *file ATTRIBUTE_UNUSED)\n \n #if defined(ASM_OUTPUT_REG_PUSH)\n   if (sval && svrtx != NULL_RTX && REG_P (svrtx))\n-    ASM_OUTPUT_REG_POP (file, REGNO (svrtx));\n+    {\n+      ASM_OUTPUT_REG_POP (file, REGNO (svrtx));\n+    }\n #endif\n }\n "}, {"sha": "015ad131f8b7cb1901d74b562a2f7bdd868fbf0a", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1742,17 +1742,17 @@ struct tree_opt_pass pass_instantiate_virtual_regs =\n    EXP may be a type node or an expression (whose type is tested).  */\n \n int\n-aggregate_value_p (tree exp, tree fntype)\n+aggregate_value_p (const_tree exp, const_tree fntype)\n {\n   int i, regno, nregs;\n   rtx reg;\n \n-  tree type = (TYPE_P (exp)) ? exp : TREE_TYPE (exp);\n+  const_tree type = (TYPE_P (exp)) ? exp : TREE_TYPE (exp);\n \n   /* DECL node associated with FNTYPE when relevant, which we might need to\n      check for by-invisible-reference returns, typically for CALL_EXPR input\n      EXPressions.  */\n-  tree fndecl = NULL_TREE;\n+  const_tree fndecl = NULL_TREE;\n   \n   if (fntype)\n     switch (TREE_CODE (fntype))"}, {"sha": "fe6f8ddc961216bddfacadc93ad827efe4b148e0", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -201,6 +201,12 @@ hook_bool_tree_true (tree a ATTRIBUTE_UNUSED)\n   return true;\n }\n \n+bool\n+hook_bool_const_tree_true (const_tree a ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n bool\n hook_bool_tree_tree_false (tree a ATTRIBUTE_UNUSED, tree b ATTRIBUTE_UNUSED)\n {"}, {"sha": "61269f3ea43a28012156e3ca659babf52cd5d449", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -33,6 +33,7 @@ extern bool hook_bool_mode_rtx_true (enum machine_mode, rtx);\n extern bool hook_bool_tree_false (tree);\n extern bool hook_bool_const_tree_false (const_tree);\n extern bool hook_bool_tree_true (tree);\n+extern bool hook_bool_const_tree_true (const_tree);\n extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t\ttree);\n extern bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,"}, {"sha": "d77cfae91838b8132f87802ac4ef578bcdec3837", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -259,7 +259,7 @@ do { fprintf (asm_out_file, \"\\t.tag\\t\");\t\\\n /* Set the sdb tag identifier string for TYPE to NAME.  */\n \n #define SET_KNOWN_TYPE_TAG(TYPE, NAME) \\\n-  TYPE_SYMTAB_POINTER (TYPE) = (char *)(NAME)\n+  TYPE_SYMTAB_POINTER (TYPE) = (const char *)(NAME)\n \n /* Return the name (a string) of the struct, union or enum tag\n    described by the TREE_LIST node LINK.  This is 0 for an anonymous one.  */\n@@ -580,7 +580,7 @@ plain_type_1 (tree type, int level)\n     case QUAL_UNION_TYPE:\n     case ENUMERAL_TYPE:\n       {\n-\tchar *tag;\n+\tconst char *tag;\n #ifdef SDB_ALLOW_FORWARD_REFERENCES\n \tsdbout_record_type_name (type);\n #endif"}, {"sha": "aad7620ca718ca949476d4efbda68010a85ac183", "filename": "gcc/target-def.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -532,13 +532,13 @@\n \n #define TARGET_ARM_EABI_UNWINDER false\n \n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_false\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_false\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_false\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_false\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_false\n \n #define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n #define TARGET_RETURN_IN_MEMORY default_return_in_memory\n-#define TARGET_RETURN_IN_MSB hook_bool_tree_false\n+#define TARGET_RETURN_IN_MSB hook_bool_const_tree_false\n \n #define TARGET_EXPAND_BUILTIN_SAVEREGS default_expand_builtin_saveregs\n #define TARGET_SETUP_INCOMING_VARARGS default_setup_incoming_varargs"}, {"sha": "ad92d93e7ecfbc5e2c06eff296654bf3cb5addb1", "filename": "gcc/target.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -749,18 +749,18 @@ struct gcc_target\n \n   /* Functions relating to calls - argument passing, returns, etc.  */\n   struct calls {\n-    bool (*promote_function_args) (tree fntype);\n-    bool (*promote_function_return) (tree fntype);\n-    bool (*promote_prototypes) (tree fntype);\n+    bool (*promote_function_args) (const_tree fntype);\n+    bool (*promote_function_return) (const_tree fntype);\n+    bool (*promote_prototypes) (const_tree fntype);\n     rtx (*struct_value_rtx) (tree fndecl, int incoming);\n-    bool (*return_in_memory) (tree type, tree fndecl);\n-    bool (*return_in_msb) (tree type);\n+    bool (*return_in_memory) (const_tree type, const_tree fndecl);\n+    bool (*return_in_msb) (const_tree type);\n \n     /* Return true if a parameter must be passed by reference.  TYPE may\n        be null if this is a libcall.  CA may be null if this query is\n        from __builtin_va_arg.  */\n     bool (*pass_by_reference) (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n-\t\t\t       tree type, bool named_arg);\n+\t\t\t       const_tree type, bool named_arg);\n \n     rtx (*expand_builtin_saveregs) (void);\n     /* Returns pretend_argument_size.  */\n@@ -781,13 +781,13 @@ struct gcc_target\n        but must be passed on the stack.  */\n     /* ??? This predicate should be applied strictly after pass-by-reference.\n        Need audit to verify that this is the case.  */\n-    bool (* must_pass_in_stack) (enum machine_mode mode, tree t);\n+    bool (* must_pass_in_stack) (enum machine_mode mode, const_tree t);\n \n     /* Return true if type TYPE, mode MODE, which is passed by reference,\n        should have the object copy generated by the callee rather than\n        the caller.  It is never called for TYPE requiring constructors.  */\n     bool (* callee_copies) (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n-\t\t\t    tree type, bool named);\n+\t\t\t    const_tree type, bool named);\n \n     /* Return zero for arguments passed entirely on the stack or entirely\n        in registers.  If passed in both, return the number of bytes passed\n@@ -802,7 +802,7 @@ struct gcc_target\n \n     /* Return an rtx for the return value location of the function\n        specified by FN_DECL_OR_TYPE with a return type of RET_TYPE.  */\n-    rtx (*function_value) (tree ret_type, tree fn_decl_or_type,\n+    rtx (*function_value) (const_tree ret_type, const_tree fn_decl_or_type,\n \t\t\t   bool outgoing);\n \n     /* Return an rtx for the argument pointer incoming to the"}, {"sha": "57cf0e52f3c9f01e1fd3411470d1830b6534b453", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -84,8 +84,8 @@ default_cc_modes_compatible (enum machine_mode m1, enum machine_mode m2)\n }\n \n bool\n-default_return_in_memory (tree type,\n-\t\t\t  tree fntype ATTRIBUTE_UNUSED)\n+default_return_in_memory (const_tree type,\n+\t\t\t  const_tree fntype ATTRIBUTE_UNUSED)\n {\n #ifndef RETURN_IN_MEMORY\n   return (TYPE_MODE (type) == BLKmode);\n@@ -229,7 +229,7 @@ default_cxx_get_cookie_size (tree type)\n \n bool\n hook_pass_by_reference_must_pass_in_stack (CUMULATIVE_ARGS *c ATTRIBUTE_UNUSED,\n-\tenum machine_mode mode ATTRIBUTE_UNUSED, tree type ATTRIBUTE_UNUSED,\n+\tenum machine_mode mode ATTRIBUTE_UNUSED, const_tree type ATTRIBUTE_UNUSED,\n \tbool named_arg ATTRIBUTE_UNUSED)\n {\n   return targetm.calls.must_pass_in_stack (mode, type);\n@@ -241,7 +241,7 @@ hook_pass_by_reference_must_pass_in_stack (CUMULATIVE_ARGS *c ATTRIBUTE_UNUSED,\n bool\n hook_callee_copies_named (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t  tree type ATTRIBUTE_UNUSED, bool named)\n+\t\t\t  const_tree type ATTRIBUTE_UNUSED, bool named)\n {\n   return named;\n }\n@@ -382,7 +382,7 @@ bool\n hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false (\n \tCUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\ttree type ATTRIBUTE_UNUSED, bool named ATTRIBUTE_UNUSED)\n+\tconst_tree type ATTRIBUTE_UNUSED, bool named ATTRIBUTE_UNUSED)\n {\n   return false;\n }\n@@ -391,7 +391,7 @@ bool\n hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true (\n \tCUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\ttree type ATTRIBUTE_UNUSED, bool named ATTRIBUTE_UNUSED)\n+\tconst_tree type ATTRIBUTE_UNUSED, bool named ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n@@ -516,8 +516,8 @@ hook_bool_rtx_commutative_p (rtx x, int outer_code ATTRIBUTE_UNUSED)\n }\n \n rtx\n-default_function_value (tree ret_type ATTRIBUTE_UNUSED,\n-\t\t\ttree fn_decl_or_type,\n+default_function_value (const_tree ret_type ATTRIBUTE_UNUSED,\n+\t\t\tconst_tree fn_decl_or_type,\n \t\t\tbool outgoing ATTRIBUTE_UNUSED)\n {\n   /* The old interface doesn't handle receiving the function type.  */"}, {"sha": "2df1dabaceb4bae3c6884cca04b753d0c6a72c6e", "filename": "gcc/targhooks.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -22,7 +22,7 @@ extern void default_external_libcall (rtx);\n extern enum machine_mode default_cc_modes_compatible (enum machine_mode,\n \t\t\t\t\t\t      enum machine_mode);\n \n-extern bool default_return_in_memory (tree, tree);\n+extern bool default_return_in_memory (const_tree, const_tree);\n \n extern rtx default_expand_builtin_saveregs (void);\n extern void default_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n@@ -47,9 +47,9 @@ extern tree default_cxx_guard_type (void);\n extern tree default_cxx_get_cookie_size (tree);\n \n extern bool hook_pass_by_reference_must_pass_in_stack\n-  (CUMULATIVE_ARGS *, enum machine_mode mode, tree, bool);\n+  (CUMULATIVE_ARGS *, enum machine_mode mode, const_tree, bool);\n extern bool hook_callee_copies_named\n-  (CUMULATIVE_ARGS *ca, enum machine_mode, tree, bool);\n+  (CUMULATIVE_ARGS *ca, enum machine_mode, const_tree, bool);\n \n extern void default_unwind_emit (FILE *, rtx);\n \n@@ -75,15 +75,15 @@ extern bool hook_bool_CUMULATIVE_ARGS_false (CUMULATIVE_ARGS *);\n extern bool hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS *);\n \n extern bool hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false\n-  (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n+  (CUMULATIVE_ARGS *, enum machine_mode, const_tree, bool);\n extern bool hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n-  (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n+  (CUMULATIVE_ARGS *, enum machine_mode, const_tree, bool);\n extern int hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n   (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n extern const char *hook_invalid_arg_for_unprototyped_fn\n   (tree, tree, tree);\n extern bool hook_bool_rtx_commutative_p (rtx, int);\n-extern rtx default_function_value (tree, tree, bool);\n+extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_internal_arg_pointer (void);\n extern enum reg_class default_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t\tenum machine_mode,"}, {"sha": "dbece90fc5b6cef44d827f2444dfb6ddf645e269", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1647,6 +1647,7 @@ typedef struct equiv_class_label\n   bitmap labels;\n   hashval_t hashcode;\n } *equiv_class_label_t;\n+typedef const struct equiv_class_label *const_equiv_class_label_t;\n \n /* A hashtable for mapping a bitmap of labels->pointer equivalence\n    classes.  */\n@@ -1661,7 +1662,7 @@ static htab_t location_equiv_class_table;\n static hashval_t\n equiv_class_label_hash (const void *p)\n {\n-  const equiv_class_label_t ecl = (equiv_class_label_t) p;\n+  const_equiv_class_label_t const ecl = (const_equiv_class_label_t) p;\n   return ecl->hashcode;\n }\n \n@@ -1670,8 +1671,8 @@ equiv_class_label_hash (const void *p)\n static int\n equiv_class_label_eq (const void *p1, const void *p2)\n {\n-  const equiv_class_label_t eql1 = (equiv_class_label_t) p1;\n-  const equiv_class_label_t eql2 = (equiv_class_label_t) p2;\n+  const_equiv_class_label_t const eql1 = (const_equiv_class_label_t) p1;\n+  const_equiv_class_label_t const eql2 = (const_equiv_class_label_t) p2;\n   return bitmap_equal_p (eql1->labels, eql2->labels);\n }\n "}, {"sha": "3323dc3825d6176e19f835e514961c66aeed1eda", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -1378,7 +1378,7 @@ new_stmt_vec_info (tree stmt, loop_vec_info loop_vinfo)\n static bool\n bb_in_loop_p (const_basic_block bb, const void *data)\n {\n-  struct loop *loop = (struct loop *)data;\n+  const struct loop *const loop = (const struct loop *)data;\n   if (flow_bb_inside_loop_p (loop, bb))\n     return true;\n   return false;"}, {"sha": "dbc13af71b1d7bfdb83b8264cab22380076799f8", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -7973,7 +7973,7 @@ range_in_array_bounds_p (tree ref)\n    location.  */\n \n bool\n-needs_to_live_in_memory (tree t)\n+needs_to_live_in_memory (const_tree t)\n {\n   if (TREE_CODE (t) == SSA_NAME)\n     t = SSA_NAME_VAR (t);"}, {"sha": "921bfad66a32a619584dd9a058a672a2b82562b0", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -2311,7 +2311,7 @@ struct tree_type GTY(())\n   tree reference_to;\n   union tree_type_symtab {\n     int GTY ((tag (\"0\"))) address;\n-    char * GTY ((tag (\"1\"))) pointer;\n+    const char * GTY ((tag (\"1\"))) pointer;\n     struct die_struct * GTY ((tag (\"2\"))) die;\n   } GTY ((desc (\"debug_hooks == &sdb_debug_hooks ? 1 : debug_hooks == &dwarf2_debug_hooks ? 2 : 0\"),\n \t  descbits (\"2\"))) symtab;\n@@ -4803,7 +4803,7 @@ extern void expand_function_start (tree);\n extern void stack_protect_prologue (void);\n extern void stack_protect_epilogue (void);\n extern void recompute_tree_invariant_for_addr_expr (tree);\n-extern bool needs_to_live_in_memory (tree);\n+extern bool needs_to_live_in_memory (const_tree);\n extern tree reconstruct_complex_type (tree, tree);\n \n extern int real_onep (const_tree);\n@@ -4858,7 +4858,7 @@ extern void free_temp_slots (void);\n extern void pop_temp_slots (void);\n extern void push_temp_slots (void);\n extern void preserve_temp_slots (rtx);\n-extern int aggregate_value_p (tree, tree);\n+extern int aggregate_value_p (const_tree, const_tree);\n extern void push_function_context (void);\n extern void pop_function_context (void);\n extern void push_function_context_to (tree);\n@@ -4921,8 +4921,8 @@ extern int call_expr_flags (const_tree);\n \n extern int setjmp_call_p (const_tree);\n extern bool alloca_call_p (const_tree);\n-extern bool must_pass_in_stack_var_size (enum machine_mode, tree);\n-extern bool must_pass_in_stack_var_size_or_pad (enum machine_mode, tree);\n+extern bool must_pass_in_stack_var_size (enum machine_mode, const_tree);\n+extern bool must_pass_in_stack_var_size_or_pad (enum machine_mode, const_tree);\n \n /* In attribs.c.  */\n "}, {"sha": "a27e44cbc18b6ccd087c66114ca526ab5d9601ba", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586de2189808556ae88977242de6ef5cf6ea39fd/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=586de2189808556ae88977242de6ef5cf6ea39fd", "patch": "@@ -149,13 +149,13 @@ static char *full_name (const char *);\n static unsigned int lookup_filename (const char *);\n static void addr_const_to_string (char *, rtx);\n static int write_debug_header (DST_HEADER *, const char *, int);\n-static int write_debug_addr (char *, const char *, int);\n+static int write_debug_addr (const char *, const char *, int);\n static int write_debug_data1 (unsigned int, const char *, int);\n static int write_debug_data2 (unsigned int, const char *, int);\n static int write_debug_data4 (unsigned long, const char *, int);\n static int write_debug_data8 (unsigned long long, const char *, int);\n-static int write_debug_delta4 (char *, char *, const char *, int);\n-static int write_debug_string (char *, const char *, int);\n+static int write_debug_delta4 (const char *, const char *, const char *, int);\n+static int write_debug_string (const char *, const char *, int);\n static int write_modbeg (int);\n static int write_modend (int);\n static int write_rtnbeg (int, int);\n@@ -381,7 +381,7 @@ static char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       register int slen = strlen(P);\t\t\\\n-      register char *p = (P);\t\t\t\\\n+      register const char *p = (P);\t\t\\\n       register int i;\t\t\t\t\\\n       fprintf (FILE, \"\\t.ascii \\\"\");\t\t\\\n       for (i = 0; i < slen; i++)\t\t\\\n@@ -579,7 +579,7 @@ write_debug_header (DST_HEADER *header, const char *comment, int dosizeonly)\n    nonzero.  */\n \n static int\n-write_debug_addr (char *symbol, const char *comment, int dosizeonly)\n+write_debug_addr (const char *symbol, const char *comment, int dosizeonly)\n {\n   if (!dosizeonly)\n     {\n@@ -668,8 +668,8 @@ write_debug_data8 (unsigned long long data8, const char *comment,\n    DOSIZEONLY is nonzero.  */\n \n static int\n-write_debug_delta4 (char *label1, char *label2, const char *comment,\n-\t\t    int dosizeonly)\n+write_debug_delta4 (const char *label1, const char *label2,\n+\t\t    const char *comment, int dosizeonly)\n {\n   if (!dosizeonly)\n     {\n@@ -687,7 +687,7 @@ write_debug_delta4 (char *label1, char *label2, const char *comment,\n    nonzero.  */\n \n static int\n-write_debug_string (char *string, const char *comment, int dosizeonly)\n+write_debug_string (const char *string, const char *comment, int dosizeonly)\n {\n   if (!dosizeonly)\n     {\n@@ -788,7 +788,7 @@ write_modend (int dosizeonly)\n static int\n write_rtnbeg (int rtnnum, int dosizeonly)\n {\n-  char *rtnname;\n+  const char *rtnname;\n   int rtnnamelen;\n   char *rtnentryname;\n   int totsize = 0;\n@@ -797,7 +797,7 @@ write_rtnbeg (int rtnnum, int dosizeonly)\n   DST_PROLOG prolog;\n   vms_func_ref fde = &func_table[rtnnum];\n \n-  rtnname = (char *)fde->vms_func_name;\n+  rtnname = fde->vms_func_name;\n   rtnnamelen = strlen (rtnname);\n   rtnentryname = concat (rtnname, \"..en\", NULL);\n \n@@ -825,7 +825,7 @@ write_rtnbeg (int rtnnum, int dosizeonly)\n \t\t\t\t   dosizeonly);\n       totsize += write_debug_data1 (strlen (go), \"length of main_name\",\n \t\t\t\t    dosizeonly);\n-      totsize += write_debug_string ((char *) go, \"main name\", dosizeonly);\n+      totsize += write_debug_string (go, \"main name\", dosizeonly);\n     }\n \n   /* The header length never includes the length byte.  */\n@@ -1441,7 +1441,7 @@ lookup_filename (const char *file_name)\n   static unsigned int last_file_lookup_index = 0;\n   register char *fn;\n   register unsigned i;\n-  char *fnam;\n+  const char *fnam;\n   long long cdt;\n   long ebk;\n   short ffb;\n@@ -1480,7 +1480,7 @@ lookup_filename (const char *file_name)\n       ebk = 0;\n       ffb = 0;\n       rfo = 0;\n-      fnam = (char *) \"\";\n+      fnam = \"\";\n       flen = 0;\n     }\n "}]}