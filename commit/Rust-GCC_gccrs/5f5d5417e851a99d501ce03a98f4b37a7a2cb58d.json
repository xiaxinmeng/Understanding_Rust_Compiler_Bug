{"sha": "5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1ZDU0MTdlODUxYTk5ZDUwMWNlMDNhOThmNGIzN2E3YTJjYjU4ZA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-10-10T18:29:33Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-10-10T18:29:33Z"}, "message": "aix52.h: New file.\n\n        * config/rs6000/aix52.h: New file.\n        * config/rs6000/t-aix52: New File.\n        * config.gcc (rs6000-ibm-aix5.1.*): New entry.\n        (rs6000-ibm-aix[56789].*): Default to AIX 5.2.\n\nFrom-SVN: r58021", "tree": {"sha": "d80c54e2d59e33096f1d490966b1b7f8650ef78f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d80c54e2d59e33096f1d490966b1b7f8650ef78f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/comments", "author": null, "committer": null, "parents": [{"sha": "7eafc329d3292e695770b39b0412ac5728b52c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eafc329d3292e695770b39b0412ac5728b52c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eafc329d3292e695770b39b0412ac5728b52c13"}], "stats": {"total": 260, "additions": 259, "deletions": 1}, "files": [{"sha": "2ec22582d7a740d63c417eda21e9f36e48b83d7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "patch": "@@ -1,3 +1,10 @@\n+2002-10-10  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/aix52.h: New file.\n+\t* config/rs6000/t-aix52: New File.\n+\t* config.gcc (rs6000-ibm-aix5.1.*): New entry.\n+\t(rs6000-ibm-aix[56789].*): Default to AIX 5.2.\n+\n Thu Oct 10 19:37:54 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/5610"}, {"sha": "8085d6598d06aeb453840d3996784b94266d8da6", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "patch": "@@ -2132,14 +2132,22 @@ rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n \tthread_file='aix'\n \textra_headers=\n \t;;\n-rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n+rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n \txm_defines=POSIX\n \ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix51.h rs6000/xcoff.h\"\n \ttmake_file=rs6000/t-aix43\n \tuse_collect2=yes\n \tthread_file='aix'\n \textra_headers=\n \t;;\n+rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n+\txm_defines=POSIX\n+\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix52.h rs6000/xcoff.h\"\n+\ttmake_file=rs6000/t-aix52\n+\tuse_collect2=yes\n+\tthread_file='aix'\n+\textra_headers=\n+\t;;\n rs6000-ibm-aix*)\n \txm_defines=POSIX\n \ttm_file=\"${tm_file} rs6000/aix.h rs6000/xcoff.h\""}, {"sha": "b61cc3057e251486bfbca733832accad6ad4c806", "filename": "gcc/config/rs6000/aix52.h", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "patch": "@@ -0,0 +1,191 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V5.2.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+/* AIX V5 and above support 64-bit executables.  */\n+#undef  SUBSUBTARGET_SWITCHES\n+#define SUBSUBTARGET_SWITCHES\t\t\t\t\t\\\n+  {\"aix64\", \t\tMASK_64BIT | MASK_POWERPC64 | MASK_POWERPC,\t\\\n+   N_(\"Compile for 64-bit pointers\") },\t\t\t\t\t\\\n+  {\"aix32\",\t\t- (MASK_64BIT | MASK_POWERPC64),\t\t\\\n+   N_(\"Compile for 32-bit pointers\") },\t\t\t\t\t\\\n+  {\"pe\",\t\t0,\t\t\t\t\t\t\\\n+   N_(\"Support message passing with the Parallel Environment\") },\n+\n+/* Sometimes certain combinations of command options do not make sense\n+   on a particular target machine.  You can define a macro\n+   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n+   defined, is executed once just after all the command options have\n+   been parsed.\n+\n+   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control.  */\n+\n+#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n+      warning (\"-maix64 and POWER architecture are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      warning (\"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 -mppc64} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amonst the various targets\n+   for handling -mcpu=xxx switches.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{mpowerpc64: -mppc64} \\\n+  %{!mpower64: %(asm_default)}}} \\\n+%{mcpu=power3: -m604} \\\n+%{mcpu=power4: -m604} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -mppc} \\\n+%{mcpu=630: -m604}\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()      \\\n+  do                                  \\\n+    {                                 \\\n+      builtin_define (\"_IBMR2\");      \\\n+      builtin_define (\"_POWER\");      \\\n+      builtin_define (\"_LONG_LONG\");  \\\n+      builtin_define (\"_AIX\");        \\\n+      builtin_define (\"_AIX32\");      \\\n+      builtin_define (\"_AIX41\");      \\\n+      builtin_define (\"_AIX43\");      \\\n+      builtin_define (\"_AIX51\");      \\\n+      builtin_define (\"_AIX52\");      \\\n+      builtin_assert (\"system=unix\"); \\\n+      builtin_assert (\"system=aix\");  \\\n+    }                                 \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  */\n+#undef CPLUSPLUS_CPP_SPEC                       \n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_XOPEN_SOURCE=500\t\t\t\t\\\n+   -D_XOPEN_SOURCE_EXTENDED=1\t\t\t\\\n+   -D_LARGE_FILE_API\t\t\t\t\\\n+   -D_ALL_SOURCE\t\t\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC630\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER4\n+\n+#undef  TARGET_POWER\n+#define TARGET_POWER 0\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L/lib/profiled -L/usr/lib/profiled}\\\n+   %{p:-L/lib/profiled -L/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{mpe:-L/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro} -bnodelcsect\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+   %{!maix64:\\\n+     %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\"\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+#define MAX_WCHAR_TYPE_SIZE 32\n+\n+/* AIX V5 uses PowerPC nop (ori 0,0,0) instruction as call glue for PowerPC\n+   and \"cror 31,31,31\" for POWER architecture.  */\n+\n+#undef RS6000_CALL_GLUE\n+#define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\""}, {"sha": "97e1e0795081bc7c92d0b8a896d0c3cdb728b8a3", "filename": "gcc/config/rs6000/t-aix52", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2Fconfig%2Frs6000%2Ft-aix52", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5d5417e851a99d501ce03a98f4b37a7a2cb58d/gcc%2Fconfig%2Frs6000%2Ft-aix52", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix52?ref=5f5d5417e851a99d501ce03a98f4b37a7a2cb58d", "patch": "@@ -0,0 +1,52 @@\n+# We want fine grained libraries, so use the new code to build the\n+# floating point emulation libraries.\n+FPBIT = fp-bit.c\n+DPBIT = dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# Build the libraries for pthread and all of the \n+# different processor models\n+\n+MULTILIB_OPTIONS\t= pthread maix64\n+\n+MULTILIB_DIRNAMES\t= pthread ppc64\n+\n+MULTILIB_MATCHES\t= \n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+# Build a shared libgcc library.\n+SHLIB_EXT = .a\n+SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n+\t-Wl,-bE:@shlib_map_file@ -o @multilib_dir@/shr.o \\\n+\t@multilib_flags@ @shlib_objs@ -lc \\\n+\t`case @shlib_base_name@ in \\\n+\t*pthread*) echo -L/usr/lib/threads -lpthreads -lc_r /usr/lib/libc.a ;; \\\n+\t*) echo -lc ;; esac` ; \\\n+\trm -f tmp-@shlib_base_name@.a ; \\\n+\t$(AR_CREATE_FOR_TARGET) tmp-@shlib_base_name@.a @multilib_dir@/shr.o ; \\\n+\tmv tmp-@shlib_base_name@.a @shlib_base_name@.a ; \\\n+\trm -f @multilib_dir@/shr.o\n+# $(slibdir) double quoted to protect it from expansion while building\n+# libgcc.mk.  We want this delayed until actual install time.\n+SHLIB_INSTALL = $(INSTALL_DATA) @shlib_base_name@.a $$(slibdir)/\n+SHLIB_LIBS = -lc `case @shlib_base_name@ in *pthread*) echo -lpthread ;; esac`\n+SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n+SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n+SHLIB_NM_FLAGS = -Bpg -X32_64\n+\n+# Either 32-bit and 64-bit objects in archives.\n+AR_FLAGS_FOR_TARGET = -X32_64\n+\n+# Compile Ada files with minimal-toc.  The primary focus is gnatlib, so\n+# that the library does not use nearly the entire TOC of applications\n+# until gnatlib is built as a shared library on AIX.  Compiling the\n+# compiler with -mminimal-toc does not cause any harm.\n+T_ADAFLAGS = -mminimal-toc"}]}