{"sha": "6acd883864e3cff5895962772cca141bbbf3d2ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjZDg4Mzg2NGUzY2ZmNTg5NTk2Mjc3MmNjYTE0MWJiYmYzZDJhZA==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2007-04-04T08:00:56Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2007-04-04T08:00:56Z"}, "message": "winnt-cxx.c (i386_pe_type_dllimport_p): Don't ignore dllimport attribute of virtual methods.\n\ngcc\n\t* config/i386/winnt-cxx.c (i386_pe_type_dllimport_p): Don't ignore\n\tdllimport attribute of virtual methods.\n\ngcc/cp\n\t* class.c (check_for_override): Don't remove dllmport attribute of\n\tvirtual methods.\n\ngcc/testsuite\n\n\t* g++.dg/ext/dllimport12.C: Update comments\n\nFrom-SVN: r123492", "tree": {"sha": "52eac40af87711dd8c6d296e9f80c346db50320c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52eac40af87711dd8c6d296e9f80c346db50320c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6acd883864e3cff5895962772cca141bbbf3d2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acd883864e3cff5895962772cca141bbbf3d2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acd883864e3cff5895962772cca141bbbf3d2ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acd883864e3cff5895962772cca141bbbf3d2ad/comments", "author": null, "committer": null, "parents": [{"sha": "df1a0dbb1e6a75c099e284c12dc764e188089f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1a0dbb1e6a75c099e284c12dc764e188089f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1a0dbb1e6a75c099e284c12dc764e188089f30"}], "stats": {"total": 128, "additions": 56, "deletions": 72}, "files": [{"sha": "e8786498354779eb521830e0f701409182a8285f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6acd883864e3cff5895962772cca141bbbf3d2ad", "patch": "@@ -1,3 +1,8 @@\n+2007-04-04  Danny Smith  <dannysmith.users.sourceforge.net>\n+\n+\t* config/i386/winnt-cxx.c (i386_pe_type_dllimport_p): Don't ignore\n+\tdllimport attribute of virtual methods.\n+\n 2007-04-04  Chen Liqin  <liqin@sunnorth.com.cn>\n \n         * config/score/crti.asm: Change _bss_start to __bss_start."}, {"sha": "a6a8510720bb5a7f517ce0f756d36e5a2e95b079", "filename": "gcc/config/i386/winnt-cxx.c", "status": "modified", "additions": 36, "deletions": 59, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Fconfig%2Fi386%2Fwinnt-cxx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Fconfig%2Fi386%2Fwinnt-cxx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-cxx.c?ref=6acd883864e3cff5895962772cca141bbbf3d2ad", "patch": "@@ -38,66 +38,43 @@ Boston, MA 02110-1301, USA.  */\n bool\n i386_pe_type_dllimport_p (tree decl)\n {\n-   gcc_assert (TREE_CODE (decl) == VAR_DECL \n-               || TREE_CODE (decl) == FUNCTION_DECL);\n-\n-   if (TARGET_NOP_FUN_DLLIMPORT && TREE_CODE (decl) == FUNCTION_DECL)\n-     return false;\n-\n-   /* We ignore the dllimport attribute for inline member functions.\n-      This differs from MSVC behavior which treats it like GNUC\n-      'extern inline' extension.  Also ignore for template\n-      instantiations with linkonce semantics and artificial methods.  */\n-    if (TREE_CODE (decl) ==  FUNCTION_DECL\n-        && (DECL_DECLARED_INLINE_P (decl)\n-\t    || DECL_TEMPLATE_INSTANTIATION (decl)\n-\t    || DECL_ARTIFICIAL (decl)))\n-      return false;\n-\n-   /* Since we can't treat a pointer to a dllimport'd symbol as a\n-       constant address, we turn off the attribute on C++ virtual\n-       methods to allow creation of vtables using thunks.  */\n-    else if (TREE_CODE (TREE_TYPE (decl)) == METHOD_TYPE\n-\t     && DECL_VIRTUAL_P (decl))\n-      {\n-\t/* Even though we ignore the attribute from the start, warn if we later see\n-\t   an out-of class definition, as we do for other member functions in\n-\t   tree.c:merge_dllimport_decl_attributes.  If this is the key method, the\n-\t   definition may affect the import-export status of vtables, depending\n-           on how we handle MULTIPLE_SYMBOL_SPACES in cp/decl2.c.   */\n-\tif (DECL_INITIAL (decl))\n-\t  {\n-\t    warning (OPT_Wattributes, \"%q+D redeclared without dllimport attribute: \"\n-\t\t    \"previous dllimport ignored\", decl);\n-#ifdef PE_DLL_DEBUG\n-\t    if (decl == CLASSTYPE_KEY_METHOD (DECL_CONTEXT (decl)))            \n-\t      warning (OPT_Wattributes, \"key method %q+D of dllimport'd class defined\"\n-\t\t       decl);\n-#endif\n-\t  }\n-\treturn false;\n-      }\n-\n-      /* Don't mark defined functions as dllimport.  This code will only be\n-         reached if we see a non-inline function defined out-of-class.  */\n-    else if (TREE_CODE (decl) ==  FUNCTION_DECL\n-\t     && (DECL_INITIAL (decl)))\n+  gcc_assert (TREE_CODE (decl) == VAR_DECL \n+\t      || TREE_CODE (decl) == FUNCTION_DECL);\n+\n+  if (TARGET_NOP_FUN_DLLIMPORT && TREE_CODE (decl) == FUNCTION_DECL)\n+    return false;\n+\n+  /* We ignore the dllimport attribute for inline member functions.\n+     This differs from MSVC behavior which treats it like GNUC\n+     'extern inline' extension.  Also ignore for template\n+     instantiations with linkonce semantics and artificial methods.  */\n+  if (TREE_CODE (decl) ==  FUNCTION_DECL\n+      && (DECL_DECLARED_INLINE_P (decl)\n+\t  || DECL_TEMPLATE_INSTANTIATION (decl)\n+\t  || DECL_ARTIFICIAL (decl)))\n+    return false;\n+\n+\n+  /* Don't mark defined functions as dllimport.  This code will only be\n+     reached if we see a non-inline function defined out-of-class.  */\n+  else if (TREE_CODE (decl) ==  FUNCTION_DECL\n+\t   && (DECL_INITIAL (decl)))\n+    return false;\n+\n+  /*  Don't allow definitions of static data members in dllimport class,\n+      If vtable data is marked as DECL_EXTERNAL, import it; otherwise just\n+      ignore the class attribute.  */\n+  else if (TREE_CODE (decl) == VAR_DECL\n+\t   && TREE_STATIC (decl) && TREE_PUBLIC (decl)\n+\t   && !DECL_EXTERNAL (decl))\n+    {\n+      if (!DECL_VIRTUAL_P (decl))\n+\t  error (\"definition of static data member %q+D of \"\n+\t         \"dllimport'd class\", decl);\n       return false;\n+    }\n \n-    /*  Don't allow definitions of static data members in dllimport class,\n-        If vtable data is marked as DECL_EXTERNAL, import it; otherwise just\n-        ignore the class attribute.  */\n-    else if (TREE_CODE (decl) == VAR_DECL\n-\t     && TREE_STATIC (decl) && TREE_PUBLIC (decl)\n-\t     && !DECL_EXTERNAL (decl))\n-      {\n-\tif (!DECL_VIRTUAL_P (decl))\n-\t     error (\"definition of static data member %q+D of \"\n-\t\t    \"dllimport'd class\", decl);\n-\treturn false;\n-      }\n-\n-    return true;\n+  return true;\n }\n \n \n@@ -143,7 +120,7 @@ i386_pe_adjust_class_at_definition (tree t)\n      definition.  We recheck the class members  at RTL generation to\n      emit warnings if this has happened.  Definition of static data member\n      of dllimport'd class always causes an error (as per MS compiler).\n-     */\n+  */\n \n   /* Check static VAR_DECL's.  */\n   for (member = TYPE_FIELDS (t); member; member = TREE_CHAIN (member))"}, {"sha": "f5b7aceca61e2e2b37c1bf3a945184f16cb5a08e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6acd883864e3cff5895962772cca141bbbf3d2ad", "patch": "@@ -1,3 +1,10 @@\n+2007-04-04  Danny Smith  <dannysmith.users.sourceforge.net>\n+\n+\t* class.c (check_for_override): Don't remove dllmport attribute\n+\tof virtual methods.\n+\n+\n+\n 2007-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/30847"}, {"sha": "0bb441e32698066119eb5781901bcadee68cf6d7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6acd883864e3cff5895962772cca141bbbf3d2ad", "patch": "@@ -2343,16 +2343,6 @@ check_for_override (tree decl, tree ctype)\n       if (!DECL_VINDEX (decl))\n \tDECL_VINDEX (decl) = error_mark_node;\n       IDENTIFIER_VIRTUAL_P (DECL_NAME (decl)) = 1;\n-      if (DECL_DLLIMPORT_P (decl))\n-\t{\n-\t  /* When we handled the dllimport attribute we may not have known\n-\t     that this function is virtual   We can't use dllimport\n-\t     semantics for a virtual method because we need to initialize\n-\t     the vtable entry with a constant address.  */\n-\t  DECL_DLLIMPORT_P (decl) = 0;\n-\t  DECL_ATTRIBUTES (decl)\n-\t    = remove_attribute (\"dllimport\", DECL_ATTRIBUTES (decl));\n-\t}\n     }\n }\n "}, {"sha": "4a5ce3b4ce84f0557c8d98e7181b52bf1132c817", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6acd883864e3cff5895962772cca141bbbf3d2ad", "patch": "@@ -1,3 +1,7 @@\n+2007-04-04  Danny Smith  <dannysmith.users.sourceforge.net>\n+\n+\t* g++.dg/ext/dllimport12.C: Update comments.\n+\n 2007-04-03  Eric Christopher  <echristo@apple.com>\n \n \t* g++.dg/tree-ssa/pr29902.C: Require ilp32."}, {"sha": "9868596a899bc833c0e9ad9fbd870013cc38cc0f", "filename": "gcc/testsuite/g++.dg/ext/dllimport12.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acd883864e3cff5895962772cca141bbbf3d2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport12.C?ref=6acd883864e3cff5895962772cca141bbbf3d2ad", "patch": "@@ -1,8 +1,9 @@\n // PR target/27650\n-// Don't use dllimport semantics on virtual methods\n+// Don't use dllimport semantics on virtual methods when initializing\n+// vtables\n // { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n \n-// Don't import explicitly virtual method.\n+// Use import lib thunk for vtable entry of explicitly virtual method,\n struct base\n {\n   virtual void key_method();\n@@ -12,7 +13,7 @@ struct base\n void base::key_method() {}\n \n \n-// Nor an implicitly virtual method.\n+// Likewise for an implicitly virtual method.\n struct derived : public base\n {\n   void key_method(); "}]}