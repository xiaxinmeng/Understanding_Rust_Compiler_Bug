{"sha": "41fbacdd10305654b1d10f887fa3f4677f9b8f34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmYmFjZGQxMDMwNTY1NGIxZDEwZjg4N2ZhM2Y0Njc3ZjliOGYzNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-03-02T20:46:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-03-02T20:46:06Z"}, "message": "diagnostics: fix ICE on fix-it hints on very long lines [PR99323]\n\nPR c/99323 describes an ICE due to a failed assertion deep inside the\nfix-it printing machinery, where the fix-it hints on one line have not\nbeen properly sorted in layout's constructor.\n\nThe underlying issue occurs when multiple fix-it hints affect a line\nwider that LINE_MAP_MAX_COLUMN_NUMBER, where the location_t values for\ncharacters after that threshold fall back to having column zero.\n\nIt's not meaningful to try to handle fix-it hints without column\ninformation, so this patch rejects them as they are added to the\nrich_location, falling back to the \"no fix-it hints on this diagnostic\"\ncase, fixing the crash.\n\ngcc/ChangeLog:\n\tPR c/99323\n\t* diagnostic-show-locus.c\n\t(selftest::test_one_liner_many_fixits_2): Fix accidental usage of\n\tcolumn 0.\n\ngcc/testsuite/ChangeLog:\n\tPR c/99323\n\t* gcc.dg/pr99323-1.c: New test.\n\t* gcc.dg/pr99323-2.c: New test.\n\nlibcpp/ChangeLog:\n\tPR c/99323\n\t* line-map.c (rich_location::maybe_add_fixit): Reject fix-it hints\n\tat column 0.", "tree": {"sha": "14f8aedff14c4fb3cb19cc7a922d12d79272eb2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f8aedff14c4fb3cb19cc7a922d12d79272eb2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41fbacdd10305654b1d10f887fa3f4677f9b8f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fbacdd10305654b1d10f887fa3f4677f9b8f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fbacdd10305654b1d10f887fa3f4677f9b8f34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fbacdd10305654b1d10f887fa3f4677f9b8f34/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7ca37649e4f322e7512c6d11813992c61b0a4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ca37649e4f322e7512c6d11813992c61b0a4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ca37649e4f322e7512c6d11813992c61b0a4b3"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "4111cd6654431f4138020e645a7bc18ae55c7f39", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fbacdd10305654b1d10f887fa3f4677f9b8f34/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fbacdd10305654b1d10f887fa3f4677f9b8f34/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=41fbacdd10305654b1d10f887fa3f4677f9b8f34", "patch": "@@ -3288,14 +3288,14 @@ test_one_liner_many_fixits_2 ()\n   rich_location richloc (line_table, equals);\n   for (int i = 0; i < 19; i++)\n     {\n-      location_t loc = linemap_position_for_column (line_table, i * 2);\n+      location_t loc = linemap_position_for_column (line_table, (i * 2) + 1);\n       richloc.add_fixit_insert_before (loc, \"a\");\n     }\n   ASSERT_EQ (19, richloc.get_num_fixit_hints ());\n   diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n   ASSERT_STREQ (\" foo = bar.field;\\n\"\n \t\t\"     ^\\n\"\n-\t\t\"a a a a a a a a a a a a a a a a a a a\\n\",\n+\t\t\" a a a a a a a a a a a a a a a a a a a\\n\",\n \t\tpp_formatted_text (dc.printer));\n }\n "}, {"sha": "6fe14002e59a26a0a573cd3509a6c4b1113ac6cf", "filename": "gcc/testsuite/gcc.dg/pr99323-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fbacdd10305654b1d10f887fa3f4677f9b8f34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99323-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fbacdd10305654b1d10f887fa3f4677f9b8f34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99323-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99323-1.c?ref=41fbacdd10305654b1d10f887fa3f4677f9b8f34", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that fix-it printing doesn't ICE when there are multiple\n+   fix-it hints on a very long line after LINE_MAP_MAX_COLUMN_NUMBER.  */\n+\n+/* { dg-options \"-Wall -no-integrated-cpp -fdiagnostics-show-caret\" } */\n+/* { dg-allow-blank-lines-in-output 1 } */\n+/* { dg-prune-output \".*\" } */\n+\n+typedef struct {\n+} REFERENCE;\n+#define LIM2() LIM1()\n+#define LIM3() LIM2() LIM2() LIM2() LIM2() LIM2() LIM2()\n+#define LIM4()                                                                 \\\n+  LIM3() LIM3() LIM3() LIM3() LIM3() LIM3() LIM3() LIM3() LIM3() LIM3()\n+#define LIM5()                                                                 \\\n+  LIM4() LIM4() LIM4() LIM4() LIM4() LIM4() LIM4() LIM4() LIM4() LIM4()\n+#define LIM1() DEF(),\n+REFERENCE references[] = {LIM5()};"}, {"sha": "d4075b61525b40c47e414fcba1ddd8fb032c6303", "filename": "gcc/testsuite/gcc.dg/pr99323-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fbacdd10305654b1d10f887fa3f4677f9b8f34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99323-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fbacdd10305654b1d10f887fa3f4677f9b8f34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99323-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99323-2.c?ref=41fbacdd10305654b1d10f887fa3f4677f9b8f34", "patch": "@@ -0,0 +1,11 @@\n+/* Verify that fix-it printing doesn't ICE when there are multiple\n+   fix-it hints on a very long line after LINE_MAP_MAX_COLUMN_NUMBER.  */\n+\n+/* { dg-options \"-Wall -fdiagnostics-show-caret\" } */\n+/* { dg-allow-blank-lines-in-output 1 } */\n+/* { dg-prune-output \".*\" } */\n+\n+typedef struct {\n+} REFERENCE;\n+\n+REFERENCE references[] = {}"}, {"sha": "a003af8533c1eaf66c20c62588bfccc25dc50abb", "filename": "libcpp/line-map.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fbacdd10305654b1d10f887fa3f4677f9b8f34/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fbacdd10305654b1d10f887fa3f4677f9b8f34/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=41fbacdd10305654b1d10f887fa3f4677f9b8f34", "patch": "@@ -2431,6 +2431,14 @@ rich_location::maybe_add_fixit (location_t start,\n       stop_supporting_fixits ();\n       return;\n     }\n+  /* If we have very long lines, tokens will eventually fall back to\n+     having column == 0.\n+     We can't handle fix-it hints that use such locations.  */\n+  if (exploc_start.column == 0 || exploc_next_loc.column == 0)\n+    {\n+      stop_supporting_fixits ();\n+      return;\n+    }\n \n   const char *newline = strchr (new_content, '\\n');\n   if (newline)"}]}