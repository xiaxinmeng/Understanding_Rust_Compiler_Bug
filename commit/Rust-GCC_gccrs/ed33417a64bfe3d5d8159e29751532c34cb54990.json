{"sha": "ed33417a64bfe3d5d8159e29751532c34cb54990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzMzQxN2E2NGJmZTNkNWQ4MTU5ZTI5NzUxNTMyYzM0Y2I1NDk5MA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-09-16T19:37:44Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-09-16T19:37:44Z"}, "message": "re PR fortran/37802 (Improve wording for matmul bound checking)\n\n2018-09-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37802\n\t* frontend-passes.c (B_ERROR): New macro for matmul bounds\n\tchecking error messages.\n\t(C_ERROR): Likewise.\n\t(inline_matmul_assign): Reorganize bounds checking, use B_ERROR\n\tand C_ERROR macros.\n\n2018-09-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37802\n\t* gfortran.dg/matmul_bounds_13.f90: New test case.\n\t* gfortran.dg/inline_matmul_15.f90:  Adjust test for runtime\n\terror.\n\t* gfortran.dg/matmul_5.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_10.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_11.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_2.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_4.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_5.f90: Likewise.\n\n2018-09-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37802\n\t* m4/matmul_internal.m4: Adjust error messages.\n        * generated/matmul_c10.c: Regenerated.\n        * generated/matmul_c16.c: Regenerated.\n        * generated/matmul_c4.c: Regenerated.\n        * generated/matmul_c8.c: Regenerated.\n        * generated/matmul_i1.c: Regenerated.\n        * generated/matmul_i16.c: Regenerated.\n        * generated/matmul_i2.c: Regenerated.\n        * generated/matmul_i4.c: Regenerated.\n        * generated/matmul_i8.c: Regenerated.\n        * generated/matmul_r10.c: Regenerated.\n        * generated/matmul_r16.c: Regenerated.\n        * generated/matmul_r4.c: Regenerated.\n        * generated/matmul_r8.c: Regenerated.\n        * generated/matmulavx128_c10.c: Regenerated.\n        * generated/matmulavx128_c16.c: Regenerated.\n        * generated/matmulavx128_c4.c: Regenerated.\n        * generated/matmulavx128_c8.c: Regenerated.\n        * generated/matmulavx128_i1.c: Regenerated.\n        * generated/matmulavx128_i16.c: Regenerated.\n        * generated/matmulavx128_i2.c: Regenerated.\n        * generated/matmulavx128_i4.c: Regenerated.\n        * generated/matmulavx128_i8.c: Regenerated.\n        * generated/matmulavx128_r10.c: Regenerated.\n        * generated/matmulavx128_r16.c: Regenerated.\n        * generated/matmulavx128_r4.c: Regenerated.\n        * generated/matmulavx128_r8.c: Regenerated.\n\nFrom-SVN: r264349", "tree": {"sha": "ba8e542af26f27874bb62f5c38c81fc6bc9c411d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba8e542af26f27874bb62f5c38c81fc6bc9c411d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed33417a64bfe3d5d8159e29751532c34cb54990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed33417a64bfe3d5d8159e29751532c34cb54990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed33417a64bfe3d5d8159e29751532c34cb54990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed33417a64bfe3d5d8159e29751532c34cb54990/comments", "author": null, "committer": null, "parents": [{"sha": "c546dbdc4a3a41d12219ea8edc891e51b1aca610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c546dbdc4a3a41d12219ea8edc891e51b1aca610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c546dbdc4a3a41d12219ea8edc891e51b1aca610"}], "stats": {"total": 3527, "additions": 2293, "deletions": 1234}, "files": [{"sha": "6f4872e65d690c8784f85475a18411be27792f98", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -1,3 +1,12 @@\n+2018-09-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37802\n+\t* frontend-passes.c (B_ERROR): New macro for matmul bounds\n+\tchecking error messages.\n+\t(C_ERROR): Likewise.\n+\t(inline_matmul_assign): Reorganize bounds checking, use B_ERROR\n+\tand C_ERROR macros.\n+\n 2018-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* trans-array.c (gfc_conv_array_initializer): Remove excess precision"}, {"sha": "80a65fc9a214765b23e3574b70c889ebaf2f168d", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 102, "deletions": 121, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -3748,6 +3748,15 @@ check_conjg_transpose_variable (gfc_expr *e, bool *conjg, bool *transpose)\n   return NULL;\n }\n \n+/* Macros for unified error messages.  */\n+\n+#define B_ERROR(n) _(\"Incorrect extent in argument B in MATMUL intrinsic in \" \\\n+\t\t     \"dimension \" #n \": is %ld, should be %ld\")\n+\n+#define C_ERROR(n) _(\"Array bound mismatch for dimension \" #n \" of array \" \\\n+\t\t     \"(%ld/%ld)\")\n+\n+\n /* Inline assignments of the form c = matmul(a,b).\n    Handle only the cases currently where b and c are rank-two arrays.\n \n@@ -3793,6 +3802,7 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n   gfc_code *if_limit = NULL;\n   gfc_code **next_code_point;\n   bool conjg_a, conjg_b, transpose_a, transpose_b;\n+  bool realloc_c;\n \n   if (co->op != EXEC_ASSIGN)\n     return 0;\n@@ -3958,169 +3968,140 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n   assign_zero->expr1->no_bounds_check = 1;\n   assign_zero->expr2 = zero_e;\n \n-  /* Handle the reallocation, if needed.  */\n-  if (flag_realloc_lhs && gfc_is_reallocatable_lhs (expr1))\n-    {\n-      gfc_code *lhs_alloc;\n+  realloc_c = flag_realloc_lhs && gfc_is_reallocatable_lhs (expr1);\n \n-      /* Only need to check a single dimension for the A2B2 case for\n-\t bounds checking, the rest will be allocated.  Also check this\n-\t for A2B1.   */\n+  if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n+    {\n+      gfc_code *test;\n+      gfc_expr *a2, *b1, *c1, *c2, *a1, *b2;\n \n-      if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n+      switch (m_case)\n \t{\n-\t  gfc_code *test;\n-\t  if (m_case == A2B2 || m_case == A2B1)\n-\t    {\n-\t      gfc_expr *a2, *b1;\n+\tcase A2B1:\n \n-\t      a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t      b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t      test = runtime_error_ne (b1, a2, \"Dimension of array B incorrect \"\n-\t\t\t\t       \"in MATMUL intrinsic: Is %ld, should be %ld\");\n-\t      *next_code_point = test;\n-\t      next_code_point = &test->next;\n-\t    }\n-\t  else if (m_case == A1B2)\n-\t    {\n-\t      gfc_expr *a1, *b1;\n+\t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n+\t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n+\t  test = runtime_error_ne (b1, a2, B_ERROR(1));\n+\t  *next_code_point = test;\n+\t  next_code_point = &test->next;\n \n+\t  if (!realloc_c)\n+\t    {\n+\t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t      b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t      test = runtime_error_ne (b1, a1, \"Dimension of array B incorrect \"\n-\t\t\t\t       \"in MATMUL intrinsic: Is %ld, should be %ld\");\n+\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n-\t}\n-\n-      lhs_alloc = matmul_lhs_realloc (expr1, matrix_a, matrix_b, m_case);\n-\n-      *next_code_point = lhs_alloc;\n-      next_code_point = &lhs_alloc->next;\n+\t  break;\n \n-    }\n-  else if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n-    {\n-      gfc_code *test;\n-      gfc_expr *a2, *b1, *c1, *c2, *a1, *b2;\n+\tcase A1B2:\n \n-      if (m_case == A2B2 || m_case == A2B1)\n-\t{\n-\t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t  test = runtime_error_ne (b1, a2, \"Dimension of array B incorrect \"\n-\t\t\t\t   \"in MATMUL intrinsic: Is %ld, should be %ld\");\n+\t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n+\t  test = runtime_error_ne (b1, a1, B_ERROR(1));\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n-\t  c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n-\t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\n-\t  if (m_case == A2B2)\n-\t    test = runtime_error_ne (c1, a1, \"Incorrect extent in return array in \"\n-\t\t\t\t     \"MATMUL intrinsic for dimension 1: \"\n-\t\t\t\t     \"is %ld, should be %ld\");\n-\t  else if (m_case == A2B1)\n-\t    test = runtime_error_ne (c1, a1, \"Incorrect extent in return array in \"\n-\t\t\t\t     \"MATMUL intrinsic: \"\n-\t\t\t\t     \"is %ld, should be %ld\");\n+\t  if (!realloc_c)\n+\t    {\n+\t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n+\t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n+\t      test = runtime_error_ne (c1, b2, C_ERROR(1));\n+\t      *next_code_point = test;\n+\t      next_code_point = &test->next;\n+\t    }\n+\t  break;\n \n+\tcase A2B2:\n \n-\t  *next_code_point = test;\n-\t  next_code_point = &test->next;\n-\t}\n-      else if (m_case == A1B2)\n-\t{\n-\t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t  test = runtime_error_ne (b1, a1, \"Dimension of array B incorrect \"\n-\t\t\t\t   \"in MATMUL intrinsic: Is %ld, should be %ld\");\n+\t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n+\t  test = runtime_error_ne (b1, a2, B_ERROR(1));\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n-\t  c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n-\t  b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n+\t  if (!realloc_c)\n+\t    {\n+\t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n+\t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n+\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n+\t      *next_code_point = test;\n+\t      next_code_point = &test->next;\n \n-\t  test = runtime_error_ne (c1, b2, \"Incorrect extent in return array in \"\n-\t\t\t\t   \"MATMUL intrinsic: \"\n-\t\t\t\t   \"is %ld, should be %ld\");\n+\t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n+\t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n+\t      test = runtime_error_ne (c2, b2, C_ERROR(2));\n+\t      *next_code_point = test;\n+\t      next_code_point = &test->next;\n+\t    }\n+\t  break;\n \n-\t  *next_code_point = test;\n-\t  next_code_point = &test->next;\n-\t}\n+\tcase A2B2T:\n \n-      if (m_case == A2B2)\n-\t{\n-\t  c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t  b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n-\t  test = runtime_error_ne (c2, b2, \"Incorrect extent in return array in \"\n-\t\t\t\t   \"MATMUL intrinsic for dimension 2: is %ld, should be %ld\");\n-\n+\t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n+\t  /* matrix_b is transposed, hence dimension 1 for the error message.  */\n+\t  test = runtime_error_ne (b2, a2, B_ERROR(1));\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n-\t}\n \n-      if (m_case == A2B2T)\n-\t{\n-\t  c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n-\t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t  test = runtime_error_ne (c1, a1, \"Incorrect extent in return array in \"\n-\t\t\t\t   \"MATMUL intrinsic for dimension 1: \"\n-\t\t\t\t   \"is %ld, should be %ld\");\n+\t  if (!realloc_c)\n+\t    {\n+\t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n+\t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n+\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n+\t      *next_code_point = test;\n+\t      next_code_point = &test->next;\n \n-\t  *next_code_point = test;\n-\t  next_code_point = &test->next;\n+\t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n+\t      b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n+\t      test = runtime_error_ne (c2, b1, C_ERROR(2));\n+\t      *next_code_point = test;\n+\t      next_code_point = &test->next;\n+\t    }\n+\t  break;\n+\n+\tcase A2TB2:\n \n-\t  c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t  test = runtime_error_ne (c2, b1, \"Incorrect extent in return array in \"\n-\t\t\t\t   \"MATMUL intrinsic for dimension 2: \"\n-\t\t\t\t   \"is %ld, should be %ld\");\n+\t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n+\t  test = runtime_error_ne (b1, a1, B_ERROR(1));\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n-\t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t  b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n+\t  if (!realloc_c)\n+\t    {\n+\t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n+\t      a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n+\t      test = runtime_error_ne (c1, a2, C_ERROR(1));\n+\t      *next_code_point = test;\n+\t      next_code_point = &test->next;\n \n-\t  test = runtime_error_ne (b2, a2, \"Incorrect extent in argument B in \"\n-\t\t\t\t   \"MATMUL intrnisic for dimension 2: \"\n-\t\t\t\t   \"is %ld, should be %ld\");\n-\t  *next_code_point = test;\n-\t  next_code_point = &test->next;\n+\t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n+\t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n+\t      test = runtime_error_ne (c2, b2, C_ERROR(2));\n+\t      *next_code_point = test;\n+\t      next_code_point = &test->next;\n+\t    }\n+\t  break;\n \n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n+    }\n \n-      if (m_case == A2TB2)\n-\t{\n-\t  c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n-\t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\n-\t  test = runtime_error_ne (c1, a2, \"Incorrect extent in return array in \"\n-\t\t\t\t   \"MATMUL intrinsic for dimension 1: \"\n-\t\t\t\t   \"is %ld, should be %ld\");\n-\n-\t  *next_code_point = test;\n-\t  next_code_point = &test->next;\n+  /* Handle the reallocation, if needed.  */\n \n-\t  c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n-\t  b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n-\t  test = runtime_error_ne (c2, b2, \"Incorrect extent in return array in \"\n-\t\t\t\t   \"MATMUL intrinsic for dimension 2: \"\n-\t\t\t\t   \"is %ld, should be %ld\");\n-\t  *next_code_point = test;\n-\t  next_code_point = &test->next;\n+  if (realloc_c)\n+    {\n+      gfc_code *lhs_alloc;\n \n-\t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n+      lhs_alloc = matmul_lhs_realloc (expr1, matrix_a, matrix_b, m_case);\n \n-\t  test = runtime_error_ne (b1, a1, \"Incorrect extent in argument B in \"\n-\t\t\t\t   \"MATMUL intrnisic for dimension 2: \"\n-\t\t\t\t   \"is %ld, should be %ld\");\n-\t  *next_code_point = test;\n-\t  next_code_point = &test->next;\n+      *next_code_point = lhs_alloc;\n+      next_code_point = &lhs_alloc->next;\n \n-\t}\n     }\n \n   *next_code_point = assign_zero;"}, {"sha": "e37c1773bffd489be99f8d014812a954854174e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -1,3 +1,16 @@\n+2018-09-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37802\n+\t* gfortran.dg/matmul_bounds_13.f90: New test case.\n+\t* gfortran.dg/inline_matmul_15.f90:  Adjust test for runtime\n+\terror.\n+\t* gfortran.dg/matmul_5.f90: Likewise.\n+\t* gfortran.dg/matmul_bounds_10.f90: Likewise.\n+\t* gfortran.dg/matmul_bounds_11.f90: Likewise.\n+\t* gfortran.dg/matmul_bounds_2.f90: Likewise.\n+\t* gfortran.dg/matmul_bounds_4.f90: Likewise.\n+\t* gfortran.dg/matmul_bounds_5.f90: Likewise.\n+\n 2018-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/compile/20180915-1.c: New test."}, {"sha": "47da01c2b9f75375ed8b78f59c395430fbb3a187", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_15.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -9,4 +9,4 @@ program main\n   call random_number(b)\n   print *,matmul(a,b)\n end program main\n-! { dg-output \"Fortran runtime error: Dimension of array B incorrect in MATMUL intrinsic.*\" }\n+! { dg-output \"Fortran runtime error: Incorrect extent in argument B in MATMUL intrinsic in dimension 1\" }"}, {"sha": "79de7bf8079ff1b35e81ef4bf52c78c3c6ec24c2", "filename": "gcc/testsuite/gfortran.dg/matmul_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_5.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -9,4 +9,4 @@ program main\n   call random_number(b)\n   print *,matmul(a,b)\n end program main\n-! { dg-output \"Fortran runtime error: dimension of array B incorrect in MATMUL intrinsic.*\" }\n+! { dg-output \"Fortran runtime error: Incorrect extent in argument B in MATMUL intrinsic in dimension 1\" }"}, {"sha": "38992460adda335b34aa6fa331011061e59cd400", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_10.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -13,4 +13,4 @@ program main\n   allocate(ret(4,3))\n   ret = matmul(a,transpose(b))  ! This should throw an error.\n end program main\n-! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 1: is 4, should be 3\" }\n+! { dg-output \"Fortran runtime error: Array bound mismatch for dimension 1 of array.*\" }"}, {"sha": "ee52a7b1ead7045798b7c579d1adc2202ddf8a8e", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_11.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -11,5 +11,5 @@ program main\n   res = matmul(a,b)\n   print *,res\n end program main\n-! { dg-output \"Fortran runtime error: Dimension of array B incorrect in MATMUL intrinsic.*\" }\n+! { dg-output \"Fortran runtime error: Incorrect extent in argument B in MATMUL intrinsic in dimension 1: is 3, should be 2\" }\n "}, {"sha": "154b13397fe966f6540e7e7d28eea7218b026640", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_13.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_13.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=bounds\" }\n+! { dg-shouldfail \"Fortran runtime error: Incorrect extent in argument B in MATMUL intrinsic in dimension 1\" }\n+program main\n+  real, dimension(:,:), allocatable :: a, b, c\n+  character(len=100) :: line\n+  allocate (a(3,2))\n+  allocate (b(2,4))\n+  call random_number(a)\n+  call random_number(b)\n+  write (unit=line, fmt=*) matmul(a,transpose(b))\n+end program main\n+! { dg-output \"Fortran runtime error: Incorrect extent in argument B in MATMUL intrinsic in dimension 1\" }"}, {"sha": "7a1deb35ff25a0d6a443ea3f05ce1073271a5e3e", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_2.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -13,4 +13,4 @@ program main\n   allocate(ret(3,2))\n   ret = matmul(a,b)  ! This should throw an error.\n end program main\n-! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 2: is 2, should be 3\" }\n+! { dg-output \"Fortran runtime error: Array bound mismatch for dimension 2 of array.*\" }"}, {"sha": "8c8ae4340f6c5db9356f04f94dc05885b2025eb8", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_3.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -13,4 +13,4 @@ program main\n   allocate(ret(2,3))\n   ret = matmul(a,b)  ! This should throw an error.\n end program main\n-! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 1: is 2, should be 3\" }\n+! { dg-output \"Fortran runtime error: Array bound mismatch for dimension 1 of array\" }"}, {"sha": "2dac29fe6e3af0310c287072eb4655bd12112e98", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_4.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -13,4 +13,4 @@ program main\n   allocate(ret(3))\n   ret = matmul(a,b)  ! This should throw an error.\n end program main\n-! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic: is 3, should be 2\" }\n+! { dg-output \"Fortran runtime error: Array bound mismatch for dimension 1 of array\" }"}, {"sha": "d2013ea906c255d26bf7c8e6cd3ba78e4894e249", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_5.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -13,4 +13,4 @@ program main\n   allocate(ret(3))\n   ret = matmul(a,b)  ! This should throw an error.\n end program main\n-! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic: is 3, should be 2\" }\n+! { dg-output \"Fortran runtime error: Array bound mismatch for dimension 1 of array\" }"}, {"sha": "11f58870f1039f85b5d01cf70bc8352d38abda72", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_8.f90?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -13,4 +13,4 @@ program main\n   allocate(ret(3,2))\n   ret = matmul(a,transpose(b))  ! This should throw an error.\n end program main\n-! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 2: is 2, should be 3\" }\n+! { dg-output \"Fortran runtime error: Array bound mismatch for dimension 2 of array\" }"}, {"sha": "4c20390656f44572ba22051152a75b2236a2ba9f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -1,3 +1,34 @@\n+2018-09-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37802\n+\t* m4/matmul_internal.m4: Adjust error messages.\n+        * generated/matmul_c10.c: Regenerated.\n+        * generated/matmul_c16.c: Regenerated.\n+        * generated/matmul_c4.c: Regenerated.\n+        * generated/matmul_c8.c: Regenerated.\n+        * generated/matmul_i1.c: Regenerated.\n+        * generated/matmul_i16.c: Regenerated.\n+        * generated/matmul_i2.c: Regenerated.\n+        * generated/matmul_i4.c: Regenerated.\n+        * generated/matmul_i8.c: Regenerated.\n+        * generated/matmul_r10.c: Regenerated.\n+        * generated/matmul_r16.c: Regenerated.\n+        * generated/matmul_r4.c: Regenerated.\n+        * generated/matmul_r8.c: Regenerated.\n+        * generated/matmulavx128_c10.c: Regenerated.\n+        * generated/matmulavx128_c16.c: Regenerated.\n+        * generated/matmulavx128_c4.c: Regenerated.\n+        * generated/matmulavx128_c8.c: Regenerated.\n+        * generated/matmulavx128_i1.c: Regenerated.\n+        * generated/matmulavx128_i16.c: Regenerated.\n+        * generated/matmulavx128_i2.c: Regenerated.\n+        * generated/matmulavx128_i4.c: Regenerated.\n+        * generated/matmulavx128_i8.c: Regenerated.\n+        * generated/matmulavx128_r10.c: Regenerated.\n+        * generated/matmulavx128_r16.c: Regenerated.\n+        * generated/matmulavx128_r4.c: Regenerated.\n+        * generated/matmulavx128_r8.c: Regenerated.\n+\n 2018-09-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* io/unix.c (fallback_access): Avoid calling close on"}, {"sha": "ac42158a2c10109841f39e463abc831bb8fe8c39", "filename": "libgfortran/generated/matmul_c10.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c10.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "ad2246c43b01aba276d534b4b62c226458a9be84", "filename": "libgfortran/generated/matmul_c16.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c16.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "7793fc1b5471c722164f7f48c8edf32017ede283", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "8525dc853aae6a6033522463aa2e64fb167948a3", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "bb5bddba4c3f1161601e6dad1324fce61f8024bc", "filename": "libgfortran/generated/matmul_i1.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i1.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "4f36a5b96cee5212f638a08f2bb5e77305b81074", "filename": "libgfortran/generated/matmul_i16.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i16.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "2aea3b4a60513a1702ea3c214519ae801a6fb025", "filename": "libgfortran/generated/matmul_i2.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i2.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "4ef9a0a7c7437a9b8a919be58116f6203535670f", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "e0c93ce3e7e8ad5ff048edaa2d5a12a98ea8caed", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "5d90454a9e602f24fc79b5744712e6d6c0d777b7", "filename": "libgfortran/generated/matmul_r10.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r10.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "dab10b06b4bbd51c86209f8c369e73cbaca411b9", "filename": "libgfortran/generated/matmul_r16.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r16.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "c9c31df0756a180b0ca47f67e0db66a96c739082", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "4c5823f82426cae04a33dba01a723356bae5345d", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 115, "deletions": 60, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -144,35 +144,33 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -213,7 +211,9 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -258,7 +258,18 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -701,35 +712,33 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -770,7 +779,9 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -815,7 +826,18 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1258,35 +1280,33 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1327,7 +1347,9 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1372,7 +1394,18 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -1829,35 +1862,33 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -1898,7 +1929,9 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -1943,7 +1976,18 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -2460,35 +2504,33 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -2529,7 +2571,9 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -2574,7 +2618,18 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "03914715d5c0c1e237496784b542a62d8bdb224a", "filename": "libgfortran/generated/matmulavx128_c10.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c10.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_c10_avx128_fma3 (gfc_array_c10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_c10_avx128_fma3 (gfc_array_c10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_c10_avx128_fma3 (gfc_array_c10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_c10_avx128_fma4 (gfc_array_c10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_c10_avx128_fma4 (gfc_array_c10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_c10_avx128_fma4 (gfc_array_c10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "876fc691ed8f6b897e9f335e2c35ead81b83d4bb", "filename": "libgfortran/generated/matmulavx128_c16.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c16.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_c16_avx128_fma3 (gfc_array_c16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_c16_avx128_fma3 (gfc_array_c16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_c16_avx128_fma3 (gfc_array_c16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_c16_avx128_fma4 (gfc_array_c16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_c16_avx128_fma4 (gfc_array_c16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_c16_avx128_fma4 (gfc_array_c16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "a577887d0bd7edd51d0a95aac8370378be6aefd5", "filename": "libgfortran/generated/matmulavx128_c4.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c4.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_c4_avx128_fma3 (gfc_array_c4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_c4_avx128_fma3 (gfc_array_c4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_c4_avx128_fma3 (gfc_array_c4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_c4_avx128_fma4 (gfc_array_c4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_c4_avx128_fma4 (gfc_array_c4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_c4_avx128_fma4 (gfc_array_c4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "2ca470106121826c15adad213ddb085743185eec", "filename": "libgfortran/generated/matmulavx128_c8.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c8.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_c8_avx128_fma3 (gfc_array_c8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_c8_avx128_fma3 (gfc_array_c8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_c8_avx128_fma3 (gfc_array_c8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_c8_avx128_fma4 (gfc_array_c8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_c8_avx128_fma4 (gfc_array_c8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_c8_avx128_fma4 (gfc_array_c8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "1af28d1672f6bba991155478996bdf54ba18f348", "filename": "libgfortran/generated/matmulavx128_i1.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i1.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_i1_avx128_fma3 (gfc_array_i1 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_i1_avx128_fma3 (gfc_array_i1 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_i1_avx128_fma3 (gfc_array_i1 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_i1_avx128_fma4 (gfc_array_i1 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_i1_avx128_fma4 (gfc_array_i1 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_i1_avx128_fma4 (gfc_array_i1 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "37a41252870465705d0314913e57fd0b190e7e58", "filename": "libgfortran/generated/matmulavx128_i16.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i16.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_i16_avx128_fma3 (gfc_array_i16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_i16_avx128_fma3 (gfc_array_i16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_i16_avx128_fma3 (gfc_array_i16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_i16_avx128_fma4 (gfc_array_i16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_i16_avx128_fma4 (gfc_array_i16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_i16_avx128_fma4 (gfc_array_i16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "033133a4729ca3cb296c131a7bd67cabdfe70141", "filename": "libgfortran/generated/matmulavx128_i2.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i2.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_i2_avx128_fma3 (gfc_array_i2 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_i2_avx128_fma3 (gfc_array_i2 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_i2_avx128_fma3 (gfc_array_i2 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_i2_avx128_fma4 (gfc_array_i2 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_i2_avx128_fma4 (gfc_array_i2 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_i2_avx128_fma4 (gfc_array_i2 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "7cc2ba817bb946909b897a58905ae238f12f7222", "filename": "libgfortran/generated/matmulavx128_i4.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i4.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_i4_avx128_fma3 (gfc_array_i4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_i4_avx128_fma3 (gfc_array_i4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_i4_avx128_fma3 (gfc_array_i4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_i4_avx128_fma4 (gfc_array_i4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_i4_avx128_fma4 (gfc_array_i4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_i4_avx128_fma4 (gfc_array_i4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "5628064d887a2f1c9f6bed17fb7ed18231972fe9", "filename": "libgfortran/generated/matmulavx128_i8.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i8.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_i8_avx128_fma3 (gfc_array_i8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_i8_avx128_fma3 (gfc_array_i8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_i8_avx128_fma3 (gfc_array_i8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_i8_avx128_fma4 (gfc_array_i8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_i8_avx128_fma4 (gfc_array_i8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_i8_avx128_fma4 (gfc_array_i8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "68c0ef33a23126e8971f43d3b764c0c91f4bd1bb", "filename": "libgfortran/generated/matmulavx128_r10.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r10.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_r10_avx128_fma3 (gfc_array_r10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_r10_avx128_fma3 (gfc_array_r10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_r10_avx128_fma3 (gfc_array_r10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_r10_avx128_fma4 (gfc_array_r10 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_r10_avx128_fma4 (gfc_array_r10 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_r10_avx128_fma4 (gfc_array_r10 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "fadff1d6d63aa012b273e3d425622c793ec51d4d", "filename": "libgfortran/generated/matmulavx128_r16.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r16.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_r16_avx128_fma3 (gfc_array_r16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_r16_avx128_fma3 (gfc_array_r16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_r16_avx128_fma3 (gfc_array_r16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_r16_avx128_fma4 (gfc_array_r16 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_r16_avx128_fma4 (gfc_array_r16 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_r16_avx128_fma4 (gfc_array_r16 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "accec42ce17afaf2cc77cf6d38f5c091c3ae3e3c", "filename": "libgfortran/generated/matmulavx128_r4.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r4.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_r4_avx128_fma3 (gfc_array_r4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_r4_avx128_fma3 (gfc_array_r4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_r4_avx128_fma3 (gfc_array_r4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_r4_avx128_fma4 (gfc_array_r4 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_r4_avx128_fma4 (gfc_array_r4 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_r4_avx128_fma4 (gfc_array_r4 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "06e0437b606c01198d606b8f27c63a08d3819f07", "filename": "libgfortran/generated/matmulavx128_r8.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fgenerated%2Fmatmulavx128_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r8.c?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -109,35 +109,33 @@ matmul_r8_avx128_fma3 (gfc_array_r8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -178,7 +176,9 @@ matmul_r8_avx128_fma3 (gfc_array_r8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -223,7 +223,18 @@ matmul_r8_avx128_fma3 (gfc_array_r8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;\n@@ -667,35 +678,33 @@ matmul_r8_avx128_fma4 (gfc_array_r8 * const restrict retarray,\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -736,7 +745,9 @@ matmul_r8_avx128_fma4 (gfc_array_r8 * const restrict retarray,\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -781,7 +792,18 @@ matmul_r8_avx128_fma4 (gfc_array_r8 * const restrict retarray,\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}, {"sha": "32a1e01e12f66c6951412291f7783cd6af7a86e8", "filename": "libgfortran/m4/matmul_internal.m4", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fm4%2Fmatmul_internal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed33417a64bfe3d5d8159e29751532c34cb54990/libgfortran%2Fm4%2Fmatmul_internal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul_internal.m4?ref=ed33417a64bfe3d5d8159e29751532c34cb54990", "patch": "@@ -59,35 +59,33 @@\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else if (GFC_DESCRIPTOR_RANK (b) == 1)\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n       else\n \t{\n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(a,0);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,0);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 1:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 1 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \n \t  arg_extent = GFC_DESCRIPTOR_EXTENT(b,1);\n \t  ret_extent = GFC_DESCRIPTOR_EXTENT(retarray,1);\n \t  if (arg_extent != ret_extent)\n-\t    runtime_error (\"Incorrect extent in return array in\"\n-\t\t\t   \" MATMUL intrinsic for dimension 2:\"\n-\t\t\t   \" is %ld, should be %ld\",\n+\t    runtime_error (\"Array bound mismatch for dimension 2 of \"\n+\t    \t\t   \"array (%ld/%ld) \",\n \t\t\t   (long int) ret_extent, (long int) arg_extent);\n \t}\n     }\n@@ -129,7 +127,9 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n   if (count != GFC_DESCRIPTOR_EXTENT(b,0))\n     {\n       if (count > 0 || GFC_DESCRIPTOR_EXTENT(b,0) > 0)\n-\truntime_error (\"dimension of array B incorrect in MATMUL intrinsic\");\n+\truntime_error (\"Incorrect extent in argument B in MATMUL intrinsic \"\n+\t\t       \"in dimension 1: is %ld, should be %ld\",\n+\t\t       (long int) GFC_DESCRIPTOR_EXTENT(b,0), (long int) count);\n     }\n \n   if (GFC_DESCRIPTOR_RANK (b) == 1)\n@@ -174,7 +174,18 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n       if (lda > 0 && ldb > 0 && ldc > 0 && m > 1 && n > 1 && k > 1)\n \t{\n \t  assert (gemm != NULL);\n-\t  gemm (axstride == 1 ? \"N\" : \"T\", bxstride == 1 ? \"N\" : \"T\", &m,\n+\t  const char *transa, *transb;\n+\t  if (try_blas & 2)\n+\t    transa = \"C\";\n+\t  else\n+\t    transa = axstride == 1 ? \"N\" : \"T\";\n+\n+\t  if (try_blas & 4)\n+\t    transb = \"C\";\n+\t  else\n+\t    transb = bxstride == 1 ? \"N\" : \"T\";\n+\n+\t  gemm (transa, transb , &m,\n \t\t&n, &k,\t&one, abase, &lda, bbase, &ldb, &zero, dest,\n \t\t&ldc, 1, 1);\n \t  return;"}]}