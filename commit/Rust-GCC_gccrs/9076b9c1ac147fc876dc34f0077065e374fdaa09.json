{"sha": "9076b9c1ac147fc876dc34f0077065e374fdaa09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3NmI5YzFhYzE0N2ZjODc2ZGMzNGYwMDc3MDY1ZTM3NGZkYWEwOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-09-15T17:48:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-09-15T17:48:45Z"}, "message": "i386-protos.h (no_comparison_operator, [...]): Remove.\n\n\t* i386-protos.h (no_comparison_operator, uno_comparison_operator):\n\tRemove.\n\t(ix86_comparison_operator, ix86_cc_mode): Declare\n\t* i386.h (CCGC, CCGCO): New modes.\n\t(SELECT_CC_MODE): Move offline to ....\n\t* i386.c (ix86_cc_mode): .... here; use new modes.\n\t(ix86_comparison_operator): New.\n\t(fcmov_comparison_operator): Ensure proper mode.\n\t(put_condition_mode): More sanity checking.\n\t(ix86_match_ccmode): Handle new modes.\n\t(ix86_expand_fp_compare): GEU requires CCmode.\n\t(ix86_expand_strlensi_unroll_1): Use emit_cmp_and_jump_insn instead of\n\tdoing it by hand.\n\t* i386.md (cmp?i_ccz_1): Remove\n\t(cmp?i_ccno_1): Use ix86_match_ccmode.\n\t(cmp?i_minus_1): New.\n\t(cmpsi_1): New expander.\n\t(cmpqi_ext_1): Use match_ccmode\n\t(cmpqi_ext_3): New expander.\n\t(cmpqi_ext_3_insn): Rename from cmpqi_ext_3.\n\t(cmpqi_ext_4): Use match_ccmode.\n\t(add?i_?): Use match_ccmode.\n\t(add?i_6): New.\n\t(test?i_ccz_1): Remove\n\t(test?i_1): New.\n\t(testsi_ccno_1, testqi_ccz_1, testqi_ext_ccno_0): New expander.\n\t(testqi_ext_0): Use ix86_match_ccmode.\n\t(*xorqi_cc_ext_1): Use ix86_match_ccmode.\n\t(xorqi_cc_ext_1): New expander.\n\t(shift patterns): Use CCGOCmode for all shifts except for sar.\n\t(setcc_?, jcc_?, miv?icc_nic): Use ix86_comparison_operator.\n\t(setcc_3, jcc_3, miv?icc_c): Remove.\n\nFrom-SVN: r36442", "tree": {"sha": "946db031b91b5cd29cc9f11f74f58711b01523f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946db031b91b5cd29cc9f11f74f58711b01523f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9076b9c1ac147fc876dc34f0077065e374fdaa09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9076b9c1ac147fc876dc34f0077065e374fdaa09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9076b9c1ac147fc876dc34f0077065e374fdaa09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9076b9c1ac147fc876dc34f0077065e374fdaa09/comments", "author": null, "committer": null, "parents": [{"sha": "5eca72d98021cb04fae2e5b02b3ad84e09ce046b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eca72d98021cb04fae2e5b02b3ad84e09ce046b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eca72d98021cb04fae2e5b02b3ad84e09ce046b"}], "stats": {"total": 805, "additions": 488, "deletions": 317}, "files": [{"sha": "f57d5df63fb5f58b6ffc1ec5d8500f38bafa7957", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9076b9c1ac147fc876dc34f0077065e374fdaa09", "patch": "@@ -1,3 +1,38 @@\n+Fri Sep 15 19:45:55 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386-protos.h (no_comparison_operator, uno_comparison_operator):\n+\tRemove.\n+\t(ix86_comparison_operator, ix86_cc_mode): Declare\n+\t* i386.h (CCGC, CCGCO): New modes.\n+\t(SELECT_CC_MODE): Move offline to ....\n+\t* i386.c (ix86_cc_mode): .... here; use new modes.\n+\t(ix86_comparison_operator): New.\n+\t(fcmov_comparison_operator): Ensure proper mode.\n+\t(put_condition_mode): More sanity checking.\n+\t(ix86_match_ccmode): Handle new modes.\n+\t(ix86_expand_fp_compare): GEU requires CCmode.\n+\t(ix86_expand_strlensi_unroll_1): Use emit_cmp_and_jump_insn instead of\n+\tdoing it by hand.\n+\t* i386.md (cmp?i_ccz_1): Remove\n+\t(cmp?i_ccno_1): Use ix86_match_ccmode.\n+\t(cmp?i_minus_1): New.\n+\t(cmpsi_1): New expander.\n+\t(cmpqi_ext_1): Use match_ccmode\n+\t(cmpqi_ext_3): New expander.\n+\t(cmpqi_ext_3_insn): Rename from cmpqi_ext_3.\n+\t(cmpqi_ext_4): Use match_ccmode.\n+\t(add?i_?): Use match_ccmode.\n+\t(add?i_6): New.\n+\t(test?i_ccz_1): Remove\n+\t(test?i_1): New.\n+\t(testsi_ccno_1, testqi_ccz_1, testqi_ext_ccno_0): New expander.\n+\t(testqi_ext_0): Use ix86_match_ccmode.\n+\t(*xorqi_cc_ext_1): Use ix86_match_ccmode.\n+\t(xorqi_cc_ext_1): New expander.\n+\t(shift patterns): Use CCGOCmode for all shifts except for sar.\n+\t(setcc_?, jcc_?, miv?icc_nic): Use ix86_comparison_operator.\n+\t(setcc_3, jcc_3, miv?icc_c): Remove.\n+\n 2000-09-15  Will Cohen  <wcohen@redhat.com>\n \n \t* dwarf2out.c (add_const_value_attribute): Changed array into a"}, {"sha": "c7bd3d8f1be0a263ba38da6d7f0f9e21112972dc", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=9076b9c1ac147fc876dc34f0077065e374fdaa09", "patch": "@@ -56,11 +56,10 @@ extern int general_no_elim_operand PARAMS ((rtx, enum machine_mode));\n extern int nonmemory_no_elim_operand PARAMS ((rtx, enum machine_mode));\n extern int q_regs_operand PARAMS ((rtx, enum machine_mode));\n extern int non_q_regs_operand PARAMS ((rtx, enum machine_mode));\n-extern int no_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int sse_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int fcmov_comparison_operator PARAMS ((rtx, enum machine_mode));\n-extern int uno_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int cmp_fp_expander_operand PARAMS ((rtx, enum machine_mode));\n+extern int ix86_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int ext_register_operand PARAMS ((rtx, enum machine_mode));\n extern int binary_fp_operator PARAMS ((rtx, enum machine_mode));\n extern int mult_operator PARAMS ((rtx, enum machine_mode));\n@@ -71,6 +70,7 @@ extern int memory_displacement_operand PARAMS ((rtx, enum machine_mode));\n extern int cmpsi_operand PARAMS ((rtx, enum machine_mode));\n extern int long_memory_operand PARAMS ((rtx, enum machine_mode));\n extern int aligned_operand PARAMS ((rtx, enum machine_mode));\n+extern enum machine_mode ix86_cc_mode PARAMS ((enum rtx_code, rtx, rtx));\n \n \n extern int legitimate_pic_address_disp_p PARAMS ((rtx));"}, {"sha": "f189e4b800a8aa06a65e9ab46c6f975244062de1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 121, "deletions": 83, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9076b9c1ac147fc876dc34f0077065e374fdaa09", "patch": "@@ -1282,47 +1282,58 @@ sse_comparison_operator (op, mode)\n   enum rtx_code code = GET_CODE (op);\n   return code == EQ || code == LT || code == LE || code == UNORDERED;\n }\n-\n-/* Return 1 if OP is a comparison operator that can be issued by fcmov.  */\n-\n+/* Return 1 if OP is a valid comparison operator in valid mode.  */\n int\n-fcmov_comparison_operator (op, mode)\n-    register rtx op;\n-    enum machine_mode mode;\n+ix86_comparison_operator (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n {\n+  enum machine_mode inmode;\n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return 0;\n-\n   switch (GET_CODE (op))\n     {\n     case EQ: case NE:\n-    case LEU: case LTU: case GEU: case GTU:\n-    case UNORDERED: case ORDERED:\n       return 1;\n-\n+    case LT: case GE:\n+      inmode = GET_MODE (XEXP (op, 0));\n+      if (inmode == CCmode || inmode == CCGCmode\n+\t  || inmode == CCGOCmode || inmode == CCNOmode)\n+\treturn 1;\n+      return 0;\n+    case LTU: case GTU: case LEU: case ORDERED: case UNORDERED: case GEU:\n+      inmode = GET_MODE (XEXP (op, 0));\n+      if (inmode == CCmode)\n+\treturn 1;\n+      return 0;\n+    case GT: case LE:\n+      inmode = GET_MODE (XEXP (op, 0));\n+      if (inmode == CCmode || inmode == CCGCmode || inmode == CCNOmode)\n+\treturn 1;\n+      return 0;\n     default:\n       return 0;\n     }\n }\n \n-/* Return 1 if OP is any normal comparison operator plus {UN}ORDERED.  */\n+/* Return 1 if OP is a comparison operator that can be issued by fcmov.  */\n \n-int \n-uno_comparison_operator (op, mode)\n+int\n+fcmov_comparison_operator (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n+  enum machine_mode inmode = GET_MODE (XEXP (op, 0));\n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return 0;\n-\n   switch (GET_CODE (op))\n     {\n     case EQ: case NE:\n-    case LE: case LT: case GE: case GT:\n-    case LEU: case LTU: case GEU: case GTU:\n-    case UNORDERED: case ORDERED:\n       return 1;\n-\n+    case LTU: case GTU: case LEU: case ORDERED: case UNORDERED: case GEU:\n+      if (inmode == CCmode)\n+\treturn 1;\n+      return 0;\n     default:\n       return 0;\n     }\n@@ -3091,40 +3102,52 @@ put_condition_code (code, mode, reverse, fp, file)\n       suffix = \"ne\";\n       break;\n     case GT:\n-      if (mode == CCNOmode)\n+      if (mode != CCmode && mode != CCNOmode && mode != CCGCmode)\n \tabort ();\n       suffix = \"g\";\n       break;\n     case GTU:\n       /* ??? Use \"nbe\" instead of \"a\" for fcmov losage on some assemblers.\n \t Those same assemblers have the same but opposite losage on cmov.  */\n+      if (mode != CCmode)\n+\tabort();\n       suffix = fp ? \"nbe\" : \"a\";\n       break;\n     case LT:\n-      if (mode == CCNOmode)\n+      if (mode == CCNOmode || mode == CCGOCmode)\n \tsuffix = \"s\";\n-      else\n+      else if (mode == CCmode || mode == CCGCmode)\n \tsuffix = \"l\";\n+      else\n+\tabort();\n       break;\n     case LTU:\n+      if (mode != CCmode)\n+\tabort();\n       suffix = \"b\";\n       break;\n     case GE:\n-      if (mode == CCNOmode)\n+      if (mode == CCNOmode || mode == CCGOCmode)\n \tsuffix = \"ns\";\n-      else\n+      else if (mode == CCmode || mode == CCGCmode)\n \tsuffix = \"ge\";\n+      else\n+\tabort();\n       break;\n     case GEU:\n       /* ??? As above.  */\n+      if (mode != CCmode)\n+\tabort();\n       suffix = fp ? \"nb\" : \"ae\";\n       break;\n     case LE:\n-      if (mode == CCNOmode)\n+      if (mode != CCmode && mode != CCGCmode && mode != CCNOmode)\n \tabort ();\n       suffix = \"le\";\n       break;\n     case LEU:\n+      if (mode != CCmode)\n+\tabort ();\n       suffix = \"be\";\n       break;\n     case UNORDERED:\n@@ -4510,15 +4533,27 @@ ix86_match_ccmode (insn, req_mode)\n     set = XVECEXP (set, 0, 0);\n   if (GET_CODE (set) != SET)\n     abort ();\n+  if (GET_CODE (SET_SRC (set)) != COMPARE)\n+    abort ();\n \n   set_mode = GET_MODE (SET_DEST (set));\n   switch (set_mode)\n     {\n+    case CCNOmode:\n+      if (req_mode != CCNOmode\n+\t  && (req_mode != CCmode\n+\t      || XEXP (SET_SRC (set), 1) != const0_rtx))\n+\treturn 0;\n+      break;\n     case CCmode:\n-      if (req_mode == CCNOmode)\n+      if (req_mode == CCGCmode)\n \treturn 0;\n       /* FALLTHRU */\n-    case CCNOmode:\n+    case CCGCmode:\n+      if (req_mode == CCGOCmode || req_mode == CCNOmode)\n+\treturn 0;\n+      /* FALLTHRU */\n+    case CCGOCmode:\n       if (req_mode == CCZmode)\n \treturn 0;\n       /* FALLTHRU */\n@@ -4628,6 +4663,49 @@ ix86_fp_compare_mode (code)\n   return unordered ? CCFPUmode : CCFPmode;\n }\n \n+enum machine_mode\n+ix86_cc_mode (code, op0, op1)\n+     enum rtx_code code;\n+     rtx op0, op1;\n+{\n+  if (GET_MODE_CLASS (GET_MODE (op0)) == MODE_FLOAT)\n+    return ix86_fp_compare_mode (code);\n+  switch (code)\n+    {\n+      /* Only zero flag is needed.  */\n+    case EQ:\t\t\t/* ZF=0 */\n+    case NE:\t\t\t/* ZF!=0 */\n+      return CCZmode;\n+      /* Codes needing carry flag.  */\n+    case GEU:\t\t\t/* CF=0 */\n+    case GTU:\t\t\t/* CF=0 & ZF=0 */\n+    case LTU:\t\t\t/* CF=1 */\n+    case LEU:\t\t\t/* CF=1 | ZF=1 */\n+      return CCmode;\n+      /* Codes possibly doable only with sign flag when\n+         comparing against zero.  */\n+    case GE:\t\t\t/* SF=OF   or   SF=0 */\n+    case LT:\t\t\t/* SF<>OF  or   SF=0 */\n+      if (op1 == const0_rtx)\n+\treturn CCGOCmode;\n+      else\n+\t/* For other cases Carry flag is not required.  */\n+\treturn CCGCmode;\n+      /* Codes doable only with sign flag when comparing\n+         against zero, but we miss jump instruction for it\n+         so we need to use relational tests agains overflow\n+         that thus needs to be zero.  */\n+    case GT:\t\t\t/* ZF=0 & SF=OF */\n+    case LE:\t\t\t/* ZF=1 | SF<>OF */\n+      if (op1 == const0_rtx)\n+\treturn CCNOmode;\n+      else\n+\treturn CCGCmode;\n+    default:\n+      abort();\n+    }\n+}\n+\n /* Return true if we should use an FCOMI instruction for this fp comparison.  */\n \n int\n@@ -4872,6 +4950,7 @@ ix86_expand_fp_compare (code, op0, op1, scratch)\n \t      emit_insn (gen_andqi_ext_0 (scratch, scratch, GEN_INT (0x45)));\n \t      emit_insn (gen_addqi_ext_1 (scratch, scratch, constm1_rtx));\n \t      emit_insn (gen_cmpqi_ext_3 (scratch, GEN_INT (0x44)));\n+\t      intcmp_mode = CCmode;\n \t      code = GEU;\n \t      break;\n \t    case UNLE:\n@@ -5921,8 +6000,6 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n   rtx align_4_label = gen_label_rtx ();\n   rtx end_0_label = gen_label_rtx ();\n   rtx mem;\n-  rtx no_flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n-  rtx z_flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n   rtx tmpreg = gen_reg_rtx (SImode);\n \n   align = 0;\n@@ -5944,30 +6021,12 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t  align_rtx = expand_binop (SImode, and_optab, scratch, GEN_INT (3),\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n-\t  emit_insn (gen_cmpsi_ccz_1 (align_rtx, const0_rtx));\n-\n-\t  tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n-\t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n-\t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n-\t\t\t\t\t\t\t align_4_label),\n-\t\t\t\t      pc_rtx);\n-\t  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n-\n-\t  emit_insn (gen_cmpsi_ccno_1 (align_rtx, GEN_INT (2)));\n-\n-\t  tmp = gen_rtx_EQ (VOIDmode, no_flags, const0_rtx);\n-\t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n-\t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n-\t\t\t\t\t\t\t align_2_label),\n-\t\t\t\t      pc_rtx);\n-\t  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n-\n-\t  tmp = gen_rtx_GTU (VOIDmode, no_flags, const0_rtx);\n-\t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n-\t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n-\t\t\t\t\t\t\t align_3_label),\n-\t\t\t\t      pc_rtx);\n-\t  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+\t  emit_cmp_and_jump_insns (align_rtx, const0_rtx, EQ, NULL,\n+\t\t\t  \t   SImode, 1, 0, align_4_label);\n+\t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), EQ, NULL,\n+\t\t\t\t   SImode, 1, 0, align_2_label);\n+\t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), GTU, NULL,\n+\t\t\t\t   SImode, 1, 0, align_3_label);\n \t}\n       else\n         {\n@@ -5977,28 +6036,17 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t  align_rtx = expand_binop (SImode, and_optab, scratch, GEN_INT (2),\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n-\t  emit_insn (gen_cmpsi_ccz_1 (align_rtx, const0_rtx));\n-\n-\t  tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n-\t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n-\t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n-\t\t\t\t\t\t\t align_4_label),\n-\t\t\t\t      pc_rtx);\n-\t  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+\t  emit_cmp_and_jump_insns (align_rtx, const0_rtx, EQ, NULL,\n+\t\t\t\t   SImode, 1, 0, align_4_label);\n         }\n \n       mem = gen_rtx_MEM (QImode, out);\n \n       /* Now compare the bytes.  */\n \n       /* Compare the first n unaligned byte on a byte per byte basis. */\n-      emit_insn (gen_cmpqi_ccz_1 (mem, const0_rtx));\n-\n-      tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n-      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n-\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, end_0_label),\n-\t\t\t\t  pc_rtx);\n-      emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+      emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL,\n+\t\t\t       QImode, 1, 0, end_0_label);\n \n       /* Increment the address. */\n       emit_insn (gen_addsi3 (out, out, const1_rtx));\n@@ -6008,27 +6056,16 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t{\n \t  emit_label (align_2_label);\n \n-\t  emit_insn (gen_cmpqi_ccz_1 (mem, const0_rtx));\n-\n-\t  tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n-\t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n-\t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n-\t\t\t\t\t\t\t end_0_label),\n-\t\t\t\t      pc_rtx);\n-\t  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+\t  emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL,\n+\t\t\t\t   QImode, 1, 0, end_0_label);\n \n \t  emit_insn (gen_addsi3 (out, out, const1_rtx));\n \n \t  emit_label (align_3_label);\n \t}\n \n-      emit_insn (gen_cmpqi_ccz_1 (mem, const0_rtx));\n-\n-      tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n-      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n-\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, end_0_label),\n-\t\t\t\t  pc_rtx);\n-      emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+      emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL,\n+\t\t\t       QImode, 1, 0, end_0_label);\n \n       emit_insn (gen_addsi3 (out, out, const1_rtx));\n     }\n@@ -6049,7 +6086,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n   emit_insn (gen_one_cmplsi2 (scratch, scratch));\n   emit_insn (gen_andsi3 (tmpreg, tmpreg, scratch));\n   emit_insn (gen_andsi3 (tmpreg, tmpreg, GEN_INT (0x80808080)));\n-  emit_cmp_and_jump_insns (tmpreg, const0_rtx, EQ, 0, SImode, 1, 0, align_4_label);\n+  emit_cmp_and_jump_insns (tmpreg, const0_rtx, EQ, 0,\n+\t\t\t   SImode, 1, 0, align_4_label);\n \n   if (TARGET_CMOVE)\n     {"}, {"sha": "c8b3c98ec5fa810a69202339a820ab55e8f7c7f4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9076b9c1ac147fc876dc34f0077065e374fdaa09", "patch": "@@ -2257,14 +2257,25 @@ while (0)\n \n    For the i386, we need separate modes when floating-point\n    equality comparisons are being done. \n+   \n+   Add CCNO to indicate comparisons against zero that requires\n+   No Overflow.  Sign bit test is used instead and thus\n+   can be used to form \"a&b>0\" type of tests.\n+\n+   Add CCGC to indicate comparisons agains zero that allows\n+   unspecified garbage in the Carry flag.  This mode is used\n+   by inc/dec instructions.\n \n-   Add CCNO to indicate No Overflow, which is often also includes\n-   No Carry.  This is typically used on the output of logicals,\n-   and is only valid in comparisons against zero.\n+   Add CCGCO to indicate comparisons agains zero that allows\n+   unspecified garbage in the Carry and Overflow flag. This\n+   mode is used to simulate comparisons of (a-b) and (a+b)\n+   against zero using sub/cmp/add operations.\n \n    Add CCZ to indicate that only the Zero flag is valid.  */\n \n #define EXTRA_CC_MODES \\\n+\tCC(CCGCmode, \"CCGC\") \\\n+\tCC(CCGOCmode, \"CCGOC\") \\\n \tCC(CCNOmode, \"CCNO\") \\\n \tCC(CCZmode, \"CCZ\") \\\n \tCC(CCFPmode, \"CCFP\") \\\n@@ -2279,12 +2290,7 @@ while (0)\n    For integer comparisons against zero, reduce to CCNOmode or CCZmode if\n    possible, to allow for more combinations.  */\n \n-#define SELECT_CC_MODE(OP,X,Y)\t\t\t\t\\\n-  (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\\\n-   ? (OP) == EQ || (OP) == NE ? CCFPUmode : CCFPmode\t\\\n-   : (OP) == LE || (OP) == GT ? CCmode\t\t\t\\\n-   : (Y) != const0_rtx ? CCmode\t\t\t\t\\\n-   : (OP) == EQ || (OP) == NE ? CCZmode : CCNOmode)\n+#define SELECT_CC_MODE(OP,X,Y) ix86_cc_mode (OP, X, Y)\n \f\n /* Control the assembler format that we output, to the extent\n    this does not vary between assemblers.  */\n@@ -2591,10 +2597,9 @@ do { long l;\t\t\t\t\t\t\\\n   {\"nonmemory_no_elim_operand\", {CONST_INT, REG, SUBREG}},\t\t\\\n   {\"q_regs_operand\", {SUBREG, REG}},\t\t\t\t\t\\\n   {\"non_q_regs_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"no_comparison_operator\", {EQ, NE, LT, GE, LTU, GTU, LEU, GEU}},\t\\\n   {\"fcmov_comparison_operator\", {EQ, NE, LTU, GTU, LEU, GEU}},\t\t\\\n   {\"sse_comparison_operator\", {EQ, LT, LE, UNORDERED }},\t\t\\\n-  {\"uno_comparison_operator\", {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU,\t\\\n+  {\"ix86_comparison_operator\", {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU,\t\\\n \t\t\t       GTU, UNORDERED, ORDERED}},\t\t\\\n   {\"cmp_fp_expander_operand\", {CONST_DOUBLE, SUBREG, REG, MEM}},\t\\\n   {\"ext_register_operand\", {SUBREG, REG}},\t\t\t\t\\"}, {"sha": "b825e0f2242000c77b31af72a53e0b129de27f93", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 314, "deletions": 221, "changes": 535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076b9c1ac147fc876dc34f0077065e374fdaa09/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9076b9c1ac147fc876dc34f0077065e374fdaa09", "patch": "@@ -1061,40 +1061,46 @@\n   DONE;\n }\")\n \n-(define_insn \"cmpsi_ccz_1\"\n-  [(set (reg:CCZ 17)\n-\t(compare:CCZ (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t     (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n-  \"\"\n+(define_insn \"*cmpsi_ccno_1\"\n+  [(set (reg 17)\n+\t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n+\t\t (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{l}\\\\t{%0, %0|%0, %0}\n    cmp{l}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test,icmp\")\n    (set_attr \"length_immediate\" \"0,1\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"cmpsi_ccno_1\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t      (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n-  \"\"\n-  \"@\n-   test{l}\\\\t{%0, %0|%0, %0}\n-   cmp{l}\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"test,icmp\")\n-   (set_attr \"length_immediate\" \"0,1\")\n+(define_insn \"*cmpsi_minus_1\"\n+  [(set (reg 17)\n+\t(compare (minus:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm,r\")\n+\t\t\t   (match_operand:SI 1 \"general_operand\" \"ri,mr\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\"\n+  \"cmp{l}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"cmpsi_1\"\n+(define_expand \"cmpsi_1\"\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:SI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t    (match_operand:SI 1 \"general_operand\" \"ri,mr\")))]\n-  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*cmpsi_1_insn\"\n+  [(set (reg 17)\n+\t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"rm,r\")\n+\t\t (match_operand:SI 1 \"general_operand\" \"ri,mr\")))]\n+  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+    && ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{l}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*cmphi_0\"\n+(define_insn \"*cmphi_ccno_1\"\n   [(set (reg 17)\n \t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"r,?mr\")\n \t\t (match_operand:HI 1 \"const0_operand\" \"n,n\")))]\n@@ -1106,32 +1112,31 @@\n    (set_attr \"length_immediate\" \"0,1\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"*cmphi_1\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n-\t\t    (match_operand:HI 1 \"general_operand\" \"ri,mr\")))]\n-  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n+(define_insn \"*cmphi_minus_1\"\n+  [(set (reg 17)\n+\t(compare (minus:HI (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n+\t\t\t   (match_operand:HI 1 \"general_operand\" \"ri,mr\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\"\n   \"cmp{w}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"cmpqi_ccz_1\"\n-  [(set (reg:CCZ 17)\n-\t(compare:CCZ (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n-\t\t     (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n-  \"\"\n-  \"@\n-   test{b}\\\\t{%0, %0|%0, %0}\n-   cmp{b}\\\\t{$0, %0|%0, 0}\"\n-  [(set_attr \"type\" \"test,icmp\")\n-   (set_attr \"length_immediate\" \"0,1\")\n-   (set_attr \"mode\" \"QI\")])\n+(define_insn \"*cmphi_1\"\n+  [(set (reg 17)\n+\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n+\t\t (match_operand:HI 1 \"general_operand\" \"ri,mr\")))]\n+  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+   && ix86_match_ccmode (insn, CCmode)\"\n+  \"cmp{w}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"icmp\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*cmpqi_ccno_1\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n-\t\t      (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n-  \"\"\n+  [(set (reg 17)\n+\t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n+\t\t (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{b}\\\\t{%0, %0|%0, %0}\n    cmp{b}\\\\t{$0, %0|%0, 0}\"\n@@ -1140,24 +1145,35 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_1\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n-\t\t    (match_operand:QI 1 \"general_operand\" \"qi,mq\")))]\n-  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n+  [(set (reg 17)\n+\t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n+\t\t (match_operand:QI 1 \"general_operand\" \"qi,mq\")))]\n+  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+    && ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"*cmpqi_minus_1\"\n+  [(set (reg 17)\n+\t(compare (minus:QI (match_operand:QI 0 \"nonimmediate_operand\" \"rm,r\")\n+\t\t\t   (match_operand:QI 1 \"general_operand\" \"ri,mr\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\"\n+  \"cmp{w}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"icmp\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*cmpqi_ext_1\"\n-  [(set (reg:CC 17)\n-\t(compare:CC\n+  [(set (reg 17)\n+\t(compare\n \t  (match_operand:QI 0 \"general_operand\" \"qm\")\n \t  (subreg:QI\n \t    (zero_extract:SI\n \t      (match_operand 1 \"ext_register_operand\" \"q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\\\t{%h1, %0|%0, %h1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"QI\")])\n@@ -1177,7 +1193,7 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"cmpqi_ext_3\"\n+(define_expand \"cmpqi_ext_3\"\n   [(set (reg:CC 17)\n \t(compare:CC\n \t  (subreg:QI\n@@ -1187,13 +1203,25 @@\n \t      (const_int 8)) 0)\n \t  (match_operand:QI 1 \"general_operand\" \"qmn\")))]\n   \"\"\n+  \"\")\n+\n+(define_insn \"cmpqi_ext_3_insn\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (subreg:QI\n+\t    (zero_extract:SI\n+\t      (match_operand 0 \"ext_register_operand\" \"q\")\n+\t      (const_int 8)\n+\t      (const_int 8)) 0)\n+\t  (match_operand:QI 1 \"general_operand\" \"qmn\")))]\n+  \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_ext_4\"\n-  [(set (reg:CC 17)\n-\t(compare:CC\n+  [(set (reg 17)\n+\t(compare\n \t  (subreg:QI\n \t    (zero_extract:SI\n \t      (match_operand 0 \"ext_register_operand\" \"q\")\n@@ -1204,7 +1232,7 @@\n \t      (match_operand 1 \"ext_register_operand\" \"q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\\\t{%h1, %h0|%h0, %h1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"QI\")])\n@@ -3955,7 +3983,7 @@\n \t  (const_int 0)))\t\t\t\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, SImode, operands)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n@@ -4001,7 +4029,7 @@\n \t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n \t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n@@ -4043,12 +4071,13 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*addsi_4\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))\n-\t\t    (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")))\n+  [(set (reg 17)\n+\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))\n+\t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\n+   && ix86_match_ccmode (insn, CCmode)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n@@ -4057,18 +4086,67 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*addsi_5\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n-\t\t    (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n+  [(set (reg 17)\n+\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n+\t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"(GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n+   && ix86_match_ccmode (insn, CCmode)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n   \"add{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*addsi_6\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:SI 2 \"general_operand\" \"rmni\"))\n+\t  (const_int 0)))\t\t\t\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n+   /* Current assemblers are broken and do not allow @GOTOFF in\n+      ought but a memory context. */\n+   && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_INCDEC:\n+      if (! rtx_equal_p (operands[0], operands[1]))\n+\tabort ();\n+      if (operands[2] == const1_rtx)\n+        return \\\"inc{l}\\\\t%0\\\";\n+      else if (operands[2] == constm1_rtx)\n+        return \\\"dec{l}\\\\t%0\\\";\n+      else\n+\tabort();\n+\n+    default:\n+      if (! rtx_equal_p (operands[0], operands[1]))\n+\tabort ();\n+      /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n+\t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n+      if (GET_CODE (operands[2]) == CONST_INT\n+          && (INTVAL (operands[2]) == 128\n+\t      || (INTVAL (operands[2]) < 0\n+\t\t  && INTVAL (operands[2]) != -128)))\n+        {\n+          operands[2] = GEN_INT (-INTVAL (operands[2]));\n+          return \\\"sub{l}\\\\t{%2, %0|%0, %2}\\\";\n+        }\n+      return \\\"add{l}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n+\t(const_string \"incdec\")\n+\t(const_string \"alu\")))\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"addhi3\"\n   [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t\t   (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -4173,7 +4251,7 @@\n \t  (const_int 0)))\t\t\t\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"*\n {\n@@ -4213,7 +4291,7 @@\n \t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n \t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"*\n {\n@@ -4249,26 +4327,70 @@\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*addhi_4\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))\n-\t\t    (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")))\n+  [(set (reg 17)\n+\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))\n+\t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"add{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*addhi_5\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n-\t\t    (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n+  [(set (reg 17)\n+\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n+\t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"(GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"add{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"HI\")])\n \n+(define_insn \"*addhi_6\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:HI 2 \"general_operand\" \"rmni\"))\n+\t  (const_int 0)))\t\t\t\n+   (clobber (match_scratch:HI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_INCDEC:\n+      if (operands[2] == const1_rtx)\n+\treturn \\\"inc{w}\\\\t%0\\\";\n+      else if (operands[2] == constm1_rtx\n+\t       || (GET_CODE (operands[2]) == CONST_INT\n+\t\t   && INTVAL (operands[2]) == 65535))\n+\treturn \\\"dec{w}\\\\t%0\\\";\n+      abort();\n+\n+    default:\n+      /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n+\t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n+      if (GET_CODE (operands[2]) == CONST_INT\n+          && (INTVAL (operands[2]) == 128\n+\t      || (INTVAL (operands[2]) < 0\n+\t\t  && INTVAL (operands[2]) != -128)))\n+\t{\n+\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n+\t  return \\\"sub{w}\\\\t{%2, %0|%0, %2}\\\";\n+\t}\n+      return \\\"add{w}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n+\t(const_string \"incdec\")\n+\t(const_string \"alu\")))\n+   (set_attr \"mode\" \"HI\")])\n+\n (define_expand \"addqi3\"\n   [(parallel [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t\t   (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n@@ -4384,7 +4506,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"*\n {\n@@ -4421,7 +4543,7 @@\n \t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n \t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:QI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"*\n {\n@@ -4454,26 +4576,67 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*addqi_4\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))\n-\t\t    (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")))\n+  [(set (reg 17)\n+\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))\n+\t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"add{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*addqi_5\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n-\t\t    (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n+  [(set (reg 17)\n+\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n+\t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:QI 0 \"=r\"))]\n-  \"(GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"add{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"*addqi_6\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qmni\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:QI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_INCDEC:\n+      if (operands[2] == const1_rtx)\n+\treturn \\\"inc{b}\\\\t%0\\\";\n+      else if (operands[2] == constm1_rtx\n+\t       || (GET_CODE (operands[2]) == CONST_INT\n+\t\t   && INTVAL (operands[2]) == 255))\n+\treturn \\\"dec{b}\\\\t%0\\\";\n+      abort();\n+\n+    default:\n+      /* Make things pretty and `subb $4,%al' rather than `addb $-4, %al'.  */\n+      if (GET_CODE (operands[2]) == CONST_INT\n+          && INTVAL (operands[2]) < 0)\n+\t{\n+\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n+\t  return \\\"sub{b}\\\\t{%2, %0|%0, %2}\\\";\n+\t}\n+      return \\\"add{b}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n+\t(const_string \"incdec\")\n+\t(const_string \"alu\")))\n+   (set_attr \"mode\" \"QI\")])\n+\n \n (define_insn \"addqi_ext_1\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=q\")\n@@ -4631,7 +4794,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (MINUS, SImode, operands)\"\n   \"sub{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n@@ -4675,7 +4838,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(minus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (MINUS, HImode, operands)\"\n   \"sub{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n@@ -4719,7 +4882,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=qm,q\")\n \t(minus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"sub{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n@@ -5175,31 +5338,28 @@\n ;; On Pentium, \"test imm, reg\" is pairable only with eax, ax, and al.\n ;; Note that this excludes ah.\n \n-(define_insn \"*testsi_ccz_1\"\n-  [(set (reg:CCZ 17)\n-\t(compare:CCZ\n+\n+(define_insn \"testsi_1\"\n+  [(set (reg 17)\n+\t(compare\n \t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%*a,r,rm\")\n \t\t  (match_operand:SI 1 \"nonmemory_operand\" \"in,in,rin\"))\n \t  (const_int 0)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{l}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"modrm\" \"0,1,1\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"pent_pair\" \"uv,np,uv\")])\n \n-(define_insn \"testsi_ccno_1\"\n+(define_expand \"testsi_ccno_1\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n-\t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%*a,r,rm\")\n-\t\t  (match_operand:SI 1 \"nonmemory_operand\" \"in,in,rin\"))\n+\t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t\t  (match_operand:SI 1 \"nonmemory_operand\" \"\"))\n \t  (const_int 0)))]\n   \"\"\n-  \"test{l}\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"test\")\n-   (set_attr \"modrm\" \"0,1,1\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"pent_pair\" \"uv,np,uv\")])\n+  \"\")\n \n (define_insn \"*testhi_1\"\n   [(set (reg 17)\n@@ -5213,25 +5373,20 @@\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"pent_pair\" \"uv,np,uv\")])\n \n-(define_insn \"testqi_ccz_1\"\n+(define_expand \"testqi_ccz_1\"\n   [(set (reg:CCZ 17)\n-        (compare:CCZ\n-\t  (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%*a,q,qm\")\n-\t\t  (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn\"))\n-\t  (const_int 0)))]\n+        (compare:CCZ (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+\t\t\t     (match_operand:QI 1 \"nonmemory_operand\" \"\"))\n+\t\t (const_int 0)))]\n   \"\"\n-  \"test{b}\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"test\")\n-   (set_attr \"modrm\" \"0,1,1\")\n-   (set_attr \"mode\" \"QI\")\n-   (set_attr \"pent_pair\" \"uv,np,uv\")])\n+  \"\")\n \n-(define_insn \"*testqi_ccno_1\"\n-  [(set (reg:CCNO 17)\n-        (compare:CCNO (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%*a,q,qm,r\")\n-\t\t\t      (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn,n\"))\n-\t\t      (const_int 0)))]\n-  \"\"\n+(define_insn \"*testqi_1\"\n+  [(set (reg 17)\n+        (compare (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%*a,q,qm,r\")\n+\t\t\t (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn,n\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{b}\\\\t{%1, %0|%0, %1} \n    test{b}\\\\t{%1, %0|%0, %1} \n@@ -5242,34 +5397,31 @@\n    (set_attr \"mode\" \"QI,QI,QI,SI\")\n    (set_attr \"pent_pair\" \"uv,np,uv,np\")])\n \n-(define_insn \"*testqi_ext_ccz_0\"\n-  [(set (reg:CCZ 17)\n-\t(compare:CCZ\n+(define_expand \"testqi_ext_ccno_0\"\n+  [(set (reg:CCNO 17)\n+\t(compare:CCNO\n \t  (and:SI\n \t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"q\")\n+\t      (match_operand 0 \"ext_register_operand\" \"\")\n \t      (const_int 8)\n \t      (const_int 8))\n-\t    (match_operand 1 \"const_int_operand\" \"n\"))\n+\t    (match_operand 1 \"const_int_operand\" \"\"))\n \t  (const_int 0)))]\n-  \"(unsigned HOST_WIDE_INT) INTVAL (operands[1]) <= 0xff\"\n-  \"test{b}\\\\t{%1, %h0|%h0, %1}\"\n-  [(set_attr \"type\" \"test\")\n-   (set_attr \"mode\" \"QI\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"pent_pair\" \"np\")])\n+  \"\"\n+  \"\")\n \n-(define_insn \"testqi_ext_ccno_0\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+(define_insn \"*testqi_ext_0\"\n+  [(set (reg 17)\n+\t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n \t      (match_operand 0 \"ext_register_operand\" \"q\")\n \t      (const_int 8)\n \t      (const_int 8))\n \t    (match_operand 1 \"const_int_operand\" \"n\"))\n \t  (const_int 0)))]\n-  \"(unsigned HOST_WIDE_INT) INTVAL (operands[1]) <= 0xff\"\n+  \"(unsigned HOST_WIDE_INT) INTVAL (operands[1]) <= 0xff\n+   && ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI\")\n@@ -5941,9 +6093,9 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"xorqi_cc_ext_1\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+(define_insn \"*xorqi_cc_ext_1\"\n+  [(set (reg 17)\n+\t(compare\n \t  (xor:SI\n \t    (zero_extract:SI\n \t      (match_operand 1 \"ext_register_operand\" \"0\")\n@@ -5957,10 +6109,30 @@\n \t(xor:SI \n \t  (zero_extract:SI (match_dup 1) (const_int 8) (const_int 8))\n \t  (match_dup 2)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"xor{b}\\\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n+\n+(define_expand \"xorqi_cc_ext_1\"\n+  [(parallel [\n+     (set (reg:CCNO 17)\n+\t  (compare:CCNO\n+\t    (xor:SI\n+\t      (zero_extract:SI\n+\t\t(match_operand 1 \"ext_register_operand\" \"\")\n+\t\t(const_int 8)\n+\t\t(const_int 8))\n+\t      (match_operand:QI 2 \"general_operand\" \"\"))\n+\t    (const_int 0)))\n+     (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"\")\n+\t\t\t   (const_int 8)\n+\t\t\t   (const_int 8))\n+\t  (xor:SI \n+\t    (zero_extract:SI (match_dup 1) (const_int 8) (const_int 8))\n+\t    (match_dup 2)))])]\n+  \"\"\n+  \"\")\n \f\n ;; Negation instructions\n \n@@ -6810,7 +6982,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n   \"*\n {\n@@ -6939,7 +7111,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n   \"*\n {\n@@ -7106,7 +7278,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashift:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n   \"*\n {\n@@ -7576,7 +7748,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\\\t%0\"\n@@ -7597,7 +7769,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"@\n    shr{l}\\\\t{%2, %0|%0, %2}\"\n@@ -7649,7 +7821,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\\\t%0\"\n@@ -7670,7 +7842,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"@\n    shr{w}\\\\t{%2, %0|%0, %2}\"\n@@ -7722,7 +7894,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\\\t%0\"\n@@ -7743,7 +7915,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n@@ -8132,7 +8304,7 @@\n \n (define_insn \"*setcc_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n-\t(match_operator:QI 1 \"no_comparison_operator\"\n+\t(match_operator:QI 1 \"ix86_comparison_operator\"\n \t  [(reg 17) (const_int 0)]))]\n   \"\"\n   \"set%C1\\\\t%0\"\n@@ -8141,30 +8313,13 @@\n \n (define_insn \"*setcc_2\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n-\t(match_operator:QI 1 \"no_comparison_operator\"\n+\t(match_operator:QI 1 \"ix86_comparison_operator\"\n \t  [(reg 17) (const_int 0)]))]\n   \"\"\n   \"set%C1\\\\t%0\"\n   [(set_attr \"type\" \"setcc\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*setcc_3\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n-\t(match_operator:QI 1 \"uno_comparison_operator\"\n-\t  [(reg:CC 17) (const_int 0)]))]\n-  \"\"\n-  \"set%C1\\\\t%0\"\n-  [(set_attr \"type\" \"setcc\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"setcc_4\"\n-  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n-\t(match_operator:QI 1 \"uno_comparison_operator\"\n-\t  [(reg:CC 17) (const_int 0)]))]\n-  \"\"\n-  \"set%C1\\\\t%0\"\n-  [(set_attr \"type\" \"setcc\")\n-   (set_attr \"mode\" \"QI\")])\n \f\n ;; Basic conditional jump instructions.\n ;; We ignore the overflow flag for signed branch instructions.\n@@ -8318,7 +8473,7 @@\n \n (define_insn \"*jcc_1\"\n   [(set (pc)\n-\t(if_then_else (match_operator 1 \"no_comparison_operator\"\n+\t(if_then_else (match_operator 1 \"ix86_comparison_operator\"\n \t\t\t\t      [(reg 17) (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n@@ -8335,7 +8490,7 @@\n \n (define_insn \"*jcc_2\"\n   [(set (pc)\n-\t(if_then_else (match_operator 1 \"no_comparison_operator\"\n+\t(if_then_else (match_operator 1 \"ix86_comparison_operator\"\n \t\t\t\t      [(reg 17) (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n@@ -8350,40 +8505,6 @@\n \t     (const_int 0)\n \t     (const_int 1)))])\n \n-(define_insn \"*jcc_3\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 1 \"uno_comparison_operator\"\n-\t\t\t\t      [(reg:CC 17) (const_int 0)])\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"j%C1\\\\t%l0\"\n-  [(set_attr \"type\" \"ibr\")\n-   (set (attr \"prefix_0f\")\n-\t   (if_then_else (and (ge (minus (match_dup 0) (pc))\n-\t\t\t\t  (const_int -128))\n-\t\t\t      (lt (minus (match_dup 0) (pc))\n-\t\t\t\t  (const_int 124)))\n-\t     (const_int 0)\n-\t     (const_int 1)))])\n-\n-(define_insn \"*jcc_4\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 1 \"uno_comparison_operator\"\n-\t\t\t\t      [(reg:CC 17) (const_int 0)])\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"\"\n-  \"j%c1\\\\t%l0\"\n-  [(set_attr \"type\" \"ibr\")\n-   (set (attr \"prefix_0f\")\n-\t   (if_then_else (and (ge (minus (match_dup 0) (pc))\n-\t\t\t\t  (const_int -128))\n-\t\t\t      (lt (minus (match_dup 0) (pc))\n-\t\t\t\t  (const_int 124)))\n-\t     (const_int 0)\n-\t     (const_int 1)))])\n-\n ;; Define combination compare-and-branch fp compare instructions to use\n ;; during early optimization.  Splitting the operation apart early makes\n ;; for bad code when we want to reverse the operation.\n@@ -10484,7 +10605,7 @@\n \n (define_insn \"*movsicc_noc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 1 \"no_comparison_operator\" \n+\t(if_then_else:SI (match_operator 1 \"ix86_comparison_operator\" \n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm\")))]\n@@ -10496,20 +10617,6 @@\n   [(set_attr \"type\" \"icmov\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*movsicc_c\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 1 \"uno_comparison_operator\" \n-\t\t\t\t[(reg:CC 17) (const_int 0)])\n-\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm\")))]\n-  \"TARGET_CMOVE\n-   && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n-  \"@\n-   cmov%C1\\\\t{%2, %0|%0, %2}\n-   cmov%c1\\\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"icmov\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_expand \"movhicc\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(if_then_else:HI (match_operand 1 \"comparison_operator\" \"\")\n@@ -10520,7 +10627,7 @@\n \n (define_insn \"*movhicc_noc\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:HI (match_operator 1 \"no_comparison_operator\" \n+\t(if_then_else:HI (match_operator 1 \"ix86_comparison_operator\" \n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0\")\n \t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm\")))]\n@@ -10532,20 +10639,6 @@\n   [(set_attr \"type\" \"icmov\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"*movhicc_c\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:HI (match_operator 1 \"uno_comparison_operator\" \n-\t\t\t\t[(reg:CC 17) (const_int 0)])\n-\t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm\")))]\n-  \"TARGET_CMOVE\n-   && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n-  \"@\n-   cmov%C1\\\\t{%2, %0|%0, %2}\n-   cmov%c1\\\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"icmov\")\n-   (set_attr \"mode\" \"HI\")])\n-\n (define_expand \"movsfcc\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")"}]}