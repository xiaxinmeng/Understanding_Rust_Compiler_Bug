{"sha": "52747219da6a56d3f607d84ac51fa82e2e55075d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3NDcyMTlkYTZhNTZkM2Y2MDdkODRhYzUxZmE4MmUyZTU1MDc1ZA==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-12-10T21:25:12Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-12-10T21:25:12Z"}, "message": "Add march=knl.\n\ngcc/\n\n\t* config.gcc: Support \"knl\".\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect \"knl\".\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n\tPROCESSOR_KNL.\n\t* config/i386/i386.c (m_KNL): Define.\n\t(processor_target_table): Add \"knl\".\n\t(PTA_KNL): Define.\n\t(ix86_issue_rate): Add PROCESSOR_KNL.\n\t(ix86_adjust_cost): Ditto.\n\t(ia32_multipass_dfa_lookahead): Ditto.\n\t(get_builtin_code_for_version): Handle \"knl\".\n\t(fold_builtin_cpu): Ditto.\n\t* config/i386/i386.h (TARGET_KNL): Define.\n\t(processor_type): Add PROCESSOR_KNL.\n\t* config/i386/i386.md (attr \"cpu\"): Add knl.\n\t* config/i386/x86-tune.def: Add m_KNL.\n\n\ngcc/testsuite/\n\n\t* gcc.target/i386/funcspec-5.c: Test avx512f and knl.\n\nFrom-SVN: r218610", "tree": {"sha": "06e9f75cf9ea2d2a46328d6c3e9ea1077d32234a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06e9f75cf9ea2d2a46328d6c3e9ea1077d32234a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52747219da6a56d3f607d84ac51fa82e2e55075d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52747219da6a56d3f607d84ac51fa82e2e55075d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52747219da6a56d3f607d84ac51fa82e2e55075d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52747219da6a56d3f607d84ac51fa82e2e55075d/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e29e4d36f701712b541e989ff091d7a6ce1afcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e29e4d36f701712b541e989ff091d7a6ce1afcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e29e4d36f701712b541e989ff091d7a6ce1afcd"}], "stats": {"total": 110, "additions": 83, "deletions": 27}, "files": [{"sha": "b7021a051aea72ea2247ff93f8b9c5d812a80d89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -1,3 +1,22 @@\n+2014-12-10  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config.gcc: Support \"knl\".\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect \"knl\".\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tPROCESSOR_KNL.\n+\t* config/i386/i386.c (m_KNL): Define.\n+\t(processor_target_table): Add \"knl\".\n+\t(PTA_KNL): Define.\n+\t(ix86_issue_rate): Add PROCESSOR_KNL.\n+\t(ix86_adjust_cost): Ditto.\n+\t(ia32_multipass_dfa_lookahead): Ditto.\n+\t(get_builtin_code_for_version): Handle \"knl\".\n+\t(fold_builtin_cpu): Ditto.\n+\t* config/i386/i386.h (TARGET_KNL): Define.\n+\t(processor_type): Add PROCESSOR_KNL.\n+\t* config/i386/i386.md (attr \"cpu\"): Add knl.\n+\t* config/i386/x86-tune.def: Add m_KNL.\n+\n 2014-12-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* doc/invoke.texi: (-devirtualize-at-ltrans): Document."}, {"sha": "8541274a24302c6891a92eeb9ecb6c069ed88d90", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -591,7 +591,8 @@ pentium4 pentium4m pentiumpro prescott\"\n x86_64_archs=\"amdfam10 athlon64 athlon64-sse3 barcelona bdver1 bdver2 \\\n bdver3 bdver4 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n-sandybridge ivybridge haswell broadwell bonnell silvermont x86-64 native\"\n+sandybridge ivybridge haswell broadwell bonnell silvermont knl x86-64 \\\n+native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor\n # MUST be separated by exactly one space."}, {"sha": "165ef367037e05741ca167aec375dd78919ccfc7", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -747,7 +747,11 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  if (arch)\n \t    {\n \t      /* This is unknown family 0x6 CPU.  */\n-\t      if (has_adx)\n+\t      /* Assume Knights Landing.  */\n+\t      if (has_avx512f)\n+\t\tcpu = \"knl\";\n+\t      /* Assume Broadwell.  */\n+\t      else if (has_adx)\n \t\tcpu = \"broadwell\";\n \t      else if (has_avx2)\n \t\t/* Assume Haswell.  */"}, {"sha": "1c604fc39602398d5447059467b51468a6e4d9ef", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -171,6 +171,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__silvermont\");\n       def_or_undef (parse_in, \"__silvermont__\");\n       break;\n+    case PROCESSOR_KNL:\n+      def_or_undef (parse_in, \"__knl\");\n+      def_or_undef (parse_in, \"__knl__\");\n+      break;\n     /* use PROCESSOR_max to not set/unset the arch macro.  */\n     case PROCESSOR_max:\n       break;\n@@ -277,6 +281,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__tune_slm__\");\n       def_or_undef (parse_in, \"__tune_silvermont__\");\n       break;\n+    case PROCESSOR_KNL:\n+      def_or_undef (parse_in, \"__tune_knl__\");\n+      break;\n     case PROCESSOR_INTEL:\n     case PROCESSOR_GENERIC:\n       break;"}, {"sha": "bfb135e8c45db5de74b21fd6a9d3564746723ef4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -2040,6 +2040,7 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_CORE_ALL (m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_HASWELL)\n #define m_BONNELL (1<<PROCESSOR_BONNELL)\n #define m_SILVERMONT (1<<PROCESSOR_SILVERMONT)\n+#define m_KNL (1<<PROCESSOR_KNL)\n #define m_INTEL (1<<PROCESSOR_INTEL)\n \n #define m_GEODE (1<<PROCESSOR_GEODE)\n@@ -2505,6 +2506,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {\"haswell\", &core_cost, 16, 10, 16, 10, 16},\n   {\"bonnell\", &atom_cost, 16, 15, 16, 7, 16},\n   {\"silvermont\", &slm_cost, 16, 15, 16, 7, 16},\n+  {\"knl\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"intel\", &intel_cost, 16, 15, 16, 7, 16},\n   {\"geode\", &geode_cost, 0, 0, 0, 0, 0},\n   {\"k6\", &k6_cost, 32, 7, 32, 7, 32},\n@@ -3178,6 +3180,8 @@ ix86_option_override_internal (bool main_args_p,\n    | PTA_FMA | PTA_MOVBE | PTA_HLE)\n #define PTA_BROADWELL \\\n   (PTA_HASWELL | PTA_ADX | PTA_PRFCHW | PTA_RDSEED)\n+#define PTA_KNL \\\n+  (PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER | PTA_AVX512F | PTA_AVX512CD)\n #define PTA_BONNELL \\\n   (PTA_CORE2 | PTA_MOVBE)\n #define PTA_SILVERMONT \\\n@@ -3241,6 +3245,7 @@ ix86_option_override_internal (bool main_args_p,\n       {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n       {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n       {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n+      {\"knl\", PROCESSOR_KNL, CPU_KNL, PTA_KNL},\n       {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM},\n       {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n \tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE | PTA_PRFCHW},\n@@ -25934,6 +25939,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_PENTIUM:\n     case PROCESSOR_BONNELL:\n     case PROCESSOR_SILVERMONT:\n+    case PROCESSOR_KNL:\n     case PROCESSOR_INTEL:\n     case PROCESSOR_K6:\n     case PROCESSOR_BTVER2:\n@@ -26276,6 +26282,7 @@ ix86_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n       break;\n \n     case PROCESSOR_SILVERMONT:\n+    case PROCESSOR_KNL:\n     case PROCESSOR_INTEL:\n       if (!reload_completed)\n \treturn cost;\n@@ -26345,6 +26352,7 @@ ia32_multipass_dfa_lookahead (void)\n     case PROCESSOR_HASWELL:\n     case PROCESSOR_BONNELL:\n     case PROCESSOR_SILVERMONT:\n+    case PROCESSOR_KNL:\n     case PROCESSOR_INTEL:\n       /* Generally, we want haifa-sched:max_issue() to look ahead as far\n \t as many instructions can be executed on a cycle, i.e.,\n@@ -34240,7 +34248,8 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n     P_PROC_FMA,\n     P_AVX2,\n     P_PROC_AVX2,\n-    P_AVX512F\n+    P_AVX512F,\n+    P_PROC_AVX512F\n   };\n \n  enum feature_priority priority = P_ZERO;\n@@ -34344,6 +34353,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"bonnell\";\n \t      priority = P_PROC_SSSE3;\n \t      break;\n+\t    case PROCESSOR_KNL:\n+\t      arg_str = \"knl\";\n+\t      priority = P_PROC_AVX512F;\n+\t      break;\n \t    case PROCESSOR_SILVERMONT:\n \t      arg_str = \"silvermont\";\n \t      priority = P_PROC_SSE4_2;\n@@ -35262,6 +35275,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_AMDFAM10H,\n     M_AMDFAM15H,\n     M_INTEL_SILVERMONT,\n+    M_INTEL_KNL,\n     M_AMD_BTVER1,\n     M_AMD_BTVER2,    \n     M_CPU_SUBTYPE_START,\n@@ -35299,6 +35313,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"haswell\", M_INTEL_COREI7_HASWELL},\n       {\"bonnell\", M_INTEL_BONNELL},\n       {\"silvermont\", M_INTEL_SILVERMONT},\n+      {\"knl\", M_INTEL_KNL},\n       {\"amdfam10h\", M_AMDFAM10H},\n       {\"barcelona\", M_AMDFAM10H_BARCELONA},\n       {\"shanghai\", M_AMDFAM10H_SHANGHAI},"}, {"sha": "7c357582d09d76a025cbc7505a250fab84a47405", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -337,6 +337,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_HASWELL (ix86_tune == PROCESSOR_HASWELL)\n #define TARGET_BONNELL (ix86_tune == PROCESSOR_BONNELL)\n #define TARGET_SILVERMONT (ix86_tune == PROCESSOR_SILVERMONT)\n+#define TARGET_KNL (ix86_tune == PROCESSOR_KNL)\n #define TARGET_INTEL (ix86_tune == PROCESSOR_INTEL)\n #define TARGET_GENERIC (ix86_tune == PROCESSOR_GENERIC)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n@@ -2272,6 +2273,7 @@ enum processor_type\n   PROCESSOR_HASWELL,\n   PROCESSOR_BONNELL,\n   PROCESSOR_SILVERMONT,\n+  PROCESSOR_KNL,\n   PROCESSOR_INTEL,\n   PROCESSOR_GEODE,\n   PROCESSOR_K6,"}, {"sha": "7ae511cb88dc62ac68e9170575c72803962d674b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -399,7 +399,7 @@\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,nehalem,\n \t\t    atom,slm,generic,amdfam10,bdver1,bdver2,bdver3,bdver4,\n-\t\t    btver2\"\n+\t\t    btver2,knl\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be"}, {"sha": "db43b3d8b4dd7a915a2792882ea223942f2c1cc4", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -41,15 +41,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* X86_TUNE_SCHEDULE: Enable scheduling.  */\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL \n-\t  | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_KNL | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_PARTIAL_REG_DEPENDENCY: Enable more register renaming\n    on modern chips.  Preffer stores affecting whole integer register\n    over partial stores.  For example preffer MOVZBL or MOVQ to load 8bit\n    value over movb.  */\n DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n-\t  | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_KNL | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n    destinations to be 128bit to allow register renaming on 128bit SSE units,\n@@ -85,13 +85,13 @@ DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n    partial dependencies.  */\n DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_INTEL | m_GEODE | m_AMD_MULTIPLE  | m_GENERIC)\n+\t  | m_KNL | m_INTEL | m_GEODE | m_AMD_MULTIPLE  | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n-\t  | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_KNL | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.\n@@ -125,7 +125,7 @@ DEF_TUNE (X86_TUNE_REASSOC_INT_TO_PARALLEL, \"reassoc_int_to_parallel\",\n /* X86_TUNE_REASSOC_FP_TO_PARALLEL: Try to produce parallel computations\n    during reassociation of fp computation.  */\n DEF_TUNE (X86_TUNE_REASSOC_FP_TO_PARALLEL, \"reassoc_fp_to_parallel\",\n-          m_BONNELL | m_SILVERMONT | m_HASWELL | m_INTEL | m_BDVER1\n+          m_BONNELL | m_SILVERMONT | m_HASWELL | m_KNL |m_INTEL | m_BDVER1\n \t  | m_BDVER2 | m_GENERIC)\n \n /*****************************************************************************/\n@@ -145,7 +145,7 @@ DEF_TUNE (X86_TUNE_REASSOC_FP_TO_PARALLEL, \"reassoc_fp_to_parallel\",\n    regression on mgrid due to IRA limitation leading to unecessary\n    use of the frame pointer in 32bit mode.  */\n DEF_TUNE (X86_TUNE_ACCUMULATE_OUTGOING_ARGS, \"accumulate_outgoing_args\",\n-\t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_INTEL\n+\t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL\n \t  | m_ATHLON_K8)\n \n /* X86_TUNE_PROLOGUE_USING_MOVE: Do not use push/pop in prologues that are\n@@ -205,7 +205,7 @@ DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\",\n /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n    than 4 branch instructions in the 16 byte window.  */\n DEF_TUNE (X86_TUNE_FOUR_JUMP_LIMIT, \"four_jump_limit\",\n-          m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_INTEL |\n+          m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL |m_INTEL |\n \t  m_ATHLON_K8 | m_AMDFAM10)\n \n /*****************************************************************************/\n@@ -229,21 +229,22 @@ DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\", ~(m_PENT | m_PPRO))\n /* X86_TUNE_USE_INCDEC: Enable use of inc/dec instructions.   */\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n-\t    | m_GENERIC))\n+\t   |  m_KNL | m_GENERIC))\n \n /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n    for DFmode copies */\n DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\",\n           ~(m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t    | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GENERIC))\n+\t    | m_KNL | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GENERIC))\n \n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n-DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\", m_BONNELL | m_SILVERMONT | m_INTEL)\n+DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\", m_BONNELL | m_SILVERMONT | m_KNL\n+\t  | m_INTEL)\n \n /* X86_TUNE_AVOID_LEA_FOR_ADDR: Avoid lea for address computation.  */\n DEF_TUNE (X86_TUNE_AVOID_LEA_FOR_ADDR, \"avoid_lea_for_addr\",\n-\t  m_BONNELL | m_SILVERMONT)\n+\t  m_BONNELL | m_SILVERMONT | m_KNL)\n \n /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n    vector path on AMD machines.\n@@ -260,7 +261,7 @@ DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM8, \"slow_imul_imm8\",\n /* X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE: Try to avoid memory operands for\n    a conditional move.  */\n DEF_TUNE (X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE, \"avoid_mem_opnd_for_cmove\",\n-\t  m_BONNELL | m_SILVERMONT | m_INTEL)\n+\t  m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL)\n \n /* X86_TUNE_SINGLE_STRINGOP: Enable use of single string operations, such\n    as MOVS and STOS (without a REP prefix) to move/set sequences of bytes.  */\n@@ -278,17 +279,17 @@ DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n /* X86_TUNE_USE_SAHF: Controls use of SAHF.  */\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER\n-\t  | m_GENERIC)\n+\t  | m_KNL | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n+\t  | m_BTVER | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n-\t  ~(m_PENT | m_BONNELL | m_SILVERMONT | m_INTEL  | m_K6))\n+\t  ~(m_PENT | m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL  | m_K6))\n \n /* X86_TUNE_USE_BT: Enable use of BT (bit test) instructions.  */\n DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n-          m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL | m_AMD_MULTIPLE\n-\t  | m_GENERIC)\n+          m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL\n+\t  | m_AMD_MULTIPLE | m_GENERIC)\n \n /*****************************************************************************/\n /* 387 instruction selection tuning                                          */\n@@ -304,15 +305,15 @@ DEF_TUNE (X86_TUNE_USE_HIMODE_FIOP, \"use_himode_fiop\",\n    integer operand.  */\n DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\",\n           ~(m_PENT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t    | m_INTEL | m_AMD_MULTIPLE | m_GENERIC))\n+\t    | m_KNL | m_INTEL | m_AMD_MULTIPLE | m_GENERIC))\n \n /* X86_TUNE_USE_FFREEP: Use freep instruction instead of fstp.  */\n DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n \n /* X86_TUNE_EXT_80387_CONSTANTS: Use fancy 80387 constants, such as PI.  */\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC)\n+\t  | m_KNL | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC)\n \n /*****************************************************************************/\n /* SSE instruction selection tuning                                          */\n@@ -331,13 +332,13 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n           m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_AMDFAM10 | m_BDVER\n-\t  | m_BTVER | m_SILVERMONT | m_INTEL | m_GENERIC)\n+\t  | m_BTVER | m_SILVERMONT | m_KNL | m_INTEL | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n           m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_SILVERMONT\n-\t  | m_INTEL | m_GENERIC)\n+\t  | m_KNL | m_INTEL | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n    of movupd.  */\n@@ -374,7 +375,7 @@ DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\",\n /* X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS: Try to split memory operand for\n    fp converts to destination register.  */\n DEF_TUNE (X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS, \"split_mem_opnd_for_fp_converts\",\n-          m_SILVERMONT | m_INTEL)\n+          m_SILVERMONT | m_KNL | m_INTEL)\n \n /* X86_TUNE_USE_VECTOR_FP_CONVERTS: Prefer vector packed SSE conversion\n    from FP to FP.  This form of instructions avoids partial write to the\n@@ -388,7 +389,7 @@ DEF_TUNE (X86_TUNE_USE_VECTOR_CONVERTS, \"use_vector_converts\", m_AMDFAM10)\n \n /* X86_TUNE_SLOW_SHUFB: Indicates tunings with slow pshufb instruction.  */\n DEF_TUNE (X86_TUNE_SLOW_PSHUFB, \"slow_pshufb\",\n-          m_BONNELL | m_SILVERMONT | m_INTEL)\n+          m_BONNELL | m_SILVERMONT | m_KNL | m_INTEL)\n \n /* X86_TUNE_VECTOR_PARALLEL_EXECUTION: Indicates tunings with ability to\n    execute 2 or more vector instructions in parallel.  */"}, {"sha": "8b67fcff571ff38d09322f3052315d3886060985", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -1,3 +1,7 @@\n+2014-12-10  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/funcspec-5.c: Test avx512f and knl.\n+\n 2014-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/62021"}, {"sha": "269e610707f49c7df405f6b24c99f54136057f8e", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52747219da6a56d3f607d84ac51fa82e2e55075d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=52747219da6a56d3f607d84ac51fa82e2e55075d", "patch": "@@ -24,6 +24,7 @@ extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n extern void test_tbm (void)\t\t\t__attribute__((__target__(\"tbm\")));\n extern void test_avx (void)\t\t\t__attribute__((__target__(\"avx\")));\n extern void test_avx2 (void)\t\t\t__attribute__((__target__(\"avx2\")));\n+extern void test_avx512 (void)\t\t\t__attribute__((__target__(\"avx512\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n@@ -46,6 +47,7 @@ extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n extern void test_no_tbm (void)\t\t\t__attribute__((__target__(\"no-tbm\")));\n extern void test_no_avx (void)\t\t\t__attribute__((__target__(\"no-avx\")));\n extern void test_no_avx2 (void)   \t\t__attribute__((__target__(\"no-avx2\")));\n+extern void test_no_avx512 (void)   \t\t__attribute__((__target__(\"no-avx512\")));\n \n extern void test_arch_i386 (void)\t\t__attribute__((__target__(\"arch=i386\")));\n extern void test_arch_i486 (void)\t\t__attribute__((__target__(\"arch=i486\")));\n@@ -70,6 +72,7 @@ extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));\n extern void test_arch_corei7 (void)\t\t__attribute__((__target__(\"arch=corei7\")));\n extern void test_arch_corei7_avx (void)\t\t__attribute__((__target__(\"arch=corei7-avx\")));\n extern void test_arch_core_avx2 (void)\t\t__attribute__((__target__(\"arch=core-avx2\")));\n+extern void test_arch_knl (void)\t\t__attribute__((__target__(\"arch=knl\")));\n extern void test_arch_geode (void)\t\t__attribute__((__target__(\"arch=geode\")));\n extern void test_arch_k6 (void)\t\t\t__attribute__((__target__(\"arch=k6\")));\n extern void test_arch_k6_2 (void)\t\t__attribute__((__target__(\"arch=k6-2\")));"}]}