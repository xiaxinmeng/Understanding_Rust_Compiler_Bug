{"sha": "b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViM2VjM2U2ZWJlNWI3YTA3NjU0ZDk0ZjUzZjk3YjBhOGNjYTA1MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-05T09:43:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-05T09:43:48Z"}, "message": "gimple-iterator.c (gsi_remove): Return whether EH edges need to be cleanup.\n\n2012-04-05  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple-iterator.c (gsi_remove): Return whether EH edges need to be\n\tcleanup.\n\t* gimple.h (gsi_remove): Adjust.\n\t* tree-ssa-operands.c (unlink_stmt_vdef): Optimize.\n\t* tree-ssa-dom.c (optimize_stmt): Use gsi_remove result.\n\t* tree-ssa-dse.c (dse_optimize_stmt): Likewise.\n\t* tree-ssa-forwprop.c (remove_prop_source_from_use): Likewise.\n\t* tree-ssa-math-opts.c (execute_optimize_widening_mul): Likewise.\n\t* tree-ssa-pre.c (eliminate): Likewise.\n\nFrom-SVN: r186159", "tree": {"sha": "6258ff245914afce423859c9d6e66227cf605076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6258ff245914afce423859c9d6e66227cf605076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e48b6f14dd57f48d042ebc3a47529963da69fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e48b6f14dd57f48d042ebc3a47529963da69fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e48b6f14dd57f48d042ebc3a47529963da69fdf"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "591c5af93ca416170fe37780cf0de3eb3db95a42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -1,3 +1,15 @@\n+2012-04-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple-iterator.c (gsi_remove): Return whether EH edges need to be\n+\tcleanup.\n+\t* gimple.h (gsi_remove): Adjust.\n+\t* tree-ssa-operands.c (unlink_stmt_vdef): Optimize.\n+\t* tree-ssa-dom.c (optimize_stmt): Use gsi_remove result.\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Likewise.\n+\t* tree-ssa-forwprop.c (remove_prop_source_from_use): Likewise.\n+\t* tree-ssa-math-opts.c (execute_optimize_widening_mul): Likewise.\n+\t* tree-ssa-pre.c (eliminate): Likewise.\n+\n 2012-04-04  Mike Stump  <mikestump@comcast.net>\n \n \t* doc/rtl.texi (const_double): Document as sign-extending."}, {"sha": "e387c16e31a451e79fedb908a165ca43d62c0565", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -499,13 +499,15 @@ gsi_insert_after (gimple_stmt_iterator *i, gimple stmt,\n    REMOVE_PERMANENTLY is true when the statement is going to be removed\n    from the IL and not reinserted elsewhere.  In that case we remove the\n    statement pointed to by iterator I from the EH tables, and free its\n-   operand caches.  Otherwise we do not modify this information.  */\n+   operand caches.  Otherwise we do not modify this information.  Returns\n+   true whether EH edge cleanup is required.  */\n \n-void\n+bool\n gsi_remove (gimple_stmt_iterator *i, bool remove_permanently)\n {\n   gimple_seq_node cur, next, prev;\n   gimple stmt = gsi_stmt (*i);\n+  bool require_eh_edge_purge = false;\n \n   if (gimple_code (stmt) != GIMPLE_PHI)\n     insert_debug_temps_for_defs (i);\n@@ -517,7 +519,7 @@ gsi_remove (gimple_stmt_iterator *i, bool remove_permanently)\n \n   if (remove_permanently)\n     {\n-      remove_stmt_from_eh_lp (stmt);\n+      require_eh_edge_purge = remove_stmt_from_eh_lp (stmt);\n       gimple_remove_stmt_histograms (cfun, stmt);\n     }\n \n@@ -537,6 +539,8 @@ gsi_remove (gimple_stmt_iterator *i, bool remove_permanently)\n     gimple_seq_set_last (i->seq, prev);\n \n   i->ptr = next;\n+\n+  return require_eh_edge_purge;\n }\n \n "}, {"sha": "6af6dc48536eb9ab6a33a4cda6819d6e41ad6543", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -5095,7 +5095,7 @@ void gsi_insert_seq_after (gimple_stmt_iterator *, gimple_seq,\n \t\t\t   enum gsi_iterator_update);\n void gsi_insert_seq_after_without_update (gimple_stmt_iterator *, gimple_seq,\n                                           enum gsi_iterator_update);\n-void gsi_remove (gimple_stmt_iterator *, bool);\n+bool gsi_remove (gimple_stmt_iterator *, bool);\n gimple_stmt_iterator gsi_for_stmt (gimple);\n void gsi_move_after (gimple_stmt_iterator *, gimple_stmt_iterator *);\n void gsi_move_before (gimple_stmt_iterator *, gimple_stmt_iterator *);"}, {"sha": "d2e4cc4b0b342e4ce1298ff760d0e41bb43eb465", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -2294,10 +2294,8 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \t      && rhs == cached_lhs)\n \t    {\n \t      basic_block bb = gimple_bb (stmt);\n-\t      int lp_nr = lookup_stmt_eh_lp (stmt);\n \t      unlink_stmt_vdef (stmt);\n-\t      gsi_remove (&si, true);\n-\t      if (lp_nr != 0)\n+\t      if (gsi_remove (&si, true))\n \t\t{\n \t\t  bitmap_set_bit (need_eh_cleanup, bb->index);\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "93ba42506d78268928b0012f25e35855f9ac0a6f", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -257,10 +257,9 @@ dse_optimize_stmt (gimple_stmt_iterator gsi)\n \t  /* Then we need to fix the operand of the consuming stmt.  */\n \t  unlink_stmt_vdef (stmt);\n \n-\t  bitmap_set_bit (need_eh_cleanup, gimple_bb (stmt)->index);\n-\n \t  /* Remove the dead store.  */\n-\t  gsi_remove (&gsi, true);\n+\t  if (gsi_remove (&gsi, true))\n+\t    bitmap_set_bit (need_eh_cleanup, gimple_bb (stmt)->index);\n \n \t  /* And release any SSA_NAMEs set in this statement back to the\n \t     SSA_NAME manager.  */"}, {"sha": "c99af1a8c43112493adc3491bc2342660372e6be", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -325,9 +325,9 @@ remove_prop_source_from_use (tree name)\n     bb = gimple_bb (stmt);\n     gsi = gsi_for_stmt (stmt);\n     unlink_stmt_vdef (stmt);\n-    gsi_remove (&gsi, true);\n+    if (gsi_remove (&gsi, true))\n+      cfg_changed |= gimple_purge_dead_eh_edges (bb);\n     release_defs (stmt);\n-    cfg_changed |= gimple_purge_dead_eh_edges (bb);\n \n     name = is_gimple_assign (stmt) ? gimple_assign_rhs1 (stmt) : NULL_TREE;\n   } while (name && TREE_CODE (name) == SSA_NAME);"}, {"sha": "5c3543ecf3961acd417824533ad0727ebeade882", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -2658,10 +2658,10 @@ execute_optimize_widening_mul (void)\n \t\t\t\t\t\t    gimple_call_arg (stmt, 0)))\n \t\t\t  {\n \t\t\t    unlink_stmt_vdef (stmt);\n-\t\t\t    gsi_remove (&gsi, true);\n-\t\t\t    release_defs (stmt);\n-\t\t\t    if (gimple_purge_dead_eh_edges (bb))\n+\t\t\t    if (gsi_remove (&gsi, true)\n+\t\t\t\t&& gimple_purge_dead_eh_edges (bb))\n \t\t\t      cfg_changed = true;\n+\t\t\t    release_defs (stmt);\n \t\t\t    continue;\n \t\t\t  }\n \t\t\t  break;"}, {"sha": "2994a1211bcf18888e522ffd3fd92ab496a6e8d7", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -1475,18 +1475,19 @@ unlink_stmt_vdef (gimple stmt)\n   imm_use_iterator iter;\n   gimple use_stmt;\n   tree vdef = gimple_vdef (stmt);\n+  tree vuse = gimple_vuse (stmt);\n \n   if (!vdef\n       || TREE_CODE (vdef) != SSA_NAME)\n     return;\n \n-  FOR_EACH_IMM_USE_STMT (use_stmt, iter, gimple_vdef (stmt))\n+  FOR_EACH_IMM_USE_STMT (use_stmt, iter, vdef)\n     {\n       FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n-\tSET_USE (use_p, gimple_vuse (stmt));\n+\tSET_USE (use_p, vuse);\n     }\n \n-  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_vdef (stmt)))\n-    SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_vuse (stmt)) = 1;\n+  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (vdef))\n+    SSA_NAME_OCCURS_IN_ABNORMAL_PHI (vuse) = 1;\n }\n "}, {"sha": "5e6f5708ad1c3063e4e186cb1985a809feff67e7", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=b5b3ec3e6ebe5b7a07654d94f53f97b0a8cca050", "patch": "@@ -4629,11 +4629,8 @@ eliminate (void)\n \t  basic_block bb = gimple_bb (stmt);\n \t  gsi = gsi_for_stmt (stmt);\n \t  unlink_stmt_vdef (stmt);\n-\t  gsi_remove (&gsi, true);\n-\t  /* ???  gsi_remove doesn't tell us whether the stmt was\n-\t     in EH tables and thus whether we need to purge EH edges.\n-\t     Simply schedule the block for a cleanup.  */\n-\t  bitmap_set_bit (need_eh_cleanup, bb->index);\n+\t  if (gsi_remove (&gsi, true))\n+\t    bitmap_set_bit (need_eh_cleanup, bb->index);\n \t  if (TREE_CODE (lhs) == SSA_NAME)\n \t    bitmap_clear_bit (inserted_exprs, SSA_NAME_VERSION (lhs));\n \t  release_defs (stmt);"}]}