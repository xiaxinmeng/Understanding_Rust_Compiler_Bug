{"sha": "96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiMDdiMTA4ZmI3Y2ZhZWVkZGIzZjVjZWRlMWZkYThmNzcyYjYxNA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-05-13T17:10:36Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-05-13T17:10:36Z"}, "message": "[NDS32] Implment n12/n13 pipeline.\n\ngcc/\n\t* config.gcc (nds32*-*-*): Check that n12/n13 are valid to --with-cpu.\n\t* config/nds32/nds32-n13.md: New file.\n\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_N12 and CPU_N13.\n\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n12/n13\n\tpipeline.\n\t* config/nds32/nds32-protos.h: More declarations for n12/n13 pipeline.\n\t* config/nds32/nds32.md (pipeline_model): Add n13.\n\t* config/nds32/nds32.opt (mcpu): Support n12/n13 pipeline cpus.\n\t* config/nds32/pipelines.md: Include n13 settings.\n\nCo-Authored-By: Chung-Ju Wu <jasonwucj@gmail.com>\n\nFrom-SVN: r260212", "tree": {"sha": "0c9025c3271aa9fbb27d6f8a2346aa0186e3dd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c9025c3271aa9fbb27d6f8a2346aa0186e3dd1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4"}], "stats": {"total": 735, "additions": 732, "deletions": 3}, "files": [{"sha": "9fdc34558da5cc4e266aee71e8f34fe31288ded9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -1,3 +1,16 @@\n+2018-05-13  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config.gcc (nds32*-*-*): Check that n12/n13 are valid to --with-cpu.\n+\t* config/nds32/nds32-n13.md: New file.\n+\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_N12 and CPU_N13.\n+\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n12/n13\n+\tpipeline.\n+\t* config/nds32/nds32-protos.h: More declarations for n12/n13 pipeline.\n+\t* config/nds32/nds32.md (pipeline_model): Add n13.\n+\t* config/nds32/nds32.opt (mcpu): Support n12/n13 pipeline cpus.\n+\t* config/nds32/pipelines.md: Include n13 settings.\n+\n 2018-05-13  Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "c8eda1dbc691d8b3d1e95e08b74a2f26f592392e", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -4367,11 +4367,11 @@ case \"${target}\" in\n \t\t\"\")\n \t\t\twith_cpu=n9\n \t\t\t;;\n-\t\tn6 | n7 |n8 | e8 | s8 | n9 | n10 | d10)\n+\t\tn6 | n7 |n8 | e8 | s8 | n9 | n10 | d10 | n12 | n13)\n \t\t\t# OK\n \t\t\t;;\n \t\t*)\n-\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n7 n8 e8 s8 n9 n10 d10\" 1>&2\n+\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n7 n8 e8 s8 n9 n10 d10 n12 n13\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac"}, {"sha": "ca7546bc2a700ea6ef2560529518b69262207266", "filename": "gcc/config/nds32/nds32-n13.md", "status": "added", "additions": 401, "deletions": 0, "changes": 401, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-n13.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-n13.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-n13.md?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -0,0 +1,401 @@\n+;; Pipeline descriptions of Andes NDS32 cpu for GNU compiler\n+;; Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+;; Contributed by Andes Technology Corporation.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+;; ------------------------------------------------------------------------\n+;; Define N13 pipeline settings.\n+;; ------------------------------------------------------------------------\n+\n+(define_automaton \"nds32_n13_machine\")\n+\n+;; ------------------------------------------------------------------------\n+;; Pipeline Stages\n+;; ------------------------------------------------------------------------\n+;; F1 - Instruction Fetch First\n+;;   Instruction Tag/Data Arrays\n+;;   ITLB Address Translation\n+;;   Branch Target Buffer Prediction\n+;; F2 - Instruction Fetch Second\n+;;   Instruction Cache Hit Detection\n+;;   Cache Way Selection\n+;;   Inustruction Alignment\n+;; I1 - Instruction Issue First / Instruction Decode\n+;;   Instruction Cache Replay Triggering\n+;;   32/16-Bit Instruction Decode\n+;;   Return Address Stack Prediction\n+;; I2 - Instruction Issue Second / Register File Access\n+;;   Instruction Issue Logic\n+;;   Register File Access\n+;; E1 - Instruction Execute First / Address Generation / MAC First\n+;;   Data Access Address generation\n+;;   Multiply Operation\n+;; E2 - Instruction Execute Second / Data Access First / MAC Second /\n+;;      ALU Execute\n+;;   Skewed ALU\n+;;   Branch/Jump/Return Resolution\n+;;   Data Tag/Data arrays\n+;;   DTLB address translation\n+;;   Accumulation Operation\n+;; E3 - Instruction Execute Third / Data Access Second\n+;;   Data Cache Hit Detection\n+;;   Cache Way Selection\n+;;   Data Alignment\n+;; E4 - Instruction Execute Fourth / Write Back\n+;;   Interruption Resolution\n+;;   Instruction Retire\n+;;   Register File Write Back\n+\n+(define_cpu_unit \"n13_i1\" \"nds32_n13_machine\")\n+(define_cpu_unit \"n13_i2\" \"nds32_n13_machine\")\n+(define_cpu_unit \"n13_e1\" \"nds32_n13_machine\")\n+(define_cpu_unit \"n13_e2\" \"nds32_n13_machine\")\n+(define_cpu_unit \"n13_e3\" \"nds32_n13_machine\")\n+(define_cpu_unit \"n13_e4\" \"nds32_n13_machine\")\n+\n+(define_insn_reservation \"nds_n13_unknown\" 1\n+  (and (eq_attr \"type\" \"unknown\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_misc\" 1\n+  (and (eq_attr \"type\" \"misc\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_mmu\" 1\n+  (and (eq_attr \"type\" \"mmu\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_alu\" 1\n+  (and (eq_attr \"type\" \"alu\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_alu_shift\" 1\n+  (and (eq_attr \"type\" \"alu_shift\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i2+n13_e1, n13_e1+n13_e2, n13_e2+n13_e3, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_pbsad\" 1\n+  (and (eq_attr \"type\" \"pbsad\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2*2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_pbsada\" 1\n+  (and (eq_attr \"type\" \"pbsada\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2*3, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load\" 1\n+  (and (match_test \"nds32::load_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store\" 1\n+  (and (match_test \"nds32::store_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_2\" 1\n+  (and (ior (and (eq_attr \"type\" \"load_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+\t    (match_test \"nds32::load_double_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i2+n13_e1, n13_e1+n13_e2, n13_e2+n13_e3, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2+n13_i2, n13_i1+n13_i2+n13_e1, n13_i2+n13_e1+n13_e2, n13_e1+n13_e2+n13_e3, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i2+n13_e1+n13_e2+n13_e3, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, (n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4)*2, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, (n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4)*3, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_load_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, (n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4)*7, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_2\" 1\n+  (and (ior (and (eq_attr \"type\" \"store_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+\t    (match_test \"nds32::store_double_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i2+n13_e1, n13_e1+n13_e2, n13_e2+n13_e3, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2+n13_i2, n13_i1+n13_i2+n13_e1, n13_i2+n13_e1+n13_e2, n13_e1+n13_e2+n13_e3, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i2+n13_e1+n13_e2+n13_e3, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, (n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4)*2, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, (n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4)*3, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_store_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i1+n13_i2, n13_i1+n13_i2+n13_e1, n13_i1+n13_i2+n13_e1+n13_e2, n13_i1+n13_i2+n13_e1+n13_e2+n13_e3, (n13_i1+n13_i2+n13_e1+n13_e2+n13_e3+n13_e4)*7, n13_i2+n13_e1+n13_e2+n13_e3+n13_e4, n13_e1+n13_e2+n13_e3+n13_e4, n13_e2+n13_e3+n13_e4, n13_e3+n13_e4, n13_e4\")\n+\n+;; The multiplier at E1 takes two cycles.\n+(define_insn_reservation \"nds_n13_mul\" 1\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1*2, n13_e2, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_mac\" 1\n+  (and (eq_attr \"type\" \"mac\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1*2, n13_e2, n13_e3, n13_e4\")\n+\n+;; The cycles consumed at E2 are 32 - CLZ(abs(Ra)) + 2,\n+;; so the worst case is 34.\n+(define_insn_reservation \"nds_n13_div\" 1\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2*34, n13_e3, n13_e4\")\n+\n+(define_insn_reservation \"nds_n13_branch\" 1\n+  (and (eq_attr \"type\" \"branch\")\n+       (eq_attr \"pipeline_model\" \"n13\"))\n+  \"n13_i1, n13_i2, n13_e1, n13_e2, n13_e3, n13_e4\")\n+\n+;; ------------------------------------------------------------------------\n+;; Comment Notations and Bypass Rules\n+;; ------------------------------------------------------------------------\n+;; Producers (LHS)\n+;;   LD\n+;;     Load data from the memory and produce the loaded data. The result is\n+;;     ready at E3.\n+;;   LMW(N, M)\n+;;     There are N micro-operations within an instruction that loads multiple\n+;;     words. The result produced by the M-th micro-operation is sent to\n+;;     consumers. The result is ready at E3.\n+;;   ADDR_OUT\n+;;     Most load/store instructions can produce an address output if updating\n+;;     the base register is required. The result is ready at E2, which is\n+;;     produced by ALU.\n+;;   ALU, ALU_SHIFT, SIMD\n+;;     Compute data in ALU and produce the data. The result is ready at E2.\n+;;   MUL, MAC\n+;;     Compute data in the multiply-adder and produce the data. The result\n+;;     is ready at E2.\n+;;   DIV\n+;;     Compute data in the divider and produce the data. The result is ready\n+;;     at E2.\n+;;   BR\n+;;     Branch-with-link instructions produces a result containing the return\n+;;     address. The result is ready at E2.\n+;;\n+;; Consumers (RHS)\n+;;   ALU\n+;;     General ALU instructions require operands at E2.\n+;;   ALU_E1\n+;;     Some special ALU instructions, such as BSE, BSP and MOVD44, require\n+;;     operand at E1.\n+;;   MUL, DIV, PBSAD, MMU\n+;;     Operands are required at E1.\n+;;   PBSADA_Rt, PBSADA_RaRb\n+;;     Operands Ra and Rb are required at E1, and the operand Rt is required\n+;;     at E2.\n+;;   ALU_SHIFT_Rb\n+;;     An ALU-SHIFT instruction consists of a shift micro-operation followed\n+;;     by an arithmetic micro-operation. The operand Rb is used by the first\n+;;     micro-operation, and there are some latencies if data dependency occurs.\n+;;   MAC_RaRb\n+;;     A MAC instruction does multiplication at E1 and does accumulation at E2,\n+;;     so the operand Rt is required at E2, and operands Ra and Rb are required\n+;;     at E1.\n+;;   ADDR_IN\n+;;     If an instruction requires an address as its input operand, the address\n+;;     is required at E1.\n+;;   ST\n+;;     A store instruction requires its data at E2.\n+;;   SMW(N, M)\n+;;     There are N micro-operations within an instruction that stores multiple\n+;;     words. Each M-th micro-operation requires its data at E2.\n+;;   BR\n+;;     If a branch instruction is conditional, its input data is required at E2.\n+\n+;; LD -> ALU_E1, PBSAD, PBSADA_RaRb, MUL, MAC_RaRb, DIV, MMU, ADDR_IN\n+(define_bypass 3\n+  \"nds_n13_load\"\n+  \"nds_n13_alu, nds_n13_pbsad, nds_n13_pbsada,\\\n+   nds_n13_mul, nds_n13_mac, nds_n13_div,\\\n+   nds_n13_mmu,\\\n+   nds_n13_load, nds_n13_store,\\\n+   nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12,\\\n+   nds_n13_store_multiple_1,nds_n13_store_multiple_2, nds_n13_store_multiple_3,\\\n+   nds_n13_store_multiple_4,nds_n13_store_multiple_5, nds_n13_store_multiple_6,\\\n+   nds_n13_store_multiple_7,nds_n13_store_multiple_8, nds_n13_store_multiple_12\"\n+  \"nds32_n13_load_to_e1_p\"\n+)\n+\n+;; LD -> ALU, ALU_SHIFT_Rb, PBSADA_Rt, BR, ST, SMW(N, 1)\n+(define_bypass 2\n+  \"nds_n13_load\"\n+  \"nds_n13_alu, nds_n13_alu_shift, nds_n13_pbsada, nds_n13_branch, nds_n13_store,\\\n+   nds_n13_store_multiple_1,nds_n13_store_multiple_2, nds_n13_store_multiple_3,\\\n+   nds_n13_store_multiple_4,nds_n13_store_multiple_5, nds_n13_store_multiple_6,\\\n+   nds_n13_store_multiple_7,nds_n13_store_multiple_8, nds_n13_store_multiple_12\"\n+  \"nds32_n13_load_to_e2_p\"\n+)\n+\n+;; LMW(N, N) -> ALU_E1, PBSAD, PBSADA_RaRb, MUL, MAC_RaRb, DIV, MMU, ADDR_IN\n+(define_bypass 3\n+  \"nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12\"\n+  \"nds_n13_alu, nds_n13_pbsad, nds_n13_pbsada,\\\n+   nds_n13_mul, nds_n13_mac, nds_n13_div,\\\n+   nds_n13_mmu,\\\n+   nds_n13_load, nds_n13_store,\\\n+   nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12,\\\n+   nds_n13_store_multiple_1,nds_n13_store_multiple_2, nds_n13_store_multiple_3,\\\n+   nds_n13_store_multiple_4,nds_n13_store_multiple_5, nds_n13_store_multiple_6,\\\n+   nds_n13_store_multiple_7,nds_n13_store_multiple_8, nds_n13_store_multiple_12\"\n+  \"nds32_n13_last_load_to_e1_p\")\n+\n+;; LMW(N, N) -> ALU, ALU_SHIFT_Rb, PBSADA_Rt, BR, ST, SMW(N, 1)\n+(define_bypass 2\n+  \"nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12\"\n+  \"nds_n13_alu, nds_n13_alu_shift, nds_n13_pbsada, nds_n13_branch, nds_n13_store,\\\n+   nds_n13_store_multiple_1,nds_n13_store_multiple_2, nds_n13_store_multiple_3,\\\n+   nds_n13_store_multiple_4,nds_n13_store_multiple_5, nds_n13_store_multiple_6,\\\n+   nds_n13_store_multiple_7,nds_n13_store_multiple_8, nds_n13_store_multiple_12\"\n+  \"nds32_n13_last_load_to_e2_p\"\n+)\n+\n+;; LMW(N, N - 1) -> ALU_E1, PBSAD, PBSADA_RaRb, MUL, MAC_RaRb, DIV, MMU, ADDR_IN\n+(define_bypass 2\n+  \"nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12\"\n+  \"nds_n13_alu, nds_n13_pbsad, nds_n13_pbsada,\\\n+   nds_n13_mul, nds_n13_mac, nds_n13_div,\\\n+   nds_n13_mmu,\\\n+   nds_n13_load, nds_n13_store,\\\n+   nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12,\\\n+   nds_n13_store_multiple_1,nds_n13_store_multiple_2, nds_n13_store_multiple_3,\\\n+   nds_n13_store_multiple_4,nds_n13_store_multiple_5, nds_n13_store_multiple_6,\\\n+   nds_n13_store_multiple_7,nds_n13_store_multiple_8, nds_n13_store_multiple_12\"\n+  \"nds32_n13_last_two_load_to_e1_p\")\n+\n+;; ALU, ALU_SHIFT, SIMD, BR, MUL, MAC, DIV, ADDR_OUT\n+;;   ->  ALU_E1, PBSAD, PBSADA_RaRb, MUL, MAC_RaRb, DIV, MMU, ADDR_IN\n+(define_bypass 2\n+  \"nds_n13_alu, nds_n13_alu_shift, nds_n13_pbsad, nds_n13_pbsada, nds_n13_branch,\\\n+   nds_n13_mul, nds_n13_mac, nds_n13_div,\\\n+   nds_n13_load, nds_n13_store,\\\n+   nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12,\\\n+   nds_n13_store_multiple_1,nds_n13_store_multiple_2, nds_n13_store_multiple_3,\\\n+   nds_n13_store_multiple_4,nds_n13_store_multiple_5, nds_n13_store_multiple_6,\\\n+   nds_n13_store_multiple_7,nds_n13_store_multiple_8, nds_n13_store_multiple_12\"\n+  \"nds_n13_alu, nds_n13_pbsad, nds_n13_pbsada,\\\n+   nds_n13_mul, nds_n13_mac, nds_n13_div,\\\n+   nds_n13_mmu,\\\n+   nds_n13_load, nds_n13_store,\\\n+   nds_n13_load_multiple_1,nds_n13_load_multiple_2, nds_n13_load_multiple_3,\\\n+   nds_n13_load_multiple_4,nds_n13_load_multiple_5, nds_n13_load_multiple_6,\\\n+   nds_n13_load_multiple_7,nds_n13_load_multiple_8, nds_n13_load_multiple_12,\\\n+   nds_n13_store_multiple_1,nds_n13_store_multiple_2, nds_n13_store_multiple_3,\\\n+   nds_n13_store_multiple_4,nds_n13_store_multiple_5, nds_n13_store_multiple_6,\\\n+   nds_n13_store_multiple_7,nds_n13_store_multiple_8, nds_n13_store_multiple_12\"\n+  \"nds32_n13_e2_to_e1_p\")"}, {"sha": "3c853e4f16436d809b274c04e1bf81af431e59ae", "filename": "gcc/config/nds32/nds32-opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -43,6 +43,8 @@ enum nds32_cpu_type\n   CPU_E8,\n   CPU_N9,\n   CPU_N10,\n+  CPU_N12,\n+  CPU_N13,\n   CPU_SIMPLE\n };\n "}, {"sha": "560137c248f322abbc6103e0991c18aa53900b55", "filename": "gcc/config/nds32/nds32-pipelines-auxiliary.c", "status": "modified", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -306,6 +306,19 @@ pbsada_insn_ra_rb_dep_reg_p (rtx pbsada_insn, rtx def_reg)\n   return false;\n }\n \n+/* Determine if the latency is occured when the consumer PBSADA_INSN uses the\n+   value of DEF_REG in its Rt field.  */\n+bool\n+pbsada_insn_rt_dep_reg_p (rtx pbsada_insn, rtx def_reg)\n+{\n+  rtx pbsada_rt = SET_DEST (PATTERN (pbsada_insn));\n+\n+  if (rtx_equal_p (def_reg, pbsada_rt))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Check if INSN is a movd44 insn consuming DEF_REG.  */\n bool\n movd44_even_dep_p (rtx_insn *insn, rtx def_reg)\n@@ -918,6 +931,153 @@ n10_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n   return false;\n }\n \n+/* Check dependencies from any stages to ALU_E1 (E1).  This is a helper\n+   function of n13_consumed_by_e1_dep_p ().  */\n+bool\n+n13_alu_e1_insn_dep_reg_p (rtx_insn *alu_e1_insn, rtx def_reg)\n+{\n+  rtx unspec_rtx, operand_ra, operand_rb;\n+  rtx src_rtx, dst_rtx;\n+\n+  switch (INSN_CODE (alu_e1_insn))\n+    {\n+    /* BSP and BSE are supported by built-in functions, the corresponding\n+       patterns are formed by UNSPEC RTXs.  We have to handle them\n+       individually.  */\n+    case CODE_FOR_unspec_bsp:\n+    case CODE_FOR_unspec_bse:\n+      unspec_rtx = SET_SRC (parallel_element (alu_e1_insn, 0));\n+      gcc_assert (GET_CODE (unspec_rtx) == UNSPEC);\n+\n+      operand_ra = XVECEXP (unspec_rtx, 0, 0);\n+      operand_rb = XVECEXP (unspec_rtx, 0, 1);\n+\n+      if (rtx_equal_p (def_reg, operand_ra)\n+\t  || rtx_equal_p (def_reg, operand_rb))\n+\treturn true;\n+\n+      return false;\n+\n+    /* Unlink general ALU instructions, MOVD44 requires operands at E1.  */\n+    case CODE_FOR_move_di:\n+    case CODE_FOR_move_df:\n+      src_rtx = SET_SRC (PATTERN (alu_e1_insn));\n+      dst_rtx = SET_DEST (PATTERN (alu_e1_insn));\n+\n+      if (REG_P (dst_rtx) && REG_P (src_rtx)\n+\t  && rtx_equal_p (src_rtx, def_reg))\n+\treturn true;\n+\n+      return false;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* Check the dependency between the producer defining DEF_REG and CONSUMER\n+   requiring input operand at E1.  Because the address generation unti is\n+   at E1, the address input should be ready at E1.  Note that the branch\n+   target is also a kind of addresses, so we have to check it.  */\n+bool\n+n13_consumed_by_e1_dep_p (rtx_insn *consumer, rtx def_reg)\n+{\n+  rtx use_rtx;\n+\n+  switch (get_attr_type (consumer))\n+    {\n+    /* ALU_E1 */\n+    case TYPE_ALU:\n+      return n13_alu_e1_insn_dep_reg_p (consumer, def_reg);\n+\n+    case TYPE_PBSADA:\n+      return pbsada_insn_ra_rb_dep_reg_p (consumer, def_reg);\n+\n+    case TYPE_PBSAD:\n+    case TYPE_MUL:\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_MAC:\n+      use_rtx = extract_mac_non_acc_rtx (consumer);\n+      break;\n+\n+    case TYPE_DIV:\n+      if (divmod_p (consumer))\n+\tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n+      else\n+\tuse_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_MMU:\n+      if (GET_CODE (PATTERN (consumer)) == SET)\n+\tuse_rtx = SET_SRC (PATTERN (consumer));\n+      else\n+\treturn true;\n+      break;\n+\n+    case TYPE_BRANCH:\n+      use_rtx = extract_branch_target_rtx (consumer);\n+      break;\n+\n+    case TYPE_LOAD:\n+    case TYPE_STORE:\n+      use_rtx = extract_mem_rtx (consumer);\n+      break;\n+\n+    case TYPE_LOAD_MULTIPLE:\n+    case TYPE_STORE_MULTIPLE:\n+      use_rtx = extract_base_reg (consumer);\n+      break;\n+\n+    default:\n+      return false;\n+    }\n+\n+  if (reg_overlap_p (def_reg, use_rtx))\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Check the dependency between the producer defining DEF_REG and CONSUMER\n+   requiring input operand at E2.  */\n+bool\n+n13_consumed_by_e2_dep_p (rtx_insn *consumer, rtx def_reg)\n+{\n+  rtx use_rtx;\n+\n+  switch (get_attr_type (consumer))\n+    {\n+    case TYPE_ALU:\n+    case TYPE_STORE:\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_ALU_SHIFT:\n+      use_rtx = extract_shift_reg (consumer);\n+      break;\n+\n+    case TYPE_PBSADA:\n+      return pbsada_insn_rt_dep_reg_p (consumer, def_reg);\n+\n+    case TYPE_STORE_MULTIPLE:\n+      use_rtx = extract_nth_access_rtx (consumer, 0);\n+      break;\n+\n+    case TYPE_BRANCH:\n+      use_rtx = extract_branch_condition_rtx (consumer);\n+      break;\n+\n+    default:\n+      gcc_unreachable();\n+    }\n+\n+  if (reg_overlap_p (def_reg, use_rtx))\n+    return true;\n+\n+  return false;\n+}\n } // anonymous namespace\n \n /* ------------------------------------------------------------------------ */\n@@ -1371,4 +1531,115 @@ nds32_n10_last_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n \n   return n10_consumed_by_ex_dep_p (consumer, last_def_reg);\n }\n+\n+/* Guard functions for N12/N13 cores.  */\n+\n+/* Check dependencies from E2 to E1.  */\n+bool\n+nds32_n13_e2_to_e1_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg;\n+\n+  switch (get_attr_type (producer))\n+    {\n+    /* Only post-update load/store instructions are considered.  These\n+       instructions produces address output at E2.  */\n+    case TYPE_LOAD:\n+    case TYPE_STORE:\n+    case TYPE_LOAD_MULTIPLE:\n+    case TYPE_STORE_MULTIPLE:\n+      if (!post_update_insn_p (producer))\n+\treturn false;\n+\n+      def_reg = extract_base_reg (producer);\n+      break;\n+\n+    case TYPE_ALU:\n+    case TYPE_ALU_SHIFT:\n+    case TYPE_PBSAD:\n+    case TYPE_PBSADA:\n+    case TYPE_MUL:\n+    case TYPE_MAC:\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+    case TYPE_BRANCH:\n+      return true;\n+\n+    case TYPE_DIV:\n+      /* Some special instructions, divmodsi4 and udivmodsi4, produce two\n+\t results, the quotient and the remainder.  We have to handle them\n+\t individually.  */\n+      if (divmod_p (producer))\n+\t{\n+\t  rtx def_reg1 = SET_DEST (parallel_element (producer, 0));\n+\t  rtx def_reg2 = SET_DEST (parallel_element (producer, 1));\n+\n+\t  return (n13_consumed_by_e1_dep_p (consumer, def_reg1)\n+\t\t  || n13_consumed_by_e1_dep_p (consumer, def_reg2));\n+\t}\n+\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return n13_consumed_by_e1_dep_p (consumer, def_reg);\n+}\n+\n+/* Check dependencies from Load-Store Unit (E3) to E1.  */\n+bool\n+nds32_n13_load_to_e1_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg = SET_DEST (PATTERN (producer));\n+\n+  gcc_assert (get_attr_type (producer) == TYPE_LOAD);\n+  gcc_assert (REG_P (def_reg) || GET_CODE (def_reg) == SUBREG);\n+\n+  return n13_consumed_by_e1_dep_p (consumer, def_reg);\n+}\n+\n+/* Check dependencies from Load-Store Unit (E3) to E2.  */\n+bool\n+nds32_n13_load_to_e2_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg = SET_DEST (PATTERN (producer));\n+\n+  gcc_assert (get_attr_type (producer) == TYPE_LOAD);\n+  gcc_assert (REG_P (def_reg) || GET_CODE (def_reg) == SUBREG);\n+\n+  return n13_consumed_by_e2_dep_p (consumer, def_reg);\n+}\n+\n+/* Check dependencies from LMW(N, N) to E1.  */\n+bool\n+nds32_n13_last_load_to_e1_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx last_def_reg = extract_nth_access_reg (producer, -1);\n+\n+  return n13_consumed_by_e1_dep_p (consumer, last_def_reg);\n+}\n+\n+/* Check dependencies from LMW(N, N) to E2.  */\n+bool\n+nds32_n13_last_load_to_e2_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx last_def_reg = extract_nth_access_reg (producer, -1);\n+\n+  return n13_consumed_by_e2_dep_p (consumer, last_def_reg);\n+}\n+\n+/* Check dependencies from LMW(N, N-1) to E2.  */\n+bool\n+nds32_n13_last_two_load_to_e1_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx last_two_def_reg = extract_nth_access_reg (producer, -2);\n+\n+  if (last_two_def_reg == NULL_RTX)\n+    return false;\n+\n+  return n13_consumed_by_e1_dep_p (consumer, last_two_def_reg);\n+}\n /* ------------------------------------------------------------------------ */"}, {"sha": "9debad3a6a65b76fec431252ff676a961e9939fb", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -125,6 +125,13 @@ extern bool nds32_n10_ex_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n10_mm_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n10_last_load_to_ex_p (rtx_insn *, rtx_insn *);\n \n+extern bool nds32_n13_e2_to_e1_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n13_load_to_e1_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n13_load_to_e2_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n13_last_load_to_e1_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n13_last_load_to_e2_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n13_last_two_load_to_e1_p (rtx_insn *, rtx_insn *);\n+\n /* Auxiliary functions for stack operation predicate checking.  */\n \n extern bool nds32_valid_stack_push_pop_p (rtx, bool);"}, {"sha": "0c1f301e483f2f6692aa66ad94d3473c56e4b3a9", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -56,13 +56,15 @@\n ;; ------------------------------------------------------------------------\n \n ;; CPU pipeline model.\n-(define_attr \"pipeline_model\" \"n7,n8,e8,n9,n10,simple\"\n+(define_attr \"pipeline_model\" \"n7,n8,e8,n9,n10,n13,simple\"\n   (const\n     (cond [(match_test \"nds32_cpu_option == CPU_N7\")  (const_string \"n7\")\n \t   (match_test \"nds32_cpu_option == CPU_E8\")  (const_string \"e8\")\n \t   (match_test \"nds32_cpu_option == CPU_N6 || nds32_cpu_option == CPU_N8\")  (const_string \"n8\")\n \t   (match_test \"nds32_cpu_option == CPU_N9\")  (const_string \"n9\")\n \t   (match_test \"nds32_cpu_option == CPU_N10\") (const_string \"n10\")\n+\t   (match_test \"nds32_cpu_option == CPU_N12\") (const_string \"n13\")\n+\t   (match_test \"nds32_cpu_option == CPU_N13\") (const_string \"n13\")\n \t   (match_test \"nds32_cpu_option == CPU_SIMPLE\") (const_string \"simple\")]\n \t  (const_string \"n9\"))))\n "}, {"sha": "f69bddc1b38816c3d27e5bbcf361fd085bb47aa4", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -287,6 +287,33 @@ Enum(nds32_cpu_type) String(d1088-fpu) Value(CPU_N10)\n EnumValue\n Enum(nds32_cpu_type) String(d1088-spu) Value(CPU_N10)\n \n+EnumValue\n+Enum(nds32_cpu_type) String(n12) Value(CPU_N12)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1213) Value(CPU_N12)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1233) Value(CPU_N12)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1233-fpu) Value(CPU_N12)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1233-spu) Value(CPU_N12)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n13) Value(CPU_N13)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1337) Value(CPU_N13)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1337-fpu) Value(CPU_N13)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1337-spu) Value(CPU_N13)\n+\n EnumValue\n Enum(nds32_cpu_type) String(simple) Value(CPU_SIMPLE)\n "}, {"sha": "29514aef777056b1434b9ba66508223ecfe64a9f", "filename": "gcc/config/nds32/pipelines.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b07b108fb7cfaeeddb3f5cede1fda8f772b614/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpipelines.md?ref=96b07b108fb7cfaeeddb3f5cede1fda8f772b614", "patch": "@@ -49,6 +49,12 @@\n (include \"nds32-n10.md\")\n \n \n+;; ------------------------------------------------------------------------\n+;; Include N12/N13 pipeline settings.\n+;; ------------------------------------------------------------------------\n+(include \"nds32-n13.md\")\n+\n+\n ;; ------------------------------------------------------------------------\n ;; Define simple pipeline settings.\n ;; ------------------------------------------------------------------------"}]}