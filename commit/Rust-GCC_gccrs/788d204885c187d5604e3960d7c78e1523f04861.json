{"sha": "788d204885c187d5604e3960d7c78e1523f04861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4ZDIwNDg4NWMxODdkNTYwNGUzOTYwZDdjNzhlMTUyM2YwNDg2MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-15T06:50:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-15T21:00:54Z"}, "message": "compiler: avoid knock-on errors from invalid interfaces\n\nThe test case for this is issue11614.go.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/278192", "tree": {"sha": "e2ce79aa75ebc897cb002c89141e6857c9ec869a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ce79aa75ebc897cb002c89141e6857c9ec869a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788d204885c187d5604e3960d7c78e1523f04861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788d204885c187d5604e3960d7c78e1523f04861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788d204885c187d5604e3960d7c78e1523f04861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788d204885c187d5604e3960d7c78e1523f04861/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5b8fc719f5c5bd6bd732d95646193238343f39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b8fc719f5c5bd6bd732d95646193238343f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5b8fc719f5c5bd6bd732d95646193238343f39"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "a28294c594f26d3fb4f712d54788f37b1f0eb667", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788d204885c187d5604e3960d7c78e1523f04861/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788d204885c187d5604e3960d7c78e1523f04861/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=788d204885c187d5604e3960d7c78e1523f04861", "patch": "@@ -1,4 +1,4 @@\n-85c390ec75c6c3f3fbfe08f6dac58585588c6211\n+10d3dd939d4cea7f40b76f8ff82c16aa12c01188\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "adc1ebb46437d5d687a0365984944d3c2f7afc48", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788d204885c187d5604e3960d7c78e1523f04861/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788d204885c187d5604e3960d7c78e1523f04861/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=788d204885c187d5604e3960d7c78e1523f04861", "patch": "@@ -174,7 +174,13 @@ Expression::export_name(Export_function_body* efb, const Named_object* no)\n void\n Expression::unused_value_error()\n {\n-  this->report_error(_(\"value computed is not used\"));\n+  if (this->type()->is_error())\n+    {\n+      go_assert(saw_errors());\n+      this->set_is_error();\n+    }\n+  else\n+    this->report_error(_(\"value computed is not used\"));\n }\n \n // Note that this expression is an error.  This is called by children\n@@ -888,8 +894,7 @@ Type_expression : public Expression\n   { }\n \n   void\n-  do_check_types(Gogo*)\n-  { this->report_error(_(\"invalid use of type\")); }\n+  do_check_types(Gogo*);\n \n   Expression*\n   do_copy()\n@@ -906,6 +911,18 @@ Type_expression : public Expression\n   Type* type_;\n };\n \n+void\n+Type_expression::do_check_types(Gogo*)\n+{\n+  if (this->type_->is_error())\n+    {\n+      go_assert(saw_errors());\n+      this->set_is_error();\n+    }\n+  else\n+    this->report_error(_(\"invalid use of type\"));\n+}\n+\n void\n Type_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {"}, {"sha": "ecb93b099dbc5b063d507aa2092a426202292ba9", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788d204885c187d5604e3960d7c78e1523f04861/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788d204885c187d5604e3960d7c78e1523f04861/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=788d204885c187d5604e3960d7c78e1523f04861", "patch": "@@ -8984,8 +8984,11 @@ Interface_type::finalize_methods()\n       else if (this->find_method(p->name()) == NULL)\n \tthis->all_methods_->push_back(*p);\n       else\n-\tgo_error_at(p->location(), \"duplicate method %qs\",\n-\t\t Gogo::message_name(p->name()).c_str());\n+\t{\n+\t  go_error_at(p->location(), \"duplicate method %qs\",\n+\t\t      Gogo::message_name(p->name()).c_str());\n+\t  this->set_is_error();\n+\t}\n     }\n \n   std::vector<Named_type*> seen;\n@@ -9001,14 +9004,18 @@ Interface_type::finalize_methods()\n       if (it == NULL)\n \t{\n \t  if (!t->is_error())\n-\t    go_error_at(tl, \"interface contains embedded non-interface\");\n+\t    {\n+\t      go_error_at(tl, \"interface contains embedded non-interface\");\n+\t      this->set_is_error();\n+\t    }\n \t  continue;\n \t}\n       if (it == this)\n \t{\n \t  if (!issued_recursive_error)\n \t    {\n \t      go_error_at(tl, \"invalid recursive interface\");\n+\t      this->set_is_error();\n \t      issued_recursive_error = true;\n \t    }\n \t  continue;\n@@ -9027,6 +9034,7 @@ Interface_type::finalize_methods()\n \t      if (*q == nt)\n \t\t{\n \t\t  go_error_at(tl, \"inherited interface loop\");\n+\t\t  this->set_is_error();\n \t\t  break;\n \t\t}\n \t    }\n@@ -9049,8 +9057,11 @@ Interface_type::finalize_methods()\n \t\t\t\t\t\t\t       q->type(), tl));\n \t      else if (!Type::are_identical(q->type(), oldm->type(),\n \t\t\t\t\t    Type::COMPARE_TAGS, NULL))\n-\t\tgo_error_at(tl, \"duplicate method %qs\",\n-\t\t\t    Gogo::message_name(q->name()).c_str());\n+\t\t{\n+\t\t  go_error_at(tl, \"duplicate method %qs\",\n+\t\t\t      Gogo::message_name(q->name()).c_str());\n+\t\t  this->set_is_error();\n+\t\t}\n \t    }\n \t}\n "}]}