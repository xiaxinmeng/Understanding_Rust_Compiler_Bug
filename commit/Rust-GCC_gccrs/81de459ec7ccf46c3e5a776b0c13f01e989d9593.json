{"sha": "81de459ec7ccf46c3e5a776b0c13f01e989d9593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkZTQ1OWVjN2NjZjQ2YzNlNWE3NzZiMGMxM2YwMWU5ODlkOTU5Mw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-06T00:50:32Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-09T21:46:04Z"}, "message": "c++: Further tweaks for new-expression and paren-init [PR77841]\n\nThis patch corrects our handling of array new-expression with ()-init:\n\n  new int[4](1, 2, 3, 4);\n\nshould work even with the explicit array bound, and\n\n  new char[3](\"so_sad\");\n\nshould cause an error, but we weren't giving any.\n\nFixed by handling array new-expressions with ()-init in the same spot\nwhere we deduce the array bound in array new-expression.  I'm now\nalways passing STRING_CSTs to build_new_1 wrapped in { } which allowed\nme to remove the special handling of STRING_CSTs in build_new_1.  And\nsince the DIRECT_LIST_INIT_P block in build_new_1 calls digest_init, we\nreport errors about too short arrays. reshape_init now does the {\"foo\"}\n-> \"foo\" transformation even for CONSTRUCTOR_IS_PAREN_INIT, so no need\nto do it in build_new.\n\nI took a stab at cp_complete_array_type's \"FIXME: this code is duplicated\nfrom reshape_init\", but calling reshape_init there, I ran into issues\nwith has_designator_problem: when we reshape an already reshaped\nCONSTRUCTOR again, d.cur.index has been filled, so we think that we\nhave a user-provided designator (though there was no designator in the\nsource code), and report an error.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/77841\n\t* decl.c (reshape_init): If we're initializing a char array from\n\ta string-literal that is enclosed in braces, unwrap it.\n\t* init.c (build_new_1): Don't handle string-initializers here.\n\t(build_new): Handle new-expression with paren-init when the\n\tarray bound is known.  Always pass string constants to build_new_1\n\tenclosed in braces.  Don't handle string-initializers in any\n\tspecial way.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/77841\n\t* g++.old-deja/g++.ext/arrnew2.C: Expect the error only in C++17\n\tand less.\n\t* g++.old-deja/g++.robertl/eb58.C: Adjust dg-error.\n\t* g++.old-deja/g++.robertl/eb63.C: Expect the error only in C++17\n\tand less.\n\t* g++.dg/cpp2a/new-array5.C: New test.\n\t* g++.dg/cpp2a/paren-init36.C: New test.\n\t* g++.dg/cpp2a/paren-init37.C: New test.\n\t* g++.dg/pr84729.C: Adjust dg-error.", "tree": {"sha": "8ebc8c775d581e334adb900d038370649a4606b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ebc8c775d581e334adb900d038370649a4606b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81de459ec7ccf46c3e5a776b0c13f01e989d9593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81de459ec7ccf46c3e5a776b0c13f01e989d9593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81de459ec7ccf46c3e5a776b0c13f01e989d9593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81de459ec7ccf46c3e5a776b0c13f01e989d9593/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acbe30bbc884899da72df47d023ebde89f8f47f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbe30bbc884899da72df47d023ebde89f8f47f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbe30bbc884899da72df47d023ebde89f8f47f1"}], "stats": {"total": 117, "additions": 81, "deletions": 36}, "files": [{"sha": "ce97d19884d240cf49b6f7334afe2eab14ab2b1a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -6599,7 +6599,17 @@ reshape_init (tree type, tree init, tsubst_flags_t complain)\n   /* Brace elision is not performed for a CONSTRUCTOR representing\n      parenthesized aggregate initialization.  */\n   if (CONSTRUCTOR_IS_PAREN_INIT (init))\n-    return init;\n+    {\n+      tree elt = (*v)[0].value;\n+      /* If we're initializing a char array from a string-literal that is\n+\t enclosed in braces, unwrap it here.  */\n+      if (TREE_CODE (type) == ARRAY_TYPE\n+\t  && vec_safe_length (v) == 1\n+\t  && char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)))\n+\t  && TREE_CODE (tree_strip_any_location_wrapper (elt)) == STRING_CST)\n+\treturn elt;\n+      return init;\n+    }\n \n   /* Handle [dcl.init.list] direct-list-initialization from\n      single element of enumeration with a fixed underlying type.  */"}, {"sha": "e84e985492dfaddcc6a28665080af75f1f746733", "filename": "gcc/cp/init.c", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -3596,15 +3596,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t  vecinit = digest_init (arraytype, vecinit, complain);\n \t\t}\n \t    }\n-\t  /* This handles code like new char[]{\"foo\"}.  */\n-\t  else if (len == 1\n-\t\t   && char_type_p (TYPE_MAIN_VARIANT (type))\n-\t\t   && TREE_CODE (tree_strip_any_location_wrapper ((**init)[0]))\n-\t\t      == STRING_CST)\n-\t    {\n-\t      vecinit = (**init)[0];\n-\t      STRIP_ANY_LOCATION_WRAPPER (vecinit);\n-\t    }\n \t  else if (*init)\n             {\n               if (complain & tf_error)\n@@ -3944,9 +3935,8 @@ build_new (location_t loc, vec<tree, va_gc> **placement, tree type,\n     }\n \n   /* P1009: Array size deduction in new-expressions.  */\n-  if (TREE_CODE (type) == ARRAY_TYPE\n-      && !TYPE_DOMAIN (type)\n-      && *init)\n+  const bool array_p = TREE_CODE (type) == ARRAY_TYPE;\n+  if (*init && (array_p || (nelts && cxx_dialect >= cxx20)))\n     {\n       /* This means we have 'new T[]()'.  */\n       if ((*init)->is_empty ())\n@@ -3959,27 +3949,29 @@ build_new (location_t loc, vec<tree, va_gc> **placement, tree type,\n       /* The C++20 'new T[](e_0, ..., e_k)' case allowed by P0960.  */\n       if (!DIRECT_LIST_INIT_P (elt) && cxx_dialect >= cxx20)\n \t{\n-\t  /* Handle new char[](\"foo\").  */\n-\t  if (vec_safe_length (*init) == 1\n-\t      && char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)))\n-\t      && TREE_CODE (tree_strip_any_location_wrapper (elt))\n-\t\t == STRING_CST)\n-\t    /* Leave it alone: the string should not be wrapped in {}.  */;\n-\t  else\n-\t    {\n-\t      tree ctor = build_constructor_from_vec (init_list_type_node, *init);\n-\t      CONSTRUCTOR_IS_DIRECT_INIT (ctor) = true;\n-\t      CONSTRUCTOR_IS_PAREN_INIT (ctor) = true;\n-\t      elt = ctor;\n-\t      /* We've squashed all the vector elements into the first one;\n-\t\t truncate the rest.  */\n-\t      (*init)->truncate (1);\n-\t    }\n+\t  tree ctor = build_constructor_from_vec (init_list_type_node, *init);\n+\t  CONSTRUCTOR_IS_DIRECT_INIT (ctor) = true;\n+\t  CONSTRUCTOR_IS_PAREN_INIT (ctor) = true;\n+\t  elt = ctor;\n+\t  /* We've squashed all the vector elements into the first one;\n+\t     truncate the rest.  */\n+\t  (*init)->truncate (1);\n \t}\n       /* Otherwise we should have 'new T[]{e_0, ..., e_k}'.  */\n-      if (BRACE_ENCLOSED_INITIALIZER_P (elt))\n-\telt = reshape_init (type, elt, complain);\n-      cp_complete_array_type (&type, elt, /*do_default*/false);\n+      if (array_p && !TYPE_DOMAIN (type))\n+\t{\n+\t  /* We need to reshape before deducing the bounds to handle code like\n+\n+\t       struct S { int x, y; };\n+\t       new S[]{1, 2, 3, 4};\n+\n+\t     which should deduce S[2].\tBut don't change ELT itself: we want to\n+\t     pass a list-initializer to build_new_1, even for STRING_CSTs.  */\n+\t  tree e = elt;\n+\t  if (BRACE_ENCLOSED_INITIALIZER_P (e))\n+\t    e = reshape_init (type, e, complain);\n+\t  cp_complete_array_type (&type, e, /*do_default*/false);\n+\t}\n     }\n \n   /* The type allocated must be complete.  If the new-type-id was"}, {"sha": "2379079ca859b35c3f9d3ce42753a95df8956d7f", "filename": "gcc/testsuite/g++.dg/cpp2a/new-array5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnew-array5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnew-array5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnew-array5.C?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/77841\n+// { dg-do compile { target c++11 } }\n+\n+auto p1 = new int[][1]();\n+auto p2 = new int[1][1]();\n+#if __cpp_aggregate_paren_init\n+auto p3 = new int[][4]({1, 2}, {3, 4});\n+auto p4 = new int[2][4]({1, 2}, {3, 4});\n+auto p5 = new int[2][1]({1, 2}, {3}); // { dg-error \"too many initializers\" \"\" { target c++20 } }\n+#endif\n+\n+auto b1 = new int[][1]{};\n+auto b2 = new int[1][1]{};\n+auto b3 = new int[][4]{{1, 2}, {3, 4}};\n+auto b4 = new int[2][4]{{1, 2}, {3, 4}};"}, {"sha": "996249515bfc80ced79dffbd79dd724a89debf0a", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init36.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init36.C?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/77841\n+// { dg-do compile { target c++20 } }\n+\n+int *p0 = new int[1]();\n+int *p1 = new int[1](1);\n+int *p2 = new int[4](1, 2, 3, 4);\n+int *p3 = new int[2](1, 2, 3, 4); // { dg-error \"too many initializers\" }\n+\n+char *c1 = new char[](\"foo\");\n+char *c2 = new char[4](\"foo\");\n+char *c3 = new char[]{\"foo\"};\n+char *c4 = new char[4]{\"foo\"};\n+char *c5 = new char[3](\"so_sad\"); // { dg-error \"too long\" }\n+char *c6 = new char[3]{\"so_sad\"}; // { dg-error \"too long\" }"}, {"sha": "551a9822224f341d26622e3b9452641cbb0de94d", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init37.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init37.C?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/77841\n+// { dg-do compile { target c++20 } }\n+\n+int *p0 = new (int[1])();\n+int *p1 = new (int[1])(1);\n+int *p2 = new (int[4])(1, 2, 3, 4);\n+int *p3 = new (int[2])(1, 2, 3, 4); // { dg-error \"too many initializers\" }\n+\n+char *c1 = new (char[])(\"foo\");\n+char *c2 = new (char[4])(\"foo\");\n+char *c3 = new (char[]){\"foo\"};\n+char *c4 = new (char[4]){\"foo\"};\n+char *c5 = new (char[3])(\"so_sad\"); // { dg-error \"too long\" }\n+char *c6 = new (char[3]){\"so_sad\"}; // { dg-error \"too long\" }"}, {"sha": "530dbff23e14e1e2358531e356ff6dac7d5ef058", "filename": "gcc/testsuite/g++.dg/pr84729.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84729.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84729.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84729.C?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -3,5 +3,5 @@\n \n typedef int b[2];\n void a() {\n-  new b(a); // { dg-error \"parenthesized initializer in array new\" }\n+  new b(a); // { dg-error \"parenthesized initializer in array new|invalid conversion\" }\n }"}, {"sha": "fceb95e9ee57695a548a66cf130960120a312ba1", "filename": "gcc/testsuite/g++.old-deja/g++.ext/arrnew2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew2.C?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-w -fpermissive\" }\n \n-int *foo = new int[1](42); // { dg-error \"parenthesized\" }\n+int *foo = new int[1](42); // { dg-error \"parenthesized\" \"\" { target c++17_down } }\n int main ()\n {\n   return foo[0] != 42;"}, {"sha": "1e51e14c51db62d947c1c2ac0e03c7fb947add85", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb58.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb58.C?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -11,5 +11,5 @@ private:\n \n main()\n {\n-  A *list = new A[10](4); // { dg-error \"parenthesized\" }\n+  A *list = new A[10](4); // { dg-error \"parenthesized|could not convert\" }\n }"}, {"sha": "50cf30f28fccfabcc9b32950f9e227cb1c56b88e", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb63.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81de459ec7ccf46c3e5a776b0c13f01e989d9593/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb63.C?ref=81de459ec7ccf46c3e5a776b0c13f01e989d9593", "patch": "@@ -13,5 +13,5 @@ public:\n main() {\n         A* a;\n \n-        a = new A[2](1,false); // { dg-error \"parenthesized\" }\n+        a = new A[2](1,false); // { dg-error \"parenthesized\" \"\" { target c++17_down } }\n }"}]}