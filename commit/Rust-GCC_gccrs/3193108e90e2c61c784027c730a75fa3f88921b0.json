{"sha": "3193108e90e2c61c784027c730a75fa3f88921b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5MzEwOGU5MGUyYzYxYzc4NDAyN2M3MzBhNzVmYTNmODg5MjFiMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-05-17T20:06:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-05-17T20:06:11Z"}, "message": "sparc.md (movhi): Do not test constness of operand #1 twice.\n\n\t* config/sparc/sparc.md (movhi): Do not test constness\n\tof operand #1 twice.\n\t(movsi): Likewise.\n\t(movdi): Unconditionally accept zero as second operand\n\twhen the first is memory.\n\t(movdi_insn_sp32): Handle above case.\n\t(DImode splitter): Use predicates.\n\t(DImode splitter): Use const_zero_operand predicate.\n\t(movsf_insn): Swap 2 alternatives.\n\nFrom-SVN: r99856", "tree": {"sha": "0ddb8180173c33bacde0338cd31613d5d414f3ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ddb8180173c33bacde0338cd31613d5d414f3ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3193108e90e2c61c784027c730a75fa3f88921b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3193108e90e2c61c784027c730a75fa3f88921b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3193108e90e2c61c784027c730a75fa3f88921b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3193108e90e2c61c784027c730a75fa3f88921b0/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e58a9aa1f6d2371b0cfaff671729d4f56c72b28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58a9aa1f6d2371b0cfaff671729d4f56c72b28c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58a9aa1f6d2371b0cfaff671729d4f56c72b28c"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "761c6d0c1f35c36e4f4b5186e4bafaf456fa540e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3193108e90e2c61c784027c730a75fa3f88921b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3193108e90e2c61c784027c730a75fa3f88921b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3193108e90e2c61c784027c730a75fa3f88921b0", "patch": "@@ -1,3 +1,15 @@\n+2005-05-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.md (movhi): Do not test constness\n+\tof operand #1 twice.\n+\t(movsi): Likewise.\n+\t(movdi): Unconditionally accept zero as second operand\n+\twhen the first is memory.\n+\t(movdi_insn_sp32): Handle above case.\n+\t(DImode splitter): Use predicates.\n+\t(DImode splitter): Use const_zero_operand predicate.\n+\t(movsf_insn): Swap 2 alternatives.\n+\n 2005-05-17  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-ivopts.c (find_bivs, find_givs_in_stmt_scev): Apply"}, {"sha": "f40d59cd58b40d827e5b91f39405f855b38714f8", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3193108e90e2c61c784027c730a75fa3f88921b0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3193108e90e2c61c784027c730a75fa3f88921b0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3193108e90e2c61c784027c730a75fa3f88921b0", "patch": "@@ -1833,13 +1833,13 @@\n   /* This makes sure we will not get rematched due to splittage.  */\n   if (! CONSTANT_P (operands[1]) || input_operand (operands[1], HImode))\n     ;\n-  else if (CONSTANT_P (operands[1])\n-\t   && GET_CODE (operands[1]) != HIGH\n+  else if (GET_CODE (operands[1]) != HIGH\n \t   && GET_CODE (operands[1]) != LO_SUM)\n     {\n       sparc_emit_set_const32 (operands[0], operands[1]);\n       DONE;\n     }\n+\n  movhi_is_ok:\n   ;\n })\n@@ -1901,7 +1901,6 @@\n \n       if (GET_CODE (operands[1]) == LABEL_REF)\n \t{\n-\t  /* shit */\n \t  emit_insn (gen_movsi_pic_label_ref (operands[0], operands[1]));\n \t  DONE;\n \t}\n@@ -1929,13 +1928,13 @@\n   /* This makes sure we will not get rematched due to splittage.  */\n   if (! CONSTANT_P (operands[1]) || input_operand (operands[1], SImode))\n     ;\n-  else if (CONSTANT_P (operands[1])\n-\t   && GET_CODE (operands[1]) != HIGH\n+  else if (GET_CODE (operands[1]) != HIGH\n \t   && GET_CODE (operands[1]) != LO_SUM)\n     {\n       sparc_emit_set_const32 (operands[0], operands[1]);\n       DONE;\n     }\n+\n  movsi_is_ok:\n   ;\n })\n@@ -2045,12 +2044,7 @@\n   /* Handle MEM cases first.  */\n   if (GET_CODE (operands[0]) == MEM)\n     {\n-      /* If it's a REG, we can always do it.\n-\t The const zero case is more complex, on v9\n-\t we can always perform it.  */\n-      if (register_operand (operands[1], DImode)\n-\t  || (TARGET_V9\n-              && (operands[1] == const0_rtx)))\n+      if (register_or_zero_operand (operands[1], DImode))\n         goto movdi_is_ok;\n \n       if (! reload_in_progress)\n@@ -2131,7 +2125,7 @@\n \t\t\t\t\" J,U,T,r,o,i,r, f, T, o, f, f\"))]\n   \"! TARGET_V9\n    && (register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode))\"\n+       || register_or_zero_operand (operands[1], DImode))\"\n   \"@\n    #\n    std\\t%1, %0\n@@ -2410,7 +2404,9 @@\n \n   /* Slick... but this trick loses if this subreg constant part\n      can be done in one insn.  */\n-  if (low == high && (low & 0x3ff) != 0 && low + 0x1000 >= 0x2000)\n+  if (low == high\n+      && ! SPARC_SETHI32_P (high)\n+      && ! SPARC_SIMM13_P (high))\n     emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]),\n \t\t\t  gen_highpart (SImode, operands[0])));\n   else\n@@ -2535,7 +2531,7 @@\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n-        (const_int 0))]\n+        (match_operand:DI 1 \"const_zero_operand\" \"\"))]\n   \"reload_completed\n    && (! TARGET_V9\n        || (! TARGET_ARCH64\n@@ -2618,7 +2614,7 @@\n })\n \n (define_insn \"*movsf_insn\"\n-  [(set (match_operand:V32 0 \"nonimmediate_operand\" \"=d,f,*r,*r,*r,*r,f,m,m\")\n+  [(set (match_operand:V32 0 \"nonimmediate_operand\" \"=d,f,*r,*r,*r,f,*r,m,m\")\n \t(match_operand:V32 1 \"input_operand\"        \"GY,f,*rRY,Q,S,m,m,f,*rGY\"))]\n   \"TARGET_FPU\n    && (register_operand (operands[0], <V32:MODE>mode)\n@@ -2659,7 +2655,7 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fga,fpmove,*,*,*,load,fpload,fpstore,store\")])\n+  [(set_attr \"type\" \"fga,fpmove,*,*,*,fpload,load,fpstore,store\")])\n \n ;; Exactly the same as above, except that all `f' cases are deleted.\n ;; This is necessary to prevent reload from ever trying to use a `f' reg"}]}