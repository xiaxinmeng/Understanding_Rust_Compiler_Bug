{"sha": "355023cef148556c55768da653b191d826cb6853", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1MDIzY2VmMTQ4NTU2YzU1NzY4ZGE2NTNiMTkxZDgyNmNiNjg1Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-22T10:27:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-22T10:27:27Z"}, "message": "sse.md (vec_set_lo_v16hi, [...]): Add alternative with v constraint instead of x and vinserti32x4 insn.\n\n\t* config/i386/sse.md (vec_set_lo_v16hi, vec_set_hi_v16hi,\n\tvec_set_lo_v32qi, vec_set_hi_v32qi): Add alternative with\n\tv constraint instead of x and vinserti32x4 insn.\n\n\t* gcc.target/i386/avx512vl-vinserti32x4-3.c: New test.\n\nFrom-SVN: r236568", "tree": {"sha": "3bf6be723955cd68f1c19cee581fb77b29952935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bf6be723955cd68f1c19cee581fb77b29952935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/355023cef148556c55768da653b191d826cb6853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355023cef148556c55768da653b191d826cb6853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355023cef148556c55768da653b191d826cb6853", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355023cef148556c55768da653b191d826cb6853/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b48574c6bcbfc12699eae9b586ab034b62885b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b48574c6bcbfc12699eae9b586ab034b62885b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b48574c6bcbfc12699eae9b586ab034b62885b0"}], "stats": {"total": 103, "additions": 83, "deletions": 20}, "files": [{"sha": "809d9d72f9d85a44925c88e1a9d756362bd8d75e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355023cef148556c55768da653b191d826cb6853/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355023cef148556c55768da653b191d826cb6853/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=355023cef148556c55768da653b191d826cb6853", "patch": "@@ -1,5 +1,9 @@\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (vec_set_lo_v16hi, vec_set_hi_v16hi,\n+\tvec_set_lo_v32qi, vec_set_hi_v32qi): Add alternative with\n+\tv constraint instead of x and vinserti32x4 insn.\n+\n \t* config/i386/sse.md (i128vldq): New mode iterator.\n \t(avx2_vbroadcasti128_<mode>, avx_vbroadcastf128_<mode>): Add\n \tavx512dq and avx512vl alternatives."}, {"sha": "b13dff82d3915dae2eff3b2b9993b9db252ba983", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355023cef148556c55768da653b191d826cb6853/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355023cef148556c55768da653b191d826cb6853/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=355023cef148556c55768da653b191d826cb6853", "patch": "@@ -17894,47 +17894,51 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vec_set_lo_v16hi\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=x,v\")\n \t(vec_concat:V16HI\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\")\n \t  (vec_select:V8HI\n-\t    (match_operand:V16HI 1 \"register_operand\" \"x\")\n+\t    (match_operand:V16HI 1 \"register_operand\" \"x,v\")\n \t    (parallel [(const_int 8) (const_int 9)\n \t\t       (const_int 10) (const_int 11)\n \t\t       (const_int 12) (const_int 13)\n \t\t       (const_int 14) (const_int 15)]))))]\n   \"TARGET_AVX\"\n-  \"vinsert%~128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+  \"@\n+   vinsert%~128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\n+   vinserti32x4\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"vex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"vec_set_hi_v16hi\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=x,v\")\n \t(vec_concat:V16HI\n \t  (vec_select:V8HI\n-\t    (match_operand:V16HI 1 \"register_operand\" \"x\")\n+\t    (match_operand:V16HI 1 \"register_operand\" \"x,v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\")))]\n   \"TARGET_AVX\"\n-  \"vinsert%~128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+  \"@\n+   vinsert%~128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n+   vinserti32x4\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"vex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"vec_set_lo_v32qi\"\n-  [(set (match_operand:V32QI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V32QI 0 \"register_operand\" \"=x,v\")\n \t(vec_concat:V32QI\n-\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,v\")\n \t  (vec_select:V16QI\n-\t    (match_operand:V32QI 1 \"register_operand\" \"x\")\n+\t    (match_operand:V32QI 1 \"register_operand\" \"x,v\")\n \t    (parallel [(const_int 16) (const_int 17)\n \t\t       (const_int 18) (const_int 19)\n \t\t       (const_int 20) (const_int 21)\n@@ -17944,18 +17948,20 @@\n \t\t       (const_int 28) (const_int 29)\n \t\t       (const_int 30) (const_int 31)]))))]\n   \"TARGET_AVX\"\n-  \"vinsert%~128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+  \"@\n+   vinsert%~128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\n+   vinserti32x4\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"vex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"vec_set_hi_v32qi\"\n-  [(set (match_operand:V32QI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V32QI 0 \"register_operand\" \"=x,v\")\n \t(vec_concat:V32QI\n \t  (vec_select:V16QI\n-\t    (match_operand:V32QI 1 \"register_operand\" \"x\")\n+\t    (match_operand:V32QI 1 \"register_operand\" \"x,v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n@@ -17964,13 +17970,15 @@\n \t\t       (const_int 10) (const_int 11)\n \t\t       (const_int 12) (const_int 13)\n \t\t       (const_int 14) (const_int 15)]))\n-\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,vm\")))]\n   \"TARGET_AVX\"\n-  \"vinsert%~128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+  \"@\n+   vinsert%~128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n+   vinserti32x4\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"vex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"<avx_avx2>_maskload<ssemodesuffix><avxsizesuffix>\""}, {"sha": "2805dc8580f75d869fe343d8031b56784c7eb22c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355023cef148556c55768da653b191d826cb6853/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355023cef148556c55768da653b191d826cb6853/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=355023cef148556c55768da653b191d826cb6853", "patch": "@@ -1,5 +1,7 @@\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.target/i386/avx512vl-vinserti32x4-3.c: New test.\n+\n \t* gcc.target/i386/avx512dq-vbroadcast-2.c: New test.\n \t* gcc.target/i386/avx512vl-vbroadcast-2.c: New test.\n "}, {"sha": "45b0122e925e8b0d417a436e7a31156224126893", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vinserti32x4-3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355023cef148556c55768da653b191d826cb6853/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vinserti32x4-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355023cef148556c55768da653b191d826cb6853/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vinserti32x4-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vinserti32x4-3.c?ref=355023cef148556c55768da653b191d826cb6853", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -masm=att\" } */\n+\n+typedef char V1 __attribute__((vector_size (32)));\n+typedef short V2 __attribute__((vector_size (32)));\n+\n+void\n+f1 (V1 x, char y)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[7] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f2 (V1 x, char y)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[28] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f3 (V2 x, short y)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f4 (V2 x, short y)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[14] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\r]*0x0\\[^\\n\\r]*%ymm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%ymm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%\\[yz]mm16\" 2 } } */"}]}