{"sha": "93416de0cb72358b95a96fa4341b7b93a6805842", "node_id": "C_kwDOANBUbNoAKDkzNDE2ZGUwY2I3MjM1OGI5NWE5NmZhNDM0MWI3YjkzYTY4MDU4NDI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-09T09:50:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-09T11:42:36Z"}, "message": "Remove GIMPLE restriction of ! using match.pd patterns\n\nThis removes #if GIMPLE guards around patterns using ! which is\nnow also provided in the GENERIC implementation.\n\n2022-05-09  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Remove #if GIMPLE guards around ! using patterns.", "tree": {"sha": "eed23dd931c4a2f5498c47e5715d77d6b93a16a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eed23dd931c4a2f5498c47e5715d77d6b93a16a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93416de0cb72358b95a96fa4341b7b93a6805842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93416de0cb72358b95a96fa4341b7b93a6805842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93416de0cb72358b95a96fa4341b7b93a6805842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93416de0cb72358b95a96fa4341b7b93a6805842/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0"}], "stats": {"total": 12, "additions": 1, "deletions": 11}, "files": [{"sha": "1fdd98b375e09e066a685fbde8700ca223dbb600", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93416de0cb72358b95a96fa4341b7b93a6805842/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93416de0cb72358b95a96fa4341b7b93a6805842/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=93416de0cb72358b95a96fa4341b7b93a6805842", "patch": "@@ -1087,7 +1087,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (bit_ior:c (bit_xor:c@3 @0 @1) (bit_xor:c (bit_xor:c @1 @2) @0))\n  (bit_ior @3 @2))\n \n-#if GIMPLE\n /* (~X | C) ^ D -> (X | C) ^ (~D ^ C) if (~D ^ C) can be simplified.  */\n (simplify\n  (bit_xor:c (bit_ior:cs (bit_not:s @0) @1) @2)\n@@ -1104,7 +1103,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n       && wi::bit_and_not (get_nonzero_bits (@0), wi::to_wide (@1)) == 0)\n   (bit_xor @0 @1)))\n-#endif\n \n /* For constants M and N, if M == (1LL << cst) - 1 && (N & M) == M,\n    ((A & N) + B) & M -> (A + B) & M\n@@ -1259,6 +1257,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t&& wi::to_wide (@1) != wi::min_value (TYPE_PRECISION (type),\n \t\t\t\t\t      SIGNED))\n     (minus (plus @1 { build_minus_one_cst (type); }) @0))))\n+#endif\n \n /* ~(X >> Y) -> ~X >> Y if ~X can be simplified.  */\n (simplify\n@@ -1271,7 +1270,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (if (!wi::neg_p (tree_nonzero_bits (@0)))\n     (with { tree stype = signed_type_for (TREE_TYPE (@0)); }\n      (convert (rshift (bit_not! (convert:stype @0)) @1))))))\n-#endif\n \n /* x + (x & 1) -> (x + 1) & ~1 */\n (simplify\n@@ -2750,7 +2748,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* (T)(A) +- (T)(B) -> (T)(A +- B) only when (A +- B) could be simplified\n    to a simple value.  */\n-#if GIMPLE\n   (for op (plus minus)\n    (simplify\n     (op (convert @0) (convert @1))\n@@ -2761,7 +2758,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t  && !TYPE_OVERFLOW_TRAPS (type)\n \t  && !TYPE_OVERFLOW_SANITIZED (type))\n       (convert (op! @0 @1)))))\n-#endif\n \n   /* ~A + A -> -1 */\n   (simplify\n@@ -2947,9 +2943,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      /* If @1 +- @2 is constant require a hard single-use on either\n \toriginal operand (but not on both).  */\n      (mult (plusminus @1 @2) @0)\n-#if GIMPLE\n      (mult! (plusminus @1 @2) @0)\n-#endif\n   )))\n   /* We cannot generate constant 1 for fract.  */\n   (if (!ALL_FRACT_MODE_P (TYPE_MODE (type)))\n@@ -4070,7 +4064,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (integer_zerop (@0))\n    @2)))\n \n-#if GIMPLE\n /* Sink unary operations to branches, but only if we do fold both.  */\n (for op (negate bit_not abs absu)\n  (simplify\n@@ -4093,7 +4086,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (simplify\n   (op @3 (vec_cond:s @0 @1 @2))\n   (vec_cond @0 (op! @3 @1) (op! @3 @2))))\n-#endif\n \n #if GIMPLE\n (match (nop_atomic_bit_test_and_p @0 @1 @4)\n@@ -5419,7 +5411,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp:c (bit_xor:c @0 @1) @0)\n   (cmp @1 { build_zero_cst (TREE_TYPE (@1)); }))\n \n-#if GIMPLE\n  /* (X & Y) == X becomes (X & ~Y) == 0.  */\n  (simplify\n   (cmp:c (bit_and:c @0 @1) @0)\n@@ -5439,7 +5430,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (simplify\n   (cmp:c (bit_ior:c @0 @1) @1)\n   (cmp (bit_and @0 (bit_not! @1)) { build_zero_cst (TREE_TYPE (@0)); }))\n-#endif\n \n  /* (X ^ C1) op C2 can be rewritten as X op (C1 ^ C2).  */\n  (simplify"}]}