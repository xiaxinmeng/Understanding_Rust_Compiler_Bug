{"sha": "af1967542f8f4607594bc6494014a8b01bd94b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxOTY3NTQyZjhmNDYwNzU5NGJjNjQ5NDAxNGE4YjAxYmQ5NGI5Zg==", "commit": {"author": {"name": "Ito Kazumitsu", "email": "kaz@maczuka.gcd.org", "date": "2004-02-15T11:53:45Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-02-15T11:53:45Z"}, "message": "ObjectInputStream.java (readClassDescriptor): Avoid the overflow of fieldmapping.\n\n2004-02-15  Ito Kazumitsu  <kaz@maczuka.gcd.org>\n\n\t* java/io/ObjectInputStream.java (readClassDescriptor): Avoid the\n        overflow of fieldmapping.\n\nFrom-SVN: r77843", "tree": {"sha": "c660e6ecd4e14c53bd2fac8a47a6a82302bd1dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c660e6ecd4e14c53bd2fac8a47a6a82302bd1dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af1967542f8f4607594bc6494014a8b01bd94b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1967542f8f4607594bc6494014a8b01bd94b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1967542f8f4607594bc6494014a8b01bd94b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1967542f8f4607594bc6494014a8b01bd94b9f/comments", "author": null, "committer": null, "parents": [{"sha": "fa7c0d68a454415105defac67eca983f425a17b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7c0d68a454415105defac67eca983f425a17b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7c0d68a454415105defac67eca983f425a17b0"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "e3239f837ad9377345cf80b99ea8f9a9c6be3509", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1967542f8f4607594bc6494014a8b01bd94b9f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1967542f8f4607594bc6494014a8b01bd94b9f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=af1967542f8f4607594bc6494014a8b01bd94b9f", "patch": "@@ -1,3 +1,8 @@\n+2004-02-15  Ito Kazumitsu  <kaz@maczuka.gcd.org>\n+\n+\t* java/io/ObjectInputStream.java (readClassDescriptor): Avoid the\n+        overflow of fieldmapping.\n+\n 2004-02-14  Sascha Brawer  <brawer@dandelis.ch>\n \n \t* javax/swing/undo/UndoManager.java: Re-written from scratch."}, {"sha": "ce2d0ca90e26f10bc0e882413b11a4d620ab0a4e", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1967542f8f4607594bc6494014a8b01bd94b9f/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1967542f8f4607594bc6494014a8b01bd94b9f/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=af1967542f8f4607594bc6494014a8b01bd94b9f", "patch": "@@ -1,5 +1,6 @@\n /* ObjectInputStream.java -- Class used to read serialized objects\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -491,7 +492,6 @@ protected ObjectStreamClass readClassDescriptor()\n     ObjectStreamField[] stream_fields = osc.fields;\n     ObjectStreamField[] real_fields = ObjectStreamClass.lookup(clazz).fields;\n     ObjectStreamField[] fieldmapping = new ObjectStreamField[2 * Math.max(stream_fields.length, real_fields.length)];\n-    osc.fieldMapping = fieldmapping;\n \n     int stream_idx = 0;\n     int real_idx = 0;\n@@ -543,9 +543,21 @@ else if (!stream_field.isToSet())\n \t  }\n \tif (real_field != null && !real_field.isToSet())\n \t    real_field = null;\n+\t/* If some of stream_fields does not correspond to any of real_fields,\n+\t * or the opposite, then fieldmapping will go short.\n+\t */\n+\tif (map_idx == fieldmapping.length)\n+\t  {\n+\t    ObjectStreamField[] newfieldmapping =\n+\t      new ObjectStreamField[fieldmapping.length + 2];\n+\t    System.arraycopy(fieldmapping, 0,\n+\t      newfieldmapping, 0, fieldmapping.length);\n+\t    fieldmapping = newfieldmapping;\n+\t  }\n \tfieldmapping[map_idx++] = stream_field;\n \tfieldmapping[map_idx++] = real_field;\n       }\n+    osc.fieldMapping = fieldmapping;\n \n     return osc;\n   }"}]}