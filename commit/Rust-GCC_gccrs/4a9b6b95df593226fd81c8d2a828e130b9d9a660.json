{"sha": "4a9b6b95df593226fd81c8d2a828e130b9d9a660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE5YjZiOTVkZjU5MzIyNmZkODFjOGQyYTgyOGUxMzBiOWQ5YTY2MA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2007-08-14T08:36:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:36:33Z"}, "message": "a-calend-vms.adb, [...] (\"+\", [...]): Remove calls to Check_Within_Time_Bounds.\n\n2007-08-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-calend-vms.adb, a-calend.adb (\"+\", \"-\", Add, Subtract): Remove\n\tcalls to Check_Within_Time_Bounds.\n\t(\"+\", \"-\", Add, Subtract): Remove calls to Check_Within_Time_Bounds.\n\t(Difference): Account for possible rounding of the resulting difference\n\nFrom-SVN: r127408", "tree": {"sha": "6a8ba64f8d026e674ae6e2f6683f58e5e342a00d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a8ba64f8d026e674ae6e2f6683f58e5e342a00d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a9b6b95df593226fd81c8d2a828e130b9d9a660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9b6b95df593226fd81c8d2a828e130b9d9a660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a9b6b95df593226fd81c8d2a828e130b9d9a660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9b6b95df593226fd81c8d2a828e130b9d9a660/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40760d6c750de4b836f855ff11b9fce4599dafc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40760d6c750de4b836f855ff11b9fce4599dafc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40760d6c750de4b836f855ff11b9fce4599dafc4"}], "stats": {"total": 177, "additions": 39, "deletions": 138}, "files": [{"sha": "0df4328b3e3ca0ee75de017e392e128dd1fb3409", "filename": "gcc/ada/a-calend-vms.adb", "status": "modified", "additions": 13, "deletions": 61, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9b6b95df593226fd81c8d2a828e130b9d9a660/gcc%2Fada%2Fa-calend-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9b6b95df593226fd81c8d2a828e130b9d9a660/gcc%2Fada%2Fa-calend-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend-vms.adb?ref=4a9b6b95df593226fd81c8d2a828e130b9d9a660", "patch": "@@ -156,22 +156,8 @@ package body Ada.Calendar is\n \n    function \"+\" (Left : Time; Right : Duration) return Time is\n       pragma Unsuppress (Overflow_Check);\n-\n-      Res_M : Time;\n-\n    begin\n-      --  Trivial case\n-\n-      if Right = Duration (0.0) then\n-         return Left;\n-      end if;\n-\n-      Res_M := Left + To_Relative_Time (Right);\n-\n-      Check_Within_Time_Bounds (Res_M);\n-\n-      return Res_M;\n-\n+      return Left + To_Relative_Time (Right);\n    exception\n       when Constraint_Error =>\n          raise Time_Error;\n@@ -192,22 +178,8 @@ package body Ada.Calendar is\n \n    function \"-\" (Left : Time; Right : Duration) return Time is\n       pragma Unsuppress (Overflow_Check);\n-\n-      Res_M : Time;\n-\n    begin\n-      --  Trivial case\n-\n-      if Right = Duration (0.0) then\n-         return Left;\n-      end if;\n-\n-      Res_M := Left - To_Relative_Time (Right);\n-\n-      Check_Within_Time_Bounds (Res_M);\n-\n-      return Res_M;\n-\n+      return Left - To_Relative_Time (Right);\n    exception\n       when Constraint_Error =>\n          raise Time_Error;\n@@ -226,15 +198,22 @@ package body Ada.Calendar is\n    begin\n       Res_M := Left - Right;\n \n-      --  The result does not fit in a duration value\n+      --  Due to the extended range of Ada time, \"-\" is capable of producing\n+      --  results which may exceed the range of Duration. In order to prevent\n+      --  the generation of bogus values by the Unchecked_Conversion, we apply\n+      --  the following check.\n \n       if Res_M < Dur_Low\n         or else Res_M >= Dur_High\n       then\n          raise Time_Error;\n+\n+      --  Normal case, result fits\n+\n+      else\n+         return To_Duration (Res_M);\n       end if;\n \n-      return To_Duration (Res_M);\n    exception\n       when Constraint_Error =>\n          raise Time_Error;\n@@ -629,22 +608,8 @@ package body Ada.Calendar is\n \n       function Add (Date : Time; Days : Long_Integer) return Time is\n          pragma Unsuppress (Overflow_Check);\n-\n-         Res_M : Time;\n-\n       begin\n-         --  Trivial case\n-\n-         if Days = 0 then\n-            return Date;\n-         end if;\n-\n-         Res_M := Date + Time (Days) * Milis_In_Day;\n-\n-         Check_Within_Time_Bounds (Res_M);\n-\n-         return Res_M;\n-\n+         return Date + Time (Days) * Milis_In_Day;\n       exception\n          when Constraint_Error =>\n             raise Time_Error;\n@@ -732,21 +697,8 @@ package body Ada.Calendar is\n \n       function Subtract (Date : Time; Days : Long_Integer) return Time is\n          pragma Unsuppress (Overflow_Check);\n-\n-         Res_M : Time;\n-\n       begin\n-         --  Trivial case\n-\n-         if Days = 0 then\n-            return Date;\n-         end if;\n-\n-         Res_M := Date - Time (Days) * Milis_In_Day;\n-\n-         Check_Within_Time_Bounds (Res_M);\n-\n-         return Res_M;\n+         return Date - Time (Days) * Milis_In_Day;\n       exception\n          when Constraint_Error =>\n             raise Time_Error;"}, {"sha": "2dce4fdcd146187fc68abc3aaca5ea9180abea43", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 26, "deletions": 77, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9b6b95df593226fd81c8d2a828e130b9d9a660/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9b6b95df593226fd81c8d2a828e130b9d9a660/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=4a9b6b95df593226fd81c8d2a828e130b9d9a660", "patch": "@@ -185,23 +185,9 @@ package body Ada.Calendar is\n \n    function \"+\" (Left : Time; Right : Duration) return Time is\n       pragma Unsuppress (Overflow_Check);\n-\n       Left_N : constant Time_Rep := Time_Rep (Left);\n-      Res_N  : Time_Rep;\n-\n    begin\n-      --  Trivial case\n-\n-      if Right = Duration (0.0) then\n-         return Left;\n-      end if;\n-\n-      Res_N := Left_N + Duration_To_Time_Rep (Right);\n-\n-      Check_Within_Time_Bounds (Res_N);\n-\n-      return Time (Res_N);\n-\n+      return Time (Left_N + Duration_To_Time_Rep (Right));\n    exception\n       when Constraint_Error =>\n          raise Time_Error;\n@@ -218,23 +204,9 @@ package body Ada.Calendar is\n \n    function \"-\" (Left : Time; Right : Duration) return Time is\n       pragma Unsuppress (Overflow_Check);\n-\n       Left_N : constant Time_Rep := Time_Rep (Left);\n-      Res_N  : Time_Rep;\n-\n    begin\n-      --  Trivial case\n-\n-      if Right = Duration (0.0) then\n-         return Left;\n-      end if;\n-\n-      Res_N := Left_N - Duration_To_Time_Rep (Right);\n-\n-      Check_Within_Time_Bounds (Res_N);\n-\n-      return Time (Res_N);\n-\n+      return Time (Left_N - Duration_To_Time_Rep (Right));\n    exception\n       when Constraint_Error =>\n          raise Time_Error;\n@@ -253,7 +225,10 @@ package body Ada.Calendar is\n    begin\n       Res_N := Time_Rep (Left) - Time_Rep (Right);\n \n-      --  The result does not fit in a duration value\n+      --  Due to the extended range of Ada time, \"-\" is capable of producing\n+      --  results which may exceed the range of Duration. In order to prevent\n+      --  the generation of bogus values by the Unchecked_Conversion, we apply\n+      --  the following check.\n \n       if Res_N < Dur_Low\n         or else Res_N > Dur_High\n@@ -644,23 +619,9 @@ package body Ada.Calendar is\n \n       function Add (Date : Time; Days : Long_Integer) return Time is\n          pragma Unsuppress (Overflow_Check);\n-\n          Date_N : constant Time_Rep := Time_Rep (Date);\n-         Res_N  : Time_Rep;\n-\n       begin\n-         --  Trivial case\n-\n-         if Days = 0 then\n-            return Date;\n-         end if;\n-\n-         Res_N := Date_N + Time_Rep (Days) * Nanos_In_Day;\n-\n-         Check_Within_Time_Bounds (Res_N);\n-\n-         return Time (Res_N);\n-\n+         return Time (Date_N + Time_Rep (Days) * Nanos_In_Day);\n       exception\n          when Constraint_Error =>\n             raise Time_Error;\n@@ -679,13 +640,12 @@ package body Ada.Calendar is\n       is\n          Res_Dur       : Time_Dur;\n          Earlier       : Time_Rep;\n-         Earlier_Sub   : Time_Rep;\n          Elapsed_Leaps : Natural;\n          Later         : Time_Rep;\n-         Later_Sub     : Time_Rep;\n          Negate        : Boolean := False;\n          Next_Leap_N   : Time_Rep;\n-         Sub_Seconds   : Duration;\n+         Sub_Secs      : Duration;\n+         Sub_Secs_Diff : Time_Rep;\n \n       begin\n          --  Both input time values are assumed to be in UTC\n@@ -715,23 +675,26 @@ package body Ada.Calendar is\n             Elapsed_Leaps := 0;\n          end if;\n \n-         --  Sub seconds\n+         --  Sub seconds processing. We add the resulting difference to one\n+         --  of the input dates in order to account for any potential rounding\n+         --  of the difference in the next step.\n \n-         Earlier_Sub := Earlier mod Nano;\n-         Later_Sub   := Later mod Nano;\n-\n-         if Later_Sub < Earlier_Sub then\n-            Later_Sub := Later_Sub + Time_Rep (1) * Nano;\n-            Later     := Later - Time_Rep (1) * Nano;\n-         end if;\n+         Sub_Secs_Diff := Later mod Nano - Earlier mod Nano;\n+         Earlier       := Earlier + Sub_Secs_Diff;\n+         Sub_Secs      := Duration (Sub_Secs_Diff) / Nano_F;\n \n-         Sub_Seconds := Duration (Later_Sub - Earlier_Sub) / Nano_F;\n+         --  Difference processing. This operation should be able to calculate\n+         --  the difference between opposite values which are close to the end\n+         --  and start of Ada time. To accomodate the large range, we convert\n+         --  to seconds. This action may potentially round the two values and\n+         --  either add or drop a second. We compensate for this issue in the\n+         --  previous step.\n \n-         Res_Dur := Time_Dur (Later / Nano - Earlier / Nano) -\n-                    Time_Dur (Elapsed_Leaps);\n+         Res_Dur :=\n+           Time_Dur (Later / Nano - Earlier / Nano) - Time_Dur (Elapsed_Leaps);\n \n-         Days := Long_Integer (Res_Dur / Secs_In_Day);\n-         Seconds := Duration (Res_Dur mod Secs_In_Day) + Sub_Seconds;\n+         Days         := Long_Integer (Res_Dur / Secs_In_Day);\n+         Seconds      := Duration (Res_Dur mod Secs_In_Day) + Sub_Secs;\n          Leap_Seconds := Integer (Elapsed_Leaps);\n \n          if Negate then\n@@ -750,23 +713,9 @@ package body Ada.Calendar is\n \n       function Subtract (Date : Time; Days : Long_Integer) return Time is\n          pragma Unsuppress (Overflow_Check);\n-\n          Date_N : constant Time_Rep := Time_Rep (Date);\n-         Res_N  : Time_Rep;\n-\n       begin\n-         --  Trivial case\n-\n-         if Days = 0 then\n-            return Date;\n-         end if;\n-\n-         Res_N := Date_N - Time_Rep (Days) * Nanos_In_Day;\n-\n-         Check_Within_Time_Bounds (Res_N);\n-\n-         return Time (Res_N);\n-\n+         return Time (Date_N - Time_Rep (Days) * Nanos_In_Day);\n       exception\n          when Constraint_Error =>\n             raise Time_Error;"}]}