{"sha": "afb0918a9b127a64098a1267f328908acc7e4d1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiMDkxOGE5YjEyN2E2NDA5OGExMjY3ZjMyODkwOGFjYzdlNGQxZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-04T07:04:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-04T07:04:01Z"}, "message": "re PR c++/9127 (Confusing diagnostic on specialization not introduced by \"template<>\")\n\n\tPR c++/9127\n\t* cp-tree.h (at_namespace_scope_p): New function.\n\t* parser.c (cp_parser_class_head): Handle invalid explicit\n\tspecializations.\n\t* search.c (at_namespace_scope_p): New function.\n\n\tPR c++/9127\n\t* g++.dg/template/error6.C: New test.\n\nFrom-SVN: r74274", "tree": {"sha": "e0f05bad020e9fd6c620b6e6dec6e478ffafd699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0f05bad020e9fd6c620b6e6dec6e478ffafd699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb0918a9b127a64098a1267f328908acc7e4d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb0918a9b127a64098a1267f328908acc7e4d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb0918a9b127a64098a1267f328908acc7e4d1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb0918a9b127a64098a1267f328908acc7e4d1d/comments", "author": null, "committer": null, "parents": [{"sha": "aedec8ddd22c81f7afec5423accb4175cad874b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedec8ddd22c81f7afec5423accb4175cad874b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aedec8ddd22c81f7afec5423accb4175cad874b0"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "33a772f1ec54e2126800e91093216c00fb0cde10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=afb0918a9b127a64098a1267f328908acc7e4d1d", "patch": "@@ -5,6 +5,12 @@\n \n 2003-12-03  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/9127\n+\t* cp-tree.h (at_namespace_scope_p): New function.\n+\t* parser.c (cp_parser_class_head): Handle invalid explicit\n+\tspecializations.\n+\t* search.c (at_namespace_scope_p): New function.\n+\n \tPR c++/13179\n \t* semantics.c (finish_handler_parms): Do not call eh_type_info for\n \ttypes used in templates."}, {"sha": "b02fb5699e0a111e4bb66135da68495446c32c9e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=afb0918a9b127a64098a1267f328908acc7e4d1d", "patch": "@@ -3966,6 +3966,7 @@ extern void reinit_search_statistics\t\t(void);\n extern tree current_scope\t\t\t(void);\n extern int at_function_scope_p                  (void);\n extern bool at_class_scope_p                    (void);\n+extern bool at_namespace_scope_p                (void);\n extern tree context_for_name_lookup\t\t(tree);\n extern tree lookup_conversions\t\t\t(tree);\n extern tree binfo_for_vtable\t\t\t(tree);"}, {"sha": "1ce8cd786f2455e55b3c2b4f4f2102794901a28f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=afb0918a9b127a64098a1267f328908acc7e4d1d", "patch": "@@ -11584,6 +11584,7 @@ cp_parser_class_head (cp_parser* parser,\n   bool template_id_p = false;\n   bool qualified_p = false;\n   bool invalid_nested_name_p = false;\n+  bool invalid_explicit_specialization_p = false;\n   unsigned num_templates;\n \n   /* Assume no nested-name-specifier will be present.  */\n@@ -11732,12 +11733,31 @@ cp_parser_class_head (cp_parser* parser,\n   else if (invalid_nested_name_p)\n     cp_parser_error (parser,\n \t\t     \"qualified name does not name a class\");\n+  /* An explicit-specialization must be preceded by \"template <>\".  If\n+     it is not, try to recover gracefully.  */\n+  if (at_namespace_scope_p () \n+      && parser->num_template_parameter_lists == 0\n+      && num_templates == 1)\n+    {\n+      error (\"an explicit specialization must be preceded by 'template <>'\");\n+      invalid_explicit_specialization_p = true;\n+      /* Take the same action that would have been taken by\n+\t cp_parser_explicit_specialization.  */\n+      ++parser->num_template_parameter_lists;\n+      begin_specialization ();\n+    }\n+  /* There must be no \"return\" statements between this point and the\n+     end of this function; set \"type \"to the correct return value and\n+     use \"goto done;\" to return.  */\n   /* Make sure that the right number of template parameters were\n      present.  */\n   if (!cp_parser_check_template_parameters (parser, num_templates))\n-    /* If something went wrong, there is no point in even trying to\n-       process the class-definition.  */\n-    return NULL_TREE;\n+    {\n+      /* If something went wrong, there is no point in even trying to\n+\t process the class-definition.  */\n+      type = NULL_TREE;\n+      goto done;\n+    }\n \n   /* Look up the type.  */\n   if (template_id_p)\n@@ -11789,7 +11809,8 @@ cp_parser_class_head (cp_parser* parser,\n \t{\n \t  error (\"declaration of `%D' in `%D' which does not \"\n \t\t \"enclose `%D'\", type, scope, nested_name_specifier);\n-\t  return NULL_TREE;\n+\t  type = NULL_TREE;\n+\t  goto done;\n \t}\n       /* [dcl.meaning]\n \n@@ -11848,6 +11869,12 @@ cp_parser_class_head (cp_parser* parser,\n   if (nested_name_specifier)\n     pop_scope (nested_name_specifier);\n \n+ done:\n+  if (invalid_explicit_specialization_p)\n+    {\n+      end_specialization ();\n+      --parser->num_template_parameter_lists;\n+    }\n   return type;\n }\n "}, {"sha": "e10a3da84469e7145dc3e0cf5ef9e6f0cd63e352", "filename": "gcc/cp/search.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=afb0918a9b127a64098a1267f328908acc7e4d1d", "patch": "@@ -580,6 +580,16 @@ at_class_scope_p (void)\n   return cs && TYPE_P (cs);\n }\n \n+/* Returns true if the innermost active scope is a namespace scope.  */\n+\n+bool\n+at_namespace_scope_p (void)\n+{\n+  /* We are in a namespace scope if we are not it a class scope or a\n+     function scope.  */\n+  return !current_scope();\n+}\n+\n /* Return the scope of DECL, as appropriate when doing name-lookup.  */\n \n tree"}, {"sha": "55a94c95bead0bf12fc00fa27e93c7bbefe697b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=afb0918a9b127a64098a1267f328908acc7e4d1d", "patch": "@@ -1,3 +1,8 @@\n+2003-12-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9127\n+\t* g++.dg/template/error6.C: New test.\n+\n 2003-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20031202-1.c: New test."}, {"sha": "7560dcfb51fa6eb38103e5ee321d1ee52c812283", "filename": "gcc/testsuite/g++.dg/template/error6.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb0918a9b127a64098a1267f328908acc7e4d1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror6.C?ref=afb0918a9b127a64098a1267f328908acc7e4d1d", "patch": "@@ -0,0 +1,13 @@\n+template<int n>\n+struct tento {\n+  enum {value = 10*tento<n-1>::value};\n+};\n+\n+struct tento<0> { // { dg-error \"\" }\n+   enum {value=1};\n+};\n+\n+int main() {\n+  if (tento<4>::value != 10000) return -1;\n+}\n+"}]}