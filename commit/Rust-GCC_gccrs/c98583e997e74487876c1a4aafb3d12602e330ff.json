{"sha": "c98583e997e74487876c1a4aafb3d12602e330ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk4NTgzZTk5N2U3NDQ4Nzg3NmMxYTRhYWZiM2QxMjYwMmUzMzBmZg==", "commit": {"author": {"name": "Fritz Reese", "email": "fritzoreese@gmail.com", "date": "2016-08-03T14:55:26Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2016-08-03T14:55:26Z"}, "message": "lang.opt: New option -fdec-intrinsic-ints.\n\n2016-08-03  Fritz Reese  <fritzoreese@gmail.com>\n\n\tgcc/fortran/\n\t* lang.opt: New option -fdec-intrinsic-ints.\n\t* options.c (set_dec_flags): Enable with -fdec.\n\t* gfortran.texi, invoke.texi, intrinsics.texi: Update documentation.\n\t* intrinsic.c (add_function, add_subroutine): New B/I/J/K intrinsic\n\tvariants.\n\n\tgcc/testsuite/gfortran.dg/\n\t* dec_intrinsic_ints.f90: New testcase.\n\nFrom-SVN: r239078", "tree": {"sha": "2f17abc1e7e1eb41d4214cc06d7bc3d073ff0b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f17abc1e7e1eb41d4214cc06d7bc3d073ff0b98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c98583e997e74487876c1a4aafb3d12602e330ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98583e997e74487876c1a4aafb3d12602e330ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98583e997e74487876c1a4aafb3d12602e330ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98583e997e74487876c1a4aafb3d12602e330ff/comments", "author": {"login": "fritzr", "id": 2230564, "node_id": "MDQ6VXNlcjIyMzA1NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2230564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzr", "html_url": "https://github.com/fritzr", "followers_url": "https://api.github.com/users/fritzr/followers", "following_url": "https://api.github.com/users/fritzr/following{/other_user}", "gists_url": "https://api.github.com/users/fritzr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzr/subscriptions", "organizations_url": "https://api.github.com/users/fritzr/orgs", "repos_url": "https://api.github.com/users/fritzr/repos", "events_url": "https://api.github.com/users/fritzr/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ad1a1da40869324fd22aec2b3a993cabc82ea80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad1a1da40869324fd22aec2b3a993cabc82ea80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad1a1da40869324fd22aec2b3a993cabc82ea80"}], "stats": {"total": 556, "additions": 542, "deletions": 14}, "files": [{"sha": "04726bb5dc1e4160ddba1cef1b1a7548ef0ae585", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -1,3 +1,11 @@\n+2016-08-03  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\t* lang.opt: New option -fdec-intrinsic-ints.\n+\t* options.c (set_dec_flags): Enable with -fdec.\n+\t* gfortran.texi, invoke.texi, intrinsics.texi: Update documentation.\n+\t* intrinsic.c (add_function, add_subroutine): New B/I/J/K intrinsic\n+\tvariants.\n+\n 2016-07-30  Steven G. Kargl <kargl@gcc.gnu.org>\n \n \tPR fortran/41922"}, {"sha": "b34ae86b741c03ba29919bf0317b8cd3247870e4", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -1461,6 +1461,7 @@ without warning.\n * Read/Write after EOF marker::\n * STRUCTURE and RECORD::\n * UNION and MAP::\n+* Type variants for integer intrinsics::\n @end menu\n \n @node Old-style kind specifications\n@@ -2367,6 +2368,58 @@ a.h  ===             '.C'\n a.l  ===               '.D'\n @end example\n \n+@node Type variants for integer intrinsics\n+@subsection Type variants for integer intrinsics\n+@cindex intrinsics, integer\n+\n+Similar to the D/C prefixes to real functions to specify the input/output\n+types, GNU Fortran offers B/I/J/K prefixes to integer functions for\n+compatibility with DEC programs. The types implied by each are:\n+\n+@example\n+@code{B} - @code{INTEGER(kind=1)}\n+@code{I} - @code{INTEGER(kind=2)}\n+@code{J} - @code{INTEGER(kind=4)}\n+@code{K} - @code{INTEGER(kind=8)}\n+@end example\n+\n+GNU Fortran supports these with the flag @option{-fdec-intrinsic-ints}.\n+Intrinsics for which prefixed versions are available and in what form are noted\n+in @ref{Intrinsic Procedures}. The complete list of supported intrinsics is\n+here:\n+\n+@multitable @columnfractions .2 .2 .2 .2 .2\n+\n+@headitem Intrinsic @tab B @tab I @tab J @tab K\n+\n+@item @code{@ref{ABS}}\n+  @tab @code{BABS} @tab @code{IIABS} @tab @code{JIABS} @tab @code{KIABS}\n+@item @code{@ref{BTEST}}\n+  @tab @code{BBTEST} @tab @code{BITEST} @tab @code{BJTEST} @tab @code{BKTEST}\n+@item @code{@ref{IAND}}\n+  @tab @code{BIAND} @tab @code{IIAND} @tab @code{JIAND} @tab @code{KIAND}\n+@item @code{@ref{IBCLR}}\n+  @tab @code{BBCLR} @tab @code{IIBCLR} @tab @code{JIBCLR} @tab @code{KIBCLR}\n+@item @code{@ref{IBITS}}\n+  @tab @code{BBITS} @tab @code{IIBITS} @tab @code{JIBITS} @tab @code{KIBITS}\n+@item @code{@ref{IBSET}}\n+  @tab @code{BBSET} @tab @code{IIBSET} @tab @code{JIBSET} @tab @code{KIBSET}\n+@item @code{@ref{IEOR}}\n+  @tab @code{BIEOR} @tab @code{IIEOR} @tab @code{JIEOR} @tab @code{KIEOR}\n+@item @code{@ref{IOR}}\n+  @tab @code{BIOR} @tab @code{IIOR} @tab @code{JIOR} @tab @code{KIOR}\n+@item @code{@ref{ISHFT}}\n+  @tab @code{BSHFT} @tab @code{IISHFT} @tab @code{JISHFT} @tab @code{KISHFT}\n+@item @code{@ref{ISHFTC}}\n+  @tab @code{BSHFTC} @tab @code{IISHFTC} @tab @code{JISHFTC} @tab @code{KISHFTC}\n+@item @code{@ref{MOD}}\n+  @tab @code{BMOD} @tab @code{IMOD} @tab @code{JMOD} @tab @code{KMOD}\n+@item @code{@ref{NOT}}\n+  @tab @code{BNOT} @tab @code{INOT} @tab @code{JNOT} @tab @code{KNOT}\n+@item @code{@ref{REAL}}\n+  @tab @code{--} @tab @code{FLOATI} @tab @code{FLOATJ} @tab @code{FLOATK}\n+@end multitable\n+\n \n @node Extensions not implemented in GNU Fortran\n @section Extensions not implemented in GNU Fortran"}, {"sha": "ca28eac8cf79fa142665fcff77c30fcb5342fa06", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -1255,6 +1255,14 @@ add_functions (void)\n \t     gfc_check_abs, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_REAL, dr, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"babs\", GFC_STD_GNU);\n+      make_alias (\"iiabs\", GFC_STD_GNU);\n+      make_alias (\"jiabs\", GFC_STD_GNU);\n+      make_alias (\"kiabs\", GFC_STD_GNU);\n+    }\n+\n   add_sym_1 (\"iabs\", GFC_ISYM_ABS, CLASS_ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_INTEGER, di, REQUIRED);\n@@ -1557,6 +1565,14 @@ add_functions (void)\n \t     gfc_check_bitfcn, gfc_simplify_btest, gfc_resolve_btest,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bbtest\", GFC_STD_GNU);\n+      make_alias (\"bitest\", GFC_STD_GNU);\n+      make_alias (\"bjtest\", GFC_STD_GNU);\n+      make_alias (\"bktest\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"btest\", GFC_ISYM_BTEST, GFC_STD_F95);\n \n   add_sym_2 (\"ceiling\", GFC_ISYM_CEILING, CLASS_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n@@ -1950,6 +1966,14 @@ add_functions (void)\n \t     gfc_check_iand, gfc_simplify_iand, gfc_resolve_iand,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"biand\", GFC_STD_GNU);\n+      make_alias (\"iiand\", GFC_STD_GNU);\n+      make_alias (\"jiand\", GFC_STD_GNU);\n+      make_alias (\"kiand\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"iand\", GFC_ISYM_IAND, GFC_STD_F95);\n \n   add_sym_2 (\"and\", GFC_ISYM_AND, CLASS_IMPURE, ACTUAL_NO, BT_LOGICAL,\n@@ -1981,19 +2005,43 @@ add_functions (void)\n \t     gfc_check_bitfcn, gfc_simplify_ibclr, gfc_resolve_ibclr,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bbclr\", GFC_STD_GNU);\n+      make_alias (\"iibclr\", GFC_STD_GNU);\n+      make_alias (\"jibclr\", GFC_STD_GNU);\n+      make_alias (\"kibclr\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"ibclr\", GFC_ISYM_IBCLR, GFC_STD_F95);\n \n   add_sym_3 (\"ibits\", GFC_ISYM_IBITS, CLASS_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibits, gfc_simplify_ibits, gfc_resolve_ibits,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED,\n \t     ln, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bbits\", GFC_STD_GNU);\n+      make_alias (\"iibits\", GFC_STD_GNU);\n+      make_alias (\"jibits\", GFC_STD_GNU);\n+      make_alias (\"kibits\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"ibits\", GFC_ISYM_IBITS, GFC_STD_F95);\n \n   add_sym_2 (\"ibset\", GFC_ISYM_IBSET, CLASS_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_bitfcn, gfc_simplify_ibset, gfc_resolve_ibset,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bbset\", GFC_STD_GNU);\n+      make_alias (\"iibset\", GFC_STD_GNU);\n+      make_alias (\"jibset\", GFC_STD_GNU);\n+      make_alias (\"kibset\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"ibset\", GFC_ISYM_IBSET, GFC_STD_F95);\n \n   add_sym_2 (\"ichar\", GFC_ISYM_ICHAR, CLASS_ELEMENTAL, ACTUAL_NO,\n@@ -2007,6 +2055,14 @@ add_functions (void)\n \t     gfc_check_ieor, gfc_simplify_ieor, gfc_resolve_ieor,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bieor\", GFC_STD_GNU);\n+      make_alias (\"iieor\", GFC_STD_GNU);\n+      make_alias (\"jieor\", GFC_STD_GNU);\n+      make_alias (\"kieor\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"ieor\", GFC_ISYM_IEOR, GFC_STD_F95);\n \n   add_sym_2 (\"xor\", GFC_ISYM_XOR, CLASS_IMPURE, ACTUAL_NO, BT_LOGICAL,\n@@ -2072,6 +2128,14 @@ add_functions (void)\n \t     gfc_check_ior, gfc_simplify_ior, gfc_resolve_ior,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bior\", GFC_STD_GNU);\n+      make_alias (\"iior\", GFC_STD_GNU);\n+      make_alias (\"jior\", GFC_STD_GNU);\n+      make_alias (\"kior\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"ior\", GFC_ISYM_IOR, GFC_STD_F95);\n \n   add_sym_2 (\"or\", GFC_ISYM_OR, CLASS_IMPURE, ACTUAL_NO, BT_LOGICAL,\n@@ -2139,13 +2203,29 @@ add_functions (void)\n \t     gfc_check_ishft, gfc_simplify_ishft, gfc_resolve_ishft,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bshft\", GFC_STD_GNU);\n+      make_alias (\"iishft\", GFC_STD_GNU);\n+      make_alias (\"jishft\", GFC_STD_GNU);\n+      make_alias (\"kishft\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"ishft\", GFC_ISYM_ISHFT, GFC_STD_F95);\n \n   add_sym_3 (\"ishftc\", GFC_ISYM_ISHFTC, CLASS_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishftc, gfc_simplify_ishftc, gfc_resolve_ishftc,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED,\n \t     sz, BT_INTEGER, di, OPTIONAL);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bshftc\", GFC_STD_GNU);\n+      make_alias (\"iishftc\", GFC_STD_GNU);\n+      make_alias (\"jishftc\", GFC_STD_GNU);\n+      make_alias (\"kishftc\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n   add_sym_2 (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n@@ -2456,6 +2536,14 @@ add_functions (void)\n \t     gfc_check_a_p, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_INTEGER, di, REQUIRED, p, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bmod\", GFC_STD_GNU);\n+      make_alias (\"imod\", GFC_STD_GNU);\n+      make_alias (\"jmod\", GFC_STD_GNU);\n+      make_alias (\"kmod\", GFC_STD_GNU);\n+    }\n+\n   add_sym_2 (\"amod\", GFC_ISYM_MOD, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_REAL, dr, REQUIRED, p, BT_REAL, dr, REQUIRED);\n@@ -2498,6 +2586,14 @@ add_functions (void)\n \t     gfc_check_i, gfc_simplify_not, gfc_resolve_not,\n \t     i, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bnot\", GFC_STD_GNU);\n+      make_alias (\"inot\", GFC_STD_GNU);\n+      make_alias (\"jnot\", GFC_STD_GNU);\n+      make_alias (\"knot\", GFC_STD_GNU);\n+    }\n+\n   make_generic (\"not\", GFC_ISYM_NOT, GFC_STD_F95);\n \n   add_sym_2 (\"norm2\", GFC_ISYM_NORM2, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr,\n@@ -2608,6 +2704,13 @@ add_functions (void)\n \t     gfc_check_float, gfc_simplify_float, NULL,\n \t     a, BT_INTEGER, di, REQUIRED);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"floati\", GFC_STD_GNU);\n+      make_alias (\"floatj\", GFC_STD_GNU);\n+      make_alias (\"floatk\", GFC_STD_GNU);\n+    }\n+\n   add_sym_1 (\"dfloat\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_float, gfc_simplify_dble, gfc_resolve_dble,\n \t     a, BT_REAL, dr, REQUIRED);\n@@ -3306,6 +3409,14 @@ add_subroutines (void)\n \t      t, BT_INTEGER, di, REQUIRED, INTENT_INOUT,\n \t      tp, BT_INTEGER, di, REQUIRED, INTENT_IN);\n \n+  if (flag_dec_intrinsic_ints)\n+    {\n+      make_alias (\"bmvbits\", GFC_STD_GNU);\n+      make_alias (\"imvbits\", GFC_STD_GNU);\n+      make_alias (\"jmvbits\", GFC_STD_GNU);\n+      make_alias (\"kmvbits\", GFC_STD_GNU);\n+    }\n+\n   add_sym_1s (\"random_number\", GFC_ISYM_RANDOM_NUMBER, CLASS_IMPURE,\n \t      BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_random_number, NULL, gfc_resolve_random_number,"}, {"sha": "ae5d814004f42860ed96de1f7af4e5ac712ee06b", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 188, "deletions": 13, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -401,6 +401,10 @@ end program test_abort\n @fnindex IABS\n @fnindex ZABS\n @fnindex CDABS\n+@fnindex BABS\n+@fnindex IIABS\n+@fnindex JIABS\n+@fnindex KIABS\n @cindex absolute value\n \n @table @asis\n@@ -446,6 +450,10 @@ end program test_abs\n @item @code{CABS(A)}  @tab @code{COMPLEX(4) A} @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DABS(A)}  @tab @code{REAL(8) A}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n @item @code{IABS(A)}  @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n+@item @code{BABS(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IIABS(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JIABS(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KIABS(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n @item @code{ZABS(A)}  @tab @code{COMPLEX(8) A} @tab @code{COMPLEX(8)} @tab GNU extension\n @item @code{CDABS(A)} @tab @code{COMPLEX(8) A} @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n@@ -2666,6 +2674,10 @@ The return value is of type @code{LOGICAL} and of the default kind.\n @node BTEST\n @section @code{BTEST} --- Bit test function\n @fnindex BTEST\n+@fnindex BBTEST\n+@fnindex BITEST\n+@fnindex BJTEST\n+@fnindex BKTEST\n @cindex bits, testing\n \n @table @asis\n@@ -2674,7 +2686,7 @@ The return value is of type @code{LOGICAL} and of the default kind.\n in @var{I} is set.  The counting of the bits starts at 0.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -2703,8 +2715,17 @@ program test_btest\n     end do\n end program test_btest\n @end smallexample\n-@end table\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name           @tab Argument         @tab Return type             @tab Standard\n+@item @code{BTEST(I,POS)} @tab @code{INTEGER I,POS} @tab @code{LOGICAL} @tab F95 and later\n+@item @code{BBTEST(I,POS)} @tab @code{INTEGER(1) I,POS} @tab @code{LOGICAL(1)} @tab GNU extension\n+@item @code{BITEST(I,POS)} @tab @code{INTEGER(2) I,POS} @tab @code{LOGICAL(2)} @tab GNU extension\n+@item @code{BJTEST(I,POS)} @tab @code{INTEGER(4) I,POS} @tab @code{LOGICAL(4)} @tab GNU extension\n+@item @code{BKTEST(I,POS)} @tab @code{INTEGER(8) I,POS} @tab @code{LOGICAL(8)} @tab GNU extension\n+@end multitable\n+@end table\n \n @node C_ASSOCIATED\n @section @code{C_ASSOCIATED} --- Status of a C pointer\n@@ -6972,6 +6993,10 @@ END PROGRAM\n @node IAND\n @section @code{IAND} --- Bitwise logical and\n @fnindex IAND\n+@fnindex BIAND\n+@fnindex IIAND\n+@fnindex JIAND\n+@fnindex KIAND\n @cindex bitwise logical and\n @cindex logical and, bitwise\n \n@@ -6980,7 +7005,7 @@ END PROGRAM\n Bitwise logical @code{AND}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7010,6 +7035,16 @@ PROGRAM test_iand\n END PROGRAM\n @end smallexample\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{IAND(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BIAND(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IIAND(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JIAND(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KIAND(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IOR}, @ref{IEOR}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}, @ref{NOT}\n \n@@ -7124,6 +7159,10 @@ Fortran 2003 functions and subroutines: @ref{GET_COMMAND},\n @node IBCLR\n @section @code{IBCLR} --- Clear bit\n @fnindex IBCLR\n+@fnindex BBCLR\n+@fnindex IIBCLR\n+@fnindex JIBCLR\n+@fnindex KIBCLR\n @cindex bits, unset\n @cindex bits, clear\n \n@@ -7133,7 +7172,7 @@ Fortran 2003 functions and subroutines: @ref{GET_COMMAND},\n @var{POS} set to zero.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7151,6 +7190,16 @@ Elemental function\n The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{IBCLR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BBCLR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IIBCLR(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JIBCLR(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KIBCLR(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IBITS}, @ref{IBSET}, @ref{IAND}, @ref{IOR}, @ref{IEOR}, @ref{MVBITS}\n \n@@ -7161,6 +7210,10 @@ The return value is of type @code{INTEGER} and of the same kind as\n @node IBITS\n @section @code{IBITS} --- Bit extraction\n @fnindex IBITS\n+@fnindex BBITS\n+@fnindex IIBITS\n+@fnindex JIBITS\n+@fnindex KIBITS\n @cindex bits, get\n @cindex bits, extract\n \n@@ -7173,7 +7226,7 @@ zeroed.  The value of @code{POS+LEN} must be less than or equal to the\n value @code{BIT_SIZE(I)}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7192,6 +7245,16 @@ Elemental function\n The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{IBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BBITS(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IIBITS(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JIBITS(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KIBITS(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{BIT_SIZE}, @ref{IBCLR}, @ref{IBSET}, @ref{IAND}, @ref{IOR}, @ref{IEOR}\n @end table\n@@ -7201,6 +7264,10 @@ The return value is of type @code{INTEGER} and of the same kind as\n @node IBSET\n @section @code{IBSET} --- Set bit\n @fnindex IBSET\n+@fnindex BBSET\n+@fnindex IIBSET\n+@fnindex JIBSET\n+@fnindex KIBSET\n @cindex bits, set\n \n @table @asis\n@@ -7209,7 +7276,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @var{POS} set to one.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7227,6 +7294,16 @@ Elemental function\n The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{IBSET(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BBSET(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IIBSET(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JIBSET(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KIBSET(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IBCLR}, @ref{IBITS}, @ref{IAND}, @ref{IOR}, @ref{IEOR}, @ref{MVBITS}\n \n@@ -7358,6 +7435,10 @@ end program test_idate\n @node IEOR\n @section @code{IEOR} --- Bitwise logical exclusive or\n @fnindex IEOR\n+@fnindex BIEOR\n+@fnindex IIEOR\n+@fnindex JIEOR\n+@fnindex KIEOR\n @cindex bitwise logical exclusive or\n @cindex logical exclusive or, bitwise\n \n@@ -7367,7 +7448,7 @@ end program test_idate\n @var{J}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7388,6 +7469,16 @@ The return type is @code{INTEGER}, of the same kind as the\n arguments.  (If the argument kinds differ, it is of the same kind as\n the larger argument.)\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{IEOR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BIEOR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IIEOR(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JIEOR(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KIEOR(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IOR}, @ref{IAND}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}, @ref{NOT}\n @end table\n@@ -7662,6 +7753,10 @@ The return value is a @code{INTEGER(8)} variable.\n @node IOR\n @section @code{IOR} --- Bitwise logical or\n @fnindex IOR\n+@fnindex BIOR\n+@fnindex IIOR\n+@fnindex JIOR\n+@fnindex KIOR\n @cindex bitwise logical or\n @cindex logical or, bitwise\n \n@@ -7671,7 +7766,7 @@ The return value is a @code{INTEGER(8)} variable.\n @var{J}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7692,6 +7787,16 @@ The return type is @code{INTEGER}, of the same kind as the\n arguments.  (If the argument kinds differ, it is of the same kind as\n the larger argument.)\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{IOR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BIOR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IIOR(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JIOR(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KIOR(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IEOR}, @ref{IAND}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}, @ref{NOT}\n @end table\n@@ -7945,6 +8050,10 @@ END PROGRAM\n @node ISHFT\n @section @code{ISHFT} --- Shift bits\n @fnindex ISHFT\n+@fnindex BSHFT\n+@fnindex IISHFT\n+@fnindex JISHFT\n+@fnindex KISHFT\n @cindex bits, shift\n \n @table @asis\n@@ -7958,7 +8067,7 @@ value is undefined.  Bits shifted out from the left end or right end are\n lost; zeros are shifted in from the opposite end.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7976,6 +8085,16 @@ Elemental function\n The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{ISHFT(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BSHFT(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IISHFT(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JISHFT(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KISHFT(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{ISHFTC}\n @end table\n@@ -7985,6 +8104,10 @@ The return value is of type @code{INTEGER} and of the same kind as\n @node ISHFTC\n @section @code{ISHFTC} --- Shift bits circularly\n @fnindex ISHFTC\n+@fnindex BSHFTC\n+@fnindex IISHFTC\n+@fnindex JISHFTC\n+@fnindex KISHFTC\n @cindex bits, shift circular\n \n @table @asis\n@@ -7999,7 +8122,7 @@ a right shift.  The absolute value of @var{SHIFT} must be less than\n equivalent to @code{BIT_SIZE(I)}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -8020,6 +8143,16 @@ the value must be greater than zero and less than or equal to\n The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{ISHFTC(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BSHFTC(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IISHFTC(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JISHFTC(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KISHFTC(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{ISHFT}\n @end table\n@@ -9843,6 +9976,10 @@ cases, the result is of the same type and kind as @var{ARRAY}.\n @fnindex MOD\n @fnindex AMOD\n @fnindex DMOD\n+@fnindex BMOD\n+@fnindex IMOD\n+@fnindex JMOD\n+@fnindex KMOD\n @cindex remainder\n @cindex division, remainder\n \n@@ -9851,7 +9988,7 @@ cases, the result is of the same type and kind as @var{ARRAY}.\n @code{MOD(A,P)} computes the remainder of the division of A by P@. \n \n @item @emph{Standard}:\n-Fortran 77 and later\n+Fortran 77 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -9898,6 +10035,10 @@ end program test_mod\n @item @code{MOD(A,P)}  @tab @code{INTEGER A,P} @tab @code{INTEGER} @tab Fortran 95 and later\n @item @code{AMOD(A,P)} @tab @code{REAL(4) A,P} @tab @code{REAL(4)} @tab Fortran 95 and later\n @item @code{DMOD(A,P)} @tab @code{REAL(8) A,P} @tab @code{REAL(8)} @tab Fortran 95 and later\n+@item @code{BMOD(A,P)}  @tab @code{INTEGER(1) A,P} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IMOD(A,P)}  @tab @code{INTEGER(2) A,P} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JMOD(A,P)}  @tab @code{INTEGER(4) A,P} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KMOD(A,P)}  @tab @code{INTEGER(8) A,P} @tab @code{INTEGER(8)} @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -10017,6 +10158,10 @@ end program test_move_alloc\n @node MVBITS\n @section @code{MVBITS} --- Move bits from one integer to another\n @fnindex MVBITS\n+@fnindex BMVBITS\n+@fnindex IMVBITS\n+@fnindex JMVBITS\n+@fnindex KMVBITS\n @cindex bits, move\n \n @table @asis\n@@ -10029,7 +10174,7 @@ affected by the movement of bits is unchanged. The values of\n @code{BIT_SIZE(FROM)}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental subroutine\n@@ -10047,6 +10192,16 @@ same kind as @var{FROM}.\n @item @var{TOPOS}   @tab The type shall be @code{INTEGER}.\n @end multitable\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{MVBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BMVBITS(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{IMVBITS(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JMVBITS(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KMVBITS(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IBCLR}, @ref{IBSET}, @ref{IBITS}, @ref{IAND}, @ref{IOR}, @ref{IEOR}\n @end table\n@@ -10250,6 +10405,10 @@ END PROGRAM\n @node NOT\n @section @code{NOT} --- Logical negation\n @fnindex NOT\n+@fnindex BNOT\n+@fnindex INOT\n+@fnindex JNOT\n+@fnindex KNOT\n @cindex bits, negate\n @cindex bitwise logical not\n @cindex logical not, bitwise\n@@ -10259,7 +10418,7 @@ END PROGRAM\n @code{NOT} returns the bitwise Boolean inverse of @var{I}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -10276,6 +10435,16 @@ Elemental function\n The return type is @code{INTEGER}, of the same kind as the\n argument.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{NOT(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{BNOT(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n+@item @code{INOT(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n+@item @code{JNOT(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n+@item @code{KNOT(A)} @tab @code{INTEGER(8) A} @tab @code{INTEGER(8)} @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IAND}, @ref{IEOR}, @ref{IOR}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}\n \n@@ -11192,6 +11361,9 @@ end program test_rank\n @fnindex REALPART\n @fnindex FLOAT\n @fnindex DFLOAT\n+@fnindex FLOATI\n+@fnindex FLOATJ\n+@fnindex FLOATK\n @fnindex SNGL\n @cindex conversion, to real\n @cindex complex numbers, real part\n@@ -11252,6 +11424,9 @@ end program test_real\n @item Name             @tab Argument           @tab Return type     @tab Standard\n @item @code{FLOAT(A)}  @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n @item @code{DFLOAT(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(8)}  @tab GNU extension\n+@item @code{FLOATI(A)} @tab @code{INTEGER(2)}  @tab @code{REAL(4)}  @tab GNU extension\n+@item @code{FLOATJ(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab GNU extension\n+@item @code{FLOATK(A)} @tab @code{INTEGER(8)}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{SNGL(A)}   @tab @code{INTEGER(8)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n @end multitable\n "}, {"sha": "2fd12cb6a1a53c190876d9e0d0a6c5ae863aa35a", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -116,7 +116,8 @@ by type.  Explanations are in the following sections.\n @xref{Fortran Dialect Options,,Options controlling Fortran dialect}.\n @gccoptlist{-fall-intrinsics -fbackslash -fcray-pointer -fd-lines-as-code @gol\n -fd-lines-as-comments @gol\n--fdec -fdec-structure -fdefault-double-8 -fdefault-integer-8 @gol\n+-fdec -fdec-structure -fdec-intrinsic-ints @gol\n+-fdefault-double-8 -fdefault-integer-8 @gol\n -fdefault-real-8 -fdollar-ok -ffixed-line-length-@var{n} @gol\n -ffixed-line-length-none -ffree-form -ffree-line-length-@var{n} @gol\n -ffree-line-length-none -fimplicit-none -finteger-4-integer-8 @gol\n@@ -239,6 +240,7 @@ full documentation.\n \n Other flags enabled by this switch are:\n @option{-fdollar-ok} @option{-fcray-pointer} @option{-fdec-structure}\n+@option{-fdec-intrinsic-ints}\n \n @item -fdec-structure\n @opindex @code{fdec-structure}\n@@ -247,6 +249,11 @@ Enable DEC @code{STRUCTURE} and @code{RECORD} as well as @code{UNION},\n provided for compatibility only; Fortran 90 derived types should be used\n instead where possible.\n \n+@item -fdec-intrinsic-ints\n+@opindex @code{fdec-intrinsic-ints}\n+Enable B/I/J/K kind variants of existing integer functions (e.g. BIAND, IIAND,\n+JIAND, etc...). For a complete list of intrinsics see the full documentation.\n+\n @item -fdollar-ok\n @opindex @code{fdollar-ok}\n @cindex @code{$}"}, {"sha": "4ff54e2ca8b191a3921cd03e5f03c9e2bb584ce7", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -424,6 +424,10 @@ fdec\n Fortran\n Enable all DEC language extensions.\n \n+fdec-intrinsic-ints\n+Fortran Var(flag_dec_intrinsic_ints)\n+Enable kind-specific variants of integer intrinsic functions.\n+\n fdec-structure\n Fortran\n Enable support for DEC STRUCTURE/RECORD."}, {"sha": "4aa8303dfebd3368d1009ca209069c6a351e2a5b", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -53,6 +53,7 @@ static void\n set_dec_flags (int value)\n {\n     gfc_option.flag_dec_structure  = value;\n+    flag_dec_intrinsic_ints = value;\n }\n \n "}, {"sha": "cafdb6d29e53c70278da86360f1f4cfba9611f55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -1,3 +1,7 @@\n+2016-08-03  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\t* gfortran.dg/dec_intrinsic_ints.f90: New testcase.\n+\n 2016-08-03  Richard Biener  <rguenther@suse.de>\n \n \t* c-c++-common/ubsan/pr71403-1.c: Use dg-additional-options"}, {"sha": "faa30788f44912b17ae3180e37fcf9dfe9abeb2b", "filename": "gcc/testsuite/gfortran.dg/dec_intrinsic_ints.f90", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_intrinsic_ints.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98583e997e74487876c1a4aafb3d12602e330ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_intrinsic_ints.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_intrinsic_ints.f90?ref=c98583e997e74487876c1a4aafb3d12602e330ff", "patch": "@@ -0,0 +1,165 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-intrinsic-ints\" }\n+!\n+! Test B/I/J/K integer intrinsics.\n+!\n+program main\n+\n+implicit none\n+\n+integer*1 :: ab = 9_1, bb = 3_1, cb\n+integer*2 :: ai = 9_2, bi = 3_2, ci\n+integer*4 :: aj = 9_4, bj = 3_4, cj\n+integer*8 :: ak = 9_8, bk = 3_8, ck\n+integer   :: a  = 9  , b  = 3  , c\n+\n+integer*1 :: ib = 9_1, bpos = 3_1\n+integer*2 :: ii = 9_2, ipos = 3_2\n+integer*4 :: ij = 9_4, jpos = 3_4\n+integer*8 :: ik = 9_8, kpos = 3_8\n+integer   :: i  = 9  ,  pos = 3\n+\n+integer*1 :: ba,     bc, bd\n+integer*2 :: ia,     ic, id\n+integer*4 :: ja, jb, jc, jd\n+integer*8 :: ka, kb, kc, kd\n+\n+logical*1 :: lb\n+logical*2 :: li\n+logical*4 :: lj\n+logical*8 :: lk\n+logical   :: l\n+\n+real :: r\n+\n+lb = bbtest(ib, bpos)\n+li = bitest(ii, ipos)\n+lj = bjtest(ij, jpos)\n+lk = bktest(ik, kpos)\n+l  =  btest(i ,  pos)\n+\n+lb = bbtest(9_1, 3_1)\n+li = bitest(9_2, 3_2)\n+lj = bjtest(9_4, 3_4)\n+lk = bktest(9_8, 3_8)\n+l  =  btest(9  , 3  )\n+\n+r = floati(ai)\n+r = floatj(aj)\n+r = floatk(ak)\n+r = float (a )\n+\n+r = floati(9_2)\n+r = floatj(9_4)\n+r = floatk(9_8)\n+r = float (9  )\n+\n+bb =  babs(ab)\n+bi = iiabs(ai)\n+bj = jiabs(aj)\n+bk = kiabs(ak)\n+b  =  iabs(a )\n+\n+bb =  babs(9_1)\n+bi = iiabs(9_2)\n+bj = jiabs(9_4)\n+bk = kiabs(9_8)\n+b  =  iabs(9  )\n+\n+cb = biand(ab, bb)\n+ci = iiand(ai, bi)\n+cj = jiand(aj, bj)\n+ck = kiand(ak, bk)\n+c  =  iand(a , b )\n+\n+cb = biand(9_1, 3_1)\n+ci = iiand(9_2, 3_2)\n+cj = jiand(9_4, 3_4)\n+ck = kiand(9_8, 3_8)\n+c  =  iand(9  , 3  )\n+\n+cb =  bbclr(ib, bpos)\n+ci = iibclr(ii, ipos)\n+cj = jibclr(ij, jpos)\n+ck = kibclr(ik, kpos)\n+c  =  ibclr(i ,  pos)\n+\n+cb =  bbclr(9_1, 3_1)\n+ci = iibclr(9_2, 3_2)\n+cj = jibclr(9_4, 3_4)\n+ck = kibclr(9_8, 3_8)\n+c  =  ibclr(i ,  pos)\n+\n+cb =  bbset(ib, bpos)\n+ci = iibset(ii, ipos)\n+cj = jibset(ij, jpos)\n+ck = kibset(ik, kpos)\n+c  =  ibset(i ,  pos)\n+\n+cb =  bbset(9_1, 3_1)\n+ci = iibset(9_2, 3_2)\n+cj = jibset(9_4, 3_4)\n+ck = kibset(9_8, 3_8)\n+c  =  ibset(i ,  pos)\n+\n+cb = bieor(ab, bb)\n+ci = iieor(ai, bi)\n+cj = jieor(aj, bj)\n+ck = kieor(ak, bk)\n+c  =  ieor(a , b )\n+\n+cb = bieor(9_1, 3_1)\n+ci = iieor(9_2, 3_2)\n+cj = jieor(9_4, 3_4)\n+ck = kieor(9_8, 3_8)\n+c  =  ieor(9  , 3  )\n+\n+cb = bior(ab, bb)\n+ci = iior(ai, bi)\n+cj = jior(aj, bj)\n+ck = kior(ak, bk)\n+c  =  ior(a , b )\n+\n+cb = bior(9_1, 3_1)\n+ci = iior(9_2, 3_2)\n+cj = jior(9_4, 3_4)\n+ck = kior(9_8, 3_8)\n+c  =  ior(9  , 3  )\n+\n+cb = bmod(ab, bb)\n+ci = imod(ai, bi)\n+cj = jmod(aj, bj)\n+ck = kmod(ak, bk)\n+c  =  mod(a , b )\n+\n+cb = bmod(9_1, 3_1)\n+ci = imod(9_2, 3_2)\n+cj = jmod(9_4, 3_4)\n+ck = kmod(9_8, 3_8)\n+c  =  mod(9  , 3  )\n+\n+ba = bbits(121, 10, 5)\n+call bmvbits(121_1, 2, 3, ba, 1)\n+bc = bshftc(ba, 3, 6)\n+bd = bshft(bc, -3)\n+ba = bnot(bd)\n+\n+ia = iibits(357, 10, 5)\n+call imvbits(357_2, 8, 3, ia, 1)\n+ic = iishftc(ia, 3, 6)\n+id = iishft(ic, -3)\n+ia = inot(id)\n+\n+ja = jibits(357, 10, 5)\n+call jmvbits(357_4, 8, 3, ja, 1)\n+jc = jishftc(ja, 3, 6)\n+jd = jishft(jc, -3)\n+ja = jnot(jd)\n+\n+ka = kibits(357_8, 10_8, 5_8)\n+call kmvbits(357_8, 8_8, 3_8, ka, 1_8)\n+kc = kishftc(ka, 3_8, 6_8)\n+kd = kishft(kc, -3_8)\n+ka = knot(kd)\n+\n+end program"}]}