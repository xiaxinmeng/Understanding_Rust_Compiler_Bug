{"sha": "5a7c45058271ab8a41462a483e696e0f2480b91a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3YzQ1MDU4MjcxYWI4YTQxNDYyYTQ4M2U2OTZlMGYyNDgwYjkxYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-10-24T00:59:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-10-24T00:59:57Z"}, "message": "[C++ PATCH] 'std' identifier not needed\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-10/msg01707.html\n\t* cp-tree.c (CPTI_STD_IDENTIFIER): Delete.\n\t(std_identifier): Delete.\n\t(DECL_NAME_SPACE_STD_P): Compare against std_node.\n\t* decl.c (initialize_predefined_identifiers): 'std' is not needed.\n\t(cxx_init_decl_processing): Adjust creation of ::std.  Use\n\t{push,pop}_nested_namespace.\n\t(cxx_builtin_function): Use {push,pop}_nested_namespace.\n\t* except.c (init_exception_processing): Likewise.\n\t* rtti.c (init_rtti_processing): Likewise.\n\nFrom-SVN: r277365", "tree": {"sha": "c6ac2461e1574381a1a64828901e3925d964f8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6ac2461e1574381a1a64828901e3925d964f8e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a7c45058271ab8a41462a483e696e0f2480b91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7c45058271ab8a41462a483e696e0f2480b91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a7c45058271ab8a41462a483e696e0f2480b91a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7c45058271ab8a41462a483e696e0f2480b91a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61d5466b6db685ff3b484ffdd3ae57198a4dd123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d5466b6db685ff3b484ffdd3ae57198a4dd123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61d5466b6db685ff3b484ffdd3ae57198a4dd123"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "dcf192a7af94147dcbcfc64315e43709bd488cf1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a7c45058271ab8a41462a483e696e0f2480b91a", "patch": "@@ -1,3 +1,15 @@\n+2019-10-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.c (CPTI_STD_IDENTIFIER): Delete.\n+\t(std_identifier): Delete.\n+\t(DECL_NAME_SPACE_STD_P): Compare against std_node.\n+\t* decl.c (initialize_predefined_identifiers): 'std' is not needed.\n+\t(cxx_init_decl_processing): Adjust creation of ::std.  Use\n+\t{push,pop}_nested_namespace.\n+\t(cxx_builtin_function): Use {push,pop}_nested_namespace.\n+\t* except.c (init_exception_processing): Likewise.\n+\t* rtti.c (init_rtti_processing): Likewise.\n+\n 2019-10-23  Jason Merrill  <jason@redhat.com>\n \n \tImplement P1286R2, Contra CWG1778"}, {"sha": "e307ac8d9fdfeb44bdb621645e4020eca8e5d14b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5a7c45058271ab8a41462a483e696e0f2480b91a", "patch": "@@ -149,7 +149,6 @@ enum cp_tree_index\n     CPTI_PFN_IDENTIFIER,\n     CPTI_VPTR_IDENTIFIER,\n     CPTI_GLOBAL_IDENTIFIER,\n-    CPTI_STD_IDENTIFIER,\n     CPTI_ANON_IDENTIFIER,\n     CPTI_AUTO_IDENTIFIER,\n     CPTI_DECLTYPE_AUTO_IDENTIFIER,\n@@ -289,7 +288,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define vptr_identifier\t\t\tcp_global_trees[CPTI_VPTR_IDENTIFIER]\n /* The name of the ::, std & anon namespaces.  */\n #define global_identifier\t\tcp_global_trees[CPTI_GLOBAL_IDENTIFIER]\n-#define std_identifier\t\t\tcp_global_trees[CPTI_STD_IDENTIFIER]\n #define anon_identifier\t\t\tcp_global_trees[CPTI_ANON_IDENTIFIER]\n /* auto and declspec(auto) identifiers.  */\n #define auto_identifier\t\t\tcp_global_trees[CPTI_AUTO_IDENTIFIER]\n@@ -3335,9 +3333,7 @@ struct GTY(()) lang_decl {\n \n /* Nonzero if NODE is the std namespace.  */\n #define DECL_NAMESPACE_STD_P(NODE)\t\t\t\\\n-  (TREE_CODE (NODE) == NAMESPACE_DECL\t\t\t\\\n-   && CP_DECL_CONTEXT (NODE) == global_namespace\t\\\n-   && DECL_NAME (NODE) == std_identifier)\n+  ((NODE) == std_node)\n \n /* In a TREE_LIST in an attribute list, indicates that the attribute\n    must be applied at instantiation time.  */"}, {"sha": "5d51442362c1009488d8d817d4fad8289fa586d9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5a7c45058271ab8a41462a483e696e0f2480b91a", "patch": "@@ -4178,7 +4178,6 @@ initialize_predefined_identifiers (void)\n     {\"_vptr\", &vptr_identifier, cik_normal},\n     {\"__vtt_parm\", &vtt_parm_identifier, cik_normal},\n     {\"::\", &global_identifier, cik_normal},\n-    {\"std\", &std_identifier, cik_normal},\n       /* The demangler expects anonymous namespaces to be called\n \t something starting with '_GLOBAL__N_'.  It no longer needs\n \t to be unique to the TU.  */\n@@ -4262,7 +4261,7 @@ cxx_init_decl_processing (void)\n   current_lang_name = lang_name_c;\n \n   /* Create the `std' namespace.  */\n-  push_namespace (std_identifier);\n+  push_namespace (get_identifier (\"std\"));\n   std_node = current_namespace;\n   pop_namespace ();\n \n@@ -4392,14 +4391,14 @@ cxx_init_decl_processing (void)\n \ttree bad_alloc_type_node;\n \ttree bad_alloc_decl;\n \n-\tpush_namespace (std_identifier);\n+\tpush_nested_namespace (std_node);\n \tbad_alloc_id = get_identifier (\"bad_alloc\");\n \tbad_alloc_type_node = make_class_type (RECORD_TYPE);\n \tTYPE_CONTEXT (bad_alloc_type_node) = current_namespace;\n \tbad_alloc_decl\n \t  = create_implicit_typedef (bad_alloc_id, bad_alloc_type_node);\n \tDECL_CONTEXT (bad_alloc_decl) = current_namespace;\n-\tpop_namespace ();\n+\tpop_nested_namespace (std_node);\n \n \tnew_eh_spec\n \t  = add_exception_specifier (NULL_TREE, bad_alloc_type_node, -1);\n@@ -4451,11 +4450,11 @@ cxx_init_decl_processing (void)\n \n     if (aligned_new_threshold)\n       {\n-\tpush_namespace (std_identifier);\n+\tpush_nested_namespace (std_node);\n \ttree align_id = get_identifier (\"align_val_t\");\n \talign_type_node = start_enum (align_id, NULL_TREE, size_type_node,\n \t\t\t\t      NULL_TREE, /*scoped*/true, NULL);\n-\tpop_namespace ();\n+\tpop_nested_namespace (std_node);\n \n \t/* operator new (size_t, align_val_t); */\n \tnewtype = build_function_type_list (ptr_type_node, size_type_node,\n@@ -4663,10 +4662,10 @@ cxx_builtin_function (tree decl)\n     {\n       tree std_decl = copy_decl (decl);\n \n-      push_namespace (std_identifier);\n+      push_nested_namespace (std_node);\n       DECL_CONTEXT (std_decl) = FROB_CONTEXT (std_node);\n       pushdecl (std_decl);\n-      pop_namespace ();\n+      pop_nested_namespace (std_node);\n     }\n \n   DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);"}, {"sha": "025262c173752485f280a853854503623fbf2367", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=5a7c45058271ab8a41462a483e696e0f2480b91a", "patch": "@@ -51,14 +51,14 @@ init_exception_processing (void)\n   tree tmp;\n \n   /* void std::terminate (); */\n-  push_namespace (std_identifier);\n+  push_nested_namespace (std_node);\n   tmp = build_function_type_list (void_type_node, NULL_TREE);\n   terminate_fn = build_cp_library_fn_ptr (\"terminate\", tmp,\n \t\t\t\t\t   ECF_NOTHROW | ECF_NORETURN\n \t\t\t\t\t   | ECF_COLD);\n   gcc_checking_assert (TREE_THIS_VOLATILE (terminate_fn)\n \t\t       && TREE_NOTHROW (terminate_fn));\n-  pop_namespace ();\n+  pop_nested_namespace (std_node);\n \n   /* void __cxa_call_unexpected(void *); */\n   tmp = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);"}, {"sha": "b3d579fc7c3f78462eb72f2f4e39c707043d8dfb", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7c45058271ab8a41462a483e696e0f2480b91a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=5a7c45058271ab8a41462a483e696e0f2480b91a", "patch": "@@ -168,10 +168,10 @@ init_rtti_processing (void)\n {\n   tree type_info_type;\n \n-  push_namespace (std_identifier);\n+  push_nested_namespace (std_node);\n   type_info_type = xref_tag (class_type, get_identifier (\"type_info\"),\n \t\t\t     /*tag_scope=*/ts_current, false);\n-  pop_namespace ();\n+  pop_nested_namespace (std_node);\n   const_type_info_type_node\n     = cp_build_qualified_type (type_info_type, TYPE_QUAL_CONST);\n   type_info_ptr_type = build_pointer_type (const_type_info_type_node);"}]}