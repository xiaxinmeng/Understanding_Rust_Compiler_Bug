{"sha": "f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919", "node_id": "C_kwDOANBUbNoAKGYwYjdmZGRiZWZiZTdhZjdjMTRlZDVmMmRlZjQ5YmJkYjRhNmM5MTk", "commit": {"author": {"name": "Joffrey Huguet", "email": "huguet@adacore.com", "date": "2022-05-03T12:46:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:36Z"}, "message": "[Ada] Add contracts to Interfaces.C.Strings\n\nThis patch adds Global contracts and preconditions to subprograms of\nInterfaces.C.Strings. Effects on allocated memory are modelled\nthrough an abstract state, C_Memory. The preconditions protect against\nDereference_Error, but not Storage_Error (which is not handled by\nSPARK). This patch also disables the use of To_Chars_Ptr, which\ncreates an alias between an ownership pointer and the abstract state,\nand the use of Free, in SPARK code. Thus, memory leaks will happen\nif the user creates the Chars_Ptr using New_Char_Array and New_String.\n\ngcc/ada/\n\n\t* libgnat/i-cstrin.ads (To_Chars_Ptr): Add SPARK_Mode => Off.\n\t(Free): Likewise.\n\t(New_Char_Array): Add global contracts and Volatile attribute.\n\t(New_String): Likewise.\n\t(Value, Strlen, Update): Add global contracts and preconditions.\n\t* libgnat/i-cstrin.adb: Add SPARK_Mode => Off to the package\n\tbody.", "tree": {"sha": "e97796c37cad383a3a00e8cc54b29b209c1229a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97796c37cad383a3a00e8cc54b29b209c1229a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919/comments", "author": {"login": "joffreyhuguet", "id": 36951399, "node_id": "MDQ6VXNlcjM2OTUxMzk5", "avatar_url": "https://avatars.githubusercontent.com/u/36951399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joffreyhuguet", "html_url": "https://github.com/joffreyhuguet", "followers_url": "https://api.github.com/users/joffreyhuguet/followers", "following_url": "https://api.github.com/users/joffreyhuguet/following{/other_user}", "gists_url": "https://api.github.com/users/joffreyhuguet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joffreyhuguet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joffreyhuguet/subscriptions", "organizations_url": "https://api.github.com/users/joffreyhuguet/orgs", "repos_url": "https://api.github.com/users/joffreyhuguet/repos", "events_url": "https://api.github.com/users/joffreyhuguet/events{/privacy}", "received_events_url": "https://api.github.com/users/joffreyhuguet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcfdd2851b297e0005a8490b7f867ca45d1ad340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfdd2851b297e0005a8490b7f867ca45d1ad340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfdd2851b297e0005a8490b7f867ca45d1ad340"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "67cceb277fa7c0c6dfd1ef80dcb3b9a9aa97fdff", "filename": "gcc/ada/libgnat/i-cstrin.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919/gcc%2Fada%2Flibgnat%2Fi-cstrin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919/gcc%2Fada%2Flibgnat%2Fi-cstrin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fi-cstrin.adb?ref=f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919", "patch": "@@ -34,7 +34,9 @@ with System.Storage_Elements; use System.Storage_Elements;\n \n with Ada.Unchecked_Conversion;\n \n-package body Interfaces.C.Strings is\n+package body Interfaces.C.Strings with\n+  SPARK_Mode => Off\n+is\n \n    --  Note that the type chars_ptr has a pragma No_Strict_Aliasing in the\n    --  spec, to prevent any assumptions about aliasing for values of this type,"}, {"sha": "62ef9df383da2cc917083cf7844ae7dcbbb6ed8d", "filename": "gcc/ada/libgnat/i-cstrin.ads", "status": "modified", "additions": 54, "deletions": 15, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919/gcc%2Fada%2Flibgnat%2Fi-cstrin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919/gcc%2Fada%2Flibgnat%2Fi-cstrin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fi-cstrin.ads?ref=f0b7fddbefbe7af7c14ed5f2def49bbdb4a6c919", "patch": "@@ -33,7 +33,18 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package Interfaces.C.Strings is\n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. These preconditions\n+--  do not protect against Storage_Error.\n+\n+pragma Assertion_Policy (Pre => Ignore);\n+\n+package Interfaces.C.Strings with\n+  SPARK_Mode     => On,\n+  Abstract_State => (C_Memory),\n+  Initializes    => (C_Memory)\n+is\n    pragma Preelaborate;\n \n    type char_array_access is access all char_array;\n@@ -53,47 +64,75 @@ package Interfaces.C.Strings is\n \n    function To_Chars_Ptr\n      (Item      : char_array_access;\n-      Nul_Check : Boolean := False) return chars_ptr;\n-\n-   function New_Char_Array (Chars : char_array) return chars_ptr;\n-\n-   function New_String (Str : String) return chars_ptr;\n-\n-   procedure Free (Item : in out chars_ptr);\n+      Nul_Check : Boolean := False) return chars_ptr\n+   with\n+     SPARK_Mode => Off;\n+\n+   function New_Char_Array (Chars : char_array) return chars_ptr with\n+     Volatile_Function,\n+     Post   => New_Char_Array'Result /= Null_Ptr,\n+     Global => (Input => C_Memory);\n+\n+   function New_String (Str : String) return chars_ptr with\n+     Volatile_Function,\n+     Post   => New_String'Result /= Null_Ptr,\n+     Global => (Input => C_Memory);\n+\n+   procedure Free (Item : in out chars_ptr) with\n+     SPARK_Mode => Off;\n    --  When deallocation is prohibited (eg: cert runtimes) this routine\n    --  will raise Program_Error\n \n    Dereference_Error : exception;\n \n-   function Value (Item : chars_ptr) return char_array;\n+   function Value (Item : chars_ptr) return char_array with\n+     Pre    => Item /= Null_Ptr,\n+     Global => (Input => C_Memory);\n \n    function Value\n      (Item   : chars_ptr;\n-      Length : size_t) return char_array;\n+      Length : size_t) return char_array\n+   with\n+     Pre    => Item /= Null_Ptr,\n+     Global => (Input => C_Memory);\n \n-   function Value (Item : chars_ptr) return String;\n+   function Value (Item : chars_ptr) return String with\n+     Pre    => Item /= Null_Ptr,\n+     Global => (Input => C_Memory);\n \n    function Value\n      (Item   : chars_ptr;\n-      Length : size_t) return String;\n+      Length : size_t) return String\n+   with\n+     Pre    => Item /= Null_Ptr,\n+     Global => (Input => C_Memory);\n \n-   function Strlen (Item : chars_ptr) return size_t;\n+   function Strlen (Item : chars_ptr) return size_t with\n+     Pre    => Item /= Null_Ptr,\n+     Global => (Input => C_Memory);\n \n    procedure Update\n      (Item   : chars_ptr;\n       Offset : size_t;\n       Chars  : char_array;\n-      Check  : Boolean := True);\n+      Check  : Boolean := True)\n+   with\n+     Pre    => Item /= Null_Ptr,\n+     Global => (In_Out => C_Memory);\n \n    procedure Update\n      (Item   : chars_ptr;\n       Offset : size_t;\n       Str    : String;\n-      Check  : Boolean := True);\n+      Check  : Boolean := True)\n+   with\n+     Pre    => Item /= Null_Ptr,\n+     Global => (In_Out => C_Memory);\n \n    Update_Error : exception;\n \n private\n+   pragma SPARK_Mode (Off);\n    type chars_ptr is access all Character;\n    for chars_ptr'Size use System.Parameters.ptr_bits;\n "}]}