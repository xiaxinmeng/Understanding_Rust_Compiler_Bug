{"sha": "26be8b84603be48d1cf35bea3be2bb398f7964b7", "node_id": "C_kwDOANBUbNoAKDI2YmU4Yjg0NjAzYmU0OGQxY2YzNWJlYTNiZTJiYjM5OGY3OTY0Yjc", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-12-29T17:32:46Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-12-29T17:32:46Z"}, "message": "scoped tables: insert before further lookups\n\nAvoid hash table lookups between requesting an insert and storing the\ninserted value in avail_exprs_stack.  Lookups before the insert is\ncompleted could fail to find double-hashed elements.\n\n\nfor  gcc/ChangeLog\n\n\t* tree-ssa-scopedtables.cc\n\t(avail_exprs_stack::lookup_avail_expr): Finish hash table\n\tinsertion before further lookups.", "tree": {"sha": "b909a816e129765a46ea1a4b88d0b54b3f87f90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b909a816e129765a46ea1a4b88d0b54b3f87f90f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26be8b84603be48d1cf35bea3be2bb398f7964b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26be8b84603be48d1cf35bea3be2bb398f7964b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26be8b84603be48d1cf35bea3be2bb398f7964b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26be8b84603be48d1cf35bea3be2bb398f7964b7/comments", "author": null, "committer": null, "parents": [{"sha": "da086e472b61245dedcb2463c53f84072773d1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da086e472b61245dedcb2463c53f84072773d1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da086e472b61245dedcb2463c53f84072773d1f5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3e6e129e7d5d380bb3ccde3406aaa89075366a06", "filename": "gcc/tree-ssa-scopedtables.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26be8b84603be48d1cf35bea3be2bb398f7964b7/gcc%2Ftree-ssa-scopedtables.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26be8b84603be48d1cf35bea3be2bb398f7964b7/gcc%2Ftree-ssa-scopedtables.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.cc?ref=26be8b84603be48d1cf35bea3be2bb398f7964b7", "patch": "@@ -259,11 +259,6 @@ avail_exprs_stack::lookup_avail_expr (gimple *stmt, bool insert, bool tbaa_p,\n     }\n   else if (*slot == NULL)\n     {\n-      /* If we did not find the expression in the hash table, we may still\n-\t be able to produce a result for some expressions.  */\n-      tree retval = avail_exprs_stack::simplify_binary_operation (stmt,\n-\t\t\t\t\t\t\t\t  element);\n-\n       /* We have, in effect, allocated *SLOT for ELEMENT at this point.\n \t We must initialize *SLOT to a real entry, even if we found a\n \t way to prove ELEMENT was a constant after not finding ELEMENT\n@@ -277,6 +272,11 @@ avail_exprs_stack::lookup_avail_expr (gimple *stmt, bool insert, bool tbaa_p,\n       class expr_hash_elt *element2 = new expr_hash_elt (element);\n       *slot = element2;\n \n+      /* If we did not find the expression in the hash table, we may still\n+\t be able to produce a result for some expressions.  */\n+      tree retval = avail_exprs_stack::simplify_binary_operation (stmt,\n+\t\t\t\t\t\t\t\t  element);\n+\n       record_expr (element2, NULL, '2');\n       return retval;\n     }"}]}