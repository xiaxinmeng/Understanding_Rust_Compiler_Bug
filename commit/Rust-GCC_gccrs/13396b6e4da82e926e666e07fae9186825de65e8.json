{"sha": "13396b6e4da82e926e666e07fae9186825de65e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMzOTZiNmU0ZGE4MmU5MjZlNjY2ZTA3ZmFlOTE4NjgyNWRlNjVlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-10-02T13:43:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-10-02T13:43:09Z"}, "message": "re PR tree-optimization/54713 (error: non-trivial conversion at assignment in gcc.c-torture/compile/pr53410-2.c)\n\n\tPR tree-optimization/54713\n\t* expr.c (categorize_ctor_elements_1): Don't assume purpose is\n\tnon-NULL.\n\t* tree-cfg.c (verify_gimple_assign_single): Add verification of\n\tvector CONSTRUCTORs.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): For VECTOR_TYPE\n\tCONSTRUCTORs, don't do anything if element type is VECTOR_TYPE,\n\tand don't check index.\n\t* tree-vect-slp.c (vect_get_constant_vectors): VIEW_CONVERT_EXPR\n\tctor elements first if their type isn't compatible with vector\n\telement type.\n\nFrom-SVN: r191983", "tree": {"sha": "3adb3336c25f30bb07febeff1971bf93fbfcc921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3adb3336c25f30bb07febeff1971bf93fbfcc921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13396b6e4da82e926e666e07fae9186825de65e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13396b6e4da82e926e666e07fae9186825de65e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13396b6e4da82e926e666e07fae9186825de65e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13396b6e4da82e926e666e07fae9186825de65e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faf86a02f349e39c74949b49a1b95bd8a1f99ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf86a02f349e39c74949b49a1b95bd8a1f99ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf86a02f349e39c74949b49a1b95bd8a1f99ceb"}], "stats": {"total": 134, "additions": 126, "deletions": 8}, "files": [{"sha": "c4bd0a4fa4e72ffb59ca9a66877e9539893f5135", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13396b6e4da82e926e666e07fae9186825de65e8", "patch": "@@ -1,3 +1,17 @@\n+2012-10-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/54713\n+\t* expr.c (categorize_ctor_elements_1): Don't assume purpose is\n+\tnon-NULL.\n+\t* tree-cfg.c (verify_gimple_assign_single): Add verification of\n+\tvector CONSTRUCTORs.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): For VECTOR_TYPE\n+\tCONSTRUCTORs, don't do anything if element type is VECTOR_TYPE,\n+\tand don't check index.\n+\t* tree-vect-slp.c (vect_get_constant_vectors): VIEW_CONVERT_EXPR\n+\tctor elements first if their type isn't compatible with vector\n+\telement type.\n+\n 2012-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.h (DECL_NONLOCAL_FRAME): New macro."}, {"sha": "1adea93c31699fa6c129dd81b9c4f6fcbf6e448d", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=13396b6e4da82e926e666e07fae9186825de65e8", "patch": "@@ -5491,7 +5491,7 @@ categorize_ctor_elements_1 (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n     {\n       HOST_WIDE_INT mult = 1;\n \n-      if (TREE_CODE (purpose) == RANGE_EXPR)\n+      if (purpose && TREE_CODE (purpose) == RANGE_EXPR)\n \t{\n \t  tree lo_index = TREE_OPERAND (purpose, 0);\n \t  tree hi_index = TREE_OPERAND (purpose, 1);"}, {"sha": "b14a3b929f518f00cf109a199f0737c169f6630b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=13396b6e4da82e926e666e07fae9186825de65e8", "patch": "@@ -4000,6 +4000,80 @@ verify_gimple_assign_single (gimple stmt)\n       return res;\n \n     case CONSTRUCTOR:\n+      if (TREE_CODE (rhs1_type) == VECTOR_TYPE)\n+\t{\n+\t  unsigned int i;\n+\t  tree elt_i, elt_v, elt_t = NULL_TREE;\n+\n+\t  if (CONSTRUCTOR_NELTS (rhs1) == 0)\n+\t    return res;\n+\t  /* For vector CONSTRUCTORs we require that either it is empty\n+\t     CONSTRUCTOR, or it is a CONSTRUCTOR of smaller vector elements\n+\t     (then the element count must be correct to cover the whole\n+\t     outer vector and index must be NULL on all elements, or it is\n+\t     a CONSTRUCTOR of scalar elements, where we as an exception allow\n+\t     smaller number of elements (assuming zero filling) and\n+\t     consecutive indexes as compared to NULL indexes (such\n+\t     CONSTRUCTORs can appear in the IL from FEs).  */\n+\t  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (rhs1), i, elt_i, elt_v)\n+\t    {\n+\t      if (elt_t == NULL_TREE)\n+\t\t{\n+\t\t  elt_t = TREE_TYPE (elt_v);\n+\t\t  if (TREE_CODE (elt_t) == VECTOR_TYPE)\n+\t\t    {\n+\t\t      tree elt_t = TREE_TYPE (elt_v);\n+\t\t      if (!useless_type_conversion_p (TREE_TYPE (rhs1_type),\n+\t\t\t\t\t\t      TREE_TYPE (elt_t)))\n+\t\t\t{\n+\t\t\t  error (\"incorrect type of vector CONSTRUCTOR\"\n+\t\t\t\t \" elements\");\n+\t\t\t  debug_generic_stmt (rhs1);\n+\t\t\t  return true;\n+\t\t\t}\n+\t\t      else if (CONSTRUCTOR_NELTS (rhs1)\n+\t\t\t       * TYPE_VECTOR_SUBPARTS (elt_t)\n+\t\t\t       != TYPE_VECTOR_SUBPARTS (rhs1_type))\n+\t\t\t{\n+\t\t\t  error (\"incorrect number of vector CONSTRUCTOR\"\n+\t\t\t\t \" elements\");\n+\t\t\t  debug_generic_stmt (rhs1);\n+\t\t\t  return true;\n+\t\t\t}\n+\t\t    }\n+\t\t  else if (!useless_type_conversion_p (TREE_TYPE (rhs1_type),\n+\t\t\t\t\t\t       elt_t))\n+\t\t    {\n+\t\t      error (\"incorrect type of vector CONSTRUCTOR elements\");\n+\t\t      debug_generic_stmt (rhs1);\n+\t\t      return true;\n+\t\t    }\n+\t\t  else if (CONSTRUCTOR_NELTS (rhs1)\n+\t\t\t   > TYPE_VECTOR_SUBPARTS (rhs1_type))\n+\t\t    {\n+\t\t      error (\"incorrect number of vector CONSTRUCTOR elements\");\n+\t\t      debug_generic_stmt (rhs1);\n+\t\t      return true;\n+\t\t    }\n+\t\t}\n+\t      else if (!useless_type_conversion_p (elt_t, TREE_TYPE (elt_v)))\n+\t\t{\n+\t\t  error (\"incorrect type of vector CONSTRUCTOR elements\");\n+\t\t  debug_generic_stmt (rhs1);\n+\t\t  return true;\n+\t\t}\n+\t      if (elt_i != NULL_TREE\n+\t\t  && (TREE_CODE (elt_t) == VECTOR_TYPE\n+\t\t      || TREE_CODE (elt_i) != INTEGER_CST\n+\t\t      || compare_tree_int (elt_i, i) != 0))\n+\t\t{\n+\t\t  error (\"vector CONSTRUCTOR with non-NULL element index\");\n+\t\t  debug_generic_stmt (rhs1);\n+\t\t  return true;\n+\t\t}\n+\t    }\n+\t}\n+      return res;\n     case OBJ_TYPE_REF:\n     case ASSERT_EXPR:\n     case WITH_SIZE_EXPR:"}, {"sha": "832328d328a26d782d89be0668147f23d32da7a4", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=13396b6e4da82e926e666e07fae9186825de65e8", "patch": "@@ -1,5 +1,5 @@\n /* SCC value numbering for trees\n-   Copyright (C) 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dan@dberlin.org>\n \n@@ -1639,8 +1639,12 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t\t  if (i < CONSTRUCTOR_NELTS (ctor))\n \t\t    {\n \t\t      constructor_elt *elt = CONSTRUCTOR_ELT (ctor, i);\n-\t\t      if (compare_tree_int (elt->index, i) == 0)\n-\t\t\tval = elt->value;\n+\t\t      if (TREE_CODE (TREE_TYPE (rhs1)) == VECTOR_TYPE)\n+\t\t\t{\n+\t\t\t  if (TREE_CODE (TREE_TYPE (elt->value))\n+\t\t\t      != VECTOR_TYPE)\n+\t\t\t    val = elt->value;\n+\t\t\t}\n \t\t    }\n \t\t}\n \t      if (val)"}, {"sha": "c2429b28693a9586a008fd3fb98edddb5d7f9bc0", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13396b6e4da82e926e666e07fae9186825de65e8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=13396b6e4da82e926e666e07fae9186825de65e8", "patch": "@@ -2345,6 +2345,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n   enum tree_code code = gimple_expr_code (stmt);\n   gimple def_stmt;\n   struct loop *loop;\n+  gimple_seq ctor_seq = NULL;\n \n   if (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_reduction_def\n       && reduc_index != -1)\n@@ -2503,11 +2504,27 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \n           /* Create 'vect_ = {op0,op1,...,opn}'.  */\n           number_of_places_left_in_vector--;\n-\t  if (constant_p\n-\t      && !types_compatible_p (TREE_TYPE (vector_type), TREE_TYPE (op)))\n+\t  if (!types_compatible_p (TREE_TYPE (vector_type), TREE_TYPE (op)))\n \t    {\n-\t      op = fold_unary (VIEW_CONVERT_EXPR, TREE_TYPE (vector_type), op);\n-\t      gcc_assert (op && CONSTANT_CLASS_P (op));\n+\t      if (constant_p)\n+\t\t{\n+\t\t  op = fold_unary (VIEW_CONVERT_EXPR,\n+\t\t\t\t   TREE_TYPE (vector_type), op);\n+\t\t  gcc_assert (op && CONSTANT_CLASS_P (op));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  tree new_temp\n+\t\t    = make_ssa_name (TREE_TYPE (vector_type), NULL);\n+\t\t  gimple init_stmt;\n+\t\t  op = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (vector_type),\n+\t\t\t       op);\t\t  \n+\t\t  init_stmt\n+\t\t    = gimple_build_assign_with_ops (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t    new_temp, op, NULL_TREE);\n+\t\t  gimple_seq_add_stmt (&ctor_seq, init_stmt);\n+\t\t  op = new_temp;\n+\t\t}\n \t    }\n \t  elts[number_of_places_left_in_vector] = op;\n \n@@ -2529,6 +2546,15 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n               VEC_quick_push (tree, voprnds,\n                               vect_init_vector (stmt, vec_cst,\n \t\t\t\t\t\tvector_type, NULL));\n+\t      if (ctor_seq != NULL)\n+\t\t{\n+\t\t  gimple init_stmt\n+\t\t    = SSA_NAME_DEF_STMT (VEC_last (tree, voprnds));\n+\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (init_stmt);\n+\t\t  gsi_insert_seq_before_without_update (&gsi, ctor_seq,\n+\t\t\t\t\t\t\tGSI_SAME_STMT);\n+\t\t  ctor_seq = NULL;\n+\t\t}\n             }\n         }\n     }"}]}