{"sha": "823c22f9eacdc9b5519a561eb2506d32fab41b37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIzYzIyZjllYWNkYzliNTUxOWE1NjFlYjI1MDZkMzJmYWI0MWIzNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2007-07-22T18:46:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2007-07-22T18:46:51Z"}, "message": "re PR c++/32839 (internal compiler error: Segmentation fault (templates))\n\ncp/\n\tPR c++/32839\n\t* typeck.c (convert_arguments): Only use default args if we have\n\ta function decl.\n\ntestsuite/\n\tPR c++/32839\n\t* g++.dg/expr/call4.C: New.\n\t* g++.dg/expr/call5.C: New.\n\nFrom-SVN: r126829", "tree": {"sha": "023599cfcc1f7ed7a4850379b0fc219cd48e8482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023599cfcc1f7ed7a4850379b0fc219cd48e8482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/823c22f9eacdc9b5519a561eb2506d32fab41b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823c22f9eacdc9b5519a561eb2506d32fab41b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/823c22f9eacdc9b5519a561eb2506d32fab41b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823c22f9eacdc9b5519a561eb2506d32fab41b37/comments", "author": null, "committer": null, "parents": [{"sha": "eec14ce5ec901fc2bab2cc8b25b5ec6c8f9ce3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec14ce5ec901fc2bab2cc8b25b5ec6c8f9ce3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec14ce5ec901fc2bab2cc8b25b5ec6c8f9ce3d5"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "39da6aaf3ff1a541671ab379879cec4dd209bcaf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=823c22f9eacdc9b5519a561eb2506d32fab41b37", "patch": "@@ -1,5 +1,9 @@\n 2007-07-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/32839\n+\t* typeck.c (convert_arguments): Only use default args if we have\n+\ta function decl.\n+\n \tPR c++/30818\n \t* typeck.c (structural_comptypes): No need to check\n \tresolve_typename_type return value here."}, {"sha": "7a1a725b69a9dbdb837d5eedd99757629bf9ac5e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=823c22f9eacdc9b5519a561eb2506d32fab41b37", "patch": "@@ -2885,8 +2885,14 @@ convert_arguments (int nargs, tree *argarray,\n \n   if (typetail != 0 && typetail != void_list_node)\n     {\n-      /* See if there are default arguments that can be used.  */\n-      if (TREE_PURPOSE (typetail)\n+      /* See if there are default arguments that can be used.  Because\n+\t we hold default arguments in the FUNCTION_TYPE (which is so\n+\t wrong), we can see default parameters here from deduced\n+\t contexts (and via typeof) for indirect function calls.\n+\t Fortunately we know whether we have a function decl to\n+\t provide default arguments in a language conformant\n+\t manner.  */\n+      if (fndecl && TREE_PURPOSE (typetail)\n \t  && TREE_CODE (TREE_PURPOSE (typetail)) != DEFAULT_ARG)\n \t{\n \t  for (; typetail != void_list_node; ++i)"}, {"sha": "2cf110b2181221b6f091d421cc923c6d419b87e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=823c22f9eacdc9b5519a561eb2506d32fab41b37", "patch": "@@ -1,3 +1,9 @@\n+2007-07-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/32839\n+\t* g++.dg/expr/call4.C: New.\n+\t* g++.dg/expr/call5.C: New.\n+\n 2007-07-22  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/32710"}, {"sha": "b4f2d60be7e59ed547463892131e6730ca3a7a8d", "filename": "gcc/testsuite/g++.dg/expr/call4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall4.C?ref=823c22f9eacdc9b5519a561eb2506d32fab41b37", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 22 Jul 2007 <nathan@codesourcery.com>\n+\n+// Origin: Danny Boelens <danny.boelens@artwork-systems.com>\n+// PR 32839.  Default arguments propagated through the type system to\n+// an indirect call.\n+\n+template<typename T>\n+struct TPL\n+{\n+  enum Whatever {e1, e2};\n+ \n+  static void Quux (int i = e1 | e2);\n+};\n+\n+template <typename F>\n+void DoIt (F fun)\n+{\n+  fun (); // { dg-error \"too few arguments\" }\n+}\n+\n+void Foo ()\n+{\n+  DoIt (&TPL<int>::Quux);\n+}"}, {"sha": "023ad81f067ca1079635b110886829fa5eba8909", "filename": "gcc/testsuite/g++.dg/expr/call5.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823c22f9eacdc9b5519a561eb2506d32fab41b37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall5.C?ref=823c22f9eacdc9b5519a561eb2506d32fab41b37", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 22 Jul 2007 <nathan@codesourcery.com>\n+\n+// PR 32839.  Default arguments propagated through the type system to\n+// an indirect call.\n+\n+void Quux (int i = 0);\n+void Baz (int i);\n+\n+void Foo ()\n+{\n+  __typeof (Quux) *q = Baz;\n+\n+  q (); // { dg-error \"too few arguments\" }\n+}\n+\n+  "}]}