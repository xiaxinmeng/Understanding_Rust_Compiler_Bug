{"sha": "a72610d4320925787d635cb4ddb8a40967e05bc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyNjEwZDQzMjA5MjU3ODdkNjM1Y2I0ZGRiOGE0MDk2N2UwNWJjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-15T14:36:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-15T14:36:26Z"}, "message": "re PR sanitizer/81281 (UBSAN: false positive, dropped promotion to long type.)\n\n\tPR sanitizer/81281\n\t* match.pd ((T)(P + A) - (T)P -> (T) A): Use @@0 instead of @0 and\n\tconvert? on @0 instead of convert.  Check type of @1, not @0.\n\t((T)P - (T)(P + A) -> -(T) A): Use @@0 instead of @0 and\n\tconvert? on @0 instead of convert.  Check type of @1, not @0.\n\t((T)(P + A) - (T)(P + B) -> (T)A - (T)B): Use @@0 instead of @0,\n\tonly optimize if either both @1 and @2 types are narrower\n\tprecision, or both are wider or equal precision, and in the former\n\tcase only if both have undefined overflow.\n\n\t* gcc.dg/pr81281-3.c: New test.\n\nFrom-SVN: r255696", "tree": {"sha": "396cbb2afd84f1aa78d9ca5c6710dbc2fa445440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/396cbb2afd84f1aa78d9ca5c6710dbc2fa445440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a72610d4320925787d635cb4ddb8a40967e05bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72610d4320925787d635cb4ddb8a40967e05bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a72610d4320925787d635cb4ddb8a40967e05bc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72610d4320925787d635cb4ddb8a40967e05bc3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14"}], "stats": {"total": 167, "additions": 147, "deletions": 20}, "files": [{"sha": "8d655acf2c8aee599d0e7514b9d27748e67b6aa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a72610d4320925787d635cb4ddb8a40967e05bc3", "patch": "@@ -1,3 +1,15 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81281\n+\t* match.pd ((T)(P + A) - (T)P -> (T) A): Use @@0 instead of @0 and\n+\tconvert? on @0 instead of convert.  Check type of @1, not @0.\n+\t((T)P - (T)(P + A) -> -(T) A): Use @@0 instead of @0 and\n+\tconvert? on @0 instead of convert.  Check type of @1, not @0.\n+\t((T)(P + A) - (T)(P + B) -> (T)A - (T)B): Use @@0 instead of @0,\n+\tonly optimize if either both @1 and @2 types are narrower\n+\tprecision, or both are wider or equal precision, and in the former\n+\tcase only if both have undefined overflow.\n+\n 2017-12-15  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/83388"}, {"sha": "3943aceb05967eba1063009b3a4a0fb9952321e2", "filename": "gcc/match.pd", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a72610d4320925787d635cb4ddb8a40967e05bc3", "patch": "@@ -1784,8 +1784,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n   /* (T)(P + A) - (T)P -> (T) A */\n   (simplify\n-   (minus (convert (plus:c @0 @1))\n-    (convert @0))\n+   (minus (convert (plus:c @@0 @1))\n+    (convert? @0))\n    (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n \t/* For integer types, if A has a smaller type\n \t   than T the result depends on the possible\n@@ -1794,8 +1794,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t   However, if an overflow in P + A would cause\n \t   undefined behavior, we can assume that there\n \t   is no overflow.  */\n-\t|| (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t    && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+\t|| (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+\t    && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@1))))\n     (convert @1)))\n   (simplify\n    (minus (convert (pointer_plus @@0 @1))\n@@ -1818,8 +1818,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n   /* (T)P - (T)(P + A) -> -(T) A */\n   (simplify\n-   (minus (convert @0)\n-    (convert (plus:c @0 @1)))\n+   (minus (convert? @0)\n+    (convert (plus:c @@0 @1)))\n    (if (INTEGRAL_TYPE_P (type)\n \t&& TYPE_OVERFLOW_UNDEFINED (type)\n \t&& element_precision (type) <= element_precision (TREE_TYPE (@1)))\n@@ -1833,8 +1833,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t    However, if an overflow in P + A would cause\n \t    undefined behavior, we can assume that there\n \t    is no overflow.  */\n-\t || (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+\t || (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@1))))\n      (negate (convert @1)))))\n   (simplify\n    (minus (convert @0)\n@@ -1862,23 +1862,28 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n   /* (T)(P + A) - (T)(P + B) -> (T)A - (T)B */\n   (simplify\n-   (minus (convert (plus:c @0 @1))\n+   (minus (convert (plus:c @@0 @1))\n     (convert (plus:c @0 @2)))\n    (if (INTEGRAL_TYPE_P (type)\n \t&& TYPE_OVERFLOW_UNDEFINED (type)\n-\t&& element_precision (type) <= element_precision (TREE_TYPE (@1)))\n+\t&& element_precision (type) <= element_precision (TREE_TYPE (@1))\n+\t&& element_precision (type) <= element_precision (TREE_TYPE (@2)))\n     (with { tree utype = unsigned_type_for (type); }\n      (convert (minus (convert:utype @1) (convert:utype @2))))\n-    (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n-\t /* For integer types, if A has a smaller type\n-\t    than T the result depends on the possible\n-\t    overflow in P + A.\n-\t    E.g. T=size_t, A=(unsigned)429497295, P>0.\n-\t    However, if an overflow in P + A would cause\n-\t    undefined behavior, we can assume that there\n-\t    is no overflow.  */\n-\t || (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+    (if (((element_precision (type) <= element_precision (TREE_TYPE (@1)))\n+\t  == (element_precision (type) <= element_precision (TREE_TYPE (@2))))\n+\t && (element_precision (type) <= element_precision (TREE_TYPE (@1))\n+\t     /* For integer types, if A has a smaller type\n+\t\tthan T the result depends on the possible\n+\t\toverflow in P + A.\n+\t\tE.g. T=size_t, A=(unsigned)429497295, P>0.\n+\t\tHowever, if an overflow in P + A would cause\n+\t\tundefined behavior, we can assume that there\n+\t\tis no overflow.  */\n+\t     || (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+\t\t && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n+\t\t && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@1))\n+\t\t && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@2)))))\n      (minus (convert @1) (convert @2)))))\n   (simplify\n    (minus (convert (pointer_plus @@0 @1))"}, {"sha": "e1196919a3c4b94aed037d50b89a6c70de4be6ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a72610d4320925787d635cb4ddb8a40967e05bc3", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81281\n+\t* gcc.dg/pr81281-3.c: New test.\n+\n 2017-12-15  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/aliasing4.adb: New testcase."}, {"sha": "e4918358482be8cc24dd423ad1804520dd488eaa", "filename": "gcc/testsuite/gcc.dg/pr81281-3.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72610d4320925787d635cb4ddb8a40967e05bc3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-3.c?ref=a72610d4320925787d635cb4ddb8a40967e05bc3", "patch": "@@ -0,0 +1,105 @@\n+/* PR sanitizer/81281 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"\\[+=-] \\?123\\[ ;]\" \"optimized\" } } */\n+\n+#ifdef __SIZEOF_INT128__\n+__int128\n+f1 (int a, long long b)\n+{\n+  __int128 f = 123 + a;\n+  __int128 g = 123 + b;\n+  return f - g;\n+}\n+#endif\n+\n+signed char\n+f2 (int a, long long b)\n+{\n+  signed char f = 123 + a;\n+  signed char g = 123 + b;\n+  return f - g;\n+}\n+\n+signed char\n+f3 (unsigned int a, unsigned long long b)\n+{\n+  signed char f = 123 + a;\n+  signed char g = 123 + b;\n+  return f - g;\n+}\n+\n+unsigned char\n+f4 (unsigned int a, unsigned long long b)\n+{\n+  unsigned char f = 123 + a;\n+  unsigned char g = 123 + b;\n+  return f - g;\n+}\n+\n+/* This isn't optimized yet.  */\n+#if 0\n+long long\n+f5 (int a)\n+{\n+  long long f = 123 + a;\n+  long long g = 123;\n+  return f - g;\n+}\n+#endif\n+\n+signed char\n+f6 (long long a)\n+{\n+  signed char f = 123 + a;\n+  signed char g = 123;\n+  return f - g;\n+}\n+\n+signed char\n+f7 (unsigned int a)\n+{\n+  signed char f = 123 + a;\n+  signed char g = 123;\n+  return f - g;\n+}\n+\n+unsigned char\n+f8 (unsigned long int a)\n+{\n+  unsigned char f = 123 + a;\n+  unsigned char g = 123;\n+  return f - g;\n+}\n+\n+long long\n+f9 (int a)\n+{\n+  long long f = 123;\n+  long long g = 123 + a;\n+  return f - g;\n+}\n+\n+signed char\n+f10 (long long a)\n+{\n+  signed char f = 123;\n+  signed char g = 123 + a;\n+  return f - g;\n+}\n+\n+signed char\n+f11 (unsigned int a)\n+{\n+  signed char f = 123;\n+  signed char g = 123 + a;\n+  return f - g;\n+}\n+\n+unsigned char\n+f12 (unsigned long int a)\n+{\n+  unsigned char f = 123;\n+  unsigned char g = 123 + a;\n+  return f - g;\n+}"}]}