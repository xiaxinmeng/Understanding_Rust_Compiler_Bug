{"sha": "5488078fdc7570059875dda453fae8da8c802aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4ODA3OGZkYzc1NzAwNTk4NzVkZGE0NTNmYWU4ZGE4YzgwMmFhNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-30T07:28:37Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-30T07:28:37Z"}, "message": "(push_reload): Move the NO_REGS abort after the error check for asms, to avoid crashing for asms.\n\n(push_reload): Move the NO_REGS abort after the\nerror check for asms, to avoid crashing for asms.\nFix inmode and outmode too, if they are VOID for an asm.\n\nFrom-SVN: r2989", "tree": {"sha": "5a371eb2ec27cda72f3c0b35bdfb8c8046f74fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a371eb2ec27cda72f3c0b35bdfb8c8046f74fee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5488078fdc7570059875dda453fae8da8c802aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5488078fdc7570059875dda453fae8da8c802aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5488078fdc7570059875dda453fae8da8c802aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5488078fdc7570059875dda453fae8da8c802aa7/comments", "author": null, "committer": null, "parents": [{"sha": "2e4cd151b808bc8d75cbcc499a8b6bd949806aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4cd151b808bc8d75cbcc499a8b6bd949806aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4cd151b808bc8d75cbcc499a8b6bd949806aa0"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "7757dd7f0454b64942bc0207925d71379ea219b9", "filename": "gcc/reload.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5488078fdc7570059875dda453fae8da8c802aa7/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5488078fdc7570059875dda453fae8da8c802aa7/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=5488078fdc7570059875dda453fae8da8c802aa7", "patch": "@@ -695,9 +695,6 @@ push_reload (in, out, inloc, outloc, class,\n     class = LIMIT_RELOAD_CLASS (GET_MODE (SUBREG_REG (out)), class);\n #endif\n \n-  if (class == NO_REGS)\n-    abort ();\n-\n   /* Verify that this class is at least possible for the mode that\n      is specified.  */\n   if (this_insn_is_asm)\n@@ -707,6 +704,15 @@ push_reload (in, out, inloc, outloc, class,\n \tmode = inmode;\n       else\n \tmode = outmode;\n+      if (mode == VOIDmode)\n+\t{\n+\t  error_for_asm (this_insn, \"cannot reload integer constant operand in `asm'\");\n+\t  mode = word_mode;\n+\t  if (in != 0)\n+\t    inmode = word_mode;\n+\t  if (out != 0)\n+\t    outmode = word_mode;\n+\t}\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \tif (HARD_REGNO_MODE_OK (i, mode)\n \t    && TEST_HARD_REG_BIT (reg_class_contents[(int) class], i))\n@@ -727,6 +733,9 @@ push_reload (in, out, inloc, outloc, class,\n \t}\n     }\n \n+  if (class == NO_REGS)\n+    abort ();\n+\n   /* We can use an existing reload if the class is right\n      and at least one of IN and OUT is a match\n      and the other is at worst neutral."}]}