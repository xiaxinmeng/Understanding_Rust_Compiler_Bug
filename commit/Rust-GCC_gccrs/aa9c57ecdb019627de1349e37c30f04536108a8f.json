{"sha": "aa9c57ecdb019627de1349e37c30f04536108a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5YzU3ZWNkYjAxOTYyN2RlMTM0OWUzN2MzMGYwNDUzNjEwOGE4Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-26T18:36:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-26T18:36:11Z"}, "message": "data.c, [...]: Fix comment typos.\n\n\t* data.c, parse.c, trans-array.c, trans-decl.c,\n\ttrans-intrinsic.c, trans-stmt.c, trans-types.c, trans.c,\n\ttrans.h: Fix comment typos.  Follow spelling conventions.\n\nFrom-SVN: r100219", "tree": {"sha": "b0c402ee13f0295c0d61f2de21b6b7805ff58045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c402ee13f0295c0d61f2de21b6b7805ff58045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa9c57ecdb019627de1349e37c30f04536108a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9c57ecdb019627de1349e37c30f04536108a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9c57ecdb019627de1349e37c30f04536108a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9c57ecdb019627de1349e37c30f04536108a8f/comments", "author": null, "committer": null, "parents": [{"sha": "0fa2e4df4739bda990b1be0f8a0455ced48bc3b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa2e4df4739bda990b1be0f8a0455ced48bc3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa2e4df4739bda990b1be0f8a0455ced48bc3b1"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "face053f14b4a856b37fb578236932b08bea398b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -1,3 +1,9 @@\n+2005-05-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* data.c, parse.c, trans-array.c, trans-decl.c,\n+\ttrans-intrinsic.c, trans-stmt.c, trans-types.c, trans.c,\n+\ttrans.h: Fix comment typos.  Follow spelling conventions.\n+\n 2005-05-22  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.texi: Document some more GNU extensions."}, {"sha": "17354d2fbe73b85e9102dac193634c8ef0cf3292", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -132,7 +132,7 @@ find_con_by_component (gfc_component *com, gfc_constructor *con)\n }\n \n \n-/* Create a character type intialization expression from RVALUE.\n+/* Create a character type initialization expression from RVALUE.\n    TS [and REF] describe [the substring of] the variable being initialized.\n    INIT is thh existing initializer, not NULL.  Initialization is performed\n    according to normal assignment rules.  */\n@@ -556,7 +556,7 @@ formalize_structure_cons (gfc_expr * expr)\n \n   c = expr->value.constructor;\n \n-  /* Constructor is already fomalized.  */\n+  /* Constructor is already formalized.  */\n   if (c->n.component == NULL)\n     return;\n "}, {"sha": "13b815ad62e986844805664ff5f9969a37113215", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -2157,7 +2157,7 @@ gfc_fixup_sibling_symbols (gfc_symbol * sym, gfc_namespace * siblings)\n             gfc_free_symbol (old_sym);\n         }\n \n-      /* Do the same for any contined procedures.  */\n+      /* Do the same for any contained procedures.  */\n       gfc_fixup_sibling_symbols (sym, ns->contained);\n     }\n }"}, {"sha": "4d95b2e89b27bac3e67b8526ddd2d877641d7d61", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -4349,7 +4349,7 @@ gfc_walk_array_constructor (gfc_ss * ss, gfc_expr * expr)\n \n \n /* Walk an expression.  Add walked expressions to the head of the SS chain.\n-   A wholy scalar expression will not be added.  */\n+   A wholly scalar expression will not be added.  */\n \n static gfc_ss *\n gfc_walk_subexpr (gfc_ss * ss, gfc_expr * expr)"}, {"sha": "4e32307ba120ff416eb94f15f9311ea0e7b4e071", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -537,7 +537,7 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n     {\n       if (GFC_TYPE_ARRAY_LBOUND (type, dim) == NULL_TREE)\n         GFC_TYPE_ARRAY_LBOUND (type, dim) = create_index_var (\"lbound\", nest);\n-      /* Don't try to use the unkown bound for assumed shape arrays.  */\n+      /* Don't try to use the unknown bound for assumed shape arrays.  */\n       if (GFC_TYPE_ARRAY_UBOUND (type, dim) == NULL_TREE\n           && (sym->as->type != AS_ASSUMED_SIZE\n               || dim < GFC_TYPE_ARRAY_RANK (type) - 1))"}, {"sha": "8a0cfe43422032851429406cc492a22f33653f47", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -158,7 +158,7 @@ gfc_conv_intrinsic_function_args (gfc_se * se, gfc_expr * expr)\n   args = NULL_TREE;\n   for (actual = expr->value.function.actual; actual; actual = actual->next)\n     {\n-      /* Skip ommitted optional arguments.  */\n+      /* Skip omitted optional arguments.  */\n       if (!actual->expr)\n \tcontinue;\n "}, {"sha": "85f2660bf7c9a9b307260ef34672416a052367dc", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -2965,7 +2965,7 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2, tree mask,\n \n \n /* Translate the WHERE construct or statement.\n-   This fuction can be called iteratively to translate the nested WHERE\n+   This function can be called iteratively to translate the nested WHERE\n    construct or statement.\n    MASK is the control mask, and PMASK is the pending control mask.\n    TEMP records the temporary address which must be freed later.  */"}, {"sha": "1338297c3e8cee505e9328239faa413fb5e7c3f2", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -1611,7 +1611,7 @@ gfc_get_function_type (gfc_symbol * sym)\n \t     The problem arises if a function is called via an implicit\n \t     prototype. In this situation the INTENT is not known.\n \t     For this reason all parameters to global functions must be\n-\t     passed by reference.  Passing by value would potentialy\n+\t     passed by reference.  Passing by value would potentially\n \t     generate bad code.  Worse there would be no way of telling that\n \t     this code was bad, except that it would give incorrect results.\n "}, {"sha": "c4ae36674dee2452ea7fa8f733a477c961e82fb9", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -314,7 +314,7 @@ gfc_build_array_ref (tree base, tree offset)\n }\n \n \n-/* Given a funcion declaration FNDECL and an argument list ARGLIST,\n+/* Given a function declaration FNDECL and an argument list ARGLIST,\n    build a CALL_EXPR.  */\n \n tree"}, {"sha": "f3bcbaa386d5e94804194d3e0deaaee305ed5d34", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9c57ecdb019627de1349e37c30f04536108a8f/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=aa9c57ecdb019627de1349e37c30f04536108a8f", "patch": "@@ -251,8 +251,8 @@ gfc_saved_var;\n /* Advance the SS chain to the next term.  */\n void gfc_advance_se_ss_chain (gfc_se *);\n \n-/* Call this to initialise a gfc_se structure before use\n-   first parameter is structure to initialise, second is\n+/* Call this to initialize a gfc_se structure before use\n+   first parameter is structure to initialize, second is\n    parent to get scalarization data from, or NULL.  */\n void gfc_init_se (gfc_se *, gfc_se *);\n "}]}