{"sha": "b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdjM2Y1ZWIyMWI5YjRiNGM2ZjZmMTZmOGIyNGZlMjI3YTU3ODJkNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-07T14:05:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-07T14:05:23Z"}, "message": "re PR libstdc++/45398 ([C++0x] Missing atomic<_Tp*>::store definition)\n\n2010-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/45398\n\t* include/std/atomic (atomic<_TP*>::store): Define.\n\n\t* include/std/atomic (atomic<_TP*>::load, exchange): Define inline.\n\nFrom-SVN: r163950", "tree": {"sha": "bea0aeed97867d9500bb93d2267d5938a8dff32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bea0aeed97867d9500bb93d2267d5938a8dff32f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4/comments", "author": null, "committer": null, "parents": [{"sha": "293cf2174de73c90a794f524ab83a64bc93d0aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293cf2174de73c90a794f524ab83a64bc93d0aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293cf2174de73c90a794f524ab83a64bc93d0aea"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "86891510adf2183e0bb036586d1a04d1fc90c477", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4", "patch": "@@ -1,3 +1,10 @@\n+2010-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/45398\n+\t* include/std/atomic (atomic<_TP*>::store): Define.\n+\n+\t* include/std/atomic (atomic<_TP*>::load, exchange): Define inline.\n+\n 2010-09-06  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/libstdc++-abi/abi.exp: Add \"libstdc++-abi/\" to"}, {"sha": "c94597db6f3a4b825150ca571f1c4c3e0249fa75", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=b7c3f5eb21b9b4b4c6f6f16f8b24fe227a5782d4", "patch": "@@ -141,13 +141,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic(_Tp* __v) : atomic_address(__v) { }\n \n       void\n-      store(_Tp*, memory_order = memory_order_seq_cst);\n+      store(_Tp* __v, memory_order __m = memory_order_seq_cst)\n+      { atomic_address::store(__v, __m); }\n \n       _Tp*\n-      load(memory_order = memory_order_seq_cst) const;\n+      load(memory_order __m = memory_order_seq_cst) const\n+      { return static_cast<_Tp*>(atomic_address::load(__m)); }\n \n       _Tp*\n-      exchange(_Tp*, memory_order = memory_order_seq_cst);\n+      exchange(_Tp* __v, memory_order __m = memory_order_seq_cst)\n+      { return static_cast<_Tp*>(atomic_address::exchange(__v, __m)); }\n \n       bool\n       compare_exchange_weak(_Tp*&, _Tp*, memory_order, memory_order);\n@@ -487,17 +490,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       using __base_type::operator=;\n     };\n \n-\n-  template<typename _Tp>\n-    _Tp*\n-    atomic<_Tp*>::load(memory_order __m) const\n-    { return static_cast<_Tp*>(atomic_address::load(__m)); }\n-\n-  template<typename _Tp>\n-    _Tp*\n-    atomic<_Tp*>::exchange(_Tp* __v, memory_order __m)\n-    { return static_cast<_Tp*>(atomic_address::exchange(__v, __m)); }\n-\n   template<typename _Tp>\n     bool\n     atomic<_Tp*>::compare_exchange_weak(_Tp*& __r, _Tp* __v, memory_order __m1,"}]}