{"sha": "6e49f922a6e75f37ea93a4592cc8f757b9650efb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0OWY5MjJhNmU3NWYzN2VhOTNhNDU5MmNjOGY3NTdiOTY1MGVmYg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-10-10T13:43:01Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-10-10T13:43:01Z"}, "message": "[1/4] ARMv8.2-A FP16 testsuite selector\n\ngcc/testsuite/\n\n\t* target-supports.exp (add_options_for_arm_v8_2a_fp16_scalar): Mention\n\tAArch64 support.\n\t(add_options_for_arm_v8_2a_fp16_neon): Likewise.\n\t(check_effective_target_arm_v8_2a_fp16_scalar_ok_nocache): Support\n\tAArch64 targets.\n\t(check_effective_target_arm_v8_2a_fp16_neon_ok_nocache): Support\n\tAArch64 targets.\n\t(check_effective_target_arm_v8_2a_fp16_scalar_hw): Support AArch64\n\ttargets.\n\t(check_effective_target_arm_v8_2a_fp16_neon_hw): Likewise.\n\nFrom-SVN: r240921", "tree": {"sha": "6c031c0adb31eba41477cc2dea30b21431dc660b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c031c0adb31eba41477cc2dea30b21431dc660b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e49f922a6e75f37ea93a4592cc8f757b9650efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e49f922a6e75f37ea93a4592cc8f757b9650efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e49f922a6e75f37ea93a4592cc8f757b9650efb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e49f922a6e75f37ea93a4592cc8f757b9650efb/comments", "author": null, "committer": null, "parents": [{"sha": "46942c810112eb655f1dfd223055c60208403ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46942c810112eb655f1dfd223055c60208403ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46942c810112eb655f1dfd223055c60208403ad0"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "c56f494a55a03fafacdae5ba40f4fc990c80626f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e49f922a6e75f37ea93a4592cc8f757b9650efb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e49f922a6e75f37ea93a4592cc8f757b9650efb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e49f922a6e75f37ea93a4592cc8f757b9650efb", "patch": "@@ -1,8 +1,22 @@\n+2016-10-10  Matthew Wahab  <matthew.wahab@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* target-supports.exp (add_options_for_arm_v8_2a_fp16_scalar): Mention\n+\tAArch64 support.\n+\t(add_options_for_arm_v8_2a_fp16_neon): Likewise.\n+\t(check_effective_target_arm_v8_2a_fp16_scalar_ok_nocache): Support\n+\tAArch64 targets.\n+\t(check_effective_target_arm_v8_2a_fp16_neon_ok_nocache): Support\n+\tAArch64 targets.\n+\t(check_effective_target_arm_v8_2a_fp16_scalar_hw): Support AArch64\n+\ttargets.\n+\t(check_effective_target_arm_v8_2a_fp16_neon_hw): Likewise.\n+\n 2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/vfa.ads: New test.\n \n-2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n+2016-10-10  Eric Botgazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/inline13.ad[sb]: New test.\n \t* gnat.dg/inline13_pkg.ad[sb]: New helper."}, {"sha": "7eb543dbdbf77e3499bc636e50f041176817cf67", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e49f922a6e75f37ea93a4592cc8f757b9650efb/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e49f922a6e75f37ea93a4592cc8f757b9650efb/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6e49f922a6e75f37ea93a4592cc8f757b9650efb", "patch": "@@ -3216,7 +3216,7 @@ proc add_options_for_arm_v8_1a_neon { flags } {\n }\n \n # Add the options needed for ARMv8.2 with the scalar FP16 extension.\n-# Also adds the ARMv8 FP options for ARM.\n+# Also adds the ARMv8 FP options for ARM and for AArch64.\n \n proc add_options_for_arm_v8_2a_fp16_scalar { flags } {\n     if { ! [check_effective_target_arm_v8_2a_fp16_scalar_ok] } {\n@@ -3227,7 +3227,7 @@ proc add_options_for_arm_v8_2a_fp16_scalar { flags } {\n }\n \n # Add the options needed for ARMv8.2 with the FP16 extension.  Also adds\n-# the ARMv8 NEON options for ARM.\n+# the ARMv8 NEON options for ARM and for AArch64.\n \n proc add_options_for_arm_v8_2a_fp16_neon { flags } {\n     if { ! [check_effective_target_arm_v8_2a_fp16_neon_ok] } {\n@@ -3884,14 +3884,14 @@ proc check_effective_target_arm_v8_1a_neon_ok { } {\n }\n \n # Return 1 if the target supports ARMv8.2 scalar FP16 arithmetic\n-# instructions, 0 otherwise.  The test is valid for ARM.  Record the\n-# command line options needed.\n+# instructions, 0 otherwise.  The test is valid for ARM and for AArch64.\n+# Record the command line options needed.\n \n proc check_effective_target_arm_v8_2a_fp16_scalar_ok_nocache { } {\n     global et_arm_v8_2a_fp16_scalar_flags\n     set et_arm_v8_2a_fp16_scalar_flags \"\"\n \n-    if { ![istarget arm*-*-*] } {\n+    if { ![istarget arm*-*-*] && ![istarget aarch64*-*-*] } {\n \treturn 0;\n     }\n \n@@ -3919,14 +3919,14 @@ proc check_effective_target_arm_v8_2a_fp16_scalar_ok { } {\n }\n \n # Return 1 if the target supports ARMv8.2 Adv.SIMD FP16 arithmetic\n-# instructions, 0 otherwise.  The test is valid for ARM.  Record the\n-# command line options needed.\n+# instructions, 0 otherwise.  The test is valid for ARM and for AArch64.\n+# Record the command line options needed.\n \n proc check_effective_target_arm_v8_2a_fp16_neon_ok_nocache { } {\n     global et_arm_v8_2a_fp16_neon_flags\n     set et_arm_v8_2a_fp16_neon_flags \"\"\n \n-    if { ![istarget arm*-*-*] } {\n+    if { ![istarget arm*-*-*] && ![istarget aarch64*-*-*] } {\n \treturn 0;\n     }\n \n@@ -4016,7 +4016,8 @@ proc check_effective_target_arm_v8_1a_neon_hw { } {\n }\n \n # Return 1 if the target supports executing floating point instructions from\n-# ARMv8.2 with the FP16 extension, 0 otherwise.  The test is valid for ARM.\n+# ARMv8.2 with the FP16 extension, 0 otherwise.  The test is valid for ARM and\n+# for AArch64.\n \n proc check_effective_target_arm_v8_2a_fp16_scalar_hw { } {\n     if { ![check_effective_target_arm_v8_2a_fp16_scalar_ok] } {\n@@ -4029,19 +4030,30 @@ proc check_effective_target_arm_v8_2a_fp16_scalar_hw { } {\n \t  __fp16 a = 1.0;\n \t  __fp16 result;\n \n+\t  #ifdef __ARM_ARCH_ISA_A64\n+\n+\t  asm (\"fabs %h0, %h1\"\n+\t       : \"=w\"(result)\n+\t       : \"w\"(a)\n+\t       : /* No clobbers.  */);\n+\n+\t  #else\n+\n \t  asm (\"vabs.f16 %0, %1\"\n \t       : \"=w\"(result)\n \t       : \"w\"(a)\n \t       : /* No clobbers.  */);\n \n+\t  #endif\n+\n \t  return (result == 1.0) ? 0 : 1;\n \t}\n     } [add_options_for_arm_v8_2a_fp16_scalar \"\"]]\n }\n \n-# Return 1 if the target supports executing instructions Adv.SIMD\n-# instructions from ARMv8.2 with the FP16 extension, 0 otherwise.  The\n-# test is valid for ARM.\n+# Return 1 if the target supports executing Adv.SIMD instructions from ARMv8.2\n+# with the FP16 extension, 0 otherwise.  The test is valid for ARM and for\n+# AArch64.\n \n proc check_effective_target_arm_v8_2a_fp16_neon_hw { } {\n     if { ![check_effective_target_arm_v8_2a_fp16_neon_ok] } {\n@@ -4051,6 +4063,18 @@ proc check_effective_target_arm_v8_2a_fp16_neon_hw { } {\n \tint\n \tmain (void)\n \t{\n+\t  #ifdef __ARM_ARCH_ISA_A64\n+\n+\t  __Float16x4_t a = {1.0, -1.0, 1.0, -1.0};\n+\t  __Float16x4_t result;\n+\n+\t  asm (\"fabs %0.4h, %1.4h\"\n+\t       : \"=w\"(result)\n+\t       : \"w\"(a)\n+\t       : /* No clobbers.  */);\n+\n+\t  #else\n+\n \t  __simd64_float16_t a = {1.0, -1.0, 1.0, -1.0};\n \t  __simd64_float16_t result;\n \n@@ -4059,6 +4083,8 @@ proc check_effective_target_arm_v8_2a_fp16_neon_hw { } {\n \t       : \"w\"(a)\n \t       : /* No clobbers.  */);\n \n+\t  #endif\n+\n \t  return (result[0] == 1.0) ? 0 : 1;\n \t}\n     } [add_options_for_arm_v8_2a_fp16_neon \"\"]]"}]}