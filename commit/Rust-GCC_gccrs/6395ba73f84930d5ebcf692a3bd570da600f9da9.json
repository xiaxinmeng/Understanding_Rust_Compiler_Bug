{"sha": "6395ba73f84930d5ebcf692a3bd570da600f9da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5NWJhNzNmODQ5MzBkNWViY2Y2OTJhM2JkNTcwZGE2MDBmOWRhOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-01-23T21:41:59Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-01-23T21:41:59Z"}, "message": "libgcc2.c: Correct DI/TI -> SF/DF conversions\n\nFSTYPE FUNC (DWtype u) in libgcc2.c, which converts DI/TI to SF/DF, has\n\n  /* No leading bits means u == minimum.  */\n  if (count == 0)\n    return -(Wtype_MAXp1_F * (Wtype_MAXp1_F / 2));\n\nin the third case (where actually count == 0 only means the high part is\nminimum).  It should be:\n\n  /* No leading bits means u == minimum.  */\n  if (count == 0)\n    return Wtype_MAXp1_F * (FSTYPE) (hi | ((UWtype) u != 0));\n\ninstead.\n\ngcc/testsuite/\n\n2019-01-23  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR libgcc/88931\n\t* gcc.dg/torture/fp-int-convert-timode-1.c: New test.\n\t* gcc.dg/torture/fp-int-convert-timode-2.c: Likewise.\n\t* gcc.dg/torture/fp-int-convert-timode-3.c: Likewise.\n\t* gcc.dg/torture/fp-int-convert-timode-4.c: Likewise.\n\nlibgcc/\n\n2019-01-23  Joseph Myers  <joseph@codesourcery.com>\n\n\tPR libgcc/88931\n\t* libgcc2.c (FSTYPE FUNC (DWtype u)): Correct no leading bits\n\tcase.\n\nFrom-SVN: r268216", "tree": {"sha": "3e2db0c016b1c095fc8dab9c2987a3bc4ddf68ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e2db0c016b1c095fc8dab9c2987a3bc4ddf68ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6395ba73f84930d5ebcf692a3bd570da600f9da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6395ba73f84930d5ebcf692a3bd570da600f9da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6395ba73f84930d5ebcf692a3bd570da600f9da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6395ba73f84930d5ebcf692a3bd570da600f9da9/comments", "author": null, "committer": null, "parents": [{"sha": "8c5b33788da402bdc1e3a14288e2dd8c8bd709e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5b33788da402bdc1e3a14288e2dd8c8bd709e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5b33788da402bdc1e3a14288e2dd8c8bd709e9"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "64cd7e2f33270502ec4ac619ddb6960862ed1006", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6395ba73f84930d5ebcf692a3bd570da600f9da9", "patch": "@@ -1,3 +1,11 @@\n+2019-01-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR libgcc/88931\n+\t* gcc.dg/torture/fp-int-convert-timode-1.c: New test.\n+\t* gcc.dg/torture/fp-int-convert-timode-2.c: Likewise.\n+\t* gcc.dg/torture/fp-int-convert-timode-3.c: Likewise.\n+\t* gcc.dg/torture/fp-int-convert-timode-4.c: Likewise.\n+\n 2019-01-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/88998"}, {"sha": "d6454fada7202d8e38e0d6f4a0343a9481bcd135", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-1.c?ref=6395ba73f84930d5ebcf692a3bd570da600f9da9", "patch": "@@ -0,0 +1,25 @@\n+/* Test for correct rounding of conversions from __int128 to\n+   float.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-frounding-math\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+  volatile unsigned long long h = 0x8000000000000000LL;\n+  volatile unsigned long long l = 0xdLL;\n+  volatile unsigned __int128 u128 = (((unsigned __int128) h) << 64) | l;\n+  volatile __int128 s128 = u128;\n+  fesetround (FE_TONEAREST);\n+  float fs = s128;\n+  if (fs != -0x1p+127)\n+    abort ();\n+  double ds = s128;\n+  if (ds != -0x1p+127)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "dbfa481b4fbae118c96a0d835e335c620e3d8455", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-2.c?ref=6395ba73f84930d5ebcf692a3bd570da600f9da9", "patch": "@@ -0,0 +1,27 @@\n+/* Test for correct rounding of conversions from __int128 to\n+   float.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-frounding-math\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+#ifdef FE_DOWNWARD\n+  volatile unsigned long long h = 0x8000000000000000LL;\n+  volatile unsigned long long l = 0xdLL;\n+  volatile unsigned __int128 u128 = (((unsigned __int128) h) << 64) | l;\n+  volatile __int128 s128 = u128;\n+  fesetround (FE_DOWNWARD);\n+  float fs = s128;\n+  if (fs != -0x1p+127)\n+    abort ();\n+  double ds = s128;\n+  if (ds != -0x1p+127)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}, {"sha": "63a305ec3c208a65338849ca70122100d2891a68", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-3.c?ref=6395ba73f84930d5ebcf692a3bd570da600f9da9", "patch": "@@ -0,0 +1,27 @@\n+/* Test for correct rounding of conversions from __int128 to\n+   float.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-frounding-math\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+#ifdef FE_UPWARD\n+  volatile unsigned long long h = 0x8000000000000000LL;\n+  volatile unsigned long long l = 0xdLL;\n+  volatile unsigned __int128 u128 = (((unsigned __int128) h) << 64) | l;\n+  volatile __int128 s128 = u128;\n+  fesetround (FE_UPWARD);\n+  float fs = s128;\n+  if (fs != -0x1.fffffep+126)\n+    abort ();\n+  double ds = s128;\n+  if (ds != -0x1.fffffffffffffp+126)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}, {"sha": "e71610995cd34432907c4c9edf46b83873b8ca19", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6395ba73f84930d5ebcf692a3bd570da600f9da9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-4.c?ref=6395ba73f84930d5ebcf692a3bd570da600f9da9", "patch": "@@ -0,0 +1,27 @@\n+/* Test for correct rounding of conversions from __int128 to\n+   float.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-frounding-math\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+#ifdef FE_TOWARDZERO\n+  volatile unsigned long long h = 0x8000000000000000LL;\n+  volatile unsigned long long l = 0xdLL;\n+  volatile unsigned __int128 u128 = (((unsigned __int128) h) << 64) | l;\n+  volatile __int128 s128 = u128;\n+  fesetround (FE_TOWARDZERO);\n+  float fs = s128;\n+  if (fs != -0x1.fffffep+126)\n+    abort ();\n+  double ds = s128;\n+  if (ds != -0x1.fffffffffffffp+126)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}, {"sha": "8f6f9ca831114cc0f96d83b062152e549c952307", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6395ba73f84930d5ebcf692a3bd570da600f9da9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6395ba73f84930d5ebcf692a3bd570da600f9da9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6395ba73f84930d5ebcf692a3bd570da600f9da9", "patch": "@@ -1,3 +1,9 @@\n+2019-01-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR libgcc/88931\n+\t* libgcc2.c (FSTYPE FUNC (DWtype u)): Correct no leading bits\n+\tcase.\n+\n 2019-01-18  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-profiler.c (__gcov_indirect_call_profiler_v2): Rename"}, {"sha": "04d3185e8050977cf4e99c6dddc56579d2c96681", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6395ba73f84930d5ebcf692a3bd570da600f9da9/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6395ba73f84930d5ebcf692a3bd570da600f9da9/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=6395ba73f84930d5ebcf692a3bd570da600f9da9", "patch": "@@ -1684,7 +1684,7 @@ FUNC (DWtype u)\n \n   /* No leading bits means u == minimum.  */\n   if (count == 0)\n-    return -(Wtype_MAXp1_F * (Wtype_MAXp1_F / 2));\n+    return Wtype_MAXp1_F * (FSTYPE) (hi | ((UWtype) u != 0));\n \n   shift = 1 + W_TYPE_SIZE - count;\n "}]}