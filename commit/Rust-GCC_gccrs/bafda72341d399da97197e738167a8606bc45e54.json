{"sha": "bafda72341d399da97197e738167a8606bc45e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmZGE3MjM0MWQzOTlkYTk3MTk3ZTczODE2N2E4NjA2YmM0NWU1NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-06-20T17:37:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-06-20T17:37:40Z"}, "message": "i386.md (<rounding_insn><mode>2): Macroize expander from {floor,ceil,btrunc}<mode>2 using FIST_ROUNDING int iterator.\n\n\t* config/i386/i386.md (<rounding_insn><mode>2): Macroize expander\n\tfrom {floor,ceil,btrunc}<mode>2 using FIST_ROUNDING int iterator.\n\t(l<rounding_insn><MODEF:mode><SWI48:mode>2): Macroize expander\n\tfrom l{floor,ceil}<MODEF:mode><SWI48:mode>2 using FIST_ROUNDING\n\tint iterator.\n\nFrom-SVN: r188840", "tree": {"sha": "0bcf60c1ade986481733e6b5fb38f276abbae475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bcf60c1ade986481733e6b5fb38f276abbae475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bafda72341d399da97197e738167a8606bc45e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafda72341d399da97197e738167a8606bc45e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafda72341d399da97197e738167a8606bc45e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafda72341d399da97197e738167a8606bc45e54/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "975667e7fb254910851ec33e3a650bcffb51f237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975667e7fb254910851ec33e3a650bcffb51f237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975667e7fb254910851ec33e3a650bcffb51f237"}], "stats": {"total": 147, "additions": 47, "deletions": 100}, "files": [{"sha": "4e4dfe5d79d194017cf59c3b371f5eba12a46591", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafda72341d399da97197e738167a8606bc45e54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafda72341d399da97197e738167a8606bc45e54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bafda72341d399da97197e738167a8606bc45e54", "patch": "@@ -1,3 +1,11 @@\n+2012-06-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (<rounding_insn><mode>2): Macroize expander\n+\tfrom {floor,ceil,btrunc}<mode>2 using FIST_ROUNDING int iterator.\n+\t(l<rounding_insn><MODEF:mode><SWI48:mode>2): Macroize expander\n+\tfrom l{floor,ceil}<MODEF:mode><SWI48:mode>2 using FIST_ROUNDING\n+\tint iterator.\n+\n 2012-06-20  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* system.h: Poison ASM_OUTPUT_IDENT and IDENT_ASM_OP."}, {"sha": "a74fdc0678d35a19c6c3d6b388002d3c3b3b10af", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 100, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafda72341d399da97197e738167a8606bc45e54/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafda72341d399da97197e738167a8606bc45e54/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bafda72341d399da97197e738167a8606bc45e54", "patch": "@@ -15178,89 +15178,11 @@\n    && flag_unsafe_math_optimizations\n    && !optimize_insn_for_size_p ()\")\n \n-(define_expand \"floor<mode>2\"\n-  [(use (match_operand:MODEF 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"register_operand\"))]\n-  \"(TARGET_USE_FANCY_MATH_387\n-    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-\t|| TARGET_MIX_SSE_I387)\n-    && flag_unsafe_math_optimizations)\n-   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math)\"\n-{\n-  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n-    {\n-      if (TARGET_ROUND)\n-\temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (ROUND_FLOOR)));\n-      else if (optimize_insn_for_size_p ())\n-        FAIL;\n-      else if (TARGET_64BIT || (<MODE>mode != DFmode))\n-\tix86_expand_floorceil (operands[0], operands[1], true);\n-      else\n-\tix86_expand_floorceildf_32 (operands[0], operands[1], true);\n-    }\n-  else\n-    {\n-      rtx op0, op1;\n-\n-      if (optimize_insn_for_size_p ())\n-\tFAIL;\n-\n-      op0 = gen_reg_rtx (XFmode);\n-      op1 = gen_reg_rtx (XFmode);\n-      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n-      emit_insn (gen_frndintxf2_floor (op0, op1));\n-\n-      emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n-    }\n-  DONE;\n-})\n-\n-(define_expand \"ceil<mode>2\"\n-  [(use (match_operand:MODEF 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"register_operand\"))]\n-  \"(TARGET_USE_FANCY_MATH_387\n-    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-\t|| TARGET_MIX_SSE_I387)\n-    && flag_unsafe_math_optimizations)\n-   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && !flag_trapping_math)\"\n-{\n-  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n-    {\n-      if (TARGET_ROUND)\n-\temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (ROUND_CEIL)));\n-      else if (optimize_insn_for_size_p ())\n-\tFAIL;\n-      else if (TARGET_64BIT || (<MODE>mode != DFmode))\n-\tix86_expand_floorceil (operands[0], operands[1], false);\n-      else\n-\tix86_expand_floorceildf_32 (operands[0], operands[1], false);\n-    }\n-  else\n-    {\n-      rtx op0, op1;\n-\n-      if (optimize_insn_for_size_p ())\n-\tFAIL;\n-\n-      op0 = gen_reg_rtx (XFmode);\n-      op1 = gen_reg_rtx (XFmode);\n-      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n-      emit_insn (gen_frndintxf2_ceil (op0, op1));\n-\n-      emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n-    }\n-  DONE;\n-})\n-\n-(define_expand \"btrunc<mode>2\"\n-  [(use (match_operand:MODEF 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"register_operand\"))]\n+(define_expand \"<rounding_insn><mode>2\"\n+  [(parallel [(set (match_operand:MODEF 0 \"register_operand\")\n+\t\t   (unspec:MODEF [(match_operand:MODEF 1 \"register_operand\")]\n+\t\t\t\t FRNDINT_ROUNDING))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"(TARGET_USE_FANCY_MATH_387\n     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n \t|| TARGET_MIX_SSE_I387)\n@@ -15273,13 +15195,31 @@\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (ROUND_TRUNC)));\n+\t\t   (operands[0], operands[1], GEN_INT (ROUND_<ROUNDING>)));\n       else if (optimize_insn_for_size_p ())\n \tFAIL;\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))\n-\tix86_expand_trunc (operands[0], operands[1]);\n+\t{\n+\t  if (ROUND_<ROUNDING> == ROUND_FLOOR)\n+\t    ix86_expand_floorceil (operands[0], operands[1], true);\n+\t  else if (ROUND_<ROUNDING> == ROUND_CEIL)\n+\t    ix86_expand_floorceil (operands[0], operands[1], false);\n+\t  else if (ROUND_<ROUNDING> == ROUND_TRUNC)\n+\t    ix86_expand_trunc (operands[0], operands[1]);\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n       else\n-\tix86_expand_truncdf_32 (operands[0], operands[1]);\n+\t{\n+\t  if (ROUND_<ROUNDING> == ROUND_FLOOR)\n+\t    ix86_expand_floorceildf_32 (operands[0], operands[1], true);\n+\t  else if (ROUND_<ROUNDING> == ROUND_CEIL)\n+\t    ix86_expand_floorceildf_32 (operands[0], operands[1], false);\n+\t  else if (ROUND_<ROUNDING> == ROUND_TRUNC)\n+\t    ix86_expand_truncdf_32 (operands[0], operands[1]);\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n     }\n   else\n     {\n@@ -15291,7 +15231,7 @@\n       op0 = gen_reg_rtx (XFmode);\n       op1 = gen_reg_rtx (XFmode);\n       emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n-      emit_insn (gen_frndintxf2_trunc (op0, op1));\n+      emit_insn (gen_frndintxf2_<rounding> (op0, op1));\n \n       emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n     }\n@@ -15519,25 +15459,24 @@\n    && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\")\n \n-(define_expand \"lfloor<MODEF:mode><SWI48:mode>2\"\n-  [(match_operand:SWI48 0 \"nonimmediate_operand\")\n-   (match_operand:MODEF 1 \"register_operand\")]\n+(define_expand \"l<rounding_insn><MODEF:mode><SWI48:mode>2\"\n+  [(parallel [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n+\t\t   (unspec:SWI48 [(match_operand:MODEF 1 \"register_operand\")]\n+\t\t\t\t FIST_ROUNDING))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && !flag_trapping_math\"\n {\n   if (TARGET_64BIT && optimize_insn_for_size_p ())\n     FAIL;\n-  ix86_expand_lfloorceil (operands[0], operands[1], true);\n-  DONE;\n-})\n \n-(define_expand \"lceil<MODEF:mode><SWI48:mode>2\"\n-  [(match_operand:SWI48 0 \"nonimmediate_operand\")\n-   (match_operand:MODEF 1 \"register_operand\")]\n-  \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && !flag_trapping_math\"\n-{\n-  ix86_expand_lfloorceil (operands[0], operands[1], false);\n+  if (ROUND_<ROUNDING> == ROUND_FLOOR)\n+    ix86_expand_lfloorceil (operands[0], operands[1], true);\n+  else if (ROUND_<ROUNDING> == ROUND_CEIL)\n+    ix86_expand_lfloorceil (operands[0], operands[1], false);\n+  else\n+    gcc_unreachable ();\n+\n   DONE;\n })\n "}]}