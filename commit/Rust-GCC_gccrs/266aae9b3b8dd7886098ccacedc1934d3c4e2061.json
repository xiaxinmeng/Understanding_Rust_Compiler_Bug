{"sha": "266aae9b3b8dd7886098ccacedc1934d3c4e2061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY2YWFlOWIzYjhkZDc4ODYwOThjY2FjZWRjMTkzNGQzYzRlMjA2MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-07-04T17:25:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-07-04T17:25:58Z"}, "message": "bitmap.c (bitmap_union_of_diff): Don't use BITMAP_ALLOCA.\n\n\t* bitmap.c (bitmap_union_of_diff): Don't use BITMAP_ALLOCA.\n\n\t* bitmap.h (BITMAP_ALLOCA): Don't pass alloca as an argument to a\n\tfunction.\n\nFrom-SVN: r43760", "tree": {"sha": "6bb92d9f33321c19aa430a23b59d9bc643ac1e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bb92d9f33321c19aa430a23b59d9bc643ac1e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/266aae9b3b8dd7886098ccacedc1934d3c4e2061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266aae9b3b8dd7886098ccacedc1934d3c4e2061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266aae9b3b8dd7886098ccacedc1934d3c4e2061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266aae9b3b8dd7886098ccacedc1934d3c4e2061/comments", "author": null, "committer": null, "parents": [{"sha": "0671eaf68f6bbc1a977583e592552d5b68c7f576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0671eaf68f6bbc1a977583e592552d5b68c7f576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0671eaf68f6bbc1a977583e592552d5b68c7f576"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "2b66dcb05d317ae18f1c1087c5fdfcdc82f7d89c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266aae9b3b8dd7886098ccacedc1934d3c4e2061/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266aae9b3b8dd7886098ccacedc1934d3c4e2061/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=266aae9b3b8dd7886098ccacedc1934d3c4e2061", "patch": "@@ -1,3 +1,10 @@\n+2001-07-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bitmap.c (bitmap_union_of_diff): Don't use BITMAP_ALLOCA.\n+\n+\t* bitmap.h (BITMAP_ALLOCA): Don't pass alloca as an argument to a\n+\tfunction.\n+\n 2001-07-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/include: New directory."}, {"sha": "5f343a0aa0efed2e153f670b422791ca79d84fc9", "filename": "gcc/bitmap.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266aae9b3b8dd7886098ccacedc1934d3c4e2061/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266aae9b3b8dd7886098ccacedc1934d3c4e2061/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=266aae9b3b8dd7886098ccacedc1934d3c4e2061", "patch": "@@ -687,9 +687,11 @@ bitmap_union_of_diff (dst, a, b, c)\n      bitmap c;\n {\n   int changed = 0;\n-  bitmap temp = BITMAP_ALLOCA ();\n+  bitmap temp = BITMAP_XMALLOC ();\n+  \n   bitmap_operation (temp, b, c, BITMAP_AND_COMPL);\n   changed = bitmap_operation (dst, temp, a, BITMAP_IOR);\n+  BITMAP_XFREE (temp);\n   return changed;\n }\n "}, {"sha": "58e14ee08c5d600a2f21ad6e83414e1976490af8", "filename": "gcc/bitmap.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266aae9b3b8dd7886098ccacedc1934d3c4e2061/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266aae9b3b8dd7886098ccacedc1934d3c4e2061/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=266aae9b3b8dd7886098ccacedc1934d3c4e2061", "patch": "@@ -119,10 +119,17 @@ extern int bitmap_last_set_bit PARAMS((bitmap));\n #define BITMAP_OBSTACK_ALLOC(OBSTACK)\t\t\t\t\\\n   bitmap_initialize ((bitmap) obstack_alloc (OBSTACK, sizeof (bitmap_head)))\n \n-/* Allocate a bitmap with alloca.  */\n-#define BITMAP_ALLOCA()\t\t\t\t\t\t\\\n-  bitmap_initialize ((bitmap) alloca (sizeof (bitmap_head)))\n-\n+/* Allocate a bitmap with alloca.  Note alloca cannot be passed as an\n+   argument to a function, so we set a temporary variable to the value\n+   returned by alloca and pass that variable to bitmap_initialize().\n+   PTR is then set to the value returned from bitmap_initialize() to\n+   avoid having it appear more than once in case it has side effects.  */\n+#define BITMAP_ALLOCA(PTR) \\\n+do { \\\n+  bitmap temp_bitmap_ = (bitmap) alloca (sizeof (bitmap_head)); \\\n+  (PTR) = bitmap_initialize (temp_bitmap_); \\\n+} while (0)\n+  \n /* Allocate a bitmap with xmalloc.  */\n #define BITMAP_XMALLOC()                                        \\\n   bitmap_initialize ((bitmap) xmalloc (sizeof (bitmap_head)))"}]}