{"sha": "69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjllZmY5ZGE0ODliMGU4YmJmNGQxNzk1YWZjM2Q1ZTAxNGE2ZDAyNQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2013-06-18T01:13:27Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-06-18T01:13:27Z"}, "message": "rs6000.h (enum data_align): New.\n\n\t* config/rs6000/rs6000.h (enum data_align): New.\n\t(LOCAL_ALIGNMENT, DATA_ALIGNMENT): Use rs6000_data_alignment.\n\t(DATA_ABI_ALIGNMENT): Define.\n\t(CONSTANT_ALIGNMENT): Correct comment.\n\t* config/rs6000/rs6000-protos.h (rs6000_data_alignment): Declare.\n\t* config/rs6000/rs6000.c (rs6000_data_alignment): New function.\n\nFrom-SVN: r200159", "tree": {"sha": "0d9e3458992c697ff455a39c7ed4855d830499db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d9e3458992c697ff455a39c7ed4855d830499db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2058cd6cb36b0601debfd45c5bf5cf79053cdebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2058cd6cb36b0601debfd45c5bf5cf79053cdebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2058cd6cb36b0601debfd45c5bf5cf79053cdebc"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "649d9b98731d506939c8da4cae6126b22f4810b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "patch": "@@ -1,3 +1,12 @@\n+2013-06-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.h (enum data_align): New.\n+\t(LOCAL_ALIGNMENT, DATA_ALIGNMENT): Use rs6000_data_alignment.\n+\t(DATA_ABI_ALIGNMENT): Define.\n+\t(CONSTANT_ALIGNMENT): Correct comment.\n+\t* config/rs6000/rs6000-protos.h (rs6000_data_alignment): Declare.\n+\t* config/rs6000/rs6000.c (rs6000_data_alignment): New function.\n+\n 2013-06-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ggc-page.c (ggc_pch_write_object) <d>: Remove erroneous"}, {"sha": "25bad1bfb6872a4991294481ba12845ddc21aa8b", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "patch": "@@ -141,6 +141,7 @@ extern int rs6000_loop_align (rtx);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n+extern unsigned int rs6000_data_alignment (tree, unsigned int, enum data_align);\n extern unsigned int rs6000_special_round_type_align (tree, unsigned int,\n \t\t\t\t\t\t     unsigned int);\n extern unsigned int darwin_rs6000_special_round_type_align (tree, unsigned int,"}, {"sha": "f531730223e2f6427b5352ca7df6134341512610", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "patch": "@@ -5384,6 +5384,48 @@ invalid_e500_subreg (rtx op, enum machine_mode mode)\n   return false;\n }\n \n+/* Return alignment of TYPE.  Existing alignment is ALIGN.  HOW\n+   selects whether the alignment is abi mandated, optional, or\n+   both abi and optional alignment.  */\n+   \n+unsigned int\n+rs6000_data_alignment (tree type, unsigned int align, enum data_align how)\n+{\n+  if (how != align_opt)\n+    {\n+      if (TREE_CODE (type) == VECTOR_TYPE)\n+\t{\n+\t  if ((TARGET_SPE && SPE_VECTOR_MODE (TYPE_MODE (type)))\n+\t      || (TARGET_PAIRED_FLOAT && PAIRED_VECTOR_MODE (TYPE_MODE (type))))\n+\t    {\n+\t      if (align < 64)\n+\t\talign = 64;\n+\t    }\n+\t  else if (align < 128)\n+\t    align = 128;\n+\t}\n+      else if (TARGET_E500_DOUBLE\n+\t       && TREE_CODE (type) == REAL_TYPE\n+\t       && TYPE_MODE (type) == DFmode)\n+\t{\n+\t  if (align < 64)\n+\t    align = 64;\n+\t}\n+    }\n+\n+  if (how != align_abi)\n+    {\n+      if (TREE_CODE (type) == ARRAY_TYPE\n+\t  && TYPE_MODE (TREE_TYPE (type)) == QImode)\n+\t{\n+\t  if (align < BITS_PER_WORD)\n+\t    align = BITS_PER_WORD;\n+\t}\n+    }\n+\n+  return align;\n+}\n+\n /* AIX increases natural record alignment to doubleword if the first\n    field is an FP double while the FP fields remain word aligned.  */\n "}, {"sha": "633d789115734c6ca1c9035d5207138b06b06636", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69eff9da489b0e8bbf4d1795afc3d5e014a6d025/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=69eff9da489b0e8bbf4d1795afc3d5e014a6d025", "patch": "@@ -813,12 +813,6 @@ extern unsigned rs6000_pointer_size;\n /* No data type wants to be aligned rounder than this.  */\n #define BIGGEST_ALIGNMENT 128\n \n-/* A C expression to compute the alignment for a variables in the\n-   local store.  TYPE is the data type, and ALIGN is the alignment\n-   that the object would ordinarily have.  */\n-#define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n-  DATA_ALIGNMENT (TYPE, ALIGN)\n-\n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 32\n \n@@ -828,30 +822,30 @@ extern unsigned rs6000_pointer_size;\n /* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* Make strings word-aligned so strcpy from constants will be faster.\n-   Make vector constants quadword aligned.  */\n+enum data_align { align_abi, align_opt, align_both };\n+\n+/* A C expression to compute the alignment for a variables in the\n+   local store.  TYPE is the data type, and ALIGN is the alignment\n+   that the object would ordinarily have.  */\n+#define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n+  rs6000_data_alignment (TYPE, ALIGN, align_both)\n+\n+/* Make strings word-aligned so strcpy from constants will be faster.  */\n #define CONSTANT_ALIGNMENT(EXP, ALIGN)                           \\\n   (TREE_CODE (EXP) == STRING_CST\t                         \\\n    && (STRICT_ALIGNMENT || !optimize_size)                       \\\n    && (ALIGN) < BITS_PER_WORD                                    \\\n    ? BITS_PER_WORD                                               \\\n    : (ALIGN))\n \n-/* Make arrays of chars word-aligned for the same reasons.\n-   Align vectors to 128 bits.  Align SPE vectors and E500 v2 doubles to\n+/* Make arrays of chars word-aligned for the same reasons.  */\n+#define DATA_ALIGNMENT(TYPE, ALIGN) \\\n+  rs6000_data_alignment (TYPE, ALIGN, align_opt)\n+\n+/* Align vectors to 128 bits.  Align SPE vectors and E500 v2 doubles to\n    64 bits.  */\n-#define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n-  (TREE_CODE (TYPE) == VECTOR_TYPE\t\t\t\t\t\\\n-   ? (((TARGET_SPE && SPE_VECTOR_MODE (TYPE_MODE (TYPE)))\t\t\\\n-       || (TARGET_PAIRED_FLOAT && PAIRED_VECTOR_MODE (TYPE_MODE (TYPE)))) \\\n-      ? 64 : 128)\t\t\t\t\t\t\t\\\n-   : ((TARGET_E500_DOUBLE\t\t\t\t\t\t\\\n-       && TREE_CODE (TYPE) == REAL_TYPE\t\t\t\t\t\\\n-       && TYPE_MODE (TYPE) == DFmode)\t\t\t\t\t\\\n-      ? 64\t\t\t\t\t\t\t\t\\\n-      : (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\\n-\t && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\t\t\\\n-\t && (ALIGN) < BITS_PER_WORD) ? BITS_PER_WORD : (ALIGN)))\n+#define DATA_ABI_ALIGNMENT(TYPE, ALIGN) \\\n+  rs6000_data_alignment (TYPE, ALIGN, align_abi)\n \n /* Nonzero if move instructions will actually fail to work\n    when given unaligned data.  */"}]}