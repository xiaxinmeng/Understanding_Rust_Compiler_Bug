{"sha": "96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlYjlkZjYxOWFiMWJhOTA3YzlkYzYwMDJmNmJiYzMyNmU4ODRmYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-07-04T18:13:11Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-07-04T18:13:11Z"}, "message": "re PR libstdc++/86272 (__gnu_debug::string uses undefined __glibcxx_check_insert_range2)\n\n2018-07-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/86272\n\t* include/debug/string\n\t(__gnu_debug::basic_string<>::insert<_Ite>(const_iterator, _Ite, _Ite)):\n\tUse __glibcxx_check_insert_range.\n\t* 21_strings/basic_string/cons/char/1.cc: Adapt test to use\n\t__gnu_debug::string when _GLIBCXX_DEBUG.\n\t* 21_strings/basic_string/init-list.cc: Likewise.\n\t* 21_strings/basic_string/modifiers/insert/char/1.cc: Likewise.\n\t* 21_strings/basic_string/modifiers/insert/char/2.cc: Likewise.\n\t* 21_strings/basic_string/modifiers/insert/char/83328.cc: Likewise.\n\t* 21_strings/basic_string/types/1.cc: Likewise.\n\nFrom-SVN: r262417", "tree": {"sha": "7545255f80b50f3a2975c18b7d3f3c41b2b2d040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7545255f80b50f3a2975c18b7d3f3c41b2b2d040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/comments", "author": null, "committer": null, "parents": [{"sha": "fa9371cae02b7ddee8f67e6ce8f1cddc3d8fc0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9371cae02b7ddee8f67e6ce8f1cddc3d8fc0e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9371cae02b7ddee8f67e6ce8f1cddc3d8fc0e2"}], "stats": {"total": 119, "additions": 85, "deletions": 34}, "files": [{"sha": "94db3f2ee170ccda9d851b2afba3954d13e5ded2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -1,3 +1,16 @@\n+2018-07-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/string\n+\t(__gnu_debug::basic_string<>::insert<_Ite>(const_iterator, _Ite, _Ite)):\n+\tUse __glibcxx_check_insert_range.\n+\t* 21_strings/basic_string/cons/char/1.cc: Adapt test to use\n+\t__gnu_debug::string when _GLIBCXX_DEBUG.\n+\t* 21_strings/basic_string/init-list.cc: Likewise.\n+\t* 21_strings/basic_string/modifiers/insert/char/1.cc: Likewise.\n+\t* 21_strings/basic_string/modifiers/insert/char/2.cc: Likewise.\n+\t* 21_strings/basic_string/modifiers/insert/char/83328.cc: Likewise.\n+\t* 21_strings/basic_string/types/1.cc: Likewise.\n+\n 2018-07-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/25_algorithms/make_heap/complexity.cc: Require effective"}, {"sha": "ec4340c26e2979d73dce41f9ac44bf832e06b163", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -124,7 +124,7 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n     : _Base(__str, __pos, __n, __a) { }\n \n     basic_string(const _CharT* __s, size_type __n,\n-\t\t   const _Allocator& __a = _Allocator())\n+\t\t const _Allocator& __a = _Allocator())\n     : _Base(__gnu_debug::__check_string(__s, __n), __n, __a) { }\n \n     basic_string(const _CharT* __s, const _Allocator& __a = _Allocator())\n@@ -566,7 +566,7 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n       insert(const_iterator __p, _InputIterator __first, _InputIterator __last)\n       {\n \ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n-\t__glibcxx_check_insert_range2(__p, __first, __last, __dist);\n+\t__glibcxx_check_insert_range(__p, __first, __last, __dist);\n \n \ttypename _Base::iterator __res;\n \tif (__dist.second >= __dp_sign)"}, {"sha": "7ebbf60277edd7828036aa1e1781246f73def29b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/1.cc", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -20,25 +20,32 @@\n // 21.3.1 basic_string constructors.\n \n #include <new>\n-#include <string>\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_DEBUG\n+# include <debug/string>\n+using namespace __gnu_debug;\n+#else\n+# include <string>\n+using namespace std;\n+#endif\n+\n void test01(void)\n {\n-  typedef std::string::size_type csize_type;\n-  typedef std::string::iterator citerator;\n-  csize_type npos = std::string::npos;\n+  typedef string::size_type csize_type;\n+  typedef string::iterator citerator;\n+  csize_type npos = string::npos;\n   csize_type csz01;\n \n   const char str_lit01[] = \"rodeo beach, marin\";\n-  const std::string str01(str_lit01);\n-  const std::string str02(\"baker beach, san francisco\");\n+  const string str01(str_lit01);\n+  const string str02(\"baker beach, san francisco\");\n \n   // basic_string(const string&, size_type pos = 0, siz_type n = npos, alloc)\n   csz01 = str01.size();\n   try {\n-    std::string str03(str01, csz01 + 1);\n+    string str03(str01, csz01 + 1);\n     VERIFY( false );\n   }\t\t \n   catch(std::out_of_range& fail) {\n@@ -49,7 +56,7 @@ void test01(void)\n   }\n \n   try {\n-    std::string str03(str01, csz01);\n+    string str03(str01, csz01);\n     VERIFY( str03.size() == 0 );\n     VERIFY( str03.size() <= str03.capacity() );\n   }\t\t \n@@ -62,7 +69,7 @@ void test01(void)\n   // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n   // should not crash, but what gets constructed is a bit arbitrary.\n   try {\n-    std::string str03(str_lit01, csz01 + 1);\n+    string str03(str_lit01, csz01 + 1);\n     VERIFY( true );\n   }\t\t \n   catch(std::length_error& fail) {\n@@ -76,7 +83,7 @@ void test01(void)\n   // should not crash, but what gets constructed is a bit arbitrary.\n   // The \"maverick's\" of all string objects.\n   try {\n-    std::string str04(str_lit01, npos); \n+    string str04(str_lit01, npos);\n     VERIFY( true );\n   }\t\t \n   catch(std::length_error& fail) {\n@@ -88,7 +95,7 @@ void test01(void)\n \n   // Build a maxsize - 1 lengthed string consisting of all A's\n   try {\n-    std::string str03(csz01 - 1, 'A');\n+    string str03(csz01 - 1, 'A');\n     VERIFY( str03.size() == csz01 - 1 );\n     VERIFY( str03.size() <= str03.capacity() );\n   }\t\t \n@@ -102,14 +109,14 @@ void test01(void)\n   }\n \n   // basic_string(const char* s, const allocator& a = allocator())\n-  std::string str04(str_lit01);\n+  string str04(str_lit01);\n   VERIFY( str01 == str04 );\n \n \n   // basic_string(size_type n, char c, const allocator& a = allocator())\n   csz01 = str01.max_size();\n   try {\n-    std::string str03(csz01 + 1, 'z');\n+    string str03(csz01 + 1, 'z');\n     VERIFY( false );\n   }\t\t \n   catch(std::length_error& fail) {\n@@ -120,7 +127,7 @@ void test01(void)\n   }\n \n   try {\n-    std::string str04(npos, 'b'); // the \"maverick's\" of all string objects.\n+    string str04(npos, 'b'); // the \"maverick's\" of all string objects.\n     VERIFY( false );\n   }\t\t \n   catch(std::length_error& fail) {\n@@ -131,7 +138,7 @@ void test01(void)\n   }\n \n   try {\n-    std::string str03(csz01 - 1, 'z');\n+    string str03(csz01 - 1, 'z');\n     VERIFY( str03.size() != 0 );\n     VERIFY( str03.size() <= str03.capacity() );\n   }\t\t \n@@ -144,10 +151,9 @@ void test01(void)\n     VERIFY( false );\n   }\n \n-\n   // template<typename _InputIter>\n   //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n-  std::string str06(str01.begin(), str01.end());\n+  string str06(str01.begin(), str01.end());\n   VERIFY( str06 == str01 );\n }\n "}, {"sha": "aa7754821b9f127a8d3f9f28c1a124d5e65dfe1d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/init-list.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -18,10 +18,15 @@\n \n // { dg-do run { target c++11 } }\n \n-#include <string>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_DEBUG\n+#include <debug/string>\n+using namespace __gnu_debug;\n+#else\n+#include <string>\n using namespace std;\n+#endif\n \n void test01(void)\n {"}, {"sha": "eb180d36b58b5e0338623b3a40ff7166b16c4269", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/char/1.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F1.cc?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -19,19 +19,26 @@\n \n // 21.3.5.4 basic_string::insert\n \n-#include <string>\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_DEBUG\n+#include <debug/string>\n+using namespace __gnu_debug;\n+#else\n+#include <string>\n+using namespace std;\n+#endif\n+\n void test01(void)\n {\n-  typedef std::string::size_type csize_type;\n-  typedef std::string::iterator citerator;\n+  typedef string::size_type csize_type;\n+  typedef string::iterator citerator;\n   csize_type csz01, csz02;\n \n-  const std::string str01(\"rodeo beach, marin\");\n-  const std::string str02(\"baker beach, san francisco\");\n-  std::string str03;\n+  const string str01(\"rodeo beach, marin\");\n+  const string str02(\"baker beach, san francisco\");\n+  string str03;\n \n   // string& insert(size_type p1, const string& str, size_type p2, size_type n)\n   // requires:\n@@ -76,7 +83,7 @@ void test01(void)\n \n   csz01 = str01.max_size();\n   try {\n-    std::string str04(csz01, 'b'); \n+    string str04(csz01, 'b');\n     str03 = str04; \n     csz02 = str02.size();\n     try {"}, {"sha": "102e169e84f73b672f4524fe86edbd6fe471e708", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/char/2.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F2.cc?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -19,16 +19,23 @@\n \n // 21.3.5.4 basic_string::insert\n \n-#include <string>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_DEBUG\n+#include <debug/string>\n+using namespace __gnu_debug;\n+#else\n+#include <string>\n+using namespace std;\n+#endif\n+\n // More\n //   string& insert(size_type __p, const char* s, size_type n);\n //   string& insert(size_type __p, const char* s);\n // but now s points inside the _Rep\n void test02(void)\n {\n-  std::string str01;\n+  string str01;\n   const char* title = \"Everything was beautiful, and nothing hurt\";\n   // Increasing size: str01 is reallocated every time.\n   str01 = title;"}, {"sha": "ef1d3a94d7ad69845e23e09b6c1eb320d6466e92", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/char/83328.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F83328.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F83328.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F83328.cc?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -20,18 +20,25 @@\n \n // PR libstdc++/83328\n \n-#include <string>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_DEBUG\n+#include <debug/string>\n+using namespace __gnu_debug;\n+#else\n+#include <string>\n+using namespace std;\n+#endif\n+\n void\n test01()\n {\n-  std::string s = \"insert\";\n+  string s = \"insert\";\n   auto iter = s.insert(s.cbegin() + 2, std::initializer_list<char>{});\n   VERIFY( iter == s.begin() + 2 );\n \n   iter = s.insert(s.cend(), { 'e', 'd' });\n-  std::string::iterator* check_type = &iter;\n+  string::iterator* check_type = &iter;\n   VERIFY( iter == s.cend() - 2 );\n   VERIFY( s == \"inserted\" );\n "}, {"sha": "1bc3d30cfb47584dc5fc8eab64e7cbbf21012a0c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/types/1.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb9df619ab1ba907c9dc6002f6bbc326e884fb/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2F1.cc?ref=96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "patch": "@@ -19,7 +19,13 @@\n \n // { dg-do compile }\n \n-#include <string>\n+#if _GLIBCXX_DEBUG\n+# include <debug/string>\n+using namespace __gnu_debug;\n+#else\n+# include <string>\n+using namespace std;\n+#endif\n \n namespace N\n {\n@@ -36,7 +42,7 @@ namespace N\n \n int main()\n { \n-  std::basic_string<N::X> s(5, N::X());\n+  basic_string<N::X> s(5, N::X());\n \n   s.erase(s.begin());\n   s.erase(s.begin(), s.end());"}]}