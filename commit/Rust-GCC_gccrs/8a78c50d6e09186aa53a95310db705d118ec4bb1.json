{"sha": "8a78c50d6e09186aa53a95310db705d118ec4bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE3OGM1MGQ2ZTA5MTg2YWE1M2E5NTMxMGRiNzA1ZDExOGVjNGJiMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T14:43:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T14:43:28Z"}, "message": "[multiple changes]\n\n2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case 'Tag): If the tagged\n\ttype is a synchronized type, retrieve tag information from the\n\tcorresponding record, which has the dispatch table link.\n\n2009-04-10  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* g-comlin.adb (Group_Analysis): Take care of switches that might be\n\tdecomposed afterwards, but are present as-is in the command line\n\tconfiguration, and thus should be kept as-is.\n\nFrom-SVN: r145913", "tree": {"sha": "91d1547a1ae1bad765c6ee2a23ba711b2c423ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d1547a1ae1bad765c6ee2a23ba711b2c423ae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a78c50d6e09186aa53a95310db705d118ec4bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a78c50d6e09186aa53a95310db705d118ec4bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a78c50d6e09186aa53a95310db705d118ec4bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a78c50d6e09186aa53a95310db705d118ec4bb1/comments", "author": null, "committer": null, "parents": [{"sha": "b66c3ff49ece1cb52dc330fd9c3eed7110457362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66c3ff49ece1cb52dc330fd9c3eed7110457362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66c3ff49ece1cb52dc330fd9c3eed7110457362"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "a0c2729405e00e825bdb16a80976ac7b792d40ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a78c50d6e09186aa53a95310db705d118ec4bb1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a78c50d6e09186aa53a95310db705d118ec4bb1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8a78c50d6e09186aa53a95310db705d118ec4bb1", "patch": "@@ -1,3 +1,15 @@\n+2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case 'Tag): If the tagged\n+\ttype is a synchronized type, retrieve tag information from the\n+\tcorresponding record, which has the dispatch table link.\n+\n+2009-04-10  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* g-comlin.adb (Group_Analysis): Take care of switches that might be\n+\tdecomposed afterwards, but are present as-is in the command line\n+\tconfiguration, and thus should be kept as-is.\n+\n 2009-04-10  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document that postconditions are tested on implicit"}, {"sha": "6c3d1d4be6e72a4d877e2a62b773a5b1bf12cac6", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a78c50d6e09186aa53a95310db705d118ec4bb1/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a78c50d6e09186aa53a95310db705d118ec4bb1/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=8a78c50d6e09186aa53a95310db705d118ec4bb1", "patch": "@@ -4341,6 +4341,13 @@ package body Exp_Attr is\n \n          Ttyp := Underlying_Type (Ttyp);\n \n+         --  Ada 2005: The type may be a synchronized tagged type, in which\n+         --  case the tag information is stored in the corresponding record.\n+\n+         if Is_Concurrent_Type (Ttyp) then\n+            Ttyp := Corresponding_Record_Type (Ttyp);\n+         end if;\n+\n          if Prefix_Is_Type then\n \n             --  For VMs we leave the type attribute unexpanded because"}, {"sha": "307f890750e22f3f64074fa55d524ae0b7097586", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a78c50d6e09186aa53a95310db705d118ec4bb1/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a78c50d6e09186aa53a95310db705d118ec4bb1/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=8a78c50d6e09186aa53a95310db705d118ec4bb1", "patch": "@@ -1509,41 +1509,61 @@ package body GNAT.Command_Line is\n       end Group_Analysis;\n \n    begin\n-      --  Are we adding a switch that can in fact be expanded through aliases ?\n-      --  If yes, we add separately each of its expansion.\n+      --  First determine if the switch corresponds to one belonging to the\n+      --  configuration. If so, run callback and exit.\n+\n+      if Cmd.Config /= null and then Cmd.Config.Switches /= null then\n+         for S in Cmd.Config.Switches'Range loop\n+            declare\n+               Config_Switch : String renames Cmd.Config.Switches (S).all;\n+            begin\n+               if Actual_Switch (Config_Switch) = Switch\n+                    and then\n+                  ((Can_Have_Parameter (Config_Switch)\n+                      and then Parameter /= \"\")\n+                   or else\n+                   (not Require_Parameter (Config_Switch)\n+                       and then Parameter = \"\"))\n+               then\n+                  Callback (Switch, Parameter);\n+                  return;\n+               end if;\n+            end;\n+         end loop;\n+      end if;\n+\n+      --  If adding a switch that can in fact be expanded through aliases,\n+      --  add separately each of its expansions.\n \n       --  This takes care of expansions like \"-T\" -> \"-gnatwrs\", where the\n       --  alias and its expansion do not have the same prefix. Given the order\n       --  in which we do things here, the expansion of the alias will itself\n-      --  be checked for a common prefix and further split into simple switches\n+      --  be checked for a common prefix and split into simple switches.\n \n       if Unalias\n         and then Cmd.Config /= null\n         and then Cmd.Config.Aliases /= null\n       then\n          for A in Cmd.Config.Aliases'Range loop\n-            if Cmd.Config.Aliases (A).all = Switch\n-              and then Parameter = \"\"\n-            then\n+            if Cmd.Config.Aliases (A).all = Switch and then Parameter = \"\" then\n                For_Each_Simple_Switch\n                  (Cmd, Cmd.Config.Expansions (A).all, \"\");\n                return;\n             end if;\n          end loop;\n       end if;\n \n-      --  Are we adding a switch grouping several switches ? If yes, add each\n-      --  of the simple switches instead.\n+      --  If adding a switch grouping several switches, add each of the simple\n+      --  switches instead.\n \n-      if Cmd.Config /= null\n-        and then Cmd.Config.Prefixes /= null\n-      then\n+      if Cmd.Config /= null and then Cmd.Config.Prefixes /= null then\n          for P in Cmd.Config.Prefixes'Range loop\n             if Switch'Length > Cmd.Config.Prefixes (P)'Length + 1\n               and then Looking_At\n                 (Switch, Switch'First, Cmd.Config.Prefixes (P).all)\n             then\n                --  Alias expansion will be done recursively\n+\n                if Cmd.Config.Switches = null then\n                   for S in Switch'First + Cmd.Config.Prefixes (P)'Length\n                             .. Switch'Last\n@@ -1560,8 +1580,9 @@ package body GNAT.Command_Line is\n                     (Switch'First + Cmd.Config.Prefixes (P)'Length\n                       .. Switch'Last))\n                then\n-                  --  Recursive calls already done on each switch of the\n-                  --  group. Let's return to not call Callback.\n+                  --  Recursive calls already done on each switch of the group:\n+                  --  Return without executing Callback.\n+\n                   return;\n                end if;\n             end if;"}]}