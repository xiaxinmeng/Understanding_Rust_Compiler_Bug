{"sha": "9d63e3ab40778a7dfd20605c8741becbb22b9014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2M2UzYWI0MDc3OGE3ZGZkMjA2MDVjODc0MWJlY2JiMjJiOTAxNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-04T11:23:37Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-06T09:23:08Z"}, "message": "[ftracer] Factor out can_duplicate_bb_p\n\nFactor out can_duplicate_bb_p out of ignore_bb_p.\n\nAlso factor out can_duplicate_insn_p and can_duplicate_bb_no_insn_iter_p to\nexpose the parts of can_duplicate_bb_p that are per-bb and per-insn.\n\nBootstrapped and reg-tested on x86_64-linux.\n\ngcc/ChangeLog:\n\n2020-10-05  Tom de Vries  <tdevries@suse.de>\n\n\t* tracer.c (can_duplicate_insn_p, can_duplicate_bb_no_insn_iter_p)\n\t(can_duplicate_bb_p): New function, factored out of ...\n\t(ignore_bb_p): ... here.", "tree": {"sha": "b90e6ffb081010ee070d2d61d641ae2f87020dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b90e6ffb081010ee070d2d61d641ae2f87020dbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d63e3ab40778a7dfd20605c8741becbb22b9014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d63e3ab40778a7dfd20605c8741becbb22b9014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d63e3ab40778a7dfd20605c8741becbb22b9014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d63e3ab40778a7dfd20605c8741becbb22b9014/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9065c4adab0b1280f5707d53833d195d0d350fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9065c4adab0b1280f5707d53833d195d0d350fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9065c4adab0b1280f5707d53833d195d0d350fd2"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "107b4465740ca7da8ee934a7964daeb047fee80e", "filename": "gcc/tracer.c", "status": "modified", "additions": 49, "deletions": 23, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d63e3ab40778a7dfd20605c8741becbb22b9014/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d63e3ab40778a7dfd20605c8741becbb22b9014/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=9d63e3ab40778a7dfd20605c8741becbb22b9014", "patch": "@@ -84,49 +84,75 @@ bb_seen_p (basic_block bb)\n   return bitmap_bit_p (bb_seen, bb->index);\n }\n \n-/* Return true if we should ignore the basic block for purposes of tracing.  */\n-bool\n-ignore_bb_p (const_basic_block bb)\n+/* Return true if gimple stmt G can be duplicated.  */\n+static bool\n+can_duplicate_insn_p (gimple *g)\n+{\n+  /* An IFN_GOMP_SIMT_ENTER_ALLOC/IFN_GOMP_SIMT_EXIT call must be\n+     duplicated as part of its group, or not at all.\n+     The IFN_GOMP_SIMT_VOTE_ANY and IFN_GOMP_SIMT_XCHG_* are part of such a\n+     group, so the same holds there.  */\n+  if (is_gimple_call (g)\n+      && (gimple_call_internal_p (g, IFN_GOMP_SIMT_ENTER_ALLOC)\n+\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_EXIT)\n+\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_VOTE_ANY)\n+\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_BFLY)\n+\t  || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_IDX)))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Return true if BB can be duplicated.  Avoid iterating over the insns.  */\n+static bool\n+can_duplicate_bb_no_insn_iter_p (const_basic_block bb)\n {\n   if (bb->index < NUM_FIXED_BLOCKS)\n-    return true;\n-  if (optimize_bb_for_size_p (bb))\n-    return true;\n+    return false;\n \n   if (gimple *g = last_stmt (CONST_CAST_BB (bb)))\n     {\n       /* A transaction is a single entry multiple exit region.  It\n \t must be duplicated in its entirety or not at all.  */\n       if (gimple_code (g) == GIMPLE_TRANSACTION)\n-\treturn true;\n+\treturn false;\n \n       /* An IFN_UNIQUE call must be duplicated as part of its group,\n \t or not at all.  */\n       if (is_gimple_call (g)\n \t  && gimple_call_internal_p (g)\n \t  && gimple_call_internal_unique_p (g))\n-\treturn true;\n+\treturn false;\n     }\n \n+  return true;\n+}\n+\n+/* Return true if BB can be duplicated.  */\n+static bool\n+can_duplicate_bb_p (const_basic_block bb)\n+{\n+  if (!can_duplicate_bb_no_insn_iter_p (bb))\n+    return false;\n+\n   for (gimple_stmt_iterator gsi = gsi_start_bb (CONST_CAST_BB (bb));\n        !gsi_end_p (gsi); gsi_next (&gsi))\n-    {\n-      gimple *g = gsi_stmt (gsi);\n+    if (!can_duplicate_insn_p (gsi_stmt (gsi)))\n+      return false;\n \n-      /* An IFN_GOMP_SIMT_ENTER_ALLOC/IFN_GOMP_SIMT_EXIT call must be\n-\t duplicated as part of its group, or not at all.\n-\t The IFN_GOMP_SIMT_VOTE_ANY and IFN_GOMP_SIMT_XCHG_* are part of such a\n-\t group, so the same holds there.  */\n-      if (is_gimple_call (g)\n-\t  && (gimple_call_internal_p (g, IFN_GOMP_SIMT_ENTER_ALLOC)\n-\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_EXIT)\n-\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_VOTE_ANY)\n-\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_BFLY)\n-\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_IDX)))\n-\treturn true;\n-    }\n+  return true;\n+}\n+\n+/* Return true if we should ignore the basic block for purposes of tracing.  */\n+bool\n+ignore_bb_p (const_basic_block bb)\n+{\n+  if (bb->index < NUM_FIXED_BLOCKS)\n+    return true;\n+  if (optimize_bb_for_size_p (bb))\n+    return true;\n \n-  return false;\n+  return !can_duplicate_bb_p (bb);\n }\n \n /* Return number of instructions in the block.  */"}]}