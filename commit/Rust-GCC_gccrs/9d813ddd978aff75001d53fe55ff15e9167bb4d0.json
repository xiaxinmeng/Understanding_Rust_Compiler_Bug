{"sha": "9d813ddd978aff75001d53fe55ff15e9167bb4d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4MTNkZGQ5NzhhZmY3NTAwMWQ1M2ZlNTVmZjE1ZTkxNjdiYjRkMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-15T20:40:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-16T21:59:47Z"}, "message": "libstdc++: Add noexcept to std::to_string overloads that don't allocate\n\nWhen the values is guaranteed to fit in the SSO buffer we know the\nstring won't allocate, so the function can be noexcept. For 32-bit\nintegers, we know they need no more than 9 bytes (or 10 with a minus\nsign) and the SSO buffer is 15 bytes.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n\t(to_string): Add noexcept if the type width is 32 bits or less.", "tree": {"sha": "94e6128801543a537a63b461b0a4056336a9ede7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e6128801543a537a63b461b0a4056336a9ede7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d813ddd978aff75001d53fe55ff15e9167bb4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d813ddd978aff75001d53fe55ff15e9167bb4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d813ddd978aff75001d53fe55ff15e9167bb4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d813ddd978aff75001d53fe55ff15e9167bb4d0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869107c9c9752c9a53cdb06179c1e6be6d2e5f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869107c9c9752c9a53cdb06179c1e6be6d2e5f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869107c9c9752c9a53cdb06179c1e6be6d2e5f44"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "24c454d863ab1b05c546b27cd6f1a63ecba6732a", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d813ddd978aff75001d53fe55ff15e9167bb4d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d813ddd978aff75001d53fe55ff15e9167bb4d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=9d813ddd978aff75001d53fe55ff15e9167bb4d0", "patch": "@@ -3718,6 +3718,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   inline string\n   to_string(int __val)\n+#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32\n+  noexcept // any 32-bit value fits in the SSO buffer\n+#endif\n   {\n     const bool __neg = __val < 0;\n     const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;\n@@ -3729,6 +3732,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   inline string\n   to_string(unsigned __val)\n+#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32\n+  noexcept // any 32-bit value fits in the SSO buffer\n+#endif\n   {\n     string __str(__detail::__to_chars_len(__val), '\\0');\n     __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);\n@@ -3737,6 +3743,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   inline string\n   to_string(long __val)\n+#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32\n+  noexcept // any 32-bit value fits in the SSO buffer\n+#endif\n   {\n     const bool __neg = __val < 0;\n     const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;\n@@ -3748,6 +3757,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   inline string\n   to_string(unsigned long __val)\n+#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32\n+  noexcept // any 32-bit value fits in the SSO buffer\n+#endif\n   {\n     string __str(__detail::__to_chars_len(__val), '\\0');\n     __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);"}]}