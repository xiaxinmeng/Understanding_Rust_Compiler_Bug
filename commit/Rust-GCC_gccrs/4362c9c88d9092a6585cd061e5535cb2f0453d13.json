{"sha": "4362c9c88d9092a6585cd061e5535cb2f0453d13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2MmM5Yzg4ZDkwOTJhNjU4NWNkMDYxZTU1MzVjYjJmMDQ1M2QxMw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-12T15:37:05Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:13:07Z"}, "message": "aarch64: Use RTL builtins for v[q]tbx intrinsics\n\nRewrite v[q]tbx Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-12  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add tbx1 builtin\n\tgenerator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_tbx1<mode>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vqtbx1_s8): USE RTL builtin\n\tinstead of inline asm.\n\t(vqtbx1_u8): Likewise.\n\t(vqtbx1_p8): Likewise.\n\t(vqtbx1q_s8): Likewise.\n\t(vqtbx1q_u8): Likewise.\n\t(vqtbx1q_p8): Likewise.\n\t(vtbx2_s8): Likewise.\n\t(vtbx2_u8): Likewise.\n\t(vtbx2_p8): Likewise.", "tree": {"sha": "189ff14e470d24fbca113bfed733a8c4f5900952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/189ff14e470d24fbca113bfed733a8c4f5900952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4362c9c88d9092a6585cd061e5535cb2f0453d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4362c9c88d9092a6585cd061e5535cb2f0453d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4362c9c88d9092a6585cd061e5535cb2f0453d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4362c9c88d9092a6585cd061e5535cb2f0453d13/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb112289452f58fbf00a4e57c0d7de930aca6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb112289452f58fbf00a4e57c0d7de930aca6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb112289452f58fbf00a4e57c0d7de930aca6b1"}], "stats": {"total": 84, "additions": 30, "deletions": 54}, "files": [{"sha": "a7d4f2b94b584fb903836da88ee3c62d645c95e2", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4362c9c88d9092a6585cd061e5535cb2f0453d13/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4362c9c88d9092a6585cd061e5535cb2f0453d13/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=4362c9c88d9092a6585cd061e5535cb2f0453d13", "patch": "@@ -708,6 +708,10 @@\n   VAR1 (BINOP, qtbl4, 0, NONE, v8qi)\n   VAR1 (BINOP, qtbl4, 0, NONE, v16qi)\n \n+  /* Implemented by aarch64_tbx1<mode>.  */\n+  VAR2 (TERNOP, tbx1, 0, NONE, v8qi, v16qi)\n+  VAR2 (TERNOPU, tbx1, 0, NONE, v8qi, v16qi)\n+\n   /* Implemented by aarch64_tbx4<mode>.  */\n   VAR1 (TERNOP, tbx4, 0, NONE, v8qi)\n   VAR1 (TERNOP, tbx4, 0, NONE, v16qi)"}, {"sha": "299d911aff69fad4ce590dd521899064a1da68af", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4362c9c88d9092a6585cd061e5535cb2f0453d13/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4362c9c88d9092a6585cd061e5535cb2f0453d13/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=4362c9c88d9092a6585cd061e5535cb2f0453d13", "patch": "@@ -6852,6 +6852,17 @@\n   [(set_attr \"type\" \"neon_tbl1<q>\")]\n )\n \n+(define_insn \"aarch64_tbx1<mode>\"\n+  [(set (match_operand:VB 0 \"register_operand\" \"=w\")\n+\t(unspec:VB [(match_operand:VB 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V16QI 2 \"register_operand\" \"w\")\n+\t\t    (match_operand:VB 3 \"register_operand\" \"w\")]\n+\t\t   UNSPEC_TBX))]\n+  \"TARGET_SIMD\"\n+  \"tbx\\\\t%0.<Vtype>, {%2.16b}, %3.<Vtype>\"\n+  [(set_attr \"type\" \"neon_tbl1<q>\")]\n+)\n+\n ;; Two source registers.\n \n (define_insn \"aarch64_tbl2v16qi\""}, {"sha": "ead2bd0990d4c9db1d61eb80378b0a64f8089edc", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 15, "deletions": 54, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4362c9c88d9092a6585cd061e5535cb2f0453d13/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4362c9c88d9092a6585cd061e5535cb2f0453d13/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=4362c9c88d9092a6585cd061e5535cb2f0453d13", "patch": "@@ -9625,72 +9625,46 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_s8 (int8x8_t __r, int8x16_t __tab, uint8x8_t __idx)\n {\n-  int8x8_t __result = __r;\n-  __asm__ (\"tbx %0.8b,{%1.16b},%2.8b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__tab), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbx1v8qi (__r, __tab, (int8x8_t) __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_u8 (uint8x8_t __r, uint8x16_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result = __r;\n-  __asm__ (\"tbx %0.8b,{%1.16b},%2.8b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__tab), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbx1v8qi_uuuu (__r, __tab, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_p8 (poly8x8_t __r, poly8x16_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result = __r;\n-  __asm__ (\"tbx %0.8b,{%1.16b},%2.8b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__tab), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly8x8_t) __builtin_aarch64_tbx1v8qi ((int8x8_t) __r,\n+\t\t\t\t\t\t (int8x16_t) __tab,\n+\t\t\t\t\t\t (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_s8 (int8x16_t __r, int8x16_t __tab, uint8x16_t __idx)\n {\n-  int8x16_t __result = __r;\n-  __asm__ (\"tbx %0.16b,{%1.16b},%2.16b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__tab), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbx1v16qi (__r, __tab, (int8x16_t) __idx);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_u8 (uint8x16_t __r, uint8x16_t __tab, uint8x16_t __idx)\n {\n-  uint8x16_t __result = __r;\n-  __asm__ (\"tbx %0.16b,{%1.16b},%2.16b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__tab), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbx1v16qi_uuuu (__r, __tab, __idx);\n }\n \n __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_p8 (poly8x16_t __r, poly8x16_t __tab, uint8x16_t __idx)\n {\n-  poly8x16_t __result = __r;\n-  __asm__ (\"tbx %0.16b,{%1.16b},%2.16b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__tab), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly8x16_t) __builtin_aarch64_tbx1v16qi ((int8x16_t) __r,\n+\t\t\t\t\t\t   (int8x16_t) __tab,\n+\t\t\t\t\t\t   (int8x16_t) __idx);\n }\n \n /* V7 legacy table intrinsics.  */\n@@ -9854,39 +9828,26 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx2_s8 (int8x8_t __r, int8x8x2_t __tab, int8x8_t __idx)\n {\n-  int8x8_t __result = __r;\n   int8x16_t __temp = vcombine_s8 (__tab.val[0], __tab.val[1]);\n-  __asm__ (\"tbx %0.8b, {%1.16b}, %2.8b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbx1v8qi (__r, __temp, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx2_u8 (uint8x8_t __r, uint8x8x2_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result = __r;\n   uint8x16_t __temp = vcombine_u8 (__tab.val[0], __tab.val[1]);\n-  __asm__ (\"tbx %0.8b, {%1.16b}, %2.8b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbx1v8qi_uuuu (__r, __temp, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx2_p8 (poly8x8_t __r, poly8x8x2_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result = __r;\n   poly8x16_t __temp = vcombine_p8 (__tab.val[0], __tab.val[1]);\n-  __asm__ (\"tbx %0.8b, {%1.16b}, %2.8b\"\n-           : \"+w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly8x8_t) __builtin_aarch64_tbx1v8qi ((int8x8_t) __r,\n+\t\t\t\t\t\t (int8x16_t) __temp,\n+\t\t\t\t\t\t (int8x8_t) __idx);\n }\n \n /* End of temporary inline asm.  */"}]}