{"sha": "ff050c66b18d8768b57b0c99f824e9b82e569ccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwNTBjNjZiMThkODc2OGI1N2IwYzk5ZjgyNGU5YjgyZTU2OWNjYg==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@imgtec.com", "date": "2014-09-04T08:32:05Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2014-09-04T08:32:05Z"}, "message": "Add target hook to override DWARF2 frame register size\n\ngcc/\n\n\t* target.def (TARGET_DWARF_FRAME_REG_MODE): New target hook.\n\t* targhooks.c (default_dwarf_frame_reg_mode): New function.\n\t* targhooks.h (default_dwarf_frame_reg_mode): New prototype.\n\t* doc/tm.texi.in (TARGET_DWARF_FRAME_REG_MODE): Document.\n\t* doc/tm.texi: Regenerate.\n\t* dwarf2cfi.c (expand_builtin_init_dwarf_reg_sizes): Abstract mode\n\tselection logic to default_dwarf_frame_reg_mode.\n\nFrom-SVN: r214898", "tree": {"sha": "36a08d3b50e1618d7539692d59cc1543305d5d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36a08d3b50e1618d7539692d59cc1543305d5d9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff050c66b18d8768b57b0c99f824e9b82e569ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff050c66b18d8768b57b0c99f824e9b82e569ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff050c66b18d8768b57b0c99f824e9b82e569ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff050c66b18d8768b57b0c99f824e9b82e569ccb/comments", "author": {"login": "mfortune", "id": 10220247, "node_id": "MDQ6VXNlcjEwMjIwMjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/10220247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfortune", "html_url": "https://github.com/mfortune", "followers_url": "https://api.github.com/users/mfortune/followers", "following_url": "https://api.github.com/users/mfortune/following{/other_user}", "gists_url": "https://api.github.com/users/mfortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfortune/subscriptions", "organizations_url": "https://api.github.com/users/mfortune/orgs", "repos_url": "https://api.github.com/users/mfortune/repos", "events_url": "https://api.github.com/users/mfortune/events{/privacy}", "received_events_url": "https://api.github.com/users/mfortune/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0f75fa8c317ced0fb3d916d3b7f52c88eb4a8ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f75fa8c317ced0fb3d916d3b7f52c88eb4a8ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f75fa8c317ced0fb3d916d3b7f52c88eb4a8ea"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "94cf799dec76e9628a1f576c2109758a8c2de09e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff050c66b18d8768b57b0c99f824e9b82e569ccb", "patch": "@@ -1,3 +1,13 @@\n+2014-09-03  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\t* target.def (TARGET_DWARF_FRAME_REG_MODE): New target hook.\n+\t* targhooks.c (default_dwarf_frame_reg_mode): New function.\n+\t* targhooks.h (default_dwarf_frame_reg_mode): New prototype.\n+\t* doc/tm.texi.in (TARGET_DWARF_FRAME_REG_MODE): Document.\n+\t* doc/tm.texi: Regenerate.\n+\t* dwarf2cfi.c (expand_builtin_init_dwarf_reg_sizes): Abstract mode\n+\tselection logic to default_dwarf_frame_reg_mode.\n+\n 2014-09-03  Marek Polacek  <polacek@redhat.com>\n \n \t* doc/invoke.texi: Document that -Wlogical-not-parentheses is enabled"}, {"sha": "94964771d526425e7531083ec0351c32b8848d3a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ff050c66b18d8768b57b0c99f824e9b82e569ccb", "patch": "@@ -8871,6 +8871,13 @@ register in Dwarf.  Otherwise, this hook should return @code{NULL_RTX}.\n If not defined, the default is to return @code{NULL_RTX}.\n @end deftypefn\n \n+@deftypefn {Target Hook} {enum machine_mode} TARGET_DWARF_FRAME_REG_MODE (int @var{regno})\n+Given a register, this hook should return the mode which the\n+corresponding Dwarf frame register should have.  This is normally\n+used to return a smaller mode than the raw mode to prevent call\n+clobbered parts of a register altering the frame register size\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_INIT_DWARF_REG_SIZES_EXTRA (tree @var{address})\n If some registers are represented in Dwarf-2 unwind information in\n multiple pieces, define this hook to fill in information about the"}, {"sha": "152d37d8f5575bd2ce35e1d10008a7eae985e0d2", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=ff050c66b18d8768b57b0c99f824e9b82e569ccb", "patch": "@@ -6594,6 +6594,8 @@ the target supports DWARF 2 frame unwind information.\n \n @hook TARGET_DWARF_REGISTER_SPAN\n \n+@hook TARGET_DWARF_FRAME_REG_MODE\n+\n @hook TARGET_INIT_DWARF_REG_SIZES_EXTRA\n \n @hook TARGET_ASM_TTYPE"}, {"sha": "b1659dd2777003f8420ead87e0de8b1e1cae18bd", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=ff050c66b18d8768b57b0c99f824e9b82e569ccb", "patch": "@@ -271,11 +271,9 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n       if (rnum < DWARF_FRAME_REGISTERS)\n \t{\n \t  HOST_WIDE_INT offset = rnum * GET_MODE_SIZE (mode);\n-\t  enum machine_mode save_mode = reg_raw_mode[i];\n \t  HOST_WIDE_INT size;\n+\t  enum machine_mode save_mode = targetm.dwarf_frame_reg_mode (i);\n \n-\t  if (HARD_REGNO_CALL_PART_CLOBBERED (i, save_mode))\n-\t    save_mode = choose_hard_reg_mode (i, 1, true);\n \t  if (dnum == DWARF_FRAME_RETURN_COLUMN)\n \t    {\n \t      if (save_mode == VOIDmode)"}, {"sha": "29285f2cf7f3d060df2241cd688fe4282615c199", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=ff050c66b18d8768b57b0c99f824e9b82e569ccb", "patch": "@@ -3218,6 +3218,17 @@ If not defined, the default is to return @code{NULL_RTX}.\",\n  rtx, (rtx reg),\n  hook_rtx_rtx_null)\n \n+/* Given a register return the mode of the corresponding DWARF frame\n+   register.  */\n+DEFHOOK\n+(dwarf_frame_reg_mode,\n+ \"Given a register, this hook should return the mode which the\\n\\\n+corresponding Dwarf frame register should have.  This is normally\\n\\\n+used to return a smaller mode than the raw mode to prevent call\\n\\\n+clobbered parts of a register altering the frame register size\",\n+ enum machine_mode, (int regno),\n+ default_dwarf_frame_reg_mode)\n+\n /* If expand_builtin_init_dwarf_reg_sizes needs to fill in table\n    entries not corresponding directly to registers below\n    FIRST_PSEUDO_REGISTER, this hook should generate the necessary"}, {"sha": "61d19e4236fcab8d38c88089a4f40e82b8337ce3", "filename": "gcc/targhooks.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=ff050c66b18d8768b57b0c99f824e9b82e569ccb", "patch": "@@ -1456,6 +1456,19 @@ default_debug_unwind_info (void)\n   return UI_NONE;\n }\n \n+/* Determine the correct mode for a Dwarf frame register that represents\n+   register REGNO.  */\n+\n+enum machine_mode\n+default_dwarf_frame_reg_mode (int regno)\n+{\n+  enum machine_mode save_mode = reg_raw_mode[regno];\n+\n+  if (HARD_REGNO_CALL_PART_CLOBBERED (regno, save_mode))\n+    save_mode = choose_hard_reg_mode (regno, 1, true);\n+  return save_mode;\n+}\n+\n /* To be used by targets where reg_raw_mode doesn't return the right\n    mode for registers used in apply_builtin_return and apply_builtin_arg.  */\n "}, {"sha": "0a1f6e9f6a04dfe5234c7eb1207ab8f3f0acfab0", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff050c66b18d8768b57b0c99f824e9b82e569ccb/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=ff050c66b18d8768b57b0c99f824e9b82e569ccb", "patch": "@@ -194,6 +194,7 @@ extern int default_label_align_max_skip (rtx);\n extern int default_jump_align_max_skip (rtx);\n extern section * default_function_section(tree decl, enum node_frequency freq,\n \t\t\t\t\t  bool startup, bool exit);\n+extern enum machine_mode default_dwarf_frame_reg_mode (int);\n extern enum machine_mode default_get_reg_raw_mode (int);\n extern bool default_keep_leaf_when_profiled ();\n "}]}