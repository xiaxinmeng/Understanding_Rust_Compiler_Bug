{"sha": "c9c87e6f9c795bb36e4570a07501fc182eaad035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzljODdlNmY5Yzc5NWJiMzZlNDU3MGEwNzUwMWZjMTgyZWFhZDAzNQ==", "commit": {"author": {"name": "Dmitrij Pochepko", "email": "dmitrij.pochepko@bell-sw.com", "date": "2020-07-17T09:24:46Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-17T09:24:46Z"}, "message": "vector creation from two parts of two vectors produces TBL rather than ins (PR 93720)\n\nThe following patch enables vector permutations optimization by trying\nto use ins instruction instead of slow and generic tbl.\n\nexample:\n\nvector float f0(vector float a, vector float b)\n{\n  return __builtin_shuffle (a, a, (vector int){3, 1, 2, 3});\n}\n\nwas compiled into:\n...\n\tadrp    x0, .LC0\n\tldr     q1, [x0, #:lo12:.LC0]\n\ttbl     v0.16b, {v0.16b}, v1.16b\n...\n\nand after patch:\n...\n\tins     v0.s[0], v0.s[3]\n...\n\nbootstrapped and tested on aarch64-linux-gnu with no regressions\n\ngcc/ChangeLog:\n\n2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n\n\tPR target/93720\n\t* config/aarch64/aarch64.c (aarch64_evpc_ins): New function.\n\t(aarch64_expand_vec_perm_const_1): Call it.\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_copy_lane): Make\n\tpublic, and add a \"@\" prefix.\n\ngcc/testsuite/ChangeLog:\n\n2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n\n\tPR target/93720\n\t* gcc.target/aarch64/vins-1.c: New test.\n\t* gcc.target/aarch64/vins-2.c: New test.\n\t* gcc.target/aarch64/vins-3.c: New test.\n\nCo-Authored-By: Dmitrij Pochepko <dmitrij.pochepko@bell-sw.com>", "tree": {"sha": "5c2e9e05ea38eafddf0f689d499d32e076ee1164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2e9e05ea38eafddf0f689d499d32e076ee1164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9c87e6f9c795bb36e4570a07501fc182eaad035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c87e6f9c795bb36e4570a07501fc182eaad035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c87e6f9c795bb36e4570a07501fc182eaad035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c87e6f9c795bb36e4570a07501fc182eaad035/comments", "author": {"login": "dpochepk", "id": 60473343, "node_id": "MDQ6VXNlcjYwNDczMzQz", "avatar_url": "https://avatars.githubusercontent.com/u/60473343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpochepk", "html_url": "https://github.com/dpochepk", "followers_url": "https://api.github.com/users/dpochepk/followers", "following_url": "https://api.github.com/users/dpochepk/following{/other_user}", "gists_url": "https://api.github.com/users/dpochepk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpochepk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpochepk/subscriptions", "organizations_url": "https://api.github.com/users/dpochepk/orgs", "repos_url": "https://api.github.com/users/dpochepk/repos", "events_url": "https://api.github.com/users/dpochepk/events{/privacy}", "received_events_url": "https://api.github.com/users/dpochepk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efc03fd2cb69fa0f790d32627a3e8131724e7e1"}], "stats": {"total": 148, "additions": 147, "deletions": 1}, "files": [{"sha": "11ebf5b93c42a2932747c1938bfbed206fdb9e58", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c9c87e6f9c795bb36e4570a07501fc182eaad035", "patch": "@@ -958,7 +958,7 @@\n   [(set_attr \"type\" \"neon_ins<q>, neon_from_gp<q>, neon_load1_one_lane<q>\")]\n )\n \n-(define_insn \"*aarch64_simd_vec_copy_lane<mode>\"\n+(define_insn \"@aarch64_simd_vec_copy_lane<mode>\"\n   [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n \t(vec_merge:VALL_F16\n \t    (vec_duplicate:VALL_F16"}, {"sha": "2a0fd714e292815c8ae982d6e303e88119434ca8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c9c87e6f9c795bb36e4570a07501fc182eaad035", "patch": "@@ -20623,6 +20623,81 @@ aarch64_evpc_sel (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* Recognize patterns suitable for the INS instructions.  */\n+static bool\n+aarch64_evpc_ins (struct expand_vec_perm_d *d)\n+{\n+  machine_mode mode = d->vmode;\n+  unsigned HOST_WIDE_INT nelt;\n+\n+  if (d->vec_flags != VEC_ADVSIMD)\n+    return false;\n+\n+  /* to_constant is safe since this routine is specific to Advanced SIMD\n+     vectors.  */\n+  nelt = d->perm.length ().to_constant ();\n+  rtx insv = d->op0;\n+\n+  HOST_WIDE_INT idx = -1;\n+\n+  for (unsigned HOST_WIDE_INT i = 0; i < nelt; i++)\n+    {\n+      HOST_WIDE_INT elt;\n+      if (!d->perm[i].is_constant (&elt))\n+\treturn false;\n+      if (elt == (HOST_WIDE_INT) i)\n+\tcontinue;\n+      if (idx != -1)\n+\t{\n+\t  idx = -1;\n+\t  break;\n+\t}\n+      idx = i;\n+    }\n+\n+  if (idx == -1)\n+    {\n+      insv = d->op1;\n+      for (unsigned HOST_WIDE_INT i = 0; i < nelt; i++)\n+\t{\n+\t  if (d->perm[i].to_constant () == (HOST_WIDE_INT) (i + nelt))\n+\t    continue;\n+\t  if (idx != -1)\n+\t    return false;\n+\t  idx = i;\n+\t}\n+\n+      if (idx == -1)\n+\treturn false;\n+    }\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  gcc_assert (idx != -1);\n+\n+  unsigned extractindex = d->perm[idx].to_constant ();\n+  rtx extractv = d->op0;\n+  if (extractindex >= nelt)\n+    {\n+      extractv = d->op1;\n+      extractindex -= nelt;\n+    }\n+  gcc_assert (extractindex < nelt);\n+\n+  emit_move_insn (d->target, insv);\n+  insn_code icode = code_for_aarch64_simd_vec_copy_lane (mode);\n+  expand_operand ops[5];\n+  create_output_operand (&ops[0], d->target, mode);\n+  create_input_operand (&ops[1], d->target, mode);\n+  create_integer_operand (&ops[2], 1 << idx);\n+  create_input_operand (&ops[3], extractv, mode);\n+  create_integer_operand (&ops[4], extractindex);\n+  expand_insn (icode, 5, ops);\n+\n+  return true;\n+}\n+\n static bool\n aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n {\n@@ -20657,6 +20732,8 @@ aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n \treturn true;\n       else if (aarch64_evpc_sel (d))\n \treturn true;\n+      else if (aarch64_evpc_ins (d))\n+\treturn true;\n       else if (aarch64_evpc_reencode (d))\n \treturn true;\n       if (d->vec_flags == VEC_SVE_DATA)"}, {"sha": "eefb93c262a1352f11e67508b165f183613ed76e", "filename": "gcc/testsuite/gcc.target/aarch64/vins-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-1.c?ref=c9c87e6f9c795bb36e4570a07501fc182eaad035", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(4*sizeof(float))))\n+\n+vector float f0(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, a, (vector int){3, 1, 2, 3});\n+}\n+vector float f1(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, a, (vector int){0, 0, 2, 3});\n+}\n+vector float f2(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, a, (vector int){0, 1, 0, 3});\n+}\n+vector float f3(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, a, (vector int){0, 1, 2, 0});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*ins[ \\t]+v[0-9]+\\.s} 4 } } */"}, {"sha": "1501b600c039c9388d8ab1494b0f7a90c877aaa8", "filename": "gcc/testsuite/gcc.target/aarch64/vins-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-2.c?ref=c9c87e6f9c795bb36e4570a07501fc182eaad035", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(8*sizeof(short))))\n+\n+vector short f0(vector short a, vector short b)\n+{\n+  return __builtin_shuffle (a, a, (vector short){6, 1, 2, 3, 4, 5, 6, 7});\n+}\n+vector short f2(vector short a, vector short b)\n+{\n+  return __builtin_shuffle (a, a, (vector short){0, 1, 2, 1, 4, 5, 6, 7});\n+}\n+vector short f4(vector short a, vector short b)\n+{\n+  return __builtin_shuffle (a, a, (vector short){0, 1, 2, 3, 0, 5, 6, 7});\n+}\n+vector short f6(vector short a, vector short b)\n+{\n+  return __builtin_shuffle (a, a, (vector short){0, 1, 2, 3, 4, 5, 6, 1});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*ins[ \\t]+v[0-9]+\\.h} 4 } } */"}, {"sha": "3b087019ce13bf4f92f50ac18dcd16ac9b246292", "filename": "gcc/testsuite/gcc.target/aarch64/vins-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c87e6f9c795bb36e4570a07501fc182eaad035/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvins-3.c?ref=c9c87e6f9c795bb36e4570a07501fc182eaad035", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(4*sizeof(float))))\n+\n+vector float f0(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, b, (vector int){0, 5, 6, 7});\n+}\n+vector float f1(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, b, (vector int){4, 0, 6, 7});\n+}\n+vector float f2(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, b, (vector int){4, 5, 0, 7});\n+}\n+vector float f3(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, b, (vector int){4, 5, 6, 0});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*ins[ \\t]+v[0-9]+\\.s} 4 } } */"}]}