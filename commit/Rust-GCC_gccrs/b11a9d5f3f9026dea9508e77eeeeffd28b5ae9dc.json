{"sha": "b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjExYTlkNWYzZjkwMjZkZWE5NTA4ZTc3ZWVlZWZmZDI4YjVhZTlkYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-09-25T07:42:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-09-25T07:42:43Z"}, "message": "mips.h (struct mips_args): Clarify comments.\n\n\t* config/mips/mips.h (struct mips_args): Clarify comments.\n\t* config/mips/mips.c (struct mips_arg_info): Likewise.\n\t(mips_arg_info): Don't allow fpr_p to affect the register or\n\tstack alignment.  Remove o64 silliness.\n\t(function_arg): Deal with the o32 float,float case specially.\n\nFrom-SVN: r88090", "tree": {"sha": "90430116073fbf3b6c8a83d28cfa69b716288c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90430116073fbf3b6c8a83d28cfa69b716288c73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/comments", "author": null, "committer": null, "parents": [{"sha": "03eccdc8ffdc4c9fec9df4c1e7f8e5392478d7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03eccdc8ffdc4c9fec9df4c1e7f8e5392478d7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03eccdc8ffdc4c9fec9df4c1e7f8e5392478d7f9"}], "stats": {"total": 100, "additions": 62, "deletions": 38}, "files": [{"sha": "bcfe5915df38434bf72315ea366a6d01f087f83a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "patch": "@@ -1,3 +1,11 @@\n+2004-09-25  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (struct mips_args): Clarify comments.\n+\t* config/mips/mips.c (struct mips_arg_info): Likewise.\n+\t(mips_arg_info): Don't allow fpr_p to affect the register or\n+\tstack alignment.  Remove o64 silliness.\n+\t(function_arg): Deal with the o32 float,float case specially.\n+\n 2004-09-25  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (loadx, storex): Define for V2SF."}, {"sha": "242c2f76aa013e720b96e3ef8fb5c2639562584b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "patch": "@@ -419,8 +419,12 @@ struct mips_arg_info\n   /* The number of words passed in registers, rounded up.  */\n   unsigned int reg_words;\n \n-  /* The offset of the first register from GP_ARG_FIRST or FP_ARG_FIRST,\n-     or MAX_ARGS_IN_REGISTERS if the argument is passed entirely\n+  /* For EABI, the offset of the first register from GP_ARG_FIRST or\n+     FP_ARG_FIRST.  For other ABIs, the offset of the first register from\n+     the start of the ABI's argument structure (see the CUMULATIVE_ARGS\n+     comment for details).\n+\n+     The value is MAX_ARGS_IN_REGISTERS if the argument is passed entirely\n      on the stack.  */\n   unsigned int reg_offset;\n \n@@ -3046,7 +3050,7 @@ static void\n mips_arg_info (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t       tree type, int named, struct mips_arg_info *info)\n {\n-  bool even_reg_p;\n+  bool doubleword_aligned_p;\n   unsigned int num_bytes, num_words, max_regs;\n \n   /* Work out the size of the argument.  */\n@@ -3123,27 +3127,10 @@ mips_arg_info (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       gcc_unreachable ();\n     }\n \n-  /* Now decide whether the argument must go in an even-numbered register.\n-     Usually this is determined by type alignment, but there are two\n-     exceptions:\n-\n-     - Under the O64 ABI, the second float argument goes in $f14 if it\n-       is single precision (doubles go in $f13 as expected).\n-\n-     - Floats passed in FPRs must be in an even-numbered register if\n-       we're using paired FPRs.  */\n-  if (type)\n-    even_reg_p = TYPE_ALIGN (type) > BITS_PER_WORD;\n-  else\n-    even_reg_p = GET_MODE_UNIT_SIZE (mode) > UNITS_PER_WORD;\n-\n-  if (info->fpr_p)\n-    {\n-      if (mips_abi == ABI_O64 && mode == SFmode)\n-\teven_reg_p = true;\n-      if (FP_INC > 1)\n-\teven_reg_p = true;\n-    }\n+  /* See whether the argument has doubleword alignment.  */\n+  doubleword_aligned_p = (type\n+\t\t\t  ? TYPE_ALIGN (type) > BITS_PER_WORD\n+\t\t\t  : GET_MODE_UNIT_SIZE (mode) > UNITS_PER_WORD);\n \n   /* Set REG_OFFSET to the register count we're interested in.\n      The EABI allocates the floating-point registers separately,\n@@ -3152,12 +3139,13 @@ mips_arg_info (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t      ? cum->num_fprs\n \t\t      : cum->num_gprs);\n \n-  if (even_reg_p)\n+  /* Advance to an even register if the argument is doubleword-aligned.  */\n+  if (doubleword_aligned_p)\n     info->reg_offset += info->reg_offset & 1;\n \n-  /* The alignment applied to registers is also applied to stack arguments.  */\n+  /* Work out the offset of a stack argument.  */\n   info->stack_offset = cum->stack_words;\n-  if (even_reg_p)\n+  if (doubleword_aligned_p)\n     info->stack_offset += info->stack_offset & 1;\n \n   max_regs = MAX_ARGS_IN_REGISTERS - info->reg_offset;\n@@ -3311,10 +3299,14 @@ function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       return gen_rtx_PARALLEL (mode, gen_rtvec (2, real, imag));\n     }\n \n-  if (info.fpr_p)\n-    return gen_rtx_REG (mode, FP_ARG_FIRST + info.reg_offset);\n-  else\n+  if (!info.fpr_p)\n     return gen_rtx_REG (mode, GP_ARG_FIRST + info.reg_offset);\n+  else if (info.reg_offset == 1)\n+    /* This code handles the special o32 case in which the second word\n+       of the argument structure is passed in floating-point registers.  */\n+    return gen_rtx_REG (mode, FP_ARG_FIRST + FP_INC);\n+  else\n+    return gen_rtx_REG (mode, FP_ARG_FIRST + info.reg_offset);\n }\n \n "}, {"sha": "fbfdc1f43109a19f168a5c2a4944b9b7132d5ad9", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "patch": "@@ -2180,11 +2180,11 @@ extern enum reg_class mips_char_to_class[256];\n    && !fixed_regs[N])\n \f\n /* This structure has to cope with two different argument allocation\n-   schemes.  Most MIPS ABIs view the arguments as a struct, of which the\n-   first N words go in registers and the rest go on the stack.  If I < N,\n-   the Ith word might go in Ith integer argument register or the\n-   Ith floating-point one.  For these ABIs, we only need to remember\n-   the number of words passed so far.\n+   schemes.  Most MIPS ABIs view the arguments as a structure, of which\n+   the first N words go in registers and the rest go on the stack.  If I\n+   < N, the Ith word might go in Ith integer argument register or in a\n+   floating-point register.  For these ABIs, we only need to remember\n+   the offset of the current argument into the structure.\n \n    The EABI instead allocates the integer and floating-point arguments\n    separately.  The first N words of FP arguments go in FP registers,\n@@ -2212,9 +2212,9 @@ typedef struct mips_args {\n   /* The number of arguments seen so far.  */\n   unsigned int arg_number;\n \n-  /* For EABI, the number of integer registers used so far.  For other\n-     ABIs, the number of words passed in registers (whether integer\n-     or floating-point).  */\n+  /* The number of integer registers used so far.  For all ABIs except\n+     EABI, this is the number of words that have been added to the\n+     argument structure, limited to MAX_ARGS_IN_REGISTERS.  */\n   unsigned int num_gprs;\n \n   /* For EABI, the number of floating-point registers used so far.  */"}, {"sha": "6cf8b9229d877b4a9a3841cf698d96e80d817412", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "patch": "@@ -1,3 +1,7 @@\n+2004-09-25  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/va-arg-26.c: New test.\n+\n 2004-09-24  Zack Weinberg  <zack@codesourcery.com>\n \n \t* objc.dg/proto-lossage-4.m: Use long instead of int to avoid"}, {"sha": "8221e9c42a53cc90f812077a8711c2623d71cfbb", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-26.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-26.c?ref=b11a9d5f3f9026dea9508e77eeeeffd28b5ae9dc", "patch": "@@ -0,0 +1,20 @@\n+#include <stdarg.h>\n+\n+double f (float f1, float f2, float f3, float f4,\n+\t  float f5, float f6, ...)\n+{\n+  va_list ap;\n+  double d;\n+\n+  va_start (ap, f6);\n+  d = va_arg (ap, double);\n+  va_end (ap);\n+  return d;\n+}\n+\n+int main ()\n+{\n+  if (f (1, 2, 3, 4, 5, 6, 7.0) != 7.0)\n+    abort ();\n+  exit (0);\n+}"}]}