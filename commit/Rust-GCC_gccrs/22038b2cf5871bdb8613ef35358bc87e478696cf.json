{"sha": "22038b2cf5871bdb8613ef35358bc87e478696cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwMzhiMmNmNTg3MWJkYjg2MTNlZjM1MzU4YmM4N2U0Nzg2OTZjZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-25T16:35:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-25T16:35:20Z"}, "message": "re PR c++/11617 (g++ does not report missing member functions)\n\ncp:\n\tPR c++/11617\n\t* cp-tree.h (qualified_name_lookup_error): Declare.\n\t* pt.c (tsubst_qualified_id): Use qualified_name_lookup_error for\n\terrors.\n\t(tsubst_expr) <DECL_STMT case>: Likewise.\n\t(tsubst_copy_and_build) <COMPONENT_REF case>: Likewise.\n\t* semantics.c (qualified_name_lookup_error): New, broken out of ...\n\t(finish_id_expression): ... here. Use it.\ntestsuite:\n\tPR c++/11617\n\t* g++.dg/template/lookup2.C: New test.\n\t* g++.dg/template/memclass1.C: Remove instantiated from error.\n\nFrom-SVN: r69790", "tree": {"sha": "b7b00b9ffe9b124134495d45b49383a557b163ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7b00b9ffe9b124134495d45b49383a557b163ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22038b2cf5871bdb8613ef35358bc87e478696cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22038b2cf5871bdb8613ef35358bc87e478696cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22038b2cf5871bdb8613ef35358bc87e478696cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22038b2cf5871bdb8613ef35358bc87e478696cf/comments", "author": null, "committer": null, "parents": [{"sha": "6c84c6686d1ec71c9eea05ce48366a94ab85e1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c84c6686d1ec71c9eea05ce48366a94ab85e1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c84c6686d1ec71c9eea05ce48366a94ab85e1bf"}], "stats": {"total": 97, "additions": 71, "deletions": 26}, "files": [{"sha": "0ae6496ba8a255d7e545f49eaa714833209dfdce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=22038b2cf5871bdb8613ef35358bc87e478696cf", "patch": "@@ -1,3 +1,14 @@\n+2003-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/11617\n+\t* cp-tree.h (qualified_name_lookup_error): Declare.\n+\t* pt.c (tsubst_qualified_id): Use qualified_name_lookup_error for\n+\terrors.\n+\t(tsubst_expr) <DECL_STMT case>: Likewise.\n+\t(tsubst_copy_and_build) <COMPONENT_REF case>: Likewise.\n+\t* semantics.c (qualified_name_lookup_error): New, broken out of ...\n+\t(finish_id_expression): ... here. Use it.\n+\n 2003-07-25  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n \n \t* cfns.gperf: Add '%%' delimiter to placate gperf 3.0."}, {"sha": "994298a061ceed0bd18ecc5eb4016d996e6327ac", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=22038b2cf5871bdb8613ef35358bc87e478696cf", "patch": "@@ -4159,6 +4159,7 @@ extern tree finish_template_type                (tree, tree, int);\n extern tree finish_base_specifier               (tree, tree, bool);\n extern void finish_member_declaration           (tree);\n extern void check_multiple_declarators          (void);\n+extern void qualified_name_lookup_error\t\t(tree, tree);\n extern tree finish_id_expression                (tree, tree, tree,\n \t\t\t\t\t\t cp_id_kind *, tree *,\n \t\t\t\t\t\t bool, bool, bool *, "}, {"sha": "24c07bbdb24da71b326d1c39e200a404533bd7dc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=22038b2cf5871bdb8613ef35358bc87e478696cf", "patch": "@@ -7150,8 +7150,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n     }\n \n   if (!BASELINK_P (name) && !DECL_P (expr))\n-    expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0,\n-\t\t\t\t  (complain & tf_error) != 0);\n+    expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0, false);\n   if (DECL_P (expr))\n     check_accessibility_of_qualified_id (expr, \n \t\t\t\t\t /*object_type=*/NULL_TREE,\n@@ -7168,7 +7167,9 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   if (is_template)\n     expr = lookup_template_function (expr, template_args);\n \n-  if (TYPE_P (scope))\n+  if (expr == error_mark_node && complain & tf_error)\n+    qualified_name_lookup_error (scope, TREE_OPERAND (qualified_id, 1));\n+  else if (TYPE_P (scope))\n     {\n       expr = (adjust_result_of_qualified_name_lookup \n \t      (expr, scope, current_class_type));\n@@ -7589,12 +7590,15 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  {\n \t    tree scope = DECL_INITIAL (decl);\n \t    tree name = DECL_NAME (decl);\n+\t    tree decl;\n \t    \n \t    scope = tsubst_expr (scope, args, complain, in_decl);\n-\t    do_local_using_decl (lookup_qualified_name (scope,\n-\t\t\t\t\t\t\tname, \n-\t\t\t\t\t\t\t/*is_type_p=*/0,\n-\t\t\t\t\t\t\t/*complain=*/true));\n+\t    decl = lookup_qualified_name (scope, name,\n+\t\t\t\t\t  /*is_type_p=*/0, /*complain=*/false);\n+\t    if (decl == error_mark_node)\n+\t      qualified_name_lookup_error (scope, name);\n+\t    else\n+\t      do_local_using_decl (decl);\n \t  }\n \telse\n \t  {\n@@ -8252,18 +8256,15 @@ tsubst_copy_and_build (tree t,\n \t       scope is.  */\n \t    tmpl = TREE_OPERAND (TREE_OPERAND (member, 1), 0);\n \t    args = TREE_OPERAND (TREE_OPERAND (member, 1), 1);\n-\t    member = lookup_qualified_name (TREE_OPERAND (member, 0),\n-\t\t\t\t\t    tmpl, \n-\t\t\t\t\t    /*is_type=*/0,\n-\t\t\t\t\t    /*complain=*/true);\n+\t    member = lookup_qualified_name (TREE_OPERAND (member, 0), tmpl, \n+\t\t\t\t\t    /*is_type=*/0, /*complain=*/false);\n \t    if (BASELINK_P (member))\n \t      BASELINK_FUNCTIONS (member) \n \t\t= build_nt (TEMPLATE_ID_EXPR, BASELINK_FUNCTIONS (member),\n \t\t\t    args);\n \t    else\n \t      {\n-\t\terror (\"`%D' is not a member of `%T'\",\n-\t\t       tmpl, TREE_TYPE (object));\n+\t\tqualified_name_lookup_error (TREE_TYPE (object), tmpl);\n \t\treturn error_mark_node;\n \t      }\n \t  }"}, {"sha": "50c74780daf4be34ad9d63ebc0f2bfb333443a1c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=22038b2cf5871bdb8613ef35358bc87e478696cf", "patch": "@@ -2248,6 +2248,24 @@ check_multiple_declarators (void)\n     error (\"multiple declarators in template declaration\");\n }\n \n+/* Issue a diagnostic that NAME cannot be found in SCOPE.  */\n+\n+void\n+qualified_name_lookup_error (tree scope, tree name)\n+{\n+  if (TYPE_P (scope))\n+    {\n+      if (!COMPLETE_TYPE_P (scope))\n+\terror (\"incomplete type `%T' used in nested name specifier\", scope);\n+      else\n+\terror (\"`%D' is not a member of `%T'\", name, scope);\n+    }\n+  else if (scope != global_namespace)\n+    error (\"`%D' is not a member of `%D'\", name, scope);\n+  else\n+    error (\"`::%D' has not been declared\", name);\n+}\n+\t      \n /* ID_EXPRESSION is a representation of parsed, but unprocessed,\n    id-expression.  (See cp_parser_id_expression for details.)  SCOPE,\n    if non-NULL, is the type or namespace used to explicitly qualify\n@@ -2307,17 +2325,9 @@ finish_id_expression (tree id_expression,\n \t  if (scope && (!TYPE_P (scope) || !dependent_type_p (scope)))\n \t    {\n \t      /* Qualified name lookup failed, and the qualifying name\n-\t\t was not a dependent type.  That is always an\n-\t\t error.  */\n-\t      if (TYPE_P (scope) && !COMPLETE_TYPE_P (scope))\n-\t\terror (\"incomplete type `%T' used in nested name \"\n-\t\t       \"specifier\",\n-\t\t       scope);\n-\t      else if (scope != global_namespace)\n-\t\terror (\"`%D' is not a member of `%D'\",\n-\t\t       id_expression, scope);\n-\t      else\n-\t\terror (\"`::%D' has not been declared\", id_expression);\n+      \t\t was not a dependent type.  That is always an\n+      \t\t error.  */\n+\t      qualified_name_lookup_error (scope, id_expression);\n \t      return error_mark_node;\n \t    }\n \t  else if (!scope)"}, {"sha": "534bd6be9f242d3d648b58234074bcda66e8e8ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22038b2cf5871bdb8613ef35358bc87e478696cf", "patch": "@@ -1,6 +1,10 @@\n 2003-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\tPR 11596\n+\tPR c++/11617\n+\t* g++.dg/template/lookup2.C: New test.\n+\t* g++.dg/template/memclass1.C: Remove instantiated from error.\n+\n+\tPR c++/11596\n \t* g++.dg/template/defarg3.C: New test.\n \n \t* g++.dg/ext/packed2.C: Pack member struct too. Explain why."}, {"sha": "493b807aec98a3b576bdd1065ffbc323395fd370", "filename": "gcc/testsuite/g++.dg/template/lookup2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C?ref=22038b2cf5871bdb8613ef35358bc87e478696cf", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 27 Mar 2003 <nathan@codesourcery.com>\n+\n+// PR 11617: Failed to diagnose missing function.\n+\n+struct B {};\n+\n+template <typename T> void Bar ()\n+{\n+  T::foo (); // { dg-error \"is not a member of\" \"\" }\n+}\n+\n+void Foo ()\n+{\n+  Bar<B> (); // { dg-error \"instantiated\" \"\" }\n+}"}, {"sha": "c49ed724d6f7d77a5be6f63a4b4b7ad238e1401b", "filename": "gcc/testsuite/g++.dg/template/memclass1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22038b2cf5871bdb8613ef35358bc87e478696cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass1.C?ref=22038b2cf5871bdb8613ef35358bc87e478696cf", "patch": "@@ -15,4 +15,4 @@ template <typename T> struct C\n     typedef typename A<T>::template B<U> X; // { dg-error \"declared|invalid\" }\n };\n \n-C<void> c;\t\t\t// { dg-error \"instantiated\" }\n+C<void> c;"}]}