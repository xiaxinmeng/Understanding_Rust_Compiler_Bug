{"sha": "0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA0NWUwYmMzY2VhY2RkM2U1MmQ4ZjBhOTE2MmU5MmYxYTU1NzBkYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-06-19T11:11:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-06-19T11:11:43Z"}, "message": "decl.c (expand_static_init): When building an anonymous function for use with atexit...\n\n\t* decl.c (expand_static_init): When building an anonymous function\n\tfor use with atexit, compute its body before and after entering\n\tthe function.\n\t* error.c (dump_expr): Handle BIND_EXPR, LOOP_EXPR, and\n\tEXIT_EXPR.\n\nFrom-SVN: r27612", "tree": {"sha": "3f68877ca60ca264dadc0597d76ec96371959917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f68877ca60ca264dadc0597d76ec96371959917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/comments", "author": null, "committer": null, "parents": [{"sha": "61571dfc4a69d6be22522fe8ee303946d516dd9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61571dfc4a69d6be22522fe8ee303946d516dd9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61571dfc4a69d6be22522fe8ee303946d516dd9f"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "eca957246c27fe2dd7226f450b8d1a2e16e15eff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "patch": "@@ -1,3 +1,12 @@\n+1999-06-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (expand_static_init): When building an anonymous function\n+\tfor use with atexit, compute its body before and after entering\n+\tthe function.\n+\n+\t* error.c (dump_expr): Handle BIND_EXPR, LOOP_EXPR, and\n+\tEXIT_EXPR.\n+\t\n 1999-06-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* init.c (expand_aggr_vbase_init): Add flag parameter."}, {"sha": "0a4d5396bda59eb0d92c1a8f354f8fc0ddbb0788", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "patch": "@@ -8509,6 +8509,8 @@ expand_static_init (decl, init)\n \t{\n \t  tree cleanup, fcall;\n \t  static tree Atexit = 0;\n+\t  int saved_flag_access_control;\n+\n \t  if (Atexit == 0)\n \t    {\n \t      tree atexit_fndecl, PFV, pfvlist;\n@@ -8540,13 +8542,31 @@ expand_static_init (decl, init)\n \t     so that any access checks will be done relative to the\n \t     current scope, rather than the scope of the anonymous\n \t     function.  */\n-\t  fcall = build_cleanup (decl);\n+\t  build_cleanup (decl);\n+\n+\t  /* Now start the function.  */\n \t  cleanup = start_anon_func ();\n+\n+\t  /* Now, recompute the cleanup.  It may contain SAVE_EXPRs\n+\t     that refer to the original function, rather than the\n+\t     anonymous one.  That will make the back-end think that\n+\t     nested functions are in use, which causes confusion.  */\n+\t  saved_flag_access_control = flag_access_control;\n+\t  flag_access_control = 0;\n+\t  fcall = build_cleanup (decl);\n+\t  flag_access_control = saved_flag_access_control;\n+\n+\t  /* Finish off the function.  */\n \t  expand_expr_stmt (fcall);\n \t  end_anon_func ();\n+\n+\t  /* Call atexit with the cleanup function.  */\n \t  mark_addressable (cleanup);\n \t  cleanup = build_unary_op (ADDR_EXPR, cleanup, 0);\n-\t  fcall = build_function_call (Atexit, expr_tree_cons (NULL_TREE, cleanup, NULL_TREE));\n+\t  fcall = build_function_call (Atexit, \n+\t\t\t\t       expr_tree_cons (NULL_TREE, \n+\t\t\t\t\t\t       cleanup, \n+\t\t\t\t\t\t       NULL_TREE));\n \t  expand_expr_stmt (fcall);\n \t}\n "}, {"sha": "a79420ec77882c76bdf32803a99ce78bab83007e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "patch": "@@ -1779,6 +1779,24 @@ dump_expr (t, nop)\n       dump_decl (t, 0);\n       break;\n \n+    case BIND_EXPR:\n+      OB_PUTS (\"{ \");\n+      dump_expr (TREE_OPERAND (t, 1), nop);\n+      OB_PUTS (\"} \");\n+      break;\n+      \n+    case LOOP_EXPR:\n+      OB_PUTS (\"while (1) { \");\n+      dump_expr (TREE_OPERAND (t, 0), nop);\n+      OB_PUTS (\"} \");\n+      break;\n+\n+    case EXIT_EXPR:\n+      OB_PUTS (\"if (\");\n+      dump_expr (TREE_OPERAND (t, 0), nop);\n+      OB_PUTS (\") break; \");\n+      break;\n+\n     case TREE_LIST:\n       if (TREE_VALUE (t) && TREE_CODE (TREE_VALUE (t)) == FUNCTION_DECL)\n \t{"}, {"sha": "33d2c4d93eeda2cafff10d05616a6a0363df6693", "filename": "gcc/testsuite/g++.old-deja/g++.other/cleanup3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcleanup3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcleanup3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcleanup3.C?ref=0045e0bc3ceacdd3e52d8f0a9162e92f1a5570db", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link:\n+// Special g++ Options: -fno-vtable-thunks\n+// Origin:  Marc Espie <espie@tetto.liafa.jussieu.fr>\n+\n+struct A {\n+\tvirtual ~A();\n+\tA();\n+};\n+\n+struct B: public A {\n+    B();\n+};\n+\n+void f()\n+{\n+\tstatic B t[2];\n+}"}]}