{"sha": "2e6562043c48c0ae6bc9823d438685269eb11aab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2NTYyMDQzYzQ4YzBhZTZiYzk4MjNkNDM4Njg1MjY5ZWIxMWFhYg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-12-07T11:00:00Z"}, "committer": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-12-10T12:44:39Z"}, "message": "Remove misleading debug line entries\n\nThis removes gimple_debug_begin_stmts without block info which remain\nafter a gimple block originating from an inline function is unused.\n\nThe line numbers from these stmts are from the inline function,\nbut since the inline function is completely optimized away,\nthere will be no DW_TAG_inlined_subroutine so the debugger has\nno callstack available at this point, and therefore those\nline table entries are not helpful to the user.\n\n2020-12-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\t* cfgexpand.c (expand_gimple_basic_block): Remove special handling\n\tof debug_inline_entries without block info.\n\t* tree-inline.c (remap_gimple_stmt): Drop debug_nonbind_markers when\n\tthe call statement has no block info.\n\t(copy_debug_stmt): Remove debug_nonbind_markers when inlining\n\tand the block info is mapped to NULL.\n\t* tree-ssa-live.c (clear_unused_block_pointer): Remove\n\tdebug_nonbind_markers originating from removed inline functions.", "tree": {"sha": "07d50e82b640b2152ad9a7a0b6738ec3dca58e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07d50e82b640b2152ad9a7a0b6738ec3dca58e12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e6562043c48c0ae6bc9823d438685269eb11aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6562043c48c0ae6bc9823d438685269eb11aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6562043c48c0ae6bc9823d438685269eb11aab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6562043c48c0ae6bc9823d438685269eb11aab/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1fb16e5472fded44181dd8938f2ba3cbe9844b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1fb16e5472fded44181dd8938f2ba3cbe9844b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1fb16e5472fded44181dd8938f2ba3cbe9844b6"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "2cbcbc8068258b6c8f2022140fd58e979d2d1e41", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6562043c48c0ae6bc9823d438685269eb11aab/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6562043c48c0ae6bc9823d438685269eb11aab/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2e6562043c48c0ae6bc9823d438685269eb11aab", "patch": "@@ -5956,14 +5956,7 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n \t      else if (gimple_debug_begin_stmt_p (stmt))\n \t\tval = GEN_RTX_DEBUG_MARKER_BEGIN_STMT_PAT ();\n \t      else if (gimple_debug_inline_entry_p (stmt))\n-\t\t{\n-\t\t  tree block = gimple_block (stmt);\n-\n-\t\t  if (block)\n-\t\t    val = GEN_RTX_DEBUG_MARKER_INLINE_ENTRY_PAT ();\n-\t\t  else\n-\t\t    goto delink_debug_stmt;\n-\t\t}\n+\t\tval = GEN_RTX_DEBUG_MARKER_INLINE_ENTRY_PAT ();\n \t      else\n \t\tgcc_unreachable ();\n "}, {"sha": "360b85f14dc3535efd05e427fd765870c2a11dbf", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6562043c48c0ae6bc9823d438685269eb11aab/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6562043c48c0ae6bc9823d438685269eb11aab/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2e6562043c48c0ae6bc9823d438685269eb11aab", "patch": "@@ -1819,12 +1819,11 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t  /* If the inlined function has too many debug markers,\n \t     don't copy them.  */\n \t  if (id->src_cfun->debug_marker_count\n-\t      > param_max_debug_marker_count)\n+\t      > param_max_debug_marker_count\n+\t      || id->reset_location)\n \t    return stmts;\n \n \t  gdebug *copy = as_a <gdebug *> (gimple_copy (stmt));\n-\t  if (id->reset_location)\n-\t    gimple_set_location (copy, input_location);\n \t  id->debug_stmts.safe_push (copy);\n \t  gimple_seq_add_stmt (&stmts, copy);\n \t  return stmts;\n@@ -3169,7 +3168,14 @@ copy_debug_stmt (gdebug *stmt, copy_body_data *id)\n     }\n \n   if (gimple_debug_nonbind_marker_p (stmt))\n-    return;\n+    {\n+      if (id->call_stmt && !gimple_block (stmt))\n+\t{\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t  gsi_remove (&gsi, true);\n+\t}\n+      return;\n+    }\n \n   /* Remap all the operands in COPY.  */\n   memset (&wi, 0, sizeof (wi));"}, {"sha": "4cad6faa9efb0da0571b5e236d5016e2ac7caeed", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6562043c48c0ae6bc9823d438685269eb11aab/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6562043c48c0ae6bc9823d438685269eb11aab/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=2e6562043c48c0ae6bc9823d438685269eb11aab", "patch": "@@ -623,13 +623,43 @@ clear_unused_block_pointer (void)\n       {\n \tunsigned i;\n \ttree b;\n-\tgimple *stmt = gsi_stmt (gsi);\n+\tgimple *stmt;\n \n+      next:\n+\tstmt = gsi_stmt (gsi);\n \tif (!is_gimple_debug (stmt) && !gimple_clobber_p (stmt))\n \t  continue;\n \tb = gimple_block (stmt);\n \tif (b && !TREE_USED (b))\n-\t  gimple_set_block (stmt, NULL);\n+\t  {\n+\t    /* Elide debug marker stmts that have an associated BLOCK from an\n+\t       inline instance removed with also the outermost scope BLOCK of\n+\t       said inline instance removed.  If the outermost scope BLOCK of\n+\t       said inline instance is preserved use that in place of the\n+\t       removed BLOCK.  That keeps the marker associated to the correct\n+\t       inline instance (or no inline instance in case it was not from\n+\t       an inline instance).  */\n+\t    if (gimple_debug_nonbind_marker_p (stmt)\n+\t\t&& BLOCK_ABSTRACT_ORIGIN (b))\n+\t      {\n+\t\twhile (TREE_CODE (b) == BLOCK\n+\t\t       && !inlined_function_outer_scope_p (b))\n+\t\t  b = BLOCK_SUPERCONTEXT (b);\n+\t\tif (TREE_CODE (b) == BLOCK)\n+\t\t  {\n+\t\t    if (TREE_USED (b))\n+\t\t      {\n+\t\t\tgimple_set_block (stmt, b);\n+\t\t\tcontinue;\n+\t\t      }\n+\t\t    gsi_remove (&gsi, true);\n+\t\t    if (gsi_end_p (gsi))\n+\t\t      break;\n+\t\t    goto next;\n+\t\t  }\n+\t      }\n+\t    gimple_set_block (stmt, NULL);\n+\t  }\n \tfor (i = 0; i < gimple_num_ops (stmt); i++)\n \t  walk_tree (gimple_op_ptr (stmt, i), clear_unused_block_pointer_1,\n \t\t     NULL, NULL);"}]}