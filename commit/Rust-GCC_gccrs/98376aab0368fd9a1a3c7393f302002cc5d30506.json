{"sha": "98376aab0368fd9a1a3c7393f302002cc5d30506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgzNzZhYWIwMzY4ZmQ5YTFhM2M3MzkzZjMwMjAwMmNjNWQzMDUwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-25T10:15:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-15T08:04:34Z"}, "message": "[Ada] Missing errors on aspect checking\n\n2020-06-15  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_attr.adb (Eval_Attribute): Protect against previous\n\terrors.\n\t* sem_ch13.adb (Analyze_Aspect_Default_Value): Remove redundant\n\terror checking, handling in Analyze_Aspect_Specifications.\n\t(Analyze_Aspect_Specifications): Refine error messages on\n\tDefault_[Component_]Value.\n\t(Check_Aspect_Too_Late): New procedure.\n\t(Rep_Item_Too_Late.Is_Derived_Type_With_Constraint): Remove,\n\tdead code.\n\t* aspects.ads (Is_Representation_Aspect): Default_Value is a\n\trepresentation aspect.", "tree": {"sha": "709e1e8a5d6b671ce13bc19c8a896448f3b3bc9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/709e1e8a5d6b671ce13bc19c8a896448f3b3bc9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98376aab0368fd9a1a3c7393f302002cc5d30506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98376aab0368fd9a1a3c7393f302002cc5d30506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98376aab0368fd9a1a3c7393f302002cc5d30506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98376aab0368fd9a1a3c7393f302002cc5d30506/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3830018cc6df5335be14cf98d31c15b58ab328b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3830018cc6df5335be14cf98d31c15b58ab328b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3830018cc6df5335be14cf98d31c15b58ab328b9"}], "stats": {"total": 262, "additions": 164, "deletions": 98}, "files": [{"sha": "1c7d3c49871efa4bddbc7d8e7537ca56754ce71e", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98376aab0368fd9a1a3c7393f302002cc5d30506/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98376aab0368fd9a1a3c7393f302002cc5d30506/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=98376aab0368fd9a1a3c7393f302002cc5d30506", "patch": "@@ -450,7 +450,7 @@ package Aspects is\n       Aspect_Default_Initial_Condition    => False,\n       Aspect_Default_Iterator             => False,\n       Aspect_Default_Storage_Pool         => True,\n-      Aspect_Default_Value                => False,\n+      Aspect_Default_Value                => True,\n       Aspect_Depends                      => False,\n       Aspect_Dimension                    => False,\n       Aspect_Dimension_System             => False,"}, {"sha": "10b332bea3bbc803ae053210b3e9fc7097a7c636", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98376aab0368fd9a1a3c7393f302002cc5d30506/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98376aab0368fd9a1a3c7393f302002cc5d30506/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=98376aab0368fd9a1a3c7393f302002cc5d30506", "patch": "@@ -7269,13 +7269,19 @@ package body Sem_Attr is\n \n    procedure Eval_Attribute (N : Node_Id) is\n       Loc   : constant Source_Ptr   := Sloc (N);\n-      Aname : constant Name_Id      := Attribute_Name (N);\n-      Id    : constant Attribute_Id := Get_Attribute_Id (Aname);\n-      P     : constant Node_Id      := Prefix (N);\n \n       C_Type : constant Entity_Id := Etype (N);\n       --  The type imposed by the context\n \n+      Aname : Name_Id;\n+      --  Attribute_Name (N) after verification of validity of N\n+\n+      Id : Attribute_Id;\n+      --  Get_Attribute_Id (Aname) after Aname is set\n+\n+      P : Node_Id;\n+      --  Prefix (N) after verification of validity of N\n+\n       E1 : Node_Id;\n       --  First expression, or Empty if none\n \n@@ -7632,6 +7638,17 @@ package body Sem_Attr is\n    --  Start of processing for Eval_Attribute\n \n    begin\n+      --  Return immediately if e.g. N has been rewritten or is malformed due\n+      --  to previous errors.\n+\n+      if Nkind (N) /= N_Attribute_Reference then\n+         return;\n+      end if;\n+\n+      Aname := Attribute_Name (N);\n+      Id    := Get_Attribute_Id (Aname);\n+      P     := Prefix (N);\n+\n       --  The To_Address attribute can be static, but it cannot be evaluated at\n       --  compile time, so just return.\n "}, {"sha": "3bdc39a20c12e25f2cd26bc0a3a02f156d6b4872", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 143, "deletions": 94, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98376aab0368fd9a1a3c7393f302002cc5d30506/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98376aab0368fd9a1a3c7393f302002cc5d30506/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=98376aab0368fd9a1a3c7393f302002cc5d30506", "patch": "@@ -229,6 +229,10 @@ package body Sem_Ch13 is\n    --  renaming_as_body. For tagged types, the specification is one of the\n    --  primitive specs.\n \n+   procedure No_Type_Rep_Item (N : Node_Id);\n+   --  Output message indicating that no type-related aspects can be\n+   --  specified due to some property of the parent type.\n+\n    procedure Register_Address_Clause_Check\n      (N   : Node_Id;\n       X   : Entity_Id;\n@@ -885,6 +889,14 @@ package body Sem_Ch13 is\n       --  This routine analyzes an Aspect_Default_[Component_]Value denoted by\n       --  the aspect specification node ASN.\n \n+      procedure Check_Aspect_Too_Late (N : Node_Id);\n+      --  This procedure is similar to Rep_Item_Too_Late for representation\n+      --  aspects that apply to type and that do not have a corresponding\n+      --  pragma.\n+      --  Used to check in particular that the expression associated with\n+      --  aspect node N for the given type (entity) of the aspect does not\n+      --  appear too late according to the rules in RM 13.1(9) and 13.1(10).\n+\n       procedure Inherit_Delayed_Rep_Aspects (ASN : Node_Id);\n       --  As discussed in the spec of Aspects (see Aspect_Delay declaration),\n       --  a derived type can inherit aspects from its parent which have been\n@@ -918,47 +930,110 @@ package body Sem_Ch13 is\n       ----------------------------------\n \n       procedure Analyze_Aspect_Default_Value (ASN : Node_Id) is\n-         A_Id : constant Aspect_Id := Get_Aspect_Id (ASN);\n          Ent  : constant Entity_Id := Entity (ASN);\n          Expr : constant Node_Id   := Expression (ASN);\n-         Id   : constant Node_Id   := Identifier (ASN);\n \n       begin\n-         Error_Msg_Name_1 := Chars (Id);\n+         Set_Has_Default_Aspect (Base_Type (Ent));\n \n-         if not Is_Type (Ent) then\n-            Error_Msg_N (\"aspect% can only apply to a type\", Id);\n-            return;\n+         if Is_Scalar_Type (Ent) then\n+            Set_Default_Aspect_Value (Base_Type (Ent), Expr);\n+         else\n+            Set_Default_Aspect_Component_Value (Base_Type (Ent), Expr);\n+         end if;\n \n-         elsif not Is_First_Subtype (Ent) then\n-            Error_Msg_N (\"aspect% cannot apply to subtype\", Id);\n-            return;\n+         Check_Aspect_Too_Late (ASN);\n+      end Analyze_Aspect_Default_Value;\n \n-         elsif A_Id = Aspect_Default_Value\n-           and then not Is_Scalar_Type (Ent)\n-         then\n-            Error_Msg_N (\"aspect% can only be applied to scalar type\", Id);\n-            return;\n+      ---------------------------\n+      -- Check_Aspect_Too_Late --\n+      ---------------------------\n \n-         elsif A_Id = Aspect_Default_Component_Value then\n-            if not Is_Array_Type (Ent) then\n-               Error_Msg_N (\"aspect% can only be applied to array type\", Id);\n-               return;\n+      procedure Check_Aspect_Too_Late (N : Node_Id) is\n+         Typ  : constant Entity_Id := Entity (N);\n+         Expr : constant Node_Id   := Expression (N);\n+         A_Id : constant Aspect_Id := Get_Aspect_Id (N);\n \n-            elsif not Is_Scalar_Type (Component_Type (Ent)) then\n-               Error_Msg_N (\"aspect% requires scalar components\", Id);\n-               return;\n+         function Find_Type_Reference\n+           (Typ : Entity_Id; Expr : Node_Id) return Boolean;\n+         --  Return True if a reference to type Typ is found in the expression\n+         --  Expr.\n+\n+         -------------------------\n+         -- Find_Type_Reference --\n+         -------------------------\n+\n+         function Find_Type_Reference\n+           (Typ : Entity_Id; Expr : Node_Id) return Boolean\n+         is\n+            function Find_Type (N : Node_Id) return Traverse_Result;\n+            --  Set Found to True if N refers to Typ\n+\n+            ---------------\n+            -- Find_Type --\n+            ---------------\n+\n+            function Find_Type (N : Node_Id) return Traverse_Result is\n+            begin\n+               if N = Typ\n+                 or else (Nkind_In (N, N_Identifier, N_Expanded_Name)\n+                           and then Present (Entity (N))\n+                           and then Entity (N) = Typ)\n+               then\n+                  return Abandon;\n+               else\n+                  return OK;\n+               end if;\n+            end Find_Type;\n+\n+            function Search_Type_Reference is new Traverse_Func (Find_Type);\n+\n+         begin\n+            return Search_Type_Reference (Expr) = Abandon;\n+         end Find_Type_Reference;\n+\n+         Parent_Type : Entity_Id;\n+\n+      begin\n+         if A_Id /= Aspect_Default_Value then\n+\n+            --  Ensure Expr is analyzed so that e.g. all types are properly\n+            --  resolved for Find_Type_Reference.\n+\n+            Analyze (Expr);\n+\n+            --  A self-referential aspect is illegal if it forces freezing the\n+            --  entity before the corresponding aspect has been analyzed.\n+\n+            if Find_Type_Reference (Typ, Expr) then\n+               Error_Msg_NE\n+                 (\"aspect specification causes premature freezing of&\",\n+                  N, Typ);\n             end if;\n          end if;\n \n-         Set_Has_Default_Aspect (Base_Type (Ent));\n+         --  For representation aspects, check for case of untagged derived\n+         --  type whose parent either has primitive operations, or is a by\n+         --  reference type (RM 13.1(10)).\n \n-         if Is_Scalar_Type (Ent) then\n-            Set_Default_Aspect_Value (Base_Type (Ent), Expr);\n-         else\n-            Set_Default_Aspect_Component_Value (Base_Type (Ent), Expr);\n+         if Is_Representation_Aspect (A_Id)\n+           and then Is_Derived_Type (Typ)\n+           and then not Is_Tagged_Type (Typ)\n+         then\n+            Parent_Type := Etype (Base_Type (Typ));\n+\n+            if Has_Primitive_Operations (Parent_Type) then\n+               No_Type_Rep_Item (N);\n+               Error_Msg_NE\n+                 (\"\\parent type & has primitive operations!\", N, Parent_Type);\n+\n+            elsif Is_By_Reference_Type (Parent_Type) then\n+               No_Type_Rep_Item (N);\n+               Error_Msg_NE\n+                 (\"\\parent type & is a by reference type!\", N, Parent_Type);\n+            end if;\n          end if;\n-      end Analyze_Aspect_Default_Value;\n+      end Check_Aspect_Too_Late;\n \n       ---------------------------------\n       -- Inherit_Delayed_Rep_Aspects --\n@@ -967,7 +1042,7 @@ package body Sem_Ch13 is\n       procedure Inherit_Delayed_Rep_Aspects (ASN : Node_Id) is\n          A_Id : constant Aspect_Id := Get_Aspect_Id (ASN);\n          P    : constant Entity_Id := Entity (ASN);\n-         --  Entithy for parent type\n+         --  Entity for parent type\n \n          N : Node_Id;\n          --  Item from Rep_Item chain\n@@ -3631,26 +3706,34 @@ package body Sem_Ch13 is\n                --  Case 3a: The aspects listed below don't correspond to\n                --  pragmas/attributes but do require delayed analysis.\n \n-               --  Default_Value can only apply to a scalar type\n-\n-               when Aspect_Default_Value =>\n-                  if not Is_Scalar_Type (E) then\n-                     Error_Msg_N\n-                       (\"aspect Default_Value must apply to a scalar type\", N);\n-                  end if;\n+               when Aspect_Default_Value | Aspect_Default_Component_Value =>\n+                  Error_Msg_Name_1 := Chars (Id);\n \n-                  Aitem := Empty;\n+                  if not Is_Type (E) then\n+                     Error_Msg_N (\"aspect% can only apply to a type\", Id);\n+                     goto Continue;\n \n-               --  Default_Component_Value can only apply to an array type\n-               --  with scalar components.\n+                  elsif not Is_First_Subtype (E) then\n+                     Error_Msg_N (\"aspect% cannot apply to subtype\", Id);\n+                     goto Continue;\n \n-               when Aspect_Default_Component_Value =>\n-                  if not (Is_Array_Type (E)\n-                           and then Is_Scalar_Type (Component_Type (E)))\n+                  elsif A_Id = Aspect_Default_Value\n+                    and then not Is_Scalar_Type (E)\n                   then\n-                     Error_Msg_N\n-                       (\"aspect Default_Component_Value can only apply to an \"\n-                        & \"array of scalar components\", N);\n+                     Error_Msg_N (\"aspect% can only be applied to scalar type\",\n+                                  Id);\n+                     goto Continue;\n+\n+                  elsif A_Id = Aspect_Default_Component_Value then\n+                     if not Is_Array_Type (E) then\n+                        Error_Msg_N (\"aspect% can only be applied to array \" &\n+                                     \"type\", Id);\n+                        goto Continue;\n+\n+                     elsif not Is_Scalar_Type (Component_Type (E)) then\n+                        Error_Msg_N (\"aspect% requires scalar components\", Id);\n+                        goto Continue;\n+                     end if;\n                   end if;\n \n                   Aitem := Empty;\n@@ -4157,13 +4240,9 @@ package body Sem_Ch13 is\n                --  as well, even though it appears on a first subtype. This is\n                --  mandated by the semantics of the aspect. Do not establish\n                --  the link when processing the base type itself as this leads\n-               --  to a rep item circularity. Verify that we are dealing with\n-               --  a scalar type to prevent cascaded errors.\n+               --  to a rep item circularity.\n \n-               if A_Id = Aspect_Default_Value\n-                 and then Is_Scalar_Type (E)\n-                 and then Base_Type (E) /= E\n-               then\n+               if A_Id = Aspect_Default_Value and then Base_Type (E) /= E then\n                   Set_Has_Delayed_Aspects (Base_Type (E));\n                   Record_Rep_Item (Base_Type (E), Aspect);\n                end if;\n@@ -12930,9 +13009,9 @@ package body Sem_Ch13 is\n       return S;\n    end Minimum_Size;\n \n-   ---------------------------\n+   ------------------------------\n    -- New_Put_Image_Subprogram --\n-   ---------------------------\n+   ------------------------------\n \n    procedure New_Put_Image_Subprogram\n      (N     : Node_Id;\n@@ -13209,6 +13288,15 @@ package body Sem_Ch13 is\n       end if;\n    end New_Stream_Subprogram;\n \n+   ----------------------\n+   -- No_Type_Rep_Item --\n+   ----------------------\n+\n+   procedure No_Type_Rep_Item (N : Node_Id) is\n+   begin\n+      Error_Msg_N (\"|type-related representation item not permitted!\", N);\n+   end No_Type_Rep_Item;\n+\n    --------------\n    -- Pop_Type --\n    --------------\n@@ -13365,17 +13453,6 @@ package body Sem_Ch13 is\n       N     : Node_Id;\n       FOnly : Boolean := False) return Boolean\n    is\n-      function Is_Derived_Type_With_Constraint return Boolean;\n-      --  Check whether T is a derived type with an explicit constraint, in\n-      --  which case the constraint has frozen the type and the item is too\n-      --  late. This compensates for the fact that for derived scalar types\n-      --  we freeze the base type unconditionally on account of a long-standing\n-      --  issue in gigi.\n-\n-      procedure No_Type_Rep_Item;\n-      --  Output message indicating that no type-related aspects can be\n-      --  specified due to some property of the parent type.\n-\n       procedure Too_Late;\n       --  Output message for an aspect being specified too late\n \n@@ -13386,32 +13463,6 @@ package body Sem_Ch13 is\n       --  document the requirement in the spec of Rep_Item_Too_Late that\n       --  if True is returned, then the rep item must be completely ignored???\n \n-      --------------------------------------\n-      --  Is_Derived_Type_With_Constraint --\n-      --------------------------------------\n-\n-      function Is_Derived_Type_With_Constraint return Boolean is\n-         Decl : constant Node_Id := Declaration_Node (T);\n-\n-      begin\n-         return Is_Derived_Type (T)\n-           and then Is_Frozen (Base_Type (T))\n-           and then Is_Enumeration_Type (T)\n-           and then False\n-           and then Nkind (N) = N_Enumeration_Representation_Clause\n-           and then Nkind (Decl) = N_Subtype_Declaration\n-           and then not Is_Entity_Name (Subtype_Indication (Decl));\n-      end Is_Derived_Type_With_Constraint;\n-\n-      ----------------------\n-      -- No_Type_Rep_Item --\n-      ----------------------\n-\n-      procedure No_Type_Rep_Item is\n-      begin\n-         Error_Msg_N (\"|type-related representation item not permitted!\", N);\n-      end No_Type_Rep_Item;\n-\n       --------------\n       -- Too_Late --\n       --------------\n@@ -13437,9 +13488,7 @@ package body Sem_Ch13 is\n    begin\n       --  First make sure entity is not frozen (RM 13.1(9))\n \n-      if (Is_Frozen (T)\n-           or else (Is_Type (T)\n-                     and then Is_Derived_Type_With_Constraint))\n+      if Is_Frozen (T)\n \n         --  Exclude imported types, which may be frozen if they appear in a\n         --  representation clause for a local type.\n@@ -13490,7 +13539,7 @@ package body Sem_Ch13 is\n          Parent_Type := Etype (Base_Type (T));\n \n          if Has_Primitive_Operations (Parent_Type) then\n-            No_Type_Rep_Item;\n+            No_Type_Rep_Item (N);\n \n             if not Relaxed_RM_Semantics then\n                Error_Msg_NE\n@@ -13500,7 +13549,7 @@ package body Sem_Ch13 is\n             return True;\n \n          elsif Is_By_Reference_Type (Parent_Type) then\n-            No_Type_Rep_Item;\n+            No_Type_Rep_Item (N);\n \n             if not Relaxed_RM_Semantics then\n                Error_Msg_NE"}]}