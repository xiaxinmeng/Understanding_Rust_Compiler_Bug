{"sha": "9f62cb922fdb83cd32244f3dd7b537d369557a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2MmNiOTIyZmRiODNjZDMyMjQ0ZjNkZDdiNTM3ZDM2OTU1N2EzZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-09-24T09:21:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-09-24T09:21:39Z"}, "message": "cgraphunit.c (cgraph_lower_function): Revert last change.\n\n\t* cgraphunit.c (cgraph_lower_function): Revert last change.\n\t* targhooks.c (default_static_chain): Use !DECL_STATIC_CHAIN\n\tinstead of DECL_NO_STATIC_CHAIN.\n\t* tree-cfg.c (verify_gimple_call): Likewise.\n\t* tree-nested.c (get_chain_decl, get_chain_field,\n\tconvert_tramp_reference_op, convert_gimple_call): Likewise.\n\t(convert_all_function_calls): Likewise.  Always set or clear\n\tDECL_STATIC_CHAIN initially, for !n->outer clear it.\n\t(lower_nested_functions): Remove DECL_NO_STATIC_CHAIN checking code.\n\t* c-parser.c (c_parser_declaration_or_fndef): Set DECL_STATIC_CHAIN\n\tif nested.\n\t* print-tree.c (print_node): Handle DECL_STATIC_CHAIN instead of\n\tDECL_NO_STATIC_CHAIN.\n\t* config/i386/i386.c (ix86_static_chain): Use !DECL_STATIC_CHAIN\n\tinstead of DECL_NO_STATIC_CHAIN.\n\t(ix86_function_regparm, find_drap_reg): Likewise.  Don't test\n\tdecl_function_context.\n\t* varasm.c (initializer_constant_valid_p): Likewise.\n\t* tree.h (DECL_NO_STATIC_CHAIN): Renamed to ...\n\t(DECL_STATIC_CHAIN): ... this.\n\t* config/moxie/moxie.c (moxie_static_chain): Use !DECL_STATIC_CHAIN\n\tinstead of DECL_NO_STATIC_CHAIN.\n\n\t* method.c (make_thunk, make_alias_for): Don't set\n\tDECL_NO_STATIC_CHAIN.\n\t* decl.c (builtin_function_1, grokfndecl): Likewise.\n\t* lex.c (build_lang_decl): Likewise.\n\n\t* gcc-interface/utils.c (gnat_pushdecl): Don't set\n\tDECL_NO_STATIC_CHAIN, set DECL_STATIC_CHAIN for\n\tnested functions.\n\n\t* testsuite/gcc.target/i386/pr12329.c: Adjust.\n\nFrom-SVN: r152114", "tree": {"sha": "0c79112ec645e731d0045fca38a62354054c2798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c79112ec645e731d0045fca38a62354054c2798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f62cb922fdb83cd32244f3dd7b537d369557a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f62cb922fdb83cd32244f3dd7b537d369557a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f62cb922fdb83cd32244f3dd7b537d369557a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f62cb922fdb83cd32244f3dd7b537d369557a3e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78605f0a685eddfb20bcf786f7a004747cc705e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78605f0a685eddfb20bcf786f7a004747cc705e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78605f0a685eddfb20bcf786f7a004747cc705e8"}], "stats": {"total": 165, "additions": 83, "deletions": 82}, "files": [{"sha": "3c20a418625a663060963a2979e167e9043d8124", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -1,3 +1,28 @@\n+2009-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cgraphunit.c (cgraph_lower_function): Revert last change.\n+\t* targhooks.c (default_static_chain): Use !DECL_STATIC_CHAIN\n+\tinstead of DECL_NO_STATIC_CHAIN.\n+\t* tree-cfg.c (verify_gimple_call): Likewise.\n+\t* tree-nested.c (get_chain_decl, get_chain_field,\n+\tconvert_tramp_reference_op, convert_gimple_call): Likewise.\n+\t(convert_all_function_calls): Likewise.  Always set or clear\n+\tDECL_STATIC_CHAIN initially, for !n->outer clear it.\n+\t(lower_nested_functions): Remove DECL_NO_STATIC_CHAIN checking code.\n+\t* c-parser.c (c_parser_declaration_or_fndef): Set DECL_STATIC_CHAIN\n+\tif nested.\n+\t* print-tree.c (print_node): Handle DECL_STATIC_CHAIN instead of\n+\tDECL_NO_STATIC_CHAIN.\n+\t* config/i386/i386.c (ix86_static_chain): Use !DECL_STATIC_CHAIN\n+\tinstead of DECL_NO_STATIC_CHAIN.\n+\t(ix86_function_regparm, find_drap_reg): Likewise.  Don't test\n+\tdecl_function_context.\n+\t* varasm.c (initializer_constant_valid_p): Likewise.\n+\t* tree.h (DECL_NO_STATIC_CHAIN): Renamed to ...\n+\t(DECL_STATIC_CHAIN): ... this.\n+\t* config/moxie/moxie.c (moxie_static_chain): Use !DECL_STATIC_CHAIN\n+\tinstead of DECL_NO_STATIC_CHAIN.\n+\n 2009-09-23  Basile Starynkevitch  <basile@starynkevitch.net>\n             Rafael Avila de Espindola  <espindola@google.com>\n "}, {"sha": "0cbd4db4bf2a4019518c596e34fccd3dc87915b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -1,3 +1,9 @@\n+2009-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/utils.c (gnat_pushdecl): Don't set\n+\tDECL_NO_STATIC_CHAIN, set DECL_STATIC_CHAIN for\n+\tnested functions.\n+\n 2009-09-21  Joel Sherrill <joel.sherrill@oarcorp.com>\n \n \t* s-osinte-rtems.ad[bs]: Get_Page_Size cannot return 0."}, {"sha": "1559cf144906599a7e0dadb9e2229f111fdd9f3b", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -439,9 +439,12 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n     {\n       DECL_CONTEXT (decl) = current_function_decl;\n \n-      /* Functions imported in another function are not really nested.  */\n-      if (TREE_CODE (decl) == FUNCTION_DECL && TREE_PUBLIC (decl))\n-\tDECL_NO_STATIC_CHAIN (decl) = 1;\n+      /* Functions imported in another function are not really nested.\n+\t For really nested functions mark them initially as needing\n+\t a static chain for uses of that flag before unnesting;\n+\t lower_nested_functions will then recompute it.  */\n+      if (TREE_CODE (decl) == FUNCTION_DECL && !TREE_PUBLIC (decl))\n+\tDECL_STATIC_CHAIN (decl) = 1;\n     }\n \n   TREE_NO_WARNING (decl) = (gnat_node == Empty || Warnings_Off (gnat_node));"}, {"sha": "3f6e949fe8e087a780984864a9ee9f9a6cb0d2b3", "filename": "gcc/c-parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -1323,6 +1323,11 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok, bool empty_ok,\n       if (nested)\n \t{\n \t  tree decl = current_function_decl;\n+\t  /* Mark nested functions as needing static-chain initially.\n+\t     lower_nested_functions will recompute it but the\n+\t     DECL_STATIC_CHAIN flag is also used before that happens,\n+\t     by initializer_constant_valid_p.  See gcc.dg/nested-fn-2.c.  */\n+\t  DECL_STATIC_CHAIN (decl) = 1;\n \t  add_stmt (fnbody);\n \t  finish_function ();\n \t  c_pop_function_context ();"}, {"sha": "2ad07187e04a2fbd163a970afea8fabec6478aed", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -498,11 +498,6 @@ cgraph_lower_function (struct cgraph_node *node)\n     lower_nested_functions (node->decl);\n   gcc_assert (!node->nested);\n \n-  /* Non-nested functions never need a static chain.  */\n-  if (!DECL_NO_STATIC_CHAIN (node->decl)\n-      && decl_function_context (node->decl) == NULL)\n-    DECL_NO_STATIC_CHAIN (node->decl) = 1;\n-\n   tree_lowering_passes (node->decl);\n   node->lowered = true;\n }"}, {"sha": "3b11b915194b39b43080b3a92b4b34695efe9c9d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -4508,9 +4508,7 @@ ix86_function_regparm (const_tree type, const_tree decl)\n \n \t  /* We don't want to use regparm(3) for nested functions as\n \t     these use a static chain pointer in the third argument.  */\n-\t  if (local_regparm == 3\n-\t      && decl_function_context (decl)\n-\t      && !DECL_NO_STATIC_CHAIN (decl))\n+\t  if (local_regparm == 3 && DECL_STATIC_CHAIN (decl))\n \t    local_regparm = 2;\n \n \t  /* Each fixed register usage increases register pressure,\n@@ -8128,9 +8126,7 @@ find_drap_reg (void)\n \t Since function with tail call may use any caller-saved\n \t registers in epilogue, DRAP must not use caller-saved\n \t register in such case.  */\n-      if ((decl_function_context (decl)\n-\t   && !DECL_NO_STATIC_CHAIN (decl))\n-\t  || crtl->tail_call_emit)\n+      if (DECL_STATIC_CHAIN (decl) || crtl->tail_call_emit)\n \treturn R13_REG;\n \n       return R10_REG;\n@@ -8141,9 +8137,7 @@ find_drap_reg (void)\n \t Since function with tail call may use any caller-saved\n \t registers in epilogue, DRAP must not use caller-saved\n \t register in such case.  */\n-      if ((decl_function_context (decl)\n-\t   && !DECL_NO_STATIC_CHAIN (decl))\n-\t  || crtl->tail_call_emit)\n+      if (DECL_STATIC_CHAIN (decl) || crtl->tail_call_emit)\n \treturn DI_REG;\n     \n       /* Reuse static chain register if it isn't used for parameter\n@@ -19811,7 +19805,7 @@ ix86_static_chain (const_tree fndecl, bool incoming_p)\n {\n   unsigned regno;\n \n-  if (DECL_NO_STATIC_CHAIN (fndecl))\n+  if (!DECL_STATIC_CHAIN (fndecl))\n     return NULL;\n \n   if (TARGET_64BIT)"}, {"sha": "7515fa26a478bd90e174448d965127db13e0a76a", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -460,7 +460,7 @@ moxie_static_chain (const_tree fndecl, bool incoming_p)\n {\n   rtx addr, mem;\n \n-  if (DECL_NO_STATIC_CHAIN (fndecl))\n+  if (!DECL_STATIC_CHAIN (fndecl))\n     return NULL;\n \n   if (incoming_p)"}, {"sha": "4c6e0c796c0b7192a8cdbcc63aff6ad5c69541c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -1,3 +1,10 @@\n+2009-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* method.c (make_thunk, make_alias_for): Don't set\n+\tDECL_NO_STATIC_CHAIN.\n+\t* decl.c (builtin_function_1, grokfndecl): Likewise.\n+\t* lex.c (build_lang_decl): Likewise.\n+\n 2009-09-23  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/41065"}, {"sha": "c720f6c33a377b619bc5fb6c802cb34c403f080a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -3580,10 +3580,6 @@ builtin_function_1 (tree decl, tree context, bool is_global)\n \n   retrofit_lang_decl (decl);\n \n-  /* All nesting of C++ functions is lexical; there is never a \"static\n-     chain\" in the sense of GNU C nested functions.  */\n-  DECL_NO_STATIC_CHAIN (decl) = 1;\n-\n   DECL_ARTIFICIAL (decl) = 1;\n   SET_OVERLOADED_OPERATOR_CODE (decl, ERROR_MARK);\n   SET_DECL_LANGUAGE (decl, lang_c);\n@@ -6779,9 +6775,6 @@ grokfndecl (tree ctype,\n       && !grok_op_properties (decl, /*complain=*/true))\n     return NULL_TREE;\n \n-  if (ctype && decl_function_context (decl))\n-    DECL_NO_STATIC_CHAIN (decl) = 1;\n-\n   if (funcdef_flag)\n     /* Make the init_value nonzero so pushdecl knows this is not\n        tentative.  error_mark_node is replaced later with the BLOCK.  */"}, {"sha": "041e391f54325e9105be1824c781a12f49d374fa", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -516,11 +516,6 @@ build_lang_decl (enum tree_code code, tree name, tree type)\n \t\t  code, name, type);\n   retrofit_lang_decl (t);\n \n-  /* All nesting of C++ functions is lexical; there is never a \"static\n-     chain\" in the sense of GNU C nested functions.  */\n-  if (code == FUNCTION_DECL)\n-    DECL_NO_STATIC_CHAIN (t) = 1;\n-\n   return t;\n }\n "}, {"sha": "b0df48938a8ed8815e53abb264eb81ecc02b559f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -151,9 +151,6 @@ make_thunk (tree function, bool this_adjusting,\n   DECL_CONSTRUCTOR_P (thunk) = 0;\n   DECL_EXTERNAL (thunk) = 1;\n   DECL_ARTIFICIAL (thunk) = 1;\n-  /* Even if this thunk is a member of a local class, we don't\n-     need a static chain.  */\n-  DECL_NO_STATIC_CHAIN (thunk) = 1;\n   /* The THUNK is not a pending inline, even if the FUNCTION is.  */\n   DECL_PENDING_INLINE_P (thunk) = 0;\n   DECL_DECLARED_INLINE_P (thunk) = 0;\n@@ -281,7 +278,6 @@ make_alias_for (tree function, tree newid)\n   DECL_CONSTRUCTOR_P (alias) = 0;\n   DECL_EXTERNAL (alias) = 0;\n   DECL_ARTIFICIAL (alias) = 1;\n-  DECL_NO_STATIC_CHAIN (alias) = 1;\n   DECL_PENDING_INLINE_P (alias) = 0;\n   DECL_DECLARED_INLINE_P (alias) = 0;\n   DECL_USE_TEMPLATE (alias) = 0;"}, {"sha": "f4b74d95ffc334675dabe262892c05e0746c8d50", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -381,8 +381,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \tfputs (\" autoinline\", file);\n       if (code == FUNCTION_DECL && DECL_BUILT_IN (node))\n \tfputs (\" built-in\", file);\n-      if (code == FUNCTION_DECL && DECL_NO_STATIC_CHAIN (node))\n-\tfputs (\" no-static-chain\", file);\n+      if (code == FUNCTION_DECL && DECL_STATIC_CHAIN (node))\n+\tfputs (\" static-chain\", file);\n \n       if (code == FIELD_DECL && DECL_PACKED (node))\n \tfputs (\" packed\", file);"}, {"sha": "dd52da986389a1c27fe075550e60c32c100c9972", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -631,7 +631,7 @@ default_internal_arg_pointer (void)\n rtx\n default_static_chain (const_tree fndecl, bool incoming_p)\n {\n-  if (DECL_NO_STATIC_CHAIN (fndecl))\n+  if (!DECL_STATIC_CHAIN (fndecl))\n     return NULL;\n \n   if (incoming_p)"}, {"sha": "0e92d054469ee2b4453ccca773d4340915d41593", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -1,3 +1,7 @@\n+2009-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/gcc.target/i386/pr12329.c: Adjust.\n+\n 2009-09-23  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/41248"}, {"sha": "c3d8a6128dd3eeb1734b2d3150ddf8f9f59a32b4", "filename": "gcc/testsuite/gcc.target/i386/pr12329.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr12329.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr12329.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr12329.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -6,7 +6,7 @@ extern void abort (void);\n \n int test_nested (int i)\n {\n-  int __attribute__ ((__noinline__, __regparm__(3))) foo(int j, int k, int l) /* { dg-error \"nested functions are limited to 2 register parameters\" } */\n+  int __attribute__ ((__noinline__, __regparm__(3))) foo(int j, int k, int l)\n   {\n     return i + j + k + l;\n   }"}, {"sha": "df1f6caa857d4abe2ddd8ce44f8d34f1fb3f1d7b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -3575,7 +3575,7 @@ verify_gimple_call (gimple stmt)\n     }\n \n   /* If there is a static chain argument, this should not be an indirect\n-     call, and the decl should not have DECL_NO_STATIC_CHAIN set.  */\n+     call, and the decl should have DECL_STATIC_CHAIN set.  */\n   if (gimple_call_chain (stmt))\n     {\n       if (TREE_CODE (fn) != ADDR_EXPR\n@@ -3586,7 +3586,7 @@ verify_gimple_call (gimple stmt)\n \t}\n       fn = TREE_OPERAND (fn, 0);\n \n-      if (DECL_NO_STATIC_CHAIN (fn))\n+      if (!DECL_STATIC_CHAIN (fn))\n \t{\n \t  error (\"static chain with function that doesn't use one\");\n \t  return true;"}, {"sha": "706571c59ec621981a9d48d6cda6c21f3ac55fff", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -353,11 +353,11 @@ get_chain_decl (struct nesting_info *info)\n \n       if (dump_file\n           && (dump_flags & TDF_DETAILS)\n-\t  && DECL_NO_STATIC_CHAIN (info->context))\n-\tfprintf (dump_file, \"Resetting no-static-chain for %s\\n\",\n+\t  && !DECL_STATIC_CHAIN (info->context))\n+\tfprintf (dump_file, \"Setting static-chain for %s\\n\",\n \t\t lang_hooks.decl_printable_name (info->context, 2));\n \n-      DECL_NO_STATIC_CHAIN (info->context) = 0;\n+      DECL_STATIC_CHAIN (info->context) = 1;\n     }\n   return decl;\n }\n@@ -387,11 +387,11 @@ get_chain_field (struct nesting_info *info)\n \n       if (dump_file\n           && (dump_flags & TDF_DETAILS)\n-\t  && DECL_NO_STATIC_CHAIN (info->context))\n-\tfprintf (dump_file, \"Resetting no-static-chain for %s\\n\",\n+\t  && !DECL_STATIC_CHAIN (info->context))\n+\tfprintf (dump_file, \"Setting static-chain for %s\\n\",\n \t\t lang_hooks.decl_printable_name (info->context, 2));\n \n-      DECL_NO_STATIC_CHAIN (info->context) = 0;\n+      DECL_STATIC_CHAIN (info->context) = 1;\n     }\n   return field;\n }\n@@ -1872,7 +1872,7 @@ convert_tramp_reference_op (tree *tp, int *walk_subtrees, void *data)\n \n       /* If the nested function doesn't use a static chain, then\n \t it doesn't need a trampoline.  */\n-      if (DECL_NO_STATIC_CHAIN (decl))\n+      if (!DECL_STATIC_CHAIN (decl))\n \tbreak;\n \n       /* If we don't want a trampoline, then don't build one.  */\n@@ -1972,7 +1972,7 @@ convert_gimple_call (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n       if (!decl)\n \tbreak;\n       target_context = decl_function_context (decl);\n-      if (target_context && !DECL_NO_STATIC_CHAIN (decl))\n+      if (target_context && DECL_STATIC_CHAIN (decl))\n \t{\n \t  gimple_call_set_chain (stmt, get_static_chain (info, target_context,\n \t\t\t\t\t\t\t &wi->gsi));\n@@ -2046,20 +2046,20 @@ convert_all_function_calls (struct nesting_info *root)\n   int iter_count;\n   bool any_changed;\n \n-  /* First, optimistically set no_static_chain for all decls that haven't\n+  /* First, optimistically clear static_chain for all decls that haven't\n      used the static chain already for variable access.  */\n   FOR_EACH_NEST_INFO (n, root)\n     {\n       tree decl = n->context;\n-      if (n->outer && !n->chain_decl && !n->chain_field)\n+      if (!n->outer || (!n->chain_decl && !n->chain_field))\n \t{\n-\t  DECL_NO_STATIC_CHAIN (decl) = 1;\n+\t  DECL_STATIC_CHAIN (decl) = 0;\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"Guessing no-static-chain for %s\\n\",\n+\t    fprintf (dump_file, \"Guessing no static-chain for %s\\n\",\n \t\t     lang_hooks.decl_printable_name (decl, 2));\n \t}\n       else\n-\tgcc_assert (!DECL_NO_STATIC_CHAIN (decl));\n+\tDECL_STATIC_CHAIN (decl) = 1;\n     }\n \n   /* Walk the functions and perform transformations.  Note that these\n@@ -2081,15 +2081,15 @@ convert_all_function_calls (struct nesting_info *root)\n       FOR_EACH_NEST_INFO (n, root)\n \t{\n \t  tree decl = n->context;\n-\t  bool old_no_static_chain = DECL_NO_STATIC_CHAIN (decl);\n+\t  bool old_static_chain = DECL_STATIC_CHAIN (decl);\n \n \t  walk_function (convert_tramp_reference_stmt,\n \t\t\t convert_tramp_reference_op, n);\n \t  walk_function (convert_gimple_call, NULL, n);\n \n \t  /* If a call to another function created the use of a chain\n \t     within this function, we'll have to continue iteration.  */\n-\t  if (old_no_static_chain && !DECL_NO_STATIC_CHAIN (decl))\n+\t  if (!old_static_chain && DECL_STATIC_CHAIN (decl))\n \t    any_changed = true;\n \t}\n     }\n@@ -2337,7 +2337,7 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n \t  if (!field)\n \t    continue;\n \n-\t  gcc_assert (!DECL_NO_STATIC_CHAIN (i->context));\n+\t  gcc_assert (DECL_STATIC_CHAIN (i->context));\n \t  arg3 = build_addr (root->frame_decl, context);\n \n \t  arg2 = build_addr (i->context, context);\n@@ -2528,10 +2528,6 @@ lower_nested_functions (tree fndecl)\n {\n   struct cgraph_node *cgn;\n   struct nesting_info *root;\n-#ifdef ENABLE_CHECKING\n-  struct nesting_info *n;\n-  bitmap orig_decl_no_static_chain;\n-#endif\n \n   /* If there are no nested functions, there's nothing to do.  */\n   cgn = cgraph_node (fndecl);\n@@ -2548,15 +2544,6 @@ lower_nested_functions (tree fndecl)\n   bitmap_obstack_initialize (&nesting_info_bitmap_obstack);\n   root = create_nesting_tree (cgn);\n \n-#ifdef ENABLE_CHECKING\n-  /* The C++ and Ada front ends set DECL_NO_STATIC_CHAIN in various\n-     instances where they expect no static chain needed.  */\n-  orig_decl_no_static_chain = BITMAP_ALLOC (&nesting_info_bitmap_obstack);\n-  FOR_EACH_NEST_INFO (n, root)\n-    if (DECL_NO_STATIC_CHAIN (n->context))\n-      bitmap_set_bit (orig_decl_no_static_chain, DECL_UID (n->context));\n-#endif\n-\n   walk_all_functions (convert_nonlocal_reference_stmt,\n                       convert_nonlocal_reference_op,\n \t\t      root);\n@@ -2570,13 +2557,6 @@ lower_nested_functions (tree fndecl)\n   finalize_nesting_tree (root);\n   unnest_nesting_tree (root);\n \n-#ifdef ENABLE_CHECKING\n-  /* Validate the original settings of DECL_NO_STATIC_CHAIN.  */\n-  FOR_EACH_NEST_INFO (n, root)\n-    if (bitmap_bit_p (orig_decl_no_static_chain, DECL_UID (n->context)))\n-      gcc_assert (DECL_NO_STATIC_CHAIN (n->context));\n-#endif\n-\n   free_nesting_tree (root);\n   bitmap_obstack_release (&nesting_info_bitmap_obstack);\n "}, {"sha": "4f4fd309b6eb563efa9717ca14cc1d916e3d240b", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -3141,9 +3141,8 @@ struct GTY(())\n #define DECL_NO_LIMIT_STACK(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.no_limit_stack)\n \n-/* In a FUNCTION_DECL with a nonzero DECL_CONTEXT, indicates that a\n-   static chain is not needed.  */\n-#define DECL_NO_STATIC_CHAIN(NODE) \\\n+/* In a FUNCTION_DECL indicates that a static chain is needed.  */\n+#define DECL_STATIC_CHAIN(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.regdecl_flag)\n \n /* Nonzero for a decl that cgraph has decided should be inlined into"}, {"sha": "91ec68aade091186584b991614c77e1f5e0ded73", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62cb922fdb83cd32244f3dd7b537d369557a3e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9f62cb922fdb83cd32244f3dd7b537d369557a3e", "patch": "@@ -4212,8 +4212,7 @@ initializer_constant_valid_p (tree value, tree endtype)\n \t    /* Taking the address of a nested function involves a trampoline,\n \t       unless we don't need or want one.  */\n \t    if (TREE_CODE (op0) == FUNCTION_DECL\n-\t\t&& decl_function_context (op0)\n-\t\t&& !DECL_NO_STATIC_CHAIN (op0)\n+\t\t&& DECL_STATIC_CHAIN (op0)\n \t\t&& !TREE_NO_TRAMPOLINE (value))\n \t      return NULL_TREE;\n \t    /* \"&{...}\" requires a temporary to hold the constructed"}]}