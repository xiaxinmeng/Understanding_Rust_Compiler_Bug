{"sha": "9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1ODc0Y2YwNWIwY2FiZDcyMmRmYmMxZDVhY2I4YzExZjA2N2ZjNw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-11-02T19:55:02Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-11-02T19:55:02Z"}, "message": "re PR c++/37093 (ICE with pointer to member template parameters)\n\nFix PR c++/37093\n\ngcc/cp/ChangeLog:\n\n\tPR c++/37093\n\t* pt.c (check_valid_ptrmem_cst_expr): New function.\n\t(convert_nontype_argument): Use it to output an error for\n\tillegal pointer to member expressions used as template arguments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/37093\n\t* g++.dg/other/ptrmem10.C: New test.\n\t* g++.dg/other/ptrmem11.C: Likewise.\n\nFrom-SVN: r153822", "tree": {"sha": "3a220827c8faa9f288db192ce601a0e0bc67433a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a220827c8faa9f288db192ce601a0e0bc67433a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/comments", "author": null, "committer": null, "parents": [{"sha": "5815841f113b625c746a17e3ddf0deb1458e9d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5815841f113b625c746a17e3ddf0deb1458e9d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5815841f113b625c746a17e3ddf0deb1458e9d40"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "10fa16a2421219e01bca90903d6756cd989b7aeb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "patch": "@@ -1,3 +1,10 @@\n+2009-11-02  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/37093\n+\t* pt.c (check_valid_ptrmem_cst_expr): New function.\n+\t(convert_nontype_argument): Use it to output an error for\n+\tillegal pointer to member expressions used as template arguments.\n+\n 2009-11-02  Jason Merrill  <jason@redhat.com>\n \n \tRestrict DR 757 change to C++0x mode."}, {"sha": "5af348a1390b4a55a7d83ea45cbd57c0f86dda15", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "patch": "@@ -4686,6 +4686,22 @@ convert_nontype_argument_function (tree type, tree expr)\n   return fn;\n }\n \n+/* Subroutine of convert_nontype_argument.\n+   Check if EXPR of type TYPE is a valid pointer-to-member constant.\n+   Emit an error otherwise.  */\n+\n+static bool\n+check_valid_ptrmem_cst_expr (tree type, tree expr)\n+{\n+  STRIP_NOPS (expr);\n+  if (expr && (null_ptr_cst_p (expr) || TREE_CODE (expr) == PTRMEM_CST))\n+    return true;\n+  error (\"%qE is not a valid template argument for type %qT\",\n+\t expr, type);\n+  error (\"it must be a pointer-to-member of the form `&X::Y'\");\n+  return false;\n+}\n+\n /* Attempt to convert the non-type template parameter EXPR to the\n    indicated TYPE.  If the conversion is successful, return the\n    converted value.  If the conversion is unsuccessful, return\n@@ -4985,6 +5001,11 @@ convert_nontype_argument (tree type, tree expr)\n       if (expr == error_mark_node)\n \treturn error_mark_node;\n \n+      /* [temp.arg.nontype] bullet 1 says the pointer to member\n+         expression must be a pointer-to-member constant.  */\n+      if (!check_valid_ptrmem_cst_expr (type, expr))\n+\treturn error_mark_node;\n+\n       /* There is no way to disable standard conversions in\n \t resolve_address_of_overloaded_function (called by\n \t instantiate_type). It is possible that the call succeeded by\n@@ -5011,6 +5032,11 @@ convert_nontype_argument (tree type, tree expr)\n      qualification conversions (_conv.qual_) are applied.  */\n   else if (TYPE_PTRMEM_P (type))\n     {\n+      /* [temp.arg.nontype] bullet 1 says the pointer to member\n+         expression must be a pointer-to-member constant.  */\n+      if (!check_valid_ptrmem_cst_expr (type, expr))\n+\treturn error_mark_node;\n+\n       expr = perform_qualification_conversions (type, expr);\n       if (expr == error_mark_node)\n \treturn expr;"}, {"sha": "cfc4a0a3b800236acad2789a3ddf8c8e2ebd6210", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "patch": "@@ -1,3 +1,9 @@\n+2009-11-02  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/37093\n+\t* g++.dg/other/ptrmem10.C: New test.\n+\t* g++.dg/other/ptrmem11.C: Likewise.\n+\n 2009-11-02  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/41878"}, {"sha": "4b8c40ac8ecb53f8ae0726cc988c4799b9b93c45", "filename": "gcc/testsuite/g++.dg/other/ptrmem10.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem10.C?ref=9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "patch": "@@ -0,0 +1,29 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/37093\n+\n+template <class C, void (C::*M) ()>\n+static\n+void foo(void *obj)\n+{\n+  C *p = static_cast<C*>(obj);\n+  (p->*M)();\n+}\n+\n+template <class C>\n+static void\n+bar(C *c, void (C::*m) ())\n+{\n+  foo<C,m>((void *)c);// { dg-error \"(not a valid template arg|pointer-to-member|no matching fun)\" }\n+}\n+\n+struct S\n+{\n+  void baz () {}\n+};\n+\n+int\n+main ()\n+{\n+  S a;\n+  bar(&a, &S::baz);\n+}"}, {"sha": "a850c55c40a13f5c70790de974c8d43449efb8fe", "filename": "gcc/testsuite/g++.dg/other/ptrmem11.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem11.C?ref=9d5874cf05b0cabd722dfbc1d5acb8c11f067fc7", "patch": "@@ -0,0 +1,21 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/37093\n+\n+struct A {};\n+\n+template <int A::* p>\n+int\n+foo(A* q)\n+{\n+  return q->*p;\n+}\n+\n+template <typename T>\n+int\n+bar(int T::* p)\n+{\n+  return foo<p>(0);// { dg-error \"(not a valid template arg|no matching func|pointer-to-member)\" }\n+}\n+\n+int i = bar<A>(0);\n+"}]}