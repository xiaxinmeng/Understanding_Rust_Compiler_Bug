{"sha": "e55f4a34138fbecad0143015d76106f9a552f757", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1ZjRhMzQxMzhmYmVjYWQwMTQzMDE1ZDc2MTA2ZjlhNTUyZjc1Nw==", "commit": {"author": {"name": "Arnaud Vandyck", "email": "arnaud.vandyck@ulg.ac.be", "date": "2003-10-08T15:29:52Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-08T15:29:52Z"}, "message": "2003-10-08  Arnaud Vandyck <arnaud.vandyck@ulg.ac.be>\n\n\t* javax/swing/table/AbstractTableModel.java\n\t(getColumnName): Simplified code much. Thanks to Yannick Boogaerts who\n\thelped stop pulling my hair on this +1 then -1 tricky thing!\n\nFrom-SVN: r72228", "tree": {"sha": "3cdd6eb860708117420e165586f0c939bd425d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cdd6eb860708117420e165586f0c939bd425d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e55f4a34138fbecad0143015d76106f9a552f757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55f4a34138fbecad0143015d76106f9a552f757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55f4a34138fbecad0143015d76106f9a552f757", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55f4a34138fbecad0143015d76106f9a552f757/comments", "author": null, "committer": null, "parents": [{"sha": "a761195bfd2503e485c47a79c4fe64195417b343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a761195bfd2503e485c47a79c4fe64195417b343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a761195bfd2503e485c47a79c4fe64195417b343"}], "stats": {"total": 61, "additions": 13, "deletions": 48}, "files": [{"sha": "a5adfdf72cd3c165525b9b73931e4ab00d473f2d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55f4a34138fbecad0143015d76106f9a552f757/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55f4a34138fbecad0143015d76106f9a552f757/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e55f4a34138fbecad0143015d76106f9a552f757", "patch": "@@ -1,3 +1,9 @@\n+2003-10-08  Arnaud Vandyck <arnaud.vandyck@ulg.ac.be>\n+\n+\t* javax/swing/table/AbstractTableModel.java\n+\t(getColumnName): Simplified code much. Thanks to Yannick Boogaerts who\n+\thelped stop pulling my hair on this +1 then -1 tricky thing!\n+\n 2003-10-07  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkTextAreaPeer.java (gtkTextGetSize):"}, {"sha": "38e36e1744c5484a3aafaf2e4baeed22487d416b", "filename": "libjava/javax/swing/table/AbstractTableModel.java", "status": "modified", "additions": 7, "deletions": 48, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55f4a34138fbecad0143015d76106f9a552f757/libjava%2Fjavax%2Fswing%2Ftable%2FAbstractTableModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55f4a34138fbecad0143015d76106f9a552f757/libjava%2Fjavax%2Fswing%2Ftable%2FAbstractTableModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftable%2FAbstractTableModel.java?ref=e55f4a34138fbecad0143015d76106f9a552f757", "patch": "@@ -77,56 +77,15 @@ public AbstractTableModel()\n    */\n   public String getColumnName (int columnIndex)\n   {\n-    // Ok, this is not the best solution in the world\n-    // and it does produce wrong answers starting 1378\n-    // but it's a start.  I sure hope there is a more\n-    // simple algorithm.  I started with a base 10 to\n-    // base 26 converter and later found that there\n-    // were so many are exceptions that it has morphed\n-    // into a pile of goop.\n-\t\t\n-    // NOTE2: I have a working algorithm which is much\n-    // much simplier and works for all values...I'll\n-    // be adding it soon...\n-\n+    int index = columnIndex + 1;\n     StringBuffer buffer = new StringBuffer();\n-    int left = columnIndex;\n-    boolean foundFirst = false;\n-    \n-    // Process Exponent levels.\n-    for (int index = 6; index >= 0; index--)\n-      {\n-        int base = (int) (Math.pow (26, index));\n-        \n-        if (index > 1)\n-          {\n-            base = base + (int) (Math.pow (26, index - 1));\n-          }\n-        \n-        if (base <= left)\n-          {\n-            int multiplier = left / base;\n-            \n-            if (foundFirst == false\n-                && index > 0)\n-              {\n-                buffer.append ((char) (multiplier + 64));\n-              }\n-            else\n-              {\n-                buffer.append ((char) (multiplier + 65));\n-              }\n-            \n-            left = left - (base * multiplier);\n-            foundFirst = true;\n-          }\n-        else if (foundFirst == true\n-                 || index == 0)\n-          {\n-            buffer.append('A');\n-          }\n-    }\n \n+    while (index > 0)\n+      {\n+\tbuffer.insert (0, (char) ('A' + ((index - 1) % 26)));\n+\tindex = (index - 1) / 26;\n+      }\n+    \n     // Return column name.\n     return buffer.toString();\n   }"}]}