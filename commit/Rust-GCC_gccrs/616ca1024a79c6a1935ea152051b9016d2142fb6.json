{"sha": "616ca1024a79c6a1935ea152051b9016d2142fb6", "node_id": "C_kwDOANBUbNoAKDYxNmNhMTAyNGE3OWM2YTE5MzVlYTE1MjA1MWI5MDE2ZDIxNDJmYjY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-18T16:39:23Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-18T18:34:11Z"}, "message": "IPA: use cgraph_node instance\n\ngcc/ChangeLog:\n\n\t* ipa-modref.c (analyze_function): Use fnode instead of repeated\n\tcgraph_node::get (current_function_decl).", "tree": {"sha": "177437845d9094f3aff80b4a101697df973ec166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/177437845d9094f3aff80b4a101697df973ec166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/616ca1024a79c6a1935ea152051b9016d2142fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616ca1024a79c6a1935ea152051b9016d2142fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616ca1024a79c6a1935ea152051b9016d2142fb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616ca1024a79c6a1935ea152051b9016d2142fb6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c964ad996a1bb22566b987eafb333b5899deab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c964ad996a1bb22566b987eafb333b5899deab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c964ad996a1bb22566b987eafb333b5899deab"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "2c507cc67abaca8ddea4cc32f4960b7db6960dd2", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616ca1024a79c6a1935ea152051b9016d2142fb6/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616ca1024a79c6a1935ea152051b9016d2142fb6/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=616ca1024a79c6a1935ea152051b9016d2142fb6", "patch": "@@ -2882,22 +2882,22 @@ analyze_function (function *f, bool ipa)\n \t{\n \t  if (dump_file\n \t      && (summary\n-\t\t  = optimization_summaries->get (cgraph_node::get (f->decl)))\n+\t\t  = optimization_summaries->get (fnode))\n \t\t != NULL\n \t      && summary->loads)\n \t    {\n \t      fprintf (dump_file, \"Past summary:\\n\");\n \t      optimization_summaries->get\n-\t\t (cgraph_node::get (f->decl))->dump (dump_file);\n+\t\t (fnode)->dump (dump_file);\n \t      past_flags.reserve_exact (summary->arg_flags.length ());\n \t      past_flags.splice (summary->arg_flags);\n \t      past_retslot_flags = summary->retslot_flags;\n \t      past_static_chain_flags = summary->static_chain_flags;\n \t      past_flags_known = true;\n \t    }\n-\t  optimization_summaries->remove (cgraph_node::get (f->decl));\n+\t  optimization_summaries->remove (fnode);\n \t}\n-      summary = optimization_summaries->get_create (cgraph_node::get (f->decl));\n+      summary = optimization_summaries->get_create (fnode);\n       gcc_checking_assert (nolto && !lto);\n     }\n   /* In IPA mode we analyze every function precisely once.  Assert that.  */\n@@ -2908,16 +2908,16 @@ analyze_function (function *f, bool ipa)\n \t  if (!summaries)\n \t    summaries = modref_summaries::create_ggc (symtab);\n \t  else\n-\t    summaries->remove (cgraph_node::get (f->decl));\n-\t  summary = summaries->get_create (cgraph_node::get (f->decl));\n+\t    summaries->remove (fnode);\n+\t  summary = summaries->get_create (fnode);\n \t}\n       if (lto)\n \t{\n \t  if (!summaries_lto)\n \t    summaries_lto = modref_summaries_lto::create_ggc (symtab);\n \t  else\n-\t    summaries_lto->remove (cgraph_node::get (f->decl));\n-\t  summary_lto = summaries_lto->get_create (cgraph_node::get (f->decl));\n+\t    summaries_lto->remove (fnode);\n+\t  summary_lto = summaries_lto->get_create (fnode);\n \t}\n       if (!fnspec_summaries)\n \tfnspec_summaries = new fnspec_summaries_t (symtab);\n@@ -3036,13 +3036,11 @@ analyze_function (function *f, bool ipa)\n \t{\n \t  if (!summary->loads->every_base && !summary->loads->bases\n \t      && !summary->calls_interposable)\n-\t    fixup_cfg = ipa_make_function_const\n-\t\t   (cgraph_node::get (current_function_decl),\n-\t\t    summary->side_effects, true);\n+\t    fixup_cfg = ipa_make_function_const (fnode,\n+\t\t\t\t\t\t summary->side_effects, true);\n \t  else\n-\t    fixup_cfg = ipa_make_function_pure\n-\t\t   (cgraph_node::get (current_function_decl),\n-\t\t    summary->side_effects, true);\n+\t    fixup_cfg = ipa_make_function_pure (fnode,\n+\t\t\t\t\t\tsummary->side_effects, true);\n \t}\n     }\n   if (summary && !summary->useful_p (ecf_flags))"}]}