{"sha": "cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjZDBhMmNjZmY1YjllMTg5OTZkNGM0ZTQ2YTkzNmM0NTQzZGIyMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-16T11:35:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-16T11:35:56Z"}, "message": "type_traits: Implement is_function.\n\n2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_function.\n\t(struct __sfinae_types, struct __is_function_helper): New.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_object/is_object.cc: New.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_object/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_function/is_function.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_function/typedefs.cc: Likewise.\n\nFrom-SVN: r92258", "tree": {"sha": "9143061946f2e29d072ea75e0268d0fa900d2166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9143061946f2e29d072ea75e0268d0fa900d2166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/comments", "author": null, "committer": null, "parents": [{"sha": "8a784e4a1772379577b0fe91de4b387390573435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a784e4a1772379577b0fe91de4b387390573435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a784e4a1772379577b0fe91de4b387390573435"}], "stats": {"total": 238, "additions": 226, "deletions": 12}, "files": [{"sha": "6a8e4216307957a485c048a6a355c2de29629b15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "patch": "@@ -1,3 +1,16 @@\n+2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_function.\n+\t(struct __sfinae_types, struct __is_function_helper): New.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_object/is_object.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_object/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_function/is_function.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_function/typedefs.cc: Likewise.\n+\n 2004-12-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits (extent): Minor tweak (i.e., public)."}, {"sha": "0e74d3ec0a23f944972701c5c13352840fde742f", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "patch": "@@ -28,21 +28,17 @@\n #include <bits/c++config.h>\n #include <cstddef>\n \n-//namespace std::tr1\n+// namespace std::tr1\n namespace std\n {\n namespace tr1\n {\n-  /// @brief  helper classes [4.3].\n-  template<typename _Tp, _Tp __v>\n-    struct integral_constant\n-    {\n-      static const _Tp                      value = __v;\n-      typedef _Tp                           value_type;\n-      typedef integral_constant<_Tp, __v>   type;\n-    };\n-  typedef integral_constant<bool, true>     true_type;\n-  typedef integral_constant<bool, false>    false_type;\n+  // For use in is_function and elsewhere.\n+  struct __sfinae_types\n+  {\n+    typedef char __one;\n+    typedef struct { char __arr[2]; } __two;\n+  };\n \n #define _DEFINE_SPEC_HELPER(_Header, _Spec)                      \\\n   template _Header                                               \\\n@@ -55,6 +51,17 @@ namespace tr1\n   _DEFINE_SPEC_HELPER(_Header, _Trait<_Type volatile>)           \\\n   _DEFINE_SPEC_HELPER(_Header, _Trait<_Type const volatile>)\n \n+  /// @brief  helper classes [4.3].\n+  template<typename _Tp, _Tp __v>\n+    struct integral_constant\n+    {\n+      static const _Tp                      value = __v;\n+      typedef _Tp                           value_type;\n+      typedef integral_constant<_Tp, __v>   type;\n+    };\n+  typedef integral_constant<bool, true>     true_type;\n+  typedef integral_constant<bool, false>    false_type;\n+\n   /// @brief  primary type categories [4.5.1].\n   template<typename>\n     struct is_void\n@@ -126,9 +133,30 @@ namespace tr1\n   \n   template<typename _Tp>\n     struct is_class;\n+\n+  template<typename _Tp>\n+    struct __is_function_helper\n+    : public __sfinae_types\n+    {\n+    private:\n+      template<typename>\n+        static __one\n+        __test(...);\n+\n+      template<typename _Up>\n+        static __two\n+        __test(_Up (*) [1]);\n+    \n+    public:\n+      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n+    };\n   \n   template<typename _Tp>\n-    struct is_function;\n+    struct is_function\n+    : public integral_constant<bool, (__is_function_helper<_Tp>::__value\n+\t\t\t\t      && !is_reference<_Tp>::value\n+\t\t\t\t      && !is_void<_Tp>::value)>\n+    { };\n \n   /// @brief  composite type traits [4.5.2].\n   template<typename _Tp>"}, {"sha": "99925d067a67aecf7a0393c294a7d9f07a8dfa30", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_object/is_object.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2Fis_object.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2Fis_object.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2Fis_object.cc?ref=cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "patch": "@@ -0,0 +1,50 @@\n+// 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.2 Composite type traits\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_object;\n+  using namespace __gnu_test;\n+  \n+  VERIFY( (test_category<is_object, int (int)>(false)) );\n+  VERIFY( (test_category<is_object, ClassType (ClassType)>(false)) );\n+  VERIFY( (test_category<is_object, float (int, float, int[], int&)>(false)) );\n+  VERIFY( (test_category<is_object, int&>(false)) );\n+  VERIFY( (test_category<is_object, ClassType&>(false)) );\n+  VERIFY( (test_category<is_object, int(&)(int)>(false)) );\n+  VERIFY( (test_category<is_object, void>(false)) );\n+  VERIFY( (test_category<is_object, const void>(false)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_object, ClassType>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a9529223e4b9fad510c667edcd1cdb1c62893314", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_object/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2Ftypedefs.cc?ref=cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_object<int>            test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "0f79758b58d56150124f1564c87fd18fd9995b15", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/is_function.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc?ref=cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "patch": "@@ -0,0 +1,51 @@\n+// 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_function;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_function, int (int)>(true)) );\n+  VERIFY( (test_category<is_function, ClassType (ClassType)>(true)) );\n+  VERIFY( (test_category<is_function, float (int, float, int[], int&)>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_function, int&>(false)) );\n+  VERIFY( (test_category<is_function, void>(false)) );\n+  VERIFY( (test_category<is_function, const void>(false)) );\n+  \n+  // Sanity check.\n+  VERIFY( (test_category<is_function, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "805b805370df93657ca7ddf45fc5bef955d25b8d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacd0a2ccff5b9e18996d4c4e46a936c4543db22/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Ftypedefs.cc?ref=cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_function<int>          test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}