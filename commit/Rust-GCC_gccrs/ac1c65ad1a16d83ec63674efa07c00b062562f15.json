{"sha": "ac1c65ad1a16d83ec63674efa07c00b062562f15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxYzY1YWQxYTE2ZDgzZWM2MzY3NGVmYTA3YzAwYjA2MjU2MmYxNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-05T16:33:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-05T16:41:53Z"}, "message": "support TARGET_MEM_REF in C/C++ error pretty-printing [PR97197]\n\n> See my comment above for Martins attempts to improve things.  I don't\n> really want to try decide what to do with those late diagnostic IL\n> printing but my commit was blamed for showing target-mem-ref unsupported.\n>\n> I don't have much time to spend to think what to best print and what not,\n> but yes, printing only the MEM_REF part is certainly imprecise.\n\nHere is an updated version of the patch that prints TARGET_MEM_REF the way\nit should be printed - as C representation of what it actually means.\nOf course it would be better to have the original expressions, but with the\nlate diagnostics we no longer have them.\n\n2020-10-05  Richard Biener  <rguenther@suse.de>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/97197\ngcc/cp/\n\t* error.c (dump_expr): Handle TARGET_MEM_REF.\ngcc/c-family/\n\t* c-pretty-print.c: Include langhooks.h.\n\t(c_pretty_printer::postfix_expression): Handle TARGET_MEM_REF as\n\texpression.\n\t(c_pretty_printer::expression): Handle TARGET_MEM_REF as\n\tunary_expression.\n\t(c_pretty_printer::unary_expression): Handle TARGET_MEM_REF.", "tree": {"sha": "f89a8b33f8afa2ae081f75e9762bffc3c3a798f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f89a8b33f8afa2ae081f75e9762bffc3c3a798f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac1c65ad1a16d83ec63674efa07c00b062562f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1c65ad1a16d83ec63674efa07c00b062562f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1c65ad1a16d83ec63674efa07c00b062562f15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1c65ad1a16d83ec63674efa07c00b062562f15/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f92a504fdd943527687faf9557e0b39ff7fe6125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92a504fdd943527687faf9557e0b39ff7fe6125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92a504fdd943527687faf9557e0b39ff7fe6125"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "8953e3b678b8b70a55ec145b1b61b697d9e0660c", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1c65ad1a16d83ec63674efa07c00b062562f15/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1c65ad1a16d83ec63674efa07c00b062562f15/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=ac1c65ad1a16d83ec63674efa07c00b062562f15", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"tree-pretty-print.h\"\n #include \"selftest.h\"\n+#include \"langhooks.h\"\n \n /* The pretty-printer code is primarily designed to closely follow\n    (GNU) C and C++ grammars.  That is to be contrasted with spaghetti\n@@ -1693,6 +1694,7 @@ c_pretty_printer::postfix_expression (tree e)\n       break;\n \n     case MEM_REF:\n+    case TARGET_MEM_REF:\n       expression (e);\n       break;\n \n@@ -1859,6 +1861,62 @@ c_pretty_printer::unary_expression (tree e)\n \t}\n       break;\n \n+    case TARGET_MEM_REF:\n+      /* TARGET_MEM_REF can't appear directly from source, but can appear\n+\t during late GIMPLE optimizations and through late diagnostic we might\n+\t need to support it.  Print it as dereferencing of a pointer after\n+\t cast to the TARGET_MEM_REF type, with pointer arithmetics on some\n+\t pointer to single byte types, so\n+\t *(type *)((char *) ptr + step * index + index2) if all the operands\n+\t are present and the casts are needed.  */\n+      pp_c_star (this);\n+      if (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (TMR_BASE (e)))) == NULL_TREE\n+\t  || !integer_onep (TYPE_SIZE_UNIT\n+\t\t\t\t(TREE_TYPE (TREE_TYPE (TMR_BASE (e))))))\n+\t{\n+\t  if (TYPE_SIZE_UNIT (TREE_TYPE (e))\n+\t      && integer_onep (TYPE_SIZE_UNIT (TREE_TYPE (e))))\n+\t    {\n+\t      pp_c_left_paren (this);\n+\t      pp_c_type_cast (this, build_pointer_type (TREE_TYPE (e)));\n+\t    }\n+\t  else\n+\t    {\n+\t      pp_c_type_cast (this, build_pointer_type (TREE_TYPE (e)));\n+\t      pp_c_left_paren (this);\n+\t      pp_c_type_cast (this, build_pointer_type (char_type_node));\n+\t    }\n+\t}\n+      else if (!lang_hooks.types_compatible_p\n+\t\t  (TREE_TYPE (e), TREE_TYPE (TREE_TYPE (TMR_BASE (e)))))\n+\t{\n+\t  pp_c_type_cast (this, build_pointer_type (TREE_TYPE (e)));\n+\t  pp_c_left_paren (this);\n+\t}\n+      else\n+\tpp_c_left_paren (this);\n+      pp_c_cast_expression (this, TMR_BASE (e));\n+      if (TMR_STEP (e) && TMR_INDEX (e))\n+\t{\n+\t  pp_plus (this);\n+\t  pp_c_cast_expression (this, TMR_INDEX (e));\n+\t  pp_c_star (this);\n+\t  pp_c_cast_expression (this, TMR_STEP (e));\n+\t}\n+      if (TMR_INDEX2 (e))\n+\t{\n+\t  pp_plus (this);\n+\t  pp_c_cast_expression (this, TMR_INDEX2 (e));\n+\t}\n+      if (!integer_zerop (TMR_OFFSET (e)))\n+\t{\n+\t  pp_plus (this);\n+\t  pp_c_integer_constant (this,\n+\t\t\t\t fold_convert (ssizetype, TMR_OFFSET (e)));\n+\t}\n+      pp_c_right_paren (this);\n+      break;\n+\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       pp_c_ws_string (this, code == REALPART_EXPR ? \"__real__\" : \"__imag__\");\n@@ -2295,6 +2353,7 @@ c_pretty_printer::expression (tree e)\n     case ADDR_EXPR:\n     case INDIRECT_REF:\n     case MEM_REF:\n+    case TARGET_MEM_REF:\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:"}, {"sha": "ad22b00cb0b558ba72e36a465aa37f74711a31f2", "filename": "gcc/cp/error.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1c65ad1a16d83ec63674efa07c00b062562f15/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1c65ad1a16d83ec63674efa07c00b062562f15/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ac1c65ad1a16d83ec63674efa07c00b062562f15", "patch": "@@ -2400,6 +2400,64 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n \t}\n       break;\n \n+    case TARGET_MEM_REF:\n+      /* TARGET_MEM_REF can't appear directly from source, but can appear\n+\t during late GIMPLE optimizations and through late diagnostic we might\n+\t need to support it.  Print it as dereferencing of a pointer after\n+\t cast to the TARGET_MEM_REF type, with pointer arithmetics on some\n+\t pointer to single byte types, so\n+\t *(type *)((char *) ptr + step * index + index2) if all the operands\n+\t are present and the casts are needed.  */\n+      pp_cxx_star (pp);\n+      pp_cxx_left_paren (pp);\n+      if (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (TMR_BASE (t)))) == NULL_TREE\n+\t  || !integer_onep (TYPE_SIZE_UNIT\n+\t\t\t\t(TREE_TYPE (TREE_TYPE (TMR_BASE (t))))))\n+\t{\n+\t  if (TYPE_SIZE_UNIT (TREE_TYPE (t))\n+\t      && integer_onep (TYPE_SIZE_UNIT (TREE_TYPE (t))))\n+\t    {\n+\t      pp_cxx_left_paren (pp);\n+\t      dump_type (pp, build_pointer_type (TREE_TYPE (t)), flags);\n+\t    }\n+\t  else\n+\t    {\n+\t      dump_type (pp, build_pointer_type (TREE_TYPE (t)), flags);\n+\t      pp_cxx_right_paren (pp);\n+\t      pp_cxx_left_paren (pp);\n+\t      pp_cxx_left_paren (pp);\n+\t      dump_type (pp, build_pointer_type (char_type_node), flags);\n+\t    }\n+\t  pp_cxx_right_paren (pp);\n+\t}\n+      else if (!same_type_p (TREE_TYPE (t),\n+\t\t\t     TREE_TYPE (TREE_TYPE (TMR_BASE (t)))))\n+\t{\n+\t  dump_type (pp, build_pointer_type (TREE_TYPE (t)), flags);\n+\t  pp_cxx_right_paren (pp);\n+\t  pp_cxx_left_paren (pp);\n+\t}\n+      dump_expr (pp, TMR_BASE (t), flags);\n+      if (TMR_STEP (t) && TMR_INDEX (t))\n+\t{\n+\t  pp_cxx_ws_string (pp, \"+\");\n+\t  dump_expr (pp, TMR_INDEX (t), flags);\n+\t  pp_cxx_ws_string (pp, \"*\");\n+\t  dump_expr (pp, TMR_STEP (t), flags);\n+\t}\n+      if (TMR_INDEX2 (t))\n+\t{\n+\t  pp_cxx_ws_string (pp, \"+\");\n+\t  dump_expr (pp, TMR_INDEX2 (t), flags);\n+\t}\n+      if (!integer_zerop (TMR_OFFSET (t)))\n+\t{\n+\t  pp_cxx_ws_string (pp, \"+\");\n+\t  dump_expr (pp, fold_convert (ssizetype, TMR_OFFSET (t)), flags);\n+\t}\n+      pp_cxx_right_paren (pp);\n+      break;\n+\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:"}]}