{"sha": "cd6ca96f5d530e4ee07b65ac8b075119ba5bb035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2Y2E5NmY1ZDUzMGU0ZWUwN2I2NWFjOGIwNzUxMTliYTViYjAzNQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2021-06-29T04:01:45Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2021-07-15T05:57:09Z"}, "message": "[POWER10] __morestack calls from pcrel code\n\nCompiling gcc/testsuite/gcc.dg/split-*.c and others with -mcpu=power10\nand linking with a non-pcrel libgcc results in crashes due to the\npower10 pcrel code not having r2 set for the generic-morestack.c\nfunctions called from __morestack.  There is also a problem when\nnon-pcrel code calls a pcrel libgcc.  See the patch comments.\n\nA similar situation theoretically occurs with ELFv1 multi-toc\nexecutables, when __morestack might be located in a different toc\ngroup to its caller.  This patch makes no attempt to fix that, since\nthe gold linker does not support multi-toc (gold is needed for proper\nsupport of -fsplit-stack code) nor does gcc emit __morestack calls\nthat support multi-toc.\n\n\t* config/rs6000/morestack.S (R2_SAVE): Define.\n\t(__morestack): Save and restore r2.  Set up r2 for called\n\tfunctions.", "tree": {"sha": "5656cb884387d4b3aae4d1aec237dbceaa1bfaa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5656cb884387d4b3aae4d1aec237dbceaa1bfaa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd6ca96f5d530e4ee07b65ac8b075119ba5bb035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6ca96f5d530e4ee07b65ac8b075119ba5bb035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6ca96f5d530e4ee07b65ac8b075119ba5bb035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6ca96f5d530e4ee07b65ac8b075119ba5bb035/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3b383cf8825197e714a4a21852eca071f8e67e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3b383cf8825197e714a4a21852eca071f8e67e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3b383cf8825197e714a4a21852eca071f8e67e"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "a2e255e5c215a994a6f03938ce4cd1003087a1e7", "filename": "libgcc/config/rs6000/morestack.S", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6ca96f5d530e4ee07b65ac8b075119ba5bb035/libgcc%2Fconfig%2Frs6000%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6ca96f5d530e4ee07b65ac8b075119ba5bb035/libgcc%2Fconfig%2Frs6000%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fmorestack.S?ref=cd6ca96f5d530e4ee07b65ac8b075119ba5bb035", "patch": "@@ -31,6 +31,7 @@\n #define PARAMS 48\n #endif\n #define MORESTACK_FRAMESIZE\t(PARAMS+96)\n+#define R2_SAVE\t\t\t-MORESTACK_FRAMESIZE+PARAMS-8\n #define PARAMREG_SAVE\t\t-MORESTACK_FRAMESIZE+PARAMS+0\n #define STATIC_CHAIN_SAVE\t-MORESTACK_FRAMESIZE+PARAMS+64\n #define R29_SAVE\t\t-MORESTACK_FRAMESIZE+PARAMS+72\n@@ -143,6 +144,17 @@ ENTRY0(__morestack_non_split)\n # cr7 must also be preserved.\n \n ENTRY0(__morestack)\n+\n+#if _CALL_ELF == 2\n+# Functions with localentry bits of zero cannot make calls if those\n+# calls might change r2.  This is true generally, and also true for\n+# __morestack with its special calling convention.  When __morestack's\n+# caller is non-pcrel but libgcc is pcrel, the functions called here\n+# might modify r2.  r2 must be preserved on exit, and also restored\n+# for the call back to our caller.\n+\tstd %r2,R2_SAVE(%r1)\n+#endif\n+\n # Save parameter passing registers, our arguments, lr, r29\n # and use r29 as a frame pointer.\n \tstd %r3,PARAMREG_SAVE+0(%r1)\n@@ -161,10 +173,24 @@ ENTRY0(__morestack)\n \tstd %r12,LINKREG_SAVE(%r1)\n \tstd %r3,NEWSTACKSIZE_SAVE(%r1)\t# new stack size\n \tmr %r29,%r1\n+#if _CALL_ELF == 2\n+\t.cfi_offset %r2,R2_SAVE\n+#endif\n \t.cfi_offset %r29,R29_SAVE\n \t.cfi_def_cfa_register %r29\n \tstdu %r1,-MORESTACK_FRAMESIZE(%r1)\n \n+#if _CALL_ELF == 2 && !defined __PCREL__\n+# If this isn't a pcrel libgcc then the functions we call here will\n+# require r2 to be valid.  If __morestack is called from pcrel code r2\n+# won't be valid.  Set it up.\n+\tbcl 20,31,1f\n+1:\n+\tmflr %r12\n+\taddis %r2,%r12,.TOC.-1b@ha\n+\taddi %r2,%r2,.TOC.-1b@l\n+#endif\n+\n \t# void __morestack_block_signals (void)\n \tbl JUMP_TARGET(__morestack_block_signals)\n \n@@ -199,6 +225,9 @@ ENTRY0(__morestack)\n # instructions after __morestack's return address.\n #\n \tld %r12,LINKREG_SAVE(%r29)\n+#if _CALL_ELF == 2\n+\tld %r2,R2_SAVE(%r29)\n+#endif\n \tld %r3,PARAMREG_SAVE+0(%r29)\t# restore arg regs\n \tld %r4,PARAMREG_SAVE+8(%r29)\n \tld %r5,PARAMREG_SAVE+16(%r29)\n@@ -228,6 +257,15 @@ ENTRY0(__morestack)\n \tstd %r10,PARAMREG_SAVE+56(%r29)\n #endif\n \n+#if _CALL_ELF == 2 && !defined __PCREL__\n+# r2 was restored for calling back into our caller.  Set it up again.\n+\tbcl 20,31,1f\n+1:\n+\tmflr %r12\n+\taddis %r2,%r12,.TOC.-1b@ha\n+\taddi %r2,%r2,.TOC.-1b@l\n+#endif\n+\n \tbl JUMP_TARGET(__morestack_block_signals)\n \n \t# void *__generic_releasestack (size_t *pavailable)\n@@ -249,6 +287,9 @@ ENTRY0(__morestack)\n # Restore return value regs, and return.\n \tld %r0,LINKREG_SAVE(%r29)\n \tmtlr %r0\n+#if _CALL_ELF == 2\n+\tld %r2,R2_SAVE(%r29)\n+#endif\n \tld %r3,PARAMREG_SAVE+0(%r29)\n \tld %r4,PARAMREG_SAVE+8(%r29)\n \tld %r5,PARAMREG_SAVE+16(%r29)"}]}