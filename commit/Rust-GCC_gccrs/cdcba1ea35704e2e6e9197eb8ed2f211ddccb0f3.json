{"sha": "cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjYmExZWEzNTcwNGUyZTZlOTE5N2ViOGVkMmYyMTFkZGNjYjBmMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2005-10-20T19:30:23Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-10-20T19:30:23Z"}, "message": "re PR middle-end/24295 (Xorg broken, #pragma weak foo = bar no longer causes bar to be referenced)\n\ngcc/ChangeLog:\nPR middle-end/24295\n* cgraphunit.c (cgraph_varpool_remove_unreferenced_decls): Mark\nalias targets.\n* varasm.c (find_decl_and_mark_needed): After cgraph global info\nis ready, stop marking functions, but still mark variables.\ngcc/testsuite/ChangeLog:\nPR middle-end/24295\n* g++.old-deja/g++.abi/vtable2.C: Do not introduce external\ndeclarations with the same names as thunks' alias targets, use\naliases instead.\n* gcc.dg/attr-alias-3.c: New test.\n* gcc.dg/weak/weak-14.c, gcc.dg/weak/weak-14a.c: New test.\n\nFrom-SVN: r105688", "tree": {"sha": "371eace32311ca26ea6a068562168710b5a04b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/371eace32311ca26ea6a068562168710b5a04b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/comments", "author": null, "committer": null, "parents": [{"sha": "94c813b4572f371dcdb8aca1ed4bf0d37cde47a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c813b4572f371dcdb8aca1ed4bf0d37cde47a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c813b4572f371dcdb8aca1ed4bf0d37cde47a6"}], "stats": {"total": 148, "additions": 128, "deletions": 20}, "files": [{"sha": "0a6e2a09288af5e97014b2d5294e8d643056e089", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "patch": "@@ -1,3 +1,11 @@\n+2005-10-20  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR middle-end/24295\n+\t* cgraphunit.c (cgraph_varpool_remove_unreferenced_decls): Mark\n+\talias targets.\n+\t* varasm.c (find_decl_and_mark_needed): After cgraph global info\n+\tis ready, stop marking functions, but still mark variables.\n+\n 2005-10-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/24439"}, {"sha": "244367d2899fe67ddddb2195f5e1d3e575b1b353", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "patch": "@@ -322,6 +322,8 @@ cgraph_varpool_remove_unreferenced_decls (void)\n \n       node = next;\n     }\n+  /* Make sure we mark alias targets as used targets.  */\n+  finish_aliases_1 ();\n   cgraph_varpool_analyze_pending_decls ();\n }\n "}, {"sha": "81cf341705014ff7a02edf187bb5cd33d24b4ba6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "patch": "@@ -1,3 +1,12 @@\n+2005-10-20  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR middle-end/24295\n+\t* g++.old-deja/g++.abi/vtable2.C: Do not introduce external\n+\tdeclarations with the same names as thunks' alias targets, use\n+\taliases instead.\n+\t* gcc.dg/attr-alias-3.c: New test.\n+\t* gcc.dg/weak/weak-14.c, gcc.dg/weak/weak-14a.c: New test.\n+\n 2005-10-20  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/22618"}, {"sha": "bea06e310ea60c83452b3228a78ef464ad7896b8", "filename": "gcc/testsuite/g++.old-deja/g++.abi/vtable2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C?ref=cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "patch": "@@ -124,8 +124,8 @@ void S4::s1 ()\n // These are tricks to allow us to get raw function pointers for\n // member functions.\n extern \"C\" {\n-void _ZN2S32s3Ev ();\n-void _ZN2S42s1Ev ();\n+  void S3_s3 () __attribute__((__alias__ (\"_ZN2S32s3Ev\")));\n+  void S4_s1 () __attribute__((__alias__ (\"_ZN2S42s1Ev\")));\n }\n \n // IA-64 uses function descriptors not function pointers in its vtables.\n@@ -169,10 +169,10 @@ int main ()\n   INC_VDATA (vtbl, 1);\n   // Skip the RTTI entry.\n   INC_VDATA (vtbl, 1);\n-  if (! CMP_VPTR (vtbl, &_ZN2S32s3Ev))\n+  if (! CMP_VPTR (vtbl, &S3_s3))\n     return 5;\n   INC_VPTR (vtbl);\n-  if (! CMP_VPTR (vtbl, &_ZN2S42s1Ev))\n+  if (! CMP_VPTR (vtbl, &S4_s1))\n     return 6;\n   INC_VPTR (vtbl);\n   // The S1 vbase offset."}, {"sha": "acd1969a3ff86eea45ab1f95f955181a8fad96cc", "filename": "gcc/testsuite/gcc.dg/attr-alias-3.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-3.c?ref=cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "patch": "@@ -0,0 +1,55 @@\n+// { dg-do link }\n+// { dg-require-alias \"\" }\n+// { dg-options \"-O2 -fno-common\" }\n+\n+// Copyright 2005 Free Software Foundation, Inc.\n+// Contributed by Alexandre Oliva <aoliva@redhat.com>\n+\n+// PR middle-end/24295\n+\n+// The unit-at-a-time call graph code used to fail to emit variables\n+// without external linkage that were only used indirectly, through\n+// aliases.  Although the PR above is about #pragma weak-introduced\n+// aliases, the underlying machinery is the same.\n+\n+#ifndef ATTRIBUTE_USED\n+# define ATTRIBUTE_USED __attribute__((used))\n+#endif\n+\n+static int lv1;\n+extern int Av1a __attribute__((alias (\"lv1\")));\n+int *pv1a = &Av1a;\n+\n+static int lv2;\n+extern int Av2a __attribute__((alias (\"lv2\")));\n+int *pv2a = &lv2;\n+\n+static int lv3;\n+extern int Av3a __attribute__((alias (\"lv3\")));\n+static int *pv3a ATTRIBUTE_USED = &Av3a;\n+\n+static int lv4;\n+extern int Av4a __attribute__((alias (\"lv4\")));\n+static int *pv4a = &Av4a;\n+\n+typedef void ftype(void);\n+\n+static void lf1(void) {}\n+extern ftype Af1a __attribute__((alias (\"lf1\")));\n+ftype *pf1a = &Af1a;\n+\n+static void lf2(void) {}\n+extern ftype Af2a __attribute__((alias (\"lf2\")));\n+ftype *pf2a = &Af2a;\n+\n+static void lf3(void) {}\n+extern ftype Af3a __attribute__((alias (\"lf3\")));\n+static ftype *pf3a ATTRIBUTE_USED = &Af3a;\n+\n+static void lf4(void) {}\n+extern ftype Af4a __attribute__((alias (\"lf4\")));\n+static ftype *pf4a = &Af4a;\n+\n+main() {\n+  asm volatile (\"\" : : \"m\" (pv4a), \"m\" (pf4a));\n+}"}, {"sha": "fa15624b66fd8264ba280142e24938163efe5dc0", "filename": "gcc/testsuite/gcc.dg/weak/weak-14.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-14.c?ref=cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run }\n+// { dg-require-weak \"\" }\n+// { dg-options \"-O2 -fno-common\" }\n+\n+// Copyright 2005 Free Software Foundation, Inc.\n+// Contributed by Alexandre Oliva <aoliva@redhat.com>\n+\n+// PR middle-end/24295\n+\n+// The unit-at-a-time call graph code used to fail to emit variables\n+// without external linkage that were only used indirectly, through\n+// aliases.  We might then get linker failures because the static\n+// variable was not defined, or run-time errors because the weak alias\n+// ended up pointing somewhere random.\n+\n+#include <stdlib.h>\n+\n+static unsigned long lv1 = 0xdeadbeefUL;\n+#pragma weak Av1a = lv1\n+extern unsigned long Av1a;\n+\n+static unsigned long lf1(void) { return 0x510bea7UL; }\n+#pragma weak Af1a = lf1\n+extern unsigned long Af1a(void);\n+\n+int main (void) {\n+  if (! &Av1a\n+      || ! &Af1a\n+      || Av1a != 0xdeadbeefUL\n+      || Af1a() != 0x510bea7UL)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "2aa5e6904daf6673610f93ead3f0d8c290d12e77", "filename": "gcc/varasm.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=cdcba1ea35704e2e6e9197eb8ed2f211ddccb0f3", "patch": "@@ -4560,27 +4560,28 @@ find_decl_and_mark_needed (tree decl, tree target)\n   struct cgraph_node *fnode = NULL;\n   struct cgraph_varpool_node *vnode = NULL;\n \n-  /* C++ thunk emitting code produces aliases late in the game.\n-     Avoid confusing cgraph code in that case.  */\n-  if (!cgraph_global_info_ready)\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\t{\n-\t  fnode = cgraph_node_for_asm (target);\n-\t  if (fnode == NULL)\n-\t    vnode = cgraph_varpool_node_for_asm (target);\n-\t}\n-      else\n-\t{\n-\t  vnode = cgraph_varpool_node_for_asm (target);\n-\t  if (vnode == NULL)\n-\t    fnode = cgraph_node_for_asm (target);\n-\t}\n+      fnode = cgraph_node_for_asm (target);\n+      if (fnode == NULL)\n+\tvnode = cgraph_varpool_node_for_asm (target);\n+    }\n+  else\n+    {\n+      vnode = cgraph_varpool_node_for_asm (target);\n+      if (vnode == NULL)\n+\tfnode = cgraph_node_for_asm (target);\n     }\n \n   if (fnode)\n     {\n-      cgraph_mark_needed_node (fnode);\n+      /* We can't mark function nodes as used after cgraph global info\n+\t is finished.  This wouldn't generally be necessary, but C++\n+\t virtual table thunks are introduced late in the game and\n+\t might seem like they need marking, although in fact they\n+\t don't.  */\n+      if (! cgraph_global_info_ready)\n+\tcgraph_mark_needed_node (fnode);\n       return fnode->decl;\n     }\n   else if (vnode)"}]}