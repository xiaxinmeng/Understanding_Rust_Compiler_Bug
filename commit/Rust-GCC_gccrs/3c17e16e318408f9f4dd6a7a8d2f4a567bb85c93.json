{"sha": "3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxN2UxNmUzMTg0MDhmOWY0ZGQ2YTdhOGQyZjRhNTY3YmI4NWM5Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-10-02T22:21:02Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-10-02T22:21:02Z"}, "message": "re PR c++/29226 (ICE in make_decl_rtl, at varasm.c:886)\n\n\tPR c++/29226\n\t* typeck.c (cxx_sizeof_or_alignof_type): Tidy.  In templates, do\n\tnot try to actually evaluate sizeof for a VLA type.\n\tPR c++/29226\n\t* g++.dg/template/vla1.C: New test.\n\nFrom-SVN: r117375", "tree": {"sha": "0de8388354780a356e1169313f94c5b902134961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de8388354780a356e1169313f94c5b902134961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/comments", "author": null, "committer": null, "parents": [{"sha": "1c846af9c5feacfaaff015a38422eedebb3fdf95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c846af9c5feacfaaff015a38422eedebb3fdf95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c846af9c5feacfaaff015a38422eedebb3fdf95"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "3c2ff365f9d87d18256a7c4e2d8e50af719245ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "patch": "@@ -1,3 +1,9 @@\n+2006-10-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29226\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Tidy.  In templates, do\n+\tnot try to actually evaluate sizeof for a VLA type.\n+\n 2006-10-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29105"}, {"sha": "9f8d5e4fad9e338b389b7158869cb6ac15f6b25e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "patch": "@@ -1241,38 +1241,39 @@ compparms (tree parms1, tree parms2)\n tree\n cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n {\n-  enum tree_code type_code;\n   tree value;\n-  const char *op_name;\n \n   gcc_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR);\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  if (dependent_type_p (type))\n-    {\n-      value = build_min (op, size_type_node, type);\n-      TREE_READONLY (value) = 1;\n-      return value;\n-    }\n-\n-  op_name = operator_name_info[(int) op].name;\n-\n   type = non_reference (type);\n-  type_code = TREE_CODE (type);\n-\n-  if (type_code == METHOD_TYPE)\n+  if (TREE_CODE (type) == METHOD_TYPE)\n     {\n       if (complain && (pedantic || warn_pointer_arith))\n-\tpedwarn (\"invalid application of %qs to a member function\", op_name);\n+\tpedwarn (\"invalid application of %qs to a member function\", \n+\t\t operator_name_info[(int) op].name);\n       value = size_one_node;\n     }\n-  else\n-    value = c_sizeof_or_alignof_type (complete_type (type),\n-\t\t\t\t      op == SIZEOF_EXPR,\n-\t\t\t\t      complain);\n \n-  return value;\n+  if (dependent_type_p (type)\n+      /* VLA types will have a non-constant size.  In the body of an\n+\t uninstantiated template, we don't need to try to compute the\n+\t value, because the sizeof expression is not an integral\n+\t constant expression in that case.  And, if we do try to\n+\t compute the value, we'll likely end up with SAVE_EXPRs, which\n+\t the template substitution machinery does not expect to see.  */\n+      || (processing_template_decl && \n+\t  TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST))\n+    {\n+      value = build_min (op, size_type_node, type);\n+      TREE_READONLY (value) = 1;\n+      return value;\n+    }\n+\n+  return c_sizeof_or_alignof_type (complete_type (type),\n+\t\t\t\t   op == SIZEOF_EXPR,\n+\t\t\t\t   complain);\n }\n \n /* Process a sizeof expression where the operand is an expression.  */"}, {"sha": "2b1bcadafdb94eeffa5cdb80765357245b0d977f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "patch": "@@ -1,3 +1,8 @@\n+2006-10-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29226\n+\t* g++.dg/template/vla1.C: New test.\n+\n 2006-10-02  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/29210"}, {"sha": "fe93440f1f2630ba1b2dd638252b8561ab1c2f6d", "filename": "gcc/testsuite/g++.dg/template/vla1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvla1.C?ref=3c17e16e318408f9f4dd6a7a8d2f4a567bb85c93", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/29226\n+// { dg-options \"\" }\n+\n+template <bool>\n+static int label (int w)\n+{\n+  sizeof(int[w]);\n+}\n+int a = label<false>(1);"}]}