{"sha": "a2f91a52b4b989b52f0ccdabc2d9aead05c8056b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmOTFhNTJiNGI5ODliNTJmMGNjZGFiYzJkOWFlYWQwNWM4MDU2Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-05-24T12:38:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-08T13:34:16Z"}, "message": "[Ada] Revert meaning of -gnatd_b\n\ngcc/ada/\n\n\t* debug.adb, sem_util.adb: Revert meaning of -gnatd_b.\n\t* sem_res.adb: Minor reformatting.", "tree": {"sha": "14bca271f840bfc94b7a71562ae6a9dd21b95aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14bca271f840bfc94b7a71562ae6a9dd21b95aff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb32058b49f20d6532beabf6bee4f7862a515d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb32058b49f20d6532beabf6bee4f7862a515d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb32058b49f20d6532beabf6bee4f7862a515d5"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "599c9c958e1f69b95bb5551ca6e54cf2d918f9cc", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=a2f91a52b4b989b52f0ccdabc2d9aead05c8056b", "patch": "@@ -140,7 +140,7 @@ package body Debug is\n    --  d.Z  Do not enable expansion in configurable run-time mode\n \n    --  d_a  Stop elaboration checks on accept or select statement\n-   --  d_b  Use compatibility model under No_Dynamic_Accessibility_Checks\n+   --  d_b  Use designated type model under No_Dynamic_Accessibility_Checks\n    --  d_c  CUDA compilation : compile for the host\n    --  d_d\n    --  d_e  Ignore entry calls and requeue statements for elaboration\n@@ -956,6 +956,10 @@ package body Debug is\n    --       behavior is similar to that of No_Entry_Calls_In_Elaboration_Code,\n    --       but does not penalize actual entry calls in elaboration code.\n \n+   --  d_b  When the restriction No_Dynamic_Accessibility_Checks is enabled,\n+   --       use the simple \"designated type\" accessibility model, instead of\n+   --       using the implicit level of the anonymous access type declaration.\n+\n    --  d_e  The compiler ignores simple entry calls, asynchronous transfer of\n    --       control, conditional entry calls, timed entry calls, and requeue\n    --       statements in both the static and dynamic elaboration models."}, {"sha": "26e4a07ae31d2d60d1cc7dce61c9e33f83492fe1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a2f91a52b4b989b52f0ccdabc2d9aead05c8056b", "patch": "@@ -13738,8 +13738,7 @@ package body Sem_Res is\n                     Deepest_Type_Access_Level (Target_Type)\n               and then (Nkind (Associated_Node_For_Itype (Opnd_Type)) /=\n                          N_Function_Specification\n-                        or else Ekind (Target_Type) in\n-                                  Anonymous_Access_Kind)\n+                        or else Ekind (Target_Type) in Anonymous_Access_Kind)\n \n               --  Check we are not in a return value ???\n "}, {"sha": "ba84029134540a95a2948d7a559fdd76d05f8292", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f91a52b4b989b52f0ccdabc2d9aead05c8056b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a2f91a52b4b989b52f0ccdabc2d9aead05c8056b", "patch": "@@ -410,17 +410,18 @@ package body Sem_Util is\n               and then No_Dynamic_Accessibility_Checks_Enabled (N)\n               and then Is_Anonymous_Access_Type (Etype (N))\n             then\n-               --  In the alternative model the level is that of the subprogram\n+               --  In the alternative model the level is that of the\n+               --  designated type.\n \n                if Debug_Flag_Underscore_B then\n+                  return Make_Level_Literal (Typ_Access_Level (Etype (N)));\n+\n+               --  Otherwise the level is that of the subprogram\n+\n+               else\n                   return Make_Level_Literal\n                            (Subprogram_Access_Level (Current_Subprogram));\n                end if;\n-\n-               --  Otherwise the level is that of the designated type\n-\n-               return Make_Level_Literal\n-                        (Typ_Access_Level (Etype (N)));\n             end if;\n \n             if Nkind (N) = N_Function_Call then\n@@ -659,24 +660,22 @@ package body Sem_Util is\n                if Allow_Alt_Model\n                  and then No_Dynamic_Accessibility_Checks_Enabled (E)\n                then\n-                  --  In the alternative model the level depends on the\n-                  --  entity's context.\n+                  --  In the alternative model the level is that of the\n+                  --  designated type entity's context.\n \n                   if Debug_Flag_Underscore_B then\n-                     if Is_Formal (E) then\n-                        return Make_Level_Literal\n-                                 (Subprogram_Access_Level\n-                                   (Enclosing_Subprogram (E)));\n-                     end if;\n+                     return Make_Level_Literal (Typ_Access_Level (Etype (E)));\n+\n+                  --  Otherwise the level depends on the entity's context\n \n+                  elsif Is_Formal (E) then\n+                     return Make_Level_Literal\n+                              (Subprogram_Access_Level\n+                                (Enclosing_Subprogram (E)));\n+                  else\n                      return Make_Level_Literal\n                               (Scope_Depth (Enclosing_Dynamic_Scope (E)));\n                   end if;\n-\n-                  --  Otherwise the level is that of the designated type\n-\n-                  return Make_Level_Literal\n-                           (Typ_Access_Level (Etype (E)));\n                end if;\n \n                --  Return the dynamic level in the normal case\n@@ -701,10 +700,11 @@ package body Sem_Util is\n \n             elsif Is_Type (E) then\n                --  When restriction No_Dynamic_Accessibility_Checks is active\n+               --  along with -gnatd_b.\n \n                if Allow_Alt_Model\n                  and then No_Dynamic_Accessibility_Checks_Enabled (E)\n-                 and then not Debug_Flag_Underscore_B\n+                 and then Debug_Flag_Underscore_B\n                then\n                   return Make_Level_Literal (Typ_Access_Level (E));\n                end if;\n@@ -799,11 +799,11 @@ package body Sem_Util is\n                                         = E_Discriminant)\n             then\n                --  When restriction No_Dynamic_Accessibility_Checks is active\n-               --  the level is that of the designated type.\n+               --  and -gnatd_b set, the level is that of the designated type.\n \n                if Allow_Alt_Model\n                  and then No_Dynamic_Accessibility_Checks_Enabled (E)\n-                 and then not Debug_Flag_Underscore_B\n+                 and then Debug_Flag_Underscore_B\n                then\n                   return Make_Level_Literal\n                            (Typ_Access_Level (Etype (E)));\n@@ -825,11 +825,11 @@ package body Sem_Util is\n                          = E_Anonymous_Access_Type\n             then\n                --  When restriction No_Dynamic_Accessibility_Checks is active\n-               --  the level is that of the designated type.\n+               --  and -gnatd_b set, the level is that of the designated type.\n \n                if Allow_Alt_Model\n                  and then No_Dynamic_Accessibility_Checks_Enabled (E)\n-                 and then not Debug_Flag_Underscore_B\n+                 and then Debug_Flag_Underscore_B\n                then\n                   return Make_Level_Literal\n                            (Typ_Access_Level (Etype (E)));\n@@ -7212,7 +7212,7 @@ package body Sem_Util is\n \n          if Allow_Alt_Model\n            and then No_Dynamic_Accessibility_Checks_Enabled (Typ)\n-           and then Debug_Flag_Underscore_B\n+           and then not Debug_Flag_Underscore_B\n          then\n             return Type_Access_Level (Typ, Allow_Alt_Model);\n          end if;\n@@ -29176,16 +29176,16 @@ package body Sem_Util is\n             if Allow_Alt_Model\n               and then No_Dynamic_Accessibility_Checks_Enabled (Btyp)\n             then\n-               --  In the normal model, the level of an anonymous access\n+               --  In the -gnatd_b model, the level of an anonymous access\n                --  type is always that of the designated type.\n \n-               if not Debug_Flag_Underscore_B then\n+               if Debug_Flag_Underscore_B then\n                   return Type_Access_Level\n                            (Designated_Type (Btyp), Allow_Alt_Model);\n                end if;\n \n-               --  Otherwise the secondary model dictates special handling\n-               --  depending on the context of the anonymous access type.\n+               --  Otherwise take the context of the anonymous access type into\n+               --  account.\n \n                --  Obtain the defining entity for the internally generated\n                --  anonymous access type."}]}