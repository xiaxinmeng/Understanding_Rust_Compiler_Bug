{"sha": "6c32ee74491f947dafdce3656c6ec9e48a185fdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzMmVlNzQ0OTFmOTQ3ZGFmZGNlMzY1NmM2ZWM5ZTQ4YTE4NWZkYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-08-12T12:32:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-12T12:32:41Z"}, "message": "builtins.def (BUILT_IN_ICEIL{,F,L}, [...]): New builtin definitions.\n\n\t* builtins.def (BUILT_IN_ICEIL{,F,L}, BUILT_IN_IFLOOR{,F,L}\n\tBUILT_IN_IRINT{,F,L}, BUILT_IN_IROUND{,F,L}: New builtin definitions.\n\t* convert.c (convert_to_integer): Convert to BUILT_IN_ICEIL,\n\tBUILT_IN_IFLOOR, BUILT_IN_IRINT or BUILT_INT_IROUND when converting\n\tto integer_type_node.\n\t* fold-const.c (tree_call_nonnegative_warnv_p): Handle BUILT_IN_ICEIL,\n\tBUILT_IN_IFLOOR, BUILT_IN_IRINT and BUILT_INT_IROUND.\n\t* builtins.c (expand_builtin_in): Ditto.\n\t(mathfn_built_in_1): Ditto.\n\t(expand_builtin_int_roundingfn): Handle BUILT_IN_ICEIL and\n\tBUILT_IN_IFLOOR.\n\t(expand_builtin_int_roundingfn_2): Handle BUILT_IN_IRINT and\n\tBUILT_IN_IROUND.\n\t(fold_fixed_mathfn): Canonicalize BUILT_IN_ICEIL, BUILTIN_IN_IFLOOR\n\tBUILT_IN_IRINT and BUILT_IN_IROUND to BUILT_IN_LCEIL,\n\tBUILTIN_IN_LFLOOR, BUILT_IN_LRINT and BUILT_IN_LROUND on ILP32 targets.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/builtins-67.c: New test.\n\t* gcc.target/i386/conversion.c: Ditto.\n\nFrom-SVN: r177694", "tree": {"sha": "cd499a40f57a9bb51448aec4aefe1d8a6decc748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd499a40f57a9bb51448aec4aefe1d8a6decc748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c32ee74491f947dafdce3656c6ec9e48a185fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c32ee74491f947dafdce3656c6ec9e48a185fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c32ee74491f947dafdce3656c6ec9e48a185fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c32ee74491f947dafdce3656c6ec9e48a185fdb/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820"}], "stats": {"total": 259, "additions": 251, "deletions": 8}, "files": [{"sha": "5698e9689ce628c8ce477258a33be1b04409bce3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -1,3 +1,22 @@\n+2011-08-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* builtins.def (BUILT_IN_ICEIL{,F,L}, BUILT_IN_IFLOOR{,F,L}\n+\tBUILT_IN_IRINT{,F,L}, BUILT_IN_IROUND{,F,L}: New builtin definitions.\n+\t* convert.c (convert_to_integer): Convert to BUILT_IN_ICEIL,\n+\tBUILT_IN_IFLOOR, BUILT_IN_IRINT or BUILT_INT_IROUND when converting\n+\tto integer_type_node.\n+\t* fold-const.c (tree_call_nonnegative_warnv_p): Handle BUILT_IN_ICEIL,\n+\tBUILT_IN_IFLOOR, BUILT_IN_IRINT and BUILT_INT_IROUND.\n+\t* builtins.c (expand_builtin_in): Ditto.\n+\t(mathfn_built_in_1): Ditto.\n+\t(expand_builtin_int_roundingfn): Handle BUILT_IN_ICEIL and\n+\tBUILT_IN_IFLOOR.\n+\t(expand_builtin_int_roundingfn_2): Handle BUILT_IN_IRINT and\n+\tBUILT_IN_IROUND.\n+\t(fold_fixed_mathfn): Canonicalize BUILT_IN_ICEIL, BUILTIN_IN_IFLOOR\n+\tBUILT_IN_IRINT and BUILT_IN_IROUND to BUILT_IN_LCEIL,\n+\tBUILTIN_IN_LFLOOR, BUILT_IN_LRINT and BUILT_IN_LROUND on ILP32 targets.\n+\n 2011-08-12  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (extract_range_from_unary_expr_1): Implement"}, {"sha": "fec93221faa7a64a1a39cd6c71bf02eb0c3ff43e", "filename": "gcc/builtins.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -1837,7 +1837,11 @@ mathfn_built_in_1 (tree type, enum built_in_function fn, bool implicit)\n       CASE_MATHFN (BUILT_IN_HUGE_VAL)\n       CASE_MATHFN (BUILT_IN_HYPOT)\n       CASE_MATHFN (BUILT_IN_ILOGB)\n+      CASE_MATHFN (BUILT_IN_ICEIL)\n+      CASE_MATHFN (BUILT_IN_IFLOOR)\n       CASE_MATHFN (BUILT_IN_INF)\n+      CASE_MATHFN (BUILT_IN_IRINT)\n+      CASE_MATHFN (BUILT_IN_IROUND)\n       CASE_MATHFN (BUILT_IN_ISINF)\n       CASE_MATHFN (BUILT_IN_J0)\n       CASE_MATHFN (BUILT_IN_J1)\n@@ -2662,12 +2666,14 @@ expand_builtin_int_roundingfn (tree exp, rtx target)\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n+    CASE_FLT_FN (BUILT_IN_ICEIL):\n     CASE_FLT_FN (BUILT_IN_LCEIL):\n     CASE_FLT_FN (BUILT_IN_LLCEIL):\n       builtin_optab = lceil_optab;\n       fallback_fn = BUILT_IN_CEIL;\n       break;\n \n+    CASE_FLT_FN (BUILT_IN_IFLOOR):\n     CASE_FLT_FN (BUILT_IN_LFLOOR):\n     CASE_FLT_FN (BUILT_IN_LLFLOOR):\n       builtin_optab = lfloor_optab;\n@@ -2720,26 +2726,32 @@ expand_builtin_int_roundingfn (tree exp, rtx target)\n \n       switch (DECL_FUNCTION_CODE (fndecl))\n \t{\n+\tcase BUILT_IN_ICEIL:\n \tcase BUILT_IN_LCEIL:\n \tcase BUILT_IN_LLCEIL:\n \t  name = \"ceil\";\n \t  break;\n+\tcase BUILT_IN_ICEILF:\n \tcase BUILT_IN_LCEILF:\n \tcase BUILT_IN_LLCEILF:\n \t  name = \"ceilf\";\n \t  break;\n+\tcase BUILT_IN_ICEILL:\n \tcase BUILT_IN_LCEILL:\n \tcase BUILT_IN_LLCEILL:\n \t  name = \"ceill\";\n \t  break;\n+\tcase BUILT_IN_IFLOOR:\n \tcase BUILT_IN_LFLOOR:\n \tcase BUILT_IN_LLFLOOR:\n \t  name = \"floor\";\n \t  break;\n+\tcase BUILT_IN_IFLOORF:\n \tcase BUILT_IN_LFLOORF:\n \tcase BUILT_IN_LLFLOORF:\n \t  name = \"floorf\";\n \t  break;\n+\tcase BUILT_IN_IFLOORL:\n \tcase BUILT_IN_LFLOORL:\n \tcase BUILT_IN_LLFLOORL:\n \t  name = \"floorl\";\n@@ -2791,12 +2803,16 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target)\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n+    CASE_FLT_FN (BUILT_IN_IRINT):\n     CASE_FLT_FN (BUILT_IN_LRINT):\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n       builtin_optab = lrint_optab; break;\n+\n+    CASE_FLT_FN (BUILT_IN_IROUND):\n     CASE_FLT_FN (BUILT_IN_LROUND):\n     CASE_FLT_FN (BUILT_IN_LLROUND):\n       builtin_optab = lround_optab; break;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -5401,17 +5417,21 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    CASE_FLT_FN (BUILT_IN_ICEIL):\n     CASE_FLT_FN (BUILT_IN_LCEIL):\n     CASE_FLT_FN (BUILT_IN_LLCEIL):\n     CASE_FLT_FN (BUILT_IN_LFLOOR):\n+    CASE_FLT_FN (BUILT_IN_IFLOOR):\n     CASE_FLT_FN (BUILT_IN_LLFLOOR):\n       target = expand_builtin_int_roundingfn (exp, target);\n       if (target)\n \treturn target;\n       break;\n \n+    CASE_FLT_FN (BUILT_IN_IRINT):\n     CASE_FLT_FN (BUILT_IN_LRINT):\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n+    CASE_FLT_FN (BUILT_IN_IROUND):\n     CASE_FLT_FN (BUILT_IN_LROUND):\n     CASE_FLT_FN (BUILT_IN_LLROUND):\n       target = expand_builtin_int_roundingfn_2 (exp, target);\n@@ -6521,6 +6541,42 @@ fold_fixed_mathfn (location_t loc, tree fndecl, tree arg)\n \t\t\t\tfold_convert_loc (loc, newtype, arg0));\n     }\n \n+  /* Canonicalize iround (x) to lround (x) on ILP32 targets where\n+     sizeof (int) == sizeof (long).  */\n+  if (TYPE_PRECISION (integer_type_node)\n+      == TYPE_PRECISION (long_integer_type_node))\n+    {\n+      tree newfn = NULL_TREE;\n+      switch (fcode)\n+\t{\n+\tCASE_FLT_FN (BUILT_IN_ICEIL):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LCEIL);\n+\t  break;\n+\n+\tCASE_FLT_FN (BUILT_IN_IFLOOR):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LFLOOR);\n+\t  break;\n+\n+\tCASE_FLT_FN (BUILT_IN_IROUND):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LROUND);\n+\t  break;\n+\n+\tCASE_FLT_FN (BUILT_IN_IRINT):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LRINT);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      if (newfn)\n+\t{\n+\t  tree newcall = build_call_expr_loc (loc, newfn, 1, arg);\n+\t  return fold_convert_loc (loc,\n+\t\t\t\t   TREE_TYPE (TREE_TYPE (fndecl)), newcall);\n+\t}\n+    }\n+\n   /* Canonicalize llround (x) to lround (x) on LP64 targets where\n      sizeof (long long) == sizeof (long).  */\n   if (TYPE_PRECISION (long_long_integer_type_node)\n@@ -7220,16 +7276,19 @@ fold_builtin_int_roundingfn (location_t loc, tree fndecl, tree arg)\n \n \t  switch (DECL_FUNCTION_CODE (fndecl))\n \t    {\n+\t    CASE_FLT_FN (BUILT_IN_IFLOOR):\n \t    CASE_FLT_FN (BUILT_IN_LFLOOR):\n \t    CASE_FLT_FN (BUILT_IN_LLFLOOR):\n \t      real_floor (&r, TYPE_MODE (ftype), &x);\n \t      break;\n \n+\t    CASE_FLT_FN (BUILT_IN_ICEIL):\n \t    CASE_FLT_FN (BUILT_IN_LCEIL):\n \t    CASE_FLT_FN (BUILT_IN_LLCEIL):\n \t      real_ceil (&r, TYPE_MODE (ftype), &x);\n \t      break;\n \n+\t    CASE_FLT_FN (BUILT_IN_IROUND):\n \t    CASE_FLT_FN (BUILT_IN_LROUND):\n \t    CASE_FLT_FN (BUILT_IN_LLROUND):\n \t      real_round (&r, TYPE_MODE (ftype), &x);\n@@ -9758,14 +9817,18 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n     CASE_FLT_FN (BUILT_IN_RINT):\n       return fold_trunc_transparent_mathfn (loc, fndecl, arg0);\n \n+    CASE_FLT_FN (BUILT_IN_ICEIL):\n     CASE_FLT_FN (BUILT_IN_LCEIL):\n     CASE_FLT_FN (BUILT_IN_LLCEIL):\n     CASE_FLT_FN (BUILT_IN_LFLOOR):\n+    CASE_FLT_FN (BUILT_IN_IFLOOR):\n     CASE_FLT_FN (BUILT_IN_LLFLOOR):\n+    CASE_FLT_FN (BUILT_IN_IROUND):\n     CASE_FLT_FN (BUILT_IN_LROUND):\n     CASE_FLT_FN (BUILT_IN_LLROUND):\n       return fold_builtin_int_roundingfn (loc, fndecl, arg0);\n \n+    CASE_FLT_FN (BUILT_IN_IRINT):\n     CASE_FLT_FN (BUILT_IN_LRINT):\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n       return fold_fixed_mathfn (loc, fndecl, arg0);"}, {"sha": "424f0f1a0853366277367a8606c7f65fa9d6becc", "filename": "gcc/builtins.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -267,6 +267,12 @@ DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALL, \"huge_vall\", BT_FN_LONGDOUBLE, ATTR_\n DEF_C99_BUILTIN        (BUILT_IN_HYPOT, \"hypot\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_HYPOTF, \"hypotf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_HYPOTL, \"hypotl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_ICEIL, \"iceil\", BT_FN_INT_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_ICEILF, \"iceilf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_ICEILL, \"iceill\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_IFLOOR, \"ifloor\", BT_FN_INT_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_IFLOORF, \"ifloorf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_IFLOORL, \"ifloorl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ILOGB, \"ilogb\", BT_FN_INT_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ILOGBF, \"ilogbf\", BT_FN_INT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ILOGBL, \"ilogbl\", BT_FN_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -276,6 +282,12 @@ DEF_GCC_BUILTIN        (BUILT_IN_INFL, \"infl\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTH\n DEF_GCC_BUILTIN\t       (BUILT_IN_INFD32, \"infd32\", BT_FN_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFD64, \"infd64\", BT_FN_DFLOAT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFD128, \"infd128\", BT_FN_DFLOAT128, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_IRINT, \"irint\", BT_FN_INT_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_IRINTF, \"irintf\", BT_FN_INT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_IRINTL, \"irintl\", BT_FN_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_IROUND, \"iround\", BT_FN_INT_DOUBLE, ATTR_MATHFN_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_IROUNDF, \"iroundf\", BT_FN_INT_FLOAT, ATTR_MATHFN_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_IROUNDL, \"iroundl\", BT_FN_INT_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_J0, \"j0\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_J0F, \"j0f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_J0L, \"j0l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "d72dda8fd826aaf48c9886e436c39a1980cdcaad", "filename": "gcc/convert.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -440,9 +440,12 @@ convert_to_integer (tree type, tree expr)\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!TARGET_C99_FUNCTIONS)\n \t    break;\n-\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n-\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t  if (outprec < TYPE_PRECISION (integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (integer_type_node)\n \t\t  && !TYPE_UNSIGNED (type)))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_ICEIL);\n+\t  else if (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LCEIL);\n \t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n \t\t   && !TYPE_UNSIGNED (type))\n@@ -453,19 +456,25 @@ convert_to_integer (tree type, tree expr)\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!TARGET_C99_FUNCTIONS)\n \t    break;\n-\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n-\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t  if (outprec < TYPE_PRECISION (integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (integer_type_node)\n \t\t  && !TYPE_UNSIGNED (type)))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_IFLOOR);\n+\t  else if (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LFLOOR);\n \t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n \t\t   && !TYPE_UNSIGNED (type))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LLFLOOR);\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_ROUND):\n-\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n-\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t  if (outprec < TYPE_PRECISION (integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (integer_type_node)\n \t\t  && !TYPE_UNSIGNED (type)))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_IROUND);\n+\t  else if (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LROUND);\n \t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n \t\t   && !TYPE_UNSIGNED (type))\n@@ -478,9 +487,12 @@ convert_to_integer (tree type, tree expr)\n \t    break;\n \t  /* ... Fall through ...  */\n \tCASE_FLT_FN (BUILT_IN_RINT):\n-\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n-\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t  if (outprec < TYPE_PRECISION (integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (integer_type_node)\n \t\t  && !TYPE_UNSIGNED (type)))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_IRINT);\n+\t  else if (outprec < TYPE_PRECISION (long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LRINT);\n \t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n \t\t   && !TYPE_UNSIGNED (type))"}, {"sha": "6abce5924e91db0d6591aa3d5af28e82532d17ca", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -14670,6 +14670,10 @@ tree_call_nonnegative_warnv_p (tree type, tree fndecl,\n \tCASE_FLT_FN (BUILT_IN_FLOOR):\n \tCASE_FLT_FN (BUILT_IN_FMOD):\n \tCASE_FLT_FN (BUILT_IN_FREXP):\n+\tCASE_FLT_FN (BUILT_IN_ICEIL):\n+\tCASE_FLT_FN (BUILT_IN_IFLOOR):\n+\tCASE_FLT_FN (BUILT_IN_IRINT):\n+\tCASE_FLT_FN (BUILT_IN_IROUND):\n \tCASE_FLT_FN (BUILT_IN_LCEIL):\n \tCASE_FLT_FN (BUILT_IN_LDEXP):\n \tCASE_FLT_FN (BUILT_IN_LFLOOR):"}, {"sha": "38079faf7715d081fe1dc0e4522e5ab02e94a1d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -1,3 +1,8 @@\n+2011-08-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/builtins-67.c: New test.\n+\t* gcc.target/i386/conversion.c: Ditto.\n+\n 2011-08-11  Romain Geissler  <romain.geissler@gmail.com>\n             Brian Hackett  <bhackett1024@gmail.com>\n "}, {"sha": "08639554379d7ce03ccb306981cb0dea4d60b536", "filename": "gcc/testsuite/gcc.dg/builtins-67.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-67.c?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -0,0 +1,72 @@\n+/* Check that conversion functions link correctly with -ffast-math.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-ffast-math -lm\" }  */\n+\n+#include \"builtins-config.h\"\n+\n+double floor (double);\n+float floorf (float);\n+long double floorl (long double);\n+\n+double ceil (double);\n+float ceilf (float);\n+long double ceill (long double);\n+\n+double round (double);\n+float roundf (float);\n+long double roundl (long double);\n+\n+double rint (double);\n+float rintf (float);\n+long double rintl (long double);\n+\n+int ifloor (double a) { return (int) floor (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int ifloorf (float a) { return (int) floorf (a); }\n+int ifloorl (long double a) { return (int) floorl (a); }\n+#endif\n+\n+long lfloor (double a) { return (long) floor (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long lfloorf (float a) { return (long) floorf (a); }\n+long lfloorl (long double a) { return (long) floorl (a); }\n+#endif\n+\n+long long llfloor (double a) { return (long long) floor (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long long llfloorf (float a) { return (long long) floorf (a); }\n+long long llfloorl (long double a) { return (long long) floorl (a); }\n+#endif\n+\n+int iceil (double a) { return (int) ceil (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int iceilf (float a) { return (int) ceilf (a); }\n+int iceill (long double a) { return (int) ceill (a); }\n+#endif\n+\n+long lceil (double a) { return (long) ceil (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long lceilf (float a) { return (long) ceilf (a); }\n+long lceill (long double a) { return (long) ceill (a); }\n+#endif\n+\n+long long llceil (double a) { return (long long) ceil (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long long llceilf (float a) { return (long long) ceilf (a); }\n+long long llceill (long double a) { return (long long) ceill (a); }\n+#endif\n+\n+int iround (double a) { return (int) round (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int iroundf (float a) { return (int) roundf (a); }\n+int iroundl (long double a) { return (int) roundl (a); }\n+#endif\n+\n+int irint (double a) { return (int) rint (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int irintf (float a) { return (int) rintf (a); }\n+int irintl (long double a) { return (int) rintl (a); }\n+#endif\n+\n+int main () { return 0; }"}, {"sha": "bc7121119babbd7a3186735e799fb30a21bad540", "filename": "gcc/testsuite/gcc.target/i386/conversion.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32ee74491f947dafdce3656c6ec9e48a185fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconversion.c?ref=6c32ee74491f947dafdce3656c6ec9e48a185fdb", "patch": "@@ -0,0 +1,56 @@\n+/* Check that conversion functions don't leak into global namespace.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-ffast-math\" }  */\n+\n+#include \"../../gcc.dg/builtins-config.h\"\n+\n+int ifloor (double a) { return __builtin_ifloor (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int ifloorf (float a) { return __builtin_ifloorf (a); }\n+int ifloorl (long double a) { return __builtin_ifloorl (a); }\n+#endif\n+\n+long lfloor (double a) { return __builtin_lfloor (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long lfloorf (float a) { return __builtin_lfloorf (a); }\n+long lfloorl (long double a) { return __builtin_lfloorl (a); }\n+#endif\n+\n+long long llfloor (double a) { return __builtin_llfloor (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long long llfloorf (float a) { return __builtin_llfloorf (a); }\n+long long llfloorl (long double a) { return __builtin_llfloorl (a); }\n+#endif\n+\n+int iceil (double a) { return __builtin_iceil (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int iceilf (float a) { return __builtin_iceilf (a); }\n+int iceill (long double a) { return __builtin_iceill (a); }\n+#endif\n+\n+long lceil (double a) { return __builtin_lceil (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long lceilf (float a) { return __builtin_lceilf (a); }\n+long lceill (long double a) { return __builtin_lceill (a); }\n+#endif\n+\n+long long llceil (double a) { return __builtin_llceil (a); }\n+#ifdef HAVE_C99_RUNTIME\n+long long llceilf (float a) { return __builtin_llceilf (a); }\n+long long llceill (long double a) { return __builtin_llceill (a); }\n+#endif\n+\n+int iround (double a) { return __builtin_iround (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int iroundf (float a) { return __builtin_iroundf (a); }\n+int iroundl (long double a) { return __builtin_iroundl (a); }\n+#endif\n+\n+int irint (double a) { return __builtin_irint (a); }\n+#ifdef HAVE_C99_RUNTIME\n+int irintf (float a) { return __builtin_irintf (a); }\n+int irintl (long double a) { return __builtin_irintl (a); }\n+#endif\n+\n+int main () { return 0; }"}]}