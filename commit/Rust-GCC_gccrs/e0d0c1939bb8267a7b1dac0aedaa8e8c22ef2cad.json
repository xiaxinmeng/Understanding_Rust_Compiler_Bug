{"sha": "e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkMGMxOTM5YmI4MjY3YTdiMWRhYzBhZWRhYThlOGMyMmVmMmNhZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-08-11T07:44:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-08-11T07:44:45Z"}, "message": "re PR middle-end/28651 (signed compare incorrectly false for (int)(U+4)<(int)U where U is unsigned INT_MAX (for optimized  x86))\n\n2006-08-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/28651\n\t* simplify-rtx.c (simplify_const_relational_operation):\n\tSimplify A CMP B to A - B CMP 0 only for EQ and NE comparison\n\tcodes.\n\n\t* gcc.c-torture/execute/pr28651.c: New testcase.\n\nFrom-SVN: r116079", "tree": {"sha": "ab98ba9561a282ffc55741231132e99c53814c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab98ba9561a282ffc55741231132e99c53814c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b514d4c6553c0f113a46949db4776788f5bfba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b514d4c6553c0f113a46949db4776788f5bfba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b514d4c6553c0f113a46949db4776788f5bfba5"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "92fd1fe42f7b2e4cf4be3e1c5f29521e932c2f54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "patch": "@@ -1,3 +1,10 @@\n+2006-08-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28651\n+\t* simplify-rtx.c (simplify_const_relational_operation):\n+\tSimplify A CMP B to A - B CMP 0 only for EQ and NE comparison\n+\tcodes.\n+\n 2006-08-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.c (build1_stat): Also propagate the TREE_CONSTANT and"}, {"sha": "8c437e483dfe4b38217c2f861e265a7fe65b14d9", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "patch": "@@ -3733,19 +3733,18 @@ simplify_const_relational_operation (enum rtx_code code,\n      a register or a CONST_INT, this can't help; testing for these cases will\n      prevent infinite recursion here and speed things up.\n \n-     If CODE is an unsigned comparison, then we can never do this optimization,\n-     because it gives an incorrect result if the subtraction wraps around zero.\n-     ANSI C defines unsigned operations such that they never overflow, and\n-     thus such cases can not be ignored; but we cannot do it even for\n-     signed comparisons for languages such as Java, so test flag_wrapv.  */\n+     We can only do this for EQ and NE comparisons as otherwise we may\n+     lose or introduce overflow which we cannot disregard as undefined as\n+     we do not know the signedness of the operation on either the left or\n+     the right hand side of the comparison.  */\n \n-  if (!flag_wrapv && INTEGRAL_MODE_P (mode) && trueop1 != const0_rtx\n+  if (INTEGRAL_MODE_P (mode) && trueop1 != const0_rtx\n+      && (code == EQ || code == NE)\n       && ! ((REG_P (op0) || GET_CODE (trueop0) == CONST_INT)\n \t    && (REG_P (op1) || GET_CODE (trueop1) == CONST_INT))\n       && 0 != (tem = simplify_binary_operation (MINUS, mode, op0, op1))\n-      /* We cannot do this for == or != if tem is a nonzero address.  */\n-      && ((code != EQ && code != NE) || ! nonzero_address_p (tem))\n-      && code != GTU && code != GEU && code != LTU && code != LEU)\n+      /* We cannot do this if tem is a nonzero address.  */\n+      && ! nonzero_address_p (tem))\n     return simplify_const_relational_operation (signed_condition (code),\n \t\t\t\t\t\tmode, tem, const0_rtx);\n "}, {"sha": "3bc320f9690f38798908d8631b6cc7d204536207", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "patch": "@@ -1,3 +1,8 @@\n+2006-08-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28651\n+\t* gcc.c-torture/execute/pr28651.c: New testcase.\n+\n 2006-08-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/static_initializer.ads: New test."}, {"sha": "1262f9f625eb2405382c17079b2874004d308f8f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr28651.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr28651.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr28651.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr28651.c?ref=e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "patch": "@@ -0,0 +1,24 @@\n+extern void abort (void);\n+int\n+foo (unsigned int u)\n+{\n+  return (int)(u + 4) < (int)u;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  unsigned int u;\n+\n+  /* Run with no arguments so u will be MAX_INT and the optimizers\n+     won't know its value.  */\n+  if (argc > 1)\n+    u = 1;\n+  else\n+    u = 0x7fffffff;\n+\n+  if (foo (u) == 0)\n+    abort();\n+  return 0;\n+}\n+"}]}