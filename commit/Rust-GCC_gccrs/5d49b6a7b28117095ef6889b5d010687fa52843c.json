{"sha": "5d49b6a7b28117095ef6889b5d010687fa52843c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0OWI2YTdiMjgxMTcwOTVlZjY4ODliNWQwMTA2ODdmYTUyODQzYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-19T14:01:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-19T14:01:59Z"}, "message": "tree.h (fold_build_pointer_plus_loc): New helper function.\n\n2011-07-19  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (fold_build_pointer_plus_loc): New helper function.\n\t(fold_build_pointer_plus_hwi_loc): Likewise.\n\t(fold_build_pointer_plus): Define.\n\t(fold_build_pointer_plus_hwi): Likewise.\n\n\t* builtins.c (std_gimplify_va_arg_expr): Use fold_build_pointer_plus.\n\t(fold_builtin_memory_op): Likewise.\n\t(fold_builtin_stpcpy): Likewise.\n\t(fold_builtin_memchr): Likewise.\n\t(fold_builtin_strstr): Likewise.\n\t(fold_builtin_strchr): Likewise.\n\t(fold_builtin_strrchr): Likewise.\n\t(fold_builtin_strpbrk): Likewise.\n\t(fold_builtin_strcat): Likewise.\n\t(expand_builtin_memory_chk): Likewise.\n\t(fold_builtin_memory_chk): Likewise.\n\t* c-typeck.c (build_unary_op): Likewise.\n\t* cgraphunit.c (thunk_adjust): Likewise.\n\t* fold-const.c (build_range_check): Likewise.\n\t(fold_binary_loc): Likewise.\n\t* omp-low.c (extract_omp_for_data): Likewise.\n\t(expand_omp_for_generic): Likewise.\n\t(expand_omp_for_static_nochunk): Likewise.\n\t(expand_omp_for_static_chunk): Likewise.\n\t* tree-affine.c (add_elt_to_tree): Likewise.\n\t* tree-data-ref.c (split_constant_offset_1): Likewise.\n\t* tree-loop-distribution.c (generate_memset_zero): Likewise.\n\t* tree-mudflap.c (mf_xform_derefs_1): Likewise.\n\t* tree-predcom.c (ref_at_iteration): Likewise.\n\t* tree-ssa-address.c (tree_mem_ref_addr): Likewise.\n\t(add_to_parts): Likewise.\n\t(create_mem_ref): Likewise.\n\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Likewise.\n\t* tree-ssa-loop-niter.c (number_of_iterations_lt_to_ne): Likewise.\n\t(number_of_iterations_le): Likewise.\n\t* tree-ssa-loop-prefetch.c (issue_prefetch_ref): Likewise.\n\t* tree-vect-data-refs.c (vect_analyze_data_refs): Likewise.\n\t(vect_create_addr_base_for_vector_ref): Likewise.\n\t* tree-vect-loop-manip.c (vect_update_ivs_after_vectorizer): Likewise.\n\t(vect_create_cond_for_alias_checks): Likewise.\n\t* tree-vrp.c (extract_range_from_assert): Likewise.\n\n\t* config/alpha/alpha.c (alpha_va_start): Likewise.\n\t(alpha_gimplify_va_arg_1): Likewise.\n\t* config/i386/i386.c (ix86_va_start): Likewise.\n\t(ix86_gimplify_va_arg): Likewise.\n\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n\t* config/mep/mep.c (mep_expand_va_start): Likewise.\n\t(mep_gimplify_va_arg_expr): Likewise.\n\t* config/mips/mips.c (mips_va_start): Likewise.\n\t(mips_gimplify_va_arg_expr): Likewise.\n\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_va_start): Likewise.\n\t(rs6000_gimplify_va_arg): Likewise.\n\t* config/s390/s390.c (s390_va_start): Likewise.\n\t(s390_gimplify_va_arg): Likewise.\n\t* config/sh/sh.c (sh_va_start): Likewise.\n\t(sh_gimplify_va_arg_expr): Likewise.\n\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Likewise.\n\t* config/spu/spu.c (spu_va_start): Likewise.\n\t(spu_gimplify_va_arg_expr): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_expand_builtin_va_start):\n\tLikewise.\n\t(xstormy16_gimplify_va_arg_expr): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_va_start): Likewise.\n\t(xtensa_gimplify_va_arg_expr): Likewise.\n\n\tc-family/\n\t* c-common.c (pointer_int_sum): Use fold_build_pointer_plus.\n\t* c-omp.c (c_finish_omp_for): Likewise.\n\n\tcp/\n\t* call.c (build_special_member_call): Use fold_build_pointer_plus.\n\t* class.c (build_base_path): Likewise.\n\t(convert_to_base_statically): Likewise.\n\t(dfs_accumulate_vtbl_inits): Likewise.\n\t* cp-gimplify.c (cxx_omp_clause_apply_fn): Likewise.\n\t* except.c (expand_start_catch_block): Likewise.\n\t* init.c (expand_virtual_init): Likewise.\n\t(build_new_1): Likewise.\n\t(build_vec_delete_1): Likewise.\n\t(build_vec_delete): Likewise.\n\t* rtti.c (build_headof): Likewise.\n\t(tinfo_base_init): Likewise.\n\t* typeck.c (get_member_function_from_ptrfunc): Likewise.\n\t(cp_build_addr_expr_1): Likewise.\n\t* typeck2.c (build_m_component_ref): Likewise.\n\n\tfortran/\n\t* trans-expr.c (fill_with_spaces): Use fold_build_pointer_plus.\n\t(gfc_trans_string_copy): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_repeat): Likewise.\n\t* trans-types.c (gfc_get_array_descr_info): Likewise.\n\t* trans.c (gfc_build_array_ref): Likewise.\n\n\tjava/\n\t* builtins.c (static): Use fold_build_pointer_plus.\n\t* class.c (make_class_data): Likewise.\n\t(build_symbol_entry): Likewise.\n\t* except.c (build_exception_object_ref): Likewise.\n\t* expr.c (build_java_arrayaccess): Likewise.\n\t(build_field_ref): Likewise.\n\t(build_known_method_ref): Likewise.\n\t(build_invokevirtual): Likewise.\n\n\tobjc/\n\t* objc-next-runtime-abi-02.c (objc_v2_build_ivar_ref):\n\tUse fold_build_pointer_plus.\n\t(objc2_build_ehtype_initializer): Likewise.\n\nFrom-SVN: r176461", "tree": {"sha": "2530edff8e2622a26913a15b62d707dad7e5b286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2530edff8e2622a26913a15b62d707dad7e5b286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d49b6a7b28117095ef6889b5d010687fa52843c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d49b6a7b28117095ef6889b5d010687fa52843c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d49b6a7b28117095ef6889b5d010687fa52843c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d49b6a7b28117095ef6889b5d010687fa52843c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c"}], "stats": {"total": 751, "additions": 355, "deletions": 396}, "files": [{"sha": "d74516c44ce026c9a692af97e79d16dc290e8331", "filename": "gcc/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1,3 +1,70 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (fold_build_pointer_plus_loc): New helper function.\n+\t(fold_build_pointer_plus_hwi_loc): Likewise.\n+\t(fold_build_pointer_plus): Define.\n+\t(fold_build_pointer_plus_hwi): Likewise.\n+\t* builtins.c (std_gimplify_va_arg_expr): Use fold_build_pointer_plus.\n+\t(fold_builtin_memory_op): Likewise.\n+\t(fold_builtin_stpcpy): Likewise.\n+\t(fold_builtin_memchr): Likewise.\n+\t(fold_builtin_strstr): Likewise.\n+\t(fold_builtin_strchr): Likewise.\n+\t(fold_builtin_strrchr): Likewise.\n+\t(fold_builtin_strpbrk): Likewise.\n+\t(fold_builtin_strcat): Likewise.\n+\t(expand_builtin_memory_chk): Likewise.\n+\t(fold_builtin_memory_chk): Likewise.\n+\t* c-typeck.c (build_unary_op): Likewise.\n+\t* cgraphunit.c (thunk_adjust): Likewise.\n+\t* fold-const.c (build_range_check): Likewise.\n+\t(fold_binary_loc): Likewise.\n+\t* omp-low.c (extract_omp_for_data): Likewise.\n+\t(expand_omp_for_generic): Likewise.\n+\t(expand_omp_for_static_nochunk): Likewise.\n+\t(expand_omp_for_static_chunk): Likewise.\n+\t* tree-affine.c (add_elt_to_tree): Likewise.\n+\t* tree-data-ref.c (split_constant_offset_1): Likewise.\n+\t* tree-loop-distribution.c (generate_memset_zero): Likewise.\n+\t* tree-mudflap.c (mf_xform_derefs_1): Likewise.\n+\t* tree-predcom.c (ref_at_iteration): Likewise.\n+\t* tree-ssa-address.c (tree_mem_ref_addr): Likewise.\n+\t(add_to_parts): Likewise.\n+\t(create_mem_ref): Likewise.\n+\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Likewise.\n+\t* tree-ssa-loop-niter.c (number_of_iterations_lt_to_ne): Likewise.\n+\t(number_of_iterations_le): Likewise.\n+\t* tree-ssa-loop-prefetch.c (issue_prefetch_ref): Likewise.\n+\t* tree-vect-data-refs.c (vect_analyze_data_refs): Likewise.\n+\t(vect_create_addr_base_for_vector_ref): Likewise.\n+\t* tree-vect-loop-manip.c (vect_update_ivs_after_vectorizer): Likewise.\n+\t(vect_create_cond_for_alias_checks): Likewise.\n+\t* tree-vrp.c (extract_range_from_assert): Likewise.\n+\t* config/alpha/alpha.c (alpha_va_start): Likewise.\n+\t(alpha_gimplify_va_arg_1): Likewise.\n+\t* config/i386/i386.c (ix86_va_start): Likewise.\n+\t(ix86_gimplify_va_arg): Likewise.\n+\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n+\t* config/mep/mep.c (mep_expand_va_start): Likewise.\n+\t(mep_gimplify_va_arg_expr): Likewise.\n+\t* config/mips/mips.c (mips_va_start): Likewise.\n+\t(mips_gimplify_va_arg_expr): Likewise.\n+\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_va_start): Likewise.\n+\t(rs6000_gimplify_va_arg): Likewise.\n+\t* config/s390/s390.c (s390_va_start): Likewise.\n+\t(s390_gimplify_va_arg): Likewise.\n+\t* config/sh/sh.c (sh_va_start): Likewise.\n+\t(sh_gimplify_va_arg_expr): Likewise.\n+\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Likewise.\n+\t* config/spu/spu.c (spu_va_start): Likewise.\n+\t(spu_gimplify_va_arg_expr): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_expand_builtin_va_start):\n+\tLikewise.\n+\t(xstormy16_gimplify_va_arg_expr): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_va_start): Likewise.\n+\t(xtensa_gimplify_va_arg_expr): Likewise.\n+\n 2011-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* expr.c (expand_expr_real_2): Remove TRUTH_*_EXPR handling."}, {"sha": "4e0d7937716136390149d2b78fbd9ae93efc651b", "filename": "gcc/builtins.c", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -4236,9 +4236,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n       && !integer_zerop (TYPE_SIZE (type)))\n     {\n       t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n-\t\t  fold_build2 (POINTER_PLUS_EXPR,\n-\t\t\t       TREE_TYPE (valist),\n-\t\t\t       valist_tmp, size_int (boundary - 1)));\n+\t\t  fold_build_pointer_plus_hwi (valist_tmp, boundary - 1));\n       gimplify_and_add (t, pre_p);\n \n       t = fold_convert (sizetype, valist_tmp);\n@@ -4277,12 +4275,11 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t\t       rounded_size, size_int (align));\n       t = fold_build3 (COND_EXPR, sizetype, t, size_zero_node,\n \t\t       size_binop (MINUS_EXPR, rounded_size, type_size));\n-      addr = fold_build2 (POINTER_PLUS_EXPR,\n-\t\t\t  TREE_TYPE (addr), addr, t);\n+      addr = fold_build_pointer_plus (addr, t);\n     }\n \n   /* Compute new value for AP.  */\n-  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (valist), valist_tmp, rounded_size);\n+  t = fold_build_pointer_plus (valist_tmp, rounded_size);\n   t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n   gimplify_and_add (t, pre_p);\n \n@@ -8222,8 +8219,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n     len = fold_build2_loc (loc, MINUS_EXPR, TREE_TYPE (len), len,\n \t\t       ssize_int (1));\n \n-  len = fold_convert_loc (loc, sizetype, len);\n-  dest = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (dest), dest, len);\n+  dest = fold_build_pointer_plus_loc (loc, dest, len);\n   dest = fold_convert_loc (loc, type, dest);\n   if (expr)\n     dest = omit_one_operand_loc (loc, type, dest, expr);\n@@ -8299,8 +8295,7 @@ fold_builtin_stpcpy (location_t loc, tree fndecl, tree dest, tree src)\n   call = build_call_expr_loc (loc, fn, 3, dest, src, lenp1);\n \n   type = TREE_TYPE (TREE_TYPE (fndecl));\n-  len = fold_convert_loc (loc, sizetype, len);\n-  dest = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (dest), dest, len);\n+  dest = fold_build_pointer_plus_loc (loc, dest, len);\n   dest = fold_convert_loc (loc, type, dest);\n   dest = omit_one_operand_loc (loc, type, dest, call);\n   return dest;\n@@ -8387,8 +8382,7 @@ fold_builtin_memchr (location_t loc, tree arg1, tree arg2, tree len, tree type)\n \t  if (r == NULL)\n \t    return build_int_cst (TREE_TYPE (arg1), 0);\n \n-\t  tem = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (arg1), arg1,\n-\t\t\t     size_int (r - p1));\n+\t  tem = fold_build_pointer_plus_hwi_loc (loc, arg1, r - p1);\n \t  return fold_convert_loc (loc, type, tem);\n \t}\n       return NULL_TREE;\n@@ -10775,8 +10769,7 @@ fold_builtin_strstr (location_t loc, tree s1, tree s2, tree type)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  tem = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t     s1, size_int (r - p1));\n+\t  tem = fold_build_pointer_plus_hwi_loc (loc, s1, r - p1);\n \t  return fold_convert_loc (loc, type, tem);\n \t}\n \n@@ -10846,8 +10839,7 @@ fold_builtin_strchr (location_t loc, tree s1, tree s2, tree type)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  tem = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t     s1, size_int (r - p1));\n+\t  tem = fold_build_pointer_plus_hwi_loc (loc, s1, r - p1);\n \t  return fold_convert_loc (loc, type, tem);\n \t}\n       return NULL_TREE;\n@@ -10902,8 +10894,7 @@ fold_builtin_strrchr (location_t loc, tree s1, tree s2, tree type)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  tem = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t     s1, size_int (r - p1));\n+\t  tem = fold_build_pointer_plus_hwi_loc (loc, s1, r - p1);\n \t  return fold_convert_loc (loc, type, tem);\n \t}\n \n@@ -10962,8 +10953,7 @@ fold_builtin_strpbrk (location_t loc, tree s1, tree s2, tree type)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  tem = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t     s1, size_int (r - p1));\n+\t  tem = fold_build_pointer_plus_hwi_loc (loc, s1, r - p1);\n \t  return fold_convert_loc (loc, type, tem);\n \t}\n \n@@ -11047,8 +11037,7 @@ fold_builtin_strcat (location_t loc ATTRIBUTE_UNUSED, tree dst, tree src)\n \t  newdst = build_call_expr_loc (loc, strlen_fn, 1, dst);\n \t  /* Create (dst p+ strlen (dst)).  */\n \n-\t  newdst = fold_build2_loc (loc, POINTER_PLUS_EXPR,\n-\t\t\t\tTREE_TYPE (dst), dst, newdst);\n+\t  newdst = fold_build_pointer_plus_loc (loc, dst, newdst);\n \t  newdst = builtin_save_expr (newdst);\n \n \t  call = build_call_expr_loc (loc, strcpy_fn, 2, newdst, src);\n@@ -11721,7 +11710,7 @@ expand_builtin_memory_chk (tree exp, rtx target, enum machine_mode mode,\n \t      return expand_expr (dest, target, mode, EXPAND_NORMAL);\n \t    }\n \n-\t  expr = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (dest), dest, len);\n+\t  expr = fold_build_pointer_plus (dest, len);\n \t  return expand_expr (expr, target, mode, EXPAND_NORMAL);\n \t}\n \n@@ -11981,8 +11970,7 @@ fold_builtin_memory_chk (location_t loc, tree fndecl,\n \t\t\t\t dest, len);\n       else\n \t{\n-\t  tree temp = fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (dest),\n-\t\t\t\t   dest, len);\n+\t  tree temp = fold_build_pointer_plus_loc (loc, dest, len);\n \t  return fold_convert_loc (loc, TREE_TYPE (TREE_TYPE (fndecl)), temp);\n \t}\n     }"}, {"sha": "9ff311c90bb24c95cd44d7a50fa3b525982615b0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1,3 +1,8 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-common.c (pointer_int_sum): Use fold_build_pointer_plus.\n+\t* c-omp.c (c_finish_omp_for): Likewise.\n+\n 2011-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (dump_nested_types): Put semi-colon after empty loop"}, {"sha": "ecb0c8463e7627ff9363b8f02c3a5b8e9a28eafe", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -3760,7 +3760,7 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n   if (resultcode == MINUS_EXPR)\n     intop = fold_build1_loc (loc, NEGATE_EXPR, sizetype, intop);\n \n-  ret = fold_build2_loc (loc, POINTER_PLUS_EXPR, result_type, ptrop, intop);\n+  ret = fold_build_pointer_plus_loc (loc, ptrop, intop);\n \n   fold_undefer_and_ignore_overflow_warnings ();\n "}, {"sha": "340656fa14feed0ce25ca868ec7ecd13f7bcb639", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -424,7 +424,7 @@ c_finish_omp_for (location_t locus, tree declv, tree initv, tree condv,\n \t\t  if (TREE_CODE (incr) == POSTDECREMENT_EXPR\n \t\t      || TREE_CODE (incr) == PREDECREMENT_EXPR)\n \t\t    t = fold_build1_loc (elocus, NEGATE_EXPR, sizetype, t);\n-\t\t  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (decl), decl, t);\n+\t\t  t = fold_build_pointer_plus (decl, t);\n \t\t  incr = build2 (MODIFY_EXPR, void_type_node, decl, t);\n \t\t}\n \t      break;"}, {"sha": "aeb6625a5ee7691999a0c2179cc3e330a4baefa9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -3789,11 +3789,10 @@ build_unary_op (location_t location,\n       if (val && TREE_CODE (val) == INDIRECT_REF\n           && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n \t{\n-\t  tree op0 = fold_convert_loc (location, sizetype,\n-\t\t\t\t       fold_offsetof (arg, val)), op1;\n+\t  tree op0 = fold_offsetof (arg, val), op1;\n \n \t  op1 = fold_convert_loc (location, argtype, TREE_OPERAND (val, 0));\n-\t  ret = fold_build2_loc (location, POINTER_PLUS_EXPR, argtype, op1, op0);\n+\t  ret = fold_build_pointer_plus_loc (location, op1, op0);\n \t  goto return_build_unary_op;\n \t}\n "}, {"sha": "83ac720c7974126d3b8a28e817bcb404e6ad728b", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1458,11 +1458,10 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n   if (this_adjusting\n       && fixed_offset != 0)\n     {\n-      stmt = gimple_build_assign (ptr,\n-\t\t\t\t  fold_build2_loc (input_location,\n-\t\t\t\t\t\t   POINTER_PLUS_EXPR,\n-\t\t\t\t\t\t   TREE_TYPE (ptr), ptr,\n-\t\t\t\t\t\t   size_int (fixed_offset)));\n+      stmt = gimple_build_assign\n+\t\t(ptr, fold_build_pointer_plus_hwi_loc (input_location,\n+\t\t\t\t\t\t       ptr,\n+\t\t\t\t\t\t       fixed_offset));\n       gsi_insert_after (bsi, stmt, GSI_NEW_STMT);\n     }\n \n@@ -1508,12 +1507,9 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n \n       /* Find the entry with the vcall offset.  */\n       stmt = gimple_build_assign (vtabletmp2,\n-\t\t\t\t  fold_build2_loc (input_location,\n-\t\t\t\t\t\t   POINTER_PLUS_EXPR,\n-\t\t\t\t\t\t   TREE_TYPE (vtabletmp2),\n-\t\t\t\t\t\t   vtabletmp2,\n-\t\t\t\t\t\t   fold_convert (sizetype,\n-\t\t\t\t\t\t\t\t virtual_offset)));\n+\t\t\t\t  fold_build_pointer_plus_loc (input_location,\n+\t\t\t\t\t\t\t       vtabletmp2,\n+\t\t\t\t\t\t\t       virtual_offset));\n       gsi_insert_after (bsi, stmt, GSI_NEW_STMT);\n \n       /* Get the offset itself.  */\n@@ -1533,9 +1529,7 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n       find_referenced_vars_in (stmt);\n \n       /* Adjust the `this' pointer.  */\n-      ptr = fold_build2_loc (input_location,\n-\t\t\t     POINTER_PLUS_EXPR, TREE_TYPE (ptr), ptr,\n-\t\t\t     offsettmp);\n+      ptr = fold_build_pointer_plus_loc (input_location, ptr, offsettmp);\n     }\n \n   if (!this_adjusting\n@@ -1554,9 +1548,8 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n \t  mark_symbols_for_renaming (stmt);\n \t  find_referenced_vars_in (stmt);\n \t}\n-      ptr = fold_build2_loc (input_location,\n-\t\t\t     POINTER_PLUS_EXPR, TREE_TYPE (ptrtmp), ptrtmp,\n-\t\t\t     size_int (fixed_offset));\n+      ptr = fold_build_pointer_plus_hwi_loc (input_location,\n+\t\t\t\t\t     ptrtmp, fixed_offset);\n     }\n \n   /* Emit the statement and gimplify the adjustment expression.  */"}, {"sha": "3d32de32e43c17a6546e82eb12223559c948b730", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -5990,8 +5990,7 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   if (TARGET_ABI_OPEN_VMS)\n     {\n       t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n-      t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t,\n-\t\t size_int (offset + NUM_ARGS * UNITS_PER_WORD));\n+      t = fold_build_pointer_plus_hwi (t, offset + NUM_ARGS * UNITS_PER_WORD);\n       t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -6007,8 +6006,7 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \t\t\t     valist, offset_field, NULL_TREE);\n \n       t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n-      t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t,\n-\t\t  size_int (offset));\n+      t = fold_build_pointer_plus_hwi (t, offset);\n       t = build2 (MODIFY_EXPR, TREE_TYPE (base_field), base_field, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -6069,8 +6067,7 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n     }\n \n   /* Build the final address and force that value into a temporary.  */\n-  addr = build2 (POINTER_PLUS_EXPR, ptr_type, fold_convert (ptr_type, base),\n-\t         fold_convert (sizetype, addend));\n+  addr = fold_build_pointer_plus (fold_convert (ptr_type, base), addend);\n   internal_post = NULL;\n   gimplify_expr (&addr, pre_p, &internal_post, is_gimple_val, fb_rvalue);\n   gimple_seq_add_seq (pre_p, internal_post);"}, {"sha": "02e4dcb65537cb0a914a6d64ac27a0778f9d4255", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -7645,8 +7645,7 @@ ix86_va_start (tree valist, rtx nextarg)\n     ovf_rtx = cfun->machine->split_stack_varargs_pointer;\n   t = make_tree (type, ovf_rtx);\n   if (words != 0)\n-    t = build2 (POINTER_PLUS_EXPR, type, t,\n-\t        size_int (words * UNITS_PER_WORD));\n+    t = fold_build_pointer_plus_hwi (t, words * UNITS_PER_WORD);\n   t = build2 (MODIFY_EXPR, type, ovf, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -7658,8 +7657,7 @@ ix86_va_start (tree valist, rtx nextarg)\n       type = TREE_TYPE (sav);\n       t = make_tree (type, frame_pointer_rtx);\n       if (!ix86_varargs_gpr_size)\n-\tt = build2 (POINTER_PLUS_EXPR, type, t,\n-\t\t    size_int (-8 * X86_64_REGPARM_MAX));\n+\tt = fold_build_pointer_plus_hwi (t, -8 * X86_64_REGPARM_MAX);\n       t = build2 (MODIFY_EXPR, type, sav, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -7815,15 +7813,13 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n       if (needed_intregs)\n \t{\n \t  /* int_addr = gpr + sav; */\n-\t  t = fold_convert (sizetype, gpr);\n-\t  t = build2 (POINTER_PLUS_EXPR, ptr_type_node, sav, t);\n+\t  t = fold_build_pointer_plus (sav, gpr);\n \t  gimplify_assign (int_addr, t, pre_p);\n \t}\n       if (needed_sseregs)\n \t{\n \t  /* sse_addr = fpr + sav; */\n-\t  t = fold_convert (sizetype, fpr);\n-\t  t = build2 (POINTER_PLUS_EXPR, ptr_type_node, sav, t);\n+\t  t = fold_build_pointer_plus (sav, fpr);\n \t  gimplify_assign (sse_addr, t, pre_p);\n \t}\n       if (need_temp)\n@@ -7877,12 +7873,10 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t\t  src_offset = REGNO (reg) * 8;\n \t\t}\n \t      src_addr = fold_convert (addr_type, src_addr);\n-\t      src_addr = fold_build2 (POINTER_PLUS_EXPR, addr_type, src_addr,\n-\t\t\t\t      size_int (src_offset));\n+\t      src_addr = fold_build_pointer_plus_hwi (src_addr, src_offset);\n \n \t      dest_addr = fold_convert (daddr_type, addr);\n-\t      dest_addr = fold_build2 (POINTER_PLUS_EXPR, daddr_type, dest_addr,\n-\t\t\t\t       size_int (prev_size));\n+\t      dest_addr = fold_build_pointer_plus_hwi (dest_addr, prev_size);\n \t      if (cur_size == GET_MODE_SIZE (mode))\n \t\t{\n \t\t  src = build_va_arg_indirect_ref (src_addr);\n@@ -7937,19 +7931,15 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n  else\n     {\n       HOST_WIDE_INT align = arg_boundary / 8;\n-      t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovf), ovf,\n-\t\t  size_int (align - 1));\n-      t = fold_convert (sizetype, t);\n+      t = fold_build_pointer_plus_hwi (ovf, align - 1);\n       t = build2 (BIT_AND_EXPR, TREE_TYPE (t), t,\n-\t\t  size_int (-align));\n-      t = fold_convert (TREE_TYPE (ovf), t);\n+\t\t  build_int_cst (TREE_TYPE (t), -align));\n     }\n \n   gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n   gimplify_assign (addr, t, pre_p);\n \n-  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (t), t,\n-\t      size_int (rsize * UNITS_PER_WORD));\n+  t = fold_build_pointer_plus_hwi (t, rsize * UNITS_PER_WORD);\n   gimplify_assign (unshare_expr (ovf), t, pre_p);\n \n   if (container)"}, {"sha": "fa3b93fa6cc9ab36918a7e4fcfbf87c02fc94774", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -4738,12 +4738,9 @@ ia64_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   if ((TREE_CODE (type) == REAL_TYPE || TREE_CODE (type) == INTEGER_TYPE)\n       ? int_size_in_bytes (type) > 8 : TYPE_ALIGN (type) > 8 * BITS_PER_UNIT)\n     {\n-      tree t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t       size_int (2 * UNITS_PER_WORD - 1));\n-      t = fold_convert (sizetype, t);\n+      tree t = fold_build_pointer_plus_hwi (valist, 2 * UNITS_PER_WORD - 1);\n       t = build2 (BIT_AND_EXPR, TREE_TYPE (t), t,\n-\t\t  size_int (-2 * UNITS_PER_WORD));\n-      t = fold_convert (TREE_TYPE (valist), t);\n+\t\t  build_int_cst (TREE_TYPE (t), -2 * UNITS_PER_WORD));\n       gimplify_assign (unshare_expr (valist), t, pre_p);\n     }\n "}, {"sha": "c18e7b7f04c37308ed544a187b521b673a0c6ca8", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -3620,14 +3620,12 @@ mep_expand_va_start (tree valist, rtx nextarg)\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   /* va_list.next_gp_limit = va_list.next_gp + 4 * ns; */\n-  u = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, u,\n-\t\t   size_int (4 * ns));\n+  u = fold_build_pointer_plus_hwi (u, 4 * ns);\n   t = build2 (MODIFY_EXPR, ptr_type_node, next_gp_limit, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-  u = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, u,\n-\t\t   size_int (8 * ((ns+1)/2)));\n+  u = fold_build_pointer_plus_hwi (u, 8 * ((ns+1)/2));\n   /* va_list.next_cop = ROUND_UP(va_list.next_gp_limit,8); */\n   t = build2 (MODIFY_EXPR, ptr_type_node, next_cop, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n@@ -3715,12 +3713,10 @@ mep_gimplify_va_arg_expr (tree valist, tree type,\n       gimplify_and_add (tmp, pre_p);\n     }\n \n-  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n-\t\tunshare_expr (next_gp), size_int (4));\n+  tmp = fold_build_pointer_plus_hwi (unshare_expr (next_gp), 4);\n   gimplify_assign (unshare_expr (next_gp), tmp, pre_p);\n \n-  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n-\t\tunshare_expr (next_cop), size_int (8));\n+  tmp = fold_build_pointer_plus_hwi (unshare_expr (next_cop), 8);\n   gimplify_assign (unshare_expr (next_cop), tmp, pre_p);\n \n   tmp = build1 (GOTO_EXPR, void_type_node, unshare_expr (label_sover));\n@@ -3734,8 +3730,7 @@ mep_gimplify_va_arg_expr (tree valist, tree type,\n   tmp = build2 (MODIFY_EXPR, void_type_node, res_addr, unshare_expr (next_stack));\n   gimplify_and_add (tmp, pre_p);\n \n-  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n-\t\tunshare_expr (next_stack), size_int (rsize));\n+  tmp = fold_build_pointer_plus_hwi (unshare_expr (next_stack), rsize);\n   gimplify_assign (unshare_expr (next_stack), tmp, pre_p);\n \n   /* - - */"}, {"sha": "7d97b3426f78d51c89305489c2e36ae5b46a7568", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -5452,8 +5452,7 @@ mips_va_start (tree valist, rtx nextarg)\n \t words used by named arguments.  */\n       t = make_tree (TREE_TYPE (ovfl), virtual_incoming_args_rtx);\n       if (cum->stack_words > 0)\n-\tt = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovfl), t,\n-\t\t    size_int (cum->stack_words * UNITS_PER_WORD));\n+\tt = fold_build_pointer_plus_hwi (t, cum->stack_words * UNITS_PER_WORD);\n       t = build2 (MODIFY_EXPR, TREE_TYPE (ovfl), ovfl, t);\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n@@ -5469,8 +5468,7 @@ mips_va_start (tree valist, rtx nextarg)\n       fpr_offset = gpr_save_area_size + UNITS_PER_FPVALUE - 1;\n       fpr_offset &= -UNITS_PER_FPVALUE;\n       if (fpr_offset)\n-\tt = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ftop), t,\n-\t\t    size_int (-fpr_offset));\n+\tt = fold_build_pointer_plus_hwi (t, -fpr_offset);\n       t = build2 (MODIFY_EXPR, TREE_TYPE (ftop), ftop, t);\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n@@ -5615,24 +5613,17 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t addr_rtx = top - off + (BYTES_BIG_ENDIAN ? RSIZE - SIZE : 0).  */\n       t = fold_convert (sizetype, t);\n       t = fold_build1 (NEGATE_EXPR, sizetype, t);\n-      t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (top), top, t);\n+      t = fold_build_pointer_plus (top, t);\n       if (BYTES_BIG_ENDIAN && rsize > size)\n-\t{\n-\t  u = size_int (rsize - size);\n-\t  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (t), t, u);\n-\t}\n+\tt = fold_build_pointer_plus_hwi (t, rsize - size);\n       COND_EXPR_THEN (addr) = t;\n \n       if (osize > UNITS_PER_WORD)\n \t{\n \t  /* [9] Emit: ovfl = ((intptr_t) ovfl + osize - 1) & -osize.  */\n-\t  u = size_int (osize - 1);\n-\t  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovfl),\n-\t\t      unshare_expr (ovfl), u);\n-\t  t = fold_convert (sizetype, t);\n-\t  u = size_int (-osize);\n+\t  t = fold_build_pointer_plus_hwi (unshare_expr (ovfl), osize - 1);\n+\t  u = build_int_cst (TREE_TYPE (t), -osize);\n \t  t = build2 (BIT_AND_EXPR, sizetype, t, u);\n-\t  t = fold_convert (TREE_TYPE (ovfl), t);\n \t  align = build2 (MODIFY_EXPR, TREE_TYPE (ovfl),\n \t\t\t  unshare_expr (ovfl), t);\n \t}\n@@ -5645,10 +5636,7 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n       u = fold_convert (TREE_TYPE (ovfl), build_int_cst (NULL_TREE, osize));\n       t = build2 (POSTINCREMENT_EXPR, TREE_TYPE (ovfl), ovfl, u);\n       if (BYTES_BIG_ENDIAN && osize > size)\n-\t{\n-\t  u = size_int (osize - size);\n-\t  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (t), t, u);\n-\t}\n+\tt = fold_build_pointer_plus_hwi (t, osize - size);\n \n       /* String [9] and [10, 11] together.  */\n       if (align)"}, {"sha": "b208215d36e9c5a91f4f706404b72794580a402f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -6112,7 +6112,7 @@ hppa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n       u = fold_convert (sizetype, size_in_bytes (type));\n       u = fold_build1 (NEGATE_EXPR, sizetype, u);\n-      t = build2 (POINTER_PLUS_EXPR, valist_type, valist, u);\n+      t = fold_build_pointer_plus (valist, u);\n \n       /* Align to 4 or 8 byte boundary depending on argument size.  */\n \n@@ -6124,10 +6124,7 @@ hppa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n       ofs = (8 - size) % 4;\n       if (ofs != 0)\n-\t{\n-\t  u = size_int (ofs);\n-\t  t = build2 (POINTER_PLUS_EXPR, valist_type, t, u);\n-\t}\n+\tt = fold_build_pointer_plus_hwi (t, ofs);\n \n       t = fold_convert (ptr, t);\n       t = build_va_arg_indirect_ref (t);"}, {"sha": "bed3511236cbdbed2ff34f4ad5f773114c80e88e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -9131,8 +9131,7 @@ rs6000_va_start (tree valist, rtx nextarg)\n   /* Find the overflow area.  */\n   t = make_tree (TREE_TYPE (ovf), virtual_incoming_args_rtx);\n   if (words != 0)\n-    t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovf), t,\n-\t        size_int (words * UNITS_PER_WORD));\n+    t = fold_build_pointer_plus_hwi (t, words * UNITS_PER_WORD);\n   t = build2 (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -9148,8 +9147,7 @@ rs6000_va_start (tree valist, rtx nextarg)\n   /* Find the register save area.  */\n   t = make_tree (TREE_TYPE (sav), virtual_stack_vars_rtx);\n   if (cfun->machine->varargs_save_offset)\n-    t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (sav), t,\n-\t        size_int (cfun->machine->varargs_save_offset));\n+    t = fold_build_pointer_plus_hwi (t, cfun->machine->varargs_save_offset);\n   t = build2 (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -9202,9 +9200,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t  /* This updates arg ptr by the amount that would be necessary\n \t     to align the zero-sized (but not zero-alignment) item.  */\n \t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n-\t\t  fold_build2 (POINTER_PLUS_EXPR,\n-\t\t\t       TREE_TYPE (valist),\n-\t\t\t       valist_tmp, size_int (boundary - 1)));\n+\t\t      fold_build_pointer_plus_hwi (valist_tmp, boundary - 1));\n \t  gimplify_and_add (t, pre_p);\n \n \t  t = fold_convert (sizetype, valist_tmp);\n@@ -9339,20 +9335,20 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n       t = sav;\n       if (sav_ofs)\n-\tt = build2 (POINTER_PLUS_EXPR, ptr_type_node, sav, size_int (sav_ofs));\n+\tt = fold_build_pointer_plus_hwi (sav, sav_ofs);\n \n       u = build2 (POSTINCREMENT_EXPR, TREE_TYPE (reg), unshare_expr (reg),\n \t\t  build_int_cst (TREE_TYPE (reg), n_reg));\n       u = fold_convert (sizetype, u);\n       u = build2 (MULT_EXPR, sizetype, u, size_int (sav_scale));\n-      t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t, u);\n+      t = fold_build_pointer_plus (t, u);\n \n       /* _Decimal32 varargs are located in the second word of the 64-bit\n \t FP register for 32-bit binaries.  */\n       if (!TARGET_POWERPC64\n \t  && TARGET_HARD_FLOAT && TARGET_FPRS\n \t  && TYPE_MODE (type) == SDmode)\n-\tt = build2 (POINTER_PLUS_EXPR, TREE_TYPE (t), t, size_int (size));\n+\tt = fold_build_pointer_plus_hwi (t, size);\n \n       gimplify_assign (addr, t, pre_p);\n \n@@ -9375,17 +9371,15 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   t = ovf;\n   if (align != 1)\n     {\n-      t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (t), t, size_int (align - 1));\n-      t = fold_convert (sizetype, t);\n+      t = fold_build_pointer_plus_hwi (t, align - 1);\n       t = build2 (BIT_AND_EXPR, TREE_TYPE (t), t,\n-\t\t  size_int (-align));\n-      t = fold_convert (TREE_TYPE (ovf), t);\n+\t\t  build_int_cst (TREE_TYPE (t), -align));\n     }\n   gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n \n   gimplify_assign (unshare_expr (addr), t, pre_p);\n \n-  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (t), t, size_int (size));\n+  t = fold_build_pointer_plus_hwi (t, size);\n   gimplify_assign (unshare_expr (ovf), t, pre_p);\n \n   if (lab_over)"}, {"sha": "4a017cac449e2f8c9ea42f7be8e6df01c4535dae", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -8868,7 +8868,7 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \tfprintf (stderr, \"va_start: n_gpr = %d, n_fpr = %d off %d\\n\",\n \t\t (int)n_gpr, (int)n_fpr, off);\n \n-      t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovf), t, size_int (off));\n+      t = fold_build_pointer_plus_hwi (t, off);\n \n       t = build2 (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n@@ -8880,8 +8880,7 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n       || (cfun->va_list_fpr_size && n_fpr < FP_ARG_NUM_REG))\n     {\n       t = make_tree (TREE_TYPE (sav), return_address_pointer_rtx);\n-      t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (sav), t,\n-\t          size_int (-RETURN_REGNUM * UNITS_PER_LONG));\n+      t = fold_build_pointer_plus_hwi (t, -RETURN_REGNUM * UNITS_PER_LONG);\n \n       t = build2 (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n@@ -9013,11 +9012,10 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   t = build3 (COND_EXPR, void_type_node, t, u, NULL_TREE);\n   gimplify_and_add (t, pre_p);\n \n-  t = build2 (POINTER_PLUS_EXPR, ptr_type_node, sav,\n-\t      size_int (sav_ofs));\n+  t = fold_build_pointer_plus_hwi (sav, sav_ofs);\n   u = build2 (MULT_EXPR, TREE_TYPE (reg), reg,\n \t      fold_convert (TREE_TYPE (reg), size_int (sav_scale)));\n-  t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t, fold_convert (sizetype, u));\n+  t = fold_build_pointer_plus (t, u);\n \n   gimplify_assign (addr, t, pre_p);\n \n@@ -9030,15 +9028,13 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n   t = ovf;\n   if (size < UNITS_PER_LONG)\n-    t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t,\n-\t\tsize_int (UNITS_PER_LONG - size));\n+    t = fold_build_pointer_plus_hwi (t, UNITS_PER_LONG - size);\n \n   gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n \n   gimplify_assign (addr, t, pre_p);\n \n-  t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t,\n-\t      size_int (size));\n+  t = fold_build_pointer_plus_hwi (t, size);\n   gimplify_assign (ovf, t, pre_p);\n \n   gimple_seq_add_stmt (pre_p, gimple_build_label (lab_over));"}, {"sha": "a901321a2e0415f7fbe22c0db24f6ac7255cf22f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -7831,8 +7831,7 @@ sh_va_start (tree valist, rtx nextarg)\n     nfp = 8 - nfp;\n   else\n     nfp = 0;\n-  u = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, u,\n-\t\t   size_int (UNITS_PER_WORD * nfp));\n+  u = fold_build_pointer_plus_hwi (u, UNITS_PER_WORD * nfp);\n   t = build2 (MODIFY_EXPR, ptr_type_node, next_fp_limit, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -7846,8 +7845,7 @@ sh_va_start (tree valist, rtx nextarg)\n     nint = 4 - nint;\n   else\n     nint = 0;\n-  u = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, u,\n-\t\t   size_int (UNITS_PER_WORD * nint));\n+  u = fold_build_pointer_plus_hwi (u, UNITS_PER_WORD * nint);\n   t = build2 (MODIFY_EXPR, ptr_type_node, next_o_limit, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -7983,8 +7981,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t  gimplify_assign (unshare_expr (next_fp_tmp), valist, pre_p);\n \t  tmp = next_fp_limit;\n \t  if (size > 4 && !is_double)\n-\t    tmp = build2 (POINTER_PLUS_EXPR, TREE_TYPE (tmp),\n-\t\t\t  unshare_expr (tmp), size_int (4 - size));\n+\t    tmp = fold_build_pointer_plus_hwi (unshare_expr (tmp), 4 - size);\n \t  tmp = build2 (GE_EXPR, boolean_type_node,\n \t\t\tunshare_expr (next_fp_tmp), unshare_expr (tmp));\n \t  cmp = build3 (COND_EXPR, void_type_node, tmp,\n@@ -7999,8 +7996,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t      tmp = fold_convert (sizetype, next_fp_tmp);\n \t      tmp = build2 (BIT_AND_EXPR, sizetype, tmp,\n \t\t\t    size_int (UNITS_PER_WORD));\n-\t      tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\t    unshare_expr (next_fp_tmp), tmp);\n+\t      tmp = fold_build_pointer_plus (unshare_expr (next_fp_tmp), tmp);\n \t      gimplify_assign (unshare_expr (next_fp_tmp), tmp, pre_p);\n \t    }\n \t  if (is_double)\n@@ -8045,8 +8041,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t}\n       else\n \t{\n-\t  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\tunshare_expr (next_o), size_int (rsize));\n+\t  tmp = fold_build_pointer_plus_hwi (unshare_expr (next_o), rsize);\n \t  tmp = build2 (GT_EXPR, boolean_type_node, tmp,\n \t\t\tunshare_expr (next_o_limit));\n \t  tmp = build3 (COND_EXPR, void_type_node, tmp,"}, {"sha": "05cc3a4ea6be42a0c353bc6b97090f2a57219d1f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -6677,8 +6677,7 @@ sparc_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   incr = valist;\n   if (align)\n     {\n-      incr = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, incr,\n-\t\t\t  size_int (align - 1));\n+      incr = fold_build_pointer_plus_hwi (incr, align - 1);\n       incr = fold_convert (sizetype, incr);\n       incr = fold_build2 (BIT_AND_EXPR, sizetype, incr,\n \t\t\t  size_int (-align));\n@@ -6689,8 +6688,7 @@ sparc_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   addr = incr;\n \n   if (BYTES_BIG_ENDIAN && size < rsize)\n-    addr = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, incr,\n-\t\t\tsize_int (rsize - size));\n+    addr = fold_build_pointer_plus_hwi (incr, rsize - size);\n \n   if (indirect)\n     {\n@@ -6714,8 +6712,7 @@ sparc_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   else\n     addr = fold_convert (ptrtype, addr);\n \n-  incr\n-    = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, incr, size_int (rsize));\n+  incr = fold_build_pointer_plus_hwi (incr, rsize);\n   gimplify_assign (valist, incr, post_p);\n \n   return build_va_arg_indirect_ref (addr);"}, {"sha": "c6db6c3b3b0061d4b26fce29e1ca74aff2b96d7a", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -4181,17 +4181,15 @@ spu_va_start (tree valist, rtx nextarg)\n   /* Find the __args area.  */\n   t = make_tree (TREE_TYPE (args), nextarg);\n   if (crtl->args.pretend_args_size > 0)\n-    t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (args), t,\n-\t\tsize_int (-STACK_POINTER_OFFSET));\n+    t = fold_build_pointer_plus_hwi (t, -STACK_POINTER_OFFSET);\n   t = build2 (MODIFY_EXPR, TREE_TYPE (args), args, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   /* Find the __skip area.  */\n   t = make_tree (TREE_TYPE (skip), virtual_incoming_args_rtx);\n-  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (skip), t,\n-\t      size_int (crtl->args.pretend_args_size\n-\t\t\t - STACK_POINTER_OFFSET));\n+  t = fold_build_pointer_plus_hwi (t, (crtl->args.pretend_args_size\n+\t\t\t\t       - STACK_POINTER_OFFSET));\n   t = build2 (MODIFY_EXPR, TREE_TYPE (skip), skip, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -4221,7 +4219,7 @@ spu_gimplify_va_arg_expr (tree valist, tree type, gimple_seq * pre_p,\n   tree f_args, f_skip;\n   tree args, skip;\n   HOST_WIDE_INT size, rsize;\n-  tree paddedsize, addr, tmp;\n+  tree addr, tmp;\n   bool pass_by_reference_p;\n \n   f_args = TYPE_FIELDS (TREE_TYPE (va_list_type_node));\n@@ -4246,21 +4244,20 @@ spu_gimplify_va_arg_expr (tree valist, tree type, gimple_seq * pre_p,\n \n   /* build conditional expression to calculate addr. The expression\n      will be gimplified later. */\n-  paddedsize = size_int (rsize);\n-  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node, unshare_expr (args), paddedsize);\n+  tmp = fold_build_pointer_plus_hwi (unshare_expr (args), rsize);\n   tmp = build2 (TRUTH_AND_EXPR, boolean_type_node,\n \t\tbuild2 (GT_EXPR, boolean_type_node, tmp, unshare_expr (skip)),\n \t\tbuild2 (LE_EXPR, boolean_type_node, unshare_expr (args),\n \t\tunshare_expr (skip)));\n \n   tmp = build3 (COND_EXPR, ptr_type_node, tmp,\n-\t\tbuild2 (POINTER_PLUS_EXPR, ptr_type_node, unshare_expr (skip),\n-\t\t\tsize_int (32)), unshare_expr (args));\n+\t\tfold_build_pointer_plus_hwi (unshare_expr (skip), 32),\n+\t\tunshare_expr (args));\n \n   gimplify_assign (addr, tmp, pre_p);\n \n   /* update VALIST.__args */\n-  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node, addr, paddedsize);\n+  tmp = fold_build_pointer_plus_hwi (addr, rsize);\n   gimplify_assign (unshare_expr (args), tmp, pre_p);\n \n   addr = fold_convert (build_pointer_type_for_mode (type, ptr_mode, true),"}, {"sha": "910dc2e302f743eade75429b46efab63e71c022c", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1292,7 +1292,7 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   t = make_tree (TREE_TYPE (base), virtual_incoming_args_rtx);\n   u = build_int_cst (NULL_TREE, - INCOMING_FRAME_SP_OFFSET);\n   u = fold_convert (TREE_TYPE (count), u);\n-  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (base), t, u);\n+  t = fold_build_pointer_plus (t, u);\n   t = build2 (MODIFY_EXPR, TREE_TYPE (base), base, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -1350,7 +1350,7 @@ xstormy16_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t\t  NULL_TREE);\n       gimplify_and_add (t, pre_p);\n \n-      t = build2 (POINTER_PLUS_EXPR, ptr_type_node, base, count_tmp);\n+      t = fold_build_pointer_plus (base, count_tmp);\n       gimplify_assign (addr, t, pre_p);\n \n       t = build1 (GOTO_EXPR, void_type_node, lab_gotaddr);\n@@ -1385,7 +1385,7 @@ xstormy16_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t      fold_convert (TREE_TYPE (count), size_tree));\n   t = fold_convert (TREE_TYPE (t), fold (t));\n   t = fold_build1 (NEGATE_EXPR, TREE_TYPE (t), t);\n-  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (base), base, t);\n+  t = fold_build_pointer_plus (base, t);\n   gimplify_assign (addr, t, pre_p);\n \n   t = build1 (LABEL_EXPR, void_type_node, lab_gotaddr);"}, {"sha": "5ba468131e0c0d6b3960f614d9200980a8d6c785", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -2853,7 +2853,7 @@ xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \n   /* Set the __va_stk member to ($arg_ptr - 32).  */\n   u = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n-  u = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, u, size_int (-32));\n+  u = fold_build_pointer_plus_hwi (u, -32);\n   t = build2 (MODIFY_EXPR, ptr_type_node, stk, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -3042,7 +3042,7 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n   t = fold_convert (sizetype, unshare_expr (ndx));\n   t = build2 (MINUS_EXPR, sizetype, t, size);\n-  addr = build2 (POINTER_PLUS_EXPR, ptr_type_node, unshare_expr (array), t);\n+  addr = fold_build_pointer_plus (unshare_expr (array), t);\n \n   addr = fold_convert (build_pointer_type (type), addr);\n   if (indirect)"}, {"sha": "f80f7b6916a328b2ccdde240f9ea46b1b64e9bdc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1,3 +1,21 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* call.c (build_special_member_call): Use fold_build_pointer_plus.\n+\t* class.c (build_base_path): Likewise.\n+\t(convert_to_base_statically): Likewise.\n+\t(dfs_accumulate_vtbl_inits): Likewise.\n+\t* cp-gimplify.c (cxx_omp_clause_apply_fn): Likewise.\n+\t* except.c (expand_start_catch_block): Likewise.\n+\t* init.c (expand_virtual_init): Likewise.\n+\t(build_new_1): Likewise.\n+\t(build_vec_delete_1): Likewise.\n+\t(build_vec_delete): Likewise.\n+\t* rtti.c (build_headof): Likewise.\n+\t(tinfo_base_init): Likewise.\n+\t* typeck.c (get_member_function_from_ptrfunc): Likewise.\n+\t(cp_build_addr_expr_1): Likewise.\n+\t* typeck2.c (build_m_component_ref): Likewise.\n+\n 2011-07-18  Martin Jambor  <mjambor@suse.cz>\n \n \t* parser.c (cp_parser_parameter_declaration_list): Initialize"}, {"sha": "2eab78266f8a539ed7237a8c9f4dcdd872bb2885", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -7062,8 +7062,7 @@ build_special_member_call (tree instance, tree name, VEC(tree,gc) **args,\n \t\t    current_vtt_parm,\n \t\t    vtt);\n       gcc_assert (BINFO_SUBVTT_INDEX (binfo));\n-      sub_vtt = build2 (POINTER_PLUS_EXPR, TREE_TYPE (vtt), vtt,\n-\t\t\tBINFO_SUBVTT_INDEX (binfo));\n+      sub_vtt = fold_build_pointer_plus (vtt, BINFO_SUBVTT_INDEX (binfo));\n \n       if (args == NULL)\n \t{"}, {"sha": "26b7abe903dc81745dc4e63845f304de4bd08b02", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -374,8 +374,7 @@ build_base_path (enum tree_code code,\n                                                             tf_warning_or_error),\n \t\t\t\t     TREE_TYPE (TREE_TYPE (expr)));\n \n-      v_offset = build2 (POINTER_PLUS_EXPR, TREE_TYPE (v_offset),\n-\t\t\t v_offset, fold_convert (sizetype, BINFO_VPTR_FIELD (v_binfo)));\n+      v_offset = fold_build_pointer_plus (v_offset, BINFO_VPTR_FIELD (v_binfo));\n       v_offset = build1 (NOP_EXPR,\n \t\t\t build_pointer_type (ptrdiff_type_node),\n \t\t\t v_offset);\n@@ -413,7 +412,7 @@ build_base_path (enum tree_code code,\n       offset = fold_convert (sizetype, offset);\n       if (code == MINUS_EXPR)\n \toffset = fold_build1_loc (input_location, NEGATE_EXPR, sizetype, offset);\n-      expr = build2 (POINTER_PLUS_EXPR, ptr_target_type, expr, offset);\n+      expr = fold_build_pointer_plus (expr, offset);\n     }\n   else\n     null_test = NULL;\n@@ -540,20 +539,15 @@ convert_to_base_statically (tree expr, tree base)\n   expr_type = TREE_TYPE (expr);\n   if (!SAME_BINFO_TYPE_P (BINFO_TYPE (base), expr_type))\n     {\n-      tree pointer_type;\n-\n-      pointer_type = build_pointer_type (expr_type);\n-\n       /* We use fold_build2 and fold_convert below to simplify the trees\n \t provided to the optimizers.  It is not safe to call these functions\n \t when processing a template because they do not handle C++-specific\n \t trees.  */\n       gcc_assert (!processing_template_decl);\n       expr = cp_build_addr_expr (expr, tf_warning_or_error);\n       if (!integer_zerop (BINFO_OFFSET (base)))\n-        expr = fold_build2_loc (input_location,\n-\t\t\t    POINTER_PLUS_EXPR, pointer_type, expr,\n-\t\t\t    fold_convert (sizetype, BINFO_OFFSET (base)));\n+        expr = fold_build_pointer_plus_loc (input_location,\n+\t\t\t\t\t    expr, BINFO_OFFSET (base));\n       expr = fold_convert (build_pointer_type (BINFO_TYPE (base)), expr);\n       expr = build_fold_indirect_ref_loc (input_location, expr);\n     }\n@@ -7833,13 +7827,10 @@ dfs_accumulate_vtbl_inits (tree binfo,\n \n       /* Figure out the position to which the VPTR should point.  */\n       vtbl = build1 (ADDR_EXPR, vtbl_ptr_type_node, orig_vtbl);\n-      index = size_binop (PLUS_EXPR,\n-\t\t\t  size_int (non_fn_entries),\n-\t\t\t  size_int (n_inits));\n       index = size_binop (MULT_EXPR,\n \t\t\t  TYPE_SIZE_UNIT (vtable_entry_type),\n-\t\t\t  index);\n-      vtbl = build2 (POINTER_PLUS_EXPR, TREE_TYPE (vtbl), vtbl, index);\n+\t\t\t  size_int (non_fn_entries + n_inits));\n+      vtbl = fold_build_pointer_plus (vtbl, index);\n     }\n \n   if (ctor_vtbl_p)"}, {"sha": "2b4e70a75ef90031ff1eea133d5314e72ebdff2e", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1230,7 +1230,7 @@ cxx_omp_clause_apply_fn (tree fn, tree arg1, tree arg2)\n \tstart2 = build_fold_addr_expr_loc (input_location, start2);\n \n       end1 = TYPE_SIZE_UNIT (TREE_TYPE (arg1));\n-      end1 = build2 (POINTER_PLUS_EXPR, TREE_TYPE (start1), start1, end1);\n+      end1 = fold_build_pointer_plus (start1, end1);\n \n       p1 = create_tmp_var (TREE_TYPE (start1), NULL);\n       t = build2 (MODIFY_EXPR, TREE_TYPE (p1), p1, start1);\n@@ -1260,15 +1260,13 @@ cxx_omp_clause_apply_fn (tree fn, tree arg1, tree arg2)\n       t = fold_build_cleanup_point_expr (TREE_TYPE (t), t);\n       append_to_statement_list (t, &ret);\n \n-      t = TYPE_SIZE_UNIT (inner_type);\n-      t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (p1), p1, t);\n+      t = fold_build_pointer_plus (p1, TYPE_SIZE_UNIT (inner_type));\n       t = build2 (MODIFY_EXPR, TREE_TYPE (p1), p1, t);\n       append_to_statement_list (t, &ret);\n \n       if (arg2)\n \t{\n-\t  t = TYPE_SIZE_UNIT (inner_type);\n-\t  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (p2), p2, t);\n+\t  t = fold_build_pointer_plus (p2, TYPE_SIZE_UNIT (inner_type));\n \t  t = build2 (MODIFY_EXPR, TREE_TYPE (p2), p2, t);\n \t  append_to_statement_list (t, &ret);\n \t}"}, {"sha": "129d2f43441506a07ddc77d5e188c05b2e68ad79", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -452,10 +452,10 @@ expand_start_catch_block (tree decl)\n \t generic exception header.  */\n       exp = build_exc_ptr ();\n       exp = build1 (NOP_EXPR, build_pointer_type (type), exp);\n-      exp = build2 (POINTER_PLUS_EXPR, TREE_TYPE (exp), exp,\n+      exp = fold_build_pointer_plus (exp,\n \t\t    fold_build1_loc (input_location,\n-\t\t\t\t NEGATE_EXPR, sizetype,\n-\t\t\t \t TYPE_SIZE_UNIT (TREE_TYPE (exp))));\n+\t\t\t\t     NEGATE_EXPR, sizetype,\n+\t\t\t\t     TYPE_SIZE_UNIT (TREE_TYPE (exp))));\n       exp = cp_build_indirect_ref (exp, RO_NULL, tf_warning_or_error);\n       initialize_handler_parm (decl, exp);\n       return type;"}, {"sha": "52b948441f2781fbbb0640e8230ddb8ceb4d95ee", "filename": "gcc/cp/init.c", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1063,10 +1063,7 @@ expand_virtual_init (tree binfo, tree decl)\n \n       /* Compute the value to use, when there's a VTT.  */\n       vtt_parm = current_vtt_parm;\n-      vtbl2 = build2 (POINTER_PLUS_EXPR,\n-\t\t      TREE_TYPE (vtt_parm),\n-\t\t      vtt_parm,\n-\t\t      vtt_index);\n+      vtbl2 = fold_build_pointer_plus (vtt_parm, vtt_index);\n       vtbl2 = cp_build_indirect_ref (vtbl2, RO_NULL, tf_warning_or_error);\n       vtbl2 = convert (TREE_TYPE (vtbl), vtbl2);\n \n@@ -2310,16 +2307,14 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n       tree size_ptr_type;\n \n       /* Adjust so we're pointing to the start of the object.  */\n-      data_addr = build2 (POINTER_PLUS_EXPR, TREE_TYPE (alloc_node),\n-\t\t\t  alloc_node, cookie_size);\n+      data_addr = fold_build_pointer_plus (alloc_node, cookie_size);\n \n       /* Store the number of bytes allocated so that we can know how\n \t many elements to destroy later.  We use the last sizeof\n \t (size_t) bytes to store the number of elements.  */\n       cookie_ptr = size_binop (MINUS_EXPR, cookie_size, size_in_bytes (sizetype));\n-      cookie_ptr = fold_build2_loc (input_location,\n-\t\t\t\tPOINTER_PLUS_EXPR, TREE_TYPE (alloc_node),\n-\t\t\t\talloc_node, cookie_ptr);\n+      cookie_ptr = fold_build_pointer_plus_loc (input_location,\n+\t\t\t\t\t\talloc_node, cookie_ptr);\n       size_ptr_type = build_pointer_type (sizetype);\n       cookie_ptr = fold_convert (size_ptr_type, cookie_ptr);\n       cookie = cp_build_indirect_ref (cookie_ptr, RO_NULL, complain);\n@@ -2329,10 +2324,10 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n       if (targetm.cxx.cookie_has_size ())\n \t{\n \t  /* Also store the element size.  */\n-\t  cookie_ptr = build2 (POINTER_PLUS_EXPR, size_ptr_type, cookie_ptr,\n+\t  cookie_ptr = fold_build_pointer_plus (cookie_ptr,\n \t\t\t       fold_build1_loc (input_location,\n-\t\t\t\t\t    NEGATE_EXPR, sizetype,\n-\t\t\t\t\t    size_in_bytes (sizetype)));\n+\t\t\t\t\t\tNEGATE_EXPR, sizetype,\n+\t\t\t\t\t\tsize_in_bytes (sizetype)));\n \n \t  cookie = cp_build_indirect_ref (cookie_ptr, RO_NULL, complain);\n \t  cookie = build2 (MODIFY_EXPR, sizetype, cookie,\n@@ -2801,12 +2796,13 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \t\t\t     convert (sizetype, maxindex));\n \n   tbase = create_temporary_var (ptype);\n-  tbase_init = cp_build_modify_expr (tbase, NOP_EXPR,\n-\t\t\t\t     fold_build2_loc (input_location,\n-\t\t\t\t\t\t  POINTER_PLUS_EXPR, ptype,\n-\t\t\t\t\t\t  fold_convert (ptype, base),\n-\t\t\t\t\t\t  virtual_size),\n-\t\t\t\t     complain);\n+  tbase_init\n+    = cp_build_modify_expr (tbase, NOP_EXPR,\n+\t\t\t    fold_build_pointer_plus_loc (input_location,\n+\t\t\t\t\t\t\t fold_convert (ptype,\n+\t\t\t\t\t\t\t\t       base),\n+\t\t\t\t\t\t\t virtual_size),\n+\t\t\t    complain);\n   if (tbase_init == error_mark_node)\n     return error_mark_node;\n   controller = build3 (BIND_EXPR, void_type_node, tbase,\n@@ -2817,7 +2813,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \t\t build2 (EQ_EXPR, boolean_type_node, tbase,\n \t\t\t fold_convert (ptype, base)));\n   tmp = fold_build1_loc (input_location, NEGATE_EXPR, sizetype, size_exp);\n-  tmp = build2 (POINTER_PLUS_EXPR, ptype, tbase, tmp);\n+  tmp = fold_build_pointer_plus (tbase, tmp);\n   tmp = cp_build_modify_expr (tbase, NOP_EXPR, tmp, complain);\n   if (tmp == error_mark_node)\n     return error_mark_node;\n@@ -3751,10 +3747,8 @@ build_vec_delete (tree base, tree maxindex,\n       type = strip_array_types (TREE_TYPE (type));\n       cookie_addr = fold_build1_loc (input_location, NEGATE_EXPR,\n \t\t\t\t sizetype, TYPE_SIZE_UNIT (sizetype));\n-      cookie_addr = build2 (POINTER_PLUS_EXPR,\n-\t\t\t    size_ptr_type,\n-\t\t\t    fold_convert (size_ptr_type, base),\n-\t\t\t    cookie_addr);\n+      cookie_addr = fold_build_pointer_plus (fold_convert (size_ptr_type, base),\n+\t\t\t\t\t     cookie_addr);\n       maxindex = cp_build_indirect_ref (cookie_addr, RO_NULL, complain);\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)"}, {"sha": "434b7725ba86c7b568b3809a659a50c577bd9daf", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -192,8 +192,7 @@ build_headof (tree exp)\n \n   type = cp_build_qualified_type (ptr_type_node,\n \t\t\t\t  cp_type_quals (TREE_TYPE (exp)));\n-  return build2 (POINTER_PLUS_EXPR, type, exp,\n-\t\t convert_to_integer (sizetype, offset));\n+  return fold_build_pointer_plus (exp, offset);\n }\n \n /* Get a bad_cast node for the program to throw...\n@@ -918,8 +917,8 @@ tinfo_base_init (tinfo_s *ti, tree target)\n       vtable_ptr = cp_build_addr_expr (vtable_ptr, tf_warning_or_error);\n \n       /* We need to point into the middle of the vtable.  */\n-      vtable_ptr = build2\n-\t(POINTER_PLUS_EXPR, TREE_TYPE (vtable_ptr), vtable_ptr,\n+      vtable_ptr = fold_build_pointer_plus\n+\t(vtable_ptr,\n \t size_binop (MULT_EXPR,\n \t\t     size_int (2 * TARGET_VTABLE_DATA_ENTRY_DISTANCE),\n \t\t     TYPE_SIZE_UNIT (vtable_entry_type)));"}, {"sha": "52084e6ae40bb83f081df231f53ef87725be9f1f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -3078,8 +3078,7 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n \t    return error_mark_node;\n \t}\n       /* ...and then the delta in the PMF.  */\n-      instance_ptr = build2 (POINTER_PLUS_EXPR, TREE_TYPE (instance_ptr),\n-\t\t\t     instance_ptr, fold_convert (sizetype, delta));\n+      instance_ptr = fold_build_pointer_plus (instance_ptr, delta);\n \n       /* Hand back the adjusted 'this' argument to our caller.  */\n       *instance_ptrptr = instance_ptr;\n@@ -3094,9 +3093,7 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n       TREE_NO_WARNING (vtbl) = 1;\n \n       /* Finally, extract the function pointer from the vtable.  */\n-      e2 = fold_build2_loc (input_location,\n-\t\t\tPOINTER_PLUS_EXPR, TREE_TYPE (vtbl), vtbl,\n-\t\t\tfold_convert (sizetype, idx));\n+      e2 = fold_build_pointer_plus_loc (input_location, vtbl, idx);\n       e2 = cp_build_indirect_ref (e2, RO_NULL, tf_warning_or_error);\n       TREE_CONSTANT (e2) = 1;\n \n@@ -4841,8 +4838,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n     {\n       tree type = build_pointer_type (argtype);\n       tree op0 = fold_convert (type, TREE_OPERAND (val, 0));\n-      tree op1 = fold_convert (sizetype, fold_offsetof (arg, val));\n-      return fold_build2 (POINTER_PLUS_EXPR, type, op0, op1);\n+      tree op1 = fold_offsetof (arg, val);\n+      return fold_build_pointer_plus (op0, op1);\n     }\n \n   /* Handle complex lvalues (when permitted)"}, {"sha": "bdd2452ffe133ec36bf163f89967c092841ce1ba", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1560,9 +1560,7 @@ build_m_component_ref (tree datum, tree component)\n       /* Build an expression for \"object + offset\" where offset is the\n \t value stored in the pointer-to-data-member.  */\n       ptype = build_pointer_type (type);\n-      datum = build2 (POINTER_PLUS_EXPR, ptype,\n-\t\t      fold_convert (ptype, datum),\n-\t\t      build_nop (sizetype, component));\n+      datum = fold_build_pointer_plus (fold_convert (ptype, datum), component);\n       datum = cp_build_indirect_ref (datum, RO_NULL, tf_warning_or_error);\n       /* If the object expression was an rvalue, return an rvalue.  */\n       if (!is_lval)"}, {"sha": "c5539bf4616ce8a2fd8fd0f1915077259bfe9035", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -4221,8 +4221,7 @@ build_range_check (location_t loc, tree type, tree exp, int in_p,\n \t  low = fold_convert_loc (loc, sizetype, low);\n \t  low = fold_build1_loc (loc, NEGATE_EXPR, sizetype, low);\n           return build_range_check (loc, type,\n-\t\t\t     \t    fold_build2_loc (loc, POINTER_PLUS_EXPR,\n-\t\t\t\t\t\t etype, exp, low),\n+\t\t\t     \t    fold_build_pointer_plus_loc (loc, exp, low),\n \t\t\t            1, build_int_cst (etype, 0), value);\n \t}\n       return 0;\n@@ -9584,9 +9583,8 @@ fold_binary_loc (location_t loc,\n \t  inner = fold_build2_loc (loc, PLUS_EXPR, sizetype,\n \t\t\t       arg01, fold_convert_loc (loc, sizetype, arg1));\n \t  return fold_convert_loc (loc, type,\n-\t\t\t\t   fold_build2_loc (loc, POINTER_PLUS_EXPR,\n-\t\t\t\t\t\tTREE_TYPE (arg00),\n-\t\t\t\t\t\targ00, inner));\n+\t\t\t\t   fold_build_pointer_plus_loc (loc,\n+\t\t\t\t\t\t\t\targ00, inner));\n \t}\n \n       /* PTR_CST +p CST -> CST1 */"}, {"sha": "b3019f3571e4c9753d487d3117f2012ce5c6190b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1,3 +1,11 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans-expr.c (fill_with_spaces): Use fold_build_pointer_plus.\n+\t(gfc_trans_string_copy): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_repeat): Likewise.\n+\t* trans-types.c (gfc_get_array_descr_info): Likewise.\n+\t* trans.c (gfc_build_array_ref): Likewise.\n+\n 2011-07-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/49708"}, {"sha": "26d43980ff9a5c6aedd7508aedd6d2c7b53bbfe7", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -3790,8 +3790,8 @@ fill_with_spaces (tree start, tree type, tree size)\n \t\t  fold_build2_loc (input_location, MINUS_EXPR, sizetype, i,\n \t\t\t\t   TYPE_SIZE_UNIT (type)));\n   gfc_add_modify (&loop, el,\n-\t\t  fold_build2_loc (input_location, POINTER_PLUS_EXPR,\n-\t\t\t\t   TREE_TYPE (el), el, TYPE_SIZE_UNIT (type)));\n+\t\t  fold_build_pointer_plus_loc (input_location,\n+\t\t\t\t\t       el, TYPE_SIZE_UNIT (type)));\n \n   /* Making the loop... actually loop!  */\n   tmp = gfc_finish_block (&loop);\n@@ -3917,8 +3917,7 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n \t\t\t  built_in_decls[BUILT_IN_MEMMOVE],\n \t\t\t  3, dest, src, slen);\n \n-  tmp4 = fold_build2_loc (input_location, POINTER_PLUS_EXPR, TREE_TYPE (dest),\n-\t\t\t  dest, fold_convert (sizetype, slen));\n+  tmp4 = fold_build_pointer_plus_loc (input_location, dest, slen);\n   tmp4 = fill_with_spaces (tmp4, chartype,\n \t\t\t   fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t\t    TREE_TYPE(dlen), dlen, slen));"}, {"sha": "0c8abc6ca0d0eb95c78f8b9b1344097e40d15aa1", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -5998,9 +5998,8 @@ gfc_conv_intrinsic_repeat (gfc_se * se, gfc_expr * expr)\n \t\t\t fold_convert (gfc_charlen_type_node, count));\n   tmp = fold_build2_loc (input_location, MULT_EXPR, gfc_charlen_type_node,\n \t\t\t tmp, fold_convert (gfc_charlen_type_node, size));\n-  tmp = fold_build2_loc (input_location, POINTER_PLUS_EXPR, pvoid_type_node,\n-\t\t\t fold_convert (pvoid_type_node, dest),\n-\t\t\t fold_convert (sizetype, tmp));\n+  tmp = fold_build_pointer_plus_loc (input_location,\n+\t\t\t\t     fold_convert (pvoid_type_node, dest), tmp);\n   tmp = build_call_expr_loc (input_location,\n \t\t\t     built_in_decls[BUILT_IN_MEMMOVE], 3, tmp, src,\n \t\t\t     fold_build2_loc (input_location, MULT_EXPR,"}, {"sha": "01587eb5f2bbeb30dd400d57aedc5e7e325810c5", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -2899,7 +2899,7 @@ gfc_get_array_descr_info (const_tree type, struct array_descr_info *info)\n \n   t = base_decl;\n   if (!integer_zerop (data_off))\n-    t = build2 (POINTER_PLUS_EXPR, ptype, t, data_off);\n+    t = fold_build_pointer_plus (t, data_off);\n   t = build1 (NOP_EXPR, build_pointer_type (ptr_type_node), t);\n   info->data_location = build1 (INDIRECT_REF, ptr_type_node, t);\n   if (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_ALLOCATABLE)\n@@ -2912,12 +2912,14 @@ gfc_get_array_descr_info (const_tree type, struct array_descr_info *info)\n \n   for (dim = 0; dim < rank; dim++)\n     {\n-      t = build2 (POINTER_PLUS_EXPR, ptype, base_decl,\n-\t\t  size_binop (PLUS_EXPR, dim_off, lower_suboff));\n+      t = fold_build_pointer_plus (base_decl,\n+\t\t\t\t   size_binop (PLUS_EXPR,\n+\t\t\t\t\t       dim_off, lower_suboff));\n       t = build1 (INDIRECT_REF, gfc_array_index_type, t);\n       info->dimen[dim].lower_bound = t;\n-      t = build2 (POINTER_PLUS_EXPR, ptype, base_decl,\n-\t\t  size_binop (PLUS_EXPR, dim_off, upper_suboff));\n+      t = fold_build_pointer_plus (base_decl,\n+\t\t\t\t   size_binop (PLUS_EXPR,\n+\t\t\t\t\t       dim_off, upper_suboff));\n       t = build1 (INDIRECT_REF, gfc_array_index_type, t);\n       info->dimen[dim].upper_bound = t;\n       if (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_ASSUMED_SHAPE\n@@ -2936,8 +2938,9 @@ gfc_get_array_descr_info (const_tree type, struct array_descr_info *info)\n \t\t      info->dimen[dim].lower_bound,\n \t\t      info->dimen[dim].upper_bound);\n \t}\n-      t = build2 (POINTER_PLUS_EXPR, ptype, base_decl,\n-\t\t  size_binop (PLUS_EXPR, dim_off, stride_suboff));\n+      t = fold_build_pointer_plus (base_decl,\n+\t\t\t\t   size_binop (PLUS_EXPR,\n+\t\t\t\t\t       dim_off, stride_suboff));\n       t = build1 (INDIRECT_REF, gfc_array_index_type, t);\n       t = build2 (MULT_EXPR, gfc_array_index_type, t, elem_size);\n       info->dimen[dim].stride = t;"}, {"sha": "578f2258247b57bfe17d434f0f654706a7d4397e", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -345,9 +345,7 @@ gfc_build_array_ref (tree base, tree offset, tree decl)\n \t\t\t\tgfc_array_index_type,\n \t\t\t\toffset, GFC_DECL_SPAN(decl));\n       tmp = gfc_build_addr_expr (pvoid_type_node, base);\n-      tmp = fold_build2_loc (input_location, POINTER_PLUS_EXPR,\n-\t\t\t     pvoid_type_node, tmp,\n-\t\t\t     fold_convert (sizetype, offset));\n+      tmp = fold_build_pointer_plus_loc (input_location, tmp, offset);\n       tmp = fold_convert (build_pointer_type (type), tmp);\n       if (!TYPE_STRING_FLAG (type))\n \ttmp = build_fold_indirect_ref_loc (input_location, tmp);"}, {"sha": "6f3aee6ee68efdde1d2212df1a7724941eb9606d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1,3 +1,14 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (static): Use fold_build_pointer_plus.\n+\t* class.c (make_class_data): Likewise.\n+\t(build_symbol_entry): Likewise.\n+\t* except.c (build_exception_object_ref): Likewise.\n+\t* expr.c (build_java_arrayaccess): Likewise.\n+\t(build_field_ref): Likewise.\n+\t(build_known_method_ref): Likewise.\n+\t(build_invokevirtual): Likewise.\n+\n 2011-07-06  Richard Guenther  <rguenther@suse.de>\n \n \t* decl.c (java_init_decl_processing):"}, {"sha": "1e94bcab4d2a5ce45eaffd8ef64b4fbc350b0bad", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -283,10 +283,7 @@ static tree\n build_addr_sum (tree type, tree addr, tree offset)\n {\n   tree ptr_type = build_pointer_type (type);\n-  return fold_build2 (POINTER_PLUS_EXPR,\n-\t\t      ptr_type,\n-\t\t      fold_convert (ptr_type, addr),\n-\t\t      fold_convert (sizetype, offset));\n+  return fold_build_pointer_plus (fold_convert (ptr_type, addr), offset);\n }\n \n /* Make sure that this-arg is non-NULL.  This is a security check.  */"}, {"sha": "3bb5ff44f6ef489a068753e6964fa2e2fea49905", "filename": "gcc/java/class.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -2085,10 +2085,10 @@ make_class_data (tree type)\n   PUSH_FIELD_VALUE (v1, \"vtable\",\n \t\t    (flag_indirect_classes \n \t\t     ? null_pointer_node\n-\t\t     : build2 (POINTER_PLUS_EXPR, dtable_ptr_type,\n-\t\t\t       build1 (ADDR_EXPR, dtable_ptr_type,\n-\t\t\t\t       class_dtable_decl),\n-\t\t\t       dtable_start_offset)));\n+\t\t     : fold_build_pointer_plus\n+\t\t\t (build1 (ADDR_EXPR, dtable_ptr_type,\n+\t\t\t\t  class_dtable_decl),\n+\t\t\t  dtable_start_offset)));\n   if (! flag_hash_synchronization)\n     PUSH_FIELD_VALUE (v1, \"sync_info\", null_pointer_node);\n   FINISH_RECORD_CONSTRUCTOR (temp, v1, object_type_node);\n@@ -2131,10 +2131,10 @@ make_class_data (tree type)\n   PUSH_FIELD_VALUE (v2, \"vtable\",\n                     (flag_indirect_dispatch || dtable_decl == NULL_TREE\n                      ? null_pointer_node\n-                     : build2 (POINTER_PLUS_EXPR, dtable_ptr_type,\n-\t\t\t\tbuild1 (ADDR_EXPR, dtable_ptr_type,\n-\t\t\t\t\tdtable_decl),\n-                               dtable_start_offset)));\n+                     : fold_build_pointer_plus\n+\t\t\t (build1 (ADDR_EXPR, dtable_ptr_type,\n+\t\t\t\t  dtable_decl),\n+\t\t\t  dtable_start_offset)));\n   add_table_and_syms (&v2, TYPE_OTABLE_METHODS (type),\n                       \"otable\", TYPE_OTABLE_DECL (type), otable_ptr_type,\n                       \"otable_syms\", TYPE_OTABLE_SYMS_DECL (type));\n@@ -2896,8 +2896,7 @@ build_symbol_entry (tree decl, tree special)\n      system that this is a \"special\" symbol, i.e. one that should\n      bypass access controls.  */\n   if (special != NULL_TREE)\n-    signature = build2 (POINTER_PLUS_EXPR, TREE_TYPE (signature), signature,\n-\t\t\tfold_convert (sizetype, special));\n+    signature = fold_build_pointer_plus (signature, special);\n \n   return build_symbol_table_entry (clname, name, signature);\n } "}, {"sha": "f5e5bb9e6649b02074c1226c9f367199857dabd4", "filename": "gcc/java/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -488,7 +488,7 @@ build_exception_object_ref (tree type)\n      The java object is immediately before the generic exception header.  */\n   obj = build_exception_object_var ();\n   obj = fold_convert (build_pointer_type (type), obj);\n-  obj = build2 (POINTER_PLUS_EXPR, TREE_TYPE (obj), obj,\n+  obj = fold_build_pointer_plus (obj,\n \t\tfold_build1 (NEGATE_EXPR, sizetype,\n \t\t\t     TYPE_SIZE_UNIT (TREE_TYPE (obj))));\n   obj = build1 (INDIRECT_REF, type, obj);"}, {"sha": "4686f30309bb0944da95d466e6a5114c22db3ecf", "filename": "gcc/java/expr.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -936,7 +936,7 @@ build_java_arrayaccess (tree array, tree type, tree index)\n \t\t  size_exp);\n \n   /* Sum the byte offset and the address of the data field.  */\n-  node = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (node), node, index);\n+  node = fold_build_pointer_plus (node, index);\n \n   /* Finally, return\n \n@@ -1743,12 +1743,8 @@ build_field_ref (tree self_value, tree self_class, tree name)\n \t\t\t\t\t 1, otable_index),\n \t\t\tfield_offset);\n \t  \n-\t  field_offset = fold (convert (sizetype, field_offset));\n \t  self_value = java_check_reference (self_value, check);\n-\t  address \n-\t    = fold_build2 (POINTER_PLUS_EXPR, \n-\t\t\t   TREE_TYPE (self_value),\n-\t\t\t   self_value, field_offset);\n+\t  address = fold_build_pointer_plus (self_value, field_offset);\n \t  address = fold_convert (build_pointer_type (TREE_TYPE (field_decl)),\n \t\t\t\t  address);\n \t  return fold_build1 (INDIRECT_REF, TREE_TYPE (field_decl), address);\n@@ -2255,8 +2251,7 @@ build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n \t  method_index++;\n \t}\n       method_index *= int_size_in_bytes (method_type_node);\n-      ref = fold_build2 (POINTER_PLUS_EXPR, method_ptr_type_node,\n-\t\t\t ref, size_int (method_index));\n+      ref = fold_build_pointer_plus_hwi (ref, method_index);\n       ref = build1 (INDIRECT_REF, method_type_node, ref);\n       func = build3 (COMPONENT_REF, nativecode_ptr_type_node,\n \t\t     ref, lookup_field (&method_type_node, ncode_ident),\n@@ -2349,8 +2344,7 @@ build_invokevirtual (tree dtable, tree method, tree special)\n \t\t\t\t   size_int (TARGET_VTABLE_USES_DESCRIPTORS));\n     }\n \n-  func = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (dtable), dtable,\n-\t\t      convert (sizetype, method_index));\n+  func = fold_build_pointer_plus (dtable, method_index);\n \n   if (TARGET_VTABLE_USES_DESCRIPTORS)\n     func = build1 (NOP_EXPR, nativecode_ptr_type_node, func);"}, {"sha": "c31ba7fb6a6b8b1b58b72f2662c333519611efaf", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1,3 +1,9 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* objc-next-runtime-abi-02.c (objc_v2_build_ivar_ref):\n+\tUse fold_build_pointer_plus.\n+\t(objc2_build_ehtype_initializer): Likewise.\n+\n 2011-07-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-encoding.h (obstack.h): Do not include."}, {"sha": "9ef08f01576243cc239b7cee46ade4ee2ae22710", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1381,8 +1381,7 @@ objc_v2_build_ivar_ref (tree datum, tree component)\n \t\t       string_type_node, build_fold_addr_expr (datum));\n \n   /* (char*)datum + offset */\n-  expr = fold_build2_loc (input_location,\n-\t\t\t  POINTER_PLUS_EXPR, string_type_node, expr, offset);\n+  expr = fold_build_pointer_plus_loc (input_location, expr, offset);\n \n   /* (ftype*)((char*)datum + offset) */\n   expr = build_c_cast (input_location, build_pointer_type (ftype), expr);\n@@ -3486,7 +3485,7 @@ objc2_build_ehtype_initializer (tree name, tree cls)\n     }\n   addr = build_fold_addr_expr_with_type (next_v2_ehvtable_decl, ptr_type_node);\n   offs = size_int (2 * int_cst_value (TYPE_SIZE_UNIT (ptr_type_node)));\n-  addr = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, addr, offs);\n+  addr = fold_build_pointer_plus (addr, offs);\n \n   CONSTRUCTOR_APPEND_ELT (initlist, NULL_TREE, addr);\n "}, {"sha": "ccd248c9fe8538550b0d7afba4f07da048dc0196", "filename": "gcc/omp-low.c", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -310,9 +310,7 @@ extract_omp_for_data (gimple for_stmt, struct omp_for_data *fd,\n \t  break;\n \tcase LE_EXPR:\n \t  if (POINTER_TYPE_P (TREE_TYPE (loop->n2)))\n-\t    loop->n2 = fold_build2_loc (loc,\n-\t\t\t\t    POINTER_PLUS_EXPR, TREE_TYPE (loop->n2),\n-\t\t\t\t    loop->n2, size_one_node);\n+\t    loop->n2 = fold_build_pointer_plus_hwi_loc (loc, loop->n2, 1);\n \t  else\n \t    loop->n2 = fold_build2_loc (loc,\n \t\t\t\t    PLUS_EXPR, TREE_TYPE (loop->n2), loop->n2,\n@@ -321,9 +319,7 @@ extract_omp_for_data (gimple for_stmt, struct omp_for_data *fd,\n \t  break;\n \tcase GE_EXPR:\n \t  if (POINTER_TYPE_P (TREE_TYPE (loop->n2)))\n-\t    loop->n2 = fold_build2_loc (loc,\n-\t\t\t\t    POINTER_PLUS_EXPR, TREE_TYPE (loop->n2),\n-\t\t\t\t    loop->n2, size_int (-1));\n+\t    loop->n2 = fold_build_pointer_plus_hwi_loc (loc, loop->n2, -1);\n \t  else\n \t    loop->n2 = fold_build2_loc (loc,\n \t\t\t\t    MINUS_EXPR, TREE_TYPE (loop->n2), loop->n2,\n@@ -3914,8 +3910,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t  t = fold_build2 (MULT_EXPR, itype, t,\n \t\t\t   fold_convert (itype, fd->loops[i].step));\n \t  if (POINTER_TYPE_P (vtype))\n-\t    t = fold_build2 (POINTER_PLUS_EXPR, vtype,\n-\t\t\t     fd->loops[i].n1, fold_convert (sizetype, t));\n+\t    t = fold_build_pointer_plus (fd->loops[i].n1, t);\n \t  else\n \t    t = fold_build2 (PLUS_EXPR, itype, fd->loops[i].n1, t);\n \t  t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n@@ -3944,8 +3939,7 @@ expand_omp_for_generic (struct omp_region *region,\n       vback = gimple_omp_continue_control_def (stmt);\n \n       if (POINTER_TYPE_P (type))\n-\tt = fold_build2 (POINTER_PLUS_EXPR, type, vmain,\n-\t\t\t fold_convert (sizetype, fd->loop.step));\n+\tt = fold_build_pointer_plus (vmain, fd->loop.step);\n       else\n \tt = fold_build2 (PLUS_EXPR, type, vmain, fd->loop.step);\n       t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n@@ -3989,9 +3983,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t      set_immediate_dominator (CDI_DOMINATORS, bb, last_bb);\n \n \t      if (POINTER_TYPE_P (vtype))\n-\t\tt = fold_build2 (POINTER_PLUS_EXPR, vtype,\n-\t\t\t\t fd->loops[i].v,\n-\t\t\t\t fold_convert (sizetype, fd->loops[i].step));\n+\t\tt = fold_build_pointer_plus (fd->loops[i].v, fd->loops[i].step);\n \t      else\n \t\tt = fold_build2 (PLUS_EXPR, vtype, fd->loops[i].v,\n \t\t\t\t fd->loops[i].step);\n@@ -4239,8 +4231,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n   t = fold_convert (itype, s0);\n   t = fold_build2 (MULT_EXPR, itype, t, fd->loop.step);\n   if (POINTER_TYPE_P (type))\n-    t = fold_build2 (POINTER_PLUS_EXPR, type, fd->loop.n1,\n-\t\t     fold_convert (sizetype, t));\n+    t = fold_build_pointer_plus (fd->loop.n1, t);\n   else\n     t = fold_build2 (PLUS_EXPR, type, t, fd->loop.n1);\n   t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n@@ -4251,8 +4242,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n   t = fold_convert (itype, e0);\n   t = fold_build2 (MULT_EXPR, itype, t, fd->loop.step);\n   if (POINTER_TYPE_P (type))\n-    t = fold_build2 (POINTER_PLUS_EXPR, type, fd->loop.n1,\n-\t\t     fold_convert (sizetype, t));\n+    t = fold_build_pointer_plus (fd->loop.n1, t);\n   else\n     t = fold_build2 (PLUS_EXPR, type, t, fd->loop.n1);\n   e = force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n@@ -4267,8 +4257,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n   vback = gimple_omp_continue_control_def (stmt);\n \n   if (POINTER_TYPE_P (type))\n-    t = fold_build2 (POINTER_PLUS_EXPR, type, vmain,\n-\t\t     fold_convert (sizetype, fd->loop.step));\n+    t = fold_build_pointer_plus (vmain, fd->loop.step);\n   else\n     t = fold_build2 (PLUS_EXPR, type, vmain, fd->loop.step);\n   t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n@@ -4442,8 +4431,7 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n   t = fold_build2 (MULT_EXPR, itype, threadid, fd->chunk_size);\n   t = fold_build2 (MULT_EXPR, itype, t, fd->loop.step);\n   if (POINTER_TYPE_P (type))\n-    t = fold_build2 (POINTER_PLUS_EXPR, type, fd->loop.n1,\n-\t\t     fold_convert (sizetype, t));\n+    t = fold_build_pointer_plus (fd->loop.n1, t);\n   else\n     t = fold_build2 (PLUS_EXPR, type, t, fd->loop.n1);\n   v_extra = force_gimple_operand_gsi (&si, t, true, NULL_TREE,\n@@ -4475,8 +4463,7 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n   t = fold_convert (itype, s0);\n   t = fold_build2 (MULT_EXPR, itype, t, fd->loop.step);\n   if (POINTER_TYPE_P (type))\n-    t = fold_build2 (POINTER_PLUS_EXPR, type, fd->loop.n1,\n-\t\t     fold_convert (sizetype, t));\n+    t = fold_build_pointer_plus (fd->loop.n1, t);\n   else\n     t = fold_build2 (PLUS_EXPR, type, t, fd->loop.n1);\n   t = force_gimple_operand_gsi (&si, t, false, NULL_TREE,\n@@ -4487,8 +4474,7 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n   t = fold_convert (itype, e0);\n   t = fold_build2 (MULT_EXPR, itype, t, fd->loop.step);\n   if (POINTER_TYPE_P (type))\n-    t = fold_build2 (POINTER_PLUS_EXPR, type, fd->loop.n1,\n-\t\t     fold_convert (sizetype, t));\n+    t = fold_build_pointer_plus (fd->loop.n1, t);\n   else\n     t = fold_build2 (PLUS_EXPR, type, t, fd->loop.n1);\n   e = force_gimple_operand_gsi (&si, t, true, NULL_TREE,\n@@ -4503,8 +4489,7 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n   v_back = gimple_omp_continue_control_def (stmt);\n \n   if (POINTER_TYPE_P (type))\n-    t = fold_build2 (POINTER_PLUS_EXPR, type, v_main,\n-\t\t     fold_convert (sizetype, fd->loop.step));\n+    t = fold_build_pointer_plus (v_main, fd->loop.step);\n   else\n     t = fold_build2 (PLUS_EXPR, type, v_main, fd->loop.step);\n   stmt = gimple_build_assign (v_back, t);"}, {"sha": "06b7f2659dae736a00a7cff2a394f712256a268c", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -387,7 +387,7 @@ add_elt_to_tree (tree expr, tree type, tree elt, double_int scale,\n \treturn fold_convert (type, elt);\n \n       if (POINTER_TYPE_P (type))\n-        return fold_build2 (POINTER_PLUS_EXPR, type, expr, elt);\n+        return fold_build_pointer_plus (expr, elt);\n       return fold_build2 (PLUS_EXPR, type, expr, elt);\n     }\n \n@@ -399,7 +399,7 @@ add_elt_to_tree (tree expr, tree type, tree elt, double_int scale,\n       if (POINTER_TYPE_P (type))\n \t{\n \t  elt = fold_build1 (NEGATE_EXPR, type1, elt);\n-\t  return fold_build2 (POINTER_PLUS_EXPR, type, expr, elt);\n+\t  return fold_build_pointer_plus (expr, elt);\n \t}\n       return fold_build2 (MINUS_EXPR, type, expr, elt);\n     }\n@@ -423,7 +423,7 @@ add_elt_to_tree (tree expr, tree type, tree elt, double_int scale,\n     {\n       if (code == MINUS_EXPR)\n         elt = fold_build1 (NEGATE_EXPR, type1, elt);\n-      return fold_build2 (POINTER_PLUS_EXPR, type, expr, elt);\n+      return fold_build_pointer_plus (expr, elt);\n     }\n   return fold_build2 (code, type, expr, elt);\n }"}, {"sha": "3e18e8d1837ec2dd6b389bf631dd0bd3893059fd", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -604,8 +604,7 @@ split_constant_offset_1 (tree type, tree op0, enum tree_code code, tree op1,\n \t    split_constant_offset (poffset, &poffset, &off1);\n \t    off0 = size_binop (PLUS_EXPR, off0, off1);\n \t    if (POINTER_TYPE_P (TREE_TYPE (base)))\n-\t      base = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (base),\n-\t\t\t\t  base, fold_convert (sizetype, poffset));\n+\t      base = fold_build_pointer_plus (base, poffset);\n \t    else\n \t      base = fold_build2 (PLUS_EXPR, TREE_TYPE (base), base,\n \t\t\t\t  fold_convert (TREE_TYPE (base), poffset));"}, {"sha": "165431184ab3a92e98f8dd3a8849a1cfb5a3ff8a", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -285,9 +285,8 @@ generate_memset_zero (gimple stmt, tree op0, tree nb_iter,\n \t\t\t\t  TYPE_SIZE_UNIT (TREE_TYPE (op0)));\n     }\n \n-  addr_base = fold_build2_loc (loc, POINTER_PLUS_EXPR,\n-\t\t\t       TREE_TYPE (DR_BASE_ADDRESS (dr)),\n-\t\t\t       DR_BASE_ADDRESS (dr), addr_base);\n+  addr_base = fold_build_pointer_plus_loc (loc,\n+\t\t\t\t\t   DR_BASE_ADDRESS (dr), addr_base);\n   mem = force_gimple_operand (addr_base, &stmts, true, NULL);\n   gimple_seq_add_seq (&stmt_list, stmts);\n "}, {"sha": "26ef23e15f7fa2ce7e6369921697ab3238f98c43", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -843,9 +843,8 @@ mf_xform_derefs_1 (gimple_stmt_iterator *iter, tree *tp,\n \t      elt = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (elt)),\n \t\t\t    elt);\n             addr = fold_convert_loc (location, ptr_type_node, elt ? elt : base);\n-            addr = fold_build2_loc (location, POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\t\taddr, fold_convert_loc (location, sizetype,\n-\t\t\t\t\t\t\tbyte_position (field)));\n+            addr = fold_build_pointer_plus_loc (location,\n+\t\t\t\t\t\taddr, byte_position (field));\n           }\n         else\n           addr = build1 (ADDR_EXPR, build_pointer_type (type), t);\n@@ -861,33 +860,25 @@ mf_xform_derefs_1 (gimple_stmt_iterator *iter, tree *tp,\n     case INDIRECT_REF:\n       addr = TREE_OPERAND (t, 0);\n       base = addr;\n-      limit = fold_build2_loc (location, POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\t   fold_build2_loc (location,\n-\t\t\t\t\tPOINTER_PLUS_EXPR, ptr_type_node, base,\n-\t\t\t\t\tsize),\n-\t\t\t   size_int (-1));\n+      limit = fold_build_pointer_plus_hwi_loc\n+\t(location, fold_build_pointer_plus_loc (location, base, size), -1);\n       break;\n \n     case MEM_REF:\n-      addr = fold_build2_loc (location, POINTER_PLUS_EXPR, TREE_TYPE (TREE_OPERAND (t, 0)),\n-\t\t     TREE_OPERAND (t, 0),\n-\t\t     fold_convert (sizetype, TREE_OPERAND (t, 1)));\n+      addr = fold_build_pointer_plus_loc (location, TREE_OPERAND (t, 0),\n+\t\t\t\t\t  TREE_OPERAND (t, 1));\n       base = addr;\n-      limit = fold_build2_loc (location, POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\t   fold_build2_loc (location,\n-\t\t\t\t\tPOINTER_PLUS_EXPR, ptr_type_node, base,\n-\t\t\t\t\tsize),\n-\t\t\t   size_int (-1));\n+      limit = fold_build_pointer_plus_hwi_loc (location,\n+\t\t\t   fold_build_pointer_plus_loc (location,\n+\t\t\t\t\t\t\tbase, size), -1);\n       break;\n \n     case TARGET_MEM_REF:\n       addr = tree_mem_ref_addr (ptr_type_node, t);\n       base = addr;\n-      limit = fold_build2_loc (location, POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\t   fold_build2_loc (location,\n-\t\t\t\t\tPOINTER_PLUS_EXPR, ptr_type_node, base,\n-\t\t\t\t\tsize),\n-\t\t\t   size_int (-1));\n+      limit = fold_build_pointer_plus_hwi_loc (location,\n+\t\t\t   fold_build_pointer_plus_loc (location,\n+\t\t\t\t\t\t\tbase, size), -1);\n       break;\n \n     case ARRAY_RANGE_REF:\n@@ -920,15 +911,12 @@ mf_xform_derefs_1 (gimple_stmt_iterator *iter, tree *tp,\n \n         addr = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n         addr = convert (ptr_type_node, addr);\n-        addr = fold_build2_loc (location, POINTER_PLUS_EXPR,\n-\t\t\t    ptr_type_node, addr, ofs);\n+        addr = fold_build_pointer_plus_loc (location, addr, ofs);\n \n         base = addr;\n-        limit = fold_build2_loc (location, POINTER_PLUS_EXPR, ptr_type_node,\n-                             fold_build2_loc (location,\n-\t\t\t\t\t  POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\t\t\t   base, size),\n-                             size_int (-1));\n+        limit = fold_build_pointer_plus_hwi_loc (location,\n+                             fold_build_pointer_plus_loc (location,\n+\t\t\t\t\t\t\t  base, size), -1);\n       }\n       break;\n "}, {"sha": "94b0512bdafda5b0661fd63546a95776c22d9fde", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1396,7 +1396,7 @@ ref_at_iteration (struct loop *loop, tree ref, int iter)\n \t{\n \t  val = fold_build2 (MULT_EXPR, sizetype, iv.step,\n \t\t\t     size_int (iter));\n-\t  val = fold_build2 (POINTER_PLUS_EXPR, type, iv.base, val);\n+\t  val = fold_build_pointer_plus (iv.base, val);\n \t}\n       else\n \t{"}, {"sha": "e4e944bf815f713b606606652bb9abaa3ec3e9e3", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -302,7 +302,7 @@ tree_mem_ref_addr (tree type, tree mem_ref)\n     }\n \n   if (addr_off)\n-    addr = fold_build2 (POINTER_PLUS_EXPR, type, addr_base, addr_off);\n+    addr = fold_build_pointer_plus (addr_base, addr_off);\n   else\n     addr = addr_base;\n \n@@ -521,9 +521,7 @@ add_to_parts (struct mem_address *parts, tree elt)\n   /* Add ELT to base.  */\n   type = TREE_TYPE (parts->base);\n   if (POINTER_TYPE_P (type))\n-    parts->base = fold_build2 (POINTER_PLUS_EXPR, type,\n-\t\t\t       parts->base,\n-\t\t\t       fold_convert (sizetype, elt));\n+    parts->base = fold_build_pointer_plus (parts->base, elt);\n   else\n     parts->base = fold_build2 (PLUS_EXPR, type,\n \t\t\t       parts->base, elt);\n@@ -692,7 +690,6 @@ create_mem_ref (gimple_stmt_iterator *gsi, tree type, aff_tree *addr,\n \t\ttree alias_ptr_type, tree iv_cand, tree base_hint, bool speed)\n {\n   tree mem_ref, tmp;\n-  tree atype;\n   struct mem_address parts;\n \n   addr_to_parts (type, addr, iv_cand, base_hint, &parts, speed);\n@@ -731,11 +728,8 @@ create_mem_ref (gimple_stmt_iterator *gsi, tree type, aff_tree *addr,\n \n \t  if (parts.index)\n \t    {\n-\t      atype = TREE_TYPE (tmp);\n \t      parts.base = force_gimple_operand_gsi_1 (gsi,\n-\t\t\tfold_build2 (POINTER_PLUS_EXPR, atype,\n-\t\t\t\t     tmp,\n-\t\t\t\t     fold_convert (sizetype, parts.base)),\n+\t\t\tfold_build_pointer_plus (tmp, parts.base),\n \t\t\tis_gimple_mem_ref_addr, NULL_TREE, true, GSI_SAME_STMT);\n \t    }\n \t  else\n@@ -758,11 +752,8 @@ create_mem_ref (gimple_stmt_iterator *gsi, tree type, aff_tree *addr,\n       /* Add index to base.  */\n       if (parts.base)\n \t{\n-\t  atype = TREE_TYPE (parts.base);\n \t  parts.base = force_gimple_operand_gsi_1 (gsi,\n-\t\t\tfold_build2 (POINTER_PLUS_EXPR, atype,\n-\t\t\t\t     parts.base,\n-\t\t\t    \t     parts.index),\n+\t\t\tfold_build_pointer_plus (parts.base, parts.index),\n \t\t\tis_gimple_mem_ref_addr, NULL_TREE, true, GSI_SAME_STMT);\n \t}\n       else\n@@ -779,11 +770,8 @@ create_mem_ref (gimple_stmt_iterator *gsi, tree type, aff_tree *addr,\n       /* Try adding offset to base.  */\n       if (parts.base)\n \t{\n-\t  atype = TREE_TYPE (parts.base);\n \t  parts.base = force_gimple_operand_gsi_1 (gsi,\n-\t\t\tfold_build2 (POINTER_PLUS_EXPR, atype,\n-\t\t\t\t     parts.base,\n-\t\t\t\t     fold_convert (sizetype, parts.offset)),\n+\t\t\tfold_build_pointer_plus (parts.base, parts.offset),\n \t\t\tis_gimple_mem_ref_addr, NULL_TREE, true, GSI_SAME_STMT);\n \t}\n       else"}, {"sha": "4d4b67af3f943ee58ff4a269f6efe0ce9e70d660", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -3586,9 +3586,7 @@ force_expr_to_var_cost (tree expr, bool speed)\n \t  symbol_cost[i] = computation_cost (addr, i) + 1;\n \n \t  address_cost[i]\n-\t    = computation_cost (build2 (POINTER_PLUS_EXPR, type,\n-\t\t\t\t\taddr,\n-\t\t\t\t\tbuild_int_cst (sizetype, 2000)), i) + 1;\n+\t    = computation_cost (fold_build_pointer_plus_hwi (addr, 2000), i) + 1;\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"force_expr_to_var_cost %s costs:\\n\", i ? \"speed\" : \"size\");"}, {"sha": "4acfc67b41f6ed52bf6c121cfd6467b8679c8c42", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -762,8 +762,7 @@ number_of_iterations_lt_to_ne (tree type, affine_iv *iv0, affine_iv *iv1,\n       else if (POINTER_TYPE_P (type))\n \tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n \t\t\t      iv0->base,\n-\t\t\t      fold_build2 (POINTER_PLUS_EXPR, type,\n-\t\t\t\t\t   iv1->base, tmod));\n+\t\t\t      fold_build_pointer_plus (iv1->base, tmod));\n       else\n \tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n \t\t\t      iv0->base,\n@@ -788,10 +787,9 @@ number_of_iterations_lt_to_ne (tree type, affine_iv *iv0, affine_iv *iv1,\n \tnoloop = boolean_false_node;\n       else if (POINTER_TYPE_P (type))\n \tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n-\t\t\t      fold_build2 (POINTER_PLUS_EXPR, type,\n-\t\t\t\t\t   iv0->base,\n-\t\t\t\t\t   fold_build1 (NEGATE_EXPR,\n-\t\t\t\t\t\t\ttype1, tmod)),\n+\t\t\t      fold_build_pointer_plus (iv0->base,\n+\t\t\t\t\t\t       fold_build1 (NEGATE_EXPR,\n+\t\t\t\t\t\t\t\t    type1, tmod)),\n \t\t\t      iv1->base);\n       else\n \tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n@@ -1166,16 +1164,13 @@ number_of_iterations_le (tree type, affine_iv *iv0, affine_iv *iv1,\n   if (integer_nonzerop (iv0->step))\n     {\n       if (POINTER_TYPE_P (type))\n-\tiv1->base = fold_build2 (POINTER_PLUS_EXPR, type, iv1->base,\n-\t\t\t\t build_int_cst (type1, 1));\n+\tiv1->base = fold_build_pointer_plus_hwi (iv1->base, 1);\n       else\n \tiv1->base = fold_build2 (PLUS_EXPR, type1, iv1->base,\n \t\t\t\t build_int_cst (type1, 1));\n     }\n   else if (POINTER_TYPE_P (type))\n-    iv0->base = fold_build2 (POINTER_PLUS_EXPR, type, iv0->base,\n-\t\t\t     fold_build1 (NEGATE_EXPR, type1,\n-\t\t\t\t\t  build_int_cst (type1, 1)));\n+    iv0->base = fold_build_pointer_plus_hwi (iv0->base, -1);\n   else\n     iv0->base = fold_build2 (MINUS_EXPR, type1,\n \t\t\t     iv0->base, build_int_cst (type1, 1));"}, {"sha": "88f95ef3d9700a7e6d82f582e6851fa9a1ac743e", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1100,8 +1100,7 @@ issue_prefetch_ref (struct mem_ref *ref, unsigned unroll_factor, unsigned ahead)\n           /* Determine the address to prefetch.  */\n           delta = (ahead + ap * ref->prefetch_mod) *\n \t\t   int_cst_value (ref->group->step);\n-          addr = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node,\n-                              addr_base, size_int (delta));\n+          addr = fold_build_pointer_plus_hwi (addr_base, delta);\n           addr = force_gimple_operand_gsi (&bsi, unshare_expr (addr), true, NULL,\n                                            true, GSI_SAME_STMT);\n         }\n@@ -1112,8 +1111,7 @@ issue_prefetch_ref (struct mem_ref *ref, unsigned unroll_factor, unsigned ahead)\n           forward = fold_build2 (MULT_EXPR, sizetype,\n                                  fold_convert (sizetype, ref->group->step),\n                                  fold_convert (sizetype, size_int (ahead)));\n-          addr = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, addr_base,\n-\t\t\t      forward);\n+          addr = fold_build_pointer_plus (addr_base, forward);\n           addr = force_gimple_operand_gsi (&bsi, unshare_expr (addr), true,\n \t\t\t\t\t   NULL, true, GSI_SAME_STMT);\n       }"}, {"sha": "f0d2f0d06b1bf326a699a6733f86776a5a6ac4a2", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -2645,9 +2645,7 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n \t     inner-loop: *(BASE+INIT).  (The first location is actually\n \t     BASE+INIT+OFFSET, but we add OFFSET separately later).  */\n           tree inner_base = build_fold_indirect_ref\n-                                (fold_build2 (POINTER_PLUS_EXPR,\n-                                              TREE_TYPE (base), base,\n-                                              fold_convert (sizetype, init)));\n+                                (fold_build_pointer_plus (base, init));\n \n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    {\n@@ -2928,8 +2926,7 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n \n   /* base + base_offset */\n   if (loop_vinfo)\n-    addr_base = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (data_ref_base),\n-                             data_ref_base, base_offset);\n+    addr_base = fold_build_pointer_plus (data_ref_base, base_offset);\n   else\n     {\n       addr_base = build1 (ADDR_EXPR,"}, {"sha": "af4f1a740811a85a7a66721ce968f0469a336ebf", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1819,9 +1819,7 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n \t\t\t fold_convert (TREE_TYPE (step_expr), niters),\n \t\t\t step_expr);\n       if (POINTER_TYPE_P (TREE_TYPE (init_expr)))\n-\tni = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (init_expr),\n-\t\t\t  init_expr,\n-\t\t\t  fold_convert (sizetype, off));\n+\tni = fold_build_pointer_plus (init_expr, off);\n       else\n \tni = fold_build2 (PLUS_EXPR, TREE_TYPE (init_expr),\n \t\t\t  init_expr,\n@@ -2476,14 +2474,12 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo,\n \t}\n \n       seg_a_min = addr_base_a;\n-      seg_a_max = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (addr_base_a), \n-\t\t\t       addr_base_a, segment_length_a);\n+      seg_a_max = fold_build_pointer_plus (addr_base_a, segment_length_a);\n       if (tree_int_cst_compare (DR_STEP (dr_a), size_zero_node) < 0)\n \tseg_a_min = seg_a_max, seg_a_max = addr_base_a;\n \n       seg_b_min = addr_base_b;\n-      seg_b_max = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (addr_base_b),\n-\t\t\t       addr_base_b, segment_length_b);\n+      seg_b_max = fold_build_pointer_plus (addr_base_b, segment_length_b);\n       if (tree_int_cst_compare (DR_STEP (dr_b), size_zero_node) < 0)\n \tseg_b_min = seg_b_max, seg_b_max = addr_base_b;\n "}, {"sha": "15498f4a5d0efb30e4b77be1576c9d75dff4db22", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -1877,8 +1877,7 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t\t\t\t   anti_max,\n \t\t\t\t   build_int_cst (TREE_TYPE (var_vr->min), 1));\n \t      else\n-\t\tmin = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (var_vr->min),\n-\t\t\t\t   anti_max, size_int (1));\n+\t\tmin = fold_build_pointer_plus_hwi (anti_max, 1);\n \t      max = real_max;\n \t      set_value_range (vr_p, VR_RANGE, min, max, vr_p->equiv);\n \t    }\n@@ -1905,9 +1904,7 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t\t\t\t   anti_min,\n \t\t\t\t   build_int_cst (TREE_TYPE (var_vr->min), 1));\n \t      else\n-\t\tmax = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (var_vr->min),\n-\t\t\t\t   anti_min,\n-\t\t\t\t   size_int (-1));\n+\t\tmax = fold_build_pointer_plus_hwi (anti_min, -1);\n \t      min = real_min;\n \t      set_value_range (vr_p, VR_RANGE, min, max, vr_p->equiv);\n \t    }"}, {"sha": "5fd62c7e8cb347e6b0c02b9a6d798926d597eece", "filename": "gcc/tree.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d49b6a7b28117095ef6889b5d010687fa52843c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5d49b6a7b28117095ef6889b5d010687fa52843c", "patch": "@@ -5305,6 +5305,25 @@ truth_value_p (enum tree_code code)\n \t  || code == TRUTH_XOR_EXPR || code == TRUTH_NOT_EXPR);\n }\n \n+/* Build and fold a POINTER_PLUS_EXPR at LOC offsetting PTR by OFF.  */\n+static inline tree\n+fold_build_pointer_plus_loc (location_t loc, tree ptr, tree off)\n+{\n+  return fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (ptr),\n+\t\t\t  ptr, fold_convert_loc (loc, sizetype, off));\n+}\n+#define fold_build_pointer_plus(p,o) \\\n+\tfold_build_pointer_plus_loc (UNKNOWN_LOCATION, p, o)\n+\n+/* Build and fold a POINTER_PLUS_EXPR at LOC offsetting PTR by OFF.  */\n+static inline tree\n+fold_build_pointer_plus_hwi_loc (location_t loc, tree ptr, HOST_WIDE_INT off)\n+{\n+  return fold_build2_loc (loc, POINTER_PLUS_EXPR, TREE_TYPE (ptr),\n+\t\t\t  ptr, size_int (off));\n+}\n+#define fold_build_pointer_plus_hwi(p,o) \\\n+\tfold_build_pointer_plus_hwi_loc (UNKNOWN_LOCATION, p, o)\n \n /* In builtins.c */\n extern tree fold_call_expr (location_t, tree, bool);"}]}