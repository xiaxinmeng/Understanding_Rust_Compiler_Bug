{"sha": "3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhMGE3NzBhNGIxMzY4YTlmMmNjYzI2MmY0ODNjYzgxMWNhOTMzMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-10T20:53:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-10T20:53:32Z"}, "message": "class.c (handle_using_decl): Always use OVL_CURRENT.\n\n\t* class.c (handle_using_decl): Always use OVL_CURRENT.\n\t(resolve_address_of_overloaded_function): Move iterator decl into\n\tfor scope.  Don't strip anticipated decls here.\n\nFrom-SVN: r247864", "tree": {"sha": "fbe41cbe805461c2ec49d31df428f83f0824db1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbe41cbe805461c2ec49d31df428f83f0824db1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa0a770a4b1368a9f2ccc262f483cc811ca9331/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dd836179aa32c3ded97ded16bb24305cefc43b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd836179aa32c3ded97ded16bb24305cefc43b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd836179aa32c3ded97ded16bb24305cefc43b0"}], "stats": {"total": 57, "additions": 25, "deletions": 32}, "files": [{"sha": "392323d5e8d8f41b3d70c0ea6779851e2aedacba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa0a770a4b1368a9f2ccc262f483cc811ca9331/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa0a770a4b1368a9f2ccc262f483cc811ca9331/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "patch": "@@ -1,5 +1,9 @@\n 2017-05-10  Nathan Sidwell  <nathan@acm.org>\n \n+\t* class.c (handle_using_decl): Always use OVL_CURRENT.\n+\t(resolve_address_of_overloaded_function): Move iterator decl into\n+\tfor scope.  Don't strip anticipated decls here.\n+\n \t* pt.c (print_candidates_1): Separate TREE_LIST and OVERLOAD\n \tprinting.\n \t(print_candidates): Adjust."}, {"sha": "15b583aa96d5e935ce5261fce40ee35c716ee674", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa0a770a4b1368a9f2ccc262f483cc811ca9331/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa0a770a4b1368a9f2ccc262f483cc811ca9331/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "patch": "@@ -1359,8 +1359,7 @@ handle_using_decl (tree using_decl, tree t)\n \t\t\t     tf_warning_or_error);\n   if (old_value)\n     {\n-      if (is_overloaded_fn (old_value))\n-\told_value = OVL_CURRENT (old_value);\n+      old_value = OVL_CURRENT (old_value);\n \n       if (DECL_P (old_value) && DECL_CONTEXT (old_value) == t)\n \t/* OK */;\n@@ -1384,7 +1383,7 @@ handle_using_decl (tree using_decl, tree t)\n \t{\n \t  error (\"%q+D invalid in %q#T\", using_decl, t);\n \t  error (\"  because of local method %q+#D with same name\",\n-\t\t OVL_CURRENT (old_value));\n+\t\t old_value);\n \t  return;\n \t}\n     }\n@@ -8184,39 +8183,29 @@ resolve_address_of_overloaded_function (tree target_type,\n      if we're just going to throw them out anyhow.  But, of course, we\n      can only do this when we don't *need* a template function.  */\n   if (!template_only)\n-    {\n-      tree fns;\n-\n-      for (fns = overload; fns; fns = OVL_NEXT (fns))\n-\t{\n-\t  tree fn = OVL_CURRENT (fns);\n-\n-\t  if (TREE_CODE (fn) == TEMPLATE_DECL)\n-\t    /* We're not looking for templates just yet.  */\n-\t    continue;\n+    for (tree fns = overload; fns; fns = OVL_NEXT (fns))\n+      {\n+\ttree fn = OVL_CURRENT (fns);\n \n-\t  if ((TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE)\n-\t      != is_ptrmem)\n-\t    /* We're looking for a non-static member, and this isn't\n-\t       one, or vice versa.  */\n-\t    continue;\n+\tif (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t  /* We're not looking for templates just yet.  */\n+\t  continue;\n \n-\t  /* Ignore functions which haven't been explicitly\n-\t     declared.  */\n-\t  if (DECL_ANTICIPATED (fn))\n-\t    continue;\n+\tif ((TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE) != is_ptrmem)\n+\t  /* We're looking for a non-static member, and this isn't\n+\t     one, or vice versa.  */\n+\t  continue;\n \n-\t  /* In C++17 we need the noexcept-qualifier to compare types.  */\n-\t  if (flag_noexcept_type)\n-\t    maybe_instantiate_noexcept (fn);\n+\t/* In C++17 we need the noexcept-qualifier to compare types.  */\n+\tif (flag_noexcept_type)\n+\t  maybe_instantiate_noexcept (fn);\n \n-\t  /* See if there's a match.  */\n-\t  tree fntype = static_fn_type (fn);\n-\t  if (same_type_p (target_fn_type, fntype)\n-\t      || fnptr_conv_p (target_fn_type, fntype))\n-\t    matches = tree_cons (fn, NULL_TREE, matches);\n-\t}\n-    }\n+\t/* See if there's a match.  */\n+\ttree fntype = static_fn_type (fn);\n+\tif (same_type_p (target_fn_type, fntype)\n+\t    || fnptr_conv_p (target_fn_type, fntype))\n+\t  matches = tree_cons (fn, NULL_TREE, matches);\n+      }\n \n   /* Now, if we've already got a match (or matches), there's no need\n      to proceed to the template functions.  But, if we don't have a"}]}