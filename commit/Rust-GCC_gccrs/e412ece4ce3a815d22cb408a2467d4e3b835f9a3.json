{"sha": "e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxMmVjZTRjZTNhODE1ZDIyY2I0MDhhMjQ2N2Q0ZTNiODM1ZjlhMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-25T10:57:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-25T10:57:53Z"}, "message": "re PR tree-optimization/71264 (ICE in convert_move)\n\n2016-05-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71264\n\t* tree-vect-stmts.c (vect_init_vector): Properly deal with\n\tvector type val.\n\n\t* gcc.dg/vect/pr71264.c: New testcase.\n\nFrom-SVN: r236699", "tree": {"sha": "e1cf9f7417a6ea712fde8c6cf87e9c854929d983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1cf9f7417a6ea712fde8c6cf87e9c854929d983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9e551ad26b6cd4d577bf083c87e638fd83ee6fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e551ad26b6cd4d577bf083c87e638fd83ee6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e551ad26b6cd4d577bf083c87e638fd83ee6fa"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "121804eca709236adf3a8dae43abb1941da33f78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "patch": "@@ -1,3 +1,9 @@\n+2016-05-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71264\n+\t* tree-vect-stmts.c (vect_init_vector): Properly deal with\n+\tvector type val.\n+\n 2016-05-25  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/71239"}, {"sha": "897f0f03e50b52006846e4d100bd1f0d773e5e24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "patch": "@@ -1,3 +1,8 @@\n+2016-05-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71264\n+\t* gcc.dg/vect/pr71264.c: New testcase.\n+\n 2016-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/55992"}, {"sha": "4f6381e323a8eda152958e3888a298512a35d9cf", "filename": "gcc/testsuite/gcc.dg/vect/pr71264.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71264.c?ref=e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+typedef unsigned char uint8_t;\n+typedef uint8_t footype __attribute__((vector_size(4)));\n+\n+void test(uint8_t *ptr, uint8_t *mask)\n+{\n+  footype mv;\n+  __builtin_memcpy(&mv, mask, sizeof(mv));\n+  for (unsigned i = 0; i < 16; i += 4)\n+    {\n+      footype temp;\n+      __builtin_memcpy(&temp, &ptr[i], sizeof(temp));\n+      temp ^= mv;\n+      __builtin_memcpy(&ptr[i], &temp, sizeof(temp));\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops in function\" \"vect\" } } */"}, {"sha": "d2e16d0b9296aa422b2158f037d4dfdd25e5000b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e412ece4ce3a815d22cb408a2467d4e3b835f9a3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e412ece4ce3a815d22cb408a2467d4e3b835f9a3", "patch": "@@ -1256,10 +1256,11 @@ vect_init_vector (gimple *stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n   gimple *init_stmt;\n   tree new_temp;\n \n-  if (TREE_CODE (type) == VECTOR_TYPE\n-      && TREE_CODE (TREE_TYPE (val)) != VECTOR_TYPE)\n+  /* We abuse this function to push sth to a SSA name with initial 'val'.  */\n+  if (! useless_type_conversion_p (type, TREE_TYPE (val)))\n     {\n-      if (!types_compatible_p (TREE_TYPE (type), TREE_TYPE (val)))\n+      gcc_assert (TREE_CODE (type) == VECTOR_TYPE);\n+      if (! types_compatible_p (TREE_TYPE (type), TREE_TYPE (val)))\n \t{\n \t  /* Scalar boolean value should be transformed into\n \t     all zeros or all ones value before building a vector.  */\n@@ -1284,7 +1285,13 @@ vect_init_vector (gimple *stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n \t  else\n \t    {\n \t      new_temp = make_ssa_name (TREE_TYPE (type));\n-\t      init_stmt = gimple_build_assign (new_temp, NOP_EXPR, val);\n+\t      if (! INTEGRAL_TYPE_P (TREE_TYPE (val)))\n+\t\tinit_stmt = gimple_build_assign (new_temp,\n+\t\t\t\t\t\t fold_build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t\t      TREE_TYPE (type),\n+\t\t\t\t\t\t\t      val));\n+\t      else\n+\t\tinit_stmt = gimple_build_assign (new_temp, NOP_EXPR, val);\n \t      vect_init_vector_1 (stmt, init_stmt, gsi);\n \t      val = new_temp;\n \t    }"}]}