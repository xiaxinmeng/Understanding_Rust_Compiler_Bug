{"sha": "fe1f8f442ef9952650c38ae0383498d41965775c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxZjhmNDQyZWY5OTUyNjUwYzM4YWUwMzgzNDk4ZDQxOTY1Nzc1Yw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-03-25T19:17:26Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-03-25T19:17:26Z"}, "message": "re PR tree-optimization/26804 (Alias Time explosion)\n\n2006-03-25  Daniel Berlin  <dberlin@dberlin.org>\n\n\tPR tree-optimization/26804\n\t* tree.h (DECL_CALL_CLOBBERED): New macro.\n\t(tree_decl_common): Add call_clobbered_flag.\n\t* tree-flow-inline.h (is_call_clobbered): Use DECL_CALL_CLOBBERED.\n\t(mark_call_clobbered): Set DECL_CALL_CLOBBERED.\n\t(clear_call_clobbered): Clear DECL_CALL_CLOBBERED.\n\t(mark_non_addressable): Ditto.\n\t* tree-ssa.c (verify_call_clobbered): New function.\n\t(verify_alias_info): Use it.\n\t* tree-pass.h (pass_reset_cc_flags): New prototype.\n\t* tree-ssa-alias.c (pass_reset_cc_flags): New structure.\n\t(reset_cc_flags): New function.\n\t* passes.c (init_optimization_passes): Call reset_cc_flags after\n\tinitializing referenced_vars.\n\nFrom-SVN: r112380", "tree": {"sha": "224a37b6b651b721ab029a9a7063751f561e976e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/224a37b6b651b721ab029a9a7063751f561e976e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe1f8f442ef9952650c38ae0383498d41965775c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1f8f442ef9952650c38ae0383498d41965775c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1f8f442ef9952650c38ae0383498d41965775c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1f8f442ef9952650c38ae0383498d41965775c/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d8b38a080f6862c5e0e1f407851e9b73c622e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8b38a080f6862c5e0e1f407851e9b73c622e33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8b38a080f6862c5e0e1f407851e9b73c622e33"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "3dc469ac2d3b13dae3c97789b694c60203e3fee8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe1f8f442ef9952650c38ae0383498d41965775c", "patch": "@@ -1,3 +1,20 @@\n+2006-03-25  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tPR tree-optimization/26804\n+\t* tree.h (DECL_CALL_CLOBBERED): New macro.\n+\t(tree_decl_common): Add call_clobbered_flag.\n+\t* tree-flow-inline.h (is_call_clobbered): Use DECL_CALL_CLOBBERED.\n+\t(mark_call_clobbered): Set DECL_CALL_CLOBBERED.\n+\t(clear_call_clobbered): Clear DECL_CALL_CLOBBERED.\n+\t(mark_non_addressable): Ditto.\n+\t* tree-ssa.c (verify_call_clobbered): New function.\n+\t(verify_alias_info): Use it.\n+\t* tree-pass.h (pass_reset_cc_flags): New prototype.\n+\t* tree-ssa-alias.c (pass_reset_cc_flags): New structure.\n+\t(reset_cc_flags): New function.\n+\t* passes.c (init_optimization_passes): Call reset_cc_flags after\n+\tinitializing referenced_vars.\n+\n 2006-03-25  Uros Bizjak  <uros@kss-loka.si>\n \t    Roger Sayle  <roger@eyesopen.com>\n "}, {"sha": "0ca4cf5df5879831b192e8ef2d65cd7007020751", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=fe1f8f442ef9952650c38ae0383498d41965775c", "patch": "@@ -487,6 +487,7 @@ init_optimization_passes (void)\n \n   p = &pass_all_optimizations.sub;\n   NEXT_PASS (pass_referenced_vars);\n+  NEXT_PASS (pass_reset_cc_flags);\n   NEXT_PASS (pass_create_structure_vars);\n   NEXT_PASS (pass_build_ssa);\n   NEXT_PASS (pass_may_alias);"}, {"sha": "f83c89c593ac1aa167dd700dc20aefe0e1372fba", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=fe1f8f442ef9952650c38ae0383498d41965775c", "patch": "@@ -821,14 +821,19 @@ loop_containing_stmt (tree stmt)\n static inline bool\n is_call_clobbered (tree var)\n {\n-  return bitmap_bit_p (call_clobbered_vars, DECL_UID (var));\n+  if (!MTAG_P (var))\n+    return DECL_CALL_CLOBBERED (var);\n+  else\n+    return bitmap_bit_p (call_clobbered_vars, DECL_UID (var)); \n }\n \n /* Mark variable VAR as being clobbered by function calls.  */\n static inline void\n mark_call_clobbered (tree var, unsigned int escape_type)\n {\n   var_ann (var)->escape_mask |= escape_type;\n+  if (!MTAG_P (var))\n+    DECL_CALL_CLOBBERED (var) = true;\n   bitmap_set_bit (call_clobbered_vars, DECL_UID (var));\n }\n \n@@ -840,13 +845,17 @@ clear_call_clobbered (tree var)\n   ann->escape_mask = 0;\n   if (MTAG_P (var) && TREE_CODE (var) != STRUCT_FIELD_TAG)\n     MTAG_GLOBAL (var) = 0;\n+  if (!MTAG_P (var))\n+    DECL_CALL_CLOBBERED (var) = false;\n   bitmap_clear_bit (call_clobbered_vars, DECL_UID (var));\n }\n \n /* Mark variable VAR as being non-addressable.  */\n static inline void\n mark_non_addressable (tree var)\n {\n+  if (!MTAG_P (var))\n+    DECL_CALL_CLOBBERED (var) = false;\n   bitmap_clear_bit (call_clobbered_vars, DECL_UID (var));\n   TREE_ADDRESSABLE (var) = 0;\n }"}, {"sha": "134c4577b88bfd3b17f66718e82c1e4438d43cc9", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=fe1f8f442ef9952650c38ae0383498d41965775c", "patch": "@@ -304,6 +304,7 @@ extern struct tree_opt_pass pass_uncprop;\n extern struct tree_opt_pass pass_return_slot;\n extern struct tree_opt_pass pass_reassoc;\n extern struct tree_opt_pass pass_rebuild_cgraph_edges;\n+extern struct tree_opt_pass pass_reset_cc_flags;\n \n /* IPA Passes */\n extern struct tree_opt_pass pass_ipa_cp;"}, {"sha": "e1fcb0be8315f365e75589f759de64d38e23cae6", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=fe1f8f442ef9952650c38ae0383498d41965775c", "patch": "@@ -3193,3 +3193,34 @@ struct tree_opt_pass pass_create_structure_vars =\n   TODO_dump_func,\t /* todo_flags_finish */\n   0\t\t\t /* letter */\n };\n+\n+/* Reset the DECL_CALL_CLOBBERED flags on our referenced vars.  In\n+   theory, this only needs to be done for globals.  */\n+\n+static unsigned int\n+reset_cc_flags (void)\n+{\n+  tree var;\n+  referenced_var_iterator rvi;\n+\n+  FOR_EACH_REFERENCED_VAR (var, rvi)\n+    DECL_CALL_CLOBBERED (var) = false;\n+  return 0;\n+}\n+\n+struct tree_opt_pass pass_reset_cc_flags =\n+{\n+  NULL,\t\t /* name */\n+  NULL,  \t /* gate */\n+  reset_cc_flags, /* execute */\n+  NULL,\t\t\t /* sub */\n+  NULL,\t\t\t /* next */\n+  0,\t\t\t /* static_pass_number */\n+  0,\t\t\t /* tv_id */\n+  PROP_referenced_vars |PROP_cfg, /* properties_required */\n+  0,\t\t\t /* properties_provided */\n+  0,\t\t\t /* properties_destroyed */\n+  0,\t\t\t /* todo_flags_start */\n+  0,         \t         /* todo_flags_finish */\n+  0\t\t\t /* letter */\n+};"}, {"sha": "14466124318b8556a10ecdd2e3be16bbf177395d", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=fe1f8f442ef9952650c38ae0383498d41965775c", "patch": "@@ -613,13 +613,54 @@ verify_name_tags (void)\n }\n \n \n+/* Verify the consistency of call clobbering information.  */\n+static void\n+verify_call_clobbering (void)\n+{\n+  unsigned int i;\n+  bitmap_iterator bi;\n+  tree var;\n+  referenced_var_iterator rvi;\n+\n+  /* At all times, the result of the DECL_CALL_CLOBBERED flag should\n+     match the result of the call_clobbered_vars bitmap.  Verify both\n+     that everything in call_clobbered_vars is marked\n+     DECL_CALL_CLOBBERED, and that everything marked\n+     DECL_CALL_CLOBBERED is in call_clobbered_vars.  */\n+  EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i, bi)\n+    {\n+      var = referenced_var (i);\n+      if (!MTAG_P (var) && !DECL_CALL_CLOBBERED (var))\n+\t{\n+\t  error (\"variable in call_clobbered_vars but not marked DECL_CALL_CLOBBERED\");\n+\t  debug_variable (var);\n+\t  goto err;\n+\t}\n+    }\n+  FOR_EACH_REFERENCED_VAR (var, rvi)\n+    {\n+      if (!MTAG_P (var) && DECL_CALL_CLOBBERED (var)\n+\t  && !bitmap_bit_p (call_clobbered_vars, DECL_UID (var)))\n+\t{\n+\t  error (\"variable marked DECL_CALL_CLOBBERED but not in call_clobbered_vars bitmap.\");\n+\t  debug_variable (var);\n+\t  goto err;\n+\t}\n+    }\n+  return;\n+\n+ err:\n+    internal_error (\"verify_call_clobbering failed\");\n+}\n+\n /* Verify the consistency of aliasing information.  */\n \n static void\n verify_alias_info (void)\n {\n   verify_flow_sensitive_alias_info ();\n   verify_name_tags ();\n+  verify_call_clobbering ();\n   verify_flow_insensitive_alias_info ();\n }\n "}, {"sha": "27f4b0fd76abd10c93951952cb89065a351e7f85", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1f8f442ef9952650c38ae0383498d41965775c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fe1f8f442ef9952650c38ae0383498d41965775c", "patch": "@@ -2486,6 +2486,12 @@ struct tree_struct_field_tag GTY(())\n #define DECL_COMPLEX_GIMPLE_REG_P(DECL) \\\n   DECL_COMMON_CHECK (DECL)->decl_common.gimple_reg_flag\n \n+/* This is true if DECL is call clobbered in the current function.\n+   The result of this flag should always be the same as\n+   bitmap_bit_p (call_clobbered_vars, DECL_UID (decl)).  */\n+#define DECL_CALL_CLOBBERED(DECL) \\\n+  DECL_COMMON_CHECK (DECL)->decl_common.call_clobbered_flag\n+\n struct tree_decl_common GTY(())\n {\n   struct tree_decl_minimal common;\n@@ -2523,9 +2529,10 @@ struct tree_decl_common GTY(())\n   /* In FIELD_DECL, this is DECL_NONADDRESSABLE_P\n      In VAR_DECL and PARM_DECL, this is DECL_HAS_VALUE_EXPR.  */\n   unsigned decl_flag_3 : 1;  \n-  /* Logically, this would go in a theoretical base shared by var and parm \n-     decl. */\n+  /* Logically, these two would go in a theoretical base shared by var and \n+     parm decl. */\n   unsigned gimple_reg_flag : 1;\n+  unsigned call_clobbered_flag : 1;\n   \n   union tree_decl_u1 {\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is"}]}