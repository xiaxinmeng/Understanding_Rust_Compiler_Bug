{"sha": "22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJiYmNlYWY4ZWVlM2EzZmI1ZDQ2M2MyYTNiYWMyOWJmM2QyYjk2Yg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-04-11T20:43:19Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-04-11T20:43:19Z"}, "message": "Bunch of little fixes.  See ChangeLog.\n\nFrom-SVN: r9360", "tree": {"sha": "791fd3d8d9480d8091aab13e6f2cdddc462bc220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791fd3d8d9480d8091aab13e6f2cdddc462bc220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b/comments", "author": null, "committer": null, "parents": [{"sha": "6272a44980d256783c492987b0b303f4910e848c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6272a44980d256783c492987b0b303f4910e848c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6272a44980d256783c492987b0b303f4910e848c"}], "stats": {"total": 121, "additions": 62, "deletions": 59}, "files": [{"sha": "92df6be31beacbd4674f49b8953025b3879381f9", "filename": "gcc/cpplib.c", "status": "modified", "additions": 62, "deletions": 59, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=22bbceaf8eee3a3fb5d463c2a3bac29bf3d2b96b", "patch": "@@ -296,6 +296,7 @@ static void free_token_list ();\n static int safe_read ();\n static void push_macro_expansion PARAMS ((cpp_reader *,\n \t\t\t\t\t  U_CHAR*, int, HASHNODE*));\n+static struct cpp_pending *nreverse_pending PARAMS ((struct cpp_pending*));\n extern char *xrealloc ();\n extern char *xcalloc ();\n static char *savestring ();\n@@ -1958,10 +1959,10 @@ cpp_push_buffer (pfile, buffer, length)\n      long length;\n {\n #ifdef STATIC_BUFFERS\n-  register cpp_buffer *buf;\n+  register cpp_buffer *buf = CPP_BUFFER (pfile);\n   if (buf == pfile->buffer_stack)\n     fatal (\"macro or `#include' recursion too deep\");\n-  buf = CPP_BUFFER (pfile) - 1;\n+  buf--;\n   bzero ((char *) buf, sizeof (cpp_buffer));\n   CPP_BUFFER (pfile) = buf;\n #else\n@@ -2139,9 +2140,9 @@ cpp_buffer*\n cpp_file_buffer (pfile)\n      cpp_reader *pfile;\n {\n-  cpp_buffer *ip;\n+  cpp_buffer *ip = CPP_BUFFER (pfile);\n \n-  for (ip = CPP_BUFFER (pfile); ip != NULL; ip = CPP_PREV_BUFFER (ip))\n+  for ( ; ip != CPP_NULL_BUFFER (pfile); ip = CPP_PREV_BUFFER (ip))\n     if (ip->fname != NULL)\n       return ip;\n   return NULL;\n@@ -3580,6 +3581,7 @@ do_include (pfile, keyword, unused1, unused2)\n #endif\n     \n     /* Actually process the file */\n+    cpp_push_buffer (pfile, NULL, 0);\n     if (finclude (pfile, f, fname, is_system_include (pfile, fname),\n \t\t  searchptr != dsp ? searchptr : SELF_DIR_DUMMY))\n       {\n@@ -4639,7 +4641,7 @@ validate_else (pfile, directive)\n \t\t \"text following `%s' violates ANSI standard\", directive);\n }\n \n-/* Get the next token, and add it to the tex in pfile->token_buffer.\n+/* Get the next token, and add it to the text in pfile->token_buffer.\n    Return the kind of token we got. */\n   \n \n@@ -5622,7 +5624,9 @@ open_include_file (filename, searchptr)\n    function above).\n    DIRPTR is the link in the dir path through which this file was found,\n    or 0 if the file name was absolute or via the current directory.\n-   Return 1 on success, 0 on failure. */\n+   Return 1 on success, 0 on failure.\n+\n+   The caller is responsible for the cpp_push_buffer.  */\n \n static int\n finclude (pfile, f, fname, system_header_p, dirptr)\n@@ -5639,18 +5643,15 @@ finclude (pfile, f, fname, system_header_p, dirptr)\n   cpp_buffer *fp;\t\t\t/* For input stack frame */\n   int missing_newline = 0;\n \n-#if 0\n-  CHECK_DEPTH (return 0;);\n-#endif\n-\n   if (file_size_and_mode (f, &st_mode, &st_size) < 0)\n     {\n       cpp_perror_with_name (pfile, fname);\n       close (f);\n+      cpp_pop_buffer (pfile);\n       return 0;\n     }\n \n-  fp = cpp_push_buffer (pfile, NULL, 0);\n+  fp = CPP_BUFFER (pfile);\n   fp->nominal_fname = fp->fname = fname;\n #if 0\n   fp->length = 0;\n@@ -5755,6 +5756,7 @@ push_parse_file (pfile, fname)\n   struct cpp_pending *pend;\n   char *p;\n   int f;\n+  cpp_buffer *fp;\n \n   /* The code looks at the defaults through this pointer, rather than through\n      the constant structure above.  This pointer gets changed if an environment\n@@ -5774,16 +5776,13 @@ push_parse_file (pfile, fname)\n   /* Now that dollars_in_ident is known, initialize is_idchar.  */\n   initialize_char_syntax (opts);\n \n-#if 0\n   /* Do partial setup of input buffer for the sake of generating\n      early #line directives (when -g is in effect).  */\n-\n-  fp = &instack[++indepth];\n-  if (in_fname == NULL)\n-    in_fname = \"\";\n-  fp->nominal_fname = fp->fname = in_fname;\n+  fp = cpp_push_buffer (pfile, NULL, 0);\n+  if (opts->in_fname == NULL)\n+    opts->in_fname = \"\";\n+  fp->nominal_fname = fp->fname = opts->in_fname;\n   fp->lineno = 0;\n-#endif\n \n   /* Install __LINE__, etc.  Must follow initialize_char_syntax\n      and option processing.  */\n@@ -5865,40 +5864,30 @@ push_parse_file (pfile, fname)\n \n   /* Do -U's, -D's and -A's in the order they were seen.  */\n   /* First reverse the list. */\n-  {\n-    struct cpp_pending *prev = 0, *next;\n-    for (pend = opts->pending;  pend;  pend = next)\n-      {\n-\tnext = pend->next;\n-\tpend->next = prev;\n-\tprev = pend;\n-      }\n-    opts->pending = prev;\n+  opts->pending = nreverse_pending (opts->pending);\n \n-    for (pend = opts->pending;  pend;  pend = pend->next)\n-      {\n-\tif (pend->cmd != NULL && pend->cmd[0] == '-')\n-\t  {\n-\t    switch (pend->cmd[1])\n-\t      {\n-\t      case 'U':\n-\t\tif (opts->debug_output)\n-\t\t  output_line_command (pfile, 0, same_file);\n-\t\tdo_undef (pfile, NULL, pend->arg, pend->arg + strlen (pend->arg));\n-\t\tbreak;\n-\t      case 'D':\n-\t\tif (opts->debug_output)\n-\t\t  output_line_command (pfile, 0, same_file);\n-\t\tmake_definition (pfile, pend->arg);\n-\t\tbreak;\n-\t      case 'A':\n-\t\tmake_assertion (pfile, \"-A\", pend->arg);\n-\t\tbreak;\n-\t      }\n-\t  }\n-      }\n-    opts->pending = NULL;\n-  }\n+  for (pend = opts->pending;  pend;  pend = pend->next)\n+    {\n+      if (pend->cmd != NULL && pend->cmd[0] == '-')\n+\t{\n+\t  switch (pend->cmd[1])\n+\t    {\n+\t    case 'U':\n+\t      if (opts->debug_output)\n+\t\toutput_line_command (pfile, 0, same_file);\n+\t      do_undef (pfile, NULL, pend->arg, pend->arg + strlen (pend->arg));\n+\t      break;\n+\t    case 'D':\n+\t      if (opts->debug_output)\n+\t\toutput_line_command (pfile, 0, same_file);\n+\t      make_definition (pfile, pend->arg);\n+\t      break;\n+\t    case 'A':\n+\t      make_assertion (pfile, \"-A\", pend->arg);\n+\t      break;\n+\t    }\n+\t}\n+    }\n \n   opts->done_initializing = 1;\n \n@@ -6054,6 +6043,7 @@ push_parse_file (pfile, fname)\n \t      cpp_perror_with_name (pfile, pend->arg);\n \t      return FAILURE_EXIT_CODE;\n \t    }\n+\t  cpp_push_buffer (pfile, NULL, 0);\n \t  finclude (pfile, fd, pend->arg, 0, NULL_PTR);\n \t  cpp_scan_buffer (pfile);\n \t}\n@@ -6203,9 +6193,11 @@ push_parse_file (pfile, fname)\n     trigraph_pcp (fp);\n #endif\n \n-  /* Scan the -include files before the main input.  */\n+  /* Scan the -include files before the main input.\n+   We push these in reverse order, so that the first one is handled first.  */\n \n   pfile->no_record_file++;\n+  opts->pending = nreverse_pending (opts->pending);\n   for (pend = opts->pending;  pend;  pend = pend->next)\n     {\n       if (pend->cmd != NULL && strcmp (pend->cmd, \"-include\") == 0)\n@@ -6216,8 +6208,8 @@ push_parse_file (pfile, fname)\n \t      cpp_perror_with_name (pfile, pend->arg);\n \t      return FAILURE_EXIT_CODE;\n \t    }\n+\t  cpp_push_buffer (pfile, NULL, 0);\n \t  finclude (pfile, fd, pend->arg, 0, NULL_PTR);\n-\t  cpp_scan_buffer (pfile);\n \t}\n     }\n   pfile->no_record_file--;\n@@ -6268,6 +6260,21 @@ init_parse_file (pfile)\n   pfile->buffer = CPP_NULL_BUFFER(pfile);\n }\n \n+static struct cpp_pending *\n+nreverse_pending (list)\n+     struct cpp_pending *list;\n+     \n+{\n+  register struct cpp_pending *prev = 0, *next, *pend;\n+  for (pend = list;  pend;  pend = next)\n+    {\n+      next = pend->next;\n+      pend->next = prev;\n+      prev = pend;\n+    }\n+  return prev;\n+}\n+\n static void\n push_pending (pfile, cmd, arg)\n      cpp_reader *pfile;\n@@ -7499,15 +7506,15 @@ cpp_error_from_errno (pfile, name)\n   if (ip != NULL)\n     cpp_file_line_for_message (pfile, ip->nominal_fname, ip->lineno, -1);\n \n-  cpp_message (pfile, 1, \"%s: %s\\n\", name, my_strerror (errno));\n+  cpp_message (pfile, 1, \"%s: %s\", name, my_strerror (errno));\n }\n \n void\n cpp_perror_with_name (pfile, name)\n      cpp_reader *pfile;\n      char *name;\n {\n-  cpp_message (pfile, 1, \"%s: %s: %s\\n\", progname, name, my_strerror (errno));\n+  cpp_message (pfile, 1, \"%s: %s: %s\", progname, name, my_strerror (errno));\n }\n \n /* TODO:\n@@ -7525,8 +7532,4 @@ cpp_perror_with_name (pfile, name)\n  * Support for trigraphs.\n  *\n  * Support -dM flag (dump_all_macros).\n- *\n- * -include should be made to return results incrementally.\n- *    (current implementation only works when cpp is used as main program)\n- *\n  */"}]}