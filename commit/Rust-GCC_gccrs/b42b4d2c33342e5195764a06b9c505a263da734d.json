{"sha": "b42b4d2c33342e5195764a06b9c505a263da734d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyYjRkMmMzMzM0MmU1MTk1NzY0YTA2YjljNTA1YTI2M2RhNzM0ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-19T22:21:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-19T22:21:22Z"}, "message": "real.c (enan, [...]): Wrap in NANS.\n\n        * real.c (enan, einan, eiisnan, eiisneg, make_nan): Wrap in NANS.\n        (target_isinf, target_isnan, eisnan): Mark parameter with\n        ATTRIBUTE_UNUSED.\n        (eiisinf): Wrap in INFINITY.\n        (etoe113, etoe64, etoe53, etoe24): Wrap label `nonorm' in INFINITY.\n        (ibmtoe): Remove unused variable `rndsav'.\n\nFrom-SVN: r31518", "tree": {"sha": "80a461beb184c1248f0b284f6335317642028589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80a461beb184c1248f0b284f6335317642028589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b42b4d2c33342e5195764a06b9c505a263da734d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42b4d2c33342e5195764a06b9c505a263da734d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42b4d2c33342e5195764a06b9c505a263da734d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42b4d2c33342e5195764a06b9c505a263da734d/comments", "author": null, "committer": null, "parents": [{"sha": "10db12e0c68518626b271ad2effea6d5b77119c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10db12e0c68518626b271ad2effea6d5b77119c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10db12e0c68518626b271ad2effea6d5b77119c9"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "5762f64d316b9ce2016e560dc8b72d0db66f113a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42b4d2c33342e5195764a06b9c505a263da734d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42b4d2c33342e5195764a06b9c505a263da734d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b42b4d2c33342e5195764a06b9c505a263da734d", "patch": "@@ -1,3 +1,12 @@\n+2000-01-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* real.c (enan, einan, eiisnan, eiisneg, make_nan): Wrap in NANS.\n+\t(target_isinf, target_isnan, eisnan): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t(eiisinf): Wrap in INFINITY.\n+\t(etoe113, etoe64, etoe53, etoe24): Wrap label `nonorm' in INFINITY.\n+\t(ibmtoe): Remove unused variable `rndsav'.\n+\n Wed Jan 19 20:23:06 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.h (PASS_IN_REG_P): Remove extraneous paranthesis."}, {"sha": "a197af9ba0d46f0b88bceae63c4815de9ee2319e", "filename": "gcc/real.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42b4d2c33342e5195764a06b9c505a263da734d/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42b4d2c33342e5195764a06b9c505a263da734d/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=b42b4d2c33342e5195764a06b9c505a263da734d", "patch": "@@ -352,19 +352,24 @@ static int eisneg\tPARAMS ((unsigned EMUSHORT *));\n static int eisinf\tPARAMS ((unsigned EMUSHORT *));\n static int eisnan\tPARAMS ((unsigned EMUSHORT *));\n static void einfin\tPARAMS ((unsigned EMUSHORT *));\n+#ifdef NANS\n static void enan\tPARAMS ((unsigned EMUSHORT *, int));\n+static void einan\tPARAMS ((unsigned EMUSHORT *));\n+static int eiisnan\tPARAMS ((unsigned EMUSHORT *));\n+static int eiisneg\tPARAMS ((unsigned EMUSHORT *));\n+static void make_nan\tPARAMS ((unsigned EMUSHORT *, int, enum machine_mode));\n+#endif\n static void emovi\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void emovo\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void ecleaz\tPARAMS ((unsigned EMUSHORT *));\n static void ecleazs\tPARAMS ((unsigned EMUSHORT *));\n static void emovz\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void einan\tPARAMS ((unsigned EMUSHORT *));\n-static int eiisnan\tPARAMS ((unsigned EMUSHORT *));\n-static int eiisneg\tPARAMS ((unsigned EMUSHORT *));\n #if 0\n static void eiinfin\tPARAMS ((unsigned EMUSHORT *));\n #endif\n+#ifdef INFINITY\n static int eiisinf\tPARAMS ((unsigned EMUSHORT *));\n+#endif\n static int ecmpm\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void eshdn1\tPARAMS ((unsigned EMUSHORT *));\n static void eshup1\tPARAMS ((unsigned EMUSHORT *));\n@@ -459,7 +464,6 @@ static void etoc4x\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n static void toc4x\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n  \t\t\t       enum machine_mode));\n #endif\n-static void make_nan\tPARAMS ((unsigned EMUSHORT *, int, enum machine_mode));\n #if 0\n static void uditoe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void ditoe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n@@ -999,11 +1003,11 @@ ereal_ldexp (x, n)\n \n int\n target_isinf (x)\n-     REAL_VALUE_TYPE x;\n+     REAL_VALUE_TYPE x ATTRIBUTE_UNUSED;\n {\n+#ifdef INFINITY\n   unsigned EMUSHORT e[NE];\n \n-#ifdef INFINITY\n   GET_REAL (&x, e);\n   return (eisinf (e));\n #else\n@@ -1015,11 +1019,11 @@ target_isinf (x)\n \n int\n target_isnan (x)\n-     REAL_VALUE_TYPE x;\n+     REAL_VALUE_TYPE x ATTRIBUTE_UNUSED;\n {\n+#ifdef NANS\n   unsigned EMUSHORT e[NE];\n \n-#ifdef NANS\n   GET_REAL (&x, e);\n   return (eisnan (e));\n #else\n@@ -1631,7 +1635,7 @@ eisinf (x)\n \n static int\n eisnan (x)\n-     unsigned EMUSHORT x[];\n+     unsigned EMUSHORT x[] ATTRIBUTE_UNUSED;\n {\n #ifdef NANS\n   int i;\n@@ -1696,6 +1700,7 @@ einfin (x)\n    This generates Intel's quiet NaN pattern for extended real.\n    The exponent is 7fff, the leading mantissa word is c000.  */\n \n+#ifdef NANS\n static void\n enan (x, sign)\n      register unsigned EMUSHORT *x;\n@@ -1708,6 +1713,7 @@ enan (x, sign)\n   *x++ = 0xc000;\n   *x = (sign << 15) | 0x7fff;\n }\n+#endif /* NANS */\n \n /* Move in an e-type number A, converting it to exploded e-type B.  */\n \n@@ -1838,6 +1844,7 @@ emovz (a, b)\n    The explicit pattern for this is maximum exponent and\n    top two significant bits set.  */\n \n+#ifdef NANS\n static void\n einan (x)\n      unsigned EMUSHORT x[];\n@@ -1847,9 +1854,11 @@ einan (x)\n   x[E] = 0x7fff;\n   x[M + 1] = 0xc000;\n }\n+#endif /* NANS */\n \n /* Return nonzero if exploded e-type X is a NaN.  */\n \n+#ifdef NANS\n static int\n eiisnan (x)\n      unsigned EMUSHORT x[];\n@@ -1866,16 +1875,19 @@ eiisnan (x)\n     }\n   return (0);\n }\n+#endif /* NANS */\n \n /* Return nonzero if sign of exploded e-type X is nonzero.  */\n \n+#ifdef NANS\n static int\n eiisneg (x)\n      unsigned EMUSHORT x[];\n {\n \n   return x[0] != 0;\n }\n+#endif /* NANS */\n \n #if 0\n /* Fill exploded e-type X with infinity pattern.\n@@ -1893,6 +1905,7 @@ eiinfin (x)\n \n /* Return nonzero if exploded e-type X is infinite.  */\n \n+#ifdef INFINITY\n static int\n eiisinf (x)\n      unsigned EMUSHORT x[];\n@@ -1906,7 +1919,7 @@ eiisinf (x)\n     return (1);\n   return (0);\n }\n-\n+#endif /* INFINITY */\n \n /* Compare significands of numbers in internal exploded e-type format.\n    Guard words are included in the comparison.\n@@ -3499,7 +3512,9 @@ etoe113 (x, e)\n   rndprc = 113;\n   emdnorm (xi, 0, 0, exp, 64);\n   rndprc = rndsav;\n+#ifdef INFINITY\n  nonorm:\n+#endif\n   toe113 (xi, e);\n }\n \n@@ -3591,7 +3606,9 @@ etoe64 (x, e)\n   rndprc = 64;\n   emdnorm (xi, 0, 0, exp, 64);\n   rndprc = rndsav;\n+#ifdef INFINITY\n  nonorm:\n+#endif\n   toe64 (xi, e);\n }\n \n@@ -3804,7 +3821,9 @@ etoe53 (x, e)\n   rndprc = 53;\n   emdnorm (xi, 0, 0, exp, 64);\n   rndprc = rndsav;\n+#ifdef INFINITY\n  nonorm:\n+#endif\n   toe53 (xi, e);\n }\n \n@@ -3978,7 +3997,9 @@ etoe24 (x, e)\n   rndprc = 24;\n   emdnorm (xi, 0, 0, exp, 64);\n   rndprc = rndsav;\n+#ifdef INFINITY\n  nonorm:\n+#endif\n   toe24 (xi, e);\n }\n \n@@ -5830,7 +5851,6 @@ ibmtoe (d, e, mode)\n {\n   unsigned EMUSHORT y[NI];\n   register unsigned EMUSHORT r, *p;\n-  int rndsav;\n \n   ecleaz (y);\t\t\t/* start with a zero */\n   p = y;\t\t\t/* point to our number */\n@@ -6229,6 +6249,7 @@ unsigned EMUSHORT SFlittlenan[2] = {0, 0xffc0};\n #endif\n \n \n+#ifdef NANS\n static void\n make_nan (nan, sign, mode)\n      unsigned EMUSHORT *nan;\n@@ -6287,6 +6308,7 @@ make_nan (nan, sign, mode)\n   if (! REAL_WORDS_BIG_ENDIAN)\n     *nan = (sign << 15) | (*p & 0x7fff);\n }\n+#endif /* NANS */\n \n /* This is the inverse of the function `etarsingle' invoked by\n    REAL_VALUE_TO_TARGET_SINGLE.  */"}]}