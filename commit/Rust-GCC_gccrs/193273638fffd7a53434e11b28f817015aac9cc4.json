{"sha": "193273638fffd7a53434e11b28f817015aac9cc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzMjczNjM4ZmZmZDdhNTM0MzRlMTFiMjhmODE3MDE1YWFjOWNjNA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-11-28T09:28:45Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-11-28T09:28:45Z"}, "message": "avr.c (out_movhi_r_mr): Only SBIW if X is not unused after.\n\n\t* config/avr/avr.c (out_movhi_r_mr) [REG_X + PLUS]: Only SBIW if\n\tX is not unused after.\n\nFrom-SVN: r242909", "tree": {"sha": "18765c605d646abf4e6a355fef64530ad5a4b89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18765c605d646abf4e6a355fef64530ad5a4b89b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/193273638fffd7a53434e11b28f817015aac9cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193273638fffd7a53434e11b28f817015aac9cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/193273638fffd7a53434e11b28f817015aac9cc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193273638fffd7a53434e11b28f817015aac9cc4/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03612f25277590cac3df470f07e032cbc30fd7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03612f25277590cac3df470f07e032cbc30fd7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03612f25277590cac3df470f07e032cbc30fd7d6"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "0c09fb0d19b5a27f4c15950cc78f22232296dd5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/193273638fffd7a53434e11b28f817015aac9cc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/193273638fffd7a53434e11b28f817015aac9cc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=193273638fffd7a53434e11b28f817015aac9cc4", "patch": "@@ -1,3 +1,8 @@\n+2016-11-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (out_movhi_r_mr) [REG_X + PLUS]: Only SBIW if\n+\tX is not unused after.\n+\n 2016-11-28  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/78120"}, {"sha": "d0c54c2458ca5ce6e079399dd0d8871375143fe8", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/193273638fffd7a53434e11b28f817015aac9cc4/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/193273638fffd7a53434e11b28f817015aac9cc4/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=193273638fffd7a53434e11b28f817015aac9cc4", "patch": "@@ -4028,16 +4028,22 @@ out_movhi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n          optimization options.  */\n \n       if (reg_base == REG_X)\n-        return reg_base == reg_dest\n-          ? avr_asm_len (\"adiw r26,%o1\"      CR_TAB\n-                         \"ld __tmp_reg__,X+\" CR_TAB\n-                         \"ld %B0,X\"          CR_TAB\n-                         \"mov %A0,__tmp_reg__\", op, plen, -4)\n-\n-          : avr_asm_len (\"adiw r26,%o1\" CR_TAB\n-                         \"ld %A0,X+\"    CR_TAB\n-                         \"ld %B0,X\"     CR_TAB\n-                         \"sbiw r26,%o1+1\", op, plen, -4);\n+        {\n+          if (reg_base == reg_dest)\n+            return avr_asm_len (\"adiw r26,%o1\"      CR_TAB\n+                                \"ld __tmp_reg__,X+\" CR_TAB\n+                                \"ld %B0,X\"          CR_TAB\n+                                \"mov %A0,__tmp_reg__\", op, plen, -4);\n+\n+          avr_asm_len (\"adiw r26,%o1\" CR_TAB\n+                       \"ld %A0,X+\"    CR_TAB\n+                       \"ld %B0,X\", op, plen, -3);\n+\n+          if (!reg_unused_after (insn, XEXP (base, 0)))\n+            avr_asm_len (\"sbiw r26,%o1+1\", op, plen, 1);\n+\n+          return \"\";\n+        }\n \n       return reg_base == reg_dest\n         ? avr_asm_len (\"ldd __tmp_reg__,%A1\" CR_TAB"}]}