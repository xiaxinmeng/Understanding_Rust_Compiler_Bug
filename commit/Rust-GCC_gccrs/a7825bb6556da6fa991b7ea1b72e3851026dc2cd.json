{"sha": "a7825bb6556da6fa991b7ea1b72e3851026dc2cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4MjViYjY1NTZkYTZmYTk5MWI3ZWExYjcyZTM4NTEwMjZkYzJjZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-12T12:29:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-12T12:31:33Z"}, "message": "fix SLP subgraph detection wrt fully shared lanes\n\nWhen a VEC_PERM SLP node just permutes existing lanes this confuses\nthe SLP subgraph detection where I tried to elide a node-based\nvisited hash-map in a way that doesn't work.  Fixed by adding such.\n\n2020-10-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_bb_partition_graph_r): Use visited\n\thash-map.\n\t(vect_bb_partition_graph): Likewise.", "tree": {"sha": "6d96a74c9237e478223b7e786f8af41b4921515b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d96a74c9237e478223b7e786f8af41b4921515b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7825bb6556da6fa991b7ea1b72e3851026dc2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7825bb6556da6fa991b7ea1b72e3851026dc2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7825bb6556da6fa991b7ea1b72e3851026dc2cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7825bb6556da6fa991b7ea1b72e3851026dc2cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91d80cf4bd2827dd9c40fe6a7c719c909d79083d"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "8acef6f3cef9c904db599325946d8f878f9e63f6", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7825bb6556da6fa991b7ea1b72e3851026dc2cd/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7825bb6556da6fa991b7ea1b72e3851026dc2cd/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a7825bb6556da6fa991b7ea1b72e3851026dc2cd", "patch": "@@ -3254,18 +3254,19 @@ static void\n vect_bb_partition_graph_r (bb_vec_info bb_vinfo,\n \t\t\t   slp_instance instance, slp_tree node,\n \t\t\t   hash_map<stmt_vec_info, slp_instance> &stmt_to_instance,\n-\t\t\t   hash_map<slp_instance, slp_instance> &instance_leader)\n+\t\t\t   hash_map<slp_instance, slp_instance> &instance_leader,\n+\t\t\t   hash_set<slp_tree> &visited)\n {\n   stmt_vec_info stmt_info;\n   unsigned i;\n-  bool all = true;\n+\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     {\n       bool existed_p;\n       slp_instance &stmt_instance\n \t= stmt_to_instance.get_or_insert (stmt_info, &existed_p);\n       if (!existed_p)\n-\tall = false;\n+\t;\n       else if (stmt_instance != instance)\n \t{\n \t  /* If we're running into a previously marked stmt make us the\n@@ -3279,15 +3280,15 @@ vect_bb_partition_graph_r (bb_vec_info bb_vinfo,\n \t}\n       stmt_instance = instance;\n     }\n-  /* If not all stmts had been visited we have to recurse on children.  */\n-  if (all)\n+\n+  if (visited.add (node))\n     return;\n \n   slp_tree child;\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n     if (SLP_TREE_DEF_TYPE (child) == vect_internal_def)\n       vect_bb_partition_graph_r (bb_vinfo, instance, child, stmt_to_instance,\n-\t\t\t\t instance_leader);\n+\t\t\t\t instance_leader, visited);\n }\n \n /* Partition the SLP graph into pieces that can be costed independently.  */\n@@ -3302,13 +3303,15 @@ vect_bb_partition_graph (bb_vec_info bb_vinfo)\n      marked stmt, make the stmts leader the current SLP graph entry.  */\n   hash_map<stmt_vec_info, slp_instance> stmt_to_instance;\n   hash_map<slp_instance, slp_instance> instance_leader;\n+  hash_set<slp_tree> visited;\n   slp_instance instance;\n   for (unsigned i = 0; bb_vinfo->slp_instances.iterate (i, &instance); ++i)\n     {\n       instance_leader.put (instance, instance);\n       vect_bb_partition_graph_r (bb_vinfo,\n \t\t\t\t instance, SLP_INSTANCE_TREE (instance),\n-\t\t\t\t stmt_to_instance, instance_leader);\n+\t\t\t\t stmt_to_instance, instance_leader,\n+\t\t\t\t visited);\n     }\n \n   /* Then collect entries to each independent subgraph.  */"}]}