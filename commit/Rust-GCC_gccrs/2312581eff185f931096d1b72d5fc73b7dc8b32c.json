{"sha": "2312581eff185f931096d1b72d5fc73b7dc8b32c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxMjU4MWVmZjE4NWY5MzEwOTZkMWI3MmQ1ZmM3M2I3ZGM4YjMyYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-12-17T06:28:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-12-17T06:28:59Z"}, "message": "* config/i386/i386.md (extendsfdf2, *extendsfdf2_1,\n\n\t*extendsfdf2_1_sse_only): Unify enable constraint with\n\trespect to TARGET_SSE2, TARGET_80387, TARGET_SSE_MATH\n\tand TARGET_MIX_SSE_I387.\n\t(*extendsfdf2_i387): New insn pattern.\n\t(*extendsfdf2_1): Rename to *extendsfdf2_mixed. Fix\n\tregister constraint for operand 0.\n\t(*extendsfdf2_1_sse_only): Rename to *extendsfdf2_sse.\n\t(*extend{s,d}fxf2_1): Rename to *extend{s,d}fxf2_i387.\n\nFrom-SVN: r92308", "tree": {"sha": "c22914e5e7d4757f2b2ac9b772ddd9c2fd26ab2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c22914e5e7d4757f2b2ac9b772ddd9c2fd26ab2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2312581eff185f931096d1b72d5fc73b7dc8b32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2312581eff185f931096d1b72d5fc73b7dc8b32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2312581eff185f931096d1b72d5fc73b7dc8b32c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2312581eff185f931096d1b72d5fc73b7dc8b32c/comments", "author": null, "committer": null, "parents": [{"sha": "3cc491e8f3e623f50e622aec534495df3e5a580d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc491e8f3e623f50e622aec534495df3e5a580d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc491e8f3e623f50e622aec534495df3e5a580d"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "c0d357030b9534277a6afe836583cfb8ee7877a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2312581eff185f931096d1b72d5fc73b7dc8b32c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2312581eff185f931096d1b72d5fc73b7dc8b32c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2312581eff185f931096d1b72d5fc73b7dc8b32c", "patch": "@@ -1,3 +1,15 @@\n+2004-12-17  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.md (extendsfdf2, *extendsfdf2_1,\n+\t*extendsfdf2_1_sse_only): Unify enable constraint with\n+\trespect to TARGET_SSE2, TARGET_80387, TARGET_SSE_MATH\n+\tand TARGET_MIX_SSE_I387.\n+\t(*extendsfdf2_i387): New insn pattern.\n+\t(*extendsfdf2_1): Rename to *extendsfdf2_mixed. Fix\n+\tregister constraint for operand 0.\n+\t(*extendsfdf2_1_sse_only): Rename to *extendsfdf2_sse.\n+\t(*extend{s,d}fxf2_1): Rename to *extend{s,d}fxf2_i387.\n+\n 2004-12-16  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/19041"}, {"sha": "606532140f71b4e5eba40997c22eaf9aae525647", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2312581eff185f931096d1b72d5fc73b7dc8b32c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2312581eff185f931096d1b72d5fc73b7dc8b32c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2312581eff185f931096d1b72d5fc73b7dc8b32c", "patch": "@@ -3434,7 +3434,7 @@\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:DF (match_operand:SF 1 \"general_operand\" \"\")))]\n-  \"TARGET_80387 || TARGET_SSE2\"\n+  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n@@ -3444,10 +3444,10 @@\n     operands[1] = force_reg (SFmode, operands[1]);\n })\n \n-(define_insn \"*extendsfdf2_1\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f#Y,mf#Y,Y#f\")\n+(define_insn \"*extendsfdf2_mixed\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f#Y,m#fY,Y#f\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm#Y,f#Y,mY#f\")))]\n-  \"(TARGET_80387 || TARGET_SSE2)\n+  \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n@@ -3471,15 +3471,39 @@\n   [(set_attr \"type\" \"fmov,fmov,ssecvt\")\n    (set_attr \"mode\" \"SF,XF,DF\")])\n \n-(define_insn \"*extendsfdf2_1_sse_only\"\n+(define_insn \"*extendsfdf2_sse\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"mY\")))]\n-  \"!TARGET_80387 && TARGET_SSE2\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"cvtss2sd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"*extendsfdf2_i387\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m\")\n+        (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n+  \"TARGET_80387\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return output_387_reg_move (insn, operands);\n+\n+    case 1:\n+      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n+        return \"fstp%z0\\t%y0\";\n+      else\n+        return \"fst%z0\\t%y0\";\n+\n+    default:\n+      abort ();\n+    }\n+}\n+  [(set_attr \"type\" \"fmov\")\n+   (set_attr \"mode\" \"SF,XF\")])\n+\n (define_expand \"extendsfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:SF 1 \"general_operand\" \"\")))]\n@@ -3493,7 +3517,7 @@\n     operands[1] = force_reg (SFmode, operands[1]);\n })\n \n-(define_insn \"*extendsfxf2_1\"\n+(define_insn \"*extendsfxf2_i387\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n   \"TARGET_80387\n@@ -3507,10 +3531,10 @@\n     case 1:\n       /* There is no non-popping store to memory for XFmode.  So if\n \t we need one, follow the store with a load.  */\n-      if (! find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-        return \"fstp%z0\\t%y0\\n\\tfld%z0\\t%y0\";\n-      else\n+      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n         return \"fstp%z0\\t%y0\";\n+      else\n+        return \"fstp%z0\\t%y0\\n\\tfld%z0\\t%y0\";\n \n     default:\n       abort ();\n@@ -3532,7 +3556,7 @@\n     operands[1] = force_reg (DFmode, operands[1]);\n })\n \n-(define_insn \"*extenddfxf2_1\"\n+(define_insn \"*extenddfxf2_i387\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n   \"TARGET_80387"}]}