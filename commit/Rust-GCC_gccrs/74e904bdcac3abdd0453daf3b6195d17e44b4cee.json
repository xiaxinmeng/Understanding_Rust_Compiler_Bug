{"sha": "74e904bdcac3abdd0453daf3b6195d17e44b4cee", "node_id": "C_kwDOANBUbNoAKDc0ZTkwNGJkY2FjM2FiZGQwNDUzZGFmM2I2MTk1ZDE3ZTQ0YjRjZWU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-02T00:17:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-02T00:17:38Z"}, "message": "Daily bump.", "tree": {"sha": "6e225910befc8727be3a6e7b853013ba39fb3244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e225910befc8727be3a6e7b853013ba39fb3244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e904bdcac3abdd0453daf3b6195d17e44b4cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e904bdcac3abdd0453daf3b6195d17e44b4cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e904bdcac3abdd0453daf3b6195d17e44b4cee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e904bdcac3abdd0453daf3b6195d17e44b4cee/comments", "author": null, "committer": null, "parents": [{"sha": "2b0e81d5cc2f7e1d773f6c502bd65b097f392675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0e81d5cc2f7e1d773f6c502bd65b097f392675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b0e81d5cc2f7e1d773f6c502bd65b097f392675"}], "stats": {"total": 288, "additions": 287, "deletions": 1}, "files": [{"sha": "fcf39f0c82e65f7104bb5b784e2c6753ef4cdbd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74e904bdcac3abdd0453daf3b6195d17e44b4cee", "patch": "@@ -1,3 +1,119 @@\n+2022-11-01  David Seifert  <soap@gentoo.org>\n+\n+\t* configure.ac: Add AC_CACHE_CHECK(..., gcc_cv_sys_sdt_h).\n+\t* configure: Regenerate.\n+\n+2022-11-01  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* file-prefix-map.cc (remap_filename): Allow remapping of relative paths.\n+\n+2022-11-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107490\n+\t* range-op-float.cc (foperator_unordered_lt::op1_range): Handle\n+\tNANs.\n+\t(foperator_unordered_lt::op2_range): Same.\n+\t(foperator_unordered_le::op1_range): Same.\n+\t(foperator_unordered_le::op2_range): Same.\n+\t(foperator_unordered_gt::op1_range): Same.\n+\t(foperator_unordered_gt::op2_range): Same.\n+\t(foperator_unordered_ge::op1_range): Same.\n+\t(foperator_unordered_ge::op2_range): Same.\n+\n+2022-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/107497\n+\t* tree-vrp.cc (remove_unreachable::remove_and_update_globals):\n+\tCheck that ssa-name still exists before accessing it.\n+\n+2022-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* params.opt (param_vrp1_mode): Make ranger default.\n+\n+2022-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-vrp.cc (class remove_unreachable): New.\n+\t(remove_unreachable::maybe_register_block): New.\n+\t(remove_unreachable::remove_and_update_globals): New.\n+\t(rvrp_folder::rvrp_folder): Initialize m_unreachable.\n+\t(rvrp_folder::post_fold_bb): Maybe register unreachable block.\n+\t(rvrp_folder::m_unreachable): New member.\n+\t(execute_ranger_vrp): Add final_pass flag, remove unreachables.\n+\n+2022-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Allow\n+\texit block to be specified.\n+\t(ranger_cache::range_from_dom): If exit block is specified, use\n+\tthe immediate predecessor instead of the dominator to start.\n+\t* gimple-range.cc (gimple_ranger::range_on_exit): Allow query\n+\tfor exit block.\n+\n+2022-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-range.cc (irange::intersect_nonzero_bits): If new\n+\tnon-zero mask is the same as original, flag no change.\n+\n+2022-11-01  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/87832\n+\t* config/i386/znver.md (znver1_idiv): New automaton.\n+\t(znver1-idiv): New unit.\n+\t(znver1_idiv_DI): Correct unit and cycles in the reservation.\n+\t(znver1_idiv_SI): Ditto.\n+\t(znver1_idiv_HI): Ditto.\n+\t(znver1_idiv_QI): Ditto.\n+\t(znver1_idiv_mem_DI): Ditto.\n+\t(znver1_idiv_mem_SI): Ditto.\n+\t(znver1_idiv_mem_HI): Ditto.\n+\t(znver1_idiv_mem_QI): Ditto.\n+\t(znver3_idiv_DI): Ditto.\n+\t(znver3_idiv_SI): Ditto.\n+\t(znver3_idiv_HI): Ditto.\n+\t(znver3_idiv_QI): Ditto.\n+\t(znver3_idiv_mem_DI): Ditto.\n+\t(znver3_idiv_mem_SI): Ditto.\n+\t(znver3_idiv_mem_HI): Ditto.\n+\t(znver3_idiv_mem_QI): Ditto.\n+\n+2022-11-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/107057\n+\t* config/i386/sse.md (*vec_interleave_highv2df): Remove\n+\tconstraint 1.\n+\t(*vec_interleave_lowv2df): Ditto.\n+\t(vec_concatv2df): Ditto.\n+\t(*avx512f_unpcklpd512<mask_name>): Ditto and renamed to ..\n+\t(avx512f_unpcklpd512<mask_name>): .. this.\n+\t(avx512f_movddup512<mask_name>): Change to define_insn.\n+\t(avx_movddup256<mask_name>): Ditto.\n+\t(*avx_unpcklpd256<mask_name>): Remove constraint 1 and renamed\n+\tto ..\n+\t(avx_unpcklpd256<mask_name>): .. this.\n+\t* config/i386/i386.cc (ix86_vec_interleave_v2df_operator_ok):\n+\tDisallow MEM_P (op1) && MEM_P (op2).\n+\n+2022-11-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/55583\n+\t* config/i386/i386.md (*x86_64_shld_1): Rename to ..\n+\t(x86_64_shld_1): .. this.\n+\t(*x86_shld_1): Rename to ..\n+\t(x86_shld_1): .. this.\n+\t(*x86_64_shrd_1): Rename to ..\n+\t(x86_64_shrd_1): .. this.\n+\t(*x86_shrd_1): Rename to ..\n+\t(x86_shrd_1): .. this.\n+\t(*x86_64_shld_shrd_1_nozext): New pre_reload splitter.\n+\t(*x86_shld_shrd_1_nozext): Ditto.\n+\t(*x86_64_shrd_shld_1_nozext): Ditto.\n+\t(*x86_shrd_shld_1_nozext): Ditto.\n+\n+2022-11-01  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* ipa-inline-analysis.cc (do_estimate_edge_time): Add function attribute\n+\tjudgement for INLINE_HINT_known_hot hint.\n+\n 2022-10-31  Guillermo E. Martinez  <guillermo.e.martinez@oracle.com>\n \n \t* btfout.cc (btf_calc_num_vbytes): Compute enumeration size depending of"}, {"sha": "a8fe89b316ad1a9fb799011cb615a5a2ace68f6b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=74e904bdcac3abdd0453daf3b6195d17e44b4cee", "patch": "@@ -1 +1 @@\n-20221101\n+20221102"}, {"sha": "fd5efb1826cd5bb18e81da2fd9ca7635db1c3c34", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=74e904bdcac3abdd0453daf3b6195d17e44b4cee", "patch": "@@ -1,3 +1,61 @@\n+2022-11-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (LAMBDA_EXPR_SCOPE_SIG_DISCRIMINATOR): New.\n+\t(struct tree_lambda_expr): Add discriminator_sig bitfield.\n+\t(recrd_lambda_scope_sig_discriminator): Declare.\n+\t* lambda.cc (struct lambda_sig_count): New.\n+\t(lambda_discriminator): Add signature vector.\n+\t(start_lambda_scope): Adjust.\n+\t(compare_lambda_template_head, compare_lambda_sig): New.\n+\t(record_lambda_scope_sig_discriminator): New.\n+\t* mangle.cc (write_closure_type): Use the scope-sig discriminator for\n+\tABI >= 18.  Emit abi mangling warning if needed.\n+\t* module.cc (trees_out::core_vals): Stream the new discriminator.\n+\t(trees_in::core_vals): Likewise.\n+\t* parser.cc (cp_parser_lambda_declarator_opt): Call\n+\trecord_lambda_scope_sig_discriminator.\n+\t* pt.cc (tsubst_lambda_expr): Likewise.\n+\n+2022-11-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (LAMBDA_EXPR_DISCRIMINATOR): Rename to ...\n+\t(LAMBDA_EXPR_SCOPE_ONLY_DISCRIMINATOR): ... here.\n+\t(struct tree_lambda_expr): Make default_capture_mode &\n+\tdiscriminator_scope bitfields.\n+\t(record_null_lambda_scope) Delete.\n+\t(record_lambda_scope_discriminator): Declare.\n+\t* lambda.cc (struct lambda_discriminator): New struct.\n+\t(lambda_scope, lambda_scope_stack): Adjust types.\n+\t(lambda_count): Delete.\n+\t(struct tree_int): Delete.\n+\t(start_lambda_scope, finish_lambda_scope): Adjust.\n+\t(record_lambda_scope): Only record the scope.\n+\t(record_lambda_scope_discriminator): New.\n+\t* mangle.cc (write_closure_type_name): Adjust.\n+\t* module.cc (trees_out::core_vals): Likewise,\n+\t(trees_in::core_vals): Likewise.\n+\t* parser.cc (cp_parser_lambda_expression): Call\n+\trecord_lambda_scope_discriminator.\n+\t* pt.cc (tsubst_lambda_expr): Adjust record_lambda_scope caling.  Call\n+\trecord_lambda_scope_discriminator. Commonize control flow on tsubsting\n+\tthe operator function.\n+\n+2022-11-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.cc (make_call_declarator): Add std_attrs parm.\n+\t(cp_parser_lambda_declarator_opt): Pass it.\n+\t(cp_parser_direct_declarator): Pass it.\n+\n+2022-11-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.cc (finish_function): Set TREE_NOTHROW later in the function.\n+\n+2022-11-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.cc (duplicate_decls): Reformat loop.\n+\t* parser.cc (cp_parser_member_declaration): Add newline.\n+\t* semantics.cc: Remove newline.\n+\n 2022-10-28  Marek Polacek  <polacek@redhat.com>\n \n \t* call.cc (maybe_warn_dangling_reference): Enable the warning in"}, {"sha": "525604d9c028e7526685fd2434fefb3ff32024cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e904bdcac3abdd0453daf3b6195d17e44b4cee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74e904bdcac3abdd0453daf3b6195d17e44b4cee", "patch": "@@ -1,3 +1,40 @@\n+2022-11-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/abi/lambda-sig1-18.C: New.\n+\t* g++.dg/abi/lambda-sig1-18vs17.C: New.\n+\t* g++.dg/cpp1y/lambda-mangle-1-18.C: New.\n+\n+2022-11-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107490\n+\t* gcc.dg/tree-ssa/pr107490.c: New test.\n+\n+2022-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr68217.c: Test [-INF, -INF][0, 0] instead of [-INF, 0].\n+\t* gcc.dg/tree-ssa/vrp-unreachable.c: New.  Test unreachable removal.\n+\n+2022-11-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/abi/lambda-sig1-17.C: New.\n+\t* g++.dg/abi/lambda-sig1.h: New.\n+\t* g++.dg/cpp1y/lambda-mangle-1.C: Extracted to ...\n+\t* g++.dg/cpp1y/lambda-mangle-1.h: ... here.\n+\t* g++.dg/cpp1y/lambda-mangle-1-11.C: New\n+\t* g++.dg/cpp1y/lambda-mangle-1-17.C\n+\n+2022-11-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr107057.c: New test.\n+\n+2022-11-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr55583.c: New test.\n+\n+2022-11-01  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* gcc.dg/ipa/inlinehint-6.c: New test.\n+\n 2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/cpp23/ext-floating12.C: New test."}, {"sha": "4462625c2eb726ea0ace428ec736310bfd4c9dfd", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e904bdcac3abdd0453daf3b6195d17e44b4cee/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e904bdcac3abdd0453daf3b6195d17e44b4cee/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=74e904bdcac3abdd0453daf3b6195d17e44b4cee", "patch": "@@ -1,3 +1,12 @@\n+2022-11-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_start_lambda_closure_class_type):\n+\tInitialize the per-scope, per-signature discriminator.\n+\n+2022-11-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_start_closure): Adjust.\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "dd1266916b94462ab861a1a5292b8a6012ebec5a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e904bdcac3abdd0453daf3b6195d17e44b4cee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e904bdcac3abdd0453daf3b6195d17e44b4cee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74e904bdcac3abdd0453daf3b6195d17e44b4cee", "patch": "@@ -1,3 +1,69 @@\n+2022-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/std/charconv (__from_chars_float16_t,\n+\t__from_chars_bfloat16_t): Declare.\n+\t(from_chars): Add _Float16 and __gnu_cxx::__bfloat16_t overloads.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.31): Export\n+\t_ZSt22__from_chars_float16_tPKcS0_RfSt12chars_format and\n+\t_ZSt23__from_chars_bfloat16_tPKcS0_RfSt12chars_format.\n+\t* src/c++17/floating_from_chars.cc\n+\t(fast_float::floating_type_float16_t,\n+\tfast_float::floating_type_bfloat16_t): New classes.\n+\t(fast_float::binary_format<floating_type_float16_t>,\n+\tfast_float::binary_format<floating_type_bfloat16_t>): New\n+\tspecializations.\n+\t(fast_float::to_float<floating_type_float16_t>,\n+\tfast_float::to_float<floating_type_bfloat16_t>,\n+\tfast_float::to_extended<floating_type_float16_t>,\n+\tfast_float::to_extended<floating_type_bfloat16_t>): Likewise.\n+\t(fast_float::from_chars_16): New template function.\n+\t(__floating_from_chars_hex): Allow instantiation with\n+\tfast_float::floating_type_{,b}float16_t.\n+\t(from_chars): Formatting fixes for float/double/long double overloads.\n+\t(__from_chars_float16_t, __from_chars_bfloat16_t): New functions.\n+\t* testsuite/20_util/to_chars/float16_c++23.cc: New test.\n+\n+2022-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/std/charconv (__to_chars_float16_t, __to_chars_bfloat16_t):\n+\tDeclare.\n+\t(to_chars): Add _Float16 and __gnu_cxx::__bfloat16_t overloads.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.31): Export\n+\t_ZSt20__to_chars_float16_tPcS_fSt12chars_format and\n+\t_ZSt21__to_chars_bfloat16_tPcS_fSt12chars_format.\n+\t* src/c++17/floating_to_chars.cc (floating_type_float16_t,\n+\tfloating_type_bfloat16_t): New types.\n+\t(floating_type_traits<floating_type_float16_t>,\n+\tfloating_type_traits<floating_type_bfloat16_t>,\n+\tget_ieee_repr<floating_type_float16_t>,\n+\tget_ieee_repr<floating_type_bfloat16_t>,\n+\t__handle_special_value<floating_type_float16_t>,\n+\t__handle_special_value<floating_type_bfloat16_t>): New specializations.\n+\t(floating_to_shortest_scientific): Handle floating_type_float16_t\n+\tand floating_type_bfloat16_t like IEEE quad.\n+\t(__floating_to_chars_shortest): For floating_type_bfloat16_t call\n+\t__floating_to_chars_hex<float> rather than\n+\t__floating_to_chars_hex<floating_type_bfloat16_t> to avoid\n+\tinstantiating the latter.\n+\t(__to_chars_float16_t, __to_chars_bfloat16_t): New functions.\n+\n+2022-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/std/charconv (from_chars, to_chars): Add _Float{32,64,128}\n+\toverloads for cases where those types match {float,double,long double}.\n+\t* include/std/istream (basic_istream::operator>>): Add\n+\t_Float{16,32,64,128} and __gnu_cxx::__bfloat16_t overloads.\n+\t* include/std/ostream (basic_ostream::operator<<): Add\n+\t_Float{16,32,64,128} and __gnu_cxx::__bfloat16_t overloads.\n+\t* testsuite/20_util/from_chars/8.cc: New test.\n+\t* testsuite/26_numerics/headers/cmath/nextafter_c++23.cc (test):\n+\tFormatting fixes.\n+\t* testsuite/26_numerics/headers/cmath/functions_std_c++23.cc: Add\n+\tdg-options \"-std=gnu++2b\".\n+\t(test_functions, main): Formatting fixes.\n+\t* testsuite/26_numerics/headers/cmath/c99_classification_macros_c++23.cc:\n+\tAdd dg-options \"-std=gnu++2b\".\n+\n 2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* include/std/complex (complex::complex converting ctor): For C++23"}]}