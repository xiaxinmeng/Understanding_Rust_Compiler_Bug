{"sha": "4e6de5a90fe708766966b38c9866f8963287fab6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU2ZGU1YTkwZmU3MDg3NjY5NjZiMzhjOTg2NmY4OTYzMjg3ZmFiNg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-12-17T23:17:43Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-12-17T23:17:43Z"}, "message": "c4x.h (ASM_OUTPUT_XXX): Wrap in do-while(0).\n\n\t* config/c4x/c4x.h (ASM_OUTPUT_XXX): Wrap in do-while(0).\n\tTweak formatting.\n\nFrom-SVN: r31001", "tree": {"sha": "62eeb0fac12065384027677e3c2d5c33cbffae62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62eeb0fac12065384027677e3c2d5c33cbffae62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e6de5a90fe708766966b38c9866f8963287fab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6de5a90fe708766966b38c9866f8963287fab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e6de5a90fe708766966b38c9866f8963287fab6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6de5a90fe708766966b38c9866f8963287fab6/comments", "author": null, "committer": null, "parents": [{"sha": "f475349b88ebc45b193e326afefe3e5b1149bfa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f475349b88ebc45b193e326afefe3e5b1149bfa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f475349b88ebc45b193e326afefe3e5b1149bfa8"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "64acc2b674c6e9d3bd492fc6dee8024a5cb1dc6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6de5a90fe708766966b38c9866f8963287fab6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6de5a90fe708766966b38c9866f8963287fab6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e6de5a90fe708766966b38c9866f8963287fab6", "patch": "@@ -1,5 +1,10 @@\n 1999-12-18  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n+\t* config/c4x/c4x.h (ASM_OUTPUT_XXX): Wrap in do-while(0).\n+\tTweak formatting.\n+\n+1999-12-18  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\t\n \t* config/c4x/c4x.md (rpts_top, rptb_top): Add clobbers for rs and re.\n \n 1999-12-17 13:21 -0800  Zack Weinberg  <zack@rabi.columbia.edu>"}, {"sha": "da9de8962a1ff849406d0f5bf09ed1fd87ab84ed", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6de5a90fe708766966b38c9866f8963287fab6/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6de5a90fe708766966b38c9866f8963287fab6/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=4e6de5a90fe708766966b38c9866f8963287fab6", "patch": "@@ -316,11 +316,11 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n \n /* Define this to change the optimizations performed by default.  */\n \n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) c4x_optimization_options(LEVEL,SIZE)\n+#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) c4x_optimization_options(LEVEL, SIZE)\n \n /* Run Time Target Specification  */\n \n-#define TARGET_VERSION fprintf (stderr, \" (TMS320C[34]x, TI syntax)\" );\n+#define TARGET_VERSION fprintf (stderr, \" (TMS320C[34]x, TI syntax)\");\n \n /* Storage Layout  */\n \n@@ -588,8 +588,7 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n    local-alloc.c won't allocate pseudos that have these classes as their\n    preferred class unless they are \"preferred or nothing\".  */\n \n-#define CLASS_LIKELY_SPILLED_P(CLASS) \\\n- ((CLASS) == INDEX_REGS)\n+#define CLASS_LIKELY_SPILLED_P(CLASS) ((CLASS) == INDEX_REGS)\n \n /* CCmode is wrongly defined in machmode.def  It should have a size\n    of UNITS_PER_WORD.  */\n@@ -612,9 +611,7 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n \n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS) (c4x_caller_save_map[REGNO])\n \n-int c4x_hard_regno_mode_ok ();\n-#define HARD_REGNO_MODE_OK(REGNO, MODE)  c4x_hard_regno_mode_ok(REGNO, MODE)\n-\n+#define HARD_REGNO_MODE_OK(REGNO, MODE) c4x_hard_regno_mode_ok(REGNO, MODE)\n \n /* A C expression that is nonzero if it is desirable to choose\n    register allocation so as to avoid move instructions between a\n@@ -625,7 +622,7 @@ int c4x_hard_regno_mode_ok ();\n    If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n    for any hard reg, then this must be 0 for correct output.  */\n \n-#define MODES_TIEABLE_P(MODE1, MODE2)\t\t0\n+#define MODES_TIEABLE_P(MODE1, MODE2) 0\n \n \n /* Define the classes of registers for register constraints in the\n@@ -1075,7 +1072,7 @@ CUMULATIVE_ARGS;\n    other targets such as m68k).  Since we must use stf/sti,\n    the profitability is marginal anyway.  */\n \n-#define CALLER_SAVE_PROFITABLE(REFS,CALLS) 0\n+/* #define CALLER_SAVE_PROFITABLE(REFS,CALLS) 0 */\n \n /* Never pass data by reference.  */\n \n@@ -2060,15 +2057,16 @@ dtors_section ()\t\t\t\t\t\t\t\\\n /* Output float/double constants  QFmode.  */\n \n #define ASM_OUTPUT_BYTE_FLOAT(FILE, VALUE)\t\t\\\n-{   long l;\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    long l;\t\t\t\t\t\t\\\n     char str[30];\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n     REAL_VALUE_TO_DECIMAL (VALUE, \"%20lf\", str);\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\", l, str);\\\n     else\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08lxh\\t; %s\\n\", l, str);\\\n-}\n+  } while (0);\n \n /* Output long double constants  HFmode. \n    The first word contains the exponent and first part of the mantissa\n@@ -2079,7 +2077,8 @@ dtors_section ()\t\t\t\t\t\t\t\\\n    a LDP for each load.  */\n \n #define ASM_OUTPUT_SHORT_FLOAT(FILE, VALUE)\t\t\\\n-{   long l[2];\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    long l[2];\t\t\t\t\t\t\\\n     char str[30];\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n     REAL_VALUE_TO_DECIMAL (VALUE, \"%20lf\", str);\t\\\n@@ -2090,16 +2089,17 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08lxh\\t; %s\\n\\t.word\\t0%08lxh\\n\", \\\n                l[0], str, l[1]);\t\t\t\t\\\n-}\n+  } while (0);\n \n #define ASM_OUTPUT_CHAR(FILE, VALUE)\t\t\t\\\n-{    fprintf (FILE, \"\\t.word\\t\");\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.word\\t\");\t\t\t\\\n      output_addr_const (FILE, VALUE);\t\t\t\\\n      if (GET_CODE (VALUE) != SYMBOL_REF)\t\t\\\n        fprintf (FILE, \" ; 0%08xh\\n\", INTVAL (VALUE));\t\\\n      else\t\t\t\t\t\t\\\n        fputc ('\\n', FILE);\t\t\t\t\\\n-}\n+  } while (0);\n \n #define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t.word\\t0%xh\\n\", (VALUE))\n@@ -2115,32 +2115,32 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define NO_DOT_IN_LABEL\t\t/* Only required for TI format */\n \n #define ASM_OUTPUT_LABEL(FILE, NAME)\t\\\n-{ assemble_name (FILE, NAME); fputs (\":\\n\", FILE); }\n+do { assemble_name (FILE, NAME); fputs (\":\\n\", FILE); } while (0);\n \n #define ASM_GLOBALIZE_LABEL(FILE, NAME) \\\n-{                                       \\\n+  do {                                  \\\n     fprintf (FILE, \"\\t.global\\t\");\t\\\n     assemble_name (FILE, NAME);\t\t\\\n     fputs (\"\\n\", FILE); \t        \\\n-}\n+  } while (0);\n \n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\\\n-{                                            \t\\\n+  do {                                         \t\\\n     fprintf (FILE, \"\\t.ref\\t\");\t\t\t\\\n     assemble_name (FILE, NAME);\t             \t\\\n     fputc ('\\n', FILE);  \t               \t\\\n-}\n+  } while (0);\n \n /* A C statement to output on FILE an assembler pseudo-op to\n    declare a library function named external.\n-   (Only needed to keep asm30 happy for ___divqf3 etc.) */\n+   (Only needed to keep asm30 happy for ___divqf3 etc.)  */\n \n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)  \\\n-{\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.ref\\t\");\t\t\t\\\n     assemble_name (FILE, XSTR (FUN, 0));\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n-}\n+  } while (0);\n \n /* The prefix to add to user-visible assembler symbols.  */\n "}]}