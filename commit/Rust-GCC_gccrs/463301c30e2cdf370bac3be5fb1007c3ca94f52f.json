{"sha": "463301c30e2cdf370bac3be5fb1007c3ca94f52f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzMzAxYzMwZTJjZGYzNzBiYWMzYmU1ZmIxMDA3YzNjYTk0ZjUyZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-03-04T16:28:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-03-04T16:28:50Z"}, "message": "cfgcleanup.c (thread_jump): Update call of cselib_init.\n\n\t* cfgcleanup.c (thread_jump): Update call of cselib_init.\n\t* cselib.c (cselib_record_memory): New static variable.\n\t(cselib_lookup_mem, cselib_record_set, cselib_record_sets):\n\tGive up on memories when asked for.\n\t(cselib_init): Accept new argument.\n\t* cselib.h (cselib_init): Update prototype.\n\t* gcse.c (local_cprop_pass): Update call of cselib_init.\n\t* loop.c (load_mems): Update call of cselib_init.\n\t* postreload.c (reload_cse_regs_1): Update call of cselib_init.\n\t* sched-deps.c (sched_analyze): Update call of cselib_init.\n\nFrom-SVN: r78917", "tree": {"sha": "807a0763c83b8408e6375a2965d0837b8dbb7208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/807a0763c83b8408e6375a2965d0837b8dbb7208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/463301c30e2cdf370bac3be5fb1007c3ca94f52f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463301c30e2cdf370bac3be5fb1007c3ca94f52f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463301c30e2cdf370bac3be5fb1007c3ca94f52f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463301c30e2cdf370bac3be5fb1007c3ca94f52f/comments", "author": null, "committer": null, "parents": [{"sha": "3b6ce0af5eb623ca01fe7a34c19594d3cb675a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6ce0af5eb623ca01fe7a34c19594d3cb675a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6ce0af5eb623ca01fe7a34c19594d3cb675a00"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "d9bb157867f8f895124b113ed0e121b077733c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -1,3 +1,16 @@\n+2004-03-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgcleanup.c (thread_jump): Update call of cselib_init.\n+\t* cselib.c (cselib_record_memory): New static variable.\n+\t(cselib_lookup_mem, cselib_record_set, cselib_record_sets):\n+\tGive up on memories when asked for.\n+\t(cselib_init): Accept new argument.\n+\t* cselib.h (cselib_init): Update prototype.\n+\t* gcse.c (local_cprop_pass): Update call of cselib_init.\n+\t* loop.c (load_mems): Update call of cselib_init.\n+\t* postreload.c (reload_cse_regs_1): Update call of cselib_init.\n+\t* sched-deps.c (sched_analyze): Update call of cselib_init.\n+\n 2004-03-04  David Edelsohn  <edelsohn@gnu.org>\n \t    GP <gp@qnx.com>\n "}, {"sha": "b2dd0937d5ab3c1fc8b3848439271b40b151e26a", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -349,7 +349,7 @@ thread_jump (int mode, edge e, basic_block b)\n \treturn NULL;\n       }\n \n-  cselib_init ();\n+  cselib_init (false);\n \n   /* First process all values computed in the source basic block.  */\n   for (insn = NEXT_INSN (BB_HEAD (e->src)); insn != NEXT_INSN (BB_END (e->src));"}, {"sha": "0dfb1a6c11893da531eec0ca026ab87e127179b9", "filename": "gcc/cselib.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -42,6 +42,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"params.h\"\n #include \"alloc-pool.h\"\n \n+static bool cselib_record_memory;\n static int entry_and_rtx_equal_p (const void *, const void *);\n static hashval_t get_value_hash (const void *);\n static struct elt_list *new_elt_list (struct elt_list *, cselib_val *);\n@@ -748,6 +749,7 @@ cselib_lookup_mem (rtx x, int create)\n   struct elt_list *l;\n \n   if (MEM_VOLATILE_P (x) || mode == BLKmode\n+      || !cselib_record_memory\n       || (FLOAT_MODE_P (mode) && flag_float_store))\n     return 0;\n \n@@ -1201,7 +1203,8 @@ cselib_record_set (rtx dest, cselib_val *src_elt, cselib_val *dest_addr_elt)\n \tn_useless_values--;\n       src_elt->locs = new_elt_loc_list (src_elt->locs, dest);\n     }\n-  else if (GET_CODE (dest) == MEM && dest_addr_elt != 0)\n+  else if (GET_CODE (dest) == MEM && dest_addr_elt != 0\n+\t   && cselib_record_memory)\n     {\n       if (src_elt->locs == 0)\n \tn_useless_values--;\n@@ -1275,7 +1278,8 @@ cselib_record_sets (rtx insn)\n \tsets[i].dest = dest = XEXP (dest, 0);\n \n       /* We don't know how to record anything but REG or MEM.  */\n-      if (GET_CODE (dest) == REG || GET_CODE (dest) == MEM)\n+      if (GET_CODE (dest) == REG\n+\t  || (GET_CODE (dest) == MEM && cselib_record_memory))\n         {\n \t  rtx src = sets[i].src;\n \t  if (cond)\n@@ -1320,7 +1324,8 @@ cselib_record_sets (rtx insn)\n   for (i = 0; i < n_sets; i++)\n     {\n       rtx dest = sets[i].dest;\n-      if (GET_CODE (dest) == REG || GET_CODE (dest) == MEM)\n+      if (GET_CODE (dest) == REG\n+\t  || (GET_CODE (dest) == MEM && cselib_record_memory))\n \tcselib_record_set (dest, sets[i].src_elt, sets[i].dest_addr_elt);\n     }\n }\n@@ -1398,7 +1403,7 @@ cselib_process_insn (rtx insn)\n    init_alias_analysis.  */\n \n void\n-cselib_init (void)\n+cselib_init (bool record_memory)\n {\n   elt_list_pool = create_alloc_pool (\"elt_list\", \n \t\t\t\t     sizeof (struct elt_list), 10);\n@@ -1408,6 +1413,7 @@ cselib_init (void)\n \t\t\t\t       sizeof (cselib_val), 10);\n   value_pool = create_alloc_pool (\"value\", \n \t\t\t\t  RTX_SIZE (VALUE), 100);\n+  cselib_record_memory = record_memory;\n   /* This is only created once.  */\n   if (! callmem)\n     callmem = gen_rtx_MEM (BLKmode, const0_rtx);"}, {"sha": "3dea471ad354badf2bc5cd08636ac0d012217793", "filename": "gcc/cselib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -64,7 +64,7 @@ struct elt_list GTY(())\n };\n \n extern cselib_val *cselib_lookup (rtx, enum machine_mode, int);\n-extern void cselib_init (void);\n+extern void cselib_init (bool record_memory);\n extern void cselib_finish (void);\n extern void cselib_process_insn (rtx);\n extern enum machine_mode cselib_reg_set_mode (rtx);"}, {"sha": "ce4d201b69875497258537cf61993fda3778df36", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -4407,7 +4407,7 @@ local_cprop_pass (int alter_jumps)\n   rtx libcall_stack[MAX_NESTED_LIBCALLS + 1], *libcall_sp;\n   bool changed = false;\n \n-  cselib_init ();\n+  cselib_init (false);\n   libcall_sp = &libcall_stack[MAX_NESTED_LIBCALLS];\n   *libcall_sp = 0;\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))"}, {"sha": "c4ca250b910fd7311d1252dd6db842eb8589c4a8", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -9797,7 +9797,7 @@ load_mems (const struct loop *loop)\n     ;\n   prev_ebb_head = p;\n \n-  cselib_init ();\n+  cselib_init (true);\n \n   /* Build table of mems that get set to constant values before the\n      loop.  */"}, {"sha": "26404e3c5bd7ca9f40b4eaa986f72b1d568b051f", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -181,7 +181,7 @@ reload_cse_regs_1 (rtx first)\n   rtx insn;\n   rtx testreg = gen_rtx_REG (VOIDmode, -1);\n \n-  cselib_init ();\n+  cselib_init (true);\n   init_alias_analysis ();\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))"}, {"sha": "754142f137c3f2e356f749c24710c073e5fb42f1", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463301c30e2cdf370bac3be5fb1007c3ca94f52f/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=463301c30e2cdf370bac3be5fb1007c3ca94f52f", "patch": "@@ -1156,7 +1156,7 @@ sched_analyze (struct deps *deps, rtx head, rtx tail)\n   rtx loop_notes = 0;\n \n   if (current_sched_info->use_cselib)\n-    cselib_init ();\n+    cselib_init (true);\n \n   for (insn = head;; insn = NEXT_INSN (insn))\n     {"}]}