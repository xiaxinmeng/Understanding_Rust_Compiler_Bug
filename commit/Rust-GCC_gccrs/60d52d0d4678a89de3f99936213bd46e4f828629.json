{"sha": "60d52d0d4678a89de3f99936213bd46e4f828629", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkNTJkMGQ0Njc4YTg5ZGUzZjk5OTM2MjEzYmQ0NmU0ZjgyODYyOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-10-27T21:37:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-27T21:37:06Z"}, "message": "re PR target/37378 (Revision 139827 causes Divide_X)\n\n\tPR target/37378\n\t* df-scan.c (df_bb_refs_collect): Don't handle EH_USES here.\n\t(df_get_entry_block_def_set): Neither here.\n\t(df_get_regular_block_artificial_uses): Add EH_USES registers.\n\nFrom-SVN: r141392", "tree": {"sha": "184253e870cda1e542eef471a003eb92ea0ce3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/184253e870cda1e542eef471a003eb92ea0ce3da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d52d0d4678a89de3f99936213bd46e4f828629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d52d0d4678a89de3f99936213bd46e4f828629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d52d0d4678a89de3f99936213bd46e4f828629", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d52d0d4678a89de3f99936213bd46e4f828629/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a16e934557199b55b389fd86241297099a0a7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a16e934557199b55b389fd86241297099a0a7ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a16e934557199b55b389fd86241297099a0a7ec"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "dbf6e2611dde3fd023d2e3508b89f890df11ccb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d52d0d4678a89de3f99936213bd46e4f828629/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d52d0d4678a89de3f99936213bd46e4f828629/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60d52d0d4678a89de3f99936213bd46e4f828629", "patch": "@@ -1,5 +1,10 @@\n 2008-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/37378\n+\t* df-scan.c (df_bb_refs_collect): Don't handle EH_USES here.\n+\t(df_get_entry_block_def_set): Neither here.\n+\t(df_get_regular_block_artificial_uses): Add EH_USES registers.\n+\n \tPR tree-optimization/37879\n \t* predict.c (tree_estimate_probability): Check if last_stmt is\n \tnon-NULL before dereferencing it."}, {"sha": "6a750a8a9b3dd85bb7a81c331a5016f0535143ee", "filename": "gcc/df-scan.c", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d52d0d4678a89de3f99936213bd46e4f828629/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d52d0d4678a89de3f99936213bd46e4f828629/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=60d52d0d4678a89de3f99936213bd46e4f828629", "patch": "@@ -3555,29 +3555,6 @@ df_bb_refs_collect (struct df_collection_rec *collection_rec, basic_block bb)\n     }\n #endif\n \n-\n-#ifdef EH_USES\n-  if (bb_has_eh_pred (bb))\n-    {\n-      unsigned int i;\n-      /* This code is putting in an artificial ref for the use at the\n-\t TOP of the block that receives the exception.  It is too\n-\t cumbersome to actually put the ref on the edge.  We could\n-\t either model this at the top of the receiver block or the\n-\t bottom of the sender block.\n-\n-         The bottom of the sender block is problematic because not all\n-         out-edges of a block are eh-edges.  However, it is true\n-         that all edges into a block are either eh-edges or none of\n-         them are eh-edges.  Thus, we can model this at the top of the\n-         eh-receiver for all of the edges at once. */\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (EH_USES (i))\n-\t  df_ref_record (DF_REF_ARTIFICIAL, collection_rec, regno_reg_rtx[i], NULL,\n-\t\t\t bb, NULL, DF_REF_REG_USE, DF_REF_AT_TOP, -1, -1, 0);\n-    }\n-#endif\n-\n   /* Add the hard_frame_pointer if this block is the target of a\n      non-local goto.  */\n   if (bb->flags & BB_NON_LOCAL_GOTO_TARGET)\n@@ -3667,6 +3644,10 @@ df_bb_refs_record (int bb_index, bool scan_insns)\n static void\n df_get_regular_block_artificial_uses (bitmap regular_block_artificial_uses)\n {\n+#ifdef EH_USES\n+  unsigned int i;\n+#endif\n+\n   bitmap_clear (regular_block_artificial_uses);\n \n   if (reload_completed)\n@@ -3702,6 +3683,20 @@ df_get_regular_block_artificial_uses (bitmap regular_block_artificial_uses)\n     }\n   /* The all-important stack pointer must always be live.  */\n   bitmap_set_bit (regular_block_artificial_uses, STACK_POINTER_REGNUM);\n+\n+#ifdef EH_USES\n+  /* EH_USES registers are used:\n+     1) at all insns that might throw (calls or with -fnon-call-exceptions\n+\ttrapping insns)\n+     2) in all EH edges\n+     3) to support backtraces and/or debugging, anywhere between their\n+\tinitialization and where they the saved registers are restored\n+\tfrom them, including the cases where we don't reach the epilogue\n+\t(noreturn call or infinite loop).  */\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+    if (EH_USES (i))\n+      bitmap_set_bit (regular_block_artificial_uses, i);\n+#endif\n }\n \n \n@@ -3826,16 +3821,6 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n   /* These registers are live everywhere.  */\n   if (!reload_completed)\n     {\n-#ifdef EH_USES\n-      /* The ia-64, the only machine that uses this, does not define these \n-\t until after reload.  */\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (EH_USES (i))\n-\t  {\n-\t    bitmap_set_bit (entry_block_defs, i);\n-\t  }\n-#endif\n-      \n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       /* Pseudos with argument area equivalences may require\n \t reloading via the argument pointer.  */"}]}