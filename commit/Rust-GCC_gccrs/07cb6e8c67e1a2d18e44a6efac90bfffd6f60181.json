{"sha": "07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjYjZlOGM2N2UxYTJkMThlNDRhNmVmYWM5MGJmZmZkNmY2MDE4MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-02-14T23:38:01Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-02-14T23:38:01Z"}, "message": "emit-rtl.c (set_mem_attributes_minus_bitpos): Treat complex types as aggregates not scalars.\n\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Treat complex\n\ttypes as aggregates not scalars.\n\t* function.c (assign_stack_temp_for_type): Likewise.\n\ntestsuite:\n\t* gcc.dg/torture/complex-alias-1.c: New test.\n\nFrom-SVN: r121968", "tree": {"sha": "0b1be463b155b65ac7791e3f21009cc72f326b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b1be463b155b65ac7791e3f21009cc72f326b92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702f9d782f241a8192e3cd2e10caa6ccb70bcbe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702f9d782f241a8192e3cd2e10caa6ccb70bcbe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702f9d782f241a8192e3cd2e10caa6ccb70bcbe6"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "01528f292426842c72115fa279fe65b04943e5bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "patch": "@@ -1,3 +1,9 @@\n+2007-02-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Treat complex\n+\ttypes as aggregates not scalars.\n+\t* function.c (assign_stack_temp_for_type): Likewise.\n+\n 2007-02-14  Roger Sayle  <roger@eyesopen.com>\n \t    Zdenek Dvorak  <dvorakz@suse.cz>\n "}, {"sha": "9a5db43bc8efec769e98cf8475189c2db3c18b1e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "patch": "@@ -1481,12 +1481,15 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n   alias = get_alias_set (t);\n \n   MEM_VOLATILE_P (ref) |= TYPE_VOLATILE (type);\n-  MEM_IN_STRUCT_P (ref) = AGGREGATE_TYPE_P (type);\n+  MEM_IN_STRUCT_P (ref)\n+    = AGGREGATE_TYPE_P (type) || TREE_CODE (type) == COMPLEX_TYPE;\n   MEM_POINTER (ref) = POINTER_TYPE_P (type);\n \n   /* If we are making an object of this type, or if this is a DECL, we know\n      that it is a scalar if the type is not an aggregate.  */\n-  if ((objectp || DECL_P (t)) && ! AGGREGATE_TYPE_P (type))\n+  if ((objectp || DECL_P (t))\n+      && ! AGGREGATE_TYPE_P (type)\n+      && TREE_CODE (type) != COMPLEX_TYPE)\n     MEM_SCALAR_P (ref) = 1;\n \n   /* We can set the alignment from the type if we are making an object,"}, {"sha": "b667a17756078b2d25d94d10beafe450b4765eae", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "patch": "@@ -763,7 +763,8 @@ assign_stack_temp_for_type (enum machine_mode mode, HOST_WIDE_INT size,\n   if (type != 0)\n     {\n       MEM_VOLATILE_P (slot) = TYPE_VOLATILE (type);\n-      MEM_SET_IN_STRUCT_P (slot, AGGREGATE_TYPE_P (type));\n+      MEM_SET_IN_STRUCT_P (slot, (AGGREGATE_TYPE_P (type)\n+\t\t\t\t  || TREE_CODE (type) == COMPLEX_TYPE));\n     }\n   MEM_NOTRAP_P (slot) = 1;\n "}, {"sha": "d452713f1d7e874ea30e7ca9ec65a0cf8e130cd8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "patch": "@@ -1,3 +1,7 @@\n+2007-02-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/complex-alias-1.c: New test.\n+\n 2007-02-14  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-prof/update-tailcall.c: Use -fdump-tree-tailc"}, {"sha": "6ab4ca0789c5b295a7023bdea76b15ac2f3072ec", "filename": "gcc/testsuite/gcc.dg/torture/complex-alias-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-alias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cb6e8c67e1a2d18e44a6efac90bfffd6f60181/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-alias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-alias-1.c?ref=07cb6e8c67e1a2d18e44a6efac90bfffd6f60181", "patch": "@@ -0,0 +1,29 @@\n+/* Accesses to complex numbers were sometimes marked as scalar and\n+   sometimes as struct accesses.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+\n+extern void abort (void);\n+static double _Complex *fp_cxd(double _Complex *cx) {\n+  return cx;\n+}\n+\n+int main( ) {\n+  double _Complex cx = 4.0 + 3.0*(__extension__ 1.0iF);\n+  double _Complex cx43 = 4.0 + 3.0*(__extension__ 1.0iF);\n+  double _Complex cx11 = 1.0 + 1.0*(__extension__ 1.0iF);\n+\n+  *fp_cxd(&cx) *= cx11;\n+  *fp_cxd(&cx) /= cx11;\n+\n+  double r_cx = __real__(cx);\n+  double i_cx = __imag__(cx);\n+  double r_cx43 = __real__(cx43);\n+  double i_cx43 = __imag__(cx43);\n+\n+  if( (r_cx == r_cx43) && (i_cx == i_cx43) ) { \n+    return 0;\n+  } else {\n+    abort ();\n+  }\n+}"}]}