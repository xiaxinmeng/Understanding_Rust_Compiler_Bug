{"sha": "2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4ZDgyOGE1ZmMxYzE4ZWY2MzBlYTQ1Y2UxZmYxMzYzOGQ5NzkxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:22:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:22:57Z"}, "message": "[multiple changes]\n\n2014-06-11  Yannick Moy  <moy@adacore.com>\n\n\t* einfo.ads: Minor typo in comment\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, sinfo.adb: New attribute Uninitialized_Variable, for\n\tformal private types and private type extensions, to indicate\n\tvariable in a generic unit whose uninitialized use suggest that\n\tactual type should be fully initialized.\n\tNeeds_Initialized_Actual:  removed, functionaity replaced by\n\tthe above.\n\t* lib-xref.adb (Generate_Reference): Generate a reference for\n\tvariables of a formal type when the unit is not the main unit,\n\tto enable appropriate warnings in an instance.\n\t* sem_ch12.adb (Check_Ininialized_Type): Improve warning on use\n\tof variable in a generic unit that suggests that actual type\n\tshould be full initialized.\n\t* sem_warn.adb; (May_Need_Initialized_Actual): Make into procedure\n\tand do not emot warning, which now only appears in an instance.\n\n2014-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_ugn.texi: Fix minor typo.\n\n2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb Add with and use clause for Sem_Ch10.\n\t(Analyze_Declarations): Code reformatting. Analyze the contract\n\tof a subprogram body stub at the end of the declarative region.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract): Spec_Id is\n\tnow a variable. Do not process the body if its contract is not\n\tavailable. Account for subprogram body stubs when extracting\n\tthe corresponding spec.\n\t* sem_ch6.ads (Analyze_Subprogram_Contract): Update the comment\n\ton usage.\n\t* sem_ch10.ads, sem_ch10.adb (Analyze_Subprogram_Body_Stub_Contract):\n\tNew routine.\n\t* sem_prag.adb (Analyze_Depends_In_Decl_Part):\n\tAccount for subprogram body stubs when extracting the\n\tcorresponding spec.\n\t(Analyze_Global_In_Decl_List):\n\tAccount for subprogram body stubs when extracting the\n\tcorresponding spec.\n\t(Analyze_Refined_Depends_In_Decl_Part):\n\tUse Find_Related_Subprogram_Or_Body to retrieve the declaration\n\tof the related body. Spec_Is now a variable. Account for\n\tsubprogram body stubs when extracting the corresponding spec.\n\t(Analyze_Refined_Global_In_Decl_Part): Use\n\tFind_Related_Subprogram_Or_Body to retrieve the declaration\n\tof the related body. Spec_Is now a variable. Account for\n\tsubprogram body stubs when extracting the corresponding spec.\n\t(Collect_Subprogram_Inputs_Output): Account for subprogram body\n\tstubs when extracting the corresponding spec.\n\n2014-06-11  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (Process_Link): Do not invoke gnatlink with\n\t-lgnarl or -lgnat.\n\nFrom-SVN: r211454", "tree": {"sha": "645544f68c75c182b632092acdfbe2feee66f73d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645544f68c75c182b632092acdfbe2feee66f73d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/comments", "author": null, "committer": null, "parents": [{"sha": "4622301b0dd6b595d51be6a6b9e39b177d0abb6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4622301b0dd6b595d51be6a6b9e39b177d0abb6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4622301b0dd6b595d51be6a6b9e39b177d0abb6a"}], "stats": {"total": 378, "additions": 268, "deletions": 110}, "files": [{"sha": "c45ca093dcf4480cb3a2fc369081b0a90629a935", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -1,3 +1,63 @@\n+2014-06-11  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.ads: Minor typo in comment\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb: New attribute Uninitialized_Variable, for\n+\tformal private types and private type extensions, to indicate\n+\tvariable in a generic unit whose uninitialized use suggest that\n+\tactual type should be fully initialized.\n+\tNeeds_Initialized_Actual:  removed, functionaity replaced by\n+\tthe above.\n+\t* lib-xref.adb (Generate_Reference): Generate a reference for\n+\tvariables of a formal type when the unit is not the main unit,\n+\tto enable appropriate warnings in an instance.\n+\t* sem_ch12.adb (Check_Ininialized_Type): Improve warning on use\n+\tof variable in a generic unit that suggests that actual type\n+\tshould be full initialized.\n+\t* sem_warn.adb; (May_Need_Initialized_Actual): Make into procedure\n+\tand do not emot warning, which now only appears in an instance.\n+\n+2014-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix minor typo.\n+\n+2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb Add with and use clause for Sem_Ch10.\n+\t(Analyze_Declarations): Code reformatting. Analyze the contract\n+\tof a subprogram body stub at the end of the declarative region.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract): Spec_Id is\n+\tnow a variable. Do not process the body if its contract is not\n+\tavailable. Account for subprogram body stubs when extracting\n+\tthe corresponding spec.\n+\t* sem_ch6.ads (Analyze_Subprogram_Contract): Update the comment\n+\ton usage.\n+\t* sem_ch10.ads, sem_ch10.adb (Analyze_Subprogram_Body_Stub_Contract):\n+\tNew routine.\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part):\n+\tAccount for subprogram body stubs when extracting the\n+\tcorresponding spec.\n+\t(Analyze_Global_In_Decl_List):\n+\tAccount for subprogram body stubs when extracting the\n+\tcorresponding spec.\n+\t(Analyze_Refined_Depends_In_Decl_Part):\n+\tUse Find_Related_Subprogram_Or_Body to retrieve the declaration\n+\tof the related body. Spec_Is now a variable. Account for\n+\tsubprogram body stubs when extracting the corresponding spec.\n+\t(Analyze_Refined_Global_In_Decl_Part): Use\n+\tFind_Related_Subprogram_Or_Body to retrieve the declaration\n+\tof the related body. Spec_Is now a variable. Account for\n+\tsubprogram body stubs when extracting the corresponding spec.\n+\t(Collect_Subprogram_Inputs_Output): Account for subprogram body\n+\tstubs when extracting the corresponding spec.\n+\n+2014-06-11  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Process_Link): Do not invoke gnatlink with\n+\t-lgnarl or -lgnat.\n+\n 2014-06-11  Robert Dewar  <dewar@adacore.com>\n \n \t* debug.adb: Add debug flag -gnatd.q."}, {"sha": "6a608a54da830ea9dab40f8f05bd54c76761f424", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -1870,7 +1870,7 @@ package Einfo is\n --       include only the components corresponding to these discriminants.\n \n --    Has_Static_Predicate_Aspect (Flag259)\n---       Defined in all types and subtypes. Set if a Dynamic_Predicate aspect\n+--       Defined in all types and subtypes. Set if a Static_Predicate aspect\n --       applies to the type. Note that we can tell if a static predicate is\n --       present by looking at Has_Predicates and Static_Predicate, but that\n --       could have come from a Predicate aspect or pragma, and we need to"}, {"sha": "c926eb8657360b1a685ca70811a587786655e956", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -11613,9 +11613,9 @@ the @option{-Wl,--gc-sections} option to gcc command or in the\n @option{-largs} section of @command{gnatmake}. This will perform a\n garbage collection of code and data never referenced.\n \n-If the linker performs a partial link (@option{-r} ld linker option), then you\n-will need to provide one or several entry point using the\n-@option{-e} / @option{--entry} ld option.\n+If the linker performs a partial link (@option{-r} linker option), then you\n+will need to provide the entry point using the @option{-e} / @option{--entry}\n+linker option.\n \n Note that objects compiled without the @option{-ffunction-sections} and\n @option{-fdata-sections} options can still be linked with the executable."}, {"sha": "7eb39cefdd41e832b9e07e64b20afe8284fd4477", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -1075,17 +1075,7 @@ procedure GNATCmd is\n \n       if Libraries_Present then\n \n-         --  Add -L<lib_dir> -lgnarl -lgnat -Wl,-rpath,<lib_dir>\n-\n-         Last_Switches.Increment_Last;\n-         Last_Switches.Table (Last_Switches.Last) :=\n-           new String'(\"-L\" & MLib.Utl.Lib_Directory);\n-         Last_Switches.Increment_Last;\n-         Last_Switches.Table (Last_Switches.Last) :=\n-           new String'(\"-lgnarl\");\n-         Last_Switches.Increment_Last;\n-         Last_Switches.Table (Last_Switches.Last) :=\n-           new String'(\"-lgnat\");\n+         --  Add -Wl,-rpath,<lib_dir>\n \n          --  If Path_Option is not null, create the switch (\"-Wl,-rpath,\" or\n          --  equivalent) with all the library dirs plus the standard GNAT"}, {"sha": "cc9ac4ce0f3262a390682f3a3310a6886abb8840", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -640,6 +640,11 @@ package body Lib.Xref is\n       --  For the same reason we accept an implicit reference generated for\n       --  a default in an instance.\n \n+      --  We also set the referenced flag in a generic package that is not in\n+      --  then main source unit, when the variable is of a formal private type,\n+      --  to warn in the instance if the corresponding type is not a fully\n+      --  initialized type.\n+\n       if not In_Extended_Main_Source_Unit (N) then\n          if Typ = 'e'\n            or else Typ = 'I'\n@@ -655,8 +660,23 @@ package body Lib.Xref is\n              (GNATprove_Mode\n                and then In_Extended_Main_Code_Unit (N)\n                and then (Typ = 'm' or else Typ = 'r' or else Typ = 's'))\n+\n          then\n             null;\n+\n+         elsif In_Instance_Body\n+           and then In_Extended_Main_Code_Unit (N)\n+           and then Is_Generic_Type (Etype (E))\n+         then\n+            Set_Referenced (E);\n+            return;\n+\n+         elsif Inside_A_Generic\n+           and then Is_Generic_Type (Etype (E))\n+         then\n+            Set_Referenced (E);\n+            return;\n+\n          else\n             return;\n          end if;"}, {"sha": "538746e7363f6e44a94607638c8eeea2d81b519a", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -1879,6 +1879,39 @@ package body Sem_Ch10 is\n       end if;\n    end Analyze_Protected_Body_Stub;\n \n+   -------------------------------------------\n+   -- Analyze_Subprogram_Body_Stub_Contract --\n+   -------------------------------------------\n+\n+   procedure Analyze_Subprogram_Body_Stub_Contract (Stub_Id : Entity_Id) is\n+      Stub_Decl : constant Node_Id   := Parent (Parent (Stub_Id));\n+      Spec_Id   : constant Entity_Id := Corresponding_Spec_Of_Stub (Stub_Decl);\n+\n+   begin\n+      --  A subprogram body stub may act as its own spec or as the completion\n+      --  of a previous declaration. Depending on the context, the contract of\n+      --  the stub may contain two sets of pragmas.\n+\n+      --  The stub is a completion, the applicable pragmas are:\n+      --    Contract_Cases\n+      --    Depends\n+      --    Global\n+      --    Postcondition\n+      --    Precondition\n+      --    Test_Case\n+\n+      if Present (Spec_Id) then\n+         Analyze_Subprogram_Body_Contract (Stub_Id);\n+\n+      --  The stub acts as its own spec, the applicable pragmas are:\n+      --    Refined_Depends\n+      --    Refined_Global\n+\n+      else\n+         Analyze_Subprogram_Contract (Stub_Id);\n+      end if;\n+   end Analyze_Subprogram_Body_Stub_Contract;\n+\n    ----------------------------------\n    -- Analyze_Subprogram_Body_Stub --\n    ----------------------------------"}, {"sha": "c003526ecbe9ba8926d7d426d8e17441f9b2fae7", "filename": "gcc/ada/sem_ch10.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch10.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch10.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.ads?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,6 +33,19 @@ package Sem_Ch10 is\n    procedure Analyze_Protected_Body_Stub                (N : Node_Id);\n    procedure Analyze_Subunit                            (N : Node_Id);\n \n+   procedure Analyze_Subprogram_Body_Stub_Contract (Stub_Id : Entity_Id);\n+   --  Analyze all delayed aspects chained on the contract of a subprogram body\n+   --  stub Stub_Id as if they appeared at the end of a declarative region. The\n+   --  aspects in question are:\n+   --    Contract_Cases\n+   --    Depends\n+   --    Global\n+   --    Postcondition\n+   --    Precondition\n+   --    Refined_Depends\n+   --    Refined_Global\n+   --    Test_Case\n+\n    procedure Install_Context (N : Node_Id);\n    --  Installs the entities from the context clause of the given compilation\n    --  unit into the visibility chains. This is done before analyzing a unit."}, {"sha": "acb267e79462792e7e443d0a23b7434401a757cc", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -9951,27 +9951,36 @@ package body Sem_Ch12 is\n       -----------------------------\n \n       procedure Check_Initialized_Types is\n-         Decl   : Node_Id;\n-         Formal : Entity_Id;\n-         Actual : Entity_Id;\n+         Decl       : Node_Id;\n+         Formal     : Entity_Id;\n+         Actual     : Entity_Id;\n+         Uninit_Var : Entity_Id;\n \n       begin\n          Decl := First (Generic_Formal_Declarations (Gen_Decl));\n          while Present (Decl) loop\n-            if (Nkind (Decl) = N_Private_Extension_Declaration\n-                 and then Needs_Initialized_Actual (Decl))\n-\n-              or else (Nkind (Decl) = N_Formal_Type_Declaration\n-                        and then Nkind (Formal_Type_Definition (Decl)) =\n-                                       N_Formal_Private_Type_Definition\n-                        and then Needs_Initialized_Actual\n-                                   (Formal_Type_Definition (Decl)))\n+            Uninit_Var := Empty;\n+\n+            if Nkind (Decl) = N_Private_Extension_Declaration then\n+               Uninit_Var := Uninitialized_Variable (Decl);\n+\n+            elsif Nkind (Decl) = N_Formal_Type_Declaration\n+                    and then Nkind (Formal_Type_Definition (Decl))\n+                      = N_Formal_Private_Type_Definition\n             then\n+               Uninit_Var := Uninitialized_Variable\n+                                (Formal_Type_Definition (Decl));\n+            end if;\n+\n+            if Present (Uninit_Var) then\n                Formal := Defining_Identifier (Decl);\n                Actual := First_Entity (Act_Decl_Id);\n \n                --  For each formal there is a subtype declaration that renames\n-               --  the actual and has the same name as the formal.\n+               --  the actual and has the same name as the formal. Locate the\n+               --  formal for warning message about uninitialized variables\n+               --  in the generic, for which the actual type should be a\n+               --  fully initialized type.\n \n                while Present (Actual) loop\n                   exit when Ekind (Actual) = E_Package\n@@ -9982,9 +9991,12 @@ package body Sem_Ch12 is\n                     and then not Is_Fully_Initialized_Type (Actual)\n                     and then Warn_On_No_Value_Assigned\n                   then\n+                     Error_Msg_Node_2 := Formal;\n                      Error_Msg_NE\n-                       (\"from its use in generic unit, actual for& should \"\n-                        & \"be fully initialized type??\", Actual, Formal);\n+                       (\"generic unit has uninitialzed variable& of \"\n+                          & \" formal private type &?v?\", Actual, Uninit_Var);\n+                     Error_Msg_NE (\"actual type for& should be \"\n+                        & \"fully initialized type?v?\", Actual, Formal);\n                      exit;\n                   end if;\n "}, {"sha": "763b85afc4e0e5fc2f7fb90d5e6a64c72bd733d2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -57,6 +57,7 @@ with Sem_Cat;  use Sem_Cat;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch13; use Sem_Ch13;\n with Sem_Dim;  use Sem_Dim;\n with Sem_Disp; use Sem_Disp;\n@@ -2371,13 +2372,16 @@ package body Sem_Ch3 is\n          if Nkind (Decl) = N_Object_Declaration then\n             Analyze_Object_Contract (Defining_Entity (Decl));\n \n+         elsif Nkind_In (Decl, N_Abstract_Subprogram_Declaration,\n+                               N_Subprogram_Declaration)\n+         then\n+            Analyze_Subprogram_Contract (Defining_Entity (Decl));\n+\n          elsif Nkind (Decl) = N_Subprogram_Body then\n             Analyze_Subprogram_Body_Contract (Defining_Entity (Decl));\n \n-         elsif Nkind_In (Decl, N_Subprogram_Declaration,\n-                               N_Abstract_Subprogram_Declaration)\n-         then\n-            Analyze_Subprogram_Contract (Defining_Entity (Decl));\n+         elsif Nkind (Decl) = N_Subprogram_Body_Stub then\n+            Analyze_Subprogram_Body_Stub_Contract (Defining_Entity (Decl));\n          end if;\n \n          Next (Decl);"}, {"sha": "d8b70c8238ecbb3f6a6d9b0858b12de41464ba30", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -2031,21 +2031,27 @@ package body Sem_Ch6 is\n    --------------------------------------\n \n    procedure Analyze_Subprogram_Body_Contract (Body_Id : Entity_Id) is\n-      Body_Decl   : constant Node_Id   := Parent (Parent (Body_Id));\n-      Spec_Id     : constant Entity_Id := Corresponding_Spec (Body_Decl);\n+      Body_Decl   : constant Node_Id := Parent (Parent (Body_Id));\n       Prag        : Node_Id;\n       Ref_Depends : Node_Id := Empty;\n       Ref_Global  : Node_Id := Empty;\n+      Spec_Id     : Entity_Id;\n \n    begin\n       --  When a subprogram body declaration is illegal, its defining entity is\n       --  left unanalyzed. There is nothing left to do in this case because the\n       --  body lacks a contract.\n \n-      if not Analyzed (Body_Id) then\n+      if No (Contract (Body_Id)) then\n          return;\n       end if;\n \n+      if Nkind (Body_Decl) = N_Subprogram_Body_Stub then\n+         Spec_Id := Corresponding_Spec_Of_Stub (Body_Decl);\n+      else\n+         Spec_Id := Corresponding_Spec (Body_Decl);\n+      end if;\n+\n       --  Locate and store pragmas Refined_Depends and Refined_Global since\n       --  their order of analysis matters.\n "}, {"sha": "67bb65268a4eab61498998e41e2883117eb07559", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,6 +57,8 @@ package Sem_Ch6 is\n    --  as if they appeared at the end of a declarative region. The aspects in\n    --  question are:\n    --    Contract_Cases\n+   --    Depends\n+   --    Global\n    --    Postcondition\n    --    Precondition\n    --    Test_Case"}, {"sha": "70db276e8744560299d1b45976cee11c218fcc3d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -1700,11 +1700,13 @@ package body Sem_Prag is\n       --  Refined_Depends.\n \n       if Nkind (Subp_Decl) = N_Subprogram_Body\n-        and then not Acts_As_Spec (Subp_Decl)\n+        and then Present (Corresponding_Spec (Subp_Decl))\n       then\n          Spec_Id := Corresponding_Spec (Subp_Decl);\n \n-      elsif Nkind (Subp_Decl) = N_Subprogram_Body_Stub then\n+      elsif Nkind (Subp_Decl) = N_Subprogram_Body_Stub\n+        and then Present (Corresponding_Spec_Of_Stub (Subp_Decl))\n+      then\n          Spec_Id := Corresponding_Spec_Of_Stub (Subp_Decl);\n \n       else\n@@ -2327,11 +2329,13 @@ package body Sem_Prag is\n       --  Refined_Global.\n \n       if Nkind (Subp_Decl) = N_Subprogram_Body\n-        and then not Acts_As_Spec (Subp_Decl)\n+        and then Present (Corresponding_Spec (Subp_Decl))\n       then\n          Spec_Id := Corresponding_Spec (Subp_Decl);\n \n-      elsif Nkind (Subp_Decl) = N_Subprogram_Body_Stub then\n+      elsif Nkind (Subp_Decl) = N_Subprogram_Body_Stub\n+        and then Present (Corresponding_Spec_Of_Stub (Subp_Decl))\n+      then\n          Spec_Id := Corresponding_Spec_Of_Stub (Subp_Decl);\n \n       else\n@@ -22623,7 +22627,7 @@ package body Sem_Prag is\n \n       --  Local variables\n \n-      Body_Decl : constant Node_Id := Parent (N);\n+      Body_Decl : constant Node_Id := Find_Related_Subprogram_Or_Body (N);\n       Errors    : constant Nat     := Serious_Errors_Detected;\n       Refs      : constant Node_Id :=\n                     Get_Pragma_Arg (First (Pragma_Argument_Associations (N)));\n@@ -22641,7 +22645,12 @@ package body Sem_Prag is\n          return;\n       end if;\n \n-      Spec_Id := Corresponding_Spec (Body_Decl);\n+      if Nkind (Body_Decl) = N_Subprogram_Body_Stub then\n+         Spec_Id := Corresponding_Spec_Of_Stub (Body_Decl);\n+      else\n+         Spec_Id := Corresponding_Spec (Body_Decl);\n+      end if;\n+\n       Depends := Get_Pragma (Spec_Id, Pragma_Depends);\n \n       --  Subprogram declarations lacks pragma Depends. Refined_Depends is\n@@ -23390,11 +23399,11 @@ package body Sem_Prag is\n \n       --  Local variables\n \n-      Body_Decl : constant Node_Id := Parent (N);\n+      Body_Decl : constant Node_Id := Find_Related_Subprogram_Or_Body (N);\n       Errors    : constant Nat     := Serious_Errors_Detected;\n       Items     : constant Node_Id :=\n                     Get_Pragma_Arg (First (Pragma_Argument_Associations (N)));\n-      Spec_Id   : constant Entity_Id := Corresponding_Spec (Body_Decl);\n+      Spec_Id   : Entity_Id;\n \n    --  Start of processing for Analyze_Refined_Global_In_Decl_Part\n \n@@ -23407,6 +23416,12 @@ package body Sem_Prag is\n          return;\n       end if;\n \n+      if Nkind (Body_Decl) = N_Subprogram_Body_Stub then\n+         Spec_Id := Corresponding_Spec_Of_Stub (Body_Decl);\n+      else\n+         Spec_Id := Corresponding_Spec (Body_Decl);\n+      end if;\n+\n       Global := Get_Pragma (Spec_Id, Pragma_Global);\n \n       --  The subprogram declaration lacks pragma Global. This renders\n@@ -25323,10 +25338,11 @@ package body Sem_Prag is\n \n       --  Local variables\n \n-      Formal  : Entity_Id;\n-      Global  : Node_Id;\n-      List    : Node_Id;\n-      Spec_Id : Entity_Id;\n+      Subp_Decl : constant Node_Id := Parent (Parent (Subp_Id));\n+      Formal    : Entity_Id;\n+      Global    : Node_Id;\n+      List      : Node_Id;\n+      Spec_Id   : Entity_Id;\n \n    --  Start of processing for Collect_Subprogram_Inputs_Outputs\n \n@@ -25335,8 +25351,16 @@ package body Sem_Prag is\n \n       --  Find the entity of the corresponding spec when processing a body\n \n-      if Ekind (Subp_Id) = E_Subprogram_Body then\n-         Spec_Id := Corresponding_Spec (Parent (Parent (Subp_Id)));\n+      if Nkind (Subp_Decl) = N_Subprogram_Body\n+        and then Present (Corresponding_Spec (Subp_Decl))\n+      then\n+         Spec_Id := Corresponding_Spec (Subp_Decl);\n+\n+      elsif Nkind (Subp_Decl) = N_Subprogram_Body_Stub\n+        and then Present (Corresponding_Spec_Of_Stub (Subp_Decl))\n+      then\n+         Spec_Id := Corresponding_Spec_Of_Stub (Subp_Decl);\n+\n       else\n          Spec_Id := Subp_Id;\n       end if;"}, {"sha": "cc4337fd9e82194ccbebde9ad08f4caa698fcaef", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -762,13 +762,14 @@ package body Sem_Warn is\n       --  For an entry formal entity from an entry declaration, find the\n       --  corresponding body formal from the given accept statement.\n \n-      function May_Need_Initialized_Actual (Ent : Entity_Id) return Boolean;\n+      procedure May_Need_Initialized_Actual (Ent : Entity_Id);\n       --  If an entity of a generic type has default initialization, then the\n       --  corresponding actual type should be fully initialized, or else there\n       --  will be uninitialized components in the instantiation, that might go\n-      --  unreported. This predicate allows the compiler to emit an appropriate\n-      --  warning in the generic itself. In a sense, the use of a type that\n-      --  requires full initialization is a weak part of the generic contract.\n+      --  unreported. This routine marks the type of the uninitialized variable\n+      --  appropriately to allow the compiler to emit an appropriate warning\n+      --  in the instance. In a sense, the use of a type that requires full\n+      --  initialization is a weak part of the generic contract.\n \n       function Missing_Subunits return Boolean;\n       --  We suppress warnings when there are missing subunits, because this\n@@ -823,38 +824,30 @@ package body Sem_Warn is\n       --   May_Need_Initialized_Actual --\n       -----------------------------------\n \n-      function May_Need_Initialized_Actual (Ent : Entity_Id) return Boolean is\n+      procedure May_Need_Initialized_Actual (Ent : Entity_Id) is\n          T   : constant Entity_Id := Etype (Ent);\n          Par : constant Node_Id   := Parent (T);\n-         Res : Boolean;\n \n       begin\n          if not Is_Generic_Type (T) then\n-            Res := False;\n+            null;\n \n          elsif (Nkind (Par)) = N_Private_Extension_Declaration then\n-            Set_Needs_Initialized_Actual (Par);\n-            Res := True;\n+\n+            --  We only indicate the first such variable in the generic.\n+\n+            if No (Uninitialized_Variable (Par)) then\n+               Set_Uninitialized_Variable (Par, Ent);\n+            end if;\n \n          elsif (Nkind (Par)) = N_Formal_Type_Declaration\n            and then Nkind (Formal_Type_Definition (Par)) =\n                                          N_Formal_Private_Type_Definition\n          then\n-            Set_Needs_Initialized_Actual (Formal_Type_Definition (Par));\n-            Res := True;\n-\n-         else\n-            Res := False;\n-         end if;\n-\n-         if Res then\n-            Error_Msg_N (\"??!variable& of a generic type is potentially \"\n-                         & \"uninitialized\", Ent);\n-            Error_Msg_NE (\"\\??instantiations must provide fully initialized \"\n-                          & \"type for&\", Ent, T);\n+            if No (Uninitialized_Variable (Formal_Type_Definition (Par))) then\n+               Set_Uninitialized_Variable (Formal_Type_Definition (Par), Ent);\n+            end if;\n          end if;\n-\n-         return Res;\n       end May_Need_Initialized_Actual;\n \n       ----------------------\n@@ -1305,10 +1298,10 @@ package body Sem_Warn is\n                         if not Has_Unmodified (E1)\n                           and then not Warnings_Off_E1\n                           and then not Is_Junk_Name (Chars (E1))\n-                          and then not May_Need_Initialized_Actual (E1)\n                         then\n                            Output_Reference_Error\n                              (\"?v?variable& is read but never assigned!\");\n+                           May_Need_Initialized_Actual (E1);\n                         end if;\n \n                      elsif not Has_Unreferenced (E1)"}, {"sha": "0c1a7776502e4c5a11aba12df62c68bd9f6cc813", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -2224,15 +2224,6 @@ package body Sinfo is\n       return List2 (N);\n    end Names;\n \n-   function Needs_Initialized_Actual\n-     (N : Node_Id) return Boolean is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Formal_Private_Type_Definition\n-        or else NT (N).Nkind = N_Private_Extension_Declaration);\n-      return Flag18 (N);\n-   end Needs_Initialized_Actual;\n-\n    function Next_Entity\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -3184,6 +3175,15 @@ package body Sinfo is\n       return List2 (N);\n    end Visible_Declarations;\n \n+   function Uninitialized_Variable\n+     (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration);\n+      return Node3 (N);\n+   end Uninitialized_Variable;\n+\n    function Used_Operations\n      (N : Node_Id) return Elist_Id is\n    begin\n@@ -5373,15 +5373,6 @@ package body Sinfo is\n       Set_List2_With_Parent (N, Val);\n    end Set_Names;\n \n-   procedure Set_Needs_Initialized_Actual\n-     (N : Node_Id; Val : Boolean := True) is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Formal_Private_Type_Definition\n-        or else NT (N).Nkind = N_Private_Extension_Declaration);\n-      Set_Flag18 (N, Val);\n-   end Set_Needs_Initialized_Actual;\n-\n    procedure Set_Next_Entity\n       (N : Node_Id; Val : Node_Id) is\n    begin\n@@ -6333,6 +6324,15 @@ package body Sinfo is\n       Set_List2_With_Parent (N, Val);\n    end Set_Visible_Declarations;\n \n+   procedure Set_Uninitialized_Variable\n+     (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration);\n+      Set_Node3 (N, Val);\n+   end Set_Uninitialized_Variable;\n+\n    procedure Set_Used_Operations\n      (N : Node_Id; Val :  Elist_Id) is\n    begin"}, {"sha": "73dea2a660153b7ab79f2686225e110fadf44685", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8d828a5fc1c18ef630ea45ce1ff13638d97918/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=2c8d828a5fc1c18ef630ea45ce1ff13638d97918", "patch": "@@ -1701,12 +1701,6 @@ package Sinfo is\n    --    present in an N_Subtype_Indication node, since we also use these in\n    --    calls to Freeze_Expression.\n \n-   --  Needs_Initialized_Actual (Flag18-Sem)\n-   --    Present in formal_private_type_definitions and on private extension\n-   --    declarations. Set when the use of a formal type in a generic suggests\n-   --    that the actual should be a fully initialized type, to avoid potential\n-   --    use of uninitialized values.\n-\n    --  Next_Entity (Node2-Sem)\n    --    Present in defining identifiers, defining character literals and\n    --    defining operator symbols (i.e. in all entities). The entities of a\n@@ -2050,6 +2044,13 @@ package Sinfo is\n    --    the body, so this flag is used to generate the proper message (see\n    --    Sem_Util.Check_Unused_Withs for details)\n \n+   --  Uninitialized_Variable (Node3-Sem)\n+   --    Present in N_Formal_Private_Type_Definition and in N_Private_\n+   --    Extension_Declarations. Indicates that a variable in a generic unit\n+   --    whose type is a formal private or derived type is read without being\n+   --    initialized. Used to warn if the corresponding actual type is not\n+   --    a fully initialized type.\n+\n    --  Used_Operations (Elist5-Sem)\n    --    Present in N_Use_Type_Clause nodes. Holds the list of operations that\n    --    are made potentially use-visible by the clause. Simplifies processing\n@@ -5278,6 +5279,7 @@ package Sinfo is\n       --  N_Private_Extension_Declaration\n       --  Sloc points to TYPE\n       --  Defining_Identifier (Node1)\n+      --  Uninitialized_Variable (Node3-Sem)\n       --  Discriminant_Specifications (List4) (set to No_List if no\n       --   discriminant part)\n       --  Unknown_Discriminants_Present (Flag13) set if (<>) discriminant\n@@ -5286,7 +5288,6 @@ package Sinfo is\n       --  Synchronized_Present (Flag7)\n       --  Subtype_Indication (Node5)\n       --  Interface_List (List2) (set to No_List if none)\n-      --  Needs_Initialized_Actual (Flag18-Sem)\n \n       ---------------------\n       -- 8.4  Use Clause --\n@@ -6709,10 +6710,10 @@ package Sinfo is\n \n       --  N_Formal_Private_Type_Definition\n       --  Sloc points to PRIVATE\n+      --  Uninitialized_Variable (Node3-Sem)\n       --  Abstract_Present (Flag4)\n       --  Tagged_Present (Flag15)\n       --  Limited_Present (Flag17)\n-      --  Needs_Initialized_Actual (Flag18-Sem)\n \n       --------------------------------------------\n       -- 12.5.1  Formal Derived Type Definition --\n@@ -9202,9 +9203,6 @@ package Sinfo is\n    function Names\n      (N : Node_Id) return List_Id;    -- List2\n \n-   function Needs_Initialized_Actual\n-     (N : Node_Id) return Boolean;    -- Flag18\n-\n    function Next_Entity\n      (N : Node_Id) return Node_Id;    -- Node2\n \n@@ -9502,6 +9500,9 @@ package Sinfo is\n    function Visible_Declarations\n      (N : Node_Id) return List_Id;    -- List2\n \n+   function Uninitialized_Variable\n+     (N : Node_Id) return Node_Id;    -- Node3\n+\n    function Used_Operations\n      (N : Node_Id) return Elist_Id;   -- Elist5\n \n@@ -10204,9 +10205,6 @@ package Sinfo is\n    procedure Set_Names\n      (N : Node_Id; Val : List_Id);            -- List2\n \n-   procedure Set_Needs_Initialized_Actual\n-     (N : Node_Id; Val : Boolean := True);    -- Flag18\n-\n    procedure Set_Next_Entity\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n@@ -10504,6 +10502,9 @@ package Sinfo is\n    procedure Set_Visible_Declarations\n      (N : Node_Id; Val : List_Id);            -- List2\n \n+   procedure Set_Uninitialized_Variable\n+     (N : Node_Id; Val : Node_Id);            -- Node3\n+\n    procedure Set_Used_Operations\n      (N : Node_Id; Val : Elist_Id);           -- Elist5\n \n@@ -12496,7 +12497,6 @@ package Sinfo is\n    pragma Inline (Must_Override);\n    pragma Inline (Name);\n    pragma Inline (Names);\n-   pragma Inline (Needs_Initialized_Actual);\n    pragma Inline (Next_Entity);\n    pragma Inline (Next_Exit_Statement);\n    pragma Inline (Next_Implicit_With);\n@@ -12591,6 +12591,7 @@ package Sinfo is\n    pragma Inline (TSS_Elist);\n    pragma Inline (Type_Definition);\n    pragma Inline (Unit);\n+   pragma Inline (Uninitialized_Variable);\n    pragma Inline (Unknown_Discriminants_Present);\n    pragma Inline (Unreferenced_In_Spec);\n    pragma Inline (Variant_Part);\n@@ -12826,7 +12827,6 @@ package Sinfo is\n    pragma Inline (Set_Must_Override);\n    pragma Inline (Set_Name);\n    pragma Inline (Set_Names);\n-   pragma Inline (Set_Needs_Initialized_Actual);\n    pragma Inline (Set_Next_Entity);\n    pragma Inline (Set_Next_Exit_Statement);\n    pragma Inline (Set_Next_Implicit_With);\n@@ -12919,6 +12919,7 @@ package Sinfo is\n    pragma Inline (Set_Triggering_Statement);\n    pragma Inline (Set_Type_Definition);\n    pragma Inline (Set_Unit);\n+   pragma Inline (Set_Uninitialized_Variable);\n    pragma Inline (Set_Unknown_Discriminants_Present);\n    pragma Inline (Set_Unreferenced_In_Spec);\n    pragma Inline (Set_Used_Operations);"}]}