{"sha": "943c65c4494145e993af43c821c82000013c6375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzYzY1YzQ0OTQxNDVlOTkzYWY0M2M4MjFjODIwMDAwMTNjNjM3NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-03T14:28:04Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-03T14:28:04Z"}, "message": "Fortran: Fix Bind(C) char-len check, add ptr-contiguous check\n\nAdd F2018, 18.3.6 (5), pointer + contiguous is not permitted\ncheck for dummies in BIND(C) procs.\n\nFix misreading of F2018, 18.3.4/18.3.5 + 18.3.6 (5) regarding\ncharacter dummies passed as byte stream to a bind(C) dummy arg:\nPer F2018, 18.3.1 only len=1 is interoperable (since F2003).\nF2008 added 'constant expression' for vars (F2018, 18.3.4/18.3.5),\napplicable to dummy args per F2018, C1554. I misread this such\nthat len > 1 is permitted if len is a constant expr.\n\nWhile the latter would work as character len=1 a(10) and len=2 a(5)\nhave the same storage sequence and len is fixed, it is still invalid.\nHence, it is now rejected again.\n\ngcc/fortran/ChangeLog:\n\n\t* decl.c (gfc_verify_c_interop_param): Reject pointer with\n\tCONTIGUOUS attributes as dummy arg. Reject character len > 1\n\twhen passed as byte stream.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/bind_c_char_6.f90: Update dg-error.\n\t* gfortran.dg/bind_c_char_7.f90: Likewise.\n\t* gfortran.dg/bind_c_char_8.f90: Likewise.\n\t* gfortran.dg/iso_c_binding_char_1.f90: Likewise.\n\t* gfortran.dg/pr32599.f03: Likewise.\n\t* gfortran.dg/bind_c_char_9.f90: Comment testcase bits which are\n\timplementable but not valid F2018.\n\t* gfortran.dg/bind_c_contiguous.f90: New test.", "tree": {"sha": "260660a474fe8e3b4acd60cbbe450c874890f3c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/260660a474fe8e3b4acd60cbbe450c874890f3c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/943c65c4494145e993af43c821c82000013c6375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943c65c4494145e993af43c821c82000013c6375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943c65c4494145e993af43c821c82000013c6375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943c65c4494145e993af43c821c82000013c6375/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fcfc03459a907c0237ea6e2c6e4ce4871034bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fcfc03459a907c0237ea6e2c6e4ce4871034bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fcfc03459a907c0237ea6e2c6e4ce4871034bed"}], "stats": {"total": 285, "additions": 164, "deletions": 121}, "files": [{"sha": "2e49a673e15ab3726ffc2a51f372a06ecf4c63fd", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -1551,11 +1551,15 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t\t\t     sym->ns->proc_name->name);\n \t    }\n \n+\t  /* Per F2018, 18.3.6 (5), pointer + contiguous is not permitted.  */\n+\t  if (sym->attr.pointer && sym->attr.contiguous)\n+\t    gfc_error (\"Dummy argument %qs at %L may not be a pointer with \"\n+\t\t       \"CONTIGUOUS attribute as procedure %qs is BIND(C)\",\n+\t\t       sym->name, &sym->declared_at, sym->ns->proc_name->name);\n+\n           /* Character strings are only C interoperable if they have a\n-\t     length of 1.  However, as argument they are either iteroperable\n-\t     when passed as descriptor (which requires len=: or len=*) or\n-\t     when having a constant length or are always passed by\n-\t     descriptor.  */\n+\t     length of 1.  However, as an argument they are also iteroperable\n+\t     when passed as descriptor (which requires len=: or len=*).  */\n \t  if (sym->ts.type == BT_CHARACTER)\n \t    {\n \t      gfc_charlen *cl = sym->ts.u.cl;\n@@ -1607,7 +1611,8 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t      else if (!cl || !cl->length)\n \t\t{\n \t\t  /* Assumed length; F2018, 18.3.6 (5)(2).\n-\t\t     Uses the CFI array descriptor.  */\n+\t\t     Uses the CFI array descriptor - also for scalars and\n+\t\t     explicit-size/assumed-size arrays.  */\n \t\t  if (!gfc_notify_std (GFC_STD_F2018,\n \t\t\t\t      \"Assumed-length character dummy argument \"\n \t\t\t\t      \"%qs at %L of procedure %qs with BIND(C) \"\n@@ -1629,38 +1634,26 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t\t      retval = false;\n \t\t    }\n \t\t}\n-\t      else if (cl->length->expr_type != EXPR_CONSTANT)\n+\t      else if (cl->length->expr_type != EXPR_CONSTANT\n+\t\t       || mpz_cmp_si (cl->length->value.integer, 1) != 0)\n \t\t{\n \t\t  /* F2018, 18.3.6, (5), item 4.  */\n \t\t  if (!sym->attr.dimension\n \t\t      || sym->as->type == AS_ASSUMED_SIZE\n \t\t      || sym->as->type == AS_EXPLICIT)\n \t\t    {\n \t\t      gfc_error (\"Character dummy argument %qs at %L must be \"\n-\t\t\t\t \"of constant length or assumed length, \"\n+\t\t\t\t \"of constant length of one or assumed length, \"\n \t\t\t\t \"unless it has assumed shape or assumed rank, \"\n \t\t\t\t \"as procedure %qs has the BIND(C) attribute\",\n \t\t\t\t sym->name, &sym->declared_at,\n \t\t\t\t sym->ns->proc_name->name);\n \t\t      retval = false;\n \t\t    }\n-\t\t  else if (!gfc_notify_std (GFC_STD_F2018,\n-\t\t\t\t\t    \"Character dummy argument %qs at \"\n-\t\t\t\t\t    \"%L with nonconstant length as \"\n-\t\t\t\t\t    \"procedure %qs is BIND(C)\",\n-\t\t\t\t\t    sym->name, &sym->declared_at,\n-\t\t\t\t\t    sym->ns->proc_name->name))\n-\t\t    retval = false;\n+\t\t  /* else: valid only since F2018 - and an assumed-shape/rank\n+\t\t     array; however, gfc_notify_std is already called when\n+\t\t     those array types are used. Thus, silently accept F200x. */\n \t\t}\n-\t     else if (mpz_cmp_si (cl->length->value.integer, 1) != 0\n-\t\t      && !gfc_notify_std (GFC_STD_F2008,\n-\t\t\t\t\t  \"Character dummy argument %qs at %L \"\n-\t\t\t\t\t  \"with length greater than 1 for \"\n-\t\t\t\t\t  \"procedure %qs with BIND(C) \"\n-\t\t\t\t\t  \"attribute\",\n-\t\t\t\t\t  sym->name, &sym->declared_at,\n-\t\t\t\t\t  sym->ns->proc_name->name))\n-\t       retval = false;\n \t    }\n \n \t  /* We have to make sure that any param to a bind(c) routine does"}, {"sha": "6bab29567616f237d450770b21fb4449f6425c63", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_6.f90", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_6.f90?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -9,11 +9,11 @@ subroutine s1 (x1) bind(C)\n   character(len=1) :: x1\n end\n \n-subroutine s2 (x2) bind(C) ! { dg-error \"Fortran 2008: Character dummy argument 'x2' at .1. with length greater than 1 for procedure 's2' with BIND\\\\(C\\\\) attribute\" }\n+subroutine s2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 's2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2\n end\n \n-subroutine s3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 's3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine s3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 's3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn\n end\n@@ -28,19 +28,17 @@ subroutine as1 (x1) bind(C)  ! { dg-error \"Fortran 2018: Assumed-shape array 'x1\n   character(len=1) :: x1(:)\n end\n \n-subroutine as2 (x2) bind(C) ! { dg-error \"Fortran 2008: Character dummy argument 'x2' at .1. with length greater than 1 for procedure 'as2' with BIND\\\\(C\\\\) attribute\" }\n-                            ! { dg-error \"Fortran 2018: Assumed-shape array 'x2' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as2' at .2.\" \"\" { target *-*-* } .-1 }\n+subroutine as2 (x2) bind(C) ! { dg-error \"Fortran 2018: Assumed-shape array 'x2' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as2' at .2.\" }\n   character(len=2) :: x2(:,:)\n end\n \n-subroutine as3 (xn, n) bind(C) ! { dg-error \"Fortran 2018: Character dummy argument 'xn' at .1. with nonconstant length as procedure 'as3' is BIND\\\\(C\\\\)\" }\n-                            ! { dg-error \"Fortran 2018: Assumed-shape array 'xn' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as3' at .2.\" \"\" { target *-*-* } .-1 }\n+subroutine as3 (xn, n) bind(C) ! { dg-error \"Fortran 2018: Assumed-shape array 'xn' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as3' at .2.\" }\n   integer :: n\n   character(len=n) :: xn(:,:,:)\n end\n \n-subroutine as4 (xstar) bind(C) ! { dg-error \"Fortran 2018: Assumed-length character dummy argument 'xstar' at .1. of procedure 'as4' with BIND\\\\(C\\\\) attribute\" }\n-                            ! { dg-error \"Fortran 2018: Assumed-shape array 'xstar' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as4' at .2.\" \"\" { target *-*-* } .-1 }\n+subroutine as4 (xstar) bind(C) ! { dg-error \"Fortran 2018: Assumed-length character dummy argument 'xstar' at .1. of procedure 'as4' with BIND\\\\(C\\\\) attribute\"  }\n+                               ! { dg-error \"Fortran 2018: Assumed-shape array 'xstar' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as4' at .2.\" \"\" { target *-*-* } .-1 }\n   character(len=*) :: xstar(:,:,:,:)\n end\n \n@@ -69,11 +67,11 @@ subroutine az1 (x1) bind(C)\n   character(len=1) :: x1(*)\n end\n \n-subroutine az2 (x2) bind(C) ! { dg-error \"Fortran 2008: Character dummy argument 'x2' at .1. with length greater than 1 for procedure 'az2' with BIND\\\\(C\\\\) attribute\" }\n+subroutine az2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'az2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2(*)\n end\n                                              \n-subroutine az3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 'az3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine az3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'az3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn(*)\n end\n@@ -88,11 +86,11 @@ subroutine ae1 (x1) bind(C)\n   character(len=1) :: x1(5)\n end\n \n-subroutine ae2 (x2) bind(C) ! { dg-error \"Fortran 2008: Character dummy argument 'x2' at .1. with length greater than 1 for procedure 'ae2' with BIND\\\\(C\\\\) attribute\" }\n+subroutine ae2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2(7)\n end\n \n-subroutine ae3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine ae3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn(9)\n end"}, {"sha": "5a20b8f1961e56708a788b5f169eccfae8297cb2", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_7.f90", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_7.f90?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -9,11 +9,11 @@ subroutine s1 (x1) bind(C)\n   character(len=1) :: x1\n end\n \n-subroutine s2 (x2) bind(C)\n+subroutine s2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 's2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2\n end\n \n-subroutine s3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 's3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine s3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 's3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn\n end\n@@ -32,8 +32,7 @@ subroutine as2 (x2) bind(C) ! { dg-error \"Fortran 2018: Assumed-shape array 'x2'\n   character(len=2) :: x2(:,:)\n end\n \n-subroutine as3 (xn, n) bind(C) ! { dg-error \"Fortran 2018: Character dummy argument 'xn' at .1. with nonconstant length as procedure 'as3' is BIND\\\\(C\\\\)\" }\n-                               ! { dg-error \"Fortran 2018: Assumed-shape array 'xn' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as3' at .2.\" \"\" { target *-*-* } .-1 }\n+subroutine as3 (xn, n) bind(C) ! { dg-error \"Fortran 2018: Assumed-shape array 'xn' at .1. as dummy argument to the BIND\\\\(C\\\\) procedure 'as3' at .2.\" }\n   integer :: n\n   character(len=n) :: xn(:,:,:)\n end\n@@ -68,11 +67,11 @@ subroutine az1 (x1) bind(C)\n   character(len=1) :: x1(*)\n end\n \n-subroutine az2 (x2) bind(C)\n+subroutine az2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'az2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2(*)\n end\n \n-subroutine az3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 'az3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine az3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'az3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn(*)\n end\n@@ -87,11 +86,11 @@ subroutine ae1 (x1) bind(C)\n   character(len=1) :: x1(5)\n end\n \n-subroutine ae2 (x2) bind(C)\n+subroutine ae2 (x2) bind(C)  ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2(7)\n end\n \n-subroutine ae3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine ae3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn(9)\n end"}, {"sha": "c6f406f3c5c8bd64f094332c62b5615591cf517f", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_8.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_8.f90?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -19,11 +19,11 @@ subroutine s1 (x1) bind(C)\n   character(len=1) :: x1\n end\n \n-subroutine s2 (x2) bind(C)\n+subroutine s2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 's2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2\n end\n \n-subroutine s3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 's3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine s3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 's3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn\n end\n@@ -76,11 +76,11 @@ subroutine az1 (x1) bind(C)\n   character(len=1) :: x1(*)\n end\n \n-subroutine az2 (x2) bind(C)\n+subroutine az2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'az2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2(*)\n end\n \n-subroutine az3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 'az3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine az3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'az3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn(*)\n end\n@@ -95,11 +95,11 @@ subroutine ae1 (x1) bind(C)\n   character(len=1) :: x1(5)\n end\n \n-subroutine ae2 (x2) bind(C)\n+subroutine ae2 (x2) bind(C) ! { dg-error \"Character dummy argument 'x2' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae2' has the BIND\\\\(C\\\\) attribute\" }\n   character(len=2) :: x2(7)\n end\n \n-subroutine ae3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae3' has the BIND\\\\(C\\\\) attribute\" }\n+subroutine ae3 (xn, n) bind(C) ! { dg-error \"Character dummy argument 'xn' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'ae3' has the BIND\\\\(C\\\\) attribute\" }\n   integer :: n\n   character(len=n) :: xn(9)\n end"}, {"sha": "64d73409df3775f6572508bbd30acd74e6a784c3", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_9.f90", "status": "modified", "additions": 90, "deletions": 71, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_9.f90?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -18,12 +18,18 @@ subroutine s1 (x1) bind(C)\n   x1 = 'A'\n end\n \n-subroutine s2 (x2) bind(C)\n-  character(kind=c_char, len=2) :: x2\n-  if (len (x2) /= 2) stop\n-  if (x2 /= '42') stop\n-  x2 = '64'\n-end\n+! Valid as Fortran code - but with BIND(C)\n+! 18.3.6 (5) (bullet 5) requires interoperability, i.e. len=1\n+! which is not fullfilled.\n+!\n+! [It would work as with len=<const> the length is known\n+!  and only a bytestream is passed around.]\n+!subroutine s2 (x2) bind(C)\n+!  character(kind=c_char, len=2) :: x2\n+!  if (len (x2) /= 2) stop\n+!  if (x2 /= '42') stop\n+!  x2 = '64'\n+!end\n \n ! Assumed-size array, nonallocatable/nonpointer\n \n@@ -44,22 +50,28 @@ subroutine az1 (x1) bind(C)\n             'h']\n end\n \n-subroutine az2 (x2) bind(C)\n-  character(kind=c_char, len=2) :: x2(*)\n-  if (len(x2) /= 2) stop  \n-  if (any (x2(:6) /= ['ab', &\n-                      'fd', &\n-                      'D4', &\n-                      '54', &\n-                      'ga', &\n-                      'hg'])) stop\n-  x2(:6) = ['ab', &\n-            'hd', &\n-            'fj', &\n-            'a4', &\n-            '4a', &\n-            'hf']\n-end\n+! Valid as Fortran code - but with BIND(C)\n+! 18.3.6 (5) (bullet 5) requires interoperability, i.e. len=1\n+! which is not fullfilled.\n+!\n+! [It would work as with len=<const> the length is known\n+!  and only a bytestream is passed around.]\n+!subroutine az2 (x2) bind(C)\n+!  character(kind=c_char, len=2) :: x2(*)\n+!  if (len(x2) /= 2) stop  \n+!  if (any (x2(:6) /= ['ab', &\n+!                      'fd', &\n+!                      'D4', &\n+!                      '54', &\n+!                      'ga', &\n+!                      'hg'])) stop\n+!  x2(:6) = ['ab', &\n+!            'hd', &\n+!            'fj', &\n+!            'a4', &\n+!            '4a', &\n+!            'hf']\n+!end\n \n ! Explicit-size array, nonallocatable/nonpointer\n \n@@ -81,23 +93,29 @@ subroutine ae1 (x1) bind(C)\n         'h']\n end\n \n-subroutine ae2 (x2) bind(C)\n-  character(kind=c_char, len=2) :: x2(6)\n-  if (size(x2) /= 6) stop\n-  if (len(x2) /= 2) stop  \n-  if (any (x2 /= ['ab', &\n-                  'fd', &\n-                  'D4', &\n-                  '54', &\n-                  'ga', &\n-                  'hg'])) stop\n-  x2 = ['ab', &\n-        'hd', &\n-        'fj', &\n-        'a4', &\n-        '4a', &\n-        'hf']\n-end\n+! Valid as Fortran code - but with BIND(C)\n+! 18.3.6 (5) (bullet 5) requires interoperability, i.e. len=1\n+! which is not fullfilled.\n+!\n+! [It would work as with len=<const> the length is known\n+!  and only a bytestream is passed around.]\n+!subroutine ae2 (x2) bind(C)\n+!  character(kind=c_char, len=2) :: x2(6)\n+!  if (size(x2) /= 6) stop\n+!  if (len(x2) /= 2) stop  \n+!  if (any (x2 /= ['ab', &\n+!                  'fd', &\n+!                  'D4', &\n+!                  '54', &\n+!                  'ga', &\n+!                  'hg'])) stop\n+!  x2 = ['ab', &\n+!        'hd', &\n+!        'fj', &\n+!        'a4', &\n+!        '4a', &\n+!        'hf']\n+!end\n \n end module m\n \n@@ -116,9 +134,9 @@ program main\n   call s1 (str1)\n   if (str1 /= 'A') stop\n \n-  str2 = '42'\n-  call s2 (str2)\n-  if (str2 /= '64') stop\n+!  str2 = '42'\n+!  call s2 (str2)\n+!  if (str2 /= '64') stop\n \n   ! assumed size - without array descriptor\n \n@@ -135,19 +153,20 @@ program main\n                       '3', &\n                       '4', &\n                       'h'])) stop\n-  str2a6 = ['ab', &\n-            'fd', &\n-            'D4', &\n-            '54', &\n-            'ga', &\n-            'hg']\n-  call az2 (str2a6)\n-  if (any (str2a6 /= ['ab', &\n-                      'hd', &\n-                      'fj', &\n-                      'a4', &\n-                      '4a', &\n-                      'hf'])) stop\n+!  str2a6 = ['ab', &\n+!            'fd', &\n+!            'D4', &\n+!            '54', &\n+!            'ga', &\n+!            'hg']\n+!  call az2 (str2a6)\n+!  if (any (str2a6 /= ['ab', &\n+!                      'hd', &\n+!                      'fj', &\n+!                      'a4', &\n+!                      '4a', &\n+!                      'hf'])) stop\n+\n   ! explicit size - without array descriptor\n \n   str1a6 = ['g', &\n@@ -163,26 +182,26 @@ program main\n                       '3', &\n                       '4', &\n                       'h'])) stop\n-  str2a6 = ['ab', &\n-            'fd', &\n-            'D4', &\n-            '54', &\n-            'ga', &\n-            'hg']\n-  call ae2 (str2a6)\n-  if (any (str2a6 /= ['ab', &\n-                      'hd', &\n-                      'fj', &\n-                      'a4', &\n-                      '4a', &\n-                      'hf'])) stop\n+!  str2a6 = ['ab', &\n+!            'fd', &\n+!            'D4', &\n+!            '54', &\n+!            'ga', &\n+!            'hg']\n+!  call ae2 (str2a6)\n+!  if (any (str2a6 /= ['ab', &\n+!                      'hd', &\n+!                      'fj', &\n+!                      'a4', &\n+!                      '4a', &\n+!                      'hf'])) stop\n end\n \n ! All argument shall be passed without descriptor\n ! { dg-final { scan-tree-dump-not \"dtype\" \"original\" } }\n ! { dg-final { scan-tree-dump-times \"void s1 \\\\(character\\\\(kind=1\\\\)\\\\\\[1:1\\\\\\] & restrict x1\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"void s2 \\\\(character\\\\(kind=1\\\\)\\\\\\[1:2\\\\\\] & restrict x2\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-not \"void s2 \" \"original\" } }\n ! { dg-final { scan-tree-dump-times \"void az1 \\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\* restrict x1\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"void az2 \\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:2\\\\\\] \\\\* restrict x2\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-not \"void az2 \" \"original\" } }\n ! { dg-final { scan-tree-dump-times \"void ae1 \\\\(character\\\\(kind=1\\\\)\\\\\\[6\\\\\\]\\\\\\[1:1\\\\\\] \\\\* restrict x1\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"void ae2 \\\\(character\\\\(kind=1\\\\)\\\\\\[6\\\\\\]\\\\\\[1:2\\\\\\] \\\\* restrict x2\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-not \"void ae2 \" \"original\" } }"}, {"sha": "fc0d092d921f09126807c790c9812faa47f1bb3a", "filename": "gcc/testsuite/gfortran.dg/bind_c_contiguous.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_contiguous.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_contiguous.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_contiguous.f90?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -0,0 +1,33 @@\n+module m\n+  use iso_c_binding\n+  implicit none (type, external)\n+contains\n+\n+! All of the following use an array descriptor\n+! F2018, 18.3.7 (5) applies:\n+\n+subroutine f1 (x) bind(c)  ! { dg-error \"Dummy argument 'x' at .1. may not be a pointer with CONTIGUOUS attribute as procedure 'f1' is BIND\\\\(C\\\\)\" }\n+  character(len=:, kind=c_char), pointer, contiguous :: x(:)\n+end\n+\n+subroutine f2 (x) bind(c)  ! { dg-error \"Dummy argument 'x' at .1. may not be a pointer with CONTIGUOUS attribute as procedure 'f2' is BIND\\\\(C\\\\)\" }\n+  integer(c_int), pointer, contiguous :: x(:)\n+end\n+\n+subroutine f3 (x) bind(c)\n+  character(len=:, kind=c_char), pointer :: x(:)  ! OK - pointer but not contiguous\n+end\n+\n+subroutine f4 (x) bind(c)\n+  character(len=*, kind=c_char), contiguous :: x(:)  ! OK - contiguous but not a pointer\n+end\n+\n+subroutine f5 (x) bind(c)\n+  integer(c_int), pointer :: x(:)  !  OK - pointer but not contigous\n+end\n+\n+subroutine f6 (x) bind(c)\n+  integer(c_int), contiguous :: x(:)  !  OK - contiguous but not a pointer\n+end\n+\n+end"}, {"sha": "a2616568b2a924255d11ac5353f4601f84e612c5", "filename": "gcc/testsuite/gfortran.dg/iso_c_binding_char_1.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_char_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_char_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_char_1.f90?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -5,6 +5,7 @@\n ! Contributed by Thomas Koenig  <tkoenig@gcc.gnu.org>\n !\n subroutine bar(c,d) BIND(C) ! { dg-error \"character dummy argument 'c' at .1. with assumed length is not yet supported for procedure 'bar' with BIND\\\\(C\\\\) attribute\" }\n+                            ! { dg-error \"Character dummy argument 'd' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'bar' has the BIND\\\\(C\\\\) attribute\" \"\" { target *-*-* } .-1 }\n   character (len=*) c\n   character (len=2) d\n end"}, {"sha": "819a2b83d579c425806c8ea15f64718a2d7ebd1e", "filename": "gcc/testsuite/gfortran.dg/pr32599.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32599.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943c65c4494145e993af43c821c82000013c6375/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32599.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32599.f03?ref=943c65c4494145e993af43c821c82000013c6375", "patch": "@@ -14,7 +14,7 @@ subroutine destroy(path) BIND(C) ! { dg-error \"Fortran 2018: Assumed-length char\n        character(len=*,kind=c_char), intent(IN) :: path\n      end subroutine destroy\n \n-     subroutine create(path) BIND(C) ! { dg-error \"Fortran 2008: Character dummy argument 'path' at .1. with length greater than 1 for procedure 'create' with BIND\\\\(C\\\\) attribute\" }\n+     subroutine create(path) BIND(C) ! { dg-error \"Character dummy argument 'path' at .1. must be of constant length of one or assumed length, unless it has assumed shape or assumed rank, as procedure 'create' has the BIND\\\\(C\\\\) attribute\" }\n        use iso_c_binding\n        implicit none\n        character(len=5,kind=c_char), intent(IN) :: path"}]}