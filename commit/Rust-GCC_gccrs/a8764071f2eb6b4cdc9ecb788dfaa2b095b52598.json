{"sha": "a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3NjQwNzFmMmViNmI0Y2RjOWVjYjc4OGRmYWEyYjA5NWI1MjU5OA==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2021-03-03T00:06:37Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2021-05-24T19:46:59Z"}, "message": "Fusion patterns for add-logical/logical-add\n\nThis patch modifies the function in genfusion.pl for generating\nthe logical-logical patterns so that it can also generate the\nadd-logical and logical-add patterns which are very similar.\n\ngcc/ChangeLog:\n\t* config/rs6000/genfusion.pl (gen_logical_addsubf): Refactor to\n\tadd generation of logical-add and add-logical fusion pairs.\n\t* config/rs6000/rs6000-cpus.def: Add new fusion to ISA 3.1 mask\n\tand powerpc mask.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Turn on\n\tlogical-add and add-logical fusion by default.\n\t* config/rs6000/rs6000.opt: Add -mpower10-fusion-logical-add and\n\t-mpower10-fusion-add-logical options.\n\t* config/rs6000/fusion.md: Regenerate file.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/powerpc/fusion-p10-logadd.c: New file.", "tree": {"sha": "7ead89fbf1460d24b41fd9d6bbfe026419616f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ead89fbf1460d24b41fd9d6bbfe026419616f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8cc8273c5646482eedd567288b9f8aa3fb6492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8cc8273c5646482eedd567288b9f8aa3fb6492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8cc8273c5646482eedd567288b9f8aa3fb6492"}], "stats": {"total": 1076, "additions": 797, "deletions": 279}, "files": [{"sha": "51912106663068076e51af870eea791d9717fb9c", "filename": "gcc/config/rs6000/fusion.md", "status": "modified", "additions": 616, "deletions": 256, "changes": 872, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Ffusion.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Ffusion.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffusion.md?ref=a8764071f2eb6b4cdc9ecb788dfaa2b095b52598"}, {"sha": "1285dd4204336ca3e3690145b6a9f7c1dbb95c9f", "filename": "gcc/config/rs6000/genfusion.pl", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl?ref=a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "patch": "@@ -144,23 +144,32 @@ sub gen_ld_cmpi_p10\n   }\n }\n \n-sub gen_2logical\n+sub gen_logical_addsubf\n {\n     my @logicals = ( \"and\", \"andc\", \"eqv\", \"nand\", \"nor\", \"or\", \"orc\", \"xor\" );\n+    my %logicals_addsub = ( \"and\"=>1, \"nand\"=>1, \"nor\"=>1, \"or\"=>1 );\n+    my @addsub = ( \"add\", \"subf\" );\n+    my %isaddsub = ( \"add\"=>1, \"subf\"=>1 );\n     my %complement = ( \"and\"=> 0, \"andc\"=> 1, \"eqv\"=> 0, \"nand\"=> 3,\n-\t\t       \"nor\"=> 3, \"or\"=> 0, \"orc\"=> 1, \"xor\"=> 0 );\n+\t\t       \"nor\"=> 3, \"or\"=> 0, \"orc\"=> 1, \"xor\"=> 0,\n+\t\t       \"add\"=> 0, \"subf\"=> 0 );\n     my %invert = ( \"and\"=> 0, \"andc\"=> 0, \"eqv\"=> 1, \"nand\"=> 0,\n-\t\t   \"nor\"=> 0, \"or\"=> 0, \"orc\"=> 0, \"xor\"=> 0 );\n+\t\t   \"nor\"=> 0, \"or\"=> 0, \"orc\"=> 0, \"xor\"=> 0,\n+\t\t   \"add\"=> 0, \"subf\"=> 0 );\n     my %commute2 = ( \"and\"=> 1, \"andc\"=> 0, \"eqv\"=> 1, \"nand\"=> 0,\n \t\t     \"nor\"=> 0, \"or\"=> 1, \"orc\"=> 0, \"xor\"=> 1 );\n     my %rtlop = ( \"and\"=>\"and\", \"andc\"=>\"and\", \"eqv\"=>\"xor\", \"nand\"=>\"ior\",\n-\t\t  \"nor\"=>\"and\", \"or\"=>\"ior\", \"orc\"=>\"ior\", \"xor\"=>\"xor\" );\n+\t\t  \"nor\"=>\"and\", \"or\"=>\"ior\", \"orc\"=>\"ior\", \"xor\"=>\"xor\",\n+\t\t  \"add\"=>\"plus\", \"subf\"=>\"minus\" );\n \n-    my ($kind, $vchr, $mode, $pred, $constraint, $cr, $outer, $outer_op,\n-\t$outer_comp, $outer_inv, $outer_rtl, $inner, $inner_comp, $inner_inv,\n-\t$inner_rtl, $inner_op, $both_commute, $c4, $bc, $inner_arg0,\n-\t$inner_arg1, $inner_exp, $outer_arg2, $outer_exp, $insn, $fuse_type);\n+    my ($kind, $vchr, $mode, $pred, $constraint, $cr, $outer, @outer_ops,\n+\t$outer_op, $outer_comp, $outer_inv, $outer_rtl, $inner, @inner_ops,\n+\t$inner_comp, $inner_inv, $inner_rtl, $inner_op, $both_commute, $c4,\n+\t$bc, $inner_arg0, $inner_arg1, $inner_exp, $outer_arg2, $outer_exp,\n+\t$target_flag, $ftype, $insn, $is_rsubf, $outer_32, $outer_42,\n+\t$outer_name, $fuse_type);\n   KIND: foreach $kind ('scalar','vector') {\n+      @outer_ops = @logicals;\n       if ( $kind eq 'vector' ) {\n \t  $vchr = \"v\";\n \t  $mode = \"VM\";\n@@ -173,14 +182,37 @@ sub gen_2logical\n \t  $pred = \"gpc_reg_operand\";\n \t  $constraint = \"r\";\n \t  $fuse_type = \"fused_arith_logical\";\n+\t  push (@outer_ops, @addsub);\n+\t  push (@outer_ops, ( \"rsubf\" ));\n       }\n       $c4 = \"${constraint},${constraint},${constraint},${constraint}\";\n-    OUTER: foreach $outer ( @logicals ) {\n+    OUTER: foreach $outer ( @outer_ops ) {\n+\t$outer_name = \"${vchr}${outer}\";\n+\tif ( $outer eq \"rsubf\" ) {\n+\t    $is_rsubf = 1;\n+\t    $outer = \"subf\";\n+\t} else {\n+\t    $is_rsubf = 0;\n+\t}\n \t$outer_op = \"${vchr}${outer}\";\n \t$outer_comp = $complement{$outer};\n \t$outer_inv = $invert{$outer};\n \t$outer_rtl = $rtlop{$outer};\n-      INNER: foreach $inner ( @logicals ) {\n+\t@inner_ops = @logicals;\n+\t$ftype = \"logical-logical\";\n+\t$target_flag = \"TARGET_P10_FUSION_2LOGICAL\";\n+\tif ( exists $isaddsub{$outer} ) {\n+\t    @inner_ops = sort keys %logicals_addsub;\n+\t    $ftype = \"logical-add\";\n+\t    $target_flag = \"TARGET_P10_FUSION_LOGADD\";\n+\t} elsif ( $kind ne 'vector' && exists $logicals_addsub{$outer} ) {\n+\t    push (@inner_ops, @addsub);\n+\t}\n+      INNER: foreach $inner ( @inner_ops ) {\n+\t  if ( exists $isaddsub{$inner} ) {\n+\t      $ftype = \"add-logical\";\n+\t      $target_flag = \"TARGET_P10_FUSION_ADDLOG\";\n+\t  }\n \t  $inner_comp = $complement{$inner};\n \t  $inner_inv = $invert{$inner};\n \t  $inner_rtl = $rtlop{$inner};\n@@ -197,7 +229,7 @@ sub gen_2logical\n \t  if ( ($inner_comp & 2) == 2 ) {\n \t      $inner_arg1 = \"(not:${mode} $inner_arg1)\";\n \t  }\n-\t  $inner_exp = \"(${inner_rtl}:${mode} ${inner_arg0} \n+\t  $inner_exp = \"(${inner_rtl}:${mode} ${inner_arg0}\n                           ${inner_arg1})\";\n \t  if ( $inner_inv == 1 ) {\n \t      $inner_exp = \"(not:${mode} $inner_exp)\";\n@@ -209,26 +241,35 @@ sub gen_2logical\n \t  if ( ($outer_comp & 2) == 2 ) {\n \t      $inner_exp = \"(not:${mode} $inner_exp)\";\n \t  }\n-\t  $outer_exp = \"(${outer_rtl}:${mode} ${inner_exp}\n+\t  if ( $is_rsubf == 1 ) {\n+\t      $outer_exp = \"(${outer_rtl}:${mode} ${outer_arg2}\n+                 ${inner_exp})\";\n+\t      $outer_32 = \"%2,%3\";\n+\t      $outer_42 = \"%2,%4\";\n+\t  } else {\n+\t      $outer_exp = \"(${outer_rtl}:${mode} ${inner_exp}\n                  ${outer_arg2})\";\n+\t      $outer_32 = \"%3,%2\";\n+\t      $outer_42 = \"%4,%2\";\n+\t  }\n \t  if ( $outer_inv == 1 ) {\n \t      $outer_exp = \"(not:${mode} $outer_exp)\";\n \t  }\n \n \t  $insn =  <<\"EOF\";\n \n-;; logical-logical fusion pattern generated by gen_2logical\n-;; $kind $inner_op -> $outer_op\n-(define_insn \"*fuse_${inner_op}_${outer_op}\"\n+;; $ftype fusion pattern generated by gen_logical_addsubf\n+;; $kind $inner_op -> $outer_name\n+(define_insn \"*fuse_${inner_op}_${outer_name}\"\n   [(set (match_operand:${mode} 3 \"${pred}\" \"=0,1,&${constraint},${constraint}\")\n         ${outer_exp})\n    (clobber (match_scratch:${mode} 4 \"=X,X,X,&r\"))]\n-  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"(TARGET_P10_FUSION && $target_flag)\"\n   \"@\n-   ${inner_op} %3,%1,%0\\\\;${outer_op} %3,%3,%2\n-   ${inner_op} %3,%1,%0\\\\;${outer_op} %3,%3,%2\n-   ${inner_op} %3,%1,%0\\\\;${outer_op} %3,%3,%2\n-   ${inner_op} %4,%1,%0\\\\;${outer_op} %3,%4,%2\"\n+   ${inner_op} %3,%1,%0\\\\;${outer_op} %3,${outer_32}\n+   ${inner_op} %3,%1,%0\\\\;${outer_op} %3,${outer_32}\n+   ${inner_op} %3,%1,%0\\\\;${outer_op} %3,${outer_32}\n+   ${inner_op} %4,%1,%0\\\\;${outer_op} %3,${outer_42}\"\n   [(set_attr \"type\" \"$fuse_type\")\n    (set_attr \"cost\" \"6\")\n    (set_attr \"length\" \"8\")])\n@@ -284,7 +325,7 @@ sub gen_addadd\n }\n \n gen_ld_cmpi_p10();\n-gen_2logical();\n+gen_logical_addsubf();\n gen_addadd;\n \n exit(0);"}, {"sha": "52ce84835f7eddd67332e76fa935d98a8f7ca220", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "patch": "@@ -86,6 +86,8 @@\n \t\t\t\t | OPTION_MASK_P10_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_LD_CMPI\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL\t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_LOGADD \t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_ADDLOG\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_2ADD)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n@@ -136,6 +138,8 @@\n \t\t\t\t | OPTION_MASK_P10_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_LD_CMPI\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL\t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_LOGADD \t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_ADDLOG\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_2ADD    \t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\"}, {"sha": "835af7708f915898c4b6f73588d606d43ce3a2c2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "patch": "@@ -4477,6 +4477,14 @@ rs6000_option_override_internal (bool global_init_p)\n       && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2LOGICAL) == 0)\n     rs6000_isa_flags |= OPTION_MASK_P10_FUSION_2LOGICAL;\n \n+  if (TARGET_POWER10\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_LOGADD) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_P10_FUSION_LOGADD;\n+\n+  if (TARGET_POWER10\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_ADDLOG) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_P10_FUSION_ADDLOG;\n+\n   if (TARGET_POWER10\n       && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2ADD) == 0)\n     rs6000_isa_flags |= OPTION_MASK_P10_FUSION_2ADD;"}, {"sha": "0538db387dc0dc1cf935c563460e7942c536b5c4", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "patch": "@@ -500,11 +500,19 @@ Fuse certain integer operations together for better performance on power10.\n \n mpower10-fusion-2logical\n Target Undocumented Mask(P10_FUSION_2LOGICAL) Var(rs6000_isa_flags)\n-Fuse certain integer operations together for better performance on power10.\n+Fuse pairs of scalar or vector logical operations together for better performance on power10.\n+\n+mpower10-fusion-logical-add\n+Target Undocumented Mask(P10_FUSION_LOGADD) Var(rs6000_isa_flags)\n+Fuse scalar logical op with add/subf for better performance on power10.\n+\n+mpower10-fusion-add-logical\n+Target Undocumented Mask(P10_FUSION_ADDLOG) Var(rs6000_isa_flags)\n+Fuse scalar add/subf with logical op for better performance on power10.\n \n mpower10-fusion-2add\n Target Undocumented Mask(P10_FUSION_2ADD) Var(rs6000_isa_flags)\n-Fuse certain add operations together for better performance on power10.\n+Fuse dependent pairs of add or vaddudm instructions for better performance on power10.\n \n mcrypto\n Target Mask(CRYPTO) Var(rs6000_isa_flags)"}, {"sha": "b7022b2b61d7b67f46c658997c2a605cb77e0fa8", "filename": "gcc/testsuite/gcc.target/powerpc/fusion-p10-logadd.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-logadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8764071f2eb6b4cdc9ecb788dfaa2b095b52598/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-logadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-logadd.c?ref=a8764071f2eb6b4cdc9ecb788dfaa2b095b52598", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O3 -dp\" } */\n+\n+#include <altivec.h>\n+#include <stdint.h>\n+\n+#define ADD(a,b) ((a)+(b))\n+#define SUB1(a,b) ((a)-(b))\n+#define SUB2(a,b) ((b)-(a))\n+\n+/* and/andc/eqv/nand/nor/or/orc/xor */\n+#define AND(a,b) ((a)&(b))\n+#define NAND(a,b) (~((a)&(b)))\n+#define NOR(a,b) (~((a)|(b)))\n+#define OR(a,b) ((a)|(b))\n+#define TEST1(type, func)\t\t\t\t\t\t\t\\\n+  type func ## _add_T_     ## type (type a, type b, type c) { return ADD(func(a,b),c); } \\\n+  type func ## _sub1_T_    ## type (type a, type b, type c) { return SUB1(func(a,b),c); } \\\n+  type func ## _sub2_T_    ## type (type a, type b, type c) { return SUB2(func(a,b),c); } \\\n+  type func ## _rev_add_T_     ## type (type a, type b, type c) { return ADD(c,func(a,b)); } \\\n+  type func ## _rev_sub1_T_    ## type (type a, type b, type c) { return SUB1(c,func(a,b)); } \\\n+  type func ## _rev_sub2_T_    ## type (type a, type b, type c) { return SUB2(c,func(a,b)); }\n+#define TEST2(type, func)\t\t\t\t\t\t\t\\\n+  type func ## _and_T_     ## type (type a, type b, type c) { return  AND(func(a,b),c); } \\\n+  type func ## _nand_T_    ## type (type a, type b, type c) { return NAND(func(a,b),c); } \\\n+  type func ## _or_T_      ## type (type a, type b, type c) { return   OR(func(a,b),c); } \\\n+  type func ## _nor_T_     ## type (type a, type b, type c) { return  NOR(func(a,b),c); } \\\n+  type func ## _rev_and_T_     ## type (type a, type b, type c) { return  AND(c,func(a,b)); } \\\n+  type func ## _rev_nand_T_    ## type (type a, type b, type c) { return NAND(c,func(a,b)); } \\\n+  type func ## _rev_or_T_      ## type (type a, type b, type c) { return   OR(c,func(a,b)); } \\\n+  type func ## _rev_nor_T_     ## type (type a, type b, type c) { return  NOR(c,func(a,b)); }\n+#define TEST(type)    \\\n+  TEST1(type,AND)     \\\n+  TEST1(type,NAND)    \\\n+  TEST1(type,NOR)     \\\n+  TEST1(type,OR)      \\\n+  TEST2(type,ADD)     \\\n+  TEST2(type,SUB1)    \\\n+  TEST2(type,SUB2)\n+\n+typedef vector bool char vboolchar_t;\n+typedef vector unsigned int vuint_t;\n+\n+TEST(uint8_t);\n+TEST(int8_t);\n+TEST(uint16_t);\n+TEST(int16_t);\n+TEST(uint32_t);\n+TEST(int32_t);\n+TEST(uint64_t);\n+TEST(int64_t);\n+  \n+/* { dg-final { scan-assembler-times \"fuse_nand_rsubf/0\"   2 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nand_rsubf/2\"   2 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nor_rsubf/0\"    2 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nor_rsubf/2\"    2 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_nand/0\"     4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_nor/0\"      4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_or/0\"       4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_and_rsubf/0\"    4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_and_subf/0\"     4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nand_add/0\"     4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nand_subf/0\"    4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nor_add/0\"      4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nor_subf/0\"     4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_or_rsubf/0\"     4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_or_subf/0\"      4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_nand/0\"    4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_nand/1\"    4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_nor/0\"     4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_nor/1\"     4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_or/0\"      4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_or/1\"      4 } } */\n+/* { dg-final { scan-assembler-times \"fuse_and_add/0\"      6 } } */\n+/* { dg-final { scan-assembler-times \"fuse_or_add/0\"       6 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_and/0\"      8 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_and/2\"      8 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_and/0\"     8 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_and/1\"     8 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_nand/2\"    12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_nor/2\"     12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_or/2\"      12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_and_rsubf/2\"   12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_and_subf/2\"    12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nand_add/2\"    12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nand_subf/2\"   12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nor_add/2\"     12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_nor_subf/2\"    12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_or_rsubf/2\"    12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_or_subf/2\"     12 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_and/2\"    16 } } */\n+/* { dg-final { scan-assembler-times \"fuse_and_add/2\"     22 } } */\n+/* { dg-final { scan-assembler-times \"fuse_or_add/2\"      22 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_nand/2\"   24 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_nor/2\"    24 } } */\n+/* { dg-final { scan-assembler-times \"fuse_subf_or/2\"     24 } } */\n+"}]}