{"sha": "bc25483c055d62f94f8c289f80843dda3c4a6ff4", "node_id": "C_kwDOANBUbNoAKGJjMjU0ODNjMDU1ZDYyZjk0ZjhjMjg5ZjgwODQzZGRhM2M0YTZmZjQ", "commit": {"author": {"name": "Sebastian Pop", "email": "spop@amazon.com", "date": "2022-04-18T15:13:20Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@amazon.com", "date": "2022-05-13T17:09:43Z"}, "message": "[AArch64] add barriers to ool __sync builtins\n\n2022-05-13  Sebastian Pop  <spop@amazon.com>\n\ngcc/\n\tPR target/105162\n\t* config/aarch64/aarch64-protos.h (atomic_ool_names): Increase dimension\n\tof str array.\n\t* config/aarch64/aarch64.cc (aarch64_atomic_ool_func): Call\n\tmemmodel_from_int and handle MEMMODEL_SYNC_*.\n\t(DEF0): Add __aarch64_*_sync functions.\n\ngcc/testsuite/\n\tPR target/105162\n\t* gcc.target/aarch64/sync-comp-swap-ool.c: New.\n\t* gcc.target/aarch64/sync-op-acquire-ool.c: New.\n\t* gcc.target/aarch64/sync-op-full-ool.c: New.\n\t* gcc.target/aarch64/target_attr_20.c: Update check.\n\t* gcc.target/aarch64/target_attr_21.c: Same.\n\nlibgcc/\n\tPR target/105162\n\t* config/aarch64/lse.S: Define BARRIER and handle memory MODEL 5.\n\t* config/aarch64/t-lse: Add a 5th memory model for _sync functions.", "tree": {"sha": "05cf331e38bf5d28f7f948e909e8d9df3a528a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05cf331e38bf5d28f7f948e909e8d9df3a528a50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc25483c055d62f94f8c289f80843dda3c4a6ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc25483c055d62f94f8c289f80843dda3c4a6ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc25483c055d62f94f8c289f80843dda3c4a6ff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc25483c055d62f94f8c289f80843dda3c4a6ff4/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "010af1040bcf4870c8f1aac88a7b1538f622858b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010af1040bcf4870c8f1aac88a7b1538f622858b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010af1040bcf4870c8f1aac88a7b1538f622858b"}], "stats": {"total": 89, "additions": 75, "deletions": 14}, "files": [{"sha": "df311812e8d4b87c0ad8692adacedcd79a8e0f64", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -1065,7 +1065,7 @@ bool aarch64_high_bits_all_ones_p (HOST_WIDE_INT);\n \n struct atomic_ool_names\n {\n-    const char *str[5][4];\n+    const char *str[5][5];\n };\n \n rtx aarch64_atomic_ool_func(machine_mode mode, rtx model_rtx,"}, {"sha": "f4d2a800f39936a3afe670e171cdbfed43486a3f", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -22678,14 +22678,14 @@ aarch64_emit_unlikely_jump (rtx insn)\n   add_reg_br_prob_note (jump, profile_probability::very_unlikely ());\n }\n \n-/* We store the names of the various atomic helpers in a 5x4 array.\n+/* We store the names of the various atomic helpers in a 5x5 array.\n    Return the libcall function given MODE, MODEL and NAMES.  */\n \n rtx\n aarch64_atomic_ool_func(machine_mode mode, rtx model_rtx,\n \t\t\tconst atomic_ool_names *names)\n {\n-  memmodel model = memmodel_base (INTVAL (model_rtx));\n+  memmodel model = memmodel_from_int (INTVAL (model_rtx));\n   int mode_idx, model_idx;\n \n   switch (mode)\n@@ -22725,6 +22725,11 @@ aarch64_atomic_ool_func(machine_mode mode, rtx model_rtx,\n     case MEMMODEL_SEQ_CST:\n       model_idx = 3;\n       break;\n+    case MEMMODEL_SYNC_ACQUIRE:\n+    case MEMMODEL_SYNC_RELEASE:\n+    case MEMMODEL_SYNC_SEQ_CST:\n+      model_idx = 4;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -22737,7 +22742,8 @@ aarch64_atomic_ool_func(machine_mode mode, rtx model_rtx,\n   { \"__aarch64_\" #B #N \"_relax\", \\\n     \"__aarch64_\" #B #N \"_acq\", \\\n     \"__aarch64_\" #B #N \"_rel\", \\\n-    \"__aarch64_\" #B #N \"_acq_rel\" }\n+    \"__aarch64_\" #B #N \"_acq_rel\", \\\n+    \"__aarch64_\" #B #N \"_sync\" }\n \n #define DEF4(B)  DEF0(B, 1), DEF0(B, 2), DEF0(B, 4), DEF0(B, 8), \\\n \t\t { NULL, NULL, NULL, NULL }"}, {"sha": "372f4aa87469653f6b7cb09a4f064c5a14d6b727", "filename": "gcc/testsuite/gcc.target/aarch64/sync-comp-swap-ool.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-comp-swap-ool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-comp-swap-ool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-comp-swap-ool.c?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -fno-ipa-icf -moutline-atomics\" } */\n+\n+#include \"sync-comp-swap.x\"\n+\n+/* { dg-final { scan-assembler-times \"bl.*__aarch64_cas4_sync\" 1 } } */"}, {"sha": "95d9c56b5e1c70817b9207a94ce84d3cba528d59", "filename": "gcc/testsuite/gcc.target/aarch64/sync-op-acquire-ool.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-acquire-ool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-acquire-ool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-acquire-ool.c?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -moutline-atomics\" } */\n+\n+#include \"sync-op-acquire.x\"\n+\n+/* { dg-final { scan-assembler-times \"bl.*__aarch64_swp4_sync\" 1 } } */"}, {"sha": "2f3881d9755a2cf9b824919a1a850cc89a060823", "filename": "gcc/testsuite/gcc.target/aarch64/sync-op-full-ool.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-full-ool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-full-ool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-full-ool.c?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -moutline-atomics\" } */\n+\n+#include \"sync-op-full.x\"\n+\n+/* { dg-final { scan-assembler-times \"bl.*__aarch64_ldadd4_sync\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl.*__aarch64_ldclr4_sync\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl.*__aarch64_ldeor4_sync\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl.*__aarch64_ldset4_sync\" 1 } } */"}, {"sha": "c9454fc420b56fdd6f86126d97d5a184af1c5c63", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_20.c?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -24,4 +24,4 @@ bar (void)\n     }\n }\n \n-/* { dg-final { scan-assembler-not \"bl.*__aarch64_cas2_acq_rel\" } } */\n+/* { dg-final { scan-assembler-not \"bl.*__aarch64_cas2_sync\" } } */"}, {"sha": "b8e56223b02c410df25e63d70a2ea86e2f6da551", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_21.c?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -24,4 +24,4 @@ bar (void)\n     }\n }\n \n-/* { dg-final { scan-assembler-times \"bl.*__aarch64_cas2_acq_rel\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl.*__aarch64_cas2_sync\" 1 } } */"}, {"sha": "9c29cf08b59373198a2db3b9adb43639c10306f0", "filename": "libgcc/config/aarch64/lse.S", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/libgcc%2Fconfig%2Faarch64%2Flse.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/libgcc%2Fconfig%2Faarch64%2Flse.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flse.S?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -87,24 +87,44 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define L\n # define M     0x000000\n # define N     0x000000\n+# define BARRIER\n #elif MODEL == 2\n # define SUFF  _acq\n # define A     a\n # define L\n # define M     0x400000\n # define N     0x800000\n+# define BARRIER\n #elif MODEL == 3\n # define SUFF  _rel\n # define A\n # define L     l\n # define M     0x008000\n # define N     0x400000\n+# define BARRIER\n #elif MODEL == 4\n # define SUFF  _acq_rel\n # define A     a\n # define L     l\n # define M     0x408000\n # define N     0xc00000\n+# define BARRIER\n+#elif MODEL == 5\n+# define SUFF  _sync\n+#ifdef L_swp\n+/* swp has _acq semantics.  */\n+#  define A    a\n+#  define L\n+#  define M    0x400000\n+#  define N    0x800000\n+#else\n+/* All other _sync functions have _seq semantics.  */\n+#  define A    a\n+#  define L    l\n+#  define M    0x408000\n+#  define N    0xc00000\n+#endif\n+# define BARRIER dmb\t\tish\n #else\n # error\n #endif\n@@ -127,7 +147,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n #define NAME(BASE)\t\tglue4(__aarch64_, BASE, SIZE, SUFF)\n-#define LDXR\t\t\tglue4(ld, A, xr, S)\n+#if MODEL == 5\n+/* Drop A for _sync functions.  */\n+# define LDXR\t\t\tglue3(ld, xr, S)\n+#else\n+# define LDXR\t\t\tglue4(ld, A, xr, S)\n+#endif\n #define STXR\t\t\tglue4(st, L, xr, S)\n \n /* Temporary registers used.  Other than these, only the return value\n@@ -183,10 +208,16 @@ STARTFN\tNAME(cas)\n \tbne\t\t1f\n \tSTXR\t\tw(tmp1), s(1), [x2]\n \tcbnz\t\tw(tmp1), 0b\n-1:\tret\n+1:\tBARRIER\n+\tret\n \n #else\n-#define LDXP\tglue3(ld, A, xp)\n+#if MODEL == 5\n+/* Drop A for _sync functions.  */\n+# define LDXP\tglue2(ld, xp)\n+#else\n+# define LDXP\tglue3(ld, A, xp)\n+#endif\n #define STXP\tglue3(st, L, xp)\n #ifdef HAVE_AS_LSE\n # define CASP\tglue3(casp, A, L)\tx0, x1, x2, x3, [x4]\n@@ -205,7 +236,8 @@ STARTFN\tNAME(cas)\n \tbne\t\t1f\n \tSTXP\t\tw(tmp2), x2, x3, [x4]\n \tcbnz\t\tw(tmp2), 0b\n-1:\tret\n+1:\tBARRIER\n+\tret\n \n #endif\n \n@@ -229,6 +261,7 @@ STARTFN\tNAME(swp)\n 0:\tLDXR\t\ts(0), [x1]\n \tSTXR\t\tw(tmp1), s(tmp0), [x1]\n \tcbnz\t\tw(tmp1), 0b\n+\tBARRIER\n \tret\n \n ENDFN\tNAME(swp)\n@@ -273,6 +306,7 @@ STARTFN\tNAME(LDNM)\n \tOP\t\ts(tmp1), s(0), s(tmp0)\n \tSTXR\t\tw(tmp2), s(tmp1), [x1]\n \tcbnz\t\tw(tmp2), 0b\n+\tBARRIER\n \tret\n \n ENDFN\tNAME(LDNM)"}, {"sha": "624daf7eddf2d136e3d5f910d4999314c6bd78cf", "filename": "libgcc/config/aarch64/t-lse", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc25483c055d62f94f8c289f80843dda3c4a6ff4/libgcc%2Fconfig%2Faarch64%2Ft-lse", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc25483c055d62f94f8c289f80843dda3c4a6ff4/libgcc%2Fconfig%2Faarch64%2Ft-lse", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Ft-lse?ref=bc25483c055d62f94f8c289f80843dda3c4a6ff4", "patch": "@@ -18,13 +18,13 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Compare-and-swap has 5 sizes and 4 memory models.\n+# Compare-and-swap has 5 sizes and 5 memory models.\n S0 := $(foreach s, 1 2 4 8 16, $(addsuffix _$(s), cas))\n-O0 := $(foreach m, 1 2 3 4, $(addsuffix _$(m)$(objext), $(S0)))\n+O0 := $(foreach m, 1 2 3 4 5, $(addsuffix _$(m)$(objext), $(S0)))\n \n-# Swap, Load-and-operate have 4 sizes and 4 memory models\n+# Swap, Load-and-operate have 4 sizes and 5 memory models\n S1 := $(foreach s, 1 2 4 8, $(addsuffix _$(s), swp ldadd ldclr ldeor ldset))\n-O1 := $(foreach m, 1 2 3 4, $(addsuffix _$(m)$(objext), $(S1)))\n+O1 := $(foreach m, 1 2 3 4 5, $(addsuffix _$(m)$(objext), $(S1)))\n \n LSE_OBJS := $(O0) $(O1)\n "}]}