{"sha": "b9e6ebe97b85b537c46b36e25900ed086cd52e61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllNmViZTk3Yjg1YjUzN2M0NmIzNmUyNTkwMGVkMDg2Y2Q1MmU2MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-31T19:49:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-31T19:49:00Z"}, "message": "float-i128.h (FLT_EVAL_METHOD, [...]): Define.\n\n        * config/float-i128.h (FLT_EVAL_METHOD, DECIMAL_DIG): Define.\n        * config/float-i32.h: Likewise.\n        * config/float-i64.h: Likewise.\n        * config/float-sh.h: Likewise.\n        * config/float-sparc.h: Likewise.\n\nFrom-SVN: r39383", "tree": {"sha": "70cbe6f80adc1af1ea22f0cb187ac4ca4a1bf3c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70cbe6f80adc1af1ea22f0cb187ac4ca4a1bf3c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e6ebe97b85b537c46b36e25900ed086cd52e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e6ebe97b85b537c46b36e25900ed086cd52e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e6ebe97b85b537c46b36e25900ed086cd52e61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e6ebe97b85b537c46b36e25900ed086cd52e61/comments", "author": null, "committer": null, "parents": [{"sha": "dbac5d0dd5bfafbf33f78b85298b5a9d14888723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbac5d0dd5bfafbf33f78b85298b5a9d14888723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbac5d0dd5bfafbf33f78b85298b5a9d14888723"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "d0c5aaac1acfaf99bb63836e29d21de21522966b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9e6ebe97b85b537c46b36e25900ed086cd52e61", "patch": "@@ -1,3 +1,11 @@\n+2001-01-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/float-i128.h (FLT_EVAL_METHOD, DECIMAL_DIG): Define.\n+\t* config/float-i32.h: Likewise.\n+\t* config/float-i64.h: Likewise.\n+\t* config/float-sh.h: Likewise.\n+\t* config/float-sparc.h: Likewise.\n+\n 2001-01-31  DJ Delorie  <dj@redhat.com>\n \n \t* expmed.c (extract_bit_field): allow non-integral modes if we"}, {"sha": "f7ce3b34894164a6865bef513fcbc6b4221aeff2", "filename": "gcc/config/float-i128.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-i128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-i128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloat-i128.h?ref=b9e6ebe97b85b537c46b36e25900ed086cd52e61", "patch": "@@ -93,4 +93,31 @@\n #undef LDBL_MAX_10_EXP\n #define LDBL_MAX_10_EXP 4932\n \n+#if __STDC_VERSION__ >= 199901L\n+   /* The floating-point expression evaluation method.\n+        -1  indeterminate\n+         0  evaluate all operations and constants just to the range and\n+            precision of the type\n+         1  evaluate operations and constants of type float and double\n+            to the range and precision of the double type, evaluate\n+            long double operations and constants to the range and\n+            precision of the long double type\n+         2  evaluate all operations and constants to the range and\n+            precision of the long double type\n+   */\n+# undef FLT_EVAL_METHOD\n+# define FLT_EVAL_METHOD\t0\n+\n+   /* Number of decimal digits to enable rounding to the given number of\n+      decimal digits without loss of precision.\n+         if FLT_RADIX == 10^n:  #mantissa * log10 (FLT_RADIX)\n+         else                :  ceil (1 + #mantissa * log10 (FLT_RADIX))\n+      where #mantissa is the number of bits in the mantissa of the widest\n+      supported floating-point type.\n+   */\n+# undef DECIMAL_DIG\n+# define DECIMAL_DIG\t36\n+\n+#endif\t/* C99 */\n+\n #endif /*  _FLOAT_H_ */"}, {"sha": "27e3394a5fb5276c8b00e4c71a3d74d02b09883a", "filename": "gcc/config/float-i32.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-i32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-i32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloat-i32.h?ref=b9e6ebe97b85b537c46b36e25900ed086cd52e61", "patch": "@@ -93,4 +93,31 @@\n #undef LDBL_MAX_10_EXP\n #define LDBL_MAX_10_EXP 38\n \n+#if __STDC_VERSION__ >= 199901L\n+   /* The floating-point expression evaluation method.\n+        -1  indeterminate\n+         0  evaluate all operations and constants just to the range and\n+            precision of the type\n+         1  evaluate operations and constants of type float and double\n+            to the range and precision of the double type, evaluate\n+            long double operations and constants to the range and\n+            precision of the long double type\n+         2  evaluate all operations and constants to the range and\n+            precision of the long double type\n+   */\n+# undef FLT_EVAL_METHOD\n+# define FLT_EVAL_METHOD\t0\n+\n+   /* Number of decimal digits to enable rounding to the given number of\n+      decimal digits without loss of precision.\n+         if FLT_RADIX == 10^n:  #mantissa * log10 (FLT_RADIX)\n+         else                :  ceil (1 + #mantissa * log10 (FLT_RADIX))\n+      where #mantissa is the number of bits in the mantissa of the widest\n+      supported floating-point type.\n+   */\n+# undef DECIMAL_DIG\n+# define DECIMAL_DIG\t9\n+\n+#endif\t/* C99 */\n+\n #endif /*  _FLOAT_H_ */"}, {"sha": "b045fb35eef042e88a4db970be52fad5259a1f0b", "filename": "gcc/config/float-i64.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-i64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-i64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloat-i64.h?ref=b9e6ebe97b85b537c46b36e25900ed086cd52e61", "patch": "@@ -93,4 +93,31 @@\n #undef LDBL_MAX_10_EXP\n #define LDBL_MAX_10_EXP 308\n \n+#if __STDC_VERSION__ >= 199901L\n+   /* The floating-point expression evaluation method.\n+        -1  indeterminate\n+         0  evaluate all operations and constants just to the range and\n+            precision of the type\n+         1  evaluate operations and constants of type float and double\n+            to the range and precision of the double type, evaluate\n+            long double operations and constants to the range and\n+            precision of the long double type\n+         2  evaluate all operations and constants to the range and\n+            precision of the long double type\n+   */\n+# undef FLT_EVAL_METHOD\n+# define FLT_EVAL_METHOD\t0\n+\n+   /* Number of decimal digits to enable rounding to the given number of\n+      decimal digits without loss of precision.\n+         if FLT_RADIX == 10^n:  #mantissa * log10 (FLT_RADIX)\n+         else                :  ceil (1 + #mantissa * log10 (FLT_RADIX))\n+      where #mantissa is the number of bits in the mantissa of the widest\n+      supported floating-point type.\n+   */\n+# undef DECIMAL_DIG\n+# define DECIMAL_DIG\t17\n+\n+#endif\t/* C99 */\n+\n #endif /*  _FLOAT_H_ */"}, {"sha": "8294b66f3d054ca4f7c133f209ee9464f387f6ba", "filename": "gcc/config/float-m68k.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-m68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-m68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloat-m68k.h?ref=b9e6ebe97b85b537c46b36e25900ed086cd52e61", "patch": "@@ -94,4 +94,7 @@\n #undef LDBL_MAX_10_EXP\n #define LDBL_MAX_10_EXP 4932\n \n+/* ??? FLT_EVAL_METHOD depends on TARGET_68040_ONLY.  We do not currently\n+   have a preprocessor token that we can use to tell that this is on.  */\n+\n #endif /*  _FLOAT_H_ */"}, {"sha": "7c074ac53cd0a8e4c5c70ea0785ce18bbb1b2e52", "filename": "gcc/config/float-sh.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-sh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-sh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloat-sh.h?ref=b9e6ebe97b85b537c46b36e25900ed086cd52e61", "patch": "@@ -127,4 +127,31 @@\n #undef LDBL_MAX_10_EXP\n #define LDBL_MAX_10_EXP 308\n \n+#if __STDC_VERSION__ >= 199901L\n+   /* The floating-point expression evaluation method.\n+        -1  indeterminate\n+         0  evaluate all operations and constants just to the range and\n+            precision of the type\n+         1  evaluate operations and constants of type float and double\n+            to the range and precision of the double type, evaluate\n+            long double operations and constants to the range and\n+            precision of the long double type\n+         2  evaluate all operations and constants to the range and\n+            precision of the long double type\n+   */\n+# undef FLT_EVAL_METHOD\n+# define FLT_EVAL_METHOD\t0\n+\n+   /* Number of decimal digits to enable rounding to the given number of\n+      decimal digits without loss of precision.\n+         if FLT_RADIX == 10^n:  #mantissa * log10 (FLT_RADIX)\n+         else                :  ceil (1 + #mantissa * log10 (FLT_RADIX))\n+      where #mantissa is the number of bits in the mantissa of the widest\n+      supported floating-point type.\n+   */\n+# undef DECIMAL_DIG\n+# define DECIMAL_DIG\t17\n+\n+#endif\t/* C99 */\n+\n #endif /*  _FLOAT_H_ */"}, {"sha": "307528e07b3441ea637b6a972a86b16781655218", "filename": "gcc/config/float-sparc.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6ebe97b85b537c46b36e25900ed086cd52e61/gcc%2Fconfig%2Ffloat-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloat-sparc.h?ref=b9e6ebe97b85b537c46b36e25900ed086cd52e61", "patch": "@@ -119,4 +119,35 @@\n \n #endif /* sparc32 */\n \n+#if __STDC_VERSION__ >= 199901L\n+   /* The floating-point expression evaluation method.\n+        -1  indeterminate\n+         0  evaluate all operations and constants just to the range and\n+            precision of the type\n+         1  evaluate operations and constants of type float and double\n+            to the range and precision of the double type, evaluate\n+            long double operations and constants to the range and\n+            precision of the long double type\n+         2  evaluate all operations and constants to the range and\n+            precision of the long double type\n+   */\n+# undef FLT_EVAL_METHOD\n+# define FLT_EVAL_METHOD\t0\n+\n+   /* Number of decimal digits to enable rounding to the given number of\n+      decimal digits without loss of precision.\n+         if FLT_RADIX == 10^n:  #mantissa * log10 (FLT_RADIX)\n+         else                :  ceil (1 + #mantissa * log10 (FLT_RADIX))\n+      where #mantissa is the number of bits in the mantissa of the widest\n+      supported floating-point type.\n+   */\n+# undef DECIMAL_DIG\n+# if LDBL_MANT_DIG == 53\n+#  define DECIMAL_DIG\t17\n+# else\n+#  define DECIMAL_DIG\t36\n+# endif\n+\n+#endif\t/* C99 */\n+\n #endif /*  _FLOAT_H_ */"}]}