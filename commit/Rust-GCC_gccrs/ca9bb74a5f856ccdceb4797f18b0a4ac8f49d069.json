{"sha": "ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E5YmI3NGE1Zjg1NmNjZGNlYjQ3OTdmMThiMGE0YWM4ZjQ5ZDA2OQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-05-13T21:26:32Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-05-13T21:26:32Z"}, "message": "tree-sra: Avoid refreshing into const base decls (PR 100453)\n\nWhen SRA transforms an assignment where the RHS is an aggregate decl\nthat it creates replacements for, the (least efficient) fallback\nmethod of dealing with them is to store all the replacements back into\nthe original decl and then let the original assignment takes itc\nsourse.\n\nThat of course should not need to be done for TREE_READONLY bases\nwhich cannot change contents.  The SRA code handled this situation in\none of two necessary places but only for DECL_IN_CONSTANT_POOL const\ndecls, this patch modifies both to check TREE_READONLY.\n\ngcc/ChangeLog:\n\n2021-05-12  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/100453\n\t* tree-sra.c (sra_modify_assign): All const base accesses do not\n\tneed refreshing, not just those from decl_pool.\n\t(sra_modify_assign): Do not refresh into a const base decl.\n\ngcc/testsuite/ChangeLog:\n\n2021-05-12  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/100453\n\t* gcc.dg/tree-ssa/pr100453.c: New test.", "tree": {"sha": "b4f2915ca953d9e308274df905e08181d646ba1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4f2915ca953d9e308274df905e08181d646ba1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f6fc2826d19136bb5ab97a4bdac07e6736b6869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6fc2826d19136bb5ab97a4bdac07e6736b6869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6fc2826d19136bb5ab97a4bdac07e6736b6869"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "0cf0ad23815350f4be1eacc72432ff25bca8b82a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr100453.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100453.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100453.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100453.c?ref=ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+struct a {\n+  int b : 4;\n+} d;\n+static int c, e;\n+static const struct a f;\n+static void g(const struct a h) {\n+  for (; c < 1; c++)\n+    d = h;\n+  e = h.b;\n+  c = h.b;\n+}\n+int main() {\n+  g(f);\n+  return 0;\n+}"}, {"sha": "186cd62b47671ecb193772356d680762601e3eff", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "patch": "@@ -4244,7 +4244,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n       || stmt_ends_bb_p (stmt))\n     {\n       /* No need to copy into a constant-pool, it comes pre-initialized.  */\n-      if (access_has_children_p (racc) && !constant_decl_p (racc->base))\n+      if (access_has_children_p (racc) && !TREE_READONLY (racc->base))\n \tgenerate_subtree_copies (racc->first_child, rhs, racc->offset, 0, 0,\n \t\t\t\t gsi, false, false, loc);\n       if (access_has_children_p (lacc))\n@@ -4333,7 +4333,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t    }\n \t  /* Restore the aggregate RHS from its components so the\n \t     prevailing aggregate copy does the right thing.  */\n-\t  if (access_has_children_p (racc))\n+\t  if (access_has_children_p (racc) && !TREE_READONLY (racc->base))\n \t    generate_subtree_copies (racc->first_child, rhs, racc->offset, 0, 0,\n \t\t\t\t     gsi, false, false, loc);\n \t  /* Re-load the components of the aggregate copy destination."}]}