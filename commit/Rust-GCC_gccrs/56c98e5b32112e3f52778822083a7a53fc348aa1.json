{"sha": "56c98e5b32112e3f52778822083a7a53fc348aa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjOThlNWIzMjExMmUzZjUyNzc4ODIyMDgzYTdhNTNmYzM0OGFhMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-02-22T17:35:09Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-02-22T17:35:09Z"}, "message": "Support CLEANUP_POINT_EXPRs.\n\nFrom-SVN: r9034", "tree": {"sha": "cf8b725ea0343425837214ab8ee19a9138f35759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf8b725ea0343425837214ab8ee19a9138f35759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c98e5b32112e3f52778822083a7a53fc348aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c98e5b32112e3f52778822083a7a53fc348aa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c98e5b32112e3f52778822083a7a53fc348aa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c98e5b32112e3f52778822083a7a53fc348aa1/comments", "author": null, "committer": null, "parents": [{"sha": "a092957f9680754e1a4a6303f6e31029072e5915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a092957f9680754e1a4a6303f6e31029072e5915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a092957f9680754e1a4a6303f6e31029072e5915"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "a4323974c04f2bc1dd6d4de824e3a096e92435e5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c98e5b32112e3f52778822083a7a53fc348aa1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c98e5b32112e3f52778822083a7a53fc348aa1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=56c98e5b32112e3f52778822083a7a53fc348aa1", "patch": "@@ -4980,6 +4980,32 @@ fold (expr)\n \t\t\t\t\t  TREE_OPERAND (arg0, 1)))));\n       return t;\n \n+      /* Pull arithmetic ops out of the CLEANUP_POINT_EXPR where\n+         appropriate.  */\n+    case CLEANUP_POINT_EXPR:\n+      if (! TREE_SIDE_EFFECTS (arg0))\n+\treturn arg0;\n+\n+      {\n+\tenum tree_code code0 = TREE_CODE (arg0);\n+\tint kind0 = TREE_CODE_CLASS (code0);\n+\ttree arg00 = TREE_OPERAND (arg0, 0);\n+\ttree arg01;\n+\n+\tif (kind0 == '1')\n+\t  return fold (build1 (code0, type, \n+\t\t\t       fold (build1 (CLEANUP_POINT_EXPR,\n+\t\t\t\t\t     TREE_TYPE (arg00), arg00))));\n+\tif ((kind0 == '<' || kind0 == '2')\n+\t    && ! TREE_SIDE_EFFECTS (arg01 = TREE_OPERAND (arg0, 1)))\n+\t  return fold (build (code0, type,\n+\t\t\t      fold (build1 (CLEANUP_POINT_EXPR,\n+\t\t\t\t\t    TREE_TYPE (arg00), arg00)),\n+\t\t\t      arg01));\n+\n+\treturn t;\n+      }\n+\n     default:\n       return t;\n     } /* switch (code) */"}]}