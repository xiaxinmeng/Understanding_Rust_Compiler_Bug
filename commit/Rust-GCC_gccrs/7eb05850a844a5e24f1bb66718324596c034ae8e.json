{"sha": "7eb05850a844a5e24f1bb66718324596c034ae8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViMDU4NTBhODQ0YTVlMjRmMWJiNjY3MTgzMjQ1OTZjMDM0YWU4ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-15T05:02:17Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-15T05:02:17Z"}, "message": "alpha.c (alpha_extract_integer): Do not handle CONST_WIDE_INT and CONST_DOUBLE.\n\n\t* config/alpha/alpha.c (alpha_extract_integer): Do not handle\n\tCONST_WIDE_INT and CONST_DOUBLE.  Assert CONST_INT_P (x).\n\t(alpha_legitimate_constant_p) <case CONST_WIDE_INT>: Check high and\n\tlow part of the constant using alpha_emit_set_const_1.\n\t(alpha_expand_mov): Do not handle CONST_WIDE_INT and CONST_DOUBLE.\n\nFrom-SVN: r223210", "tree": {"sha": "40a98e8026243a0bd29d2a026c37154a3e237d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40a98e8026243a0bd29d2a026c37154a3e237d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eb05850a844a5e24f1bb66718324596c034ae8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb05850a844a5e24f1bb66718324596c034ae8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb05850a844a5e24f1bb66718324596c034ae8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb05850a844a5e24f1bb66718324596c034ae8e/comments", "author": null, "committer": null, "parents": [{"sha": "06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e7e3183b8869d45ed8719b449c0f7dd2573ab8"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "9b6e112255b1e01a35137cb5e651f92c8656b57a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb05850a844a5e24f1bb66718324596c034ae8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb05850a844a5e24f1bb66718324596c034ae8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7eb05850a844a5e24f1bb66718324596c034ae8e", "patch": "@@ -1,3 +1,11 @@\n+2015-05-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_extract_integer): Do not handle\n+\tCONST_WIDE_INT and CONST_DOUBLE.  Assert CONST_INT_P (x).\n+\t(alpha_legitimate_constant_p) <case CONST_WIDE_INT>: Check high and\n+\tlow part of the constant using alpha_emit_set_const_1.\n+\t(alpha_expand_mov): Do not handle CONST_WIDE_INT and CONST_DOUBLE.\n+\n 2015-05-14  Rohit Arul Raj  <rohitrulraj@freescale.com>\n \n \t* varasm.c (output_constant_pool_1): Pass down alignment from\n@@ -11,8 +19,7 @@\n \t* target.def (ira_change_pseudo_allocno_class): New hook.\n \t* targhooks.c (default_ira_change_pseudo_allocno_class): Default\n \tvalue of the hook.\n-\t* targhooks.h (default_ira_change_pseudo_allocno_class): New\n-\textern\n+\t* targhooks.h (default_ira_change_pseudo_allocno_class): New extern.\n \t* doc/tm.texi.in (TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS): Add the\n \thook.\n \t* ira-costs.c (find_costs_and_classes): Call the hook and change\n@@ -26,7 +33,7 @@\n \tof checking that it is not live after the sibcall.\n \t(sibcall_pop_memory): Ditto.\n \t(sibcall_value_memory): Ditto.\n-\t(sibcall_value_pop_memory): Ditto. \n+\t(sibcall_value_pop_memory): Ditto.\n \n 2015-05-14  Marc Glisse  <marc.glisse@inria.fr>\n "}, {"sha": "c52834df26afbdec5971fb6e414f70ec424d4457", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb05850a844a5e24f1bb66718324596c034ae8e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb05850a844a5e24f1bb66718324596c034ae8e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=7eb05850a844a5e24f1bb66718324596c034ae8e", "patch": "@@ -2105,26 +2105,17 @@ alpha_emit_set_long_const (rtx target, HOST_WIDE_INT c1)\n   return target;\n }\n \n-/* Given an integral CONST_INT, CONST_WIDE_INT, CONST_DOUBLE,\n-   or CONST_VECTOR, return the low 64 bits.  */\n+/* Given an integral CONST_INT or CONST_VECTOR, return the low 64 bits.  */\n \n static HOST_WIDE_INT\n alpha_extract_integer (rtx x)\n {\n   if (GET_CODE (x) == CONST_VECTOR)\n     x = simplify_subreg (DImode, x, GET_MODE (x), 0);\n \n-  switch (GET_CODE (x))\n-    {\n-    case CONST_INT:\n-      return INTVAL (x);\n-    case CONST_WIDE_INT:\n-      return CONST_WIDE_INT_ELT (x, 0);\n-    case CONST_DOUBLE:\n-      return CONST_DOUBLE_LOW (x);\n-    default:\n-      gcc_unreachable ();\n-    }\n+  gcc_assert (CONST_INT_P (x));\n+\n+  return INTVAL (x);\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P.  This is all constants for which\n@@ -2152,16 +2143,23 @@ alpha_legitimate_constant_p (machine_mode mode, rtx x)\n \n       if (GET_CODE (x) != SYMBOL_REF)\n \treturn true;\n-\n       /* FALLTHRU */\n \n     case SYMBOL_REF:\n       /* TLS symbols are never valid.  */\n       return SYMBOL_REF_TLS_MODEL (x) == 0;\n \n     case CONST_WIDE_INT:\n+      if (TARGET_BUILD_CONSTANTS)\n+\treturn true;\n       if (x == CONST0_RTX (mode))\n \treturn true;\n+      mode = DImode;\n+      gcc_assert (CONST_WIDE_INT_NUNITS (x) == 2);\n+      i0 = CONST_WIDE_INT_ELT (x, 1);\n+      if (alpha_emit_set_const_1 (NULL_RTX, mode, i0, 3, true) == NULL)\n+\treturn false;\n+      i0 = CONST_WIDE_INT_ELT (x, 0);\n       goto do_integer;\n \n     case CONST_DOUBLE:\n@@ -2176,14 +2174,14 @@ alpha_legitimate_constant_p (machine_mode mode, rtx x)\n \treturn false;\n       if (GET_MODE_SIZE (mode) != 8)\n \treturn false;\n-      goto do_integer;\n+      /* FALLTHRU */\n \n     case CONST_INT:\n-    do_integer:\n       if (TARGET_BUILD_CONSTANTS)\n \treturn true;\n       i0 = alpha_extract_integer (x);\n-      return alpha_emit_set_const_1 (x, mode, i0, 3, true) != NULL;\n+    do_integer:\n+      return alpha_emit_set_const_1 (NULL_RTX, mode, i0, 3, true) != NULL;\n \n     default:\n       return false;\n@@ -2248,8 +2246,6 @@ alpha_expand_mov (machine_mode mode, rtx *operands)\n \n   /* Split large integers.  */\n   if (CONST_INT_P (operands[1])\n-      || GET_CODE (operands[1]) == CONST_WIDE_INT\n-      || GET_CODE (operands[1]) == CONST_DOUBLE\n       || GET_CODE (operands[1]) == CONST_VECTOR)\n     {\n       if (alpha_split_const_mov (mode, operands))"}]}