{"sha": "3f1d32a5fd3475d1e75452cb5fefe712e043540c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxZDMyYTVmZDM0NzVkMWU3NTQ1MmNiNWZlZmU3MTJlMDQzNTQwYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-12-18T17:17:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-12-18T17:17:14Z"}, "message": "[PATCH] [PR rtl-optimization/49847] Fix ICE in CSE due to cc0-setter and cc0-user in different blocks\n\n\tPR rtl-optimization/49847\n\t* cse.c (record_jump_equiv): Handle fold_rtx returning NULL_RTX.\n\n\tPR rtl-optimization/49847\n\t* g++.dg/pr49847-2.C: New test.\n\nFrom-SVN: r231821", "tree": {"sha": "1f9cb33de6c2b56bbe4cfc7761ac15dc58e0038a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f9cb33de6c2b56bbe4cfc7761ac15dc58e0038a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f1d32a5fd3475d1e75452cb5fefe712e043540c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1d32a5fd3475d1e75452cb5fefe712e043540c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1d32a5fd3475d1e75452cb5fefe712e043540c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1d32a5fd3475d1e75452cb5fefe712e043540c/comments", "author": null, "committer": null, "parents": [{"sha": "a012998e615e7ff43642d4de100cf4e3c369212c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a012998e615e7ff43642d4de100cf4e3c369212c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a012998e615e7ff43642d4de100cf4e3c369212c"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "1caa0760db730ca7377c95e2ac907058bb90734d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f1d32a5fd3475d1e75452cb5fefe712e043540c", "patch": "@@ -1,3 +1,8 @@\n+2015-12-18  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/49847\n+\t* cse.c (record_jump_equiv): Handle fold_rtx returning NULL_RTX.\n+\n 2015-12-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.c (worker_bcast_name, worker_red_name): Delete."}, {"sha": "4232028f54ff04f43a4eefbba2cb997153a2606b", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3f1d32a5fd3475d1e75452cb5fefe712e043540c", "patch": "@@ -3874,6 +3874,13 @@ record_jump_equiv (rtx_insn *insn, bool taken)\n   op0 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 0), insn);\n   op1 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 1), insn);\n \n+  /* On a cc0 target the cc0-setter and cc0-user may end up in different\n+     blocks.  When that happens the tracking of the cc0-setter via\n+     PREV_INSN_CC0 is spoiled.  That means that fold_rtx may return\n+     NULL_RTX.  In those cases, there's nothing to record.  */\n+  if (op0 == NULL_RTX || op1 == NULL_RTX)\n+    return;\n+\n   code = find_comparison_args (code, &op0, &op1, &mode0, &mode1);\n   if (! cond_known_true)\n     {"}, {"sha": "57326d19ee9c385c88ee3e1d71a7d704c1a593aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f1d32a5fd3475d1e75452cb5fefe712e043540c", "patch": "@@ -1,3 +1,8 @@\n+2015-12-18  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/49847\n+\t* g++.dg/pr49847-2.C: New test.\n+\n 2015-12-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/vect/pr68305.c (dg-additional-options): Add -mavx2"}, {"sha": "14f1198fbe8204f8e18a963e798289f6b1f5f9e0", "filename": "gcc/testsuite/g++.dg/pr49847-2.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d32a5fd3475d1e75452cb5fefe712e043540c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847-2.C?ref=3f1d32a5fd3475d1e75452cb5fefe712e043540c", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile { target m68k-*-* } } */\n+/* { dg-options \"-O2 -mcpu=68060 -fnon-call-exceptions -fPIC -O2 -fpermissive\" } */\n+\n+extern \"C\" {\n+    typedef __java_int jint;\n+    typedef __java_float jfloat;\n+    namespace java   {\n+     namespace lang     {\n+       class Class;\n+       class Object;\n+       class Throwable;\n+   }\n+}\n+  }\n+  typedef class   java::lang::Class *   jclass;\n+  typedef   class   java::lang::Throwable *   jthrowable;\n+  typedef unsigned short _Jv_ushort __attribute__ ((__mode__ (__HI__)));\n+  extern   \"Java\" {\n+    struct _JvObjectPrefix   {\n+   };\n+  }\n+  class   java::lang::Object:   public   _JvObjectPrefix {\n+  };\n+   union _Jv_word {\n+    jint     i;\n+    jfloat     f;\n+  };\n+  class _Jv_MethodBase {\n+  };\n+   class _Jv_InterpMethod: public _Jv_MethodBase {\n+  private:_Jv_ushort max_stack;\n+    static void   run (_Jv_InterpMethod *);\n+  };\n+   class java::lang::Throwable: public::java::lang::Object {\n+  public:static::java::lang::Class     class$;\n+  };\n+   void _Jv_InterpMethod::run (_Jv_InterpMethod * meth) {\n+    _Jv_word stack[meth->max_stack];\n+    _Jv_word *sp = stack;\n+    try   {\n+     jfloat value2 = ((jfloat) (--sp)->f);\n+     jfloat value1 = ((jfloat) (--sp)->f);\n+     if (value1 > value2)       (sp++)->i = (1);\n+   }\n+    catch (java::lang::Throwable * ex)   {\n+   }\n+  }"}]}