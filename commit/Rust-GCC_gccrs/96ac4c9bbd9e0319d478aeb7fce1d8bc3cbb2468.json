{"sha": "96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhYzRjOWJiZDllMDMxOWQ0NzhhZWI3ZmNlMWQ4YmMzY2JiMjQ2OA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2007-10-26T21:36:25Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2007-10-26T21:36:25Z"}, "message": "avr.c (avr_OS_task_function_p): Add new function.\n\n\t* config/avr/avr.c (avr_OS_task_function_p): Add new function.\n\t(avr_regs_to_save): Handle functions with 'OS_task' attribute.\n\t(avr_simple_epilogue, expand_prologue, avr_asm_function_end_prologue,\n\texpand_epilogue, output_movhi): Don't handle 'main' function.\n\t(avr_attribute_table): Add 'OS_task' function attribute.\n\t* config/avr/avr.h (machine_function): Remove 'is_main' field, add\n\t'is_OS_task' field.\n\t* config/avr/avr.md (return_from_main_epilogue): Remove insn.\n\t(return_from_epilogue, return_from_interrupt_epilogue): Don't handle\n\t'main' function.\n\t* config/avr/avr.opt (minit-stack): Remove.\n\nFrom-SVN: r129662", "tree": {"sha": "d97d1d8998b8266fa3e10fc6f34bf606be6a396a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d97d1d8998b8266fa3e10fc6f34bf606be6a396a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/comments", "author": null, "committer": null, "parents": [{"sha": "bc4c8d897fcab7db06848835e6ba74e7a8aeee39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc4c8d897fcab7db06848835e6ba74e7a8aeee39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc4c8d897fcab7db06848835e6ba74e7a8aeee39"}], "stats": {"total": 93, "additions": 40, "deletions": 53}, "files": [{"sha": "7908347db67639dbe2eb9cd317514e3ab19aa013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "patch": "@@ -1,3 +1,17 @@\n+2007-10-26  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.c (avr_OS_task_function_p): Add new function.\n+\t(avr_regs_to_save): Handle functions with 'OS_task' attribute.\n+\t(avr_simple_epilogue, expand_prologue, avr_asm_function_end_prologue,\n+\texpand_epilogue, output_movhi): Don't handle 'main' function.\n+\t(avr_attribute_table): Add 'OS_task' function attribute.\n+\t* config/avr/avr.h (machine_function): Remove 'is_main' field, add\n+\t'is_OS_task' field.\n+\t* config/avr/avr.md (return_from_main_epilogue): Remove insn.\n+\t(return_from_epilogue, return_from_interrupt_epilogue): Don't handle\n+\t'main' function.\n+\t* config/avr/avr.opt (minit-stack): Remove.\n+\n 2007-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-nested.c (get_trampoline_type): Fix thinko."}, {"sha": "46a71e0885d22a8b0f26d55288e547a2c5c39c92", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "patch": "@@ -51,6 +51,7 @@\n static int avr_naked_function_p (tree);\n static int interrupt_function_p (tree);\n static int signal_function_p (tree);\n+static int avr_OS_task_function_p (tree);\n static int avr_regs_to_save (HARD_REG_SET *);\n static int sequent_regs_live (void);\n static const char *ptrreg_to_str (int);\n@@ -434,6 +435,19 @@ signal_function_p (tree func)\n   return a != NULL_TREE;\n }\n \n+/* Return nonzero if FUNC is a OS_task function.  */\n+\n+static int\n+avr_OS_task_function_p (tree func)\n+{\n+  tree a;\n+\n+  gcc_assert (TREE_CODE (func) == FUNCTION_DECL);\n+  \n+  a = lookup_attribute (\"OS_task\", TYPE_ATTRIBUTES (TREE_TYPE (func)));\n+  return a != NULL_TREE;\n+}\n+\n /* Return the number of hard registers to push/pop in the prologue/epilogue\n    of the current function, and optionally store these registers in SET.  */\n \n@@ -449,8 +463,10 @@ avr_regs_to_save (HARD_REG_SET *set)\n     CLEAR_HARD_REG_SET (*set);\n   count = 0;\n \n-  /* No need to save any registers if the function never returns.  */\n-  if (TREE_THIS_VOLATILE (current_function_decl))\n+  /* No need to save any registers if the function never returns or \n+     is have \"OS_task\" attribute.  */\n+  if (TREE_THIS_VOLATILE (current_function_decl)\n+      || cfun->machine->is_OS_task)\n     return 0;\n \n   for (reg = 0; reg < 32; reg++)\n@@ -501,7 +517,6 @@ avr_simple_epilogue (void)\n \t  && ! interrupt_function_p (current_function_decl)\n \t  && ! signal_function_p (current_function_decl)\n \t  && ! avr_naked_function_p (current_function_decl)\n-\t  && ! MAIN_NAME_P (DECL_NAME (current_function_decl))\n \t  && ! TREE_THIS_VOLATILE (current_function_decl));\n }\n \n@@ -572,10 +587,10 @@ expand_prologue (void)\n   last_insn_address = 0;\n   \n   /* Init cfun->machine.  */\n-  cfun->machine->is_main = MAIN_NAME_P (DECL_NAME (current_function_decl));\n   cfun->machine->is_naked = avr_naked_function_p (current_function_decl);\n   cfun->machine->is_interrupt = interrupt_function_p (current_function_decl);\n   cfun->machine->is_signal = signal_function_p (current_function_decl);\n+  cfun->machine->is_OS_task = avr_OS_task_function_p (current_function_decl);\n   \n   /* Prologue: naked.  */\n   if (cfun->machine->is_naked)\n@@ -619,18 +634,7 @@ expand_prologue (void)\n       /* Prevent any attempt to delete the setting of ZERO_REG!  */\n       emit_insn (gen_rtx_USE (VOIDmode, zero_reg_rtx));\n     }\n-  if (cfun->machine->is_main)\n-    {\n-      char buffer[40];\n-      sprintf (buffer, \"%s - %d\", avr_init_stack, (int) size);\n-      rtx sym = gen_rtx_SYMBOL_REF (HImode, ggc_strdup (buffer));\n-      /* Initialize stack pointer using frame pointer.  */\n-      insn = emit_move_insn (frame_pointer_rtx, sym);\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-      insn = emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-    }\n-  else if (minimize && (frame_pointer_needed || live_seq > 6)) \n+  if (minimize && (frame_pointer_needed || live_seq > 6)) \n     {\n       insn = emit_move_insn (gen_rtx_REG (HImode, REG_X), \n                              gen_int_mode (size, HImode));\n@@ -763,10 +767,6 @@ avr_asm_function_end_prologue (FILE *file)\n         {\n           fputs (\"/* prologue: Signal */\\n\", file);\n         }\n-      else if (cfun->machine->is_main)\n-        {\n-          fputs (\"/* prologue: main */\\n\", file);\n-        }\n       else\n         fputs (\"/* prologue: function */\\n\", file);\n     }\n@@ -809,13 +809,7 @@ expand_epilogue (void)\n \t      && !(cfun->machine->is_interrupt || cfun->machine->is_signal)\n \t      && live_seq);\n   \n-  if (cfun->machine->is_main)\n-    {\n-      /* Return value from main() is already in the correct registers\n-         (r25:r24) as the exit() argument.  */\n-      emit_jump_insn (gen_return ());\n-    }\n-  else if (minimize && (frame_pointer_needed || live_seq > 4))\n+  if (minimize && (frame_pointer_needed || live_seq > 4))\n     {\n       if (frame_pointer_needed)\n \t{\n@@ -1636,9 +1630,6 @@ output_movhi (rtx insn, rtx operands[], int *l)\n               /*  Use simple load of stack pointer if no interrupts are used\n               or inside main or signal function prologue where they disabled.  */\n \t      else if (TARGET_NO_INTERRUPTS \n-                        || (reload_completed \n-                            && cfun->machine->is_main \n-                            && prologue_epilogue_contains (insn))\n                         || (reload_completed \n                             && cfun->machine->is_signal \n                             && prologue_epilogue_contains (insn)))\n@@ -4566,6 +4557,7 @@ const struct attribute_spec avr_attribute_table[] =\n   { \"signal\",    0, 0, true,  false, false,  avr_handle_fndecl_attribute },\n   { \"interrupt\", 0, 0, true,  false, false,  avr_handle_fndecl_attribute },\n   { \"naked\",     0, 0, false, true,  true,   avr_handle_fntype_attribute },\n+  { \"OS_task\",   0, 0, false, true,  true,   avr_handle_fntype_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n "}, {"sha": "5d2e30e19a3d1ab76b151cb90a2e8e55bfe940bd", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "patch": "@@ -956,9 +956,6 @@ mmcu=*:-mmcu=%*}\"\n    This is added to the cfun structure.  */\n struct machine_function GTY(())\n {\n-  /* 'true' - if current function is a 'main' function.  */\n-  int is_main;\n-\n   /* 'true' - if current function is a naked function.  */\n   int is_naked;\n \n@@ -969,4 +966,8 @@ struct machine_function GTY(())\n   /* 'true' - if current function is a signal function \n      as specified by the \"signal\" attribute.  */\n   int is_signal;\n+  \n+  /* 'true' - if current function is a signal function \n+     as specified by the \"OS_task\" attribute.  */\n+  int is_OS_task;\n };"}, {"sha": "f9c250039ca07c606dfd3b7e118431dbf7755813", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "patch": "@@ -2809,32 +2809,16 @@\n   [(return)]\n   \"(reload_completed \n     && cfun->machine \n-    && !cfun->machine->is_main\n     && !(cfun->machine->is_interrupt || cfun->machine->is_signal)\n     && !cfun->machine->is_naked)\"\n   \"ret\"\n   [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"return_from_main_epilogue\"\n-  [(return)]\n-  \"(reload_completed \n-    && cfun->machine \n-    && cfun->machine->is_main\n-    && !cfun->machine->is_naked)\"\n-  \"%~jmp exit\"\n-  [(set_attr_alternative \"length\"\n-\t\t\t [(if_then_else (eq_attr \"mcu_mega\" \"yes\")\n-\t\t\t\t\t(const_int 2)\n-\t\t\t\t\t(const_int 1))])\n-  (set_attr \"cc\" \"none\")\n-  ])\n-  \n (define_insn \"return_from_interrupt_epilogue\"\n   [(return)]\n   \"(reload_completed \n     && cfun->machine \n-    && !cfun->machine->is_main\n     && (cfun->machine->is_interrupt || cfun->machine->is_signal)\n     && !cfun->machine->is_naked)\"\n   \"reti\""}, {"sha": "56d7db99f965643024cd3f590014037f3f522f0f", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=96ac4c9bbd9e0319d478aeb7fce1d8bc3cbb2468", "patch": "@@ -29,10 +29,6 @@ Target RejectNegative Joined Var(avr_mcu_name) Init(\"avr2\")\n mdeb\n Target Report Undocumented Mask(ALL_DEBUG)\n \n-minit-stack=\n-Target RejectNegative Joined Var(avr_init_stack) Init(\"__stack\")\n--minit-stack=STACK\tUse STACK as the initial value of the stack pointer\n-\n mint8\n Target Report Mask(INT8)\n Use an 8-bit 'int' type"}]}