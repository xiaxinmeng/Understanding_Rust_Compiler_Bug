{"sha": "d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2ZmEyMDhhNWRmZGQ0ZjFlYTZkNmFhM2IyNGY5ODdhNTdiMGRjMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2015-08-13T22:56:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-13T22:56:01Z"}, "message": "dwarf.c (read_function_entry): Add vec_inlined parameter.\n\n\t* dwarf.c (read_function_entry): Add vec_inlined parameter.\n\tChange all callers.\n\nFrom-SVN: r226878", "tree": {"sha": "5f43e2954137771fce35952120b3ac5f9e0a38e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f43e2954137771fce35952120b3ac5f9e0a38e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2/comments", "author": null, "committer": null, "parents": [{"sha": "cfbbe6decffa0a18e7528f2b39b3ea4804a8a6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbbe6decffa0a18e7528f2b39b3ea4804a8a6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbbe6decffa0a18e7528f2b39b3ea4804a8a6a3"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "5862906907eaac4e7cf71262464e36194503c804", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2", "patch": "@@ -1,3 +1,8 @@\n+2015-08-13  Ian Lance Taylor  <iant@google.com>\n+\n+\t* dwarf.c (read_function_entry): Add vec_inlined parameter.\n+\tChange all callers.\n+\n 2015-06-11  Martin Sebor  <msebor@redhat.com>\n \n \tPR sanitizer/65479"}, {"sha": "54e5ace9b4a68cc557fcc96dce7477ea01af4a62", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=d96fa208a5dfdd4f1ea6d6aa3b24f987a57b0dc2", "patch": "@@ -2250,14 +2250,16 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t     struct unit *u, uint64_t base, struct dwarf_buf *unit_buf,\n \t\t     const struct line_header *lhdr,\n \t\t     backtrace_error_callback error_callback, void *data,\n-\t\t     struct function_vector *vec)\n+\t\t     struct function_vector *vec_function,\n+\t\t     struct function_vector *vec_inlined)\n {\n   while (unit_buf->left > 0)\n     {\n       uint64_t code;\n       const struct abbrev *abbrev;\n       int is_function;\n       struct function *function;\n+      struct function_vector *vec;\n       size_t i;\n       uint64_t lowpc;\n       int have_lowpc;\n@@ -2279,6 +2281,11 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t     || abbrev->tag == DW_TAG_entry_point\n \t\t     || abbrev->tag == DW_TAG_inlined_subroutine);\n \n+      if (abbrev->tag == DW_TAG_inlined_subroutine)\n+\tvec = vec_inlined;\n+      else\n+\tvec = vec_function;\n+\n       function = NULL;\n       if (is_function)\n \t{\n@@ -2458,7 +2465,8 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t  if (!is_function)\n \t    {\n \t      if (!read_function_entry (state, ddata, u, base, unit_buf, lhdr,\n-\t\t\t\t\terror_callback, data, vec))\n+\t\t\t\t\terror_callback, data, vec_function,\n+\t\t\t\t\tvec_inlined))\n \t\treturn 0;\n \t    }\n \t  else\n@@ -2471,7 +2479,8 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t      memset (&fvec, 0, sizeof fvec);\n \n \t      if (!read_function_entry (state, ddata, u, base, unit_buf, lhdr,\n-\t\t\t\t\terror_callback, data, &fvec))\n+\t\t\t\t\terror_callback, data, vec_function,\n+\t\t\t\t\t&fvec))\n \t\treturn 0;\n \n \t      if (fvec.count > 0)\n@@ -2535,7 +2544,7 @@ read_function_info (struct backtrace_state *state, struct dwarf_data *ddata,\n   while (unit_buf.left > 0)\n     {\n       if (!read_function_entry (state, ddata, u, 0, &unit_buf, lhdr,\n-\t\t\t\terror_callback, data, pfvec))\n+\t\t\t\terror_callback, data, pfvec, pfvec))\n \treturn;\n     }\n "}]}