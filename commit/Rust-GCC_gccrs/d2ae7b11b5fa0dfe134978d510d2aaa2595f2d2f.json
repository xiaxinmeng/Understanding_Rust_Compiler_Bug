{"sha": "d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhZTdiMTFiNWZhMGRmZTEzNDk3OGQ1MTBkMmFhYTI1OTVmMmQyZg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-11-21T12:27:02Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-11-21T12:27:02Z"}, "message": "Implement __gnu_cxx::hypergeometric_distribution.\n\n2013-11-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement __gnu_cxx::hypergeometric_distribution.\n\t* include/ext/random: Add hypergeometric_distribution.\n\t* include/ext/random.tcc: Add hypergeometric_distribution.\n\t* testsuite/util/testsuite_random.h (hypergeometric_pdf): New pdf\n\tfor the hypergeometric discreet distribution;\n\t(lbincoef): New supporting function for binomial coefficients.\n\t* testsuite/ext/random/hypergeometric_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/ext/random/hypergeometric_distribution/operators/\n\tequal.cc: New.\n\t* testsuite/ext/random/hypergeometric_distribution/operators/\n\tinequal.cc: New.\n\t* testsuite/ext/random/hypergeometric_distribution/operators/\n\tvalues.cc: New.\n\t* testsuite/ext/random/hypergeometric_distribution/cons/parms.cc: New.\n\t* testsuite/ext/random/hypergeometric_distribution/cons/default.cc: New.\n\t* testsuite/ext/random/hypergeometric_distribution/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/ext/random/hypergeometric_distribution/requirements/\n\ttypedefs.cc: New.\n\nFrom-SVN: r205212", "tree": {"sha": "87279389735f7bac55d97f4929c8b474962aa641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87279389735f7bac55d97f4929c8b474962aa641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca1babb8e83558039ea2372b7acca5e5e524c06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1babb8e83558039ea2372b7acca5e5e524c06c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1babb8e83558039ea2372b7acca5e5e524c06c"}], "stats": {"total": 763, "additions": 762, "deletions": 1}, "files": [{"sha": "16a06fb12ecf8798889cefc843219d2dd11b6b28", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -1,3 +1,26 @@\n+2013-11-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement __gnu_cxx::hypergeometric_distribution.\n+\t* include/ext/random: Add hypergeometric_distribution.\n+\t* include/ext/random.tcc: Add hypergeometric_distribution.\n+\t* testsuite/util/testsuite_random.h (hypergeometric_pdf): New pdf\n+\tfor the hypergeometric discreet distribution;\n+\t(lbincoef): New supporting function for binomial coefficients.\n+\t* testsuite/ext/random/hypergeometric_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/ext/random/hypergeometric_distribution/operators/\n+\tequal.cc: New.\n+\t* testsuite/ext/random/hypergeometric_distribution/operators/\n+\tinequal.cc: New.\n+\t* testsuite/ext/random/hypergeometric_distribution/operators/\n+\tvalues.cc: New.\n+\t* testsuite/ext/random/hypergeometric_distribution/cons/parms.cc: New.\n+\t* testsuite/ext/random/hypergeometric_distribution/cons/default.cc: New.\n+\t* testsuite/ext/random/hypergeometric_distribution/requirements/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/ext/random/hypergeometric_distribution/requirements/\n+\ttypedefs.cc: New.\n+\n 2013-11-20  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR c++/59173"}, {"sha": "c82430e074680d0584ec28e95e2bd6c515050d5d", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -2845,6 +2845,267 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const __gnu_cxx::von_mises_distribution<_RealType>& __d2)\n    { return !(__d1 == __d2); }\n \n+\n+  /**\n+   * @brief A discrete hypergeometric random number distribution.\n+   *\n+   * The hypergeometric distribution is a discrete probability distribution\n+   * that describes the probability of @p k successes in @p n draws @a without\n+   * replacement from a finite population of size @p N containing exactly @p K\n+   * successes.\n+   *\n+   * The formula for the hypergeometric probability density function is\n+   * @f[\n+   *   p(k|N,K,n) = \\frac{\\binom{K}{k} \\binom{N-K}{n-k}}{\\binom{N}{n}}\n+   * @f]\n+   * where @f$N@f$ is the total population of the distribution,\n+   * @f$K@f$ is the total population of the distribution.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$ n\\frac{K}{N} @f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$ n\\frac{K}{N}\\frac{N-K}{N}\\frac{N-n}{N-1}\n+   *   @f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[max(0, n+K-N), min(K, n)]@f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _UIntType = unsigned int>\n+    class hypergeometric_distribution\n+    {\n+      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n+\t\t    \"substituting _UIntType not an unsigned integral type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _UIntType  result_type;\n+\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef hypergeometric_distribution<_UIntType> distribution_type;\n+\tfriend class hypergeometric_distribution<_UIntType>;\n+\n+\texplicit\n+\tparam_type(result_type __N = 10, result_type __K = 5,\n+\t\t   result_type __n = 1)\n+\t: _M_N{__N}, _M_K{__K}, _M_n{__n}\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_N >= _M_K);\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_N >= _M_n);\n+\t}\n+\n+\tresult_type\n+\ttotal_size() const\n+\t{ return _M_N; }\n+\n+\tresult_type\n+\tsuccessful_size() const\n+\t{ return _M_K; }\n+\n+\tresult_type\n+\tunsuccessful_size() const\n+\t{ return _M_N - _M_K; }\n+\n+\tresult_type\n+\ttotal_draws() const\n+\t{ return _M_n; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return (__p1._M_N == __p2._M_N)\n+\t      && (__p1._M_K == __p2._M_K)\n+\t      && (__p1._M_n == __p2._M_n); }\n+\n+      private:\n+\n+\tresult_type _M_N;\n+\tresult_type _M_K;\n+\tresult_type _M_n;\n+      };\n+\n+      // constructors and member function\n+      explicit\n+      hypergeometric_distribution(result_type __N = 10, result_type __K = 5,\n+\t\t\t\t  result_type __n = 1)\n+      : _M_param{__N, __K, __n}\n+      { }\n+\n+      explicit\n+      hypergeometric_distribution(const param_type& __p)\n+      : _M_param{__p}\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { }\n+\n+      /**\n+       * @brief Returns the distribution parameter @p N,\n+       *\tthe total number of items.\n+       */\n+      result_type\n+      total_size() const\n+      { return this->_M_param.total_size(); }\n+\n+      /**\n+       * @brief Returns the distribution parameter @p K,\n+       *\tthe total number of successful items.\n+       */\n+      result_type\n+      successful_size() const\n+      { return this->_M_param.successful_size(); }\n+\n+      /**\n+       * @brief Returns the total number of unsuccessful items @f$ N - K @f$.\n+       */\n+      result_type\n+      unsuccessful_size() const\n+      { return this->_M_param.unsuccessful_size(); }\n+\n+      /**\n+       * @brief Returns the distribution parameter @p n,\n+       *\tthe total number of draws.\n+       */\n+      result_type\n+      total_draws() const\n+      { return this->_M_param.total_draws(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return this->_M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { this->_M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      {\n+\tusing _IntType = typename std::make_signed<result_type>::type;\n+\treturn static_cast<result_type>(std::max(static_cast<_IntType>(0),\n+\t\t  \t\tstatic_cast<_IntType>(this->total_draws()\n+\t\t\t\t\t\t- this->unsuccessful_size())));\n+      }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return std::min(this->successful_size(), this->total_draws()); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, this->_M_param); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->_M_param); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+       /**\n+\t* @brief Return true if two hypergeometric distributions have the same\n+\t*        parameters and the sequences that would be generated\n+\t*        are equal.\n+\t*/\n+      friend bool\n+      operator==(const hypergeometric_distribution& __d1,\n+\t\t const hypergeometric_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n+      /**\n+       * @brief Inserts a %hypergeometric_distribution random number\n+       * distribution @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %hypergeometric_distribution random number\n+       *             distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _UIntType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const __gnu_cxx::hypergeometric_distribution<_UIntType1>&\n+                   __x);\n+\n+      /**\n+       * @brief Extracts a %hypergeometric_distribution random number\n+       * distribution @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %hypergeometric_distribution random number generator\n+       *             distribution.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error\n+       *          state.\n+       */\n+      template<typename _UIntType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::hypergeometric_distribution<_UIntType1>& __x);\n+\n+    private:\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+    };\n+\n+  /**\n+   * @brief Return true if two hypergeometric distributions are different.\n+   */\n+  template<typename _UIntType>\n+    inline bool\n+    operator!=(const __gnu_cxx::hypergeometric_distribution<_UIntType>& __d1,\n+\t       const __gnu_cxx::hypergeometric_distribution<_UIntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "7d68958c0933eb75f313973bede28a488f5f1a9c", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 107, "deletions": 1, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -32,7 +32,6 @@\n \n #pragma GCC system_header\n \n-\n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -1307,6 +1306,113 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<typename _UIntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename hypergeometric_distribution<_UIntType>::result_type\n+      hypergeometric_distribution<_UIntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tresult_type __a = __param.successful_size();\n+\tresult_type __b = __param.total_size();\n+\tresult_type __k = 0;\n+\n+\tif (__param.total_draws() < __param.total_size() / 2) \n+\t  {\n+\t    for (result_type __i = 0; __i < __param.total_draws(); ++__i)\n+\t      {\n+\t\tif (__b * __aurng() < __a)\n+\t\t  {\n+\t\t    ++__k;\n+\t\t    if (__k == __param.successful_size())\n+\t\t      return __k;\n+\t\t   --__a;\n+\t\t  }\n+\t\t--__b;\n+\t      }\n+\t    return __k;\n+\t  }\n+\telse\n+\t  {\n+\t    for (result_type __i = 0; __i < __param.unsuccessful_size(); ++__i)\n+\t      {\n+\t\tif (__b * __aurng() < __a)\n+\t\t  {\n+\t\t    ++__k;\n+\t\t    if (__k == __param.successful_size())\n+\t\t      return __param.successful_size() - __k;\n+\t\t    --__a;\n+\t\t  }\n+\t\t--__b;\n+\t      }\n+\t    return __param.successful_size() - __k;\n+\t  }\n+      }\n+\n+  template<typename _UIntType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      hypergeometric_distribution<_UIntType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng);\n+      }\n+\n+  template<typename _UIntType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::hypergeometric_distribution<_UIntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_UIntType>::max_digits10);\n+\n+      __os << __x.total_size() << __space << __x.successful_size() << __space\n+\t   << __x.total_draws();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _UIntType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::hypergeometric_distribution<_UIntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _UIntType __total_size, __successful_size, __total_draws;\n+      __is >> __total_size >> __successful_size >> __total_draws;\n+      __x.param(typename __gnu_cxx::hypergeometric_distribution<_UIntType>::\n+\t\tparam_type(__total_size, __successful_size, __total_draws));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "34978075d71afd7ad6b8df618c78659af5da64f8", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/cons/default.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fdefault.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2013-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template hypergeometric_distribution [rand.dist.ext.hypergeometric]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::hypergeometric_distribution<> u;\n+  VERIFY( u.total_size() == 10 );\n+  VERIFY( u.successful_size() == 5 );\n+  VERIFY( u.total_draws() == 1 );\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "09aec0f1451292903e26b06dc0dda2a7b32b13d8", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/cons/parms.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fparms.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2013-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template hypergeometric_distribution [rand.dist.ext.hypergeometric]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::hypergeometric_distribution<> u(15, 3, 2);\n+  VERIFY( u.total_size() == 15 );\n+  VERIFY( u.successful_size() == 3 );\n+  VERIFY( u.total_draws() == 2 );\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == 2 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1887457a7277eb0702123e1e80e68ace7c18bcff", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fequal.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2013-11-18  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template rice_distribution [rand.dist.ext.hypergeometric]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::hypergeometric_distribution<unsigned int> u(20, 3, 2), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4b56f4dc817449e5e99fe976c9da058a224b0b00", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/operators/inequal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Finequal.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2013-11-18  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template rice_distribution [rand.dist.ext.hypergeometric]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::hypergeometric_distribution<unsigned int> u(20, 3, 5), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "583993a951cbf3ac606266ccbe9525ddcd5e0fbc", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/operators/serialize.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fserialize.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2013-11-18  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template hypergeometric_distribution [rand.dist.ext.hypergeometric]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::hypergeometric_distribution<unsigned int> u(15, 3, 6), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "78c0475c935ea2e76196b47b51197154311639d0", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/operators/values.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Foperators%2Fvalues.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2013-11-18  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template hypergeometric_distribution [rand.dist.ext.hypergeometric]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_random.h>\n+\n+void\n+test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  __gnu_cxx::hypergeometric_distribution hd1{15, 3, 2};\n+  auto bhd1 = std::bind(hd1, eng);\n+  testDiscreteDist(bhd1, [](int k)\n+\t\t   { return hypergeometric_pdf(k, 15, 3, 2); });\n+\n+  __gnu_cxx::hypergeometric_distribution hd2{500, 50, 30};\n+  auto bhd2 = std::bind(hd2, eng);\n+  testDiscreteDist(bhd2, [](int k)\n+\t\t   { return hypergeometric_pdf(k, 500, 50, 30); });\n+\n+  __gnu_cxx::hypergeometric_distribution hd3{100, 20, 5};\n+  auto bhd3 = std::bind(hd3, eng);\n+  testDiscreteDist(bhd3, [](int k)\n+\t\t   { return hypergeometric_pdf(k, 100, 20, 5); });\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "016adb0837f80669176f961e872b65ec82e69811", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::hypergeometric_distribution<unsigned short>;\n+template class __gnu_cxx::hypergeometric_distribution<unsigned int>;\n+template class __gnu_cxx::hypergeometric_distribution<unsigned long>;\n+template class __gnu_cxx::hypergeometric_distribution<unsigned long long>;"}, {"sha": "779aad784e65a1fed5ba0d1c8ceac3b2f5140495", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Frequirements%2Ftypedefs.cc?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2013-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template hypergeometric_distribution [rand.dist.ext.hypergeometric]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::hypergeometric_distribution<unsigned int> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}, {"sha": "84b6bc3ea3662d466994413961ca858783396476", "filename": "libstdc++-v3/testsuite/util/testsuite_random.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h?ref=d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "patch": "@@ -176,6 +176,25 @@ namespace __gnu_test\n       return 1.0 / (b - a + 1.0);\n   }\n \n+#ifdef _GLIBCXX_USE_C99_MATH_TR1\n+  inline double\n+  lbincoef(int n, int k)\n+  {\n+    return std::lgamma(double(1 + n))\n+         - std::lgamma(double(1 + k))\n+         - std::lgamma(double(1 + n - k));\n+  }\n+\n+  inline double\n+  hypergeometric_pdf(int k, int N, int K, int n)\n+  {\n+    if (k < 0 || k < std::max(0, n - (N - K)) || k > std::min(K, n))\n+      return 0.0;\n+    else\n+      return lbincoef(K, k) + lbincoef(N - K, n - k) - lbincoef(N, n);\n+  }\n+#endif\n+\n } // namespace __gnu_test\n \n #endif // #ifndef _GLIBCXX_TESTSUITE_RANDOM_H"}]}