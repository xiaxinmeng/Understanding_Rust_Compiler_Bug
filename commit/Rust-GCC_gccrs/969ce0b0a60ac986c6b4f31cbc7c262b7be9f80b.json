{"sha": "969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5Y2UwYjBhNjBhYzk4NmM2YjRmMzFjYmM3YzI2MmI3YmU5ZjgwYg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-12-10T18:36:18Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-12-10T18:36:18Z"}, "message": "re PR target/64180 (PowerPC carry bit improvements)\n\n\tPR target/64180\n\t* config/rs6000/predicates.md (adde_operand): New.\n\t* config/rs6000/rs6000.md (add<mode>3_carry): New.\n\t(*add<mode>3_imm_carry_pos): New.\n\t(*add<mode>3_imm_carry_0): New.\n\t(*add<mode>3_imm_carry_m1): New.\n\t(*add<mode>3_imm_carry_neg): New.\n\t(add<mode>3_carry_in): New.\n\t(*add<mode>3_carry_in_internal): New.\n\t(add<mode>3_carry_in_0): New.\n\t(add<mode>3_carry_in_m1): New.\n\t(subf<mode>3_carry): New.\n\t(*subf<mode>3_imm_carry_0): New.\n\t(*subf<mode>3_imm_carry_m1): New.\n\t(subf<mode>3_carry_in): New.\n\t(*subf<mode>3_carry_in_internal): New.\n\t(subf<mode>3_carry_in_0): New.\n\t(subf<mode>3_carry_in_m1): New.\n\t(subf<mode>3_carry_in_xx): New.\n\nFrom-SVN: r218594", "tree": {"sha": "0508be077c18d6897c83e1f441be0e385af574b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0508be077c18d6897c83e1f441be0e385af574b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46121d60c508a382e89bd7c4c403e981da09ee4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46121d60c508a382e89bd7c4c403e981da09ee4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46121d60c508a382e89bd7c4c403e981da09ee4a"}], "stats": {"total": 228, "additions": 228, "deletions": 0}, "files": [{"sha": "f70d81646ed9e7b40fea37ca1c09bf6834053f01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b", "patch": "@@ -1,3 +1,25 @@\n+2014-12-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/64180\n+\t* config/rs6000/predicates.md (adde_operand): New.\n+\t* config/rs6000/rs6000.md (add<mode>3_carry): New.\n+\t(*add<mode>3_imm_carry_pos): New.\n+\t(*add<mode>3_imm_carry_0): New.\n+\t(*add<mode>3_imm_carry_m1): New.\n+\t(*add<mode>3_imm_carry_neg): New.\n+\t(add<mode>3_carry_in): New.\n+\t(*add<mode>3_carry_in_internal): New.\n+\t(add<mode>3_carry_in_0): New.\n+\t(add<mode>3_carry_in_m1): New.\n+\t(subf<mode>3_carry): New.\n+\t(*subf<mode>3_imm_carry_0): New.\n+\t(*subf<mode>3_imm_carry_m1): New.\n+\t(subf<mode>3_carry_in): New.\n+\t(*subf<mode>3_carry_in_internal): New.\n+\t(subf<mode>3_carry_in_0): New.\n+\t(subf<mode>3_carry_in_m1): New.\n+\t(subf<mode>3_carry_in_xx): New.\n+\n 2014-12-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/64180"}, {"sha": "a19cb2fd39e468b37cf02ec10bc8880c92510a1b", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b", "patch": "@@ -788,6 +788,12 @@\n \t\t || satisfies_constraint_L (op)\")\n     (match_operand 0 \"gpc_reg_operand\")))\n \n+;; Return 1 if the operand is either a non-special register, or 0, or -1.\n+(define_predicate \"adde_operand\"\n+  (if_then_else (match_code \"const_int\")\n+    (match_test \"INTVAL (op) == 0 || INTVAL (op) == -1\")\n+    (match_operand 0 \"gpc_reg_operand\")))\n+\n ;; Return 1 if OP is a constant but not a valid add_operand.\n (define_predicate \"non_add_cint_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "733cc390f299b7b70a8506a8595d1e23c0de8f8d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=969ce0b0a60ac986c6b4f31cbc7c262b7be9f80b", "patch": "@@ -1634,6 +1634,115 @@\n     FAIL;\n })\n \n+\n+(define_insn \"add<mode>3_carry\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:P 2 \"reg_or_short_operand\" \"rI\")))\n+   (set (reg:P CA_REGNO)\n+\t(ltu:P (plus:P (match_dup 1)\n+\t\t       (match_dup 2))\n+\t       (match_dup 1)))]\n+  \"\"\n+  \"add%I2c %0,%1,%2\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"*add<mode>3_imm_carry_pos\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:P 2 \"short_cint_operand\" \"n\")))\n+   (set (reg:P CA_REGNO)\n+\t(geu:P (match_dup 1)\n+\t       (match_operand:P 3 \"const_int_operand\" \"n\")))]\n+  \"INTVAL (operands[2]) > 0\n+   && INTVAL (operands[2]) + INTVAL (operands[3]) == 0\"\n+  \"addic %0,%1,%2\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"*add<mode>3_imm_carry_0\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(match_operand:P 1 \"gpc_reg_operand\" \"r\"))\n+   (set (reg:P CA_REGNO)\n+\t(const_int 0))]\n+  \"\"\n+  \"addic %0,%1,0\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"*add<mode>3_imm_carry_m1\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t(const_int -1)))\n+   (set (reg:P CA_REGNO)\n+\t(ne:P (match_dup 1)\n+\t      (const_int 0)))]\n+  \"\"\n+  \"addic %0,%1,-1\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"*add<mode>3_imm_carry_neg\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:P 2 \"short_cint_operand\" \"n\")))\n+   (set (reg:P CA_REGNO)\n+\t(gtu:P (match_dup 1)\n+\t       (match_operand:P 3 \"const_int_operand\" \"n\")))]\n+  \"INTVAL (operands[2]) < 0\n+   && INTVAL (operands[2]) + INTVAL (operands[3]) == -1\"\n+  \"addic %0,%1,%2\"\n+  [(set_attr \"type\" \"add\")])\n+\n+\n+(define_expand \"add<mode>3_carry_in\"\n+  [(parallel [\n+     (set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t  (plus:GPR (plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n+\t\t\t      (match_operand:GPR 2 \"adde_operand\"))\n+\t\t    (reg:GPR CA_REGNO)))\n+     (clobber (reg:GPR CA_REGNO))])]\n+  \"\"\n+{\n+  if (operands[2] == const0_rtx)\n+    {\n+      emit_insn (gen_add<mode>3_carry_in_0 (operands[0], operands[1]));\n+      DONE;\n+    }\n+  if (operands[2] == constm1_rtx)\n+    {\n+      emit_insn (gen_add<mode>3_carry_in_m1 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*add<mode>3_carry_in_internal\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:GPR (plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t    (match_operand:GPR 2 \"gpc_reg_operand\" \"r\"))\n+\t\t  (reg:GPR CA_REGNO)))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"adde %0,%1,%2\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"add<mode>3_carry_in_0\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (reg:GPR CA_REGNO)))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"addze %0,%1\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"add<mode>3_carry_in_m1\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:GPR (plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t    (reg:GPR CA_REGNO))\n+\t\t  (const_int -1)))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"addme %0,%1\"\n+  [(set_attr \"type\" \"add\")])\n+\n+\n (define_expand \"one_cmpl<mode>2\"\n   [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n \t(not:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")))]\n@@ -1772,6 +1881,97 @@\n   [(set_attr \"type\" \"add\")])\n \n \n+(define_insn \"subf<mode>3_carry\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(minus:P (match_operand:P 2 \"reg_or_short_operand\" \"rI\")\n+\t\t (match_operand:P 1 \"gpc_reg_operand\" \"r\")))\n+   (set (reg:P CA_REGNO)\n+\t(leu:P (match_dup 1)\n+\t       (match_dup 2)))]\n+  \"\"\n+  \"subf%I2c %0,%1,%2\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"*subf<mode>3_imm_carry_0\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")))\n+   (set (reg:P CA_REGNO)\n+\t(eq:P (match_dup 1)\n+\t      (const_int 0)))]\n+  \"\"\n+  \"subfic %0,%1,0\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"*subf<mode>3_imm_carry_m1\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(not:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")))\n+   (set (reg:P CA_REGNO)\n+\t(const_int 1))]\n+  \"\"\n+  \"subfic %0,%1,-1\"\n+  [(set_attr \"type\" \"add\")])\n+\n+\n+(define_expand \"subf<mode>3_carry_in\"\n+  [(parallel [\n+     (set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t  (plus:GPR (plus:GPR (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\"))\n+\t\t\t      (reg:GPR CA_REGNO))\n+\t\t    (match_operand:GPR 2 \"adde_operand\")))\n+     (clobber (reg:GPR CA_REGNO))])]\n+  \"\"\n+{\n+  if (operands[2] == const0_rtx)\n+    {\n+      emit_insn (gen_subf<mode>3_carry_in_0 (operands[0], operands[1]));\n+      DONE;\n+    }\n+  if (operands[2] == constm1_rtx)\n+    {\n+      emit_insn (gen_subf<mode>3_carry_in_m1 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*subf<mode>3_carry_in_internal\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:GPR (plus:GPR (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n+\t\t\t    (reg:GPR CA_REGNO))\n+\t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"subfe %0,%1,%2\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"subf<mode>3_carry_in_0\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:GPR (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n+\t\t  (reg:GPR CA_REGNO)))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"subfze %0,%1\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"subf<mode>3_carry_in_m1\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:GPR (minus:GPR (reg:GPR CA_REGNO)\n+\t\t\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n+\t\t  (const_int -2)))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"subfme %0,%1\"\n+  [(set_attr \"type\" \"add\")])\n+\n+(define_insn \"subf<mode>3_carry_in_xx\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:GPR (reg:GPR CA_REGNO)\n+\t\t  (const_int -1)))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"subfe %0,%0,%0\"\n+  [(set_attr \"type\" \"add\")])\n+\n+\n (define_expand \"neg<mode>2\"\n   [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n \t(neg:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")))]"}]}