{"sha": "6f203500991046555099e72ca8794d60d50ef41d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYyMDM1MDA5OTEwNDY1NTUwOTllNzJjYTg3OTRkNjBkNTBlZjQxZA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-11-17T10:47:52Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-11-17T10:47:52Z"}, "message": "expr.c (copy_blkmode_to_reg): Fix bitsize for targets with fast unaligned access.\n\n2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n\n\t* expr.c (copy_blkmode_to_reg): Fix bitsize for targets\n\twith fast unaligned access.\n\t* doc/sourcebuild.texi (word_mode_no_slow_unalign): New.\n\t\ngcc/testsuite/\n2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n\n\t* gcc.dg/struct-simple.c: New.\n\t* lib/target-supports.exp\n\t(check_effective_target_word_mode_no_slow_unalign): New.\n\nFrom-SVN: r254862", "tree": {"sha": "d3c3f38c9249ec3af301a9a59de5074e880813bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c3f38c9249ec3af301a9a59de5074e880813bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f203500991046555099e72ca8794d60d50ef41d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f203500991046555099e72ca8794d60d50ef41d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f203500991046555099e72ca8794d60d50ef41d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f203500991046555099e72ca8794d60d50ef41d/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7326cf0fb08b1977171aa97bc8370d950129c813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7326cf0fb08b1977171aa97bc8370d950129c813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7326cf0fb08b1977171aa97bc8370d950129c813"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "b37fd6f12de6f45db5619a5d23fd3d3fe7bd7e98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f203500991046555099e72ca8794d60d50ef41d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f203500991046555099e72ca8794d60d50ef41d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f203500991046555099e72ca8794d60d50ef41d", "patch": "@@ -1,3 +1,9 @@\n+2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* expr.c (copy_blkmode_to_reg): Fix bitsize for targets\n+\twith fast unaligned access.\n+\t* doc/sourcebuild.texi (word_mode_no_slow_unalign): New.\n+\n 2017-11-17  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/arm.c (cmse_nonsecure_entry_clear_before_return): Allocate"}, {"sha": "d1a3ec03431fa943d21c7951c239f4bbd042fcb2", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=6f203500991046555099e72ca8794d60d50ef41d", "patch": "@@ -2240,8 +2240,12 @@ Target supports @code{wchar_t} that is compatible with @code{char32_t}.\n \n @item comdat_group\n Target uses comdat groups.\n+\n+@item word_mode_no_slow_unalign\n+Target does not have slow unaligned access when doing word size accesses.\n @end table\n \n+\n @subsubsection Local to tests in @code{gcc.target/i386}\n \n @table @code"}, {"sha": "c93d9f6754c6ddd0988ffc5c8173469af23be165", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6f203500991046555099e72ca8794d60d50ef41d", "patch": "@@ -2772,7 +2772,9 @@ copy_blkmode_to_reg (machine_mode mode_in, tree src)\n \n   n_regs = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n   dst_words = XALLOCAVEC (rtx, n_regs);\n-  bitsize = MIN (TYPE_ALIGN (TREE_TYPE (src)), BITS_PER_WORD);\n+  bitsize = BITS_PER_WORD;\n+  if (targetm.slow_unaligned_access (word_mode, TYPE_ALIGN (TREE_TYPE (src))))\n+    bitsize = MIN (TYPE_ALIGN (TREE_TYPE (src)), BITS_PER_WORD);\n \n   /* Copy the structure BITSIZE bits at a time.  */\n   for (bitpos = 0, xbitpos = padding_correction;"}, {"sha": "c3dc5f92ce9ed60a5b14b475eca367a3bae37017", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f203500991046555099e72ca8794d60d50ef41d", "patch": "@@ -1,3 +1,9 @@\n+2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/struct-simple.c: New.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_word_mode_no_slow_unalign): New.\n+\n 2017-11-17  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/cmse/cmse-14.c: Change logic to match branch"}, {"sha": "17b956022e4efb37044c7a74cc8baa9fb779221a", "filename": "gcc/testsuite/gcc.dg/struct-simple.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-simple.c?ref=6f203500991046555099e72ca8794d60d50ef41d", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do-run } */\n+/* { dg-require-effective-target word_mode_no_slow_unalign } */\n+/* { dg-additional-options \"-fdump-rtl-final\" } */\n+\n+/* Copyright 1996, 1999, 2007 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.\n+\n+   Please email any bugs, comments, and/or additions to this file to:\n+   bug-gdb@prep.ai.mit.edu  */\n+\n+#include <stdio.h>\n+\n+struct struct3 { char a, b, c; };\n+struct struct3 foo3 = { 'A', 'B', 'C'},  L3;\n+\n+struct struct3  fun3()\n+{\n+  return foo3;\n+}\n+\n+#ifdef PROTOTYPES\n+void Fun3(struct struct3 foo3)\n+#else\n+void Fun3(foo3)\n+     struct struct3 foo3;\n+#endif\n+{\n+  L3 = foo3;\n+}\n+\n+int main()\n+{\n+  struct struct3 x = fun3();\n+\n+  printf(\"a:%c, b:%c, c:%c\\n\", x.a, x.b, x.c);\n+}\n+\n+/* { dg-final { scan-rtl-dump-not {zero_extract:.+\\[\\s*foo3\\s*\\]} \"final\" } } */\n+"}, {"sha": "d80da6900885001a69f7787f9f85e8173297bbf5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f203500991046555099e72ca8794d60d50ef41d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6f203500991046555099e72ca8794d60d50ef41d", "patch": "@@ -6222,6 +6222,31 @@ proc check_effective_target_unaligned_stack { } {\n     return $et_unaligned_stack_saved\n }\n \n+# Return 1 if the target plus current options does not have\n+# slow unaligned access when using word size accesses.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_word_mode_no_slow_unalign { } {\n+    global et_word_mode_no_slow_unalign_saved\n+    global et_index\n+\n+    if [info exists et_word_mode_no_slow_unalign_saved($et_index)] {\n+        verbose \"check_effective_target_word_mode_no_slow_unalign: \\\n+                 using cached result\" 2\n+    } else {\n+        set et_word_mode_no_slow_unalign_saved($et_index) 0\n+        if { [is-effective-target non_strict_align]\n+\t     && !([istarget arm*-*-*])\n+           } {\n+            set et_word_mode_no_slow_unalign_saved($et_index) 1\n+        }\n+    }\n+    verbose \"check_effective_target_word_mode_no_slow_unalign:\\\n+             returning $et_word_mode_no_slow_unalign_saved($et_index)\" 2\n+    return $et_word_mode_no_slow_unalign_saved($et_index)\n+}\n+\n # Return 1 if the target plus current options does not support a vector\n # alignment mechanism, 0 otherwise.\n #"}]}