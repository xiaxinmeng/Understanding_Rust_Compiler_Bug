{"sha": "9158f0ba97ff987948cd5ce8391a546751c6dff3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1OGYwYmE5N2ZmOTg3OTQ4Y2Q1Y2U4MzkxYTU0Njc1MWM2ZGZmMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-10-15T12:03:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-10-15T12:03:04Z"}, "message": "[linemap PATCH] Constify lookup\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-10/msg01080.html\nlooking up a line map takes a non-constant line_maps object, which is confusing.\nThis makes the caching fields mutable, so permits a constant object, as one might expect for a lookup.\n\n\t* include/line-map.h (struct maps_info_ordinary): Make cache\n\tmutable.\n\t(struct maps_info_macro): Likewise.\n\t(LINEMAPS_CACHE): Remove non-ref accessor. Constify ref accessor.\n\t(LINEMAPS_ORDINARY_CACHE, LINEMAPS_MACRO_CACHE): Likewise.\n\t(LINEMAPS_ORDINARY_MAP_AT, LINEMAPS_MACRO_MAP_AT): Use\n\tLINEMAPS_USED and LINEMAPS_MAP_AT.\n\t(linemap_lookup): Constify line_map arg.\n\tlinemap.c (linemap_ordinary_map_lookup, linemap_macro_map_lookup):\n\tConstify line_map arg.\n\nFrom-SVN: r276994", "tree": {"sha": "23993f28ac6545c0a27d83cecfcfe29a6cd27608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23993f28ac6545c0a27d83cecfcfe29a6cd27608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9158f0ba97ff987948cd5ce8391a546751c6dff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9158f0ba97ff987948cd5ce8391a546751c6dff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9158f0ba97ff987948cd5ce8391a546751c6dff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9158f0ba97ff987948cd5ce8391a546751c6dff3/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8955dc0f4583317c4d6a65d17c92c538f46a60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8955dc0f4583317c4d6a65d17c92c538f46a60c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8955dc0f4583317c4d6a65d17c92c538f46a60c"}], "stats": {"total": 78, "additions": 32, "deletions": 46}, "files": [{"sha": "670e97b039a748ac68df4168f32265de1a613a66", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9158f0ba97ff987948cd5ce8391a546751c6dff3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9158f0ba97ff987948cd5ce8391a546751c6dff3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9158f0ba97ff987948cd5ce8391a546751c6dff3", "patch": "@@ -1,3 +1,16 @@\n+2019-10-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/line-map.h (struct maps_info_ordinary): Make cache\n+\tmutable.\n+\t(struct maps_info_macro): Likewise.\n+\t(LINEMAPS_CACHE): Remove non-ref accessor. Constify ref accessor.\n+\t(LINEMAPS_ORDINARY_CACHE, LINEMAPS_MACRO_CACHE): Likewise.\n+\t(LINEMAPS_ORDINARY_MAP_AT, LINEMAPS_MACRO_MAP_AT): Use\n+\tLINEMAPS_USED and LINEMAPS_MAP_AT.\n+\t(linemap_lookup): Constify line_map arg.\n+\tlinemap.c (linemap_ordinary_map_lookup, linemap_macro_map_lookup):\n+\tConstify line_map arg.\n+\n 2019-10-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* include/cpplib.h (struct cpp_options): Add dfp_constants and"}, {"sha": "6f4cf5b9c95683f89f240b39f252bcad10e277dd", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 13, "deletions": 40, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9158f0ba97ff987948cd5ce8391a546751c6dff3/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9158f0ba97ff987948cd5ce8391a546751c6dff3/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=9158f0ba97ff987948cd5ce8391a546751c6dff3", "patch": "@@ -724,7 +724,7 @@ struct GTY(()) maps_info_ordinary {\n      or equal to ALLOCATED.  */\n   unsigned int used;\n \n-  unsigned int cache;\n+  mutable unsigned int cache;\n };\n \n struct GTY(()) maps_info_macro {\n@@ -739,7 +739,7 @@ struct GTY(()) maps_info_macro {\n      or equal to ALLOCATED.  */\n   unsigned int used;\n \n-  unsigned int cache;\n+  mutable unsigned int cache;\n };\n \n /* Data structure to associate a source_range together with an arbitrary\n@@ -865,19 +865,8 @@ LINEMAPS_USED (line_maps *set, bool map_kind)\n /* Returns the index of the last map that was looked up with\n    linemap_lookup. MAP_KIND shall be TRUE if we are interested in\n    macro maps, FALSE otherwise.  */\n-inline unsigned int\n-LINEMAPS_CACHE (const line_maps *set, bool map_kind)\n-{\n-  if (map_kind)\n-    return set->info_macro.cache;\n-  else\n-    return set->info_ordinary.cache;\n-}\n-\n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n inline unsigned int &\n-LINEMAPS_CACHE (line_maps *set, bool map_kind)\n+LINEMAPS_CACHE (const line_maps *set, bool map_kind)\n {\n   if (map_kind)\n     return set->info_macro.cache;\n@@ -927,9 +916,9 @@ LINEMAPS_ORDINARY_MAPS (const line_maps *set)\n inline line_map_ordinary *\n LINEMAPS_ORDINARY_MAP_AT (const line_maps *set, int index)\n {\n-  linemap_assert (index >= 0);\n-  linemap_assert ((unsigned int)index < set->info_ordinary.used);\n-  return &set->info_ordinary.maps[index];\n+  linemap_assert (index >= 0\n+\t\t  && (unsigned int)index < LINEMAPS_USED (set, false));\n+  return (line_map_ordinary *)LINEMAPS_MAP_AT (set, false, index);\n }\n \n /* Return the number of ordinary maps allocated in the line table\n@@ -949,16 +938,8 @@ LINEMAPS_ORDINARY_USED (const line_maps *set)\n \n /* Return the index of the last ordinary map that was looked up with\n    linemap_lookup.  */\n-inline unsigned int\n-LINEMAPS_ORDINARY_CACHE (const line_maps *set)\n-{\n-  return LINEMAPS_CACHE (set, false);\n-}\n-\n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n inline unsigned int &\n-LINEMAPS_ORDINARY_CACHE (line_maps *set)\n+LINEMAPS_ORDINARY_CACHE (const line_maps *set)\n {\n   return LINEMAPS_CACHE (set, false);\n }\n@@ -991,9 +972,9 @@ LINEMAPS_MACRO_MAPS (const line_maps *set)\n inline line_map_macro *\n LINEMAPS_MACRO_MAP_AT (const line_maps *set, int index)\n {\n-  linemap_assert (index >= 0);\n-  linemap_assert ((unsigned int)index < set->info_macro.used);\n-  return &set->info_macro.maps[index];\n+  linemap_assert (index >= 0\n+\t\t  && (unsigned int)index < LINEMAPS_USED (set, true));\n+  return (line_map_macro *)LINEMAPS_MAP_AT (set, true, index);\n }\n \n /* Returns the number of macro maps that were allocated in the line\n@@ -1011,18 +992,10 @@ LINEMAPS_MACRO_USED (const line_maps *set)\n   return LINEMAPS_USED (set, true);\n }\n \n-/* Returns the index of the last macro map looked up with\n+/* Return the index of the last macro map that was looked up with\n    linemap_lookup.  */\n-inline unsigned int\n-LINEMAPS_MACRO_CACHE (const line_maps *set)\n-{\n-  return LINEMAPS_CACHE (set, true);\n-}\n-\n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n inline unsigned int &\n-LINEMAPS_MACRO_CACHE (line_maps *set)\n+LINEMAPS_MACRO_CACHE (const line_maps *set)\n {\n   return LINEMAPS_CACHE (set, true);\n }\n@@ -1130,7 +1103,7 @@ extern const line_map *linemap_add\n    binary search. If no line map have been allocated yet, this\n    function returns NULL.  */\n extern const line_map *linemap_lookup\n-  (class line_maps *, location_t);\n+  (const line_maps *, location_t);\n \n /* Returns TRUE if the line table set tracks token locations across\n    macro expansion, FALSE otherwise.  */"}, {"sha": "b86a116bfdd311a4b36caebd16940e6760285460", "filename": "libcpp/line-map.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9158f0ba97ff987948cd5ce8391a546751c6dff3/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9158f0ba97ff987948cd5ce8391a546751c6dff3/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=9158f0ba97ff987948cd5ce8391a546751c6dff3", "patch": "@@ -27,9 +27,9 @@ along with this program; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n \n static void trace_include (const line_maps *, const line_map_ordinary *);\n-static const line_map_ordinary * linemap_ordinary_map_lookup (line_maps *,\n+static const line_map_ordinary * linemap_ordinary_map_lookup (const line_maps *,\n \t\t\t\t\t\t\t      location_t);\n-static const line_map_macro* linemap_macro_map_lookup (line_maps *,\n+static const line_map_macro* linemap_macro_map_lookup (const line_maps *,\n \t\t\t\t\t\t       location_t);\n static location_t linemap_macro_map_loc_to_def_point\n (const line_map_macro *, location_t);\n@@ -937,7 +937,7 @@ linemap_position_for_loc_and_offset (line_maps *set,\n    ordinary or a macro map), returns that map.  */\n \n const struct line_map*\n-linemap_lookup (line_maps *set, location_t line)\n+linemap_lookup (const line_maps *set, location_t line)\n {\n   if (IS_ADHOC_LOC (line))\n     line = get_location_from_adhoc_loc (set, line);\n@@ -952,7 +952,7 @@ linemap_lookup (line_maps *set, location_t line)\n    binary search.  */\n \n static const line_map_ordinary *\n-linemap_ordinary_map_lookup (line_maps *set, location_t line)\n+linemap_ordinary_map_lookup (const line_maps *set, location_t line)\n {\n   unsigned int md, mn, mx;\n   const line_map_ordinary *cached, *result;\n@@ -965,7 +965,7 @@ linemap_ordinary_map_lookup (line_maps *set, location_t line)\n \n   mn = LINEMAPS_ORDINARY_CACHE (set);\n   mx = LINEMAPS_ORDINARY_USED (set);\n-  \n+\n   cached = LINEMAPS_ORDINARY_MAP_AT (set, mn);\n   /* We should get a segfault if no line_maps have been added yet.  */\n   if (line >= MAP_START_LOCATION (cached))\n@@ -1000,7 +1000,7 @@ linemap_ordinary_map_lookup (line_maps *set, location_t line)\n    binary search.  */\n \n static const line_map_macro *\n-linemap_macro_map_lookup (line_maps *set, location_t line)\n+linemap_macro_map_lookup (const line_maps *set, location_t line)\n {\n   unsigned int md, mn, mx;\n   const struct line_map_macro *cached, *result;"}]}