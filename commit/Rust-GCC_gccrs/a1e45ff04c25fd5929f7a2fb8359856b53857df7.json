{"sha": "a1e45ff04c25fd5929f7a2fb8359856b53857df7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlNDVmZjA0YzI1ZmQ1OTI5ZjdhMmZiODM1OTg1NmI1Mzg1N2RmNw==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.de", "date": "2006-10-30T23:15:42Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2006-10-30T23:15:42Z"}, "message": "re PR c++/6321 (no warning for bad main function declaration)\n\n2006-10-30  Dirk Mueller  <dmueller@suse.de>\n\n        PR c++/6321\n        * cp/decl.c (grokfndecl): Use check_main_parameter_types.\n\n        * c-common.h (strict_aliasing_warning): Fix whitespace.\n        * c-decl (start_function): Move code for main decl warning ..\n        * c-common.c (check_main_parameter_types): .. here.\n        * c-common.h (check_main_parameter_types): Declare.\n\nFrom-SVN: r118206", "tree": {"sha": "c6184d67a07b7d5535a9f3989cc07f65cb9eace4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6184d67a07b7d5535a9f3989cc07f65cb9eace4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1e45ff04c25fd5929f7a2fb8359856b53857df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e45ff04c25fd5929f7a2fb8359856b53857df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e45ff04c25fd5929f7a2fb8359856b53857df7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e45ff04c25fd5929f7a2fb8359856b53857df7/comments", "author": null, "committer": null, "parents": [{"sha": "e7c41c9948c268fd3940be53ce8a988da8716406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c41c9948c268fd3940be53ce8a988da8716406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c41c9948c268fd3940be53ce8a988da8716406"}], "stats": {"total": 116, "additions": 69, "deletions": 47}, "files": [{"sha": "93ce3426685f2b96ab7d0e4054712a7feb7e48d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1e45ff04c25fd5929f7a2fb8359856b53857df7", "patch": "@@ -1,3 +1,10 @@\n+2006-10-30  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* c-common.h (strict_aliasing_warning): Fix whitespace.\n+\t* c-decl (start_function): Move code for main decl warning ..\n+\t* c-common.c (check_main_parameter_types): .. here.\n+\t* c-common.h (check_main_parameter_types): Declare.\n+ \n 2006-10-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR middle-end/29335"}, {"sha": "a901aba2f50bca6f864eb2b49b8bf490c1838804", "filename": "gcc/c-common.c", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a1e45ff04c25fd5929f7a2fb8359856b53857df7", "patch": "@@ -1010,7 +1010,6 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n     }\n }\n \n-\n /* Print a warning about if (); or if () .. else; constructs\n    via the special empty statement node that we create.  INNER_THEN\n    and INNER_ELSE are the statement lists of the if and the else\n@@ -1039,7 +1038,59 @@ empty_body_warning (tree inner_then, tree inner_else)\n    }\n }\n \n-  \n+/* Warn for unlikely, improbable, or stupid DECL declarations\n+   of `main'.  */\n+\n+void\n+check_main_parameter_types (tree decl)\n+{\n+  tree args;\n+  int argct = 0;\n+\n+  for (args = TYPE_ARG_TYPES (TREE_TYPE (decl)); args;\n+      args = TREE_CHAIN (args))\n+   {\n+     tree type = args ? TREE_VALUE (args) : 0;\n+\n+     if (type == void_type_node)\n+       break;\n+\n+     ++argct;\n+     switch (argct)\n+       {\n+       case 1:\n+         if (TYPE_MAIN_VARIANT (type) != integer_type_node)\n+           pedwarn (\"first argument of %q+D should be %<int%>\", decl);\n+         break;\n+\n+       case 2:\n+         if (TREE_CODE (type) != POINTER_TYPE\n+             || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n+             || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n+                 != char_type_node))\n+           pedwarn (\"second argument of %q+D should be %<char **%>\",\n+                    decl);\n+         break;\n+\n+       case 3:\n+         if (TREE_CODE (type) != POINTER_TYPE\n+             || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n+             || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n+                 != char_type_node))\n+           pedwarn (\"third argument of %q+D should probably be \"\n+                    \"%<char **%>\", decl);\n+         break;\n+       }\n+   }\n+\n+  /* It is intentional that this message does not mention the third\n+    argument because it's only mentioned in an appendix of the\n+    standard.  */\n+  if (argct > 0 && (argct < 2 || argct > 3))\n+   pedwarn (\"%q+D takes only zero or two arguments\", decl);\n+}\n+\n+ \n /* Nonzero if constant C has a value that is permissible\n    for type TYPE (an INTEGER_TYPE).  */\n "}, {"sha": "f6f36e0114fa9e6ed0652ef0ba513a76bbc049a0", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a1e45ff04c25fd5929f7a2fb8359856b53857df7", "patch": "@@ -654,10 +654,11 @@ extern void binary_op_error (enum tree_code);\n extern tree fix_string_type (tree);\n struct varray_head_tag;\n extern void constant_expression_warning (tree);\n-extern void strict_aliasing_warning(tree, tree, tree);\n+extern void strict_aliasing_warning (tree, tree, tree);\n extern void empty_body_warning (tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n+extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n extern bool same_scalar_type_ignoring_signedness (tree, tree);\n "}, {"sha": "7ebb8b9c4f10fa2eeb40aaa5249b65c678f1c9a5", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a1e45ff04c25fd5929f7a2fb8359856b53857df7", "patch": "@@ -6133,54 +6133,11 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   /* Warn for unlikely, improbable, or stupid declarations of `main'.  */\n   if (warn_main > 0 && MAIN_NAME_P (DECL_NAME (decl1)))\n     {\n-      tree args;\n-      int argct = 0;\n-\n       if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl1)))\n \t  != integer_type_node)\n \tpedwarn (\"return type of %q+D is not %<int%>\", decl1);\n \n-      for (args = TYPE_ARG_TYPES (TREE_TYPE (decl1)); args;\n-\t   args = TREE_CHAIN (args))\n-\t{\n-\t  tree type = args ? TREE_VALUE (args) : 0;\n-\n-\t  if (type == void_type_node)\n-\t    break;\n-\n-\t  ++argct;\n-\t  switch (argct)\n-\t    {\n-\t    case 1:\n-\t      if (TYPE_MAIN_VARIANT (type) != integer_type_node)\n-\t\tpedwarn (\"first argument of %q+D should be %<int%>\", decl1);\n-\t      break;\n-\n-\t    case 2:\n-\t      if (TREE_CODE (type) != POINTER_TYPE\n-\t\t  || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n-\t\t  || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n-\t\t      != char_type_node))\n-\t\tpedwarn (\"second argument of %q+D should be %<char **%>\",\n-\t\t\t decl1);\n-\t      break;\n-\n-\t    case 3:\n-\t      if (TREE_CODE (type) != POINTER_TYPE\n-\t\t  || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n-\t\t  || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n-\t\t      != char_type_node))\n-\t\tpedwarn (\"third argument of %q+D should probably be \"\n-\t\t\t \"%<char **%>\", decl1);\n-\t      break;\n-\t    }\n-\t}\n-\n-      /* It is intentional that this message does not mention the third\n-\t argument because it's only mentioned in an appendix of the\n-\t standard.  */\n-      if (argct > 0 && (argct < 2 || argct > 3))\n-\tpedwarn (\"%q+D takes only zero or two arguments\", decl1);\n+      check_main_parameter_types(decl1);\n \n       if (!TREE_PUBLIC (decl1))\n \tpedwarn (\"%q+D is normally a non-static function\", decl1);"}, {"sha": "ad1f12681e59ac23ec5b1a82e2b9aa84410d390c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1e45ff04c25fd5929f7a2fb8359856b53857df7", "patch": "@@ -1,3 +1,8 @@\n+2006-10-30  Dirk Mueller  <dmueller@suse.de>\n+\n+\tPR c++/6321\n+\t* decl.c (grokfndecl): Use check_main_parameter_types.\n+\n 2006-10-30  Dirk Mueller  <dmueller@suse.de>\n \n \tPR c++/28669"}, {"sha": "846089b52c17c93106f8a6971d288c820a97b3c1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e45ff04c25fd5929f7a2fb8359856b53857df7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a1e45ff04c25fd5929f7a2fb8359856b53857df7", "patch": "@@ -6027,6 +6027,7 @@ grokfndecl (tree ctype,\n \t\t\t\t\t  oldtypeargs);\n \t  TREE_TYPE (decl) = newtype;\n \t}\n+      check_main_parameter_types (decl);\n       inlinep = 0;\n       publicp = 1;\n     }"}]}