{"sha": "8c6a2f1dbf8f9fba942e7be4b566f105bb21f224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM2YTJmMWRiZjhmOWZiYTk0MmU3YmU0YjU2NmYxMDViYjIxZjIyNA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-26T08:42:08Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-26T09:00:48Z"}, "message": "Fix issue with mangled name on function items with substitutions\n\nRust legacy name mangling does not contain the substitutions as part of\nits mangled name for Item's. Rust avoids duplicate symbol collisions with\nthe legacy mangling scheme, but including a 128bit hash at the end of the\nsymbol, which is made up with metadata and in this case the mangled symbol\ncontains a hash of the type which this function is.\n\nFixes #647", "tree": {"sha": "443a619f141adaf6777eee737055c942837f48fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/443a619f141adaf6777eee737055c942837f48fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40042ce11fc5d7f62e31be99e82bf6a0db83234a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40042ce11fc5d7f62e31be99e82bf6a0db83234a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40042ce11fc5d7f62e31be99e82bf6a0db83234a"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "1871d10c6518ae6ac133c1f3685f1adafc65a83d", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=8c6a2f1dbf8f9fba942e7be4b566f105bb21f224", "patch": "@@ -199,16 +199,7 @@ class CompileItem : public HIRCompileBase\n     // yet\n     if (!is_main_fn)\n       {\n-\tstd::string substs_str = fntype->subst_as_string ();\n-\n-\tResolver::CanonicalPath mangle_me\n-\t  = substs_str.empty ()\n-\t      ? *canonical_path\n-\t      : canonical_path->append (\n-\t\tResolver::CanonicalPath::new_seg (0,\n-\t\t\t\t\t\t  fntype->subst_as_string ()));\n-\n-\tasm_name = ctx->mangle_item (fntype, mangle_me);\n+\tasm_name = ctx->mangle_item (fntype, *canonical_path);\n       }\n \n     Bfunction *fndecl"}, {"sha": "3f427ccb785974d4df50e9a8315ee44de2f3e619", "filename": "gcc/testsuite/rust/execute/torture/issue-647.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-647.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a2f1dbf8f9fba942e7be4b566f105bb21f224/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-647.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-647.rs?ref=8c6a2f1dbf8f9fba942e7be4b566f105bb21f224", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-output \"Hello World 123\\n\" }*/\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo<T>(T);\n+\n+struct Bar<T> {\n+    a: Foo<T>,\n+    b: bool,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn test<T>(a: Bar<T>) -> Foo<T> {\n+    a.a\n+}\n+\n+fn main() -> i32 {\n+    let a: Bar<i32> = Bar::<i32> {\n+        a: Foo::<i32>(123),\n+        b: true,\n+    };\n+    let result: Foo<i32> = test(a);\n+\n+    unsafe {\n+        let a = \"Hello World %i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, result.0);\n+    }\n+    0\n+}"}]}