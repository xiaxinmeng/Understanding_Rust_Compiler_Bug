{"sha": "c1cccc15b70ec9a7afba448343c98c8c3eacf506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjY2NjMTViNzBlYzlhN2FmYmE0NDgzNDNjOThjOGMzZWFjZjUwNg==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2013-05-30T07:30:45Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2013-05-30T07:30:45Z"}, "message": "arm.c (arm_add_cfa_adjust_cfa_note): New added.\n\n2013-05-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* config/arm/arm.c (arm_add_cfa_adjust_cfa_note): New added.\n\t(arm_emit_multi_reg_pop): Add REG_CFA_ADJUST_CFA notes.\n\t(arm_emit_vfp_multi_reg_pop): Likewise.\n\t(thumb2_emit_ldrd_pop): Likewise.\n\t(arm_expand_epilogue): Add misc REG_CFA notes.\n\t(arm_unwind_emit): Skip REG_CFA_ADJUST_CFA and REG_CFA_RESTORE.\n\nFrom-SVN: r199438", "tree": {"sha": "36d4a9ddd6e536f96456829b6291255ac20398af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d4a9ddd6e536f96456829b6291255ac20398af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1cccc15b70ec9a7afba448343c98c8c3eacf506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cccc15b70ec9a7afba448343c98c8c3eacf506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1cccc15b70ec9a7afba448343c98c8c3eacf506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cccc15b70ec9a7afba448343c98c8c3eacf506/comments", "author": null, "committer": null, "parents": [{"sha": "f188272d9f6affacbed8055babe1c02601b35d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f188272d9f6affacbed8055babe1c02601b35d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f188272d9f6affacbed8055babe1c02601b35d4c"}], "stats": {"total": 125, "additions": 107, "deletions": 18}, "files": [{"sha": "963403d5ced399e312a84e0ce88675960ddde71b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cccc15b70ec9a7afba448343c98c8c3eacf506/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cccc15b70ec9a7afba448343c98c8c3eacf506/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1cccc15b70ec9a7afba448343c98c8c3eacf506", "patch": "@@ -1,3 +1,12 @@\n+2013-05-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* config/arm/arm.c (arm_add_cfa_adjust_cfa_note): New added.\n+\t(arm_emit_multi_reg_pop): Add REG_CFA_ADJUST_CFA notes.\n+\t(arm_emit_vfp_multi_reg_pop): Likewise.\n+\t(thumb2_emit_ldrd_pop): Likewise.\n+\t(arm_expand_epilogue): Add misc REG_CFA notes.\n+\t(arm_unwind_emit): Skip REG_CFA_ADJUST_CFA and REG_CFA_RESTORE.\n+\n 2013-05-29  Lawrence Crowl  <crowl@google.com>\n \n \t* config/arm/t-arm: Update for below."}, {"sha": "ac41d93ae1e43c2d78aff3b643969aef9265dfe1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 98, "deletions": 18, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cccc15b70ec9a7afba448343c98c8c3eacf506/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cccc15b70ec9a7afba448343c98c8c3eacf506/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c1cccc15b70ec9a7afba448343c98c8c3eacf506", "patch": "@@ -17135,6 +17135,19 @@ emit_multi_reg_push (unsigned long mask)\n   return par;\n }\n \n+/* Add a REG_CFA_ADJUST_CFA REG note to INSN.\n+   SIZE is the offset to be adjusted.\n+   DEST and SRC might be stack_pointer_rtx or hard_frame_pointer_rtx.  */\n+static void\n+arm_add_cfa_adjust_cfa_note (rtx insn, int size, rtx dest, rtx src)\n+{\n+  rtx dwarf;\n+\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+  dwarf = gen_rtx_SET (VOIDmode, dest, plus_constant (Pmode, src, size));\n+  add_reg_note (insn, REG_CFA_ADJUST_CFA, dwarf);\n+}\n+\n /* Generate and emit an insn pattern that we will recognize as a pop_multi.\n    SAVED_REGS_MASK shows which registers need to be restored.\n \n@@ -17225,6 +17238,9 @@ arm_emit_multi_reg_pop (unsigned long saved_regs_mask)\n     par = emit_insn (par);\n \n   REG_NOTES (par) = dwarf;\n+  if (!return_in_pc)\n+    arm_add_cfa_adjust_cfa_note (par, UNITS_PER_WORD * num_regs,\n+\t\t\t\t stack_pointer_rtx, stack_pointer_rtx);\n }\n \n /* Generate and emit an insn pattern that we will recognize as a pop_multi\n@@ -17295,6 +17311,9 @@ arm_emit_vfp_multi_reg_pop (int first_reg, int num_regs, rtx base_reg)\n \n   par = emit_insn (par);\n   REG_NOTES (par) = dwarf;\n+\n+  arm_add_cfa_adjust_cfa_note (par, 2 * UNITS_PER_WORD * num_regs,\n+\t\t\t       base_reg, base_reg);\n }\n \n /* Generate and emit a pattern that will be recognized as LDRD pattern.  If even\n@@ -17370,6 +17389,7 @@ thumb2_emit_ldrd_pop (unsigned long saved_regs_mask)\n                pattern can be emitted now.  */\n             par = emit_insn (par);\n             REG_NOTES (par) = dwarf;\n+\t    RTX_FRAME_RELATED_P (par) = 1;\n           }\n \n         i++;\n@@ -17386,7 +17406,12 @@ thumb2_emit_ldrd_pop (unsigned long saved_regs_mask)\n                      stack_pointer_rtx,\n                      plus_constant (Pmode, stack_pointer_rtx, 4 * i));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n-  emit_insn (tmp);\n+  tmp = emit_insn (tmp);\n+  if (!return_in_pc)\n+    {\n+      arm_add_cfa_adjust_cfa_note (tmp, UNITS_PER_WORD * i,\n+\t\t\t\t   stack_pointer_rtx, stack_pointer_rtx);\n+    }\n \n   dwarf = NULL_RTX;\n \n@@ -17420,9 +17445,11 @@ thumb2_emit_ldrd_pop (unsigned long saved_regs_mask)\n       else\n         {\n           par = emit_insn (tmp);\n+\t  REG_NOTES (par) = dwarf;\n+\t  arm_add_cfa_adjust_cfa_note (par, UNITS_PER_WORD,\n+\t\t\t\t       stack_pointer_rtx, stack_pointer_rtx);\n         }\n \n-      REG_NOTES (par) = dwarf;\n     }\n   else if ((num_regs % 2) == 1 && return_in_pc)\n     {\n@@ -24299,6 +24326,7 @@ arm_expand_epilogue (bool really_return)\n \n   if (frame_pointer_needed)\n     {\n+      rtx insn;\n       /* Restore stack pointer if necessary.  */\n       if (TARGET_ARM)\n         {\n@@ -24309,9 +24337,12 @@ arm_expand_epilogue (bool really_return)\n           /* Force out any pending memory operations that reference stacked data\n              before stack de-allocation occurs.  */\n           emit_insn (gen_blockage ());\n-          emit_insn (gen_addsi3 (stack_pointer_rtx,\n-                                 hard_frame_pointer_rtx,\n-                                 GEN_INT (amount)));\n+\t  insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t    hard_frame_pointer_rtx,\n+\t\t\t    GEN_INT (amount)));\n+\t  arm_add_cfa_adjust_cfa_note (insn, amount,\n+\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t       hard_frame_pointer_rtx);\n \n           /* Emit USE(stack_pointer_rtx) to ensure that stack adjustment is not\n              deleted.  */\n@@ -24321,16 +24352,25 @@ arm_expand_epilogue (bool really_return)\n         {\n           /* In Thumb-2 mode, the frame pointer points to the last saved\n              register.  */\n-          amount = offsets->locals_base - offsets->saved_regs;\n-          if (amount)\n-            emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n-                                   hard_frame_pointer_rtx,\n-                                   GEN_INT (amount)));\n+\t  amount = offsets->locals_base - offsets->saved_regs;\n+\t  if (amount)\n+\t    {\n+\t      insn = emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n+\t\t\t\thard_frame_pointer_rtx,\n+\t\t\t\tGEN_INT (amount)));\n+\t      arm_add_cfa_adjust_cfa_note (insn, amount,\n+\t\t\t\t\t   hard_frame_pointer_rtx,\n+\t\t\t\t\t   hard_frame_pointer_rtx);\n+\t    }\n \n           /* Force out any pending memory operations that reference stacked data\n              before stack de-allocation occurs.  */\n           emit_insn (gen_blockage ());\n-          emit_insn (gen_movsi (stack_pointer_rtx, hard_frame_pointer_rtx));\n+\t  insn = emit_insn (gen_movsi (stack_pointer_rtx,\n+\t\t\t\t       hard_frame_pointer_rtx));\n+\t  arm_add_cfa_adjust_cfa_note (insn, 0,\n+\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t       hard_frame_pointer_rtx);\n           /* Emit USE(stack_pointer_rtx) to ensure that stack adjustment is not\n              deleted.  */\n           emit_insn (gen_force_register_use (stack_pointer_rtx));\n@@ -24343,12 +24383,15 @@ arm_expand_epilogue (bool really_return)\n       amount = offsets->outgoing_args - offsets->saved_regs;\n       if (amount)\n         {\n+\t  rtx tmp;\n           /* Force out any pending memory operations that reference stacked data\n              before stack de-allocation occurs.  */\n           emit_insn (gen_blockage ());\n-          emit_insn (gen_addsi3 (stack_pointer_rtx,\n-                                 stack_pointer_rtx,\n-                                 GEN_INT (amount)));\n+\t  tmp = emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t       GEN_INT (amount)));\n+\t  arm_add_cfa_adjust_cfa_note (tmp, amount,\n+\t\t\t\t       stack_pointer_rtx, stack_pointer_rtx);\n           /* Emit USE(stack_pointer_rtx) to ensure that stack adjustment is\n              not deleted.  */\n           emit_insn (gen_force_register_use (stack_pointer_rtx));\n@@ -24401,6 +24444,8 @@ arm_expand_epilogue (bool really_return)\n           REG_NOTES (insn) = alloc_reg_note (REG_CFA_RESTORE,\n                                              gen_rtx_REG (V2SImode, i),\n                                              NULL_RTX);\n+\t  arm_add_cfa_adjust_cfa_note (insn, UNITS_PER_WORD,\n+\t\t\t\t       stack_pointer_rtx, stack_pointer_rtx);\n         }\n \n   if (saved_regs_mask)\n@@ -24448,6 +24493,9 @@ arm_expand_epilogue (bool really_return)\n                     REG_NOTES (insn) = alloc_reg_note (REG_CFA_RESTORE,\n                                                        gen_rtx_REG (SImode, i),\n                                                        NULL_RTX);\n+\t\t    arm_add_cfa_adjust_cfa_note (insn, UNITS_PER_WORD,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t stack_pointer_rtx);\n                   }\n               }\n         }\n@@ -24472,9 +24520,33 @@ arm_expand_epilogue (bool really_return)\n     }\n \n   if (crtl->args.pretend_args_size)\n-    emit_insn (gen_addsi3 (stack_pointer_rtx,\n-                           stack_pointer_rtx,\n-                           GEN_INT (crtl->args.pretend_args_size)));\n+    {\n+      int i, j;\n+      rtx dwarf = NULL_RTX;\n+      rtx tmp = emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t   stack_pointer_rtx,\n+\t\t\t   GEN_INT (crtl->args.pretend_args_size)));\n+\n+      RTX_FRAME_RELATED_P (tmp) = 1;\n+\n+      if (cfun->machine->uses_anonymous_args)\n+\t{\n+\t  /* Restore pretend args.  Refer arm_expand_prologue on how to save\n+\t     pretend_args in stack.  */\n+\t  int num_regs = crtl->args.pretend_args_size / 4;\n+\t  saved_regs_mask = (0xf0 >> num_regs) & 0xf;\n+\t  for (j = 0, i = 0; j < num_regs; i++)\n+\t    if (saved_regs_mask & (1 << i))\n+\t      {\n+\t\trtx reg = gen_rtx_REG (SImode, i);\n+\t\tdwarf = alloc_reg_note (REG_CFA_RESTORE, reg, dwarf);\n+\t\tj++;\n+\t      }\n+\t  REG_NOTES (tmp) = dwarf;\n+\t}\n+      arm_add_cfa_adjust_cfa_note (tmp, crtl->args.pretend_args_size,\n+\t\t\t\t   stack_pointer_rtx, stack_pointer_rtx);\n+    }\n \n   if (!really_return)\n     return;\n@@ -26142,9 +26214,17 @@ arm_unwind_emit (FILE * asm_out_file, rtx insn)\n \t  handled_one = true;\n \t  break;\n \n+\t/* The INSN is generated in epilogue.  It is set as RTX_FRAME_RELATED_P\n+\t   to get correct dwarf information for shrink-wrap.  We should not\n+\t   emit unwind information for it because these are used either for\n+\t   pretend arguments or notes to adjust sp and restore registers from\n+\t   stack.  */\n+\tcase REG_CFA_ADJUST_CFA:\n+\tcase REG_CFA_RESTORE:\n+\t  return;\n+\n \tcase REG_CFA_DEF_CFA:\n \tcase REG_CFA_EXPRESSION:\n-\tcase REG_CFA_ADJUST_CFA:\n \tcase REG_CFA_OFFSET:\n \t  /* ??? Only handling here what we actually emit.  */\n \t  gcc_unreachable ();"}]}