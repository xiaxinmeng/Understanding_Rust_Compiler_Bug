{"sha": "418e920fc6c08a3f9b20a6996980c7380cbac67c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE4ZTkyMGZjNmMwOGEzZjliMjBhNjk5Njk4MGM3MzgwY2JhYzY3Yw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-27T21:52:39Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-27T21:52:39Z"}, "message": "rtl.def (DEBUG_INSN, [...]): Swap operands 4 and 5.\n\n\t* rtl.def (DEBUG_INSN, INSN, JUMP_INSN, CALL_INSN, NOTE): Swap operands\n\t4 and 5.\n\t* rtl.h (PATTERN, INSN_LOCATOR, NOTE_DATA, NOTE_DELETED_LABEL_NAME,\n\tNOTE_BLOCK, NOTE_EH_HANDLER, NOTE_BASIC_BLOCK, NOTE_VAR_LOCATION,\n\tNOTE_KIND, LABEL_NUSES, LABEL_REFS): Adjust accordingly.\n\t* gengtype.c (adjust_field_rtx_def): Swap operands 4 and 5 of\n\tCODE_LABELs and NOTEs.\n\t* caller-save.c (init_caller_save): Fix up gen_rtx_INSN call.\n\t* combine.c (try_combine): Likewise.\n\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n\t* print-rtl.c (print_rtx): Start REG_NOTES on a new line.\n\nFrom-SVN: r162602", "tree": {"sha": "c3ffb1e215f4907529c744c4900ca89040e35856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3ffb1e215f4907529c744c4900ca89040e35856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/418e920fc6c08a3f9b20a6996980c7380cbac67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418e920fc6c08a3f9b20a6996980c7380cbac67c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418e920fc6c08a3f9b20a6996980c7380cbac67c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418e920fc6c08a3f9b20a6996980c7380cbac67c/comments", "author": null, "committer": null, "parents": [{"sha": "5f20c6574d02381a0d928beda3eff69dc00af1cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f20c6574d02381a0d928beda3eff69dc00af1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f20c6574d02381a0d928beda3eff69dc00af1cb"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "438f2db9df2d956b264a2dc1fc8a666a54403022", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -1,3 +1,17 @@\n+2010-07-27  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* rtl.def (DEBUG_INSN, INSN, JUMP_INSN, CALL_INSN, NOTE): Swap operands\n+\t4 and 5.\n+\t* rtl.h (PATTERN, INSN_LOCATOR, NOTE_DATA, NOTE_DELETED_LABEL_NAME,\n+\tNOTE_BLOCK, NOTE_EH_HANDLER, NOTE_BASIC_BLOCK, NOTE_VAR_LOCATION,\n+\tNOTE_KIND, LABEL_NUSES, LABEL_REFS): Adjust accordingly.\n+\t* gengtype.c (adjust_field_rtx_def): Swap operands 4 and 5 of\n+\tCODE_LABELs and NOTEs.\n+\t* caller-save.c (init_caller_save): Fix up gen_rtx_INSN call.\n+\t* combine.c (try_combine): Likewise.\n+\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n+\t* print-rtl.c (print_rtx): Start REG_NOTES on a new line.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* coretypes.h (struct cl_option_handlers): Declare."}, {"sha": "af9b2da8975bd2f4f15c5c20ee116421d0ecdf3f", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -263,8 +263,8 @@ init_caller_save (void)\n   savepat = gen_rtx_SET (VOIDmode, test_mem, test_reg);\n   restpat = gen_rtx_SET (VOIDmode, test_reg, test_mem);\n \n-  saveinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, 0, savepat, -1, 0);\n-  restinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, 0, restpat, -1, 0);\n+  saveinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, savepat, 0, -1, 0);\n+  restinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, restpat, 0, -1, 0);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     for (j = 1; j <= MOVE_MAX_WORDS; j++)"}, {"sha": "ad96e031c7318b1cabe96591b7ec3cdc7a00e961", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -2662,8 +2662,8 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t     as I2 will not cause a problem.  */\n \n \t  i1 = gen_rtx_INSN (VOIDmode, INSN_UID (i2), NULL_RTX, i2,\n-\t\t\t     BLOCK_FOR_INSN (i2), INSN_LOCATOR (i2),\n-\t\t\t     XVECEXP (PATTERN (i2), 0, 1), -1, NULL_RTX);\n+\t\t\t     BLOCK_FOR_INSN (i2), XVECEXP (PATTERN (i2), 0, 1),\n+\t\t\t     INSN_LOCATOR (i2), -1, NULL_RTX);\n \n \t  SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));\n \t  SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),"}, {"sha": "b26476d50f07ed716bcbaec687968879565459aa", "filename": "gcc/gengtype.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -1105,16 +1105,16 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t\tt = mem_attrs_tp, subname = \"rt_mem\";\n \t      else if (i == JUMP_INSN && aindex == 8)\n \t\tt = rtx_tp, subname = \"rt_rtx\";\n-\t      else if (i == CODE_LABEL && aindex == 4)\n-\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == CODE_LABEL && aindex == 5)\n+\t\tt = scalar_tp, subname = \"rt_int\";\n+\t      else if (i == CODE_LABEL && aindex == 4)\n \t\tt = rtx_tp, subname = \"rt_rtx\";\n \t      else if (i == LABEL_REF\n \t\t       && (aindex == 1 || aindex == 2))\n \t\tt = rtx_tp, subname = \"rt_rtx\";\n-\t      else if (i == NOTE && aindex == 4)\n-\t\tt = note_union_tp, subname = \"\";\n \t      else if (i == NOTE && aindex == 5)\n+\t\tt = note_union_tp, subname = \"\";\n+\t      else if (i == NOTE && aindex == 4)\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == NOTE && aindex >= 7)\n \t\tt = scalar_tp, subname = \"rt_int\";"}, {"sha": "36d6e61b6ef1bc0dac678b85b3064d8e97ad5842", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -1211,7 +1211,7 @@ setup_prohibited_mode_move_regs (void)\n   test_reg1 = gen_rtx_REG (VOIDmode, 0);\n   test_reg2 = gen_rtx_REG (VOIDmode, 0);\n   move_pat = gen_rtx_SET (VOIDmode, test_reg1, test_reg2);\n-  move_insn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, 0, move_pat, -1, 0);\n+  move_insn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, move_pat, 0, -1, 0);\n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n       SET_HARD_REG_SET (ira_prohibited_mode_move_regs[i]);"}, {"sha": "8801a88153e3cde4d867b46009cb63c7b88576cc", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -333,6 +333,10 @@ print_rtx (const_rtx in_rtx)\n       case 'e':\n       do_e:\n \tindent += 2;\n+\tif (i == 7 && INSN_P (in_rtx))\n+\t  /* Put REG_NOTES on their own line.  */\n+\t  fprintf (outfile, \"\\n%s%*s\",\n+\t\t   print_rtx_head, indent * 2, \"\");\n \tif (!sawclose)\n \t  fprintf (outfile, \" \");\n \tprint_rtx (XEXP (in_rtx, i));\n@@ -378,7 +382,7 @@ print_rtx (const_rtx in_rtx)\n \tbreak;\n \n       case 'i':\n-\tif (i == 4 && INSN_P (in_rtx))\n+\tif (i == 5 && INSN_P (in_rtx))\n \t  {\n #ifndef GENERATOR_FILE\n \t    /*  Pretty-print insn locators.  Ignore scoping as it is mostly"}, {"sha": "7c38fce706f2840cb35bac12ccc8eaf81b53688d", "filename": "gcc/rtl.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -123,21 +123,21 @@ DEF_RTL_EXPR(ADDRESS, \"address\", \"e\", RTX_MATCH)\n    ---------------------------------------------------------------------- */\n \n /* An annotation for variable assignment tracking.  */\n-DEF_RTL_EXPR(DEBUG_INSN, \"debug_insn\", \"iuuBieie\", RTX_INSN)\n+DEF_RTL_EXPR(DEBUG_INSN, \"debug_insn\", \"iuuBeiie\", RTX_INSN)\n \n /* An instruction that cannot jump.  */\n-DEF_RTL_EXPR(INSN, \"insn\", \"iuuBieie\", RTX_INSN)\n+DEF_RTL_EXPR(INSN, \"insn\", \"iuuBeiie\", RTX_INSN)\n \n /* An instruction that can possibly jump.\n    Fields ( rtx->u.fld[] ) have exact same meaning as INSN's.  */\n-DEF_RTL_EXPR(JUMP_INSN, \"jump_insn\", \"iuuBieie0\", RTX_INSN)\n+DEF_RTL_EXPR(JUMP_INSN, \"jump_insn\", \"iuuBeiie0\", RTX_INSN)\n \n /* An instruction that can possibly call a subroutine\n    but which will not change which instruction comes next\n    in the current function.\n    Field ( rtx->u.fld[8] ) is CALL_INSN_FUNCTION_USAGE.\n    All other fields ( rtx->u.fld[] ) have exact same meaning as INSN's.  */\n-DEF_RTL_EXPR(CALL_INSN, \"call_insn\", \"iuuBieiee\", RTX_INSN)\n+DEF_RTL_EXPR(CALL_INSN, \"call_insn\", \"iuuBeiiee\", RTX_INSN)\n \n /* A marker that indicates that control will not flow through.  */\n DEF_RTL_EXPR(BARRIER, \"barrier\", \"iuu00000\", RTX_EXTRA)\n@@ -155,7 +155,7 @@ DEF_RTL_EXPR(CODE_LABEL, \"code_label\", \"iuuB00is\", RTX_EXTRA)\n    4: note-specific data\n    5: enum insn_note\n    6: unique number if insn_note == note_insn_deleted_label.  */\n-DEF_RTL_EXPR(NOTE, \"note\", \"iuuB0ni\", RTX_EXTRA)\n+DEF_RTL_EXPR(NOTE, \"note\", \"iuuBn0i\", RTX_EXTRA)\n \n /* ----------------------------------------------------------------------\n    Top level constituents of INSN, JUMP_INSN and CALL_INSN."}, {"sha": "4dc9b48d4cfb73f613926d050087e961abf9ec04", "filename": "gcc/rtl.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418e920fc6c08a3f9b20a6996980c7380cbac67c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=418e920fc6c08a3f9b20a6996980c7380cbac67c", "patch": "@@ -757,15 +757,17 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n #define NEXT_INSN(INSN)\tXEXP (INSN, 2)\n \n #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)\n-#define INSN_LOCATOR(INSN) XINT (INSN, 4)\n+\n+/* The body of an insn.  */\n+#define PATTERN(INSN)\tXEXP (INSN, 4)\n+\n+#define INSN_LOCATOR(INSN) XINT (INSN, 5)\n /* LOCATION of an RTX if relevant.  */\n #define RTL_LOCATION(X) (INSN_P (X) ? \\\n \t\t\t locator_location (INSN_LOCATOR (X)) \\\n \t\t\t : UNKNOWN_LOCATION)\n /* LOCATION of current INSN.  */\n #define CURR_INSN_LOCATION (locator_location (curr_insn_locator ()))\n-/* The body of an insn.  */\n-#define PATTERN(INSN)\tXEXP (INSN, 5)\n \n /* Code number of instruction, from when it was recognized.\n    -1 means this instruction has not been recognized yet.  */\n@@ -869,17 +871,17 @@ extern const char * const reg_note_name[];\n    */\n \n /* Opaque data.  */\n-#define NOTE_DATA(INSN)\t        RTL_CHECKC1 (INSN, 4, NOTE)\n-#define NOTE_DELETED_LABEL_NAME(INSN) XCSTR (INSN, 4, NOTE)\n+#define NOTE_DATA(INSN)\t        RTL_CHECKC1 (INSN, 5, NOTE)\n+#define NOTE_DELETED_LABEL_NAME(INSN) XCSTR (INSN, 5, NOTE)\n #define SET_INSN_DELETED(INSN) set_insn_deleted (INSN);\n-#define NOTE_BLOCK(INSN)\tXCTREE (INSN, 4, NOTE)\n-#define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 4, NOTE)\n-#define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 4, NOTE)\n-#define NOTE_VAR_LOCATION(INSN)\tXCEXP (INSN, 4, NOTE)\n+#define NOTE_BLOCK(INSN)\tXCTREE (INSN, 5, NOTE)\n+#define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 5, NOTE)\n+#define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 5, NOTE)\n+#define NOTE_VAR_LOCATION(INSN)\tXCEXP (INSN, 5, NOTE)\n \n /* In a NOTE that is a line number, this is the line number.\n    Other kinds of NOTEs are identified by negative numbers here.  */\n-#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)\n+#define NOTE_KIND(INSN) XCINT (INSN, 4, NOTE)\n \n /* Nonzero if INSN is a note marking the beginning of a basic block.  */\n #define NOTE_INSN_BASIC_BLOCK_P(INSN)\t\t\t\\\n@@ -971,7 +973,7 @@ extern const char * const note_insn_name[NOTE_INSN_MAX];\n \n /* In jump.c, each label contains a count of the number\n    of LABEL_REFs that point at it, so unused labels can be deleted.  */\n-#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)\n+#define LABEL_NUSES(RTX) XCINT (RTX, 5, CODE_LABEL)\n \n /* Labels carry a two-bit field composed of the ->jump and ->call\n    bits.  This field indicates whether the label is an alternate\n@@ -1031,7 +1033,7 @@ enum label_kind\n /* Once basic blocks are found, each CODE_LABEL starts a chain that\n    goes through all the LABEL_REFs that jump to that label.  The chain\n    eventually winds up at the CODE_LABEL: it is circular.  */\n-#define LABEL_REFS(LABEL) XCEXP (LABEL, 5, CODE_LABEL)\n+#define LABEL_REFS(LABEL) XCEXP (LABEL, 4, CODE_LABEL)\n \f\n /* For a REG rtx, REGNO extracts the register number.  REGNO can only\n    be used on RHS.  Use SET_REGNO to change the value.  */"}]}