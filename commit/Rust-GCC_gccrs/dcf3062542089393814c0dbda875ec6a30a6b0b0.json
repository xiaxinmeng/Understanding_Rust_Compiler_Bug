{"sha": "dcf3062542089393814c0dbda875ec6a30a6b0b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmMzA2MjU0MjA4OTM5MzgxNGMwZGJkYTg3NWVjNmEzMGE2YjBiMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-12-22T20:49:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-22T20:49:18Z"}, "message": "go-gcc.cc (set_placeholder_pointer_type): Arrange for the type name to have a DECL_ORIGINAL_TYPE as gcc expects.\n\n\t* go-gcc.cc (set_placeholder_pointer_type): Arrange for the type\n\tname to have a DECL_ORIGINAL_TYPE as gcc expects.\n\t(set_placeholder_struct_type): Likewise.\n\t(set_placeholder_array_type): Likewise.\n\t(named_type): Set DECL_ORIGINAL_TYPE.\n\nFrom-SVN: r182639", "tree": {"sha": "ca873071c4c496e6c78949ec498ca1790eb53a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca873071c4c496e6c78949ec498ca1790eb53a15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcf3062542089393814c0dbda875ec6a30a6b0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf3062542089393814c0dbda875ec6a30a6b0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcf3062542089393814c0dbda875ec6a30a6b0b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf3062542089393814c0dbda875ec6a30a6b0b0/comments", "author": null, "committer": null, "parents": [{"sha": "42dfafa935db4f6f368499108307676dbf1317cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42dfafa935db4f6f368499108307676dbf1317cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42dfafa935db4f6f368499108307676dbf1317cc"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "fcd137ba32b86e050bc27d4ba265605abca7cc81", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf3062542089393814c0dbda875ec6a30a6b0b0/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf3062542089393814c0dbda875ec6a30a6b0b0/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=dcf3062542089393814c0dbda875ec6a30a6b0b0", "patch": "@@ -1,3 +1,11 @@\n+2011-12-22  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (set_placeholder_pointer_type): Arrange for the type\n+\tname to have a DECL_ORIGINAL_TYPE as gcc expects.\n+\t(set_placeholder_struct_type): Likewise.\n+\t(set_placeholder_array_type): Likewise.\n+\t(named_type): Set DECL_ORIGINAL_TYPE.\n+\n 2011-12-13  Ian Lance Taylor  <iant@google.com>\n \n \t* go-backend.c: #include \"simple-object.h\" and \"intl.h\"."}, {"sha": "b4ec275057fbca1819263783225a2781753acaa5", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf3062542089393814c0dbda875ec6a30a6b0b0/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf3062542089393814c0dbda875ec6a30a6b0b0/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=dcf3062542089393814c0dbda875ec6a30a6b0b0", "patch": "@@ -619,6 +619,13 @@ Gcc_backend::set_placeholder_pointer_type(Btype* placeholder,\n     }\n   gcc_assert(TREE_CODE(tt) == POINTER_TYPE);\n   TREE_TYPE(pt) = TREE_TYPE(tt);\n+  if (TYPE_NAME(pt) != NULL_TREE)\n+    {\n+      // Build the data structure gcc wants to see for a typedef.\n+      tree copy = build_variant_type_copy(pt);\n+      TYPE_NAME(copy) = NULL_TREE;\n+      DECL_ORIGINAL_TYPE(TYPE_NAME(pt)) = copy;\n+    }\n   return true;\n }\n \n@@ -654,6 +661,12 @@ Gcc_backend::set_placeholder_struct_type(\n   tree t = placeholder->get_tree();\n   gcc_assert(TREE_CODE(t) == RECORD_TYPE && TYPE_FIELDS(t) == NULL_TREE);\n   Btype* r = this->fill_in_struct(placeholder, fields);\n+\n+  // Build the data structure gcc wants to see for a typedef.\n+  tree copy = build_variant_type_copy(t);\n+  TYPE_NAME(copy) = NULL_TREE;\n+  DECL_ORIGINAL_TYPE(TYPE_NAME(t)) = copy;\n+\n   return r->get_tree() != error_mark_node;\n }\n \n@@ -681,6 +694,12 @@ Gcc_backend::set_placeholder_array_type(Btype* placeholder,\n   tree t = placeholder->get_tree();\n   gcc_assert(TREE_CODE(t) == ARRAY_TYPE && TREE_TYPE(t) == NULL_TREE);\n   Btype* r = this->fill_in_array(placeholder, element_btype, length);\n+\n+  // Build the data structure gcc wants to see for a typedef.\n+  tree copy = build_variant_type_copy(t);\n+  TYPE_NAME(copy) = NULL_TREE;\n+  DECL_ORIGINAL_TYPE(TYPE_NAME(t)) = copy;\n+\n   return r->get_tree() != error_mark_node;\n }\n \n@@ -693,12 +712,13 @@ Gcc_backend::named_type(const std::string& name, Btype* btype,\n   tree type = btype->get_tree();\n   if (type == error_mark_node)\n     return this->error_type();\n-  type = build_variant_type_copy(type);\n+  tree copy = build_variant_type_copy(type);\n   tree decl = build_decl(location.gcc_location(), TYPE_DECL,\n \t\t\t get_identifier_from_string(name),\n-\t\t\t type);\n-  TYPE_NAME(type) = decl;\n-  return this->make_type(type);\n+\t\t\t copy);\n+  DECL_ORIGINAL_TYPE(decl) = type;\n+  TYPE_NAME(copy) = decl;\n+  return this->make_type(copy);\n }\n \n // Return a pointer type used as a marker for a circular type."}]}