{"sha": "22422dbf7f0acba7b56b76e8eca995266f1e3c36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0MjJkYmY3ZjBhY2JhN2I1NmI3NmU4ZWNhOTk1MjY2ZjFlM2MzNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-29T03:42:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-29T03:42:12Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1709", "tree": {"sha": "5eea61eb47d32a2067c9bf5c5f333eb53f693220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eea61eb47d32a2067c9bf5c5f333eb53f693220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22422dbf7f0acba7b56b76e8eca995266f1e3c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22422dbf7f0acba7b56b76e8eca995266f1e3c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22422dbf7f0acba7b56b76e8eca995266f1e3c36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22422dbf7f0acba7b56b76e8eca995266f1e3c36/comments", "author": null, "committer": null, "parents": [{"sha": "cfd6bb3d08ca20a2e6fcbe85c3ee1001c8e207b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd6bb3d08ca20a2e6fcbe85c3ee1001c8e207b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd6bb3d08ca20a2e6fcbe85c3ee1001c8e207b8"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "778090ef2845a9436d862d60fc2524e423a7bf8a", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22422dbf7f0acba7b56b76e8eca995266f1e3c36/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22422dbf7f0acba7b56b76e8eca995266f1e3c36/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=22422dbf7f0acba7b56b76e8eca995266f1e3c36", "patch": "@@ -2923,7 +2923,7 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n       if (new_thread && GET_CODE (new_thread) == JUMP_INSN\n \t  && (simplejump_p (new_thread)\n \t      || GET_CODE (PATTERN (new_thread)) == RETURN))\n-\tnew_thread = follow_jumps (JUMP_LABEL (new_thread), 1);\n+\tnew_thread = follow_jumps (JUMP_LABEL (new_thread));\n \n       if (new_thread == 0)\n \tlabel = find_end_label ();\n@@ -3084,7 +3084,7 @@ relax_delay_slots (first)\n       if (GET_CODE (insn) == JUMP_INSN\n \t  && (target_label = JUMP_LABEL (insn)) != 0)\n \t{\n-\t  target_label = follow_jumps (target_label, 1);\n+\t  target_label = follow_jumps (target_label);\n \t  target_label = prev_label (next_active_insn (target_label));\n \n \t  if (target_label == 0)\n@@ -3196,7 +3196,7 @@ relax_delay_slots (first)\n \t{\n \t  /* If this jump goes to another unconditional jump, thread it, but\n \t     don't convert a jump into a RETURN here.  */\n-\t  trial = follow_jumps (target_label, 1);\n+\t  trial = follow_jumps (target_label);\n \t  trial = prev_label (next_active_insn (trial));\n \t  if (trial == 0 && target_label != 0)\n \t    trial = find_end_label ();"}]}