{"sha": "f559447165fa63dde8ece816a834b068ba72e2e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1OTQ0NzE2NWZhNjNkZGU4ZWNlODE2YTgzNGIwNjhiYTcyZTJlNg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-04-15T15:39:19Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-04-15T15:39:19Z"}, "message": "tree-ssa-pre.c (compute_avail): It's okay to have TREE_INVARIANT's here, and value number the resulting expressions.\n\n2005-04-14  Daniel Berlin <dberlin@dberlin.org>\n\n\t* tree-ssa-pre.c (compute_avail): It's okay to have\n\tTREE_INVARIANT's here, and value number the resulting expressions.\n\t(create_expression_by_pieces): Make sure operands that were\n\tmin_invariant when we started, stay that way.\n\nFrom-SVN: r98187", "tree": {"sha": "d67cc52bad68a52d9ce044943f919a395ac5d675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d67cc52bad68a52d9ce044943f919a395ac5d675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f559447165fa63dde8ece816a834b068ba72e2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f559447165fa63dde8ece816a834b068ba72e2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f559447165fa63dde8ece816a834b068ba72e2e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f559447165fa63dde8ece816a834b068ba72e2e6/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cc654b84e89e93b5482339b37345deaa7616588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc654b84e89e93b5482339b37345deaa7616588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc654b84e89e93b5482339b37345deaa7616588"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "3a9a6eb9751217d3fbe0224ce52e26674618efe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f559447165fa63dde8ece816a834b068ba72e2e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f559447165fa63dde8ece816a834b068ba72e2e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f559447165fa63dde8ece816a834b068ba72e2e6", "patch": "@@ -1,3 +1,10 @@\n+2005-04-14  Daniel Berlin <dberlin@dberlin.org>\n+\n+\t* tree-ssa-pre.c (compute_avail): It's okay to have\n+\tTREE_INVARIANT's here, and value number the resulting expressions.\n+\t(create_expression_by_pieces): Make sure operands that were \n+\tmin_invariant when we started, stay that way.\n+\t\n 2005-04-15  David Edelsohn  <edelsohn@gnu.org>\n \n \t* doc/install.texi (*-ibm-aix*): Add comment about system limits."}, {"sha": "2e2788eea1664ec07e3869c35d6d159ffe3f3807", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f559447165fa63dde8ece816a834b068ba72e2e6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f559447165fa63dde8ece816a834b068ba72e2e6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=f559447165fa63dde8ece816a834b068ba72e2e6", "patch": "@@ -950,6 +950,10 @@ phi_translate (tree expr, value_set_t set, basic_block pred,\n     }\n }\n \n+/* For each expression in SET, translate the value handles through phi nodes\n+   in PHIBLOCK using edge PHIBLOCK->PRED, and store the resulting\n+   expressions in DEST.  */\n+\n static void\n phi_translate_set (value_set_t dest, value_set_t set, basic_block pred,\n \t\t   basic_block phiblock)\n@@ -1370,7 +1374,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n     case tcc_unary:\n       {\n \ttree_stmt_iterator tsi;\n-\ttree forced_stmts;\n+\ttree forced_stmts = NULL;\n \ttree genop1;\n \ttree temp;\n \ttree folded;\n@@ -1380,7 +1384,14 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n \tadd_referenced_tmp_var (temp);\n \tfolded = fold (build (TREE_CODE (expr), TREE_TYPE (expr), \n \t\t\t      genop1));\n-\tnewexpr = force_gimple_operand (folded, &forced_stmts, false, NULL);\n+\t/* If the generated operand  is already GIMPLE min_invariant\n+\t   just use it instead of calling force_gimple_operand on it,\n+\t   since that may make it not invariant by copying it into an\n+\t   assignment.  */\n+\tif (!is_gimple_min_invariant (genop1))\n+\t  newexpr = force_gimple_operand (folded, &forced_stmts, false, NULL);\n+\telse\n+\t  newexpr = genop1;\n \tif (forced_stmts)\n \t  {\n \t    tsi = tsi_start (forced_stmts);\n@@ -1963,11 +1974,10 @@ compute_avail (void)\n \t      vuse_optype vuses = STMT_VUSE_OPS (stmt);\n \n \t      STRIP_USELESS_TYPE_CONVERSION (rhs);\n-\t      if ((UNARY_CLASS_P (rhs)\n+\t      if (UNARY_CLASS_P (rhs)\n \t\t  || BINARY_CLASS_P (rhs)\n \t\t  || COMPARISON_CLASS_P (rhs)\n \t\t  || REFERENCE_CLASS_P (rhs))\n-\t\t  && !TREE_INVARIANT (rhs))\n \t\t{\n \t\t  /* For binary, unary, and reference expressions,\n \t\t     create a duplicate expression with the operands\n@@ -1985,6 +1995,7 @@ compute_avail (void)\n \t      else if (TREE_CODE (rhs) == SSA_NAME\n \t\t       || is_gimple_min_invariant (rhs)\n \t\t       || TREE_CODE (rhs) == ADDR_EXPR\n+\t\t       || TREE_INVARIANT (rhs)\n \t\t       || DECL_P (rhs))\n \t\t{\n \t\t  /* Compute a value number for the RHS of the statement"}]}