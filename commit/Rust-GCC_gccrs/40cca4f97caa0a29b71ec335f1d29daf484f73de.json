{"sha": "40cca4f97caa0a29b71ec335f1d29daf484f73de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjY2E0Zjk3Y2FhMGEyOWI3MWVjMzM1ZjFkMjlkYWY0ODRmNzNkZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-11T19:18:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-11T19:18:48Z"}, "message": "re PR target/35540 (Segmentation fault with __builtin_parity() and -O1)\n\n        PR target/35540\n        * config/i386/i386.md (paritysi2, paritydi2): Use register_operand\n        constraint for operand 1.\n        (paritysi2_cmp): Use register_operand constraint for operand 2.\n        Use earlyclobber modifier for operand 1.  Remove support for\n        memory operands.\n        (paritydi2_cmp): Use register_operand constraint for operand 3.\n        Use earlyclobber modifier for operand 1.  Remove support for\n        memory operands.\n\ntestsuite/ChangeLog:\n\n        PR target/35540\n        * gcc.target/i386/pr35540.c: New test.\n\nFrom-SVN: r133118", "tree": {"sha": "6f5396810b36be83ddd678480f6e59437b6271ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5396810b36be83ddd678480f6e59437b6271ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40cca4f97caa0a29b71ec335f1d29daf484f73de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40cca4f97caa0a29b71ec335f1d29daf484f73de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40cca4f97caa0a29b71ec335f1d29daf484f73de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40cca4f97caa0a29b71ec335f1d29daf484f73de/comments", "author": null, "committer": null, "parents": [{"sha": "ec6237e4403c864d94378d7c6bd96a01ff2bc06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6237e4403c864d94378d7c6bd96a01ff2bc06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6237e4403c864d94378d7c6bd96a01ff2bc06e"}], "stats": {"total": 99, "additions": 77, "deletions": 22}, "files": [{"sha": "ccd9abee4ce8bc0fd6de08618337c92895d20742", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40cca4f97caa0a29b71ec335f1d29daf484f73de", "patch": "@@ -1,5 +1,17 @@\n+2008-03-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/35540\n+\t* config/i386/i386.md (paritysi2, paritydi2): Use register_operand\n+\tconstraint for operand 1.\n+\t(paritysi2_cmp): Use register_operand constraint for operand 2.\n+\tUse earlyclobber modifier for operand 1.  Remove support for\n+\tmemory operands.\n+\t(paritydi2_cmp): Use register_operand constraint for operand 3.\n+\tUse earlyclobber modifier for operand 1.  Remove support for\n+\tmemory operands.\n+\n 2008-03-11  Paul Brook  <paul@codesourcery.com>\n-\tVladimir Prus  <vladimir@codesourcery.com>\n+\t    Vladimir Prus  <vladimir@codesourcery.com>\n \n \t* config/arm/arm.c (use_return_insn): Check TARGET_APCS_FRAME.\n \t(arm_compute_save_reg0_reg12_mask): Always"}, {"sha": "17e974d544a6f242ab616012bf2df1caed2c1f7d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=40cca4f97caa0a29b71ec335f1d29daf484f73de", "patch": "@@ -15429,7 +15429,7 @@\n \n (define_expand \"paritydi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(parity:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n+\t(parity:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"! TARGET_POPCNT\"\n {\n   rtx scratch = gen_reg_rtx (QImode);\n@@ -15457,10 +15457,10 @@\n \n (define_insn_and_split \"paritydi2_cmp\"\n   [(set (reg:CC FLAGS_REG)\n-\t(parity:CC (match_operand:DI 3 \"nonimmediate_operand\" \"0,m\")))\n-   (clobber (match_scratch:DI 0 \"=r,X\"))\n-   (clobber (match_scratch:SI 1 \"=r,r\"))\n-   (clobber (match_scratch:HI 2 \"=Q,Q\"))]\n+\t(parity:CC (match_operand:DI 3 \"register_operand\" \"0\")))\n+   (clobber (match_scratch:DI 0 \"=r\"))\n+   (clobber (match_scratch:SI 1 \"=&r\"))\n+   (clobber (match_scratch:HI 2 \"=Q\"))]\n   \"! TARGET_POPCNT\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -15476,20 +15476,18 @@\n {\n   operands[4] = gen_lowpart (SImode, operands[3]);\n \n-  if (MEM_P (operands[3]))\n-    emit_move_insn (operands[1], gen_highpart (SImode, operands[3]));\n-  else if (! TARGET_64BIT)\n-    operands[1] = gen_highpart (SImode, operands[3]);\n-  else\n+  if (TARGET_64BIT)\n     {\n       emit_move_insn (operands[1], gen_lowpart (SImode, operands[3]));\n       emit_insn (gen_lshrdi3 (operands[3], operands[3], GEN_INT (32)));\n     }\n+  else\n+    operands[1] = gen_highpart (SImode, operands[3]);\n })\n \n (define_expand \"paritysi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(parity:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+\t(parity:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"! TARGET_POPCNT\"\n {\n   rtx scratch = gen_reg_rtx (QImode);\n@@ -15508,9 +15506,9 @@\n \n (define_insn_and_split \"paritysi2_cmp\"\n   [(set (reg:CC FLAGS_REG)\n-\t(parity:CC (match_operand:SI 2 \"nonimmediate_operand\" \"0,m\")))\n-   (clobber (match_scratch:SI 0 \"=r,X\"))\n-   (clobber (match_scratch:HI 1 \"=Q,Q\"))]\n+\t(parity:CC (match_operand:SI 2 \"register_operand\" \"0\")))\n+   (clobber (match_scratch:SI 0 \"=r\"))\n+   (clobber (match_scratch:HI 1 \"=&Q\"))]\n   \"! TARGET_POPCNT\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -15525,13 +15523,8 @@\n {\n   operands[3] = gen_lowpart (HImode, operands[2]);\n \n-  if (MEM_P (operands[2]))\n-    emit_move_insn (operands[1], gen_highpart (HImode, operands[2]));\n-  else\n-    {\n-      emit_move_insn (operands[1], gen_lowpart (HImode, operands[2]));\n-      emit_insn (gen_lshrsi3 (operands[2], operands[2], GEN_INT (16)));\n-    }\n+  emit_move_insn (operands[1], gen_lowpart (HImode, operands[2]));\n+  emit_insn (gen_lshrsi3 (operands[2], operands[2], GEN_INT (16)));\n })\n \n (define_insn \"*parityhi2_cmp\""}, {"sha": "1fd06c444a9932fe6daced973533b74034784c6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40cca4f97caa0a29b71ec335f1d29daf484f73de", "patch": "@@ -1,3 +1,8 @@\n+2008-03-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/35540\n+\t* gcc.target/i386/pr35540.c: New test.\n+\n 2008-03-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/inherit/override-attribs.C: Require ilp32 x86 target."}, {"sha": "00af637d0020dff50323353d07f8bbef1c343c43", "filename": "gcc/testsuite/gcc.target/i386/pr35540.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35540.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40cca4f97caa0a29b71ec335f1d29daf484f73de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35540.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35540.c?ref=40cca4f97caa0a29b71ec335f1d29daf484f73de", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+int __attribute__ ((noinline))\n+test (unsigned int *a, int b)\n+{\n+  return b ? 1 : __builtin_parity (*a);\n+}\n+\n+int __attribute__ ((noinline))\n+testl (unsigned long *a, int b)\n+{\n+  return b ? 1 : __builtin_parityl (*a);\n+}\n+\n+int __attribute__ ((noinline))\n+testll (unsigned long long *a, int b)\n+{\n+  return b ? 1 : __builtin_parityll (*a);\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int a = 0;\n+  unsigned long al;\n+  unsigned long long all;\n+\n+  a = 0x12345670;\n+  if (test (&a, 0))\n+    abort ();\n+\n+  al = 0x12345670ul;\n+  if (testl (&al, 0))\n+    abort();\n+\n+#if 1\n+  all = 0x12345678abcdef0ull;\n+  if (testll (&all, 0))\n+    abort ();\n+#endif\n+  return 0;\n+}"}]}