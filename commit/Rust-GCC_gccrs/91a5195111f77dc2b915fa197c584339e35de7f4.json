{"sha": "91a5195111f77dc2b915fa197c584339e35de7f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhNTE5NTExMWY3N2RjMmI5MTVmYTE5N2M1ODQzMzllMzVkZTdmNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-01-25T11:34:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-25T11:34:22Z"}, "message": "sparc.c (output_cbranch): Add default case in enumeration switch.\n\n        * config/sparc/sparc.c (output_cbranch): Add default case in\n        enumeration switch.\n        * reorg.c (insn_sets_resource_p): Correct typo in prototype.\n        (emit_delay_sequence): Eliminate unused parameter, all callers\n        changed.\n        (fill_simple_delay_slots): Likewise.\n        (fill_slots_from_thread): Likewise.\n        (fill_eager_delay_slots):  Likewise.\n        (mark_referenced_resources): Add default case in enumeration switch.\n        (mark_set_resources): Likewise.\n        (rare_destination): Likewise.\n        (mostly_true_jump): Likewise.\n        (find_dead_or_set_registers): Likewise.\n        (redirect_with_delay_slots_safe_p): Remove unused variable `slots'.\n        (update_reg_unused_notes): Remove unused variable `p'.\n        (mark_target_live_regs): Remove unused variables `next' and\n        `jump_count'.\n        (fill_simple_delay_slots): Remove unused variable `j'.\n        (fill_slots_from_thread): Add parentheses around assignment used\n        as truth value.\n        (dbr_schedule): Likewise.\n\nFrom-SVN: r17475", "tree": {"sha": "572e2cea5ea2ef3ed2578e0de91ebdf96c191fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/572e2cea5ea2ef3ed2578e0de91ebdf96c191fe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a5195111f77dc2b915fa197c584339e35de7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a5195111f77dc2b915fa197c584339e35de7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a5195111f77dc2b915fa197c584339e35de7f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a5195111f77dc2b915fa197c584339e35de7f4/comments", "author": null, "committer": null, "parents": [{"sha": "eb1d4d913f9836e84ddc3b275411662282f1c29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1d4d913f9836e84ddc3b275411662282f1c29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1d4d913f9836e84ddc3b275411662282f1c29a"}], "stats": {"total": 105, "additions": 70, "deletions": 35}, "files": [{"sha": "4a5d98765f7256ba387860032423bdd67802ac70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5195111f77dc2b915fa197c584339e35de7f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5195111f77dc2b915fa197c584339e35de7f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91a5195111f77dc2b915fa197c584339e35de7f4", "patch": "@@ -1,5 +1,28 @@\n Sun Jan 25 12:30:18 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* sparc.c (output_cbranch): Add default case in\n+\tenumeration switch.\n+ \n+\t* reorg.c (insn_sets_resource_p): Correct typo in prototype.\n+\t(emit_delay_sequence): Eliminate unused parameter, all callers\n+\tchanged.\n+\t(fill_simple_delay_slots): Likewise.\n+\t(fill_slots_from_thread): Likewise.\n+\t(fill_eager_delay_slots):  Likewise.\n+\t(mark_referenced_resources): Add default case in enumeration switch.\n+\t(mark_set_resources): Likewise.\n+\t(rare_destination): Likewise.\n+\t(mostly_true_jump): Likewise.\n+\t(find_dead_or_set_registers): Likewise.\n+\t(redirect_with_delay_slots_safe_p): Remove unused variable `slots'.\n+\t(update_reg_unused_notes): Remove unused variable `p'.\n+\t(mark_target_live_regs): Remove unused variables `next' and\n+\t`jump_count'.\n+\t(fill_simple_delay_slots): Remove unused variable `j'.\n+\t(fill_slots_from_thread): Add parentheses around assignment used\n+\tas truth value.\n+\t(dbr_schedule): Likewise.\n+\n \t* objc/Make-lang.in (objc.stage1): Depend on stage1-start.\n \t(objc.stage2, objc.stage3, objc.stage4): Likewise.\n "}, {"sha": "7c2721962c37e59d146615ed591414534e1b326a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5195111f77dc2b915fa197c584339e35de7f4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5195111f77dc2b915fa197c584339e35de7f4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=91a5195111f77dc2b915fa197c584339e35de7f4", "patch": "@@ -4406,6 +4406,9 @@ output_cbranch (op, label, reversed, annul, noop)\n     case LTU:\n       strcpy (string, \"blu\");\n       break;\n+\n+    default:\n+      break;\n     }\n \n   /* Now add the annulling, the label, and a possible noop.  */"}, {"sha": "ce834f2c3292c6327a71a08d4940eb11eceec118", "filename": "gcc/reorg.c", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5195111f77dc2b915fa197c584339e35de7f4/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5195111f77dc2b915fa197c584339e35de7f4/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=91a5195111f77dc2b915fa197c584339e35de7f4", "patch": "@@ -230,9 +230,9 @@ static int stop_search_p\tPROTO((rtx, int));\n static int resource_conflicts_p\tPROTO((struct resources *,\n \t\t\t\t       struct resources *));\n static int insn_references_resource_p PROTO((rtx, struct resources *, int));\n-static int insn_sets_resources_p PROTO((rtx, struct resources *, int));\n+static int insn_sets_resource_p PROTO((rtx, struct resources *, int));\n static rtx find_end_label\tPROTO((void));\n-static rtx emit_delay_sequence\tPROTO((rtx, rtx, int, int));\n+static rtx emit_delay_sequence\tPROTO((rtx, rtx, int));\n static rtx add_to_delay_list\tPROTO((rtx, rtx));\n static void delete_from_delay_slot PROTO((rtx));\n static void delete_scheduled_jump PROTO((rtx));\n@@ -265,10 +265,10 @@ static void update_reg_unused_notes PROTO((rtx, rtx));\n static void update_live_status\tPROTO((rtx, rtx));\n static rtx next_insn_no_annul\tPROTO((rtx));\n static void mark_target_live_regs PROTO((rtx, struct resources *));\n-static void fill_simple_delay_slots PROTO((rtx, int));\n+static void fill_simple_delay_slots PROTO((int));\n static rtx fill_slots_from_thread PROTO((rtx, rtx, rtx, rtx, int, int,\n-\t\t\t\t\t int, int, int, int *));\n-static void fill_eager_delay_slots PROTO((rtx));\n+\t\t\t\t\t int, int, int *));\n+static void fill_eager_delay_slots PROTO((void));\n static void relax_delay_slots\tPROTO((rtx));\n static void make_return_insns\tPROTO((rtx));\n static int redirect_with_delay_slots_safe_p PROTO ((rtx, rtx, rtx));\n@@ -469,6 +469,9 @@ mark_referenced_resources (x, res, include_delayed_effects)\n       /* No special processing, just speed up.  */\n       mark_referenced_resources (PATTERN (x), res, include_delayed_effects);\n       return;\n+\n+    default:\n+      break;\n     }\n \n   /* Process each sub-expression and flag what it needs.  */\n@@ -658,6 +661,9 @@ mark_set_resources (x, res, in_dest, include_delayed_effects)\n         for (i = 0; i < HARD_REGNO_NREGS (REGNO (x), GET_MODE (x)); i++)\n \t  SET_HARD_REG_BIT (res->regs, REGNO (x) + i);\n       return;\n+\n+    default:\n+      break;\n     }\n \n   /* Process each sub-expression and flag what it needs.  */\n@@ -861,11 +867,10 @@ find_end_label ()\n    Returns the SEQUENCE that replaces INSN.  */\n \n static rtx\n-emit_delay_sequence (insn, list, length, avail)\n+emit_delay_sequence (insn, list, length)\n      rtx insn;\n      rtx list;\n      int length;\n-     int avail;\n {\n   register int i = 1;\n   register rtx li;\n@@ -1040,7 +1045,7 @@ delete_from_delay_slot (insn)\n   /* If there are any delay insns, remit them.  Otherwise clear the\n      annul flag.  */\n   if (delay_list)\n-    trial = emit_delay_sequence (trial, delay_list, XVECLEN (seq, 0) - 2, 0);\n+    trial = emit_delay_sequence (trial, delay_list, XVECLEN (seq, 0) - 2);\n   else\n     INSN_ANNULLED_BRANCH_P (trial) = 0;\n \n@@ -1332,6 +1337,9 @@ rare_destination (insn)\n \t    next = JUMP_LABEL (insn);\n \t  else\n \t    return 0;\n+\n+\tdefault:\n+\t  break;\n \t}\n     }\n \n@@ -1454,6 +1462,9 @@ mostly_true_jump (jump_insn, condition)\n       if (XEXP (condition, 1) == const0_rtx)\n \treturn 1;\n       break;\n+\n+    default:\n+      break;\n     }\n \n   /* Predict backward branches usually take, forward branches usually not.  If\n@@ -1545,7 +1556,7 @@ static int\n redirect_with_delay_slots_safe_p (jump, newlabel, seq)\n      rtx jump, newlabel, seq;\n {\n-  int flags, slots, i;\n+  int flags, i;\n   rtx pat = PATTERN (seq);\n \n   /* Make sure all the delay slots of this jump would still\n@@ -2392,7 +2403,7 @@ static void\n update_reg_unused_notes (insn, redundant_insn)\n      rtx insn, redundant_insn;\n {\n-  rtx p, link, next;\n+  rtx link, next;\n \n   for (link = REG_NOTES (insn); link; link = next)\n     {\n@@ -2547,6 +2558,9 @@ find_dead_or_set_registers (target, res, jump_target, jump_count, set, needed)\n \t\t    break;\n \t\t}\n \t    }\n+\n+\tdefault:\n+\t  break;\n \t}\n \n       if (GET_CODE (this_jump_insn) == JUMP_INSN)\n@@ -2704,12 +2718,11 @@ mark_target_live_regs (target, res)\n   int b = -1;\n   int i;\n   struct target_info *tinfo;\n-  rtx insn, next;\n+  rtx insn;\n   rtx jump_insn = 0;\n   rtx jump_target;\n   HARD_REG_SET scratch;\n   struct resources set, needed;\n-  int jump_count = 0;\n \n   /* Handle end of function.  */\n   if (target == 0)\n@@ -2972,12 +2985,11 @@ mark_target_live_regs (target, res)\n    through FINAL_SEQUENCE.  */\n \n static void\n-fill_simple_delay_slots (first, non_jumps_p)\n-     rtx first;\n+fill_simple_delay_slots (non_jumps_p)\n      int non_jumps_p;\n {\n   register rtx insn, pat, trial, next_trial;\n-  register int i, j;\n+  register int i;\n   int num_unfilled_slots = unfilled_slots_next - unfilled_slots_base;\n   struct resources needed, set;\n   int slots_to_fill, slots_filled;\n@@ -3323,12 +3335,11 @@ fill_simple_delay_slots (first, non_jumps_p)\n \t\t\t\t    NULL, 1, 1,\n \t\t\t\t    own_thread_p (JUMP_LABEL (insn),\n \t\t\t\t\t\t  JUMP_LABEL (insn), 0),\n-\t\t\t\t    0, slots_to_fill, &slots_filled);\n+\t\t\t\t    slots_to_fill, &slots_filled);\n \n       if (delay_list)\n \tunfilled_slots_base[i]\n-\t  = emit_delay_sequence (insn, delay_list,\n-\t\t\t\t slots_filled, slots_to_fill);\n+\t  = emit_delay_sequence (insn, delay_list, slots_filled);\n \n       if (slots_to_fill == slots_filled)\n \tunfilled_slots_base[i] = 0;\n@@ -3452,14 +3463,14 @@ fill_simple_delay_slots (first, non_jumps_p)\n \n static rtx\n fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n-\t\t\tthread_if_true, own_thread, own_opposite_thread,\n+\t\t\tthread_if_true, own_thread,\n \t\t\tslots_to_fill, pslots_filled)\n      rtx insn;\n      rtx condition;\n      rtx thread, opposite_thread;\n      int likely;\n      int thread_if_true;\n-     int own_thread, own_opposite_thread;\n+     int own_thread;\n      int slots_to_fill, *pslots_filled;\n {\n   rtx new_thread;\n@@ -3542,7 +3553,7 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n \t  /* If TRIAL is redundant with some insn before INSN, we don't\n \t     actually need to add it to the delay list; we can merely pretend\n \t     we did.  */\n-\t  if (prior_insn = redundant_insn (trial, insn, delay_list))\n+\t  if ((prior_insn = redundant_insn (trial, insn, delay_list)))\n \t    {\n \t      fix_reg_dead_note (prior_insn, insn);\n \t      if (own_thread)\n@@ -3842,8 +3853,7 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n    if safe.  */\n \n static void\n-fill_eager_delay_slots (first)\n-     rtx first;\n+fill_eager_delay_slots ()\n {\n   register rtx insn;\n   register int i;\n@@ -3905,7 +3915,7 @@ fill_eager_delay_slots (first)\n \t  delay_list\n \t    = fill_slots_from_thread (insn, condition, insn_at_target,\n \t\t\t\t      fallthrough_insn, prediction == 2, 1,\n-\t\t\t\t      own_target, own_fallthrough,\n+\t\t\t\t      own_target,\n \t\t\t\t      slots_to_fill, &slots_filled);\n \n \t  if (delay_list == 0 && own_fallthrough)\n@@ -3920,7 +3930,7 @@ fill_eager_delay_slots (first)\n \t      delay_list\n \t\t= fill_slots_from_thread (insn, condition, fallthrough_insn,\n \t\t\t\t\t  insn_at_target, 0, 0,\n-\t\t\t\t\t  own_fallthrough, own_target,\n+\t\t\t\t\t  own_fallthrough,\n \t\t\t\t\t  slots_to_fill, &slots_filled);\n \t    }\n \t}\n@@ -3930,21 +3940,20 @@ fill_eager_delay_slots (first)\n \t    delay_list\n \t      = fill_slots_from_thread (insn, condition, fallthrough_insn,\n \t\t\t\t\tinsn_at_target, 0, 0,\n-\t\t\t\t\town_fallthrough, own_target,\n+\t\t\t\t\town_fallthrough,\n \t\t\t\t\tslots_to_fill, &slots_filled);\n \n \t  if (delay_list == 0)\n \t    delay_list\n \t      = fill_slots_from_thread (insn, condition, insn_at_target,\n \t\t\t\t\tnext_active_insn (insn), 0, 1,\n-\t\t\t\t\town_target, own_fallthrough,\n+\t\t\t\t\town_target,\n \t\t\t\t\tslots_to_fill, &slots_filled);\n \t}\n \n       if (delay_list)\n \tunfilled_slots_base[i]\n-\t  = emit_delay_sequence (insn, delay_list,\n-\t\t\t\t slots_filled, slots_to_fill);\n+\t  = emit_delay_sequence (insn, delay_list, slots_filled);\n \n       if (slots_to_fill == slots_filled)\n \tunfilled_slots_base[i] = 0;\n@@ -4389,8 +4398,8 @@ make_return_insns (first)\n   if (--LABEL_NUSES (real_return_label) == 0)\n     delete_insn (real_return_label);\n \n-  fill_simple_delay_slots (first, 1);\n-  fill_simple_delay_slots (first, 0);\n+  fill_simple_delay_slots (1);\n+  fill_simple_delay_slots (0);\n }\n #endif\n \f\n@@ -4524,7 +4533,7 @@ dbr_schedule (first, file)\n \n   start_of_epilogue_needs = end_of_function_needs;\n \n-  while (epilogue_insn = next_nonnote_insn (epilogue_insn))\n+  while ((epilogue_insn = next_nonnote_insn (epilogue_insn)))\n     mark_set_resources (epilogue_insn, &end_of_function_needs, 0, 1);\n \n   /* Show we haven't computed an end-of-function label yet.  */\n@@ -4551,9 +4560,9 @@ dbr_schedule (first, file)\n        reorg_pass_number < MAX_REORG_PASSES;\n        reorg_pass_number++)\n     {\n-      fill_simple_delay_slots (first, 1);\n-      fill_simple_delay_slots (first, 0);\n-      fill_eager_delay_slots (first);\n+      fill_simple_delay_slots (1);\n+      fill_simple_delay_slots (0);\n+      fill_eager_delay_slots ();\n       relax_delay_slots (first);\n     }\n "}]}