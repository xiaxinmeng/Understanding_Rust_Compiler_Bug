{"sha": "9016e54390cedd1b765ea6887538d8bfb9d2f8d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxNmU1NDM5MGNlZGQxYjc2NWVhNjg4NzUzOGQ4YmZiOWQyZjhkNg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-11-02T19:34:16Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-11-02T19:34:16Z"}, "message": "builtins.c (apply_args_size): Handle vector arguments.\n\n        * builtins.c (apply_args_size): Handle vector arguments.\n        (apply_result_size): Same.\n\n\t  * machmode.def: Set WIDER mode field for all vector entries.\n\nFrom-SVN: r46718", "tree": {"sha": "4224b6d4e8b546b28082518363df73ad2731797c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4224b6d4e8b546b28082518363df73ad2731797c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9016e54390cedd1b765ea6887538d8bfb9d2f8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9016e54390cedd1b765ea6887538d8bfb9d2f8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9016e54390cedd1b765ea6887538d8bfb9d2f8d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9016e54390cedd1b765ea6887538d8bfb9d2f8d6/comments", "author": null, "committer": null, "parents": [{"sha": "729e3d3f015075bf124a0104d6a6aada347806c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729e3d3f015075bf124a0104d6a6aada347806c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729e3d3f015075bf124a0104d6a6aada347806c3"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "d1eeda9f5f2b5dab39cd2905153f8688ae698ce3", "filename": "gcc/builtins.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9016e54390cedd1b765ea6887538d8bfb9d2f8d6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9016e54390cedd1b765ea6887538d8bfb9d2f8d6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9016e54390cedd1b765ea6887538d8bfb9d2f8d6", "patch": "@@ -836,6 +836,22 @@ apply_args_size ()\n \t\t    && have_insn_for (SET, mode))\n \t\t  best_mode = mode;\n \n+\t    if (best_mode == VOIDmode)\n+\t      for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_FLOAT);\n+\t\t   mode != VOIDmode;\n+\t\t   mode = GET_MODE_WIDER_MODE (mode))\n+\t\tif (HARD_REGNO_MODE_OK (regno, mode)\n+\t\t    && have_insn_for (SET, mode))\n+\t\t  best_mode = mode;\n+\n+\t    if (best_mode == VOIDmode)\n+\t      for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_INT);\n+\t\t   mode != VOIDmode;\n+\t\t   mode = GET_MODE_WIDER_MODE (mode))\n+\t\tif (HARD_REGNO_MODE_OK (regno, mode)\n+\t\t    && have_insn_for (SET, mode))\n+\t\t  best_mode = mode;\n+\n \t    mode = best_mode;\n \t    if (mode == VOIDmode)\n \t      abort ();\n@@ -892,6 +908,22 @@ apply_result_size ()\n \t\t    && have_insn_for (SET, mode))\n \t\t  best_mode = mode;\n \n+\t    if (best_mode == VOIDmode)\n+\t      for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_FLOAT);\n+\t\t   mode != VOIDmode;\n+\t\t   mode = GET_MODE_WIDER_MODE (mode))\n+\t\tif (HARD_REGNO_MODE_OK (regno, mode)\n+\t\t    && have_insn_for (SET, mode))\n+\t\t      best_mode = mode;\n+\n+\t    if (best_mode == VOIDmode)\n+\t      for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_INT);\n+\t\t   mode != VOIDmode;\n+\t\t   mode = GET_MODE_WIDER_MODE (mode))\n+\t\tif (HARD_REGNO_MODE_OK (regno, mode)\n+\t\t    && have_insn_for (SET, mode))\n+\t\t  best_mode = mode;\n+\n \t    mode = best_mode;\n \t    if (mode == VOIDmode)\n \t      abort ();"}, {"sha": "f84c2e7149d76f0c74eaa4ad272d7851f5026688", "filename": "gcc/machmode.def", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9016e54390cedd1b765ea6887538d8bfb9d2f8d6/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9016e54390cedd1b765ea6887538d8bfb9d2f8d6/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=9016e54390cedd1b765ea6887538d8bfb9d2f8d6", "patch": "@@ -108,30 +108,33 @@ DEF_MACHMODE (COImode, \"COI\", MODE_COMPLEX_INT, BITS_PER_UNIT*64, 64, 32, VOIDmo\n /* Vector modes.  */\n /* There are no V1xx vector modes.  These are equivalent to normal\n    scalar modes.  */\n-DEF_MACHMODE (V2QImode, \"V2QI\", MODE_VECTOR_INT, BITS_PER_UNIT*2, 2, 1, VOIDmode)\n-DEF_MACHMODE (V2HImode, \"V2HI\", MODE_VECTOR_INT, BITS_PER_UNIT*4, 4, 2, VOIDmode)\n-DEF_MACHMODE (V2SImode, \"V2SI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 4, VOIDmode)\n-DEF_MACHMODE (V2DImode, \"V2DI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 8, VOIDmode)\n-\n-DEF_MACHMODE (V4QImode, \"V4QI\", MODE_VECTOR_INT, BITS_PER_UNIT*4, 4, 1, VOIDmode)\n-DEF_MACHMODE (V4HImode, \"V4HI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 2, VOIDmode)\n-DEF_MACHMODE (V4SImode, \"V4SI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 4, VOIDmode)\n-DEF_MACHMODE (V4DImode, \"V4DI\", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 8, VOIDmode)\n-\n-DEF_MACHMODE (V8QImode, \"V8QI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 1, VOIDmode)\n-DEF_MACHMODE (V8HImode, \"V8HI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 2, VOIDmode)\n-DEF_MACHMODE (V8SImode, \"V8SI\", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 4, VOIDmode)\n+/* The wider mode field for vectors follows in order of increasing bit\n+   size with QI coming before HI, HI before SI, and SI before DF\n+   within same bit sizes.  */\n+DEF_MACHMODE (V2QImode, \"V2QI\", MODE_VECTOR_INT, BITS_PER_UNIT*2, 2, 1, V4QImode)\n+DEF_MACHMODE (V2HImode, \"V2HI\", MODE_VECTOR_INT, BITS_PER_UNIT*4, 4, 2, V8QImode)\n+DEF_MACHMODE (V2SImode, \"V2SI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 4, V16QImode)\n+DEF_MACHMODE (V2DImode, \"V2DI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 8, V8SImode)\n+\n+DEF_MACHMODE (V4QImode, \"V4QI\", MODE_VECTOR_INT, BITS_PER_UNIT*4, 4, 1, V2HImode)\n+DEF_MACHMODE (V4HImode, \"V4HI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 2, V2SImode)\n+DEF_MACHMODE (V4SImode, \"V4SI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 4, V2DImode)\n+DEF_MACHMODE (V4DImode, \"V4DI\", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 8, V8DImode)\n+\n+DEF_MACHMODE (V8QImode, \"V8QI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 1, V4HImode)\n+DEF_MACHMODE (V8HImode, \"V8HI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 2, V4SImode)\n+DEF_MACHMODE (V8SImode, \"V8SI\", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 4, V4DImode)\n DEF_MACHMODE (V8DImode, \"V8DI\", MODE_VECTOR_INT, BITS_PER_UNIT*64, 64, 8, VOIDmode)\n \n-DEF_MACHMODE (V16QImode, \"V16QI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 1, VOIDmode)\n+DEF_MACHMODE (V16QImode, \"V16QI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 1, V8HImode)\n \n-DEF_MACHMODE (V2SFmode, \"V2SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*8, 8, 4, VOIDmode)\n-DEF_MACHMODE (V2DFmode, \"V2DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 8, VOIDmode)\n+DEF_MACHMODE (V2SFmode, \"V2SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*8, 8, 4, V4SFmode)\n+DEF_MACHMODE (V2DFmode, \"V2DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 8, V8SFmode)\n \n-DEF_MACHMODE (V4SFmode, \"V4SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 4, VOIDmode)\n-DEF_MACHMODE (V4DFmode, \"V4DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 8, VOIDmode)\n+DEF_MACHMODE (V4SFmode, \"V4SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 4, V2DFmode)\n+DEF_MACHMODE (V4DFmode, \"V4DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 8, V8DFmode)\n \n-DEF_MACHMODE (V8SFmode, \"V8SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 4, VOIDmode)\n+DEF_MACHMODE (V8SFmode, \"V8SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 4,V4DFmode)\n DEF_MACHMODE (V8DFmode, \"V8DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*64, 64, 8, VOIDmode)\n \n /* BLKmode is used for structures, arrays, etc."}]}