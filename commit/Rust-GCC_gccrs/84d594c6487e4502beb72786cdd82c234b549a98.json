{"sha": "84d594c6487e4502beb72786cdd82c234b549a98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkNTk0YzY0ODdlNDUwMmJlYjcyNzg2Y2RkODJjMjM0YjU0OWE5OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-02-08T09:52:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-02-08T09:52:11Z"}, "message": "re PR c++/52035 (internal compiler error: tree code \u2018template_type_parm\u2019 is not supported in LTO streams)\n\n\tPR c++/52035\n\t* pt.c (tsubst): Strip uninstantiated typedef.\n\nFrom-SVN: r184000", "tree": {"sha": "94dfb5054a25fdb1f7ebfa1de74bda0ab3a2ea2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94dfb5054a25fdb1f7ebfa1de74bda0ab3a2ea2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84d594c6487e4502beb72786cdd82c234b549a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d594c6487e4502beb72786cdd82c234b549a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d594c6487e4502beb72786cdd82c234b549a98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d594c6487e4502beb72786cdd82c234b549a98/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75685ef74d410e993ed35c43ac76a56f00b4ddaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75685ef74d410e993ed35c43ac76a56f00b4ddaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75685ef74d410e993ed35c43ac76a56f00b4ddaf"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "b506f4bd055657c5a33395ab2e08048d208e9fe5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84d594c6487e4502beb72786cdd82c234b549a98", "patch": "@@ -1,3 +1,8 @@\n+2012-02-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/52035\n+\t* pt.c (tsubst): Strip uninstantiated typedef.\n+\n 2012-02-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52088"}, {"sha": "a0b2a0b0907f0411e13d7805d7581635c82605b4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=84d594c6487e4502beb72786cdd82c234b549a98", "patch": "@@ -11178,7 +11178,9 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t     complain | tf_ignore_bad_quals);\n \t  return r;\n \t}\n-      /* Else we must be instantiating the typedef, so fall through.  */\n+      else\n+\t/* We don't have an instantiation yet, so drop the typedef.  */\n+\tt = DECL_ORIGINAL_TYPE (decl);\n     }\n \n   if (type"}, {"sha": "9f50b24ab3f1f044913b90903ce373f25fe31b97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84d594c6487e4502beb72786cdd82c234b549a98", "patch": "@@ -1,3 +1,8 @@\n+2012-02-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/52035\n+\t* g++.dg/lto/pr52035_0.C: New.\n+\n 2012-02-07  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gfortran.dg/guality/pr41558.f90: Use lp64 instead of hppa*64*-*-*."}, {"sha": "1a13dd92c622fbbdfff870ffab20e330f981ee5b", "filename": "gcc/testsuite/g++.dg/lto/README", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2FREADME?ref=84d594c6487e4502beb72786cdd82c234b549a98", "patch": "@@ -24,9 +24,9 @@ $ g++ -o <executable> a_0.o a_1.o a_2.o\n Tests that do not need more than one file are a special case\n where there is a single file named 'foo_0.C'.\n \n-The only supported dg-lto-do option are 'compile', 'run' and 'link'.\n+The only supported dg-lto-do option are 'assemble', 'run' and 'link'.\n Additionally, these can only be used in the main file.  If\n-'compile' is used, only the individual object files are\n+'assemble' is used, only the individual object files are\n generated.  If 'link' is used, the final executable is generated\n but not executed (in this case, function main() needs to exist\n but it does not need to do anything).  If 'run' is used, the"}, {"sha": "3de4ea57ba902e58d7d2346fb23b84bce2c258e6", "filename": "gcc/testsuite/g++.dg/lto/pr52035_0.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr52035_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d594c6487e4502beb72786cdd82c234b549a98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr52035_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr52035_0.C?ref=84d594c6487e4502beb72786cdd82c234b549a98", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/52035\n+// { dg-lto-do assemble }\n+\n+template <typename T> struct QVector {\n+    typedef T* iterator;\n+    static void insert(int n);\n+    typedef int size_type;\n+};\n+template <typename T> void QVector<T>::insert(size_type n) {}\n+void error()\n+{\n+    int n;\n+    QVector<int>::insert(n);\n+}"}]}