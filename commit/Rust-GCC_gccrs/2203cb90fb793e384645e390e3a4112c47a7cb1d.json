{"sha": "2203cb90fb793e384645e390e3a4112c47a7cb1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwM2NiOTBmYjc5M2UzODQ2NDVlMzkwZTNhNDExMmM0N2E3Y2IxZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-03-05T01:15:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-03-05T01:15:28Z"}, "message": "re PR libstdc++/43813 ([DR1234] vector<T*>(3, NULL) fails to compile)\n\n2012-03-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/43813\n\t* include/bits/stl_iterator_base_types.h (_RequireInputIter): New.\n\t* include/ext/vstring.h (__versa_string<>::__versa_string\n\t(_InputIterator, _InputIterator, const _Alloc&),\n\t__versa_string<>::append(_InputIterator, _InputIterator),\n\t__versa_string<>::assign(_InputIterator, _InputIterator),\n\t__versa_string<>::insert(iterator, _InputIterator,\n\t_InputIterator), __versa_string<>::replace(iterator, iterator,\n\t_InputIterator, _InputIterator)): Use it.\n\t* include/bits/stl_list.h (list<>::list(_InputIterator,\n\t_InputIterator, const allocator_type&), list<>::assign(_InputIterator,\n\t_InputIterator), list<>::insert(iterator, _InputIterator,\n\t_InputIterator)): Likewise.\n\t* include/bits/stl_vector.h (vector<>::vector(_InputIterator,\n\t_InputIterator, const allocator_type&), vector<>::assign(_InputIterator,\n\t_InputIterator), vectort<>::insert(iterator, _InputIterator,\n\t_InputIterator)): Likewise.\n\t* include/bits/stl_deque.h (deque<>::deque(_InputIterator,\n\t_InputIterator, const allocator_type&), deque<>::deque(_InputIterator,\n\t_InputIterator), deque<>::insert(iterator, _InputIterator,\n\t_InputIterator)): Likewise.\n\t* include/bits/stl_bvector.h (vector<>::vector(_InputIterator,\n\t_InputIterator, const allocator_type&), vector<>::deque(_InputIterator,\n\t_InputIterator), vector<>::insert(iterator, _InputIterator,\n\t_InputIterator)): Likewise.\n\t* include/bits/forward_list.h (forward_list<>::forward_list\n\t(_InputIterator, _InputIterator, const allocator_type&),\n\tforward_list<>::assign(_InputIterator, _InputIterator),\n\tforward_list<>::insert_after(const_iterator, _InputIterator,\n\t_InputIterator)): Likewise.\n\t(forward_list<>::_M_initialize_dispatch(,, __true_type): Remove.\n\t(forward_list<>::_M_range_initialize): Add, adjust everywhere.\n\t* include/bits/forward_list.tcc: Adjust.\n\t* include/debug/forward_list: Adjust.\n\t* include/debug/vector: Likewise.\n\t* include/debug/deque: Likewise.\n\t* include/debug/list: Likewise.\n\t* testsuite/ext/vstring/requirements/do_the_right_thing.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/\n\tdo_the_right_thing.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/\n\tdo_the_right_thing.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/\n\tdo_the_right_thing.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/\n\tdo_the_right_thing.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line number.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r184911", "tree": {"sha": "6c290c31ed518698ccc30d08c831ee001d0cde00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c290c31ed518698ccc30d08c831ee001d0cde00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2203cb90fb793e384645e390e3a4112c47a7cb1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2203cb90fb793e384645e390e3a4112c47a7cb1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2203cb90fb793e384645e390e3a4112c47a7cb1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2203cb90fb793e384645e390e3a4112c47a7cb1d/comments", "author": null, "committer": null, "parents": [{"sha": "8e4ac5321ebf94ea8f6e39f436d3efef5fd01dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4ac5321ebf94ea8f6e39f436d3efef5fd01dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4ac5321ebf94ea8f6e39f436d3efef5fd01dd2"}], "stats": {"total": 574, "additions": 494, "deletions": 80}, "files": [{"sha": "5f3f3cddbaa8226554900e94d172f10b5ac12f25", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,3 +1,85 @@\n+2012-03-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/43813\n+\t* include/bits/stl_iterator_base_types.h (_RequireInputIter): New.\n+\t* include/ext/vstring.h (__versa_string<>::__versa_string\n+\t(_InputIterator, _InputIterator, const _Alloc&),\n+\t__versa_string<>::append(_InputIterator, _InputIterator),\n+\t__versa_string<>::assign(_InputIterator, _InputIterator),\n+\t__versa_string<>::insert(iterator, _InputIterator,\n+\t_InputIterator), __versa_string<>::replace(iterator, iterator,\n+\t_InputIterator, _InputIterator)): Use it.\n+\t* include/bits/stl_list.h (list<>::list(_InputIterator,\n+\t_InputIterator, const allocator_type&), list<>::assign(_InputIterator,\n+\t_InputIterator), list<>::insert(iterator, _InputIterator,\n+\t_InputIterator)): Likewise.\n+\t* include/bits/stl_vector.h (vector<>::vector(_InputIterator,\n+\t_InputIterator, const allocator_type&), vector<>::assign(_InputIterator,\n+\t_InputIterator), vectort<>::insert(iterator, _InputIterator,\n+\t_InputIterator)): Likewise.\n+\t* include/bits/stl_deque.h (deque<>::deque(_InputIterator,\n+\t_InputIterator, const allocator_type&), deque<>::deque(_InputIterator,\n+\t_InputIterator), deque<>::insert(iterator, _InputIterator,\n+\t_InputIterator)): Likewise.\n+\t* include/bits/stl_bvector.h (vector<>::vector(_InputIterator,\n+\t_InputIterator, const allocator_type&), vector<>::deque(_InputIterator,\n+\t_InputIterator), vector<>::insert(iterator, _InputIterator,\n+\t_InputIterator)): Likewise.\n+\t* include/bits/forward_list.h (forward_list<>::forward_list\n+\t(_InputIterator, _InputIterator, const allocator_type&),\n+\tforward_list<>::assign(_InputIterator, _InputIterator),\n+\tforward_list<>::insert_after(const_iterator, _InputIterator,\n+\t_InputIterator)): Likewise.\n+\t(forward_list<>::_M_initialize_dispatch(,, __true_type): Remove.\n+\t(forward_list<>::_M_range_initialize): Add, adjust everywhere.\n+\t* include/bits/forward_list.tcc: Adjust.\n+\t* include/debug/forward_list: Adjust.\n+\t* include/debug/vector: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* testsuite/ext/vstring/requirements/do_the_right_thing.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\tdo_the_right_thing.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/\n+\tdo_the_right_thing.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/\n+\tdo_the_right_thing.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/\n+\tdo_the_right_thing.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line number.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2012-03-04  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/52433"}, {"sha": "9ccf7554aaaedf865b9d4f8b4dc7373b550c3232", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // <forward_list.h> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -499,15 +499,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  [@a __first,@a __last).  This is linear in N (where N is\n        *  distance(@a __first,@a __last)).\n        */\n-      template<typename _InputIterator>\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n         forward_list(_InputIterator __first, _InputIterator __last,\n                      const _Alloc& __al = _Alloc())\n \t: _Base(_Node_alloc_type(__al))\n-        {\n-          // Check whether it's an integral type.  If so, it's not an iterator.\n-          typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n-          _M_initialize_dispatch(__first, __last, _Integral());\n-        }\n+        { _M_range_initialize(__first, __last); }\n \n       /**\n        *  @brief  The %forward_list copy constructor.\n@@ -519,7 +516,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       forward_list(const forward_list& __list)\n       : _Base(__list._M_get_Node_allocator())\n-      { _M_initialize_dispatch(__list.begin(), __list.end(), __false_type()); }\n+      { _M_range_initialize(__list.begin(), __list.end()); }\n \n       /**\n        *  @brief  The %forward_list move constructor.\n@@ -544,7 +541,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       forward_list(std::initializer_list<_Tp> __il,\n                    const _Alloc& __al = _Alloc())\n       : _Base(_Node_alloc_type(__al))\n-      { _M_initialize_dispatch(__il.begin(), __il.end(), __false_type()); }\n+      { _M_range_initialize(__il.begin(), __il.end()); }\n \n       /**\n        *  @brief  The forward_list dtor.\n@@ -609,8 +606,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  that the resulting %forward_list's size is the same as the number\n        *  of elements assigned.  Old data may be lost.\n        */\n-      template<typename _InputIterator>\n-        void\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+\tvoid\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n           clear();\n@@ -905,7 +903,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This operation is linear in the number of elements inserted and\n        *  does not invalidate iterators and references.\n        */\n-      template<typename _InputIterator>\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n         iterator\n         insert_after(const_iterator __pos,\n                      _InputIterator __first, _InputIterator __last);\n@@ -1207,16 +1206,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { this->_M_impl._M_head._M_reverse_after(); }\n \n     private:\n-      template<typename _Integer>\n-        void\n-        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n-        { _M_fill_initialize(static_cast<size_type>(__n), __x); }\n-\n       // Called by the range constructor to implement [23.1.1]/9\n       template<typename _InputIterator>\n         void\n-        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n-                               __false_type);\n+        _M_range_initialize(_InputIterator __first, _InputIterator __last);\n \n       // Called by forward_list(n,v,a), and the range constructor when it\n       // turns out to be the same thing."}, {"sha": "99fa3a016096e8fcf9919af8dbc4799d89320151", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // <forward_list.tcc> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -100,8 +100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     template<typename _InputIterator>\n       void\n       forward_list<_Tp, _Alloc>::\n-      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n-                             __false_type)\n+      _M_range_initialize(_InputIterator __first, _InputIterator __last)\n       {\n         _Node_base* __to = &this->_M_impl._M_head;\n         for (; __first != __last; ++__first)\n@@ -111,8 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n           }\n       }\n \n-  // Called by forward_list(n,v,a), and the range constructor\n-  // when it turns out to be the same thing.\n+  // Called by forward_list(n,v,a).\n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::\n@@ -258,7 +256,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    template<typename _InputIterator>\n+    template<typename _InputIterator, typename>\n       typename forward_list<_Tp, _Alloc>::iterator\n       forward_list<_Tp, _Alloc>::\n       insert_after(const_iterator __pos,"}, {"sha": "ec3f83d98d604b39ecc050f16dfd95c16a864d90", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,7 +1,7 @@\n // vector<bool> specialization -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -557,6 +557,14 @@ template<typename _Alloc>\n     }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    template<typename _InputIterator,\n+\t     typename = std::_RequireInputIter<_InputIterator>>\n+      vector(_InputIterator __first, _InputIterator __last,\n+\t     const allocator_type& __a = allocator_type())\n+      : _Base(__a)\n+      { _M_initialize_dispatch(__first, __last, __false_type()); }\n+#else\n     template<typename _InputIterator>\n       vector(_InputIterator __first, _InputIterator __last,\n \t     const allocator_type& __a = allocator_type())\n@@ -565,6 +573,7 @@ template<typename _Alloc>\n \ttypedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t_M_initialize_dispatch(__first, __last, _Integral());\n       }\n+#endif\n \n     ~vector() _GLIBCXX_NOEXCEPT { }\n \n@@ -610,13 +619,21 @@ template<typename _Alloc>\n     assign(size_type __n, const bool& __x)\n     { _M_fill_assign(__n, __x); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    template<typename _InputIterator,\n+\t     typename = std::_RequireInputIter<_InputIterator>>\n+      void\n+      assign(_InputIterator __first, _InputIterator __last)\n+      { _M_assign_dispatch(__first, __last, __false_type()); }\n+#else\n     template<typename _InputIterator>\n       void\n       assign(_InputIterator __first, _InputIterator __last)\n       {\n \ttypedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t_M_assign_dispatch(__first, __last, _Integral());\n       }\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     void\n@@ -806,6 +823,14 @@ template<typename _Alloc>\n       return begin() + __n;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    template<typename _InputIterator,\n+\t     typename = std::_RequireInputIter<_InputIterator>>\n+      void\n+      insert(iterator __position,\n+\t     _InputIterator __first, _InputIterator __last)\n+      { _M_insert_dispatch(__position, __first, __last, __false_type()); }\n+#else\n     template<typename _InputIterator>\n       void\n       insert(iterator __position,\n@@ -814,6 +839,7 @@ template<typename _Alloc>\n \ttypedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t_M_insert_dispatch(__position, __first, __last, _Integral());\n       }\n+#endif\n \n     void\n     insert(iterator __position, size_type __n, const bool& __x)"}, {"sha": "d8904199a7c8e4e7dfa9e80a74ccc0c3618a5a61", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,7 +1,7 @@\n // Deque implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -888,6 +888,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  input iterators are used, then this will do at most 2N calls to the\n        *  copy constructor, and logN memory reallocations.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        deque(_InputIterator __first, _InputIterator __last,\n+\t      const allocator_type& __a = allocator_type())\n+\t: _Base(__a)\n+        { _M_initialize_dispatch(__first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         deque(_InputIterator __first, _InputIterator __last,\n \t      const allocator_type& __a = allocator_type())\n@@ -897,6 +905,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_initialize_dispatch(__first, __last, _Integral());\n \t}\n+#endif\n \n       /**\n        *  The dtor only erases the elements, and note that if the elements\n@@ -979,13 +988,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  resulting %deque's size is the same as the number of elements\n        *  assigned.  Old data may be lost.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        void\n+        assign(_InputIterator __first, _InputIterator __last)\n+        { _M_assign_dispatch(__first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**\n@@ -1510,6 +1527,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  [__first,__last) into the %deque before the location specified\n        *  by @a __position.  This is known as <em>range insert</em>.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        void\n+        insert(iterator __position, _InputIterator __first,\n+\t       _InputIterator __last)\n+        { _M_insert_dispatch(__position, __first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         void\n         insert(iterator __position, _InputIterator __first,\n@@ -1519,6 +1544,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_insert_dispatch(__position, __first, __last, _Integral());\n \t}\n+#endif\n \n       /**\n        *  @brief  Remove element at given position."}, {"sha": "1f56c061df5dbfdf04b3c57fd5a083921ffe7393", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,7 @@\n // Types used in iterator implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+// 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -65,7 +66,7 @@\n #include <bits/c++config.h>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-# include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE\n+# include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE, is_convertible\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -222,6 +223,14 @@ _GLIBCXX_HAS_NESTED_TYPE(iterator_category)\n       { return __it.base(); }\n     };\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _InIter>\n+    using _RequireInputIter = typename\n+      enable_if<is_convertible<typename\n+\t\titerator_traits<_InIter>::iterator_category,\n+\t\t\t       input_iterator_tag>::value>::type;\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "1e760ede693fa258fbaad902c651505f4e12994b", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,7 +1,7 @@\n // List implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -638,6 +638,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  [@a __first,@a __last).  This is linear in N (where N is\n        *  distance(@a __first,@a __last)).\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        list(_InputIterator __first, _InputIterator __last,\n+\t     const allocator_type& __a = allocator_type())\n+\t: _Base(_Node_alloc_type(__a))\n+        { _M_initialize_dispatch(__first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         list(_InputIterator __first, _InputIterator __last,\n \t     const allocator_type& __a = allocator_type())\n@@ -647,6 +655,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_initialize_dispatch(__first, __last, _Integral());\n \t}\n+#endif\n \n       /**\n        *  No explicit dtor needed as the _Base dtor takes care of\n@@ -725,6 +734,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  that the resulting %list's size is the same as the number of\n        *  elements assigned.  Old data may be lost.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        void\n+        assign(_InputIterator __first, _InputIterator __last)\n+        { _M_assign_dispatch(__first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n@@ -733,6 +749,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**\n@@ -1148,7 +1165,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This operation is linear in the number of elements inserted and\n        *  does not invalidate iterators and references.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         void\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)"}, {"sha": "239f8b9dd360218703a2457743e5dc9d5de1b81b", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,7 +1,7 @@\n // Vector implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -383,6 +383,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  used, then this will do at most 2N calls to the copy\n        *  constructor, and logN memory reallocations.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        vector(_InputIterator __first, _InputIterator __last,\n+\t       const allocator_type& __a = allocator_type())\n+\t: _Base(__a)\n+        { _M_initialize_dispatch(__first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         vector(_InputIterator __first, _InputIterator __last,\n \t       const allocator_type& __a = allocator_type())\n@@ -392,6 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_initialize_dispatch(__first, __last, _Integral());\n \t}\n+#endif\n \n       /**\n        *  The dtor only erases the elements, and note that if the\n@@ -497,6 +506,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  that the resulting %vector's size is the same as the number\n        *  of elements assigned.  Old data may be lost.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        void\n+        assign(_InputIterator __first, _InputIterator __last)\n+        { _M_assign_dispatch(__first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n@@ -505,6 +521,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n+#endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**\n@@ -1035,6 +1052,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  %vector and if it is frequently used the user should\n        *  consider using std::list.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        void\n+        insert(iterator __position, _InputIterator __first,\n+\t       _InputIterator __last)\n+        { _M_insert_dispatch(__position, __first, __last, __false_type()); }\n+#else\n       template<typename _InputIterator>\n         void\n         insert(iterator __position, _InputIterator __first,\n@@ -1044,6 +1069,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_insert_dispatch(__position, __first, __last, _Integral());\n \t}\n+#endif\n \n       /**\n        *  @brief  Remove element at given position."}, {"sha": "ce09cb26ab733bcae256c0470cdb68e1795fc5e2", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,7 @@\n // Debugging deque implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n+// 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -88,7 +89,12 @@ namespace __debug\n       : _Base(__n, __value, __a) { }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         deque(_InputIterator __first, _InputIterator __last,\n \t      const _Allocator& __a = _Allocator())\n \t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n@@ -142,7 +148,12 @@ namespace __debug\n       }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n@@ -413,7 +424,12 @@ namespace __debug\n \tthis->_M_invalidate_all();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)"}, {"sha": "9024ff904063d534a2077ac9df25c1b285774ae1", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // <forward_list> -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -91,8 +91,9 @@ namespace __debug\n       : _Base(__n, __value, __al)\n       { }\n \n-      template<typename _InputIterator>\n-        forward_list(_InputIterator __first, _InputIterator __last,\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+\tforward_list(_InputIterator __first, _InputIterator __last,\n                      const _Alloc& __al = _Alloc())\n         : _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n \t\t\t\t\t\t\t\t     __last)),\n@@ -143,8 +144,9 @@ namespace __debug\n         return *this;\n       }\n \n-      template<typename _InputIterator>\n-        void\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+\tvoid\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n@@ -273,7 +275,8 @@ namespace __debug\n \t\t       \tthis);\n       }\n \n-      template<typename _InputIterator>\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n         iterator\n         insert_after(const_iterator __pos,\n                      _InputIterator __first, _InputIterator __last)"}, {"sha": "856ba1a60e2218749cfe1934eb3f4aec757a06bc", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,7 @@\n // Debugging list implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n+// 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -89,14 +90,18 @@ namespace __debug\n       : _Base(__n, __value, __a) { }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n-      list(_InputIterator __first, _InputIterator __last,\n-\t   const _Allocator& __a = _Allocator())\n-      : _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n-\t\t\t\t\t\t\t\t   __last)),\n-              __gnu_debug::__base(__last), __a)\n-      { }\n-\n+#endif\n+\tlist(_InputIterator __first, _InputIterator __last,\n+\t     const _Allocator& __a = _Allocator())\n+\t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n+\t\t\t\t\t\t\t\t     __last)),\n+\t\t__gnu_debug::__base(__last), __a)\n+        { }\n \n       list(const list& __x)\n       : _Base(__x) { }\n@@ -151,7 +156,12 @@ namespace __debug\n       }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n@@ -405,7 +415,12 @@ namespace __debug\n \t_Base::insert(__position.base(), __n, __x);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)"}, {"sha": "d0b2627a6201ffae773fea0c4e256dbb9c150293", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,7 @@\n // Debugging vector implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n+// 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -95,7 +96,12 @@ namespace __debug\n       : _Base(__n, __value, __a), _M_guaranteed_capacity(__n) { }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         vector(_InputIterator __first, _InputIterator __last,\n \t       const _Allocator& __a = _Allocator())\n         : _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n@@ -170,7 +176,12 @@ namespace __debug\n       }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<typename _InputIterator>\n+#endif\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n@@ -476,7 +487,12 @@ namespace __debug\n \t_M_update_guaranteed_capacity();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)"}, {"sha": "48e3d461eef77e49a85f1eb9ed2c61b0ef0f120f", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // Versatile string -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -238,7 +238,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __end  End of range.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         __versa_string(_InputIterator __beg, _InputIterator __end,\n \t\t       const _Alloc& __a = _Alloc())\n \t: __vstring_base(__beg, __end, __a) { }\n@@ -762,7 +767,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Appends characters in the range [first,last) to this string.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         __versa_string&\n         append(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_iend(), _M_iend(), __first, __last); }\n@@ -886,7 +896,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Sets value of string to characters in the range\n        *  [first,last).\n       */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         __versa_string&\n         assign(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n@@ -931,7 +946,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  thrown.  The value of the string doesn't change if an error\n        *  is thrown.\n       */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n       template<class _InputIterator>\n+#endif\n         void\n         insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n         { this->replace(__p, __p, __beg, __end); }\n@@ -1367,6 +1387,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  of result exceeds max_size(), length_error is thrown.  The\n        *  value of the string doesn't change if an error is thrown.\n       */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        __versa_string&\n+        replace(iterator __i1, iterator __i2,\n+\t\t_InputIterator __k1, _InputIterator __k2)\n+        {\n+\t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t   && __i2 <= _M_iend());\n+\t  __glibcxx_requires_valid_range(__k1, __k2);\n+\t  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,\n+\t\t\t\t\t   std::__false_type());\n+\t}\n+#else\n       template<class _InputIterator>\n         __versa_string&\n         replace(iterator __i1, iterator __i2,\n@@ -1378,6 +1412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());\n \t}\n+#endif\n \n       // Specializations for the common case of pointer and iterator:\n       // useful to avoid the overhead of temporary buffering in _M_replace."}, {"sha": "0555d4ce2d9d309a970bf5bb5a1c8da851703163", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/do_the_right_thing.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdo_the_right_thing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdo_the_right_thing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdo_the_right_thing.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+\n+// libstdc++/43813\n+void test01()\n+{\n+  std::deque<double*> d(7, 0);\n+  d.assign(7, 0);\n+  d.insert(d.begin(), 7, 0);\n+}"}, {"sha": "a86e94643a26be92f41f69133f5ad02c8455d0b9", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1670 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1696 }\n \n #include <deque>\n "}, {"sha": "da53d4f806d1407c27db01bcf06ffa3e6e944621", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1629 }\n \n #include <deque>\n "}, {"sha": "10ecf6e5e81f70d89ba247488f6bda6575ac5a56", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1629 }\n \n #include <deque>\n #include <utility>"}, {"sha": "f77b9a7793646216d591db09b5386bf79a30e4f2", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1754 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1780 }\n \n #include <deque>\n "}, {"sha": "35e963943302389882579388bacbe7d724db08ff", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/do_the_right_thing.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdo_the_right_thing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdo_the_right_thing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdo_the_right_thing.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+\n+// libstdc++/43813\n+void test01()\n+{\n+  std::forward_list<double*> fl(7, 0);\n+  fl.assign(7, 0);\n+  fl.insert_after(fl.before_begin(), 7, 0);\n+}"}, {"sha": "c49a9c1d271eec9b60f0efb7921c7c2b939085fb", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1213 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 33 }\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "a5632c46b1b49c100207eac23014ab26eb84bb9f", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1213 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 27 }\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "c9cf26979142db9f397d2cb4e4469ddfeeb2c6f3", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1213 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 28 }\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "fcd31fb067bcac4f612be76cda95ad3492268a31", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1213 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 33 }\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "7dbb4f309f1f7dbd431afbc08657764ba9b5f36c", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/do_the_right_thing.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdo_the_right_thing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdo_the_right_thing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdo_the_right_thing.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+\n+// libstdc++/43813\n+void test01()\n+{\n+  std::list<double*> l(7, 0);\n+  l.assign(7, 0);\n+  l.insert(l.begin(), 7, 0);\n+}"}, {"sha": "c088e6c5f11699c9c0780806b2ad6dac804ed654", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1552 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1574 }\n \n #include <list>\n "}, {"sha": "94fbe9afebbc76baaf517dfdcc3b9f12bced3d30", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1508 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1530 }\n \n #include <list>\n "}, {"sha": "c02d5a5426d038956709a8f1da1f1afd82cfd929", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1508 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1530 }\n \n #include <list>\n #include <utility>"}, {"sha": "c2fa73716f2377c7d29d295e9408b9be590d1b32", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1508 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1530 }\n \n #include <list>\n "}, {"sha": "4419496872dd125d24d827de3dcf6da3de640564", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/do_the_right_thing.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdo_the_right_thing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdo_the_right_thing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdo_the_right_thing.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+// libstdc++/43813\n+void test01()\n+{\n+  std::vector<double*> v(7, 0);\n+  v.assign(7, 0);\n+  v.insert(v.begin(), 7, 0);\n+}"}, {"sha": "73de8aed9e8675828a9689980bcba08d80864a16", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1225 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1251 }\n \n #include <vector>\n "}, {"sha": "fa479c73094919cdd02ab8325f1b8a5b4d72ddd4", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1155 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1181 }\n \n #include <vector>\n "}, {"sha": "231cacebb97302e3d6bed4974376a4532632cd65", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1155 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1181 }\n \n #include <vector>\n #include <utility>"}, {"sha": "b8e18bb4d4bfb62611eac1278fda8858b78cec2d", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1266 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1292 }\n \n #include <vector>\n "}, {"sha": "cd68d06f86749af92ec19407f1ffcfb93ee5939d", "filename": "libstdc++-v3/testsuite/ext/vstring/requirements/do_the_right_thing.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fdo_the_right_thing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2203cb90fb793e384645e390e3a4112c47a7cb1d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fdo_the_right_thing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fdo_the_right_thing.cc?ref=2203cb90fb793e384645e390e3a4112c47a7cb1d", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+// libstdc++/43813\n+void test01()\n+{\n+  __gnu_cxx::__versa_string<double*> vs(7, 0);\n+  vs.assign(7, 0);\n+  vs.append(7, 0);\n+  vs.insert(vs.begin(), 7, 0);\n+  vs.replace(vs.begin(), vs.end(), 7, 0);\n+}"}]}