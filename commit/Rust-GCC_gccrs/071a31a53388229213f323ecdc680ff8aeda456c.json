{"sha": "071a31a53388229213f323ecdc680ff8aeda456c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxYTMxYTUzMzg4MjI5MjEzZjMyM2VjZGM2ODBmZjhhZWRhNDU2Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-12T13:56:40Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-12T13:56:40Z"}, "message": "Add support for copy specifiers in fnspec\n\n\t* attr-fnspec.h: Update topleve comment.\n\t(attr_fnspec::arg_direct_p): Accept 1...9.\n\t(attr_fnspec::arg_maybe_written_p): Reject 1...9.\n\t(attr_fnspec::arg_copied_to_arg_p): New member function.\n\t* builtins.c (builtin_fnspec): Update fnspec of block copy.\n\t* tree-ssa-alias.c (attr_fnspec::verify): Update.", "tree": {"sha": "2827d05e893bf315f87c40de4368e7969438723a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2827d05e893bf315f87c40de4368e7969438723a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/071a31a53388229213f323ecdc680ff8aeda456c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071a31a53388229213f323ecdc680ff8aeda456c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071a31a53388229213f323ecdc680ff8aeda456c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071a31a53388229213f323ecdc680ff8aeda456c/comments", "author": null, "committer": null, "parents": [{"sha": "b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71ff8c15f5a7d6b1cc1524b4d27843f0d88dbda"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "b4b49e93fc43e18a527d0dfd1f7bbaae676ae33f", "filename": "gcc/attr-fnspec.h", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a31a53388229213f323ecdc680ff8aeda456c/gcc%2Fattr-fnspec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a31a53388229213f323ecdc680ff8aeda456c/gcc%2Fattr-fnspec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattr-fnspec.h?ref=071a31a53388229213f323ecdc680ff8aeda456c", "patch": "@@ -41,6 +41,9 @@\n \t\twritten and does not escape\n      'w' or 'W' specifies that the memory pointed to by the parameter does not\n \t\tescape\n+     '1'....'9' specifies that the memory pointed to by the parameter is\n+\t\tcopied to memory pointed to by different parameter\n+\t\t(as in memcpy).\n      '.'\tspecifies that nothing is known.\n    The uppercase letter in addition specifies that the memory pointed to\n    by the parameter is not dereferenced.  For 'r' only read applies\n@@ -51,8 +54,8 @@\n      ' '        nothing is known\n      't'\tthe size of value written/read corresponds to the size of\n \t\tof the pointed-to type of the argument type\n-     '1'...'9'  the size of value written/read is given by the specified\n-\t\targument\n+     '1'...'9'  specifies the size of value written/read is given by the\n+\t\tspecified argument\n  */\n \n #ifndef ATTR_FNSPEC_H\n@@ -122,7 +125,8 @@ class attr_fnspec\n   {\n     unsigned int idx = arg_idx (i);\n     gcc_checking_assert (arg_specified_p (i));\n-    return str[idx] == 'R' || str[idx] == 'O' || str[idx] == 'W';\n+    return str[idx] == 'R' || str[idx] == 'O'\n+\t   || str[idx] == 'W' || (str[idx] >= '1' && str[idx] <= '9');\n   }\n \n   /* True if argument is used.  */\n@@ -161,6 +165,7 @@ class attr_fnspec\n     unsigned int idx = arg_idx (i);\n     gcc_checking_assert (arg_specified_p (i));\n     return str[idx] != 'r' && str[idx] != 'R'\n+\t   && (str[idx] < '1' || str[idx] > '9')\n \t   && str[idx] != 'x' && str[idx] != 'X';\n   }\n \n@@ -190,6 +195,21 @@ class attr_fnspec\n     return str[idx + 1] == 't';\n   }\n \n+  /* Return true if memory pointer to by argument is copied to a memory\n+     pointed to by a different argument (as in memcpy).\n+     In this case set ARG.  */\n+  bool\n+  arg_copied_to_arg_p (unsigned int i, unsigned int *arg)\n+  {\n+    unsigned int idx = arg_idx (i);\n+    gcc_checking_assert (arg_specified_p (i));\n+    if (str[idx] < '1' || str[idx] > '9')\n+      return false;\n+    *arg = str[idx] - '1';\n+    return true;\n+  }\n+\n+\n   /* True if the argument does not escape.  */\n   bool\n   arg_noescape_p (unsigned int i)\n@@ -230,7 +250,7 @@ class attr_fnspec\n     return str[1] != 'c' && str[1] != 'C';\n   }\n \n-  /* Return true if all memory written by the function \n+  /* Return true if all memory written by the function\n      is specified by fnspec.  */\n   bool\n   global_memory_written_p ()"}, {"sha": "4ec1766cffd4f5322026e34021d82b3742c021bb", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a31a53388229213f323ecdc680ff8aeda456c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a31a53388229213f323ecdc680ff8aeda456c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=071a31a53388229213f323ecdc680ff8aeda456c", "patch": "@@ -12939,16 +12939,16 @@ builtin_fnspec (tree callee)\n \t argument.  */\n       case BUILT_IN_STRCAT:\n       case BUILT_IN_STRCAT_CHK:\n-\treturn \"1cW R \";\n+\treturn \"1cW 1 \";\n       case BUILT_IN_STRNCAT:\n       case BUILT_IN_STRNCAT_CHK:\n-\treturn \"1cW R3\";\n+\treturn \"1cW 13\";\n       case BUILT_IN_STRCPY:\n       case BUILT_IN_STRCPY_CHK:\n-\treturn \"1cO R \";\n+\treturn \"1cO 1 \";\n       case BUILT_IN_STPCPY:\n       case BUILT_IN_STPCPY_CHK:\n-\treturn \".cO R \";\n+\treturn \".cO 1 \";\n       case BUILT_IN_STRNCPY:\n       case BUILT_IN_MEMCPY:\n       case BUILT_IN_MEMMOVE:\n@@ -12957,15 +12957,15 @@ builtin_fnspec (tree callee)\n       case BUILT_IN_STRNCPY_CHK:\n       case BUILT_IN_MEMCPY_CHK:\n       case BUILT_IN_MEMMOVE_CHK:\n-\treturn \"1cO3R3\";\n+\treturn \"1cO313\";\n       case BUILT_IN_MEMPCPY:\n       case BUILT_IN_MEMPCPY_CHK:\n-\treturn \".cO3R3\";\n+\treturn \".cO313\";\n       case BUILT_IN_STPNCPY:\n       case BUILT_IN_STPNCPY_CHK:\n-\treturn \".cO3R3\";\n+\treturn \".cO313\";\n       case BUILT_IN_BCOPY:\n-\treturn \".cR3O3\";\n+\treturn \".c23O3\";\n       case BUILT_IN_BZERO:\n \treturn \".cO2\";\n       case BUILT_IN_MEMCMP:"}, {"sha": "b1e8e5b5352c70f6c6168414ca42ab106b55d25f", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071a31a53388229213f323ecdc680ff8aeda456c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071a31a53388229213f323ecdc680ff8aeda456c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=071a31a53388229213f323ecdc680ff8aeda456c", "patch": "@@ -3797,6 +3797,8 @@ attr_fnspec::verify ()\n       default:\n \terr = true;\n     }\n+  if (err)\n+    internal_error (\"invalid fn spec attribute \\\"%s\\\"\", str);\n \n   /* Now check all parameters.  */\n   for (unsigned int i = 0; arg_specified_p (i); i++)\n@@ -3813,21 +3815,28 @@ attr_fnspec::verify ()\n \t  case 'w':\n \t  case 'W':\n \t  case '.':\n+\t    if ((str[idx + 1] >= '1' && str[idx + 1] <= '9')\n+\t\t|| str[idx + 1] == 't')\n+\t      {\n+\t\tif (str[idx] != 'r' && str[idx] != 'R'\n+\t\t    && str[idx] != 'w' && str[idx] != 'W'\n+\t\t    && str[idx] != 'o' && str[idx] != 'O')\n+\t\t  err = true;\n+\t\tif (str[idx] != 't'\n+\t\t    /* Size specified is scalar, so it should be described\n+\t\t       by \". \" if specified at all.  */\n+\t\t    && (arg_specified_p (str[idx + 1] - '1')\n+\t\t\t&& str[arg_idx (str[idx + 1] - '1')] != '.'))\n+\t\t  err = true;\n+\t      }\n+\t    else if (str[idx + 1] != ' ')\n+\t      err = true;\n \t    break;\n \t  default:\n-\t    err = true;\n+\t    if (str[idx] < '1' || str[idx] > '9')\n+\t      err = true;\n \t}\n-      if ((str[idx + 1] >= '1' && str[idx + 1] <= '9')\n-\t  || str[idx + 1] == 't')\n-\t{\n-\t  if (str[idx] != 'r' && str[idx] != 'R'\n-\t      && str[idx] != 'w' && str[idx] != 'W'\n-\t      && str[idx] != 'o' && str[idx] != 'O')\n-\t    err = true;\n-\t}\n-      else if (str[idx + 1] != ' ')\n-\terr = true;\n+      if (err)\n+\tinternal_error (\"invalid fn spec attribute \\\"%s\\\" arg %i\", str, i);\n     }\n-  if (err)\n-    internal_error (\"invalid fn spec attribute \\\"%s\\\"\", str);\n }"}]}