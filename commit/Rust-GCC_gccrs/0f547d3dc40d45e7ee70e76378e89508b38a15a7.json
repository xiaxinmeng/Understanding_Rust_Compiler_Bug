{"sha": "0f547d3dc40d45e7ee70e76378e89508b38a15a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY1NDdkM2RjNDBkNDVlN2VlNzBlNzYzNzhlODk1MDhiMzhhMTVhNw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2007-08-14T18:12:34Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2007-08-14T18:12:34Z"}, "message": "re PR tree-optimization/32941 (Bootstrap comparison failure)\n\n\tPR tree-optimization/32941\n\t* tree-eh.c (struct leh_tf_state): Add goto_queue_map field.\n\t(goto_queue_cmp): Remove.\n\t(find_goto_replacement): Change search method.\n\t(maybe_record_in_goto_queue): Add assert.\n\t(lower_try_finally): Remove qsort call, add pointer_map_destroy call.\n\t* Makefile.in (tree-eh.o): Add pointer-set.h dependency.\n\nFrom-SVN: r127487", "tree": {"sha": "0098234875194ae81295354b3f27ff34f5aae20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0098234875194ae81295354b3f27ff34f5aae20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f547d3dc40d45e7ee70e76378e89508b38a15a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f547d3dc40d45e7ee70e76378e89508b38a15a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f547d3dc40d45e7ee70e76378e89508b38a15a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f547d3dc40d45e7ee70e76378e89508b38a15a7/comments", "author": null, "committer": null, "parents": [{"sha": "22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "9fac24b2fff0fc6a80603f1c34e8f66bd59d9401", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f547d3dc40d45e7ee70e76378e89508b38a15a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f547d3dc40d45e7ee70e76378e89508b38a15a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f547d3dc40d45e7ee70e76378e89508b38a15a7", "patch": "@@ -1,3 +1,13 @@\n+2007-08-14  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR tree-optimization/32941\n+\t* tree-eh.c (struct leh_tf_state): Add goto_queue_map field.\n+\t(goto_queue_cmp): Remove.\n+\t(find_goto_replacement): Change search method.\n+\t(maybe_record_in_goto_queue): Add assert.\n+\t(lower_try_finally): Remove qsort call, add pointer_map_destroy call.\n+\t* Makefile.in (tree-eh.o): Add pointer-set.h dependency.\n+\n 2007-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alias.c (component_uses_parent_alias_set): Constify."}, {"sha": "758a4aeca2a8ab2d19893130b9984064f1164b5b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f547d3dc40d45e7ee70e76378e89508b38a15a7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f547d3dc40d45e7ee70e76378e89508b38a15a7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0f547d3dc40d45e7ee70e76378e89508b38a15a7", "patch": "@@ -2099,7 +2099,7 @@ tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    coretypes.h langhooks.h $(IPA_REFERENCE_H)\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) except.h langhooks.h \\\n-   $(GGC_H) tree-pass.h coretypes.h $(TIMEVAR_H) $(TM_P_H) \\\n+   $(GGC_H) tree-pass.h coretypes.h $(TIMEVAR_H) $(TM_P_H) pointer-set.h \\\n    $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h toplev.h\n tree-ssa-loop.o : tree-ssa-loop.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\"}, {"sha": "659bbfdad250e9168612b2ad6ebfa985f66e9d31", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f547d3dc40d45e7ee70e76378e89508b38a15a7/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f547d3dc40d45e7ee70e76378e89508b38a15a7/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=0f547d3dc40d45e7ee70e76378e89508b38a15a7", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"ggc.h\"\n #include \"toplev.h\"\n+#include \"pointer-set.h\"\n \n \f\n /* Nonzero if we are using EH to handle cleanups.  */\n@@ -311,6 +312,9 @@ struct leh_tf_state\n   size_t goto_queue_size;\n   size_t goto_queue_active;\n \n+  /* Pointer map to help in searching qoto_queue when it is large.  */\n+  struct pointer_map_t *goto_queue_map;\n+\n   /* The set of unique labels seen as entries in the goto queue.  */\n   VEC(tree,heap) *dest_array;\n \n@@ -338,29 +342,44 @@ struct leh_tf_state\n static void lower_eh_filter (struct leh_state *, tree *);\n static void lower_eh_constructs_1 (struct leh_state *, tree *);\n \n-/* Comparison function for qsort/bsearch.  We're interested in\n-   searching goto queue elements for source statements.  */\n-\n-static int\n-goto_queue_cmp (const void *x, const void *y)\n-{\n-  tree a = ((const struct goto_queue_node *)x)->stmt;\n-  tree b = ((const struct goto_queue_node *)y)->stmt;\n-  return (a == b ? 0 : a < b ? -1 : 1);\n-}\n-\n /* Search for STMT in the goto queue.  Return the replacement,\n    or null if the statement isn't in the queue.  */\n \n+#define LARGE_GOTO_QUEUE 20\n+\n static tree\n find_goto_replacement (struct leh_tf_state *tf, tree stmt)\n {\n-  struct goto_queue_node tmp, *ret;\n-  tmp.stmt = stmt;\n-  ret = (struct goto_queue_node *)\n-     bsearch (&tmp, tf->goto_queue, tf->goto_queue_active,\n-\t\t sizeof (struct goto_queue_node), goto_queue_cmp);\n-  return (ret ? ret->repl_stmt : NULL);\n+  unsigned int i;\n+  void **slot;\n+\n+  if (tf->goto_queue_active < LARGE_GOTO_QUEUE)\n+    {\n+      for (i = 0; i < tf->goto_queue_active; i++)\n+\tif (tf->goto_queue[i].stmt == stmt)\n+\t  return tf->goto_queue[i].repl_stmt;\n+      return NULL;\n+    }\n+\n+  /* If we have a large number of entries in the goto_queue, create a\n+     pointer map and use that for searching.  */\n+\n+  if (!tf->goto_queue_map)\n+    {\n+      tf->goto_queue_map = pointer_map_create ();\n+      for (i = 0; i < tf->goto_queue_active; i++)\n+\t{\n+\t  slot = pointer_map_insert (tf->goto_queue_map, tf->goto_queue[i].stmt);\n+          gcc_assert (*slot == NULL);\n+\t  *slot = (void *) &tf->goto_queue[i];\n+\t}\n+    }\n+\n+  slot = pointer_map_contains (tf->goto_queue_map, stmt);\n+  if (slot != NULL)\n+    return (((struct goto_queue_node *) *slot)->repl_stmt);\n+\n+  return NULL;\n }\n \n /* A subroutine of replace_goto_queue_1.  Handles the sub-clauses of a\n@@ -519,6 +538,8 @@ maybe_record_in_goto_queue (struct leh_state *state, tree stmt)\n       gcc_unreachable ();\n     }\n \n+  gcc_assert (!tf->goto_queue_map);\n+\n   active = tf->goto_queue_active;\n   size = tf->goto_queue_size;\n   if (active >= size)\n@@ -1371,11 +1392,6 @@ lower_try_finally (struct leh_state *state, tree *tp)\n       honor_protect_cleanup_actions (state, &this_state, &this_tf);\n     }\n \n-  /* Sort the goto queue for efficient searching later.  */\n-  if (this_tf.goto_queue_active > 1)\n-    qsort (this_tf.goto_queue, this_tf.goto_queue_active,\n-\t   sizeof (struct goto_queue_node), goto_queue_cmp);\n-\n   /* Determine how many edges (still) reach the finally block.  Or rather,\n      how many destinations are reached by the finally block.  Use this to\n      determine how we process the finally block itself.  */\n@@ -1415,6 +1431,8 @@ lower_try_finally (struct leh_state *state, tree *tp)\n   VEC_free (tree, heap, this_tf.dest_array);\n   if (this_tf.goto_queue)\n     free (this_tf.goto_queue);\n+  if (this_tf.goto_queue_map)\n+    pointer_map_destroy (this_tf.goto_queue_map);\n }\n \n /* A subroutine of lower_eh_constructs_1.  Lower a TRY_CATCH_EXPR with a"}]}