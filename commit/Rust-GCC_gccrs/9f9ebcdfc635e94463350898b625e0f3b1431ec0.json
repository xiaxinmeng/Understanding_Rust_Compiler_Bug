{"sha": "9f9ebcdfc635e94463350898b625e0f3b1431ec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5ZWJjZGZjNjM1ZTk0NDYzMzUwODk4YjYyNWUwZjNiMTQzMWVjMA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-04-11T15:17:44Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-04-11T15:17:44Z"}, "message": "cgraph.c (cgraph_local_info): Call cgraph_get_node instead of cgraph_node,\thandle NULL return value.\n\n2011-04-11  Martin Jambor  <mjambor@suse.cz>\n\ngcc/\n\t* cgraph.c (cgraph_local_info): Call cgraph_get_node instead\n\tof cgraph_node,\thandle NULL return value.\n\t(cgraph_global_info): Likewise.\n\t(cgraph_rtl_info): Likewise.\n\t* tree-inline.c (estimate_num_insns): Likewise.\n\t* gimplify.c (unshare_body): Likewise.\n\t(unvisit_body): Likewise.\n\t(gimplify_body): Likewise.\n\t* predict.c (optimize_function_for_size_p): Likewise.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Likewise.\n\t(call_may_clobber_ref_p_1): Likewise.\n\t* varasm.c (function_section_1): Likewise.\n\t(assemble_start_function): Likewise.\n\ngcc/java/\n\t* decl.c (java_mark_decl_local): Call cgraph_get_node instead of\n\tcgraph_node and handle returned NULL.\n\nFrom-SVN: r172258", "tree": {"sha": "2c3c04107c858150dae9c1fa382093e2fa6bd141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c3c04107c858150dae9c1fa382093e2fa6bd141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f9ebcdfc635e94463350898b625e0f3b1431ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9ebcdfc635e94463350898b625e0f3b1431ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9ebcdfc635e94463350898b625e0f3b1431ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9ebcdfc635e94463350898b625e0f3b1431ec0/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "581985d71026fb5cf52fef156b76a619ce07e88c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581985d71026fb5cf52fef156b76a619ce07e88c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/581985d71026fb5cf52fef156b76a619ce07e88c"}], "stats": {"total": 106, "additions": 77, "deletions": 29}, "files": [{"sha": "1533847975f44c383492c9f775bf993e5d00104d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -1,3 +1,19 @@\n+2011-04-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.c (cgraph_local_info): Call cgraph_get_node instead\n+\tof cgraph_node,\thandle NULL return value.\n+\t(cgraph_global_info): Likewise.\n+\t(cgraph_rtl_info): Likewise.\n+\t* tree-inline.c (estimate_num_insns): Likewise.\n+\t* gimplify.c (unshare_body): Likewise.\n+\t(unvisit_body): Likewise.\n+\t(gimplify_body): Likewise.\n+\t* predict.c (optimize_function_for_size_p): Likewise.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Likewise.\n+\t(call_may_clobber_ref_p_1): Likewise.\n+\t* varasm.c (function_section_1): Likewise.\n+\t(assemble_start_function): Likewise.\n+\n 2011-04-11  Martin Jambor  <mjambor@suse.cz>\n \n \t* except.c (set_nothrow_function_flags): Call cgraph_get_node instead"}, {"sha": "80f7c7c34f71fbce80b9c8d46b9deaf2b7335ea6", "filename": "gcc/cgraph.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -1766,7 +1766,9 @@ cgraph_local_info (tree decl)\n   struct cgraph_node *node;\n \n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n-  node = cgraph_node (decl);\n+  node = cgraph_get_node (decl);\n+  if (!node)\n+    return NULL;\n   return &node->local;\n }\n \n@@ -1778,7 +1780,9 @@ cgraph_global_info (tree decl)\n   struct cgraph_node *node;\n \n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL && cgraph_global_info_ready);\n-  node = cgraph_node (decl);\n+  node = cgraph_get_node (decl);\n+  if (!node)\n+    return NULL;\n   return &node->global;\n }\n \n@@ -1790,9 +1794,10 @@ cgraph_rtl_info (tree decl)\n   struct cgraph_node *node;\n \n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n-  node = cgraph_node (decl);\n-  if (decl != current_function_decl\n-      && !TREE_ASM_WRITTEN (node->decl))\n+  node = cgraph_get_node (decl);\n+  if (!node\n+      || (decl != current_function_decl\n+\t  && !TREE_ASM_WRITTEN (node->decl)))\n     return NULL;\n   return &node->rtl;\n }"}, {"sha": "598fe9cfb9786df9b1fd8fa9bfebcfd99b8f5f94", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -959,11 +959,11 @@ copy_if_shared (tree *tp)\n static void\n unshare_body (tree *body_p, tree fndecl)\n {\n-  struct cgraph_node *cgn = cgraph_node (fndecl);\n+  struct cgraph_node *cgn = cgraph_get_node (fndecl);\n \n   copy_if_shared (body_p);\n \n-  if (body_p == &DECL_SAVED_TREE (fndecl))\n+  if (cgn && body_p == &DECL_SAVED_TREE (fndecl))\n     for (cgn = cgn->nested; cgn; cgn = cgn->next_nested)\n       unshare_body (&DECL_SAVED_TREE (cgn->decl), cgn->decl);\n }\n@@ -1000,11 +1000,11 @@ unmark_visited (tree *tp)\n static void\n unvisit_body (tree *body_p, tree fndecl)\n {\n-  struct cgraph_node *cgn = cgraph_node (fndecl);\n+  struct cgraph_node *cgn = cgraph_get_node (fndecl);\n \n   unmark_visited (body_p);\n \n-  if (body_p == &DECL_SAVED_TREE (fndecl))\n+  if (cgn && body_p == &DECL_SAVED_TREE (fndecl))\n     for (cgn = cgn->nested; cgn; cgn = cgn->next_nested)\n       unvisit_body (&DECL_SAVED_TREE (cgn->decl), cgn->decl);\n }\n@@ -7695,6 +7695,7 @@ gimplify_body (tree *body_p, tree fndecl, bool do_parms)\n   gimple_seq parm_stmts, seq;\n   gimple outer_bind;\n   struct gimplify_ctx gctx;\n+  struct cgraph_node *cgn;\n \n   timevar_push (TV_TREE_GIMPLIFY);\n \n@@ -7712,7 +7713,8 @@ gimplify_body (tree *body_p, tree fndecl, bool do_parms)\n   unshare_body (body_p, fndecl);\n   unvisit_body (body_p, fndecl);\n \n-  if (cgraph_node (fndecl)->origin)\n+  cgn = cgraph_get_node (fndecl);\n+  if (cgn && cgn->origin)\n     nonlocal_vlas = pointer_set_create ();\n \n   /* Make sure input_location isn't set to something weird.  */"}, {"sha": "3f81762c9011908efced3db922cf7e29b1a731fc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -1,3 +1,8 @@\n+2011-04-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* decl.c (java_mark_decl_local): Call cgraph_get_node instead of\n+\tcgraph_node and handle returned NULL.\n+\n 2011-03-25  Kai Tietz  <ktietz@redhat.com>\n \n \t* jcf-parse.c (java_read_sourcefilenames): Use filename_cmp"}, {"sha": "75f44c97585eaa573f0d328ad638215d18fa3f8b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -1928,7 +1928,10 @@ java_mark_decl_local (tree decl)\n #ifdef ENABLE_CHECKING\n   /* Double check that we didn't pass the function to the callgraph early.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n-    gcc_assert (!cgraph_node (decl)->local.finalized);\n+    {\n+      struct cgraph_node *node = cgraph_get_node (decl);\n+      gcc_assert (!node || !node->local.finalized);\n+    }\n #endif\n   gcc_assert (!DECL_RTL_SET_P (decl));\n }"}, {"sha": "f210428fca1fddfb2f182fa315cf39bc11843040", "filename": "gcc/predict.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -214,10 +214,17 @@ probably_never_executed_bb_p (const_basic_block bb)\n bool\n optimize_function_for_size_p (struct function *fun)\n {\n-  return (optimize_size\n-\t  || (fun && fun->decl\n-\t      && (cgraph_node (fun->decl)->frequency\n-\t\t  == NODE_FREQUENCY_UNLIKELY_EXECUTED)));\n+  struct cgraph_node *node;\n+\n+  if (optimize_size)\n+    return true;\n+  if (!fun || !fun->decl)\n+    return false;\n+  node = cgraph_get_node (fun->decl);\n+  if (node && (node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED))\n+    return true;\n+  else\n+    return false;\n }\n \n /* Return true when current function should always be optimized for speed.  */"}, {"sha": "140d7781c8438334a10fc5d499f25638cce4b900", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -3470,10 +3470,11 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n     case GIMPLE_CALL:\n       {\n \ttree decl = gimple_call_fndecl (stmt);\n+\tstruct cgraph_node *node;\n \n \t/* Do not special case builtins where we see the body.\n \t   This just confuse inliner.  */\n-\tif (!decl || cgraph_node (decl)->analyzed)\n+\tif (!decl || !(node = cgraph_get_node (decl)) || node->analyzed)\n \t  ;\n \t/* For buitins that are likely expanded to nothing or\n \t   inlined do not account operand costs.  */"}, {"sha": "4edacb56ba628c6ecf61c0f947f0af7faf1d2dde", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -1245,14 +1245,18 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \n   /* Check if base is a global static variable that is not read\n      by the function.  */\n-  if (TREE_CODE (base) == VAR_DECL\n+  if (callee != NULL_TREE\n+      && TREE_CODE (base) == VAR_DECL\n       && TREE_STATIC (base))\n     {\n+      struct cgraph_node *node = cgraph_get_node (callee);\n       bitmap not_read;\n \n-      if (callee != NULL_TREE\n-\t  && (not_read\n-\t        = ipa_reference_get_not_read_global (cgraph_node (callee)))\n+      /* FIXME: Callee can be an OMP builtin that does not have a call graph\n+\t node yet.  We should enforce that there are nodes for all decls in the\n+\t IL and remove this check instead.  */\n+      if (node\n+\t  && (not_read = ipa_reference_get_not_read_global (node))\n \t  && bitmap_bit_p (not_read, DECL_UID (base)))\n \tgoto process_args;\n     }\n@@ -1512,10 +1516,11 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n       && TREE_CODE (base) == VAR_DECL\n       && TREE_STATIC (base))\n     {\n+      struct cgraph_node *node = cgraph_get_node (callee);\n       bitmap not_written;\n \n-      if ((not_written\n-\t     = ipa_reference_get_not_written_global (cgraph_node (callee)))\n+      if (node\n+\t  && (not_written = ipa_reference_get_not_written_global (node))\n \t  && bitmap_bit_p (not_written, DECL_UID (base)))\n \treturn false;\n     }"}, {"sha": "8365612e5f37d473978b3a8643039343d3bcb28b", "filename": "gcc/varasm.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ebcdfc635e94463350898b625e0f3b1431ec0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9f9ebcdfc635e94463350898b625e0f3b1431ec0", "patch": "@@ -573,11 +573,14 @@ function_section_1 (tree decl, bool force_cold)\n \n   if (decl)\n     {\n-      struct cgraph_node *node = cgraph_node (decl);\n+      struct cgraph_node *node = cgraph_get_node (decl);\n \n-      freq = node->frequency;\n-      startup = node->only_called_at_startup;\n-      exit = node->only_called_at_exit;\n+      if (node)\n+\t{\n+\t  freq = node->frequency;\n+\t  startup = node->only_called_at_startup;\n+\t  exit = node->only_called_at_exit;\n+\t}\n     }\n   if (force_cold)\n     freq = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n@@ -1575,11 +1578,12 @@ assemble_start_function (tree decl, const char *fnname)\n     }\n   else if (DECL_SECTION_NAME (decl))\n     {\n+      struct cgraph_node *node = cgraph_get_node (current_function_decl);\n       /* Calls to function_section rely on first_function_block_is_cold\n \t being accurate.  */\n-      first_function_block_is_cold\n-\t = (cgraph_node (current_function_decl)->frequency\n-\t    == NODE_FREQUENCY_UNLIKELY_EXECUTED);\n+      first_function_block_is_cold = (node\n+\t\t\t\t      && node->frequency\n+\t\t\t\t      == NODE_FREQUENCY_UNLIKELY_EXECUTED);\n     }\n \n   in_cold_section_p = first_function_block_is_cold;"}]}