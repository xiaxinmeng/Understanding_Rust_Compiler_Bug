{"sha": "b55ef4b8d6ff7d8d6f290172cdffbb616816f56a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1ZWY0YjhkNmZmN2Q4ZDZmMjkwMTcyY2RmZmJiNjE2ODE2ZjU2YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-19T10:55:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:49Z"}, "message": "[Ada] Fix interaction of 128-bit integer types and -gnato2 mode\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_Compare_Minimize_Eliminate_Overflow): Remove\n\tentry condition.\n\t(Expand_N_In): Call Minimized_Eliminated_Overflow_Check on the left\n\toperand before doing the special overflow expansion.\n\t(Expand_N_Op_Eq): Likewise.\n\t(Expand_N_Op_Ge): Likewise.\n\t(Expand_N_Op_Gt): Likewise.\n\t(Expand_N_Op_Le): Likewise.\n\t(Expand_N_Op_Lt): Likewise.\n\t(Expand_N_Op_Ne): Likewise.\n\t(Minimized_Eliminated_Overflow_Check): Return False for Minimized\n\tif the size of the type is greater than that of Long_Long_Integer.", "tree": {"sha": "9ed245535883b3956212a5b08508c37d506821f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ed245535883b3956212a5b08508c37d506821f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55ef4b8d6ff7d8d6f290172cdffbb616816f56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55ef4b8d6ff7d8d6f290172cdffbb616816f56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55ef4b8d6ff7d8d6f290172cdffbb616816f56a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55ef4b8d6ff7d8d6f290172cdffbb616816f56a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3606939b63072b7f565d1644b243642a71723150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3606939b63072b7f565d1644b243642a71723150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3606939b63072b7f565d1644b243642a71723150"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "0ca03b1c889bc950b3d1757b08dcc17b2ec3fed1", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55ef4b8d6ff7d8d6f290172cdffbb616816f56a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55ef4b8d6ff7d8d6f290172cdffbb616816f56a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b55ef4b8d6ff7d8d6f290172cdffbb616816f56a", "patch": "@@ -2253,9 +2253,6 @@ package body Exp_Ch4 is\n       LLIB : constant Entity_Id := Base_Type (Standard_Long_Long_Integer);\n       --  Entity for Long_Long_Integer'Base\n \n-      Check : constant Overflow_Mode_Type := Overflow_Check_Mode;\n-      --  Current overflow checking mode\n-\n       procedure Set_True;\n       procedure Set_False;\n       --  These procedures rewrite N with an occurrence of Standard_True or\n@@ -2284,17 +2281,6 @@ package body Exp_Ch4 is\n    --  Start of processing for Expand_Compare_Minimize_Eliminate_Overflow\n \n    begin\n-      --  Nothing to do unless we have a comparison operator with operands\n-      --  that are signed integer types, and we are operating in either\n-      --  MINIMIZED or ELIMINATED overflow checking mode.\n-\n-      if Nkind (N) not in N_Op_Compare\n-        or else Check not in Minimized_Or_Eliminated\n-        or else not Is_Signed_Integer_Type (Etype (Left_Opnd (N)))\n-      then\n-         return;\n-      end if;\n-\n       --  OK, this is the case we are interested in. First step is to process\n       --  our operands using the Minimize_Eliminate circuitry which applies\n       --  this processing to the two operand subtrees.\n@@ -6425,8 +6411,7 @@ package body Exp_Ch4 is\n       --  type, then expand with a separate procedure. Note the use of the\n       --  flag No_Minimize_Eliminate to prevent infinite recursion.\n \n-      if Overflow_Check_Mode in Minimized_Or_Eliminated\n-        and then Is_Signed_Integer_Type (Ltyp)\n+      if Minimized_Eliminated_Overflow_Check (Left_Opnd  (N))\n         and then not No_Minimize_Eliminate (N)\n       then\n          Expand_Membership_Minimize_Eliminate_Overflow (N);\n@@ -8343,7 +8328,9 @@ package body Exp_Ch4 is\n       --  Deal with overflow checks in MINIMIZED/ELIMINATED mode and if that\n       --  means we no longer have a comparison operation, we are all done.\n \n-      Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      if Minimized_Eliminated_Overflow_Check (Left_Opnd (N)) then\n+         Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      end if;\n \n       if Nkind (N) /= N_Op_Eq then\n          return;\n@@ -9201,7 +9188,9 @@ package body Exp_Ch4 is\n       --  Deal with overflow checks in MINIMIZED/ELIMINATED mode and if that\n       --  means we no longer have a comparison operation, we are all done.\n \n-      Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      if Minimized_Eliminated_Overflow_Check (Op1) then\n+         Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      end if;\n \n       if Nkind (N) /= N_Op_Ge then\n          return;\n@@ -9250,7 +9239,9 @@ package body Exp_Ch4 is\n       --  Deal with overflow checks in MINIMIZED/ELIMINATED mode and if that\n       --  means we no longer have a comparison operation, we are all done.\n \n-      Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      if Minimized_Eliminated_Overflow_Check (Op1) then\n+         Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      end if;\n \n       if Nkind (N) /= N_Op_Gt then\n          return;\n@@ -9299,7 +9290,9 @@ package body Exp_Ch4 is\n       --  Deal with overflow checks in MINIMIZED/ELIMINATED mode and if that\n       --  means we no longer have a comparison operation, we are all done.\n \n-      Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      if Minimized_Eliminated_Overflow_Check (Op1) then\n+         Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      end if;\n \n       if Nkind (N) /= N_Op_Le then\n          return;\n@@ -9348,7 +9341,9 @@ package body Exp_Ch4 is\n       --  Deal with overflow checks in MINIMIZED/ELIMINATED mode and if that\n       --  means we no longer have a comparison operation, we are all done.\n \n-      Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      if Minimized_Eliminated_Overflow_Check (Op1) then\n+         Expand_Compare_Minimize_Eliminate_Overflow (N);\n+      end if;\n \n       if Nkind (N) /= N_Op_Lt then\n          return;\n@@ -9942,7 +9937,9 @@ package body Exp_Ch4 is\n          --  Deal with overflow checks in MINIMIZED/ELIMINATED mode and if\n          --  means we no longer have a /= operation, we are all done.\n \n-         Expand_Compare_Minimize_Eliminate_Overflow (N);\n+         if Minimized_Eliminated_Overflow_Check (Left_Opnd (N)) then\n+            Expand_Compare_Minimize_Eliminate_Overflow (N);\n+         end if;\n \n          if Nkind (N) /= N_Op_Ne then\n             return;\n@@ -14114,9 +14111,15 @@ package body Exp_Ch4 is\n \n    function Minimized_Eliminated_Overflow_Check (N : Node_Id) return Boolean is\n    begin\n+      --  The MINIMIZED mode operates in Long_Long_Integer so we cannot use it\n+      --  if the type of the expression is already larger.\n+\n       return\n         Is_Signed_Integer_Type (Etype (N))\n-          and then Overflow_Check_Mode in Minimized_Or_Eliminated;\n+          and then Overflow_Check_Mode in Minimized_Or_Eliminated\n+          and then not (Overflow_Check_Mode = Minimized\n+                         and then\n+                        Esize (Etype (N)) > Standard_Long_Long_Integer_Size);\n    end Minimized_Eliminated_Overflow_Check;\n \n    ----------------------------"}]}