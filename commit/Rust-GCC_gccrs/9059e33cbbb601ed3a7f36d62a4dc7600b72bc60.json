{"sha": "9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1OWUzM2NiYmI2MDFlZDNhN2YzNmQ2MmE0ZGM3NjAwYjcyYmM2MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-05-26T19:59:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-05-26T19:59:45Z"}, "message": "cse.c (fold_rtx): Don't optimize if SUBREG changes mode class.\n\n\t* cse.c (fold_rtx): Don't optimize if SUBREG changes mode class.\n\n\t* g++.dg/opt/cse2.C: New test.\n\nFrom-SVN: r53905", "tree": {"sha": "df164b1544727787f8e9ce42444baca19580849c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df164b1544727787f8e9ce42444baca19580849c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2960ccbf96d50fd7a05568f3e48f88622f965b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2960ccbf96d50fd7a05568f3e48f88622f965b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2960ccbf96d50fd7a05568f3e48f88622f965b4b"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "800233d43db321452b05aa09000d9651f9b4626a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "patch": "@@ -1,3 +1,7 @@\n+2002-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cse.c (fold_rtx): Don't optimize if SUBREG changes mode class.\n+\n 2002-05-26  Andreas Jaeger  <aj@suse.de>\n \n \t* cfg.c (dump_flow_info): Remove extra argument to fprintf."}, {"sha": "0b91d99d44894406c2d46654ff0f17db642481fa", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "patch": "@@ -3472,7 +3472,9 @@ fold_rtx (x, insn)\n \t\t  && GET_CODE (elt->exp) != SIGN_EXTEND\n \t\t  && GET_CODE (elt->exp) != ZERO_EXTEND\n \t\t  && GET_CODE (XEXP (elt->exp, 0)) == SUBREG\n-\t\t  && GET_MODE (SUBREG_REG (XEXP (elt->exp, 0))) == mode)\n+\t\t  && GET_MODE (SUBREG_REG (XEXP (elt->exp, 0))) == mode\n+\t\t  && (GET_MODE_CLASS (mode)\n+\t\t      == GET_MODE_CLASS (GET_MODE (XEXP (elt->exp, 0)))))\n \t\t{\n \t\t  rtx op0 = SUBREG_REG (XEXP (elt->exp, 0));\n "}, {"sha": "0b8b5f15fba1f4aba9004ec295541d550c50080a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "patch": "@@ -1,3 +1,7 @@\n+2002-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/opt/cse2.C: New test.\n+\n 2002-05-26  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/arith-1.c: New semantic tests."}, {"sha": "5a04bf53ecb46124c862be41cbf23524f1d5f1c2", "filename": "gcc/testsuite/g++.dg/opt/cse2.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9059e33cbbb601ed3a7f36d62a4dc7600b72bc60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcse2.C?ref=9059e33cbbb601ed3a7f36d62a4dc7600b72bc60", "patch": "@@ -0,0 +1,39 @@\n+// This testcase caused ICE on IA-32 in simplify_unary_operation\n+// CSE did not assume SUBREGs changing mode from integral to floating.\n+// { dg-do run { target i?86-*-* sparc*-*-* } }\n+// { dg-options \"-O2\" }\n+\n+struct A\n+{\n+  union\n+    {\n+      float f;\n+      unsigned int w;\n+    } a;\n+\n+  static inline const A foo (void)\n+    {\n+      return A ((unsigned int) (__extension__ ((union { unsigned l; float d; })\n+\t\t\t\t\t       { l: 0x3f800000 }).d));\n+    }\n+  inline A (float f) { a.f = f; }\n+  A ();\n+  inline A (unsigned int w) { a.w = w; }\n+};\n+\n+A::A()\n+{\n+  *this = foo ();\n+}\n+\n+A a;\n+\n+extern \"C\" void abort (void);\n+extern \"C\" void exit (int);\n+\n+int main ()\n+{\n+  if (a.a.w != 1)\n+    abort ();\n+  exit (0);\n+}"}]}