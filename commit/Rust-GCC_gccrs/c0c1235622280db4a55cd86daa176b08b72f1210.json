{"sha": "c0c1235622280db4a55cd86daa176b08b72f1210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjMTIzNTYyMjI4MGRiNGE1NWNkODZkYWExNzZiMDhiNzJmMTIxMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-17T09:25:56Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-17T09:25:56Z"}, "message": "Merge Ignore and Deprecated in .opt files.\n\n2018-08-17  Martin Liska  <mliska@suse.cz>\n\n\t* common.opt: Remove Warn, Init and Report for options with\n        Ignore/Deprecated flag. Warning is done automatically for\n        Deprecated flags.\n\t* config/i386/i386.opt: Likewise.\n\t* config/ia64/ia64.opt: Likewise.\n\t* config/rs6000/rs6000.opt: Likewise.\n\t* cppbuiltin.c (define_builtin_macros_for_compilation_flags):\n        Remove usage of flag_check_pointer_bounds.\n\t* lto-wrapper.c (merge_and_complain): Do not handle\n        OPT_fcheck_pointer_bounds.\n\t(append_compiler_options): Likewise.\n\t* opt-functions.awk: Do not handle Deprecated.\n\t* optc-gen.awk: Check that Var, Report and Init are not\n        used for an option with Ignore/Deprecated flag.\n\t* opts-common.c (decode_cmdline_option): Do not report\n        CL_ERR_DEPRECATED.\n\t(read_cmdline_option): Report warning for OPT_SPECIAL_deprecated\n        options.\n\t* opts.h (struct cl_option): Remove cl_deprecated flag.\n\t(CL_ERR_DEPRECATED): Remove error enum value.\n2018-08-17  Martin Liska  <mliska@suse.cz>\n\n\t* g++.dg/opt/mpx.C: Fix scanned pattern.\n\t* gcc.target/i386/mpx.c: Likewise.\n\t* g++.dg/warn/Wunreachable-code-1.C: Remove.\n\t* g++.dg/warn/Wunreachable-code-2.C: Likewise.\n\t* gcc.dg/torture/pr52969.c: Likewise.\n\t* g++.dg/warn/pr31246-2.C: Likewise.\n\t* g++.dg/warn/pr31246.C: Likewise.\n\t* gcc.dg/pr33092.c: Likewise.\n\t* g++.dg/opt/eh1.C: Remove a deprecated option.\n\t* g++.dg/template/inline1.C: Likewise.\n\t* g++.dg/tree-ssa/pr81408.C: Likewise.\n\t* gcc.dg/pr41837.c: Likewise.\n\t* gcc.dg/pr41841.c: Likewise.\n\t* gcc.dg/pr42250.c: Likewise.\n\t* gcc.dg/pr43084.c: Likewise.\n\t* gcc.dg/pr43317.c: Likewise.\n\t* gcc.dg/pr51879-18.c: Likewise.\n\t* gcc.dg/torture/pr36066.c: Likewise.\n\t* gcc.dg/tree-ssa/ifc-8.c: Likewise.\n\t* gcc.dg/tree-ssa/ifc-cd.c: Likewise.\n\t* gcc.dg/tree-ssa/pr19210-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr45122.c: Likewise.\n\t* gcc.target/i386/pr45352-2.c: Likewise.\n\t* gcc.target/i386/zee.c: Likewise.\n\t* gfortran.dg/auto_char_len_2.f90: Likewise.\n\t* gfortran.dg/auto_char_len_4.f90: Likewise.\n\t* gfortran.dg/c_ptr_tests_15.f90: Likewise.\n\t* gfortran.dg/char_array_structure_constructor.f90: Likewise.\n\t* gfortran.dg/gomp/pr47331.f90: Likewise.\n\t* gfortran.dg/pr40999.f: Likewise.\n\t* gfortran.dg/pr41011.f: Likewise.\n\t* gfortran.dg/pr42051.f03: Likewise.\n\t* gfortran.dg/pr46804.f90: Likewise.\n\t* gfortran.dg/pr83149_1.f90: Likewise.\n\t* gfortran.dg/pr83149_b.f90: Likewise.\n\t* gfortran.dg/whole_file_1.f90: Likewise.\n\t* gfortran.dg/whole_file_10.f90: Likewise.\n\t* gfortran.dg/whole_file_11.f90: Likewise.\n\t* gfortran.dg/whole_file_12.f90: Likewise.\n\t* gfortran.dg/whole_file_13.f90: Likewise.\n\t* gfortran.dg/whole_file_14.f90: Likewise.\n\t* gfortran.dg/whole_file_15.f90: Likewise.\n\t* gfortran.dg/whole_file_16.f90: Likewise.\n\t* gfortran.dg/whole_file_17.f90: Likewise.\n\t* gfortran.dg/whole_file_18.f90: Likewise.\n\t* gfortran.dg/whole_file_19.f90: Likewise.\n\t* gfortran.dg/whole_file_2.f90: Likewise.\n\t* gfortran.dg/whole_file_20.f03: Likewise.\n\t* gfortran.dg/whole_file_3.f90: Likewise.\n\t* gfortran.dg/whole_file_4.f90: Likewise.\n\t* gfortran.dg/whole_file_5.f90: Likewise.\n\t* gfortran.dg/whole_file_6.f90: Likewise.\n\t* gfortran.dg/whole_file_7.f90: Likewise.\n\t* gfortran.dg/whole_file_8.f90: Likewise.\n\t* gfortran.dg/whole_file_9.f90: Likewise.\n\t* gcc.dg/vect/vect.exp: Likewise.\n2018-08-17  Martin Liska  <mliska@suse.cz>\n\n\t* c.opt: Remove Warn, Init and Report for options with\n        Ignore/Deprecated flag. Warning is done automatically for\n        Deprecated flags.\n\nFrom-SVN: r263614", "tree": {"sha": "4595d1f36634c32f0064a293e5955f353287ee6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4595d1f36634c32f0064a293e5955f353287ee6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0c1235622280db4a55cd86daa176b08b72f1210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c1235622280db4a55cd86daa176b08b72f1210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c1235622280db4a55cd86daa176b08b72f1210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c1235622280db4a55cd86daa176b08b72f1210/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36a072b429a9501946cb1fafdc9b1af7c574594d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a072b429a9501946cb1fafdc9b1af7c574594d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a072b429a9501946cb1fafdc9b1af7c574594d"}], "stats": {"total": 446, "additions": 219, "deletions": 227}, "files": [{"sha": "265fa2375412c1e435185f742e275a0492fcbe67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,3 +1,26 @@\n+2018-08-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Remove Warn, Init and Report for options with\n+        Ignore/Deprecated flag. Warning is done automatically for\n+        Deprecated flags.\n+\t* config/i386/i386.opt: Likewise.\n+\t* config/ia64/ia64.opt: Likewise.\n+\t* config/rs6000/rs6000.opt: Likewise.\n+\t* cppbuiltin.c (define_builtin_macros_for_compilation_flags):\n+        Remove usage of flag_check_pointer_bounds.\n+\t* lto-wrapper.c (merge_and_complain): Do not handle\n+        OPT_fcheck_pointer_bounds.\n+\t(append_compiler_options): Likewise.\n+\t* opt-functions.awk: Do not handle Deprecated.\n+\t* optc-gen.awk: Check that Var, Report and Init are not\n+        used for an option with Ignore/Deprecated flag.\n+\t* opts-common.c (decode_cmdline_option): Do not report\n+        CL_ERR_DEPRECATED.\n+\t(read_cmdline_option): Report warning for OPT_SPECIAL_deprecated\n+        options.\n+\t* opts.h (struct cl_option): Remove cl_deprecated flag.\n+\t(CL_ERR_DEPRECATED): Remove error enum value.\n+\n 2018-08-17  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/86505"}, {"sha": "2ab5b4477d01032654667176977695a2fc43ceb8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,3 +1,9 @@\n+2018-08-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* c.opt: Remove Warn, Init and Report for options with\n+        Ignore/Deprecated flag. Warning is done automatically for\n+        Deprecated flags.\n+\n 2018-08-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/70693"}, {"sha": "9980bfac11c640b3aff9e364ab82a3b0079d73ee", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -413,7 +413,7 @@ C ObjC C++ ObjC++ Var(warn_char_subscripts) Warning LangEnabledBy(C ObjC C++ Obj\n Warn about subscripts whose type is \\\"char\\\".\n \n Wchkp\n-C ObjC C++ ObjC++ Var(warn_chkp) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall) Deprecated\n+C ObjC C++ ObjC++ Warning Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n Wclobbered\n@@ -820,7 +820,7 @@ C ObjC Var(warn_missing_prototypes) Warning\n Warn about global functions without prototypes.\n \n Wmudflap\n-C ObjC C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C ObjC C++ ObjC++ Deprecated\n \n Wmultichar\n C ObjC C++ ObjC++ CPP(warn_multichar) CppReason(CPP_W_MULTICHAR) Var(cpp_warn_multichar) Init(0) Warning\n@@ -1238,14 +1238,14 @@ C++ ObjC++ Joined RejectNegative Var(aligned_new_threshold) UInteger Init(-1)\n -faligned-new=<N> Use C++17 over-aligned type allocation for alignments greater than N.\n \n fall-virtual\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fallow-parameterless-variadic-functions\n C ObjC Var(flag_allow_parameterless_variadic_functions)\n Allow variadic functions without named parameter.\n \n falt-external-templates\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n No longer supported.\n \n fasm\n@@ -1268,78 +1268,78 @@ C ObjC C++ ObjC++\n Where shorter, use canonicalized paths to systems headers.\n \n fcheck-pointer-bounds\n-C ObjC C++ ObjC++ LTO Report Var(flag_check_pointer_bounds) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-check-incomplete-type\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_incomplete_type) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-zero-input-bounds-for-main\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_zero_input_bounds_for_main) Init(0) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-first-field-has-own-bounds\n-C ObjC C++ ObjC++ LTO RejectNegative Report Var(flag_chkp_first_field_has_own_bounds) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated RejectNegative\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-narrow-bounds\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_narrow_bounds) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-narrow-to-innermost-array\n-C ObjC C++ ObjC++ LTO RejectNegative Report Var(flag_chkp_narrow_to_innermost_arrray) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated RejectNegative\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-flexible-struct-trailing-arrays\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_flexible_struct_trailing_arrays) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-optimize\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_optimize) Init(-1)\n+C ObjC C++ ObjC++ LTO Deprecated\n \n fchkp-use-fast-string-functions\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_fast_string_functions) Init(0) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-nochk-string-functions\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_nochk_string_functions) Init(0) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-static-bounds\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_static_bounds) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-static-const-bounds\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_static_const_bounds) Init(-1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-treat-zero-dynamic-size-as-infinite\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_zero_dynamic_size_as_infinite) Init(0) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-check-read\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_check_read) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-check-write\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_check_write) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-store-bounds\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_store_bounds) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-instrument-calls\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_instrument_calls) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-instrument-marked-only\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_instrument_marked_only) Init(0) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-wrappers\n-C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_wrappers) Init(1) Deprecated\n+C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n static-libmpx\n@@ -1350,8 +1350,8 @@ static-libmpxwrappers\n Driver Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n-fcilkplus Undocumented\n-C ObjC C++ ObjC++ LTO Report Var(flag_cilkplus) Init(0)\n+fcilkplus\n+C ObjC C++ ObjC++ LTO Undocumented Ignore\n Deprecated in GCC 8.  This switch has no effect.\n \n fconcepts\n@@ -1363,7 +1363,7 @@ C ObjC C++ ObjC++\n Allow the arguments of the '?' operator to have different types.\n \n fconserve-space\n-C++ ObjC++ Var(flag_conserve_space)\n+C++ ObjC++ Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fconstant-string-class=\n@@ -1430,7 +1430,7 @@ C++ ObjC++ Var(flag_enforce_eh_specs) Init(1)\n Generate code to check exception specifications.\n \n fenum-int-equiv\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fexec-charset=\n C ObjC C++ ObjC++ Joined RejectNegative\n@@ -1449,10 +1449,10 @@ C++ ObjC++ Var(flag_extern_tls_init) Init(-1)\n Support dynamic initialization of thread-local variables in a different translation unit.\n \n fexternal-templates\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n ffor-scope\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n ffreestanding\n C ObjC C++ ObjC++\n@@ -1471,20 +1471,20 @@ C ObjC Var(flag_gnu89_inline) Init(-1)\n Use traditional GNU semantics for inline functions.\n \n fguiding-decls\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fhandle-exceptions\n C++ ObjC++ Optimization Alias(fexceptions) Warn({-fhandle-exceptions has been renamed -fexceptions (and is now on by default)})\n \n fhonor-std\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fhosted\n C ObjC\n Assume normal C execution environment.\n \n fhuge-objects\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n No longer supported.\n \n fimplement-inlines\n@@ -1504,14 +1504,14 @@ C++ ObjC++ Var(flag_new_inheriting_ctors) Init(1)\n Implement C++17 inheriting constructor semantics.\n \n ffriend-injection\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fkeep-inline-dllexport\n C C++ ObjC ObjC++ Var(flag_keep_inline_dllexport) Init(1) Report Condition(TARGET_DLLIMPORT_DECL_ATTRIBUTES)\n Don't emit dllexported inline functions unless needed.\n \n flabels-ok\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n flax-vector-conversions\n C ObjC C++ ObjC++ Var(flag_lax_vector_conversions)\n@@ -1522,19 +1522,19 @@ C ObjC C++ ObjC++ Var(flag_ms_extensions)\n Don't warn about uses of Microsoft extensions.\n \n fmudflap\n-C ObjC C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C ObjC C++ ObjC++ Deprecated\n \n fmudflapth\n-C ObjC C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C ObjC C++ ObjC++ Deprecated\n \n fmudflapir\n-C ObjC C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C ObjC C++ ObjC++ Deprecated\n \n fname-mangling-version-\n-C++ ObjC++ Joined Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Joined Deprecated\n \n fnew-abi\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fnew-ttp-matching\n C++ ObjC++ Var(flag_new_ttp)\n@@ -1575,7 +1575,7 @@ fnonansi-builtins\n C++ ObjC++ Var(flag_no_nonansi_builtin, 0)\n \n fnonnull-objects\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fnothrow-opt\n C++ ObjC++ Optimization Var(flag_nothrow_opt)\n@@ -1710,7 +1710,7 @@ C++ ObjC++ Var(flag_sized_deallocation) Init(-1)\n Enable C++14 sized deallocation support.\n \n fsquangle\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fsso-struct=\n C ObjC Joined RejectNegative Enum(sso_struct) Var(default_sso) Init(SSO_NATIVE)\n@@ -1737,7 +1737,7 @@ C++ ObjC++ Optimization Var(flag_strict_enums)\n Assume that values of enumeration type are always within the minimum range of that type.\n \n fstrict-prototype\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fstrong-eval-order\n C++ ObjC++ Common Alias(fstrong-eval-order=, all, none)\n@@ -1777,7 +1777,7 @@ C++ ObjC++ Joined RejectNegative UInteger\n -ftemplate-depth=<number>\tSpecify maximum template instantiation depth.\n \n fthis-is-variable\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n \n fthreadsafe-statics\n C++ ObjC++ Optimization Var(flag_threadsafe_statics) Init(1)\n@@ -1808,11 +1808,11 @@ C++ ObjC++ Var(flag_visibility_ms_compat)\n Changes visibility to match Microsoft Visual Studio by default.\n \n fvtable-gc\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n No longer supported.\n \n fvtable-thunks\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n No longer supported.\n \n fweak\n@@ -1828,7 +1828,7 @@ C ObjC C++ ObjC++ Var(flag_working_directory) Init(-1)\n Generate a #line directive pointing at the current working directory.\n \n fxref\n-C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n+C++ ObjC++ Deprecated\n No longer supported.\n \n fzero-link"}, {"sha": "ebc3ef43ce2fc8291a16526dd364c69b8e99b036", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1087,7 +1087,7 @@ Common Report Var(flag_caller_saves) Optimization\n Save registers around function calls.\n \n fcheck-data-deps\n-Common Report Var(flag_check_data_deps)\n+Common Ignore\n This switch is deprecated; do not use.\n \n fcheck-new\n@@ -2897,19 +2897,19 @@ Common Driver Var(dwarf2out_as_locview_support) Init(2)\n Assume assembler support for view in (DWARF2+) .loc directives\n \n gcoff\n-Common Driver Ignore Warn(switch %qs no longer supported)\n+Common Driver Deprecated\n Does nothing.  Preserved for backward compatibility.\n \n gcoff1\n-Common Driver Ignore Warn(switch %qs no longer supported)\n+Common Driver Deprecated\n Does nothing.  Preserved for backward compatibility.\n \n gcoff2\n-Common Driver Ignore Warn(switch %qs no longer supported)\n+Common Driver Deprecated\n Does nothing.  Preserved for backward compatibility.\n \n gcoff3\n-Common Driver Ignore Warn(switch %qs no longer supported)\n+Common Driver Deprecated\n Does nothing.  Preserved for backward compatibility.\n \n gcolumn-info"}, {"sha": "e7fbf9b6f9944c33f205e81d43b93b551d753951", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -842,7 +842,7 @@ Target Report Mask(ISA_CLWB) Var(ix86_isa_flags) Save\n Support CLWB instruction.\n \n mpcommit\n-Target Ignore Warn(%qs was deprecated)\n+Target Deprecated\n ;; Deprecated\n \n mfxsr\n@@ -951,7 +951,7 @@ Target Report Mask(ISA_RTM) Var(ix86_isa_flags) Save\n Support RTM built-in functions and code generation.\n \n mmpx\n-Target Report Deprecated\n+Target Deprecated\n Deprecated in GCC 9.  This switch has no effect.\n \n mmwaitx\n@@ -999,7 +999,7 @@ Target RejectNegative Joined Integer Var(ix86_stack_protector_guard_symbol_str)\n Use the given symbol for addressing the stack-protector guard.\n \n mmitigate-rop\n-Target Ignore Warn(%qs was deprecated)\n+Target Deprecated\n ;; Deprecated\n \n mgeneral-regs-only"}, {"sha": "61f2c9f1c8fe36c415c14f75792ac0ce70a8beb5", "filename": "gcc/config/ia64/ia64.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fconfig%2Fia64%2Fia64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fconfig%2Fia64%2Fia64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.opt?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -164,10 +164,10 @@ Target Report Var(mflag_sched_spec_control_ldc) Init(0)\n Use simple data speculation check for control speculation.\n \n msched-prefer-non-data-spec-insns\n-Target Ignore Warn(switch %qs is no longer supported)\n+Target Deprecated\n \n msched-prefer-non-control-spec-insns\n-Target Ignore Warn(switch %qs is no longer supported)\n+Target Deprecated\n \n msched-count-spec-in-critical-path\n Target Report Var(mflag_sched_count_spec_in_critical_path) Init(0)"}, {"sha": "b07f7f7e83390d395493fe83734bab3be1315b80", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -177,7 +177,7 @@ mno-string\n Target RejectNegative Undocumented Ignore\n \n mstring\n-Target RejectNegative Undocumented Warn(%<-mstring%> is deprecated)\n+Target RejectNegative Undocumented Deprecated\n \n msoft-float\n Target Report RejectNegative Mask(SOFT_FLOAT) Var(rs6000_isa_flags)\n@@ -483,8 +483,9 @@ mcrypto\n Target Report Mask(CRYPTO) Var(rs6000_isa_flags)\n Use ISA 2.07 Category:Vector.AES and Category:Vector.SHA2 instructions.\n \n+; We can't use Ignore flag because DIRECT_MOVE mask is still used.\n mdirect-move\n-Target Undocumented Mask(DIRECT_MOVE) Var(rs6000_isa_flags) Ignore Warn(%qs is deprecated)\n+Target Undocumented Mask(DIRECT_MOVE) Var(rs6000_isa_flags) Warn(%qs is deprecated)\n \n mhtm\n Target Report Mask(HTM) Var(rs6000_isa_flags)"}, {"sha": "7ea45c80f6a7fbd508cdecf0a0982e7c1c5938d7", "filename": "gcc/cppbuiltin.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fcppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fcppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -110,9 +110,6 @@ define_builtin_macros_for_compilation_flags (cpp_reader *pfile)\n \n   cpp_define_formatted (pfile, \"__FINITE_MATH_ONLY__=%d\",\n \t\t\tflag_finite_math_only);\n-\n-  if (flag_check_pointer_bounds)\n-    cpp_define (pfile, \"__CHKP__\");\n }\n \n "}, {"sha": "236f199afcf050957639f1cce839f870a0d472c6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -24240,6 +24240,7 @@ gen_producer_string (void)\n       case OPT_U:\n       case OPT_SPECIAL_unknown:\n       case OPT_SPECIAL_ignore:\n+      case OPT_SPECIAL_deprecated:\n       case OPT_SPECIAL_program_name:\n       case OPT_SPECIAL_input_file:\n       case OPT_grecord_gcc_switches:"}, {"sha": "09ec7c057e60426cb288aa4b4c264a37128bb3ff", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -107,6 +107,7 @@ lto_write_options (void)\n \tcase OPT_dumpbase:\n \tcase OPT_SPECIAL_unknown:\n \tcase OPT_SPECIAL_ignore:\n+\tcase OPT_SPECIAL_deprecated:\n \tcase OPT_SPECIAL_program_name:\n \tcase OPT_SPECIAL_input_file:\n \tcase OPT_dumpdir:"}, {"sha": "9cfdfae24e1f9f1d98610100013efc12e981d707", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -245,6 +245,7 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t{\n \tcase OPT_SPECIAL_unknown:\n \tcase OPT_SPECIAL_ignore:\n+\tcase OPT_SPECIAL_deprecated:\n \tcase OPT_SPECIAL_program_name:\n \tcase OPT_SPECIAL_input_file:\n \t  break;\n@@ -285,16 +286,14 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \n \tcase OPT_fopenmp:\n \tcase OPT_fopenacc:\n-\tcase OPT_fcheck_pointer_bounds:\n \t  /* For selected options we can merge conservatively.  */\n \t  for (j = 0; j < *decoded_options_count; ++j)\n \t    if ((*decoded_options)[j].opt_index == foption->opt_index)\n \t      break;\n \t  if (j == *decoded_options_count)\n \t    append_option (decoded_options, decoded_options_count, foption);\n \t  /* -fopenmp > -fno-openmp,\n-\t     -fopenacc > -fno-openacc,\n-\t     -fcheck_pointer_bounds > -fcheck_pointer_bounds  */\n+\t     -fopenacc > -fno-openacc  */\n \t  else if (foption->value > (*decoded_options)[j].value)\n \t    (*decoded_options)[j] = *foption;\n \t  break;\n@@ -557,7 +556,6 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \tcase OPT_Ofast:\n \tcase OPT_Og:\n \tcase OPT_Os:\n-\tcase OPT_fcheck_pointer_bounds:\n \t  break;\n \n \tdefault:"}, {"sha": "6f62526d1cda0fb6a57bf6936c29381a3512c9db", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -156,7 +156,6 @@ function switch_bit_fields (flags)\n \t  hwi_flag \\\n \t  flag_init(\"ToLower\", flags) \\\n \t  flag_init(\"Report\", flags) \\\n-\t  flag_init(\"Deprecated\", flags) \\\n \t  byte_size_flag\n \n \tsub(\", $\", \"\", result)"}, {"sha": "9a79bb862435230d9275ee5077f40c3dfd061579", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -323,8 +323,24 @@ for (i = 0; i < n_opts; i++) {\n \n \talias_arg = opt_args(\"Alias\", flags[i])\n \tif (alias_arg == \"\") {\n-\t\tif (flag_set_p(\"Ignore\", flags[i]))\n-\t\t\talias_data = \"NULL, NULL, OPT_SPECIAL_ignore\"\n+\t\tif (flag_set_p(\"Ignore\", flags[i])) {\n+\t\t\t  alias_data = \"NULL, NULL, OPT_SPECIAL_ignore\"\n+        if (warn_message != \"NULL\")\n+\t\t\t\t  print \"#error Ignored option with Warn\"\n+        if (var_name(flags[i]) != \"\")\n+\t\t\t\t  print \"#error Ignored option with Var\"\n+        if (flag_set_p(\"Report\", flags[i]))\n+\t\t\t\t  print \"#error Ignored option with Report\"\n+      }\n+    else if (flag_set_p(\"Deprecated\", flags[i])) {\n+\t\t\t  alias_data = \"NULL, NULL, OPT_SPECIAL_deprecated\"\n+        if (warn_message != \"NULL\")\n+\t\t\t\t  print \"#error Deprecated option with Warn\"\n+        if (var_name(flags[i]) != \"\")\n+\t\t\t\t  print \"#error Deprecated option with Var\"\n+        if (flag_set_p(\"Report\", flags[i]))\n+\t\t\t\t  print \"#error Deprecated option with Report\"\n+      }\n \t\telse\n \t\t\talias_data = \"NULL, NULL, N_OPTS\"\n \t\tif (flag_set_p(\"Enum.*\", flags[i])) {"}, {"sha": "c2390dec24a55f35ddc174dc01ee2ffcf45ca707", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -493,6 +493,7 @@ for (i = 0; i < n_opts; i++) {\n print \"  N_OPTS,\"\n print \"  OPT_SPECIAL_unknown,\"\n print \"  OPT_SPECIAL_ignore,\"\n+print \"  OPT_SPECIAL_deprecated,\"\n print \"  OPT_SPECIAL_program_name,\"\n print \"  OPT_SPECIAL_input_file\"\n print \"};\""}, {"sha": "2b5f63844fb53faa6dec9916e7486649ecdfb02c", "filename": "gcc/opts-common.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -663,13 +663,13 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     {\n       size_t new_opt_index = option->alias_target;\n \n-      if (new_opt_index == OPT_SPECIAL_ignore)\n+      if (new_opt_index == OPT_SPECIAL_ignore\n+\t  || new_opt_index == OPT_SPECIAL_deprecated)\n \t{\n \t  gcc_assert (option->alias_arg == NULL);\n \t  gcc_assert (option->neg_alias_arg == NULL);\n \t  opt_index = new_opt_index;\n \t  arg = NULL;\n-\t  value = 1;\n \t}\n       else\n \t{\n@@ -744,10 +744,6 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   if (!option_ok_for_language (option, lang_mask))\n     errors |= CL_ERR_WRONG_LANG;\n \n-  /* Mark all deprecated options.  */\n-  if (option->cl_deprecated)\n-    errors |= CL_ERR_DEPRECATED;\n-\n   /* Convert the argument to lowercase if appropriate.  */\n   if (arg && option->cl_tolower)\n     {\n@@ -823,7 +819,8 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n       else\n \tdecoded->canonical_option[i] = NULL;\n     }\n-  if (opt_index != OPT_SPECIAL_unknown && opt_index != OPT_SPECIAL_ignore)\n+  if (opt_index != OPT_SPECIAL_unknown && opt_index != OPT_SPECIAL_ignore\n+      && opt_index != OPT_SPECIAL_deprecated)\n     {\n       generate_canonical_option (opt_index, arg, value, decoded);\n       if (separate_args > 1)\n@@ -1001,6 +998,7 @@ prune_options (struct cl_decoded_option **decoded_options,\n \t{\n \tcase OPT_SPECIAL_unknown:\n \tcase OPT_SPECIAL_ignore:\n+\tcase OPT_SPECIAL_deprecated:\n \tcase OPT_SPECIAL_program_name:\n \tcase OPT_SPECIAL_input_file:\n \t  goto keep;\n@@ -1324,6 +1322,14 @@ read_cmdline_option (struct gcc_options *opts,\n   if (decoded->opt_index == OPT_SPECIAL_ignore)\n     return;\n \n+  if (decoded->opt_index == OPT_SPECIAL_deprecated)\n+    {\n+      /* Warn only about positive ignored options.  */\n+      if (decoded->value)\n+\twarning_at (loc, 0, \"switch %qs is no longer supported\", opt);\n+      return;\n+    }\n+\n   option = &cl_options[decoded->opt_index];\n \n   if (decoded->errors\n@@ -1337,12 +1343,6 @@ read_cmdline_option (struct gcc_options *opts,\n       return;\n     }\n \n-  if (decoded->errors & CL_ERR_DEPRECATED)\n-    {\n-      warning_at (loc, 0, \"deprecated command line option %qs\", opt);\n-      return;\n-    }\n-\n   gcc_assert (!decoded->errors);\n \n   if (!handle_option (opts, opts_set, decoded, lang_mask, DK_UNSPECIFIED,\n@@ -1619,7 +1619,7 @@ control_warning_option (unsigned int opt_index, int kind, const char *arg,\n \targ = cl_options[opt_index].alias_arg;\n       opt_index = cl_options[opt_index].alias_target;\n     }\n-  if (opt_index == OPT_SPECIAL_ignore)\n+  if (opt_index == OPT_SPECIAL_ignore || opt_index == OPT_SPECIAL_deprecated)\n     return;\n   if (dc)\n     diagnostic_classify_diagnostic (dc, opt_index, (diagnostic_t) kind, loc);"}, {"sha": "04efda5b82a3eb1da85053b58b1171a05475b8a9", "filename": "gcc/opts.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -106,8 +106,6 @@ struct cl_option\n   BOOL_BITFIELD cl_tolower : 1;\n   /* Report argument with -fverbose-asm  */\n   BOOL_BITFIELD cl_report : 1;\n-  /* Deprecated option  */\n-  BOOL_BITFIELD cl_deprecated: 1;\n   /* Argument is an unsigned integer with an optional byte suffix.  */\n   BOOL_BITFIELD cl_byte_size: 1;\n   /* Offset of field for this option in struct gcc_options, or\n@@ -219,7 +217,6 @@ extern const unsigned int cl_enums_count;\n #define CL_ERR_NEGATIVE\t\t(1 << 6) /* Negative form of option\n \t\t\t\t\t    not permitted (together\n \t\t\t\t\t    with OPT_SPECIAL_unknown).  */\n-#define CL_ERR_DEPRECATED\t(1 << 7) /* Deprecated option.  */\n \n /* Structure describing the result of decoding an option.  */\n "}, {"sha": "341079b8069b7d4797bf668f0196689ec13d52ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,3 +1,62 @@\n+2018-08-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/opt/mpx.C: Fix scanned pattern.\n+\t* gcc.target/i386/mpx.c: Likewise.\n+\t* g++.dg/warn/Wunreachable-code-1.C: Remove.\n+\t* g++.dg/warn/Wunreachable-code-2.C: Likewise.\n+\t* gcc.dg/torture/pr52969.c: Likewise.\n+\t* g++.dg/warn/pr31246-2.C: Likewise.\n+\t* g++.dg/warn/pr31246.C: Likewise.\n+\t* gcc.dg/pr33092.c: Likewise.\n+\t* g++.dg/opt/eh1.C: Remove a deprecated option.\n+\t* g++.dg/template/inline1.C: Likewise.\n+\t* g++.dg/tree-ssa/pr81408.C: Likewise.\n+\t* gcc.dg/pr41837.c: Likewise.\n+\t* gcc.dg/pr41841.c: Likewise.\n+\t* gcc.dg/pr42250.c: Likewise.\n+\t* gcc.dg/pr43084.c: Likewise.\n+\t* gcc.dg/pr43317.c: Likewise.\n+\t* gcc.dg/pr51879-18.c: Likewise.\n+\t* gcc.dg/torture/pr36066.c: Likewise.\n+\t* gcc.dg/tree-ssa/ifc-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/ifc-cd.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr19210-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr45122.c: Likewise.\n+\t* gcc.target/i386/pr45352-2.c: Likewise.\n+\t* gcc.target/i386/zee.c: Likewise.\n+\t* gfortran.dg/auto_char_len_2.f90: Likewise.\n+\t* gfortran.dg/auto_char_len_4.f90: Likewise.\n+\t* gfortran.dg/c_ptr_tests_15.f90: Likewise.\n+\t* gfortran.dg/char_array_structure_constructor.f90: Likewise.\n+\t* gfortran.dg/gomp/pr47331.f90: Likewise.\n+\t* gfortran.dg/pr40999.f: Likewise.\n+\t* gfortran.dg/pr41011.f: Likewise.\n+\t* gfortran.dg/pr42051.f03: Likewise.\n+\t* gfortran.dg/pr46804.f90: Likewise.\n+\t* gfortran.dg/pr83149_1.f90: Likewise.\n+\t* gfortran.dg/pr83149_b.f90: Likewise.\n+\t* gfortran.dg/whole_file_1.f90: Likewise.\n+\t* gfortran.dg/whole_file_10.f90: Likewise.\n+\t* gfortran.dg/whole_file_11.f90: Likewise.\n+\t* gfortran.dg/whole_file_12.f90: Likewise.\n+\t* gfortran.dg/whole_file_13.f90: Likewise.\n+\t* gfortran.dg/whole_file_14.f90: Likewise.\n+\t* gfortran.dg/whole_file_15.f90: Likewise.\n+\t* gfortran.dg/whole_file_16.f90: Likewise.\n+\t* gfortran.dg/whole_file_17.f90: Likewise.\n+\t* gfortran.dg/whole_file_18.f90: Likewise.\n+\t* gfortran.dg/whole_file_19.f90: Likewise.\n+\t* gfortran.dg/whole_file_2.f90: Likewise.\n+\t* gfortran.dg/whole_file_20.f03: Likewise.\n+\t* gfortran.dg/whole_file_3.f90: Likewise.\n+\t* gfortran.dg/whole_file_4.f90: Likewise.\n+\t* gfortran.dg/whole_file_5.f90: Likewise.\n+\t* gfortran.dg/whole_file_6.f90: Likewise.\n+\t* gfortran.dg/whole_file_7.f90: Likewise.\n+\t* gfortran.dg/whole_file_8.f90: Likewise.\n+\t* gfortran.dg/whole_file_9.f90: Likewise.\n+\t* gcc.dg/vect/vect.exp: Likewise.\n+\n 2018-08-17  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/86505"}, {"sha": "0c3e679fec92c4287c1fbf426120d75f3a67f6dc", "filename": "gcc/testsuite/g++.dg/opt/eh1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Feh1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Feh1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Feh1.C?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,6 @@\n // PR middle-end/14477\n // { dg-do compile }\n-// { dg-options \"-O2 -fno-default-inline\" }\n+// { dg-options \"-O2\" }\n \n struct A\n {"}, {"sha": "201ee1b3818d8ff720306d459731e1eec7dd8e83", "filename": "gcc/testsuite/g++.dg/opt/mpx.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmpx.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmpx.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmpx.C?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n // { dg-options \"-fcheck-pointer-bounds -fchkp-first-field-has-own-bounds\" }\n \n-// { dg-warning \"deprecated command line option .-fcheck-pointer-bounds.\" \"\" { target *-*-* } 0 }\n-// { dg-warning \"deprecated command line option .-fchkp-first-field-has-own-bounds.\" \"\" { target *-*-* } 0 }\n+// { dg-warning \".-fcheck-pointer-bounds. is no longer supported\" \"\" { target *-*-* } 0 }\n+// { dg-warning \".-fchkp-first-field-has-own-bounds. is no longer supported\" \"\" { target *-*-* } 0 }"}, {"sha": "f941e6c373fa7071e38b8559a977a732179751e0", "filename": "gcc/testsuite/g++.dg/template/inline1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finline1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finline1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finline1.C?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-fno-default-inline -O0\" }\n+// { dg-options \"-O0\" }\n // { dg-final { scan-assembler-not \"\\n_?_ZN1X3FooIiEEvT_\\[: \\t\\n\\]\" } }\n \n // Copyright (C) 2003 Free Software Foundation, Inc."}, {"sha": "89d6e550206d641b22c24573b5542196ca6d382a", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr81408.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -std=gnu++11 -fopt-info-loop-missed -Wunsafe-loop-optimizations\" } */\n+/* { dg-options \"-O2 -std=gnu++11 -fopt-info-loop-missed\" } */\n struct p\n {\n   char *ay;"}, {"sha": "23fc86dfbb28617d7ae93c4d9b26cd658a6a92a3", "filename": "gcc/testsuite/g++.dg/warn/Wunreachable-code-1.C", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-1.C?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,22 +0,0 @@\n-/* PR17544 Incorrect -Wunreachable-code warning\n-   Origin: sebor@roguewave.com\n-\n-   G++ appends a \"return 0;\" when finishing a function, but it was not\n-   given a source location.  The gimplifier thinks a return statement\n-   needs a locus so it would add one, making the compiler generated code\n-   visible to the unreachable code warning.  */\n-\n-/* { dg-do compile } */\n-/* { dg-options \"-O -Wunreachable-code\" } */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  const char* const s = argc < 2 ? \"\" : argv [1];\n-  int i = 0;\n-  do {\n-    ++i;\n-  } while (i < s [0]);\n-  return i;\n-}\n-"}, {"sha": "d50f7fe57d7f06557db3922c6d90c0005cfdc83a", "filename": "gcc/testsuite/g++.dg/warn/Wunreachable-code-2.C", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-2.C?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,23 +0,0 @@\n-// PR c++/21228\n-/* { dg-options \"-Wunreachable-code\" } */\n-\n-class testStringBase\n-{\n-public:\n-  char *stringPtr;\n-};\n-\n-class testString : public testStringBase\n-{\n-public:\n-  testString();\n-};\n-\n-testString::testString()\n-{\n-  stringPtr = (char *) 9;\n-}\n- \n-int main(int argc, char **argv) {\n-  testString s;\n-}"}, {"sha": "c9a4cae7e84b6812f12dadd65f71c8bcb50e3018", "filename": "gcc/testsuite/g++.dg/warn/pr31246-2.C", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246-2.C?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,9 +0,0 @@\n-// PR 31246\n-// { dg-do compile }\n-// { dg-options \"-Wunreachable-code\" }\n-#include <new>\n-\n-int* get_ptr(void* ptr)\n-{\n-  return new(ptr) int();\n-}"}, {"sha": "f3603af478772c116746ce90f473ed16e598ef0b", "filename": "gcc/testsuite/g++.dg/warn/pr31246.C", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246.C?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,9 +0,0 @@\n-// PR 31246\n-// { dg-do compile }\n-// { dg-options \"-Wunreachable-code -D_GLIBCXX_DEBUG\" }\n-#include <vector>\n-\n-int main()\n-{\n-  std::vector<int>::iterator a;\n-}"}, {"sha": "8f48fab5dd91386cf79113548b4df18612967c71", "filename": "gcc/testsuite/gcc.dg/pr33092.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33092.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33092.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33092.c?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,6 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O1 -fno-tree-salias\" } */\n-int foo ()\n-{\n-  return 0;\n-}"}, {"sha": "de6bd06d64b37f1b04cfaac4386c1fa594553a10", "filename": "gcc/testsuite/gcc.dg/pr41837.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41837.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41837.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41837.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,6 @@\n /* PR middle-end/41837 */\n /* { dg-do compile } */\n-/* { dg-options \"-fipa-struct-reorg -O -fwhole-program -fprofile-generate\" } */\n+/* { dg-options \"-O -fwhole-program -fprofile-generate\" } */\n \n typedef struct { int a, b; } T1;\n typedef struct S1 *T2;"}, {"sha": "8bce4e6240b95faa565ab531c205dd8cfc8e7b63", "filename": "gcc/testsuite/gcc.dg/pr41841.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41841.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/41841 */\n /* { dg-do compile } */\n-/* { dg-options \"-O -fipa-struct-reorg -fwhole-program -fipa-cp\" } */\n+/* { dg-options \"-O -fwhole-program -fipa-cp\" } */\n \n typedef struct S *T;\n typedef struct { } *U;"}, {"sha": "21b29ba4e7ed0141c0b2dd96a1a18bb5e9fa18db", "filename": "gcc/testsuite/gcc.dg/pr42250.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42250.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42250.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42250.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fipa-struct-reorg\" } */\n+/* { dg-options \"-O2\" } */\n \n extern double log10 (double __x);\n extern double ceil (double __x);"}, {"sha": "f70ed863e167727a52a639799602d2a31057c7e2", "filename": "gcc/testsuite/gcc.dg/pr43084.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43084.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43084.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43084.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,6 @@\n /* PR debug/43084 */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fipa-struct-reorg -fwhole-program -fcompare-debug\" } */\n+/* { dg-options \"-O1 -fwhole-program -fcompare-debug\" } */\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } } */\n \n struct S"}, {"sha": "de81c44150c15af0cfb15b906d63862c79f819d4", "filename": "gcc/testsuite/gcc.dg/pr43317.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43317.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fipa-struct-reorg -fwhole-program -g\" } */\n+/* { dg-options \"-O -fwhole-program -g\" } */\n \n extern void *malloc(__SIZE_TYPE__);\n "}, {"sha": "16012253e3ff45359a1a2538c93c701d596610d8", "filename": "gcc/testsuite/gcc.dg/pr51879-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51879-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51879-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51879-18.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-tail-merge -fdump-tree-pre -fno-tree-copy-prop -fno-tree-dominator-opts -fno-tree-copyrename\" } */\n+/* { dg-options \"-O2 -ftree-tail-merge -fdump-tree-pre -fno-tree-copy-prop -fno-tree-dominator-opts\" } */\n \n extern int foo (void);\n "}, {"sha": "547806a95319b1055ce2ced3fb186aad2c915c02", "filename": "gcc/testsuite/gcc.dg/torture/pr36066.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36066.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36066.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36066.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-funsafe-loop-optimizations -ftree-vrp\" } */\n+/* { dg-options \"-ftree-vrp\" } */\n \n typedef int FLAC__int32;\n typedef int FLAC__bool;"}, {"sha": "05331d93f34e9cba4f23a2c494ed1396af837b28", "filename": "gcc/testsuite/gcc.dg/torture/pr52969.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52969.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52969.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52969.c?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-ftree-loop-if-convert-stores\" } */\n-\n-int a, b;\n-float xsum[100];\n-void foo (float *cluster)\n-{\n-  int j;\n-  for (; a ; ++j) {\n-      xsum[j] = cluster[j];\n-      if (xsum[j] > 0)\n-\txsum[j] = 0;\n-  }\n-  if (xsum[0])\n-    b = 0;\n-}"}, {"sha": "c53758041317cfb6bc94799e9014fafaa88b0b74", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-8.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,6 @@\n \n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-ifcvt-details-blocks -ftree-loop-if-convert-stores\" } */\n+/* { dg-options \"-Ofast -fdump-tree-ifcvt-details-blocks\" } */\n /* { dg-require-visibility \"\" } */\n \n #define LEN 4096"}, {"sha": "fce3b77f1931ffcaf748bce67e608238f1d31b94", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-cd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-ifcvt-details-blocks-details -ftree-loop-if-convert-stores\" } */\n+/* { dg-options \"-O3 -fdump-tree-ifcvt-details-blocks-details\" } */\n \n void foo (int *x1, int *x2, int *x3, int *x4, int *y)\n {"}, {"sha": "9162d1569e6e290e6de427fdf797b7cc9d7f544d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19210-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fopt-info-loop-missed -Wunsafe-loop-optimizations\" } */\n+/* { dg-options \"-O2 -fopt-info-loop-missed\" } */\n extern void g(void);\n \n void"}, {"sha": "969fe0e7150ae5e63f1b017f04ab28401f43c2a3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr45122.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45122.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -2,7 +2,7 @@\n /* PR tree-optimization/45122 */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -funsafe-loop-optimizations\" } */\n+/* { dg-options \"-O2\" } */\n \n extern void abort (void);\n "}, {"sha": "fc5c1b84bc3f03d1ffa4aeb5b95c72339706fba6", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -262,13 +262,6 @@ et-dg-runtest dg-runtest [lsort \\\n \t[glob -nocomplain $srcdir/$subdir/ggc-*.\\[cS\\]]] \\\n \t\"\" $DEFAULT_VECTCFLAGS\n \n-# -ftree-loop-if-convert-stores\n-set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n-lappend DEFAULT_VECTCFLAGS \"-ftree-loop-if-convert-stores\"\n-et-dg-runtest dg-runtest [lsort \\\n-\t[glob -nocomplain $srcdir/$subdir/if-cvt-stores-vect-*.\\[cS\\]]] \\\n-\t\"\" $DEFAULT_VECTCFLAGS\n-\n # With -O3.\n # Don't allow IPA cloning, because it throws our counts out of whack.\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS"}, {"sha": "2be96d45b0a2ffdccc45bc74ef9e260a11855a03", "filename": "gcc/testsuite/gcc.target/i386/mpx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,3 +1,3 @@\n /* { dg-do compile } */\n // { dg-options \"-mmpx\" }\n-// { dg-warning \"deprecated command line option .-mmpx.\" \"\" { target *-*-* } 0 }\n+// { dg-warning \"switch .-mmpx. is no longer supported\" \"\" { target *-*-* } 0 }"}, {"sha": "216c50694221b1b262d4a0d0b1a1667acb9f8452", "filename": "gcc/testsuite/gcc.target/i386/pr45352-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-2.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -mtune=amdfam10 -fexpensive-optimizations -fgcse -foptimize-register-move -freorder-blocks -fschedule-insns2 -funswitch-loops -fgcse-las -fselective-scheduling2 -fsel-sched-pipelining -funroll-all-loops\" } */\n+/* { dg-options \"-O1 -mtune=amdfam10 -fexpensive-optimizations -fgcse -freorder-blocks -fschedule-insns2 -funswitch-loops -fgcse-las -fselective-scheduling2 -fsel-sched-pipelining -funroll-all-loops\" } */\n \n typedef char uint8_t;\n typedef int uint32_t;"}, {"sha": "608f7c9fc3749fd83bf0313028d1b5a6c9e8ae14", "filename": "gcc/testsuite/gcc.target/i386/zee.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzee.c?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-O2 -fzee\" } */\n+/* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler-not \"mov\\[\\\\t \\]+\\(%\\[\\^,\\]+\\),\\[\\\\t \\]*\\\\1\" } } */\n int mask[100];\n int foo(unsigned x)"}, {"sha": "e103b6db4a4c1df64e93ed8ee3d4573d0c052d91", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_2.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n+! { dg-options \"\" }\n !\n ! PR fortran/41235\n !"}, {"sha": "16789fafcc70ca914534e458e5612ac9537a31a0", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_4.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_4.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-pedantic -fwhole-file\" }\n !\n ! Tests the fix for PR25087, in which the following invalid code\n ! was not detected."}, {"sha": "ced8c596769cead5789e34bf7b43372943f51474", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_15.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file -fdump-tree-original\" }\n+! { dg-options \"-fdump-tree-original\" }\n !\n ! PR fortran/43042 - fix ICE with c_null_ptr when using\n ! -fwhole-file (or -flto, which implies -fwhole-file)."}, {"sha": "ae567dcb6f6075522fbb8c37ac7d8b8c09634e69", "filename": "gcc/testsuite/gfortran.dg/char_array_structure_constructor.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do run }\n-! { dg-options \"-fwhole-file\" }\n !\n ! PR fortran/19107\n ! -fwhole-file flag added for PR fortran/44945"}, {"sha": "6c29356d03e90228ca050ac5a21520f130161c2e", "filename": "gcc/testsuite/gfortran.dg/gomp/pr47331.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr47331.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr47331.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr47331.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,6 @@\n ! PR fortran/47331\n ! { dg-do compile }\n-! { dg-options \"-fopenmp -fwhole-file\" }\n+! { dg-options \"-fopenmp\" }\n \n subroutine foo\n   !$omp parallel"}, {"sha": "7ebb632ab2bd8481c6e818018840710235899f3b", "filename": "gcc/testsuite/gfortran.dg/pr40999.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O3 -fwhole-file\" }\n+! { dg-options \"-O3\" }\n \n       SUBROUTINE ZLARFG( ALPHA )\n         COMPLEX*16 ZLADIV"}, {"sha": "83e85fb002adda69d6ac897f774315cea7964025", "filename": "gcc/testsuite/gfortran.dg/pr41011.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O3 -fwhole-file\" }\n+! { dg-options \"-O3\" }\n       CALL UVSET(NX,NY,NZ,HVAR,ZET,NP,DZ,DKM,UM,VM,UG,VG,TM,DCDX, ! { dg-warning \"Rank mismatch\" }\n      *ITY,ISH,NSMT,F)\n          CALL DCTDX(NX,NY,NX1,NFILT,C(MLAG),DCDX(MLAG),HELP,HELPA,"}, {"sha": "8f30e328c04c3de424b933b15a35a501bf1c1ca8", "filename": "gcc/testsuite/gfortran.dg/pr42051.f03", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42051.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42051.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42051.f03?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fno-whole-file\" }\n !\n ! PR fortran/42051\n ! PR fortran/44064"}, {"sha": "38e4a7e4e53ff25f995ee28b5dc68191257a9c33", "filename": "gcc/testsuite/gfortran.dg/pr46804.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46804.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46804.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46804.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,6 @@\n ! PR rtl-optimization/46804\n ! { dg-do run }\n-! { dg-options \"-O -fPIC -fexpensive-optimizations -fgcse -foptimize-register-move -fpeel-loops -fno-tree-loop-optimize\" }\n+! { dg-options \"-O -fPIC -fexpensive-optimizations -fgcse -fpeel-loops -fno-tree-loop-optimize\" }\n \n program main\n   integer, parameter :: n1 = 2, n2 = 3, n3 = 4, slen = 3"}, {"sha": "5b009963e443c5f9f9811f4548c5cba579e4b78c", "filename": "gcc/testsuite/gfortran.dg/pr83149_1.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_1.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,5 @@\n ! Compiled with pr83149.f90\n ! { dg-do run }\n-! { dg-options \"-fno-whole-file\" }\n ! { dg-compile-aux-modules \"pr83149.f90\" }\n ! { dg-additional-sources pr83149.f90 }\n !"}, {"sha": "9013617fa718dc40094e7fbe7638c5feb52435df", "filename": "gcc/testsuite/gfortran.dg/pr83149_b.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_b.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_b.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83149_b.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,6 +1,5 @@\n ! Compiled with pr83149_a.f90\n ! { dg-do run }\n-! { dg-options \"-fno-whole-file\" }\n ! { dg-compile-aux-modules \"pr83149_a.f90\" }\n ! { dg-additional-sources pr83149_a.f90 }\n !"}, {"sha": "bceb250970fc2bbbe5a829067c374b5b2561c6e9", "filename": "gcc/testsuite/gfortran.dg/whole_file_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n+! { dg-options \"\" }\n ! Tests the fix for PR22571 in which the derived types in a, b\n ! c and d were not detected to be different.  In e and f, they\n ! are the same because they are sequence types."}, {"sha": "4d47d9ddfce35a1e5a1f65279e080ad11856e714", "filename": "gcc/testsuite/gfortran.dg/whole_file_10.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_10.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n ! Test the fix for the fifth problem in PR40011, where the\n ! entries were not resolved, resulting in a segfault.\n !"}, {"sha": "95748493f73d8b876a934be5b0ab247f975c67b1", "filename": "gcc/testsuite/gfortran.dg/whole_file_11.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_11.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n !\n ! Tests the fix PR40011 comment 16 in which the derived type lists in\n ! different program units were getting mixed up."}, {"sha": "23ea10248eca692de9a6615f1cb4702560d719e3", "filename": "gcc/testsuite/gfortran.dg/whole_file_12.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_12.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n !\n ! Tests the fix PR40011 comment 17 in which the explicit interface was\n ! being ignored and the missing argument was not correctly handled, which"}, {"sha": "ffa31c8faf35a6ac03ee896102fcea0087e46557", "filename": "gcc/testsuite/gfortran.dg/whole_file_13.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_13.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do run }\n-! { dg-options \"-fwhole-file -O3\" }\n ! Check that the TYPE_CANONICAL is being correctly set\n ! for the derived types, when whole file compiling.\n ! (based on import.f90)"}, {"sha": "52c2e7a7a42d2d707a247003f74215871e3e2258", "filename": "gcc/testsuite/gfortran.dg/whole_file_14.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_14.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-fwhole-file -O3\" }\n+! { dg-options \"-O3\" }\n ! Check that the derived types are correctly substituted when\n ! whole file compiling.\n !"}, {"sha": "fd9f62d8424d19502dfdb5d584ce990f80b35f91", "filename": "gcc/testsuite/gfortran.dg/whole_file_15.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_15.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n ! Test the fix for PR43450 in which the use of 'replica_env_type'\n ! caused an ICE in ep_types\n !"}, {"sha": "c45251e8c3ad0307f02915b5f86f56e2b840c565", "filename": "gcc/testsuite/gfortran.dg/whole_file_16.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n !\n ! PR fortran/31346\n !"}, {"sha": "d0e07dddb0dd912f7e988d2d15e0555272fe7ab0", "filename": "gcc/testsuite/gfortran.dg/whole_file_17.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-pedantic -fwhole-file\" }\n+! { dg-options \"-pedantic\" }\n !\n ! PR fortran/30668\n !"}, {"sha": "9d0229afc0a4712dc569925f9dda0e1fab0ab573", "filename": "gcc/testsuite/gfortran.dg/whole_file_18.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file -Wno-unused-dummy-argument\" }\n+! { dg-options \"-Wno-unused-dummy-argument\" }\n !\n ! PR fortran/34260\n !"}, {"sha": "184e028ef23a41eabcb335d6383ba39a57e49607", "filename": "gcc/testsuite/gfortran.dg/whole_file_19.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_19.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n ! Test the fix for pr40011 comment #42, in which the subroutine\n ! would just get lost with -fwhole-file.\n !"}, {"sha": "60163f42c30a2c5d51c55d4cd18cc71fd527d817", "filename": "gcc/testsuite/gfortran.dg/whole_file_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n+! { dg-options \"\" }\n ! Tests the fix for PR26227 in which the interface mismatches\n ! below were not detected.\n !"}, {"sha": "fd53422481d4912088694dbdbc7e5ec88094d015", "filename": "gcc/testsuite/gfortran.dg/whole_file_20.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file -fcoarray=single\" }\n+! { dg-options \"-fcoarray=single\" }\n !\n ! Procedures with dummy arguments that are coarrays or polymorphic\n ! must have an explicit interface in the calling routine."}, {"sha": "9b4f5a7d31da87bcdde48448533a6a76a4e155b4", "filename": "gcc/testsuite/gfortran.dg/whole_file_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n+! { dg-options \"\" }\n ! Tests the fix for PR26227 in which the interface mismatches\n ! below were not detected.\n !"}, {"sha": "2dfb33dc7ab4f4f4b3af233ae391f76ce57fb2bd", "filename": "gcc/testsuite/gfortran.dg/whole_file_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_4.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file -std=legacy\" }\n+! { dg-options \"-std=legacy\" }\n ! Tests the fix for PR24886 in which the mismatch between the\n ! character lengths of the actual and formal arguments of\n ! 'foo' was not detected."}, {"sha": "61612d46f12ec6c297e91c414bca2e447c84dbff", "filename": "gcc/testsuite/gfortran.dg/whole_file_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_5.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O3 -fwhole-file -fdump-tree-optimized\" }\n+! { dg-options \"-O3 -fdump-tree-optimized\" }\n ! { dg-add-options bind_pic_locally }\n !\n ! Check that inlining of functions declared BEFORE usage works."}, {"sha": "fb961f3ccab6edfdcd5cbfaaa8ea9b5c11454ee8", "filename": "gcc/testsuite/gfortran.dg/whole_file_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_6.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O3 -fwhole-file -fdump-tree-optimized\" }\n+! { dg-options \"-O3 -fdump-tree-optimized\" }\n ! { dg-add-options bind_pic_locally }\n !\n ! Check that inlining of functions declared AFTER usage works."}, {"sha": "80609cad5af0625326581da6d1261f17bfba862f", "filename": "gcc/testsuite/gfortran.dg/whole_file_7.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_7.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n ! Test the fixes for the first two problems in PR40011\n !\n ! Contributed by Dominique d'Humieres <dominiq@lps.ens.fr>"}, {"sha": "db05c998ba7b484702dcacc21f40f6a85d6fd04f", "filename": "gcc/testsuite/gfortran.dg/whole_file_8.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_8.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n ! Test the fix for the third problem in PR40011, where false\n ! type/rank mismatches were found in the main program calls.\n !"}, {"sha": "17e70596cba099f092c6748bc808683d5149c977", "filename": "gcc/testsuite/gfortran.dg/whole_file_9.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c1235622280db4a55cd86daa176b08b72f1210/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_9.f90?ref=c0c1235622280db4a55cd86daa176b08b72f1210", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-fwhole-file\" }\n ! Test the fix for the fourth problem in PR40011, where the\n ! entries were not resolved, resulting in a segfault.\n !"}]}