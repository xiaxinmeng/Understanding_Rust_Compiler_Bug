{"sha": "4255220d922400aeb4c3da7b627b716c908d9a4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI1NTIyMGQ5MjI0MDBhZWI0YzNkYTdiNjI3YjcxNmM5MDhkOWE0ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-10T20:03:20Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-10T20:03:20Z"}, "message": "(max_uid_cuid): New static variable.\n\n(INSN_CUID): Call abort if INSN is out of range.\n(combine_instructions): Set max_uid_cuid.  Set uid_cuid directly\ninstead of through INSN_CUID.\n(get_last_value): Use prev_real_insn instead of prev_nonnote_insn.\nIgnore USE insns generated by combine.\n\nFrom-SVN: r9169", "tree": {"sha": "9b4bd272eda295cd425ca6759c2b790e302fa197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b4bd272eda295cd425ca6759c2b790e302fa197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4255220d922400aeb4c3da7b627b716c908d9a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4255220d922400aeb4c3da7b627b716c908d9a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4255220d922400aeb4c3da7b627b716c908d9a4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4255220d922400aeb4c3da7b627b716c908d9a4e/comments", "author": null, "committer": null, "parents": [{"sha": "26ba4aeef6c188260472e687ee164a9c5f8955ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ba4aeef6c188260472e687ee164a9c5f8955ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ba4aeef6c188260472e687ee164a9c5f8955ef"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "d2df7d8755b6aa52519058db3a4e5aba002a76a9", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4255220d922400aeb4c3da7b627b716c908d9a4e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4255220d922400aeb4c3da7b627b716c908d9a4e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=4255220d922400aeb4c3da7b627b716c908d9a4e", "patch": "@@ -135,10 +135,13 @@ static int total_attempts, total_merges, total_extras, total_successes;\n    the dumps produced by earlier passes with those from later passes.  */\n \n static int *uid_cuid;\n+static int max_uid_cuid;\n \n /* Get the cuid of an insn.  */\n \n-#define INSN_CUID(INSN) (uid_cuid[INSN_UID (INSN)])\n+#define INSN_CUID(INSN) (INSN_UID (INSN) > max_uid_cuid\t\t\\\n+\t\t\t ? (abort(), 0)\t\t\t\t\\\n+\t\t\t : uid_cuid[INSN_UID (INSN)])\n \n /* Maximum register number, which is the size of the tables below.  */\n \n@@ -488,6 +491,7 @@ combine_instructions (f, nregs)\n       i = INSN_UID (insn);\n \n   uid_cuid = (int *) alloca ((i + 1) * sizeof (int));\n+  max_uid_cuid = i;\n \n   nonzero_bits_mode = mode_for_size (HOST_BITS_PER_WIDE_INT, MODE_INT, 0);\n \n@@ -513,7 +517,7 @@ combine_instructions (f, nregs)\n \n   for (insn = f, i = 0; insn; insn = NEXT_INSN (insn))\n     {\n-      INSN_CUID (insn) = ++i;\n+      uid_cuid[INSN_UID (insn)] = ++i;\n       subst_low_cuid = i;\n       subst_insn = insn;\n \n@@ -9846,7 +9850,7 @@ get_last_value (x)\n \t  && reg_last_set_label[regno] != label_tick))\n     return 0;\n \n-  /* If the value was set in a later insn that the ones we are processing,\n+  /* If the value was set in a later insn than the ones we are processing,\n      we can't use it even if the register was only set once, but make a quick\n      check to see if the previous insn set it to something.  This is commonly\n      the case when the same pseudo is used by repeated insns.  */\n@@ -9855,9 +9859,13 @@ get_last_value (x)\n     {\n       rtx insn, set;\n \n-      for (insn = prev_nonnote_insn (subst_insn);\n-\t   insn && INSN_CUID (insn) >= subst_low_cuid;\n-\t   insn = prev_nonnote_insn (insn))\n+      /* Skip over USE insns.  They are not useful here, and they may have\n+\t been made by combine, in which case they do not have a INSN_CUID\n+\t value.  */\n+      for (insn = prev_real_insn (subst_insn);\n+\t   insn && (GET_CODE (PATTERN (insn)) == USE\n+\t\t    || INSN_CUID (insn) >= subst_low_cuid);\n+\t   insn = prev_real_insn (insn))\n \t;\n \n       if (insn"}]}