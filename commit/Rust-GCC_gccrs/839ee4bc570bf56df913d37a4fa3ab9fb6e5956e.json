{"sha": "839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5ZWU0YmM1NzBiZjU2ZGY5MTNkMzdhNGZhM2FiOWZiNmU1OTU2ZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2004-02-05T21:56:38Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2004-02-05T21:56:38Z"}, "message": "re PR target/13750 (Ada bootstrap failure on Tru64 UNIX: b_gnat[1b].o comparison failure)\n\n\tPR middle-end/13750\n\tRevert:\n\t2004-01-15  Geoffrey Keating  <geoffk@apple.com>\n\tPR pch/13361\n\t* c-typeck.c (constructor_asmspec): Delete.\n\t(struct initializer_stack): Delete field 'asmspec'.\n\t(start_init): Delete saving of asmspec.\n\t(finish_init): Don't update constructor_asmspec.\n\t* dwarf2out.c (rtl_for_decl_location): Duplicate string from tree.\n\t* stmt.c (expand_asm): Duplicate strings from tree.\n\t(expand_asm_operands): Likewise.\n\t* tree.c (tree_size): Update computation of size of STRING_CST.\n\t(make_node): Don't make STRING_CST nodes.\n\t(build_string): Allocate string with tree node.\n\t* tree.def (STRING_CST): Update comment.\n\t* tree.h (TREE_STRING_POINTER): Adjust for change to STRING_CST.\n\t(tree_string): Place contents of string in tree node.\n\t* config/sh/sh.c (sh_handle_sp_switch_attribute): Duplicate string\n\tfrom tree.\n\n\tcp:\n\tPR middle-end/13750\n\tRevert:\n\t2004-01-15  Geoffrey Keating  <geoffk@apple.com>\n\tPR pch/13361\n\t* cp/lex.c (handle_pragma_interface): Duplicate string from tree.\n\t(handle_pragma_implementation): Likewise.\n\n\ttestsuite:\n\tPR middle-end/13750\n\tRevert:\n\t2004-01-15  Geoffrey Keating  <geoffk@apple.com>\n\tPR pch/13361\n\t* testsuite/g++.dg/pch/wchar-1.C: New.\n\t* testsuite/g++.dg/pch/wchar-1.Hs: New.\n\nFrom-SVN: r77343", "tree": {"sha": "fea6753c45927b3c5f949fb0dae2037d0d80e885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fea6753c45927b3c5f949fb0dae2037d0d80e885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/comments", "author": null, "committer": null, "parents": [{"sha": "687d688ee40cff3395a34c7dacab54550f7de606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687d688ee40cff3395a34c7dacab54550f7de606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687d688ee40cff3395a34c7dacab54550f7de606"}], "stats": {"total": 114, "additions": 72, "deletions": 42}, "files": [{"sha": "ed731d5c92130790e8aeb7941b438242f215e776", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -1,3 +1,25 @@\n+2004-02-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\tPR middle-end/13750\n+\tRevert:\n+\t2004-01-15  Geoffrey Keating  <geoffk@apple.com>\n+\tPR pch/13361\n+\t* c-typeck.c (constructor_asmspec): Delete.\n+\t(struct initializer_stack): Delete field 'asmspec'.\n+\t(start_init): Delete saving of asmspec.\n+\t(finish_init): Don't update constructor_asmspec.\n+\t* dwarf2out.c (rtl_for_decl_location): Duplicate string from tree.\n+\t* stmt.c (expand_asm): Duplicate strings from tree.\n+\t(expand_asm_operands): Likewise.\n+\t* tree.c (tree_size): Update computation of size of STRING_CST.\n+\t(make_node): Don't make STRING_CST nodes.\n+\t(build_string): Allocate string with tree node.\n+\t* tree.def (STRING_CST): Update comment.\n+\t* tree.h (TREE_STRING_POINTER): Adjust for change to STRING_CST.\n+\t(tree_string): Place contents of string in tree node.\n+\t* config/sh/sh.c (sh_handle_sp_switch_attribute): Duplicate string\n+\tfrom tree.\n+\n 2004-02-05  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* diagnostic.h (DEFINE_DIAGNOSTIC_KIND): Change parameter M to"}, {"sha": "95a2c3495cdc685c0b29125124a0c352b572d463", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -4112,6 +4112,9 @@ static int require_constant_elements;\n    such as (struct foo) {...}.  */\n static tree constructor_decl;\n \n+/* start_init saves the ASMSPEC arg here for really_start_incremental_init.  */\n+static const char *constructor_asmspec;\n+\n /* Nonzero if this is an initializer for a top-level decl.  */\n static int constructor_top_level;\n \n@@ -4183,6 +4186,7 @@ struct initializer_stack\n {\n   struct initializer_stack *next;\n   tree decl;\n+  const char *asmspec;\n   struct constructor_stack *constructor_stack;\n   struct constructor_range_stack *constructor_range_stack;\n   tree elements;\n@@ -4199,12 +4203,17 @@ struct initializer_stack *initializer_stack;\n /* Prepare to parse and output the initializer for variable DECL.  */\n \n void\n-start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level)\n+start_init (tree decl, tree asmspec_tree, int top_level)\n {\n   const char *locus;\n   struct initializer_stack *p = xmalloc (sizeof (struct initializer_stack));\n+  const char *asmspec = 0;\n+\n+  if (asmspec_tree)\n+    asmspec = TREE_STRING_POINTER (asmspec_tree);\n \n   p->decl = constructor_decl;\n+  p->asmspec = constructor_asmspec;\n   p->require_constant_value = require_constant_value;\n   p->require_constant_elements = require_constant_elements;\n   p->constructor_stack = constructor_stack;\n@@ -4218,6 +4227,7 @@ start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level)\n   initializer_stack = p;\n \n   constructor_decl = decl;\n+  constructor_asmspec = asmspec;\n   constructor_designated = 0;\n   constructor_top_level = top_level;\n \n@@ -4274,6 +4284,7 @@ finish_init (void)\n   free (spelling_base);\n   \n   constructor_decl = p->decl;\n+  constructor_asmspec = p->asmspec;\n   require_constant_value = p->require_constant_value;\n   require_constant_elements = p->require_constant_elements;\n   constructor_stack = p->constructor_stack;"}, {"sha": "d3c903f5e8039489fe3d73540614a43e7ef3fe9e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -6776,8 +6776,8 @@ sh_handle_sp_switch_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      const char *s = ggc_strdup (TREE_STRING_POINTER (TREE_VALUE (args)));\n-      sp_switch = gen_rtx_SYMBOL_REF (VOIDmode, s);\n+      sp_switch = gen_rtx_SYMBOL_REF (VOIDmode,\n+\t\t\t\t      TREE_STRING_POINTER (TREE_VALUE (args)));\n     }\n \n   return NULL_TREE;"}, {"sha": "dc1a92d617dfd7ec08eb5022967e29c1394a2a58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -1,3 +1,12 @@\n+2004-02-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\tPR middle-end/13750\n+\tRevert:\n+\t2004-01-15  Geoffrey Keating  <geoffk@apple.com>\n+\tPR pch/13361\n+\t* cp/lex.c (handle_pragma_interface): Duplicate string from tree.\n+\t(handle_pragma_implementation): Likewise.\n+\n 2004-02-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13714"}, {"sha": "ab248a434b769d72716a54681312c339781eb4c1", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -535,7 +535,7 @@ handle_pragma_interface (cpp_reader* dfile ATTRIBUTE_UNUSED )\n   else if (fname == 0)\n     main_filename = lbasename (input_filename);\n   else\n-    main_filename = ggc_strdup (TREE_STRING_POINTER (fname));\n+    main_filename = TREE_STRING_POINTER (fname);\n \n   finfo = get_fileinfo (input_filename);\n \n@@ -585,7 +585,7 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n     }\n   else\n     {\n-      main_filename = ggc_strdup (TREE_STRING_POINTER (fname));\n+      main_filename = TREE_STRING_POINTER (fname);\n       if (cpp_included (parse_in, main_filename))\n \twarning (\"#pragma implementation for %s appears after file is included\",\n \t\t main_filename);"}, {"sha": "acd79c42d1e872eba626f93c1bb548efb0cbf4f2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -9429,8 +9429,7 @@ rtl_for_decl_location (tree decl)\n \t\t\t\t   TREE_STRING_LENGTH (init) - 1) == 0\n \t      && ((size_t) TREE_STRING_LENGTH (init)\n \t\t  == strlen (TREE_STRING_POINTER (init)) + 1))\n-\t    rtl = gen_rtx_CONST_STRING (VOIDmode,\n-\t\t\t\t\tggc_strdup (TREE_STRING_POINTER (init)));\n+\t    rtl = gen_rtx_CONST_STRING (VOIDmode, TREE_STRING_POINTER (init));\n \t}\n       /* If the initializer is something that we know will expand into an\n \t immediate RTL constant, expand it now.  Expanding anything else"}, {"sha": "c33cea27152cc7f44b3e40d09e1399180d8b3ad9", "filename": "gcc/stmt.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -1102,8 +1102,7 @@ expand_asm (tree string, int vol)\n   if (TREE_CODE (string) == ADDR_EXPR)\n     string = TREE_OPERAND (string, 0);\n \n-  body = gen_rtx_ASM_INPUT (VOIDmode,\n-\t\t\t    ggc_strdup (TREE_STRING_POINTER (string)));\n+  body = gen_rtx_ASM_INPUT (VOIDmode, TREE_STRING_POINTER (string));\n \n   MEM_VOLATILE_P (body) = vol;\n \n@@ -1665,7 +1664,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \n   body = gen_rtx_ASM_OPERANDS ((noutputs == 0 ? VOIDmode\n \t\t\t\t: GET_MODE (output_rtx[0])),\n-\t\t\t       ggc_strdup (TREE_STRING_POINTER (string)),\n+\t\t\t       TREE_STRING_POINTER (string),\n \t\t\t       empty_string, 0, argvec, constraintvec,\n \t\t\t       locus.file, locus.line);\n \n@@ -1746,8 +1745,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n       ASM_OPERANDS_INPUT (body, i) = op;\n \n       ASM_OPERANDS_INPUT_CONSTRAINT_EXP (body, i)\n-\t= gen_rtx_ASM_INPUT (TYPE_MODE (type), \n-\t\t\t     ggc_strdup (constraints[i + noutputs]));\n+\t= gen_rtx_ASM_INPUT (TYPE_MODE (type), constraints[i + noutputs]);\n \n       if (decl_conflicts_with_clobbers_p (val, clobbered_regs))\n \tclobber_conflict_found = 1;\n@@ -1788,7 +1786,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \n   if (noutputs == 1 && nclobbers == 0)\n     {\n-      ASM_OPERANDS_OUTPUT_CONSTRAINT (body) = ggc_strdup (constraints[0]);\n+      ASM_OPERANDS_OUTPUT_CONSTRAINT (body) = constraints[0];\n       emit_insn (gen_rtx_SET (VOIDmode, output_rtx[0], body));\n     }\n \n@@ -1816,9 +1814,8 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t\t\t   output_rtx[i],\n \t\t\t   gen_rtx_ASM_OPERANDS\n \t\t\t   (GET_MODE (output_rtx[i]),\n-\t\t\t    ggc_strdup (TREE_STRING_POINTER (string)),\n-\t\t\t    ggc_strdup (constraints[i]),\n-\t\t\t    i, argvec, constraintvec,\n+\t\t\t    TREE_STRING_POINTER (string),\n+\t\t\t    constraints[i], i, argvec, constraintvec,\n \t\t\t    locus.file, locus.line));\n \n \t  MEM_VOLATILE_P (SET_SRC (XVECEXP (body, 0, i))) = vol;"}, {"sha": "539f5722fdc6e3f713efa331cd68865c6fc08788", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -1,4 +1,13 @@\n-2003-02-05  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+2004-02-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\tPR middle-end/13750\n+\tRevert:\n+\t2004-01-15  Geoffrey Keating  <geoffk@apple.com>\n+\tPR pch/13361\n+\t* testsuite/g++.dg/pch/wchar-1.C: New.\n+\t* testsuite/g++.dg/pch/wchar-1.Hs: New.\n+\n+2004-02-05  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/14008\n \t* g++.dg/parse/error15.C: New test."}, {"sha": "6cb5fe15e4c74b116c5bb22802a2cb8821efa887", "filename": "gcc/testsuite/g++.dg/pch/wchar-1.C", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687d688ee40cff3395a34c7dacab54550f7de606/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687d688ee40cff3395a34c7dacab54550f7de606/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.C?ref=687d688ee40cff3395a34c7dacab54550f7de606", "patch": "@@ -1 +0,0 @@\n-#include \"wchar-1.H\""}, {"sha": "431908b88b1eb46a0ec3440a2d9e26d522a64fcd", "filename": "gcc/testsuite/g++.dg/pch/wchar-1.Hs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687d688ee40cff3395a34c7dacab54550f7de606/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.Hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687d688ee40cff3395a34c7dacab54550f7de606/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.Hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.Hs?ref=687d688ee40cff3395a34c7dacab54550f7de606", "patch": "@@ -1,2 +0,0 @@\n-#include <stddef.h>\n-const wchar_t test_var[] = L\"wide string\";"}, {"sha": "12eabd9361dc26e34853f30d25817f2f9690cfff", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -168,8 +168,7 @@ tree_size (tree node)\n \tcase REAL_CST:\t\treturn sizeof (struct tree_real_cst);\n \tcase COMPLEX_CST:\treturn sizeof (struct tree_complex);\n \tcase VECTOR_CST:\treturn sizeof (struct tree_vector);\n-\tcase STRING_CST:\n-\t  return sizeof (struct tree_string) + TREE_STRING_LENGTH (node);\n+\tcase STRING_CST:\treturn sizeof (struct tree_string);\n \tdefault:\n \t  return (*lang_hooks.tree_size) (code);\n \t}\n@@ -213,8 +212,8 @@ make_node (enum tree_code code)\n   struct tree_common ttmp;\n \n   /* We can't allocate a TREE_VEC without knowing how many elements\n-     it will have; likewise a STRING_CST without knowing the length.  */\n-  if (code == TREE_VEC || code == STRING_CST)\n+     it will have.  */\n+  if (code == TREE_VEC)\n     abort ();\n \n   TREE_SET_CODE ((tree)&ttmp, code);\n@@ -526,23 +525,10 @@ build_real_from_int_cst (tree type, tree i)\n tree\n build_string (int len, const char *str)\n {\n-  tree s;\n-  size_t length;\n-  \n-  length = len + sizeof (struct tree_string);\n-\n-#ifdef GATHER_STATISTICS\n-  tree_node_counts[(int) c_kind]++;\n-  tree_node_sizes[(int) c_kind] += length;\n-#endif  \n-\n-  s = ggc_alloc_tree (length);\n+  tree s = make_node (STRING_CST);\n \n-  memset (s, 0, sizeof (struct tree_common));\n-  TREE_SET_CODE (s, STRING_CST);\n   TREE_STRING_LENGTH (s) = len;\n-  memcpy ((char *) TREE_STRING_POINTER (s), str, len);\n-  ((char *) TREE_STRING_POINTER (s))[len] = '\\0';\n+  TREE_STRING_POINTER (s) = ggc_alloc_string (str, len);\n \n   return s;\n }"}, {"sha": "78919740da33e01846035891815024e0001ca82b", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -274,7 +274,7 @@ DEFTREECODE (COMPLEX_CST, \"complex_cst\", 'c', 0)\n /* Contents are in TREE_VECTOR_CST_ELTS field.  */\n DEFTREECODE (VECTOR_CST, \"vector_cst\", 'c', 0)     \n \n-/* Contents are TREE_STRING_LENGTH and the actual contents of the string.  */\n+/* Contents are TREE_STRING_LENGTH and TREE_STRING_POINTER fields.  */\n DEFTREECODE (STRING_CST, \"string_cst\", 'c', 0)\n \n /* Declarations.  All references to names are represented as ..._DECL"}, {"sha": "930a1e1da263ff2082d40a166ea58cb8a59a7e85", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "patch": "@@ -707,13 +707,13 @@ struct tree_real_cst GTY(())\n \n /* In a STRING_CST */\n #define TREE_STRING_LENGTH(NODE) (STRING_CST_CHECK (NODE)->string.length)\n-#define TREE_STRING_POINTER(NODE) (STRING_CST_CHECK (NODE)->string.str)\n+#define TREE_STRING_POINTER(NODE) (STRING_CST_CHECK (NODE)->string.pointer)\n \n struct tree_string GTY(())\n {\n   struct tree_common common;\n   int length;\n-  const char str[1];\n+  const char *pointer;\n };\n \n /* In a COMPLEX_CST node.  */"}]}