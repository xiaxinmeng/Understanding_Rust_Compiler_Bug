{"sha": "f60a97cfa05159a31608779b9ef75ac084070102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwYTk3Y2ZhMDUxNTlhMzE2MDg3NzliOWVmNzVhYzA4NDA3MDEwMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2011-03-02T00:54:22Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2011-03-02T00:54:22Z"}, "message": "re PR target/47935 (PowerPC64 -mcmodel=medium invalid lwa offset)\n\n\tPR target/47935\n\t* config/rs6000/predicates.md (lwa_operand): Check cmodel medium\n\ttoc relative addresses for valid offsets.\n\nFrom-SVN: r170606", "tree": {"sha": "6e8c0bb6613534723d1a1bd465dfe1f90af0ee7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e8c0bb6613534723d1a1bd465dfe1f90af0ee7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f60a97cfa05159a31608779b9ef75ac084070102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60a97cfa05159a31608779b9ef75ac084070102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60a97cfa05159a31608779b9ef75ac084070102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60a97cfa05159a31608779b9ef75ac084070102/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60b5f5add3a5de1ecf656046bb44d1f69deb9568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b5f5add3a5de1ecf656046bb44d1f69deb9568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b5f5add3a5de1ecf656046bb44d1f69deb9568"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "ba871c6f12df962c592f608ee61b0f47e283a477", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60a97cfa05159a31608779b9ef75ac084070102/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60a97cfa05159a31608779b9ef75ac084070102/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f60a97cfa05159a31608779b9ef75ac084070102", "patch": "@@ -1,3 +1,9 @@\n+2011-03-02  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/47935\n+\t* config/rs6000/predicates.md (lwa_operand): Check cmodel medium\n+\ttoc relative addresses for valid offsets.\n+\n 2011-03-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/47890"}, {"sha": "3839643af4a6e39d608d35a21dcba94401dba27d", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60a97cfa05159a31608779b9ef75ac084070102/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60a97cfa05159a31608779b9ef75ac084070102/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=f60a97cfa05159a31608779b9ef75ac084070102", "patch": "@@ -734,20 +734,32 @@\n (define_predicate \"lwa_operand\"\n   (match_code \"reg,subreg,mem\")\n {\n-  rtx inner = op;\n+  rtx inner, addr, offset;\n \n+  inner = op;\n   if (reload_completed && GET_CODE (inner) == SUBREG)\n     inner = SUBREG_REG (inner);\n \n-  return gpc_reg_operand (inner, mode)\n-    || (memory_operand (inner, mode)\n-\t&& GET_CODE (XEXP (inner, 0)) != PRE_INC\n-\t&& GET_CODE (XEXP (inner, 0)) != PRE_DEC\n-\t&& (GET_CODE (XEXP (inner, 0)) != PRE_MODIFY\n-\t    || legitimate_indexed_address_p (XEXP (XEXP (inner, 0), 1), 0))\n-\t&& (GET_CODE (XEXP (inner, 0)) != PLUS\n-\t    || GET_CODE (XEXP (XEXP (inner, 0), 1)) != CONST_INT\n-\t    || INTVAL (XEXP (XEXP (inner, 0), 1)) % 4 == 0));\n+  if (gpc_reg_operand (inner, mode))\n+    return true;\n+  if (!memory_operand (inner, mode))\n+    return false;\n+  addr = XEXP (inner, 0);\n+  if (GET_CODE (addr) == PRE_INC\n+      || GET_CODE (addr) == PRE_DEC\n+      || (GET_CODE (addr) == PRE_MODIFY\n+\t  && !legitimate_indexed_address_p (XEXP (addr, 1), 0)))\n+    return false;\n+  if (GET_CODE (addr) == LO_SUM\n+      && GET_CODE (XEXP (addr, 0)) == REG\n+      && GET_CODE (XEXP (addr, 1)) == CONST)\n+    addr = XEXP (XEXP (addr, 1), 0);\n+  if (GET_CODE (addr) != PLUS)\n+    return true;\n+  offset = XEXP (addr, 1);\n+  if (GET_CODE (offset) != CONST_INT)\n+    return true;\n+  return INTVAL (offset) % 4 == 0;\n })\n \n ;; Return 1 if the operand, used inside a MEM, is a SYMBOL_REF."}]}