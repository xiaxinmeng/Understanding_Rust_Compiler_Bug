{"sha": "9be09bbc6d1db74474e5e16f64f40e32933e2640", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJlMDliYmM2ZDFkYjc0NDc0ZTVlMTZmNjRmNDBlMzI5MzNlMjY0MA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-03-23T18:14:48Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-03-23T18:14:48Z"}, "message": "re PR tree-optimization/20601 (PRE related miscompilation)\n\n\n2005-03-23  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/20601\n\n\t* tree-ssa-pre.c (insert_aux): Add missing condition to\n\tconstification.\n\nFrom-SVN: r96937", "tree": {"sha": "c9e3b2938a99e475be7d4ee298e329f24f005e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9e3b2938a99e475be7d4ee298e329f24f005e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9be09bbc6d1db74474e5e16f64f40e32933e2640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be09bbc6d1db74474e5e16f64f40e32933e2640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be09bbc6d1db74474e5e16f64f40e32933e2640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be09bbc6d1db74474e5e16f64f40e32933e2640/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06d7098a4e9a0c12d663a49976cfed2b2f9c38a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d7098a4e9a0c12d663a49976cfed2b2f9c38a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d7098a4e9a0c12d663a49976cfed2b2f9c38a4"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "ee38559c8d1e887a0a641e949f2dc5a2079de8a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be09bbc6d1db74474e5e16f64f40e32933e2640/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be09bbc6d1db74474e5e16f64f40e32933e2640/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9be09bbc6d1db74474e5e16f64f40e32933e2640", "patch": "@@ -1,3 +1,10 @@\n+2005-03-23  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/20601\n+\n+\t* tree-ssa-pre.c (insert_aux): Add missing condition to\n+\tconstification.\n+\n 2005-03-23  Ian Lance Taylor  <ian@airs.com>\n \n \t* final.c (final_scan_insn): Don't remove no-op instructions."}, {"sha": "f7b93b70c1b0c0b84500137d2042818702b640d4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20601.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be09bbc6d1db74474e5e16f64f40e32933e2640/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20601.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be09bbc6d1db74474e5e16f64f40e32933e2640/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20601.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20601.c?ref=9be09bbc6d1db74474e5e16f64f40e32933e2640", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct T\n+{\n+  char *t1;\n+  char t2[4096];\n+  char **t3;\n+};\n+\n+int a[5];\n+int b;\n+char **c;\n+int d;\n+char **e;\n+struct T t;\n+char *f[16];\n+char *g[] = { \"a\", \"-u\", \"b\", \"c\" };\n+\n+__attribute__ ((__noreturn__)) void\n+foo (void)\n+{\n+  while (1);\n+}\n+\n+__attribute__ ((noinline)) char *\n+bar (char *x, unsigned int y)\n+{\n+  return 0;\n+}\n+\n+static inline char *\n+baz (char *x, unsigned int y)\n+{\n+  if (sizeof (t.t2) != (unsigned int) -1 && y > sizeof (t.t2))\n+    foo ();\n+  return bar (x, y);\n+}\n+\n+static inline int\n+setup1 (int x)\n+{\n+  char *p;\n+  int rval;\n+\n+  if (!baz (t.t2, sizeof (t.t2)))\n+    baz (t.t2, sizeof (t.t2));\n+\n+  if (x & 0x200)\n+    {\n+      char **h, **i = e;\n+\n+      ++d;\n+      e = f;\n+      if (t.t1 && *t.t1)\n+        e[0] = t.t1;\n+      else\n+        abort ();\n+\n+      for (h = e + 1; (*h = *i); ++i, ++h)\n+        ;\n+    }\n+  return 1;\n+}\n+\n+static inline int\n+setup2 (void)\n+{\n+  int j = 1;\n+\n+  e = c + 1;\n+  d = b - 1;\n+  while (d > 0 && e[0][0] == '-')\n+    {\n+      if (e[0][1] != '\\0' && e[0][2] != '\\0')\n+        abort ();\n+\n+      switch (e[0][1])\n+        {\n+        case 'u':\n+          if (!e[1])\n+            abort ();\n+\n+          t.t3 = &e[1];\n+          d--;\n+          e++;\n+          break;\n+        case 'P':\n+          j |= 0x1000;\n+          break;\n+        case '-':\n+          d--;\n+          e++;\n+          if (j == 1)\n+            j |= 0x600;\n+          return j;\n+        }\n+      d--;\n+      e++;\n+    }\n+\n+  if (d > 0 && !(j & 1))\n+    abort ();\n+\n+  return j;\n+}\n+\n+int\n+main (void)\n+{\n+  int x;\n+  c = g;\n+  b = 4;\n+  x = setup2 ();\n+  t.t1 = \"/bin/sh\";\n+  setup1 (x);\n+  /* PRE shouldn't transform x into the constant 0x601 here, it's not legal.  */\n+  if ((x & 0x400) && !a[4])\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "5593c001dc5eedd9ff62062efb5eecf6e66fdc49", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be09bbc6d1db74474e5e16f64f40e32933e2640/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be09bbc6d1db74474e5e16f64f40e32933e2640/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9be09bbc6d1db74474e5e16f64f40e32933e2640", "patch": "@@ -1670,7 +1670,7 @@ insert_aux (basic_block block)\n \t\t      /* If all edges produce the same value and that value is\n \t\t\t an invariant, then the PHI has the same value on all\n \t\t\t edges.  Note this.  */\n-\t\t      else if (all_same && eprime \n+\t\t      else if (!cant_insert && all_same && eprime \n \t\t\t       && is_gimple_min_invariant (eprime)\n \t\t\t       && !is_gimple_min_invariant (val))\n \t\t\t{"}]}