{"sha": "1c64aba8cdf6509533f554ad86640f274cdbe37f", "node_id": "C_kwDOANBUbNoAKDFjNjRhYmE4Y2RmNjUwOTUzM2Y1NTRhZDg2NjQwZjI3NGNkYmUzN2Y", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-10-19T19:53:35Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-10-25T17:30:35Z"}, "message": "Always use TYPE_MODE instead of DECL_MODE for vector field\n\ne034c5c8957 re PR target/78643 (ICE in convert_move, at expr.c:230)\n\nfixed the case where DECL_MODE of a vector field is BLKmode and its\nTYPE_MODE is a vector mode because of target attribute.  Remove the\nBLKmode check for the case where DECL_MODE of a vector field is a vector\nmode and its TYPE_MODE isn't a vector mode because of target attribute.\n\ngcc/\n\n\tPR target/107304\n\t* expr.cc (get_inner_reference): Always use TYPE_MODE for vector\n\tfield with vector raw mode.\n\ngcc/testsuite/\n\n\tPR target/107304\n\t* gcc.target/i386/pr107304.c: New test.", "tree": {"sha": "8f092a1857f07258c06b12c34dcaabdf8f7303e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f092a1857f07258c06b12c34dcaabdf8f7303e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c64aba8cdf6509533f554ad86640f274cdbe37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c64aba8cdf6509533f554ad86640f274cdbe37f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c64aba8cdf6509533f554ad86640f274cdbe37f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c64aba8cdf6509533f554ad86640f274cdbe37f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a29aab51122103e677ffed523371c9c816ec98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a29aab51122103e677ffed523371c9c816ec98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a29aab51122103e677ffed523371c9c816ec98"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "9145193c2c1abd628f1e1e1689826a05971e290f", "filename": "gcc/expr.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c64aba8cdf6509533f554ad86640f274cdbe37f/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c64aba8cdf6509533f554ad86640f274cdbe37f/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=1c64aba8cdf6509533f554ad86640f274cdbe37f", "patch": "@@ -7905,8 +7905,7 @@ get_inner_reference (tree exp, poly_int64_pod *pbitsize,\n \t  /* For vector fields re-check the target flags, as DECL_MODE\n \t     could have been set with different target flags than\n \t     the current function has.  */\n-\t  if (mode == BLKmode\n-\t      && VECTOR_TYPE_P (TREE_TYPE (field))\n+\t  if (VECTOR_TYPE_P (TREE_TYPE (field))\n \t      && VECTOR_MODE_P (TYPE_MODE_RAW (TREE_TYPE (field))))\n \t    mode = TYPE_MODE (TREE_TYPE (field));\n \t}"}, {"sha": "24d68795e7f1c828dd732388b757da51e8ab92ed", "filename": "gcc/testsuite/gcc.target/i386/pr107304.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c64aba8cdf6509533f554ad86640f274cdbe37f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107304.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c64aba8cdf6509533f554ad86640f274cdbe37f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107304.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107304.c?ref=1c64aba8cdf6509533f554ad86640f274cdbe37f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -march=tigerlake\" } */\n+\n+#include <stdint.h>\n+\n+typedef union {\n+  uint8_t v __attribute__((aligned(256))) __attribute__ ((vector_size(64 * sizeof(uint8_t))));\n+  uint8_t i[64] __attribute__((aligned(256)));\n+} stress_vec_u8_64_t;\n+\n+typedef struct {\n+ struct {\n+  stress_vec_u8_64_t s;\n+  stress_vec_u8_64_t o;\n+  stress_vec_u8_64_t mask1;\n+  stress_vec_u8_64_t mask2;\n+ } u8_64;\n+} stress_vec_data_t;\n+\n+__attribute__((target_clones(\"arch=alderlake\", \"default\"))) \n+void\n+stress_vecshuf_u8_64(stress_vec_data_t *data)\n+{\n+  stress_vec_u8_64_t *__restrict s;\n+  stress_vec_u8_64_t *__restrict mask1;\n+  stress_vec_u8_64_t *__restrict mask2;\n+  register int i;\n+\n+  s = &data->u8_64.s;\n+  mask1 = &data->u8_64.mask1;\n+  mask2 = &data->u8_64.mask2;\n+\n+  for (i = 0; i < 256; i++) {\t/* was i < 65536 */\n+      stress_vec_u8_64_t tmp;\n+\n+      tmp.v = __builtin_shuffle(s->v, mask1->v);\n+      s->v = __builtin_shuffle(tmp.v, mask2->v);\n+  }\n+}"}]}