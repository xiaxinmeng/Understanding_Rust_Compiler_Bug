{"sha": "0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2YmZlZmRlZjA2ODg5ZmEzMWUzZGYxZWY0NjQ2YmM1YjNmYWM2Nw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-06-16T18:13:38Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-16T18:13:38Z"}, "message": "re PR fortran/53642 (Front-end optimization: Wrong string length for deferred-length strings)\n\n2012-06-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53642\n        PR fortran/45170\n        * frontend-passes.c (optimize_assignment): Don't remove RHS's\n        trim when assigning to a deferred-length string.\n        * trans-expr.c (gfc_trans_assignment_1): Ensure that the RHS string\n        length is evaluated before the deferred-length LHS is reallocated.\n\n2012-06-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53642\n        PR fortran/45170\n        * gfortran.dg/deferred_type_param_8.f90: New.\n\nFrom-SVN: r188692", "tree": {"sha": "c75bea65aa3f216143f0f4e7bacfc3482aa72174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75bea65aa3f216143f0f4e7bacfc3482aa72174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9510c5af63b0b1c357331d8e01a77ceda38f5369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9510c5af63b0b1c357331d8e01a77ceda38f5369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9510c5af63b0b1c357331d8e01a77ceda38f5369"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "845a53480c8542ce11b2029155b8ab47edfae95c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "patch": "@@ -1,3 +1,12 @@\n+2012-06-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53642\n+\tPR fortran/45170\n+\t* frontend-passes.c (optimize_assignment): Don't remove RHS's\n+\ttrim when assigning to a deferred-length string.\n+\t* trans-expr.c (gfc_trans_assignment_1): Ensure that the RHS string\n+\tlength is evaluated before the deferred-length LHS is reallocated.\n+\n 2012-06-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53643"}, {"sha": "fc32e56dfc62c2672e73790da1cb44ba822464bd", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "patch": "@@ -735,15 +735,13 @@ optimize_assignment (gfc_code * c)\n   lhs = c->expr1;\n   rhs = c->expr2;\n \n-  if (lhs->ts.type == BT_CHARACTER)\n+  if (lhs->ts.type == BT_CHARACTER && !lhs->ts.deferred)\n     {\n-      /* Optimize away a = trim(b), where a is a character variable.  */\n+      /* Optimize  a = trim(b)  to  a = b.  */\n       remove_trim (rhs);\n \n-      /* Replace a = '   ' by a = '' to optimize away a memcpy, but only\n-\t for strings with non-deferred length (otherwise we would\n-\t reallocate the length.  */\n-      if (empty_string(rhs) && ! lhs->ts.deferred)\n+      /* Replace a = '   ' by a = '' to optimize away a memcpy.  */\n+      if (empty_string(rhs))\n \trhs->value.character.length = 0;\n     }\n \n@@ -1171,7 +1169,7 @@ optimize_trim (gfc_expr *e)\n \n   ref->u.ss.start = gfc_get_int_expr (gfc_default_integer_kind, NULL, 1);\n \n-  /* Build the function call to len_trim(x, gfc_defaul_integer_kind).  */\n+  /* Build the function call to len_trim(x, gfc_default_integer_kind).  */\n \n   fcn = get_len_trim_call (gfc_copy_expr (e), gfc_default_integer_kind);\n "}, {"sha": "7d1a6d438419509170930883be3c93ca855cff38", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "patch": "@@ -6891,7 +6891,6 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   stmtblock_t body;\n   bool l_is_temp;\n   bool scalar_to_array;\n-  bool def_clen_func;\n   tree string_length;\n   int n;\n \n@@ -7010,13 +7009,8 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      otherwise the character length of the result is not known.\n      NOTE: This relies on having the exact dependence of the length type\n      parameter available to the caller; gfortran saves it in the .mod files. */\n-  def_clen_func = (expr2->expr_type == EXPR_FUNCTION\n-\t\t   || expr2->expr_type == EXPR_COMPCALL\n-\t\t   || expr2->expr_type == EXPR_PPC);\n-  if (gfc_option.flag_realloc_lhs\n-\t&& expr2->ts.type == BT_CHARACTER\n-\t&& (def_clen_func || expr2->expr_type == EXPR_OP)\n-\t&& expr1->ts.deferred)\n+  if (gfc_option.flag_realloc_lhs && expr2->ts.type == BT_CHARACTER\n+      && expr1->ts.deferred)\n     gfc_add_block_to_block (&block, &rse.pre);\n \n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,"}, {"sha": "42d8f7c8d8b57b6974d5cb78de6f06ce2b916391", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "patch": "@@ -1,3 +1,9 @@\n+2012-06-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53642                                                                                                                                                           \n+\tPR fortran/45170                                                                                                                                                           \n+\t* gfortran.dg/deferred_type_param_8.f90: New.                                                                                                                              \n+\n 2012-06-15  Janis Johnson  <janosjo@codesourcery.com>\n \n \t* lib/gcov.exp (verify-lines, verify-branches, verify-calls): Use"}, {"sha": "3c768c567a7485bcc4883d3b7a9152b4238936a7", "filename": "gcc/testsuite/gfortran.dg/deferred_type_param_8.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6bfefdef06889fa31e3df1ef4646bc5b3fac67/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_8.f90?ref=0f6bfefdef06889fa31e3df1ef4646bc5b3fac67", "patch": "@@ -0,0 +1,54 @@\n+! { dg-do run }\n+!\n+! PR fortran/53642\n+! PR fortran/45170 (comments 24, 34, 37)\n+!\n+\n+PROGRAM helloworld\n+  implicit none\n+  character(:),allocatable::string\n+  character(11), parameter :: cmp = \"hello world\"\n+  real::rnd\n+  integer :: n, i\n+  do i = 1, 10\n+     call random_number(rnd)\n+     n = ceiling(11*rnd)\n+     call hello(n, string)\n+!     print '(A,1X,I0)', '>' // string // '<', len(string)\n+     if (n /= len (string) .or. string /= cmp(1:n)) call abort ()\n+  end do\n+\n+  call test_PR53642()\n+\n+contains\n+\n+  subroutine hello (n,string)\n+    character(:), allocatable, intent(out) :: string\n+    integer,intent(in) :: n\n+    character(11) :: helloworld=\"hello world\"\n+\n+    string=helloworld(:n)                       ! Didn't  work\n+!    string=(helloworld(:n))                    ! Works.\n+!    allocate(string, source=helloworld(:n))    ! Fixed for allocate_with_source_2.f90\n+!    allocate(string, source=(helloworld(:n)))  ! Works.\n+  end subroutine hello\n+\n+  subroutine test_PR53642()\n+    character(len=4) :: string=\"123 \"\n+    character(:), allocatable :: trimmed\n+\n+    trimmed = trim(string)\n+    if (len_trim(string) /= len(trimmed)) call abort ()\n+    if (len(trimmed) /= 3) call abort ()\n+    if (trimmed /= \"123\") call abort ()\n+!    print *,len_trim(string),len(trimmed)\n+\n+    ! Clear\n+    trimmed = \"XXXXXX\"\n+    if (trimmed /= \"XXXXXX\" .or. len(trimmed) /= 6) call abort ()\n+\n+    trimmed = string(1:len_trim(string))\n+    if (len_trim(trimmed) /= 3) call abort ()\n+    if (trimmed /= \"123\") call abort ()\n+  end subroutine test_PR53642\n+end PROGRAM helloworld"}]}