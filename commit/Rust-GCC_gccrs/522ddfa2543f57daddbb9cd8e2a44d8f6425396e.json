{"sha": "522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyZGRmYTI1NDNmNTdkYWRkYmI5Y2Q4ZTJhNDRkOGY2NDI1Mzk2ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-23T01:29:08Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-23T01:29:08Z"}, "message": "c-common.h (default_conversion): Remove.\n\n\t* c-common.h (default_conversion): Remove.\n\t(perform_integral_promotions): Add.\n\t* c-tree.h (default_conversion): Add.\n\t* c-typeck.c (perform_integral_promotions): New, split out from\n\tdefault_conversion.\n\t* c-common.c (check_case_value): Use perform_integral_promotions,\n\tnot default_conversion.\n\t(c_add_case_label): Don't continue processing case label after\n\tfound to be pointer.\n\ncp:\n\t* cp-tree.h (perform_integral_promotions): Remove.\n\t(default_conversion): Add.\n\nFrom-SVN: r96916", "tree": {"sha": "a494e1e283e1b20afad26e4574a3526f1d4d5e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a494e1e283e1b20afad26e4574a3526f1d4d5e5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b73ddf159ae2adb5bf5c6e9b8a57fda0da0256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b73ddf159ae2adb5bf5c6e9b8a57fda0da0256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b73ddf159ae2adb5bf5c6e9b8a57fda0da0256"}], "stats": {"total": 113, "additions": 77, "deletions": 36}, "files": [{"sha": "8bd9d404a783b9ec8be3d8af0b64d7aad46bf83c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "patch": "@@ -1,3 +1,15 @@\n+2005-03-23  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (default_conversion): Remove.\n+\t(perform_integral_promotions): Add.\n+\t* c-tree.h (default_conversion): Add.\n+\t* c-typeck.c (perform_integral_promotions): New, split out from\n+\tdefault_conversion.\n+\t* c-common.c (check_case_value): Use perform_integral_promotions,\n+\tnot default_conversion.\n+\t(c_add_case_label): Don't continue processing case label after\n+\tfound to be pointer.\n+\n 2005-03-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.c (do_spec_1): Do not add a -L path for a directory in"}, {"sha": "d4b9d5cda8e186010d09f78e66694894e307f4ad", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "patch": "@@ -1427,15 +1427,14 @@ check_case_value (tree value)\n       value = fold (value);\n     }\n \n-  if (TREE_CODE (value) != INTEGER_CST\n-      && value != error_mark_node)\n+  if (TREE_CODE (value) == INTEGER_CST)\n+    /* Promote char or short to int.  */\n+    value = perform_integral_promotions (value);\n+  else if (value != error_mark_node)\n     {\n       error (\"case label does not reduce to an integer constant\");\n       value = error_mark_node;\n     }\n-  else\n-    /* Promote char or short to int.  */\n-    value = default_conversion (value);\n \n   constant_expression_warning (value);\n \n@@ -3514,7 +3513,10 @@ c_add_case_label (splay_tree cases, tree cond, tree orig_type,\n        && POINTER_TYPE_P (TREE_TYPE (low_value)))\n       || (high_value && TREE_TYPE (high_value)\n \t  && POINTER_TYPE_P (TREE_TYPE (high_value))))\n-    error (\"pointers are not permitted as case values\");\n+    {\n+      error (\"pointers are not permitted as case values\");\n+      goto error_out;\n+    }\n \n   /* Case ranges are a GNU extension.  */\n   if (high_value && pedantic)"}, {"sha": "63dcb10b40cb09c5293ca214b79bf573adbf85ff", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "patch": "@@ -808,7 +808,7 @@ extern tree build_break_stmt (void);\n \n extern tree build_unary_op (enum tree_code, tree, int);\n extern tree build_binary_op (enum tree_code, tree, tree, int);\n-extern tree default_conversion (tree);\n+extern tree perform_integral_promotions (tree);\n \n /* Given two integer or real types, return the type for their sum.\n    Given two compatible ANSI C types, returns the merged type.  */"}, {"sha": "bbfed6abbafc20638264ff63993882942adc8837", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "patch": "@@ -460,6 +460,7 @@ extern int comptypes (tree, tree);\n extern bool c_mark_addressable (tree);\n extern void c_incomplete_type_error (tree, tree);\n extern tree c_type_promotes_to (tree);\n+extern tree default_conversion (tree);\n extern tree composite_type (tree, tree);\n extern tree build_component_ref (tree, tree);\n extern tree build_indirect_ref (tree, const char *);"}, {"sha": "a89c87a36012b6aaf1faf6f6c213760659e88c1a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "patch": "@@ -1352,40 +1352,17 @@ default_function_array_conversion (tree exp)\n   return exp;\n }\n \n-/* Perform default promotions for C data used in expressions.\n-   Arrays and functions are converted to pointers;\n-   enumeral types or short or char, to int.\n-   In addition, manifest constants symbols are replaced by their values.  */\n+\n+/* EXP is an expression of integer type.  Apply the integer promotions\n+   to it and return the promoted value.  */\n \n tree\n-default_conversion (tree exp)\n+perform_integral_promotions (tree exp)\n {\n-  tree orig_exp;\n   tree type = TREE_TYPE (exp);\n   enum tree_code code = TREE_CODE (type);\n \n-  if (code == FUNCTION_TYPE || code == ARRAY_TYPE)\n-    return default_function_array_conversion (exp);\n-\n-  /* Constants can be used directly unless they're not loadable.  */\n-  if (TREE_CODE (exp) == CONST_DECL)\n-    exp = DECL_INITIAL (exp);\n-\n-  /* Replace a nonvolatile const static variable with its value unless\n-     it is an array, in which case we must be sure that taking the\n-     address of the array produces consistent results.  */\n-  else if (optimize && TREE_CODE (exp) == VAR_DECL && code != ARRAY_TYPE)\n-    {\n-      exp = decl_constant_value_for_broken_optimization (exp);\n-      type = TREE_TYPE (exp);\n-    }\n-\n-  /* Strip no-op conversions.  */\n-  orig_exp = exp;\n-  STRIP_TYPE_NOPS (exp);\n-\n-  if (TREE_NO_WARNING (orig_exp))\n-    TREE_NO_WARNING (exp) = 1;\n+  gcc_assert (INTEGRAL_TYPE_P (type));\n \n   /* Normally convert enums to int,\n      but convert wide enums to something wider.  */\n@@ -1400,6 +1377,8 @@ default_conversion (tree exp)\n       return convert (type, exp);\n     }\n \n+  /* ??? This should no longer be needed now bit-fields have their\n+     proper types.  */\n   if (TREE_CODE (exp) == COMPONENT_REF\n       && DECL_C_BIT_FIELD (TREE_OPERAND (exp, 1))\n       /* If it's thinner than an int, promote it like a\n@@ -1418,6 +1397,48 @@ default_conversion (tree exp)\n       return convert (integer_type_node, exp);\n     }\n \n+  return exp;\n+}\n+\n+\n+/* Perform default promotions for C data used in expressions.\n+   Arrays and functions are converted to pointers;\n+   enumeral types or short or char, to int.\n+   In addition, manifest constants symbols are replaced by their values.  */\n+\n+tree\n+default_conversion (tree exp)\n+{\n+  tree orig_exp;\n+  tree type = TREE_TYPE (exp);\n+  enum tree_code code = TREE_CODE (type);\n+\n+  if (code == FUNCTION_TYPE || code == ARRAY_TYPE)\n+    return default_function_array_conversion (exp);\n+\n+  /* Constants can be used directly unless they're not loadable.  */\n+  if (TREE_CODE (exp) == CONST_DECL)\n+    exp = DECL_INITIAL (exp);\n+\n+  /* Replace a nonvolatile const static variable with its value unless\n+     it is an array, in which case we must be sure that taking the\n+     address of the array produces consistent results.  */\n+  else if (optimize && TREE_CODE (exp) == VAR_DECL && code != ARRAY_TYPE)\n+    {\n+      exp = decl_constant_value_for_broken_optimization (exp);\n+      type = TREE_TYPE (exp);\n+    }\n+\n+  /* Strip no-op conversions.  */\n+  orig_exp = exp;\n+  STRIP_TYPE_NOPS (exp);\n+\n+  if (TREE_NO_WARNING (orig_exp))\n+    TREE_NO_WARNING (exp) = 1;\n+\n+  if (INTEGRAL_TYPE_P (type))\n+    return perform_integral_promotions (exp);\n+\n   if (code == VOID_TYPE)\n     {\n       error (\"void value not ignored as it ought to be\");"}, {"sha": "c242a87dd3418b92e8fff2a608e5662a0ed16713", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "patch": "@@ -1,3 +1,8 @@\n+2005-03-23  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* cp-tree.h (perform_integral_promotions): Remove.\n+\t(default_conversion): Add.\n+\n 2005-03-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* parser.c (cp_parser_warn_min_max): New function."}, {"sha": "22e9ee0f8a05fdc7651f5e64e41d4158db3e7d23", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522ddfa2543f57daddbb9cd8e2a44d8f6425396e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=522ddfa2543f57daddbb9cd8e2a44d8f6425396e", "patch": "@@ -4283,7 +4283,7 @@ extern tree cxx_sizeof_or_alignof_type    (tree, enum tree_code, bool);\n #define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n extern tree inline_conversion\t\t\t(tree);\n extern tree decay_conversion\t\t\t(tree);\n-extern tree perform_integral_promotions         (tree);\n+extern tree default_conversion                  (tree);\n extern tree build_class_member_access_expr      (tree, tree, tree, bool);\n extern tree finish_class_member_access_expr     (tree, tree);\n extern tree build_x_indirect_ref\t\t(tree, const char *);"}]}