{"sha": "8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmOTgzYzcxZTQyZDVhOWY5ZGY4YTdkYzQzNmIzMGNkOWRhNDJmNQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-20T14:50:03Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-20T14:52:10Z"}, "message": "[PR99680] Check empty constraint before using CONSTRAINT_LEN.\n\nIt seems CONSTRAINT_LEN treats constraint '\\0' as one having length 1.  Therefore we\nread after the constraint string.  The patch fixes it.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/99680\n\t* lra-constraints.c (skip_contraint_modifiers): Rename to skip_constraint_modifiers.\n\t(process_address_1): Check empty constraint before using\n\tCONSTRAINT_LEN.", "tree": {"sha": "c3dde12b6a05c46a655d9f65255277edf0049b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3dde12b6a05c46a655d9f65255277edf0049b78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f256a70a05fcfc5a1caf56678ceb12b4f87f781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f256a70a05fcfc5a1caf56678ceb12b4f87f781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f256a70a05fcfc5a1caf56678ceb12b4f87f781"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "fdfe953bcf5b6fb93422510b9f20e7124a028260", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=8bf983c71e42d5a9f9df8a7dc436b30cd9da42f5", "patch": "@@ -3395,12 +3395,12 @@ equiv_address_substitution (struct address_info *ad)\n /* Skip all modifiers and whitespaces in constraint STR and return the\n    result.  */\n static const char *\n-skip_contraint_modifiers (const char *str)\n+skip_constraint_modifiers (const char *str)\n {\n   for (;;str++)\n     switch (*str)\n       {\n-      case '+' : case '&' : case '=': case '*': case ' ': case '\\t':\n+      case '+': case '&' : case '=': case '*': case ' ': case '\\t':\n       case '$': case '^' : case '%': case '?': case '!':\n \tbreak;\n       default: return str;\n@@ -3451,24 +3451,24 @@ process_address_1 (int nop, bool check_only_p,\n     return false;\n \n   constraint\n-    = skip_contraint_modifiers (curr_static_id->operand[nop].constraint);\n+    = skip_constraint_modifiers (curr_static_id->operand[nop].constraint);\n   if (IN_RANGE (constraint[0], '0', '9'))\n     {\n       char *end;\n       unsigned long dup = strtoul (constraint, &end, 10);\n       constraint\n-\t= skip_contraint_modifiers (curr_static_id->operand[dup].constraint);\n+\t= skip_constraint_modifiers (curr_static_id->operand[dup].constraint);\n     }\n   cn = lookup_constraint (*constraint == '\\0' ? \"X\" : constraint);\n   /* If we have several alternatives or/and several constraints in an\n      alternative and we can not say at this stage what constraint will be used,\n      use unknown constraint.  The exception is an address constraint.  If\n      operand has one address constraint, probably all others constraints are\n      address ones.  */\n-  if (get_constraint_type (cn) != CT_ADDRESS\n-      && *skip_contraint_modifiers (constraint\n-\t\t\t\t    + CONSTRAINT_LEN (constraint[0],\n-\t\t\t\t\t\t      constraint)) != '\\0')\n+  if (constraint[0] != '\\0' && get_constraint_type (cn) != CT_ADDRESS\n+      && *skip_constraint_modifiers (constraint\n+\t\t\t\t     + CONSTRAINT_LEN (constraint[0],\n+\t\t\t\t\t\t       constraint)) != '\\0')\n     cn = CONSTRAINT__UNKNOWN;\n   if (insn_extra_address_constraint (cn)\n       /* When we find an asm operand with an address constraint that"}]}