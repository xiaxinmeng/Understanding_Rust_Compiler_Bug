{"sha": "db4f7a9b47d148b5074ac15910124c746fb7a96f", "node_id": "C_kwDOANBUbNoAKGRiNGY3YTliNDdkMTQ4YjUwNzRhYzE1OTEwMTI0Yzc0NmZiN2E5NmY", "commit": {"author": {"name": "Juzhe-Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-29T02:42:59Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-04-02T08:27:32Z"}, "message": "RISC-V: Fix ICE and codegen error of scalar move in RV32 system.\n\nWe need to reset the AVL to 0 or 1 for scalar move for RV32 system,\nFor any non-zero AVL input, we set that to 1, and zero will keep as zero.\n\nWe are using wrong way (by andi with 1) before to achieve that, and it\nwill cause ICE with const_int, and also wrong behavior, so now we have\ntwo code path, one for const_int and one for non-const_int.\n\nbug.C:144:2: error: unrecognizable insn:\n  144 |  }\n      |  ^\n(insn 684 683 685 26 (set (reg:SI 513)\n        (and:SI (const_int 4 [0x4])\n            (const_int 1 [0x1]))) \"bug.C\":115:47 -1\n     (nil))\n\nandi a4,a4,1 ===> sgtu a4,a4,zero\nvsetlvi tu        vsetvli tu\nvlse              vlse\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-protos.h (gen_avl_for_scalar_move): New function.\n\t* config/riscv/riscv-v.cc (gen_avl_for_scalar_move): New function.\n\t* config/riscv/vector.md: Fix scalar move bug.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/scalar_move-6.c: Adapt test.\n\t* gcc.target/riscv/rvv/base/scalar_move-9.c: New test.", "tree": {"sha": "50961d3a341d685a95eeb15595d96b14942ea025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50961d3a341d685a95eeb15595d96b14942ea025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4f7a9b47d148b5074ac15910124c746fb7a96f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4f7a9b47d148b5074ac15910124c746fb7a96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4f7a9b47d148b5074ac15910124c746fb7a96f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4f7a9b47d148b5074ac15910124c746fb7a96f/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "236cde7202aba9c8fee00035f6685fab1eecd808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236cde7202aba9c8fee00035f6685fab1eecd808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236cde7202aba9c8fee00035f6685fab1eecd808"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "4611447dddeb0f7f160678eb5228459f12e5d4d0", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=db4f7a9b47d148b5074ac15910124c746fb7a96f", "patch": "@@ -205,6 +205,7 @@ enum vlen_enum\n };\n bool slide1_sew64_helper (int, machine_mode, machine_mode,\n \t\t\t  machine_mode, rtx *);\n+rtx gen_avl_for_scalar_move (rtx);\n }\n \n /* We classify builtin types into two classes:"}, {"sha": "2e91d019f6cd8b7619d3e73bf15b7592d609934c", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=db4f7a9b47d148b5074ac15910124c746fb7a96f", "patch": "@@ -701,4 +701,27 @@ slide1_sew64_helper (int unspec, machine_mode mode, machine_mode demote_mode,\n   return true;\n }\n \n+rtx\n+gen_avl_for_scalar_move (rtx avl)\n+{\n+  /* AVL for scalar move has different behavior between 0 and large than 0.  */\n+  if (CONST_INT_P (avl))\n+    {\n+      /* So we could just set AVL to 1 for any constant other than 0.  */\n+      if (rtx_equal_p (avl, const0_rtx))\n+\treturn const0_rtx;\n+      else\n+\treturn const1_rtx;\n+    }\n+  else\n+    {\n+      /* For non-constant value, we set any non zero value to 1 by\n+\t `sgtu new_avl,input_avl,zero` + `vsetvli`.  */\n+      rtx tmp = gen_reg_rtx (Pmode);\n+      emit_insn (\n+\tgen_rtx_SET (tmp, gen_rtx_fmt_ee (GTU, Pmode, avl, const0_rtx)));\n+      return tmp;\n+    }\n+}\n+\n } // namespace riscv_vector"}, {"sha": "89927c33a017052ecf3b02a33b4fd683d126ac46", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=db4f7a9b47d148b5074ac15910124c746fb7a96f", "patch": "@@ -1229,9 +1229,7 @@\n           else if (GET_MODE_BITSIZE (<VEL>mode) > GET_MODE_BITSIZE (Pmode))\n             {\n \t      // Case 2: vmv.s.x (TU) ==> andi vl + vlse.v (TU) in RV32 system.\n-\t      rtx tmp = gen_reg_rtx (Pmode);\n-              emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (Pmode, operands[4], const1_rtx)));\n-\t      operands[4] = tmp;\n+\t      operands[4] = riscv_vector::gen_avl_for_scalar_move (operands[4]);\n \t      operands[1] = CONSTM1_RTX (<VM>mode);\n \t    }\n           else\n@@ -1292,9 +1290,7 @@\n        vlse64.v  */\n     if (satisfies_constraint_Wb1 (operands[1]))\n       {\n-\trtx tmp = gen_reg_rtx (Pmode);\n-        emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (Pmode, operands[4], const1_rtx)));\n-        operands[4] = tmp;\n+\toperands[4] = riscv_vector::gen_avl_for_scalar_move (operands[4]);\n \toperands[1] = CONSTM1_RTX (<VM>mode);\n       }\n   }"}, {"sha": "f27f85cdb5866563d129d6db61e25d9bb71f9b7a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-6.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-6.c?ref=db4f7a9b47d148b5074ac15910124c746fb7a96f", "patch": "@@ -37,8 +37,6 @@ void foo2 (void *base, void *out, size_t vl)\n /*\n ** foo3:\n ** ...\n-** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n-** ...\n ** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n ** ...\n ** ret\n@@ -54,8 +52,6 @@ void foo3 (void *base, void *out, size_t vl)\n /*\n ** foo4:\n ** ...\n-** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n-** ...\n ** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n ** ...\n ** ret\n@@ -137,8 +133,6 @@ void foo9 (void *base, void *out, size_t vl)\n /*\n ** foo10:\n ** ...\n-** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n-** ...\n ** vmv.v.i\\tv[0-9]+,\\s*-15\n ** ...\n */\n@@ -167,8 +161,6 @@ void foo11 (void *base, void *out, size_t vl)\n /*\n ** foo12:\n ** ...\n-** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n-** ...\n ** vmv.v.i\\tv[0-9]+,\\s*0\n ** ...\n ** ret"}, {"sha": "80ee1b5f0c9382d7065db09925f44742ba6d301e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-9.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4f7a9b47d148b5074ac15910124c746fb7a96f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-9.c?ref=db4f7a9b47d148b5074ac15910124c746fb7a96f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -fno-schedule-insns -fno-schedule-insns2 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint64m2_t f1(vuint64m2_t var_17, uint64_t var_60)\n+{\n+  vuint64m2_t var_16 = __riscv_vmv_s_x_u64m2_tu(var_17,var_60, 0);\n+  return var_16;\n+}\n+\n+vuint64m2_t f2(vuint64m2_t var_17, uint64_t var_60)\n+{\n+  vuint64m2_t var_16 = __riscv_vmv_s_x_u64m2_tu(var_17,var_60, 4);\n+  return var_16;\n+}\n+\n+vuint64m2_t f3(vuint64m2_t var_17, uint64_t var_60, size_t vl)\n+{\n+  vuint64m2_t var_16 = __riscv_vmv_s_x_u64m2_tu(var_17,var_60, vl);\n+  return var_16;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*0,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*1,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 } } */\n+/* { dg-final { scan-assembler-times {sgtu} 1 } } */"}]}