{"sha": "99fd3aa53848b51fdd189d0814c744ce4b89de88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmZDNhYTUzODQ4YjUxZmRkMTg5ZDA4MTRjNzQ0Y2U0Yjg5ZGU4OA==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "1999-06-02T11:00:44Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-06-02T11:00:44Z"}, "message": "[multiple changes]\n\nWed Jun  2 10:44:38 1999  Anthony Green  <green@cygnus.com>\n\t* except.c (link_handler): Chain exception handlers in order.\nWed Jun  2 10:41:24 1999  Anthony Green  <green@cygnus.com>\n\t* expr.c (expand_byte_code): Fill unreachable bytecode regions\n \twith nops and process as usual in order to always set correct EH\n \tranges.  Emit detailed warnings about unreachable bytecodes.\nWed Jun  2 10:35:13 1999  Anthony Green  <green@cygnus.com>\n\t* class.c (build_utf8_ref): Mark cinit and utf8 tree nodes as\n \tconstant.\n(From egcs posted patches.)\n\nFrom-SVN: r27314", "tree": {"sha": "0f64a63d2b918e891fcc6f98890d1923a8cd605e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f64a63d2b918e891fcc6f98890d1923a8cd605e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99fd3aa53848b51fdd189d0814c744ce4b89de88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fd3aa53848b51fdd189d0814c744ce4b89de88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99fd3aa53848b51fdd189d0814c744ce4b89de88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fd3aa53848b51fdd189d0814c744ce4b89de88/comments", "author": null, "committer": null, "parents": [{"sha": "c237e586270fd3e4fe9feb0fa1826ddc92225d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c237e586270fd3e4fe9feb0fa1826ddc92225d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c237e586270fd3e4fe9feb0fa1826ddc92225d14"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "e7e05447e339741b470da05ff3faf0f22431b96c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=99fd3aa53848b51fdd189d0814c744ce4b89de88", "patch": "@@ -1,3 +1,18 @@\n+Wed Jun  2 10:44:38 1999  Anthony Green  <green@cygnus.com>\n+\n+\t* except.c (link_handler): Chain exception handlers in order.\n+\n+Wed Jun  2 10:41:24 1999  Anthony Green  <green@cygnus.com>\n+\n+\t* expr.c (expand_byte_code): Fill unreachable bytecode regions\n+ \twith nops and process as usual in order to always set correct EH\n+ \tranges.  Emit detailed warnings about unreachable bytecodes.\n+\n+Wed Jun  2 10:35:13 1999  Anthony Green  <green@cygnus.com>\n+\n+\t* class.c (build_utf8_ref): Mark cinit and utf8 tree nodes as\n+ \tconstant.\n+\n Fri May 28 18:22:45 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n         * parse.y (lookup_field_wrapper): Unified returned value to NULL"}, {"sha": "8217a9507687afb9d1a2d292014a14d87c662dfa", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=99fd3aa53848b51fdd189d0814c744ce4b89de88", "patch": "@@ -583,6 +583,7 @@ build_utf8_ref (name)\n   TREE_TYPE (string) = str_type;\n   PUSH_FIELD_VALUE (cinit, \"data\", string);\n   FINISH_RECORD_CONSTRUCTOR (cinit);\n+  TREE_CONSTANT (cinit) = 1;\n \n   /* Build a unique identifier based on buf. */\n   sprintf(buf, \"_Utf%d\", ++utf8_count);\n@@ -608,6 +609,7 @@ build_utf8_ref (name)\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_IGNORED_P (decl) = 1;\n   TREE_READONLY (decl) = 1;\n+  TREE_THIS_VOLATILE (decl) = 0;\n   DECL_INITIAL (decl) = cinit;\n   TREE_CHAIN (decl) = utf8_decl_list;\n   layout_decl (decl, 0);"}, {"sha": "c8674f31f28c4cebf83d2db12985faf8b5476c36", "filename": "gcc/java/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=99fd3aa53848b51fdd189d0814c744ce4b89de88", "patch": "@@ -118,7 +118,7 @@ link_handler (range, outer)\n \n   if (range->start_pc == outer->start_pc && range->end_pc == outer->end_pc)\n     {\n-      outer->handlers = chainon (range->handlers, outer->handlers);\n+      outer->handlers = chainon (outer->handlers, range->handlers);\n       return;\n     }\n "}, {"sha": "9beb724ea377a1db3ca04ff6138febaf597df504", "filename": "gcc/java/expr.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fd3aa53848b51fdd189d0814c744ce4b89de88/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=99fd3aa53848b51fdd189d0814c744ce4b89de88", "patch": "@@ -1986,6 +1986,7 @@ expand_byte_code (jcf, method)\n   int i;\n   int saw_index;\n   unsigned char *linenumber_pointer;\n+  int dead_code_index = -1;\n \n #undef RET /* Defined by config/i386/i386.h */\n #undef AND /* Causes problems with opcodes for iand and land. */\n@@ -2164,15 +2165,29 @@ expand_byte_code (jcf, method)\n \n       if (! (instruction_bits [PC] & BCODE_VERIFIED))\n \t{\n-\t  /* never executed - skip */\n-\t  warning (\"Some bytecode operations (starting at pc %d) can never be executed\", PC);\n-\t  while (PC < length\n-\t\t && ! (instruction_bits [PC] & BCODE_VERIFIED))\n-\t    PC++;\n-\t  continue;\n+\t  if (dead_code_index == -1)\n+\t    {\n+\t      /* This is the start of a region of unreachable bytecodes.\n+                 They still need to be processed in order for EH ranges\n+                 to get handled correctly.  However, we can simply\n+                 replace these bytecodes with nops.  */\n+\t      dead_code_index = PC;\n+            }\n+          \n+          /* Turn this bytecode into a nop.  */\n+          byte_ops[PC] = 0x0;\n+        }\n+       else\n+        {\n+\t  if (dead_code_index != -1)\n+\t    {\n+              /* We've just reached the end of a region of dead code.  */\n+              warning (\"Unreachable bytecode from %d to before %d.\",\n+                       dead_code_index, PC);\n+              dead_code_index = -1;\n+            }\n \t}\n \n-\n       /* Handle possible line number entry for this PC.\n \n \t This code handles out-of-order and multiple linenumbers per PC,\n@@ -2204,6 +2219,13 @@ expand_byte_code (jcf, method)\n       maybe_poplevels (PC);\n       maybe_end_try (PC);\n     } /* for */\n+  \n+  if (dead_code_index != -1)\n+    {\n+      /* We've just reached the end of a region of dead code.  */\n+      warning (\"Unreachable bytecode from %d to the end of the method.\", \n+              dead_code_index);\n+    }\n }\n \n static void"}]}