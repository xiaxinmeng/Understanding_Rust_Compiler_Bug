{"sha": "6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1Yzg0MjNlODhmNjc5NWEyYmUwYjc2ZGU0YjVjOTZkOTkxOWQyNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-03-13T19:07:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-13T19:07:33Z"}, "message": "predicates.md (constant_call_address_operand): Declare as special predicate.\n\n\t* config/i386/predicates.md (constant_call_address_operand): Declare\n\tas special predicate.  Update all uses.\n\t* config/i386/i386.md: Remove mode from constant_call_address_operand\n\tpredicates.\n\t* config/i386/i386.c (ix86_output_call_insn): Call\n\tconstant_call_address_operand with VOIDmode.\n\nFrom-SVN: r185350", "tree": {"sha": "27cead3f859ce332360e786e86ee5daa2b822fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27cead3f859ce332360e786e86ee5daa2b822fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f155bc649660e4ca1dce2f1237fecef68e662e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f155bc649660e4ca1dce2f1237fecef68e662e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f155bc649660e4ca1dce2f1237fecef68e662e3b"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "2c10e360a5be0aeae164edadc5a0b4563f2807f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "patch": "@@ -1,3 +1,12 @@\n+2012-03-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (constant_call_address_operand): Declare\n+\tas special predicate.  Update all uses.\n+\t* config/i386/i386.md: Remove mode from constant_call_address_operand\n+\tpredicates.\n+\t* config/i386/i386.c (ix86_output_call_insn): Call\n+\tconstant_call_address_operand with VOIDmode.\n+\n 2012-03-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_decompose_address): Handle subregs of"}, {"sha": "6eddebba3da2e19944a26ec3426f24d3ee74a886", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "patch": "@@ -23121,7 +23121,7 @@ ix86_split_call_vzeroupper (rtx insn, rtx vzeroupper)\n const char *\n ix86_output_call_insn (rtx insn, rtx call_op)\n {\n-  bool direct_p = constant_call_address_operand (call_op, Pmode);\n+  bool direct_p = constant_call_address_operand (call_op, VOIDmode);\n   bool seh_nop_p = false;\n   const char *xasm;\n "}, {"sha": "a755574150e6712873ad4204c8b6f9d79800816f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "patch": "@@ -11376,7 +11376,7 @@\n \n (define_insn_and_split \"*call_pop_vzeroupper\"\n   [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lzm\"))\n-\t (match_operand:SI 1 \"\" \"\"))\n+\t (match_operand 1 \"\" \"\"))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))\n@@ -12592,7 +12592,7 @@\n \t(unspec:SI\n \t [(match_operand:SI 1 \"register_operand\" \"b\")\n \t  (match_operand 2 \"tls_symbolic_operand\" \"\")\n-\t  (match_operand:SI 3 \"constant_call_address_operand\" \"z\")]\n+\t  (match_operand 3 \"constant_call_address_operand\" \"z\")]\n \t UNSPEC_TLS_GD))\n    (clobber (match_scratch:SI 4 \"=d\"))\n    (clobber (match_scratch:SI 5 \"=c\"))\n@@ -12617,7 +12617,7 @@\n     [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t  (unspec:SI [(match_operand:SI 2 \"register_operand\" \"\")\n \t\t      (match_operand 1 \"tls_symbolic_operand\" \"\")\n-\t\t      (match_operand:SI 3 \"constant_call_address_operand\" \"\")]\n+\t\t      (match_operand 3 \"constant_call_address_operand\" \"\")]\n \t\t     UNSPEC_TLS_GD))\n      (clobber (match_scratch:SI 4 \"\"))\n      (clobber (match_scratch:SI 5 \"\"))\n@@ -12626,8 +12626,8 @@\n (define_insn \"*tls_global_dynamic_64_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=a\")\n \t(call:P\n-\t (mem:QI (match_operand:P 2 \"constant_call_address_operand\" \"z\"))\n-\t (match_operand:P 3 \"\" \"\")))\n+\t (mem:QI (match_operand 2 \"constant_call_address_operand\" \"z\"))\n+\t (match_operand 3 \"\" \"\")))\n    (unspec:P [(match_operand 1 \"tls_symbolic_operand\" \"\")]\n \t     UNSPEC_TLS_GD)]\n   \"TARGET_64BIT\"\n@@ -12650,7 +12650,7 @@\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\" \"\")\n \t  (call:P\n-\t   (mem:QI (match_operand:P 2 \"constant_call_address_operand\" \"\"))\n+\t   (mem:QI (match_operand 2 \"constant_call_address_operand\" \"\"))\n \t   (const_int 0)))\n      (unspec:P [(match_operand 1 \"tls_symbolic_operand\" \"\")]\n \t       UNSPEC_TLS_GD)])]\n@@ -12660,7 +12660,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI\n \t [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t  (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n+\t  (match_operand 2 \"constant_call_address_operand\" \"z\")]\n \t UNSPEC_TLS_LD_BASE))\n    (clobber (match_scratch:SI 3 \"=d\"))\n    (clobber (match_scratch:SI 4 \"=c\"))\n@@ -12685,7 +12685,7 @@\n      [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t   (unspec:SI\n \t    [(match_operand:SI 1 \"register_operand\" \"\")\n-\t     (match_operand:SI 2 \"constant_call_address_operand\" \"\")]\n+\t     (match_operand 2 \"constant_call_address_operand\" \"\")]\n \t    UNSPEC_TLS_LD_BASE))\n       (clobber (match_scratch:SI 3 \"\"))\n       (clobber (match_scratch:SI 4 \"\"))\n@@ -12694,8 +12694,8 @@\n (define_insn \"*tls_local_dynamic_base_64_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=a\")\n \t(call:P\n-\t (mem:QI (match_operand:P 1 \"constant_call_address_operand\" \"z\"))\n-\t (match_operand:P 2 \"\" \"\")))\n+\t (mem:QI (match_operand 1 \"constant_call_address_operand\" \"z\"))\n+\t (match_operand 2 \"\" \"\")))\n    (unspec:P [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n   \"TARGET_64BIT\"\n {\n@@ -12712,7 +12712,7 @@\n   [(parallel\n      [(set (match_operand:P 0 \"register_operand\" \"\")\n \t   (call:P\n-\t    (mem:QI (match_operand:P 1 \"constant_call_address_operand\" \"\"))\n+\t    (mem:QI (match_operand 1 \"constant_call_address_operand\" \"\"))\n \t    (const_int 0)))\n       (unspec:P [(const_int 0)] UNSPEC_TLS_LD_BASE)])]\n   \"TARGET_64BIT\")\n@@ -12724,7 +12724,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(plus:SI\n \t (unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t     (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n+\t\t     (match_operand 2 \"constant_call_address_operand\" \"z\")]\n \t\t    UNSPEC_TLS_LD_BASE)\n \t (const:SI (unspec:SI\n \t\t    [(match_operand 3 \"tls_symbolic_operand\" \"\")]"}, {"sha": "e53eb568f550a698b72b6e8fb84e8f4fdc3116e7", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5c8423e88f6795a2be0b76de4b5c96d9919d24/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=6e5c8423e88f6795a2be0b76de4b5c96d9919d24", "patch": "@@ -500,7 +500,7 @@\n        (match_test \"op == ix86_tls_module_base ()\")))\n \n ;; Test for a pc-relative call operand\n-(define_predicate \"constant_call_address_operand\"\n+(define_special_predicate \"constant_call_address_operand\"\n   (match_code \"symbol_ref\")\n {\n   if (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC)\n@@ -573,16 +573,14 @@\n ;; Test for a valid operand for a call instruction.\n ;; Allow constant call address operands in Pmode only.\n (define_special_predicate \"call_insn_operand\"\n-  (ior (match_test \"constant_call_address_operand\n-\t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n+  (ior (match_operand 0 \"constant_call_address_operand\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n        (and (not (match_test \"TARGET_X32\"))\n \t    (match_operand 0 \"memory_operand\"))))\n \n ;; Similarly, but for tail calls, in which we cannot allow memory references.\n (define_special_predicate \"sibcall_insn_operand\"\n-  (ior (match_test \"constant_call_address_operand\n-\t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n+  (ior (match_operand 0 \"constant_call_address_operand\")\n        (match_operand 0 \"register_no_elim_operand\")))\n \n ;; Match exactly zero."}]}