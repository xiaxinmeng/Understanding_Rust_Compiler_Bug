{"sha": "5f75e47778de3e5836499e6304832730bee181df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY3NWU0Nzc3OGRlM2U1ODM2NDk5ZTYzMDQ4MzI3MzBiZWUxODFkZg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2010-01-06T17:37:31Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2010-01-06T17:37:31Z"}, "message": "rx.h (enum rx_cpu_type): Add RX200.\n\n        * config/rx/rx.h (enum rx_cpu_type): Add RX200.\n        (CC1_SPEC): Issue an error message if -mcpu=rx200 and -fpu are\n        used together.\n        (OVERRIDE_OPTIONS): Delete.\n        (OPTIMIZATION_OPTIONS): Define.\n        (ALLOW_RX_FPU_INSNS): Define only in terms of -fpu option.\n        * config/rx/rx.c (rx_handle_option): Issue an error message if\n        -mcpu=rx200 and -fpu are used together.\n        (rx_set_optimization_options): New function.  Issue an error\n        message if an optimization attribute attempts to reset the FPU/\n        math optimization pairing.\n        * config/rx/rx-protos.h (rx_set_optimization_options): Prototype.\n        * config/rx/rx.opt: Set the default to 32-bit doubles.\n        * config/rx/t-rx: Add multilibs for -nofpu option.\n        * doc/invoke.texi: Update documentation of RX options.\n\nFrom-SVN: r155677", "tree": {"sha": "508f0b8f25e01379e0543b4d6549c8190a6661fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508f0b8f25e01379e0543b4d6549c8190a6661fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f75e47778de3e5836499e6304832730bee181df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f75e47778de3e5836499e6304832730bee181df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f75e47778de3e5836499e6304832730bee181df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f75e47778de3e5836499e6304832730bee181df/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13de9095bd4db4617903d05103fb2e88b8eae27b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13de9095bd4db4617903d05103fb2e88b8eae27b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13de9095bd4db4617903d05103fb2e88b8eae27b"}], "stats": {"total": 347, "additions": 195, "deletions": 152}, "files": [{"sha": "a8b61a345403d6aa48214168d3b54782a9d0e8fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f75e47778de3e5836499e6304832730bee181df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f75e47778de3e5836499e6304832730bee181df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f75e47778de3e5836499e6304832730bee181df", "patch": "@@ -1,3 +1,21 @@\n+2010-01-06  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.h (enum rx_cpu_type): Add RX200.\n+\t(CC1_SPEC): Issue an error message if -mcpu=rx200 and -fpu are\n+\tused together.\n+\t(OVERRIDE_OPTIONS): Delete.\n+\t(OPTIMIZATION_OPTIONS): Define.\n+\t(ALLOW_RX_FPU_INSNS): Define only in terms of -fpu option.\n+\t* config/rx/rx.c (rx_handle_option): Issue an error message if\n+\t-mcpu=rx200 and -fpu are used together.\n+\t(rx_set_optimization_options): New function.  Issue an error\n+\tmessage if an optimization attribute attempts to reset the FPU/\n+\tmath optimization pairing.\n+\t* config/rx/rx-protos.h (rx_set_optimization_options): Prototype.\n+\t* config/rx/rx.opt: Set the default to 32-bit doubles.\n+\t* config/rx/t-rx: Add multilibs for -nofpu option.\n+\t* doc/invoke.texi: Update documentation of RX options.\n+\n 2010-01-06  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (name_to_id): New global."}, {"sha": "f5ef51108e143ba573d45a428e23381eae4fe679", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=5f75e47778de3e5836499e6304832730bee181df", "patch": "@@ -1,5 +1,5 @@\n /* Exported function prototypes from the Renesas RX backend.\n-   Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n    This file is part of GCC.\n@@ -28,6 +28,7 @@\n extern void\t\trx_conditional_register_usage (void);\n extern void\t\trx_expand_prologue (void);\n extern int\t\trx_initial_elimination_offset (int, int);\n+extern void\t\trx_set_optimization_options (void);\n \n #ifdef RTX_CODE\n extern void             rx_emit_stack_popm (rtx *, bool);"}, {"sha": "b8d4619427bbb272e2bd7d3acfc526aab2f0f9f2", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 100, "deletions": 84, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=5f75e47778de3e5836499e6304832730bee181df", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on Renesas RX processors.\n-   Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n    This file is part of GCC.\n@@ -422,7 +422,10 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \tcase 0xb: fprintf (file, \"fintv\"); break;\n \tcase 0xc: fprintf (file, \"intb\"); break;\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  warning (0, \"unreocgnized control register number: %d - using 'psw'\",\n+\t\t   INTVAL (op));\n+\t  fprintf (file, \"psw\");\n+\t  break;\n \t}\n       break;\n \n@@ -2115,6 +2118,101 @@ const struct attribute_spec rx_attribute_table[] =\n   { NULL,             0, 0, false, false, false, NULL }\n };\n \n+/* Extra processing for target specific command line options.  */\n+\n+static bool\n+rx_handle_option (size_t code, const char *  arg ATTRIBUTE_UNUSED, int value)\n+{\n+  switch (code)\n+    {\n+    case OPT_mint_register_:\n+      switch (value)\n+\t{\n+\tcase 4:\n+\t  fixed_regs[10] = call_used_regs [10] = 1;\n+\t  /* Fall through.  */\n+\tcase 3:\n+\t  fixed_regs[11] = call_used_regs [11] = 1;\n+\t  /* Fall through.  */\n+\tcase 2:\n+\t  fixed_regs[12] = call_used_regs [12] = 1;\n+\t  /* Fall through.  */\n+\tcase 1:\n+\t  fixed_regs[13] = call_used_regs [13] = 1;\n+\t  /* Fall through.  */\n+\tcase 0:\n+\t  return true;\n+\tdefault:\n+\t  return false;\n+\t}\n+      break;\n+\n+    case OPT_mmax_constant_size_:\n+      /* Make sure that the -mmax-constant_size option is in range.  */\n+      return value >= 0 && value <= 4;\n+\n+    case OPT_mcpu_:\n+    case OPT_patch_:\n+      if (strcasecmp (arg, \"RX610\") == 0)\n+\trx_cpu_type = RX610;\n+      else if (strcasecmp (arg, \"RX200\") == 0)\n+\t{\n+\t  target_flags |= MASK_NO_USE_FPU;\n+\t  rx_cpu_type = RX200;\n+\t}\n+      else if (strcasecmp (arg, \"RX600\") != 0)\n+\twarning (0, \"unrecognized argument '%s' to -mcpu= option\", arg);\n+      break;\n+      \n+    case OPT_fpu:\n+      if (rx_cpu_type == RX200)\n+\terror (\"The RX200 cpu does not have FPU hardware\");\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n+void\n+rx_set_optimization_options (void)\n+{\n+  static bool first_time = TRUE;\n+  static bool saved_allow_rx_fpu = TRUE;\n+\n+  if (first_time)\n+    {\n+      /* If this is the first time through and the user has not disabled\n+\t the use of RX FPU hardware then enable unsafe math optimizations,\n+\t since the FPU instructions themselves are unsafe.  */\n+      if (TARGET_USE_FPU)\n+\tset_fast_math_flags (true);\n+\n+      /* FIXME: For some unknown reason LTO compression is not working,\n+\t at least on my local system.  So set the default compression\n+\t level to none, for now.  */\n+      if (flag_lto_compression_level == -1)\n+        flag_lto_compression_level = 0;\n+\n+      saved_allow_rx_fpu = ALLOW_RX_FPU_INSNS;\n+      first_time = FALSE;\n+    }\n+  else\n+    {\n+      /* Alert the user if they are changing the optimization options\n+\t to use IEEE compliant floating point arithmetic with RX FPU insns.  */\n+      if (TARGET_USE_FPU\n+\t  && ! fast_math_flags_set_p ())\n+\twarning (0, \"RX FPU instructions are not IEEE compliant\");\n+\n+      if (saved_allow_rx_fpu != ALLOW_RX_FPU_INSNS)\n+\terror (\"Changing the FPU insns/math optimizations pairing is not supported\");\n+    }\n+}\n+\n+\f\n static bool\n rx_allocate_stack_slots_for_args (void)\n {\n@@ -2268,88 +2366,6 @@ rx_is_legitimate_constant (rtx x)\n \t\t        ( 1 << (rx_max_constant_size * 8)));\n }\n \n-/* This is a tri-state variable.  The default value of 0 means that the user\n-   has specified neither -mfpu nor -mnofpu on the command line.  In this case\n-   the selection of RX FPU instructions is entirely based upon the size of\n-   the floating point object and whether unsafe math optimizations were\n-   enabled.  If 32-bit doubles have been enabled then both floats and doubles\n-   can make use of FPU instructions, otherwise only floats may do so.\n-\n-   If the value is 1 then the user has specified -mfpu and the FPU\n-   instructions should be used.  Unsafe math optimizations will automatically\n-   be enabled and doubles set to 32-bits.  If the value is -1 then -mnofpu\n-   has been specified and FPU instructions will not be used, even if unsafe\n-   math optimizations have been enabled.  */\n-int rx_enable_fpu = 0;\n-\n-/* Extra processing for target specific command line options.  */\n-\n-static bool\n-rx_handle_option (size_t code, const char *  arg ATTRIBUTE_UNUSED, int value)\n-{\n-  switch (code)\n-    {\n-      /* -mfpu enables the use of RX FPU instructions.  This implies the use\n-\t of 32-bit doubles and also the enabling of fast math optimizations.\n-\t (Since the RX FPU instructions are not IEEE compliant).  The -mnofpu\n-\t option disables the use of RX FPU instructions, but does not make\n-\t place any constraints on the size of doubles or the use of fast math\n-\t optimizations.\n-\n-\t The selection of 32-bit vs 64-bit doubles is handled by the setting\n-\t of the 32BIT_DOUBLES mask in the rx.opt file.  Enabling fast math\n-\t optimizations is performed in OVERRIDE_OPTIONS since if it was done\n-\t here it could be overridden by a -fno-fast-math option specified\n-\t *earlier* on the command line.  (Target specific options are\n-\t processed before generic ones).  */\n-    case OPT_fpu:\n-      rx_enable_fpu = 1;\n-      break;\n-\n-    case OPT_nofpu:\n-      rx_enable_fpu = -1;\n-      break;\n-\n-    case OPT_mint_register_:\n-      switch (value)\n-\t{\n-\tcase 4:\n-\t  fixed_regs[10] = call_used_regs [10] = 1;\n-\t  /* Fall through.  */\n-\tcase 3:\n-\t  fixed_regs[11] = call_used_regs [11] = 1;\n-\t  /* Fall through.  */\n-\tcase 2:\n-\t  fixed_regs[12] = call_used_regs [12] = 1;\n-\t  /* Fall through.  */\n-\tcase 1:\n-\t  fixed_regs[13] = call_used_regs [13] = 1;\n-\t  /* Fall through.  */\n-\tcase 0:\n-\t  return true;\n-\tdefault:\n-\t  return false;\n-\t}\n-      break;\n-\n-    case OPT_mmax_constant_size_:\n-      /* Make sure that the -mmax-constant_size option is in range.  */\n-      return IN_RANGE (value, 0, 4);\n-\n-    case OPT_mcpu_:\n-    case OPT_patch_:\n-      if (strcasecmp (arg, \"RX610\") == 0)\n-\trx_cpu_type = RX610;\n-      /* FIXME: Should we check for non-RX cpu names here ?  */\n-      break;\n-      \n-    default:\n-      break;\n-    }\n-\n-  return true;\n-}\n-\n static int\n rx_address_cost (rtx addr, bool speed)\n {"}, {"sha": "a053340c48a4009d4df592a13202b3091c1ff763", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=5f75e47778de3e5836499e6304832730bee181df", "patch": "@@ -1,5 +1,5 @@\n /* GCC backend definitions for the Renesas RX processor.\n-   Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n    This file is part of GCC.\n@@ -34,10 +34,10 @@\n       else\t\t\t\t\t\\\n \tbuiltin_define (\"__RX_LITTLE_ENDIAN__\");\\\n       \t\t\t\t\t\t\\\n-      if (TARGET_32BIT_DOUBLES)\t\t\t\\\n-\tbuiltin_define (\"__RX_32BIT_DOUBLES__\");\\\n-      else\t\t\t\t\t\\\n+      if (TARGET_64BIT_DOUBLES)\t\t\t\\\n \tbuiltin_define (\"__RX_64BIT_DOUBLES__\");\\\n+      else\t\t\t\t\t\\\n+\tbuiltin_define (\"__RX_32BIT_DOUBLES__\");\\\n       \t\t\t\t\t\t\\\n       if (ALLOW_RX_FPU_INSNS)\t\t\t\\\n \tbuiltin_define (\"__RX_FPU_INSNS__\");\t\\\n@@ -52,13 +52,16 @@\n enum rx_cpu_types\n {\n   RX600,\n-  RX610\n+  RX610,\n+  RX200\n };\n \n extern enum rx_cpu_types  rx_cpu_type;\n \n #undef  CC1_SPEC\n-#define CC1_SPEC \"%{mas100-syntax:%{gdwarf*:%e-mas100-syntax is incompatible with -gdwarf}}\"\n+#define CC1_SPEC \"\\\n+  %{mas100-syntax:%{gdwarf*:%e-mas100-syntax is incompatible with -gdwarf}} \\\n+  %{mcpu=rx200:%{fpu:%erx200 cpu does not have FPU hardware}}\"\n \n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{pg:gcrt0.o%s}%{!pg:crt0.o%s} crtbegin.o%s\"\n@@ -69,8 +72,8 @@ extern enum rx_cpu_types  rx_cpu_type;\n #undef  ASM_SPEC\n #define ASM_SPEC \"\\\n %{mbig-endian-data:-mbig-endian-data} \\\n-%{m32bit-doubles:-m32bit-doubles} \\\n-%{!m32bit-doubles:-m64bit-doubles} \\\n+%{m64bit-doubles:-m64bit-doubles} \\\n+%{!m64bit-doubles:-m32bit-doubles} \\\n %{msmall-data-limit*:-msmall-data-limit} \\\n %{mrelax:-relax} \\\n \"\n@@ -106,7 +109,7 @@ extern enum rx_cpu_types  rx_cpu_type;\n #define LONG_LONG_TYPE_SIZE\t\t64\n \n #define FLOAT_TYPE_SIZE \t\t32\n-#define DOUBLE_TYPE_SIZE \t\t(TARGET_32BIT_DOUBLES ? 32 : 64)\n+#define DOUBLE_TYPE_SIZE \t\t(TARGET_64BIT_DOUBLES ? 64 : 32)\n #define LONG_DOUBLE_TYPE_SIZE\t\tDOUBLE_TYPE_SIZE\n \n #ifdef __RX_32BIT_DOUBLES__\n@@ -636,24 +639,14 @@ extern int rx_float_compare_mode;\n #define ARG_POINTER_CFA_OFFSET(FNDECL)\t\t4\n #define FRAME_POINTER_CFA_OFFSET(FNDECL)\t4\n \f\n-extern int rx_enable_fpu;\n+/* Translate -nofpu into -mnofpu so that it gets passed from gcc to cc1.  */\n+#define TARGET_OPTION_TRANSLATE_TABLE \\\n+  {\"-nofpu\", \"-mnofpu\" }\n \n-/* For some unknown reason LTO compression is not working, at\n-   least on my local system.  So set the default compression\n-   level to none, for now.\n+#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) \\\n+  rx_set_optimization_options ()\n \n-   For an explanation of rx_flag_no_fpu see rx_handle_option().  */\n-#define OVERRIDE_OPTIONS\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if (flag_lto_compression_level == -1)\t\\\n-        flag_lto_compression_level = 0;\t\t\\\n-\t\t\t\t\t\t\\\n-      if (rx_enable_fpu == 1)\t\t\t\\\n-\tset_fast_math_flags (true);\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n+#define TARGET_USE_FPU\t\t(! TARGET_NO_USE_FPU)\n \n /* This macro is used to decide when RX FPU instructions can be used.  */\n-#define ALLOW_RX_FPU_INSNS\t((rx_enable_fpu != -1) \\\n-\t\t\t\t && flag_unsafe_math_optimizations)\n+#define ALLOW_RX_FPU_INSNS\t(TARGET_USE_FPU)"}, {"sha": "9615556576d906ef3bb0433534d9bc08c9596689", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=5f75e47778de3e5836499e6304832730bee181df", "patch": "@@ -1,5 +1,5 @@\n ; Command line options for the Renesas RX port of GCC.\n-; Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+; Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n ; Contributed by Red Hat.\n ;\n ; This file is part of GCC.\n@@ -19,26 +19,31 @@\n ; <http://www.gnu.org/licenses/>.\n ;---------------------------------------------------\n \n-m32bit-doubles\n-Target RejectNegative Mask(32BIT_DOUBLES)\n-Stores doubles in 32 bits.\n+; The default is -fpu -m32bit-doubles.\n \n m64bit-doubles\n-Target RejectNegative InverseMask(32BIT_DOUBLES)\n-Store doubles in 64 bits.  This is the default.\n+Target RejectNegative Mask(64BIT_DOUBLES) Report\n+Store doubles in 64 bits.\n \n-fpu\n-Target RejectNegative Mask(32BIT_DOUBLES) MaskExists\n-Enable the use of RX FPU instructions.\n+m32bit-doubles\n+Target RejectNegative InverseMask(64BIT_DOUBLES) Report\n+Stores doubles in 32 bits.  This is the default.\n \n nofpu\n-Target RejectNegative InverseMask(32BIT_DOUBLES) MaskExists\n-Disable the use of RX FPU instructions.\n+Target RejectNegative Mask(NO_USE_FPU) Report\n+Disable the use of RX FPU instructions.  \n+\n+mnofpu\n+Target RejectNegative Mask(NO_USE_FPU) MaskExists Undocumented\n+\n+fpu\n+Target RejectNegative InverseMask(NO_USE_FPU) Report\n+Enable the use of RX FPU instructions.  This is the default.\n \n ;---------------------------------------------------\n \n mcpu=\n-Target RejectNegative Joined Var(rx_cpu_name)\n+Target RejectNegative Joined Var(rx_cpu_name) Report\n Specify the target RX cpu type.\n \n patch=\n@@ -48,11 +53,11 @@ Alias for -mcpu.\n ;---------------------------------------------------\n \n mbig-endian-data\n-Target RejectNegative Mask(BIG_ENDIAN_DATA)\n+Target RejectNegative Mask(BIG_ENDIAN_DATA) Report\n Data is stored in big-endian format.\n \n mlittle-endian-data\n-Target RejectNegative InverseMask(BIG_ENDIAN_DATA)\n+Target RejectNegative InverseMask(BIG_ENDIAN_DATA) Report\n Data is stored in little-endian format.  (Default).\n \n ;---------------------------------------------------\n@@ -70,7 +75,7 @@ Use the simulator runtime.\n ;---------------------------------------------------\n \n mas100-syntax\n-Target Mask(AS100_SYNTAX)\n+Target Mask(AS100_SYNTAX) Report\n Generate assembler output that is compatible with the Renesas AS100 assembler.  This may restrict some of the compiler's capabilities.  The default is to generate GAS compatable syntax.\n \n ;---------------------------------------------------"}, {"sha": "7990bcfaa47d8cadf8b8a20dfbe44f785fcd5bdb", "filename": "gcc/config/rx/t-rx", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Ft-rx?ref=5f75e47778de3e5836499e6304832730bee181df", "patch": "@@ -1,5 +1,5 @@\n # Makefile fragment for building GCC for the Renesas RX target.\n-# Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n # Contributed by Red Hat.\n #\n # This file is part of GCC.\n@@ -20,9 +20,11 @@\n \n # Enable multilibs:\n \n-MULTILIB_OPTIONS    = m32bit-doubles mbig-endian-data\n-MULTILIB_DIRNAMES   = 32fp           big-endian-data\n-MULTILIB_MATCHES    = m32bit-doubles=fpu\n+MULTILIB_OPTIONS    = m64bit-doubles  nofpu        mbig-endian-data \n+MULTILIB_DIRNAMES   =  64-bit-double  no-fpu-libs   big-endian-data \n+\n+MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200  nofpu=mcpu?RX200\n+\n MULTILIB_EXCEPTIONS =\n MULTILIB_EXTRA_OPTS = \n "}, {"sha": "44bbd4a7794e030289b5ff9718ca2b9c12027d2e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f75e47778de3e5836499e6304832730bee181df/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5f75e47778de3e5836499e6304832730bee181df", "patch": "@@ -15453,41 +15453,49 @@ This option sets flags for both the preprocessor and linker.\n @subsection RX Options\n @cindex RX Options\n \n-These @option{-m} options are defined for RX implementations:\n+These command line options are defined for RX targets:\n \n @table @gcctabopt\n @item -m64bit-doubles\n @itemx -m32bit-doubles\n-@itemx -fpu\n-@itemx -nofpu\n @opindex m64bit-doubles\n @opindex m32bit-doubles\n-@opindex fpu\n-@opindex nofpu\n Make the @code{double} data type be 64-bits (@option{-m64bit-doubles})\n or 32-bits (@option{-m32bit-doubles}) in size.  The default is\n-@option{-m64bit-doubles}.  @emph{Note} the RX's hardware floating\n-point instructions are only used for 32-bit floating point values, and\n-then only if @option{-ffast-math} has been specified on the command\n-line.  This is because the RX FPU instructions do not properly support\n-denormal (or sub-normal) values.\n-\n-The options @option{-fpu} and @option{-nofpu} have been provided at\n-the request of Rensas for compatibility with their toolchain.  The\n-@option{-mfpu} option enables the use of RX FPU instructions by\n-selecting 32-bit doubles and enabling unsafe math optimizations.  The\n-@option{-mnofpu} option disables the use of RX FPU instructions, even\n-if @option{-m32bit-doubles} is active and unsafe math optimizations\n-have been enabled.\n+@option{-m32bit-doubles}.  @emph{Note} RX floating point hardware only\n+works on 32-bit values, which is why the default is\n+@option{-m32bit-doubles}.\n+\n+@item -fpu\n+@itemx -nofpu\n+@opindex fpu\n+@opindex nofpu\n+Enables (@option{-fpu}) or disables (@option{-nofpu}) the use of RX\n+floating point hardware.  The default is enabled for the @var{RX600}\n+series and disabled for the @var{RX200} series.\n+\n+Floating point instructions will only be generated for 32-bit floating\n+point values however, so if the @option{-m64bit-doubles} option is in\n+use then the FPU hardware will not be used for doubles.\n+\n+@emph{Note} If the @option{-fpu} option is enabled then\n+@option{-funsafe-math-optimizations} is also enabled automatically.\n+This is because the RX FPU instructions are themselves unsafe.\n \n @item -mcpu=@var{name}\n @itemx -patch=@var{name}\n @opindex -mcpu\n @opindex -patch\n-Selects the type of RX CPU to be targeted.  Currently on two types are\n-supported, the generic @var{RX600} and the specific @var{RX610}.  The\n-only difference between them is that the @var{RX610} does not support\n-the @code{MVTIPL} instruction.\n+Selects the type of RX CPU to be targeted.  Currently three types are\n+supported, the generic @var{RX600} and @var{RX200} series hardware and\n+the specific @var{RX610} cpu.  The default is @var{RX600}.\n+\n+The only difference between @var{RX600} and @var{RX610} is that the\n+@var{RX610} does not support the @code{MVTIPL} instruction.\n+\n+The @var{RX200} series does not have a hardware floating point unit\n+and so @option{-nofpu} is enabled by default when this type is\n+selected.\n \n @item -mbig-endian-data\n @itemx -mlittle-endian-data"}]}