{"sha": "ac816b0280b8344aef4955f1cea092f6b2401edd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4MTZiMDI4MGI4MzQ0YWVmNDk1NWYxY2VhMDkyZjZiMjQwMWVkZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-05-31T21:14:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-05-31T21:14:52Z"}, "message": "trans-expr.c (gfc_conv_expr_op): Use zero constant that matches the lse type.\n\n2007-05-31  Richard Guenther  <rguenther@suse.de>\n\n\t* trans-expr.c (gfc_conv_expr_op): Use zero constant\n\tthat matches the lse type.\n\t(gfc_trans_string_copy): Use sizetype zero constant.\n\t* intrinsic.c (add_functions): The sizeof intrinsic has\n\tindex type result.\n\t* trans-types.c (gfc_get_dtype): Convert size to index\n\ttype before shifting.\n\t* trans-array.c (gfc_trans_array_constructor_value): Use\n\tindex type for offset computation.\n\t* trans-intrinsic.c (gfc_conv_associated): Use correct type\n\tfor zero constant.\n\nFrom-SVN: r125242", "tree": {"sha": "ba6f9b09f627fba0cd7cb0cca6ba17e1db74915d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba6f9b09f627fba0cd7cb0cca6ba17e1db74915d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac816b0280b8344aef4955f1cea092f6b2401edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac816b0280b8344aef4955f1cea092f6b2401edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac816b0280b8344aef4955f1cea092f6b2401edd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac816b0280b8344aef4955f1cea092f6b2401edd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac5753b796593af16f52cdab931d1768875e5ea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5753b796593af16f52cdab931d1768875e5ea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5753b796593af16f52cdab931d1768875e5ea8"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "f761f5669334e2a1ff9b4ae6dbed99e46775884b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ac816b0280b8344aef4955f1cea092f6b2401edd", "patch": "@@ -1,3 +1,17 @@\n+2007-05-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans-expr.c (gfc_conv_expr_op): Use zero constant\n+\tthat matches the lse type.\n+\t(gfc_trans_string_copy): Use sizetype zero constant.\n+\t* intrinsic.c (add_functions): The sizeof intrinsic has\n+\tindex type result.\n+\t* trans-types.c (gfc_get_dtype): Convert size to index\n+\ttype before shifting.\n+\t* trans-array.c (gfc_trans_array_constructor_value): Use\n+\tindex type for offset computation.\n+\t* trans-intrinsic.c (gfc_conv_associated): Use correct type\n+\tfor zero constant.\n+\n 2007-05-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32156"}, {"sha": "69d296ac9d9f68d4492883c2846ef4af2cad484b", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ac816b0280b8344aef4955f1cea092f6b2401edd", "patch": "@@ -2143,9 +2143,9 @@ add_functions (void)\n \n   make_generic (\"size\", GFC_ISYM_SIZE, GFC_STD_F95);\n \n-  add_sym_1 (\"sizeof\", GFC_ISYM_SIZEOF, NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_1 (\"sizeof\", GFC_ISYM_SIZEOF, NOT_ELEMENTAL, ACTUAL_NO, BT_INTEGER, ii,\n \t     GFC_STD_GNU, gfc_check_sizeof, NULL, NULL,\n-\t     i, BT_INTEGER, di, REQUIRED);\n+\t     i, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"sizeof\", GFC_ISYM_SIZEOF, GFC_STD_GNU);\n "}, {"sha": "b85819e0365950ddf31ca2e29c723fac83b6e16c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ac816b0280b8344aef4955f1cea092f6b2401edd", "patch": "@@ -1196,7 +1196,8 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t      gfc_add_expr_to_block (&body, tmp);\n \n \t      *poffset = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n-\t\t\t\t      *poffset, build_int_cst (NULL_TREE, n));\n+\t\t\t\t      *poffset,\n+\t\t\t\t      build_int_cst (gfc_array_index_type, n));\n \t    }\n \t  if (!INTEGER_CST_P (*poffset))\n             {"}, {"sha": "407098e8e4adbb0c98f2193542a0ea58616fcec6", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=ac816b0280b8344aef4955f1cea092f6b2401edd", "patch": "@@ -1149,7 +1149,7 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n \n       lse.expr = gfc_build_compare_string (lse.string_length, lse.expr,\n \t\t\t\t\t   rse.string_length, rse.expr);\n-      rse.expr = integer_zero_node;\n+      rse.expr = build_int_cst (TREE_TYPE (lse.expr), 0);\n       gfc_add_block_to_block (&lse.post, &rse.post);\n     }\n \n@@ -2537,7 +2537,7 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n \n   /* Do nothing if the destination length is zero.  */\n   cond = fold_build2 (GT_EXPR, boolean_type_node, dlen,\n-\t\t      build_int_cst (gfc_charlen_type_node, 0));\n+\t\t      build_int_cst (size_type_node, 0));\n \n   /* The following code was previously in _gfortran_copy_string:\n "}, {"sha": "801d28cd87fe6db0ae11d218918709e6a7ad5a8e", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ac816b0280b8344aef4955f1cea092f6b2401edd", "patch": "@@ -3271,7 +3271,7 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t  tmp = gfc_conv_descriptor_stride (arg1se.expr,\n \t\t\t\t\t    gfc_rank_cst[arg1->expr->rank - 1]);\n \t  nonzero_arraylen = build2 (NE_EXPR, boolean_type_node,\n-\t\t\t\t tmp, integer_zero_node);\n+\t\t\t\t     tmp, build_int_cst (TREE_TYPE (tmp), 0));\n \n           /* A pointer to an array, call library function _gfor_associated.  */\n           gcc_assert (ss2 != gfc_ss_terminator);"}, {"sha": "0cd284b52fd814ae83d009d0ba38f82b7f35bf3e", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac816b0280b8344aef4955f1cea092f6b2401edd/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=ac816b0280b8344aef4955f1cea092f6b2401edd", "patch": "@@ -993,7 +993,8 @@ gfc_get_dtype (tree type)\n   if (size && !INTEGER_CST_P (size))\n     {\n       tmp = build_int_cst (gfc_array_index_type, GFC_DTYPE_SIZE_SHIFT);\n-      tmp  = fold_build2 (LSHIFT_EXPR, gfc_array_index_type, size, tmp);\n+      tmp  = fold_build2 (LSHIFT_EXPR, gfc_array_index_type,\n+\t\t\t  fold_convert (gfc_array_index_type, size), tmp);\n       dtype = fold_build2 (PLUS_EXPR, gfc_array_index_type, tmp, dtype);\n     }\n   /* If we don't know the size we leave it as zero.  This should never happen"}]}