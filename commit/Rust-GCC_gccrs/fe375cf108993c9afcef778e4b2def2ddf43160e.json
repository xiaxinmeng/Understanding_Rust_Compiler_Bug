{"sha": "fe375cf108993c9afcef778e4b2def2ddf43160e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUzNzVjZjEwODk5M2M5YWZjZWY3NzhlNGIyZGVmMmRkZjQzMTYwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-02-14T07:57:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-02-14T07:57:49Z"}, "message": "stor-layout.c (is_pending_size, [...]): New functions.\n\n\t* stor-layout.c (is_pending_size, put_pending_size): New functions.\n\t(variable_size): Call put_pending_size.\n\t* tree.h (is_pending_size, put_pending_size): Add prototypes.\n\t* fold-const.c (extract_muldiv): If SAVE_EXPR is on the pending\n\tsizes list, put newly created SAVE_EXPR there as well.\n\n\t* gcc.c-torture/execute/20010209-1.c: New test.\n\n\t* config/ia64/ia64.c (last_group): Only 2 entries are needed.\n\t(errata_find_address_regs): load_group has only 2 entries.\n\t(errata_emit_nops): Likewise.  shladd is not problematic.\n\tClear last_group if nop was emitted.\n\t(fixup_errata): load_group has only 2 entries.\n\tOptimize.\n\nFrom-SVN: r39663", "tree": {"sha": "1998ac8deccf251adebd1cb63da29b3285bdd37f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1998ac8deccf251adebd1cb63da29b3285bdd37f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe375cf108993c9afcef778e4b2def2ddf43160e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe375cf108993c9afcef778e4b2def2ddf43160e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe375cf108993c9afcef778e4b2def2ddf43160e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe375cf108993c9afcef778e4b2def2ddf43160e/comments", "author": null, "committer": null, "parents": [{"sha": "ceeaadbb7808485164e3079e4bf60fa07a3ad66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceeaadbb7808485164e3079e4bf60fa07a3ad66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceeaadbb7808485164e3079e4bf60fa07a3ad66d"}], "stats": {"total": 125, "additions": 105, "deletions": 20}, "files": [{"sha": "bde3b9e5ff47e51609929990465e48c17c99e72a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe375cf108993c9afcef778e4b2def2ddf43160e", "patch": "@@ -1,16 +1,33 @@\n+2001-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* stor-layout.c (is_pending_size, put_pending_size): New functions.\n+\t(variable_size): Call put_pending_size.\n+\t* tree.h (is_pending_size, put_pending_size): Add prototypes.\n+\t* fold-const.c (extract_muldiv): If SAVE_EXPR is on the pending\n+\tsizes list, put newly created SAVE_EXPR there as well.\n+\n+2001-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/ia64/ia64.c (last_group): Only 2 entries are needed.\n+\t(errata_find_address_regs): load_group has only 2 entries.\n+\t(errata_emit_nops): Likewise.  shladd is not problematic.\n+\tClear last_group if nop was emitted.\n+\t(fixup_errata): load_group has only 2 entries.\n+\tOptimize.\n+\n 2001-02-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * c-lex.c (lex_number): Only warn traditionally for U suffix\n-        outside system macros.\n-        * cppexp.c (parse_number): Similarly.\n-        * cpplib.h (NODE_SYSHDR, cpp_sys_objmacro_p): New.\n-        * cppmacro.c (struct cpp_macro): New member node.\n-        (parse_args): Only warn about missing rest args if not\n-        a system macro.\n-        (funlike_invocation_p): Similarly for uninvoked funlike macros.\n-        (cpp_sys_objmacro_p): New.\n-        (_cpp_create_definition): Store the node with the macro defn.\n-        Remember if the macro is defined in a system header.\n+\t* c-lex.c (lex_number): Only warn traditionally for U suffix\n+\toutside system macros.\n+\t* cppexp.c (parse_number): Similarly.\n+\t* cpplib.h (NODE_SYSHDR, cpp_sys_objmacro_p): New.\n+\t* cppmacro.c (struct cpp_macro): New member node.\n+\t(parse_args): Only warn about missing rest args if not\n+\ta system macro.\n+\t(funlike_invocation_p): Similarly for uninvoked funlike macros.\n+\t(cpp_sys_objmacro_p): New.\n+\t(_cpp_create_definition): Store the node with the macro defn.\n+\tRemember if the macro is defined in a system header.\n \n 2001-02-13  DJ Delorie  <dj@redhat.com>\n "}, {"sha": "8b9e0b014577b525231ae8e9decb24d0de02f2a1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fe375cf108993c9afcef778e4b2def2ddf43160e", "patch": "@@ -4560,7 +4560,7 @@ static struct group\n {\n   HARD_REG_SET p_reg_set;\n   HARD_REG_SET gr_reg_conditionally_set;\n-} last_group[3];\n+} last_group[2];\n \n /* Index into the last_group array.  */\n static int group_idx;\n@@ -4581,7 +4581,7 @@ errata_find_address_regs (xp, data)\n     x = XEXP (x, 0);\n   if (GET_CODE (x) == REG)\n     {\n-      struct group *prev_group = last_group + (group_idx + 2) % 3;\n+      struct group *prev_group = last_group + (group_idx ^ 1);\n       if (TEST_HARD_REG_BIT (prev_group->gr_reg_conditionally_set,\n \t\t\t     REGNO (x)))\n \treturn 1;\n@@ -4598,7 +4598,7 @@ errata_emit_nops (insn)\n      rtx insn;\n {\n   struct group *this_group = last_group + group_idx;\n-  struct group *prev_group = last_group + (group_idx + 2) % 3;\n+  struct group *prev_group = last_group + (group_idx ^ 1);\n   rtx pat = PATTERN (insn);\n   rtx cond = GET_CODE (pat) == COND_EXEC ? COND_EXEC_TEST (pat) : 0;\n   rtx real_pat = cond ? COND_EXEC_CODE (pat) : pat;\n@@ -4642,6 +4642,8 @@ errata_emit_nops (insn)\n       && REG_P (SET_DEST (set))\n       && GET_CODE (SET_SRC (set)) != PLUS\n       && GET_CODE (SET_SRC (set)) != MINUS\n+      && (GET_CODE (SET_SRC (set)) != ASHIFT\n+\t  || !shladd_operand (XEXP (SET_SRC (set), 1)))\n       && (GET_CODE (SET_SRC (set)) != MEM\n \t  || GET_CODE (XEXP (SET_SRC (set), 0)) != POST_MODIFY)\n       && GENERAL_REGNO_P (REGNO (SET_DEST (set))))\n@@ -4658,6 +4660,8 @@ errata_emit_nops (insn)\n       emit_insn_before (gen_insn_group_barrier (GEN_INT (3)), insn);\n       emit_insn_before (gen_nop (), insn);\n       emit_insn_before (gen_insn_group_barrier (GEN_INT (3)), insn);\n+      group_idx = 0;\n+      memset (last_group, 0, sizeof last_group);\n     }\n }\n \n@@ -4668,17 +4672,23 @@ fixup_errata ()\n {\n   rtx insn;\n \n+  if (! TARGET_B_STEP)\n+    return;\n+\n   group_idx = 0;\n   memset (last_group, 0, sizeof last_group);\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n-      if (INSN_P (insn) && ia64_safe_type (insn) == TYPE_S)\n+      if (!INSN_P (insn))\n+\tcontinue;\n+\n+      if (ia64_safe_type (insn) == TYPE_S)\n \t{\n-\t  group_idx = (group_idx + 1) % 3;\n+\t  group_idx ^= 1;\n \t  memset (last_group + group_idx, 0, sizeof last_group[group_idx]);\n \t}\n-      if (TARGET_B_STEP && INSN_P (insn))\n+      else\n \terrata_emit_nops (insn);\n     }\n }"}, {"sha": "3975ae414e4a2e879828c104fd009d6d3e7e191a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fe375cf108993c9afcef778e4b2def2ddf43160e", "patch": "@@ -4449,7 +4449,14 @@ extract_muldiv (t, c, code, wide_type)\n       if (SAVE_EXPR_RTL (t) == 0 && ! TREE_SIDE_EFFECTS (TREE_OPERAND (t, 0))\n \t  && 0 != (t1 = extract_muldiv (TREE_OPERAND (t, 0), c, code,\n \t\t\t\t\twide_type)))\n-\treturn save_expr (t1);\n+\t{\n+\t  t1 = save_expr (t1);\n+\t  if (SAVE_EXPR_PERSISTENT_P (t) && TREE_CODE (t1) == SAVE_EXPR)\n+\t    SAVE_EXPR_PERSISTENT_P (t1) = 1;\n+\t  if (is_pending_size (t))\n+\t    put_pending_size (t1);\n+\t  return t1;\n+\t}\n       break;\n \n     case LSHIFT_EXPR:  case RSHIFT_EXPR:"}, {"sha": "065d4f61201ba70d14c953b9bcb22631dd6e7a06", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=fe375cf108993c9afcef778e4b2def2ddf43160e", "patch": "@@ -94,6 +94,30 @@ get_pending_sizes ()\n   return chain;\n }\n \n+/* Return non-zero if EXPR is present on the pending sizes list.  */\n+\n+int\n+is_pending_size (expr)\n+     tree expr;\n+{\n+  tree t;\n+\n+  for (t = pending_sizes; t; t = TREE_CHAIN (t))\n+    if (TREE_VALUE (t) == expr)\n+      return 1;\n+  return 0;\n+}\n+\n+/* Add EXPR to the pending sizes list.  */\n+\n+void\n+put_pending_size (expr)\n+     tree expr;\n+{\n+  if (TREE_CODE (expr) == SAVE_EXPR)\n+    pending_sizes = tree_cons (NULL_TREE, expr, pending_sizes);\n+}\n+\n /* Put a chain of objects into the pending sizes list, which must be\n    empty.  */\n \n@@ -153,8 +177,8 @@ variable_size (size)\n     /* The front-end doesn't want us to keep a list of the expressions\n        that determine sizes for variable size objects.  */\n     ;\n-  else if (TREE_CODE (size) == SAVE_EXPR)\n-    pending_sizes = tree_cons (NULL_TREE, size, pending_sizes);\n+  else\n+    put_pending_size (size);\n \n   return size;\n }"}, {"sha": "8a5f0f03e83b68b03e5c34be990a639639c3d4af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe375cf108993c9afcef778e4b2def2ddf43160e", "patch": "@@ -1,3 +1,7 @@\n+2001-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20010209-1.c: New test.\n+\n 2001-02-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/sysmac1.c, sysmac2.c: New tests."}, {"sha": "e04d605ed63ef12d064b1e67d723d7931a896cfb", "filename": "gcc/testsuite/gcc.c-torture/execute/20010209-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010209-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010209-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010209-1.c?ref=fe375cf108993c9afcef778e4b2def2ddf43160e", "patch": "@@ -0,0 +1,21 @@\n+int b;\n+int foo (void)\n+{\n+  int x[b];\n+  int bar (int t[b])\n+  {\n+    int i;\n+    for (i = 0; i < b; i++)\n+      t[i] = i + (i > 0 ? t[i-1] : 0);\n+    return t[b-1];\n+  }\n+  return bar (x);\n+}\n+\n+int main ()\n+{\n+  b = 6;\n+  if (foo () != 15)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "c7745be369bb27d024cd0cc52b49a4a077816c10", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe375cf108993c9afcef778e4b2def2ddf43160e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fe375cf108993c9afcef778e4b2def2ddf43160e", "patch": "@@ -2165,6 +2165,8 @@ extern tree size_int_type_wide\t\tPARAMS ((HOST_WIDE_INT, tree));\n extern tree round_up\t\t\tPARAMS ((tree, int));\n extern tree round_down\t\t\tPARAMS ((tree, int));\n extern tree get_pending_sizes\t\tPARAMS ((void));\n+extern int is_pending_size\t\tPARAMS ((tree));\n+extern void put_pending_size\t\tPARAMS ((tree));\n extern void put_pending_sizes\t\tPARAMS ((tree));\n \n /* Type for sizes of data-type.  */"}]}