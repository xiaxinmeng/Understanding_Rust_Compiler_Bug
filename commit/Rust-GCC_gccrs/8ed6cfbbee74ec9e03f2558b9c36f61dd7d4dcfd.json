{"sha": "8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkNmNmYmJlZTc0ZWM5ZTAzZjI1NThiOWMzNmY2MWRkN2Q0ZGNmZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-22T17:49:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-22T18:39:58Z"}, "message": "libstdc++: Fix non-default constructors for hash containers [PR101583]\n\nWhen I added the new mixin to _Hashtable, I forgot to explicitly\nconstruct it in each non-default constructor. That means you can't\nuse any constructors unless all three of the hash function, equality\nfunction, and allocator are all default constructible.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101583\n\t* include/bits/hashtable.h (_Hashtable): Replace mixin with\n\t_Enable_default_ctor. Construct it explicitly in all\n\tnon-forwarding, non-defaulted constructors.\n\t* testsuite/23_containers/unordered_map/cons/default.cc: Check\n\tnon-default constructors can be used.\n\t* testsuite/23_containers/unordered_set/cons/default.cc:\n\tLikewise.", "tree": {"sha": "88604566e9bb0d802e9554ecad85c88cbeb060a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88604566e9bb0d802e9554ecad85c88cbeb060a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b362d7947b37059fdb6de62145fa5146258dd58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b362d7947b37059fdb6de62145fa5146258dd58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b362d7947b37059fdb6de62145fa5146258dd58f"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "92516b81ae539356d63502e7226ea4ee2eb9c127", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd", "patch": "@@ -54,11 +54,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // from any other potentially-overlapping subobjects of the hashtable.\n   template<typename _Equal, typename _Hash, typename _Allocator>\n     using _Hashtable_enable_default_ctor\n-      = _Enable_special_members<__and_<is_default_constructible<_Equal>,\n+      = _Enable_default_constructor<__and_<is_default_constructible<_Equal>,\n \t\t\t\t       is_default_constructible<_Hash>,\n \t\t\t\t       is_default_constructible<_Allocator>>{},\n-\t\t\t\ttrue, true, true, true, true,\n-\t\t\t\t__detail::_Hash_node_base>;\n+\t\t\t\t    __detail::_Hash_node_base>;\n \n   /**\n    *  Primary class template _Hashtable.\n@@ -228,6 +227,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t      _Equal, _Hash,\n \t\t\t\t\t      _RangeHash, _Unused,\n \t\t\t\t\t      _RehashPolicy, _Traits>;\n+      using __enable_default_ctor\n+\t= _Hashtable_enable_default_ctor<_Equal, _Hash, _Alloc>;\n \n     public:\n       typedef _Key\t\t\t\t\t\tkey_type;\n@@ -484,7 +485,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Hashtable(const _Hash& __h, const _Equal& __eq,\n \t\t const allocator_type& __a)\n       : __hashtable_base(__h, __eq),\n-\t__hashtable_alloc(__node_alloc_type(__a))\n+\t__hashtable_alloc(__node_alloc_type(__a)),\n+\t__enable_default_ctor(_Enable_default_constructor_tag{})\n       { }\n \n       template<bool _No_realloc = true>\n@@ -551,7 +553,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       explicit\n       _Hashtable(const allocator_type& __a)\n-      : __hashtable_alloc(__node_alloc_type(__a))\n+      : __hashtable_alloc(__node_alloc_type(__a)),\n+\t__enable_default_ctor(_Enable_default_constructor_tag{})\n       { }\n \n       template<typename _InputIterator>\n@@ -1435,6 +1438,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __rehash_base(__ht),\n       __hashtable_alloc(\n \t__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),\n+      __enable_default_ctor(__ht),\n       _M_buckets(nullptr),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_element_count(__ht._M_element_count),\n@@ -1457,6 +1461,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __map_base(__ht),\n       __rehash_base(__ht),\n       __hashtable_alloc(std::move(__a)),\n+      __enable_default_ctor(__ht),\n       _M_buckets(__ht._M_buckets),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_before_begin(__ht._M_before_begin._M_nxt),\n@@ -1487,6 +1492,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __map_base(__ht),\n       __rehash_base(__ht),\n       __hashtable_alloc(__node_alloc_type(__a)),\n+      __enable_default_ctor(__ht),\n       _M_buckets(),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_element_count(__ht._M_element_count),\n@@ -1508,6 +1514,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __map_base(__ht),\n       __rehash_base(__ht),\n       __hashtable_alloc(std::move(__a)),\n+      __enable_default_ctor(__ht),\n       _M_buckets(nullptr),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_element_count(__ht._M_element_count),"}, {"sha": "d64d078a7dab8cf459888710cfac0813250b9a50", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/default.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdefault.cc?ref=8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd", "patch": "@@ -31,3 +31,18 @@ static_assert( ! std::is_default_constructible<Map2>{}, \"PR libstdc++/100863\" );\n struct Equal : std::equal_to<int> { Equal(int) { } };\n using Map3 = std::unordered_map<int, int, std::hash<int>, Equal>;\n static_assert( ! std::is_default_constructible<Map3>{}, \"PR libstdc++/100863\" );\n+\n+// PR libstdc++/101583\n+// verify non-default ctors can still be used\n+using Map4 = std::unordered_map<int, int, Hash, Equal,\n+\t\t\t        NoDefaultConsAlloc<std::pair<const int, int>>>;\n+Hash h(1);\n+Equal eq(1);\n+Map4::allocator_type a(1);\n+Map4 m{1, h, eq, a};\n+Map4 m2{m.begin(), m.end(), m.size(), h, eq, a};\n+Map4 m3{{{1,1}, {2,2}, {3,3}}, 3, h, eq, a};\n+Map4 m4{m};\n+Map4 m5{m, a};\n+Map4 m6{std::move(m)};\n+Map4 m7{std::move(m6), a};"}, {"sha": "41281d3d774e440104db0eb6f57386744cfe429b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/default.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdefault.cc?ref=8ed6cfbbee74ec9e03f2558b9c36f61dd7d4dcfd", "patch": "@@ -31,3 +31,17 @@ static_assert( ! std::is_default_constructible<Set2>{}, \"PR libstdc++/100863\" );\n struct Equal : std::equal_to<int> { Equal(int) { } };\n using Set3 = std::unordered_set<int, std::hash<int>, Equal>;\n static_assert( ! std::is_default_constructible<Set3>{}, \"PR libstdc++/100863\" );\n+\n+// PR libstdc++/101583\n+// verify non-default ctors can still be used\n+using Set4 = std::unordered_set<int, Hash, Equal, NoDefaultConsAlloc<int>>;\n+Hash h(1);\n+Equal eq(1);\n+Set4::allocator_type a(1);\n+Set4 s{1, h, eq, a};\n+Set4 s2{s.begin(), s.end(), s.size(), h, eq, a};\n+Set4 s3{{1, 2, 3}, 3, h, eq, a};\n+Set4 s4{s};\n+Set4 s5{s, a};\n+Set4 s6{std::move(s)};\n+Set4 s7{std::move(s6), a};"}]}