{"sha": "20b11783a374a792e0737b9495bdae63269b5883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiMTE3ODNhMzc0YTc5MmUwNzM3Yjk0OTViZGFlNjMyNjliNTg4Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-23T08:57:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-23T08:57:34Z"}, "message": "ainclude.m4 (GLIBCPP_CHEC_MATH_DECLS_AND_LINKAGE_1): New macro.\n\n\t* ainclude.m4 (GLIBCPP_CHEC_MATH_DECLS_AND_LINKAGE_1): New macro.\n\t(GLIBCPP_CHECK_MATH_SUPPORT): Use it.\n\t(GLIBCPP_CHECK_TYPE_SUPPORT): Don't autoconf ctype information if\n\tits already provided in config.target.\n\t* aclocal.m4: Regenerated.\n\t* configure: Likewise.\n\t* configure.target: Set ctype_include_dir for lots of systems.\n\t* libsupc++/Makefile.am: Explicitly include --tag disable-shared.\n\t* libsupc++/Makefile.in: Regenerated.\n\nFrom-SVN: r39196", "tree": {"sha": "835a4f8e7e11336543b392757b3297236d0eb8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835a4f8e7e11336543b392757b3297236d0eb8e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b11783a374a792e0737b9495bdae63269b5883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b11783a374a792e0737b9495bdae63269b5883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b11783a374a792e0737b9495bdae63269b5883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b11783a374a792e0737b9495bdae63269b5883/comments", "author": null, "committer": null, "parents": [{"sha": "27902296e0c325c0aeb900cc082a0366f0dffdee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27902296e0c325c0aeb900cc082a0366f0dffdee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27902296e0c325c0aeb900cc082a0366f0dffdee"}], "stats": {"total": 6988, "additions": 1347, "deletions": 5641}, "files": [{"sha": "5b8bb6b6f5cbe6820bb9242d02021cad0600fc41", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 55, "deletions": 186, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=20b11783a374a792e0737b9495bdae63269b5883", "patch": "@@ -353,6 +353,26 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n   fi\n ])\n \n+dnl\n+dnl Like GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n+dnl of functions at once.  It's an all-or-nothing check -- either \n+dnl HAVE_XYZ is defined for each of the functions, or for none of them\n+dnl Doing it this way saves significant configure time.\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n+  AC_MSG_CHECKING([for $1 functions])\n+  AC_CACHE_VAL(glibcpp_cv_func_$2_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>],\n+                   [ `for x in $3; do echo \"$x (0);\"; done` ],\n+\t           [glibcpp_cv_func_$2_use=yes],\n+\t           [glibcpp_cv_func_$2_use=no])\n+    AC_LANG_RESTORE])\n+  AC_MSG_RESULT($glibcpp_cv_func_$2_use)\n+  if test x$glibcpp_cv_func_$2_use = x\"yes\"; then\n+    AC_CHECK_FUNCS($3)\n+  fi\n+])\n \n dnl\n dnl Check to see if the (math function) argument passed is\n@@ -612,57 +632,51 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n \n   dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n+\t                                  float_trig,\n+\t                                  acosf asinf atanf \\\n+                                          cosf sinf tanf \\\n+\t                                  coshf sinhf tanhf)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float round,\n+\t                                  float_round,\n+                                          ceilf floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceilf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n \n   dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double trig,\n+\t                                  long_double_trig,\n+\t                                  acosl asinl atanl \\\n+                                          cosl sinl tanl \\\n+\t                                  coshl sinhl tanhl)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double round,\n+\t                                  long_double_round,\n+                                          ceill floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceill)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n \n@@ -679,57 +693,51 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_qfpclass)\n \n   dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float trig,\n+\t                                  _float_trig,\n+\t                                  _acosf _asinf _atanf \\\n+                                          _cosf _sinf _tanf \\\n+\t                                  _coshf _sinhf _tanhf)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float round,\n+\t                                  _float_round,\n+                                          _ceilf _floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceilf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10f)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modff)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitef)\n \n   dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double trig,\n+\t                                  _long_double_trig,\n+\t                                  _acosl _asinl _atanl \\\n+                                          _cosl _sinl _tanl \\\n+\t                                  _coshl _sinhl _tanhl)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double round,\n+\t                                  _long_double_round,\n+                                          _ceill _floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysignl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_atan2l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceill)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_expl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitel)\n \n@@ -792,149 +800,10 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n   AC_CHECK_HEADER(ctype.h, [\n     \n     dnl If doesn't match any specified, go with defaults.\n-    ctype_default=yes\n-\n-    dnl Test for <ctype> functionality -- GNU/Linux\n-    AC_MSG_CHECKING([<ctype> for GNU/Linux])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _ISspace + _ISprint + _IScntrl + _ISupper + _ISlower + _ISalpha \\\n-        + _ISdigit + _ISpunct + _ISxdigit + _ISalnum + _ISgraph \\\n-        + __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}], \\\n-    ctype_linux=yes, ctype_linux=no)\n-    AC_MSG_RESULT($ctype_linux)\n-    if test $ctype_linux = \"yes\"; then\n-      ctype_include_dir=\"config/os/gnu-linux\"\n-      ctype_default=no\n-    fi\n-\n-    dnl Test for <ctype> functionality -- FreeBSD 4.0\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for FreeBSD 4.0])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _CTYPE_S + _CTYPE_R + _CTYPE_C + _CTYPE_U + _CTYPE_L + _CTYPE_A \\\n-        + _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n-    ctype_bsd=yes, ctype_bsd=no)\n-    AC_MSG_RESULT($ctype_bsd)\n-    if test $ctype_bsd = \"yes\"; then\n-      ctype_include_dir=\"config/os/bsd/freebsd\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- FreeBSD 3.4\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for FreeBSD 3.4])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _S + _R + _C + _U + _L + _A \\\n-      + _D + _P + _X + _G + __istype (a, 0);}], \\\n-    ctype_freebsd34=yes, ctype_freebsd34=no)\n-    AC_MSG_RESULT($ctype_freebsd34)\n-    if test $ctype_freebsd34 = \"yes\"; then\n-      ctype_include_dir=\"config/os/bsd/freebsd\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- NetBSD\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for NetBSD])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _S + _C + _U + _L \\\n-      + _N + _P + _X + _tolower_tab_[a] + _toupper_tab_[a];}], \\\n-    ctype_netbsd=yes, ctype_netbsd=no)\n-    AC_MSG_RESULT($ctype_netbsd)\n-    if test $ctype_netbsd = \"yes\"; then\n-      ctype_include_dir=\"config/os/bsd/netbsd\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- Solaris 2.6 and up\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for Solaris 2.6,7,8])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-        + __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}], \\\n-    ctype_solaris=yes, ctype_solaris=no)\n-    AC_MSG_RESULT($ctype_solaris)\n-\n-    if test $ctype_solaris = \"yes\"; then\n-      AC_MSG_CHECKING([  for version])\n-      AC_LANG_CPLUSPLUS \n-      AC_TRY_COMPILE([#include <ctype.h>],\n-      [typedef long* __to_type; __to_type const& _M_toupper = __trans_upper;],\\\n-      ctype_solaris26=yes, ctype_solaris26=no)\n-      AC_LANG_C\n-      if test $ctype_solaris26 = \"yes\"; then\n-        ctype_include_dir=\"config/os/solaris/solaris2.6\"\n-        AC_MSG_RESULT([Solaris 2.6])\n-        ctype_default=no\n-      else\n-        ctype_include_dir=\"config/os/solaris/solaris2.7\"\n-        AC_MSG_RESULT([Solaris 7,8])\n-        ctype_default=no\n-      fi\n-    fi\n-    fi  \n-\n-    dnl Test for <ctype> functionality -- Solaris 2.5.1\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for Solaris 2.5.1])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-        + __ctype[a];}], \\\n-    ctype_solaris25=yes, ctype_solaris25=no)\n-    AC_MSG_RESULT($ctype_solaris25)\n-    if test $ctype_solaris25 = \"yes\"; then\n-      ctype_include_dir=\"config/os/solaris/solaris2.5\"\n+    if test x$ctype_include_dir != x; then\n       ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- AIX\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for AIX])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-        + _VALC('a') + _IS('c', 0);}], \\\n-    ctype_aix=yes, ctype_aix=no)\n-    AC_MSG_RESULT($ctype_aix)\n-    if test $ctype_aix = \"yes\"; then\n-      ctype_include_dir=\"config/os/aix\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- IRIX\n-    if test $ctype_default = \"yes\"; then \n-    AC_MSG_CHECKING([<ctype> for IRIX])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _U + _L + _N + _S + _P + _C + _B + _X + \\\n-             _A + _PR + _G + _BL;}], \\\n-    ctype_irix=yes, ctype_irix=no)\n-    AC_MSG_RESULT($ctype_irix)\n-    if test $ctype_irix = \"yes\"; then\n-      ctype_include_dir=\"config/os/irix\"\n-      ctype_default=no\n-    fi\n+    else\n+      ctype_default=yes\n     fi\n \n     dnl Test for <ctype> functionality -- newlib"}, {"sha": "59699238d3a29f458063384bd1c5ee946c58c7a8", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 55, "deletions": 186, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=20b11783a374a792e0737b9495bdae63269b5883", "patch": "@@ -365,6 +365,26 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n   fi\n ])\n \n+dnl\n+dnl Like GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n+dnl of functions at once.  It's an all-or-nothing check -- either \n+dnl HAVE_XYZ is defined for each of the functions, or for none of them\n+dnl Doing it this way saves significant configure time.\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n+  AC_MSG_CHECKING([for $1 functions])\n+  AC_CACHE_VAL(glibcpp_cv_func_$2_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>],\n+                   [ `for x in $3; do echo \"$x (0);\"; done` ],\n+\t           [glibcpp_cv_func_$2_use=yes],\n+\t           [glibcpp_cv_func_$2_use=no])\n+    AC_LANG_RESTORE])\n+  AC_MSG_RESULT($glibcpp_cv_func_$2_use)\n+  if test x$glibcpp_cv_func_$2_use = x\"yes\"; then\n+    AC_CHECK_FUNCS($3)\n+  fi\n+])\n \n dnl\n dnl Check to see if the (math function) argument passed is\n@@ -624,57 +644,51 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n \n   dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n+\t                                  float_trig,\n+\t                                  acosf asinf atanf \\\n+                                          cosf sinf tanf \\\n+\t                                  coshf sinhf tanhf)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float round,\n+\t                                  float_round,\n+                                          ceilf floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceilf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n \n   dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double trig,\n+\t                                  long_double_trig,\n+\t                                  acosl asinl atanl \\\n+                                          cosl sinl tanl \\\n+\t                                  coshl sinhl tanhl)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double round,\n+\t                                  long_double_round,\n+                                          ceill floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceill)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n \n@@ -691,57 +705,51 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_qfpclass)\n \n   dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float trig,\n+\t                                  _float_trig,\n+\t                                  _acosf _asinf _atanf \\\n+                                          _cosf _sinf _tanf \\\n+\t                                  _coshf _sinhf _tanhf)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float round,\n+\t                                  _float_round,\n+                                          _ceilf _floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceilf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10f)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modff)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitef)\n \n   dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double trig,\n+\t                                  _long_double_trig,\n+\t                                  _acosl _asinl _atanl \\\n+                                          _cosl _sinl _tanl \\\n+\t                                  _coshl _sinhl _tanhl)\n+  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double round,\n+\t                                  _long_double_round,\n+                                          _ceill _floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysignl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_atan2l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceill)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_expl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitel)\n \n@@ -804,149 +812,10 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n   AC_CHECK_HEADER(ctype.h, [\n     \n     dnl If doesn't match any specified, go with defaults.\n-    ctype_default=yes\n-\n-    dnl Test for <ctype> functionality -- GNU/Linux\n-    AC_MSG_CHECKING([<ctype> for GNU/Linux])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _ISspace + _ISprint + _IScntrl + _ISupper + _ISlower + _ISalpha \\\n-        + _ISdigit + _ISpunct + _ISxdigit + _ISalnum + _ISgraph \\\n-        + __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}], \\\n-    ctype_linux=yes, ctype_linux=no)\n-    AC_MSG_RESULT($ctype_linux)\n-    if test $ctype_linux = \"yes\"; then\n-      ctype_include_dir=\"config/os/gnu-linux\"\n-      ctype_default=no\n-    fi\n-\n-    dnl Test for <ctype> functionality -- FreeBSD 4.0\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for FreeBSD 4.0])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _CTYPE_S + _CTYPE_R + _CTYPE_C + _CTYPE_U + _CTYPE_L + _CTYPE_A \\\n-        + _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n-    ctype_bsd=yes, ctype_bsd=no)\n-    AC_MSG_RESULT($ctype_bsd)\n-    if test $ctype_bsd = \"yes\"; then\n-      ctype_include_dir=\"config/os/bsd/freebsd\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- FreeBSD 3.4\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for FreeBSD 3.4])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _S + _R + _C + _U + _L + _A \\\n-      + _D + _P + _X + _G + __istype (a, 0);}], \\\n-    ctype_freebsd34=yes, ctype_freebsd34=no)\n-    AC_MSG_RESULT($ctype_freebsd34)\n-    if test $ctype_freebsd34 = \"yes\"; then\n-      ctype_include_dir=\"config/os/bsd/freebsd\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- NetBSD\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for NetBSD])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _S + _C + _U + _L \\\n-      + _N + _P + _X + _tolower_tab_[a] + _toupper_tab_[a];}], \\\n-    ctype_netbsd=yes, ctype_netbsd=no)\n-    AC_MSG_RESULT($ctype_netbsd)\n-    if test $ctype_netbsd = \"yes\"; then\n-      ctype_include_dir=\"config/os/bsd/netbsd\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- Solaris 2.6 and up\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for Solaris 2.6,7,8])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-        + __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}], \\\n-    ctype_solaris=yes, ctype_solaris=no)\n-    AC_MSG_RESULT($ctype_solaris)\n-\n-    if test $ctype_solaris = \"yes\"; then\n-      AC_MSG_CHECKING([  for version])\n-      AC_LANG_CPLUSPLUS \n-      AC_TRY_COMPILE([#include <ctype.h>],\n-      [typedef long* __to_type; __to_type const& _M_toupper = __trans_upper;],\\\n-      ctype_solaris26=yes, ctype_solaris26=no)\n-      AC_LANG_C\n-      if test $ctype_solaris26 = \"yes\"; then\n-        ctype_include_dir=\"config/os/solaris/solaris2.6\"\n-        AC_MSG_RESULT([Solaris 2.6])\n-        ctype_default=no\n-      else\n-        ctype_include_dir=\"config/os/solaris/solaris2.7\"\n-        AC_MSG_RESULT([Solaris 7,8])\n-        ctype_default=no\n-      fi\n-    fi\n-    fi  \n-\n-    dnl Test for <ctype> functionality -- Solaris 2.5.1\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for Solaris 2.5.1])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-        + __ctype[a];}], \\\n-    ctype_solaris25=yes, ctype_solaris25=no)\n-    AC_MSG_RESULT($ctype_solaris25)\n-    if test $ctype_solaris25 = \"yes\"; then\n-      ctype_include_dir=\"config/os/solaris/solaris2.5\"\n+    if test x$ctype_include_dir != x; then\n       ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- AIX\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for AIX])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-        + _VALC('a') + _IS('c', 0);}], \\\n-    ctype_aix=yes, ctype_aix=no)\n-    AC_MSG_RESULT($ctype_aix)\n-    if test $ctype_aix = \"yes\"; then\n-      ctype_include_dir=\"config/os/aix\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- IRIX\n-    if test $ctype_default = \"yes\"; then \n-    AC_MSG_CHECKING([<ctype> for IRIX])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _U + _L + _N + _S + _P + _C + _B + _X + \\\n-             _A + _PR + _G + _BL;}], \\\n-    ctype_irix=yes, ctype_irix=no)\n-    AC_MSG_RESULT($ctype_irix)\n-    if test $ctype_irix = \"yes\"; then\n-      ctype_include_dir=\"config/os/irix\"\n-      ctype_default=no\n-    fi\n+    else\n+      ctype_default=yes\n     fi\n \n     dnl Test for <ctype> functionality -- newlib"}, {"sha": "e3a78b80351ff343649f4e4f1c7a539b24ac8327", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1215, "deletions": 5263, "changes": 6478, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=20b11783a374a792e0737b9495bdae63269b5883"}, {"sha": "8897f2b80c62065932f38fe02083a509a46ce856", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=20b11783a374a792e0737b9495bdae63269b5883", "patch": "@@ -77,12 +77,15 @@ case \"${target_os}\" in\n         enable_threads='no'\n         ;;\n     esac\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   aix*)\n     os_include_dir=\"config/os/aix\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   bsd* | freebsd* )\n     os_include_dir=\"config/os/bsd/freebsd\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   cygwin*)\n     os_include_dir=\"config/os/newlib\"\n@@ -92,21 +95,27 @@ case \"${target_os}\" in\n     ;;\n   linux* | gnu*)\n     os_include_dir=\"config/os/gnu-linux\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   irix*)\n     os_include_dir=\"config/os/irix\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   netbsd*)\n     os_include_dir=\"config/os/bsd/netbsd\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   solaris2.5*)\n     os_include_dir=\"config/os/solaris/solaris2.5\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   solaris2.6*)\n     os_include_dir=\"config/os/solaris/solaris2.6\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   solaris2.7* | solaris2.8*)\n     os_include_dir=\"config/os/solaris/solaris2.7\"\n+    ctype_include_dir=${os_include_dir}\n     ;;\n   hpux)\n     os_include_dir=\"config/os/hpux\""}, {"sha": "0a693502622418ff372a712a63bc02170f724515", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=20b11783a374a792e0737b9495bdae63269b5883", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the GNU C++ Support library.\n ##\n-## Copyright (C) 2000 Free Software Foundation, Inc.\n+## Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n ##\n ## Process this file with automake to produce Makefile.in.\n ##\n@@ -144,8 +144,12 @@ AM_CXXFLAGS = \\\n # can't decide which configuration to use, and it gives up.  The\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n-# attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+# attempt to infer which configuration to use.\n+#\n+# We have to put --tag disable-shared after --tag CXX lest things\n+# CXX undo the affect of disable-shared.\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n # 3) We have a problem when building the shared libstdc++ object if"}, {"sha": "defda956e7cdd13a5673535ba445e5a230ed834e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b11783a374a792e0737b9495bdae63269b5883/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=20b11783a374a792e0737b9495bdae63269b5883", "patch": "@@ -195,8 +195,11 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # can't decide which configuration to use, and it gives up.  The\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n-# attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+# attempt to infer which configuration to use.\n+#\n+# We have to put --tag disable-shared after --tag CXX lest things\n+# CXX undo the affect of disable-shared.\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n@@ -230,7 +233,7 @@ CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS\n CXXLD = $(CXX)\n HEADERS =  $(glibcppinstall_HEADERS)\n \n-DIST_COMMON =  ChangeLog Makefile.am Makefile.in configure configure.in\n+DIST_COMMON =  Makefile.am Makefile.in configure configure.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)"}]}