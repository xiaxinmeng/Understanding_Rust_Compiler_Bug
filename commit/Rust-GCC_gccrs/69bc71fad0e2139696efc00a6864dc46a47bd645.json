{"sha": "69bc71fad0e2139696efc00a6864dc46a47bd645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliYzcxZmFkMGUyMTM5Njk2ZWZjMDBhNjg2NGRjNDZhNDdiZDY0NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-14T23:03:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-14T23:03:45Z"}, "message": "mn10300-protos.h: New file.\n\n        * mn10300-protos.h: New file.\n\n        * mn10300.c: Include tm_p.h.  Add static prototypes.  Fix compile\n        time warnings.\n\n        * mn10300.h: Move prototypes to mn10300-protos.h.  Fix compile time\n        warnings.\n\n        * mn10300.md: Likewise.\n\nFrom-SVN: r31428", "tree": {"sha": "cb8ab6db75c8ef493933685cd9b9ad612ecc6e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8ab6db75c8ef493933685cd9b9ad612ecc6e65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69bc71fad0e2139696efc00a6864dc46a47bd645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bc71fad0e2139696efc00a6864dc46a47bd645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69bc71fad0e2139696efc00a6864dc46a47bd645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bc71fad0e2139696efc00a6864dc46a47bd645/comments", "author": null, "committer": null, "parents": [{"sha": "ac42d1e9b14bcbb00948b877641286ac41f8a299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac42d1e9b14bcbb00948b877641286ac41f8a299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac42d1e9b14bcbb00948b877641286ac41f8a299"}], "stats": {"total": 179, "additions": 123, "deletions": 56}, "files": [{"sha": "b4edc1a4dbbf45eba18bfe801cdde3304ea0206d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69bc71fad0e2139696efc00a6864dc46a47bd645", "patch": "@@ -1,3 +1,15 @@\n+2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* mn10300-protos.h: New file.\n+\n+\t* mn10300.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* mn10300.h: Move prototypes to mn10300-protos.h.  Fix compile time\n+\twarnings.\n+\t\n+\t* mn10300.md: Likewise.\n+\n 2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* mn10200-protos.h: New file."}, {"sha": "2ae3ba5d62aa26c56270bd394992d9a7b606f2ee", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=69bc71fad0e2139696efc00a6864dc46a47bd645", "patch": "@@ -0,0 +1,56 @@\n+/* Definitions of target machine for GNU compiler. Matsushita MN10300 series\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Jeff Law (law@cygnus.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+\n+#ifdef TREE_CODE\n+extern void mn10300_va_start PARAMS ((int, tree, rtx));\n+#endif /* TREE_CODE */\n+\n+extern struct rtx_def *legitimize_address PARAMS ((rtx, rtx, enum machine_mode));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern void notice_update_cc PARAMS ((rtx, rtx));\n+extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n+\t\t\t\t\t\t      enum machine_mode, rtx));\n+extern char *output_tst PARAMS ((rtx, rtx));\n+extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n+extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int impossible_plus_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_8bit_operand PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+#ifdef TREE_CODE\n+extern struct rtx_def *function_arg PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t     enum machine_mode, tree, int));\n+extern int function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t       enum machine_mode, tree, int));\n+extern struct rtx_def *mn10300_va_arg PARAMS ((tree, tree));\n+#endif /* TREE_CODE */\n+\n+extern struct rtx_def *mn10300_builtin_saveregs PARAMS ((void));\n+extern void asm_file_start PARAMS ((FILE *));\n+extern void expand_prologue PARAMS ((void));\n+extern void expand_epilogue PARAMS ((void));\n+extern int initial_offset PARAMS ((int, int));\n+extern int can_use_return_insn PARAMS ((void));\n+extern int mask_ok_for_mem_btst PARAMS ((int, int));\n+"}, {"sha": "a8918b27650868380c6121f67716cc0c937d218e", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=69bc71fad0e2139696efc00a6864dc46a47bd645", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Matsushita MN10300 series\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -36,6 +36,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"function.h\"\n #include \"obstack.h\"\n+#include \"toplev.h\"\n+#include \"tm_p.h\"\n \n /* The size of the callee register save area.  Right now we save everything\n    on entry since it costs us nothing in code size.  It does cost us from a\n@@ -168,6 +170,8 @@ print_operand (file, x, code)\n \t\t      print_operand_address (file,\n \t\t\t\t\t     GEN_INT (CONST_DOUBLE_LOW (x)));\n \t\t      break;\n+\t\t    default:\n+\t\t      break;\n \t\t  }\n \t\tbreak;\n \t      }\n@@ -220,6 +224,8 @@ print_operand (file, x, code)\n \t\t      print_operand_address (file, \n \t\t\t\t\t     GEN_INT (CONST_DOUBLE_HIGH (x)));\n \t\t      break;\n+\t\t    default:\n+\t\t      break;\n \t\t  }\n \t\tbreak;\n \t      }\n@@ -549,7 +555,7 @@ notice_update_cc (body, insn)\n int\n call_address_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == REG);\n }\n@@ -564,8 +570,6 @@ secondary_reload_class (class, mode, in)\n      enum machine_mode mode;\n      rtx in;\n {\n-  int regno;\n-\n   /* Memory loads less than a full word wide can't have an\n      address or stack pointer destination.  They must use\n      a data register as an intermediate register.  */\n@@ -742,7 +746,7 @@ function_arg (cum, mode, type, named)\n      CUMULATIVE_ARGS *cum;\n      enum machine_mode mode;\n      tree type;\n-     int named;\n+     int named ATTRIBUTE_UNUSED;\n {\n   rtx result = 0;\n   int size, align;\n@@ -795,7 +799,7 @@ function_arg_partial_nregs (cum, mode, type, named)\n      CUMULATIVE_ARGS *cum;\n      enum machine_mode mode;\n      tree type;\n-     int named;\n+     int named ATTRIBUTE_UNUSED;\n {\n   int size, align;\n \n@@ -924,11 +928,8 @@ output_tst (operand, insn)\n int\n impossible_plus_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  extern rtx *reg_equiv_mem;\n-  rtx reg1, reg2;\n-  \n   if (GET_CODE (op) != PLUS)\n     return 0;\n \n@@ -945,7 +946,7 @@ impossible_plus_operand (op, mode)\n int\n const_8bit_operand (op, mode)\n     register rtx op;\n-    enum machine_mode mode;\n+    enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && INTVAL (op) >= 0\n@@ -981,7 +982,7 @@ mask_ok_for_mem_btst (len, bit)\n int\n symbolic_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -1016,8 +1017,8 @@ symbolic_operand (op, mode)\n rtx\n legitimize_address (x, oldx, mode)\n      rtx x;\n-     rtx oldx;\n-     enum machine_mode mode;\n+     rtx oldx ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   /* Uh-oh.  We might have an address for x[n-100000].  This needs\n      special handling to avoid creating an indexed memory address\n@@ -1029,7 +1030,7 @@ legitimize_address (x, oldx, mode)\n          by the index expression is computed first, then added to x to form\n          the entire address.  */\n \n-      rtx regx1, regx2, regy1, regy2, y;\n+      rtx regx1, regy1, regy2, y;\n \n       /* Strip off any CONST.  */\n       y = XEXP (x, 1);"}, {"sha": "d79d4e748a155c8e673f07796309552f27b81413", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=69bc71fad0e2139696efc00a6864dc46a47bd645", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler. Matsushita MN10300 series\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -251,19 +251,19 @@ enum reg_class {\n    of length N_REG_CLASSES.  */\n \n #define REG_CLASS_CONTENTS  \t\t\t\\\n-{      0,\t\t/* No regs      */\t\\\n-   0x0000f,\t\t/* DATA_REGS */\t\t\\\n-   0x001f0,\t\t/* ADDRESS_REGS */\t\\\n-   0x00200,\t\t/* SP_REGS */\t\t\\\n-   0x001ff,\t\t/* DATA_OR_ADDRESS_REGS */\\\n-   0x003f0,\t\t/* SP_OR_ADDRESS_REGS */\\\n-   0x2fc00,\t\t/* EXTENDED_REGS */\t\\\n-   0x2fc0f,\t\t/* DATA_OR_EXTENDED_REGS */\t\\\n-   0x2fdf0,\t\t/* ADDRESS_OR_EXTENDED_REGS */\t\\\n-   0x2fe00,\t\t/* SP_OR_EXTENDED_REGS */\t\\\n-   0x2fff0,\t\t/* SP_OR_ADDRESS_OR_EXTENDED_REGS */\t\\\n-   0x2fdff,\t\t/* GENERAL_REGS */    \t\\\n-   0x2ffff,\t\t/* ALL_REGS \t*/\t\\\n+{      {0},\t\t/* No regs      */\t\\\n+   {0x0000f},\t\t/* DATA_REGS */\t\t\\\n+   {0x001f0},\t\t/* ADDRESS_REGS */\t\\\n+   {0x00200},\t\t/* SP_REGS */\t\t\\\n+   {0x001ff},\t\t/* DATA_OR_ADDRESS_REGS */\\\n+   {0x003f0},\t\t/* SP_OR_ADDRESS_REGS */\\\n+   {0x2fc00},\t\t/* EXTENDED_REGS */\t\\\n+   {0x2fc0f},\t\t/* DATA_OR_EXTENDED_REGS */\t\\\n+   {0x2fdf0},\t\t/* ADDRESS_OR_EXTENDED_REGS */\t\\\n+   {0x2fe00},\t\t/* SP_OR_EXTENDED_REGS */\t\\\n+   {0x2fff0},\t\t/* SP_OR_ADDRESS_OR_EXTENDED_REGS */\t\\\n+   {0x2fdff},\t\t/* GENERAL_REGS */    \t\\\n+   {0x2ffff},\t\t/* ALL_REGS \t*/\t\\\n }\n \n /* The same information, inverted:\n@@ -504,7 +504,6 @@ struct cum_arg {int nbytes; };\n \n /* On the MN10300 all args are pushed.  */   \n \n-extern struct rtx_def *function_arg ();\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&CUM, MODE, TYPE, NAMED)\n \n@@ -606,16 +605,13 @@ extern struct rtx_def *function_arg ();\n    Ordinarily they are not call used registers, but they are for\n    _builtin_saveregs, so we must make this explicit.  */\n \n-extern struct rtx_def *mn10300_builtin_saveregs ();\n #define EXPAND_BUILTIN_SAVEREGS() mn10300_builtin_saveregs ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-extern void mn10300_va_start();\n #define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n   mn10300_va_start (stdarg, valist, nextarg)\n \n /* Implement `va_arg'.  */\n-extern struct rtx_def *mn10300_va_arg();\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   mn10300_va_arg (valist, type)\n \n@@ -754,7 +750,6 @@ extern struct rtx_def *mn10300_va_arg();\n    It is always safe for this macro to do nothing.  It exists to recognize\n    opportunities to optimize the output.   */\n \n-extern struct rtx_def *legitimize_address ();\n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)  \\\n { rtx orig_x = (X);\t\t\t\t\\\n   (X) = legitimize_address (X, OLDX, MODE);\t\\\n@@ -1088,16 +1083,3 @@ do { char dstr[30];\t\t\t\t\t\\\n \n #define FILE_ASM_OP \"\\t.file\\n\"\n \n-extern void asm_file_start ();\n-extern int const_costs ();\n-extern void print_operand ();\n-extern void print_operand_address ();\n-extern void expand_prologue ();\n-extern void expand_epilogue ();\n-extern void notice_update_cc ();\n-extern int call_address_operand ();\n-extern int impossible_plus_operand ();\n-extern enum reg_class secondary_reload_class ();\n-extern int initial_offset ();\n-extern char *output_tst ();\n-int symbolic_operand ();"}, {"sha": "750d30a88d1aa4efeee9b5909181d097d410ec13", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bc71fad0e2139696efc00a6864dc46a47bd645/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=69bc71fad0e2139696efc00a6864dc46a47bd645", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for Matsushita MN10300\n-;; Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+;; Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n ;; Contributed by Jeff Law (law@cygnus.com).\n \n ;; This file is part of GNU CC.\n@@ -97,6 +97,8 @@\n     case 8:\n     case 9:\n       return \\\"movbu %1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -133,6 +135,8 @@\n     case 8:\n     case 9:\n       return \\\"movbu %1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -193,6 +197,8 @@\n     case 8:\n     case 9:\n       return \\\"movhu %1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -228,6 +234,8 @@\n     case 8:\n     case 9:\n       return \\\"movhu %1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -332,6 +340,8 @@\n \t    return \\\"movu %1,%0\\\";\n \t}\n       return \\\"mov %1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -375,6 +385,8 @@\n \t    return \\\"movu %1,%0\\\";\n \t}\n       return \\\"mov %1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit\")])\n@@ -517,6 +529,8 @@\n \t      output_asm_insn (\\\"mov %H1,%H0\\\", operands);\n \t    return \\\"\\\";\n \t  }\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -659,6 +673,8 @@\n \t      output_asm_insn (\\\"mov %H1,%H0\\\", operands);\n \t    return \\\"\\\";\n \t  }\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -807,6 +823,8 @@\n \treturn \\\"mov %1,%0\\;add %2,%0\\\";\n       return \\\"mov %2,%0\\;add %1,%0\\\";\n       }\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"set_zn,none_0hit,none_0hit,set_zn,none_0hit,set_zn\")])\n@@ -847,6 +865,8 @@\n \t  == REGNO_REG_CLASS (true_regnum (operands[0])))\n \treturn \\\"mov %1,%0\\;add %2,%0\\\";\n       return \\\"mov %2,%0\\;add %1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"set_zn,none_0hit,none_0hit,set_zn,none_0hit,set_zn\")])\n@@ -1506,7 +1526,7 @@\n   \"\"\n   \"\n {\n-  if (! call_address_operand (XEXP (operands[0], 0)))\n+  if (! call_address_operand (XEXP (operands[0], 0), VOIDmode))\n     XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n   emit_call_insn (gen_call_internal (XEXP (operands[0], 0), operands[1]));\n   DONE;\n@@ -1535,7 +1555,7 @@\n   \"\"\n   \"\n {\n-  if (! call_address_operand (XEXP (operands[1], 0)))\n+  if (! call_address_operand (XEXP (operands[1], 0), VOIDmode))\n     XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n   emit_call_insn (gen_call_value_internal (operands[0],\n \t\t\t\t\t   XEXP (operands[1], 0),\n@@ -1996,9 +2016,7 @@\n   \"\"\n   \"*\n {\n-  int i, need_comma;\n-  int d2, d3, a2, a3;\n-  int exreg1;\n+  int need_comma;\n \n   need_comma = 0;\n   fputs (\\\"\\\\tret [\\\", asm_out_file);\n@@ -2046,9 +2064,7 @@\n   \"\"\n   \"*\n {\n-  int i, need_comma;\n-  int d2, d3, a2, a3;\n-  int exreg1;\n+  int need_comma;\n \n   need_comma = 0;\n   fputs (\\\"\\\\tmovm [\\\", asm_out_file);"}]}