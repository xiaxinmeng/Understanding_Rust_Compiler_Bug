{"sha": "34342ea3f96a82266a92386a97555b0d9bc51777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzNDJlYTNmOTZhODIyNjZhOTIzODZhOTc1NTViMGQ5YmM1MTc3Nw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-08-13T20:10:25Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-08-13T20:10:25Z"}, "message": "re PR fortran/88072 (gfortran crashes with an internal compiler error)\n\n2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/88072\n\t* misc.c (gfc_typename): Do not point to something that ought not to \n\tbe pointed at.\n\n2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/88072\n\t* gfortran.dg/pr88072.f90: New test.\n\t* gfortran.dg/unlimited_polymorphic_28.f90: Fix error message.\n\nFrom-SVN: r274399", "tree": {"sha": "e5cf549a4c3019e23a4c6900468838874afda586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5cf549a4c3019e23a4c6900468838874afda586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34342ea3f96a82266a92386a97555b0d9bc51777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34342ea3f96a82266a92386a97555b0d9bc51777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34342ea3f96a82266a92386a97555b0d9bc51777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34342ea3f96a82266a92386a97555b0d9bc51777/comments", "author": null, "committer": null, "parents": [{"sha": "d308419c64c52c2d48bdf53a65e1790a2c897e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d308419c64c52c2d48bdf53a65e1790a2c897e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d308419c64c52c2d48bdf53a65e1790a2c897e83"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "787c704cafc4b05928489093b6902325a7811432", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=34342ea3f96a82266a92386a97555b0d9bc51777", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/88072\n+\t* misc.c (gfc_typename): Do not point to something that ought not to \n+\tbe pointed at.\n+\n 2013-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/90563"}, {"sha": "eed203dee024a4c5b414e6893d42500d72fee5d3", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=34342ea3f96a82266a92386a97555b0d9bc51777", "patch": "@@ -128,6 +128,7 @@ gfc_typename (gfc_typespec *ts)\n   static char buffer2[GFC_MAX_SYMBOL_LEN + 7];\n   static int flag = 0;\n   char *buffer;\n+  gfc_typespec *ts1;\n \n   buffer = flag ? buffer1 : buffer2;\n   flag = !flag;\n@@ -159,9 +160,8 @@ gfc_typename (gfc_typespec *ts)\n       sprintf (buffer, \"TYPE(%s)\", ts->u.derived->name);\n       break;\n     case BT_CLASS:\n-      if (ts->u.derived->components)\n-\tts = &ts->u.derived->components->ts;\n-      if (ts->u.derived->attr.unlimited_polymorphic)\n+      ts1 = ts->u.derived->components ? &ts->u.derived->components->ts : NULL;\n+      if (ts1 && ts1->u.derived && ts1->u.derived->attr.unlimited_polymorphic)\n \tsprintf (buffer, \"CLASS(*)\");\n       else\n \tsprintf (buffer, \"CLASS(%s)\", ts->u.derived->name);"}, {"sha": "00785812a8eb6a71870cf9acb93a66b7d37e7abd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34342ea3f96a82266a92386a97555b0d9bc51777", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/88072\n+\t* gfortran.dg/pr88072.f90: New test.\n+\t* gfortran.dg/unlimited_polymorphic_28.f90: Fix error message.\n+\n 2019-08-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* obj-c++.dg/stubify-1.mm: Rename symbol stub option."}, {"sha": "5bc6af498dc6e832a6e6d2e8bf6552aabe932523", "filename": "gcc/testsuite/gfortran.dg/pr88072.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88072.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34342ea3f96a82266a92386a97555b0d9bc51777/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88072.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88072.f90?ref=34342ea3f96a82266a92386a97555b0d9bc51777", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! PR fortran/88072\n+! Original code contributed by Andrew Wood <andrew at fluidgravity dot co.uk>\n+module m1\n+\n+   implicit none\n+\n+   type, abstract, public :: t1\n+      integer, dimension(:), allocatable :: i\n+      contains\n+         procedure(f1), deferred :: f\n+   end type t1\n+\n+   type, extends(t1), public :: t2 ! { dg-error \"must be ABSTRACT because\" }\n+      contains\n+         procedure :: f => f2    ! { dg-error \"mismatch for the overriding\" }\n+   end type t2\n+\n+   abstract interface\n+      function f1(this)          ! { dg-error \"must be dummy, allocatable or\" }\n+         import\n+         class(t1) :: this\n+         class(t1) :: f1\n+      end function f1\n+   end interface\n+   contains\n+      type(t2) function f2(this)\n+         class(t2) :: this\n+      end function f2\n+end module m1"}]}