{"sha": "c67b2d4ea07e3c70b949f7af3638c0a84f966956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY3YjJkNGVhMDdlM2M3MGI5NDlmN2FmMzYzOGMwYTg0Zjk2Njk1Ng==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-12-28T17:04:37Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-12-28T17:04:37Z"}, "message": "pdp11.md: Correct length attribute for float literal case.\n\n* config/pdp11/pdp11.md: Correct length attribute for float\nliteral case.\n\nFrom-SVN: r168295", "tree": {"sha": "4275b6ef2a45329e9e00f6a6549297faf9447075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4275b6ef2a45329e9e00f6a6549297faf9447075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c67b2d4ea07e3c70b949f7af3638c0a84f966956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67b2d4ea07e3c70b949f7af3638c0a84f966956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67b2d4ea07e3c70b949f7af3638c0a84f966956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67b2d4ea07e3c70b949f7af3638c0a84f966956/comments", "author": null, "committer": null, "parents": [{"sha": "35bce82a804f8637741ebb6fac3fe452131c987d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bce82a804f8637741ebb6fac3fe452131c987d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35bce82a804f8637741ebb6fac3fe452131c987d"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "27d287828a9758c9510c27d14e32c3977b7869b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67b2d4ea07e3c70b949f7af3638c0a84f966956/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67b2d4ea07e3c70b949f7af3638c0a84f966956/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c67b2d4ea07e3c70b949f7af3638c0a84f966956", "patch": "@@ -1,3 +1,8 @@\n+2010-12-28  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11.md: Correct length attribute for float\n+\tliteral case.\n+\n 2010-12-28  Jie Zhang  <jie@codesourcery.com>\n \n \t* builtins.c (SLOW_UNALIGNED_ACCESS): Remove."}, {"sha": "0566d9a66ab0456e9298e07c5dd3c42e925a2282", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67b2d4ea07e3c70b949f7af3638c0a84f966956/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67b2d4ea07e3c70b949f7af3638c0a84f966956/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=c67b2d4ea07e3c70b949f7af3638c0a84f966956", "patch": "@@ -98,9 +98,9 @@\n (define_asm_attributes\n   [(set_attr \"type\" \"unknown\")\n ; length for asm is the max length per statement.  That would be\n-; 5 words, for a floating point instruction with a literal constant\n-; argument.\n-   (set_attr \"length\" \"10\")])\n+; 3 words, for a two-operand instruction with extra word addressing\n+; modes for both operands.\n+   (set_attr \"length\" \"6\")])\n \n ;; define function units\n \n@@ -114,8 +114,8 @@\n ;; compare\n (define_insn \"*cmpdf\"\n   [(set (cc0)\n-\t(compare (match_operand:DF 0 \"general_operand\" \"fR,fR,Q,Q,F\")\n-\t\t (match_operand:DF 1 \"register_or_const0_operand\" \"G,a,G,a,a\")))]\n+\t(compare (match_operand:DF 0 \"general_operand\" \"fR,fR,Q,QF\")\n+\t\t (match_operand:DF 1 \"register_or_const0_operand\" \"G,a,G,a\")))]\n   \"TARGET_FPU\"\n   \"*\n {\n@@ -125,7 +125,7 @@\n   else\n     return \\\"{cmpd|cmpf} %0, %1\\;cfcc\\\";\n }\"\n-  [(set_attr \"length\" \"4,4,6,6,12\")]) \n+  [(set_attr \"length\" \"4,4,6,6\")]) \n \n (define_insn \"*cmp<mode>\"\n   [(set (cc0)\n@@ -291,29 +291,29 @@\n \n (define_insn \"movdf\"\n   [(set (match_operand:DF 0 \"float_nonimm_operand\" \"=a,fR,a,Q,g\")\n-        (match_operand:DF 1 \"float_operand\" \"fFR,a,Q,a,g\"))]\n+        (match_operand:DF 1 \"float_operand\" \"fR,a,FQ,a,g\"))]\n   \"TARGET_FPU\"\n   \"* if (which_alternative ==0 || which_alternative == 2)\n        return \\\"ldd %1, %0\\\";\n      else if (which_alternative == 1 || which_alternative == 3)\n        return \\\"std %1, %0\\\";\n      else \n        return output_move_multiple (operands); \"\n-;; just a guess..\n-  [(set_attr \"length\" \"2,2,10,10,32\")])\n+;; last one is worst-case\n+  [(set_attr \"length\" \"2,2,4,4,24\")])\n \n (define_insn \"movsf\"\n   [(set (match_operand:SF 0 \"float_nonimm_operand\" \"=a,fR,a,Q,g\")\n-        (match_operand:SF 1 \"float_operand\" \"fFR,a,Q,a,g\"))]\n+        (match_operand:SF 1 \"float_operand\" \"fR,a,FQ,a,g\"))]\n   \"TARGET_FPU\"\n   \"* if (which_alternative ==0 || which_alternative == 2)\n        return \\\"{ldcfd|movof} %1, %0\\\";\n      else if (which_alternative == 1 || which_alternative == 3)\n        return \\\"{stcdf|movfo} %1, %0\\\";\n      else \n        return output_move_multiple (operands); \"\n-;; just a guess..\n-  [(set_attr \"length\" \"2,2,10,10,16\")])\n+;; last one is worst-case\n+  [(set_attr \"length\" \"2,2,4,4,12\")])\n \n ;; maybe fiddle a bit with move_ratio, then \n ;; let constraints only accept a register ...\n@@ -607,12 +607,12 @@\n ;;- add instructions\n \n (define_insn \"adddf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=a,a,a\")\n-\t(plus:DF (match_operand:DF 1 \"register_operand\" \"%0,0,0\")\n-\t\t (match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=a,a\")\n+\t(plus:DF (match_operand:DF 1 \"register_operand\" \"%0,0\")\n+\t\t (match_operand:DF 2 \"general_operand\" \"fR,QF\")))]\n   \"TARGET_FPU\"\n   \"{addd|addf} %2, %0\"\n-  [(set_attr \"length\" \"2,4,10\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r,r,o,o\")\n@@ -1261,12 +1261,12 @@\n ;;- multiply \n \n (define_insn \"muldf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=a,a,a\")\n-\t(mult:DF (match_operand:DF 1 \"register_operand\" \"%0,0,0\")\n-\t\t (match_operand:DF 2 \"float_operand\" \"fR,Q,F\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=a,a\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"%0,0\")\n+\t\t (match_operand:DF 2 \"float_operand\" \"fR,QF\")))]\n   \"TARGET_FPU\"\n   \"{muld|mulf} %2, %0\"\n-  [(set_attr \"length\" \"2,4,10\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;; 16 bit result multiply:\n ;; currently we multiply only into odd registers, so we don't use two \n@@ -1313,12 +1313,12 @@\n \n ;;- divide\n (define_insn \"divdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=a,a,a\")\n-\t(div:DF (match_operand:DF 1 \"register_operand\" \"0,0,0\")\n-\t\t(match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=a,a\")\n+\t(div:DF (match_operand:DF 1 \"register_operand\" \"0,0\")\n+\t\t(match_operand:DF 2 \"general_operand\" \"fR,QF\")))]\n   \"TARGET_FPU\"\n   \"{divd|divf} %2, %0\"\n-  [(set_attr \"length\" \"2,4,10\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n \t \n (define_expand \"divhi3\""}]}