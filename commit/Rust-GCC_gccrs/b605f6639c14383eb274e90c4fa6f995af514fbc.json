{"sha": "b605f6639c14383eb274e90c4fa6f995af514fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwNWY2NjM5YzE0MzgzZWIyNzRlOTBjNGZhNmY5OTVhZjUxNGZiYw==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2016-06-03T14:25:12Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2016-06-03T14:25:12Z"}, "message": "c-typeck.c (c_finish_omp_clauses): Mark OpenACC reduction arguments as addressable when async clause exists.\n\n2016-06-03  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tc/\n\t* c-typeck.c (c_finish_omp_clauses): Mark OpenACC reduction\n\targuments as addressable when async clause exists.\n\n\tcp/\n\t* semantics.c (finish_omp_clauses): Mark OpenACC reduction\n\targuments as addressable when async clause exists.\n\n\tfortran/\n\t* trans-openmp.c (gfc_trans_omp_reduction_list): Add mark_addressable\n\tbool parameter, set reduction clause DECLs as addressable when true.\n\t(gfc_trans_omp_clauses): Pass clauses->async to\n\tgfc_trans_omp_reduction_list, add comment describing OpenACC situation.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/reduction-8.f90: New testcase.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-8.c: New testcase.\n\nFrom-SVN: r237070", "tree": {"sha": "23dd423fd8de79a39d2c78c414903727101e5b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23dd423fd8de79a39d2c78c414903727101e5b86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b605f6639c14383eb274e90c4fa6f995af514fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b605f6639c14383eb274e90c4fa6f995af514fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b605f6639c14383eb274e90c4fa6f995af514fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b605f6639c14383eb274e90c4fa6f995af514fbc/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36b85e432865a312aa8edc8978e38266e8a0f14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b85e432865a312aa8edc8978e38266e8a0f14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b85e432865a312aa8edc8978e38266e8a0f14c"}], "stats": {"total": 119, "additions": 117, "deletions": 2}, "files": [{"sha": "1262c82cedb2ff97e887cc6f2b4bab8e97aab4ed", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -1,3 +1,8 @@\n+2016-06-03  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): Mark OpenACC reduction\n+\targuments as addressable when async clause exists.\n+\n 2016-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71349"}, {"sha": "0ff28f2ec2810c50f51adce76e4c43536277f7ff", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -12529,6 +12529,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   tree *nowait_clause = NULL;\n   bool ordered_seen = false;\n   tree schedule_clause = NULL_TREE;\n+  bool oacc_async = false;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -12539,6 +12540,14 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n   bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n+  if (ort & C_ORT_ACC)\n+    for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ASYNC)\n+\t{\n+\t  oacc_async = true;\n+\t  break;\n+\t}\n+\t  \n   for (pc = &clauses, c = clauses; c ; c = *pc)\n     {\n       bool remove = false;\n@@ -12575,6 +12584,8 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      remove = true;\n \t      break;\n \t    }\n+\t  if (oacc_async)\n+\t    c_mark_addressable (t);\n \t  type = TREE_TYPE (t);\n \t  if (TREE_CODE (t) == MEM_REF)\n \t    type = TREE_TYPE (type);"}, {"sha": "bec708c9f817efa3b7e44199629e2c24cc606e80", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -1,3 +1,8 @@\n+2016-06-03  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* semantics.c (finish_omp_clauses): Mark OpenACC reduction\n+\targuments as addressable when async clause exists.\n+\n 2016-06-02  Jan Hubicka  <jh@suse.cz>\n \n \t* cp-gimplify.c (genericize_continue_stmt): Force addition of"}, {"sha": "536509127e4fbd5d4689772872ba00c31b47cfdc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -5775,6 +5775,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bool branch_seen = false;\n   bool copyprivate_seen = false;\n   bool ordered_seen = false;\n+  bool oacc_async = false;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -5785,6 +5786,14 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n   bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n+  if (ort & C_ORT_ACC)\n+    for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ASYNC)\n+\t{\n+\t  oacc_async = true;\n+\t  break;\n+\t}\n+\n   for (pc = &clauses, c = clauses; c ; c = *pc)\n     {\n       bool remove = false;\n@@ -5828,6 +5837,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\tt = n;\n \t      goto check_dup_generic_t;\n \t    }\n+\t  if (oacc_async)\n+\t    cxx_mark_addressable (t);\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_COPYPRIVATE:\n \t  copyprivate_seen = true;"}, {"sha": "8c04089f8d02d6ff637da458a99750d2b1c4b35d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -1,3 +1,10 @@\n+2016-06-03  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_reduction_list): Add mark_addressable\n+\tbool parameter, set reduction clause DECLs as addressable when true.\n+\t(gfc_trans_omp_clauses): Pass clauses->async to\n+\tgfc_trans_omp_reduction_list, add comment describing OpenACC situation.\n+\n 2016-06-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/52393"}, {"sha": "ab07fe45be9e1951a1631a1eb018328608e341bb", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -1646,7 +1646,7 @@ gfc_trans_omp_array_reduction_or_udr (tree c, gfc_omp_namelist *n, locus where)\n \n static tree\n gfc_trans_omp_reduction_list (gfc_omp_namelist *namelist, tree list,\n-\t\t\t      locus where)\n+\t\t\t      locus where, bool mark_addressable)\n {\n   for (; namelist != NULL; namelist = namelist->next)\n     if (namelist->sym->attr.referenced)\n@@ -1657,6 +1657,8 @@ gfc_trans_omp_reduction_list (gfc_omp_namelist *namelist, tree list,\n \t    tree node = build_omp_clause (where.lb->location,\n \t\t\t\t\t  OMP_CLAUSE_REDUCTION);\n \t    OMP_CLAUSE_DECL (node) = t;\n+\t    if (mark_addressable)\n+\t      TREE_ADDRESSABLE (t) = 1;\n \t    switch (namelist->u.reduction_op)\n \t      {\n \t      case OMP_REDUCTION_PLUS:\n@@ -1747,7 +1749,10 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       switch (list)\n \t{\n \tcase OMP_LIST_REDUCTION:\n-\t  omp_clauses = gfc_trans_omp_reduction_list (n, omp_clauses, where);\n+\t  /* An OpenACC async clause indicates the need to set reduction\n+\t     arguments addressable, to allow asynchronous copy-out.  */\n+\t  omp_clauses = gfc_trans_omp_reduction_list (n, omp_clauses, where,\n+\t\t\t\t\t\t      clauses->async);\n \t  break;\n \tcase OMP_LIST_PRIVATE:\n \t  clause_code = OMP_CLAUSE_PRIVATE;"}, {"sha": "d25060572b56bf159c50477bba8793e7e50380f7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-8.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-8.c?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -0,0 +1,30 @@\n+const int n = 100;\n+    \n+// Check async over parallel construct with reduction\n+    \n+int\n+async_sum (int c)\n+{\n+  int s = 0;\n+    \n+#pragma acc parallel loop num_gangs (10) gang reduction (+:s) async\n+  for (int i = 0; i < n; i++)\n+    s += i+c;\n+    \n+#pragma acc wait\n+  return s;\n+}\n+    \n+int\n+main()\n+{\n+  int result = 0;\n+    \n+  for (int i = 0; i < n; i++)\n+    result += i+1;\n+    \n+  if (async_sum (1) != result)\n+    __builtin_abort ();\n+    \n+  return 0;\n+}"}, {"sha": "5cf4681191b01ab5f1f451949f36638268660bcf", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-8.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b605f6639c14383eb274e90c4fa6f995af514fbc/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b605f6639c14383eb274e90c4fa6f995af514fbc/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-8.f90?ref=b605f6639c14383eb274e90c4fa6f995af514fbc", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+\n+program reduction\n+  implicit none\n+  integer, parameter    :: n = 100\n+  integer               :: i, h1, h2, s1, s2, a1, a2\n+\n+  h1 = 0\n+  h2 = 0\n+  do i = 1, n\n+     h1 = h1 + 1\n+     h2 = h2 + 2\n+  end do\n+\n+  s1 = 0\n+  s2 = 0\n+  !$acc parallel loop reduction(+:s1, s2)\n+  do i = 1, n\n+     s1 = s1 + 1\n+     s2 = s2 + 2\n+  end do\n+  !$acc end parallel loop\n+\n+  a1 = 0\n+  a2 = 0\n+  !$acc parallel loop reduction(+:a1, a2) async(1)\n+  do i = 1, n\n+     a1 = a1 + 1\n+     a2 = a2 + 2\n+  end do\n+  !$acc end parallel loop\n+\n+  if (h1 .ne. s1) call abort ()\n+  if (h2 .ne. s2) call abort ()\n+\n+  !$acc wait(1)\n+\n+  if (h1 .ne. a1) call abort ()\n+  if (h2 .ne. a2) call abort ()\n+\n+end program reduction"}]}