{"sha": "312243969e3a0022c0eabe6f974c24abd4a2211b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyMjQzOTY5ZTNhMDAyMmMwZWFiZTZmOTc0YzI0YWJkNGEyMjExYg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2009-06-12T21:14:42Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2009-06-12T21:14:42Z"}, "message": "arith.c (gfc_enum_initializer): Move function ...\n\n2009-06-12  Steven G. Kargl  <kargls@comcast.net>\n\n\t* arith.c (gfc_enum_initializer): Move function ...\n\t* decl.c: ... here.  Remove gfc_ prefix and make static.\n\t(enumerator_decl): Update function call.\n\t* gfortran.h:  Remove gfc_enum_initializer prototype.\n\nFrom-SVN: r148441", "tree": {"sha": "b5c34c448cef8a8161bd6d57e5fbde7d823aa8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c34c448cef8a8161bd6d57e5fbde7d823aa8a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312243969e3a0022c0eabe6f974c24abd4a2211b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312243969e3a0022c0eabe6f974c24abd4a2211b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312243969e3a0022c0eabe6f974c24abd4a2211b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312243969e3a0022c0eabe6f974c24abd4a2211b/comments", "author": null, "committer": null, "parents": [{"sha": "d1d919c362ce6dd1cc74e7d2c0912ea586dcfd4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d919c362ce6dd1cc74e7d2c0912ea586dcfd4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d919c362ce6dd1cc74e7d2c0912ea586dcfd4a"}], "stats": {"total": 93, "additions": 46, "deletions": 47}, "files": [{"sha": "9aaf1bc03a9ef90e520c7886443fe39538e3219a", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312243969e3a0022c0eabe6f974c24abd4a2211b/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312243969e3a0022c0eabe6f974c24abd4a2211b/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=312243969e3a0022c0eabe6f974c24abd4a2211b", "patch": "@@ -2627,48 +2627,3 @@ gfc_hollerith2logical (gfc_expr *src, int kind)\n \n   return result;\n }\n-\n-\n-/* Returns an initializer whose value is one higher than the value of the\n-   LAST_INITIALIZER argument.  If the argument is NULL, the\n-   initializers value will be set to zero.  The initializer's kind\n-   will be set to gfc_c_int_kind.\n-\n-   If -fshort-enums is given, the appropriate kind will be selected\n-   later after all enumerators have been parsed.  A warning is issued\n-   here if an initializer exceeds gfc_c_int_kind.  */\n-\n-gfc_expr *\n-gfc_enum_initializer (gfc_expr *last_initializer, locus where)\n-{\n-  gfc_expr *result;\n-\n-  result = gfc_get_expr ();\n-  result->expr_type = EXPR_CONSTANT;\n-  result->ts.type = BT_INTEGER;\n-  result->ts.kind = gfc_c_int_kind;\n-  result->where = where;\n-\n-  mpz_init (result->value.integer);\n-\n-  if (last_initializer != NULL)\n-    {\n-      mpz_add_ui (result->value.integer, last_initializer->value.integer, 1);\n-      result->where = last_initializer->where;\n-\n-      if (gfc_check_integer_range (result->value.integer,\n-\t     gfc_c_int_kind) != ARITH_OK)\n-\t{\n-\t  gfc_error (\"Enumerator exceeds the C integer type at %C\");\n-\t  return NULL;\n-\t}\n-    }\n-  else\n-    {\n-      /* Control comes here, if it's the very first enumerator and no\n-\t initializer has been given.  It will be initialized to zero.  */\n-      mpz_set_si (result->value.integer, 0);\n-    }\n-\n-  return result;\n-}"}, {"sha": "1a4ca3616dcda270072adfc1b7a10d5c58285924", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312243969e3a0022c0eabe6f974c24abd4a2211b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312243969e3a0022c0eabe6f974c24abd4a2211b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=312243969e3a0022c0eabe6f974c24abd4a2211b", "patch": "@@ -6812,6 +6812,51 @@ gfc_match_enum (void)\n }\n \n \n+/* Returns an initializer whose value is one higher than the value of the\n+   LAST_INITIALIZER argument.  If the argument is NULL, the\n+   initializers value will be set to zero.  The initializer's kind\n+   will be set to gfc_c_int_kind.\n+\n+   If -fshort-enums is given, the appropriate kind will be selected\n+   later after all enumerators have been parsed.  A warning is issued\n+   here if an initializer exceeds gfc_c_int_kind.  */\n+\n+static gfc_expr *\n+enum_initializer (gfc_expr *last_initializer, locus where)\n+{\n+  gfc_expr *result;\n+\n+  result = gfc_get_expr ();\n+  result->expr_type = EXPR_CONSTANT;\n+  result->ts.type = BT_INTEGER;\n+  result->ts.kind = gfc_c_int_kind;\n+  result->where = where;\n+\n+  mpz_init (result->value.integer);\n+\n+  if (last_initializer != NULL)\n+    {\n+      mpz_add_ui (result->value.integer, last_initializer->value.integer, 1);\n+      result->where = last_initializer->where;\n+\n+      if (gfc_check_integer_range (result->value.integer,\n+\t     gfc_c_int_kind) != ARITH_OK)\n+\t{\n+\t  gfc_error (\"Enumerator exceeds the C integer type at %C\");\n+\t  return NULL;\n+\t}\n+    }\n+  else\n+    {\n+      /* Control comes here, if it's the very first enumerator and no\n+\t initializer has been given.  It will be initialized to zero.  */\n+      mpz_set_si (result->value.integer, 0);\n+    }\n+\n+  return result;\n+}\n+\n+\n /* Match a variable name with an optional initializer.  When this\n    subroutine is called, a variable is expected to be parsed next.\n    Depending on what is happening at the moment, updates either the\n@@ -6872,7 +6917,7 @@ enumerator_decl (void)\n      previous enumerator (stored in last_initializer) is incremented\n      by 1 and is used to initialize the current enumerator.  */\n   if (initializer == NULL)\n-    initializer = gfc_enum_initializer (last_initializer, old_locus);\n+    initializer = enum_initializer (last_initializer, old_locus);\n \n   if (initializer == NULL || initializer->ts.type != BT_INTEGER)\n     {"}, {"sha": "95661d10ce52830704f4e69243d16bb0463afcb1", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312243969e3a0022c0eabe6f974c24abd4a2211b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312243969e3a0022c0eabe6f974c24abd4a2211b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=312243969e3a0022c0eabe6f974c24abd4a2211b", "patch": "@@ -2249,7 +2249,6 @@ void gfc_get_errors (int *, int *);\n /* arith.c */\n void gfc_arith_init_1 (void);\n void gfc_arith_done_1 (void);\n-gfc_expr *gfc_enum_initializer (gfc_expr *, locus);\n arith gfc_check_integer_range (mpz_t p, int kind);\n bool gfc_check_character_range (gfc_char_t, int);\n "}]}