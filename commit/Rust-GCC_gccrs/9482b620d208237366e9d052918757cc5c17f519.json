{"sha": "9482b620d208237366e9d052918757cc5c17f519", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4MmI2MjBkMjA4MjM3MzY2ZTlkMDUyOTE4NzU3Y2M1YzE3ZjUxOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-06-04T08:17:45Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-06-04T08:17:45Z"}, "message": "re PR c/66341 (Some casts wrongly produce a lvalue)\n\n\tPR c/66341\n\t* c-typeck.c (build_c_cast): Wrap VALUE into NON_LVALUE_EXPR if\n\tit is a lvalue.\n\n\t* gcc.dg/lvalue-8.c: New test.\n\nFrom-SVN: r224115", "tree": {"sha": "0ae98c0e9dd440292c437f415548e76661933de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ae98c0e9dd440292c437f415548e76661933de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9482b620d208237366e9d052918757cc5c17f519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9482b620d208237366e9d052918757cc5c17f519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9482b620d208237366e9d052918757cc5c17f519", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9482b620d208237366e9d052918757cc5c17f519/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b98bb4e15faed6a72fa9a0f27a6e973cb8e5e70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b98bb4e15faed6a72fa9a0f27a6e973cb8e5e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b98bb4e15faed6a72fa9a0f27a6e973cb8e5e70"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "d6be87f0742465bacb769c1644154f020cbded97", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482b620d208237366e9d052918757cc5c17f519/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482b620d208237366e9d052918757cc5c17f519/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9482b620d208237366e9d052918757cc5c17f519", "patch": "@@ -1,3 +1,9 @@\n+2015-06-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66341\n+\t* c-typeck.c (build_c_cast): Wrap VALUE into NON_LVALUE_EXPR if\n+\tit is a lvalue.\n+\n 2015-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* c-decl.c (warn_cxx_compat_finish_struct): New parameters code, record_loc."}, {"sha": "6b313f30b08f1788bd98e2e0844e390f4f7b70a6", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482b620d208237366e9d052918757cc5c17f519/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482b620d208237366e9d052918757cc5c17f519/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=9482b620d208237366e9d052918757cc5c17f519", "patch": "@@ -5195,7 +5195,7 @@ build_c_cast (location_t loc, tree type, tree expr)\n     }\n \n   /* Don't let a cast be an lvalue.  */\n-  if (value == expr)\n+  if (lvalue_p (value))\n     value = non_lvalue_loc (loc, value);\n \n   /* Don't allow the results of casting to floating-point or complex"}, {"sha": "3092acf1fa6da71f51f773f280746b2a734b08fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482b620d208237366e9d052918757cc5c17f519/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482b620d208237366e9d052918757cc5c17f519/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9482b620d208237366e9d052918757cc5c17f519", "patch": "@@ -1,3 +1,8 @@\n+2015-06-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66341\n+\t* gcc.dg/lvalue-8.c: New test.\n+\n 2015-06-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "04eeb71b6bca7548876c78bc8a614b16f4226db7", "filename": "gcc/testsuite/gcc.dg/lvalue-8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482b620d208237366e9d052918757cc5c17f519/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482b620d208237366e9d052918757cc5c17f519/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-8.c?ref=9482b620d208237366e9d052918757cc5c17f519", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/66341 */\n+/* { dg-do compile } */\n+\n+void\n+foo (int *p)\n+{\n+  p = 0;\n+  /* A cast does not yield an lvalue.  */\n+  (int *) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  /* A cast to a qualified type has the same effect as a cast\n+     to the unqualified version of the type.  */\n+  (int *const) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  (int *) (char *) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  (int *) (char *) (int *) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  (int *) (char *) (int *) (char *) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  (int *) (double *) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  (int *) (int *) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+  (int *) (int *const) p = 0; /* { dg-error \"lvalue required as left operand of assignment\" } */\n+}"}]}