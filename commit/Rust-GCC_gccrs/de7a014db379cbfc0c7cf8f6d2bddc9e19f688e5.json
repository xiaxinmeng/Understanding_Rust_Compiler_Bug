{"sha": "de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU3YTAxNGRiMzc5Y2JmYzBjN2NmOGY2ZDJiZGRjOWUxOWY2ODhlNQ==", "commit": {"author": {"name": "Sandro Tolaini", "email": "tolaini@libero.it", "date": "2006-09-21T23:47:30Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-09-21T23:47:30Z"}, "message": "os_dep.c: Port to Darwin/i386\n\n2006-09-21  Sandro Tolaini  <tolaini@libero.it>\n\n\t* os_dep.c: Port to Darwin/i386\n\t* darwin_stop_world.c: Likewise\n\t* include/private/gcconfig.h: Likewise\n\nFrom-SVN: r117126", "tree": {"sha": "a59b18d3ecba84a151dd5bfc21322ecb5bb4fd21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a59b18d3ecba84a151dd5bfc21322ecb5bb4fd21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/comments", "author": null, "committer": null, "parents": [{"sha": "b76d34e959674bb91653ca0fc86cdf9a4dabf075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76d34e959674bb91653ca0fc86cdf9a4dabf075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76d34e959674bb91653ca0fc86cdf9a4dabf075"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "84d47174ccf29e065f378eac89c0ed5ac7b60cc3", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "patch": "@@ -1,3 +1,9 @@\n+2006-09-21  Sandro Tolaini  <tolaini@libero.it>\n+\n+\t* os_dep.c: Port to Darwin/i386\n+\t* darwin_stop_world.c: Likewise\n+\t* include/private/gcconfig.h: Likewise\n+\t\n 2006-06-07  Petr Salinger  <Petr.Salinger@seznam.cz>\n \n \t* configure.ac: add support for GNU/kFreeBSD, accepted by upstream"}, {"sha": "a89f3f24ea03e8db7d2b175e7dc299f8cf4a3762", "filename": "boehm-gc/darwin_stop_world.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2Fdarwin_stop_world.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2Fdarwin_stop_world.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdarwin_stop_world.c?ref=de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "patch": "@@ -125,7 +125,18 @@ void GC_push_all_stacks() {\n \t\t\t     (natural_t*)&state,\n \t\t\t     &thread_state_count);\n \tif(r != KERN_SUCCESS) ABORT(\"thread_get_state failed\");\n-\t\n+\n+#if defined(I386)\n+\tlo = state.esp;\n+\n+\tGC_push_one(state.eax); \n+\tGC_push_one(state.ebx); \n+\tGC_push_one(state.ecx); \n+\tGC_push_one(state.edx); \n+\tGC_push_one(state.edi); \n+\tGC_push_one(state.esi); \n+\tGC_push_one(state.ebp); \n+#elif defined(POWERPC)\n \tlo = (void*)(state . THREAD_FLD (r1) - PPC_RED_ZONE_SIZE);\n         \n \tGC_push_one(state . THREAD_FLD (r0)); \n@@ -159,6 +170,9 @@ void GC_push_all_stacks() {\n \tGC_push_one(state . THREAD_FLD (r29)); \n \tGC_push_one(state . THREAD_FLD (r30)); \n \tGC_push_one(state . THREAD_FLD (r31));\n+#else\n+# error FIXME for non-x86 || ppc architectures\n+#endif\n       } /* p != me */\n       if(p->flags & MAIN_THREAD)\n \thi = GC_stackbottom;"}, {"sha": "26db82ee53760d63f4a525781392532ee9401d5b", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "patch": "@@ -304,7 +304,7 @@\n #    define mach_type_known\n #   elif defined(__i386__)\n #    define I386\n-     --> Not really supported, but at least we recognize it.\n+#    define mach_type_known\n #   endif\n # endif\n # if defined(NeXT) && defined(mc68000)\n@@ -1308,6 +1308,29 @@\n /* #     define MPROTECT_VDB  Not quite working yet? */\n #     define DYNAMIC_LOADING\n #   endif\n+#   ifdef DARWIN\n+#     define OS_TYPE \"DARWIN\"\n+#     define DARWIN_DONT_PARSE_STACK\n+#     define DYNAMIC_LOADING\n+      /* XXX: see get_end(3), get_etext() and get_end() should not be used.\n+        These aren't used when dyld support is enabled (it is by default) */\n+#     define DATASTART ((ptr_t) get_etext())\n+#     define DATAEND\t((ptr_t) get_end())\n+#     define STACKBOTTOM ((ptr_t) 0xc0000000)\n+#     define USE_MMAP\n+#     define USE_MMAP_ANON\n+#     define USE_ASM_PUSH_REGS\n+      /* This is potentially buggy. It needs more testing. See the comments in\n+        os_dep.c.  It relies on threads to track writes. */\n+#     ifdef GC_DARWIN_THREADS\n+/* #       define MPROTECT_VDB -- disabled for now.  May work for some apps. */\n+#     endif\n+#     include <unistd.h>\n+#     define GETPAGESIZE() getpagesize()\n+      /* There seems to be some issues with trylock hanging on darwin. This\n+         should be looked into some more */\n+#      define NO_PTHREAD_TRYLOCK\n+#   endif /* DARWIN */\n # endif\n \n # ifdef NS32K"}, {"sha": "98ab6be5356e58a74381c0d12fac255cc735d6cf", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=de7a014db379cbfc0c7cf8f6d2bddc9e19f688e5", "patch": "@@ -3802,6 +3802,10 @@ catch_exception_raise(\n         mach_msg_type_number_t exc_state_count = PPC_EXCEPTION_STATE64_COUNT;\n         ppc_exception_state64_t exc_state;\n #     endif\n+#   elif defined(I386)\n+        thread_state_flavor_t flavor = i386_EXCEPTION_STATE;\n+        mach_msg_type_number_t exc_state_count = i386_EXCEPTION_STATE_COUNT;\n+        i386_exception_state_t exc_state;\n #   else\n #\terror FIXME for non-ppc darwin\n #   endif\n@@ -3833,7 +3837,13 @@ catch_exception_raise(\n     }\n     \n     /* This is the address that caused the fault */\n+#if defined(POWERPC)\n     addr = (char*) exc_state.dar;\n+#elif defined (I386)\n+    addr = (char*) exc_state.faultvaddr;\n+#else\n+#   error FIXME for non POWERPC/I386\n+#endif\n         \n     if((HDR(addr)) == 0) {\n         /* Ugh... just like the SIGBUS problem above, it seems we get a bogus "}]}