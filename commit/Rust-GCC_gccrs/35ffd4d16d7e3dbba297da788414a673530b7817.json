{"sha": "35ffd4d16d7e3dbba297da788414a673530b7817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmZmQ0ZDE2ZDdlM2RiYmEyOTdkYTc4ODQxNGE2NzM1MzBiNzgxNw==", "commit": {"author": {"name": "xiezhiheng", "email": "xiezhiheng@huawei.com", "date": "2020-08-04T16:25:29Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-08-04T16:25:29Z"}, "message": "AArch64: Use FLOAT_MODE_P macro and add FLAG_AUTO_FP [PR94442]\n\nSince all FP intrinsics are set by FLAG_FP by default, but not all FP intrinsics\nraise FP exceptions or read FPCR register.  So we add a global flag FLAG_AUTO_FP\nto suppress the flag FLAG_FP.\n\n2020-08-04  Zhiheng Xie  <xiezhiheng@huawei.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_call_properties):\n\tUse FLOAT_MODE_P macro instead of enumerating all floating-point\n\tmodes and add global flag FLAG_AUTO_FP.", "tree": {"sha": "8ec44198f2df8d0e3202d962730c9a2b579cc471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec44198f2df8d0e3202d962730c9a2b579cc471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35ffd4d16d7e3dbba297da788414a673530b7817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ffd4d16d7e3dbba297da788414a673530b7817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ffd4d16d7e3dbba297da788414a673530b7817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ffd4d16d7e3dbba297da788414a673530b7817/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57dd9f3bfca8bb752c630431dc033c761e2ad382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dd9f3bfca8bb752c630431dc033c761e2ad382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57dd9f3bfca8bb752c630431dc033c761e2ad382"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "4f33dd936c7aa54c773cca2e1d779216506fbb44", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ffd4d16d7e3dbba297da788414a673530b7817/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ffd4d16d7e3dbba297da788414a673530b7817/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=35ffd4d16d7e3dbba297da788414a673530b7817", "patch": "@@ -125,6 +125,10 @@ const unsigned int FLAG_READ_MEMORY = 1U << 2;\n const unsigned int FLAG_PREFETCH_MEMORY = 1U << 3;\n const unsigned int FLAG_WRITE_MEMORY = 1U << 4;\n \n+/* Not all FP intrinsics raise FP exceptions or read FPCR register,\n+   use this flag to suppress it.  */\n+const unsigned int FLAG_AUTO_FP = 1U << 5;\n+\n const unsigned int FLAG_FP = FLAG_READ_FPCR | FLAG_RAISE_FP_EXCEPTIONS;\n const unsigned int FLAG_ALL = FLAG_READ_FPCR | FLAG_RAISE_FP_EXCEPTIONS\n   | FLAG_READ_MEMORY | FLAG_PREFETCH_MEMORY | FLAG_WRITE_MEMORY;\n@@ -900,27 +904,9 @@ static unsigned int\n aarch64_call_properties (aarch64_simd_builtin_datum *d)\n {\n   unsigned int flags = d->flags;\n-  switch (d->mode)\n-    {\n-    /* Floating-point.  */\n-    case E_BFmode:\n-    case E_V4BFmode:\n-    case E_V8BFmode:\n-    case E_HFmode:\n-    case E_V4HFmode:\n-    case E_V8HFmode:\n-    case E_SFmode:\n-    case E_V2SFmode:\n-    case E_V4SFmode:\n-    case E_DFmode:\n-    case E_V1DFmode:\n-    case E_V2DFmode:\n-      flags |= FLAG_FP;\n-      break;\n \n-    default:\n-      break;\n-    }\n+  if (!(flags & FLAG_AUTO_FP) && FLOAT_MODE_P (d->mode))\n+    flags |= FLAG_FP;\n \n   /* -fno-trapping-math means that we can assume any FP exceptions\n      are not user-visible.  */"}]}