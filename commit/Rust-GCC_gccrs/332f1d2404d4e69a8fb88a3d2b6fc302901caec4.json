{"sha": "332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyZjFkMjQwNGQ0ZTY5YThmYjg4YTNkMmI2ZmMzMDI5MDFjYWVjNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-07-20T09:37:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-07-20T09:37:25Z"}, "message": "re PR c++/28656 (duplicated null argument warning on memcpy())\n\n\tPR c++/28656\n\t* tree-vrp.c (nonnull_arg_p): Handle all nonnull attributes instead\n\tof just the first one.\n\n\t* c-common.c (check_function_nonnull): Handle multiple nonnull\n\tattributes properly.\n\n\t* c-c++-common/pr28656.c: New test.\n\nFrom-SVN: r189707", "tree": {"sha": "25252a03826e4bf84e9d1273eae3b049d63f7537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25252a03826e4bf84e9d1273eae3b049d63f7537"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c82efd91f3f8f1f957907fd7d902e26279239e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c82efd91f3f8f1f957907fd7d902e26279239e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c82efd91f3f8f1f957907fd7d902e26279239e9"}], "stats": {"total": 135, "additions": 100, "deletions": 35}, "files": [{"sha": "28f7722cc8381c2620cdc33e7341d6b25f3bca6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "patch": "@@ -1,3 +1,9 @@\n+2012-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/28656\n+\t* tree-vrp.c (nonnull_arg_p): Handle all nonnull attributes instead\n+\tof just the first one.\n+\n 2012-07-20  Richard Guenther  <rguenther@suse.de>\n \n \t* builtins.c (get_object_alignment_2): Correct offset handling"}, {"sha": "ddea75a00e1b38784492adc1d435f37ca6e5584f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "patch": "@@ -1,3 +1,9 @@\n+2012-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/28656\n+\t* c-common.c (check_function_nonnull): Handle multiple nonnull\n+\tattributes properly.\n+\n 2012-07-16  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c-gimplify.c: Include dumpfile.h instead of tree-dump.h."}, {"sha": "b72506b212f27f25c1145328f9945ad0088f7a3a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "patch": "@@ -8051,26 +8051,42 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n static void\n check_function_nonnull (tree attrs, int nargs, tree *argarray)\n {\n-  tree a, args;\n+  tree a;\n   int i;\n \n-  for (a = attrs; a; a = TREE_CHAIN (a))\n+  attrs = lookup_attribute (\"nonnull\", attrs);\n+  if (attrs == NULL_TREE)\n+    return;\n+\n+  a = attrs;\n+  /* See if any of the nonnull attributes has no arguments.  If so,\n+     then every pointer argument is checked (in which case the check\n+     for pointer type is done in check_nonnull_arg).  */\n+  if (TREE_VALUE (a) != NULL_TREE)\n+    do\n+      a = lookup_attribute (\"nonnull\", TREE_CHAIN (a));\n+    while (a != NULL_TREE && TREE_VALUE (a) != NULL_TREE);\n+\n+  if (a != NULL_TREE)\n+    for (i = 0; i < nargs; i++)\n+      check_function_arguments_recurse (check_nonnull_arg, NULL, argarray[i],\n+\t\t\t\t\ti + 1);\n+  else\n     {\n-      if (is_attribute_p (\"nonnull\", TREE_PURPOSE (a)))\n+      /* Walk the argument list.  If we encounter an argument number we\n+\t should check for non-null, do it.  */\n+      for (i = 0; i < nargs; i++)\n \t{\n-\t  args = TREE_VALUE (a);\n-\n-\t  /* Walk the argument list.  If we encounter an argument number we\n-\t     should check for non-null, do it.  If the attribute has no args,\n-\t     then every pointer argument is checked (in which case the check\n-\t     for pointer type is done in check_nonnull_arg).  */\n-\t  for (i = 0; i < nargs; i++)\n+\t  for (a = attrs; ; a = TREE_CHAIN (a))\n \t    {\n-\t      if (!args || nonnull_check_p (args, i + 1))\n-\t\tcheck_function_arguments_recurse (check_nonnull_arg, NULL,\n-\t\t\t\t\t\t  argarray[i],\n-\t\t\t\t\t\t  i + 1);\n+\t      a = lookup_attribute (\"nonnull\", a);\n+\t      if (a == NULL_TREE || nonnull_check_p (TREE_VALUE (a), i + 1))\n+\t\tbreak;\n \t    }\n+\n+\t  if (a != NULL_TREE)\n+\t    check_function_arguments_recurse (check_nonnull_arg, NULL,\n+\t\t\t\t\t      argarray[i], i + 1);\n \t}\n     }\n }"}, {"sha": "f02f16ededfb95f7b829e4a270f7f64d26b4fb64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "patch": "@@ -1,3 +1,8 @@\n+2012-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/28656\n+\t* c-c++-common/pr28656.c: New test.\n+\n 2012-07-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54026"}, {"sha": "a0c2339f5934ea607ac1e6ec706a20c95c823778", "filename": "gcc/testsuite/c-c++-common/pr28656.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c?ref=332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "patch": "@@ -0,0 +1,29 @@\n+/* PR c++/28656 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wnonnull\" } */\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+extern void *memcpy (void *__restrict, const void *__restrict, __SIZE_TYPE__)\n+  __attribute__((nonnull (1), nonnull (2), nonnull (1, 2), nonnull));\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+extern void bar (void *p1, void *p2, void *p3, void *p4, void *p5)\n+  __attribute__((nonnull (1), nonnull (1, 3), nonnull (3, 5), nonnull (4)));\n+\n+void\n+foo (void)\n+{\n+  memcpy (0, 0, 0);\n+  bar (0, 0, 0, 0, 0);\n+}\n+\n+/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } 20 } */\n+/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 2\" \"\" { target *-*-* } 20 } */\n+/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } 21 } */\n+/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 3\" \"\" { target *-*-* } 21 } */\n+/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 4\" \"\" { target *-*-* } 21 } */\n+/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 5\" \"\" { target *-*-* } 21 } */"}, {"sha": "68c449e0acca8cecc8100355a55cf9a658eb993f", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332f1d2404d4e69a8fb88a3d2b6fc302901caec4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=332f1d2404d4e69a8fb88a3d2b6fc302901caec4", "patch": "@@ -353,32 +353,35 @@ nonnull_arg_p (const_tree arg)\n     return true;\n \n   fntype = TREE_TYPE (current_function_decl);\n-  attrs = lookup_attribute (\"nonnull\", TYPE_ATTRIBUTES (fntype));\n+  for (attrs = TYPE_ATTRIBUTES (fntype); attrs; attrs = TREE_CHAIN (attrs))\n+    {\n+      attrs = lookup_attribute (\"nonnull\", attrs);\n \n-  /* If \"nonnull\" wasn't specified, we know nothing about the argument.  */\n-  if (attrs == NULL_TREE)\n-    return false;\n+      /* If \"nonnull\" wasn't specified, we know nothing about the argument.  */\n+      if (attrs == NULL_TREE)\n+\treturn false;\n \n-  /* If \"nonnull\" applies to all the arguments, then ARG is non-null.  */\n-  if (TREE_VALUE (attrs) == NULL_TREE)\n-    return true;\n+      /* If \"nonnull\" applies to all the arguments, then ARG is non-null.  */\n+      if (TREE_VALUE (attrs) == NULL_TREE)\n+\treturn true;\n \n-  /* Get the position number for ARG in the function signature.  */\n-  for (arg_num = 1, t = DECL_ARGUMENTS (current_function_decl);\n-       t;\n-       t = DECL_CHAIN (t), arg_num++)\n-    {\n-      if (t == arg)\n-\tbreak;\n-    }\n+      /* Get the position number for ARG in the function signature.  */\n+      for (arg_num = 1, t = DECL_ARGUMENTS (current_function_decl);\n+\t   t;\n+\t   t = DECL_CHAIN (t), arg_num++)\n+\t{\n+\t  if (t == arg)\n+\t    break;\n+\t}\n \n-  gcc_assert (t == arg);\n+      gcc_assert (t == arg);\n \n-  /* Now see if ARG_NUM is mentioned in the nonnull list.  */\n-  for (t = TREE_VALUE (attrs); t; t = TREE_CHAIN (t))\n-    {\n-      if (compare_tree_int (TREE_VALUE (t), arg_num) == 0)\n-\treturn true;\n+      /* Now see if ARG_NUM is mentioned in the nonnull list.  */\n+      for (t = TREE_VALUE (attrs); t; t = TREE_CHAIN (t))\n+\t{\n+\t  if (compare_tree_int (TREE_VALUE (t), arg_num) == 0)\n+\t    return true;\n+\t}\n     }\n \n   return false;"}]}