{"sha": "e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2NTVkMTVkOWEyYWU1NDg0NGNkMWFkY2JhMjZkZGUzYmE2OWNiOQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-05-01T11:37:39Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-05-01T11:37:39Z"}, "message": "re PR middle-end/15054 (Bad code due to overlapping stack temporaries)\n\n\tPR middle-end/15054\n\t* expr.c (expand_expr_real): Do not call preserve_temp_slots\n\ton a TARGET_EXPR temp.\n\t* function.c (assign_stack_temp_for_type): Set 'keep' flag for\n\tTARGET_EXPR temp slots.\n\n\tPR middle-end/15054\n\t* g++.dg/opt/pr15054.C: New test.\n\nFrom-SVN: r81384", "tree": {"sha": "7ba1e7f7f32be96437efdde842245355194dc4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ba1e7f7f32be96437efdde842245355194dc4f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/comments", "author": null, "committer": null, "parents": [{"sha": "77306e3e64b98c52415f407f0451d15e429a2a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77306e3e64b98c52415f407f0451d15e429a2a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77306e3e64b98c52415f407f0451d15e429a2a30"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "85f3b6c71067ec4689ae4ba2a89336026ba6f001", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "patch": "@@ -1,3 +1,11 @@\n+2004-05-01  Ulrich Weigand  <uweigand@de.ibm.com>\n+\t\n+\tPR middle-end/15054\n+\t* expr.c (expand_expr_real): Do not call preserve_temp_slots \n+\ton a TARGET_EXPR temp.\n+\t* function.c (assign_stack_temp_for_type): Set 'keep' flag for\n+\tTARGET_EXPR temp slots.\n+\n 2004-05-01  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* simplify-rtx.c (simplify_ternary_operation): When"}, {"sha": "c19741b1910defe18385c7cfbf452fa636f02536", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "patch": "@@ -8537,8 +8537,6 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t    else\n \t      {\n \t\ttarget = assign_temp (type, 2, 0, 1);\n-\t\t/* All temp slots at this level must not conflict.  */\n-\t\tpreserve_temp_slots (target);\n \t\tSET_DECL_RTL (slot, target);\n \t\tif (TREE_ADDRESSABLE (slot))\n \t\t  put_var_into_stack (slot, /*rescan=*/false);"}, {"sha": "8eeebfbe22d047069cb315d3b677bc7141284d37", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "patch": "@@ -780,7 +780,7 @@ assign_stack_temp_for_type (enum machine_mode mode, HOST_WIDE_INT size, int keep\n   if (keep == 2)\n     {\n       p->level = target_temp_slot_level;\n-      p->keep = 0;\n+      p->keep = 1;\n     }\n   else if (keep == 3)\n     {"}, {"sha": "596e8ed41907cd6c5b4508ad51736a61b670c179", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "patch": "@@ -1,3 +1,8 @@\n+2004-05-01  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR middle-end/15054\n+\t* g++.dg/opt/pr15054.C: New test.\n+\n 2004-04-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-rounding-1.c: New test."}, {"sha": "cfc48cf2498946d2d1bdf053b9bcce5996e40c36", "filename": "gcc/testsuite/g++.dg/opt/pr15054.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr15054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2655d15d9a2ae54844cd1adcba26dde3ba69cb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr15054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr15054.C?ref=e2655d15d9a2ae54844cd1adcba26dde3ba69cb9", "patch": "@@ -0,0 +1,36 @@\n+// PR middle-end/15054\n+// This used to abort due to overlapping stack temporaries.\n+\n+// { dg-do run }\n+// { dg-options \"-O\" }\n+\n+extern \"C\" void abort (void);\n+\n+struct pointer\n+{\n+  void* ptr;\n+\n+  pointer(void* x = 0) : ptr(x) {}\n+  pointer(const pointer& x) : ptr(x.ptr) {}\n+};\n+\n+struct element\n+{\n+  int canary;\n+\n+  element() : canary(123) { }\n+  ~element() { pointer(); if (canary != 123) abort (); }\n+};\n+\n+inline pointer\n+insert(const element& x)\n+{\n+  return pointer(new element(x));\n+}\n+\n+int\n+main (void)\n+{\n+  insert(element());\n+  return 0;\n+}"}]}