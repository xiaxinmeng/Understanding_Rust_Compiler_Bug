{"sha": "58be5bf69d186cf9d13975fb70a66db8bd00ff92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThiZTViZjY5ZDE4NmNmOWQxMzk3NWZiNzBhNjZkYjhiZDAwZmY5Mg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-07T15:28:06Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-07T15:28:06Z"}, "message": "fix for targets with different long and ptr sizes.\n\n       * objc.dg/proto-lossage-4.m: Use intptr_t instead of long type.\n\n\nCo-Authored-By: Kai Tietz <kai.tietz@onevision.com>\n\nFrom-SVN: r165121", "tree": {"sha": "dacafeea0558c4769cedda9ffa0b3402959ea0cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dacafeea0558c4769cedda9ffa0b3402959ea0cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58be5bf69d186cf9d13975fb70a66db8bd00ff92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58be5bf69d186cf9d13975fb70a66db8bd00ff92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58be5bf69d186cf9d13975fb70a66db8bd00ff92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58be5bf69d186cf9d13975fb70a66db8bd00ff92/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa45f8d7f24c25b6bf8c2f478611f160cc7266f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa45f8d7f24c25b6bf8c2f478611f160cc7266f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa45f8d7f24c25b6bf8c2f478611f160cc7266f8"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "c78a2f315835d0c6709a520705635d64d0261d4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58be5bf69d186cf9d13975fb70a66db8bd00ff92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58be5bf69d186cf9d13975fb70a66db8bd00ff92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58be5bf69d186cf9d13975fb70a66db8bd00ff92", "patch": "@@ -1,3 +1,8 @@\n+2010-10-07  Iain Sandoe  <iains@gcc.gnu.org>\n+\t    Kai Tietz  <kai.tietz@onevision.com>\n+\n+       * objc.dg/proto-lossage-4.m: Use intptr_t instead of long type.\n+\n 2010-10-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45732"}, {"sha": "9800d493c78a308b78fd51f74b84bf49210da21e", "filename": "gcc/testsuite/objc.dg/proto-lossage-4.m", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58be5bf69d186cf9d13975fb70a66db8bd00ff92/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58be5bf69d186cf9d13975fb70a66db8bd00ff92/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m?ref=58be5bf69d186cf9d13975fb70a66db8bd00ff92", "patch": "@@ -3,44 +3,46 @@\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do compile } */\n \n+#include <stdint.h>\n+\n /* One-line substitute for objc/objc.h */\n typedef struct objc_object { struct objc_class *class_pointer; } *id;\n \n @protocol Proto\n-- (long)someValue;\n+- (intptr_t)someValue;\n @end\n \n @interface Obj\n-- (long)anotherValue;\n+- (intptr_t)anotherValue;\n @end\n \n long foo(void) {\n-  long receiver = 2;\n+  intptr_t receiver = 2;\n   Obj *objrcvr;\n   Obj <Proto> *objrcvr2;\n \n   /* NB: Since 'receiver' is an invalid ObjC message receiver, the compiler\n      should warn but then search for methods as if we were messaging 'id'.  */\n \n-  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n-  receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n+  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .intptr_t.\" } */\n+  receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .intptr_t.\" } */\n \n   receiver += [(Obj *)receiver someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 28 } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 30 } */\n \n   receiver += [(Obj *)receiver anotherValue];\n   receiver += [(Obj <Proto> *)receiver someValue];\n   receiver += [(Obj <Proto> *)receiver anotherValue];\n   receiver += [objrcvr someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 34 } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 36 } */\n \n   receiver += [objrcvr anotherValue];\n   receiver += [(Obj <Proto> *)objrcvr someValue];\n   receiver += [(Obj <Proto> *)objrcvr anotherValue];\n   receiver += [objrcvr2 someValue];\n   receiver += [objrcvr2 anotherValue];\n   receiver += [(Obj *)objrcvr2 someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 42 } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 44 } */\n \n   receiver += [(Obj *)objrcvr2 anotherValue];\n "}]}