{"sha": "4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgyOGE3M2U1NTE2MzNjMTRlNmFlOWUwYjJmZTU2YzZiYmRkYzBhNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-03T03:19:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-03T03:19:12Z"}, "message": "* bitmap.h, dbxout.c, tree-mudflap.c: Fix comment formatting.\n\nFrom-SVN: r90019", "tree": {"sha": "ae8fa890d609128291d6fea611d508890e65babd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae8fa890d609128291d6fea611d508890e65babd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/comments", "author": null, "committer": null, "parents": [{"sha": "5cc781508e02593002ea1198645539c3fc2f87bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc781508e02593002ea1198645539c3fc2f87bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc781508e02593002ea1198645539c3fc2f87bd"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "b2ca7327e35b43b5dc309bce453ac1bce7d91f60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "patch": "@@ -1,3 +1,7 @@\n+2004-11-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* bitmap.h, dbxout.c, tree-mudflap.c: Fix comment formatting.\n+\n 2004-11-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-cfg.c (find_taken_edge): Abort if we are given a"}, {"sha": "acabca8ab259a46e7dd42548c99d3293d281dbe8", "filename": "gcc/bitmap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "patch": "@@ -111,7 +111,7 @@ extern int bitmap_operation (bitmap, bitmap, bitmap, enum bitmap_bits);\n #define bitmap_xor_into(DST_SRC,B) (void)bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_XOR)\n \n /* `or' into one bitmap the `and' of a second bitmap witih the complement\n-   of a third. Return nonzero if the bitmap changes. */\n+   of a third. Return nonzero if the bitmap changes.  */\n extern bool bitmap_ior_and_compl_into (bitmap, bitmap, bitmap);\n extern bool bitmap_ior_and_compl (bitmap, bitmap, bitmap, bitmap);\n "}, {"sha": "e9ad8d3bf79ef4716ea0484b6251c4c55706ad8d", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "patch": "@@ -3091,7 +3091,7 @@ dbxout_parms (tree parms)\n \t       That is, its address was passed in a register.\n \t       Output it as if it lived in that register.\n \t       The debugger will know from the type\n-\t       that it was actually passed by invisible reference. */\n+\t       that it was actually passed by invisible reference.  */\n \n \t    code = DBX_REGPARM_STABS_CODE;\n  "}, {"sha": "f59732f146b2fc7b2d8273dcdb45aef2a45b2bb1", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=4828a73e551633c14e6ae9e0b2fe56c6bbddc0a7", "patch": "@@ -379,7 +379,7 @@ mudflap_init (void)\n   mf_cache_mask_decl = mf_make_builtin (VAR_DECL, \"__mf_lc_mask\",\n                                         mf_uintptr_type);\n   /* Don't process these in mudflap_enqueue_decl, should they come by\n-     there for some reason. */\n+     there for some reason.  */\n   mf_mark (mf_cache_array_decl);\n   mf_mark (mf_cache_shift_decl);\n   mf_mark (mf_cache_mask_decl);\n@@ -788,7 +788,7 @@ mf_xform_derefs_1 (block_stmt_iterator *iter, tree *tp,\n                 /* Don't instrument this access if the underlying\n                    variable is not \"eligible\".  This test matches\n                    those arrays that have only known-valid indexes,\n-                   and thus are not labeled TREE_ADDRESSABLE. */\n+                   and thus are not labeled TREE_ADDRESSABLE.  */\n                 if (! mf_decl_eligible_p (var))\n                   return;\n                 else"}]}