{"sha": "77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjYWNlZTQxNzMyZjYwYWNjOTZhNWFhZjE0ODhhNmI0ZWU3ZjhhYw==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@aim.com", "date": "2008-06-18T21:41:13Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2008-06-18T21:41:13Z"}, "message": "limits-fndefn.c: Skip for AVR.\n\n* gcc.c-torture/compile/limits-fndefn.c: Skip for AVR.\n* gcc.dg/builtins-config.h: Use standard independent __AVR__ symbol.\n* gcc.dg/cdce1.c: Skip for AVR.\n* gcc.dg/cdce2.c: Ditto.\n* gcc.dg/fold-bitand-1.c: Ignore warnings such as alignment.\n* gcc.dg/fold-eqandshift-3.c: Use long on AVR.\n* gcc.dg/fold-overflow-1.c: Skip for AVR.\n* gcc.dg/multiple-overflow-warn-3.c: Use target independent macro for ms bit position.\n* gcc.dg/pch/struct-1.c: Allow for target without 32 bit int.\n* gcc.dg/tree-ssa/pr33920.c: Add warning check for AVR.\n* gcc.dg/ucnid-5.c: Skip for AVR.\n* gcc.dg/Wconversion-5.c: Mark warning xfail for AVR target.\n* gcc.dg/Wconversion-real-integer.c: Skip for AVR.\n* gcc.dg/Wconversion-real.c: Ditto.\n* gcc.dg/wtr-conversion-1.c: Add warning test for AVR.\n* gcc.dg/utf-cvt.c: Skip tests and mark excess xfail for AVR.\n* gcc.dg/Wtype-limits-Wextra.c: Ditto.\n* gcc.dg/Wtype-limits.c: Ditto.\n\nFrom-SVN: r136918", "tree": {"sha": "d135d9d6dc54d40b5ebf53b3ba679174d0f7a06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d135d9d6dc54d40b5ebf53b3ba679174d0f7a06c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/comments", "author": null, "committer": null, "parents": [{"sha": "0cf7fb1fd8313ba8f792f10b017c5f0d87b89133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf7fb1fd8313ba8f792f10b017c5f0d87b89133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf7fb1fd8313ba8f792f10b017c5f0d87b89133"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "f9bd049d14d2b0afe25e0f65ab8021f91c0bf71e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,3 +1,24 @@\n+2008-06-18  Andy Hutchinson  <hutchinsonandy@aim.com>\n+\n+\t* gcc.c-torture/compile/limits-fndefn.c: Skip for AVR.\n+\t* gcc.dg/builtins-config.h: Use standard independent __AVR__ symbol.\n+\t* gcc.dg/cdce1.c: Skip for AVR.\n+\t* gcc.dg/cdce2.c: Ditto.\n+\t* gcc.dg/fold-bitand-1.c: Ignore warnings such as alignment.\n+\t* gcc.dg/fold-eqandshift-3.c: Use long on AVR.\n+\t* gcc.dg/fold-overflow-1.c: Skip for AVR.\n+\t* gcc.dg/multiple-overflow-warn-3.c: Use target independent macro for ms bit position.\n+\t* gcc.dg/pch/struct-1.c: Allow for target without 32 bit int.\n+\t* gcc.dg/tree-ssa/pr33920.c: Add warning check for AVR.\n+\t* gcc.dg/ucnid-5.c: Skip for AVR.\n+\t* gcc.dg/Wconversion-5.c: Mark warning xfail for AVR target.\n+\t* gcc.dg/Wconversion-real-integer.c: Skip for AVR.\n+\t* gcc.dg/Wconversion-real.c: Ditto.\n+\t* gcc.dg/wtr-conversion-1.c: Add warning test for AVR.\n+\t* gcc.dg/utf-cvt.c: Skip tests and mark excess xfail for AVR.\n+\t* gcc.dg/Wtype-limits-Wextra.c: Ditto.\n+\t* gcc.dg/Wtype-limits.c: Ditto. \n+   \n 2008-06-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/dfp/convert-bfp-6.c, gcc.dg/dfp/convert-bfp-9.c: XFAIL"}, {"sha": "0c5a2f5e774323fb30b21e9a96a76aa94fecd9ad", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-fndefn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-skip-if \"too complex for avr\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n #define LIM1(x) x##0, x##1, x##2, x##3, x##4, x##5, x##6, x##7, x##8, x##9,\n #define LIM2(x) LIM1(x##0) LIM1(x##1) LIM1(x##2) LIM1(x##3) LIM1(x##4) \\\n \t\tLIM1(x##5) LIM1(x##6) LIM1(x##7) LIM1(x##8) LIM1(x##9)"}, {"sha": "2b0884525f48d8a3bd5da4c96d44bfa5601a879f", "filename": "gcc/testsuite/gcc.dg/Wconversion-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -19,7 +19,7 @@ void test1 (void)\n   unsigned char f = (int) uc;\n   signed char g = (int) sc;\n   unsigned char h = (unsigned int) (short int) uc;\n-  signed char i = (int) (unsigned short int) sc;\t/* { dg-warning \"may alter its value\" } */\n+  signed char i = (int) (unsigned short int) sc;\t/* { dg-warning \"may alter its value\" \"\" { xfail avr-*-* } } */\n   unsigned char j = (unsigned int) (short int) us;\t/* { dg-warning \"may alter its value\" } */\n   signed char k = (int) (unsigned short int) ss;\t/* { dg-warning \"may alter its value\" } */\n }"}, {"sha": "1c03ba487e35ddb832fc54b4254d4f0152dee5d5", "filename": "gcc/testsuite/gcc.dg/Wconversion-real-integer.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -2,6 +2,7 @@\n    integers.  */\n \n /* { dg-do compile }\n+/* { dg-skip-if \"doubles are floats,ints are 16bits\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=c99 -Wconversion\" } */\n \n #include <limits.h>\n@@ -70,3 +71,4 @@ void h (void)\n }\n \n \n+"}, {"sha": "06396fba33c8022357616c937b43f63e91d2d818", "filename": "gcc/testsuite/gcc.dg/Wconversion-real.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,6 +1,7 @@\n /* Test for diagnostics for Wconversion for floating-point.  */\n \n /* { dg-do compile } */\n+/* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=c99 -Wconversion\" } */\n \n float  vfloat;"}, {"sha": "79fbbd00f4429e7121585da323a6300eca684dbc", "filename": "gcc/testsuite/gcc.dg/Wtype-limits-Wextra.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,8 +1,8 @@\n /* Test that -Wtype-limits is enabled by -Wextra */\n /* { dg-do compile } */\n+/* { dg-excess-errors \"short=int\" { target { avr-*-* } } }  */\n /* { dg-options \"-Wextra\" } */\n \n-\n void a (unsigned char x)\n {\n   if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n@@ -22,10 +22,10 @@ void a (unsigned char x)\n \n void b (unsigned short x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n }\n \n void c (unsigned int x)\n@@ -64,3 +64,4 @@ int test (int x)\n     return 0;\n }\n \n+"}, {"sha": "5a4605a08d6c393cd75228fd05e1c5e997a99eea", "filename": "gcc/testsuite/gcc.dg/Wtype-limits.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-excess-errors \"short=int\" { target { avr-*-* } } }  */\n /* { dg-options \"-Wtype-limits\" } */\n \n \n-\n void a (unsigned char x)\n {\n   if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n@@ -22,10 +22,10 @@ void a (unsigned char x)\n \n void b (unsigned short x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n+  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! \"avr-*-*\" } } } */\n }\n \n void c (unsigned int x)\n@@ -64,3 +64,4 @@ int test (int x)\n     return 0;\n }\n \n+"}, {"sha": "7e375b8d6931e52cc6b269f036739f9f07a865b9", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -13,7 +13,7 @@\n /* PA HP-UX doesn't have the entire C99 runtime.  */\n #elif defined(__sgi)\n /* Irix6 doesn't have the entire C99 runtime.  */\n-#elif defined(AVR)\n+#elif defined(__AVR__)\n /* AVR doesn't have the entire C99 runtime.  */\n #elif defined(__FreeBSD__) && (__FreeBSD__ < 5)\n /* FreeBSD before version 5 doesn't have the entire C99 runtime. */"}, {"sha": "61b19c9065c43112eb69f2e1ee58c952b7f72625", "filename": "gcc/testsuite/gcc.dg/cdce1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do  run  } */\n+/* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n /* { dg-final { scan-tree-dump  \"cdce1.c:16: note: function call is shrink-wrapped into error conditions\\.\"  \"cdce\" } } */\n /* { dg-final { cleanup-tree-dump \"cdce\" } } */\n \n- \n #include <stdlib.h>\n #include <math.h>\n #include <errno.h>"}, {"sha": "a461ce7ac3088e45e384f4cf6c636626ee3dff0c", "filename": "gcc/testsuite/gcc.dg/cdce2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do  run  } */\n+/* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n /* { dg-final { scan-tree-dump  \"cdce2.c:16: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n /* { dg-final { cleanup-tree-dump \"cdce\" } } */\n  \n-\n #include <stdlib.h>\n #include <math.h>\n #include <errno.h>"}, {"sha": "f490b153b2d73c6ea5708de0ecf6d6eac9c8f0b7", "filename": "gcc/testsuite/gcc.dg/fold-bitand-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-1.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,11 +1,10 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-original\" } */\n+/* { dg-options \"-w -fdump-tree-original\" } */\n \n char c1 __attribute__ ((aligned (1)));\n char c2 __attribute__ ((aligned (2)));\n char c4 __attribute__ ((aligned (4)));\n-char c8 __attribute__ ((aligned (8)));\n-\n+char c8 __attribute__ ((aligned (8))); \n unsigned f1(void)\n {\n   return 3 & (__SIZE_TYPE__)&c1;"}, {"sha": "5ed744ab536209913def588c601dbf7d2e9e0e57", "filename": "gcc/testsuite/gcc.dg/fold-eqandshift-3.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-3.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -3,14 +3,22 @@\n /* { dg-options \"-O2 -fdump-tree-original\" } */\n \n void foo (void);\n-\n+#if(__SIZEOF_INT__ >= 4) \n int test1 (int a)\n+#else\n+int test1 (long a)\n+#endif\n+\n {\n   if ((a >> 3) & 134217728)\n     foo ();\n }\n \n+#if(__SIZEOF_INT__ >= 4) \n int test2 (unsigned int b)\n+#else\n+int test2 (unsigned long b)\n+#endif\n {\n   if ((b >> 3) & 134217728)\n     foo ();"}, {"sha": "e2b731b735aab83164575cf71b445b286b72c3bc", "filename": "gcc/testsuite/gcc.dg/fold-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,5 +1,5 @@\n /* { dg-compile } */\n-/* { dg-skip-if \"consts are shorts, not longs\" { \"m32c-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"consts are shorts, not longs\" { \"m32c-*-*\" \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-O -ftrapping-math\" } */\n \n /* There should be exactly 2 +Inf in the assembly file.  */"}, {"sha": "da19de508d41ce9fbf742be0b51f0bcf07fc530b", "filename": "gcc/testsuite/gcc.dg/multiple-overflow-warn-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-3.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -5,8 +5,9 @@\n short int\n g (void)\n {\n-  short int wc = ((short int)1 << 31) - 1; /* { dg-bogus \"overflow .* overflow\" } */\n+  short int wc = ((short int)1 << (8 * __SIZEOF_INT__ - 1)) - 1; /* { dg-bogus \"overflow .* overflow\" } */\n   /* { dg-warning \"overflow\" \"\" { target *-*-* } 8 } */\n   return wc;\n }\n \n+"}, {"sha": "9559c07e9806a7e83432b4593564ab04a0e84698", "filename": "gcc/testsuite/gcc.dg/pch/struct-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstruct-1.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-require-effective-target int32plus } */\n #include \"struct-1.h\"\n \n struct ChainSearchRecord {\n@@ -7,6 +6,11 @@ struct ChainSearchRecord {\n typedef struct ChainSearchRecord ChainSearchRecord;\n void foo (ChainSearchPtr s)\n {\n+#if(__SIZEOF_INT__ >= 4)\t\n   s->identity = 0x6a73616d;\n+#else\n+   s->identity = 0x616d;\n+#endif\n }\n \n+"}, {"sha": "55e75d48e2b08d8e5d79853185e03d2a755a3e13", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33920.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -29,7 +29,7 @@ void init_code ()\n   object V658;\n \n T1240:\n-  if (V648 >= (long)V651)\n+if (V648 >= (long)V651) /* { dg-warning \"cast from pointer to integer of different size\" \"\" { target { \"avr-*-*\" } } } */\n     goto T1243;\n   V653 = ((char *) V654->v.v_self)[V648];\n   V659 = (object) V654 + V653;"}, {"sha": "aea57ef068242836219c54d7d06320a51f50a173", "filename": "gcc/testsuite/gcc.dg/ucnid-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-xfail-if \"\" { \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No dollar in identfiers\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=c99 -fdollars-in-identifiers -fextended-identifiers\" } */\n void abort (void);\n "}, {"sha": "5c39644f9175d179edbea9b2cb49100fc1af434b", "filename": "gcc/testsuite/gcc.dg/utf-cvt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Futf-cvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Futf-cvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-cvt.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Test the char16_t and char32_t promotion rules. */\n /* { dg-do compile } */\n+/* { dg-excess-errors \"short and int are 16bit\" { target { \"avr-*-*\" } } } */\n /* { dg-options \"-std=gnu99 -Wall -Wconversion -Wsign-conversion\" } */\n \n typedef short unsigned int\tchar16_t;\n@@ -43,9 +44,9 @@ void m (char16_t c0, char32_t c1)\n     f_c (c1);\t/* { dg-warning \"alter its value\" } */\n     fsc (c1);\t/* { dg-warning \"alter its value\" } */\n     fuc (c1);\t/* { dg-warning \"alter its value\" } */\n-    f_s (c1);\t/* { dg-warning \"alter its value\" } */\n-    fss (c1);\t/* { dg-warning \"alter its value\" } */\n-    fus (c1);\t/* { dg-warning \"alter its value\" } */\n+    f_s (c1);\t/* { dg-warning \"alter its value\" \"\" { target { ! \"avr-*-*\" } } } */\n+    fss (c1);\t/* { dg-warning \"alter its value\" \"\" { target { ! \"avr-*-*\" } } } */\n+    fus (c1);\t/* { dg-warning \"alter its value\" \"\" { target { ! \"avr-*-*\" } } } */\n     f_i (c1);\t/* { dg-warning \"change the sign\" } */\n     fsi (c1);\t/* { dg-warning \"change the sign\" } */\n     fui (c1);"}, {"sha": "72094c2184034419140ed6ad2ff0a3b56b0e20ba", "filename": "gcc/testsuite/gcc.dg/wtr-conversion-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cacee41732f60acc96a5aaf1488a6b4ee7f8ac/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c?ref=77cacee41732f60acc96a5aaf1488a6b4ee7f8ac", "patch": "@@ -28,9 +28,9 @@ testfunc1 ()\n   foo_f (cd); /* { dg-warning \"as floating rather than complex\" \"prototype conversion warning\" } */\n \n   foo_ld (i); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n-  foo_ld (f);\n-  foo_ld (ld);\n-  foo_ld (cd); /* { dg-warning \"as floating rather than complex\" \"prototype conversion warning\" } */\n+  foo_ld (f); /* { dg-warning \"as 'float' rather than 'double'\" \"small double\" { target { \"avr-*-*\" } } } */\n+  foo_ld (ld);/* { dg-warning \"as 'float' rather than 'double'\" \"small long double\" { target { \"avr-*-*\" } } } */\n+  foo_ld (cd);/* { dg-warning \"as floating rather than complex\" \"prototype conversion warning\" } */\n \n   foo_cd (i); /* { dg-warning \"as complex rather than integer\" \"prototype conversion warning\" } */\n   foo_cd (f); /* { dg-warning \"as complex rather than floating\" \"prototype conversion warning\" } */"}]}