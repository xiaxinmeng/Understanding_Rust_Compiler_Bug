{"sha": "4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxY2JjZWUzZTE3MjVjNzc5NmFkOGM1NWE4NGE3YTk1YWI3Nzg3MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-07-28T08:53:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-07-28T08:53:57Z"}, "message": "call.c (build_op_delete_call, [...]): Use Use DECL_SOURCE_LOCATION and \"%qD\" in inform and pedwarn instead of \"%q+D\".\n\n2015-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* call.c (build_op_delete_call, convert_like_real, build_over_call):\n\tUse Use DECL_SOURCE_LOCATION and \"%qD\" in inform and pedwarn instead\n\tof \"%q+D\".\n\t* constexpr.c (explain_invalid_constexpr_fn): Likewise.\n\t* decl.c (duplicate_decls): Likewise for warning/warning_at.\n\t* except.c (maybe_noexcept_warning): Likewise.\n\t* friend.c (make_friend_class): Likewise for inform.\n\t* mangle.c (mangle_decl): Likewise for warning/warning_at.\n\t* method.c (process_subob_fn, walk_field_subobs,\n\tmaybe_explain_implicit_delete): Likewise for inform.\n\t* parser.c (cp_parser_lambda_introducer): Likewise.\n\t* pt.c (check_specialization_namespace,\n\tmaybe_process_partial_specialization): Likewise for permerror.\n\t(redeclare_class_template): Likewise for inform_n.\n\t(coerce_template_parms, tsubst_copy_and_build): Likewise for inform.\n\t* search.c (check_final_overrider): Likewise.\n\t* semantics.c (process_outer_var_ref): Likewise.\n\nFrom-SVN: r226308", "tree": {"sha": "2987b10cfbacbefc9e2d2add7920cf04f3aff46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2987b10cfbacbefc9e2d2add7920cf04f3aff46a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/comments", "author": null, "committer": null, "parents": [{"sha": "f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87a37c6893dc51f4c3e6fbddfcf453bd83c9215"}], "stats": {"total": 135, "additions": 88, "deletions": 47}, "files": [{"sha": "0fa0926cd5ce60e8d0e558d90ddfff8ee282b871", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -1,3 +1,23 @@\n+2015-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* call.c (build_op_delete_call, convert_like_real, build_over_call):\n+\tUse Use DECL_SOURCE_LOCATION and \"%qD\" in inform and pedwarn instead\n+\tof \"%q+D\".\n+\t* constexpr.c (explain_invalid_constexpr_fn): Likewise.\n+\t* decl.c (duplicate_decls): Likewise for warning/warning_at.\n+\t* except.c (maybe_noexcept_warning): Likewise.\n+\t* friend.c (make_friend_class): Likewise for inform.\n+\t* mangle.c (mangle_decl): Likewise for warning/warning_at.\n+\t* method.c (process_subob_fn, walk_field_subobs,\n+\tmaybe_explain_implicit_delete): Likewise for inform.\n+\t* parser.c (cp_parser_lambda_introducer): Likewise.\n+\t* pt.c (check_specialization_namespace,\n+\tmaybe_process_partial_specialization): Likewise for permerror.\n+\t(redeclare_class_template): Likewise for inform_n.\n+\t(coerce_template_parms, tsubst_copy_and_build): Likewise for inform.\n+\t* search.c (check_final_overrider): Likewise.\n+\t* semantics.c (process_outer_var_ref): Likewise.\n+\n 2015-07-27  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_eval_call_expression): Don't add this call to"}, {"sha": "3b0fd692e9fa494a60125391a90c78223f8a57fd", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -5843,7 +5843,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t    = G_(\"exception cleanup for this placement new selects \"\n \t\t \"non-placement operator delete\");\n \t  const char *msg2\n-\t    = G_(\"%q+D is a usual (non-placement) deallocation \"\n+\t    = G_(\"%qD is a usual (non-placement) deallocation \"\n \t\t \"function in C++14 (or with -fsized-deallocation)\");\n \n \t  /* But if the class has an operator delete (void *), then that is\n@@ -5865,7 +5865,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t    {\n \t      if ((complain & tf_warning)\n \t\t  && warning (OPT_Wc__14_compat, msg1))\n-\t\tinform (0, msg2, fn);\n+\t\tinform (DECL_SOURCE_LOCATION (fn), msg2, fn);\n \t      goto ok;\n \t    }\n \n@@ -5875,9 +5875,10 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t\t{\n \t\t  /* Only mention C++14 for namespace-scope delete.  */\n \t\t  if (DECL_NAMESPACE_SCOPE_P (fn))\n-\t\t    inform (0, msg2, fn);\n+\t\t    inform (DECL_SOURCE_LOCATION (fn), msg2, fn);\n \t\t  else\n-\t\t    inform (0, \"%q+D is a usual (non-placement) deallocation \"\n+\t\t    inform (DECL_SOURCE_LOCATION (fn),\n+\t\t\t    \"%qD is a usual (non-placement) deallocation \"\n \t\t\t    \"function\", fn);\n \t\t}\n \t    }\n@@ -6333,8 +6334,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  build_user_type_conversion (totype, convs->u.expr, LOOKUP_NORMAL,\n \t\t\t\t      complain);\n \t  if (fn)\n-\t    inform (input_location, \"  initializing argument %P of %q+D\",\n-\t\t    argnum, fn);\n+\t    inform (DECL_SOURCE_LOCATION (fn),\n+\t\t    \"  initializing argument %P of %qD\", argnum, fn);\n \t}\n       return error_mark_node;\n \n@@ -6486,8 +6487,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t      gcc_unreachable ();\n \t    maybe_print_user_conv_context (convs);\n \t    if (fn)\n-\t      inform (input_location,\n-\t\t      \"  initializing argument %P of %q+D\", argnum, fn);\n+\t      inform (DECL_SOURCE_LOCATION (fn),\n+\t\t      \"  initializing argument %P of %qD\", argnum, fn);\n \t    return error_mark_node;\n \t  }\n \n@@ -7307,7 +7308,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t      pedwarn (input_location, 0, \"deducing %qT as %qT\",\n \t\t       non_reference (TREE_TYPE (patparm)),\n \t\t       non_reference (type));\n-\t      pedwarn (input_location, 0, \"  in call to %q+D\", cand->fn);\n+\t      pedwarn (DECL_SOURCE_LOCATION (cand->fn), 0,\n+\t\t       \"  in call to %qD\", cand->fn);\n \t      pedwarn (input_location, 0,\n \t\t       \"  (you can disable this with -fno-deduce-init-list)\");\n \t    }"}, {"sha": "fc4a3f75a0dfb5dcefd4bcf272ae20ce3176146e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -829,7 +829,8 @@ explain_invalid_constexpr_fn (tree fun)\n \n   save_loc = input_location;\n   input_location = DECL_SOURCE_LOCATION (fun);\n-  inform (0, \"%q+D is not usable as a constexpr function because:\", fun);\n+  inform (input_location,\n+\t  \"%qD is not usable as a constexpr function because:\", fun);\n   /* First check the declaration.  */\n   if (is_valid_constexpr_fn (fun, true))\n     {"}, {"sha": "52584c51f1e2f0fcbc91f0bf7ec0792b9a1013d9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -1378,8 +1378,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  /* If the built-in is not ansi, then programs can override\n \t     it even globally without an error.  */\n \t  else if (! DECL_BUILT_IN (olddecl))\n-\t    warning (0, \"library function %q#D redeclared as non-function %q+#D\",\n-\t\t     olddecl, newdecl);\n+\t    warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n+\t\t\t\"library function %q#D redeclared as non-function %q#D\",\n+\t\t\tolddecl, newdecl);\n \t  else\n \t    error (\"declaration of %q+#D conflicts with built-in \"\n \t\t   \"declaration %q#D\", newdecl, olddecl);"}, {"sha": "6c366464fbafece07db8aa3f814eb95aa0786f2b", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -1200,8 +1200,9 @@ maybe_noexcept_warning (tree fn)\n     {\n       warning (OPT_Wnoexcept, \"noexcept-expression evaluates to %<false%> \"\n \t       \"because of a call to %qD\", fn);\n-      warning (OPT_Wnoexcept, \"but %q+D does not throw; perhaps \"\n-\t       \"it should be declared %<noexcept%>\", fn);\n+      warning_at (DECL_SOURCE_LOCATION (fn), OPT_Wnoexcept,\n+\t\t  \"but %qD does not throw; perhaps \"\n+\t\t  \"it should be declared %<noexcept%>\", fn);\n     }\n }\n "}, {"sha": "e107ceea494390d9df5d6d1b29fbb18732b3bcec", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -329,15 +329,17 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t\t{\n \t\t  error (\"%qT is not a member class template of %qT\",\n \t\t\t name, ctype);\n-\t\t  inform (input_location, \"%q+D declared here\", decl);\n+\t\t  inform (DECL_SOURCE_LOCATION (decl),\n+\t\t\t  \"%qD declared here\", decl);\n \t\t  return;\n \t\t}\n \t      if (!template_member_p && (TREE_CODE (decl) != TYPE_DECL\n \t\t\t\t\t || !CLASS_TYPE_P (TREE_TYPE (decl))))\n \t\t{\n \t\t  error (\"%qT is not a nested class of %qT\",\n \t\t\t name, ctype);\n-\t\t  inform (input_location, \"%q+D declared here\", decl);\n+\t\t  inform (DECL_SOURCE_LOCATION (decl),\n+\t\t\t  \"%qD declared here\", decl);\n \t\t  return;\n \t\t}\n "}, {"sha": "b4d4c0e5c0e770cc45c28bf30ca7bc4c2e810da2", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -3633,15 +3633,17 @@ mangle_decl (const tree decl)\n \t{\n \t  if (flag_abi_compat_version != 0\n \t      && abi_version_at_least (flag_abi_compat_version))\n-\t    warning (OPT_Wabi, \"the mangled name of %q+D changed between \"\n-\t\t     \"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n-\t\t     G.entity, flag_abi_compat_version, id2,\n-\t\t     flag_abi_version, id);\n+\t    warning_at (DECL_SOURCE_LOCATION (G.entity), OPT_Wabi,\n+\t\t\t\"the mangled name of %qD changed between \"\n+\t\t\t\"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n+\t\t\tG.entity, flag_abi_compat_version, id2,\n+\t\t\tflag_abi_version, id);\n \t  else\n-\t    warning (OPT_Wabi, \"the mangled name of %q+D changes between \"\n-\t\t     \"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n-\t\t     G.entity, flag_abi_version, id,\n-\t\t     flag_abi_compat_version, id2);\n+\t    warning_at (DECL_SOURCE_LOCATION (G.entity), OPT_Wabi,\n+\t\t\t\"the mangled name of %qD changes between \"\n+\t\t\t\"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n+\t\t\tG.entity, flag_abi_version, id,\n+\t\t\tflag_abi_compat_version, id2);\n \t}\n \n       note_mangling_alias (decl, id2);"}, {"sha": "7d7ec7da187b5b58c331155b072a738df1dc2e38", "filename": "gcc/cp/method.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -1138,8 +1138,8 @@ process_subob_fn (tree fn, tree *spec_p, bool *trivial_p,\n       *constexpr_p = false;\n       if (diag)\n \t{\n-\t  inform (0, \"defaulted constructor calls non-constexpr \"\n-\t\t  \"%q+D\", fn);\n+\t  inform (DECL_SOURCE_LOCATION (fn),\n+\t\t  \"defaulted constructor calls non-constexpr %qD\", fn);\n \t  explain_invalid_constexpr_fn (fn);\n \t}\n     }\n@@ -1199,7 +1199,8 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t  if (DECL_INITIAL (field))\n \t    {\n \t      if (diag && DECL_INITIAL (field) == error_mark_node)\n-\t\tinform (0, \"initializer for %q+#D is invalid\", field);\n+\t\tinform (DECL_SOURCE_LOCATION (field),\n+\t\t\t\"initializer for %q#D is invalid\", field);\n \t      if (trivial_p)\n \t\t*trivial_p = false;\n \t      /* Core 1351: If the field has an NSDMI that could throw, the\n@@ -1250,8 +1251,9 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t    {\n \t      *constexpr_p = false;\n \t      if (diag)\n-\t\tinform (0, \"defaulted default constructor does not \"\n-\t\t\t\"initialize %q+#D\", field);\n+\t\tinform (DECL_SOURCE_LOCATION (field),\n+\t\t\t\"defaulted default constructor does not \"\n+\t\t\t\"initialize %q#D\", field);\n \t    }\n \t}\n       else if (sfk == sfk_copy_constructor)\n@@ -1615,9 +1617,10 @@ maybe_explain_implicit_delete (tree decl)\n \t       && (type_has_user_declared_move_constructor (ctype)\n \t\t   || type_has_user_declared_move_assign (ctype)))\n \t{\n-\t  inform (0, \"%q+#D is implicitly declared as deleted because %qT \"\n-\t\t \"declares a move constructor or move assignment operator\",\n-\t\t decl, ctype);\n+\t  inform (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"%q#D is implicitly declared as deleted because %qT \"\n+\t\t  \"declares a move constructor or move assignment operator\",\n+\t\t  decl, ctype);\n \t  informed = true;\n \t}\n       if (!informed)\n@@ -1634,7 +1637,8 @@ maybe_explain_implicit_delete (tree decl)\n \t\t\t\t   DECL_INHERITED_CTOR_BASE (decl), parms);\n \t  if (deleted_p)\n \t    {\n-\t      inform (0, \"%q+#D is implicitly deleted because the default \"\n+\t      inform (DECL_SOURCE_LOCATION (decl),\n+\t\t      \"%q#D is implicitly deleted because the default \"\n \t\t      \"definition would be ill-formed:\", decl);\n \t      synthesized_method_walk (ctype, sfk, const_p,\n \t\t\t\t       NULL, NULL, NULL, NULL, true,"}, {"sha": "5642ea2c4aa2eacd5c7824b6746adf2ed3ff1fd8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -9251,7 +9251,8 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t      error_at (capture_token->location,\n \t\t\t\"capture of non-variable %qD \",\n \t\t\tcapture_init_expr);\n-\t      inform (0, \"%q+#D declared here\", capture_init_expr);\n+\t      inform (DECL_SOURCE_LOCATION (capture_init_expr),\n+\t\t      \"%q#D declared here\", capture_init_expr);\n \t      continue;\n \t    }\n \t  if (VAR_P (capture_init_expr)\n@@ -9260,7 +9261,8 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t      if (pedwarn (capture_token->location, 0, \"capture of variable \"\n \t\t\t   \"%qD with non-automatic storage duration\",\n \t\t\t   capture_init_expr))\n-\t\tinform (0, \"%q+#D declared here\", capture_init_expr);\n+\t\tinform (DECL_SOURCE_LOCATION (capture_init_expr),\n+\t\t\t\"%q#D declared here\", capture_init_expr);\n \t      continue;\n \t    }\n "}, {"sha": "e92fefb416d2ae167082109e403daf4c795ed06f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -793,8 +793,10 @@ check_specialization_namespace (tree tmpl)\n     return true;\n   else\n     {\n-      permerror (input_location, \"specialization of %qD in different namespace\", tmpl);\n-      permerror (input_location, \"  from definition of %q+#D\", tmpl);\n+      permerror (input_location,\n+\t\t \"specialization of %qD in different namespace\", tmpl);\n+      permerror (DECL_SOURCE_LOCATION (tmpl),\n+\t\t \"  from definition of %q#D\", tmpl);\n       return false;\n     }\n }\n@@ -920,8 +922,10 @@ maybe_process_partial_specialization (tree type)\n \t  if (current_namespace\n \t      != decl_namespace_context (tmpl))\n \t    {\n-\t      permerror (input_location, \"specializing %q#T in different namespace\", type);\n-\t      permerror (input_location, \"  from definition of %q+#D\", tmpl);\n+\t      permerror (input_location,\n+\t\t\t \"specializing %q#T in different namespace\", type);\n+\t      permerror (DECL_SOURCE_LOCATION (tmpl),\n+\t\t\t \"  from definition of %q#D\", tmpl);\n \t    }\n \n \t  /* Check for invalid specialization after instantiation:\n@@ -5239,9 +5243,9 @@ redeclare_class_template (tree type, tree parms)\n                \"redeclared with %d template parameter\",\n                \"redeclared with %d template parameters\",\n                TREE_VEC_LENGTH (parms));\n-      inform_n (input_location, TREE_VEC_LENGTH (tmpl_parms),\n-                \"previous declaration %q+D used %d template parameter\",\n-                \"previous declaration %q+D used %d template parameters\",\n+      inform_n (DECL_SOURCE_LOCATION (tmpl), TREE_VEC_LENGTH (tmpl_parms),\n+                \"previous declaration %qD used %d template parameter\",\n+                \"previous declaration %qD used %d template parameters\",\n                 tmpl, TREE_VEC_LENGTH (tmpl_parms));\n       return false;\n     }\n@@ -7117,7 +7121,8 @@ coerce_template_parms (tree parms,\n \t\t    \"(%d, should be %d)\", nargs, nparms);\n \n \t  if (in_decl)\n-\t    inform (input_location, \"provided for %q+D\", in_decl);\n+\t    inform (DECL_SOURCE_LOCATION (in_decl),\n+\t\t    \"provided for %qD\", in_decl);\n \t}\n \n       return error_mark_node;\n@@ -15314,7 +15319,8 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t      current_class_name, function);\n \t\t\t  }\n \t\t\telse\n-\t\t\t  inform (0, \"%q+D declared here, later in the \"\n+\t\t\t  inform (DECL_SOURCE_LOCATION (fn),\n+\t\t\t\t  \"%qD declared here, later in the \"\n \t\t\t\t  \"translation unit\", fn);\n \t\t      }\n \t\t    function = unq;"}, {"sha": "1176b3e6f4ecef91ad5d86cd9114a7055a6f8621", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -1901,7 +1901,7 @@ check_final_overrider (tree overrider, tree basefn)\n \t  if (pedwarn (DECL_SOURCE_LOCATION (overrider), 0,\n \t\t       \"invalid covariant return type for %q#D\", overrider))\n \t    inform (DECL_SOURCE_LOCATION (basefn),\n-\t\t    \"  overriding %q+#D\", basefn);\n+\t\t    \"  overriding %q#D\", basefn);\n \t}\n       else\n \tfail = 2;"}, {"sha": "44f9f7acaa36b5457601376adb13f9bf7c5cda79", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1cbcee3e1725c7796ad8c55a84a7a95ab77871/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4b1cbcee3e1725c7796ad8c55a84a7a95ab77871", "patch": "@@ -3182,7 +3182,7 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n \t    inform (0, \"lambda in local class %q+T cannot \"\n \t\t    \"capture variables from the enclosing context\",\n \t\t    TYPE_CONTEXT (closure));\n-\t  inform (input_location, \"%q+#D declared here\", decl);\n+\t  inform (DECL_SOURCE_LOCATION (decl), \"%q#D declared here\", decl);\n \t}\n       return error_mark_node;\n     }\n@@ -3192,7 +3192,7 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n \terror (VAR_P (decl)\n \t       ? G_(\"use of local variable with automatic storage from containing function\")\n \t       : G_(\"use of parameter from containing function\"));\n-      inform (input_location, \"%q+#D declared here\", decl);\n+      inform (DECL_SOURCE_LOCATION (decl), \"%q#D declared here\", decl);\n       return error_mark_node;\n     }\n   return decl;"}]}