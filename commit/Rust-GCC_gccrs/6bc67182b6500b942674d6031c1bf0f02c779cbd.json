{"sha": "6bc67182b6500b942674d6031c1bf0f02c779cbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjNjcxODJiNjUwMGI5NDI2NzRkNjAzMWMxYmYwZjAyYzc3OWNiZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-29T08:41:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-29T08:41:52Z"}, "message": "[AArch64] Handle scalars in cmp and shift immediate queries\n\nThe SVE ACLE has convenience functions that take scalar arguments\ninstead of vectors.  This patch makes it easier to implement the shift\nand compare functions by making the associated immediate queries work\nfor scalar immediates as well as vector duplicates of them.\n\nThe \"const\" codes in the predicates were a holdover from an early\nversion of the SVE port in which we used (const ...) wrappers for\nvariable-length vector constants.  I'll remove other instances\nof them in a separate patch.\n\n2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_sve_cmp_immediate_p)\n\t(aarch64_simd_shift_imm_p): Accept scalars as well as vectors.\n\t* config/aarch64/predicates.md (aarch64_sve_cmp_vsc_immediate)\n\t(aarch64_sve_cmp_vsd_immediate): Accept \"const_int\", but don't\n\taccept \"const\".\n\nFrom-SVN: r277556", "tree": {"sha": "45542b94da4989cd732b7c03e46259a96705b808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45542b94da4989cd732b7c03e46259a96705b808"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc67182b6500b942674d6031c1bf0f02c779cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc67182b6500b942674d6031c1bf0f02c779cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc67182b6500b942674d6031c1bf0f02c779cbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc67182b6500b942674d6031c1bf0f02c779cbd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "a85c2ae355c520a178a25a11a1be3552fc094327", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc67182b6500b942674d6031c1bf0f02c779cbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc67182b6500b942674d6031c1bf0f02c779cbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bc67182b6500b942674d6031c1bf0f02c779cbd", "patch": "@@ -1,3 +1,11 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_sve_cmp_immediate_p)\n+\t(aarch64_simd_shift_imm_p): Accept scalars as well as vectors.\n+\t* config/aarch64/predicates.md (aarch64_sve_cmp_vsc_immediate)\n+\t(aarch64_sve_cmp_vsd_immediate): Accept \"const_int\", but don't\n+\taccept \"const\".\n+\n 2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* coretypes.h (string_int_pair): New typedef."}, {"sha": "a19494e94694827f88a595481260394b59044a7e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc67182b6500b942674d6031c1bf0f02c779cbd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc67182b6500b942674d6031c1bf0f02c779cbd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6bc67182b6500b942674d6031c1bf0f02c779cbd", "patch": "@@ -15426,13 +15426,11 @@ aarch64_sve_dup_immediate_p (rtx x)\n bool\n aarch64_sve_cmp_immediate_p (rtx x, bool signed_p)\n {\n-  rtx elt;\n-\n-  return (const_vec_duplicate_p (x, &elt)\n-\t  && CONST_INT_P (elt)\n+  x = unwrap_const_vec_duplicate (x);\n+  return (CONST_INT_P (x)\n \t  && (signed_p\n-\t      ? IN_RANGE (INTVAL (elt), -16, 15)\n-\t      : IN_RANGE (INTVAL (elt), 0, 127)));\n+\t      ? IN_RANGE (INTVAL (x), -16, 15)\n+\t      : IN_RANGE (INTVAL (x), 0, 127)));\n }\n \n /* Return true if X is a valid immediate operand for an SVE FADD or FSUB\n@@ -15784,11 +15782,14 @@ aarch64_check_zero_based_sve_index_immediate (rtx x)\n bool\n aarch64_simd_shift_imm_p (rtx x, machine_mode mode, bool left)\n {\n+  x = unwrap_const_vec_duplicate (x);\n+  if (!CONST_INT_P (x))\n+    return false;\n   int bit_width = GET_MODE_UNIT_SIZE (mode) * BITS_PER_UNIT;\n   if (left)\n-    return aarch64_const_vec_all_same_in_range_p (x, 0, bit_width - 1);\n+    return IN_RANGE (INTVAL (x), 0, bit_width - 1);\n   else\n-    return aarch64_const_vec_all_same_in_range_p (x, 1, bit_width);\n+    return IN_RANGE (INTVAL (x), 1, bit_width);\n }\n \n /* Return the bitmask CONST_INT to select the bits required by a zero extract"}, {"sha": "2b9aa4a2959743bd3cca70924991b0ef4f3eb0bb", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc67182b6500b942674d6031c1bf0f02c779cbd/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc67182b6500b942674d6031c1bf0f02c779cbd/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=6bc67182b6500b942674d6031c1bf0f02c779cbd", "patch": "@@ -661,11 +661,11 @@\n \t    (match_test \"aarch64_float_const_representable_p (op)\"))))\n \n (define_predicate \"aarch64_sve_cmp_vsc_immediate\"\n-  (and (match_code \"const,const_vector\")\n+  (and (match_code \"const_int,const_vector\")\n        (match_test \"aarch64_sve_cmp_immediate_p (op, true)\")))\n \n (define_predicate \"aarch64_sve_cmp_vsd_immediate\"\n-  (and (match_code \"const,const_vector\")\n+  (and (match_code \"const_int,const_vector\")\n        (match_test \"aarch64_sve_cmp_immediate_p (op, false)\")))\n \n (define_predicate \"aarch64_sve_index_immediate\""}]}