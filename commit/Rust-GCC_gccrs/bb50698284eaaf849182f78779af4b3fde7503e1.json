{"sha": "bb50698284eaaf849182f78779af4b3fde7503e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MDY5ODI4NGVhYWY4NDkxODJmNzg3NzlhZjRiM2ZkZTc1MDNlMQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-04-12T07:40:37Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-04-12T07:40:37Z"}, "message": "fold-const.c (const_binop): Handle vector shifts by a scalar.\n\n2013-04-12  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* fold-const.c (const_binop): Handle vector shifts by a scalar.\n\t(fold_binary_loc): Call const_binop also for mixed vector-scalar\n\toperations.\n\ngcc/testsuite/\n\t* gcc.dg/fold-cstvecshift.c: New testcase.\n\nFrom-SVN: r197843", "tree": {"sha": "669b184e12601164765d48b4066f3af5f63680db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669b184e12601164765d48b4066f3af5f63680db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb50698284eaaf849182f78779af4b3fde7503e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb50698284eaaf849182f78779af4b3fde7503e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb50698284eaaf849182f78779af4b3fde7503e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb50698284eaaf849182f78779af4b3fde7503e1/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3065bdb6e2161e61ebabe5f4efb6eaef0ae910d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3065bdb6e2161e61ebabe5f4efb6eaef0ae910d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3065bdb6e2161e61ebabe5f4efb6eaef0ae910d"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "adb39817f1b49e782f04558622221c099248c467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb50698284eaaf849182f78779af4b3fde7503e1", "patch": "@@ -1,3 +1,9 @@\n+2013-04-12  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* fold-const.c (const_binop): Handle vector shifts by a scalar.\n+\t(fold_binary_loc): Call const_binop also for mixed vector-scalar\n+\toperations.\n+\n 2013-04-12  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "e8187cbf477af49ad99f6a36a3052c1cf2515b29", "filename": "gcc/fold-const.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=bb50698284eaaf849182f78779af4b3fde7503e1", "patch": "@@ -1342,21 +1342,44 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n   if (TREE_CODE (arg1) == VECTOR_CST\n       && TREE_CODE (arg2) == VECTOR_CST)\n     {\n-      tree type = TREE_TYPE(arg1);\n+      tree type = TREE_TYPE (arg1);\n       int count = TYPE_VECTOR_SUBPARTS (type), i;\n-      tree *elts =  XALLOCAVEC (tree, count);\n+      tree *elts = XALLOCAVEC (tree, count);\n \n       for (i = 0; i < count; i++)\n \t{\n-          tree elem1 = VECTOR_CST_ELT (arg1, i);\n+\t  tree elem1 = VECTOR_CST_ELT (arg1, i);\n \t  tree elem2 = VECTOR_CST_ELT (arg2, i);\n \n-          elts[i] = const_binop (code, elem1, elem2);\n+\t  elts[i] = const_binop (code, elem1, elem2);\n+\n+\t  /* It is possible that const_binop cannot handle the given\n+\t     code and return NULL_TREE */\n+\t  if (elts[i] == NULL_TREE)\n+\t    return NULL_TREE;\n+\t}\n+\n+      return build_vector (type, elts);\n+    }\n \n-          /* It is possible that const_binop cannot handle the given\n-            code and return NULL_TREE */\n-          if(elts[i] == NULL_TREE)\n-            return NULL_TREE;\n+  /* Shifts allow a scalar offset for a vector.  */\n+  if (TREE_CODE (arg1) == VECTOR_CST\n+      && TREE_CODE (arg2) == INTEGER_CST)\n+    {\n+      tree type = TREE_TYPE (arg1);\n+      int count = TYPE_VECTOR_SUBPARTS (type), i;\n+      tree *elts = XALLOCAVEC (tree, count);\n+\n+      for (i = 0; i < count; i++)\n+\t{\n+\t  tree elem1 = VECTOR_CST_ELT (arg1, i);\n+\n+\t  elts[i] = const_binop (code, elem1, arg2);\n+\n+\t  /* It is possible that const_binop cannot handle the given\n+\t     code and return NULL_TREE */\n+\t  if (elts[i] == NULL_TREE)\n+\t    return NULL_TREE;\n \t}\n \n       return build_vector (type, elts);\n@@ -9859,7 +9882,8 @@ fold_binary_loc (location_t loc,\n       || (TREE_CODE (arg0) == FIXED_CST && TREE_CODE (arg1) == FIXED_CST)\n       || (TREE_CODE (arg0) == FIXED_CST && TREE_CODE (arg1) == INTEGER_CST)\n       || (TREE_CODE (arg0) == COMPLEX_CST && TREE_CODE (arg1) == COMPLEX_CST)\n-      || (TREE_CODE (arg0) == VECTOR_CST && TREE_CODE (arg1) == VECTOR_CST))\n+      || (TREE_CODE (arg0) == VECTOR_CST && TREE_CODE (arg1) == VECTOR_CST)\n+      || (TREE_CODE (arg0) == VECTOR_CST && TREE_CODE (arg1) == INTEGER_CST))\n     {\n       if (kind == tcc_binary)\n \t{"}, {"sha": "ec11002256a6a14f6333e02e06b05aa09d206b3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb50698284eaaf849182f78779af4b3fde7503e1", "patch": "@@ -1,3 +1,7 @@\n+2013-04-12  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/fold-cstvecshift.c: New testcase.\n+\n 2013-04-11   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* gcc.target/aarch64/negs.c: New."}, {"sha": "51f42d42bc1bcbe0d2df92cb5dc56b1113bf8b68", "filename": "gcc/testsuite/gcc.dg/fold-cstvecshift.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cstvecshift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50698284eaaf849182f78779af4b3fde7503e1/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cstvecshift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cstvecshift.c?ref=bb50698284eaaf849182f78779af4b3fde7503e1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+typedef int vec __attribute__ ((vector_size (4 * sizeof (int))));\n+\n+void f (vec *r)\n+{\n+  vec a = { 2, 3, 4, 5 };\n+  *r = (a << 2) >> 1;\n+}\n+\n+/* { dg-final { scan-tree-dump \"{ 4, 6, 8, 10 }\" \"ccp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}]}