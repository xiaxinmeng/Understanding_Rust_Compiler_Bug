{"sha": "261fb553d291b2fd74ae28348dda80115bf6d29e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxZmI1NTNkMjkxYjJmZDc0YWUyODM0OGRkYTgwMTE1YmY2ZDI5ZQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-06-24T16:13:28Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-06-24T16:13:28Z"}, "message": "[AArch64] Fix ICES with -mgeneral-regs-only / -march=...+nofp\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-protos.h (aarch64_err_no_fpadvsimd): New.\n\n\t* config/aarch64/aarch64.md (mov<mode>/GPF, movtf): Use\n\taarch64_err_no_fpadvsimd.\n\n\t* config/aarch64/aarch64.c (aarch64_err_no_fpadvsimd): New.\n\t(aarch64_layout_arg, aarch64_init_cumulative_args): Use\n\taarch64_err_no_fpadvsimd if !TARGET_FLOAT and we need FP regs.\n\t(aarch64_expand_builtin_va_start, aarch64_setup_incoming_varargs):\n\tTurn error into assert, test TARGET_FLOAT.\n\t(aarch64_gimplify_va_arg_expr): Use aarch64_err_no_fpadvsimd, test\n\tTARGET_FLOAT.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/mgeneral-regs_1.c: New file.\n\t* gcc.target/aarch64/mgeneral-regs_2.c: New file.\n\t* gcc.target/aarch64/nofp_1.c: New file.\n\nFrom-SVN: r224908", "tree": {"sha": "4102743e90a18e3286c00d6d21c034a0e0340d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4102743e90a18e3286c00d6d21c034a0e0340d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261fb553d291b2fd74ae28348dda80115bf6d29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261fb553d291b2fd74ae28348dda80115bf6d29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261fb553d291b2fd74ae28348dda80115bf6d29e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261fb553d291b2fd74ae28348dda80115bf6d29e/comments", "author": null, "committer": null, "parents": [{"sha": "4ca1ca5bdb4c7467a1db9a3e2ef32607cceb6ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca1ca5bdb4c7467a1db9a3e2ef32607cceb6ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca1ca5bdb4c7467a1db9a3e2ef32607cceb6ddd"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "dc609a91f31b62abc4cfe8d100209cf5ea7c569b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -1,3 +1,18 @@\n+2015-06-24  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_err_no_fpadvsimd): New.\n+\n+\t* config/aarch64/aarch64.md (mov<mode>/GPF, movtf): Use\n+\taarch64_err_no_fpadvsimd.\n+\n+\t* config/aarch64/aarch64.c (aarch64_err_no_fpadvsimd): New.\n+\t(aarch64_layout_arg, aarch64_init_cumulative_args): Use\n+\taarch64_err_no_fpadvsimd if !TARGET_FLOAT and we need FP regs.\n+\t(aarch64_expand_builtin_va_start, aarch64_setup_incoming_varargs):\n+\tTurn error into assert, test TARGET_FLOAT.\n+\t(aarch64_gimplify_va_arg_expr): Use aarch64_err_no_fpadvsimd, test\n+\tTARGET_FLOAT.\n+\n 2015-06-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR debug/66482"}, {"sha": "ac92c5924a4cfc5941fe8eeb31281e18bd21a5a0", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -259,6 +259,7 @@ unsigned aarch64_dbx_register_number (unsigned);\n unsigned aarch64_trampoline_size (void);\n void aarch64_asm_output_labelref (FILE *, const char *);\n void aarch64_elf_asm_named_section (const char *, unsigned, tree);\n+void aarch64_err_no_fpadvsimd (machine_mode, const char *);\n void aarch64_expand_epilogue (bool);\n void aarch64_expand_mov_immediate (rtx, rtx);\n void aarch64_expand_prologue (void);"}, {"sha": "fa1f7da3954326aa7b9bd7590a4e82f94b46f5e6", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -520,6 +520,16 @@ static const char * const aarch64_condition_codes[] =\n   \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\", \"al\", \"nv\"\n };\n \n+void\n+aarch64_err_no_fpadvsimd (machine_mode mode, const char *msg)\n+{\n+  const char *mc = FLOAT_MODE_P (mode) ? \"floating-point\" : \"vector\";\n+  if (TARGET_GENERAL_REGS_ONLY)\n+    error (\"%qs is incompatible with %s %s\", \"-mgeneral-regs-only\", mc, msg);\n+  else\n+    error (\"%qs feature modifier is incompatible with %s %s\", \"+nofp\", mc, msg);\n+}\n+\n static unsigned int\n aarch64_min_divisions_for_recip_mul (enum machine_mode mode)\n {\n@@ -1770,6 +1780,9 @@ aarch64_layout_arg (cumulative_args_t pcum_v, machine_mode mode,\n      and homogenous short-vector aggregates (HVA).  */\n   if (allocate_nvrn)\n     {\n+      if (!TARGET_FLOAT)\n+\taarch64_err_no_fpadvsimd (mode, \"argument\");\n+\n       if (nvrn + nregs <= NUM_FP_ARG_REGS)\n \t{\n \t  pcum->aapcs_nextnvrn = nvrn + nregs;\n@@ -1896,6 +1909,17 @@ aarch64_init_cumulative_args (CUMULATIVE_ARGS *pcum,\n   pcum->aapcs_stack_words = 0;\n   pcum->aapcs_stack_size = 0;\n \n+  if (!TARGET_FLOAT\n+      && fndecl && TREE_PUBLIC (fndecl)\n+      && fntype && fntype != error_mark_node)\n+    {\n+      const_tree type = TREE_TYPE (fntype);\n+      machine_mode mode ATTRIBUTE_UNUSED; /* To pass pointer as argument.  */\n+      int nregs ATTRIBUTE_UNUSED; /* Likewise.  */\n+      if (aarch64_vfp_is_call_or_return_candidate (TYPE_MODE (type), type,\n+\t\t\t\t\t\t   &mode, &nregs, NULL))\n+\taarch64_err_no_fpadvsimd (TYPE_MODE (type), \"return type\");\n+    }\n   return;\n }\n \n@@ -7555,9 +7579,7 @@ aarch64_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \n   if (!TARGET_FLOAT)\n     {\n-      if (cum->aapcs_nvrn > 0)\n-\tsorry (\"%qs and floating point or vector arguments\",\n-\t       \"-mgeneral-regs-only\");\n+      gcc_assert (cum->aapcs_nvrn == 0);\n       vr_save_area_size = 0;\n     }\n \n@@ -7664,8 +7686,7 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n     {\n       /* TYPE passed in fp/simd registers.  */\n       if (!TARGET_FLOAT)\n-\tsorry (\"%qs and floating point or vector arguments\",\n-\t       \"-mgeneral-regs-only\");\n+\taarch64_err_no_fpadvsimd (mode, \"varargs\");\n \n       f_top = build3 (COMPONENT_REF, TREE_TYPE (f_vrtop),\n \t\t      unshare_expr (valist), f_vrtop, NULL_TREE);\n@@ -7902,9 +7923,7 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n \n   if (!TARGET_FLOAT)\n     {\n-      if (local_cum.aapcs_nvrn > 0)\n-\tsorry (\"%qs and floating point or vector arguments\",\n-\t       \"-mgeneral-regs-only\");\n+      gcc_assert (local_cum.aapcs_nvrn == 0);\n       vr_saved = 0;\n     }\n "}, {"sha": "934c8faf6d6ecd90a21fbc3243b8b79ab328177c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -979,18 +979,18 @@\n   [(set (match_operand:GPF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:GPF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n+  {\n     if (!TARGET_FLOAT)\n-     {\n-\tsorry (\\\"%qs and floating point code\\\", \\\"-mgeneral-regs-only\\\");\n+      {\n+\taarch64_err_no_fpadvsimd (<MODE>mode, \"code\");\n \tFAIL;\n-     }\n+      }\n \n     if (GET_CODE (operands[0]) == MEM\n         && ! (GET_CODE (operands[1]) == CONST_DOUBLE\n \t      && aarch64_float_const_zero_rtx_p (operands[1])))\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n-  \"\n+  }\n )\n \n (define_insn \"*movsf_aarch64\"\n@@ -1035,18 +1035,18 @@\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:TF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n+  {\n     if (!TARGET_FLOAT)\n-     {\n-\tsorry (\\\"%qs and floating point code\\\", \\\"-mgeneral-regs-only\\\");\n+      {\n+\taarch64_err_no_fpadvsimd (TFmode, \"code\");\n \tFAIL;\n-     }\n+      }\n \n     if (GET_CODE (operands[0]) == MEM\n         && ! (GET_CODE (operands[1]) == CONST_DOUBLE\n \t      && aarch64_float_const_zero_rtx_p (operands[1])))\n       operands[1] = force_reg (TFmode, operands[1]);\n-  \"\n+  }\n )\n \n (define_insn \"*movtf_aarch64\""}, {"sha": "b9084a6e393ad753790879a404720426304f0506", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -1,3 +1,9 @@\n+2015-06-24  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/mgeneral-regs_1.c: New file.\n+\t* gcc.target/aarch64/mgeneral-regs_2.c: New file.\n+\t* gcc.target/aarch64/nofp_1.c: New file.\n+\n 2015-06-24  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N3928 - Extending static_assert"}, {"sha": "b5192a6a4838c14fcf0d00cd4d33b7c7255abd80", "filename": "gcc/testsuite/gcc.target/aarch64/mgeneral-regs_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_1.c?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+/* { dg-error \"'-mgeneral-regs-only' is incompatible with vector return type\" \"\" {target \"aarch64*-*-*\"} 7 } */\n+/* { dg-error \"'-mgeneral-regs-only' is incompatible with vector argument\" \"\" {target \"aarch64*-*-*\"} 7 } */\n+int32x2_t test (int32x2_t a, int32x2_t b)\n+{\n+  return a + b;\n+}"}, {"sha": "859019970ae044d8b36a095329c9e47a2826a399", "filename": "gcc/testsuite/gcc.target/aarch64/mgeneral-regs_2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_2.c?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+#include <stdarg.h>\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+int\n+test (int i, ...)\n+{\n+  va_list argp;\n+  va_start (argp, i);\n+  int32x2_t x = (int32x2_t) {0, 1};\n+  x += va_arg (argp, int32x2_t); /* { dg-error \"'-mgeneral-regs-only' is incompatible with vector varargs\" } */\n+  return x[0] + x[1];\n+}"}, {"sha": "3fc00368668e2d9cfbf3b6c83d72cb9ebbb84821", "filename": "gcc/testsuite/gcc.target/aarch64/nofp_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnofp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261fb553d291b2fd74ae28348dda80115bf6d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnofp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnofp_1.c?ref=261fb553d291b2fd74ae28348dda80115bf6d29e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-skip-if \"conflicting -march\" { *-*-* } { \"-march=*\" } { \"-march=*+nofp\" } } */\n+/* If there are multiple -march's, the latest wins; skip the test either way.\n+   -march overrides -mcpu, so there is no possibility of conflict.  */\n+\n+/* { dg-options \"-march=armv8-a+nofp\" } */\n+\n+#include <stdarg.h>\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+int test (int i, ...);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int32x2_t a = (int32x2_t) {0, 1};\n+  int32x2_t b = (int32x2_t) {2, 3};\n+  return test (2, a, b); /* { dg-error \"'\\\\+nofp' feature modifier is incompatible with vector argument\" } */\n+}"}]}