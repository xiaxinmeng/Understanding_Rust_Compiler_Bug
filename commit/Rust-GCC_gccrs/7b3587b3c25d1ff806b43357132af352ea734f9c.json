{"sha": "7b3587b3c25d1ff806b43357132af352ea734f9c", "node_id": "C_kwDOANBUbNoAKDdiMzU4N2IzYzI1ZDFmZjgwNmI0MzM1NzEzMmFmMzUyZWE3MzRmOWM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-01T20:12:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-05T14:58:51Z"}, "message": "libstdc++: Use built-ins for more variable templates\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (is_trivial_v, is_trivially_copyable_v)\n\t(is_standard_layout_v, is_pod_v, is_literal_type_v): Use\n\tbuilt-in instead of class template.\n\t(is_same_v): Add partial specialization for true case.", "tree": {"sha": "6074b8d936b3a51a2df106bcd8afa3857c43e9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6074b8d936b3a51a2df106bcd8afa3857c43e9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3587b3c25d1ff806b43357132af352ea734f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3587b3c25d1ff806b43357132af352ea734f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3587b3c25d1ff806b43357132af352ea734f9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3587b3c25d1ff806b43357132af352ea734f9c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a9c0d4ae5519c404682425da9522c46c38712fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9c0d4ae5519c404682425da9522c46c38712fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9c0d4ae5519c404682425da9522c46c38712fd"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "e19d964fa9c125753564af2a0ae211a4942aef28", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3587b3c25d1ff806b43357132af352ea734f9c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3587b3c25d1ff806b43357132af352ea734f9c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=7b3587b3c25d1ff806b43357132af352ea734f9c", "patch": "@@ -3077,22 +3077,19 @@ template <typename _Tp>\n   inline constexpr bool is_volatile_v = false;\n template <typename _Tp>\n   inline constexpr bool is_volatile_v<volatile _Tp> = true;\n+\n template <typename _Tp>\n-  inline constexpr bool is_trivial_v = is_trivial<_Tp>::value;\n+  inline constexpr bool is_trivial_v = __is_trivial(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_trivially_copyable_v =\n-    is_trivially_copyable<_Tp>::value;\n+  inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_standard_layout_v = is_standard_layout<_Tp>::value;\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+  inline constexpr bool is_standard_layout_v = __is_standard_layout(_Tp);\n template <typename _Tp>\n   _GLIBCXX20_DEPRECATED(\"use is_standard_layout_v && is_trivial_v instead\")\n-  inline constexpr bool is_pod_v = is_pod<_Tp>::value;\n+  inline constexpr bool is_pod_v = __is_pod(_Tp);\n template <typename _Tp>\n   _GLIBCXX17_DEPRECATED\n-  inline constexpr bool is_literal_type_v = is_literal_type<_Tp>::value;\n-#pragma GCC diagnostic pop\n+  inline constexpr bool is_literal_type_v = __is_literal_type(_Tp);\n template <typename _Tp>\n   inline constexpr bool is_empty_v = __is_empty(_Tp);\n template <typename _Tp>\n@@ -3101,6 +3098,7 @@ template <typename _Tp>\n   inline constexpr bool is_abstract_v = __is_abstract(_Tp);\n template <typename _Tp>\n   inline constexpr bool is_final_v = __is_final(_Tp);\n+\n template <typename _Tp>\n   inline constexpr bool is_signed_v = is_signed<_Tp>::value;\n template <typename _Tp>\n@@ -3183,9 +3181,11 @@ template <typename _Tp>\n template <typename _Tp>\n   inline constexpr bool is_nothrow_destructible_v =\n     is_nothrow_destructible<_Tp>::value;\n+\n template <typename _Tp>\n-  inline constexpr bool has_virtual_destructor_v =\n-    has_virtual_destructor<_Tp>::value;\n+  inline constexpr bool has_virtual_destructor_v\n+    = __has_virtual_destructor(_Tp);\n+\n template <typename _Tp>\n   inline constexpr size_t alignment_of_v = alignment_of<_Tp>::value;\n \n@@ -3212,7 +3212,9 @@ template <typename _Tp, typename _Up>\n   inline constexpr bool is_same_v = __is_same(_Tp, _Up);\n #else\n template <typename _Tp, typename _Up>\n-  inline constexpr bool is_same_v = std::is_same<_Tp, _Up>::value;\n+  inline constexpr bool is_same_v = false;\n+template <typename _Tp>\n+  inline constexpr bool is_same_v<_Tp, _Tp> = true;\n #endif\n template <typename _Base, typename _Derived>\n   inline constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);"}]}