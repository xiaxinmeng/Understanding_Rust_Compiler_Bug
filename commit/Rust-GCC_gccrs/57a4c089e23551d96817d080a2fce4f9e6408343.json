{"sha": "57a4c089e23551d96817d080a2fce4f9e6408343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhNGMwODllMjM1NTFkOTY4MTdkMDgwYTJmY2U0ZjllNjQwODM0Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-02-26T21:14:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-02-26T21:14:24Z"}, "message": "c-decl.c (static_ctors): Move to c-common.c.\n\n\t* c-decl.c (static_ctors): Move to c-common.c.\n\t(static_dtors): Likewise.\n\t(finish_function): Use c_record_cdtor_fn.\n\t(build_cdtor): Move to c-common.c.\n\t(c_write_global_declarations): Use c_build_cdtor_fns.\n\t* c-common.h (static_ctors): Declare.\n\t(static_dtors): Likewise.\n\t(c_record_cdtor_fn): Likewise.\n\t(c_build_cdtor_fns): Likewise.\n\t* c-common.c (static_ctors): New variable.\n\t(static_dtors): Likewise.\n\t(c_record_cdtor_fn): New function.\n\t(build_cdtor): Move from c-decl.c\n\t(c_build_cdtor_fns): New function.\n\n\t* semantics.c (expand_or_defer_fn): Call c_record_cdtor_fn.\n\t* decl2.c (cp_write_gloabl_declarations): Call c_build_cdtor_fns.\n\nFrom-SVN: r122341", "tree": {"sha": "57f11202334c7de856e122ac7abb9d371c2ac950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f11202334c7de856e122ac7abb9d371c2ac950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a4c089e23551d96817d080a2fce4f9e6408343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4c089e23551d96817d080a2fce4f9e6408343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a4c089e23551d96817d080a2fce4f9e6408343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4c089e23551d96817d080a2fce4f9e6408343/comments", "author": null, "committer": null, "parents": [{"sha": "7276d368253cf2ba1d171f49dc21d90a1b897de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7276d368253cf2ba1d171f49dc21d90a1b897de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7276d368253cf2ba1d171f49dc21d90a1b897de7"}], "stats": {"total": 135, "additions": 99, "deletions": 36}, "files": [{"sha": "8388cef151cb8d786c1c6c20f7b9638a16ed66e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57a4c089e23551d96817d080a2fce4f9e6408343", "patch": "@@ -1,5 +1,20 @@\n 2007-02-26  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* c-decl.c (static_ctors): Move to c-common.c.\n+\t(static_dtors): Likewise.\n+\t(finish_function): Use c_record_cdtor_fn.\n+\t(build_cdtor): Move to c-common.c.\n+\t(c_write_global_declarations): Use c_build_cdtor_fns.\n+\t* c-common.h (static_ctors): Declare.\n+\t(static_dtors): Likewise.\n+\t(c_record_cdtor_fn): Likewise.\n+\t(c_build_cdtor_fns): Likewise.\n+\t* c-common.c (static_ctors): New variable.\n+\t(static_dtors): Likewise.\n+\t(c_record_cdtor_fn): New function.\n+\t(build_cdtor): Move from c-decl.c\n+\t(c_build_cdtor_fns): New function.\n+\n \t* output.h (assemble_addr_to_section): Declare.\n \t(get_cdtor_priority_section): Likewise.\n \t* varasm.c (assemble_addr_to_section): New function."}, {"sha": "0cd4d1a8eb4e63e4e414a2919f984ec4b586c93c", "filename": "gcc/c-common.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=57a4c089e23551d96817d080a2fce4f9e6408343", "patch": "@@ -663,6 +663,11 @@ const struct attribute_spec c_common_format_attribute_table[] =\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n+/* Functions called automatically at the beginning and end of execution.  */\n+\n+tree static_ctors;\n+tree static_dtors;\n+\n /* Push current bindings for the function name VAR_DECLS.  */\n \n void\n@@ -6875,4 +6880,59 @@ warn_for_unused_label (tree label)\n     }\n }\n \n+/* If FNDECL is a static constructor or destructor, add it to the list\n+   of functions to be called by the file scope initialization\n+   function.  */\n+\n+void\n+c_record_cdtor_fn (tree fndecl)\n+{\n+  if (targetm.have_ctors_dtors)\n+    return;\n+\n+  if (DECL_STATIC_CONSTRUCTOR (fndecl))\n+    static_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n+  if (DECL_STATIC_DESTRUCTOR (fndecl))\n+    static_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n+}\n+\n+/* Synthesize a function which calls all the global ctors or global\n+   dtors in this file.  This is only used for targets which do not\n+   support .ctors/.dtors sections.  FIXME: Migrate into cgraph.  */\n+static void\n+build_cdtor (int method_type, tree cdtors)\n+{\n+  tree body = 0;\n+\n+  if (!cdtors)\n+    return;\n+\n+  for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n+    append_to_statement_list (build_function_call (TREE_VALUE (cdtors), 0),\n+\t\t\t      &body);\n+\n+  cgraph_build_static_cdtor (method_type, body, DEFAULT_INIT_PRIORITY);\n+}\n+\n+/* Generate functions to call static constructors and destructors\n+   for targets that do not support .ctors/.dtors sections.  These\n+   functions have magic names which are detected by collect2.  */\n+\n+void\n+c_build_cdtor_fns (void)\n+{\n+  if (!targetm.have_ctors_dtors)\n+    {\n+      build_cdtor ('I', static_ctors); \n+      static_ctors = NULL_TREE;\n+      build_cdtor ('D', static_dtors); \n+      static_dtors = NULL_TREE;\n+    }\n+  else\n+    {\n+      gcc_assert (!static_ctors);\n+      gcc_assert (!static_dtors);\n+    }\n+}\n+\n #include \"gt-c-common.h\""}, {"sha": "e52b83208af56458534ce1a96ab0d99f6c12b20d", "filename": "gcc/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=57a4c089e23551d96817d080a2fce4f9e6408343", "patch": "@@ -988,4 +988,11 @@ extern tree c_omp_remap_decl (tree, bool);\n #define GCC_DIAG_STYLE __gcc_cdiag__\n #endif\n \n+/* Functions called automatically at the beginning and end of execution.  */\n+extern GTY (()) tree static_ctors;\n+extern GTY (()) tree static_dtors;\n+\n+extern void c_record_cdtor_fn (tree);\n+extern void c_build_cdtor_fns (void);\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "a84dea67f30e1995c300d4c818f9157f08d8c93b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=57a4c089e23551d96817d080a2fce4f9e6408343", "patch": "@@ -411,11 +411,6 @@ static bool keep_next_level_flag;\n \n static bool next_is_function_body;\n \n-/* Functions called automatically at the beginning and end of execution.  */\n-\n-static GTY(()) tree static_ctors;\n-static GTY(()) tree static_dtors;\n-\n /* Forward declarations.  */\n static tree lookup_name_in_scope (tree, struct c_scope *);\n static tree c_make_fname_decl (tree, int);\n@@ -6776,14 +6771,9 @@ finish_function (void)\n      info for the epilogue.  */\n   cfun->function_end_locus = input_location;\n \n-  /* If we don't have ctors/dtors sections, and this is a static\n-     constructor or destructor, it must be recorded now.  */\n-  if (DECL_STATIC_CONSTRUCTOR (fndecl)\n-      && !targetm.have_ctors_dtors)\n-    static_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n-  if (DECL_STATIC_DESTRUCTOR (fndecl)\n-      && !targetm.have_ctors_dtors)\n-    static_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n+  /* Keep track of functions declared with the \"constructor\" and\n+     \"destructor\" attribute.  */\n+  c_record_cdtor_fn (fndecl);\n \n   /* Finalize the ELF visibility for the function.  */\n   c_determine_visibility (fndecl);\n@@ -7812,24 +7802,6 @@ finish_declspecs (struct c_declspecs *specs)\n   return specs;\n }\n \n-/* Synthesize a function which calls all the global ctors or global\n-   dtors in this file.  This is only used for targets which do not\n-   support .ctors/.dtors sections.  FIXME: Migrate into cgraph.  */\n-static void\n-build_cdtor (int method_type, tree cdtors)\n-{\n-  tree body = 0;\n-\n-  if (!cdtors)\n-    return;\n-\n-  for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n-    append_to_statement_list (build_function_call (TREE_VALUE (cdtors), 0),\n-\t\t\t      &body);\n-\n-  cgraph_build_static_cdtor (method_type, body, DEFAULT_INIT_PRIORITY);\n-}\n-\n /* A subroutine of c_write_global_declarations.  Perform final processing\n    on one file scope's declarations (or the external scope's declarations),\n    GLOBALS.  */\n@@ -7923,11 +7895,9 @@ c_write_global_declarations (void)\n     c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n   c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n \n-  /* Generate functions to call static constructors and destructors\n-     for targets that do not support .ctors/.dtors sections.  These\n-     functions have magic names which are detected by collect2.  */\n-  build_cdtor ('I', static_ctors); static_ctors = 0;\n-  build_cdtor ('D', static_dtors); static_dtors = 0;\n+  /* Call functions declared with the \"constructor\" or \"destructor\"\n+     attribute.  */\n+  c_build_cdtor_fns ();\n \n   /* We're done parsing; proceed to optimize and emit assembly.\n      FIXME: shouldn't be the front end's responsibility to call this.  */"}, {"sha": "2bf12bd923034b5f05fde9aee55676b9b34149c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57a4c089e23551d96817d080a2fce4f9e6408343", "patch": "@@ -1,3 +1,8 @@\n+2007-02-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* semantics.c (expand_or_defer_fn): Call c_record_cdtor_fn.\n+\t* decl2.c (cp_write_gloabl_declarations): Call c_build_cdtor_fns.\n+\n 2007-02-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (static_ctors): Remove."}, {"sha": "a1664b81bcd94a44d62d625a7f4aed1b29f30ecc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=57a4c089e23551d96817d080a2fce4f9e6408343", "patch": "@@ -3289,6 +3289,8 @@ cp_write_global_declarations (void)\n   if (priority_info_map)\n     splay_tree_delete (priority_info_map);\n \n+  c_build_cdtor_fns ();\n+\n   /* Generate any missing aliases.  */\n   maybe_apply_pending_pragma_weaks ();\n "}, {"sha": "6ffc9650fd2d1991ae3c2eb1eb40cb7670aab347", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4c089e23551d96817d080a2fce4f9e6408343/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=57a4c089e23551d96817d080a2fce4f9e6408343", "patch": "@@ -3159,6 +3159,10 @@ expand_or_defer_fn (tree fn)\n       return;\n     }\n \n+  /* Keep track of functions declared with the \"constructor\" and\n+     \"destructor\" attribute.  */\n+  c_record_cdtor_fn (fn);\n+\n   /* We make a decision about linkage for these functions at the end\n      of the compilation.  Until that point, we do not want the back\n      end to output them -- but we do want it to see the bodies of"}]}