{"sha": "e6ca6e2a1fe9c90168499d67f31eb363168275cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjYTZlMmExZmU5YzkwMTY4NDk5ZDY3ZjMxZWIzNjMxNjgyNzVjYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-03T00:07:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-03T00:07:49Z"}, "message": "re PR c++/41090 (Using static label reference in c++ class constructor produces wrong code)\n\n\tPR c++/41090\n\t* decl.c (cp_finish_decl): Add local statics to cfun->local_decls.\n\t* optimize.c (clone_body): Remap their initializers when making base\n\tvariants.\n\t(maybe_clone_body): Complain if multiple clones aren't safe.\n\nFrom-SVN: r156455", "tree": {"sha": "3d22a04c84152bc16b404b618adbabcaffe23712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d22a04c84152bc16b404b618adbabcaffe23712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6ca6e2a1fe9c90168499d67f31eb363168275cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ca6e2a1fe9c90168499d67f31eb363168275cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ca6e2a1fe9c90168499d67f31eb363168275cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ca6e2a1fe9c90168499d67f31eb363168275cc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80ec737fd0c2fe533ec39d8e707b1fbe39425bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ec737fd0c2fe533ec39d8e707b1fbe39425bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ec737fd0c2fe533ec39d8e707b1fbe39425bf9"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "b122aecbe54ad35d54ad12a420cda2f2630c12b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6ca6e2a1fe9c90168499d67f31eb363168275cc", "patch": "@@ -1,3 +1,11 @@\n+2010-02-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/41090\n+\t* decl.c (cp_finish_decl): Add local statics to cfun->local_decls.\n+\t* optimize.c (clone_body): Remap their initializers when making base\n+\tvariants.\n+\t(maybe_clone_body): Complain if multiple clones aren't safe.\n+\n 2010-01-29  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42758"}, {"sha": "a22cf0114fac6ef3cfd75d1e346289346ffb0800", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e6ca6e2a1fe9c90168499d67f31eb363168275cc", "patch": "@@ -5743,7 +5743,18 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       if (DECL_FUNCTION_SCOPE_P (decl)\n \t  && TREE_STATIC (decl)\n \t  && !DECL_ARTIFICIAL (decl))\n-\tpush_local_name (decl);\n+\t{\n+\t  push_local_name (decl);\n+\t  if (DECL_CONSTRUCTOR_P (current_function_decl)\n+\t      || DECL_DESTRUCTOR_P (current_function_decl))\n+\t    /* Normally local_decls is populated during GIMPLE lowering,\n+\t       but [cd]tors are never actually compiled directly.  We need\n+\t       to put statics on the list so we can deal with the label\n+\t       address extension.  */\n+\t    cfun->local_decls = tree_cons (NULL_TREE, decl,\n+\t\t\t\t\t   cfun->local_decls);\n+\t}\n+\n       /* Convert the initializer to the type of DECL, if we have not\n \t already initialized DECL.  */\n       if (!DECL_INITIALIZED_P (decl)"}, {"sha": "5fb769c2c63c50a67581121f7420cb3d411a4a5a", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=e6ca6e2a1fe9c90168499d67f31eb363168275cc", "patch": "@@ -104,6 +104,21 @@ clone_body (tree clone, tree fn, void *arg_map)\n \n   stmts = DECL_SAVED_TREE (fn);\n   walk_tree (&stmts, copy_tree_body_r, &id, NULL);\n+\n+  /* Also remap the initializer of any static variables so that they (in\n+     particular, any label addresses) correspond to the base variant rather\n+     than the abstract one.  */\n+  if (DECL_NAME (clone) == base_dtor_identifier\n+      || DECL_NAME (clone) == base_ctor_identifier)\n+    {\n+      tree decls = DECL_STRUCT_FUNCTION (fn)->local_decls;\n+      for (; decls; decls = TREE_CHAIN (decls))\n+\t{\n+\t  tree decl = TREE_VALUE (decls);\n+\t  walk_tree (&DECL_INITIAL (decl), copy_tree_body_r, &id, NULL);\n+\t}\n+    }\n+\n   append_to_statement_list_force (stmts, &DECL_SAVED_TREE (clone));\n }\n \n@@ -195,6 +210,7 @@ maybe_clone_body (tree fn)\n   bool first = true;\n   bool in_charge_parm_used;\n   int idx;\n+  bool need_alias = false;\n \n   /* We only clone constructors and destructors.  */\n   if (!DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)\n@@ -223,6 +239,11 @@ maybe_clone_body (tree fn)\n     else\n       gcc_unreachable ();\n \n+  /* Remember if we can't have multiple clones for some reason.  We need to\n+     check this before we remap local static initializers in clone_body.  */\n+  if (!tree_versionable_function_p (fn))\n+    need_alias = true;\n+\n   /* We know that any clones immediately follow FN in the TYPE_METHODS\n      list.  */\n   push_to_top_level ();\n@@ -314,6 +335,17 @@ maybe_clone_body (tree fn)\n \t/* No need to populate body.  */ ;\n       else\n \t{\n+\t  /* If we can't have multiple copies of FN (say, because there's a\n+\t     static local initialized with the address of a label), we need\n+\t     to use an alias for the complete variant.  */\n+\t  if (idx == 1 && need_alias)\n+\t    {\n+\t      if (DECL_STRUCT_FUNCTION (fn)->cannot_be_copied_set)\n+\t\tsorry (DECL_STRUCT_FUNCTION (fn)->cannot_be_copied_reason, fn);\n+\t      else\n+\t\tsorry (\"making multiple clones of %qD\", fn);\n+\t    }\n+\n           /* Remap the parameters.  */\n           decl_map = pointer_map_create ();\n           for (parmno = 0,"}, {"sha": "3a7499d2e97827d62456cbff48f427cb519d17c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6ca6e2a1fe9c90168499d67f31eb363168275cc", "patch": "@@ -1,3 +1,8 @@\n+2010-02-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/41090\n+\t* g++.dg/ext/label13.C: New.\n+\n 2010-02-02  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/42650"}, {"sha": "5f3c0f5cb381cc30e4b025fb97818dd467005544", "filename": "gcc/testsuite/g++.dg/ext/label13.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ca6e2a1fe9c90168499d67f31eb363168275cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel13.C?ref=e6ca6e2a1fe9c90168499d67f31eb363168275cc", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/41090\n+// { dg-do run }\n+// { dg-options \"\" }\n+\n+int i;\n+struct C\n+{\n+  C()\n+  {\n+    static void *labelref = &&label;\n+    goto *labelref;\n+  label: i = 1;\n+  }\n+};\n+\n+int main()\n+{\n+  C c;\n+  return (i != 1);\n+}"}]}