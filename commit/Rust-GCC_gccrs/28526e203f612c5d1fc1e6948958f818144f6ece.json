{"sha": "28526e203f612c5d1fc1e6948958f818144f6ece", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1MjZlMjAzZjYxMmM1ZDFmYzFlNjk0ODk1OGY4MTgxNDRmNmVjZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2004-10-21T10:51:02Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2004-10-21T10:51:02Z"}, "message": "re PR target/18004 (ICE in output_constant_pool_2 for aligned(1) float in struct)\n\n\tPR 18004.\n\t* expmed.c (store_bit_field): Pass original 'value' before\n\trecursing.\n\nFrom-SVN: r89369", "tree": {"sha": "7bb761ab9af2e4180138a66d4d0fb67655d3745b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bb761ab9af2e4180138a66d4d0fb67655d3745b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28526e203f612c5d1fc1e6948958f818144f6ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28526e203f612c5d1fc1e6948958f818144f6ece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28526e203f612c5d1fc1e6948958f818144f6ece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28526e203f612c5d1fc1e6948958f818144f6ece/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be3d702cc47e210ccf01db87bd9a2d451c20b677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3d702cc47e210ccf01db87bd9a2d451c20b677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3d702cc47e210ccf01db87bd9a2d451c20b677"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "af5b63b1adafbe3247c4b81fdbc32c161efb23fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28526e203f612c5d1fc1e6948958f818144f6ece/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28526e203f612c5d1fc1e6948958f818144f6ece/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28526e203f612c5d1fc1e6948958f818144f6ece", "patch": "@@ -1,3 +1,9 @@\n+2004-10-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR 18004.\n+\t* expmed.c (store_bit_field): Pass original 'value' before\n+\trecursing.\n+\n 2004-10-21  Nicolas Pitre <nico@cam.org>\n \n \t* config/arm/ieee754-sf.S: Large speed improvements. Fix NAN handling."}, {"sha": "67224413e8a928832d38851316edb7f131b2fd79", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28526e203f612c5d1fc1e6948958f818144f6ece/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28526e203f612c5d1fc1e6948958f818144f6ece/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=28526e203f612c5d1fc1e6948958f818144f6ece", "patch": "@@ -338,6 +338,7 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   unsigned HOST_WIDE_INT bitpos = bitnum % unit;\n   rtx op0 = str_rtx;\n   int byte_offset;\n+  rtx orig_value;\n \n   enum machine_mode op_mode = mode_for_extraction (EP_insv, 3);\n \n@@ -601,6 +602,7 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n      corresponding size.  This can occur on a machine with 64 bit registers\n      that uses SFmode for float.  This can also occur for unaligned float\n      structure fields.  */\n+  orig_value = value;\n   if (GET_MODE_CLASS (GET_MODE (value)) != MODE_INT\n       && GET_MODE_CLASS (GET_MODE (value)) != MODE_PARTIAL_INT)\n     value = gen_lowpart ((GET_MODE (value) == VOIDmode\n@@ -667,7 +669,7 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t  /* Fetch that unit, store the bitfield in it, then store\n \t     the unit.  */\n \t  tempreg = copy_to_reg (op0);\n-\t  store_bit_field (tempreg, bitsize, bitpos, fieldmode, value);\n+\t  store_bit_field (tempreg, bitsize, bitpos, fieldmode, orig_value);\n \t  emit_move_insn (op0, tempreg);\n \t  return value;\n \t}"}]}