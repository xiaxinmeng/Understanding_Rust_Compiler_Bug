{"sha": "413232a55b960c9b207abf14eea4a8dd247c3e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEzMjMyYTU1Yjk2MGM5YjIwN2FiZjE0ZWVhNGE4ZGQyNDdjM2U5MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-22T10:05:59Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-22T10:05:59Z"}, "message": "forwprop: Fix ICE when building an identity constructor [PR94700]\n\nThis is really PR94683 part 2, handling the case in which the vector is\nan identity and so doesn't need a VEC_PERM_EXPR.  I should have realised\nat the time that the other arm of the \"if\" would need the same fix.\n\n2020-04-22  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/94700\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): When processing\n\tan identity constructor, use a VIEW_CONVERT_EXPR to handle mixtures\n\tof similarly-structured but distinct vector types.\n\ngcc/testsuite/\n\tPR tree-optimization/94700\n\t* gcc.target/aarch64/sve/acle/general/pr94700.c: New test.", "tree": {"sha": "e1a363d936f81df4d2655ffc24f93287f3aa39c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1a363d936f81df4d2655ffc24f93287f3aa39c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/413232a55b960c9b207abf14eea4a8dd247c3e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413232a55b960c9b207abf14eea4a8dd247c3e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413232a55b960c9b207abf14eea4a8dd247c3e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413232a55b960c9b207abf14eea4a8dd247c3e90/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56b15072aa41633235be57851ab342114e0bacba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b15072aa41633235be57851ab342114e0bacba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b15072aa41633235be57851ab342114e0bacba"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "5cdd4f4080069ac40c92f2bdb239922efc461c1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=413232a55b960c9b207abf14eea4a8dd247c3e90", "patch": "@@ -1,3 +1,10 @@\n+2020-04-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94700\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): When processing\n+\tan identity constructor, use a VIEW_CONVERT_EXPR to handle mixtures\n+\tof similarly-structured but distinct vector types.\n+\n 2020-04-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/94647"}, {"sha": "7edcbbf433a245830918bc09823e43cb16c83c3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=413232a55b960c9b207abf14eea4a8dd247c3e90", "patch": "@@ -1,3 +1,8 @@\n+2020-04-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94700\n+\t* gcc.target/aarch64/sve/acle/general/pr94700.c: New test.\n+\n 2020-04-22 Iain Sandoe <iain@sandoe.co.uk>\n \n \tPR c++/94682"}, {"sha": "1feac60d8e9ca335adba320cd2bd6b9178bb4cdd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr94700.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr94700.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr94700.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr94700.c?ref=413232a55b960c9b207abf14eea4a8dd247c3e90", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <arm_sve.h>\n+\n+typedef float v8sf __attribute__((vector_size(32)));\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+** test:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1.0\n+**\tfdiv\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+svfloat32_t\n+test (svbool_t pg, svfloat32_t x, svfloat32_t y)\n+{\n+  v8sf a = svadd_x (pg, x, 1);\n+  v8sf b = { a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7] };\n+  return svdiv_x (pg, b, y);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif"}, {"sha": "8ee5450b94cc704a374d153256cbed82d9403be3", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413232a55b960c9b207abf14eea4a8dd247c3e90/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=413232a55b960c9b207abf14eea4a8dd247c3e90", "patch": "@@ -2475,7 +2475,18 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t  orig[0] = gimple_assign_lhs (lowpart);\n \t}\n       if (conv_code == ERROR_MARK)\n-\tgimple_assign_set_rhs_from_tree (gsi, orig[0]);\n+\t{\n+\t  tree src_type = TREE_TYPE (orig[0]);\n+\t  if (!useless_type_conversion_p (type, src_type))\n+\t    {\n+\t      gcc_assert (!targetm.compatible_vector_types_p (type, src_type));\n+\t      tree rhs = build1 (VIEW_CONVERT_EXPR, type, orig[0]);\n+\t      orig[0] = make_ssa_name (type);\n+\t      gassign *assign = gimple_build_assign (orig[0], rhs);\n+\t      gsi_insert_before (gsi, assign, GSI_SAME_STMT);\n+\t    }\n+\t  gimple_assign_set_rhs_from_tree (gsi, orig[0]);\n+\t}\n       else\n \tgimple_assign_set_rhs_with_ops (gsi, conv_code, orig[0],\n \t\t\t\t\tNULL_TREE, NULL_TREE);"}]}