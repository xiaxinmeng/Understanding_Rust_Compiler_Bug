{"sha": "f89862751006da3e7b6acebfab32c9f21d8ee41f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5ODYyNzUxMDA2ZGEzZTdiNmFjZWJmYWIzMmM5ZjIxZDhlZTQxZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-04-24T16:31:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-04-24T16:31:31Z"}, "message": "re PR c++/10337 (\"ambiguous overload\"-error for non-ambiguous situation)\n\ncp:\n\tPR c++/10337\n\t* call.c (joust): Don't warn about conversion ops that are exact\n\tor cv-conversions. Rearrange to avoid multiple type comparisons.\ntestsuite:\n\tPR c++/10337\n\t* g++.dg/warn/conv1.C: New test.\n\t* g++.old-deja/g++.other/conv7.C: Adjust.\n\t* g++.old-deja/g++.other/overload14.C: Adjust.\n\nFrom-SVN: r66038", "tree": {"sha": "088ee373a82de7795017a0da0ea79afd28588cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088ee373a82de7795017a0da0ea79afd28588cd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f89862751006da3e7b6acebfab32c9f21d8ee41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89862751006da3e7b6acebfab32c9f21d8ee41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89862751006da3e7b6acebfab32c9f21d8ee41f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89862751006da3e7b6acebfab32c9f21d8ee41f/comments", "author": null, "committer": null, "parents": [{"sha": "26f74aa3f74d5efd8cd37bfe3700f16f400189c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f74aa3f74d5efd8cd37bfe3700f16f400189c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f74aa3f74d5efd8cd37bfe3700f16f400189c1"}], "stats": {"total": 125, "additions": 89, "deletions": 36}, "files": [{"sha": "403a64270177676a21b54880f3111603f4e0d3ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f89862751006da3e7b6acebfab32c9f21d8ee41f", "patch": "@@ -1,3 +1,9 @@\n+2003-04-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/10337\n+\t* call.c (joust): Don't warn about conversion ops that are exact\n+\tor cv-conversions. Rearrange to avoid multiple type comparisons.\n+\n 2003-04-23  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10471"}, {"sha": "ed97bcb95ec81ce70c923ab13e09042fdb0109d3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f89862751006da3e7b6acebfab32c9f21d8ee41f", "patch": "@@ -5757,44 +5757,51 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn)\n      either between a constructor and a conversion op, or between two\n      conversion ops.  */\n   if (winner && cand1->second_conv\n-      && ((DECL_CONSTRUCTOR_P (cand1->fn)\n-\t   != DECL_CONSTRUCTOR_P (cand2->fn))\n-\t  /* Don't warn if the two conv ops convert to the same type...  */\n-\t  || (! DECL_CONSTRUCTOR_P (cand1->fn)\n-\t      && ! same_type_p (TREE_TYPE (TREE_TYPE (cand1->fn)),\n-\t\t\t\tTREE_TYPE (TREE_TYPE (cand2->fn))))))\n-    {\n-      int comp = compare_ics (cand1->second_conv, cand2->second_conv);\n-      if (comp != winner)\n+      && (!DECL_CONSTRUCTOR_P (cand1->fn) || !DECL_CONSTRUCTOR_P (cand2->fn))\n+      && winner != compare_ics (cand1->second_conv, cand2->second_conv))\n+    {\n+      struct z_candidate *w, *l;\n+      bool give_warning = false;\n+      \n+      if (winner == 1)\n+\tw = cand1, l = cand2;\n+      else\n+\tw = cand2, l = cand1;\n+      \n+      /* We don't want to complain about `X::operator T1 ()'\n+\t beating `X::operator T2 () const', when T2 is a no less\n+\t cv-qualified version of T1. */\n+      if (DECL_CONTEXT (w->fn) == DECL_CONTEXT (l->fn)\n+\t  && !DECL_CONSTRUCTOR_P (w->fn) && !DECL_CONSTRUCTOR_P (l->fn))\n \t{\n-\t  struct z_candidate *w, *l;\n-\t  tree convn;\n-\t  if (winner == 1)\n-\t    w = cand1, l = cand2;\n-\t  else\n-\t    w = cand2, l = cand1;\n-\t  if (DECL_CONTEXT (cand1->fn) == DECL_CONTEXT (cand2->fn)\n-\t      && ! DECL_CONSTRUCTOR_P (cand1->fn)\n-\t      && ! DECL_CONSTRUCTOR_P (cand2->fn)\n-\t      && (convn = standard_conversion\n-\t\t  (TREE_TYPE (TREE_TYPE (l->fn)),\n-\t\t   TREE_TYPE (TREE_TYPE (w->fn)), NULL_TREE))\n-\t      && TREE_CODE (convn) == QUAL_CONV)\n-\t    /* Don't complain about `operator char *()' beating\n-\t       `operator const char *() const'.  */;\n-\t  else if (warn)\n+\t  tree t = TREE_TYPE (TREE_TYPE (l->fn));\n+\t  tree f = TREE_TYPE (TREE_TYPE (w->fn));\n+\t  \n+\t  if (TREE_CODE (t) == TREE_CODE (f) && POINTER_TYPE_P (t))\n \t    {\n-\t      tree source = source_type (TREE_VEC_ELT (w->convs, 0));\n-\t      if (! DECL_CONSTRUCTOR_P (w->fn))\n-\t\tsource = TREE_TYPE (source);\n-\t      warning (\"choosing `%D' over `%D'\", w->fn, l->fn);\n-\t      warning (\"  for conversion from `%T' to `%T'\",\n-\t\t\t  source, TREE_TYPE (w->second_conv));\n-\t      warning (\"  because conversion sequence for the argument is better\");\n+\t      t = TREE_TYPE (t);\n+\t      f = TREE_TYPE (f);\n \t    }\n-\t  else\n-\t    add_warning (w, l);\n+\t  if (!comp_ptr_ttypes (t, f))\n+\t    give_warning = true;\n+\t}\n+      else\n+\tgive_warning = true;\n+      \n+      if (!give_warning)\n+\t/*NOP*/;\n+      else if (warn)\n+\t{\n+\t  tree source = source_type (TREE_VEC_ELT (w->convs, 0));\n+\t  if (! DECL_CONSTRUCTOR_P (w->fn))\n+\t    source = TREE_TYPE (source);\n+\t  warning (\"choosing `%D' over `%D'\", w->fn, l->fn);\n+\t  warning (\"  for conversion from `%T' to `%T'\",\n+\t\t   source, TREE_TYPE (w->second_conv));\n+\t  warning (\"  because conversion sequence for the argument is better\");\n \t}\n+      else\n+\tadd_warning (w, l);\n     }\n \n   if (winner)"}, {"sha": "303bbbc79e743e960253b5159b7cf4a642d13400", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f89862751006da3e7b6acebfab32c9f21d8ee41f", "patch": "@@ -1,3 +1,10 @@\n+2003-04-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/10337\n+\t* g++.dg/warn/conv1.C: New test.\n+\t* g++.old-deja/g++.other/conv7.C: Adjust.\n+\t* g++.old-deja/g++.other/overload14.C: Adjust.\n+\n 2003-04-23  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10471"}, {"sha": "d06cbd5863e2bcbc377dfa74f8dc7d9f48c3f97e", "filename": "gcc/testsuite/g++.dg/warn/conv1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv1.C?ref=f89862751006da3e7b6acebfab32c9f21d8ee41f", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 20 Apr 2003 <nathan@codesourcery.com>\n+\n+// PR 10337, unneeded warning\n+\n+class A {\n+  public:\n+  A() {}\n+};\n+\n+class B : public A {\n+  public:\n+  B() {}\n+  void operator=(const A& b) {}\n+  void operator=(const B& b) {}\n+};\n+\n+class C {\n+  public:\n+  C() {}\n+  operator B &() { return _b; }\n+  operator const B &() const { return _b; }\n+  \n+  B _b;\n+};\n+\n+int main() {\n+  B b;\n+  C c;\n+  b = c;\n+}"}, {"sha": "8bb534c226305ec7d4a8931366a11630d25e6713", "filename": "gcc/testsuite/g++.old-deja/g++.other/conv7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv7.C?ref=f89862751006da3e7b6acebfab32c9f21d8ee41f", "patch": "@@ -40,6 +40,6 @@ yyparse()\n {\n \n   iterator_template<IdlDeclarator_bar,IdlDeclarator_bar&,foo*,foo*> declIter;\n-  const IdlDeclarator& declarator = *declIter; // WARNING - choosing\n+  const IdlDeclarator& declarator = *declIter;\n   return 1;\n }"}, {"sha": "6ef73a6f3e6d6987876815c28b858d4c3dd800bf", "filename": "gcc/testsuite/g++.old-deja/g++.other/overload14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89862751006da3e7b6acebfab32c9f21d8ee41f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload14.C?ref=f89862751006da3e7b6acebfab32c9f21d8ee41f", "patch": "@@ -26,6 +26,6 @@ A::operator A::B ()\n \n int main ()\n {\n-  (A::C) A ();\t\t// WARNING - \n+  (A::C) A ();\n   return 0;\n }"}]}