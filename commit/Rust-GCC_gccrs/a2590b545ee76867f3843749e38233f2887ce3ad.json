{"sha": "a2590b545ee76867f3843749e38233f2887ce3ad", "node_id": "C_kwDOANBUbNoAKGEyNTkwYjU0NWVlNzY4NjdmMzg0Mzc0OWUzODIzM2YyODg3Y2UzYWQ", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-08T17:31:30Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:49Z"}, "message": "aarch64: Use type-qualified builtins for PMUL[L] Neon intrinsics\n\nDeclare poly type-qualified builtins and use them for PMUL[L] Neon\nintrinsics. This removes the need for casts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Use poly type\n\tqualifier in builtin generator macros.\n\t* config/aarch64/arm_neon.h (vmul_p8): Use type-qualified\n\tbuiltin and remove casts.\n\t(vmulq_p8): Likewise.\n\t(vmull_high_p8): Likewise.\n\t(vmull_p8): Likewise.", "tree": {"sha": "2208c23ef9c296bec56f855a9fcd03b475b31a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2208c23ef9c296bec56f855a9fcd03b475b31a49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2590b545ee76867f3843749e38233f2887ce3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2590b545ee76867f3843749e38233f2887ce3ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2590b545ee76867f3843749e38233f2887ce3ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2590b545ee76867f3843749e38233f2887ce3ad/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515ef83098325e9e3b9f7e74b11911fb9ef6daf2"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "4e298de5646c78bfaf82752274b8530497971ff3", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2590b545ee76867f3843749e38233f2887ce3ad/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2590b545ee76867f3843749e38233f2887ce3ad/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=a2590b545ee76867f3843749e38233f2887ce3ad", "patch": "@@ -45,9 +45,9 @@\n \n   BUILTIN_VDC (COMBINE, combine, 0, AUTO_FP)\n   VAR1 (COMBINEP, combine, 0, NONE, di)\n-  BUILTIN_VB (BINOP, pmul, 0, NONE)\n-  VAR1 (BINOP, pmull, 0, NONE, v8qi)\n-  VAR1 (BINOP, pmull_hi, 0, NONE, v16qi)\n+  BUILTIN_VB (BINOPP, pmul, 0, NONE)\n+  VAR1 (BINOPP, pmull, 0, NONE, v8qi)\n+  VAR1 (BINOPP, pmull_hi, 0, NONE, v16qi)\n   BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, FP)\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2, FP)\n   BUILTIN_VDQ_I (BINOP, addp, 0, NONE)"}, {"sha": "236358774abd271730ef4a2ac0f4221588e66daf", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2590b545ee76867f3843749e38233f2887ce3ad/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2590b545ee76867f3843749e38233f2887ce3ad/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=a2590b545ee76867f3843749e38233f2887ce3ad", "patch": "@@ -1007,8 +1007,7 @@ __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmul_p8 (poly8x8_t __a, poly8x8_t __b)\n {\n-  return (poly8x8_t) __builtin_aarch64_pmulv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t (int8x8_t) __b);\n+  return __builtin_aarch64_pmulv8qi_ppp (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -1071,8 +1070,7 @@ __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmulq_p8 (poly8x16_t __a, poly8x16_t __b)\n {\n-  return (poly8x16_t) __builtin_aarch64_pmulv16qi ((int8x16_t) __a,\n-\t\t\t\t\t\t   (int8x16_t) __b);\n+  return __builtin_aarch64_pmulv16qi_ppp (__a, __b);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -7716,8 +7714,7 @@ __extension__ extern __inline poly16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_p8 (poly8x16_t __a, poly8x16_t __b)\n {\n-  return (poly16x8_t) __builtin_aarch64_pmull_hiv16qi ((int8x16_t) __a,\n-\t\t\t\t\t\t       (int8x16_t) __b);\n+  return __builtin_aarch64_pmull_hiv16qi_ppp (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -7850,8 +7847,7 @@ __extension__ extern __inline poly16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_p8 (poly8x8_t __a, poly8x8_t __b)\n {\n-  return (poly16x8_t) __builtin_aarch64_pmullv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t   (int8x8_t) __b);\n+  return __builtin_aarch64_pmullv8qi_ppp (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t"}]}