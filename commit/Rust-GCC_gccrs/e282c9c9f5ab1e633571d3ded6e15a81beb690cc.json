{"sha": "e282c9c9f5ab1e633571d3ded6e15a81beb690cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4MmM5YzlmNWFiMWU2MzM1NzFkM2RlZDZlMTVhODFiZWI2OTBjYw==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "2000-08-23T17:03:03Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-08-23T17:03:03Z"}, "message": "cp-demangle.c (result_close_template_list): Remove function.\n\n\t* cp-demangle.c (result_close_template_list): Remove function.\n\t(result_add_separated_char): New function.\n\t(result_open_template_list): New macro.\n\t(result_close_template_list): Likewise.\n\t(demangle_prefix): Don't set template_p if the\n\tprefix ends with a ctor name.\n\t(demangle_type_ptr): Remove duplicate RETURN_IF_ERROR.\n\t(demangle_type): Check for template args after substitution.\n\t(demangle_template_args): Use result_open_template_list.\n\nFrom-SVN: r35915", "tree": {"sha": "ff29d3583bf70f781650b6dbf149636c9a8cbc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff29d3583bf70f781650b6dbf149636c9a8cbc18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e282c9c9f5ab1e633571d3ded6e15a81beb690cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e282c9c9f5ab1e633571d3ded6e15a81beb690cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e282c9c9f5ab1e633571d3ded6e15a81beb690cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e282c9c9f5ab1e633571d3ded6e15a81beb690cc/comments", "author": null, "committer": null, "parents": [{"sha": "b3102f834d37917168e7aee18a67d9ecc69d395a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3102f834d37917168e7aee18a67d9ecc69d395a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3102f834d37917168e7aee18a67d9ecc69d395a"}], "stats": {"total": 97, "additions": 79, "deletions": 18}, "files": [{"sha": "848b9d32f95f3c71a894375bda889d6c1f4e784e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e282c9c9f5ab1e633571d3ded6e15a81beb690cc/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e282c9c9f5ab1e633571d3ded6e15a81beb690cc/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e282c9c9f5ab1e633571d3ded6e15a81beb690cc", "patch": "@@ -1,3 +1,15 @@\n+2000-08-23  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* cp-demangle.c (result_close_template_list): Remove function.\n+\t(result_add_separated_char): New function.\n+\t(result_open_template_list): New macro.\n+\t(result_close_template_list): Likewise.\n+\t(demangle_prefix): Don't set template_p if the\n+\tprefix ends with a ctor name.\n+\t(demangle_type_ptr): Remove duplicate RETURN_IF_ERROR.\n+\t(demangle_type): Check for template args after substitution.\n+\t(demangle_template_args): Use result_open_template_list.\n+\t\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* pexecute.c:  Don't use vfork.  Initialize 'pid' before retry loop."}, {"sha": "cd3cc1e5f1bc0805efccc8f18c932c7a52b8203b", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 67, "deletions": 18, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e282c9c9f5ab1e633571d3ded6e15a81beb690cc/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e282c9c9f5ab1e633571d3ded6e15a81beb690cc/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=e282c9c9f5ab1e633571d3ded6e15a81beb690cc", "patch": "@@ -196,8 +196,8 @@ static string_list_t string_list_new\n   PARAMS ((int));\n static void string_list_delete\n   PARAMS ((string_list_t));\n-static status_t result_close_template_list \n-  PARAMS ((demangling_t));\n+static status_t result_add_separated_char\n+  PARAMS ((demangling_t, char));\n static status_t result_push\n   PARAMS ((demangling_t));\n static string_list_t result_pop\n@@ -297,6 +297,13 @@ static void demangling_delete\n   (dyn_string_append_space (&(DM)->result->string)                      \\\n    ? STATUS_OK : STATUS_ALLOCATION_FAILED)\n \n+/* Appends a (less-than, greater-than) character to the result in DM\n+   to (open, close) a template argument or parameter list.  Appends a\n+   space first if necessary to prevent spurious elision of angle\n+   brackets with the previous character.  */\n+#define result_open_template_list(DM) result_add_separated_char(DM, '<')\n+#define result_close_template_list(DM) result_add_separated_char(DM, '>')\n+\n /* Appends a base 10 representation of VALUE to DS.  STATUS_OK on\n    success.  On failure, deletes DS and returns an error code.  */\n \n@@ -378,28 +385,27 @@ string_list_delete (node)\n     }\n }\n \n-/* Appends a greater-than character to the demangled result.  If the\n-   last character is a greater-than character, a space is inserted\n-   first, so that the two greater-than characters don't look like a\n-   right shift token.  */\n+/* Appends CHARACTER to the demangled result.  If the current trailing\n+   character of the result is CHARACTER, a space is inserted first.  */\n \n static status_t\n-result_close_template_list (dm)\n+result_add_separated_char (dm, character)\n      demangling_t dm;\n+     char character;\n {\n   dyn_string_t s = &dm->result->string;\n \n   /* Add a space if the last character is already a closing angle\n      bracket, so that a nested template arg list doesn't look like\n      it's closed with a right-shift operator.  */\n-  if (dyn_string_last_char (s) == '>')\n+  if (dyn_string_last_char (s) == character)\n     {\n       if (!dyn_string_append_char (s, ' '))\n \treturn STATUS_ALLOCATION_FAILED;\n     }\n \n   /* Add closing angle brackets.  */\n-  if (!dyn_string_append_char (s, '>'))\n+  if (!dyn_string_append_char (s, character))\n     return STATUS_ALLOCATION_FAILED;\n \n   return STATUS_OK;\n@@ -1108,6 +1114,10 @@ demangle_prefix (dm, template_p)\n   int start = substitution_start (dm);\n   int nested = 0;\n \n+  /* This flag is set to non-zero if the most recent (rightmost)\n+     element in the prefix was a constructor.  */\n+  int last_was_ctor = 0;\n+\n   /* TEMPLATE_P is updated as we decend the nesting chain.  After\n      <template-args>, it is set to non-zero; after everything else it\n      is set to zero.  */\n@@ -1124,6 +1134,15 @@ demangle_prefix (dm, template_p)\n \n       peek = peek_char (dm);\n       \n+      /* We'll initialize last_was_ctor to false, and set it to true\n+\t if we end up demangling a constructor name.  However, make\n+\t sure we're not actually about to demangle template arguments\n+\t -- if so, this is the <template-args> following a\n+\t <template-prefix>, so we'll want the previous flag value\n+\t around.  */\n+      if (peek != 'I')\n+\tlast_was_ctor = 0;\n+\n       if (IS_DIGIT ((unsigned char) peek)\n \t  || (peek >= 'a' && peek <= 'z')\n \t  || peek == 'C' || peek == 'D'\n@@ -1137,25 +1156,47 @@ demangle_prefix (dm, template_p)\n \n \t  if (peek == 'S')\n \t    /* The substitution determines whether this is a\n-\t       template-id.   */\n+\t       template-id.  */\n \t    RETURN_IF_ERROR (demangle_substitution (dm, template_p, \n \t\t\t\t\t\t    &unused));\n \t  else\n \t    {\n+\t      /* It's just a name.  Remember whether it's a\n+\t\t constructor.  */\n \t      RETURN_IF_ERROR (demangle_unqualified_name (dm));\n \t      *template_p = 0;\n \t    }\n+\n+\t  /* If this element was a constructor name, make a note of\n+\t     that.  */\n+\t  if (peek == 'C')\n+\t    last_was_ctor = 1;\n \t}\n       else if (peek == 'Z')\n \tRETURN_IF_ERROR (demangle_local_name (dm));\n       else if (peek == 'I')\n \t{\n-\t  if (*template_p)\n-\t    return STATUS_INTERNAL_ERROR;\n+\t  /* If the template flag is already set, this is the second\n+             set of template args in a row.  Something is wrong with\n+             the mangled name.  */\n+\t  if (*template_p) \n+\t    return \"Unexpected second consecutive template args in <prefix>.\";\n \t  /* The template name is a substitution candidate.  */\n \t  RETURN_IF_ERROR (substitution_add (dm, start, 0, NOT_TEMPLATE_PARM));\n \t  RETURN_IF_ERROR (demangle_template_args (dm));\n-\t  *template_p = 1;\n+\n+\t  /* Now we want to indicate to the caller that we've\n+\t     demangled template arguments, thus the prefix was a\n+\t     <template-prefix>.  That's so that the caller knows to\n+\t     demangle the function's return type, if this turns out to\n+\t     be a function name.  */\n+\t  if (!last_was_ctor)\n+\t    *template_p = 1;\n+\t  else\n+\t    /* But, if it's a member template constructor, report it\n+\t       as untemplated.  We don't ever want to demangle the\n+\t       return type of a constructor.  */\n+\t    *template_p = 0;\n \t}\n       else if (peek == 'E')\n \t/* All done.  */\n@@ -1904,13 +1945,12 @@ demangle_type_ptr (dm)\n \t}\n       else\n \t{\n-\t  /* No more pointe or reference tokens.  Finish up.  */\n+\t  /* No more pointer or reference tokens.  Finish up.  */\n \t  status = demangle_type (dm);\n \n \t  if (STATUS_NO_ERROR (status))\n \t    status = result_append_string (dm, symbols);\n \t  dyn_string_delete (symbols);\n-\t  RETURN_IF_ERROR (status);\n \n \t  RETURN_IF_ERROR (status);\n \t  return STATUS_OK;\n@@ -2016,8 +2056,17 @@ demangle_type (dm)\n \t   or underscore.  */\n \tpeek_next = peek_char_next (dm);\n \tif (IS_DIGIT (peek_next) || peek_next == '_')\n-\t  RETURN_IF_ERROR (demangle_substitution (dm, &template_p,\n-\t\t\t\t\t\t  &special_std_substitution));\n+\t  {\n+\t    RETURN_IF_ERROR (\n+              demangle_substitution (dm, &template_p,\n+\t\t\t\t     &special_std_substitution));\n+\t    \n+\t    /* The substituted name may have been a template name.\n+\t       Check if template arguments follow, and if so, demangle\n+\t       them.  */\n+\t    if (peek_char (dm) == 'I')\n+\t      RETURN_IF_ERROR (demangle_template_args (dm));\n+\t  }\n \telse\n \t  demangle_class_enum_type (dm, &template_p);\n \tbreak;\n@@ -2440,7 +2489,7 @@ demangle_template_args (dm)\n     return STATUS_ALLOCATION_FAILED;\n \n   RETURN_IF_ERROR (demangle_char (dm, 'I'));\n-  RETURN_IF_ERROR (result_append_char (dm, '<'));\n+  RETURN_IF_ERROR (result_open_template_list (dm));\n   do\n     {\n       string_list_t arg;"}]}