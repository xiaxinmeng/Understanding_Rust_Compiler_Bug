{"sha": "50c6431753ab7961b4330c5f3c7e611ad81e9178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjNjQzMTc1M2FiNzk2MWI0MzMwYzVmM2M3ZTYxMWFkODFlOTE3OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-07-03T02:16:50Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-03T02:16:50Z"}, "message": "* gcc.c-torture/execute/builtin-abs-1.c\n\t* gcc.c-torture/execute/builtin-abs-2.c\n\t* gcc.c-torture/execute/builtin-complex-1.c\n\t* gcc.c-torture/execute/builtins/string-1-lib.c\n\t* gcc.c-torture/execute/builtins/string-1.c\n\t* gcc.c-torture/execute/builtins/string-2-lib.c\n\t* gcc.c-torture/execute/builtins/string-2.c\n\t* gcc.c-torture/execute/builtins/string-3-lib.c\n\t* gcc.c-torture/execute/builtins/string-3.c\n\t* gcc.c-torture/execute/builtins/string-4-lib.c\n\t* gcc.c-torture/execute/builtins/string-4.c\n\t* gcc.c-torture/execute/builtins/string-5-lib.c\n\t* gcc.c-torture/execute/builtins/string-5.c\n\t* gcc.c-torture/execute/builtins/string-6-lib.c\n\t* gcc.c-torture/execute/builtins/string-6.c\n\t* gcc.c-torture/execute/builtins/string-7-lib.c\n\t* gcc.c-torture/execute/builtins/string-7.c\n\t* gcc.c-torture/execute/builtins/string-8-lib.c\n\t* gcc.c-torture/execute/builtins/string-8.c\n\t* gcc.c-torture/execute/builtins/string-9-lib.c\n\t* gcc.c-torture/execute/builtins/string-9.c\n\t* gcc.c-torture/execute/builtins/string-asm-1-lib.c\n\t* gcc.c-torture/execute/builtins/string-asm-1.c\n\t* gcc.c-torture/execute/builtins/string-asm-2-lib.c\n\t* gcc.c-torture/execute/builtins/string-asm-2.c\n\t* gcc.c-torture/execute/stdio-opt-1.c\n\t* gcc.c-torture/execute/stdio-opt-2.c\n\t* gcc.c-torture/execute/stdio-opt-3.c\n\t* gcc.c-torture/execute/string-opt-1.c\n\t* gcc.c-torture/execute/string-opt-10.c\n\t* gcc.c-torture/execute/string-opt-11.c\n\t* gcc.c-torture/execute/string-opt-12.c\n\t* gcc.c-torture/execute/string-opt-13.c\n\t* gcc.c-torture/execute/string-opt-14.c\n\t* gcc.c-torture/execute/string-opt-15.c\n\t* gcc.c-torture/execute/string-opt-16.c\n\t* gcc.c-torture/execute/string-opt-2.c\n\t* gcc.c-torture/execute/string-opt-6.c\n\t* gcc.c-torture/execute/string-opt-7.c\n\t* gcc.c-torture/execute/string-opt-8.c:\n\tReplace with ...\n\n\t* gcc.c-torture/execute/builtins/abs-2.c\n\t* gcc.c-torture/execute/builtins/abs-3.c\n\t* gcc.c-torture/execute/builtins/complex-1.c\n\t* gcc.c-torture/execute/builtins/fprintf.c\n\t* gcc.c-torture/execute/builtins/fputs.c\n\t* gcc.c-torture/execute/builtins/memcmp.c\n\t* gcc.c-torture/execute/builtins/memmove.c\n\t* gcc.c-torture/execute/builtins/memops-asm.c\n\t* gcc.c-torture/execute/builtins/mempcpy-2.c\n\t* gcc.c-torture/execute/builtins/mempcpy.c\n\t* gcc.c-torture/execute/builtins/memset.c\n\t* gcc.c-torture/execute/builtins/printf.c\n\t* gcc.c-torture/execute/builtins/sprintf.c\n\t* gcc.c-torture/execute/builtins/strcat.c\n\t* gcc.c-torture/execute/builtins/strchr.c\n\t* gcc.c-torture/execute/builtins/strcmp.c\n\t* gcc.c-torture/execute/builtins/strcpy.c\n\t* gcc.c-torture/execute/builtins/strcspn.c\n\t* gcc.c-torture/execute/builtins/strlen-2.c\n\t* gcc.c-torture/execute/builtins/strlen.c\n\t* gcc.c-torture/execute/builtins/strncat.c\n\t* gcc.c-torture/execute/builtins/strncmp-2.c\n\t* gcc.c-torture/execute/builtins/strncmp.c\n\t* gcc.c-torture/execute/builtins/strncpy.c\n\t* gcc.c-torture/execute/builtins/strpbrk.c\n\t* gcc.c-torture/execute/builtins/strpcpy-2.c\n\t* gcc.c-torture/execute/builtins/strpcpy.c\n\t* gcc.c-torture/execute/builtins/strrchr.c\n\t* gcc.c-torture/execute/builtins/strspn.c\n\t* gcc.c-torture/execute/builtins/strstr-asm.c\n\t* gcc.c-torture/execute/builtins/strstr.c:\n\t... these new files.\n\n\t* gcc.c-torture/execute/builtins/abs-2-lib.c\n\t* gcc.c-torture/execute/builtins/abs-3-lib.c\n\t* gcc.c-torture/execute/builtins/complex-1-lib.c\n\t* gcc.c-torture/execute/builtins/fprintf-lib.c\n\t* gcc.c-torture/execute/builtins/fputs-lib.c\n\t* gcc.c-torture/execute/builtins/memcmp-lib.c\n\t* gcc.c-torture/execute/builtins/memmove-lib.c\n\t* gcc.c-torture/execute/builtins/memops-asm-lib.c\n\t* gcc.c-torture/execute/builtins/mempcpy-2-lib.c\n\t* gcc.c-torture/execute/builtins/mempcpy-lib.c\n\t* gcc.c-torture/execute/builtins/memset-lib.c\n\t* gcc.c-torture/execute/builtins/printf-lib.c\n\t* gcc.c-torture/execute/builtins/sprintf-lib.c\n\t* gcc.c-torture/execute/builtins/strcat-lib.c\n\t* gcc.c-torture/execute/builtins/strchr-lib.c\n\t* gcc.c-torture/execute/builtins/strcmp-lib.c\n\t* gcc.c-torture/execute/builtins/strcpy-lib.c\n\t* gcc.c-torture/execute/builtins/strcspn-lib.c\n\t* gcc.c-torture/execute/builtins/strlen-2-lib.c\n\t* gcc.c-torture/execute/builtins/strlen-lib.c\n\t* gcc.c-torture/execute/builtins/strncat-lib.c\n\t* gcc.c-torture/execute/builtins/strncmp-2-lib.c\n\t* gcc.c-torture/execute/builtins/strncmp-lib.c\n\t* gcc.c-torture/execute/builtins/strncpy-lib.c\n\t* gcc.c-torture/execute/builtins/strpbrk-lib.c\n\t* gcc.c-torture/execute/builtins/strpcpy-2-lib.c\n\t* gcc.c-torture/execute/builtins/strpcpy-lib.c\n\t* gcc.c-torture/execute/builtins/strrchr-lib.c\n\t* gcc.c-torture/execute/builtins/strspn-lib.c\n\t* gcc.c-torture/execute/builtins/strstr-asm-lib.c\n\t* gcc.c-torture/execute/builtins/strstr-lib.c\n\t* gcc.c-torture/execute/builtins/lib/abs.c\n\t* gcc.c-torture/execute/builtins/lib/fprintf.c\n\t* gcc.c-torture/execute/builtins/lib/memset.c\n\t* gcc.c-torture/execute/builtins/lib/printf.c\n\t* gcc.c-torture/execute/builtins/lib/sprintf.c\n\t* gcc.c-torture/execute/builtins/lib/strcpy.c\n\t* gcc.c-torture/execute/builtins/lib/strcspn.c\n\t* gcc.c-torture/execute/builtins/lib/strncat.c\n\t* gcc.c-torture/execute/builtins/lib/strncmp.c\n\t* gcc.c-torture/execute/builtins/lib/strncpy.c\n\t* gcc.c-torture/execute/builtins/lib/strpbrk.c\n\t* gcc.c-torture/execute/builtins/lib/strspn.c\n\t* gcc.c-torture/execute/builtins/lib/strstr.c:\n\tNew files containing support routines.\n\n\t* gcc.c-torture/execute/builtins/abs-1.c: Remove unnecessary\n\tdeclaration.\n\t* gcc.c-torture/execute/builtins/lib/main.c: Define link_error\n\twhen not optimizing.\n\nFrom-SVN: r84044", "tree": {"sha": "8ae3364380b62899fdce8dab24912fcca4a476d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ae3364380b62899fdce8dab24912fcca4a476d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50c6431753ab7961b4330c5f3c7e611ad81e9178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c6431753ab7961b4330c5f3c7e611ad81e9178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c6431753ab7961b4330c5f3c7e611ad81e9178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c6431753ab7961b4330c5f3c7e611ad81e9178/comments", "author": null, "committer": null, "parents": [{"sha": "e1e93ad8abcabbefa292506d8ae08dd66f9011a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e93ad8abcabbefa292506d8ae08dd66f9011a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e93ad8abcabbefa292506d8ae08dd66f9011a2"}], "stats": {"total": 1743, "additions": 983, "deletions": 760}, "files": [{"sha": "2ba74a1b3dd0540cccb305a8545870c782347801", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -1,3 +1,131 @@\n+2004-07-02  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/builtin-abs-1.c\n+\t* gcc.c-torture/execute/builtin-abs-2.c\n+\t* gcc.c-torture/execute/builtin-complex-1.c\n+\t* gcc.c-torture/execute/builtins/string-1-lib.c\n+\t* gcc.c-torture/execute/builtins/string-1.c\n+\t* gcc.c-torture/execute/builtins/string-2-lib.c\n+\t* gcc.c-torture/execute/builtins/string-2.c\n+\t* gcc.c-torture/execute/builtins/string-3-lib.c\n+\t* gcc.c-torture/execute/builtins/string-3.c\n+\t* gcc.c-torture/execute/builtins/string-4-lib.c\n+\t* gcc.c-torture/execute/builtins/string-4.c\n+\t* gcc.c-torture/execute/builtins/string-5-lib.c\n+\t* gcc.c-torture/execute/builtins/string-5.c\n+\t* gcc.c-torture/execute/builtins/string-6-lib.c\n+\t* gcc.c-torture/execute/builtins/string-6.c\n+\t* gcc.c-torture/execute/builtins/string-7-lib.c\n+\t* gcc.c-torture/execute/builtins/string-7.c\n+\t* gcc.c-torture/execute/builtins/string-8-lib.c\n+\t* gcc.c-torture/execute/builtins/string-8.c\n+\t* gcc.c-torture/execute/builtins/string-9-lib.c\n+\t* gcc.c-torture/execute/builtins/string-9.c\n+\t* gcc.c-torture/execute/builtins/string-asm-1-lib.c\n+\t* gcc.c-torture/execute/builtins/string-asm-1.c\n+\t* gcc.c-torture/execute/builtins/string-asm-2-lib.c\n+\t* gcc.c-torture/execute/builtins/string-asm-2.c\n+\t* gcc.c-torture/execute/stdio-opt-1.c\n+\t* gcc.c-torture/execute/stdio-opt-2.c\n+\t* gcc.c-torture/execute/stdio-opt-3.c\n+\t* gcc.c-torture/execute/string-opt-1.c\n+\t* gcc.c-torture/execute/string-opt-10.c\n+\t* gcc.c-torture/execute/string-opt-11.c\n+\t* gcc.c-torture/execute/string-opt-12.c\n+\t* gcc.c-torture/execute/string-opt-13.c\n+\t* gcc.c-torture/execute/string-opt-14.c\n+\t* gcc.c-torture/execute/string-opt-15.c\n+\t* gcc.c-torture/execute/string-opt-16.c\n+\t* gcc.c-torture/execute/string-opt-2.c\n+\t* gcc.c-torture/execute/string-opt-6.c\n+\t* gcc.c-torture/execute/string-opt-7.c\n+\t* gcc.c-torture/execute/string-opt-8.c:\n+\tReplace with ...\n+\n+\t* gcc.c-torture/execute/builtins/abs-2.c\n+\t* gcc.c-torture/execute/builtins/abs-3.c\n+\t* gcc.c-torture/execute/builtins/complex-1.c\n+\t* gcc.c-torture/execute/builtins/fprintf.c\n+\t* gcc.c-torture/execute/builtins/fputs.c\n+\t* gcc.c-torture/execute/builtins/memcmp.c\n+\t* gcc.c-torture/execute/builtins/memmove.c\n+\t* gcc.c-torture/execute/builtins/memops-asm.c\n+\t* gcc.c-torture/execute/builtins/mempcpy-2.c\n+\t* gcc.c-torture/execute/builtins/mempcpy.c\n+\t* gcc.c-torture/execute/builtins/memset.c\n+\t* gcc.c-torture/execute/builtins/printf.c\n+\t* gcc.c-torture/execute/builtins/sprintf.c\n+\t* gcc.c-torture/execute/builtins/strcat.c\n+\t* gcc.c-torture/execute/builtins/strchr.c\n+\t* gcc.c-torture/execute/builtins/strcmp.c\n+\t* gcc.c-torture/execute/builtins/strcpy.c\n+\t* gcc.c-torture/execute/builtins/strcspn.c\n+\t* gcc.c-torture/execute/builtins/strlen-2.c\n+\t* gcc.c-torture/execute/builtins/strlen.c\n+\t* gcc.c-torture/execute/builtins/strncat.c\n+\t* gcc.c-torture/execute/builtins/strncmp-2.c\n+\t* gcc.c-torture/execute/builtins/strncmp.c\n+\t* gcc.c-torture/execute/builtins/strncpy.c\n+\t* gcc.c-torture/execute/builtins/strpbrk.c\n+\t* gcc.c-torture/execute/builtins/strpcpy-2.c\n+\t* gcc.c-torture/execute/builtins/strpcpy.c\n+\t* gcc.c-torture/execute/builtins/strrchr.c\n+\t* gcc.c-torture/execute/builtins/strspn.c\n+\t* gcc.c-torture/execute/builtins/strstr-asm.c\n+\t* gcc.c-torture/execute/builtins/strstr.c:\n+\t... these new files.\n+\n+\t* gcc.c-torture/execute/builtins/abs-2-lib.c\n+\t* gcc.c-torture/execute/builtins/abs-3-lib.c\n+\t* gcc.c-torture/execute/builtins/complex-1-lib.c\n+\t* gcc.c-torture/execute/builtins/fprintf-lib.c\n+\t* gcc.c-torture/execute/builtins/fputs-lib.c\n+\t* gcc.c-torture/execute/builtins/memcmp-lib.c\n+\t* gcc.c-torture/execute/builtins/memmove-lib.c\n+\t* gcc.c-torture/execute/builtins/memops-asm-lib.c\n+\t* gcc.c-torture/execute/builtins/mempcpy-2-lib.c\n+\t* gcc.c-torture/execute/builtins/mempcpy-lib.c\n+\t* gcc.c-torture/execute/builtins/memset-lib.c\n+\t* gcc.c-torture/execute/builtins/printf-lib.c\n+\t* gcc.c-torture/execute/builtins/sprintf-lib.c\n+\t* gcc.c-torture/execute/builtins/strcat-lib.c\n+\t* gcc.c-torture/execute/builtins/strchr-lib.c\n+\t* gcc.c-torture/execute/builtins/strcmp-lib.c\n+\t* gcc.c-torture/execute/builtins/strcpy-lib.c\n+\t* gcc.c-torture/execute/builtins/strcspn-lib.c\n+\t* gcc.c-torture/execute/builtins/strlen-2-lib.c\n+\t* gcc.c-torture/execute/builtins/strlen-lib.c\n+\t* gcc.c-torture/execute/builtins/strncat-lib.c\n+\t* gcc.c-torture/execute/builtins/strncmp-2-lib.c\n+\t* gcc.c-torture/execute/builtins/strncmp-lib.c\n+\t* gcc.c-torture/execute/builtins/strncpy-lib.c\n+\t* gcc.c-torture/execute/builtins/strpbrk-lib.c\n+\t* gcc.c-torture/execute/builtins/strpcpy-2-lib.c\n+\t* gcc.c-torture/execute/builtins/strpcpy-lib.c\n+\t* gcc.c-torture/execute/builtins/strrchr-lib.c\n+\t* gcc.c-torture/execute/builtins/strspn-lib.c\n+\t* gcc.c-torture/execute/builtins/strstr-asm-lib.c\n+\t* gcc.c-torture/execute/builtins/strstr-lib.c\n+\t* gcc.c-torture/execute/builtins/lib/abs.c\n+\t* gcc.c-torture/execute/builtins/lib/fprintf.c\n+\t* gcc.c-torture/execute/builtins/lib/memset.c\n+\t* gcc.c-torture/execute/builtins/lib/printf.c\n+\t* gcc.c-torture/execute/builtins/lib/sprintf.c\n+\t* gcc.c-torture/execute/builtins/lib/strcpy.c\n+\t* gcc.c-torture/execute/builtins/lib/strcspn.c\n+\t* gcc.c-torture/execute/builtins/lib/strncat.c\n+\t* gcc.c-torture/execute/builtins/lib/strncmp.c\n+\t* gcc.c-torture/execute/builtins/lib/strncpy.c\n+\t* gcc.c-torture/execute/builtins/lib/strpbrk.c\n+\t* gcc.c-torture/execute/builtins/lib/strspn.c\n+\t* gcc.c-torture/execute/builtins/lib/strstr.c:\n+\tNew files containing support routines.\n+\n+\t* gcc.c-torture/execute/builtins/abs-1.c: Remove unnecessary\n+\tdeclaration.\n+\t* gcc.c-torture/execute/builtins/lib/main.c: Define link_error\n+\twhen not optimizing.\n+\n 2004-07-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16240"}, {"sha": "6ca246d3922543b3c0d5566bc10296ec1a3aef3d", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -9,7 +9,6 @@ int abs_called = 0;\n extern int abs (int);\n extern long labs (long);\n extern void abort (void);\n-extern void exit (int);\n \n void\n main_test (void)"}, {"sha": "494e5390e634d64849e1c4cef710eb5a8f0b36fd", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-2-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/abs.c\""}, {"sha": "025488d7dd875a4280ab03005a60744ba77e2294", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-2.c", "status": "renamed", "additions": 23, "deletions": 66, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-2.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -21,12 +21,10 @@ extern long labs (long);\n extern long long llabs (long long);\n extern intmax_t imaxabs (intmax_t);\n extern void abort (void);\n-extern void exit (int);\n+extern void link_error (void);\n \n-extern void link_failure (void);\n-\n-int\n-main (void)\n+void\n+main_test (void)\n {\n   /* For each type, test both runtime and compile time (constant folding)\n      optimization.  */\n@@ -39,122 +37,81 @@ main (void)\n   if (abs (i0) != 0)\n     abort ();\n   if (abs (0) != 0)\n-    link_failure ();\n+    link_error ();\n   if (abs (i1) != 1)\n     abort ();\n   if (abs (1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (abs (im1) != 1)\n     abort ();\n   if (abs (-1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (abs (imin) != INT_MAX)\n     abort ();\n   if (abs (-INT_MAX) != INT_MAX)\n-    link_failure ();\n+    link_error ();\n   if (abs (imax) != INT_MAX)\n     abort ();\n   if (abs (INT_MAX) != INT_MAX)\n-    link_failure ();\n+    link_error ();\n   if (labs (l0) != 0L)\n     abort ();\n   if (labs (0L) != 0L)\n-    link_failure ();\n+    link_error ();\n   if (labs (l1) != 1L)\n     abort ();\n   if (labs (1L) != 1L)\n-    link_failure ();\n+    link_error ();\n   if (labs (lm1) != 1L)\n     abort ();\n   if (labs (-1L) != 1L)\n-    link_failure ();\n+    link_error ();\n   if (labs (lmin) != LONG_MAX)\n     abort ();\n   if (labs (-LONG_MAX) != LONG_MAX)\n-    link_failure ();\n+    link_error ();\n   if (labs (lmax) != LONG_MAX)\n     abort ();\n   if (labs (LONG_MAX) != LONG_MAX)\n-    link_failure ();\n+    link_error ();\n   if (llabs (ll0) != 0LL)\n     abort ();\n   if (llabs (0LL) != 0LL)\n-    link_failure ();\n+    link_error ();\n   if (llabs (ll1) != 1LL)\n     abort ();\n   if (llabs (1LL) != 1LL)\n-    link_failure ();\n+    link_error ();\n   if (llabs (llm1) != 1LL)\n     abort ();\n   if (llabs (-1LL) != 1LL)\n-    link_failure ();\n+    link_error ();\n   if (llabs (llmin) != __LONG_LONG_MAX__)\n     abort ();\n   if (llabs (-__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n-    link_failure ();\n+    link_error ();\n   if (llabs (llmax) != __LONG_LONG_MAX__)\n     abort ();\n   if (llabs (__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n-    link_failure ();\n+    link_error ();\n   if (imaxabs (imax0) != 0)\n     abort ();\n   if (imaxabs (0) != 0)\n-    link_failure ();\n+    link_error ();\n   if (imaxabs (imax1) != 1)\n     abort ();\n   if (imaxabs (1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (imaxabs (imaxm1) != 1)\n     abort ();\n   if (imaxabs (-1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (imaxabs (imaxmin) != INTMAX_MAX)\n     abort ();\n   if (imaxabs (-INTMAX_MAX) != INTMAX_MAX)\n-    link_failure ();\n+    link_error ();\n   if (imaxabs (imaxmax) != INTMAX_MAX)\n     abort ();\n   if (imaxabs (INTMAX_MAX) != INTMAX_MAX)\n-    link_failure ();\n-  exit (0);\n-}\n-\n-/* All the above cases should have been optimized to something else,\n-   even if not optimizing (unless -fno-builtin was specified).  So any\n-   remaining calls to the original functions should abort.  */\n-\n-static int\n-abs (int x)\n-{\n-  abort ();\n+    link_error ();\n }\n-\n-static long\n-labs (long x)\n-{\n-  abort ();\n-}\n-\n-static long long\n-llabs (long long x)\n-{\n-  abort ();\n-}\n-\n-static intmax_t\n-imaxabs (intmax_t x)\n-{\n-  abort ();\n-}\n-\n-/* When optimizing, all the constant cases should have been\n-   constant folded, so no calls to link_failure should remain.  In any case,\n-   link_failure should not be called.  */\n-\n-#ifndef __OPTIMIZE__\n-void\n-link_failure (void)\n-{\n-  abort ();\n-}\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtin-abs-1.c"}, {"sha": "494e5390e634d64849e1c4cef710eb5a8f0b36fd", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-3-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/abs.c\""}, {"sha": "8300a48a64a9f1d43fb1d48dff66f75e820abae6", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-3.c", "status": "renamed", "additions": 23, "deletions": 66, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-3.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -17,12 +17,10 @@ typedef long long intmax_t;\n #endif\n \n extern void abort (void);\n-extern void exit (int);\n+extern void link_error (void);\n \n-extern void link_failure (void);\n-\n-int\n-main (void)\n+void\n+main_test (void)\n {\n   /* For each type, test both runtime and compile time (constant folding)\n      optimization.  */\n@@ -35,122 +33,81 @@ main (void)\n   if (__builtin_abs (i0) != 0)\n     abort ();\n   if (__builtin_abs (0) != 0)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_abs (i1) != 1)\n     abort ();\n   if (__builtin_abs (1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_abs (im1) != 1)\n     abort ();\n   if (__builtin_abs (-1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_abs (imin) != INT_MAX)\n     abort ();\n   if (__builtin_abs (-INT_MAX) != INT_MAX)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_abs (imax) != INT_MAX)\n     abort ();\n   if (__builtin_abs (INT_MAX) != INT_MAX)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_labs (l0) != 0L)\n     abort ();\n   if (__builtin_labs (0L) != 0L)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_labs (l1) != 1L)\n     abort ();\n   if (__builtin_labs (1L) != 1L)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_labs (lm1) != 1L)\n     abort ();\n   if (__builtin_labs (-1L) != 1L)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_labs (lmin) != LONG_MAX)\n     abort ();\n   if (__builtin_labs (-LONG_MAX) != LONG_MAX)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_labs (lmax) != LONG_MAX)\n     abort ();\n   if (__builtin_labs (LONG_MAX) != LONG_MAX)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_llabs (ll0) != 0LL)\n     abort ();\n   if (__builtin_llabs (0LL) != 0LL)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_llabs (ll1) != 1LL)\n     abort ();\n   if (__builtin_llabs (1LL) != 1LL)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_llabs (llm1) != 1LL)\n     abort ();\n   if (__builtin_llabs (-1LL) != 1LL)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_llabs (llmin) != __LONG_LONG_MAX__)\n     abort ();\n   if (__builtin_llabs (-__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_llabs (llmax) != __LONG_LONG_MAX__)\n     abort ();\n   if (__builtin_llabs (__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_imaxabs (imax0) != 0)\n     abort ();\n   if (__builtin_imaxabs (0) != 0)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_imaxabs (imax1) != 1)\n     abort ();\n   if (__builtin_imaxabs (1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_imaxabs (imaxm1) != 1)\n     abort ();\n   if (__builtin_imaxabs (-1) != 1)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_imaxabs (imaxmin) != INTMAX_MAX)\n     abort ();\n   if (__builtin_imaxabs (-INTMAX_MAX) != INTMAX_MAX)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_imaxabs (imaxmax) != INTMAX_MAX)\n     abort ();\n   if (__builtin_imaxabs (INTMAX_MAX) != INTMAX_MAX)\n-    link_failure ();\n-  exit (0);\n-}\n-\n-/* All the above cases should have been optimized to something else,\n-   not converted to function calls.  So any calls to the non-__builtin\n-   functions should abort.  */\n-\n-static int\n-abs (int x)\n-{\n-  abort ();\n+    link_error ();\n }\n-\n-static long\n-labs (long x)\n-{\n-  abort ();\n-}\n-\n-static long long\n-llabs (long long x)\n-{\n-  abort ();\n-}\n-\n-static intmax_t\n-imaxabs (intmax_t x)\n-{\n-  abort ();\n-}\n-\n-/* When optimizing, all the constant cases should have been\n-   constant folded, so no calls to link_failure should remain.  In any case,\n-   link_failure should not be called.  */\n-\n-#ifndef __OPTIMIZE__\n-void\n-link_failure (void)\n-{\n-  abort ();\n-}\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtin-abs-2.c"}, {"sha": "22d7db1806990af1711f5779552e1e6e06185e89", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/complex-1-lib.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fcomplex-1-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fcomplex-1-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fcomplex-1-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,70 @@\n+extern int inside_main;\n+extern void abort (void);\n+#ifdef __OPTIMIZE__\n+#define ABORT_INSIDE_MAIN do { if (inside_main) abort (); } while (0)\n+#else\n+#define ABORT_INSIDE_MAIN do { } while (0)\n+#endif\n+\n+static float _Complex\n+conjf (float _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return ~z;\n+}\n+\n+static double _Complex\n+conj (double _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return ~z;\n+}\n+\n+static long double _Complex\n+conjl (long double _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return ~z;\n+}\n+\n+static float\n+crealf (float _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return __real__ z;\n+}\n+\n+static double\n+creal (double _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return __real__ z;\n+}\n+\n+static long double\n+creall (long double _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return __real__ z;\n+}\n+\n+static float\n+cimagf (float _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return __imag__ z;\n+}\n+\n+static double\n+cimag (double _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return __imag__ z;\n+}\n+\n+static long double\n+cimagl (long double _Complex z)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return __imag__ z;\n+}"}, {"sha": "362a0e41ea33d9f142bdd82792f06505c6b8775d", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/complex-1.c", "status": "renamed", "additions": 21, "deletions": 94, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fcomplex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fcomplex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fcomplex-1.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -14,12 +14,10 @@ extern double cimag (double _Complex);\n extern long double cimagl (long double _Complex);\n \n extern void abort (void);\n-extern void exit (int);\n+extern void link_error (void);\n \n-extern void link_failure (void);\n-\n-int\n-main (void)\n+void\n+main_test (void)\n {\n   /* For each type, test both runtime and compile time (constant folding)\n      optimization.  */\n@@ -32,144 +30,73 @@ main (void)\n   if (__builtin_conjf (fc) != 1.0F - 2.0iF)\n     abort ();\n   if (conjf (1.0F + 2.0iF) != 1.0F - 2.0iF)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_conjf (1.0F + 2.0iF) != 1.0F - 2.0iF)\n-    link_failure ();\n+    link_error ();\n   if (crealf (fc) != 1.0F)\n     abort ();\n   if (__builtin_crealf (fc) != 1.0F)\n     abort ();\n   if (crealf (1.0F + 2.0iF) != 1.0F)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_crealf (1.0F + 2.0iF) != 1.0F)\n-    link_failure ();\n+    link_error ();\n   if (cimagf (fc) != 2.0F)\n     abort ();\n   if (__builtin_cimagf (fc) != 2.0F)\n     abort ();\n   if (cimagf (1.0F + 2.0iF) != 2.0F)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_cimagf (1.0F + 2.0iF) != 2.0F)\n-    link_failure ();\n+    link_error ();\n   /* Test doubles.  */\n   if (conj (dc) != 1.0 - 2.0i)\n     abort ();\n   if (__builtin_conj (dc) != 1.0 - 2.0i)\n     abort ();\n   if (conj (1.0 + 2.0i) != 1.0 - 2.0i)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_conj (1.0 + 2.0i) != 1.0 - 2.0i)\n-    link_failure ();\n+    link_error ();\n   if (creal (dc) != 1.0)\n     abort ();\n   if (__builtin_creal (dc) != 1.0)\n     abort ();\n   if (creal (1.0 + 2.0i) != 1.0)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_creal (1.0 + 2.0i) != 1.0)\n-    link_failure ();\n+    link_error ();\n   if (cimag (dc) != 2.0)\n     abort ();\n   if (__builtin_cimag (dc) != 2.0)\n     abort ();\n   if (cimag (1.0 + 2.0i) != 2.0)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_cimag (1.0 + 2.0i) != 2.0)\n-    link_failure ();\n+    link_error ();\n   /* Test long doubles.  */\n   if (conjl (ldc) != 1.0L - 2.0iL)\n     abort ();\n   if (__builtin_conjl (ldc) != 1.0L - 2.0iL)\n     abort ();\n   if (conjl (1.0L + 2.0iL) != 1.0L - 2.0iL)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_conjl (1.0L + 2.0iL) != 1.0L - 2.0iL)\n-    link_failure ();\n+    link_error ();\n   if (creall (ldc) != 1.0L)\n     abort ();\n   if (__builtin_creall (ldc) != 1.0L)\n     abort ();\n   if (creall (1.0L + 2.0iL) != 1.0L)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_creall (1.0L + 2.0iL) != 1.0L)\n-    link_failure ();\n+    link_error ();\n   if (cimagl (ldc) != 2.0L)\n     abort ();\n   if (__builtin_cimagl (ldc) != 2.0L)\n     abort ();\n   if (cimagl (1.0L + 2.0iL) != 2.0L)\n-    link_failure ();\n+    link_error ();\n   if (__builtin_cimagl (1.0L + 2.0iL) != 2.0L)\n-    link_failure ();\n-  exit (0);\n-}\n-\n-/* All the above cases should have been optimized to something else,\n-   even if not optimizing (unless -fno-builtin was specified).  So any\n-   remaining calls to the original functions should abort.  */\n-\n-static float _Complex\n-conjf (float _Complex z)\n-{\n-  abort ();\n-}\n-\n-static double _Complex\n-conj (double _Complex z)\n-{\n-  abort ();\n-}\n-\n-static long double _Complex\n-conjl (long double _Complex z)\n-{\n-  abort ();\n-}\n-\n-static float\n-crealf (float _Complex z)\n-{\n-  abort ();\n-}\n-\n-static double\n-creal (double _Complex z)\n-{\n-  abort ();\n-}\n-\n-static long double\n-creall (long double _Complex z)\n-{\n-  abort ();\n-}\n-\n-static float\n-cimagf (float _Complex z)\n-{\n-  abort ();\n-}\n-\n-static double\n-cimag (double _Complex z)\n-{\n-  abort ();\n-}\n-\n-static long double\n-cimagl (long double _Complex z)\n-{\n-  abort ();\n-}\n-\n-/* When optimizing, all the constant cases should have been\n-   constant folded, so no calls to link_failure should remain.  In any case,\n-   link_failure should not be called.  */\n-\n-#ifndef __OPTIMIZE__\n-void\n-link_failure (void)\n-{\n-  abort ();\n+    link_error ();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtin-complex-1.c"}, {"sha": "b6a1e913da401cf4325e859197dcb2171ffbe167", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fprintf-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/fprintf.c\""}, {"sha": "6b6e71b78f80ecbc6aa6f1e3074068d7a9738181", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fprintf.c", "status": "renamed", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -6,10 +6,10 @@\n    Written by Kaveh R. Ghazi, 1/7/2001.  */\n \n #include <stdio.h>\n-extern int fprintf (FILE *, const char *, ...);\n extern void abort(void);\n \n-int main()\n+void\n+main_test (void)\n {\n   FILE *s_array[] = {stdout, NULL}, **s_ptr = s_array;\n   const char *const s1 = \"hello world\";\n@@ -49,18 +49,4 @@ int main()\n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n   __builtin_fprintf (*s_ptr, \"%s\", \"hello world\\n\");\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static int\n-fprintf (FILE *stream, const char *string, ...)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-3.c"}, {"sha": "48a955309c112f5e53fccafe2223c0673d928611", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fputs-lib.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,17 @@\n+#include <stdio.h>\n+#include <stddef.h>\n+extern int inside_main;\n+extern size_t strlen(const char *);\n+int\n+fputs(const char *string, FILE *stream)\n+{\n+  size_t n = strlen(string);\n+  size_t r;\n+#if defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+  r = fwrite (string, 1, n, stream);\n+  return n > r ? EOF : 0;\n+}\n+"}, {"sha": "9274d5b643f88e05aa094aae8d8a517cc340faa4", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fputs.c", "status": "renamed", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -7,14 +7,11 @@\n \n #include <stdio.h>\n extern void abort(void);\n-/* Declare this without args because that's what gcc does internally.\n-   We want to make sure it works without a helpful prototype from us.\n-   If stdio.h provides one, that is okay.  */\n-extern int fputs();\n \n int i;\n \n-int main()\n+void\n+main_test(void)\n {\n   FILE *s_array[] = {stdout, NULL}, **s_ptr = s_array;\n   const char *const s1 = \"hello world\";\n@@ -61,18 +58,4 @@ int main()\n   fputs (--i ? \"\\n\" : \"\\n\", *--s_ptr);\n   if (s_ptr != s_array || i != 0)\n     abort();\n-\n-  return 0;\n-}\n-\n-#if defined (__OPTIMIZE__) && ! defined (__OPTIMIZE_SIZE__)\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static int\n-fputs(const char *string, FILE *stream)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-1.c"}, {"sha": "99ca10df3939d0bb172aabc675c8af10e50479f6", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/abs.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fabs.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,50 @@\n+extern int inside_main;\n+extern void abort (void);\n+#ifdef __OPTIMIZE__\n+#define ABORT_INSIDE_MAIN do { if (inside_main) abort (); } while (0)\n+#else\n+#define ABORT_INSIDE_MAIN do { } while (0)\n+#endif\n+\n+/* These next definitions are kludges.  When GCC has a <stdint.h> it\n+   should be used.\n+*/\n+#include <limits.h>\n+#if INT_MAX == __LONG_LONG_MAX__\n+typedef int intmax_t;\n+#define INTMAX_MAX INT_MAX\n+#elif LONG_MAX == __LONG_LONG_MAX__\n+typedef long intmax_t;\n+#define INTMAX_MAX LONG_MAX\n+#else\n+typedef long long intmax_t;\n+#define INTMAX_MAX __LONG_LONG_MAX__\n+#endif\n+\n+int\n+abs (int x)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return x < 0 ? -x : x;\n+}\n+\n+long\n+labs (long x)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return x < 0 ? -x : x;\n+}\n+\n+long long\n+llabs (long long x)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return x < 0 ? -x : x;\n+}\n+\n+intmax_t\n+imaxabs (intmax_t x)\n+{\n+  ABORT_INSIDE_MAIN;\n+  return x < 0 ? -x : x;\n+}"}, {"sha": "80c240cc8e76dbebec19ac82de227005d0722998", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/fprintf.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Ffprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Ffprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Ffprintf.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,18 @@\n+#include <stdio.h>\n+#include <stdarg.h>\n+extern int inside_main;\n+\n+int\n+fprintf (FILE *fp, const char *string, ...)\n+{\n+  va_list ap;\n+  int r;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+  va_start (ap, string);\n+  r = vfprintf (fp, string, ap);\n+  va_end (ap);\n+  return r;\n+}"}, {"sha": "6f3c3170cc1adeead0ed5ac25d356dbfa60f5e07", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/main.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmain.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -9,3 +9,15 @@ main ()\n   inside_main = 0;\n   return 0;\n }\n+\n+/* When optimizing, all the constant cases should have been\n+   constant folded, so no calls to link_error should remain.\n+   In any case, link_error should not be called.  */\n+\n+#ifndef __OPTIMIZE__\n+void\n+link_error (void)\n+{\n+  abort ();\n+}\n+#endif"}, {"sha": "d5326ffeb2bd2b135718b1631040e9147523ca5c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/memset.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemset.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-3-lib.c"}, {"sha": "be2a63bc61edadc248e2c5aa483e598b84715d01", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/printf.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fprintf.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,19 @@\n+#include <stdio.h>\n+#include <stdarg.h>\n+extern int inside_main;\n+\n+int\n+printf (const char *string, ...)\n+{\n+  va_list ap;\n+  int r;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+  va_start (ap, string);\n+  r = vprintf (string, ap);\n+  va_end (ap);\n+  return r;\n+}\n+"}, {"sha": "0c0cd5b93458625c57706fdcc420216bbebd7f88", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/sprintf.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fsprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fsprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fsprintf.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,20 @@\n+#include <stdio.h>\n+#include <stdarg.h>\n+extern int inside_main;\n+\n+int\n+sprintf (char *buf, const char *fmt, ...)\n+{\n+  va_list ap;\n+  int r;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+  va_start (ap, fmt);\n+  r = vsprintf (buf, fmt, ap);\n+  va_end (ap);\n+  return r;\n+}\n+\n+"}, {"sha": "127b57733c4f8ed361e676d230434afb4f79f5c0", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strcpy.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcpy.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,13 @@\n+extern int inside_main;\n+\n+char *\n+strcpy (char *d, const char *s)\n+{\n+  char *r = d;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+  while ((*d++ = *s++));\n+  return r;\n+}"}, {"sha": "767c89a63510a1cc2d1d38c9e39a420a90e498b9", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strcspn.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcspn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcspn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcspn.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,20 @@\n+extern int inside_main;\n+\n+__SIZE_TYPE__\n+strcspn (const char *s1, const char *s2)\n+{\n+  const char *p, *q;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+\n+  for (p = s1; *p; p++)\n+    for (q = s2; *q; q++)\n+      if (*p == *q)\n+\tgoto found;\n+\n+ found:\n+  return p - s1;\n+}"}, {"sha": "59d3cc0ae0a105642c50b09077da0079ac063141", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strncat.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncat.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,26 @@\n+extern int inside_main;\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+char *\n+strncat (char *s1, const char *s2, size_t n)\n+{\n+  char *dest = s1;\n+  char c;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+  while (*s1) s1++;\n+  while (n > 0)\n+    {\n+      c = *s2++;\n+      *s1++ = c;\n+      if (c == 0)\n+\treturn dest;\n+      n--;\n+    }\n+  if (c != '\\0')\n+    *s1 = '\\0';\n+  return dest;\n+}"}, {"sha": "c0b890677e5b3b919cb7e96b3a01b1d3ec912901", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strncmp.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncmp.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,25 @@\n+extern int inside_main;\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+int\n+strncmp(const char *s1, const char *s2, size_t n)\n+{\n+  const unsigned char *u1 = (const unsigned char *)s1;\n+  const unsigned char *u2 = (const unsigned char *)s2;\n+  unsigned char c1, c2;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+\n+  while (n > 0)\n+    {\n+      c1 = *u1++, c2 = *u2++;\n+      if (c1 == '\\0' || c1 != c2)\n+\treturn c1 - c2;\n+      n--;\n+    }\n+  return c1 - c2;\n+}"}, {"sha": "a96f7cb925ff5c8b35bdb06399900e9344cd2a93", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strncpy.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrncpy.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,19 @@\n+extern int inside_main;\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+char *\n+strncpy(char *s1, const char *s2, size_t n)\n+{\n+  char *dest = s1;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+  for (; *s2 && n; n--)\n+    *s1++ = *s2++;\n+  while (n--)\n+    *s1++ = 0;\n+  return dest;\n+}\n+"}, {"sha": "1eb90ade5fb808e995769a126d47a99016a00eef", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strpbrk.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrpbrk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrpbrk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrpbrk.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,19 @@\n+extern int inside_main;\n+\n+char *\n+strpbrk(const char *s1, const char *s2)\n+{\n+  char *p;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+  while (*s1)\n+    {\n+      for (p = s2; *p; p++)\n+\tif (*s1 == *p)\n+\t  return s1;\n+      s1++;\n+    }\n+  return 0;\n+}"}, {"sha": "29477cc764c924f04be41bb08558e9041fb6f0ee", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strspn.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrspn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrspn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrspn.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,23 @@\n+extern int inside_main;\n+\n+__SIZE_TYPE__\n+strcspn (const char *s1, const char *s2)\n+{\n+  const char *p, *q;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+\n+  for (p = s1; *p; p++)\n+    {\n+      for (q = s2; *q; q++)\n+\tif (*p == *q)\n+\t  goto proceed;\n+      break;\n+\n+    proceed:;\n+    }\n+  return p - s1;\n+}"}, {"sha": "fa43c93431298e803e8c674b8f9b1311027dd573", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strstr.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrstr.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,27 @@\n+extern int inside_main;\n+\n+char *\n+strstr(const char *s1, const char *s2)\n+{\n+  const char *p, *q;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  /* deliberately dumb algorithm */\n+  for (; *s1; s1++)\n+    {\n+      p = s1, q = s2;\n+      while (*q && *p)\n+\t{\n+\t  if (*q != *p)\n+\t    break;\n+\t  p++, q++;\n+\t}\n+      if (*p == *q && *p == 0)\n+\treturn (char *)s1;\n+    }\n+  return 0;\n+}"}, {"sha": "029a92e77d512b90602e843dd0947405044a2db3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memcmp-lib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemcmp-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemcmp-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemcmp-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-6-lib.c"}, {"sha": "5489048f5f9d261f6780ca2c5ab511ad0089018c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memcmp.c", "status": "renamed", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemcmp.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -4,15 +4,17 @@\n    On architectures with a cmpstrsi instruction, this test doesn't determine\n    which optimization is being performed, but it does check for correctness.\n \n-   Written by Roger Sayle, 12/02/2001.  */\n+   Written by Roger Sayle, 12/02/2001.\n+   Additional tests by Roger Sayle after PR 3508, 12/26/2001.  */\n \n extern void abort (void);\n typedef __SIZE_TYPE__ size_t;\n extern int memcmp (const void *, const void *, size_t);\n extern char *strcpy (char *, const char *);\n+extern void link_error (void);\n \n-int\n-main ()\n+void\n+main_test (void)\n {\n   char str[8];\n \n@@ -30,18 +32,10 @@ main ()\n   if ( memcmp (str+2, str, 1) <= 0 )\n     abort ();\n \n-  return 0;\n+  if (memcmp (\"abcd\", \"efgh\", 4) >= 0)\n+    link_error ();\n+  if (memcmp (\"abcd\", \"abcd\", 4) != 0)\n+    link_error ();\n+  if (memcmp (\"efgh\", \"abcd\", 4) <= 0)\n+    link_error ();\n }\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static int\n-memcmp (const void *p1, const void *p2, size_t len)\n-{\n-  abort ();\n-}\n-#endif\n-", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-15.c"}, {"sha": "5be3df52fe5507b228da06de3f8437974d85b59c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memmove-lib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemmove-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemmove-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemmove-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-5-lib.c"}, {"sha": "4a18fc6400fa55443c615af367d9ed72db4bd3a1", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memmove.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemmove.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-5.c"}, {"sha": "16369a21794bb4c7bdd467b4710a1397dcb10061", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memops-asm-lib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemops-asm-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemops-asm-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemops-asm-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-2-lib.c"}, {"sha": "e793778053acfc46bd152a5666da10d409cffba4", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memops-asm.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemops-asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemops-asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemops-asm.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-2.c"}, {"sha": "cf3178c834afa432e81d7506aef831c7c9d93cbf", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/mempcpy-2-lib.c", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -1,2 +1 @@\n-#include \"lib/stpcpy.c\"\n #include \"lib/mempcpy.c\"", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-4-lib.c"}, {"sha": "dcaf07b67f1b1e2e2773e7ebe75b3ce22ad934b3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/mempcpy-2.c", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-2.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -8,15 +8,14 @@ extern void abort (void);\n typedef __SIZE_TYPE__ size_t;\n extern void *mempcpy (void *, const void *, size_t);\n extern int memcmp (const void *, const void *, size_t);\n-extern char *stpcpy (char *, const char *);\n extern int inside_main;\n \n long buf1[64];\n char *buf2 = (char *) (buf1 + 32);\n long buf5[20];\n char buf7[20];\n \n-int\n+void\n __attribute__((noinline))\n test (long *buf3, char *buf4, char *buf6, int n)\n {\n@@ -141,21 +140,6 @@ test (long *buf3, char *buf4, char *buf6, int n)\n   if (mempcpy (buf4 + 14, buf6, n + 2) != buf2 + 16\n       || memcmp (buf2, \"aBcdRSTUVWkSmnrsq\\0\", 19))\n     abort ();\n-\n-  /* Now stpcpy tests.  */\n-  if (stpcpy ((char *) buf3, \"abcdefghijklmnop\") != (char *) buf1 + 16\n-      || memcmp (buf1, \"abcdefghijklmnop\", 17))\n-    abort ();\n-\n-  if (__builtin_stpcpy ((char *) buf3, \"ABCDEFG\") != (char *) buf1 + 7\n-      || memcmp (buf1, \"ABCDEFG\\0ijklmnop\", 17))\n-    abort ();\n-\n-  if (stpcpy ((char *) buf3 + i++, \"x\") != (char *) buf1 + 5\n-      || memcmp (buf1, \"ABCDx\\0G\\0ijklmnop\", 17))\n-    abort ();\n-\n-  return 0;\n }\n \n void", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-7.c"}, {"sha": "cf3178c834afa432e81d7506aef831c7c9d93cbf", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/mempcpy-lib.c", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -1,2 +1 @@\n-#include \"lib/stpcpy.c\"\n #include \"lib/mempcpy.c\"", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-7-lib.c"}, {"sha": "d82e2232d7b367005e77e028936c2dcff72e243d", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/mempcpy.c", "status": "renamed", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmempcpy.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -1,12 +1,10 @@\n /* Copyright (C) 2003  Free Software Foundation.\n \n-   Ensure builtin mempcpy and stpcpy perform correctly.\n+   Ensure builtin mempcpy performs correctly.\n \n    Written by Kaveh Ghazi, 4/11/2003.  */\n \n extern void abort (void);\n-extern char *strcpy (char *, const char *);\n-extern char *stpcpy (char *, const char *);\n typedef __SIZE_TYPE__ size_t;\n extern size_t strlen(const char *);\n extern void *memcpy (void *, const void *, size_t);\n@@ -32,55 +30,39 @@ main_test (void)\n   inside_main = 0;\n #endif\n \n-  if (stpcpy (p, \"abcde\") != p + 5 || memcmp (p, \"abcde\", 6))\n-    abort ();\n-  if (stpcpy (p + 16, \"vwxyz\" + 1) != p + 16 + 4 || memcmp (p + 16, \"wxyz\", 5))\n-    abort ();\n-  if (stpcpy (p + 1, \"\") != p + 1 + 0 || memcmp (p, \"a\\0cde\", 6))\n-    abort ();\n-  if (stpcpy (p + 3, \"fghij\") != p + 3 + 5 || memcmp (p, \"a\\0cfghij\", 9))\n-    abort ();\n   if (mempcpy (p, \"ABCDE\", 6) != p + 6 || memcmp (p, \"ABCDE\", 6))\n     abort ();\n-  if (mempcpy (p + 16, \"VWX\" + 1, 2) != p + 16 + 2 || memcmp (p + 16, \"WXyz\", 5))\n+  if (mempcpy (p + 16, \"VWX\" + 1, 2) != p + 16 + 2\n+      || memcmp (p + 16, \"WX\\0\\0\", 5))\n     abort ();\n   if (mempcpy (p + 1, \"\", 1) != p + 1 + 1 || memcmp (p, \"A\\0CDE\", 6))\n     abort ();\n-  if (mempcpy (p + 3, \"FGHI\", 4) != p + 3 + 4 || memcmp (p, \"A\\0CFGHIj\", 9))\n+  if (mempcpy (p + 3, \"FGHI\", 4) != p + 3 + 4 || memcmp (p, \"A\\0CFGHI\", 8))\n     abort ();\n \n   i = 8;\n   memcpy (p + 20, \"qrstu\", 6);\n-  if (stpcpy ((i++, p + 20 + 1), \"23\") != (p + 20 + 1 + 2) || i != 9 || memcmp (p + 20, \"q23\\0u\", 6))\n-    abort ();\n-\n   memcpy (p + 25, \"QRSTU\", 6);\n-  if (mempcpy (p + 25 + 1, s1, 3) != (p + 25 + 1 + 3) || memcmp (p + 25, \"Q123U\", 6))\n+  if (mempcpy (p + 25 + 1, s1, 3) != (p + 25 + 1 + 3)\n+      || memcmp (p + 25, \"Q123U\", 6))\n     abort ();\n \n-  if (stpcpy (stpcpy (p, \"ABCD\"), \"EFG\") != p + 7 || memcmp (p, \"ABCDEFG\", 8))\n-    abort();\n-  if (mempcpy (mempcpy (p, \"abcdEFG\", 4), \"efg\", 4) != p + 8 || memcmp (p, \"abcdefg\", 8))\n+  if (mempcpy (mempcpy (p, \"abcdEFG\", 4), \"efg\", 4) != p + 8\n+      || memcmp (p, \"abcdefg\", 8))\n     abort();\n \n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n-  if (__builtin_stpcpy (p, \"abcde\") != p + 5 || memcmp (p, \"abcde\", 6))\n-    abort ();\n   if (__builtin_mempcpy (p, \"ABCDE\", 6) != p + 6 || memcmp (p, \"ABCDE\", 6))\n     abort ();\n \n-  /* If the result of stpcpy/mempcpy is ignored, gcc should use\n-     strcpy/memcpy.  This should be optimized always, so set inside_main\n-     again.  */\n+  /* If the result of mempcpy is ignored, gcc should use memcpy.\n+     This should be optimized always, so set inside_main again.  */\n   inside_main = 1;\n-  stpcpy (p + 3, s2);\n-  if (memcmp (p, \"ABCdefg\", 8))\n-    abort ();\n   mempcpy (p + 5, s3, 1);\n-  if (memcmp (p, \"ABCdeFg\", 8))\n+  if (memcmp (p, \"ABCDEFg\", 8))\n     abort ();\n-  mempcpy (p + 6, s3 + 1, l1);\n-  if (memcmp (p, \"ABCdeFG\", 8))\n+  mempcpy (p + 6, s1 + 1, l1);\n+  if (memcmp (p, \"ABCDEF2\", 8))\n     abort ();\n }", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-4.c"}, {"sha": "2eeff38be24c6c80796e5c40819ce6e5bf2467b1", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memset-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemset-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemset-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemset-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/memset.c\""}, {"sha": "cf7c1e303e8a657dd45901c4ef2e33b8d72ffca0", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memset.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemset.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-3.c"}, {"sha": "45ed7ec3738635dce73489d169707cd11dc33295", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/printf-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/printf.c\""}, {"sha": "0d01e544aa12ec190c4517cb738b7a90126194dc", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/printf.c", "status": "renamed", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -8,7 +8,8 @@\n extern int printf (const char *, ...);\n extern void abort(void);\n \n-int main()\n+void\n+main_test (void)\n {\n   const char *const s1 = \"hello world\";\n   const char *const s2[] = { s1, 0 }, *const*s3;\n@@ -37,18 +38,4 @@ int main()\n      prototypes are set correctly too.  */\n   __builtin_putchar ('\\n');\n   __builtin_puts (\"hello\");\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static int\n-printf (const char *string, ...)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-2.c"}, {"sha": "3a4fe34c0b19f9c08d0a47a3abe33cd674a64a0a", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/sprintf-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fsprintf-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fsprintf-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fsprintf-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/sprintf.c\""}, {"sha": "b45926469f693d9070aa443ab9175c314ce61e75", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/sprintf.c", "status": "renamed", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fsprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fsprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fsprintf.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -39,7 +39,8 @@ void test5(char *ptr)\n }\n \n \n-int main()\n+void\n+main_test (void)\n {\n   memset (buffer, 'A', 32);\n   test1 ();\n@@ -67,19 +68,4 @@ int main()\n   test5 (\"barf\");\n   if (memcmp(buffer, \"barf\", 5) || buffer[5] != 'A')\n     abort ();\n-\n-  return 0;\n }\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static int\n-sprintf (char *buf, const char *fmt, ...)\n-{\n-  abort ();\n-}\n-#endif\n-", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-16.c"}, {"sha": "0a0bbb8865a1952b64ba55e3baa7786ac5c47c27", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcat-lib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-9-lib.c"}, {"sha": "ba70c397724a60756459020a72dd07f971822970", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcat.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcat.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-9.c"}, {"sha": "9049fb9e1ffeec91f4a7478535d577862641e277", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strchr-lib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrchr-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrchr-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrchr-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-2-lib.c"}, {"sha": "08e87c63d301d8c43f81ad6d3156afe39843e382", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strchr.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrchr.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-2.c"}, {"sha": "99c421486e6545193ae90f776ef55e13e76c603c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcmp-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcmp-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcmp-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcmp-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strcmp.c\""}, {"sha": "08a7658ea4e0ffa3e115e48fd925918658f7e893", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcmp.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcmp.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2000, 2003, 2004  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strcmp\n+   occur and perform correctly.\n+\n+   Written by Jakub Jelinek, 11/7/2000.  */\n+\n+extern void abort (void);\n+extern int strcmp (const char *, const char *);\n+\n+int x = 7;\n+char *bar = \"hi world\";\n+\n+void\n+main_test (void)\n+{\n+  const char *const foo = \"hello world\";\n+\n+  if (strcmp (foo, \"hello\") <= 0)\n+    abort ();\n+  if (strcmp (foo + 2, \"llo\") <= 0)\n+    abort ();\n+  if (strcmp (foo, foo) != 0)\n+    abort ();\n+  if (strcmp (foo, \"hello world \") >= 0)\n+    abort ();\n+  if (strcmp (foo + 10, \"dx\") >= 0)\n+    abort ();\n+  if (strcmp (10 + foo, \"dx\") >= 0)\n+    abort ();\n+  if (strcmp (bar, \"\") <= 0)\n+    abort ();\n+  if (strcmp (\"\", bar) >= 0)\n+    abort ();\n+  if (strcmp (bar+8, \"\") != 0)\n+    abort ();\n+  if (strcmp (\"\", bar+8) != 0)\n+    abort ();\n+  if (strcmp (bar+(--x), \"\") <= 0 || x != 6)\n+    abort ();\n+  if (strcmp (\"\", bar+(++x)) >= 0 || x != 7)\n+    abort ();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_strcmp (foo, \"hello\") <= 0)\n+    abort ();\n+}"}, {"sha": "b10dfcb0d79008fc9174670d87d9f2d38a18f925", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcpy-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strcpy.c\""}, {"sha": "0ca62b3a2d98cbf18eb8fbc558dec1716e079fa3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcpy.c", "status": "renamed", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcpy.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -12,7 +12,8 @@ extern int memcmp (const void *, const void *, size_t);\n \n char p[32] = \"\";\n \n-int main()\n+void\n+main_test (void)\n {\n   if (strcpy (p, \"abcde\") != p || memcmp (p, \"abcde\", 6))\n     abort ();\n@@ -37,18 +38,4 @@ int main()\n     abort ();\n   if (__builtin_memcpy (p, \"ABCDE\", 6) != p || memcmp (p, \"ABCDE\", 6))\n     abort ();\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static char *\n-strcpy (char *d, const char *s)\n-{\n-  abort ();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-6.c"}, {"sha": "8b1cfea01e805c3442b893b74d3143b787b7a6bf", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcspn-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcspn-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcspn-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcspn-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strcspn.c\""}, {"sha": "be392546a545577011a89e5f4117441be057b32a", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strcspn.c", "status": "renamed", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcspn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcspn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrcspn.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation.\n+/* Copyright (C) 2000, 2004  Free Software Foundation.\n \n    Ensure all expected transformations of builtin strcspn occur and\n    perform correctly.\n@@ -10,7 +10,8 @@ typedef __SIZE_TYPE__ size_t;\n extern size_t strcspn (const char *, const char *);\n extern char *strcpy (char *, const char *);\n \n-int main ()\n+void\n+main_test (void)\n {\n   const char *const s1 = \"hello world\";\n   char dst[64], *d2;\n@@ -50,18 +51,4 @@ int main ()\n      to ensure that it works and that the prototype is correct.  */\n   if (__builtin_strcspn (s1, \"z\") != 11)\n     abort();\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static size_t\n-strcspn (const char *s1, const char *s2)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-12.c"}, {"sha": "c9d8b8da7b9b940edfb0eb122ecbaa2c93419606", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-1-lib.c", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1-lib.c?ref=e1e93ad8abcabbefa292506d8ae08dd66f9011a2", "patch": "@@ -1,3 +0,0 @@\n-#include \"lib/strrchr.c\"\n-#include \"lib/strlen.c\"\n-#include \"lib/strcmp.c\""}, {"sha": "8a60e7e80ae7ebed8a6854a9198b85af7b253dd3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-1.c", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1.c?ref=e1e93ad8abcabbefa292506d8ae08dd66f9011a2", "patch": "@@ -1,87 +0,0 @@\n-/* Copyright (C) 2000, 2003  Free Software Foundation.\n-\n-   Ensure all expected transformations of builtin strlen, strcmp,\n-   strrchr and rindex occur and perform correctly.\n-\n-   Written by Jakub Jelinek, 11/7/2000.  */\n-\n-extern void abort (void);\n-extern __SIZE_TYPE__ strlen (const char *);\n-extern int strcmp (const char *, const char *);\n-extern char *strrchr (const char *, int);\n-extern char *rindex (const char *, int);\n-\n-int x = 6;\n-char *bar = \"hi world\";\n-\n-void\n-main_test (void)\n-{\n-  const char *const foo = \"hello world\";\n-\n-  if (strlen (foo) != 11)\n-    abort ();\n-  if (strlen (foo + 4) != 7)\n-    abort ();\n-  if (strlen (foo + (x++ & 7)) != 5)\n-    abort ();\n-  if (x != 7)\n-    abort ();\n-  if (strcmp (foo, \"hello\") <= 0)\n-    abort ();\n-  if (strcmp (foo + 2, \"llo\") <= 0)\n-    abort ();\n-  if (strcmp (foo, foo) != 0)\n-    abort ();\n-  if (strcmp (foo, \"hello world \") >= 0)\n-    abort ();\n-  if (strcmp (foo + 10, \"dx\") >= 0)\n-    abort ();\n-  if (strcmp (10 + foo, \"dx\") >= 0)\n-    abort ();\n-  if (strcmp (bar, \"\") <= 0)\n-    abort ();\n-  if (strcmp (\"\", bar) >= 0)\n-    abort ();\n-  if (strcmp (bar+8, \"\") != 0)\n-    abort ();\n-  if (strcmp (\"\", bar+8) != 0)\n-    abort ();\n-  if (strcmp (bar+(--x), \"\") <= 0 || x != 6)\n-    abort ();\n-  if (strcmp (\"\", bar+(++x)) >= 0 || x != 7)\n-    abort ();\n-  if (strrchr (foo, 'x'))\n-    abort ();\n-  if (strrchr (foo, 'o') != foo + 7)\n-    abort ();\n-  if (strrchr (foo, 'e') != foo + 1)\n-    abort ();\n-  if (strrchr (foo + 3, 'e'))\n-    abort ();\n-  if (strrchr (foo, '\\0') != foo + 11)\n-    abort ();\n-  if (strrchr (bar, '\\0') != bar + 8)\n-    abort ();\n-  if (strrchr (bar + 4, '\\0') != bar + 8)\n-    abort ();\n-  if (strrchr (bar + (x++ & 3), '\\0') != bar + 8)\n-    abort ();\n-  if (x != 8)\n-    abort ();\n-  /* Test only one instance of rindex since the code path is the same\n-     as that of strrchr. */\n-  if (rindex (\"hello\", 'z') != 0)\n-    abort ();\n-\n-  /* Test at least one instance of the __builtin_ style.  We do this\n-     to ensure that it works and that the prototype is correct.  */\n-  if (__builtin_rindex (foo, 'o') != foo + 7)\n-    abort ();\n-  if (__builtin_strrchr (foo, 'o') != foo + 7)\n-    abort ();\n-  if (__builtin_strlen (foo) != 11)\n-    abort ();\n-  if (__builtin_strcmp (foo, \"hello\") <= 0)\n-    abort ();\n-}"}, {"sha": "869dba17baa0b46ed4d95fc4602648ca1d7dd0ec", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-6.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6.c?ref=e1e93ad8abcabbefa292506d8ae08dd66f9011a2", "patch": "@@ -1,34 +0,0 @@\n-/* Copyright (C) 2001  Free Software Foundation.\n-\n-   Ensure that builtin memcmp operations when all three arguments\n-   are constant is optimized and performs correctly.  Taken from\n-   PR optimize/3508.\n-\n-   Written by Roger Sayle, 12/26/2001.  */\n-\n-extern void abort (void);\n-extern void link_error (void);\n-\n-typedef __SIZE_TYPE__ size_t;\n-extern int memcmp (const void *, const void *, size_t);\n-\n-void\n-main_test (void)\n-{\n-  if (memcmp (\"abcd\", \"efgh\", 4) >= 0)\n-    link_error ();\n-  if (memcmp (\"abcd\", \"abcd\", 4) != 0)\n-    link_error ();\n-  if (memcmp (\"efgh\", \"abcd\", 4) <= 0)\n-    link_error ();\n-}\n-\n-#ifndef __OPTIMIZE__\n-/* When not optimizing, the above tests may generate references to\n-   the function link_error, but should never actually call it.  */\n-void\n-link_error ()\n-{\n-  abort ();\n-}\n-#endif"}, {"sha": "9753c2498f1afd86dcc4a1db5232a91276a8234c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strlen-2-lib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-2-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-8-lib.c"}, {"sha": "29569b769a98849bb47170feae6b1738e2759a67", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strlen-2.c", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-2.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -8,7 +8,6 @@ typedef __SIZE_TYPE__ size_t;\n extern char *strcpy (char *, const char *);\n extern int memcmp (const void *, const void *, size_t);\n extern void abort (void);\n-extern void exit (int);\n extern int inside_main;\n \n size_t g, h, i, j, k, l;", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-8.c"}, {"sha": "9753c2498f1afd86dcc4a1db5232a91276a8234c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strlen-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strlen.c\""}, {"sha": "cf77294713ada890b04ef1d639851d868b164a79", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strlen.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,64 @@\n+/* Copyright (C) 2000, 2001, 2003, 2004  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strlen\n+   occur and perform correctly.\n+\n+   Written by Jakub Jelinek, 11/7/2000.\n+\n+   Additional tests written by Roger Sayle, 11/02/2001:\n+   Ensure all builtin strlen comparisons against zero are optimized\n+   and perform correctly. The multiple calls to strcpy are to prevent\n+   the potentially \"pure\" strlen calls from being removed by CSE. */\n+\n+extern void abort (void);\n+extern __SIZE_TYPE__ strlen (const char *);\n+extern char *strcpy (char *, const char *);\n+\n+int x = 6;\n+\n+void\n+main_test(void)\n+{\n+  const char *const foo = \"hello world\";\n+  char str[8];\n+  char *ptr;\n+\n+  if (strlen (foo) != 11)\n+    abort ();\n+  if (strlen (foo + 4) != 7)\n+    abort ();\n+  if (strlen (foo + (x++ & 7)) != 5)\n+    abort ();\n+  if (x != 7)\n+    abort ();\n+\n+  ptr = str;\n+  strcpy (ptr, \"nts\");\n+  if (strlen (ptr) == 0)\n+    abort ();\n+\n+  strcpy (ptr, \"nts\");\n+  if (strlen (ptr) < 1)\n+    abort ();\n+\n+  strcpy (ptr, \"nts\");\n+  if (strlen (ptr) <= 0)\n+    abort ();\n+\n+  strcpy (ptr, \"nts\");\n+  if (strlen (ptr+3) != 0)\n+    abort ();\n+\n+  strcpy (ptr, \"nts\");\n+  if (strlen (ptr+3) > 0)\n+    abort ();\n+\n+  strcpy (ptr, \"nts\");\n+  if (strlen (str+3) >= 1)\n+    abort ();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_strlen (foo) != 11)\n+    abort ();\n+}"}, {"sha": "1405a48f4bc1f9510732eb49420596355dcfd34a", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncat-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strncat.c\""}, {"sha": "2ef0e01aebc94c9457a6be1596ad35416609d630", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncat.c", "status": "renamed", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncat.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -12,7 +12,8 @@ extern char *strcpy (char *, const char *);\n extern int strcmp (const char *, const char *);\n int x = 123;\n \n-int main ()\n+void\n+main_test (void)\n {\n   const char *const s1 = \"hello world\";\n   const char *const s2 = \"\";\n@@ -68,18 +69,4 @@ int main ()\n   strcpy (dst, s1);\n   if (__builtin_strncat (dst, \"\", 100) != dst || strcmp (dst, s1))\n     abort();\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static char *\n-strncat (char *s1, const char *s2, size_t n)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-10.c"}, {"sha": "266c4a49b4f8ecb3f3a9c59296e77ca194cf5fd4", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncmp-2-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-2-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strncmp.c\""}, {"sha": "c9d78783391a58dd1632189fca0ee76e13658166", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncmp-2.c", "status": "renamed", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-2.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -9,62 +9,13 @@ extern void abort (void);\n typedef __SIZE_TYPE__ size_t;\n extern int strncmp (const char *, const char *, size_t);\n \n-int main ()\n+void\n+main_test (void)\n {\n   const char *const s1 = \"hello world\";\n   const char *s2, *s3;\n   int n = 6, x;\n   \n-  if (strncmp (s1, \"hello world\", 12) != 0)\n-    abort();\n-  if (strncmp (\"hello world\", s1, 12) != 0)\n-    abort();\n-  if (strncmp (\"hello\", \"hello\", 6) != 0)\n-    abort();\n-  if (strncmp (\"hello\", \"hello\", 2) != 0)\n-    abort();\n-  if (strncmp (\"hello\", \"hello\", 100) != 0)\n-    abort();\n-  if (strncmp (s1+10, \"d\", 100) != 0)\n-    abort();\n-  if (strncmp (10+s1, \"d\", 100) != 0)\n-    abort();\n-  if (strncmp (\"d\", s1+10, 1) != 0)\n-    abort();\n-  if (strncmp (\"d\", 10+s1, 1) != 0)\n-    abort();\n-  if (strncmp (\"hello\", \"aaaaa\", 100) <= 0)\n-    abort();\n-  if (strncmp (\"aaaaa\", \"hello\", 100) >= 0)\n-    abort();\n-  if (strncmp (\"hello\", \"aaaaa\", 1) <= 0)\n-    abort();\n-  if (strncmp (\"aaaaa\", \"hello\", 1) >= 0)\n-    abort();\n-\n-  s2 = s1; s3 = s1+4;\n-  if (strncmp (++s2, ++s3, 0) != 0 || s2 != s1+1 || s3 != s1+5)\n-    abort();\n-  s2 = s1;\n-  if (strncmp (++s2, \"\", 1) <= 0 || s2 != s1+1)\n-    abort();\n-  if (strncmp (\"\", ++s2, 1) >= 0 || s2 != s1+2)\n-    abort();\n-  if (strncmp (++s2, \"\", 100) <= 0 || s2 != s1+3)\n-    abort();\n-  if (strncmp (\"\", ++s2, 100) >= 0 || s2 != s1+4)\n-    abort();\n-  if (strncmp (++s2+6, \"\", 100) != 0 || s2 != s1+5)\n-    abort();\n-  if (strncmp (\"\", ++s2+5, 100) != 0 || s2 != s1+6)\n-    abort();\n-  if (strncmp (\"ozz\", ++s2, 1) != 0 || s2 != s1+7)\n-    abort();\n-  if (strncmp (++s2, \"rzz\", 1) != 0 || s2 != s1+8)\n-    abort();\n-  s2 = s1; s3 = s1+4;\n-  if (strncmp (++s2, ++s3+2, 1) >= 0 || s2 != s1+1 || s3 != s1+5)\n-    abort();\n #if !defined(__OPTIMIZE__) || (defined(__i386__) && !defined(__OPTIMIZE_SIZE__))\n   /* These tests work on platforms which support cmpstrsi.  We test it\n      at -O0 on all platforms to ensure the strncmp logic is correct.  */\n@@ -219,23 +170,4 @@ int main ()\n     abort();\n \n #endif  \n-  \n-  /* Test at least one instance of the __builtin_ style.  We do this\n-     to ensure that it works and that the prototype is correct.  */\n-  if (__builtin_strncmp (\"hello\", \"a\", 100) <= 0)\n-    abort();\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static int\n-strncmp(const char *s1, const char *s2, size_t n)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-8.c"}, {"sha": "266c4a49b4f8ecb3f3a9c59296e77ca194cf5fd4", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncmp-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strncmp.c\""}, {"sha": "888faf569e7e9d3edfe374e80c6fcf52f7e2994b", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncmp.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncmp.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,74 @@\n+/* Copyright (C) 2000, 2001, 2003  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strncmp occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/26/2000.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern int strncmp (const char *, const char *, size_t);\n+\n+void\n+main_test (void)\n+{\n+  const char *const s1 = \"hello world\";\n+  const char *s2, *s3;\n+  int n = 6, x;\n+  \n+  if (strncmp (s1, \"hello world\", 12) != 0)\n+    abort();\n+  if (strncmp (\"hello world\", s1, 12) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"hello\", 6) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"hello\", 2) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"hello\", 100) != 0)\n+    abort();\n+  if (strncmp (s1+10, \"d\", 100) != 0)\n+    abort();\n+  if (strncmp (10+s1, \"d\", 100) != 0)\n+    abort();\n+  if (strncmp (\"d\", s1+10, 1) != 0)\n+    abort();\n+  if (strncmp (\"d\", 10+s1, 1) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"aaaaa\", 100) <= 0)\n+    abort();\n+  if (strncmp (\"aaaaa\", \"hello\", 100) >= 0)\n+    abort();\n+  if (strncmp (\"hello\", \"aaaaa\", 1) <= 0)\n+    abort();\n+  if (strncmp (\"aaaaa\", \"hello\", 1) >= 0)\n+    abort();\n+\n+  s2 = s1; s3 = s1+4;\n+  if (strncmp (++s2, ++s3, 0) != 0 || s2 != s1+1 || s3 != s1+5)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"\", 1) <= 0 || s2 != s1+1)\n+    abort();\n+  if (strncmp (\"\", ++s2, 1) >= 0 || s2 != s1+2)\n+    abort();\n+  if (strncmp (++s2, \"\", 100) <= 0 || s2 != s1+3)\n+    abort();\n+  if (strncmp (\"\", ++s2, 100) >= 0 || s2 != s1+4)\n+    abort();\n+  if (strncmp (++s2+6, \"\", 100) != 0 || s2 != s1+5)\n+    abort();\n+  if (strncmp (\"\", ++s2+5, 100) != 0 || s2 != s1+6)\n+    abort();\n+  if (strncmp (\"ozz\", ++s2, 1) != 0 || s2 != s1+7)\n+    abort();\n+  if (strncmp (++s2, \"rzz\", 1) != 0 || s2 != s1+8)\n+    abort();\n+  s2 = s1; s3 = s1+4;\n+  if (strncmp (++s2, ++s3+2, 1) >= 0 || s2 != s1+1 || s3 != s1+5)\n+    abort();\n+  \n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_strncmp (\"hello\", \"a\", 100) <= 0)\n+    abort();\n+}"}, {"sha": "784f72d033513a3d37524cfa6500c628ee172ab8", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncpy-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strncpy.c\""}, {"sha": "c0a815701e660b22d459f5021207cd721a81ef23", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strncpy.c", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrncpy.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -14,7 +14,8 @@ extern void *memset (void *, int, size_t);\n \n int i;\n \n-int main ()\n+void\n+main_test (void)\n {\n   const char *const src = \"hello world\";\n   const char *src2;\n@@ -72,15 +73,3 @@ int main ()\n \n   return 0;\n }\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static char *\n-strncpy(char *s1, const char *s2, size_t n)\n-{\n-  abort();\n-}\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-7.c"}, {"sha": "66bf8be7c84c09c38a63184004d0f002804ab034", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strpbrk-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpbrk-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpbrk-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpbrk-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strpbrk.c\""}, {"sha": "cc963a9af5e93590d7d35ad104afd404d2560109", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strpbrk.c", "status": "renamed", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpbrk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpbrk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpbrk.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -34,22 +34,9 @@ void fn (const char *foo, const char *const *bar)\n     abort();\n }\n \n-int main()\n+void\n+main_test (void)\n {\n   const char *const foo[] = { \"hello world\", \"bye bye world\" };\n   fn (foo[0], foo + 1);\n-  return 0;\n }\n-\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static char *\n-strpbrk(const char *s1, const char *s2)\n-{\n-  abort();\n-}\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-2.c"}, {"sha": "b31cdf4f594baf56584ed75459ac8cc4fa32fa85", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strpcpy-2-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-2-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/stpcpy.c\""}, {"sha": "eb275c422c24d0a222bbfb2030b60e8867d49a30", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strpcpy-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-2.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,45 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Ensure that builtin stpcpy performs correctly.\n+\n+   Written by Jakub Jelinek, 21/05/2003.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern int memcmp (const void *, const void *, size_t);\n+extern char *stpcpy (char *, const char *);\n+extern int inside_main;\n+\n+long buf1[64];\n+char *buf2 = (char *) (buf1 + 32);\n+long buf5[20];\n+char buf7[20];\n+\n+void\n+__attribute__((noinline))\n+test (long *buf3, char *buf4, char *buf6, int n)\n+{\n+  int i = 4;\n+\n+  if (stpcpy ((char *) buf3, \"abcdefghijklmnop\") != (char *) buf1 + 16\n+      || memcmp (buf1, \"abcdefghijklmnop\", 17))\n+    abort ();\n+\n+  if (__builtin_stpcpy ((char *) buf3, \"ABCDEFG\") != (char *) buf1 + 7\n+      || memcmp (buf1, \"ABCDEFG\\0ijklmnop\", 17))\n+    abort ();\n+\n+  if (stpcpy ((char *) buf3 + i++, \"x\") != (char *) buf1 + 5\n+      || memcmp (buf1, \"ABCDx\\0G\\0ijklmnop\", 17))\n+    abort ();\n+}\n+\n+void\n+main_test (void)\n+{\n+  /* All these tests are allowed to call mempcpy/stpcpy.  */\n+  inside_main = 0;\n+  __builtin_memcpy (buf5, \"RSTUVWXYZ0123456789\", 20);\n+  __builtin_memcpy (buf7, \"RSTUVWXYZ0123456789\", 20);\n+  test (buf1, buf2, \"rstuvwxyz\", 0);\n+}"}, {"sha": "b31cdf4f594baf56584ed75459ac8cc4fa32fa85", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strpcpy-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/stpcpy.c\""}, {"sha": "737bfaa805a1391b084fe909a6f3493619644ebd", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strpcpy.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrpcpy.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,60 @@\n+/* Copyright (C) 2003, 2004  Free Software Foundation.\n+\n+   Ensure builtin stpcpy performs correctly.\n+\n+   Written by Kaveh Ghazi, 4/11/2003.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void abort (void);\n+extern char *strcpy (char *, const char *);\n+extern char *stpcpy (char *, const char *);\n+extern int memcmp (const void *, const void *, size_t);\n+\n+extern int inside_main;\n+\n+const char s1[] = \"123\";\n+char p[32] = \"\";\n+char *s2 = \"defg\";\n+char *s3 = \"FGH\";\n+size_t l1 = 1;\n+\n+void\n+main_test (void)\n+{\n+  int i = 8;\n+\n+#if !defined __i386__ && !defined __x86_64__\n+  /* The functions below might not be optimized into direct stores on all\n+     arches.  It depends on how many instructions would be generated and\n+     what limits the architecture chooses in STORE_BY_PIECES_P.  */\n+  inside_main = 0;\n+#endif\n+  if (stpcpy (p, \"abcde\") != p + 5 || memcmp (p, \"abcde\", 6))\n+    abort ();\n+  if (stpcpy (p + 16, \"vwxyz\" + 1) != p + 16 + 4 || memcmp (p + 16, \"wxyz\", 5))\n+    abort ();\n+  if (stpcpy (p + 1, \"\") != p + 1 + 0 || memcmp (p, \"a\\0cde\", 6))\n+    abort ();\n+  if (stpcpy (p + 3, \"fghij\") != p + 3 + 5 || memcmp (p, \"a\\0cfghij\", 9))\n+    abort ();\n+\n+  if (stpcpy ((i++, p + 20 + 1), \"23\") != (p + 20 + 1 + 2)\n+      || i != 9 || memcmp (p + 19, \"z\\0\"\"23\\0\", 5))\n+    abort ();\n+\n+  if (stpcpy (stpcpy (p, \"ABCD\"), \"EFG\") != p + 7 || memcmp (p, \"ABCDEFG\", 8))\n+    abort();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_stpcpy (p, \"abcde\") != p + 5 || memcmp (p, \"abcde\", 6))\n+    abort ();\n+\n+    /* If the result of stpcpy is ignored, gcc should use strcpy.\n+       This should be optimized always, so set inside_main again.  */\n+  inside_main = 1;\n+  stpcpy (p + 3, s3);\n+  if (memcmp (p, \"abcFGH\", 6))\n+    abort ();\n+}"}, {"sha": "90475eca33dc84d33cb26ab1977ed3561b41c8da", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strrchr-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrrchr-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrrchr-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrrchr-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strrchr.c\""}, {"sha": "3cc8faa2e23a41ae51dfe489cc5772e9cf8d17e7", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strrchr.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrrchr.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1,49 @@\n+/* Copyright (C) 2000, 2003, 2004  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strrchr and rindex\n+   occur and perform correctly.\n+\n+   Written by Jakub Jelinek, 11/7/2000.  */\n+\n+extern void abort (void);\n+extern char *strrchr (const char *, int);\n+extern char *rindex (const char *, int);\n+\n+char *bar = \"hi world\";\n+int x = 7;\n+\n+void\n+main_test (void)\n+{\n+  const char *const foo = \"hello world\";\n+\n+  if (strrchr (foo, 'x'))\n+    abort ();\n+  if (strrchr (foo, 'o') != foo + 7)\n+    abort ();\n+  if (strrchr (foo, 'e') != foo + 1)\n+    abort ();\n+  if (strrchr (foo + 3, 'e'))\n+    abort ();\n+  if (strrchr (foo, '\\0') != foo + 11)\n+    abort ();\n+  if (strrchr (bar, '\\0') != bar + 8)\n+    abort ();\n+  if (strrchr (bar + 4, '\\0') != bar + 8)\n+    abort ();\n+  if (strrchr (bar + (x++ & 3), '\\0') != bar + 8)\n+    abort ();\n+  if (x != 8)\n+    abort ();\n+  /* Test only one instance of rindex since the code path is the same\n+     as that of strrchr. */\n+  if (rindex (\"hello\", 'z') != 0)\n+    abort ();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_strrchr (foo, 'o') != foo + 7)\n+    abort ();\n+  if (__builtin_rindex (foo, 'o') != foo + 7)\n+    abort ();\n+}"}, {"sha": "9e044d793e168bf22286cf37e181f27d16b64731", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strspn-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrspn-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrspn-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrspn-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strspn.c\""}, {"sha": "4f2782a58b69b7035c7dcb9e46205a89aafceba5", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strspn.c", "status": "renamed", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrspn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrspn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrspn.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -10,7 +10,8 @@ typedef __SIZE_TYPE__ size_t;\n extern size_t strspn (const char *, const char *);\n extern char *strcpy (char *, const char *);\n \n-int main ()\n+void\n+main_test (void)\n {\n   const char *const s1 = \"hello world\";\n   char dst[64], *d2;\n@@ -50,18 +51,4 @@ int main ()\n      to ensure that it works and that the prototype is correct.  */\n   if (__builtin_strspn (s1, \"hello\") != 5)\n     abort();\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static size_t\n-strspn (const char *s1, const char *s2)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-11.c"}, {"sha": "a0318212e6714d072466b58c2e34a191034b3776", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strstr-asm-lib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-asm-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-asm-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-asm-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-1-lib.c"}, {"sha": "3c3e45dfa5d551c1302186ed42e05191fd18f83b", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strstr-asm.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-asm.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-1.c"}, {"sha": "591058de499f3643c42562234670ea2fe2ded511", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strstr-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr-lib.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strstr.c\""}, {"sha": "ae503aa43e0ee0c05a436778d54c0d402339f2cc", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strstr.c", "status": "renamed", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6431753ab7961b4330c5f3c7e611ad81e9178/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrstr.c?ref=50c6431753ab7961b4330c5f3c7e611ad81e9178", "patch": "@@ -8,7 +8,8 @@\n extern void abort(void);\n extern char *strstr (const char *, const char *);\n \n-int main()\n+void\n+main_test (void)\n {\n   const char *const foo = \"hello world\";\n   \n@@ -29,18 +30,4 @@ int main()\n      to ensure that it works and that the prototype is correct.  */\n   if (__builtin_strstr (foo + 1, \"world\") != foo + 6)\n     abort();\n-  \n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static char *\n-strstr(const char *s1, const char *s2)\n-{\n-  abort();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-1.c"}, {"sha": "9d79ef0d81740cb6e2fc7c41ebfd33a200c06b59", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-13.c", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-13.c?ref=e1e93ad8abcabbefa292506d8ae08dd66f9011a2", "patch": "@@ -1,59 +0,0 @@\n-/* Copyright (C) 2001  Free Software Foundation.\n-\n-   Ensure all builtin strlen comparisons against zero are optimized\n-   and perform correctly. The multiple calls to strcpy are to prevent\n-   the potentially \"pure\" strlen calls from being removed by CSE.\n-\n-   Written by Roger Sayle, 11/02/2001.  */\n-\n-extern void abort (void);\n-typedef __SIZE_TYPE__ size_t;\n-extern size_t strlen (const char *);\n-extern char *strcpy (char *, const char *);\n-\n-int\n-main ()\n-{\n-  char str[8];\n-  char *ptr;\n-\n-  ptr = str;\n-  strcpy (ptr, \"nts\");\n-  if (strlen (ptr) == 0)\n-    abort ();\n-\n-  strcpy (ptr, \"nts\");\n-  if (strlen (ptr) < 1)\n-    abort ();\n-\n-  strcpy (ptr, \"nts\");\n-  if (strlen (ptr) <= 0)\n-    abort ();\n-\n-  strcpy (ptr, \"nts\");\n-  if (strlen (ptr+3) != 0)\n-    abort ();\n-\n-  strcpy (ptr, \"nts\");\n-  if (strlen (ptr+3) > 0)\n-    abort ();\n-\n-  strcpy (ptr, \"nts\");\n-  if (strlen (str+3) >= 1)\n-    abort ();\n-\n-  return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static size_t\n-strlen (const char *s)\n-{\n-  abort ();\n-}\n-#endif\n-"}, {"sha": "cb0bfcb9dff8f8dee1abb6aa473629df757ea2b2", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-14.c", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e93ad8abcabbefa292506d8ae08dd66f9011a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-14.c?ref=e1e93ad8abcabbefa292506d8ae08dd66f9011a2", "patch": "@@ -1,42 +0,0 @@\n-/* Copyright (C) 2001  Free Software Foundation.\n-\n-   Ensure builtin memset and memcpy are optimized away correctly.\n-\n-   Written by Roger Sayle, 11/23/2001.  */\n-\n-extern void abort (void);\n-typedef __SIZE_TYPE__ size_t;\n-extern void *memset (void *s, int c, size_t n);\n-extern void *memcpy (void *dest, const void *src, size_t n);\n-\n-char dst[32];\n-char src[32];\n-\n-int\n-main ()\n-{\n-    memset (src, 0, 0);\n-    memcpy (dst, src, 0);\n-    return 0;\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-\n-__attribute__ ((noinline))\n-static void *\n-memset (void *s, int c, size_t n)\n-{\n-  abort ();\n-}\n-\n-__attribute__ ((noinline))\n-static void *\n-memcpy (void *dest, const void *src, size_t n)\n-{\n-  abort ();\n-}\n-#endif\n-"}]}