{"sha": "dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzMmJjNzJiYjhiYTAzZTY2Yzg3ZGI5NDcyZDYwNjdkZDUyZDA5Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-19T10:49:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-19T10:49:50Z"}, "message": "re PR fortran/82923 (Automatic allocation of deferred length character using function result)\n\n2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82923\n\tPR fortran/66694\n\tPR fortran/82617\n\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Set the\n\tcharlen backend_decl of the rhs expr to ss->info->string_length\n\tso that the value in the current scope is used.\n\n2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82923\n\t* gfortran.dg/allocate_assumed_charlen_4.f90: New test. Note\n\tthat the patch fixes PR66694 & PR82617, although the testcases\n\tare not explicitly included.\n\nFrom-SVN: r260392", "tree": {"sha": "1a59f41d667dd5435d8d2e528952bb688a13f425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a59f41d667dd5435d8d2e528952bb688a13f425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/comments", "author": null, "committer": null, "parents": [{"sha": "34dbe5e5abe67a9439a6d7fcd2ba9e76fa285d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34dbe5e5abe67a9439a6d7fcd2ba9e76fa285d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34dbe5e5abe67a9439a6d7fcd2ba9e76fa285d5b"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "ef3d2aa37688dd175bd0144bea5c3145c65a6378", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "patch": "@@ -1,3 +1,10 @@\n+2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82923\n+\t* gfortran.dg/allocate_assumed_charlen_4.f90: New test. Note\n+\tthat the patch fixes PR66694 & PR82617, although the testcases\n+\tare not explicitly included.\n+\n 2018-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/63529"}, {"sha": "cf4b23f4391af1f5c9d882f46eef77f101603046", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "patch": "@@ -9698,6 +9698,12 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   if (expr2 && rss == gfc_ss_terminator)\n     return NULL_TREE;\n \n+  /* Ensure that the string length from the current scope is used.  */\n+  if (expr2->ts.type == BT_CHARACTER\n+      && expr2->expr_type == EXPR_FUNCTION\n+      && !expr2->value.function.isym)\n+    expr2->ts.u.cl->backend_decl = rss->info->string_length;\n+\n   gfc_start_block (&fblock);\n \n   /* Since the lhs is allocatable, this must be a descriptor type."}, {"sha": "1b4e16db013bf90af8268dafd953db11b003f1a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "patch": "@@ -1,3 +1,12 @@\n+2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82923\n+\tPR fortran/66694\n+\tPR fortran/82617\n+\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Set the\n+\tcharlen backend_decl of the rhs expr to ss->info->string_length\n+\tso that the value in the current scope is used.\n+\n 2018-05-18  Kito Cheng  <kito.cheng@gmail.com>\n \n \t* gcc.dg/stack-usage-1.c: Add support for rv32e."}, {"sha": "1a5539a642b69dfa95ff8a6111a00e8d9a9485bd", "filename": "gcc/testsuite/gfortran.dg/allocate_assumed_charlen_4.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc32bc72bb8ba03e66c87db9472d6067dd52d09b/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_4.f90?ref=dc32bc72bb8ba03e66c87db9472d6067dd52d09b", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR82923, in which an ICE occurred because the\n+! character length from 'getchars' scope was being used in the\n+! automatic allocation of 'mine'.\n+!\n+! Contributed by \"Werner Blokbuster\"  <werner.blokbuster@gmail.com>\n+!\n+module m\n+    implicit none\n+contains\n+    function getchars(my_len,my_size)\n+        integer, intent(in) :: my_len, my_size\n+        character(my_len) :: getchars(my_size)\n+            getchars = 'A-'\n+    end function getchars\n+\n+    function getchars2(my_len)\n+        integer, intent(in) :: my_len\n+        character(my_len) :: getchars2\n+            getchars2 = 'B--'\n+    end function getchars2\n+end module m\n+\n+program testca\n+    use m, only: getchars, getchars2\n+    implicit none\n+    character(:), allocatable :: mine(:)\n+    character(:), allocatable :: mine2\n+    integer :: i\n+\n+    ! ICE occured at this line:\n+    mine = getchars(2,4)\n+    if (any (mine .ne. [('A-', i = 1, 4)])) stop 1\n+\n+    ! The scalar version was fine and this will keep it so:\n+    mine2 = getchars2(3)\n+    if (mine2 .ne. 'B--') stop 2\n+end program testca"}]}