{"sha": "e32fe22499cfa3b6713e89130074167f56070b3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyZmUyMjQ5OWNmYTNiNjcxM2U4OTEzMDA3NDE2N2Y1NjA3MGIzZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-05-02T20:48:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-05-02T20:48:11Z"}, "message": "(pushdecl): Use lookup_name_current_level_global instead of lookup_name for extern references.\n\n(pushdecl): Use lookup_name_current_level_global instead\nof lookup_name for extern references.  Don't return duplicate decl\nif it came from the global binding level, and there exists a\nconflicting decl in an intervening block.\n(lookup_name_current_level_global); New function.\n\nFrom-SVN: r7189", "tree": {"sha": "ecd5b59984b94602999d943ff27e93555d11c1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecd5b59984b94602999d943ff27e93555d11c1a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32fe22499cfa3b6713e89130074167f56070b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32fe22499cfa3b6713e89130074167f56070b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32fe22499cfa3b6713e89130074167f56070b3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32fe22499cfa3b6713e89130074167f56070b3f/comments", "author": null, "committer": null, "parents": [{"sha": "53dd962232403cec65fa3d06b94835bf9353549d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53dd962232403cec65fa3d06b94835bf9353549d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53dd962232403cec65fa3d06b94835bf9353549d"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "a844d6a1192b8781bdc228012f95d9fd7c20f21b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32fe22499cfa3b6713e89130074167f56070b3f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32fe22499cfa3b6713e89130074167f56070b3f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e32fe22499cfa3b6713e89130074167f56070b3f", "patch": "@@ -1828,7 +1828,7 @@ pushdecl (x)\n       int line;\n \n       if (DECL_EXTERNAL (x) && TREE_PUBLIC (x))\n-\tt = lookup_name (name);\n+\tt = lookup_name_current_level_global (name);\n       else\n \tt = lookup_name_current_level (name);\n       if (t != 0 && t == error_mark_node)\n@@ -1869,7 +1869,12 @@ pushdecl (x)\n \t\t\t\t\t  IDENTIFIER_POINTER (name));\n \t    }\n \n-\t  return t;\n+\t  /* If this is a global decl, and there exists a conflicting local\n+\t     decl in a parent block, then we can't return as yet, because we\n+\t     need to register this decl in the current binding block.  */\n+\t  if (! DECL_EXTERNAL (x) || ! TREE_PUBLIC (x)\n+\t      || lookup_name (name) == t)\n+\t    return t;\n \t}\n \n       /* If we are processing a typedef statement, generate a whole new\n@@ -2609,6 +2614,29 @@ lookup_name_current_level (name)\n \n   return t;\n }\n+\n+/* Similar to `lookup_name_current_level' but also look at the global binding\n+   level.  */\n+\n+tree\n+lookup_name_current_level_global (name)\n+     tree name;\n+{\n+  register tree t = 0;\n+\n+  if (current_binding_level == global_binding_level)\n+    return IDENTIFIER_GLOBAL_VALUE (name);\n+\n+  if (IDENTIFIER_LOCAL_VALUE (name) != 0)\n+    for (t = current_binding_level->names; t; t = TREE_CHAIN (t))\n+      if (DECL_NAME (t) == name)\n+\tbreak;\n+\n+  if (t == 0)\n+    t = IDENTIFIER_GLOBAL_VALUE (name);\n+\n+  return t;\n+}\n \f\n /* Create the predefined scalar types of C,\n    and some nodes representing standard constants (0, 1, (void *)0)."}]}