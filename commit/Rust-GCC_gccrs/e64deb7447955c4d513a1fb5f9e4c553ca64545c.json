{"sha": "e64deb7447955c4d513a1fb5f9e4c553ca64545c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0ZGViNzQ0Nzk1NWM0ZDUxM2ExZmI1ZjllNGM1NTNjYTY0NTQ1Yw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-04-21T07:03:32Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-21T07:03:32Z"}, "message": "d: Use semanticRun to prevent declaration pass from running multiple times.\n\nThis shouldn't happen during normal traversal of the AST provided from\nthe front-end, however as there are some cases where declarations need\nto be visited out of order, such as what is being done in PR d/89017, it\nthen becomes necessary to guard against this.\n\ngcc/d/ChangeLog:\n\n2019-04-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* decl.cc (DeclVisitor::visit(Import)): Set semanticRun after\n\tcompletion, guard against being called more than once.\n\t(DeclVisitor::visit(StructDeclaration)): Likewise.\n\t(DeclVisitor::visit(ClassDeclaration)): Likewise.\n\t(DeclVisitor::visit(InterfaceDeclaration)): Likewise.\n\t(DeclVisitor::visit(VarDeclaration)): Likewise.\n\t(DeclVisitor::visit(TypeInfoDeclaration)): Likewise.\n\nFrom-SVN: r270478", "tree": {"sha": "5702c70a0dee4087eda5ed6068828e5fd6351fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5702c70a0dee4087eda5ed6068828e5fd6351fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e64deb7447955c4d513a1fb5f9e4c553ca64545c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64deb7447955c4d513a1fb5f9e4c553ca64545c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64deb7447955c4d513a1fb5f9e4c553ca64545c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64deb7447955c4d513a1fb5f9e4c553ca64545c/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f452f0d67f1a5a0da4e1e15026c5a9c322c2f5b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f452f0d67f1a5a0da4e1e15026c5a9c322c2f5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f452f0d67f1a5a0da4e1e15026c5a9c322c2f5b7"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "7629c9608f815bb7fdb8c692eb0ec9a7bde49820", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64deb7447955c4d513a1fb5f9e4c553ca64545c/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64deb7447955c4d513a1fb5f9e4c553ca64545c/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=e64deb7447955c4d513a1fb5f9e4c553ca64545c", "patch": "@@ -1,3 +1,13 @@\n+2019-04-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* decl.cc (DeclVisitor::visit(Import)): Set semanticRun after\n+\tcompletion, guard against being called more than once.\n+\t(DeclVisitor::visit(StructDeclaration)): Likewise.\n+\t(DeclVisitor::visit(ClassDeclaration)): Likewise.\n+\t(DeclVisitor::visit(InterfaceDeclaration)): Likewise.\n+\t(DeclVisitor::visit(VarDeclaration)): Likewise.\n+\t(DeclVisitor::visit(TypeInfoDeclaration)): Likewise.\n+\n 2019-04-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* modules.cc (register_module_decl): Don't register unittests against"}, {"sha": "26de272455b4f2d545a5c5f71954be5f55ef1ab2", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64deb7447955c4d513a1fb5f9e4c553ca64545c/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64deb7447955c4d513a1fb5f9e4c553ca64545c/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=e64deb7447955c4d513a1fb5f9e4c553ca64545c", "patch": "@@ -152,6 +152,9 @@ class DeclVisitor : public Visitor\n \n   void visit (Import *d)\n   {\n+    if (d->semanticRun >= PASSobj)\n+      return;\n+\n     /* Implements import declarations by telling the debug back-end we are\n        importing the NAMESPACE_DECL of the module or IMPORTED_DECL of the\n        declaration into the current lexical scope CONTEXT.  NAME is set if\n@@ -193,6 +196,8 @@ class DeclVisitor : public Visitor\n \tdebug_hooks->imported_module_or_decl (decl, name, context,\n \t\t\t\t\t      false, false);\n       }\n+\n+    d->semanticRun = PASSobj;\n   }\n \n   /* Expand any local variables found in tuples.  */\n@@ -349,6 +354,9 @@ class DeclVisitor : public Visitor\n \n   void visit (StructDeclaration *d)\n   {\n+    if (d->semanticRun >= PASSobj)\n+      return;\n+\n     if (d->type->ty == Terror)\n       {\n \terror_at (make_location_t (d->loc),\n@@ -400,6 +408,8 @@ class DeclVisitor : public Visitor\n \n     if (d->xhash)\n       d->xhash->accept (this);\n+\n+    d->semanticRun = PASSobj;\n   }\n \n   /* Finish semantic analysis of functions in vtbl for class CD.  */\n@@ -477,6 +487,9 @@ class DeclVisitor : public Visitor\n \n   void visit (ClassDeclaration *d)\n   {\n+    if (d->semanticRun >= PASSobj)\n+      return;\n+\n     if (d->type->ty == Terror)\n       {\n \terror_at (make_location_t (d->loc),\n@@ -542,13 +555,18 @@ class DeclVisitor : public Visitor\n     tree ctype = TREE_TYPE (build_ctype (d->type));\n     if (TYPE_NAME (ctype))\n       d_pushdecl (TYPE_NAME (ctype));\n+\n+    d->semanticRun = PASSobj;\n   }\n \n   /* Write out compiler generated TypeInfo and vtables for the given interface\n      declaration, walking over all static members.  */\n \n   void visit (InterfaceDeclaration *d)\n   {\n+    if (d->semanticRun >= PASSobj)\n+      return;\n+\n     if (d->type->ty == Terror)\n       {\n \terror_at (make_location_t (d->loc),\n@@ -581,6 +599,8 @@ class DeclVisitor : public Visitor\n     tree ctype = TREE_TYPE (build_ctype (d->type));\n     if (TYPE_NAME (ctype))\n       d_pushdecl (TYPE_NAME (ctype));\n+\n+    d->semanticRun = PASSobj;\n   }\n \n   /* Write out compiler generated TypeInfo and initializer for the given\n@@ -630,6 +650,9 @@ class DeclVisitor : public Visitor\n \n   void visit (VarDeclaration *d)\n   {\n+    if (d->semanticRun >= PASSobj)\n+      return;\n+\n     if (d->type->ty == Terror)\n       {\n \terror_at (make_location_t (d->loc),\n@@ -755,19 +778,25 @@ class DeclVisitor : public Visitor\n \t      }\n \t  }\n       }\n+\n+    d->semanticRun = PASSobj;\n   }\n \n   /* Generate and compile a static TypeInfo declaration, but only if it is\n      needed in the current compilation.  */\n \n   void visit (TypeInfoDeclaration *d)\n   {\n+    if (d->semanticRun >= PASSobj)\n+      return;\n+\n     if (speculative_type_p (d->tinfo))\n       return;\n \n     tree t = get_typeinfo_decl (d);\n     DECL_INITIAL (t) = layout_typeinfo (d);\n     d_finish_decl (t);\n+    d->semanticRun = PASSobj;\n   }\n \n   /* Finish up a function declaration and compile it all the way"}]}