{"sha": "a52eb3bc7c904e73e3cbd53c0439b970143064cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyZWIzYmM3YzkwNGU3M2UzY2JkNTNjMDQzOWI5NzAxNDMwNjRjYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-09-14T05:44:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-09-14T05:44:39Z"}, "message": "re PR c++/16162 (Rejects valid member-template-definition)\n\n\tPR c++/16162\n\t* parser.c (cp_parser_id_expression): Correct value for\n\tis_declarator.\n\t(cp_parser_nested_name_specifier_opt): Look through typenames as\n\tnecessary.\n\t(cp_parser_template_name): Honor check_dependency_p.\n\n\tPR c++/16162\n\t* g++.dg/template/decl2.C: New test.\n\nFrom-SVN: r87483", "tree": {"sha": "3a332a2f92838c27b7c50c00f897c00a624ad0a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a332a2f92838c27b7c50c00f897c00a624ad0a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a52eb3bc7c904e73e3cbd53c0439b970143064cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52eb3bc7c904e73e3cbd53c0439b970143064cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52eb3bc7c904e73e3cbd53c0439b970143064cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52eb3bc7c904e73e3cbd53c0439b970143064cc/comments", "author": null, "committer": null, "parents": [{"sha": "869d095e242efc092bb6c009a281ca20ad30abc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869d095e242efc092bb6c009a281ca20ad30abc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869d095e242efc092bb6c009a281ca20ad30abc3"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "6d53c933a49ad250300c1c6469320dcb757e1810", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a52eb3bc7c904e73e3cbd53c0439b970143064cc", "patch": "@@ -1,5 +1,12 @@\n 2004-09-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/16162\n+\t* parser.c (cp_parser_id_expression): Correct value for\n+\tis_declarator.\n+\t(cp_parser_nested_name_specifier_opt): Look through typenames as\n+\tnecessary.\n+\t(cp_parser_template_name): Honor check_dependency_p.\n+\n \tPR c++/16716\n \t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n \tRobustify."}, {"sha": "05f447a6325bced67a5a9c22fead75598d478488", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a52eb3bc7c904e73e3cbd53c0439b970143064cc", "patch": "@@ -3053,7 +3053,7 @@ cp_parser_id_expression (cp_parser *parser,\n \t\t\t\t\t    /*typename_keyword_p=*/false,\n \t\t\t\t\t    check_dependency_p,\n \t\t\t\t\t    /*type_p=*/false,\n-\t\t\t\t\t    /*is_declarator=*/false)\n+\t\t\t\t\t    declarator_p)\n        != NULL_TREE);\n   /* If there is a nested-name-specifier, then we are looking at\n      the first qualified-id production.  */\n@@ -3493,6 +3493,14 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t might destroy it.  */\n       old_scope = parser->scope;\n       saved_qualifying_scope = parser->qualifying_scope;\n+      /* In a declarator-id like \"X<T>::I::Y<T>\" we must be able to\n+\t look up names in \"X<T>::I\" in order to determine that \"Y\" is\n+\t a template.  So, if we have a typename at this point, we make\n+\t an effort to look through it.  */\n+      if (is_declaration && parser->scope \n+\t  && TREE_CODE (parser->scope) == TYPENAME_TYPE)\n+\tparser->scope = resolve_typename_type (parser->scope, \n+\t\t\t\t\t       /*only_current_p=*/false);\n       /* Parse the qualifying entity.  */\n       new_scope\n \t= cp_parser_class_or_namespace_name (parser,\n@@ -8671,6 +8679,7 @@ cp_parser_template_name (cp_parser* parser,\n       if (is_declaration\n \t  && !template_keyword_p\n \t  && parser->scope && TYPE_P (parser->scope)\n+\t  && check_dependency_p\n \t  && dependent_type_p (parser->scope)\n \t  /* Do not do this for dtors (or ctors), since they never\n \t     need the template keyword before their name.  */"}, {"sha": "4e59e16fbcb85b1916a481a9fda334ff15fd0928", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a52eb3bc7c904e73e3cbd53c0439b970143064cc", "patch": "@@ -1,3 +1,8 @@\n+2004-09-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16162\n+\t* g++.dg/template/decl2.C: New test.\n+\t\n 2004-09-13  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/17090"}, {"sha": "3a77777bd0aa19db4780599d71821dd39abb7548", "filename": "gcc/testsuite/g++.dg/template/decl2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdecl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52eb3bc7c904e73e3cbd53c0439b970143064cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdecl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdecl2.C?ref=a52eb3bc7c904e73e3cbd53c0439b970143064cc", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/16162\n+\n+template <int N> struct O { \n+  struct I { \n+    template <typename T> struct II { \n+      void f(); \n+    }; \n+  }; \n+}; \n+ \n+template <int N> \n+template <typename T> \n+void O<N>::I::II<T>::f () {} "}]}