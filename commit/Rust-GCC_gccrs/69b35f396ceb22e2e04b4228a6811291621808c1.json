{"sha": "69b35f396ceb22e2e04b4228a6811291621808c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliMzVmMzk2Y2ViMjJlMmUwNGI0MjI4YTY4MTEyOTE2MjE4MDhjMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-10-04T18:14:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-10-04T18:14:30Z"}, "message": "compiler: include selected constant types during export processing\n    \n    The machinery that collects types referenced by expressions that are\n    part of inlinable function bodies was missing the types of local named\n    constants in certain cases. This patch updates the\n    Collect_export_references::expression() hook to look for references to\n    local named constants and include their types in the exported set.\n    \n    Fixes golang/go#34577.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/198017\n\nFrom-SVN: r276594", "tree": {"sha": "e5b8c8a1488b30e41d0039391145aeb734ef6f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b8c8a1488b30e41d0039391145aeb734ef6f6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b35f396ceb22e2e04b4228a6811291621808c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b35f396ceb22e2e04b4228a6811291621808c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b35f396ceb22e2e04b4228a6811291621808c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b35f396ceb22e2e04b4228a6811291621808c1/comments", "author": null, "committer": null, "parents": [{"sha": "432bbcbb1e9d4a2b2bd946a0120c2be52c4ec01d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432bbcbb1e9d4a2b2bd946a0120c2be52c4ec01d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432bbcbb1e9d4a2b2bd946a0120c2be52c4ec01d"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "1508eb166504666e548d5e177f4d31a664798323", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=69b35f396ceb22e2e04b4228a6811291621808c1", "patch": "@@ -1,4 +1,4 @@\n-441f3f1f350b532707c48273d7f454cf1c4e959f\n+ddfb845fad1f2e8b84383f262ed5ea5be7b3e35a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "5aaa207ff5fbf69a19ae04bebe6f588f27558b8a", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=69b35f396ceb22e2e04b4228a6811291621808c1", "patch": "@@ -249,6 +249,14 @@ Collect_export_references::expression(Expression** pexpr)\n       return TRAVERSE_CONTINUE;\n     }\n \n+  const Named_object* nco = expr->named_constant();\n+  if (nco != 0 && nco->package() == NULL)\n+    {\n+      const Named_constant *nc = nco->const_value();\n+      Type::traverse(nc->type(), this);\n+      return TRAVERSE_CONTINUE;\n+    }\n+\n   return TRAVERSE_CONTINUE;\n }\n \n@@ -322,6 +330,10 @@ Collect_export_references::type(Type* type)\n   if (type->is_void_type())\n     return TRAVERSE_SKIP_COMPONENTS;\n \n+  // Skip the nil type, turns up in function bodies.\n+  if (type->is_nil_type())\n+    return TRAVERSE_SKIP_COMPONENTS;\n+\n   // Skip abstract types.  We should never see these in real code,\n   // only in things like const declarations.\n   if (type->is_abstract())"}, {"sha": "b614921cf39e4ab07f823cc0dfb627d101a49717", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=69b35f396ceb22e2e04b4228a6811291621808c1", "patch": "@@ -3234,6 +3234,10 @@ class Const_expression : public Expression\n   named_object()\n   { return this->constant_; }\n \n+  const Named_object*\n+  named_object() const\n+  { return this->constant_; }\n+\n   // Check that the initializer does not refer to the constant itself.\n   void\n   check_for_init_loop();\n@@ -16782,6 +16786,15 @@ Expression::is_local_variable() const\n \t  || (no->is_variable() && !no->var_value()->is_global()));\n }\n \n+const Named_object*\n+Expression::named_constant() const\n+{\n+  if (this->classification() != EXPRESSION_CONST_REFERENCE)\n+    return NULL;\n+  const Const_expression* ce = static_cast<const Const_expression*>(this);\n+  return ce->named_object();\n+}\n+\n // Class Type_guard_expression.\n \n // Traversal."}, {"sha": "a0370e1ac9b5248f676f263cab5bc8cd297c5b61", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b35f396ceb22e2e04b4228a6811291621808c1/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=69b35f396ceb22e2e04b4228a6811291621808c1", "patch": "@@ -587,6 +587,11 @@ class Expression\n   boolean_constant_value(bool* val) const\n   { return this->do_boolean_constant_value(val); }\n \n+  // If this is a const reference expression, return the named\n+  // object to which the expression refers, otherwise return NULL.\n+  const Named_object*\n+  named_constant() const;\n+\n   // This is called if the value of this expression is being\n   // discarded.  This issues warnings about computed values being\n   // unused.  This returns true if all is well, false if it issued an"}]}