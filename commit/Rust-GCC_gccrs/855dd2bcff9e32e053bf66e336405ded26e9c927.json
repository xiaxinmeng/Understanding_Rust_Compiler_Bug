{"sha": "855dd2bcff9e32e053bf66e336405ded26e9c927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1ZGQyYmNmZjllMzJlMDUzYmY2NmUzMzY0MDVkZWQyNmU5YzkyNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-02-08T18:06:11Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-02-08T18:06:11Z"}, "message": "re PR java/22578 (should inline floatToIntBits et al)\n\ngcc/java\n\tPR java/22578:\n\t* check-init.c (check_init): Handle VIEW_CONVERT_EXPR.\n\t* builtins.c (convert_real): New function.\n\t(java_builtins): Handle Float.intBitsToFloat,\n\tFloat.floatToRawIntBits, Double.longBitsToDouble,\n\tDouble.doubleToRawLongBits.\nlibjava\n\tPR java/22578:\n\t* gcj/javaprims.h: Updated.\n\t* sources.am, Makefile.in: Rebuilt.\n\t* java/lang/natDouble.cc (doubleToLongBits): Moved to VMDouble.\n\t(doubleToRawLongBits): Likewise.\n\t(longBitsToDouble): Likewise.\n\t(toString): Likewise.\n\t(parseDouble): Likewise.\n\t* java/lang/natFloat.cc (floatToIntBits): Moved to VMFloat.\n\t(floatToRawIntBits): Likewise.\n\t(intBitsToFloat): Likewise.\n\t* java/lang/VMDouble.java: New file.\n\t* java/lang/VMFloat.java: New file.\n\t* java/lang/Float.java, java/lang/Double.java: Removed.\n\nFrom-SVN: r110759", "tree": {"sha": "9a1df881ae846a312ad5ddcb0929d04574b40956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a1df881ae846a312ad5ddcb0929d04574b40956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/855dd2bcff9e32e053bf66e336405ded26e9c927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855dd2bcff9e32e053bf66e336405ded26e9c927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855dd2bcff9e32e053bf66e336405ded26e9c927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855dd2bcff9e32e053bf66e336405ded26e9c927/comments", "author": null, "committer": null, "parents": [{"sha": "59c02d8a613e46512e852d54ab2ff9209f47acc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59c02d8a613e46512e852d54ab2ff9209f47acc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59c02d8a613e46512e852d54ab2ff9209f47acc7"}], "stats": {"total": 1395, "additions": 280, "deletions": 1115}, "files": [{"sha": "89cef7c319dd3a8ac3b9746629b71801219180d9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -1,3 +1,12 @@\n+2006-02-08  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/22578:\n+\t* check-init.c (check_init): Handle VIEW_CONVERT_EXPR.\n+\t* builtins.c (convert_real): New function.\n+\t(java_builtins): Handle Float.intBitsToFloat,\n+\tFloat.floatToRawIntBits, Double.longBitsToDouble,\n+\tDouble.doubleToRawLongBits.\n+\n 2006-02-07  Andrew Haley  <aph@redhat.com>\n \n \t* expr.c (expand_invoke): (BC mode.)  If we find a method in a"}, {"sha": "bd7e696924a5a40a55e4d185f3f4136927186fe5", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -39,6 +39,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n static tree max_builtin (tree, tree);\n static tree min_builtin (tree, tree);\n static tree abs_builtin (tree, tree);\n+static tree convert_real (tree, tree);\n \n static tree java_build_function_call_expr (tree, tree);\n \n@@ -85,6 +86,10 @@ static GTY(()) struct builtin_record java_builtins[] =\n   { { \"java.lang.Math\" }, { \"sin\" }, NULL, BUILT_IN_SIN },\n   { { \"java.lang.Math\" }, { \"sqrt\" }, NULL, BUILT_IN_SQRT },\n   { { \"java.lang.Math\" }, { \"tan\" }, NULL, BUILT_IN_TAN },\n+  { { \"java.lang.Float\" }, { \"intBitsToFloat\" }, convert_real, 0 },\n+  { { \"java.lang.Double\" }, { \"longBitsToDouble\" }, convert_real, 0 },\n+  { { \"java.lang.Float\" }, { \"floatToRawIntBits\" }, convert_real, 0 },\n+  { { \"java.lang.Double\" }, { \"doubleToRawLongBits\" }, convert_real, 0 },\n   { { NULL }, { NULL }, NULL, END_BUILTINS }\n };\n \n@@ -131,6 +136,13 @@ java_build_function_call_expr (tree fn, tree arglist)\n \t\t      call_expr, arglist, NULL_TREE);\n }\n \n+static tree\n+convert_real (tree method_return_type, tree method_arguments)\n+{\n+  return build1 (VIEW_CONVERT_EXPR, method_return_type,\n+\t\t TREE_VALUE (method_arguments));\n+}\n+\n \f\n \n #define BUILTIN_NOTHROW 1"}, {"sha": "6eb1f162a7a4723fb6f67b3cd76f476b53b6fa18", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -1,5 +1,5 @@\n /* Code to test for \"definitive [un]assignment\".\n-   Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005 Free Software Foundation,\n+   Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2006 Free Software Foundation,\n    Inc.\n \n This file is part of GCC.\n@@ -806,6 +806,7 @@ check_init (tree exp, words before)\n     case TRUTH_NOT_EXPR:\n     case BIT_NOT_EXPR:\n     case CONVERT_EXPR:\n+    case VIEW_CONVERT_EXPR:\n     case BIT_FIELD_REF:\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:"}, {"sha": "2372781607dd8ed71f333b130b1eafc5801ba07b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -1,3 +1,20 @@\n+2006-02-08  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/22578:\n+\t* gcj/javaprims.h: Updated.\n+\t* sources.am, Makefile.in: Rebuilt.\n+\t* java/lang/natDouble.cc (doubleToLongBits): Moved to VMDouble.\n+\t(doubleToRawLongBits): Likewise.\n+\t(longBitsToDouble): Likewise.\n+\t(toString): Likewise.\n+\t(parseDouble): Likewise.\n+\t* java/lang/natFloat.cc (floatToIntBits): Moved to VMFloat.\n+\t(floatToRawIntBits): Likewise.\n+\t(intBitsToFloat): Likewise.\n+\t* java/lang/VMDouble.java: New file.\n+\t* java/lang/VMFloat.java: New file.\n+\t* java/lang/Float.java, java/lang/Double.java: Removed.\n+\n 2006-02-06  Tom Tromey  <tromey@redhat.com>\n \n \t* gij.cc (version): Use 2006."}, {"sha": "d9cc9b5fec072680c1a051a8df8f9950f651ef18", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -2884,12 +2884,12 @@ classpath/java/lang/Cloneable.java \\\n classpath/java/lang/Comparable.java \\\n classpath/java/lang/Compiler.java \\\n java/lang/ConcreteProcess.java \\\n-java/lang/Double.java \\\n+classpath/java/lang/Double.java \\\n classpath/java/lang/EnumConstantNotPresentException.java \\\n classpath/java/lang/Error.java \\\n classpath/java/lang/Exception.java \\\n classpath/java/lang/ExceptionInInitializerError.java \\\n-java/lang/Float.java \\\n+classpath/java/lang/Float.java \\\n classpath/java/lang/IllegalAccessError.java \\\n classpath/java/lang/IllegalAccessException.java \\\n classpath/java/lang/IllegalArgumentException.java \\\n@@ -2947,6 +2947,8 @@ classpath/java/lang/UnsupportedClassVersionError.java \\\n classpath/java/lang/UnsupportedOperationException.java \\\n java/lang/VMClassLoader.java \\\n java/lang/VMCompiler.java \\\n+java/lang/VMDouble.java \\\n+java/lang/VMFloat.java \\\n java/lang/VMSecurityManager.java \\\n java/lang/VMThrowable.java \\\n classpath/java/lang/VerifyError.java \\"}, {"sha": "f8c2ed680c717aa8c101190934426ca955465e7a", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -1,7 +1,7 @@\n // javaprims.h - Main external header file for libgcj.  -*- c++ -*-\n \n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation\n \n    This file is part of libgcj.\n@@ -218,6 +218,8 @@ extern \"Java\"\n       class UnsupportedOperationException;\n       class VMClassLoader;\n       class VMCompiler;\n+      class VMDouble;\n+      class VMFloat;\n       class VMSecurityManager;\n       class VMThrowable;\n       class VerifyError;"}, {"sha": "92f8a230822657eda4c8b1ecb322bc88262a2593", "filename": "libjava/java/lang/Double.java", "status": "removed", "additions": 0, "deletions": 546, "changes": 546, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c02d8a613e46512e852d54ab2ff9209f47acc7/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c02d8a613e46512e852d54ab2ff9209f47acc7/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=59c02d8a613e46512e852d54ab2ff9209f47acc7", "patch": "@@ -1,546 +0,0 @@\n-/* Double.java -- object wrapper for double\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006\n-   Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n-02110-1301 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-package java.lang;\n-\n-\n-/**\n- * Instances of class <code>Double</code> represent primitive\n- * <code>double</code> values.\n- *\n- * Additionally, this class provides various helper functions and variables\n- * related to doubles.\n- *\n- * @author Paul Fisher\n- * @author Andrew Haley (aph@cygnus.com)\n- * @author Eric Blake (ebb9@email.byu.edu)\n- * @since 1.0\n- * @status updated to 1.4\n- */\n-public final class Double extends Number implements Comparable\n-{\n-  /**\n-   * Compatible with JDK 1.0+.\n-   */\n-  private static final long serialVersionUID = -9172774392245257468L;\n-\n-  /**\n-   * The maximum positive value a <code>double</code> may represent\n-   * is 1.7976931348623157e+308.\n-   */\n-  public static final double MAX_VALUE = 1.7976931348623157e+308;\n-\n-  /**\n-   * The minimum positive value a <code>double</code> may represent\n-   * is 5e-324.\n-   */\n-  public static final double MIN_VALUE = 5e-324;\n-\n-  /**\n-   * The value of a double representation -1.0/0.0, negative\n-   * infinity.\n-   */\n-  public static final double NEGATIVE_INFINITY = -1.0 / 0.0;\n-\n-  /**\n-   * The value of a double representing 1.0/0.0, positive infinity.\n-   */\n-  public static final double POSITIVE_INFINITY = 1.0 / 0.0;\n-\n-  /**\n-   * All IEEE 754 values of NaN have the same value in Java.\n-   */\n-  public static final double NaN = 0.0 / 0.0;\n-\n-  /**\n-   * The number of bits needed to represent a <code>double</code>.\n-   * @since 1.5\n-   */\n-  public static final int SIZE = 64;\n-\n-  /**\n-   * The primitive type <code>double</code> is represented by this\n-   * <code>Class</code> object.\n-   * @since 1.1\n-   */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass('D');\n-\n-  /**\n-   * The immutable value of this Double.\n-   *\n-   * @serial the wrapped double\n-   */\n-  private final double value;\n-\n-  /**\n-   * Create a <code>Double</code> from the primitive <code>double</code>\n-   * specified.\n-   *\n-   * @param value the <code>double</code> argument\n-   */\n-  public Double(double value)\n-  {\n-    this.value = value;\n-  }\n-\n-  /**\n-   * Create a <code>Double</code> from the specified <code>String</code>.\n-   * This method calls <code>Double.parseDouble()</code>.\n-   *\n-   * @param s the <code>String</code> to convert\n-   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n-   *         <code>double</code>\n-   * @throws NullPointerException if <code>s</code> is null\n-   * @see #parseDouble(String)\n-   */\n-  public Double(String s)\n-  {\n-    value = parseDouble(s);\n-  }\n-\n-  /**\n-   * Convert the <code>double</code> to a <code>String</code>.\n-   * Floating-point string representation is fairly complex: here is a\n-   * rundown of the possible values.  \"<code>[-]</code>\" indicates that a\n-   * negative sign will be printed if the value (or exponent) is negative.\n-   * \"<code>&lt;number&gt;</code>\" means a string of digits ('0' to '9').\n-   * \"<code>&lt;digit&gt;</code>\" means a single digit ('0' to '9').<br>\n-   *\n-   * <table border=1>\n-   * <tr><th>Value of Double</th><th>String Representation</th></tr>\n-   * <tr><td>[+-] 0</td> <td><code>[-]0.0</code></td></tr>\n-   * <tr><td>Between [+-] 10<sup>-3</sup> and 10<sup>7</sup>, exclusive</td>\n-   *     <td><code>[-]number.number</code></td></tr>\n-   * <tr><td>Other numeric value</td>\n-   *     <td><code>[-]&lt;digit&gt;.&lt;number&gt;\n-   *          E[-]&lt;number&gt;</code></td></tr>\n-   * <tr><td>[+-] infinity</td> <td><code>[-]Infinity</code></td></tr>\n-   * <tr><td>NaN</td> <td><code>NaN</code></td></tr>\n-   * </table>\n-   *\n-   * Yes, negative zero <em>is</em> a possible value.  Note that there is\n-   * <em>always</em> a <code>.</code> and at least one digit printed after\n-   * it: even if the number is 3, it will be printed as <code>3.0</code>.\n-   * After the \".\", all digits will be printed except trailing zeros. The\n-   * result is rounded to the shortest decimal number which will parse back\n-   * to the same double.\n-   *\n-   * <p>To create other output formats, use {@link java.text.NumberFormat}.\n-   *\n-   * @XXX specify where we are not in accord with the spec.\n-   *\n-   * @param d the <code>double</code> to convert\n-   * @return the <code>String</code> representing the <code>double</code>\n-   */\n-  public static String toString(double d)\n-  {\n-    return toString(d, false);\n-  }\n-\n-  /**\n-   * Returns a <code>Double</code> object wrapping the value.\n-   * In contrast to the <code>Double</code> constructor, this method\n-   * may cache some values.  It is used by boxing conversion.\n-   *\n-   * @param val the value to wrap\n-   * @return the <code>Double</code>\n-   * \n-   * @since 1.5\n-   */\n-  public static Double valueOf(double val)\n-  {\n-    // We don't actually cache, but we could.\n-    return new Double(val);\n-  }\n-\n-  /**\n-   * Create a new <code>Double</code> object using the <code>String</code>.\n-   *\n-   * @param s the <code>String</code> to convert\n-   * @return the new <code>Double</code>\n-   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n-   *         <code>double</code>\n-   * @throws NullPointerException if <code>s</code> is null.\n-   * @see #parseDouble(String)\n-   */\n-  public static Double valueOf(String s)\n-  {\n-    return new Double(parseDouble(s));\n-  }\n-\n-  /**\n-   * Parse the specified <code>String</code> as a <code>double</code>. The\n-   * extended BNF grammar is as follows:<br>\n-   * <pre>\n-   * <em>DecodableString</em>:\n-   *      ( [ <code>-</code> | <code>+</code> ] <code>NaN</code> )\n-   *    | ( [ <code>-</code> | <code>+</code> ] <code>Infinity</code> )\n-   *    | ( [ <code>-</code> | <code>+</code> ] <em>FloatingPoint</em>\n-   *              [ <code>f</code> | <code>F</code> | <code>d</code>\n-   *                | <code>D</code>] )\n-   * <em>FloatingPoint</em>:\n-   *      ( { <em>Digit</em> }+ [ <code>.</code> { <em>Digit</em> } ]\n-   *              [ <em>Exponent</em> ] )\n-   *    | ( <code>.</code> { <em>Digit</em> }+ [ <em>Exponent</em> ] )\n-   * <em>Exponent</em>:\n-   *      ( ( <code>e</code> | <code>E</code> )\n-   *              [ <code>-</code> | <code>+</code> ] { <em>Digit</em> }+ )\n-   * <em>Digit</em>: <em><code>'0'</code> through <code>'9'</code></em>\n-   * </pre>\n-   *\n-   * <p>NaN and infinity are special cases, to allow parsing of the output\n-   * of toString.  Otherwise, the result is determined by calculating\n-   * <em>n * 10<sup>exponent</sup></em> to infinite precision, then rounding\n-   * to the nearest double. Remember that many numbers cannot be precisely\n-   * represented in floating point. In case of overflow, infinity is used,\n-   * and in case of underflow, signed zero is used. Unlike Integer.parseInt,\n-   * this does not accept Unicode digits outside the ASCII range.\n-   *\n-   * <p>If an unexpected character is found in the <code>String</code>, a\n-   * <code>NumberFormatException</code> will be thrown.  Leading and trailing\n-   * 'whitespace' is ignored via <code>String.trim()</code>, but spaces\n-   * internal to the actual number are not allowed.\n-   *\n-   * <p>To parse numbers according to another format, consider using\n-   * {@link java.text.NumberFormat}.\n-   *\n-   * @XXX specify where/how we are not in accord with the spec.\n-   *\n-   * @param str the <code>String</code> to convert\n-   * @return the <code>double</code> value of <code>s</code>\n-   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n-   *         <code>double</code>\n-   * @throws NullPointerException if <code>s</code> is null\n-   * @see #MIN_VALUE\n-   * @see #MAX_VALUE\n-   * @see #POSITIVE_INFINITY\n-   * @see #NEGATIVE_INFINITY\n-   * @since 1.2\n-   */\n-  public static native double parseDouble(String str);\n-\n-  /**\n-   * Return <code>true</code> if the <code>double</code> has the same\n-   * value as <code>NaN</code>, otherwise return <code>false</code>.\n-   *\n-   * @param v the <code>double</code> to compare\n-   * @return whether the argument is <code>NaN</code>.\n-   */\n-  public static boolean isNaN(double v)\n-  {\n-    // This works since NaN != NaN is the only reflexive inequality\n-    // comparison which returns true.\n-    return v != v;\n-  }\n-\n-  /**\n-   * Return <code>true</code> if the <code>double</code> has a value\n-   * equal to either <code>NEGATIVE_INFINITY</code> or\n-   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n-   *\n-   * @param v the <code>double</code> to compare\n-   * @return whether the argument is (-/+) infinity.\n-   */\n-  public static boolean isInfinite(double v)\n-  {\n-    return v == POSITIVE_INFINITY || v == NEGATIVE_INFINITY;\n-  }\n-\n-  /**\n-   * Return <code>true</code> if the value of this <code>Double</code>\n-   * is the same as <code>NaN</code>, otherwise return <code>false</code>.\n-   *\n-   * @return whether this <code>Double</code> is <code>NaN</code>\n-   */\n-  public boolean isNaN()\n-  {\n-    return isNaN(value);\n-  }\n-\n-  /**\n-   * Return <code>true</code> if the value of this <code>Double</code>\n-   * is the same as <code>NEGATIVE_INFINITY</code> or\n-   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n-   *\n-   * @return whether this <code>Double</code> is (-/+) infinity\n-   */\n-  public boolean isInfinite()\n-  {\n-    return isInfinite(value);\n-  }\n-\n-  /**\n-   * Convert the <code>double</code> value of this <code>Double</code>\n-   * to a <code>String</code>.  This method calls\n-   * <code>Double.toString(double)</code> to do its dirty work.\n-   *\n-   * @return the <code>String</code> representation\n-   * @see #toString(double)\n-   */\n-  public String toString()\n-  {\n-    return toString(value);\n-  }\n-\n-  /**\n-   * Return the value of this <code>Double</code> as a <code>byte</code>.\n-   *\n-   * @return the byte value\n-   * @since 1.1\n-   */\n-  public byte byteValue()\n-  {\n-    return (byte) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Double</code> as a <code>short</code>.\n-   *\n-   * @return the short value\n-   * @since 1.1\n-   */\n-  public short shortValue()\n-  {\n-    return (short) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Double</code> as an <code>int</code>.\n-   *\n-   * @return the int value\n-   */\n-  public int intValue()\n-  {\n-    return (int) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Double</code> as a <code>long</code>.\n-   *\n-   * @return the long value\n-   */\n-  public long longValue()\n-  {\n-    return (long) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Double</code> as a <code>float</code>.\n-   *\n-   * @return the float value\n-   */\n-  public float floatValue()\n-  {\n-    return (float) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Double</code>.\n-   *\n-   * @return the double value\n-   */\n-  public double doubleValue()\n-  {\n-    return value;\n-  }\n-\n-  /**\n-   * Return a hashcode representing this Object. <code>Double</code>'s hash\n-   * code is calculated by:<br>\n-   * <code>long v = Double.doubleToLongBits(doubleValue());<br>\n-   *    int hash = (int)(v^(v&gt;&gt;32))</code>.\n-   *\n-   * @return this Object's hash code\n-   * @see #doubleToLongBits(double)\n-   */\n-  public int hashCode()\n-  {\n-    long v = doubleToLongBits(value);\n-    return (int) (v ^ (v >>> 32));\n-  }\n-\n-  /**\n-   * Returns <code>true</code> if <code>obj</code> is an instance of\n-   * <code>Double</code> and represents the same double value. Unlike comparing\n-   * two doubles with <code>==</code>, this treats two instances of\n-   * <code>Double.NaN</code> as equal, but treats <code>0.0</code> and\n-   * <code>-0.0</code> as unequal.\n-   *\n-   * <p>Note that <code>d1.equals(d2)</code> is identical to\n-   * <code>doubleToLongBits(d1.doubleValue()) ==\n-   *    doubleToLongBits(d2.doubleValue())</code>.\n-   *\n-   * @param obj the object to compare\n-   * @return whether the objects are semantically equal\n-   */\n-  public boolean equals(Object obj)\n-  {\n-    if (! (obj instanceof Double))\n-      return false;\n-\n-    double d = ((Double) obj).value;\n-\n-    // Avoid call to native method. However, some implementations, like gcj,\n-    // are better off using floatToIntBits(value) == floatToIntBits(f).\n-    // Check common case first, then check NaN and 0.\n-    if (value == d)\n-      return (value != 0) || (1 / value == 1 / d);\n-    return isNaN(value) && isNaN(d);\n-  }\n-\n-  /**\n-   * Convert the double to the IEEE 754 floating-point \"double format\" bit\n-   * layout. Bit 63 (the most significant) is the sign bit, bits 62-52\n-   * (masked by 0x7ff0000000000000L) represent the exponent, and bits 51-0\n-   * (masked by 0x000fffffffffffffL) are the mantissa. This function\n-   * collapses all versions of NaN to 0x7ff8000000000000L. The result of this\n-   * function can be used as the argument to\n-   * <code>Double.longBitsToDouble(long)</code> to obtain the original\n-   * <code>double</code> value.\n-   *\n-   * @param value the <code>double</code> to convert\n-   * @return the bits of the <code>double</code>\n-   * @see #longBitsToDouble(long)\n-   */\n-  // GCJ LOCAL: We diverge from Classpath for efficiency.\n-  public static native long doubleToLongBits(double value);\n-  // END GCJ LOCAL\n-\n-  /**\n-   * Convert the double to the IEEE 754 floating-point \"double format\" bit\n-   * layout. Bit 63 (the most significant) is the sign bit, bits 62-52\n-   * (masked by 0x7ff0000000000000L) represent the exponent, and bits 51-0\n-   * (masked by 0x000fffffffffffffL) are the mantissa. This function\n-   * leaves NaN alone, rather than collapsing to a canonical value. The\n-   * result of this function can be used as the argument to\n-   * <code>Double.longBitsToDouble(long)</code> to obtain the original\n-   * <code>double</code> value.\n-   *\n-   * @param value the <code>double</code> to convert\n-   * @return the bits of the <code>double</code>\n-   * @see #longBitsToDouble(long)\n-   */\n-  // GCJ LOCAL: We diverge from Classpath for efficiency.\n-  public static native long doubleToRawLongBits(double value);\n-  // END GCJ LOCAL\n-\n-  /**\n-   * Convert the argument in IEEE 754 floating-point \"double format\" bit\n-   * layout to the corresponding float. Bit 63 (the most significant) is the\n-   * sign bit, bits 62-52 (masked by 0x7ff0000000000000L) represent the\n-   * exponent, and bits 51-0 (masked by 0x000fffffffffffffL) are the mantissa.\n-   * This function leaves NaN alone, so that you can recover the bit pattern\n-   * with <code>Double.doubleToRawLongBits(double)</code>.\n-   *\n-   * @param bits the bits to convert\n-   * @return the <code>double</code> represented by the bits\n-   * @see #doubleToLongBits(double)\n-   * @see #doubleToRawLongBits(double)\n-   */\n-  // GCJ LOCAL: We diverge from Classpath for efficiency.\n-  public static native double longBitsToDouble(long bits);\n-  // END GCJ LOCAL\n-\n-  /**\n-   * Compare two Doubles numerically by comparing their <code>double</code>\n-   * values. The result is positive if the first is greater, negative if the\n-   * second is greater, and 0 if the two are equal. However, this special\n-   * cases NaN and signed zero as follows: NaN is considered greater than\n-   * all other doubles, including <code>POSITIVE_INFINITY</code>, and positive\n-   * zero is considered greater than negative zero.\n-   *\n-   * @param d the Double to compare\n-   * @return the comparison\n-   * @since 1.2\n-   */\n-  public int compareTo(Double d)\n-  {\n-    return compare(value, d.value);\n-  }\n-\n-  /**\n-   * Behaves like <code>compareTo(Double)</code> unless the Object\n-   * is not an <code>Double</code>.\n-   *\n-   * @param o the object to compare\n-   * @return the comparison\n-   * @throws ClassCastException if the argument is not a <code>Double</code>\n-   * @see #compareTo(Double)\n-   * @see Comparable\n-   * @since 1.2\n-   */\n-  public int compareTo(Object o)\n-  {\n-    return compare(value, ((Double) o).value);\n-  }\n-\n-  /**\n-   * Behaves like <code>new Double(x).compareTo(new Double(y))</code>; in\n-   * other words this compares two doubles, special casing NaN and zero,\n-   * without the overhead of objects.\n-   *\n-   * @param x the first double to compare\n-   * @param y the second double to compare\n-   * @return the comparison\n-   * @since 1.4\n-   */\n-  public static int compare(double x, double y)\n-  {\n-    if (isNaN(x))\n-      return isNaN(y) ? 0 : 1;\n-    if (isNaN(y))\n-      return -1;\n-    // recall that 0.0 == -0.0, so we convert to infinites and try again\n-    if (x == 0 && y == 0)\n-      return (int) (1 / x - 1 / y);\n-    if (x == y)\n-      return 0;\n-\n-    return x > y ? 1 : -1;\n-  }\n-\n-  /**\n-   * Helper method to convert to string.\n-   *\n-   * @param d the double to convert\n-   * @param isFloat true if the conversion is requested by Float (results in\n-   *        fewer digits)\n-   */\n-  // Package visible for use by Float.\n-  static native String toString(double d, boolean isFloat);\n-}"}, {"sha": "7677ca4132ee57799354da74f600712434c4aba7", "filename": "libjava/java/lang/Float.java", "status": "removed", "additions": 0, "deletions": 546, "changes": 546, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c02d8a613e46512e852d54ab2ff9209f47acc7/libjava%2Fjava%2Flang%2FFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c02d8a613e46512e852d54ab2ff9209f47acc7/libjava%2Fjava%2Flang%2FFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FFloat.java?ref=59c02d8a613e46512e852d54ab2ff9209f47acc7", "patch": "@@ -1,546 +0,0 @@\n-/* Float.java -- object wrapper for float\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006\n-   Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n-02110-1301 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-\n-package java.lang;\n-\n-/**\n- * Instances of class <code>Float</code> represent primitive\n- * <code>float</code> values.\n- *\n- * Additionally, this class provides various helper functions and variables\n- * related to floats.\n- *\n- * @author Paul Fisher\n- * @author Andrew Haley (aph@cygnus.com)\n- * @author Eric Blake (ebb9@email.byu.edu)\n- * @since 1.0\n- * @status updated to 1.4\n- */\n-public final class Float extends Number implements Comparable\n-{\n-  /**\n-   * Compatible with JDK 1.0+.\n-   */\n-  private static final long serialVersionUID = -2671257302660747028L;\n-\n-  /**\n-   * The maximum positive value a <code>double</code> may represent\n-   * is 3.4028235e+38f.\n-   */\n-  public static final float MAX_VALUE = 3.4028235e+38f;\n-\n-  /**\n-   * The minimum positive value a <code>float</code> may represent\n-   * is 1.4e-45.\n-   */\n-  public static final float MIN_VALUE = 1.4e-45f;\n-\n-  /**\n-   * The value of a float representation -1.0/0.0, negative infinity.\n-   */\n-  public static final float NEGATIVE_INFINITY = -1.0f / 0.0f;\n-\n-  /**\n-   * The value of a float representation 1.0/0.0, positive infinity.\n-   */\n-  public static final float POSITIVE_INFINITY = 1.0f / 0.0f;\n-\n-  /**\n-   * All IEEE 754 values of NaN have the same value in Java.\n-   */\n-  public static final float NaN = 0.0f / 0.0f;\n-\n-  /**\n-   * The primitive type <code>float</code> is represented by this\n-   * <code>Class</code> object.\n-   * @since 1.1\n-   */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass('F');\n-\n-  /**\n-   * The number of bits needed to represent a <code>float</code>.\n-   * @since 1.5\n-   */\n-  public static final int SIZE = 32;\n-\n-  /**\n-   * The immutable value of this Float.\n-   *\n-   * @serial the wrapped float\n-   */\n-  private final float value;\n-\n-  /**\n-   * Create a <code>Float</code> from the primitive <code>float</code>\n-   * specified.\n-   *\n-   * @param value the <code>float</code> argument\n-   */\n-  public Float(float value)\n-  {\n-    this.value = value;\n-  }\n-\n-  /**\n-   * Create a <code>Float</code> from the primitive <code>double</code>\n-   * specified.\n-   *\n-   * @param value the <code>double</code> argument\n-   */\n-  public Float(double value)\n-  {\n-    this.value = (float) value;\n-  }\n-\n-  /**\n-   * Create a <code>Float</code> from the specified <code>String</code>.\n-   * This method calls <code>Float.parseFloat()</code>.\n-   *\n-   * @param s the <code>String</code> to convert\n-   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n-   *         <code>float</code>\n-   * @throws NullPointerException if <code>s</code> is null\n-   * @see #parseFloat(String)\n-   */\n-  public Float(String s)\n-  {\n-    value = parseFloat(s);\n-  }\n-\n-  /**\n-   * Convert the <code>float</code> to a <code>String</code>.\n-   * Floating-point string representation is fairly complex: here is a\n-   * rundown of the possible values.  \"<code>[-]</code>\" indicates that a\n-   * negative sign will be printed if the value (or exponent) is negative.\n-   * \"<code>&lt;number&gt;</code>\" means a string of digits ('0' to '9').\n-   * \"<code>&lt;digit&gt;</code>\" means a single digit ('0' to '9').<br>\n-   *\n-   * <table border=1>\n-   * <tr><th>Value of Float</th><th>String Representation</th></tr>\n-   * <tr><td>[+-] 0</td> <td><code>[-]0.0</code></td></tr>\n-   * <tr><td>Between [+-] 10<sup>-3</sup> and 10<sup>7</sup>, exclusive</td>\n-   *     <td><code>[-]number.number</code></td></tr>\n-   * <tr><td>Other numeric value</td>\n-   *     <td><code>[-]&lt;digit&gt;.&lt;number&gt;\n-   *          E[-]&lt;number&gt;</code></td></tr>\n-   * <tr><td>[+-] infinity</td> <td><code>[-]Infinity</code></td></tr>\n-   * <tr><td>NaN</td> <td><code>NaN</code></td></tr>\n-   * </table>\n-   *\n-   * Yes, negative zero <em>is</em> a possible value.  Note that there is\n-   * <em>always</em> a <code>.</code> and at least one digit printed after\n-   * it: even if the number is 3, it will be printed as <code>3.0</code>.\n-   * After the \".\", all digits will be printed except trailing zeros. The\n-   * result is rounded to the shortest decimal number which will parse back\n-   * to the same float.\n-   *\n-   * <p>To create other output formats, use {@link java.text.NumberFormat}.\n-   *\n-   * @XXX specify where we are not in accord with the spec.\n-   *\n-   * @param f the <code>float</code> to convert\n-   * @return the <code>String</code> representing the <code>float</code>\n-   */\n-  public static String toString(float f)\n-  {\n-    return Double.toString(f, true);\n-  }\n-\n-  /**\n-   * Creates a new <code>Float</code> object using the <code>String</code>.\n-   *\n-   * @param s the <code>String</code> to convert\n-   * @return the new <code>Float</code>\n-   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n-   *         <code>float</code>\n-   * @throws NullPointerException if <code>s</code> is null\n-   * @see #parseFloat(String)\n-   */\n-  public static Float valueOf(String s)\n-  {\n-    return new Float(parseFloat(s));\n-  }\n-\n-  /**\n-   * Returns a <code>Float</code> object wrapping the value.\n-   * In contrast to the <code>Float</code> constructor, this method\n-   * may cache some values.  It is used by boxing conversion.\n-   *\n-   * @param val the value to wrap\n-   * @return the <code>Float</code>\n-   * \n-   * @since 1.5\n-   */\n-  public static Float valueOf(float val)\n-  {\n-    // We don't actually cache, but we could.\n-    return new Float(val);\n-  }\n-\n-  /**\n-   * Parse the specified <code>String</code> as a <code>float</code>. The\n-   * extended BNF grammar is as follows:<br>\n-   * <pre>\n-   * <em>DecodableString</em>:\n-   *      ( [ <code>-</code> | <code>+</code> ] <code>NaN</code> )\n-   *    | ( [ <code>-</code> | <code>+</code> ] <code>Infinity</code> )\n-   *    | ( [ <code>-</code> | <code>+</code> ] <em>FloatingPoint</em>\n-   *              [ <code>f</code> | <code>F</code> | <code>d</code>\n-   *                | <code>D</code>] )\n-   * <em>FloatingPoint</em>:\n-   *      ( { <em>Digit</em> }+ [ <code>.</code> { <em>Digit</em> } ]\n-   *              [ <em>Exponent</em> ] )\n-   *    | ( <code>.</code> { <em>Digit</em> }+ [ <em>Exponent</em> ] )\n-   * <em>Exponent</em>:\n-   *      ( ( <code>e</code> | <code>E</code> )\n-   *              [ <code>-</code> | <code>+</code> ] { <em>Digit</em> }+ )\n-   * <em>Digit</em>: <em><code>'0'</code> through <code>'9'</code></em>\n-   * </pre>\n-   *\n-   * <p>NaN and infinity are special cases, to allow parsing of the output\n-   * of toString.  Otherwise, the result is determined by calculating\n-   * <em>n * 10<sup>exponent</sup></em> to infinite precision, then rounding\n-   * to the nearest float. Remember that many numbers cannot be precisely\n-   * represented in floating point. In case of overflow, infinity is used,\n-   * and in case of underflow, signed zero is used. Unlike Integer.parseInt,\n-   * this does not accept Unicode digits outside the ASCII range.\n-   *\n-   * <p>If an unexpected character is found in the <code>String</code>, a\n-   * <code>NumberFormatException</code> will be thrown.  Leading and trailing\n-   * 'whitespace' is ignored via <code>String.trim()</code>, but spaces\n-   * internal to the actual number are not allowed.\n-   *\n-   * <p>To parse numbers according to another format, consider using\n-   * {@link java.text.NumberFormat}.\n-   *\n-   * @XXX specify where/how we are not in accord with the spec.\n-   *\n-   * @param str the <code>String</code> to convert\n-   * @return the <code>float</code> value of <code>s</code>\n-   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n-   *         <code>float</code>\n-   * @throws NullPointerException if <code>s</code> is null\n-   * @see #MIN_VALUE\n-   * @see #MAX_VALUE\n-   * @see #POSITIVE_INFINITY\n-   * @see #NEGATIVE_INFINITY\n-   * @since 1.2\n-   */\n-  public static float parseFloat(String str)\n-  {\n-    // XXX Rounding parseDouble() causes some errors greater than 1 ulp from\n-    // the infinitely precise decimal.\n-    return (float) Double.parseDouble(str);\n-  }\n-\n-  /**\n-   * Return <code>true</code> if the <code>float</code> has the same\n-   * value as <code>NaN</code>, otherwise return <code>false</code>.\n-   *\n-   * @param v the <code>float</code> to compare\n-   * @return whether the argument is <code>NaN</code>\n-   */\n-  public static boolean isNaN(float v)\n-  {\n-    // This works since NaN != NaN is the only reflexive inequality\n-    // comparison which returns true.\n-    return v != v;\n-  }\n-\n-  /**\n-   * Return <code>true</code> if the <code>float</code> has a value\n-   * equal to either <code>NEGATIVE_INFINITY</code> or\n-   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n-   *\n-   * @param v the <code>float</code> to compare\n-   * @return whether the argument is (-/+) infinity\n-   */\n-  public static boolean isInfinite(float v)\n-  {\n-    return v == POSITIVE_INFINITY || v == NEGATIVE_INFINITY;\n-  }\n-\n-  /**\n-   * Return <code>true</code> if the value of this <code>Float</code>\n-   * is the same as <code>NaN</code>, otherwise return <code>false</code>.\n-   *\n-   * @return whether this <code>Float</code> is <code>NaN</code>\n-   */\n-  public boolean isNaN()\n-  {\n-    return isNaN(value);\n-  }\n-\n-  /**\n-   * Return <code>true</code> if the value of this <code>Float</code>\n-   * is the same as <code>NEGATIVE_INFINITY</code> or\n-   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n-   *\n-   * @return whether this <code>Float</code> is (-/+) infinity\n-   */\n-  public boolean isInfinite()\n-  {\n-    return isInfinite(value);\n-  }\n-\n-  /**\n-   * Convert the <code>float</code> value of this <code>Float</code>\n-   * to a <code>String</code>.  This method calls\n-   * <code>Float.toString(float)</code> to do its dirty work.\n-   *\n-   * @return the <code>String</code> representation\n-   * @see #toString(float)\n-   */\n-  public String toString()\n-  {\n-    return toString(value);\n-  }\n-\n-  /**\n-   * Return the value of this <code>Float</code> as a <code>byte</code>.\n-   *\n-   * @return the byte value\n-   * @since 1.1\n-   */\n-  public byte byteValue()\n-  {\n-    return (byte) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Float</code> as a <code>short</code>.\n-   *\n-   * @return the short value\n-   * @since 1.1\n-   */\n-  public short shortValue()\n-  {\n-    return (short) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Integer</code> as an <code>int</code>.\n-   *\n-   * @return the int value\n-   */\n-  public int intValue()\n-  {\n-    return (int) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Integer</code> as a <code>long</code>.\n-   *\n-   * @return the long value\n-   */\n-  public long longValue()\n-  {\n-    return (long) value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Float</code>.\n-   *\n-   * @return the float value\n-   */\n-  public float floatValue()\n-  {\n-    return value;\n-  }\n-\n-  /**\n-   * Return the value of this <code>Float</code> as a <code>double</code>\n-   *\n-   * @return the double value\n-   */\n-  public double doubleValue()\n-  {\n-    return value;\n-  }\n-\n-  /**\n-   * Return a hashcode representing this Object. <code>Float</code>'s hash\n-   * code is calculated by calling <code>floatToIntBits(floatValue())</code>.\n-   *\n-   * @return this Object's hash code\n-   * @see #floatToIntBits(float)\n-   */\n-  public int hashCode()\n-  {\n-    return floatToIntBits(value);\n-  }\n-\n-  /**\n-   * Returns <code>true</code> if <code>obj</code> is an instance of\n-   * <code>Float</code> and represents the same float value. Unlike comparing\n-   * two floats with <code>==</code>, this treats two instances of\n-   * <code>Float.NaN</code> as equal, but treats <code>0.0</code> and\n-   * <code>-0.0</code> as unequal.\n-   *\n-   * <p>Note that <code>f1.equals(f2)</code> is identical to\n-   * <code>floatToIntBits(f1.floatValue()) ==\n-   *    floatToIntBits(f2.floatValue())</code>.\n-   *\n-   * @param obj the object to compare\n-   * @return whether the objects are semantically equal\n-   */\n-  public boolean equals(Object obj)\n-  {\n-    if (! (obj instanceof Float))\n-      return false;\n-\n-    float f = ((Float) obj).value;\n-\n-    // Avoid call to native method. However, some implementations, like gcj,\n-    // are better off using floatToIntBits(value) == floatToIntBits(f).\n-    // Check common case first, then check NaN and 0.\n-    if (value == f)\n-      return (value != 0) || (1 / value == 1 / f);\n-    return isNaN(value) && isNaN(f);\n-  }\n-\n-  /**\n-   * Convert the float to the IEEE 754 floating-point \"single format\" bit\n-   * layout. Bit 31 (the most significant) is the sign bit, bits 30-23\n-   * (masked by 0x7f800000) represent the exponent, and bits 22-0\n-   * (masked by 0x007fffff) are the mantissa. This function collapses all\n-   * versions of NaN to 0x7fc00000. The result of this function can be used\n-   * as the argument to <code>Float.intBitsToFloat(int)</code> to obtain the\n-   * original <code>float</code> value.\n-   *\n-   * @param value the <code>float</code> to convert\n-   * @return the bits of the <code>float</code>\n-   * @see #intBitsToFloat(int)\n-   */\n-  // GCJ LOCAL: We diverge from Classpath for efficiency.\n-  public static native int floatToIntBits(float value);\n-  // END GCJ LOCAL\n-\n-  /**\n-   * Convert the float to the IEEE 754 floating-point \"single format\" bit\n-   * layout. Bit 31 (the most significant) is the sign bit, bits 30-23\n-   * (masked by 0x7f800000) represent the exponent, and bits 22-0\n-   * (masked by 0x007fffff) are the mantissa. This function leaves NaN alone,\n-   * rather than collapsing to a canonical value. The result of this function\n-   * can be used as the argument to <code>Float.intBitsToFloat(int)</code> to\n-   * obtain the original <code>float</code> value.\n-   *\n-   * @param value the <code>float</code> to convert\n-   * @return the bits of the <code>float</code>\n-   * @see #intBitsToFloat(int)\n-   */\n-  // GCJ LOCAL: We diverge from Classpath for efficiency.\n-  public static native int floatToRawIntBits(float value);\n-  // END GCJ LOCAL\n-\n-  /**\n-   * Convert the argument in IEEE 754 floating-point \"single format\" bit\n-   * layout to the corresponding float. Bit 31 (the most significant) is the\n-   * sign bit, bits 30-23 (masked by 0x7f800000) represent the exponent, and\n-   * bits 22-0 (masked by 0x007fffff) are the mantissa. This function leaves\n-   * NaN alone, so that you can recover the bit pattern with\n-   * <code>Float.floatToRawIntBits(float)</code>.\n-   *\n-   * @param bits the bits to convert\n-   * @return the <code>float</code> represented by the bits\n-   * @see #floatToIntBits(float)\n-   * @see #floatToRawIntBits(float)\n-   */\n-  // GCJ LOCAL: We diverge from Classpath for efficiency.\n-  public static native float intBitsToFloat(int bits);\n-  // END GCJ LOCAL\n-\n-  /**\n-   * Compare two Floats numerically by comparing their <code>float</code>\n-   * values. The result is positive if the first is greater, negative if the\n-   * second is greater, and 0 if the two are equal. However, this special\n-   * cases NaN and signed zero as follows: NaN is considered greater than\n-   * all other floats, including <code>POSITIVE_INFINITY</code>, and positive\n-   * zero is considered greater than negative zero.\n-   *\n-   * @param f the Float to compare\n-   * @return the comparison\n-   * @since 1.2\n-   */\n-  public int compareTo(Float f)\n-  {\n-    return compare(value, f.value);\n-  }\n-\n-  /**\n-   * Behaves like <code>compareTo(Float)</code> unless the Object\n-   * is not an <code>Float</code>.\n-   *\n-   * @param o the object to compare\n-   * @return the comparison\n-   * @throws ClassCastException if the argument is not a <code>Float</code>\n-   * @see #compareTo(Float)\n-   * @see Comparable\n-   * @since 1.2\n-   */\n-  public int compareTo(Object o)\n-  {\n-    return compare(value, ((Float) o).value);\n-  }\n-\n-  /**\n-   * Behaves like <code>new Float(x).compareTo(new Float(y))</code>; in\n-   * other words this compares two floats, special casing NaN and zero,\n-   * without the overhead of objects.\n-   *\n-   * @param x the first float to compare\n-   * @param y the second float to compare\n-   * @return the comparison\n-   * @since 1.4\n-   */\n-  public static int compare(float x, float y)\n-  {\n-    if (isNaN(x))\n-      return isNaN(y) ? 0 : 1;\n-    if (isNaN(y))\n-      return -1;\n-    // recall that 0.0 == -0.0, so we convert to infinities and try again\n-    if (x == 0 && y == 0)\n-      return (int) (1 / x - 1 / y);\n-    if (x == y)\n-      return 0;\n-\n-    return x > y ? 1 : -1;\n-  }\n-}"}, {"sha": "9205eb3b3c383d194f8b164b8f0d73a507626648", "filename": "libjava/java/lang/VMDouble.java", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FVMDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FVMDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMDouble.java?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -0,0 +1,111 @@\n+/* VMDouble.java -- VM Specific Double methods\n+   Copyright (C) 2003, 2005, 2006  Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.lang;\n+\n+import gnu.classpath.Configuration;\n+\n+/*\n+ * This class is a reference version, mainly for compiling a class library\n+ * jar.  It is likely that VM implementers replace this with their own\n+ * version that can communicate effectively with the VM.\n+ */\n+\n+/**\n+ * Code relocated from java.lang.Double by \n+ * @author Dave Grove (groved@us.ibm.com)\n+ */\n+final class VMDouble\n+{\n+  /**\n+   * Convert the double to the IEEE 754 floating-point \"double format\" bit\n+   * layout. Bit 63 (the most significant) is the sign bit, bits 62-52\n+   * (masked by 0x7ff0000000000000L) represent the exponent, and bits 51-0\n+   * (masked by 0x000fffffffffffffL) are the mantissa. This function\n+   * collapses all versions of NaN to 0x7ff8000000000000L. The result of this\n+   * function can be used as the argument to\n+   * <code>Double.longBitsToDouble(long)</code> to obtain the original\n+   * <code>double</code> value.\n+   *\n+   * @param value the <code>double</code> to convert\n+   * @return the bits of the <code>double</code>\n+   * @see #longBitsToDouble(long)\n+   */\n+  public static native long doubleToLongBits(double value);\n+\n+  /**\n+   * Convert the double to the IEEE 754 floating-point \"double format\" bit\n+   * layout. Bit 63 (the most significant) is the sign bit, bits 62-52\n+   * (masked by 0x7ff0000000000000L) represent the exponent, and bits 51-0\n+   * (masked by 0x000fffffffffffffL) are the mantissa. This function\n+   * leaves NaN alone, rather than collapsing to a canonical value. The\n+   * result of this function can be used as the argument to\n+   * <code>Double.longBitsToDouble(long)</code> to obtain the original\n+   * <code>double</code> value.\n+   *\n+   * @param value the <code>double</code> to convert\n+   * @return the bits of the <code>double</code>\n+   * @see #longBitsToDouble(long)\n+   */\n+  public static native long doubleToRawLongBits(double value);\n+\n+  /**\n+   * Convert the argument in IEEE 754 floating-point \"double format\" bit\n+   * layout to the corresponding float. Bit 63 (the most significant) is the\n+   * sign bit, bits 62-52 (masked by 0x7ff0000000000000L) represent the\n+   * exponent, and bits 51-0 (masked by 0x000fffffffffffffL) are the mantissa.\n+   * This function leaves NaN alone, so that you can recover the bit pattern\n+   * with <code>Double.doubleToRawLongBits(double)</code>.\n+   *\n+   * @param bits the bits to convert\n+   * @return the <code>double</code> represented by the bits\n+   * @see #doubleToLongBits(double)\n+   * @see #doubleToRawLongBits(double)\n+   */\n+  public static native double longBitsToDouble(long bits);\n+\n+  /**\n+   * Helper method to convert to string.\n+   *\n+   * @param d the double to convert\n+   * @param isFloat true if the conversion is requested by Float (results in\n+   *        fewer digits)\n+   */\n+  public static native String toString(double d, boolean isFloat);\n+\n+  public static native double parseDouble(String str);\n+}"}, {"sha": "a6570f929c6b6fe20216c43fc02edef3a76788e2", "filename": "libjava/java/lang/VMFloat.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FVMFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FVMFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMFloat.java?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -0,0 +1,99 @@\n+/* VMFloat.java -- VM Specific Float methods\n+   Copyright (C) 2003, 2006 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.lang;\n+\n+import gnu.classpath.Configuration;\n+\n+/*\n+ * This class is a reference version, mainly for compiling a class library\n+ * jar.  It is likely that VM implementers replace this with their own\n+ * version that can communicate effectively with the VM.\n+ */\n+\n+/**\n+ * Code relocated from java.lang.Float by \n+ * @author Dave Grove <groved@us.ibm.com>\n+ */\n+final class VMFloat\n+{\n+  /**\n+   * Convert the float to the IEEE 754 floating-point \"single format\" bit\n+   * layout. Bit 31 (the most significant) is the sign bit, bits 30-23\n+   * (masked by 0x7f800000) represent the exponent, and bits 22-0\n+   * (masked by 0x007fffff) are the mantissa. This function collapses all\n+   * versions of NaN to 0x7fc00000. The result of this function can be used\n+   * as the argument to <code>Float.intBitsToFloat(int)</code> to obtain the\n+   * original <code>float</code> value.\n+   *\n+   * @param value the <code>float</code> to convert\n+   * @return the bits of the <code>float</code>\n+   * @see #intBitsToFloat(int)\n+   */\n+  static native int floatToIntBits(float value);\n+\n+  /**\n+   * Convert the float to the IEEE 754 floating-point \"single format\" bit\n+   * layout. Bit 31 (the most significant) is the sign bit, bits 30-23\n+   * (masked by 0x7f800000) represent the exponent, and bits 22-0\n+   * (masked by 0x007fffff) are the mantissa. This function leaves NaN alone,\n+   * rather than collapsing to a canonical value. The result of this function\n+   * can be used as the argument to <code>Float.intBitsToFloat(int)</code> to\n+   * obtain the original <code>float</code> value.\n+   *\n+   * @param value the <code>float</code> to convert\n+   * @return the bits of the <code>float</code>\n+   * @see #intBitsToFloat(int)\n+   */\n+  static native int floatToRawIntBits(float value);\n+\n+  /**\n+   * Convert the argument in IEEE 754 floating-point \"single format\" bit\n+   * layout to the corresponding float. Bit 31 (the most significant) is the\n+   * sign bit, bits 30-23 (masked by 0x7f800000) represent the exponent, and\n+   * bits 22-0 (masked by 0x007fffff) are the mantissa. This function leaves\n+   * NaN alone, so that you can recover the bit pattern with\n+   * <code>Float.floatToRawIntBits(float)</code>.\n+   *\n+   * @param bits the bits to convert\n+   * @return the <code>float</code> represented by the bits\n+   * @see #floatToIntBits(float)\n+   * @see #floatToRawIntBits(float)\n+   */\n+  static native float intBitsToFloat(int bits);\n+\n+} // class VMFloat"}, {"sha": "1a33a57158edc39621581150accb40884f380550", "filename": "libjava/java/lang/natDouble.cc", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FnatDouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FnatDouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatDouble.cc?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -1,4 +1,4 @@\n-// natDouble.cc - Implementation of java.lang.Double native methods.\n+// natDouble.cc - Implementation of java.lang.VMDouble native methods.\n \n /* Copyright (C) 1998, 1999, 2000, 2001, 2003, 2005, 2006  Free Software Foundation\n \n@@ -15,6 +15,7 @@ details.  */\n #include <gcj/cni.h>\n #include <java/lang/String.h>\n #include <java/lang/Double.h>\n+#include <java/lang/VMDouble.h>\n #include <java/lang/Character.h>\n #include <java/lang/NumberFormatException.h>\n #include <jvm.h>\n@@ -31,7 +32,7 @@ union u\n };\n \n jlong \n-java::lang::Double::doubleToLongBits(jdouble value)\n+java::lang::VMDouble::doubleToLongBits(jdouble value)\n {\n   union u u;\n   u.d = value;\n@@ -46,31 +47,31 @@ java::lang::Double::doubleToLongBits(jdouble value)\n }\n \n jlong \n-java::lang::Double::doubleToRawLongBits(jdouble value)\n+java::lang::VMDouble::doubleToRawLongBits(jdouble value)\n {\n   union u u;\n   u.d = value;\n   return u.l;\n }\n \n jdouble \n-java::lang::Double::longBitsToDouble(jlong bits)\n+java::lang::VMDouble::longBitsToDouble(jlong bits)\n {\n   union u u;\n   u.l = bits;\n   return u.d;\n }\n \n jstring \n-java::lang::Double::toString(jdouble value, jboolean isFloat)\n+java::lang::VMDouble::toString(jdouble value, jboolean isFloat)\n {\n-  if (isNaN (value))\n+  if (Double::isNaN (value))\n     return JvNewStringLatin1 (\"NaN\", sizeof (\"NaN\") - 1);\n     \n-  if (value == POSITIVE_INFINITY)\n+  if (value == Double::POSITIVE_INFINITY)\n     return JvNewStringLatin1 (\"Infinity\", sizeof (\"Infinity\") - 1);\n     \n-  if (value == NEGATIVE_INFINITY)\n+  if (value == Double::NEGATIVE_INFINITY)\n     return JvNewStringLatin1 (\"-Infinity\", sizeof (\"-Infinity\") - 1);\n     \n   char buffer[50], result[50];\n@@ -158,7 +159,7 @@ java::lang::Double::toString(jdouble value, jboolean isFloat)\n }\n \n jdouble \n-java::lang::Double::parseDouble(jstring str)\n+java::lang::VMDouble::parseDouble(jstring str)\n {\n   int length = str->length();\n \n@@ -194,11 +195,11 @@ java::lang::Double::parseDouble(jstring str)\n \t{\n \t  if (! strcmp (data, \"NaN\") || ! strcmp (data, \"+NaN\")\n \t      || ! strcmp (data, \"-NaN\"))\n-\t    return NaN;\n+\t    return Double::NaN;\n \t  else if (! strcmp (data, \"Infinity\") || ! strcmp (data, \"+Infinity\"))\n-\t    return POSITIVE_INFINITY;\n+\t    return Double::POSITIVE_INFINITY;\n \t  else if (! strcmp (data, \"-Infinity\"))\n-\t    return NEGATIVE_INFINITY;\n+\t    return Double::NEGATIVE_INFINITY;\n \t}\n \n       struct _Jv_reent reent;  "}, {"sha": "f090b815e26557edb53164df0360f7a3f269efb1", "filename": "libjava/java/lang/natFloat.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FnatFloat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fjava%2Flang%2FnatFloat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatFloat.cc?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -1,6 +1,6 @@\n-// natFloat.cc - Implementation of java.lang.Float native methods.\n+// natFloat.cc - Implementation of java.lang.VMFloat native methods.\n \n-/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -11,6 +11,7 @@ details.  */\n #include <config.h>\n \n #include <java/lang/Float.h>\n+#include <java/lang/VMFloat.h>\n #include <jvm.h>\n \n union u\n@@ -20,7 +21,7 @@ union u\n };\n \n jint \n-java::lang::Float::floatToIntBits(jfloat value)\n+java::lang::VMFloat::floatToIntBits(jfloat value)\n {\n   union u u;\n   u.d = value;\n@@ -34,15 +35,15 @@ java::lang::Float::floatToIntBits(jfloat value)\n }\n \n jint \n-java::lang::Float::floatToRawIntBits(jfloat value)\n+java::lang::VMFloat::floatToRawIntBits(jfloat value)\n {\n   union u u;\n   u.d = value;  \n   return u.l;\n }\n \n jfloat \n-java::lang::Float::intBitsToFloat(jint bits)\n+java::lang::VMFloat::intBitsToFloat(jint bits)\n {\n   union u u;\n   u.l = bits;"}, {"sha": "6688c650b90fd5900591b9d2472a13c777993e74", "filename": "libjava/sources.am", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -3043,12 +3043,12 @@ classpath/java/lang/Cloneable.java \\\n classpath/java/lang/Comparable.java \\\n classpath/java/lang/Compiler.java \\\n java/lang/ConcreteProcess.java \\\n-java/lang/Double.java \\\n+classpath/java/lang/Double.java \\\n classpath/java/lang/EnumConstantNotPresentException.java \\\n classpath/java/lang/Error.java \\\n classpath/java/lang/Exception.java \\\n classpath/java/lang/ExceptionInInitializerError.java \\\n-java/lang/Float.java \\\n+classpath/java/lang/Float.java \\\n classpath/java/lang/IllegalAccessError.java \\\n classpath/java/lang/IllegalAccessException.java \\\n classpath/java/lang/IllegalArgumentException.java \\\n@@ -3106,6 +3106,8 @@ classpath/java/lang/UnsupportedClassVersionError.java \\\n classpath/java/lang/UnsupportedOperationException.java \\\n java/lang/VMClassLoader.java \\\n java/lang/VMCompiler.java \\\n+java/lang/VMDouble.java \\\n+java/lang/VMFloat.java \\\n java/lang/VMSecurityManager.java \\\n java/lang/VMThrowable.java \\\n classpath/java/lang/VerifyError.java \\"}]}