{"sha": "1bb64668d0fbb2abfa3583918a256420028eea30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiNjQ2NjhkMGZiYjJhYmZhMzU4MzkxOGEyNTY0MjAwMjhlZWEzMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-07-21T09:33:38Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-07-21T09:33:38Z"}, "message": "line-map.h (linenum_type): New typedef.\n\n2008-07-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* include/line-map.h (linenum_type): New typedef.\n\t(struct line_map): Use it.\n\t(SOURCE_LINE): Second arguments is a LOCATION not a LINE.\n\t(SOURCE_COLUMN): Likewise.\n\t* macro.c (_cpp_builtin_macro_text): Use linenum_type. Don't store\n\tsource_location values in a variable of type linenum_type.\n\t* directives.c (struct if_stack): Use linenum_type.\n\t(strtoul_for_line): Rename as strtolinenum.\n\t(do_line): Use linenum_type.\n\t(do_linemarker): Use linenum_type and strtolinenum.\n\t(_cpp_do_file_change): Use linenum_t.\n\t* line-map.c (linemap_add): Likewise.\n\t(linemap_line_start): Likewise.\n\t* traditional.c (struct fun_macro): 'line' is a source_location.\n\t* errors.c (print_location): Use linenum_type.\n\t* directives-only.c (_cpp_preprocess_dir_only): Likewise.\n\t* internal.h (CPP_INCREMENT_LINE): Likewise.\n\t* lex.c (_cpp_skip_block_comment): Use source_location.\n\nFrom-SVN: r138026", "tree": {"sha": "00b640cdfaf5963f35e76e06f15ad82396dda370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00b640cdfaf5963f35e76e06f15ad82396dda370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bb64668d0fbb2abfa3583918a256420028eea30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb64668d0fbb2abfa3583918a256420028eea30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb64668d0fbb2abfa3583918a256420028eea30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb64668d0fbb2abfa3583918a256420028eea30/comments", "author": null, "committer": null, "parents": [{"sha": "e24313f349328c3fc973375cab9c3818388308ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24313f349328c3fc973375cab9c3818388308ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24313f349328c3fc973375cab9c3818388308ba"}], "stats": {"total": 92, "additions": 58, "deletions": 34}, "files": [{"sha": "f8ec058a47acf4a5fc0b66a06b2a90ac2180b4e4", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -1,3 +1,24 @@\n+2008-07-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* include/line-map.h (linenum_type): New typedef.\n+\t(struct line_map): Use it.\n+\t(SOURCE_LINE): Second arguments is a LOCATION not a LINE.\n+\t(SOURCE_COLUMN): Likewise.\n+\t* macro.c (_cpp_builtin_macro_text): Use linenum_type. Don't store\n+\tsource_location values in a variable of type linenum_type.\n+\t* directives.c (struct if_stack): Use linenum_type.\n+\t(strtoul_for_line): Rename as strtolinenum.\n+\t(do_line): Use linenum_type.\n+\t(do_linemarker): Use linenum_type and strtolinenum.\n+\t(_cpp_do_file_change): Use linenum_t.\n+\t* line-map.c (linemap_add): Likewise.\n+\t(linemap_line_start): Likewise.\n+\t* traditional.c (struct fun_macro): 'line' is a source_location.\n+\t* errors.c (print_location): Use linenum_type.\n+\t* directives-only.c (_cpp_preprocess_dir_only): Likewise.\n+\t* internal.h (CPP_INCREMENT_LINE): Likewise.\n+\t* lex.c (_cpp_skip_block_comment): Use source_location.\n+\t\n 2008-07-14  Ben Elliston  <bje@au.ibm.com>\n \n \t* include/cpplib.h (NODE_CONDITIONAL): New."}, {"sha": "addd9a755dcc033c21b2005606063cd8076ae5f7", "filename": "libcpp/directives-only.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fdirectives-only.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fdirectives-only.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives-only.c?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -42,7 +42,8 @@ _cpp_preprocess_dir_only (cpp_reader *pfile,\n   const unsigned char *cur, *base, *next_line, *rlimit;\n   cppchar_t c, last_c;\n   unsigned flags;\n-  int lines, col;\n+  linenum_type lines;\n+  int col;\n   source_location loc;\n \n  restart:"}, {"sha": "90933eb4807e4b8ec041fb9a5f5c5b76db049acb", "filename": "libcpp/directives.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -32,7 +32,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n struct if_stack\n {\n   struct if_stack *next;\n-  unsigned int line;\t\t/* Line where condition started.  */\n+  linenum_type line;\t\t/* Line where condition started.  */\n   const cpp_hashnode *mi_cmacro;/* macro name for #ifndef around entire file */\n   bool skip_elses;\t\t/* Can future #else / #elif be skipped?  */\n   bool was_skipping;\t\t/* If were skipping on entry.  */\n@@ -102,7 +102,7 @@ static char *glue_header_name (cpp_reader *);\n static const char *parse_include (cpp_reader *, int *, const cpp_token ***);\n static void push_conditional (cpp_reader *, int, int, const cpp_hashnode *);\n static unsigned int read_flag (cpp_reader *, unsigned int);\n-static int strtoul_for_line (const uchar *, unsigned int, unsigned long *);\n+static int strtolinenum (const uchar *, unsigned int, linenum_type *);\n static void do_diagnostic (cpp_reader *, int, int);\n static cpp_hashnode *lex_macro_node (cpp_reader *, bool);\n static int undefine_macros (cpp_reader *, cpp_hashnode *, void *);\n@@ -840,9 +840,9 @@ read_flag (cpp_reader *pfile, unsigned int last)\n    of length LEN, to binary; store it in NUMP, and return 0 if the\n    number was well-formed, 1 if not.  Temporary, hopefully.  */\n static int\n-strtoul_for_line (const uchar *str, unsigned int len, long unsigned int *nump)\n+strtolinenum (const uchar *str, unsigned int len, linenum_type *nump)\n {\n-  unsigned long reg = 0;\n+  linenum_type reg = 0;\n   uchar c;\n   while (len--)\n     {\n@@ -871,16 +871,16 @@ do_line (cpp_reader *pfile)\n   unsigned char map_sysp = map->sysp;\n   const cpp_token *token;\n   const char *new_file = map->to_file;\n-  unsigned long new_lineno;\n+  linenum_type new_lineno;\n \n   /* C99 raised the minimum limit on #line numbers.  */\n-  unsigned int cap = CPP_OPTION (pfile, c99) ? 2147483647 : 32767;\n+  linenum_type cap = CPP_OPTION (pfile, c99) ? 2147483647 : 32767;\n \n   /* #line commands expand macros.  */\n   token = cpp_get_token (pfile);\n   if (token->type != CPP_NUMBER\n-      || strtoul_for_line (token->val.str.text, token->val.str.len,\n-\t\t\t   &new_lineno))\n+      || strtolinenum (token->val.str.text, token->val.str.len,\n+\t\t       &new_lineno))\n     {\n       if (token->type == CPP_EOF)\n \tcpp_error (pfile, CPP_DL_ERROR, \"unexpected end of file after #line\");\n@@ -925,7 +925,7 @@ do_linemarker (cpp_reader *pfile)\n   const struct line_map *map = &line_table->maps[line_table->used - 1];\n   const cpp_token *token;\n   const char *new_file = map->to_file;\n-  unsigned long new_lineno;\n+  linenum_type new_lineno;\n   unsigned int new_sysp = map->sysp;\n   enum lc_reason reason = LC_RENAME;\n   int flag;\n@@ -938,8 +938,8 @@ do_linemarker (cpp_reader *pfile)\n   /* #line commands expand macros.  */\n   token = cpp_get_token (pfile);\n   if (token->type != CPP_NUMBER\n-      || strtoul_for_line (token->val.str.text, token->val.str.len,\n-\t\t\t   &new_lineno))\n+      || strtolinenum (token->val.str.text, token->val.str.len,\n+\t\t       &new_lineno))\n     {\n       /* Unlike #line, there does not seem to be a way to get an EOF\n \t here.  So, it should be safe to always spell the token.  */\n@@ -999,7 +999,7 @@ do_linemarker (cpp_reader *pfile)\n    and zero otherwise.  */\n void\n _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n-\t\t     const char *to_file, unsigned int file_line,\n+\t\t     const char *to_file, linenum_type file_line,\n \t\t     unsigned int sysp)\n {\n   const struct line_map *map = linemap_add (pfile->line_table, reason, sysp,"}, {"sha": "e3d56292848c2cba59455d05faa81062a0442e2a", "filename": "libcpp/errors.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -42,7 +42,7 @@ print_location (cpp_reader *pfile, source_location line, unsigned int col)\n   else\n     {\n       const struct line_map *map;\n-      unsigned int lin;\n+      linenum_type lin;\n \n       map = linemap_lookup (pfile->line_table, line);\n       linemap_print_containing_files (pfile->line_table, map);"}, {"sha": "81e888bc20fd91f126637f395947283ba5d27fa1", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -34,6 +34,9 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n    (e.g. a #line directive in C).  */\n enum lc_reason {LC_ENTER = 0, LC_LEAVE, LC_RENAME};\n \n+/* The type of line numbers.  */\n+typedef unsigned int linenum_type;\n+\n /* A logical line/column number, i.e. an \"index\" into a line_map.  */\n /* Long-term, we want to use this to replace struct location_s (in input.h),\n    and effectively typedef source_location location_t.  */\n@@ -57,7 +60,7 @@ typedef void *(*line_map_realloc) (void *, size_t);\n struct line_map GTY(())\n {\n   const char *to_file;\n-  unsigned int to_line;\n+  linenum_type to_line;\n   source_location start_location;\n   int included_from;\n   ENUM_BITFIELD (lc_reason) reason : CHAR_BIT;\n@@ -119,7 +122,7 @@ extern void linemap_check_files_exited (struct line_maps *);\n    the highest_location).  */\n \n extern source_location linemap_line_start\n-(struct line_maps *set, unsigned int to_line,  unsigned int max_column_hint);\n+(struct line_maps *set, linenum_type to_line,  unsigned int max_column_hint);\n \n /* Add a mapping of logical source line to physical source file and\n    line number.\n@@ -134,7 +137,7 @@ extern source_location linemap_line_start\n    maps, so any stored line_map pointers should not be used.  */\n extern const struct line_map *linemap_add\n   (struct line_maps *, enum lc_reason, unsigned int sysp,\n-   const char *to_file, unsigned int to_line);\n+   const char *to_file, linenum_type to_line);\n \n /* Given a logical line, returns the map from which the corresponding\n    (source file, line) pair can be deduced.  */\n@@ -148,11 +151,11 @@ extern void linemap_print_containing_files (struct line_maps *,\n \t\t\t\t\t    const struct line_map *);\n \n /* Converts a map and a source_location to source line.  */\n-#define SOURCE_LINE(MAP, LINE) \\\n-  ((((LINE) - (MAP)->start_location) >> (MAP)->column_bits) + (MAP)->to_line)\n+#define SOURCE_LINE(MAP, LOC) \\\n+  ((((LOC) - (MAP)->start_location) >> (MAP)->column_bits) + (MAP)->to_line)\n \n-#define SOURCE_COLUMN(MAP, LINE) \\\n-  (((LINE) - (MAP)->start_location) & ((1 << (MAP)->column_bits) - 1))\n+#define SOURCE_COLUMN(MAP, LOC) \\\n+  (((LOC) - (MAP)->start_location) & ((1 << (MAP)->column_bits) - 1))\n \n /* Returns the last source line within a map.  This is the (last) line\n    of the #include, or other directive, that caused a map change.  */"}, {"sha": "c5bf35eab8423484a3d2966a041353e4f41b9c73", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -68,7 +68,7 @@ struct cset_converter\n #define CPP_INCREMENT_LINE(PFILE, COLS_HINT) do { \\\n     const struct line_maps *line_table = PFILE->line_table; \\\n     const struct line_map *map = &line_table->maps[line_table->used-1]; \\\n-    unsigned int line = SOURCE_LINE (map, line_table->highest_line); \\\n+    linenum_type line = SOURCE_LINE (map, line_table->highest_line); \\\n     linemap_line_start (PFILE->line_table, line + 1, COLS_HINT); \\\n   } while (0)\n \n@@ -585,7 +585,7 @@ extern int _cpp_do__Pragma (cpp_reader *);\n extern void _cpp_init_directives (cpp_reader *);\n extern void _cpp_init_internal_pragmas (cpp_reader *);\n extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,\n-\t\t\t\t unsigned int, unsigned int);\n+\t\t\t\t linenum_type, unsigned int);\n extern void _cpp_pop_buffer (cpp_reader *);\n \n /* In directives.c */"}, {"sha": "2eb66bd63420f3338353bf5921cd53f410c5c076", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -384,7 +384,7 @@ static int\n skip_line_comment (cpp_reader *pfile)\n {\n   cpp_buffer *buffer = pfile->buffer;\n-  unsigned int orig_line = pfile->line_table->highest_line;\n+  source_location orig_line = pfile->line_table->highest_line;\n \n   while (*buffer->cur != '\\n')\n     buffer->cur++;"}, {"sha": "964a7cd9a779084bba6a9edfaca253d379d912ab", "filename": "libcpp/line-map.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -85,7 +85,7 @@ linemap_free (struct line_maps *set)\n \n const struct line_map *\n linemap_add (struct line_maps *set, enum lc_reason reason,\n-\t     unsigned int sysp, const char *to_file, unsigned int to_line)\n+\t     unsigned int sysp, const char *to_file, linenum_type to_line)\n {\n   struct line_map *map;\n   source_location start_location = set->highest_location + 1;\n@@ -182,13 +182,13 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n }\n \n source_location\n-linemap_line_start (struct line_maps *set, unsigned int to_line,\n+linemap_line_start (struct line_maps *set, linenum_type to_line,\n \t\t    unsigned int max_column_hint)\n {\n   struct line_map *map = &set->maps[set->used - 1];\n   source_location highest = set->highest_location;\n   source_location r;\n-  unsigned int last_line = SOURCE_LINE (map, set->highest_line);\n+  linenum_type last_line = SOURCE_LINE (map, set->highest_line);\n   int line_delta = to_line - last_line;\n   bool add_map = false;\n   if (line_delta < 0"}, {"sha": "9a470ef460b24bb63bbb64c67abe1823a4e90b21", "filename": "libcpp/macro.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -118,7 +118,7 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n {\n   const struct line_map *map;\n   const uchar *result = NULL;\n-  unsigned int number = 1;\n+  linenum_type number = 1;\n \n   switch (node->value.builtin)\n     {\n@@ -200,11 +200,10 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n       /* If __LINE__ is embedded in a macro, it must expand to the\n \t line of the macro's invocation, not its definition.\n \t Otherwise things like assert() will not work properly.  */\n-      if (CPP_OPTION (pfile, traditional))\n-\tnumber = pfile->line_table->highest_line;\n-      else\n-\tnumber = pfile->cur_token[-1].src_loc;\n-      number = SOURCE_LINE (map, number);\n+      number = SOURCE_LINE (map, \n+\t\t\t    CPP_OPTION (pfile, traditional) \n+\t\t\t    ? pfile->line_table->highest_line\n+\t\t\t    : pfile->cur_token[-1].src_loc);\n       break;\n \n       /* __STDC__ has the value 1 under normal circumstances."}, {"sha": "d23fffe72caa2df8d48b3be56e10e50079a41978", "filename": "libcpp/traditional.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb64668d0fbb2abfa3583918a256420028eea30/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=1bb64668d0fbb2abfa3583918a256420028eea30", "patch": "@@ -60,7 +60,7 @@ struct fun_macro\n   size_t offset;\n \n   /* The line the macro name appeared on.  */\n-  unsigned int line;\n+  source_location line;\n \n   /* Zero-based index of argument being currently lexed.  */\n   unsigned int argc;"}]}