{"sha": "245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ1YzNjMDRhZjNlNGYyNTY2MTViMGU2OGM3YTE0YTc3YTkxZDZkMg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-04-16T16:27:19Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-04-16T16:27:19Z"}, "message": "prims.cc (_Jv_AllocObject): Remove `size' argument.\n\nlibjava:\n2004-04-15  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* prims.cc (_Jv_AllocObject): Remove `size' argument.\n\t(_Jv_AllocObjectNoFinalizer): Likewise.\n\t(_Jv_AllocObjectNoInitNoFinalizer): Likewise.\n\t(_Jv_AllocPtrFreeObject): Likewise.\n\t(_Jv_AllocString): Moved from natString.cc. Call collector interface\n\tdirectly even in the JVMPI case.\n\t* gcj/cni.h (JvAllocObject): Remove `size' argument from\n\t_Jv_AllocObject calls.\n\t* gcj/javaprims.h: Update prototypes.\n\t* gnu/gcj/natCore.cc (_Jv_create_core): Use `new', not\n\t_Jv_AllocObject.\n\t* java/lang/Class.h: Update _Jv_AllocObject friend prototype.\n\t* java/lang/natString.cc (_Jv_AllocString): Move to prims.cc.\n\ngcc/cp:\n2004-04-15  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* init.c (build_new_1): Don't use type size argument for Java\n\t_Jv_AllocObject call.\n\ngcc/java:\n2004-04-15  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* expr.c (expand_java_NEW): Don't use size argument for\n\t_Jv_AllocObject calls.\n\t* parse.y (patch_invoke): Likewise.\n\nFrom-SVN: r80754", "tree": {"sha": "f8e6ed92c4715a9964e9461e0650bbca33471270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e6ed92c4715a9964e9461e0650bbca33471270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/comments", "author": null, "committer": null, "parents": [{"sha": "2f228199b9cbcc7b3b1a3cc978bf9e3b8ddec8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f228199b9cbcc7b3b1a3cc978bf9e3b8ddec8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f228199b9cbcc7b3b1a3cc978bf9e3b8ddec8f3"}], "stats": {"total": 153, "additions": 98, "deletions": 55}, "files": [{"sha": "a3a2c6abea53c156b15da177b061f928ed85e1da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -1,3 +1,8 @@\n+2004-04-15  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* init.c (build_new_1): Don't use type size argument for Java\n+\t_Jv_AllocObject call.\n+\n 2004-04-09  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* method.c (make_alias_for_thunk): Remove preprocessor guard on"}, {"sha": "5a64ed51bada65d00623087763e43ac61414d19e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -2019,7 +2019,6 @@ build_new_1 (tree exp)\n     {\n       tree class_addr, alloc_decl;\n       tree class_decl = build_java_class_ref (true_type);\n-      tree class_size = size_in_bytes (true_type);\n       static const char alloc_name[] = \"_Jv_AllocObject\";\n       use_java_new = 1;\n       if (!get_global_value_if_present (get_identifier (alloc_name), \n@@ -2037,8 +2036,7 @@ build_new_1 (tree exp)\n       class_addr = build1 (ADDR_EXPR, jclass_node, class_decl);\n       alloc_call = (build_function_call\n \t\t    (alloc_decl,\n-\t\t     tree_cons (NULL_TREE, class_addr,\n-\t\t\t\tbuild_tree_list (NULL_TREE, class_size))));\n+\t\t     build_tree_list (NULL_TREE, class_addr)));\n     }\n   else\n     {"}, {"sha": "ac5a568024b02e302f88ceaeae75994fbac8384f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -1,3 +1,9 @@\n+2004-04-15  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* expr.c (expand_java_NEW): Don't use size argument for \n+\t_Jv_AllocObject calls.\n+\t* parse.y (patch_invoke): Likewise.\n+\n 2004-04-12  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* expr.c (build_invokeinterface): Remove unused variables to"}, {"sha": "839480b5b6413ff9dd862cba5c7a8a4f68afb673", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -1150,9 +1150,7 @@ expand_java_NEW (tree type)\n   safe_layout_class (type);\n   push_value (build (CALL_EXPR, promote_type (type),\n \t\t     build_address_of (alloc_node),\n-\t\t     tree_cons (NULL_TREE, build_class_ref (type),\n-\t\t\t\tbuild_tree_list (NULL_TREE,\n-\t\t\t\t\t\t size_in_bytes (type))),\n+\t\t     build_tree_list (NULL_TREE, build_class_ref (type)),\n \t\t     NULL_TREE));\n }\n "}, {"sha": "7d4c2de1ddb372b533875fc87c7276a5019535c7", "filename": "gcc/java/parse.y", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -10863,11 +10863,9 @@ patch_invoke (tree patch, tree method, tree args)\n \t(class_has_finalize_method (class) ? alloc_object_node\n \t\t  \t\t\t   : alloc_no_finalizer_node);\n       new = build (CALL_EXPR, promote_type (class),\n-\t\t   build_address_of (alloc_node),\n-\t\t   tree_cons (NULL_TREE, build_class_ref (class),\n-\t\t\t      build_tree_list (NULL_TREE,\n-\t\t\t\t\t       size_in_bytes (class))),\n-\t\t   NULL_TREE);\n+\t\t     build_address_of (alloc_node),\n+\t\t     build_tree_list (NULL_TREE, build_class_ref (class)),\n+\t\t     NULL_TREE);\n       saved_new = save_expr (new);\n       c1 = build_tree_list (NULL_TREE, saved_new);\n       TREE_CHAIN (c1) = TREE_OPERAND (original_call, 1);"}, {"sha": "bae0343ccfb3900f75b5a018f8f1e84ed552238a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -1,3 +1,18 @@\n+2004-04-15  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* prims.cc (_Jv_AllocObject): Remove `size' argument.\n+\t(_Jv_AllocObjectNoFinalizer): Likewise.\n+\t(_Jv_AllocObjectNoInitNoFinalizer): Likewise.\n+\t(_Jv_AllocPtrFreeObject): Likewise.\n+\t(_Jv_AllocString): Moved from natString.cc. Call collector interface\n+\tdirectly even in the JVMPI case.\t\n+\t* gcj/cni.h (JvAllocObject): Remove `size' argument from \n+\t_Jv_AllocObject calls.\n+\t* gcj/javaprims.h: Update prototypes.\n+\t* gnu/gcj/natCore.cc (_Jv_create_core): Use `new', not _Jv_AllocObject.\n+\t* java/lang/Class.h: Update _Jv_AllocObject friend prototype.\n+\t* java/lang/natString.cc (_Jv_AllocString): Move to prims.cc.\n+\n 2004-04-14  Andrew Haley  <aph@redhat.com>\n             Bryce McKinlay  <mckinlay@redhat.com>\n "}, {"sha": "4040f199cc0fa3c3eb0dc3c0ad7746efb37e0b19", "filename": "libjava/gcj/cni.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fgcj%2Fcni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fgcj%2Fcni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fcni.h?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -23,13 +23,13 @@ details.  */\n extern inline jobject\n JvAllocObject (jclass cls)\n {\n-  return _Jv_AllocObject (cls, cls->size());\n+  return _Jv_AllocObject (cls);\n }\n \n extern inline jobject\n JvAllocObject (jclass cls, jsize sz)\n {\n-  return _Jv_AllocObject (cls, sz);\n+  return _Jv_AllocObject (cls);\n }\n \n extern \"C\" jstring _Jv_NewStringUTF (const char *bytes);"}, {"sha": "0cdd55071e0ec6233abff6c84aaa59c088c060d4", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -450,17 +450,17 @@ struct _Jv_JNIEnv;\n typedef struct _Jv_Field *jfieldID;\n typedef struct _Jv_Method *jmethodID;\n \n-extern \"C\" jobject _Jv_AllocObject (jclass, jint) __attribute__((__malloc__));\n-extern \"C\" jobject _Jv_AllocObjectNoFinalizer (jclass, jint) __attribute__((__malloc__));\n-extern \"C\" jobject _Jv_AllocObjectNoInitNoFinalizer (jclass, jint) __attribute__((__malloc__));\n+extern \"C\" jobject _Jv_AllocObject (jclass) __attribute__((__malloc__));\n+extern \"C\" jobject _Jv_AllocObjectNoFinalizer (jclass) __attribute__((__malloc__));\n+extern \"C\" jobject _Jv_AllocObjectNoInitNoFinalizer (jclass) __attribute__((__malloc__));\n #ifdef JV_HASH_SYNCHRONIZATION\n-  extern \"C\" jobject _Jv_AllocPtrFreeObject (jclass, jint)\n+  extern \"C\" jobject _Jv_AllocPtrFreeObject (jclass)\n   \t\t\t    __attribute__((__malloc__));\n #else\n   // Collector still needs to scan sync_info\n-  static inline jobject _Jv_AllocPtrFreeObject (jclass klass, jint sz)\n+  static inline jobject _Jv_AllocPtrFreeObject (jclass klass)\n   {\n-    return _Jv_AllocObject(klass, sz);\n+    return _Jv_AllocObject(klass);\n   }\n #endif\n extern \"C\" jboolean _Jv_IsInstanceOf(jobject, jclass);"}, {"sha": "bb3fd57f6fb181099292b149f4489d6540ac00ff", "filename": "libjava/gnu/gcj/natCore.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FnatCore.cc?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -96,8 +96,7 @@ _Jv_create_core (_Jv_core_chain *node, jstring name)\n   gnu::gcj::Core *core = NULL;\n   if (node)\n     {\n-      core = (gnu::gcj::Core *) _Jv_AllocObject(&gnu::gcj::Core::class$,\n-\t\t\t\t\t\tsizeof (gnu::gcj::Core));\n+      core = new gnu::gcj::Core ();\n       core->ptr = (gnu::gcj::RawData *) node->data;\n       core->length = node->data_length;\n     }"}, {"sha": "b8a8d90fa0a6e5dcf898e2b17ba6318206fd240f", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -286,7 +286,7 @@ class java::lang::Class : public java::lang::Object\n   friend jfieldID JvGetFirstStaticField (jclass);\n   friend jint JvNumStaticFields (jclass);\n \n-  friend jobject _Jv_AllocObject (jclass, jint);\n+  friend jobject _Jv_AllocObject (jclass);\n   friend void *_Jv_AllocObj (jint, jclass);\n   friend void *_Jv_AllocPtrFreeObj (jint, jclass);\n   friend void *_Jv_AllocArray (jint, jclass);"}, {"sha": "e01f467b79f51d7077d882d2930470d28fd0c8a7", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -401,30 +401,6 @@ java::lang::String::valueOf (jint num)\n   return _Jv_NewString (buffer+11-i, i);\n }\n \n-jstring\n-_Jv_AllocString(jsize len)\n-{\n-  jsize sz = sizeof(java::lang::String) + len * sizeof(jchar);\n-\n-  // We assert that for strings allocated this way, the data field\n-  // will always point to the object itself.  Thus there is no reason\n-  // for the garbage collector to scan any of it.\n-  // Furthermore, we're about to overwrite the string data, so\n-  // initialization of the object is not an issue.\n-#ifdef ENABLE_JVMPI\n-  jstring obj = (jstring) _Jv_AllocPtrFreeObject(&StringClass, sz);\n-#else\n-  // Class needs no initialization, and there is no finalizer, so\n-  // we can go directly to the collector's allocator interface.\n-  jstring obj = (jstring) _Jv_AllocPtrFreeObj(sz, &StringClass);\n-#endif\n-  obj->data = obj;\n-  obj->boffset = sizeof(java::lang::String);\n-  obj->count = len;\n-  obj->cachedHashCode = 0;\n-  return obj;\n-}\n-\n jstring\n _Jv_NewString(const jchar *chars, jsize len)\n {"}, {"sha": "29f2b2090e8168cf064d34c1d87e7686d02022ed", "filename": "libjava/prims.cc", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245c3c04af3e4f256615b0e68c7a14a77a91d6d2/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=245c3c04af3e4f256615b0e68c7a14a77a91d6d2", "patch": "@@ -389,37 +389,37 @@ jvmpi_notify_alloc(jclass klass, jint size, jobject obj)\n # define jvmpi_notify_alloc(klass,size,obj) /* do nothing */\n #endif\n \n-// Allocate a new object of class KLASS.  SIZE is the size of the object\n-// to allocate.  You might think this is redundant, but it isn't; some\n-// classes, such as String, aren't of fixed size.\n+// Allocate a new object of class KLASS.\n // First a version that assumes that we have no finalizer, and that\n // the class is already initialized.\n // If we know that JVMPI is disabled, this can be replaced by a direct call\n // to the allocator for the appropriate GC.\n jobject\n-_Jv_AllocObjectNoInitNoFinalizer (jclass klass, jint size)\n+_Jv_AllocObjectNoInitNoFinalizer (jclass klass)\n {\n+  jint size = klass->size ();\n   jobject obj = (jobject) _Jv_AllocObj (size, klass);\n   jvmpi_notify_alloc (klass, size, obj);\n   return obj;\n }\n \n // And now a version that initializes if necessary.\n jobject\n-_Jv_AllocObjectNoFinalizer (jclass klass, jint size)\n+_Jv_AllocObjectNoFinalizer (jclass klass)\n {\n   _Jv_InitClass (klass);\n+  jint size = klass->size ();\n   jobject obj = (jobject) _Jv_AllocObj (size, klass);\n   jvmpi_notify_alloc (klass, size, obj);\n   return obj;\n }\n \n // And now the general version that registers a finalizer if necessary.\n jobject\n-_Jv_AllocObject (jclass klass, jint size)\n+_Jv_AllocObject (jclass klass)\n {\n-  jobject obj = _Jv_AllocObjectNoFinalizer (klass, size);\n-\n+  jobject obj = _Jv_AllocObjectNoFinalizer (klass);\n+  \n   // We assume that the compiler only generates calls to this routine\n   // if there really is an interesting finalizer.\n   // Unfortunately, we still have to the dynamic test, since there may\n@@ -432,14 +432,62 @@ _Jv_AllocObject (jclass klass, jint size)\n   return obj;\n }\n \n+// Allocate a String, including variable length storage.\n+jstring\n+_Jv_AllocString(jsize len)\n+{\n+  using namespace java::lang;\n+\n+  jsize sz = sizeof(java::lang::String) + len * sizeof(jchar);\n+\n+  // We assert that for strings allocated this way, the data field\n+  // will always point to the object itself.  Thus there is no reason\n+  // for the garbage collector to scan any of it.\n+  // Furthermore, we're about to overwrite the string data, so\n+  // initialization of the object is not an issue.\n+\n+  // String needs no initialization, and there is no finalizer, so\n+  // we can go directly to the collector's allocator interface.\n+  jstring obj = (jstring) _Jv_AllocPtrFreeObj(sz, &String::class$);\n+\n+  obj->data = obj;\n+  obj->boffset = sizeof(java::lang::String);\n+  obj->count = len;\n+  obj->cachedHashCode = 0;\n+  \n+#ifdef ENABLE_JVMPI\n+  // Service JVMPI request.\n+\n+  if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, false))\n+    {\n+      JVMPI_Event event;\n+\n+      event.event_type = JVMPI_EVENT_OBJECT_ALLOC;\n+      event.env_id = NULL;\n+      event.u.obj_alloc.arena_id = 0;\n+      event.u.obj_alloc.class_id = (jobjectID) &String::class$;\n+      event.u.obj_alloc.is_array = 0;\n+      event.u.obj_alloc.size = sz;\n+      event.u.obj_alloc.obj_id = (jobjectID) obj;\n+\n+      _Jv_DisableGC ();\n+      (*_Jv_JVMPI_Notify_OBJECT_ALLOC) (&event);\n+      _Jv_EnableGC ();\n+    }\n+#endif  \n+  \n+  return obj;\n+}\n+\n // A version of the above that assumes the object contains no pointers,\n // and requires no finalization.  This can't happen if we need pointers\n // to locks.\n #ifdef JV_HASH_SYNCHRONIZATION\n jobject\n-_Jv_AllocPtrFreeObject (jclass klass, jint size)\n+_Jv_AllocPtrFreeObject (jclass klass)\n {\n   _Jv_InitClass (klass);\n+  jint size = klass->size ();\n \n   jobject obj = (jobject) _Jv_AllocPtrFreeObj (size, klass);\n "}]}