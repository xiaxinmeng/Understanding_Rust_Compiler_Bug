{"sha": "fc45aeeeeccfe9e81f7e9619188c5450b1550634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM0NWFlZWVlY2NmZTllODFmN2U5NjE5MTg4YzU0NTBiMTU1MDYzNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-04-18T18:13:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-04-18T18:13:53Z"}, "message": "DR 1571\n\n\tDR 1571\n\t* call.c (reference_binding): Recurse on user-defined conversion.\n\nFrom-SVN: r209521", "tree": {"sha": "6c19266f53696d577686c93e35086a55129270f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c19266f53696d577686c93e35086a55129270f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc45aeeeeccfe9e81f7e9619188c5450b1550634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc45aeeeeccfe9e81f7e9619188c5450b1550634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc45aeeeeccfe9e81f7e9619188c5450b1550634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc45aeeeeccfe9e81f7e9619188c5450b1550634/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c663bc6a4ff37bf6cb3d6d05c9862e17236051ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c663bc6a4ff37bf6cb3d6d05c9862e17236051ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c663bc6a4ff37bf6cb3d6d05c9862e17236051ec"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "b7db35039f1f1148ffd9a6fda74d8c13f69f965b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc45aeeeeccfe9e81f7e9619188c5450b1550634", "patch": "@@ -1,5 +1,8 @@\n 2014-04-18  Jason Merrill  <jason@redhat.com>\n \n+\tDR 1571\n+\t* call.c (reference_binding): Recurse on user-defined conversion.\n+\n \tPR c++/60872\n \t* call.c (standard_conversion): Don't try to apply restrict to void.\n "}, {"sha": "8c55c326fc74f590c17b08b5c8a271f1d88e6f77", "filename": "gcc/cp/call.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fc45aeeeeccfe9e81f7e9619188c5450b1550634", "patch": "@@ -1684,20 +1684,30 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n   if (!conv)\n     return NULL;\n \n+  if (conv->user_conv_p)\n+    {\n+      /* If initializing the temporary used a conversion function,\n+\t recalculate the second conversion sequence.  */\n+      for (conversion *t = conv; t; t = next_conversion (t))\n+\tif (t->kind == ck_user\n+\t    && DECL_CONV_FN_P (t->cand->fn))\n+\t  {\n+\t    tree ftype = TREE_TYPE (TREE_TYPE (t->cand->fn));\n+\t    int sflags = (flags|LOOKUP_NO_CONVERSION)&~LOOKUP_NO_TEMP_BIND;\n+\t    conversion *new_second\n+\t      = reference_binding (rto, ftype, NULL_TREE, c_cast_p,\n+\t\t\t\t   sflags, complain);\n+\t    if (!new_second)\n+\t      return NULL;\n+\t    return merge_conversion_sequences (t, new_second);\n+\t  }\n+    }\n+\n   conv = build_conv (ck_ref_bind, rto, conv);\n   /* This reference binding, unlike those above, requires the\n      creation of a temporary.  */\n   conv->need_temporary_p = true;\n-  if (TYPE_REF_IS_RVALUE (rto))\n-    {\n-      conv->rvaluedness_matches_p = 1;\n-      /* In the second case, if the reference is an rvalue reference and\n-\t the second standard conversion sequence of the user-defined\n-\t conversion sequence includes an lvalue-to-rvalue conversion, the\n-\t program is ill-formed.  */\n-      if (conv->user_conv_p && next_conversion (conv)->kind == ck_rvalue)\n-\tconv->bad_p = 1;\n-    }\n+  conv->rvaluedness_matches_p = TYPE_REF_IS_RVALUE (rto);\n \n   return conv;\n }"}, {"sha": "0eecabdecc757adb65bfdb0bb55a774dd6e8db50", "filename": "gcc/testsuite/g++.dg/cpp0x/overload3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C?ref=fc45aeeeeccfe9e81f7e9619188c5450b1550634", "patch": "@@ -13,5 +13,5 @@ struct wrap\n int main()\n {\n   wrap w;\n-  f(w);\t\t\t\t// { dg-error \"lvalue\" }\n+  f(w);\t\t\t\t// { dg-error \"\" }\n }"}, {"sha": "2e8d4f748efe9beb9760f63c77b6f1c0e40c098e", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-init1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc45aeeeeccfe9e81f7e9619188c5450b1550634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-init1.C?ref=fc45aeeeeccfe9e81f7e9619188c5450b1550634", "patch": "@@ -0,0 +1,26 @@\n+// Core DR 1604/1571/1572\n+// { dg-require-effective-target c++11 }\n+\n+struct Banana { };\n+struct Enigma { operator const Banana(); };\n+struct Doof { operator Banana&(); };\n+void enigmatic() {\n+  typedef const Banana ConstBanana;\n+  Banana &&banana1 = ConstBanana(); // { dg-error \"\" }\n+  Banana &&banana2 = Enigma();      // { dg-error \"\" }\n+  Banana &&banana3 = Doof();        // { dg-error \"\" }\n+}\n+\n+class A {\n+public:\n+  operator volatile int &();\n+};\n+A a;\n+\n+const int & ir1a = a.operator volatile int&(); // { dg-error \"\" }\n+const int & ir2a = a;\t\t\t       // { dg-error \"\" }\n+\n+struct X {\n+  operator int&();\n+} x;\n+int&& rri2 = X();\t\t// { dg-error \"\" }"}]}