{"sha": "3b2db49f369d82be920b0614b0edaef405efb8ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IyZGI0OWYzNjlkODJiZTkyMGIwNjE0YjBlZGFlZjQwNWVmYjhhZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-12-27T06:09:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-12-27T06:09:13Z"}, "message": "PR c++/23171, c++/23172, c++/25417.\n\n\t* c-decl.c (compound_literal_number): Remove.\n\t(build_compound_literal): Use set_compound_literal_name.\n\t* c-common.c (compound_literal_number): New variable.\n\t(set_compound_literal_name): New function.\n\t* c-common.h (set_compound_literal_name): Declare.\n\n\tPR c++/23171, c++/23172, c++/25417.\n\t* typeck.c (build_unary_op): Create temporary variables for\n\tcompound literals whose addresses are taken.\n\t* init.c (expand_aggr_init_1): Use COMPOUND_LITERAL_P.\n\t* decl.c (reshape_init_vector): Likewise.\n\t(reshape_init): Give it external linkage.\n\t(check_initializer): Use COMPOUND_LITERAL_P.\n\t(initialize_artificial_var): Allow the initializer to be a\n\tCONSTRUCTOR.\n\t* call.c (make_temporary_var_for_ref_to_temp): Use\n\tcreate_temporary_var.\n\t* cp-tree.h (COMPOUND_LITERAL_P): New macro.\n\t(rehape_init): Declare.\n\t* typeck2.c (digest_init): Use COMPOUND_LITERAL_P.\n\t* semantics.c (finish_compound_literal): Use reshape_init.\n\n\tPR c++/23172\n\t* g++.dg/ext/complit4.C: New test.\n\n\tPR c++/25417\n\t* g++.dg/ext/complit5.C: Likewise.\n\nFrom-SVN: r109075", "tree": {"sha": "7ac7d3aa381cf7fc41ba0b018b9485b01b8d2a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ac7d3aa381cf7fc41ba0b018b9485b01b8d2a44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b2db49f369d82be920b0614b0edaef405efb8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2db49f369d82be920b0614b0edaef405efb8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2db49f369d82be920b0614b0edaef405efb8ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2db49f369d82be920b0614b0edaef405efb8ae/comments", "author": null, "committer": null, "parents": [{"sha": "103a4b39c223d6cded567dbc8aed82455a34aeac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103a4b39c223d6cded567dbc8aed82455a34aeac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103a4b39c223d6cded567dbc8aed82455a34aeac"}], "stats": {"total": 275, "additions": 179, "deletions": 96}, "files": [{"sha": "e2d5eea5b49a83653483169977ca714e24d89ab8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -1,3 +1,12 @@\n+2005-12-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23171, c++/23172, c++/25417.\n+\t* c-decl.c (compound_literal_number): Remove.\n+\t(build_compound_literal): Use set_compound_literal_name.\n+\t* c-common.c (compound_literal_number): New variable.\n+\t(set_compound_literal_name): New function.\n+\t* c-common.h (set_compound_literal_name): Declare.\n+\t\n 2005-12-26  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR tree-optimization/25125"}, {"sha": "b252345945840abad3100a312aa70b41369c7f9e", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -3359,6 +3359,21 @@ set_builtin_user_assembler_name (tree decl, const char *asmspec)\n     init_block_clear_fn (asmspec);\n }\n \n+/* The number of named compound-literals generated thus far.  */\n+static GTY(()) int compound_literal_number;\n+\n+/* Set DECL_NAME for DECL, a VAR_DECL for a compound-literal.  */\n+\n+void\n+set_compound_literal_name (tree decl)\n+{\n+  char *name;\n+  ASM_FORMAT_PRIVATE_NAME (name, \"__compound_literal\",\n+\t\t\t   compound_literal_number);\n+  compound_literal_number++;\n+  DECL_NAME (decl) = get_identifier (name);\n+}\n+\n tree\n build_va_arg (tree expr, tree type)\n {"}, {"sha": "65a0107c69cb87fc7ec42e5311bb86362403b9b6", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -679,6 +679,8 @@ extern void set_builtin_user_assembler_name (tree decl, const char *asmspec);\n \n extern void disable_builtin_function (const char *);\n \n+extern void set_compound_literal_name (tree decl);\n+\n extern tree build_va_arg (tree, tree);\n \n extern unsigned int c_common_init_options (unsigned int, const char **);"}, {"sha": "4c786b6cdb192e789aa6445dce444c87fa569b8b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -3601,8 +3601,6 @@ mark_forward_parm_decls (void)\n       TREE_ASM_WRITTEN (b->decl) = 1;\n }\n \f\n-static GTY(()) int compound_literal_number;\n-\n /* Build a COMPOUND_LITERAL_EXPR.  TYPE is the type given in the compound\n    literal, which may be an incomplete array type completed by the\n    initializer; INIT is a CONSTRUCTOR that initializes the compound\n@@ -3652,14 +3650,8 @@ build_compound_literal (tree type, tree init)\n \n   if (TREE_STATIC (decl))\n     {\n-      /* This decl needs a name for the assembler output.  We also need\n-\t a unique suffix to be added to the name.  */\n-      char *name;\n-\n-      ASM_FORMAT_PRIVATE_NAME (name, \"__compound_literal\",\n-\t\t\t       compound_literal_number);\n-      compound_literal_number++;\n-      DECL_NAME (decl) = get_identifier (name);\n+      /* This decl needs a name for the assembler output.  */\n+      set_compound_literal_name (decl);\n       DECL_DEFER_OUTPUT (decl) = 1;\n       DECL_COMDAT (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;"}, {"sha": "8f270641ffc8dfa8dab46543dd61d1fdec735da7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -1,3 +1,21 @@\n+2005-12-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23171, c++/23172, c++/25417.\n+\t* typeck.c (build_unary_op): Create temporary variables for\n+\tcompound literals whose addresses are taken.\n+\t* init.c (expand_aggr_init_1): Use COMPOUND_LITERAL_P.\n+\t* decl.c (reshape_init_vector): Likewise.\n+\t(reshape_init): Give it external linkage.\n+\t(check_initializer): Use COMPOUND_LITERAL_P.\n+\t(initialize_artificial_var): Allow the initializer to be a\n+\tCONSTRUCTOR.\n+\t* call.c (make_temporary_var_for_ref_to_temp): Use\n+\tcreate_temporary_var.\n+\t* cp-tree.h (COMPOUND_LITERAL_P): New macro.\n+\t(rehape_init): Declare.\n+\t* typeck2.c (digest_init): Use COMPOUND_LITERAL_P.\n+\t* semantics.c (finish_compound_literal): Use reshape_init.\n+\n 2005-12-23  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24671"}, {"sha": "014a826e7ea0b965c401fa7810b742b49597ec82", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -6430,10 +6430,7 @@ make_temporary_var_for_ref_to_temp (tree decl, tree type)\n   tree var;\n \n   /* Create the variable.  */\n-  var = build_decl (VAR_DECL, NULL_TREE, type);\n-  DECL_ARTIFICIAL (var) = 1;\n-  DECL_IGNORED_P (var) = 1;\n-  TREE_USED (var) = 1;\n+  var = create_temporary_var (type);\n \n   /* Register the variable.  */\n   if (TREE_STATIC (decl))\n@@ -6448,12 +6445,8 @@ make_temporary_var_for_ref_to_temp (tree decl, tree type)\n       var = pushdecl_top_level (var);\n     }\n   else\n-    {\n-      /* Create a new cleanup level if necessary.  */\n-      maybe_push_cleanup_level (type);\n-      /* Don't push unnamed temps.  Do set DECL_CONTEXT, though.  */\n-      DECL_CONTEXT (var) = current_function_decl;\n-    }\n+    /* Create a new cleanup level if necessary.  */\n+    maybe_push_cleanup_level (type);\n \n   return var;\n }"}, {"sha": "3ac322d6de0ef70c4020fe2e3ee8f10c430749a5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -2440,6 +2440,11 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define BRACE_ENCLOSED_INITIALIZER_P(NODE) \\\n   (TREE_CODE (NODE) == CONSTRUCTOR && !TREE_TYPE (NODE))\n \n+/* True if NODE is a compound-literal, i.e., a brace-enclosed\n+   initializer cast to a particular type.  */\n+#define COMPOUND_LITERAL_P(NODE) \\\n+  (TREE_CODE (NODE) == CONSTRUCTOR && TREE_HAS_CONSTRUCTOR (NODE))\n+\n #define EMPTY_CONSTRUCTOR_P(NODE) (TREE_CODE (NODE) == CONSTRUCTOR \\\n \t\t\t\t   && VEC_empty (constructor_elt, \\\n \t\t\t\t\t\t CONSTRUCTOR_ELTS (NODE)) \\\n@@ -3857,6 +3862,7 @@ extern const char *cxx_comdat_group\t\t(tree);\n extern bool cp_missing_noreturn_ok_p\t\t(tree);\n extern void initialize_artificial_var\t\t(tree, tree);\n extern tree check_var_type\t\t\t(tree, tree);\n+extern tree reshape_init (tree, tree);\n \n extern bool have_extern_spec;\n "}, {"sha": "7517214bafa491281a697ca76d67efe14b7e3792", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -114,7 +114,6 @@ static void store_parm_decls (tree);\n static void initialize_local_var (tree, tree);\n static void expand_static_init (tree, tree);\n static tree next_initializable_field (tree);\n-static tree reshape_init (tree, tree);\n \n /* Erroneous argument lists can use this *IFF* they do not modify it.  */\n tree error_mark_list;\n@@ -4274,8 +4273,7 @@ reshape_init_vector (tree type, reshape_iter *d)\n \n   gcc_assert (TREE_CODE (type) == VECTOR_TYPE);\n \n-  if (TREE_CODE (d->cur->value) == CONSTRUCTOR\n-      && TREE_HAS_CONSTRUCTOR (d->cur->value))\n+  if (COMPOUND_LITERAL_P (d->cur->value))\n     {\n       tree value = d->cur->value;\n       if (!same_type_p (TREE_TYPE (value), type))\n@@ -4459,7 +4457,7 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p)\n \t     we should add a call to reshape_init in finish_compound_literal,\n \t     before calling digest_init, so changing this code would still\n \t     not be necessary.  */\n-\t  if (!TREE_HAS_CONSTRUCTOR (init))\n+\t  if (!COMPOUND_LITERAL_P (init))\n \t    {\n \t      ++d->cur;\n \t      gcc_assert (BRACE_ENCLOSED_INITIALIZER_P (init));\n@@ -4499,14 +4497,13 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p)\n    routine transforms INIT from the former form into the latter.  The\n    revised CONSTRUCTOR node is returned.  */\n \n-static tree\n+tree\n reshape_init (tree type, tree init)\n {\n   VEC(constructor_elt, gc) *v;\n   reshape_iter d;\n   tree new_init;\n \n-  gcc_assert (TREE_CODE (init) == CONSTRUCTOR);\n   gcc_assert (BRACE_ENCLOSED_INITIALIZER_P (init));\n \n   v = CONSTRUCTOR_ELTS (init);\n@@ -4595,7 +4592,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n       /* Do not reshape constructors of vectors (they don't need to be\n          reshaped.  */\n       if (TREE_CODE (init) == CONSTRUCTOR\n-\t  && !TREE_HAS_CONSTRUCTOR (init)\n+\t  && !COMPOUND_LITERAL_P (init)\n \t  && !TREE_TYPE (init))  /* ptrmemfunc */\n \t{\n \t  init = reshape_init (type, init);\n@@ -4618,7 +4615,6 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t    goto initialize_aggr;\n \t  else if (TREE_CODE (init) == CONSTRUCTOR)\n \t    {\n-\t      gcc_assert (BRACE_ENCLOSED_INITIALIZER_P (init));\n \t      if (TYPE_NON_AGGREGATE_CLASS (type))\n \t\t{\n \t\t  error (\"%qD must be initialized by constructor, \"\n@@ -4837,13 +4833,17 @@ initialize_local_var (tree decl, tree init)\n \n /* DECL is a VAR_DECL for a compiler-generated variable with static\n    storage duration (like a virtual table) whose initializer is a\n-   compile-time constant.  Initialize the variable and provide it to\n-   the back end.  */\n+   compile-time constant.  INIT must be either a TREE_LIST of values,\n+   or a CONSTRUCTOR.  Initialize the variable and provide it to the\n+   back end.  */\n \n void\n initialize_artificial_var (tree decl, tree init)\n {\n-  DECL_INITIAL (decl) = build_constructor_from_list (NULL_TREE, init);\n+  if (TREE_CODE (init) == TREE_LIST)\n+    init = build_constructor_from_list (NULL_TREE, init);\n+  gcc_assert (TREE_CODE (init) == CONSTRUCTOR);\n+  DECL_INITIAL (decl) = init;\n   DECL_INITIALIZED_P (decl) = 1;\n   determine_visibility (decl);\n   layout_var_decl (decl);"}, {"sha": "dbdd866f506bdd23e75250a6d8a5cb4e0d65334f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -1271,11 +1271,10 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags)\n      as TARGET_EXPRs.  */\n \n   if (init && TREE_CODE (exp) == VAR_DECL\n-      && TREE_CODE (init) == CONSTRUCTOR\n-      && TREE_HAS_CONSTRUCTOR (init))\n+      && COMPOUND_LITERAL_P (init))\n     {\n       /* If store_init_value returns NULL_TREE, the INIT has been\n-\t record in the DECL_INITIAL for EXP.  That means there's\n+\t recorded as the DECL_INITIAL for EXP.  That means there's\n \t nothing more we have to do.  */\n       init = store_init_value (exp, init);\n       if (init)"}, {"sha": "512b78949fbf477930a8bb05fc39ba70dbdc43ca", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -2005,12 +2005,12 @@ finish_compound_literal (tree type, VEC(constructor_elt,gc) *initializer_list)\n \n   /* Build a CONSTRUCTOR for the INITIALIZER_LIST.  */\n   compound_literal = build_constructor (NULL_TREE, initializer_list);\n-  /* Mark it as a compound-literal.  */\n   if (processing_template_decl)\n     TREE_TYPE (compound_literal) = type;\n   else\n     {\n       /* Check the initialization.  */\n+      compound_literal = reshape_init (type, compound_literal);\n       compound_literal = digest_init (type, compound_literal);\n       /* If the TYPE was an array type with an unknown bound, then we can\n \t figure out the dimension now.  For example, something like:\n@@ -2023,7 +2023,9 @@ finish_compound_literal (tree type, VEC(constructor_elt,gc) *initializer_list)\n \t\t\t\tcompound_literal, 1);\n     }\n \n+  /* Mark it as a compound-literal.  */\n   TREE_HAS_CONSTRUCTOR (compound_literal) = 1;\n+\n   return compound_literal;\n }\n "}, {"sha": "01f2ebbd9b58068475f89e1043307b3edc747bad", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 77, "deletions": 59, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -4192,75 +4192,93 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t  break;\n \t}\n \n-      /* Allow the address of a constructor if all the elements\n-\t are constant.  */\n-      if (TREE_CODE (arg) == CONSTRUCTOR && TREE_HAS_CONSTRUCTOR (arg)\n-\t  && TREE_CONSTANT (arg))\n-\t;\n       /* Anything not already handled and not a true memory reference\n \t is an error.  */\n-      else if (TREE_CODE (argtype) != FUNCTION_TYPE\n-\t       && TREE_CODE (argtype) != METHOD_TYPE\n-\t       && TREE_CODE (arg) != OFFSET_REF\n-\t       && !lvalue_or_else (arg, lv_addressof))\n+      if (TREE_CODE (argtype) != FUNCTION_TYPE\n+\t  && TREE_CODE (argtype) != METHOD_TYPE\n+\t  && TREE_CODE (arg) != OFFSET_REF\n+\t  /* Permit users to take the address of a compound-literal\n+\t     with sufficient simple elements.  */\n+\t  && !(COMPOUND_LITERAL_P (arg) && TREE_STATIC (arg))\n+\t  && !lvalue_or_else (arg, lv_addressof))\n \treturn error_mark_node;\n \n       if (argtype != error_mark_node)\n \targtype = build_pointer_type (argtype);\n \n-      {\n-\ttree addr;\n+      /* In a template, we are processing a non-dependent expression\n+\t so we can just form an ADDR_EXPR with the correct type.  */\n+      if (processing_template_decl)\n+\t{\n+\t  val = build_address (arg);\n+\t  if (TREE_CODE (arg) == OFFSET_REF)\n+\t    PTRMEM_OK_P (val) = PTRMEM_OK_P (arg);\n+\t  return val;\n+\t}\n \n-\tif (TREE_CODE (arg) != COMPONENT_REF\n-\t    /* Inside a template, we are processing a non-dependent\n-\t       expression so we can just form an ADDR_EXPR with the\n-\t       correct type.  */\n-\t    || processing_template_decl)\n-\t  {\n-\t    addr = build_address (arg);\n-\t    if (TREE_CODE (arg) == OFFSET_REF)\n-\t      PTRMEM_OK_P (addr) = PTRMEM_OK_P (arg);\n-\t  }\n-\telse if (TREE_CODE (TREE_OPERAND (arg, 1)) == BASELINK)\n-\t  {\n-\t    tree fn = BASELINK_FUNCTIONS (TREE_OPERAND (arg, 1));\n-\n-\t    /* We can only get here with a single static member\n-\t       function.  */\n-\t    gcc_assert (TREE_CODE (fn) == FUNCTION_DECL\n-\t\t\t&& DECL_STATIC_FUNCTION_P (fn));\n-\t    mark_used (fn);\n-\t    addr = build_address (fn);\n-\t    if (TREE_SIDE_EFFECTS (TREE_OPERAND (arg, 0)))\n-\t      /* Do not lose object's side effects.  */\n-\t      addr = build2 (COMPOUND_EXPR, TREE_TYPE (addr),\n-\t\t\t     TREE_OPERAND (arg, 0), addr);\n-\t  }\n-\telse if (DECL_C_BIT_FIELD (TREE_OPERAND (arg, 1)))\n-\t  {\n-\t    error (\"attempt to take address of bit-field structure member %qD\",\n-\t\t   TREE_OPERAND (arg, 1));\n-\t    return error_mark_node;\n-\t  }\n-\telse\n-\t  {\n-\t    tree object = TREE_OPERAND (arg, 0);\n-\t    tree field = TREE_OPERAND (arg, 1);\n-\t    gcc_assert (same_type_ignoring_top_level_qualifiers_p\n-\t\t\t(TREE_TYPE (object), decl_type_context (field)));\n-\t    addr = build_address (arg);\n-\t  }\n+      /* If the user has taken the address of the compound literal,\n+\t create a variable to contain the value of the literal and\n+\t then return the address of that variable.  */\n+      if (COMPOUND_LITERAL_P (arg))\n+\t{\n+\t  tree var;\n+\t  gcc_assert (TREE_STATIC (arg));\n+\t  var = create_temporary_var (TREE_TYPE (arg));\n+\t  TREE_STATIC (var) = 1;\n+\t  set_compound_literal_name (var); \n+\t  initialize_artificial_var (var, arg);\n+\t  arg = pushdecl (var);\n+\t  /* Since each compound literal is unique, pushdecl should\n+\t     never find a pre-existing variable with the same\n+\t     name.  */\n+\t  gcc_assert (arg == var);\n+\t}\n+      \n+      if (TREE_CODE (arg) != COMPONENT_REF)\n+\t{\n+\t  val = build_address (arg);\n+\t  if (TREE_CODE (arg) == OFFSET_REF)\n+\t    PTRMEM_OK_P (val) = PTRMEM_OK_P (arg);\n+\t}\n+      else if (TREE_CODE (TREE_OPERAND (arg, 1)) == BASELINK)\n+\t{\n+\t  tree fn = BASELINK_FUNCTIONS (TREE_OPERAND (arg, 1));\n+\n+\t  /* We can only get here with a single static member\n+\t     function.  */\n+\t  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL\n+\t\t      && DECL_STATIC_FUNCTION_P (fn));\n+\t  mark_used (fn);\n+\t  val = build_address (fn);\n+\t  if (TREE_SIDE_EFFECTS (TREE_OPERAND (arg, 0)))\n+\t    /* Do not lose object's side effects.  */\n+\t    val = build2 (COMPOUND_EXPR, TREE_TYPE (val),\n+\t\t\t  TREE_OPERAND (arg, 0), val);\n+\t}\n+      else if (DECL_C_BIT_FIELD (TREE_OPERAND (arg, 1)))\n+\t{\n+\t  error (\"attempt to take address of bit-field structure member %qD\",\n+\t\t TREE_OPERAND (arg, 1));\n+\t  return error_mark_node;\n+\t}\n+      else\n+\t{\n+\t  tree object = TREE_OPERAND (arg, 0);\n+\t  tree field = TREE_OPERAND (arg, 1);\n+\t  gcc_assert (same_type_ignoring_top_level_qualifiers_p\n+\t\t      (TREE_TYPE (object), decl_type_context (field)));\n+\t  val = build_address (arg);\n+\t}\n \n-\tif (TREE_CODE (argtype) == POINTER_TYPE\n-\t    && TREE_CODE (TREE_TYPE (argtype)) == METHOD_TYPE)\n-\t  {\n-\t    build_ptrmemfunc_type (argtype);\n-\t    addr = build_ptrmemfunc (argtype, addr, 0,\n-\t\t\t\t     /*c_cast_p=*/false);\n-\t  }\n+      if (TREE_CODE (argtype) == POINTER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (argtype)) == METHOD_TYPE)\n+\t{\n+\t  build_ptrmemfunc_type (argtype);\n+\t  val = build_ptrmemfunc (argtype, val, 0,\n+\t\t\t\t  /*c_cast_p=*/false);\n+\t}\n \n-\treturn addr;\n-      }\n+      return val;\n \n     default:\n       break;"}, {"sha": "9f2d5a49566a02238177667e0cd9da4d1ccd9551", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -712,8 +712,7 @@ digest_init (tree type, tree init)\n       return process_init_constructor (type, init);\n   else\n     {\n-      if (TREE_HAS_CONSTRUCTOR (init)\n-\t  && TREE_CODE (type) == ARRAY_TYPE)\n+      if (COMPOUND_LITERAL_P (init) && TREE_CODE (type) == ARRAY_TYPE)\n \t{\n \t  error (\"cannot initialize aggregate of type %qT with \"\n \t\t \"a compound literal\", type);"}, {"sha": "f8698658f6876e149e2fb9d8fb7e56cb0373e87a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -1,3 +1,11 @@\n+2005-12-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23172\n+\t* g++.dg/ext/complit4.C: New test.\n+\n+\tPR c++/25417\n+\t* g++.dg/ext/complit5.C: Likewise.\n+\n 2005-12-26  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR tree-optimization/25125"}, {"sha": "1448e7a66b3b76e4fb4d3d003731e23368951b15", "filename": "gcc/testsuite/g++.dg/ext/complit4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit4.C?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/23172\n+// { dg-do run }\n+// { dg-options \"\" }\n+\n+int i = (int) {7};\n+\n+int main () {\n+  if (i != 7)\n+    return 1;\n+}"}, {"sha": "c406c998046f1e6e29ee6a0b7cba8179c9331b73", "filename": "gcc/testsuite/g++.dg/ext/complit5.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2db49f369d82be920b0614b0edaef405efb8ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit5.C?ref=3b2db49f369d82be920b0614b0edaef405efb8ae", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/25417\n+// { dg-options \"\" }\n+\n+struct object {\n+  int a;\n+  int b;\n+};\n+\n+void f (int c, int d)\n+{\n+  object o = ((object){ a : c, b : d});\n+}"}]}