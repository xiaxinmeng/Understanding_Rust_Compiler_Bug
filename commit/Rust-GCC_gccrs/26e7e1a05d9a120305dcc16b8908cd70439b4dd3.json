{"sha": "26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlN2UxYTA1ZDlhMTIwMzA1ZGNjMTZiODkwOGNkNzA0MzliNGRkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T15:31:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T15:31:56Z"}, "message": "[multiple changes]\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnatls.adb: Use Prj.Env.Initialize_Default_Project_Path to retrieve\n\tthe project path.\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* a-coinho.adb: Minor reformatting.\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* a-coinho.ads: Minor reformatting.\n\n2011-08-04  Vadim Godunko  <godunko@adacore.com>\n\n\t* s-atocou.ads, s-atocou.adb: New files.\n\t* a-strunb-shared.ads, a-strunb-shared.adb, a-stwiun-shared.ads,\n\ta-stwiun-shared.adb, a-stzunb-shared.ads, a-stzunb-shared.adb: Remove\n\tdirect use of GCC's atomic builtins and replace them by use of new\n\tatomic counter package.\n\n2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_strm.adb: better error message for No_Default_Stream_Attributes.\n\n2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-tags.adb (Unregister_Tag): Replace the complex address arithmetic\n\twith a call to Get_External_Tag.\n\t* exp_ch7.adb (Build_Cleanup_Statements): Update the comment on\n\tsubprogram usage. Remove the guard against package declarations and\n\tbodies since Build_Cleanup_Statements is no longer invoked in that\n\tcontext.\n\t(Build_Components): Initialize Tagged_Type_Stmts when the context\n\tcontains at least one library-level tagged type.\n\t(Build_Finalizer): New local variables Has_Tagged_Types and\n\tTagged_Type_Stmts along with associated comments on usage. Update the\n\tlogic to include tagged type processing.\n\t(Create_Finalizer): Insert all library-level tagged type unregistration\n\tcode before the jump block circuitry.\n\t(Expand_N_Package_Body): Remove the call to Build_Cleanup_Statements.\n\t(Expand_N_Package_Declaration): Remove the call to\n\tBuild_Cleanup_Statements.\n\t(Process_Tagged_Type_Declaration): New routine. Generate a call to\n\tunregister the external tag of a tagged type.\n\t(Processing_Actions): Reimplemented to handle tagged types.\n\t(Process_Declarations): Detect the declaration of a library-level\n\ttagged type and carry out the appropriate actions.\n\t(Unregister_Tagged_Types): Removed. The machinery has been directly\n\tmerged with Build_Finalizer.\n\nFrom-SVN: r177401", "tree": {"sha": "221b324fc246557794e1977bd63dc7c19d564aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221b324fc246557794e1977bd63dc7c19d564aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/comments", "author": null, "committer": null, "parents": [{"sha": "7483c88857464141597b422942b0a66189ef12da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7483c88857464141597b422942b0a66189ef12da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7483c88857464141597b422942b0a66189ef12da"}], "stats": {"total": 650, "additions": 377, "deletions": 273}, "files": [{"sha": "4611e705cedc7e858b73b5929552217ba74931b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -1,3 +1,54 @@\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnatls.adb: Use Prj.Env.Initialize_Default_Project_Path to retrieve\n+\tthe project path.\n+\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-coinho.adb: Minor reformatting.\n+\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-coinho.ads: Minor reformatting.\n+\n+2011-08-04  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* s-atocou.ads, s-atocou.adb: New files.\n+\t* a-strunb-shared.ads, a-strunb-shared.adb, a-stwiun-shared.ads,\n+\ta-stwiun-shared.adb, a-stzunb-shared.ads, a-stzunb-shared.adb: Remove\n+\tdirect use of GCC's atomic builtins and replace them by use of new\n+\tatomic counter package.\n+\n+2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_strm.adb: better error message for No_Default_Stream_Attributes.\n+\n+2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-tags.adb (Unregister_Tag): Replace the complex address arithmetic\n+\twith a call to Get_External_Tag.\n+\t* exp_ch7.adb (Build_Cleanup_Statements): Update the comment on\n+\tsubprogram usage. Remove the guard against package declarations and\n+\tbodies since Build_Cleanup_Statements is no longer invoked in that\n+\tcontext.\n+\t(Build_Components): Initialize Tagged_Type_Stmts when the context\n+\tcontains at least one library-level tagged type.\n+\t(Build_Finalizer): New local variables Has_Tagged_Types and\n+\tTagged_Type_Stmts along with associated comments on usage. Update the\n+\tlogic to include tagged type processing.\n+\t(Create_Finalizer): Insert all library-level tagged type unregistration\n+\tcode before the jump block circuitry.\n+\t(Expand_N_Package_Body): Remove the call to Build_Cleanup_Statements.\n+\t(Expand_N_Package_Declaration): Remove the call to\n+\tBuild_Cleanup_Statements.\n+\t(Process_Tagged_Type_Declaration): New routine. Generate a call to\n+\tunregister the external tag of a tagged type.\n+\t(Processing_Actions): Reimplemented to handle tagged types.\n+\t(Process_Declarations): Detect the declaration of a library-level\n+\ttagged type and carry out the appropriate actions.\n+\t(Unregister_Tagged_Types): Removed. The machinery has been directly\n+\tmerged with Build_Finalizer.\n+\n 2011-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* bindgen.ads, gnatlink.adb, sem_ch4.adb, gnatbind.adb, put_alfa.adb,"}, {"sha": "b6c38b098b63134ab594e7f322f653b2e680f68c", "filename": "gcc/ada/a-coinho.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-coinho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-coinho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -102,7 +102,6 @@ package body Ada.Containers.Indefinite_Holders is\n    begin\n       if Source.Element = null then\n          return (AF.Controlled with null, 0);\n-\n       else\n          return (AF.Controlled with new Element_Type'(Source.Element.all), 0);\n       end if;\n@@ -116,7 +115,6 @@ package body Ada.Containers.Indefinite_Holders is\n    begin\n       if Container.Element = null then\n          raise Constraint_Error with \"container is empty\";\n-\n       else\n          return Container.Element.all;\n       end if;\n@@ -184,11 +182,9 @@ package body Ada.Containers.Indefinite_Holders is\n \n       begin\n          Process (Container.Element.all);\n-\n       exception\n          when others =>\n             B := B - 1;\n-\n             raise;\n       end;\n \n@@ -201,7 +197,8 @@ package body Ada.Containers.Indefinite_Holders is\n \n    procedure Read\n      (Stream    : not null access Ada.Streams.Root_Stream_Type'Class;\n-      Container : out Holder) is\n+      Container : out Holder)\n+   is\n    begin\n       Clear (Container);\n \n@@ -215,7 +212,9 @@ package body Ada.Containers.Indefinite_Holders is\n    ---------------------\n \n    procedure Replace_Element\n-     (Container : in out Holder; New_Item : Element_Type) is\n+     (Container : in out Holder;\n+      New_Item  : Element_Type)\n+   is\n    begin\n       if Container.Busy /= 0 then\n          raise Program_Error with \"attempt to tamper with elements\";\n@@ -253,11 +252,9 @@ package body Ada.Containers.Indefinite_Holders is\n \n       begin\n          Process (Container.Element.all);\n-\n       exception\n          when others =>\n             B := B - 1;\n-\n             raise;\n       end;\n \n@@ -270,7 +267,8 @@ package body Ada.Containers.Indefinite_Holders is\n \n    procedure Write\n      (Stream    : not null access Ada.Streams.Root_Stream_Type'Class;\n-      Container : Holder) is\n+      Container : Holder)\n+   is\n    begin\n       Boolean'Output (Stream, Container.Element = null);\n "}, {"sha": "d5d0cf404784b853660a72fa5ea4e6acae6c1415", "filename": "gcc/ada/a-coinho.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-coinho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-coinho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho.ads?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -56,7 +56,8 @@ package Ada.Containers.Indefinite_Holders is\n    function Element (Container : Holder) return Element_Type;\n \n    procedure Replace_Element\n-     (Container : in out Holder; New_Item : Element_Type);\n+     (Container : in out Holder;\n+      New_Item  : Element_Type);\n \n    procedure Query_Element\n      (Container : Holder;"}, {"sha": "cf2582a7dea45e6b2a74cb72b0c187264d6dd2b3", "filename": "gcc/ada/a-strunb-shared.adb", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-strunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-strunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,16 +50,6 @@ package body Ada.Strings.Unbounded is\n    --  align the returned memory on the maximum alignment as malloc does not\n    --  know the target alignment.\n \n-   procedure Sync_Add_And_Fetch\n-     (Ptr   : access Interfaces.Unsigned_32;\n-      Value : Interfaces.Unsigned_32);\n-   pragma Import (Intrinsic, Sync_Add_And_Fetch, \"__sync_add_and_fetch_4\");\n-\n-   function Sync_Sub_And_Fetch\n-     (Ptr   : access Interfaces.Unsigned_32;\n-      Value : Interfaces.Unsigned_32) return Interfaces.Unsigned_32;\n-   pragma Import (Intrinsic, Sync_Sub_And_Fetch, \"__sync_sub_and_fetch_4\");\n-\n    function Aligned_Max_Length (Max_Length : Natural) return Natural;\n    --  Returns recommended length of the shared string which is greater or\n    --  equal to specified length. Calculation take in sense alignment of the\n@@ -633,12 +623,10 @@ package body Ada.Strings.Unbounded is\n \n    function Can_Be_Reused\n      (Item   : Shared_String_Access;\n-      Length : Natural) return Boolean\n-   is\n-      use Interfaces;\n+      Length : Natural) return Boolean is\n    begin\n       return\n-        Item.Counter = 1\n+        System.Atomic_Counters.Is_One (Item.Counter)\n           and then Item.Max_Length >= Length\n           and then Item.Max_Length <=\n                      Aligned_Max_Length (Length + Length / Growth_Factor);\n@@ -1282,7 +1270,7 @@ package body Ada.Strings.Unbounded is\n \n    procedure Reference (Item : not null Shared_String_Access) is\n    begin\n-      Sync_Add_And_Fetch (Item.Counter'Access, 1);\n+      System.Atomic_Counters.Increment (Item.Counter);\n    end Reference;\n \n    ---------------------\n@@ -2082,15 +2070,14 @@ package body Ada.Strings.Unbounded is\n    -----------------\n \n    procedure Unreference (Item : not null Shared_String_Access) is\n-      use Interfaces;\n \n       procedure Free is\n         new Ada.Unchecked_Deallocation (Shared_String, Shared_String_Access);\n \n       Aux : Shared_String_Access := Item;\n \n    begin\n-      if Sync_Sub_And_Fetch (Aux.Counter'Access, 1) = 0 then\n+      if System.Atomic_Counters.Decrement (Aux.Counter) then\n \n          --  Reference counter of Empty_Shared_String must never reach zero\n "}, {"sha": "e952b8e849db76cd58c15707b07bd0b15d7ae3d1", "filename": "gcc/ada/a-strunb-shared.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-strunb-shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-strunb-shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.ads?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -70,7 +70,7 @@\n \n with Ada.Strings.Maps;\n private with Ada.Finalization;\n-private with Interfaces;\n+private with System.Atomic_Counters;\n \n package Ada.Strings.Unbounded is\n    pragma Preelaborate;\n@@ -430,7 +430,7 @@ private\n    package AF renames Ada.Finalization;\n \n    type Shared_String (Max_Length : Natural) is limited record\n-      Counter : aliased Interfaces.Unsigned_32 := 1;\n+      Counter : System.Atomic_Counters.Atomic_Counter;\n       --  Reference counter\n \n       Last : Natural := 0;"}, {"sha": "5ee93e85ff3aab206db1c759a0a49fc1b3a08b89", "filename": "gcc/ada/a-stwiun-shared.adb", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stwiun-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stwiun-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun-shared.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,16 +50,6 @@ package body Ada.Strings.Wide_Unbounded is\n    --  align the returned memory on the maximum alignment as malloc does not\n    --  know the target alignment.\n \n-   procedure Sync_Add_And_Fetch\n-     (Ptr   : access Interfaces.Unsigned_32;\n-      Value : Interfaces.Unsigned_32);\n-   pragma Import (Intrinsic, Sync_Add_And_Fetch, \"__sync_add_and_fetch_4\");\n-\n-   function Sync_Sub_And_Fetch\n-     (Ptr   : access Interfaces.Unsigned_32;\n-      Value : Interfaces.Unsigned_32) return Interfaces.Unsigned_32;\n-   pragma Import (Intrinsic, Sync_Sub_And_Fetch, \"__sync_sub_and_fetch_4\");\n-\n    function Aligned_Max_Length (Max_Length : Natural) return Natural;\n    --  Returns recommended length of the shared string which is greater or\n    --  equal to specified length. Calculation take in sense alignment of\n@@ -636,12 +626,10 @@ package body Ada.Strings.Wide_Unbounded is\n \n    function Can_Be_Reused\n      (Item   : Shared_Wide_String_Access;\n-      Length : Natural) return Boolean\n-   is\n-      use Interfaces;\n+      Length : Natural) return Boolean is\n    begin\n       return\n-        Item.Counter = 1\n+        System.Atomic_Counters.Is_One (Item.Counter)\n           and then Item.Max_Length >= Length\n           and then Item.Max_Length <=\n                      Aligned_Max_Length (Length + Length / Growth_Factor);\n@@ -1294,7 +1282,7 @@ package body Ada.Strings.Wide_Unbounded is\n \n    procedure Reference (Item : not null Shared_Wide_String_Access) is\n    begin\n-      Sync_Add_And_Fetch (Item.Counter'Access, 1);\n+      System.Atomic_Counters.Increment (Item.Counter);\n    end Reference;\n \n    ---------------------\n@@ -2100,7 +2088,6 @@ package body Ada.Strings.Wide_Unbounded is\n    -----------------\n \n    procedure Unreference (Item : not null Shared_Wide_String_Access) is\n-      use Interfaces;\n \n       procedure Free is\n         new Ada.Unchecked_Deallocation\n@@ -2109,7 +2096,7 @@ package body Ada.Strings.Wide_Unbounded is\n       Aux : Shared_Wide_String_Access := Item;\n \n    begin\n-      if Sync_Sub_And_Fetch (Aux.Counter'Access, 1) = 0 then\n+      if System.Atomic_Counters.Decrement (Aux.Counter) then\n \n          --  Reference counter of Empty_Shared_Wide_String must never reach\n          --  zero."}, {"sha": "feaad8ed4e5904ad0bc966e8bcfe9a20a396958b", "filename": "gcc/ada/a-stwiun-shared.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stwiun-shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stwiun-shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun-shared.ads?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -42,7 +42,7 @@\n \n with Ada.Strings.Wide_Maps;\n private with Ada.Finalization;\n-private with Interfaces;\n+private with System.Atomic_Counters;\n \n package Ada.Strings.Wide_Unbounded is\n    pragma Preelaborate;\n@@ -408,7 +408,7 @@ private\n    package AF renames Ada.Finalization;\n \n    type Shared_Wide_String (Max_Length : Natural) is limited record\n-      Counter : aliased Interfaces.Unsigned_32 := 1;\n+      Counter : System.Atomic_Counters.Atomic_Counter;\n       --  Reference counter.\n \n       Last    : Natural                        := 0;"}, {"sha": "18fe75b8c54e69fac9258c33364e9becd831f1fe", "filename": "gcc/ada/a-stzunb-shared.adb", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stzunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stzunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb-shared.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,16 +50,6 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n    --  align the returned memory on the maximum alignment as malloc does not\n    --  know the target alignment.\n \n-   procedure Sync_Add_And_Fetch\n-     (Ptr   : access Interfaces.Unsigned_32;\n-      Value : Interfaces.Unsigned_32);\n-   pragma Import (Intrinsic, Sync_Add_And_Fetch, \"__sync_add_and_fetch_4\");\n-\n-   function Sync_Sub_And_Fetch\n-     (Ptr   : access Interfaces.Unsigned_32;\n-      Value : Interfaces.Unsigned_32) return Interfaces.Unsigned_32;\n-   pragma Import (Intrinsic, Sync_Sub_And_Fetch, \"__sync_sub_and_fetch_4\");\n-\n    function Aligned_Max_Length (Max_Length : Natural) return Natural;\n    --  Returns recommended length of the shared string which is greater or\n    --  equal to specified length. Calculation take in sense alignment of\n@@ -638,12 +628,10 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n \n    function Can_Be_Reused\n      (Item   : Shared_Wide_Wide_String_Access;\n-      Length : Natural) return Boolean\n-   is\n-      use Interfaces;\n+      Length : Natural) return Boolean is\n    begin\n       return\n-        Item.Counter = 1\n+        System.Atomic_Counters.Is_One (Item.Counter)\n           and then Item.Max_Length >= Length\n           and then Item.Max_Length <=\n                      Aligned_Max_Length (Length + Length / Growth_Factor);\n@@ -1304,7 +1292,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n \n    procedure Reference (Item : not null Shared_Wide_Wide_String_Access) is\n    begin\n-      Sync_Add_And_Fetch (Item.Counter'Access, 1);\n+      System.Atomic_Counters.Increment (Item.Counter);\n    end Reference;\n \n    ---------------------\n@@ -2113,7 +2101,6 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n    -----------------\n \n    procedure Unreference (Item : not null Shared_Wide_Wide_String_Access) is\n-      use Interfaces;\n \n       procedure Free is\n         new Ada.Unchecked_Deallocation\n@@ -2122,7 +2109,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       Aux : Shared_Wide_Wide_String_Access := Item;\n \n    begin\n-      if Sync_Sub_And_Fetch (Aux.Counter'Access, 1) = 0 then\n+      if System.Atomic_Counters.Decrement (Aux.Counter) then\n \n          --  Reference counter of Empty_Shared_Wide_Wide_String must never\n          --  reach zero."}, {"sha": "6b4bb6c8789aaa67311803e9f48f75b19e724e9c", "filename": "gcc/ada/a-stzunb-shared.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stzunb-shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-stzunb-shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb-shared.ads?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -42,7 +42,7 @@\n \n with Ada.Strings.Wide_Wide_Maps;\n private with Ada.Finalization;\n-private with Interfaces;\n+private with System.Atomic_Counters;\n \n package Ada.Strings.Wide_Wide_Unbounded is\n    pragma Preelaborate;\n@@ -417,7 +417,7 @@ private\n    package AF renames Ada.Finalization;\n \n    type Shared_Wide_Wide_String (Max_Length : Natural) is limited record\n-      Counter : aliased Interfaces.Unsigned_32 := 1;\n+      Counter : System.Atomic_Counters.Atomic_Counter;\n       --  Reference counter.\n \n       Last    : Natural                        := 0;"}, {"sha": "4731bb909009beab4a7c904586561e4fcdbc4666", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -1010,12 +1010,8 @@ package body Ada.Tags is\n    --------------------\n \n    procedure Unregister_Tag (T : Tag) is\n-      TSD_Ptr : constant Addr_Ptr :=\n-                  To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n-      TSD     : constant Type_Specific_Data_Ptr :=\n-                  To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n    begin\n-      External_Tag_HTable.Remove (To_Address (TSD.External_Tag));\n+      External_Tag_HTable.Remove (Get_External_Tag (T));\n    end Unregister_Tag;\n \n    ------------------------"}, {"sha": "40499bc7c794a8c86ebbb8cbc1a138386a04627e", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 116, "deletions": 102, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -297,11 +297,9 @@ package body Exp_Ch7 is\n \n    function Build_Cleanup_Statements (N : Node_Id) return List_Id;\n    --  Create the clean up calls for an asynchronous call block, task master,\n-   --  protected subprogram body, task allocation block or task body. Generate\n-   --  code to unregister the external tags of all library-level tagged types\n-   --  found in the declarations and/or statements of N. If the context does\n-   --  not contain the above constructs or types, the routine returns an empty\n-   --  list.\n+   --  protected subprogram body, task allocation block or task body. If the\n+   --  context does not contain the above constructs, the routine returns an\n+   --  empty list.\n \n    function Build_Exception_Handler\n      (Loc         : Source_Ptr;\n@@ -489,11 +487,8 @@ package body Exp_Ch7 is\n       Is_Asynchronous_Call : constant Boolean :=\n                                Nkind (N) = N_Block_Statement\n                                  and then Is_Asynchronous_Call_Block (N);\n-\n       Is_Master            : constant Boolean :=\n-                               not Nkind_In (N, N_Entry_Body,\n-                                                N_Package_Body,\n-                                                N_Package_Declaration)\n+                               Nkind (N) /= N_Entry_Body\n                                  and then Is_Task_Master (N);\n       Is_Protected_Body    : constant Boolean :=\n                                Nkind (N) = N_Subprogram_Body\n@@ -507,59 +502,6 @@ package body Exp_Ch7 is\n       Loc   : constant Source_Ptr := Sloc (N);\n       Stmts : constant List_Id    := New_List;\n \n-      procedure Unregister_Tagged_Types (Decls : List_Id);\n-      --  Unregister the external tag of each tagged type found in the list\n-      --  Decls. The generated statements are added to list Stmts.\n-\n-      -----------------------------\n-      -- Unregister_Tagged_Types --\n-      -----------------------------\n-\n-      procedure Unregister_Tagged_Types (Decls : List_Id) is\n-         Decl   : Node_Id;\n-         DT_Ptr : Entity_Id;\n-         Typ    : Entity_Id;\n-\n-      begin\n-         if No (Decls) or else Is_Empty_List (Decls) then\n-            return;\n-         end if;\n-\n-         --  Process all declarations or statements in reverse order\n-\n-         Decl := Last_Non_Pragma (Decls);\n-         while Present (Decl) loop\n-            if Nkind (Decl) = N_Full_Type_Declaration then\n-               Typ := Defining_Identifier (Decl);\n-\n-               if Is_Tagged_Type (Typ)\n-                 and then Is_Library_Level_Entity (Typ)\n-                 and then Convention (Typ) = Convention_Ada\n-                 and then Present (Access_Disp_Table (Typ))\n-                 and then RTE_Available (RE_Unregister_Tag)\n-                 and then not No_Run_Time_Mode\n-                 and then not Is_Abstract_Type (Typ)\n-               then\n-                  DT_Ptr := Node (First_Elmt (Access_Disp_Table (Typ)));\n-\n-                  --  Generate:\n-                  --    Ada.Tags.Unregister_Tag (<Typ>P);\n-\n-                  Append_To (Stmts,\n-                    Make_Procedure_Call_Statement (Loc,\n-                      Name =>\n-                        New_Reference_To (RTE (RE_Unregister_Tag), Loc),\n-                      Parameter_Associations => New_List (\n-                        New_Reference_To (DT_Ptr, Loc))));\n-               end if;\n-            end if;\n-\n-            Prev_Non_Pragma (Decl);\n-         end loop;\n-      end Unregister_Tagged_Types;\n-\n-   --  Start of processing for Build_Cleanup_Statements\n-\n    begin\n       if Is_Task_Body then\n          if Restricted_Profile then\n@@ -770,26 +712,6 @@ package body Exp_Ch7 is\n          end;\n       end if;\n \n-      --  Inspect all declaration and/or statement lists of N for library-level\n-      --  tagged types. Generate code to unregister the external tag of such a\n-      --  type.\n-\n-      if Nkind (N) = N_Package_Declaration then\n-         Unregister_Tagged_Types (Private_Declarations (Specification (N)));\n-         Unregister_Tagged_Types (Visible_Declarations (Specification (N)));\n-\n-      --  Accept statement, block, entry body, package body, protected body,\n-      --  subprogram body or task body.\n-\n-      else\n-         if Present (Handled_Statement_Sequence (N)) then\n-            Unregister_Tagged_Types\n-              (Statements (Handled_Statement_Sequence (N)));\n-         end if;\n-\n-         Unregister_Tagged_Types (Declarations (N));\n-      end if;\n-\n       return Stmts;\n    end Build_Cleanup_Statements;\n \n@@ -1207,6 +1129,10 @@ package body Exp_Ch7 is\n       --  A general flag which denotes whether N has at least one controlled\n       --  object.\n \n+      Has_Tagged_Types : Boolean := False;\n+      --  A general flag which denotes whether N has at least one library-level\n+      --  tagged type declaration.\n+\n       HSS : Node_Id := Empty;\n       --  The sequence of statements of N (if available)\n \n@@ -1241,6 +1167,10 @@ package body Exp_Ch7 is\n       Spec_Decls : List_Id   := Top_Decls;\n       Stmts      : List_Id   := No_List;\n \n+      Tagged_Type_Stmts : List_Id := No_List;\n+      --  Contains calls to Ada.Tags.Unregister_Tag for all library-level\n+      --  tagged types found in N.\n+\n       -----------------------\n       -- Local subprograms --\n       -----------------------\n@@ -1272,6 +1202,10 @@ package body Exp_Ch7 is\n       --  where Decl does not have initialization call(s). Flag Is_Protected\n       --  is set when Decl denotes a simple protected object.\n \n+      procedure Process_Tagged_Type_Declaration (Decl : Node_Id);\n+      --  Generate all the code necessary to unregister the external tag of a\n+      --  tagged type.\n+\n       ----------------------\n       -- Build_Components --\n       ----------------------\n@@ -1378,6 +1312,10 @@ package body Exp_Ch7 is\n          else\n             Finalizer_Stmts := New_List;\n          end if;\n+\n+         if Has_Tagged_Types then\n+            Tagged_Type_Stmts := New_List;\n+         end if;\n       end Build_Components;\n \n       ----------------------\n@@ -1543,6 +1481,14 @@ package body Exp_Ch7 is\n             end if;\n          end if;\n \n+         --  Add the library-level tagged type unregistration machinery before\n+         --  the jump block circuitry. This ensures that external tags will be\n+         --  removed even if a finalization exception occurs at some point.\n+\n+         if Has_Tagged_Types then\n+            Prepend_List_To (Finalizer_Stmts, Tagged_Type_Stmts);\n+         end if;\n+\n          --  Add a call to the previous At_End handler if it exists. The call\n          --  must always precede the jump block.\n \n@@ -1784,17 +1730,36 @@ package body Exp_Ch7 is\n             Is_Protected : Boolean := False)\n          is\n          begin\n-            if Preprocess then\n-               Counter_Val   := Counter_Val + 1;\n-               Has_Ctrl_Objs := True;\n+            --  Library-level tagged type\n \n-               if Top_Level\n-                 and then No (Last_Top_Level_Ctrl_Construct)\n-               then\n-                  Last_Top_Level_Ctrl_Construct := Decl;\n+            if Nkind (Decl) = N_Full_Type_Declaration then\n+               if Preprocess then\n+                  Has_Tagged_Types := True;\n+\n+                  if Top_Level\n+                    and then No (Last_Top_Level_Ctrl_Construct)\n+                  then\n+                     Last_Top_Level_Ctrl_Construct := Decl;\n+                  end if;\n+               else\n+                  Process_Tagged_Type_Declaration (Decl);\n                end if;\n+\n+            --  Controlled object declaration\n+\n             else\n-               Process_Object_Declaration (Decl, Has_No_Init, Is_Protected);\n+               if Preprocess then\n+                  Counter_Val   := Counter_Val + 1;\n+                  Has_Ctrl_Objs := True;\n+\n+                  if Top_Level\n+                    and then No (Last_Top_Level_Ctrl_Construct)\n+                  then\n+                     Last_Top_Level_Ctrl_Construct := Decl;\n+                  end if;\n+               else\n+                  Process_Object_Declaration (Decl, Has_No_Init, Is_Protected);\n+               end if;\n             end if;\n          end Processing_Actions;\n \n@@ -1810,9 +1775,25 @@ package body Exp_Ch7 is\n          Decl := Last_Non_Pragma (Decls);\n          while Present (Decl) loop\n \n+            --  Library-level tagged types\n+\n+            if Nkind (Decl) = N_Full_Type_Declaration then\n+               Typ := Defining_Identifier (Decl);\n+\n+               if Is_Tagged_Type (Typ)\n+                 and then Is_Library_Level_Entity (Typ)\n+                 and then Convention (Typ) = Convention_Ada\n+                 and then Present (Access_Disp_Table (Typ))\n+                 and then RTE_Available (RE_Register_Tag)\n+                 and then not No_Run_Time_Mode\n+                 and then not Is_Abstract_Type (Typ)\n+               then\n+                  Processing_Actions;\n+               end if;\n+\n             --  Regular object declarations\n \n-            if Nkind (Decl) = N_Object_Declaration then\n+            elsif Nkind (Decl) = N_Object_Declaration then\n                Obj_Id  := Defining_Identifier (Decl);\n                Obj_Typ := Base_Type (Etype (Obj_Id));\n                Expr    := Expression (Decl);\n@@ -2687,12 +2668,33 @@ package body Exp_Ch7 is\n          Counter_Val := Counter_Val - 1;\n       end Process_Object_Declaration;\n \n+      -------------------------------------\n+      -- Process_Tagged_Type_Declaration --\n+      -------------------------------------\n+\n+      procedure Process_Tagged_Type_Declaration (Decl : Node_Id) is\n+         Typ    : constant Entity_Id := Defining_Identifier (Decl);\n+         DT_Ptr : constant Entity_Id :=\n+                    Node (First_Elmt (Access_Disp_Table (Typ)));\n+      begin\n+         --  Generate:\n+         --    Ada.Tags.Unregister_Tag (<Typ>P);\n+\n+         Append_To (Tagged_Type_Stmts,\n+           Make_Procedure_Call_Statement (Loc,\n+             Name =>\n+               New_Reference_To (RTE (RE_Unregister_Tag), Loc),\n+             Parameter_Associations => New_List (\n+               New_Reference_To (DT_Ptr, Loc))));\n+      end Process_Tagged_Type_Declaration;\n+\n    --  Start of processing for Build_Finalizer\n \n    begin\n       Fin_Id := Empty;\n \n-      --  Step 1: Extract all lists which may contain controlled objects\n+      --  Step 1: Extract all lists which may contain controlled objects or\n+      --  library-level tagged types.\n \n       if For_Package_Spec then\n          Decls      := Visible_Declarations (Specification (N));\n@@ -2772,15 +2774,19 @@ package body Exp_Ch7 is\n          --  cases, the finalizer must be created and carry the additional\n          --  statements.\n \n-         if Acts_As_Clean or else Has_Ctrl_Objs then\n+         if Acts_As_Clean\n+           or else Has_Ctrl_Objs\n+           or else Has_Tagged_Types\n+         then\n             Build_Components;\n          end if;\n \n-         --  The preprocessing has determined that the context has objects that\n-         --  need finalization actions.\n-\n-         if Has_Ctrl_Objs then\n+         --  The preprocessing has determined that the context has controlled\n+         --  objects or library-level tagged types.\n \n+         if Has_Ctrl_Objs\n+           or else Has_Tagged_Types\n+         then\n             --  Private declarations are processed first in order to preserve\n             --  possible dependencies between public and private objects.\n \n@@ -2814,19 +2820,27 @@ package body Exp_Ch7 is\n          --  cases, the finalizer must be created and carry the additional\n          --  statements.\n \n-         if Acts_As_Clean or else Has_Ctrl_Objs then\n+         if Acts_As_Clean\n+           or else Has_Ctrl_Objs\n+           or else Has_Tagged_Types\n+         then\n             Build_Components;\n          end if;\n \n-         if Has_Ctrl_Objs then\n+         if Has_Ctrl_Objs\n+           or else Has_Tagged_Types\n+         then\n             Process_Declarations (Stmts);\n             Process_Declarations (Decls);\n          end if;\n       end if;\n \n       --  Step 3: Finalizer creation\n \n-      if Acts_As_Clean or else Has_Ctrl_Objs then\n+      if Acts_As_Clean\n+        or else Has_Ctrl_Objs\n+        or else Has_Tagged_Types\n+      then\n          Create_Finalizer;\n       end if;\n    end Build_Finalizer;\n@@ -3830,7 +3844,7 @@ package body Exp_Ch7 is\n       if Ekind (Spec_Ent) /= E_Generic_Package then\n          Build_Finalizer\n            (N           => N,\n-            Clean_Stmts => Build_Cleanup_Statements (N),\n+            Clean_Stmts => No_List,\n             Mark_Id     => Empty,\n             Top_Decls   => No_List,\n             Defer_Abort => False,\n@@ -3954,7 +3968,7 @@ package body Exp_Ch7 is\n       if Ekind (Id) /= E_Generic_Package then\n          Build_Finalizer\n            (N           => N,\n-            Clean_Stmts => Build_Cleanup_Statements (N),\n+            Clean_Stmts => No_List,\n             Mark_Id     => Empty,\n             Top_Decls   => No_List,\n             Defer_Abort => False,"}, {"sha": "907c32add5ce4f5e5bedcedc419c1a14598474f5", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -25,6 +25,7 @@\n \n with Atree;    use Atree;\n with Einfo;    use Einfo;\n+with Errout;   use Errout;\n with Exp_Util; use Exp_Util;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n@@ -476,6 +477,15 @@ package body Exp_Strm is\n    begin\n       Check_Restriction (No_Default_Stream_Attributes, N);\n \n+      if Restriction_Active (No_Default_Stream_Attributes) then\n+         Error_Msg_NE\n+           (\"missing user-defined Input for type&\", N, Etype (Targ));\n+         if Nkind (Targ) = N_Selected_Component then\n+            Error_Msg_NE\n+              (\"\\which is a component of type&\", N, Etype (Prefix (Targ)));\n+         end if;\n+      end if;\n+\n       --  Check first for Boolean and Character. These are enumeration types,\n       --  but we treat them specially, since they may require special handling\n       --  in the transfer protocol. However, this special handling only applies\n@@ -686,6 +696,15 @@ package body Exp_Strm is\n    begin\n       Check_Restriction (No_Default_Stream_Attributes, N);\n \n+      if Restriction_Active (No_Default_Stream_Attributes) then\n+         Error_Msg_NE\n+           (\"missing user-defined Write for type&\", N, Etype (Item));\n+         if Nkind (Item) = N_Selected_Component then\n+            Error_Msg_NE\n+              (\"\\which is a component of type&\", N, Etype (Prefix (Item)));\n+         end if;\n+      end if;\n+\n       --  Compute the size of the stream element. This is either the size of\n       --  the first subtype or if given the size of the Stream_Size attribute.\n "}, {"sha": "f7f4ddb45fe8b8de7e59791e77a7adc9b6e90453", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 13, "deletions": 93, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -36,6 +36,7 @@ with Opt;         use Opt;\n with Osint;       use Osint;\n with Osint.L;     use Osint.L;\n with Output;      use Output;\n+with Prj.Env;     use Prj.Env;\n with Rident;      use Rident;\n with Sdefault;\n with Snames;\n@@ -47,20 +48,14 @@ with GNAT.Case_Util; use GNAT.Case_Util;\n procedure Gnatls is\n    pragma Ident (Gnat_Static_Version_String);\n \n-   Gpr_Project_Path : constant String := \"GPR_PROJECT_PATH\";\n-   Ada_Project_Path : constant String := \"ADA_PROJECT_PATH\";\n-   --  Names of the env. variables that contains path name(s) of directories\n-   --  where project files may reside. If GPR_PROJECT_PATH is defined, its\n-   --  value is used, otherwise ADA_PROJECT_PATH is used, if defined.\n-\n    --  NOTE : The following string may be used by other tools, such as GPS. So\n    --  it can only be modified if these other uses are checked and coordinated.\n \n    Project_Search_Path : constant String := \"Project Search Path:\";\n    --  Label displayed in verbose mode before the directories in the project\n    --  search path. Do not modify without checking NOTE above.\n \n-   No_Project_Default_Dir : constant String := \"-\";\n+   Prj_Path : Prj.Env.Project_Search_Path;\n \n    Max_Column : constant := 80;\n \n@@ -223,7 +218,7 @@ procedure Gnatls is\n       end if;\n    end Add_Lib_Dir;\n \n-   -- -----------------\n+   --------------------\n    -- Add_Source_Dir --\n    --------------------\n \n@@ -1614,27 +1609,16 @@ begin\n       Write_Str (\"   <Current_Directory>\");\n       Write_Eol;\n \n-      --  The code below reproduces Prj.Env.Initialize_Default_Project_Path,\n-      --  shouldn't we reuse that instead???\n+      Initialize_Default_Project_Path\n+        (Prj_Path, Target_Name => Sdefault.Target_Name.all);\n \n       declare\n-         Project_Path : String_Access := Getenv (Gpr_Project_Path);\n-\n-         Lib : constant String :=\n-                 Directory_Separator & \"lib\" & Directory_Separator;\n-\n-         First : Natural;\n-         Last  : Natural;\n-\n-         Add_Default_Dir : Boolean := True;\n-         Prefix_Name_Len : Integer;\n+         Project_Path : String_Access;\n+         First        : Natural;\n+         Last         : Natural;\n \n       begin\n-         --  If there is a project path, display each directory in the path\n-\n-         if Project_Path.all = \"\" then\n-            Project_Path := Getenv (Ada_Project_Path);\n-         end if;\n+         Get_Path (Prj_Path, Project_Path);\n \n          if Project_Path.all /= \"\" then\n             First := Project_Path'First;\n@@ -1654,87 +1638,23 @@ begin\n                   Last := Last + 1;\n                end loop;\n \n-               --  If the directory is No_Default_Project_Dir, set\n-               --  Add_Default_Dir to False.\n-\n-               if Project_Path (First .. Last) = No_Project_Default_Dir then\n-                  Add_Default_Dir := False;\n-\n-               elsif First /= Last or else Project_Path (First) /= '.' then\n+               if First /= Last or else Project_Path (First) /= '.' then\n \n                   --  If the directory is \".\", skip it as it is the current\n                   --  directory and it is already the first directory in the\n                   --  project path.\n \n                   Write_Str (\"   \");\n                   Write_Str\n-                    (To_Host_Dir_Spec\n-                       (Project_Path (First .. Last), True).all);\n+                    (Normalize_Pathname\n+                      (To_Host_Dir_Spec\n+                        (Project_Path (First .. Last), True).all));\n                   Write_Eol;\n                end if;\n \n                First := Last + 1;\n             end loop;\n          end if;\n-\n-         --  Add the default dir, except if \"-\" was one of the \"directories\"\n-         --  specified in ADA_PROJECT_DIR.\n-\n-         if Add_Default_Dir then\n-            Name_Len := 0;\n-            Add_Str_To_Name_Buffer (Sdefault.Search_Dir_Prefix.all);\n-\n-            --  On Windows, make sure that all directory separators are '\\'\n-\n-            if Directory_Separator /= '/' then\n-               for J in 1 .. Name_Len loop\n-                  if Name_Buffer (J) = '/' then\n-                     Name_Buffer (J) := Directory_Separator;\n-                  end if;\n-               end loop;\n-            end if;\n-\n-            --  Find the sequence \"/lib/\"\n-\n-            while Name_Len >= Lib'Length\n-              and then Name_Buffer (Name_Len - 4 .. Name_Len) /= Lib\n-            loop\n-               Name_Len := Name_Len - 1;\n-            end loop;\n-\n-            --  If the sequence \"/lib\"/ was found, display the default\n-            --  directories <prefix>/<target>/lib/gnat and <prefix>/lib/gnat/.\n-\n-            if Name_Len >= 5 then\n-               Prefix_Name_Len := Name_Len - 4;\n-\n-               Name_Len := Prefix_Name_Len;\n-\n-               Name_Len := Prefix_Name_Len;\n-               Add_Str_To_Name_Buffer (Sdefault.Target_Name.all);\n-               Name_Len := Name_Len - 1;\n-               Add_Str_To_Name_Buffer (Directory_Separator\n-                                       & \"lib\" & Directory_Separator\n-                                       & \"gnat\" & Directory_Separator);\n-               Write_Str (\"   \");\n-               Write_Line\n-                 (To_Host_Dir_Spec (Name_Buffer (1 .. Name_Len), True).all);\n-\n-               Name_Len := Prefix_Name_Len;\n-               Add_Str_To_Name_Buffer (\"share\" & Directory_Separator\n-                                       & \"gpr\" & Directory_Separator);\n-               Write_Str (\"   \");\n-               Write_Line\n-                 (To_Host_Dir_Spec (Name_Buffer (1 .. Name_Len), True).all);\n-\n-               Name_Len := Prefix_Name_Len;\n-               Add_Str_To_Name_Buffer (\"lib\" & Directory_Separator\n-                                       & \"gnat\" & Directory_Separator);\n-               Write_Str (\"   \");\n-               Write_Line\n-                 (To_Host_Dir_Spec (Name_Buffer (1 .. Name_Len), True).all);\n-            end if;\n-         end if;\n       end;\n \n       Write_Eol;"}, {"sha": "38ef24a202bc6e85d56cf73b79b91a63644b1125", "filename": "gcc/ada/s-atocou.adb", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fs-atocou.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fs-atocou.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou.adb?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -0,0 +1,74 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--               S Y S T E M . A T O M I C _ C O U N T E R S                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                       Copyright (C) 2011, AdaCore                        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides implementation of atomic counter for platforms where\n+--  GCC supports __sync_add_and_fetch_4 and __sync_sub_and_fetch_4 builtins.\n+\n+package body System.Atomic_Counters is\n+\n+   procedure Sync_Add_And_Fetch\n+     (Ptr   : access Unsigned_32;\n+      Value : Unsigned_32);\n+   pragma Import (Intrinsic, Sync_Add_And_Fetch, \"__sync_add_and_fetch_4\");\n+\n+   function Sync_Sub_And_Fetch\n+     (Ptr   : access Unsigned_32;\n+      Value : Unsigned_32) return Unsigned_32;\n+   pragma Import (Intrinsic, Sync_Sub_And_Fetch, \"__sync_sub_and_fetch_4\");\n+\n+   ---------------\n+   -- Decrement --\n+   ---------------\n+\n+   function Decrement (Item : in out Atomic_Counter) return Boolean is\n+   begin\n+      return Sync_Sub_And_Fetch (Item.Value'Access, 1) = 0;\n+   end Decrement;\n+\n+   ---------------\n+   -- Increment --\n+   ---------------\n+\n+   procedure Increment (Item : in out Atomic_Counter) is\n+   begin\n+      Sync_Add_And_Fetch (Item.Value'Access, 1);\n+   end Increment;\n+\n+   ------------\n+   -- Is_One --\n+   ------------\n+\n+   function Is_One (Item : Atomic_Counter) return Boolean is\n+   begin\n+      return Item.Value = 1;\n+   end Is_One;\n+\n+end System.Atomic_Counters;"}, {"sha": "20ef9e501441ba6a87ab92002d7304df48df57ad", "filename": "gcc/ada/s-atocou.ads", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fs-atocou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e7e1a05d9a120305dcc16b8908cd70439b4dd3/gcc%2Fada%2Fs-atocou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou.ads?ref=26e7e1a05d9a120305dcc16b8908cd70439b4dd3", "patch": "@@ -0,0 +1,70 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--               S Y S T E M . A T O M I C _ C O U N T E R S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                       Copyright (C) 2011, AdaCore                        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides atomic counter on platforms where it is supported.\n+\n+package System.Atomic_Counters is\n+\n+   pragma Preelaborate;\n+\n+   type Atomic_Counter is limited private;\n+   --  Type for atomic counter objects. Note, initial value of the counter is\n+   --  one. This allows to use atomic counter as member of record types when\n+   --  object of these types are created at library level on preelaboratable\n+   --  compilation units.\n+   --\n+   --  Atomic counter is declared as private limited type to provide highest\n+   --  level of protection from unexpected use. All available operations are\n+   --  declared below, and this set should be as small as possible.\n+\n+   procedure Increment (Item : in out Atomic_Counter);\n+   pragma Inline_Always (Increment);\n+   --  Increments value of atomic counter.\n+\n+   function Decrement (Item : in out Atomic_Counter) return Boolean;\n+   pragma Inline_Always (Decrement);\n+   --  Decrements value of atomic counter, returns True when value reach zero.\n+\n+   function Is_One (Item : Atomic_Counter) return Boolean;\n+   pragma Inline_Always (Is_One);\n+   --  Returns True when value of the atomic counter is one.\n+\n+private\n+\n+   type Unsigned_32 is mod 2 ** 32;\n+\n+   type Atomic_Counter is limited record\n+      Value : aliased Unsigned_32 := 1;\n+      pragma Atomic (Value);\n+      pragma Volatile (Value);\n+   end record;\n+\n+end System.Atomic_Counters;"}]}