{"sha": "f1c4b346ea2f42245bd6f45d5b2d274fc68224e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjNGIzNDZlYTJmNDIyNDViZDZmNDVkNWIyZDI3NGZjNjgyMjRlMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-19T18:44:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-19T18:44:24Z"}, "message": "compiler: add debugger-callable AST dump functins\n    \n    Introduce a set debug_go_* global functions that can be used to emit\n    AST dumps for Go statements and expressions from within GDB (for use\n    by people developing gccgo).\n    \n    Reviewed-on: https://go-review.googlesource.com/c/162903\n\nFrom-SVN: r269027", "tree": {"sha": "5734f47a51d96f5089458c79ead736bbe8f46e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5734f47a51d96f5089458c79ead736bbe8f46e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3/comments", "author": null, "committer": null, "parents": [{"sha": "e8350f09ab8413b550fa3fa1720d1e5038eb5277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8350f09ab8413b550fa3fa1720d1e5038eb5277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8350f09ab8413b550fa3fa1720d1e5038eb5277"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "12dd965b7489826a249482c459e38ec292618187", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f1c4b346ea2f42245bd6f45d5b2d274fc68224e3", "patch": "@@ -1,4 +1,4 @@\n-fe0382eabbf1e8b148dc8cb7733348bd9d887e10\n+08cd59a502127da776e076a8a37016a668ef27fa\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9b4d708062340e2d99b7d87151f67c3d03d665ac", "filename": "gcc/go/gofrontend/ast-dump.cc", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4b346ea2f42245bd6f45d5b2d274fc68224e3/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc?ref=f1c4b346ea2f42245bd6f45d5b2d274fc68224e3", "patch": "@@ -482,7 +482,7 @@ Ast_dump_context::write_string(const std::string& s)\n   this->ostream() << s;\n }\n \n-// Dump statment to stream.\n+// Dump statement to stream.\n \n void\n Ast_dump_context::dump_to_stream(const Statement* stm, std::ostream* out)\n@@ -499,3 +499,84 @@ Ast_dump_context::dump_to_stream(const Expression* expr, std::ostream* out)\n   Ast_dump_context adc(out, false);\n   expr->dump_expression(&adc);\n }\n+\n+// Dump an expression to std::cerr. This is intended to be used\n+// from within a debugging session.\n+\n+void\n+debug_go_expression(const Expression* expr)\n+{\n+  if (expr == NULL)\n+    std::cerr << \"<null>\";\n+  else\n+    {\n+      Ast_dump_context::dump_to_stream(expr, &std::cerr);\n+      std::string lstr = Linemap::location_to_string(expr->location());\n+      std::cerr << \" // loc \" << lstr << std::endl;\n+    }\n+}\n+\n+// Shallow dump of stmt to std::cerr. This is intended to be used\n+// from within a debugging session.\n+\n+void\n+debug_go_statement(const Statement* stmt)\n+{\n+  if (stmt == NULL)\n+    std::cerr << \"<null>\\n\";\n+  else\n+    {\n+      std::string lstr = Linemap::location_to_string(stmt->location());\n+      Statement *ncstmt = const_cast<Statement*>(stmt);\n+      Block_statement* bs = ncstmt->block_statement();\n+      if (bs != NULL)\n+        std::cerr << \"Block \" << bs->block()\n+                  << \" // location: \" << lstr << std::endl;\n+      else\n+        Ast_dump_context::dump_to_stream(stmt, &std::cerr);\n+    }\n+}\n+\n+// Deep dump of statement to std::cerr. This is intended to be used\n+// from within a debugging session.\n+\n+void\n+debug_go_statement_deep(const Statement* statement)\n+{\n+  Ast_dump_context adc(&std::cerr, true);\n+  statement->dump_statement(&adc);\n+}\n+\n+// Shallow dump of a block to std::cerr. This is intended to be used\n+// from within a debugging session.\n+\n+void\n+debug_go_block(const Block* block)\n+{\n+  if (block == NULL)\n+    std::cerr << \"<null>\";\n+  else\n+    {\n+      std::cerr << \"Block \" << block\n+                << \" (enclosing \" << block->enclosing() << \"):\\n\";\n+      const std::vector<Statement*>* stmts = block->statements();\n+      if (stmts != NULL)\n+        {\n+          for (size_t i = 0; i < stmts->size(); ++i)\n+            {\n+              debug_go_statement(stmts->at(i));\n+            }\n+        }\n+    }\n+}\n+\n+// Deep dump of a block to std:cerr. This is intended to be used\n+// from within a debugging session.\n+\n+void\n+debug_go_block_deep(const Block* block)\n+{\n+  Ast_dump_context adc(&std::cerr, true);\n+  Block* ncblock = const_cast<Block*>(block);\n+  adc.dump_block(ncblock);\n+}"}]}