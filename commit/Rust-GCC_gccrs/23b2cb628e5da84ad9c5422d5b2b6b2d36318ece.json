{"sha": "23b2cb628e5da84ad9c5422d5b2b6b2d36318ece", "node_id": "C_kwDOANBUbNoAKDIzYjJjYjYyOGU1ZGE4NGFkOWM1NDIyZDViMmI2YjJkMzYzMThlY2U", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-03T16:15:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-03T22:45:47Z"}, "message": "analyzer: fix zero-fill of calloc\n\nIt turned out that the analyzer wasn't treating calloc regions\nas zero-filled, due to binding_cluster::fill_region getting an\nunknown value for the byte_size_size_sval, and thus\nget_or_create_repeated_svalue returning an unknown_svalue, which\nwas then used to fill the region.\n\nFixed thusly.\n\ngcc/analyzer/ChangeLog:\n\t* region-model-impl-calls.cc (region_model::impl_call_calloc): Use\n\ta sized_region when calling zero_fill_region.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/calloc-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "e337440e61db4833506c34e0b5694b5e8574cd44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e337440e61db4833506c34e0b5694b5e8574cd44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a668ec0339c28b0725ded1e80d3276edb76b8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a668ec0339c28b0725ded1e80d3276edb76b8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a668ec0339c28b0725ded1e80d3276edb76b8b3"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "779d94388e9fdfd2a4838ed057d9656068fa1b01", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=23b2cb628e5da84ad9c5422d5b2b6b2d36318ece", "patch": "@@ -373,7 +373,9 @@ region_model::impl_call_calloc (const call_details &cd)\n \t\t\t\t  nmemb_sval, size_sval);\n   const region *new_reg\n     = create_region_for_heap_alloc (prod_sval, cd.get_ctxt ());\n-  zero_fill_region (new_reg);\n+  const region *sized_reg\n+    = m_mgr->get_sized_region (new_reg, NULL_TREE, prod_sval);\n+  zero_fill_region (sized_reg);\n   if (cd.get_lhs_type ())\n     {\n       const svalue *ptr_sval"}, {"sha": "bc28128671f9cad40f421b054d1409266beac371", "filename": "gcc/testsuite/gcc.dg/analyzer/calloc-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b2cb628e5da84ad9c5422d5b2b6b2d36318ece/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcalloc-1.c?ref=23b2cb628e5da84ad9c5422d5b2b6b2d36318ece", "patch": "@@ -0,0 +1,27 @@\n+#include \"analyzer-decls.h\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#define NULL ((void *)0)\n+\n+extern void *calloc (size_t __nmemb, size_t __size)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__malloc__))\n+  __attribute__ ((__alloc_size__ (1, 2))) ;\n+\n+char *test_1 (size_t sz)\n+{\n+  char *p;\n+\n+  p = calloc (1, 3);\n+  if (!p)\n+    return NULL;\n+\n+  __analyzer_dump_capacity (p); /* { dg-warning \"capacity: '\\\\(\\[^\\n\\r\\]*\\\\)3'\" } */\n+\n+  __analyzer_eval (p[0] == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (p[1] == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (p[2] == 0); /* { dg-warning \"TRUE\" } */\n+\n+  return p;\n+}"}]}