{"sha": "67635176a2a643036f86c55cba8bcf79f56821a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2MzUxNzZhMmE2NDMwMzZmODZjNTVjYmE4YmNmNzlmNTY4MjFhNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-30T15:23:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-30T15:23:39Z"}, "message": "tree-ssa-dce.c (mark_all_reaching_defs_necessary_1): Always continue walking.\n\n2009-06-30  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1): Always\n\tcontinue walking.\n\t(propagate_necessity): Do not mark reaching defs of stores\n\tas necessary.\n\n\t* gcc.dg/tree-ssa/ssa-dce-6.c: New testcase.\n\nFrom-SVN: r149103", "tree": {"sha": "a545660a88ba18ccce1692e097184bf0f4994b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a545660a88ba18ccce1692e097184bf0f4994b56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67635176a2a643036f86c55cba8bcf79f56821a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67635176a2a643036f86c55cba8bcf79f56821a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67635176a2a643036f86c55cba8bcf79f56821a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67635176a2a643036f86c55cba8bcf79f56821a5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca89096d931f77c58dc19bce88e2a2eff04df6da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca89096d931f77c58dc19bce88e2a2eff04df6da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca89096d931f77c58dc19bce88e2a2eff04df6da"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "4cb0958839e7a97a16c907dff07e7028152e1bc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67635176a2a643036f86c55cba8bcf79f56821a5", "patch": "@@ -1,3 +1,10 @@\n+2009-06-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1): Always\n+\tcontinue walking.\n+\t(propagate_necessity): Do not mark reaching defs of stores\n+\tas necessary.\n+\n 2009-06-30  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgloopanal.c (check_irred): Move into ..."}, {"sha": "a7548d5f7af3b8a2caab1a8fe5a45fb3aad18403", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67635176a2a643036f86c55cba8bcf79f56821a5", "patch": "@@ -1,3 +1,7 @@\n+2009-06-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-dce-6.c: New testcase.\n+\n 2009-06-30  Wei Guozhi  <carrot@google.com>\n \n \t* gcc.dg/tree-ssa/ssa-sink-5.c: Change the compiler option \"-O2 -Os\""}, {"sha": "30a06a102560c4564c9922ec45c0be9e479a3b0d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-6.c?ref=67635176a2a643036f86c55cba8bcf79f56821a5", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+\n+struct object { int field; };\n+void o(struct object *);\n+int globl;\n+void t(int x)\n+{\n+  struct object a, b;\n+  struct object *p;\n+  o(&a);\n+  if (x)\n+    p = &a;\n+  else\n+    p = &b;\n+  p->field = 1;\n+  globl = 0;\n+  return;\n+}\n+\n+/* The global store should not prevent deleting the store to p->field.  */\n+\n+/* { dg-final { scan-tree-dump-not \"p_.->field\" \"cddce1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}, {"sha": "8522c5c5797a094e3a10a565d0e7995009991b7f", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67635176a2a643036f86c55cba8bcf79f56821a5/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=67635176a2a643036f86c55cba8bcf79f56821a5", "patch": "@@ -550,9 +550,9 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n \treturn false;\n     }\n \n-  /* But can stop after the first necessary statement.  */\n   mark_operand_necessary (vdef);\n-  return true;\n+\n+  return false;\n }\n \n static void\n@@ -671,18 +671,15 @@ propagate_necessity (struct edge_list *el)\n \t     For 1) we mark all reaching may-defs as necessary, stopping\n \t     at dominating kills.  For 2) we want to mark all dominating\n \t     references necessary, but non-aliased ones which we handle\n-\t     in 1).  Instead of doing so for each load we rely on the\n-\t     worklist to eventually reach all dominating references and\n-\t     instead just mark the immediately dominating references\n-\t     as necessary (but skipping non-aliased ones).  */\n+\t     in 1).  By keeping a global visited bitmap for references\n+\t     we walk for 2) we avoid quadratic behavior for those.  */\n \n \t  if (is_gimple_call (stmt))\n \t    {\n \t      unsigned i;\n \n \t      /* Calls implicitly load from memory, their arguments\n-\t         in addition may explicitly perform memory loads.\n-\t\t This also ensures propagation for case 2 for stores.  */\n+\t         in addition may explicitly perform memory loads.  */\n \t      mark_all_reaching_defs_necessary (stmt);\n \t      for (i = 0; i < gimple_call_num_args (stmt); ++i)\n \t\t{\n@@ -696,7 +693,7 @@ propagate_necessity (struct edge_list *el)\n \t    }\n \t  else if (gimple_assign_single_p (stmt))\n \t    {\n-\t      tree lhs, rhs;\n+\t      tree rhs;\n \t      bool rhs_aliased = false;\n \t      /* If this is a load mark things necessary.  */\n \t      rhs = gimple_assign_rhs1 (stmt);\n@@ -708,12 +705,7 @@ propagate_necessity (struct edge_list *el)\n \t\t  else\n \t\t    rhs_aliased = true;\n \t\t}\n-\t      /* If this is an aliased store, mark things necessary.\n-\t\t This is where we make sure to propagate for case 2.  */\n-\t      lhs = gimple_assign_lhs (stmt);\n-\t      if (rhs_aliased\n-\t\t  || (TREE_CODE (lhs) != SSA_NAME\n-\t\t      && ref_may_be_aliased (lhs)))\n+\t      if (rhs_aliased)\n \t\tmark_all_reaching_defs_necessary (stmt);\n \t    }\n \t  else if (gimple_code (stmt) == GIMPLE_RETURN)"}]}