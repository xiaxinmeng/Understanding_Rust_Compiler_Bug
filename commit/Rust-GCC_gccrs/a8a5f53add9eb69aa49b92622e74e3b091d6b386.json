{"sha": "a8a5f53add9eb69aa49b92622e74e3b091d6b386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhNWY1M2FkZDllYjY5YWE0OWI5MjYyMmU3NGUzYjA5MWQ2YjM4Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-12-23T17:55:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-12-23T17:55:33Z"}, "message": "common.opt (fprofile-generate,fprofile-use): Add.\n\n\n\t* common.opt (fprofile-generate,fprofile-use): Add.\n\t* gcc.c (LINK_COMMAND_SPEC): Arrange -fprofile-generate to imply -lgcov\n\t* opts.c (profile_arc_flag_set, flag_profile_values_set,\n\tflag_unroll_loops_set, flag_tracer_set,\n\tflag_value_profile_transformations_set,\n\tflag_peel_loops_set): New static variables.\n\t(common_handle_option): Deal with -fprofile-generate/-fprofile-use\n\t* invoke.texi (-fprofile-generate, -fprofile-use): Describe.\n\nFrom-SVN: r74976", "tree": {"sha": "a3f9b4f94640a92d66ad7856e0e19eb1b7435ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f9b4f94640a92d66ad7856e0e19eb1b7435ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8a5f53add9eb69aa49b92622e74e3b091d6b386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a5f53add9eb69aa49b92622e74e3b091d6b386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a5f53add9eb69aa49b92622e74e3b091d6b386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a5f53add9eb69aa49b92622e74e3b091d6b386/comments", "author": null, "committer": null, "parents": [{"sha": "57702a80e805859260710953242bf87c08f5c410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57702a80e805859260710953242bf87c08f5c410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57702a80e805859260710953242bf87c08f5c410"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "eada3ded3a9f46a64d549b2dfb996475919ae1bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8a5f53add9eb69aa49b92622e74e3b091d6b386", "patch": "@@ -1,3 +1,14 @@\n+2003-12-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* common.opt (fprofile-generate,fprofile-use): Add.\n+\t* gcc.c (LINK_COMMAND_SPEC): Arrange -fprofile-generate to imply -lgcov\n+\t* opts.c (profile_arc_flag_set, flag_profile_values_set,\n+\tflag_unroll_loops_set, flag_tracer_set,\n+\tflag_value_profile_transformations_set,\n+\tflag_peel_loops_set): New static variables.\n+\t(common_handle_option): Deal with -fprofile-generate/-fprofile-use\n+\t* invoke.texi (-fprofile-generate, -fprofile-use): Describe.\n+\n 2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.c (flag_abi_version): Default to 2."}, {"sha": "265241df844788c71ae377dab9619325cb80e7b1", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a8a5f53add9eb69aa49b92622e74e3b091d6b386", "patch": "@@ -513,6 +513,14 @@ fprofile-arcs\n Common\n Insert arc-based program profiling code\n \n+fprofile-generate\n+Common\n+Enable common options for generating profile info for profile feedback directed optimizations\n+\n+fprofile-use\n+Common\n+Enable common options for performing profile feedback directed optimizations\n+\n fprofile-values\n Common\n Insert code to profile values of expressions"}, {"sha": "88e8c67e688d6f8fd5211448857523c3e9d47e38", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a8a5f53add9eb69aa49b92622e74e3b091d6b386", "patch": "@@ -281,6 +281,7 @@ in the following sections.\n -fno-trapping-math  -fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n -foptimize-sibling-calls  -fprefetch-loop-arrays @gol\n+-fprofile-generate -fprofile-use @gol\n -freduce-all-givs  -fregmove  -frename-registers @gol\n -freorder-blocks  -freorder-functions @gol\n -frerun-cse-after-loop  -frerun-loop-opt @gol\n@@ -4377,6 +4378,21 @@ and occasionally eliminate the copy.\n \n Disabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n+@item -fprofile-generate\n+@opindex fprofile-generate\n+Enable options usually used for instrumenting application to produce profile usefull\n+for later recompilation profile feedback based optimization.\n+\n+The following options are enabled: @code{-fprofile-arcs}, @code{-fprofile-values}, @code{-fvpt}\n+\n+@item -fprofile-use\n+@opindex fprofile-use\n+Enable profile feedback directed optimizations, and optimizations\n+generally profitable only with profile feedback available.\n+\n+The following options are enabled: @code{-fbranch-probabilities},\n+@code{-fvpt}, @code{-funroll-loops}, @code{-fpeel-loops}, @code{-ftracer}.\n+\n @end table\n \n The following options control compiler behavior regarding floating"}, {"sha": "bc6d4c4235bc49ff815e265ca711974b16ab2509", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a8a5f53add9eb69aa49b92622e74e3b091d6b386", "patch": "@@ -677,7 +677,7 @@ proper position among the other output files.  */\n %{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n     %(linker) %l \" LINK_PIE_SPEC \"%X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r}\\\n     %{s} %{t} %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n-    %{static:} %{L*} %(link_libgcc) %o %{fprofile-arcs:-lgcov}\\\n+    %{static:} %{L*} %(link_libgcc) %o %{fprofile-arcs|fprofile-generate:-lgcov}\\\n     %{!nostdlib:%{!nodefaultlibs:%(link_gcc_c_sequence)}}\\\n     %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n #endif"}, {"sha": "43cc25d5a893326a6c9428dcc0dec50b25dbdeaf", "filename": "gcc/opts.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f53add9eb69aa49b92622e74e3b091d6b386/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a8a5f53add9eb69aa49b92622e74e3b091d6b386", "patch": "@@ -148,6 +148,13 @@ static unsigned int columns = 80;\n /* What to print when a switch has no documentation.  */\n static const char undocumented_msg[] = N_(\"This switch lacks documentation\");\n \n+/* Used for bookkeeping on whether user set these flags so\n+   -fprofile-use/-fprofile-generate does not use them.  */\n+static bool profile_arc_flag_set, flag_profile_values_set;\n+static bool flag_unroll_loops_set, flag_tracer_set;\n+static bool flag_value_profile_transformations_set;\n+static bool flag_peel_loops_set, flag_branch_probabilities_set;\n+\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n@@ -882,6 +889,7 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_fbranch_probabilities:\n+      flag_branch_probabilities_set = true;\n       flag_branch_probabilities = value;\n       break;\n \n@@ -1135,6 +1143,7 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_fpeel_loops:\n+      flag_peel_loops_set = true;\n       flag_peel_loops = value;\n       break;\n \n@@ -1167,14 +1176,41 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_fprofile_arcs:\n+      profile_arc_flag_set = true;\n       profile_arc_flag = value;\n       break;\n \n+    case OPT_fprofile_use:\n+      if (!flag_branch_probabilities_set)\n+        flag_branch_probabilities = value;\n+      if (!flag_profile_values_set)\n+        flag_profile_values = value;\n+      if (!flag_unroll_loops_set)\n+        flag_unroll_loops = value;\n+      if (!flag_peel_loops_set)\n+        flag_peel_loops = value;\n+      if (!flag_tracer_set)\n+        flag_tracer = value;\n+      if (!flag_value_profile_transformations_set)\n+        flag_value_profile_transformations = value;\n+      break;\n+\n+    case OPT_fprofile_generate:\n+      if (!profile_arc_flag_set)\n+        profile_arc_flag = value;\n+      if (!flag_profile_values_set)\n+        flag_profile_values = value;\n+      if (!flag_value_profile_transformations_set)\n+        flag_value_profile_transformations = value;\n+      break;\n+\n     case OPT_fprofile_values:\n+      flag_profile_values_set = true;\n       flag_profile_values = value;\n       break;\n \n     case OPT_fvpt:\n+      flag_value_profile_transformations_set = value;\n       flag_value_profile_transformations = value;\n       break;\n \n@@ -1358,6 +1394,7 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_ftracer:\n+      flag_tracer_set = true;\n       flag_tracer = value;\n       break;\n \n@@ -1378,6 +1415,7 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_funroll_loops:\n+      flag_unroll_loops_set = true;\n       flag_unroll_loops = value;\n       break;\n "}]}