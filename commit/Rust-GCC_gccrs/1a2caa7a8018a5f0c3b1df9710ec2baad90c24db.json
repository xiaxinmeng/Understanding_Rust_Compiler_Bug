{"sha": "1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyY2FhN2E4MDE4YTVmMGMzYjFkZjk3MTBlYzJiYWFkOTBjMjRkYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-09T15:58:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-09T15:58:21Z"}, "message": "cgraphunit.c (cgraph_mark_functions_to_output): Renable node dumping for development builds.\n\n\t* cgraphunit.c (cgraph_mark_functions_to_output): Renable node\n\tdumping for development builds.\n\t* emit-rtl.c (verify_rtx_sharing): Give verbose failure for\n\tdevelopment builds only.\n\t* genattrtab.c (write_eligible_delay): Fix typo in previous\n\tcommit.\n\t* tree.c (iterative_hash_expr): Replace gcc_unreachable with\n\tgcc_assert.\n\nFrom-SVN: r87241", "tree": {"sha": "c4ffa2ad3dad1e3ec528b5e2c71f6e4281357d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4ffa2ad3dad1e3ec528b5e2c71f6e4281357d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/comments", "author": null, "committer": null, "parents": [{"sha": "282899df0fb5881ddaf70814d095286221d6019e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282899df0fb5881ddaf70814d095286221d6019e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/282899df0fb5881ddaf70814d095286221d6019e"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "b1ec626275881e7aae8e3f018f980a56d78f5066", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "patch": "@@ -1,3 +1,14 @@\n+2004-09-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cgraphunit.c (cgraph_mark_functions_to_output): Renable node\n+\tdumping for development builds.\n+\t* emit-rtl.c (verify_rtx_sharing): Give verbose failure for\n+\tdevelopment builds only.\n+\t* genattrtab.c (write_eligible_delay): Fix typo in previous\n+\tcommit.\n+\t* tree.c (iterative_hash_expr): Replace gcc_unreachable with\n+\tgcc_assert.\n+\n 2004-09-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcse.c (INSN_CUID, insert_set_in_table, find_avail_set,"}, {"sha": "d0048a837316872521c059493ab4af9a034ab56b", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "patch": "@@ -776,9 +776,21 @@ cgraph_mark_functions_to_output (void)\n \t  && !DECL_EXTERNAL (decl))\n \tnode->output = 1;\n       else\n-\t/* We should've reclaimed all functions that are not needed.  */\n-\tgcc_assert (node->global.inlined_to || !DECL_SAVED_TREE (decl)\n-\t\t    || DECL_EXTERNAL (decl));\n+\t{\n+\t  /* We should've reclaimed all functions that are not needed.  */\n+#ifdef ENABLE_CHECKING\n+\t  if (!node->global.inlined_to && DECL_SAVED_TREE (decl)\n+\t      && !DECL_EXTERNAL (decl))\n+\t    {\n+\t      dump_cgraph_node (stderr, node);\n+\t      internal_error (\"failed to reclaim unneeded function\");\n+\t    }\n+#endif\n+\t  gcc_assert (node->global.inlined_to || !DECL_SAVED_TREE (decl)\n+\t\t      || DECL_EXTERNAL (decl));\n+\n+\t}\n+      \n     }\n }\n "}, {"sha": "ab721fe8aa7de71b25ef7afae9e41f7336368ee7", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "patch": "@@ -2260,15 +2260,18 @@ verify_rtx_sharing (rtx orig, rtx insn)\n \n   /* This rtx may not be shared.  If it has already been seen,\n      replace it with a copy of itself.  */\n-\n+#ifdef ENABLE_CHECKING\n   if (RTX_FLAG (x, used))\n     {\n       error (\"Invalid rtl sharing found in the insn\");\n       debug_rtx (insn);\n       error (\"Shared rtx\");\n       debug_rtx (x);\n-      fatal_error (\"Internal consistency failure\");\n+      internal_error (\"Internal consistency failure\");\n     }\n+#endif\n+  gcc_assert (!RTX_FLAG (x, used));\n+  \n   RTX_FLAG (x, used) = 1;\n \n   /* Now scan the subexpressions recursively.  */\n@@ -2291,9 +2294,11 @@ verify_rtx_sharing (rtx orig, rtx insn)\n \n \t      for (j = 0; j < len; j++)\n \t\t{\n-\t\t  /* We allow sharing of ASM_OPERANDS inside single instruction.  */\n+\t\t  /* We allow sharing of ASM_OPERANDS inside single\n+\t\t     instruction.  */\n \t\t  if (j && GET_CODE (XVECEXP (x, i, j)) == SET\n-\t\t      && GET_CODE (SET_SRC (XVECEXP (x, i, j))) == ASM_OPERANDS)\n+\t\t      && (GET_CODE (SET_SRC (XVECEXP (x, i, j)))\n+\t\t\t  == ASM_OPERANDS))\n \t\t    verify_rtx_sharing (SET_DEST (XVECEXP (x, i, j)), insn);\n \t\t  else\n \t\t    verify_rtx_sharing (XVECEXP (x, i, j), insn);"}, {"sha": "dc8ff6ebcb31b8c2aede80cca12152b50f1555d6", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "patch": "@@ -4125,7 +4125,7 @@ write_eligible_delay (const char *kind)\n   printf (\"{\\n\");\n   printf (\"  rtx insn;\\n\");\n   printf (\"\\n\");\n-  printf (\"  gcc_assert (slot < %d)\\n\", max_slots);\n+  printf (\"  gcc_assert (slot < %d);\\n\", max_slots);\n   printf (\"\\n\");\n   /* Allow dbr_schedule to pass labels, etc.  This can happen if try_split\n      converts a compound instruction into a loop.  */"}, {"sha": "c7031e16cbef604be89fc0a928286b96ce800628", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2caa7a8018a5f0c3b1df9710ec2baad90c24db/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1a2caa7a8018a5f0c3b1df9710ec2baad90c24db", "patch": "@@ -4044,8 +4044,10 @@ iterative_hash_expr (tree t, hashval_t val)\n \t  /* Decls we can just compare by pointer.  */\n \t  val = iterative_hash_pointer (t, val);\n \t}\n-      else if (IS_EXPR_CODE_CLASS (class))\n+      else\n \t{\n+\t  gcc_assert (IS_EXPR_CODE_CLASS (class));\n+\t  \n \t  val = iterative_hash_object (code, val);\n \n \t  /* Don't hash the type, that can lead to having nodes which\n@@ -4080,8 +4082,6 @@ iterative_hash_expr (tree t, hashval_t val)\n \t    for (i = first_rtl_op (code) - 1; i >= 0; --i)\n \t      val = iterative_hash_expr (TREE_OPERAND (t, i), val);\n \t}\n-      else\n-\tgcc_unreachable ();\n       return val;\n       break;\n     }"}]}