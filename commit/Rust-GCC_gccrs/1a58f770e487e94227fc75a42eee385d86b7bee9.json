{"sha": "1a58f770e487e94227fc75a42eee385d86b7bee9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1OGY3NzBlNDg3ZTk0MjI3ZmM3NWE0MmVlZTM4NWQ4NmI3YmVlOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-30T13:21:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-30T13:21:44Z"}, "message": "tree-vectorizer.h (struct _stmt_vec_info): Add reduc_type and reduc_def fields.\n\n2017-05-30  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (struct _stmt_vec_info): Add reduc_type\n\tand reduc_def fields.\n\t(STMT_VINFO_REDUC_TYPE): New define.\n\t(STMT_VINFO_REDUC_DEF): Likewise.\n\t(vect_force_simple_reduction): Adjust prototype.\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Adjust.\n\t(vect_is_simple_reduction): Remove check_reduction argument.\n\t(vect_force_simple_reduction): Adjust and set\n\tSTMT_VINFO_REDUC_TYPE and STMT_VINFO_REDUC_DEF.\n\t(vectorizable_reduction): Do not re-do reduction analysis\n\tbut use STMT_VINFO_REDUC_TYPE and STMT_VINFO_REDUC_DEF.\n\t* tree-parloops.c (gather_scalar_reductions): Adjust.\n\nFrom-SVN: r248685", "tree": {"sha": "4e4f65b56f2fb31fbf9f45cfc35923077d3fce2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e4f65b56f2fb31fbf9f45cfc35923077d3fce2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a58f770e487e94227fc75a42eee385d86b7bee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a58f770e487e94227fc75a42eee385d86b7bee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a58f770e487e94227fc75a42eee385d86b7bee9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a58f770e487e94227fc75a42eee385d86b7bee9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b2edf5314c7c8d69f2e38c1ce5aaf381a230b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2edf5314c7c8d69f2e38c1ce5aaf381a230b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2edf5314c7c8d69f2e38c1ce5aaf381a230b96"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "8598574542c4d967ab8eb2fd8bf7e93444f878c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a58f770e487e94227fc75a42eee385d86b7bee9", "patch": "@@ -1,3 +1,18 @@\n+2017-05-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Add reduc_type\n+\tand reduc_def fields.\n+\t(STMT_VINFO_REDUC_TYPE): New define.\n+\t(STMT_VINFO_REDUC_DEF): Likewise.\n+\t(vect_force_simple_reduction): Adjust prototype.\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Adjust.\n+\t(vect_is_simple_reduction): Remove check_reduction argument.\n+\t(vect_force_simple_reduction): Adjust and set\n+\tSTMT_VINFO_REDUC_TYPE and STMT_VINFO_REDUC_DEF.\n+\t(vectorizable_reduction): Do not re-do reduction analysis\n+\tbut use STMT_VINFO_REDUC_TYPE and STMT_VINFO_REDUC_DEF.\n+\t* tree-parloops.c (gather_scalar_reductions): Adjust.\n+\n 2017-05-30  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/80901"}, {"sha": "641f675edf749c97ad6940174718b360ee794477", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=1a58f770e487e94227fc75a42eee385d86b7bee9", "patch": "@@ -2543,7 +2543,7 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n \tcontinue;\n \n       gimple *reduc_stmt\n-\t= vect_force_simple_reduction (simple_loop_info, phi, true,\n+\t= vect_force_simple_reduction (simple_loop_info, phi,\n \t\t\t\t       &double_reduc, true);\n       if (!reduc_stmt)\n \tcontinue;\n@@ -2589,7 +2589,7 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n \n \t      gimple *inner_reduc_stmt\n \t\t= vect_force_simple_reduction (simple_loop_info, inner_phi,\n-\t\t\t\t\t       true, &double_reduc, true);\n+\t\t\t\t\t       &double_reduc, true);\n \t      gcc_assert (!double_reduc);\n \t      if (inner_reduc_stmt == NULL)\n \t\tcontinue;"}, {"sha": "3133a968d69c690bc86edc80a05205ed18a6fb0d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1a58f770e487e94227fc75a42eee385d86b7bee9", "patch": "@@ -844,7 +844,6 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n       tree def = PHI_RESULT (phi);\n       stmt_vec_info stmt_vinfo = vinfo_for_stmt (phi);\n       gimple *reduc_stmt;\n-      bool nested_cycle;\n \n       if (dump_enabled_p ())\n         {\n@@ -855,8 +854,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n       gcc_assert (!virtual_operand_p (def)\n \t\t  && STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n \n-      nested_cycle = (loop != LOOP_VINFO_LOOP (loop_vinfo));\n-      reduc_stmt = vect_force_simple_reduction (loop_vinfo, phi, !nested_cycle,\n+      reduc_stmt = vect_force_simple_reduction (loop_vinfo, phi,\n \t\t\t\t\t\t&double_reduc, false);\n       if (reduc_stmt)\n         {\n@@ -872,7 +870,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n             }\n           else\n             {\n-              if (nested_cycle)\n+              if (loop != LOOP_VINFO_LOOP (loop_vinfo))\n                 {\n                   if (dump_enabled_p ())\n                     dump_printf_loc (MSG_NOTE, vect_location,\n@@ -2633,7 +2631,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n }\n \n \n-/* Function vect_is_simple_reduction_1\n+/* Function vect_is_simple_reduction\n \n    (1) Detect a cross-iteration def-use cycle that represents a simple\n    reduction computation.  We look for the following pattern:\n@@ -2652,7 +2650,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \n    such that:\n    1. operation is commutative and associative and it is safe to\n-      change the order of the computation (if CHECK_REDUCTION is true)\n+      change the order of the computation\n    2. no uses for a2 in the loop (a2 is used out of the loop)\n    3. no uses of a1 in the loop besides the reduction operation\n    4. no uses of a1 outside the loop.\n@@ -2661,7 +2659,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n    Conditions 2,3 are tested in vect_mark_stmts_to_be_vectorized.\n \n    (2) Detect a cross-iteration def-use cycle in nested loops, i.e.,\n-   nested cycles, if CHECK_REDUCTION is false.\n+   nested cycles.\n \n    (3) Detect cycles of phi nodes in outer-loop vectorization, i.e., double\n    reductions:\n@@ -2679,7 +2677,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \n static gimple *\n vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n-\t\t\t  bool check_reduction, bool *double_reduc,\n+\t\t\t  bool *double_reduc,\n \t\t\t  bool need_wrapping_integral_overflow,\n \t\t\t  enum vect_reduction_type *v_reduc_type)\n {\n@@ -2700,8 +2698,8 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n   *double_reduc = false;\n   *v_reduc_type = TREE_CODE_REDUCTION;\n \n-  /* If CHECK_REDUCTION is true, we assume inner-most loop vectorization,\n-     otherwise, we assume outer loop vectorization.  */\n+  /* Check validity of the reduction only for the innermost loop.  */\n+  bool check_reduction = ! flow_loop_nested_p (vect_loop, loop);\n   gcc_assert ((check_reduction && loop == vect_loop)\n               || (!check_reduction && flow_loop_nested_p (vect_loop, loop)));\n \n@@ -3120,20 +3118,26 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n   return NULL;\n }\n \n-/* Wrapper around vect_is_simple_reduction_1, which will modify code\n+/* Wrapper around vect_is_simple_reduction, which will modify code\n    in-place if it enables detection of more reductions.  Arguments\n    as there.  */\n \n gimple *\n vect_force_simple_reduction (loop_vec_info loop_info, gimple *phi,\n-\t\t\t     bool check_reduction, bool *double_reduc,\n+\t\t\t     bool *double_reduc,\n \t\t\t     bool need_wrapping_integral_overflow)\n {\n   enum vect_reduction_type v_reduc_type;\n-  return vect_is_simple_reduction (loop_info, phi, check_reduction,\n-\t\t\t\t   double_reduc,\n-\t\t\t\t   need_wrapping_integral_overflow,\n-\t\t\t\t   &v_reduc_type);\n+  gimple *def = vect_is_simple_reduction (loop_info, phi, double_reduc,\n+\t\t\t\t\t  need_wrapping_integral_overflow,\n+\t\t\t\t\t  &v_reduc_type);\n+  if (def)\n+    {\n+      stmt_vec_info reduc_def_info = vinfo_for_stmt (phi);\n+      STMT_VINFO_REDUC_TYPE (reduc_def_info) = v_reduc_type;\n+      STMT_VINFO_REDUC_DEF (reduc_def_info) = def;\n+    }\n+  return def;\n }\n \n /* Calculate cost of peeling the loop PEEL_ITERS_PROLOGUE times.  */\n@@ -5501,7 +5505,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   tree ops[3];\n   bool nested_cycle = false, found_nested_cycle_def = false;\n   gimple *reduc_def_stmt = NULL;\n-  bool double_reduc = false, dummy;\n+  bool double_reduc = false;\n   basic_block def_bb;\n   struct loop * def_stmt_loop, *outer_loop = NULL;\n   tree def_arg;\n@@ -5702,10 +5706,10 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       return false;\n     }\n \n-  enum vect_reduction_type v_reduc_type;\n-  gimple *tmp = vect_is_simple_reduction (loop_vinfo, reduc_def_stmt,\n-\t\t\t\t\t  !nested_cycle, &dummy, false,\n-\t\t\t\t\t  &v_reduc_type);\n+  stmt_vec_info reduc_def_info = vinfo_for_stmt (reduc_def_stmt);\n+  enum vect_reduction_type v_reduc_type\n+    = STMT_VINFO_REDUC_TYPE (reduc_def_info);\n+  gimple *tmp = STMT_VINFO_REDUC_DEF (reduc_def_info);\n \n   STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = v_reduc_type;\n   /* If we have a condition reduction, see if we can simplify it further.  */"}, {"sha": "a7f5c6e6f1369bc8fc0f8a331bdf37f7dbea3ba8", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a58f770e487e94227fc75a42eee385d86b7bee9/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=1a58f770e487e94227fc75a42eee385d86b7bee9", "patch": "@@ -643,6 +643,13 @@ typedef struct _stmt_vec_info {\n   /* For CONST_COND_REDUCTION, record the reduc code.  */\n   enum tree_code const_cond_reduc_code;\n \n+  /* On a reduction PHI the reduction type as detected by\n+     vect_force_simple_reduction.  */\n+  enum vect_reduction_type reduc_type;\n+\n+  /* On a reduction PHI the def returned by vect_force_simple_reduction.  */\n+  gimple *reduc_def;\n+\n   /* The number of scalar stmt references from active SLP instances.  */\n   unsigned int num_slp_uses;\n } *stmt_vec_info;\n@@ -722,6 +729,8 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_PART(S) (S)->loop_phi_evolution_part\n #define STMT_VINFO_MIN_NEG_DIST(S)\t(S)->min_neg_dist\n #define STMT_VINFO_NUM_SLP_USES(S)\t(S)->num_slp_uses\n+#define STMT_VINFO_REDUC_TYPE(S)\t(S)->reduc_type\n+#define STMT_VINFO_REDUC_DEF(S)\t\t(S)->reduc_def\n \n #define GROUP_FIRST_ELEMENT(S)          (S)->first_element\n #define GROUP_NEXT_ELEMENT(S)           (S)->next_element\n@@ -1137,7 +1146,7 @@ extern tree vect_create_addr_base_for_vector_ref (gimple *, gimple_seq *,\n /* In tree-vect-loop.c.  */\n /* FORNOW: Used in tree-parloops.c.  */\n extern void destroy_loop_vec_info (loop_vec_info, bool);\n-extern gimple *vect_force_simple_reduction (loop_vec_info, gimple *, bool,\n+extern gimple *vect_force_simple_reduction (loop_vec_info, gimple *,\n \t\t\t\t\t    bool *, bool);\n /* Drive for loop analysis stage.  */\n extern loop_vec_info vect_analyze_loop (struct loop *, loop_vec_info);"}]}