{"sha": "26c691a88b8a403e7a92ce049368cc7efe3567ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZjNjkxYTg4YjhhNDAzZTdhOTJjZTA0OTM2OGNjN2VmZTM1NjdjZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-05-22T23:46:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-05-22T23:46:34Z"}, "message": "re PR libstdc++/12854 (libstdc++ vs. -Weffc++)\n\n\n2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/12854\n\tFixups for -Weffc++.\n\t* include/bits/basic_string.h (basic_string::operator=): Return\n\tpointer to this instead of result of assign. Although redundant,\n\tthis doesn't impact resultant codegen.\n\n\t* include/bits/locale_facets.h (__numpunct_cache): Declare\n\tassignment opxserator and copy constructor private.\n\t(__timepunct_cache): Same.\n\t(__moneypunct_cache): Same.\n\t(collate): Use member initialization list for _M_c_locale_collate.\n\t* config/locale/gnu/messages_members.h: Same.\n\t* config/locale/gnu/time_members.h (__timepunct): Same.\n\t* src/codecvt.cc: Use member initialization list to initialize\n\t_M_c_locale_codecvt.\n\t* src/ctype.cc: Same, with _M_c_locale_ctype and _M_narrow_ok.\n\t* config/os/gnu-linux/ctype_noninline.h: Same.\n\t* src/locale.cc (_Impl): Same.\n\t* src/locale_init.cc: Same.\n\t* src/localename.cc: Same.\n\n\t* include/bits/basic_ios.h (basic_ios): Complete member\n\tinitialization list.\n\t* include/bits/istream.tcc (basic_istream::sentry): Same.\n\t* include/bits/ostream.tcc (basic_ostream::sentry): Same.\n\t* include/bits/fstream.tcc (basic_filebuf): Add _M_lock and\n\t_M_pback to member initialization list.\n\t* include/std/std_streambuf.h: Same.\n\t* include/std/std_sstream.h: Same, for _M_mode.\n\t* src/ios.cc (ios_base): Same.\n\n\t* include/ext/rope: Make derived classes match exception\n\n\t specifications. Add copy constructors and assignment operators.\n\n\t* include/debug/safe_base.h (_Safe_sequence_base): Declare copy\n\tconstructor and assignment operator protected.\n\t(_Safe_iterator_base): Same.\n\t* include/debug/formatter.h (_Error_formatter): Define copy\n\tconstructor and assignment operator.\n\n\t* include/backward/strstream: Declare assignment operator and copy\n\tconstructor private.\n\nFrom-SVN: r82153", "tree": {"sha": "4eb79935bc90f022040e5aed4af6bec9bdfa0b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eb79935bc90f022040e5aed4af6bec9bdfa0b5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26c691a88b8a403e7a92ce049368cc7efe3567ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c691a88b8a403e7a92ce049368cc7efe3567ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c691a88b8a403e7a92ce049368cc7efe3567ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c691a88b8a403e7a92ce049368cc7efe3567ce/comments", "author": null, "committer": null, "parents": [{"sha": "d6dc556b315b8e1b99922eda0319548ecb5233e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6dc556b315b8e1b99922eda0319548ecb5233e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6dc556b315b8e1b99922eda0319548ecb5233e9"}], "stats": {"total": 437, "additions": 283, "deletions": 154}, "files": [{"sha": "9f31df188075dd4b235cdb30abb6a71e8ffcd249", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,3 +1,49 @@\n+2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/12854\n+\tFixups for -Weffc++.\t\n+\t* include/bits/basic_string.h (basic_string::operator=): Return\n+\tpointer to this instead of result of assign. Although redundant,\n+\tthis doesn't impact resultant codegen.\n+\t\n+\t* include/bits/locale_facets.h (__numpunct_cache): Declare\n+\tassignment opxserator and copy constructor private.\n+\t(__timepunct_cache): Same.\n+\t(__moneypunct_cache): Same.\n+\t(collate): Use member initialization list for _M_c_locale_collate.\n+\t* config/locale/gnu/messages_members.h: Same.\n+\t* config/locale/gnu/time_members.h (__timepunct): Same.\t\n+\t* src/codecvt.cc: Use member initialization list to initialize\n+\t_M_c_locale_codecvt.\t\n+\t* src/ctype.cc: Same, with _M_c_locale_ctype and _M_narrow_ok.\n+\t* config/os/gnu-linux/ctype_noninline.h: Same.\n+\t* src/locale.cc (_Impl): Same.\n+\t* src/locale_init.cc: Same.\n+\t* src/localename.cc: Same.\t\n+\n+\t* include/bits/basic_ios.h (basic_ios): Complete member\n+\tinitialization list.\n+\t* include/bits/istream.tcc (basic_istream::sentry): Same.\n+\t* include/bits/ostream.tcc (basic_ostream::sentry): Same.\n+\t* include/bits/fstream.tcc (basic_filebuf): Add _M_lock and\n+\t_M_pback to member initialization list.\n+\t* include/std/std_streambuf.h: Same.\n+\t* include/std/std_sstream.h: Same, for _M_mode.\n+\t* src/ios.cc (ios_base): Same.\n+\t\n+\t* include/ext/rope: Make derived classes match exception\n+\n+\t specifications. Add copy constructors and assignment operators.\n+\n+\t* include/debug/safe_base.h (_Safe_sequence_base): Declare copy\n+\tconstructor and assignment operator protected.\n+\t(_Safe_iterator_base): Same.\n+\t* include/debug/formatter.h (_Error_formatter): Define copy\n+\tconstructor and assignment operator.\n+\n+\t* include/backward/strstream: Declare assignment operator and copy\n+\tconstructor private.\n+\n 2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/testsuite_hooks.h (func_callback): Declare copy"}, {"sha": "a7cd1cd02de05e6f0da4cf52ae9ef6c2d56c984e", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -36,26 +36,19 @@\n   // Non-virtual member functions.\n   template<typename _CharT>\n      messages<_CharT>::messages(size_t __refs)\n-     : facet(__refs)\n-     {  \n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n-       _M_name_messages = _S_get_c_name();\n-#endif\n-       _M_c_locale_messages = _S_get_c_locale(); \n-     }\n+     : facet(__refs), _M_c_locale_messages(_S_get_c_locale()), \n+     _M_name_messages(_S_get_c_name())\n+     { }\n \n   template<typename _CharT>\n-     messages<_CharT>::messages(__c_locale __cloc, \n-\t\t\t\tconst char* __s __attribute__ ((__unused__)), \n+     messages<_CharT>::messages(__c_locale __cloc, const char* __s, \n \t\t\t\tsize_t __refs) \n-     : facet(__refs)\n+     : facet(__refs), _M_c_locale_messages(_S_clone_c_locale(__cloc)),\n+     _M_name_messages(__s)\n      {\n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)) \n        char* __tmp = new char[std::strlen(__s) + 1];\n        std::strcpy(__tmp, __s);\n        _M_name_messages = __tmp;\n-#endif\n-       _M_c_locale_messages = _S_clone_c_locale(__cloc); \n      }\n \n   template<typename _CharT>\n@@ -71,10 +64,8 @@\n   template<typename _CharT>\n     messages<_CharT>::~messages()\n     { \n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n       if (_M_name_messages != _S_get_c_name())\n \tdelete [] _M_name_messages;\n-#endif\n       _S_destroy_c_locale(_M_c_locale_messages); \n     }\n \n@@ -99,16 +90,15 @@\n      messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)\n      : messages<_CharT>(__refs) \n      { \n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n        if (this->_M_name_messages != locale::facet::_S_get_c_name())\n \t delete [] this->_M_name_messages;\n        char* __tmp = new char[std::strlen(__s) + 1];\n        std::strcpy(__tmp, __s);\n        this->_M_name_messages = __tmp;\n-#endif\n-\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n-\t  {\n-\t    this->_S_destroy_c_locale(this->_M_c_locale_messages);\n-\t    this->_S_create_c_locale(this->_M_c_locale_messages, __s); \n-\t  }\n+\n+       if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t {\n+\t   this->_S_destroy_c_locale(this->_M_c_locale_messages);\n+\t   this->_S_create_c_locale(this->_M_c_locale_messages, __s); \n+\t }\n      }"}, {"sha": "9cb3594ca07fe820b4db7eba5621b6e898d79676", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,45 +36,33 @@\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(size_t __refs) \n-    : facet(__refs), _M_data(NULL)\n-    { \n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n-      _M_name_timepunct = _S_get_c_name();\n-#endif\n-      _M_initialize_timepunct(); \n-    }\n+    : facet(__refs), _M_data(NULL), _M_c_locale_timepunct(NULL), \n+    _M_name_timepunct(_S_get_c_name())\n+    { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs) \n-    : facet(__refs), _M_data(__cache)\n-    { \n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n-      _M_name_timepunct = _S_get_c_name();\n-#endif\n-      _M_initialize_timepunct(); \n-    }\n+    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(NULL), \n+    _M_name_timepunct(_S_get_c_name())\n+    { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n-    __timepunct<_CharT>::__timepunct(__c_locale __cloc, \n-\t\t\t\t const char* __s __attribute__ ((__unused__)), \n+    __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,\n \t\t\t\t     size_t __refs) \n-    : facet(__refs), _M_data(NULL)\n+    : facet(__refs), _M_data(NULL), _M_c_locale_timepunct(NULL), \n+    _M_name_timepunct(__s)\n     { \n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n       char* __tmp = new char[std::strlen(__s) + 1];\n       std::strcpy(__tmp, __s);\n       _M_name_timepunct = __tmp;\n-#endif\n       _M_initialize_timepunct(__cloc); \n     }\n \n   template<typename _CharT>\n     __timepunct<_CharT>::~__timepunct()\n     { \n-#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n       if (_M_name_timepunct != _S_get_c_name())\n \tdelete [] _M_name_timepunct;\n-#endif\n       delete _M_data; \n       _S_destroy_c_locale(_M_c_locale_timepunct); \n     }"}, {"sha": "925a5d0122f8815b937caa2596677c0401fd816e", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -59,21 +59,21 @@\n #if _GLIBCXX_C_LOCALE_GNU\n   ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del)\n+  : facet(__refs), _M_c_locale_ctype(_S_clone_c_locale(__cloc)), \n+  _M_del(__table != 0 && __del), \n+  _M_toupper(_M_c_locale_ctype->__ctype_toupper),  \n+  _M_tolower(_M_c_locale_ctype->__ctype_tolower), \n+  _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b), \n+  _M_widen_ok(0), _M_narrow_ok(0) \n   {\n-    _M_c_locale_ctype = _S_clone_c_locale(__cloc);\n-    _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n-    _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n-    _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n     memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n   }\n #else\n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del)\n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     char* __old=strdup(setlocale(LC_CTYPE, NULL));\n     setlocale(LC_CTYPE, \"C\");\n@@ -88,30 +88,27 @@\n #endif\n     setlocale(LC_CTYPE, __old);\n     free(__old);\n-    _M_c_locale_ctype = _S_get_c_locale();\n     memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n   }\n #endif\n \n #if _GLIBCXX_C_LOCALE_GNU\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del)\n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  _M_del(__table != 0 && __del),\n+  _M_toupper(_M_c_locale_ctype->__ctype_toupper),  \n+  _M_tolower(_M_c_locale_ctype->__ctype_tolower), \n+  _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b), \n+  _M_widen_ok(0), _M_narrow_ok(0) \n   {\n-    _M_c_locale_ctype = _S_get_c_locale(); \n-    _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n-    _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n-    _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n     memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n   }\n #else\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del)\n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     char* __old=strdup(setlocale(LC_CTYPE, NULL));\n     setlocale(LC_CTYPE, \"C\");\n@@ -126,11 +123,8 @@\n #endif\n     setlocale(LC_CTYPE, __old);\n     free(__old);\n-    _M_c_locale_ctype = _S_get_c_locale();\n     memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n   }\n #endif\n "}, {"sha": "a5b95c5e4e996f964808fe3cd8c1927ae7b54d2c", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,6 +1,6 @@\n // Backward-compat support -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -98,6 +98,11 @@ namespace std\n \t\t\t     = ios_base::in | ios_base::out);\n \n   private:\n+    strstreambuf&\n+    operator=(const strstreambuf&);\n+\n+    strstreambuf(const strstreambuf&);\n+\n     // Dynamic allocation, possibly using _M_alloc_fun and _M_free_fun.\n     char* _M_alloc(size_t);\n     void  _M_free(char*);"}, {"sha": "7ffe40ef16603ebeff5cb7b8649d954cd8bbe4e6", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -254,7 +254,8 @@ namespace std\n       */\n       explicit\n       basic_ios(basic_streambuf<_CharT, _Traits>* __sb)\n-      : ios_base(), _M_ctype(0), _M_num_put(0), _M_num_get(0)\n+      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),\n+      _M_ctype(0), _M_num_put(0), _M_num_get(0)\n       { this->init(__sb); }\n \n       /**\n@@ -440,7 +441,9 @@ namespace std\n        *  The default constructor does nothing and is not normally\n        *  accessible to users.\n       */\n-      basic_ios() : ios_base(), _M_ctype(0), _M_num_put(0), _M_num_get(0)\n+      basic_ios()\n+      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), \n+      _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)\n       { }\n \n       /**"}, {"sha": "16fe5ac384b9b4c740fd58c516b57b6584647031", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -418,14 +418,22 @@ namespace std\n        *  @param  str  Source string.\n        */\n       basic_string&\n-      operator=(const basic_string& __str) { return this->assign(__str); }\n+      operator=(const basic_string& __str) \n+      { \n+\tthis->assign(__str); \n+\treturn *this;\n+      }\n \n       /**\n        *  @brief  Copy contents of @a s into this string.\n        *  @param  s  Source null-terminated string.\n        */\n       basic_string&\n-      operator=(const _CharT* __s) { return this->assign(__s); }\n+      operator=(const _CharT* __s) \n+      { \n+\tthis->assign(__s); \n+\treturn *this;\n+      }\n \n       /**\n        *  @brief  Set value to string of length 1.\n@@ -435,7 +443,11 @@ namespace std\n        *  (*this)[0] == @a c.\n        */\n       basic_string&\n-      operator=(_CharT __c) { return this->assign(1, __c); }\n+      operator=(_CharT __c) \n+      { \n+\tthis->assign(1, __c); \n+\treturn *this;\n+      }\n \n       // Iterators:\n       /**"}, {"sha": "6c2e1822adb0d0d19f1725e8f496ffa5034ad872", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -73,10 +73,10 @@ namespace std\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n-    basic_filebuf() : __streambuf_type(), _M_file(&_M_lock),\n+    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),\n     _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),\n     _M_state_last(), _M_buf(NULL), _M_buf_size(BUFSIZ),\n-    _M_buf_allocated(false), _M_reading(false), _M_writing(false),\n+    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(), \n     _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),\n     _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),\n     _M_ext_end(0)"}, {"sha": "52deb6eda4f6eb4603b06570511fd773117b9d5c", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -44,22 +44,22 @@ namespace std\n {\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>::sentry::\n-    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskipws)\n+    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)\n     {\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       if (__in.good())\n \t{\n \t  if (__in.tie())\n \t    __in.tie()->flush();\n-\t  if (!__noskipws && (__in.flags() & ios_base::skipws))\n+\t  if (!__noskip && (__in.flags() & ios_base::skipws))\n \t    {\n \t      const __int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = __in.rdbuf();\n \t      __int_type __c = __sb->sgetc();\n \n \t      const __ctype_type& __ct = __check_facet(__in._M_ctype);\n \t      while (!traits_type::eq_int_type(__c, __eof)\n-\t\t     && __ct.is(ctype_base::space,\n+\t\t     && __ct.is(ctype_base::space, \n \t\t\t\ttraits_type::to_char_type(__c)))\n \t\t__c = __sb->snextc();\n \n@@ -75,7 +75,6 @@ namespace std\n \t_M_ok = true;\n       else\n \t{\n-\t  _M_ok = false;\n \t  __err |= ios_base::failbit;\n \t  __in.setstate(__err);\n \t}"}, {"sha": "374834292f41d44069861902a9bb3d02b8337a44", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -416,7 +416,7 @@ namespace std\n \n     facet(const facet&);  // Not defined.\n \n-    void\n+    facet&\n     operator=(const facet&);  // Not defined.\n   };\n "}, {"sha": "60db8a45f2618b14f4a5f4cde0a8b480464f7e24", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1624,6 +1624,13 @@ namespace std\n \n       void\n       _M_cache(const locale& __loc);\n+\n+    private:\n+      __numpunct_cache&\n+      operator=(const __numpunct_cache&);\n+      \n+      explicit\n+      __numpunct_cache(const __numpunct_cache&);\n     };\n \n   template<typename _CharT>\n@@ -2487,8 +2494,8 @@ namespace std\n       */\n       explicit\n       collate(size_t __refs = 0)\n-      : facet(__refs)\n-      { _M_c_locale_collate = _S_get_c_locale(); }\n+      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())\n+      { }\n \n       /**\n        *  @brief  Internal constructor. Not for general use.\n@@ -2501,8 +2508,8 @@ namespace std\n       */\n       explicit\n       collate(__c_locale __cloc, size_t __refs = 0)\n-      : facet(__refs)\n-      { _M_c_locale_collate = _S_clone_c_locale(__cloc); }\n+      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))\n+      { }\n \n       /**\n        *  @brief  Compare two strings.\n@@ -2757,6 +2764,13 @@ namespace std\n \n       void\n       _M_cache(const locale& __loc);\n+\n+    private:\n+      __timepunct_cache&\n+      operator=(const __timepunct_cache&);\n+      \n+      explicit\n+      __timepunct_cache(const __timepunct_cache&);\n     };\n \n   template<typename _CharT>\n@@ -3493,6 +3507,13 @@ namespace std\n \n       void\n       _M_cache(const locale& __loc);\n+\n+    private:\n+      __moneypunct_cache&\n+      operator=(const __moneypunct_cache&);\n+      \n+      explicit\n+      __moneypunct_cache(const __moneypunct_cache&);\n     };\n \n   template<typename _CharT, bool _Intl>"}, {"sha": "2d1b5b419cfc6d3573f89f320bf0078e8118efa5", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -44,7 +44,7 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>::sentry::\n     sentry(basic_ostream<_CharT, _Traits>& __os)\n-    : _M_os(__os)\n+    : _M_ok(false), _M_os(__os)\n     {\n       // XXX MT\n       if (__os.tie() && __os.good())\n@@ -53,10 +53,7 @@ namespace std\n       if (__os.good())\n \t_M_ok = true;\n       else\n-\t{\n-\t  _M_ok = false;\n-\t  __os.setstate(ios_base::failbit);\n-\t}\n+\t__os.setstate(ios_base::failbit);\n     }\n \n   template<typename _CharT, typename _Traits>"}, {"sha": "9b5fb1bbab94955f5514fa89c9d74bdbed3f9e8f", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -189,15 +189,17 @@ namespace __gnu_debug\n \t} _M_string;\n       } _M_variant;\n \n-      _Parameter() : _M_kind(__unused_param) { }\n+      _Parameter() : _M_kind(__unused_param), _M_variant() { }\n \n-      _Parameter(long __value, const char* __name) : _M_kind(__integer)\n+      _Parameter(long __value, const char* __name) \n+      : _M_kind(__integer), _M_variant()\n       {\n \t_M_variant._M_integer._M_name = __name;\n \t_M_variant._M_integer._M_value = __value;\n       }\n \n-      _Parameter(const char* __value, const char* __name) : _M_kind(__string)\n+      _Parameter(const char* __value, const char* __name) \n+      : _M_kind(__string), _M_variant()\n       {\n \t_M_variant._M_string._M_name = __name;\n \t_M_variant._M_string._M_value = __value;\n@@ -206,7 +208,7 @@ namespace __gnu_debug\n       template<typename _Iterator, typename _Sequence>\n         _Parameter(const _Safe_iterator<_Iterator, _Sequence>& __it,\n \t\t   const char* __name, _Is_iterator)\n-\t: _M_kind(__iterator)\n+\t: _M_kind(__iterator),  _M_variant()\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n@@ -235,7 +237,7 @@ namespace __gnu_debug\n \n       template<typename _Type>\n         _Parameter(const _Type*& __it, const char* __name, _Is_iterator)\n-\t: _M_kind(__iterator)\n+        : _M_kind(__iterator), _M_variant()\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n@@ -248,7 +250,7 @@ namespace __gnu_debug\n \n       template<typename _Type>\n         _Parameter(_Type*& __it, const char* __name, _Is_iterator)\n-        : _M_kind(__iterator)\n+        : _M_kind(__iterator), _M_variant()\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n@@ -261,7 +263,7 @@ namespace __gnu_debug\n \n       template<typename _Iterator>\n         _Parameter(const _Iterator& __it, const char* __name, _Is_iterator)\n-\t: _M_kind(__iterator)\n+        : _M_kind(__iterator), _M_variant()\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n@@ -276,7 +278,7 @@ namespace __gnu_debug\n       template<typename _Sequence>\n         _Parameter(const _Safe_sequence<_Sequence>& __seq,\n \t\t   const char* __name, _Is_sequence)\n-\t: _M_kind(__sequence)\n+        : _M_kind(__sequence), _M_variant()\n         {\n \t  _M_variant._M_sequence._M_name = __name;\n \t  _M_variant._M_sequence._M_address =\n@@ -286,7 +288,7 @@ namespace __gnu_debug\n \n       template<typename _Sequence>\n         _Parameter(const _Sequence& __seq, const char* __name, _Is_sequence)\n-\t: _M_kind(__sequence)\n+        : _M_kind(__sequence), _M_variant()\n         {\n \t  _M_variant._M_sequence._M_name = __name;\n \t  _M_variant._M_sequence._M_address = &__seq;\n@@ -356,6 +358,30 @@ namespace __gnu_debug\n       _M_max_length(78), _M_column(1), _M_first_line(true), _M_wordwrap(false)\n     { }\n \n+    _Error_formatter(const _Error_formatter& __o)\n+    : _M_file(__o._M_file), _M_line(__o._M_line), \n+    _M_num_parameters(__o._M_num_parameters), _M_text(__o._M_text),\n+    _M_max_length(__o._M_max_length), _M_column(__o._M_column), \n+    _M_first_line(__o._M_first_line), _M_wordwrap(__o._M_wordwrap)\n+    { }\n+\n+    _Error_formatter&\n+    operator=(const _Error_formatter& __o)\n+    {\n+      if (&__o != this)\n+\t{\n+\t  _M_file = __o._M_file;\n+\t  _M_line = __o._M_line;\n+\t  _M_num_parameters = __o._M_num_parameters;\n+\t  _M_text = __o._M_text;\n+\t  _M_max_length = __o._M_max_length;\n+\t  _M_column = __o._M_column;\n+\t  _M_first_line = __o._M_first_line;\n+\t  _M_wordwrap = __o._M_wordwrap;\n+\t}\n+      return *this;\n+    }\n+\n     template<typename _Tp>\n       void\n       _M_format_word(char*, int, const char*, _Tp) const;"}, {"sha": "10f9ec72546951f27bf7d70054821b1a79e57a6a", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,6 +1,6 @@\n // Safe sequence/iterator base implementation  -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -95,6 +95,12 @@ namespace __gnu_debug\n     : _M_sequence(0), _M_version(0), _M_prior(0), _M_next(0)\n     { this->_M_attach(__x._M_sequence, __constant); }\n \n+    _Safe_iterator_base&\n+    operator=(const _Safe_iterator_base&);\n+\n+    explicit \n+    _Safe_iterator_base(const _Safe_iterator_base&);\n+\n     ~_Safe_iterator_base() { this->_M_detach(); }\n \n   public:\n@@ -158,6 +164,12 @@ namespace __gnu_debug\n     : _M_iterators(0), _M_const_iterators(0), _M_version(1)\n     { }\n \n+    explicit\n+    _Safe_sequence_base(const _Safe_sequence_base&);\n+\n+    _Safe_sequence_base&\n+    operator=(const _Safe_sequence_base&);\n+\n     /** Notify all iterators that reference this sequence that the\n \tsequence is being destroyed. */\n     ~_Safe_sequence_base()"}, {"sha": "142c40ed6db1693d39e0d77d9219652e907cf25e", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -215,7 +215,7 @@ class sequence_buffer : public iterator<std::output_iterator_tag,void,void,void,\n         }\n         sequence_buffer& operator*() { return *this; }\n         sequence_buffer& operator++() { return *this; }\n-        sequence_buffer& operator++(int) { return *this; }\n+        sequence_buffer operator++(int) { return *this; }\n };\n \n // The following should be treated as private, at least for now.\n@@ -359,7 +359,7 @@ identity_element(_Rope_Concat_fn<_CharT, _Alloc>)\n     // Constructor\n     __gthread_mutex_t _M_ref_count_lock;\n \n-    _Refcount_Base(_RC_t __n) : _M_ref_count(__n)\n+    _Refcount_Base(_RC_t __n) : _M_ref_count(__n), _M_ref_count_lock()\n     {\n #ifdef __GTHREAD_MUTEX_INIT\n       __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n@@ -547,7 +547,11 @@ struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc>\n           static void _S_ref(_Rope_RopeRep*) {}\n           static void _S_free_if_unref(_Rope_RopeRep*) {}\n #   endif\n+protected:\n+  _Rope_RopeRep&\n+  operator=(const _Rope_RopeRep&);\n \n+  _Rope_RopeRep(const _Rope_RopeRep&);\n };\n \n template<class _CharT, class _Alloc>\n@@ -593,13 +597,18 @@ struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {\n         // the proper allocator and the properly padded size.\n         // In contrast, the destructor deallocates the data:\n # ifndef __GC\n-    ~_Rope_RopeLeaf() {\n+    ~_Rope_RopeLeaf() throw() {\n         if (_M_data != this->_M_c_string) {\n \t  this->_M_free_c_string();\n         }\n         __STL_FREE_STRING(_M_data, this->_M_size, this->get_allocator());\n     }\n # endif\n+protected:\n+  _Rope_RopeLeaf&\n+  operator=(const _Rope_RopeLeaf&);\n+\n+  _Rope_RopeLeaf(const _Rope_RopeLeaf&);\n };\n \n template<class _CharT, class _Alloc>\n@@ -620,12 +629,17 @@ struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {\n         _M_left(__l), _M_right(__r)\n       {}\n # ifndef __GC\n-    ~_Rope_RopeConcatenation() {\n+    ~_Rope_RopeConcatenation() throw() {\n       this->_M_free_c_string();\n       _M_left->_M_unref_nonnil();\n       _M_right->_M_unref_nonnil();\n     }\n # endif\n+protected:\n+  _Rope_RopeConcatenation&\n+  operator=(const _Rope_RopeConcatenation&);\n+\n+  _Rope_RopeConcatenation(const _Rope_RopeConcatenation&);\n };\n \n template<class _CharT, class _Alloc>\n@@ -666,13 +680,18 @@ struct _Rope_RopeFunction : public _Rope_RopeRep<_CharT,_Alloc> {\n #       endif\n     }\n # ifndef __GC\n-    ~_Rope_RopeFunction() {\n+    ~_Rope_RopeFunction() throw() {\n           this->_M_free_c_string();\n           if (_M_delete_when_done) {\n               delete _M_fn;\n           }\n     }\n # endif\n+protected:\n+  _Rope_RopeFunction&\n+  operator=(const _Rope_RopeFunction&);\n+\n+  _Rope_RopeFunction(const _Rope_RopeFunction&);\n };\n // Substring results are usually represented using just\n // concatenation nodes.  But in the case of very long flat ropes\n@@ -725,7 +744,7 @@ struct _Rope_RopeSubstring : public _Rope_RopeFunction<_CharT,_Alloc>,\n #       endif\n         this->_M_tag = _Rope_constants::_S_substringfn;\n     }\n-    virtual ~_Rope_RopeSubstring()\n+    virtual ~_Rope_RopeSubstring() throw()\n       {\n #       ifndef __GC\n           _M_base->_M_unref_nonnil();\n@@ -787,13 +806,16 @@ class _Rope_char_ref_proxy {\n     _My_rope* _M_root;     // The whole rope.\n   public:\n     _Rope_char_ref_proxy(_My_rope* __r, size_t __p)\n-      :  _M_pos(__p), _M_current_valid(false), _M_root(__r) {}\n+    :  _M_pos(__p), _M_current(), _M_current_valid(false), _M_root(__r) {}\n+\n     _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x)\n-      : _M_pos(__x._M_pos), _M_current_valid(false), _M_root(__x._M_root) {}\n-        // Don't preserve cache if the reference can outlive the\n-        // expression.  We claim that's not possible without calling\n-        // a copy constructor or generating reference to a proxy\n-        // reference.  We declare the latter to have undefined semantics.\n+    : _M_pos(__x._M_pos), _M_current(__x._M_current), _M_current_valid(false), \n+      _M_root(__x._M_root) {}\n+\n+  // Don't preserve cache if the reference can outlive the\n+  // expression.  We claim that's not possible without calling\n+  // a copy constructor or generating reference to a proxy\n+  // reference.  We declare the latter to have undefined semantics.\n     _Rope_char_ref_proxy(_My_rope* __r, size_t __p, _CharT __c)\n       : _M_pos(__p), _M_current(__c), _M_current_valid(true), _M_root(__r) {}\n     inline operator _CharT () const;\n@@ -1194,6 +1216,12 @@ struct _Rope_base\n           { __name##Alloc().deallocate(__p, __n); }\n   __ROPE_DEFINE_ALLOCS(_Alloc)\n # undef __ROPE_DEFINE_ALLOC\n+\n+protected:\n+  _Rope_base&\n+  operator=(const _Rope_base&);\n+\n+  _Rope_base(const _Rope_base&);\n };\n \n \n@@ -1546,18 +1574,16 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n             _S_ref(this->_M_tree_ptr);\n         }\n \n-        ~rope()\n-        {\n-            _S_unref(this->_M_tree_ptr);\n-        }\n+      ~rope() throw()\n+       { _S_unref(this->_M_tree_ptr); }\n \n         rope& operator=(const rope& __x)\n         {\n             _RopeRep* __old = this->_M_tree_ptr;\n             this->_M_tree_ptr = __x._M_tree_ptr;\n             _S_ref(this->_M_tree_ptr);\n             _S_unref(__old);\n-            return(*this);\n+            return *this;\n         }\n \n         void clear()"}, {"sha": "6b5728b94ced77d57a3674840341d1c718b0d542", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,6 +1,7 @@\n // String based streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -110,7 +111,7 @@ namespace std\n       */\n       explicit\n       basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_string()\n+      : __streambuf_type(), _M_mode(), _M_string()\n       { _M_stringbuf_init(__mode); }\n \n       /**\n@@ -124,7 +125,7 @@ namespace std\n       explicit\n       basic_stringbuf(const __string_type& __str,\n \t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_string(__str.data(), __str.size())\n+      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())\n       { _M_stringbuf_init(__mode); }\n \n       // Get and set:"}, {"sha": "42b3d782b0f17cf261e772e1abca84944e28b953", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -1,6 +1,6 @@\n // Stream buffer classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -762,10 +762,15 @@ namespace std\n       }\n #endif\n \n-    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // Side effect of DR 50. \n     private:\n-      basic_streambuf(const __streambuf_type&) { }; \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // Side effect of DR 50. \n+      basic_streambuf(const __streambuf_type& __sb)\n+      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur), \n+      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg), \n+      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),\n+      _M_buf_locale(__sb._M_buf_locale) \n+      { }\n \n       __streambuf_type& \n       operator=(const __streambuf_type&) { return *this; };"}, {"sha": "2010593f51a2cab18dff707e39fe2f0025e9ee13", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -45,13 +45,15 @@ namespace std\n \n   codecvt<char, char, mbstate_t>::\n   codecvt(size_t __refs)\n-  : __codecvt_abstract_base<char, char, mbstate_t>(__refs)\n-  { _M_c_locale_codecvt = _S_get_c_locale(); }\n+  : __codecvt_abstract_base<char, char, mbstate_t>(__refs),\n+  _M_c_locale_codecvt(_S_get_c_locale())\n+  { }\n \n   codecvt<char, char, mbstate_t>::\n   codecvt(__c_locale __cloc, size_t __refs)\n-  : __codecvt_abstract_base<char, char, mbstate_t>(__refs)\n-  { _M_c_locale_codecvt = _S_clone_c_locale(__cloc); }\n+  : __codecvt_abstract_base<char, char, mbstate_t>(__refs),\n+  _M_c_locale_codecvt(_S_clone_c_locale(__cloc))\n+  { }\n \n   codecvt<char, char, mbstate_t>::\n   ~codecvt()\n@@ -123,13 +125,15 @@ namespace std\n   // codecvt<wchar_t, char, mbstate_t> required specialization\n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(size_t __refs)\n-  : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs)\n-  { _M_c_locale_codecvt = _S_get_c_locale(); }\n+  : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs),\n+  _M_c_locale_codecvt(_S_get_c_locale())\n+  { }\n \n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(__c_locale __cloc, size_t __refs)\n-  : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs)\n-  { _M_c_locale_codecvt = _S_clone_c_locale(__cloc); }\n+  : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs),\n+  _M_c_locale_codecvt(_S_clone_c_locale(__cloc))\n+  { }\n \n   codecvt<wchar_t, char, mbstate_t>::\n   ~codecvt()"}, {"sha": "777ff41b2f05143f218679e289ab6254c5233169", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -86,18 +86,14 @@ namespace std\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n-  : __ctype_abstract_base<wchar_t>(__refs)\n-  { \n-    _M_c_locale_ctype = _S_get_c_locale();\n-    _M_initialize_ctype();\n-  }\n+  : __ctype_abstract_base<wchar_t>(__refs), \n+  _M_c_locale_ctype(_S_get_c_locale()), _M_narrow_ok(false)\n+  { _M_initialize_ctype(); }\n \n   ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n-  : __ctype_abstract_base<wchar_t>(__refs) \n-  {\n-    _M_c_locale_ctype = _S_clone_c_locale(__cloc);\n-    _M_initialize_ctype();\n-  }\n+  : __ctype_abstract_base<wchar_t>(__refs),\n+  _M_c_locale_ctype(_S_clone_c_locale(__cloc)), _M_narrow_ok(false)\n+  { _M_initialize_ctype(); }\n \n   ctype<wchar_t>::~ctype() \n   { _S_destroy_c_locale(_M_c_locale_ctype); }"}, {"sha": "12ffe2f20151c8af731647d735cbd532cc329d32", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -112,7 +112,9 @@ namespace std\n   bool ios_base::Init::_S_synced_with_stdio = true;\n \n   ios_base::ios_base() \n-  : _M_callbacks(0), _M_word_size(_S_local_word_size), _M_word(_M_local_word)\n+  : _M_precision(), _M_width(), _M_flags(), _M_exception(), \n+  _M_streambuf_state(), _M_callbacks(0), _M_word_zero(), \n+  _M_word_size(_S_local_word_size), _M_word(_M_local_word), _M_ios_locale()\n   {\n     // Do nothing: basic_ios::init() does it.  \n     // NB: _M_callbacks and _M_word must be zero for non-initialized"}, {"sha": "a9d0b2cf46c15879a6e5ba57eaa417457dfc940b", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -56,7 +56,8 @@ namespace std\n #endif\n \n   locale::locale(const locale& __other) throw()\n-  { (_M_impl = __other._M_impl)->_M_add_reference(); }\n+  : _M_impl(__other._M_impl)\n+  { _M_impl->_M_add_reference(); }\n \n   // This is used to initialize global and classic locales, and\n   // assumes that the _Impl objects are constructed correctly.\n@@ -227,10 +228,9 @@ namespace std\n   // Clone existing _Impl object.\n   locale::_Impl::\n   _Impl(const _Impl& __imp, size_t __refs)\n-  : _M_refcount(__refs), _M_facets_size(__imp._M_facets_size)\n+  : _M_refcount(__refs), _M_facets(0), _M_facets_size(__imp._M_facets_size),\n+  _M_caches(0), _M_names(0)\n   {\n-    _M_facets = _M_caches = 0;\n-    _M_names = 0;\n     try\n       {\n \t_M_facets = new const facet*[_M_facets_size];"}, {"sha": "8383c2fb8ec02e17a0fca738bfafc79813d1938b", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -98,7 +98,7 @@ namespace std\n {\n   using namespace __gnu_internal;\n \n-  locale::locale() throw()\n+  locale::locale() throw() : _M_impl(0)\n   { \n     _S_initialize(); \n     __glibcxx_mutex_lock(__gnu_internal::locale_cons_mutex);\n@@ -249,7 +249,8 @@ namespace std\n   // Construct \"C\" _Impl.\n   locale::_Impl::\n   _Impl(size_t __refs) throw() \n-  : _M_refcount(__refs), _M_facets_size(_GLIBCXX_NUM_FACETS)\n+  : _M_refcount(__refs), _M_facets(0), _M_facets_size(_GLIBCXX_NUM_FACETS),\n+  _M_caches(0), _M_names(0)    \n   {\n     _M_facets = new (&facet_vec) const facet*[_M_facets_size];\n     _M_caches = new (&cache_vec) const facet*[_M_facets_size];"}, {"sha": "e90e84734e8508c1d484d898e0a42de64e080c54", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -34,7 +34,7 @@ namespace std\n {\n   using namespace __gnu_cxx;\n \n-  locale::locale(const char* __s)\n+  locale::locale(const char* __s) : _M_impl(0)\n   {\n     if (__s)\n       {\n@@ -148,6 +148,7 @@ namespace std\n   }\n \n   locale::locale(const locale& __base, const char* __s, category __cat)\n+  : _M_impl(0)\n   { \n     // NB: There are complicated, yet more efficient ways to do\n     // this. Building up locales on a per-category way is tedious, so\n@@ -157,6 +158,7 @@ namespace std\n   }\n \n   locale::locale(const locale& __base, const locale& __add, category __cat)\n+  : _M_impl(0)\n   { _M_coalesce(__base, __add, __cat); }\n \n   void\n@@ -178,15 +180,14 @@ namespace std\n   // Construct named _Impl.\n   locale::_Impl::\n   _Impl(const char* __s, size_t __refs) \n-  : _M_refcount(__refs), _M_facets_size(_GLIBCXX_NUM_FACETS)\n+  : _M_refcount(__refs), _M_facets(0), _M_facets_size(_GLIBCXX_NUM_FACETS),\n+  _M_caches(0), _M_names(0)\n   {\n     // Initialize the underlying locale model, which also checks to\n     // see if the given name is valid.\n     __c_locale __cloc;\n     locale::facet::_S_create_c_locale(__cloc, __s);\n \n-    _M_facets = _M_caches = 0;\n-    _M_names = 0;\n     try\n       {\n \t_M_facets = new const facet*[_M_facets_size];"}, {"sha": "1275040e5ec4ab22d090f8dc20b0f612897ffc1b", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c691a88b8a403e7a92ce049368cc7efe3567ce/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc?ref=26c691a88b8a403e7a92ce049368cc7efe3567ce", "patch": "@@ -53,7 +53,7 @@ void test01()\n   iterator_type is_it01(iss);\n   string result1;\n   ios_base::iostate err01 = ios_base::goodbit;\n-  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  mon_get.get(is_it01, end, true, iss, err01, result1); // xxx\n   VERIFY( result1 == digits1 );\n   VERIFY( err01 == ios_base::eofbit );\n "}]}