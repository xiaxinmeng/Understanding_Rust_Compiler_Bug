{"sha": "0b8c57ed40f19086e30ce54faec3222ac21cc0df", "node_id": "C_kwDOANBUbNoAKDBiOGM1N2VkNDBmMTkwODZlMzBjZTU0ZmFlYzMyMjJhYzIxY2MwZGY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-01T07:48:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-01T07:56:44Z"}, "message": "libcpp: Add -Winvalid-utf8 warning [PR106655]\n\nThe following patch introduces a new warning - -Winvalid-utf8 similarly\nto what clang now has - to diagnose invalid UTF-8 byte sequences in\ncomments, but not just in those, but also in string/character literals\nand outside of them.\n\nThe warning is on by default when explicit -finput-charset=UTF-8 is\nused and C++23 compilation is requested and if -{,W}pedantic or\n-pedantic-errors it is actually a pedwarn.\n\nThe reason it is on by default only for -finput-charset=UTF-8 is\nthat the sources often are UTF-8, but sometimes could be some ASCII\ncompatible single byte encoding where non-ASCII characters only\nappear in comments.  So having the warning off by default\nis IMO desirable.  The C++23 pedantic mode for when the source code\nis UTF-8 is -std=c++23 -pedantic-errors -finput-charset=UTF-8.\n\n2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/106655\nlibcpp/\n\t* include/cpplib.h (struct cpp_options): Implement C++23\n\tP2295R6 - Support for UTF-8 as a portable source file encoding.\n\tAdd cpp_warn_invalid_utf8 and cpp_input_charset_explicit fields.\n\t(enum cpp_warning_reason): Add CPP_W_INVALID_UTF8 enumerator.\n\t* init.cc (cpp_create_reader): Initialize cpp_warn_invalid_utf8\n\tand cpp_input_charset_explicit.\n\t* charset.cc (_cpp_valid_utf8): Adjust function comment.\n\t* lex.cc (UCS_LIMIT): Define.\n\t(utf8_continuation): New const variable.\n\t(utf8_signifier): Move earlier in the file.\n\t(_cpp_warn_invalid_utf8, _cpp_handle_multibyte_utf8): New functions.\n\t(_cpp_skip_block_comment): Handle -Winvalid-utf8 warning.\n\t(skip_line_comment): Likewise.\n\t(lex_raw_string, lex_string): Likewise.\n\t(_cpp_lex_direct): Likewise.\ngcc/\n\t* doc/invoke.texi (-Winvalid-utf8): Document it.\ngcc/c-family/\n\t* c.opt (-Winvalid-utf8): New warning.\n\t* c-opts.cc (c_common_handle_option) <case OPT_finput_charset_>:\n\tSet cpp_opts->cpp_input_charset_explicit.\n\t(c_common_post_options): If -finput-charset=UTF-8 is explicit\n\tin C++23, enable -Winvalid-utf8 by default and if -pedantic\n\tor -pedantic-errors, make it a pedwarn.\ngcc/testsuite/\n\t* c-c++-common/cpp/Winvalid-utf8-1.c: New test.\n\t* c-c++-common/cpp/Winvalid-utf8-2.c: New test.\n\t* c-c++-common/cpp/Winvalid-utf8-3.c: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-1.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-2.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-3.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-4.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-5.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-6.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-7.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-8.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-9.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-10.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-11.C: New test.\n\t* g++.dg/cpp23/Winvalid-utf8-12.C: New test.", "tree": {"sha": "1ce3aa0f19ef45a7d2c03e272d1d8f835bb7f0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ce3aa0f19ef45a7d2c03e272d1d8f835bb7f0b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b8c57ed40f19086e30ce54faec3222ac21cc0df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8c57ed40f19086e30ce54faec3222ac21cc0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8c57ed40f19086e30ce54faec3222ac21cc0df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8c57ed40f19086e30ce54faec3222ac21cc0df/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449"}], "stats": {"total": 1006, "additions": 973, "deletions": 33}, "files": [{"sha": "babaa2fc157af8c724b2c600f5f81313518a9bcc", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -534,6 +534,7 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \n     case OPT_finput_charset_:\n       cpp_opts->input_charset = arg;\n+      cpp_opts->cpp_input_charset_explicit = 1;\n       break;\n \n     case OPT_ftemplate_depth_:\n@@ -1152,6 +1153,17 @@ c_common_post_options (const char **pfilename)\n     lang_hooks.preprocess_options (parse_in);\n   cpp_post_options (parse_in);\n   init_global_opts_from_cpp (&global_options, cpp_get_options (parse_in));\n+  /* For C++23 and explicit -finput-charset=UTF-8, turn on -Winvalid-utf8\n+     by default and make it a pedwarn unless -Wno-invalid-utf8.  */\n+  if (cxx_dialect >= cxx23\n+      && cpp_opts->cpp_input_charset_explicit\n+      && strcmp (cpp_opts->input_charset, \"UTF-8\") == 0\n+      && (cpp_opts->cpp_warn_invalid_utf8\n+\t  || !global_options_set.x_warn_invalid_utf8))\n+    {\n+      global_options.x_warn_invalid_utf8 = 1;\n+      cpp_opts->cpp_warn_invalid_utf8 = cpp_opts->cpp_pedantic ? 2 : 1;\n+    }\n \n   /* Let diagnostics infrastructure know how to convert input files the same\n      way libcpp will do it, namely using the configured input charset and"}, {"sha": "ff6fe8615342ad1c439ebb6099b50ad0e2912205", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -821,6 +821,10 @@ Winvalid-pch\n C ObjC C++ ObjC++ CPP(warn_invalid_pch) CppReason(CPP_W_INVALID_PCH) Var(cpp_warn_invalid_pch) Init(0) Warning\n Warn about PCH files that are found but not used.\n \n+Winvalid-utf8\n+C objC C++ ObjC++ CPP(cpp_warn_invalid_utf8) CppReason(CPP_W_INVALID_UTF8) Var(warn_invalid_utf8) Init(0) Warning\n+Warn about invalid UTF-8 characters in comments.\n+\n Wjump-misses-init\n C ObjC Var(warn_jump_misses_init) Warning LangEnabledby(C ObjC,Wc++-compat)\n Warn when a jump misses a variable initialization."}, {"sha": "8def6baa9048bb7af051f0db34b1c298e4a5b5b5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -365,9 +365,9 @@ Objective-C and Objective-C++ Dialects}.\n -Winfinite-recursion @gol\n -Winit-self  -Winline  -Wno-int-conversion  -Wint-in-bool-context @gol\n -Wno-int-to-pointer-cast  -Wno-invalid-memory-model @gol\n--Winvalid-pch  -Wjump-misses-init  -Wlarger-than=@var{byte-size} @gol\n--Wlogical-not-parentheses  -Wlogical-op  -Wlong-long @gol\n--Wno-lto-type-mismatch -Wmain  -Wmaybe-uninitialized @gol\n+-Winvalid-pch  -Winvalid-utf8 -Wjump-misses-init  @gol\n+-Wlarger-than=@var{byte-size}  -Wlogical-not-parentheses  -Wlogical-op  @gol\n+-Wlong-long  -Wno-lto-type-mismatch -Wmain  -Wmaybe-uninitialized @gol\n -Wmemset-elt-size  -Wmemset-transposed-args @gol\n -Wmisleading-indentation  -Wmissing-attributes  -Wmissing-braces @gol\n -Wmissing-field-initializers  -Wmissing-format-attribute @gol\n@@ -9569,6 +9569,13 @@ different size.\n Warn if a precompiled header (@pxref{Precompiled Headers}) is found in\n the search path but cannot be used.\n \n+@item -Winvalid-utf8\n+@opindex Winvalid-utf8\n+@opindex Wno-invalid-utf8\n+Warn if an invalid UTF-8 character is found.\n+This warning is on by default for C++23 if @option{-finput-charset=UTF-8}\n+is used and turned into error with @option{-pedantic-errors}.\n+\n @item -Wlong-long\n @opindex Wlong-long\n @opindex Wno-long-long"}, {"sha": "0d5a6a7afbeeda868a19a55b448569fe0c513d65", "filename": "gcc/testsuite/c-c++-common/cpp/Winvalid-utf8-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-1.c?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,43 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -Winvalid-utf8\" }\n+\n+// a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <80>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c0>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c1>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <f5>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ff>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c2>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0>\" }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><80><bf>\" }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><9f><80>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><bf>\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ec><80>\" }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <ed><a0><80>\" }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><80><80><80>\" }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f4><90><80><80>\" }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" }\n+//\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 }\n+/* a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <80>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c0>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c1>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <f5>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ff>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c2>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0>\" } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><80><bf>\" } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><9f><80>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><bf>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ec><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <ed><a0><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><80><80><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f4><90><80><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" } */\n+/*\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 } */"}, {"sha": "9ab69e1d8f7fa8f760f55f5d807cc2b1be056eb8", "filename": "gcc/testsuite/c-c++-common/cpp/Winvalid-utf8-2.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-2.c?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,88 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess { target { c || c++11 } } }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"-finput-charset=UTF-8 -Winvalid-utf8\" }\n+// { dg-additional-options \"-std=gnu99\" { target c } }\n+\n+#ifndef __cplusplus\n+#include <wchar.h>\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n+\n+char32_t a = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" }\n+char32_t b = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" }\n+char32_t c = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" }\n+char32_t d = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" }\n+char32_t e = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" }\n+char32_t f = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" }\n+char32_t g = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" }\n+char32_t h = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" }\n+char32_t i = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" }\n+char32_t j = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" }\n+char32_t k = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" }\n+char32_t l = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" }\n+char32_t m = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" }\n+char32_t n = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" }\n+char32_t o = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+char32_t p = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" }\n+char32_t q = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 }\n+const char32_t *A = U\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t// { dg-bogus \"invalid UTF-8 character\" }\n+const char32_t *B = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" }\n+const char32_t *C = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" }\n+const char32_t *D = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" }\n+const char32_t *E = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" }\n+const char32_t *F = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" }\n+const char32_t *G = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" }\n+const char32_t *H = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" }\n+const char32_t *I = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" }\n+const char32_t *J = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" }\n+const char32_t *K = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" }\n+const char32_t *L = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" }\n+const char32_t *M = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" }\n+const char32_t *N = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" }\n+const char32_t *O = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" }\n+const char32_t *P = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+const char32_t *Q = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" }\n+const char32_t *R = U\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 }\n+const char32_t *A1 = UR\"(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\"; // { dg-bogus \"invalid UTF-8 character\" }\n+const char32_t *B1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" }\n+const char32_t *C1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" }\n+const char32_t *D1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" }\n+const char32_t *E1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" }\n+const char32_t *F1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" }\n+const char32_t *G1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" }\n+const char32_t *H1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" }\n+const char32_t *I1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" }\n+const char32_t *J1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" }\n+const char32_t *K1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" }\n+const char32_t *L1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" }\n+const char32_t *M1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" }\n+const char32_t *N1 = UR\"(\ufffd)\";\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" }\n+const char32_t *O1 = UR\"(\ufffd)\";\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" }\n+const char32_t *P1 = UR\"(\ufffd)\";\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+const char32_t *Q1 = UR\"(\ufffd)\";\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" }\n+const char32_t *R1 = UR\"(\ufffd)\";\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 }\n+const char *A2 = u8\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t// { dg-bogus \"invalid UTF-8 character\" }\n+const char *B2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" }\n+const char *C2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" }\n+const char *D2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" }\n+const char *E2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" }\n+const char *F2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" }\n+const char *G2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" }\n+const char *H2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" }\n+const char *I2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" }\n+const char *J2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" }\n+const char *K2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" }\n+const char *L2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" }\n+const char *M2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" }\n+const char *N2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" }\n+const char *O2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" }\n+const char *P2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+const char *Q2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" }\n+const char *R2 = u8\"\ufffd\";\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 }"}, {"sha": "4cb230f780fde97833a5075368623cb7340b5dce", "filename": "gcc/testsuite/c-c++-common/cpp/Winvalid-utf8-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2FWinvalid-utf8-3.c?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,27 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -Winvalid-utf8\" }\n+\n+#define I(x)\n+I(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\t// { dg-bogus \"invalid UTF-8 character\" }\n+                                // { dg-error \"is not valid in an identifier\" \"\" { target c++ } .-1 }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c } }\n+                                // { dg-error \"is not valid in an identifier\" \"\" { target c++ } .-1 }\n+I(\ufffd)\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c } }\n+                                // { dg-error \"is not valid in an identifier\" \"\" { target c++ } .-1 }"}, {"sha": "95e3827df30087712e00b6b8af862a9adfeb0642", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-1.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,43 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8\" }\n+\n+// a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+//\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+/* a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } } */\n+/*\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 } */"}, {"sha": "4684b9dcd6f635500057fb1e9daaef111af0790a", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-10.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-10.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,25 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic\" }\n+\n+#define I(x)\n+I(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\t// { dg-bogus \"invalid UTF-8 character\" }\n+                                // { dg-error \"is not valid in an identifier\" \"\" { target *-*-* } .-1 }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"is not valid in an identifier\" }\n+I(\ufffd)\t\t\t// { dg-error \"is not valid in an identifier\" }"}, {"sha": "85f04bf691da91e434c1d1003264a522dbf93f2e", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-11.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-11.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,25 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic-errors\" }\n+\n+#define I(x)\n+I(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\t// { dg-bogus \"invalid UTF-8 character\" }\n+                                // { dg-error \"is not valid in an identifier\" \"\" { target *-*-* } .-1 }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"is not valid in an identifier\" }\n+I(\ufffd)\t\t\t// { dg-error \"is not valid in an identifier\" }"}, {"sha": "6a4091fbb531cf131f2ca1aa4f43204cd330d075", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-12.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-12.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,25 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic-errors -Wno-invalid-utf8\" }\n+\n+#define I(x)\n+I(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\t// { dg-bogus \"invalid UTF-8 character\" }\n+                                // { dg-error \"is not valid in an identifier\" \"\" { target *-*-* } .-1 }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <80>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c0>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c1>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f5>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ff>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c2>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><80><bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><9f><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ec><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ed><a0><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><80><80><80>\" }\n+I(\ufffd)\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+I(\ufffd)\t\t\t\t// { dg-error \"is not valid in an identifier\" }\n+I(\ufffd)\t\t\t// { dg-error \"is not valid in an identifier\" }"}, {"sha": "70ab8e5afa96a8a279210533feea6418e7814224", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-2.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-2.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,43 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic\" }\n+\n+// a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+//\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+/* a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } } */\n+/*\t\t\t\t\t{ dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 } */"}, {"sha": "c0f748bc96fe9a50c2bcf122f8caa0c3c4c39743", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-3.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-3.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,43 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic-errors\" }\n+\n+// a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+// a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+//\t\t\t\t\t{ dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+/* a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <c0>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <c1>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <f5>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <ff>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <c2>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <e0>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t\t{ dg-error \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } } */\n+/* a\ufffda\t\t\t\t{ dg-error \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } } */\n+/*\t\t\t\t\t{ dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 } */"}, {"sha": "1dc65e3624b40afadc711917adafd8fa660cc276", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-4.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-4.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,43 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic-errors -Wno-invalid-utf8\" }\n+\n+// a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <80>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <bf>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <c0>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <c1>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f5>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <ff>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <c2>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0>\" }\n+// a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0><80><bf>\" }\n+// a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0><9f><80>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0><bf>\" }\n+// a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <ec><80>\" }\n+// a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <ed><a0><80>\" }\n+// a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f0><80><80><80>\" }\n+// a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f0><8f><bf><bf>\" }\n+// a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f4><90><80><80>\" }\n+// a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <fd><bf><bf><bf>\" }\n+//\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 }\n+/* a\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfffa\t\t{ dg-bogus \"invalid UTF-8 character\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <80>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <bf>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <c0>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <c1>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f5>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <ff>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <c2>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0>\" } */\n+/* a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0><80><bf>\" } */\n+/* a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0><9f><80>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <e0><bf>\" } */\n+/* a\ufffda\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <ec><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <ed><a0><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f0><80><80><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f0><8f><bf><bf>\" } */\n+/* a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <f4><90><80><80>\" } */\n+/* a\ufffda\t\t\t\t{ dg-bogus \"invalid UTF-8 character <fd><bf><bf><bf>\" } */\n+/*\t\t\t\t\t{ dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target *-*-* } .-1 } */"}, {"sha": "f0140ba0a82b12f9c0e7a654a71e9e20fd2ef3aa", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-5.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-5.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,80 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess { target c++11 } }\n+// { dg-options \"-finput-charset=UTF-8\" }\n+\n+char32_t a = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+char32_t b = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+char32_t c = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+char32_t d = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+char32_t e = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+char32_t f = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+char32_t g = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+char32_t h = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+char32_t i = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+char32_t j = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+char32_t k = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+char32_t l = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+char32_t m = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+char32_t n = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+char32_t o = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+char32_t p = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+char32_t q = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A = U\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A1 = UR\"(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A2 = u8\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }"}, {"sha": "01023d390f15f0e376e13241664988f12217bde3", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-6.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-6.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,80 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess { target c++11 } }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic\" }\n+\n+char32_t a = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+char32_t b = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+char32_t c = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+char32_t d = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+char32_t e = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+char32_t f = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+char32_t g = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+char32_t h = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+char32_t i = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+char32_t j = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+char32_t k = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+char32_t l = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+char32_t m = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+char32_t n = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+char32_t o = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+char32_t p = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+char32_t q = U'\ufffd';\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A = U\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M = U\"\ufffd\";\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R = U\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A1 = UR\"(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R1 = UR\"(\ufffd)\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A2 = u8\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R2 = u8\"\ufffd\";\t\t\t\t// { dg-warning \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }"}, {"sha": "7991a64ecc94ed4b5cf660a333047abe2181698d", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-7.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-7.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,80 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess { target c++11 } }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic-errors\" }\n+\n+char32_t a = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+char32_t b = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+char32_t c = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+char32_t d = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+char32_t e = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+char32_t f = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+char32_t g = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+char32_t h = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+char32_t i = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+char32_t j = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+char32_t k = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+char32_t l = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+char32_t m = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+char32_t n = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+char32_t o = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+char32_t p = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+char32_t q = U'\ufffd';\t\t\t\t// { dg-error \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A = U\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J = U\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K = U\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M = U\"\ufffd\";\t\t\t\t\t// { dg-error \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N = U\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O = U\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P = U\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q = U\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R = U\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A1 = UR\"(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R1 = UR\"(\ufffd)\";\t\t\t\t// { dg-error \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A2 = u8\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R2 = u8\"\ufffd\";\t\t\t\t// { dg-error \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-error \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }"}, {"sha": "95c8a91722a03685c955c33993eef9b5291651de", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-8.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-8.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,80 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess { target c++11 } }\n+// { dg-options \"-finput-charset=UTF-8 -pedantic-errors -Wno-invalid-utf8\" }\n+\n+char32_t a = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+char32_t b = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+char32_t c = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+char32_t d = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+char32_t e = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+char32_t f = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+char32_t g = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+char32_t h = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+char32_t i = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+char32_t j = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+char32_t k = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+char32_t l = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+char32_t m = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+char32_t n = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+char32_t o = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+char32_t p = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+char32_t q = U'\ufffd';\t\t\t\t// { dg-bogus \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A = U\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J = U\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K = U\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M = U\"\ufffd\";\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N = U\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O = U\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P = U\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q = U\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R = U\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A1 = UR\"(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R1 = UR\"(\ufffd)\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }\n+auto A2 = u8\"\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff\";\t\t// { dg-bogus \"invalid UTF-8 character\" }\n+auto B2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+auto C2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+auto D2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+auto E2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+auto F2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+auto G2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+auto H2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+auto I2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+auto J2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+auto K2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+auto L2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+auto M2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+auto N2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+auto O2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+auto P2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+auto Q2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <f4><90><80><80>\" \"\" { target c++23 } }\n+auto R2 = u8\"\ufffd\";\t\t\t\t// { dg-bogus \"invalid UTF-8 character <fd><bf><bf><bf>\" \"\" { target c++23 } }\n+\t\t\t\t\t\t// { dg-bogus \"invalid UTF-8 character <bf>\" \"\" { target c++23 } .-1 }"}, {"sha": "0afc94549e0b5fcef7b44712955b878204473ab9", "filename": "gcc/testsuite/g++.dg/cpp23/Winvalid-utf8-9.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2FWinvalid-utf8-9.C?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -0,0 +1,25 @@\n+// P2295R6 - Support for UTF-8 as a portable source file encoding\n+// This test intentionally contains various byte sequences which are not valid UTF-8\n+// { dg-do preprocess }\n+// { dg-options \"-finput-charset=UTF-8\" }\n+\n+#define I(x)\n+I(\u0080\u07ff\u0800\ud7ff\ue000\ud800\udc00\udbff\udfff)\t// { dg-bogus \"invalid UTF-8 character\" }\n+                                // { dg-error \"is not valid in an identifier\" \"\" { target *-*-* } .-1 }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c0>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c1>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f5>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ff>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <c2>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><80><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><9f><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <e0><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ec><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <ed><a0><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><80><80><80>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-warning \"invalid UTF-8 character <f0><8f><bf><bf>\" \"\" { target c++23 } }\n+I(\ufffd)\t\t\t\t// { dg-error \"is not valid in an identifier\" }\n+I(\ufffd)\t\t\t// { dg-error \"is not valid in an identifier\" }"}, {"sha": "c9656dbbe1569bc7511ff384891321b1d940c362", "filename": "libcpp/charset.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Fcharset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Fcharset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.cc?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -1742,9 +1742,9 @@ convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,\n     case, no diagnostic is emitted, and the return value of FALSE should cause\n     a new token to be formed.\n \n-    Unlike _cpp_valid_ucn, this will never be called when lexing a string; only\n-    a potential identifier, or a CPP_OTHER token.  NST is unused in the latter\n-    case.\n+    _cpp_valid_utf8 can be called when lexing a potential identifier, or a\n+    CPP_OTHER token or for the purposes of -Winvalid-utf8 warning in string or\n+    character literals.  NST is unused when not in a potential identifier.\n \n     As in _cpp_valid_ucn, IDENTIFIER_POS is 0 when not in an identifier, 1 for\n     the start of an identifier, or 2 otherwise.  */"}, {"sha": "a7600de425aeec860a0b3976ec8b8768ce92be5f", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -560,6 +560,13 @@ struct cpp_options\n      cpp_bidirectional_level.  */\n   unsigned char cpp_warn_bidirectional;\n \n+  /* True if libcpp should warn about invalid UTF-8 characters in comments.\n+     2 if it should be a pedwarn.  */\n+  unsigned char cpp_warn_invalid_utf8;\n+\n+  /* True if -finput-charset= option has been used explicitly.  */\n+  bool cpp_input_charset_explicit;\n+\n   /* Dependency generation.  */\n   struct\n   {\n@@ -666,7 +673,8 @@ enum cpp_warning_reason {\n   CPP_W_CXX11_COMPAT,\n   CPP_W_CXX20_COMPAT,\n   CPP_W_EXPANSION_TO_DEFINED,\n-  CPP_W_BIDIRECTIONAL\n+  CPP_W_BIDIRECTIONAL,\n+  CPP_W_INVALID_UTF8\n };\n \n /* Callback for header lookup for HEADER, which is the name of a"}, {"sha": "41b10b3d1141c9146af6dea371def8c401129e9a", "filename": "libcpp/init.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -227,6 +227,8 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, ext_numeric_literals) = 1;\n   CPP_OPTION (pfile, warn_date_time) = 0;\n   CPP_OPTION (pfile, cpp_warn_bidirectional) = bidirectional_unpaired;\n+  CPP_OPTION (pfile, cpp_warn_invalid_utf8) = 0;\n+  CPP_OPTION (pfile, cpp_input_charset_explicit) = 0;\n \n   /* Default CPP arithmetic to something sensible for the host for the\n      benefit of dumb users like fix-header.  */"}, {"sha": "41f905dea165da71db8e682a76627b2318154a42", "filename": "libcpp/lex.cc", "status": "modified", "additions": 183, "deletions": 26, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8c57ed40f19086e30ce54faec3222ac21cc0df/libcpp%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.cc?ref=0b8c57ed40f19086e30ce54faec3222ac21cc0df", "patch": "@@ -50,6 +50,9 @@ static const struct token_spelling token_spellings[N_TTYPES] = { TTYPE_TABLE };\n #define TOKEN_SPELL(token) (token_spellings[(token)->type].category)\n #define TOKEN_NAME(token) (token_spellings[(token)->type].name)\n \n+/* ISO 10646 defines the UCS codespace as the range 0-0x10FFFF inclusive.  */\n+#define UCS_LIMIT 0x10FFFF\n+\n static void add_line_note (cpp_buffer *, const uchar *, unsigned int);\n static int skip_line_comment (cpp_reader *);\n static void skip_whitespace (cpp_reader *, cppchar_t);\n@@ -1704,6 +1707,120 @@ maybe_warn_bidi_on_char (cpp_reader *pfile, bidi::kind kind,\n   bidi::on_char (kind, ucn_p, loc);\n }\n \n+static const cppchar_t utf8_continuation = 0x80;\n+static const cppchar_t utf8_signifier = 0xC0;\n+\n+/* Emit -Winvalid-utf8 warning on invalid UTF-8 character starting\n+   at PFILE->buffer->cur.  Return a pointer after the diagnosed\n+   invalid character.  */\n+\n+static const uchar *\n+_cpp_warn_invalid_utf8 (cpp_reader *pfile)\n+{\n+  cpp_buffer *buffer = pfile->buffer;\n+  const uchar *cur = buffer->cur;\n+  bool pedantic = (CPP_PEDANTIC (pfile)\n+\t\t   && CPP_OPTION (pfile, cpp_warn_invalid_utf8) == 2);\n+\n+  if (cur[0] < utf8_signifier\n+      || cur[1] < utf8_continuation || cur[1] >= utf8_signifier)\n+    {\n+      if (pedantic)\n+\tcpp_error_with_line (pfile, CPP_DL_PEDWARN,\n+\t\t\t     pfile->line_table->highest_line,\n+\t\t\t     CPP_BUF_COL (buffer),\n+\t\t\t     \"invalid UTF-8 character <%x>\",\n+\t\t\t     cur[0]);\n+      else\n+\tcpp_warning_with_line (pfile, CPP_W_INVALID_UTF8,\n+\t\t\t       pfile->line_table->highest_line,\n+\t\t\t       CPP_BUF_COL (buffer),\n+\t\t\t       \"invalid UTF-8 character <%x>\",\n+\t\t\t       cur[0]);\n+      return cur + 1;\n+    }\n+  else if (cur[2] < utf8_continuation || cur[2] >= utf8_signifier)\n+    {\n+      if (pedantic)\n+\tcpp_error_with_line (pfile, CPP_DL_PEDWARN,\n+\t\t\t     pfile->line_table->highest_line,\n+\t\t\t     CPP_BUF_COL (buffer),\n+\t\t\t     \"invalid UTF-8 character <%x><%x>\",\n+\t\t\t     cur[0], cur[1]);\n+      else\n+\tcpp_warning_with_line (pfile, CPP_W_INVALID_UTF8,\n+\t\t\t       pfile->line_table->highest_line,\n+\t\t\t       CPP_BUF_COL (buffer),\n+\t\t\t       \"invalid UTF-8 character <%x><%x>\",\n+\t\t\t       cur[0], cur[1]);\n+      return cur + 2;\n+    }\n+  else if (cur[3] < utf8_continuation || cur[3] >= utf8_signifier)\n+    {\n+      if (pedantic)\n+\tcpp_error_with_line (pfile, CPP_DL_PEDWARN,\n+\t\t\t     pfile->line_table->highest_line,\n+\t\t\t     CPP_BUF_COL (buffer),\n+\t\t\t     \"invalid UTF-8 character <%x><%x><%x>\",\n+\t\t\t     cur[0], cur[1], cur[2]);\n+      else\n+\tcpp_warning_with_line (pfile, CPP_W_INVALID_UTF8,\n+\t\t\t       pfile->line_table->highest_line,\n+\t\t\t       CPP_BUF_COL (buffer),\n+\t\t\t       \"invalid UTF-8 character <%x><%x><%x>\",\n+\t\t\t       cur[0], cur[1], cur[2]);\n+      return cur + 3;\n+    }\n+  else\n+    {\n+      if (pedantic)\n+\tcpp_error_with_line (pfile, CPP_DL_PEDWARN,\n+\t\t\t     pfile->line_table->highest_line,\n+\t\t\t     CPP_BUF_COL (buffer),\n+\t\t\t     \"invalid UTF-8 character <%x><%x><%x><%x>\",\n+\t\t\t     cur[0], cur[1], cur[2], cur[3]);\n+      else\n+\tcpp_warning_with_line (pfile, CPP_W_INVALID_UTF8,\n+\t\t\t       pfile->line_table->highest_line,\n+\t\t\t       CPP_BUF_COL (buffer),\n+\t\t\t       \"invalid UTF-8 character <%x><%x><%x><%x>\",\n+\t\t\t       cur[0], cur[1], cur[2], cur[3]);\n+      return cur + 4;\n+    }\n+}\n+\n+/* Helper function of *skip_*_comment and lex*_string.  For C,\n+   character at CUR[-1] with MSB set handle -Wbidi-chars* and\n+   -Winvalid-utf8 diagnostics and return pointer to first character\n+   that should be processed next.  */\n+\n+static inline const uchar *\n+_cpp_handle_multibyte_utf8 (cpp_reader *pfile, uchar c,\n+\t\t\t    const uchar *cur, bool warn_bidi_p,\n+\t\t\t    bool warn_invalid_utf8_p)\n+{\n+  /* If this is a beginning of a UTF-8 encoding, it might be\n+     a bidirectional control character.  */\n+  if (c == bidi::utf8_start && warn_bidi_p)\n+    {\n+      location_t loc;\n+      bidi::kind kind = get_bidi_utf8 (pfile, cur - 1, &loc);\n+      maybe_warn_bidi_on_char (pfile, kind, /*ucn_p=*/false, loc);\n+    }\n+  if (!warn_invalid_utf8_p)\n+    return cur;\n+  if (c >= utf8_signifier)\n+    {\n+      cppchar_t s;\n+      const uchar *pstr = cur - 1;\n+      if (_cpp_valid_utf8 (pfile, &pstr, pfile->buffer->rlimit, 0, NULL, &s)\n+\t  && s <= UCS_LIMIT)\n+\treturn pstr;\n+    }\n+  pfile->buffer->cur = cur - 1;\n+  return _cpp_warn_invalid_utf8 (pfile);\n+}\n+\n /* Skip a C-style block comment.  We find the end of the comment by\n    seeing if an asterisk is before every '/' we encounter.  Returns\n    nonzero if comment terminated by EOF, zero otherwise.\n@@ -1716,6 +1833,8 @@ _cpp_skip_block_comment (cpp_reader *pfile)\n   const uchar *cur = buffer->cur;\n   uchar c;\n   const bool warn_bidi_p = pfile->warn_bidi_p ();\n+  const bool warn_invalid_utf8_p = CPP_OPTION (pfile, cpp_warn_invalid_utf8);\n+  const bool warn_bidi_or_invalid_utf8_p = warn_bidi_p | warn_invalid_utf8_p;\n \n   cur++;\n   if (*cur == '/')\n@@ -1765,14 +1884,10 @@ _cpp_skip_block_comment (cpp_reader *pfile)\n \n \t  cur = buffer->cur;\n \t}\n-      /* If this is a beginning of a UTF-8 encoding, it might be\n-\t a bidirectional control character.  */\n-      else if (__builtin_expect (c == bidi::utf8_start, 0) && warn_bidi_p)\n-\t{\n-\t  location_t loc;\n-\t  bidi::kind kind = get_bidi_utf8 (pfile, cur - 1, &loc);\n-\t  maybe_warn_bidi_on_char (pfile, kind, /*ucn_p=*/false, loc);\n-\t}\n+      else if (__builtin_expect (c >= utf8_continuation, 0)\n+\t       && warn_bidi_or_invalid_utf8_p)\n+\tcur = _cpp_handle_multibyte_utf8 (pfile, c, cur, warn_bidi_p,\n+\t\t\t\t\t  warn_invalid_utf8_p);\n     }\n \n   buffer->cur = cur;\n@@ -1789,11 +1904,13 @@ skip_line_comment (cpp_reader *pfile)\n   cpp_buffer *buffer = pfile->buffer;\n   location_t orig_line = pfile->line_table->highest_line;\n   const bool warn_bidi_p = pfile->warn_bidi_p ();\n+  const bool warn_invalid_utf8_p = CPP_OPTION (pfile, cpp_warn_invalid_utf8);\n+  const bool warn_bidi_or_invalid_utf8_p = warn_bidi_p | warn_invalid_utf8_p;\n \n-  if (!warn_bidi_p)\n+  if (!warn_bidi_or_invalid_utf8_p)\n     while (*buffer->cur != '\\n')\n       buffer->cur++;\n-  else\n+  else if (!warn_invalid_utf8_p)\n     {\n       while (*buffer->cur != '\\n'\n \t     && *buffer->cur != bidi::utf8_start)\n@@ -1813,6 +1930,22 @@ skip_line_comment (cpp_reader *pfile)\n \t  maybe_warn_bidi_on_close (pfile, buffer->cur);\n \t}\n     }\n+  else\n+    {\n+      while (*buffer->cur != '\\n')\n+\t{\n+\t  if (*buffer->cur < utf8_continuation)\n+\t    {\n+\t      buffer->cur++;\n+\t      continue;\n+\t    }\n+\t  buffer->cur\n+\t    = _cpp_handle_multibyte_utf8 (pfile, *buffer->cur, buffer->cur + 1,\n+\t\t\t\t\t  warn_bidi_p, warn_invalid_utf8_p);\n+\t}\n+      if (warn_bidi_p)\n+\tmaybe_warn_bidi_on_close (pfile, buffer->cur);\n+    }\n \n   _cpp_process_line_notes (pfile, true);\n   return orig_line != pfile->line_table->highest_line;\n@@ -1919,8 +2052,6 @@ warn_about_normalization (cpp_reader *pfile,\n     }\n }\n \n-static const cppchar_t utf8_signifier = 0xC0;\n-\n /* Returns TRUE if the sequence starting at buffer->cur is valid in\n    an identifier.  FIRST is TRUE if this starts an identifier.  */\n \n@@ -2361,6 +2492,8 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n {\n   const uchar *pos = base;\n   const bool warn_bidi_p = pfile->warn_bidi_p ();\n+  const bool warn_invalid_utf8_p = CPP_OPTION (pfile, cpp_warn_invalid_utf8);\n+  const bool warn_bidi_or_invalid_utf8_p = warn_bidi_p | warn_invalid_utf8_p;\n \n   /* 'tis a pity this information isn't passed down from the lexer's\n      initial categorization of the token.  */\n@@ -2597,13 +2730,10 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n \t  pos = base = pfile->buffer->cur;\n \t  note = &pfile->buffer->notes[pfile->buffer->cur_note];\n \t}\n-      else if (__builtin_expect ((unsigned char) c == bidi::utf8_start, 0)\n-\t       && warn_bidi_p)\n-\t{\n-\t  location_t loc;\n-\t  bidi::kind kind = get_bidi_utf8 (pfile, pos - 1, &loc);\n-\t  maybe_warn_bidi_on_char (pfile, kind, /*ucn_p=*/false, loc);\n-\t}\n+      else if (__builtin_expect ((unsigned char) c >= utf8_continuation, 0)\n+\t       && warn_bidi_or_invalid_utf8_p)\n+\tpos = _cpp_handle_multibyte_utf8 (pfile, c, pos, warn_bidi_p,\n+\t\t\t\t\t  warn_invalid_utf8_p);\n     }\n \n   if (warn_bidi_p)\n@@ -2704,6 +2834,8 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n     terminator = '>', type = CPP_HEADER_NAME;\n \n   const bool warn_bidi_p = pfile->warn_bidi_p ();\n+  const bool warn_invalid_utf8_p = CPP_OPTION (pfile, cpp_warn_invalid_utf8);\n+  const bool warn_bidi_or_invalid_utf8_p = warn_bidi_p | warn_invalid_utf8_p;\n   for (;;)\n     {\n       cppchar_t c = *cur++;\n@@ -2745,12 +2877,10 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n \t}\n       else if (c == '\\0')\n \tsaw_NUL = true;\n-      else if (__builtin_expect (c == bidi::utf8_start, 0) && warn_bidi_p)\n-\t{\n-\t  location_t loc;\n-\t  bidi::kind kind = get_bidi_utf8 (pfile, cur - 1, &loc);\n-\t  maybe_warn_bidi_on_char (pfile, kind, /*ucn_p=*/false, loc);\n-\t}\n+      else if (__builtin_expect (c >= utf8_continuation, 0)\n+\t       && warn_bidi_or_invalid_utf8_p)\n+\tcur = _cpp_handle_multibyte_utf8 (pfile, c, cur, warn_bidi_p,\n+\t\t\t\t\t  warn_invalid_utf8_p);\n     }\n \n   if (saw_NUL && !pfile->state.skipping)\n@@ -4052,6 +4182,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n     default:\n       {\n \tconst uchar *base = --buffer->cur;\n+\tstatic int no_warn_cnt;\n \n \t/* Check for an extended identifier ($ or UCN or UTF-8).  */\n \tstruct normalize_state nst = INITIAL_NORMALIZE_STATE;\n@@ -4072,7 +4203,33 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t    const uchar *pstr = base;\n \t    cppchar_t s;\n \t    if (_cpp_valid_utf8 (pfile, &pstr, buffer->rlimit, 0, NULL, &s))\n-\t      buffer->cur = pstr;\n+\t      {\n+\t\tif (s > UCS_LIMIT && CPP_OPTION (pfile, cpp_warn_invalid_utf8))\n+\t\t  {\n+\t\t    buffer->cur = base;\n+\t\t    _cpp_warn_invalid_utf8 (pfile);\n+\t\t  }\n+\t\tbuffer->cur = pstr;\n+\t      }\n+\t    else if (CPP_OPTION (pfile, cpp_warn_invalid_utf8))\n+\t      {\n+\t\tbuffer->cur = base;\n+\t\tconst uchar *end = _cpp_warn_invalid_utf8 (pfile);\n+\t\tbuffer->cur = base + 1;\n+\t\tno_warn_cnt = end - buffer->cur;\n+\t      }\n+\t  }\n+\telse if (c >= utf8_continuation\n+\t\t && CPP_OPTION (pfile, cpp_warn_invalid_utf8))\n+\t  {\n+\t    if (no_warn_cnt)\n+\t      --no_warn_cnt;\n+\t    else\n+\t      {\n+\t\tbuffer->cur = base;\n+\t\t_cpp_warn_invalid_utf8 (pfile);\n+\t\tbuffer->cur = base + 1;\n+\t      }\n \t  }\n \tcreate_literal (pfile, result, base, buffer->cur - base, CPP_OTHER);\n \tbreak;"}]}