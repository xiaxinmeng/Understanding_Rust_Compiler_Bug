{"sha": "508e475706c3560a86b08446e1bb764773b93ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4ZTQ3NTcwNmMzNTYwYTg2YjA4NDQ2ZTFiYjc2NDc3M2I5M2VkOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-08-21T09:46:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-08-21T09:46:15Z"}, "message": "re PR middle-end/45307 (Stores expanding to no RTL not removed by tree optimizers, Empty ctors/dtors not eliminated)\n\n\n\tPR c++/45307\n\tPR c++/17736\n\t* cgraph.h (cgraph_only_called_directly_p,\n\tcgraph_can_remove_if_no_direct_calls_and_refs_p): Handle\n\tstatic cdtors.\n\t* cgraphunit.c (cgraph_decide_is_function_needed): Static cdtors\n\tare not needed.\n\t(cgraph_finalize_function): Static cdtors are reachable.\n\t(cgraph_mark_functions_to_output): Use cgraph_only_called_directly_p.\n\n\t* gcc.dg/ipa/ctor-empty-1.c: Add testcase.\n\t* g++.dg/tree-ssa/empty-2.C: Check that constructor got optimized out.\n\nFrom-SVN: r163439", "tree": {"sha": "dd592015baf43a7ac0105edb4a35dc0cecd6d50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd592015baf43a7ac0105edb4a35dc0cecd6d50f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/508e475706c3560a86b08446e1bb764773b93ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508e475706c3560a86b08446e1bb764773b93ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508e475706c3560a86b08446e1bb764773b93ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508e475706c3560a86b08446e1bb764773b93ed9/comments", "author": null, "committer": null, "parents": [{"sha": "f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "4f467cac8a982bfb105c7f074c812dc41a30b6ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=508e475706c3560a86b08446e1bb764773b93ed9", "patch": "@@ -1,3 +1,15 @@\n+2010-08-20  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c++/45307\n+\tPR c++/17736\n+\t* cgraph.h (cgraph_only_called_directly_p,\n+\tcgraph_can_remove_if_no_direct_calls_and_refs_p): Handle\n+\tstatic cdtors.\n+\t* cgraphunit.c (cgraph_decide_is_function_needed): Static cdtors\n+\tare not needed.\n+\t(cgraph_finalize_function): Static cdtors are reachable.\n+\t(cgraph_mark_functions_to_output): Use cgraph_only_called_directly_p.\n+\n 2010-08-20  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (lto_output_edge): Use gimple_has_body_p instead of flag_wpa."}, {"sha": "470fb5a78fb4afa66cfb628290fc04243f39d062", "filename": "gcc/cgraph.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=508e475706c3560a86b08446e1bb764773b93ed9", "patch": "@@ -2709,6 +2709,33 @@ cgraph_edge_cannot_lead_to_return (struct cgraph_edge *e)\n     return cgraph_node_cannot_return (e->callee);\n }\n \n+/* Return true when function NODE can be removed from callgraph\n+   if all direct calls are eliminated.  */\n+\n+bool\n+cgraph_can_remove_if_no_direct_calls_and_refs_p (struct cgraph_node *node)\n+{\n+  /* When function is needed, we can not remove it.  */\n+  if (node->needed || node->reachable_from_other_partition)\n+    return false;\n+  /* Only COMDAT functions can be removed if externally visible.  */\n+  if (node->local.externally_visible\n+      && (!DECL_COMDAT (node->decl) || node->local.used_from_object_file))\n+    return false;\n+  /* Constructors and destructors are executed by the runtime, however\n+     we can get rid of all pure constructors and destructors.  */\n+  if (DECL_STATIC_CONSTRUCTOR (node->decl)\n+      || DECL_STATIC_DESTRUCTOR (node->decl))\n+    {\n+      int flags = flags_from_decl_or_type (node->decl);\n+      if (!optimize\n+\t  || !(flags & (ECF_CONST | ECF_PURE))\n+\t  || (flags & ECF_LOOPING_CONST_OR_PURE))\n+\treturn false;\n+    }\n+  return true;\n+}\n+\n /* Return true when function NODE can be excpected to be removed\n    from program when direct calls in this compilation unit are removed.\n "}, {"sha": "f77a280d12f7f435ed66b5f07eea39050a224ae6", "filename": "gcc/cgraph.h", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=508e475706c3560a86b08446e1bb764773b93ed9", "patch": "@@ -608,6 +608,10 @@ void cgraph_set_looping_const_or_pure_flag (struct cgraph_node *, bool);\n tree clone_function_name (tree decl, const char *);\n bool cgraph_node_cannot_return (struct cgraph_node *);\n bool cgraph_edge_cannot_lead_to_return (struct cgraph_edge *);\n+bool cgraph_will_be_removed_from_program_if_no_direct_calls\n+  (struct cgraph_node *node);\n+bool cgraph_can_remove_if_no_direct_calls_and_refs_p\n+  (struct cgraph_node *node);\n \n /* In cgraphunit.c  */\n extern FILE *cgraph_dump_file;\n@@ -664,8 +668,6 @@ void cgraph_remove_node_duplication_hook (struct cgraph_2node_hook_list *);\n void cgraph_materialize_all_clones (void);\n gimple cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *);\n bool cgraph_propagate_frequency (struct cgraph_node *node);\n-bool cgraph_will_be_removed_from_program_if_no_direct_calls\n-  (struct cgraph_node *node);\n /* In cgraphbuild.c  */\n unsigned int rebuild_cgraph_edges (void);\n void cgraph_rebuild_references (void);\n@@ -903,17 +905,11 @@ varpool_node_set_nonempty_p (varpool_node_set set)\n static inline bool\n cgraph_only_called_directly_p (struct cgraph_node *node)\n {\n-  return !node->needed && !node->address_taken && !node->local.externally_visible;\n-}\n-\n-/* Return true when function NODE can be removed from callgraph\n-   if all direct calls are eliminated.  */\n-\n-static inline bool\n-cgraph_can_remove_if_no_direct_calls_and_refs_p (struct cgraph_node *node)\n-{\n-  return (!node->needed && !node->reachable_from_other_partition\n-  \t  && (DECL_COMDAT (node->decl) || !node->local.externally_visible));\n+  return (!node->needed && !node->address_taken\n+\t  && !node->reachable_from_other_partition\n+\t  && !DECL_STATIC_CONSTRUCTOR (node->decl)\n+\t  && !DECL_STATIC_DESTRUCTOR (node->decl)\n+\t  && !node->local.externally_visible);\n }\n \n /* Return true when function NODE can be removed from callgraph"}, {"sha": "57b7a8d9efa3fe13a64c159f59811586fea21f08", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=508e475706c3560a86b08446e1bb764773b93ed9", "patch": "@@ -367,11 +367,6 @@ cgraph_decide_is_function_needed (struct cgraph_node *node, tree decl)\n       && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n     return true;\n \n-  /* Constructors and destructors are reachable from the runtime by\n-     some mechanism.  */\n-  if (DECL_STATIC_CONSTRUCTOR (decl) || DECL_STATIC_DESTRUCTOR (decl))\n-    return true;\n-\n   return false;\n }\n \n@@ -532,7 +527,9 @@ cgraph_finalize_function (tree decl, bool nested)\n   /* Since we reclaim unreachable nodes at the end of every language\n      level unit, we need to be conservative about possible entry points\n      there.  */\n-  if ((TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl)))\n+  if ((TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n+      || DECL_STATIC_CONSTRUCTOR (decl)\n+      || DECL_STATIC_DESTRUCTOR (decl))\n     cgraph_mark_reachable_node (node);\n \n   /* If we've not yet emitted decl, tell the debug info about it.  */\n@@ -1219,8 +1216,7 @@ cgraph_mark_functions_to_output (void)\n \t outside the current compilation unit.  */\n       if (node->analyzed\n \t  && !node->global.inlined_to\n-\t  && (node->needed || node->reachable_from_other_partition\n-\t      || node->address_taken\n+\t  && (!cgraph_only_called_directly_p (node)\n \t      || (e && node->reachable))\n \t  && !TREE_ASM_WRITTEN (decl)\n \t  && !DECL_EXTERNAL (decl))"}, {"sha": "423729ba81aa0e3f60873d727834a66ebff2a657", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=508e475706c3560a86b08446e1bb764773b93ed9", "patch": "@@ -1,3 +1,10 @@\n+2010-08-20  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c++/45307\n+\tPR c++/17736\n+\t* gcc.dg/ipa/ctor-empty-1.c: Add testcase.\n+\t* g++.dg/tree-ssa/empty-2.C: Check that constructor got optimized out.\n+\n 2010-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/45336"}, {"sha": "2036bebe3046b36be844efc95bbce64344dcaaff", "filename": "gcc/testsuite/g++.dg/tree-ssa/empty-2.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-2.C?ref=508e475706c3560a86b08446e1bb764773b93ed9", "patch": "@@ -1,8 +1,11 @@\n // PR c++/45307\n-// { dg-options -fdump-tree-gimple }\n+// { dg-options \"-fdump-tree-gimple -fdump-tree-optimized\" }\n \n struct fallible_t { };\n const fallible_t fallible = fallible_t();\n \n // { dg-final { scan-tree-dump-not \"fallible\" \"gimple\" } }\n+// Whole constructor should be optimized away.\n+// { dg-final { scan-tree-dump-not \"int\" \"optimized\" } }\n // { dg-final { cleanup-tree-dump \"gimple\" } }\n+// { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "9cd2b09fb0da6e38668efa585329ec50b0fcaa40", "filename": "gcc/testsuite/gcc.dg/ipa/ctor-empty-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e475706c3560a86b08446e1bb764773b93ed9/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c?ref=508e475706c3560a86b08446e1bb764773b93ed9", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -c -fdump-ipa-whole-program\"  } */\n+static __attribute__((constructor))\n+void empty_constructor()\n+{\n+}\n+/* { dg-final { scan-ipa-dump \"Reclaiming functions: empty_constructor\"  \"whole-program\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"whole-program\" } } */"}]}