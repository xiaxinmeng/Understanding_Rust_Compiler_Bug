{"sha": "c557501d33029a97f01105f220131e9b2516f0c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU1NzUwMWQzMzAyOWE5N2YwMTEwNWYyMjAxMzFlOWIyNTE2ZjBjMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-04T09:15:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-04T09:15:17Z"}, "message": "call.c (build_over_call): Don't set TREE_SIDE_EFFECTS for situations where make_node will do it automatically.\n\n1999-10-04  Mark Mitchell  <mark@codesourcery.com>\n\n\t* call.c (build_over_call): Don't set TREE_SIDE_EFFECTS for\n\tsituations where make_node will do it automatically.\n\t* decl.c (grok_reference_init): Likewise.\n\t(expand_static_init): Likewise.\n\t(do_static_initialization): Likewise.\n\t* init.c (perform_member_init): Likewise.\n\t(expand_aggr_init_1): Likewise.\n\t(build_new_1): Likewise.\n\t* method.c (do_build_copy_constructor): Likewise.\n\t(do_build_assign_ref): Likewise.\n\t* search.c (expand_upcast_fixups): Likewise.\n\t* semantics.c (finish_stmt_expr): Likewise.\n\t* typeck.c (build_unary_op): Likewise.\n\t(check_return_expr): Likewise.\n\nFrom-SVN: r29799", "tree": {"sha": "575945e66d009b12d2588f1e5975f2ea2bed86ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/575945e66d009b12d2588f1e5975f2ea2bed86ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c557501d33029a97f01105f220131e9b2516f0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c557501d33029a97f01105f220131e9b2516f0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c557501d33029a97f01105f220131e9b2516f0c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c557501d33029a97f01105f220131e9b2516f0c1/comments", "author": null, "committer": null, "parents": [{"sha": "783feeb0345506e257cc83d5dd1c8ac7b359cbf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783feeb0345506e257cc83d5dd1c8ac7b359cbf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783feeb0345506e257cc83d5dd1c8ac7b359cbf8"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "03d2b1a28091d7338ad7777d4e34d9370987aa5b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -1,3 +1,20 @@\n+1999-10-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* call.c (build_over_call): Don't set TREE_SIDE_EFFECTS for\n+\tsituations where make_node will do it automatically.\n+\t* decl.c (grok_reference_init): Likewise.\n+\t(expand_static_init): Likewise.\n+\t(do_static_initialization): Likewise.\n+\t* init.c (perform_member_init): Likewise.\n+\t(expand_aggr_init_1): Likewise.\n+\t(build_new_1): Likewise.\n+\t* method.c (do_build_copy_constructor): Likewise.\n+\t(do_build_assign_ref): Likewise.\n+\t* search.c (expand_upcast_fixups): Likewise.\n+\t* semantics.c (finish_stmt_expr): Likewise.\n+\t* typeck.c (build_unary_op): Likewise.\n+\t(check_return_expr): Likewise.\n+\n 1999-10-04  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* init.c (build_vec_delete_1): Fold COND_EXPRs."}, {"sha": "5d9f5c3786efcf90cc3174261870ad0dd0504eea", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -4066,7 +4066,6 @@ build_over_call (cand, args, flags)\n \t  val = build (is_empty_class (DECL_CLASS_CONTEXT (fn))\n \t\t       ? MODIFY_EXPR : INIT_EXPR, \n \t\t       DECL_CONTEXT (fn), to, arg);\n-\t  TREE_SIDE_EFFECTS (val) = 1;\n \t  address = build_unary_op (ADDR_EXPR, val, 0);\n \t  /* Avoid a warning about this expression, if the address is\n \t     never used.  */\n@@ -4084,7 +4083,6 @@ build_over_call (cand, args, flags)\n       arg = build_indirect_ref (TREE_VALUE (TREE_CHAIN (converted_args)), 0);\n \n       val = build (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n-      TREE_SIDE_EFFECTS (val) = 1;\n       return val;\n     }\n "}, {"sha": "2ab2a8631f847d75d5daf7089f7ee438db00ebbd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -6999,9 +6999,6 @@ grok_reference_init (decl, type, init)\n \t{\n \t  /* Initialize the declaration.  */\n \t  tmp = build (INIT_EXPR, TREE_TYPE (decl), decl, tmp);\n-\t  /* Setting TREE_SIDE_EFFECTS prevents expand_expr from\n-\t     omitting this expression entirely.  */\n-\t  TREE_SIDE_EFFECTS (tmp) = 1;\n \t  finish_expr_stmt (tmp);\n \t}\n       else\n@@ -8028,12 +8025,9 @@ expand_static_init (decl, init)\n \t  || (init && TREE_CODE (init) == TREE_LIST))\n \tassignment = build_aggr_init (decl, init, 0);\n       else if (init)\n-\t{\n-\t  /* The initialization we're doing here is just a bitwise\n-\t     copy.  */\n-\t  assignment = build (INIT_EXPR, TREE_TYPE (decl), decl, init);\n-\t  TREE_SIDE_EFFECTS (assignment) = 1;\n-\t}\n+\t/* The initialization we're doing here is just a bitwise\n+\t   copy.  */\n+\tassignment = build (INIT_EXPR, TREE_TYPE (decl), decl, init);\n       else\n \tassignment = NULL_TREE;\n "}, {"sha": "0bd2740a7877a71e5a9a3e917fe6ea82068f74e7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -149,7 +149,6 @@ perform_member_init (member, name, init, explicit)\n   if (ANON_AGGR_TYPE_P (type))\n     {\n       init = build (INIT_EXPR, type, decl, TREE_VALUE (init));\n-      TREE_SIDE_EFFECTS (init) = 1;\n       finish_expr_stmt (init);\n     }\n   else if (TYPE_NEEDS_CONSTRUCTING (type)\n@@ -1247,11 +1246,7 @@ expand_aggr_init_1 (binfo, true_exp, exp, init, flags)\n \t    expand_decl_init (exp);\n \t}\n       else\n-\t{\n-\t  tree t = build (INIT_EXPR, type, exp, init);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\t  finish_expr_stmt (t);\n-\t}\n+\tfinish_expr_stmt (build (INIT_EXPR, type, exp, init));\n       return;\n     }\n \n@@ -2271,7 +2266,6 @@ build_new_1 (exp)\n \t\t    build_component_ref (cookie, nelts_identifier,\n \t\t\t\t\t NULL_TREE, 0),\n \t\t    nelts);\n-      TREE_SIDE_EFFECTS (exp1) = 1;\n       rval = cp_convert (build_pointer_type (true_type), rval);\n       rval = build_compound_expr\n \t(tree_cons (NULL_TREE, exp1,\n@@ -2424,7 +2418,6 @@ build_new_1 (exp)\n \n \t      end = build (MODIFY_EXPR, TREE_TYPE (sentry),\n \t\t\t   sentry, boolean_false_node);\n-\t      TREE_SIDE_EFFECTS (end) = 1;\n \n \t      buf = TREE_OPERAND (rval, 0);\n "}, {"sha": "8cb4eb3082adf860e97cb07a00d56e28b7f92ec4", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -2188,7 +2188,6 @@ do_build_copy_constructor (fndecl)\n   else if (TYPE_HAS_TRIVIAL_INIT_REF (current_class_type))\n     {\n       t = build (INIT_EXPR, void_type_node, current_class_ref, parm);\n-      TREE_SIDE_EFFECTS (t) = 1;\n       finish_expr_stmt (t);\n     }\n   else\n@@ -2270,7 +2269,6 @@ do_build_assign_ref (fndecl)\n   else if (TYPE_HAS_TRIVIAL_ASSIGN_REF (current_class_type))\n     {\n       tree t = build (MODIFY_EXPR, void_type_node, current_class_ref, parm);\n-      TREE_SIDE_EFFECTS (t) = 1;\n       finish_expr_stmt (t);\n     }\n   else"}, {"sha": "a8e8ac140522558284266765fa6765c5befb7ac5", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -2680,7 +2680,6 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n \n \t      init = build (MODIFY_EXPR, TREE_TYPE (nvtbl),\n \t\t\t    nvtbl, vtbl);\n-\t      TREE_SIDE_EFFECTS (init) = 1;\n \t      finish_expr_stmt (init);\n \t      /* Update the vtable pointers as necessary.  */\n \t      ref = build_vfield_ref"}, {"sha": "eb94da0f6e880eb761685a54c12648a9d9169021", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -1356,11 +1356,7 @@ finish_stmt_expr (rtl_expr)\n   tree result;\n \n   if (!building_stmt_tree ())\n-    {\n-      rtl_expr = expand_end_stmt_expr (rtl_expr);\n-      /* The statements have side effects, so the group does too.  */\n-      TREE_SIDE_EFFECTS (rtl_expr) = 1;\n-    }\n+    rtl_expr = expand_end_stmt_expr (rtl_expr);\n \n   if (building_stmt_tree ())\n     {"}, {"sha": "2b766d68dfa86ddda7b5b8575e3478d44a9b1648", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c557501d33029a97f01105f220131e9b2516f0c1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c557501d33029a97f01105f220131e9b2516f0c1", "patch": "@@ -4567,7 +4567,6 @@ build_unary_op (code, xarg, noconvert)\n \t\t\t\t     || code == POSTINCREMENT_EXPR)\n \t\t\t\t    ? PLUS_EXPR : MINUS_EXPR),\n \t\t\t\t   argtype, value, inc);\n-\t      TREE_SIDE_EFFECTS (incremented) = 1;\n \n \t      modify = build_modify_expr (arg, NOP_EXPR, incremented);\n \t      compound = build (COMPOUND_EXPR, TREE_TYPE (arg), modify, value);\n@@ -4605,7 +4604,6 @@ build_unary_op (code, xarg, noconvert)\n \t\targ = stabilize_reference (arg);\n \t\tval = build (MODIFY_EXPR, TREE_TYPE (arg), arg,\n \t\t\t     boolean_true_node);\n-\t\tTREE_SIDE_EFFECTS (val) = 1;\n \t\targ = save_expr (arg);\n \t\tval = build (COMPOUND_EXPR, TREE_TYPE (arg), val, arg);\n \t\tval = build (COMPOUND_EXPR, TREE_TYPE (arg), arg, val);\n@@ -6854,10 +6852,7 @@ check_return_expr (retval)\n   \n   /* Actually copy the value returned into the appropriate location.  */\n   if (retval && retval != result)\n-    {\n-      retval = build (INIT_EXPR, TREE_TYPE (result), result, retval);\n-      TREE_SIDE_EFFECTS (retval) = 1;\n-    }\n+    retval = build (INIT_EXPR, TREE_TYPE (result), result, retval);\n \n   /* All done.  Remember that this function did return a value.  */\n   current_function_returns_value = 1;"}]}