{"sha": "8f482165c975f0a8410e3c8ecb0c011d409062d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0ODIxNjVjOTc1ZjBhODQxMGUzYzhlY2IwYzAxMWQ0MDkwNjJkOQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2016-06-15T10:53:01Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2016-06-15T10:53:01Z"}, "message": "re PR tree-optimization/71439 (wrong code at -O3 in 32-bit and 64-bit mode on x86_64-linux-gnu)\n\n2016-06-15  Alan Hayward  <alan.hayward@arm.com>\n\ngcc/\n\tPR tree-optimization/71439\n\t* tree-vect-loop.c (vect_analyze_loop_operations): Additional check for\n\tlive PHIs.\n\ntestsuite/\n\tPR tree-optimization/71439\n\t* gcc.dg/vect/pr71439.c: New\n\nFrom-SVN: r237476", "tree": {"sha": "eba3649ce4a6b1b60e6d44d00572986dae6a68f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba3649ce4a6b1b60e6d44d00572986dae6a68f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f482165c975f0a8410e3c8ecb0c011d409062d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f482165c975f0a8410e3c8ecb0c011d409062d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f482165c975f0a8410e3c8ecb0c011d409062d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f482165c975f0a8410e3c8ecb0c011d409062d9/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3256673f86cb878b41da25db3d4785418d6cf2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256673f86cb878b41da25db3d4785418d6cf2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3256673f86cb878b41da25db3d4785418d6cf2c9"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "568d385a10f18a22d463fb28d9a1debec53acf19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f482165c975f0a8410e3c8ecb0c011d409062d9", "patch": "@@ -1,3 +1,9 @@\n+2016-06-15  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71439\n+\t* tree-vect-loop.c (vect_analyze_loop_operations): Additional check for\n+\tlive PHIs.\n+\n 2016-06-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* ifcvt.c (bb_ok_for_noce_multiple_sets): Allow simple lowpart"}, {"sha": "9e332a264e461682891d5cb62301a04f3ec3cb70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f482165c975f0a8410e3c8ecb0c011d409062d9", "patch": "@@ -1,3 +1,8 @@\n+2016-06-15  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71439\n+\t* gcc.dg/vect/pr71439.c: New\n+\n 2016-06-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/ifcvt_multiple_sets_subreg_1.c: New test."}, {"sha": "95e4763bad6e9f301d53c20ffa160b96bdad9a53", "filename": "gcc/testsuite/gcc.dg/vect/pr71439.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71439.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71439.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71439.c?ref=8f482165c975f0a8410e3c8ecb0c011d409062d9", "patch": "@@ -0,0 +1,17 @@\n+#include \"tree-vect.h\"\n+\n+int a, b, c;\n+short fn1(int p1, int p2) { return p1 + p2; }\n+\n+int main() {\n+  a = 0;\n+  for (; a < 30; a = fn1(a, 4)) {\n+    c = b;\n+    b = 6;\n+  }\n+\n+  if (c != 6)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "4c8678505df6ec572b69fd7d12ac55cf4619ece6", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f482165c975f0a8410e3c8ecb0c011d409062d9/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8f482165c975f0a8410e3c8ecb0c011d409062d9", "patch": "@@ -1669,7 +1669,8 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n \n           gcc_assert (stmt_info);\n \n-          if (STMT_VINFO_RELEVANT (stmt_info) == vect_used_in_scope\n+          if ((STMT_VINFO_RELEVANT (stmt_info) == vect_used_in_scope\n+               || STMT_VINFO_LIVE_P (stmt_info))\n               && STMT_VINFO_DEF_TYPE (stmt_info) != vect_induction_def)\n             {\n               /* A scalar-dependence cycle that we don't support.  */\n@@ -1686,6 +1687,9 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n                 ok = vectorizable_induction (phi, NULL, NULL);\n             }\n \n+\t  if (ok && STMT_VINFO_LIVE_P (stmt_info))\n+\t    ok = vectorizable_live_operation (phi, NULL, NULL, -1, NULL);\n+\n           if (!ok)\n             {\n               if (dump_enabled_p ())"}]}