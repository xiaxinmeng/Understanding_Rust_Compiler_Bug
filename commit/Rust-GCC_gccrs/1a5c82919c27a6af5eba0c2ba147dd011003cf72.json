{"sha": "1a5c82919c27a6af5eba0c2ba147dd011003cf72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1YzgyOTE5YzI3YTZhZjVlYmEwYzJiYTE0N2RkMDExMDAzY2Y3Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-09T17:24:00Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-09T17:24:00Z"}, "message": "aarch64: Fix push/pop_options with --with-cpu\n\nIf a toolchain is configured with --with-cpu=X and gcc is\nthen run with an explicit -march=Y option, we ignore the\nX cpu setting and tune for generic Y code:\n\n  if (!selected_cpu)\n    {\n      if (selected_arch)\n        {\n------>   selected_cpu = &all_cores[selected_arch->ident];\n          aarch64_isa_flags = arch_isa;\n          explicit_arch = selected_arch->arch;\n        }\n      else\n        {\n          /* Get default configure-time CPU.  */\n          selected_cpu = aarch64_get_tune_cpu (aarch64_none);\n          aarch64_isa_flags = TARGET_CPU_DEFAULT >> 6;\n        }\n\n      if (selected_tune)\n        explicit_tune_core = selected_tune->ident;\n    }\n  \u2026\n  if (!selected_tune)\n    selected_tune = selected_cpu;\n\nBut after a push/pop_options pair, we simply did:\n\n  selected_tune = aarch64_get_tune_cpu (ptr->x_explicit_tune_core);\n\nIn the above scenario, ptr->x_explicit_tune_core is aarch64_none,\nso we fall back on the default configure-time CPU.  This means\nthat before the push_options we tuned for generic Y but after\nthe pop_options we tuned for X.\n\nThis was picked up by an assertion failure in cl_optimization_compare.\nThe ICE itself is a GCC 11 regression, but the problem that it shows\nup is much older.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_option_restore): If the\n\tarchitecture was specified explicitly and the tuning wasn't,\n\ttune for the architecture rather than the configured default CPU.", "tree": {"sha": "1ae4581cbab3184bbb507a13c41034927f47b940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae4581cbab3184bbb507a13c41034927f47b940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a5c82919c27a6af5eba0c2ba147dd011003cf72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5c82919c27a6af5eba0c2ba147dd011003cf72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5c82919c27a6af5eba0c2ba147dd011003cf72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5c82919c27a6af5eba0c2ba147dd011003cf72/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00c3c31be43c018870569a599200a8af84956487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c3c31be43c018870569a599200a8af84956487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c3c31be43c018870569a599200a8af84956487"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "640550419dc4032fd4c9088dc76f381f4e6ef8e4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c82919c27a6af5eba0c2ba147dd011003cf72/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c82919c27a6af5eba0c2ba147dd011003cf72/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1a5c82919c27a6af5eba0c2ba147dd011003cf72", "patch": "@@ -16945,10 +16945,14 @@ aarch64_option_restore (struct gcc_options *opts,\n \t\t\tstruct gcc_options */* opts_set */,\n \t\t\tstruct cl_target_option *ptr)\n {\n-  opts->x_explicit_tune_core = ptr->x_explicit_tune_core;\n-  selected_tune = aarch64_get_tune_cpu (ptr->x_explicit_tune_core);\n   opts->x_explicit_arch = ptr->x_explicit_arch;\n   selected_arch = aarch64_get_arch (ptr->x_explicit_arch);\n+  opts->x_explicit_tune_core = ptr->x_explicit_tune_core;\n+  if (opts->x_explicit_tune_core == aarch64_none\n+      && opts->x_explicit_arch != aarch64_no_arch)\n+    selected_tune = &all_cores[selected_arch->ident];\n+  else\n+    selected_tune = aarch64_get_tune_cpu (ptr->x_explicit_tune_core);\n   opts->x_aarch64_override_tune_string = ptr->x_aarch64_override_tune_string;\n   opts->x_aarch64_branch_protection_string\n     = ptr->x_aarch64_branch_protection_string;"}]}