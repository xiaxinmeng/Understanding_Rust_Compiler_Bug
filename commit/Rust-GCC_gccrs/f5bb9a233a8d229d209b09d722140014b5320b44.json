{"sha": "f5bb9a233a8d229d209b09d722140014b5320b44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjViYjlhMjMzYThkMjI5ZDIwOWIwOWQ3MjIxNDAwMTRiNTMyMGI0NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-08T19:57:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-08T19:57:18Z"}, "message": "stmt.c (expand_decl_init): Remove.\n\n\t* stmt.c (expand_decl_init): Remove.\n\t* tree.h: Remove the corresponding prototype.\n\nFrom-SVN: r88788", "tree": {"sha": "41cb5b6625e1dcbcfe268ce995ce90c6e7abe34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41cb5b6625e1dcbcfe268ce995ce90c6e7abe34a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5bb9a233a8d229d209b09d722140014b5320b44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5bb9a233a8d229d209b09d722140014b5320b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5bb9a233a8d229d209b09d722140014b5320b44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5bb9a233a8d229d209b09d722140014b5320b44/comments", "author": null, "committer": null, "parents": [{"sha": "2a9772e3f82d2dc90ab56076f31fb29cb8f450da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9772e3f82d2dc90ab56076f31fb29cb8f450da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9772e3f82d2dc90ab56076f31fb29cb8f450da"}], "stats": {"total": 48, "additions": 5, "deletions": 43}, "files": [{"sha": "9d8d386fad6ef174fc5d81ab7bd28e91be76e585", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5bb9a233a8d229d209b09d722140014b5320b44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5bb9a233a8d229d209b09d722140014b5320b44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5bb9a233a8d229d209b09d722140014b5320b44", "patch": "@@ -1,3 +1,8 @@\n+2004-10-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* stmt.c (expand_decl_init): Remove.\n+\t* tree.h: Remove the corresponding prototype.\n+\n 2004-10-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* integrate.c (try_constants, subst_constants, mark_stores):"}, {"sha": "3d7ad36b7210099317dd36dc0dfabc6aec139262", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5bb9a233a8d229d209b09d722140014b5320b44/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5bb9a233a8d229d209b09d722140014b5320b44/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f5bb9a233a8d229d209b09d722140014b5320b44", "patch": "@@ -2051,48 +2051,6 @@ expand_stack_restore (tree var)\n \n   emit_stack_restore (SAVE_BLOCK, sa, NULL_RTX);\n }\n-\f\n-/* Emit code to perform the initialization of a declaration DECL.  */\n-\n-void\n-expand_decl_init (tree decl)\n-{\n-  int was_used = TREE_USED (decl);\n-\n-  /* If this is a CONST_DECL, we don't have to generate any code.  Likewise\n-     for static decls.  */\n-  if (TREE_CODE (decl) == CONST_DECL\n-      || TREE_STATIC (decl))\n-    return;\n-\n-  /* Compute and store the initial value now.  */\n-\n-  push_temp_slots ();\n-\n-  if (DECL_INITIAL (decl) == error_mark_node)\n-    {\n-      enum tree_code code = TREE_CODE (TREE_TYPE (decl));\n-\n-      if (code == INTEGER_TYPE || code == REAL_TYPE || code == ENUMERAL_TYPE\n-\t  || code == POINTER_TYPE || code == REFERENCE_TYPE)\n-\texpand_assignment (decl, convert (TREE_TYPE (decl), integer_zero_node),\n-\t\t\t   0);\n-    }\n-  else if (DECL_INITIAL (decl) && TREE_CODE (DECL_INITIAL (decl)) != TREE_LIST)\n-    {\n-      emit_line_note (DECL_SOURCE_LOCATION (decl));\n-      expand_assignment (decl, DECL_INITIAL (decl), 0);\n-    }\n-\n-  /* Don't let the initialization count as \"using\" the variable.  */\n-  TREE_USED (decl) = was_used;\n-\n-  /* Free any temporaries we made while initializing the decl.  */\n-  preserve_temp_slots (NULL_RTX);\n-  free_temp_slots ();\n-  pop_temp_slots ();\n-}\n-\n \f\n /* DECL is an anonymous union.  CLEANUP is a cleanup for DECL.\n    DECL_ELTS is the list of elements that belong to DECL's type."}, {"sha": "89771afa7d2eb5d8a52fc13c4366e85c6c7837d2", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5bb9a233a8d229d209b09d722140014b5320b44/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5bb9a233a8d229d209b09d722140014b5320b44/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f5bb9a233a8d229d209b09d722140014b5320b44", "patch": "@@ -3466,7 +3466,6 @@ extern bool commutative_tree_code (enum tree_code);\n extern void expand_expr_stmt (tree);\n extern void expand_expr_stmt_value (tree, int, int);\n extern int warn_if_unused_value (tree, location_t);\n-extern void expand_decl_init (tree);\n extern void expand_label (tree);\n extern void expand_goto (tree);\n extern void expand_asm (tree, int);"}]}