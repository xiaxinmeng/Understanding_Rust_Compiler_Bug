{"sha": "f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlZWFiYzFmZDBmZmY1Yjc3ZGI4NjcyZmYwYzYzMGJmODkxZjQwYQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-12-13T11:48:26Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-12-13T11:48:26Z"}, "message": "testsuite: Fix various scan-assembler-symbol-section issues\n\nThis patch addresses some of the issues that I found when looking into the\nfailures of the scan-assembler-symbol-section tests on Solaris/SPARC.\n\n* The first issue was that on Solaris/SPARC, section names are\n  double-quoted, both with as and gas:\n\n        .section        \".text\"\n\n  When using as, the section flag and type syntax is completely\n  different from other ELF targets:\n\n        .section        \"my_named_section\",#alloc,#execinstr,#progbits\n\n  This patch fixes this by stripping double quotes from section names.\n\n* However, this didn't work initially (only the leading quote was\n  stripped), which is due to David's recent AIX patch: with the\n  introduction of the new capturing group to handle both .section (ELF)\n  and .csect (XCOFF), $full_section_directive would never be empty on\n  ELF and Mach-O targets, so the extraction of the section name didn't\n  work any longer.  This had also broken the Darwin tests completely.\n\n* With working double quote stripping, all but one of the tests PASSed\n  on Solaris/SPARC, the exception being:\n\nFAIL: gcc.dg/20021029-1.c scan-assembler-symbol-section symbol ar (found __sparc_get_pc_thunk.l7) has section ^\\\\\\\\.(const|rodata)|\\\\\\\\[RO\\\\\\\\] (found .text.__sparc_get_pc_thunk.l7%__sparc_get_pc_thunk.l7)\n\n  This is due to the symbol name (ar) not being anchored in the test and\n  unexpectedly matchting __sparc_get_pc_thunk.l7.\n\n* Next, I ran the tests on Darwin 11 and found two failing tests:\n\nFAIL: gcc.dg/darwin-sections.c scan-assembler-symbol-section symbol ^_a\\$ (symbol not found) has section \\\\\\\\.data\nFAIL: gcc.dg/darwin-sections.c scan-assembler-symbol-section symbol ^_b\\$ (symbol not found) has section \\\\\\\\.data\n\n  is due to Iain's recent \"Darwin : Begin rework of zero-fill sections.\"\n  patch which emits\n\n        .globl _a\n        .zerofill __DATA,__common,_a,1,0\n\n  This is already scanned for, so the two scans above can just go.\n\n  The other failing test is\n\nFAIL: g++.dg/gomp/tls-5.C  -std=c++14  scan-assembler-symbol-section symbol ^_?_ZGR2ir_\\$ (symbol not found) has section ^\\\\\\\\.tdata|\\\\\\\\[TL\\\\\\\\]\nFAIL: g++.dg/gomp/tls-5.C  -std=c++14  scan-assembler-symbol-section symbol ^_?ir\\$ (symbol not found) has section ^\\\\\\\\.tbss|\\\\\\\\[TL\\\\\\\\]\n\n  Other scans are guarded by target tls_native, and indeed the assembler\n  output has\n\n___emutls_v._ZGR2ir_:\n___emutls_t._ZGR2ir_:\n\n___emutls_v.ir:\n\n  Unfortunately scan-assembler-symbol-section doesn't support selects\n  yet, which this test implements both for the benefit of this test and\n  for symmetry.\n\nWith those changes, test results are clean now on sparc-sun-solaris2.11,\ni386-pc-solaris2.11, i386-apple-darwin11.4.2, and\npowerpc-ibm-aix7.2.4.0.\n\n2020-12-03  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\tgcc:\n\t* doc/sourcebuild.texi (Commands for use in dg-final, Scan the\n\tassembly output, scan-assembler-symbol-section): Document.\n\t(scan-symbol-section): Document.\n\n\tgcc/testsuite:\n\t* lib/scanasm.exp (scan-symbol-section): Pass args to\n\tdg-scan-symbol-section.\n\t(scan-assembler-symbol-section): Likewise.\n\t(dg-scan-symbol-section): Handle selector from orig_args.\n\tGet patterns from orig_args.\n\t(parse_section_of_symbols): Fix section_pattern.\n\tStrip double quotes from section name.\n\n\t* g++.dg/gomp/tls-5.C: Restrict ir, _ZGR2ir_ scans to tls_native.\n\t* gcc.dg/20021029-1.c: Anchor ar symbol.\n\t* gcc.dg/darwin-sections.c: Remove obsolete scans for _a, _b in\n\t.data.", "tree": {"sha": "75fb99268459b0f284067ae3cfc0a97d449f8781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75fb99268459b0f284067ae3cfc0a97d449f8781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1498b1a8fb82834a8578a2a9a3525f38c3483d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1498b1a8fb82834a8578a2a9a3525f38c3483d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1498b1a8fb82834a8578a2a9a3525f38c3483d1e"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "4159ebb1ff56e6f049f20afbd4f02c76b10f9d33", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "patch": "@@ -2923,6 +2923,14 @@ Passes if @var{regex} matches text in the test's demangled assembler output.\n Passes if @var{regex} does not match text in the test's demangled assembler\n output.\n \n+@item scan-assembler-symbol-section @var{functions} @var{section} [@{ target/xfail @var{selector} @}]\n+Passes if @var{functions} are all in @var{section}.  The caller needs to\n+allow for @code{USER_LABEL_PREFIX} and different section name conventions.\n+\n+@item scan-symbol-section @var{filename} @var{functions} @var{section} [@{ target/xfail @var{selector} @}]\n+Passes if @var{functions} are all in @var{section}in @var{filename}.\n+The same caveats as for @code{scan-assembler-symbol-section} apply.\n+\n @item scan-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n Passes if @var{symbol} is defined as a hidden symbol in the test's\n assembly output."}, {"sha": "eb187b66a345c1f5cfdc5af51e91424d7a26a77d", "filename": "gcc/testsuite/g++.dg/gomp/tls-5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftls-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftls-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftls-5.C?ref=f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "patch": "@@ -1,8 +1,8 @@\n // The reference temp should be TLS, not normal data.\n // { dg-require-effective-target c++11 }\n // { dg-final { scan-assembler-not \"\\\\.data\" { target tls_native xfail powerpc-*-aix* } } }\n-// { dg-final { scan-assembler-symbol-section {^_?ir$} {^\\.tbss|\\[TL\\]} } }\n-// { dg-final { scan-assembler-symbol-section {^_?_ZGR2ir_$} {^\\.tdata|\\[TL\\]} } }\n+// { dg-final { scan-assembler-symbol-section {^_?ir$} {^\\.tbss|\\[TL\\]} { target tls_native } } }\n+// { dg-final { scan-assembler-symbol-section {^_?_ZGR2ir_$} {^\\.tdata|\\[TL\\]} { target tls_native } } }\n \n extern int&& ir;\n #pragma omp threadprivate (ir)"}, {"sha": "d13f66977e1d4bd0acb81b62ba30cec4c986d988", "filename": "gcc/testsuite/gcc.dg/20021029-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Fgcc.dg%2F20021029-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Fgcc.dg%2F20021029-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20021029-1.c?ref=f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile { target fpic } } */\n /* { dg-options \"-O2 -fpic\" } */\n /* { dg-final { scan-assembler-not \".data.rel.ro.local\" } } */\n-/* { dg-final { scan-assembler-symbol-section {ar} {^\\.(const|rodata)|\\[RO\\]} } } */\n+/* { dg-final { scan-assembler-symbol-section {^_?ar} {^\\.(const|rodata)|\\[RO\\]} } } */\n /* { dg-require-effective-target label_values } */\n /* { dg-require-effective-target indirect_jumps } */\n "}, {"sha": "dbe37027f89f7d648cdc0626d0e20f41d55a663b", "filename": "gcc/testsuite/gcc.dg/darwin-sections.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-sections.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-sections.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-sections.c?ref=f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "patch": "@@ -10,9 +10,7 @@ typedef struct _empty {} e_s;\n /* These should go in .comm */\n char ub;\n e_s ea;\n-/* { dg-final { scan-assembler-symbol-section {^_a$} {\\.data} } } */\n /* { dg-final { scan-assembler \".comm\\[\\t \\]_ub,1\" } } */\n-/* { dg-final { scan-assembler-symbol-section {^_b$} {\\.data} } } */\n /* { dg-final { scan-assembler \".comm\\[\\t \\]_ea,1\" } } */\n \n /* These should go into __DATA,__common */"}, {"sha": "18fef387570bbeb1415b96f627bd49007a9a2ab5", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1eeabc1fd0fff5b77db8672ff0c630bf891f40a/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=f1eeabc1fd0fff5b77db8672ff0c630bf891f40a", "patch": "@@ -173,14 +173,8 @@ proc scan-assembler-symbol-section { args } {\n     set testcase [testname-for-summary]\n     set filename [lindex $testcase 0]\n     set output_file \"[file rootname [file tail $filename]].s\"\n-    set symbol_pattern [lindex $args 0]\n-    set expected_section_pattern [lindex $args 1]\n     dg-scan-symbol-section \\\n-    \"scan-assembler-symbol-section\" \\\n-    $testcase \\\n-    $output_file \\\n-    $symbol_pattern \\\n-    $expected_section_pattern\n+\t\"scan-assembler-symbol-section\" $testcase $output_file $args\n }\n \n # Check that symbols are emitted in the desired section.\n@@ -227,22 +221,44 @@ proc scan-assembler-symbol-section { args } {\n proc scan-symbol-section { args } {\n     set testcase [testname-for-summary]\n     set output_file [lindex $args 0]\n-    set symbol_pattern [lindex $args 1]\n-    set expected_section_pattern [lindex $args 2]\n     dg-scan-symbol-section \\\n-    \"scan-symbol-section\" \\\n-    $testcase \\\n-    $output_file \\\n-    $symbol_pattern \\\n-    $expected_section_pattern\n+\t\"scan-symbol-section\" $testcase $output_file $args\n }\n \n-# Check that symbols are emitted in the desired section.\n+# Check that symbols are emitted in the desired section.  The ORIG_ARGS is\n+# the list of arguments provided by dg-final to scan-symbol-section or\n+# scan-assembler-symbol-section.  The first element in ORIG_ARGS is the\n+# regular expression to look for in the file.  The second element, if\n+# present, is a DejaGNU target selector.\n #\n-# Avoid calling this function directly. In tests, use scan-symbol-section,\n+# Avoid calling this function directly.  In tests, use scan-symbol-section,\n # scan-assembler-symbol-section, or scan-lto-assembler-symbol-section instead.\n \n-proc dg-scan-symbol-section { name testcase output_file symbol_pattern expected_section_pattern } {\n+proc dg-scan-symbol-section { name testcase output_file orig_args } {\n+    if { [llength $orig_args] < 2 } {\n+\terror \"$name: too few arguments\"\n+        return\n+    }\n+    if { [llength $orig_args] > 4 } {\n+\terror \"$name: too many arguments\"\n+\treturn\n+    }\n+    switch $name {\n+\t\"scan-symbol-section\" { set arg_incr 1 }\n+\tdefault { set arg_incr 0 }\n+    }\n+    if { [llength $orig_args] >= 3 } {\n+\tswitch [dg-process-target [lindex $orig_args [expr 2 + $arg_incr]]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { setup_xfail \"*-*-*\" }\n+\t    \"P\" { }\n+\t}\n+    }\n+\n+    set symbol_pattern [lindex $orig_args [expr 0 + $arg_incr]]\n+    set expected_section_pattern [lindex $orig_args [expr 1 + $arg_incr]]\n+\n     set printable_symbol_pattern [make_pattern_printable $symbol_pattern]\n     set printable_expected_section_pattern [make_pattern_printable $expected_section_pattern]\n \n@@ -303,7 +319,7 @@ proc dg-scan-symbol-section { name testcase output_file symbol_pattern expected_\n proc parse_section_of_symbols { filename result } {\n     upvar $result up_result\n \n-    set section_pattern {^\\s*(?:(\\.section|\\.csect)\\s+(.*)|(\\.const|\\.data|\\.text)\\s*)$}\n+    set section_pattern {^\\s*(?:(?:\\.section|\\.csect)\\s+(.*)|(\\.const|\\.data|\\.text)\\s*)$}\n     set label_pattern {^(\\S+):$}\n \n     set fd [open $filename r]\n@@ -314,9 +330,11 @@ proc parse_section_of_symbols { filename result } {\n         } elseif { [regexp -- $section_pattern $line dummy section_directive_arguments full_section_directive] } {\n             if { $full_section_directive eq \"\" } {\n                 # Example: .section .text,\"ax\",progbits\n+                # Example: .section \".text\",#alloc,#execinstr,#progbits\n                 # Example: .section __TEXT,__text\n                 set arguments [split $section_directive_arguments \",\"]\n                 set current_section [string trim [lindex $arguments 0]]\n+                set current_section [string trim $current_section {\"}]\n                 set arg_1 [string trim [lindex $arguments 1]]\n                 if { [regexp {^_} $arg_1] } {\n                     # The second argument looks like a Mach-O section name."}]}