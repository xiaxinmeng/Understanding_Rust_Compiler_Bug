{"sha": "d0b6bb1b12b417f73f36a7405b44fd5b51197159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiNmJiMWIxMmI0MTdmNzNmMzZhNzQwNWI0NGZkNWI1MTE5NzE1OQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-01-16T16:21:05Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-01-16T16:21:05Z"}, "message": "Make zero_extends explicit for some more SImode patterns (AArch64)\n\nFrom-SVN: r195243", "tree": {"sha": "973b8f80e643dd69dc2940bc4e6ee9fc9a2ae500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973b8f80e643dd69dc2940bc4e6ee9fc9a2ae500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b6bb1b12b417f73f36a7405b44fd5b51197159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b6bb1b12b417f73f36a7405b44fd5b51197159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b6bb1b12b417f73f36a7405b44fd5b51197159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b6bb1b12b417f73f36a7405b44fd5b51197159/comments", "author": null, "committer": null, "parents": [{"sha": "f34dea03005c1cddd28e8bca73dffb4b05c1aff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34dea03005c1cddd28e8bca73dffb4b05c1aff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f34dea03005c1cddd28e8bca73dffb4b05c1aff7"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "2205dc4724e5826f2a5554f6cf9dd5cb17f08111", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6bb1b12b417f73f36a7405b44fd5b51197159/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6bb1b12b417f73f36a7405b44fd5b51197159/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b6bb1b12b417f73f36a7405b44fd5b51197159", "patch": "@@ -1,3 +1,13 @@\n+2013-01-16  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64.md\n+\t(*cstoresi_neg_uxtw): New pattern.\n+\t(*cmovsi_insn_uxtw): New pattern.\n+\t(*<optab>si3_uxtw): New pattern.\n+\t(*<LOGICAL:optab>_<SHIFT:optab>si3_uxtw): New pattern.\n+\t(*<optab>si3_insn_uxtw): New pattern.\n+\t(*bswapsi2_uxtw): New pattern.\n+\n 2013-01-16  Richard Biener  <rguenther@suse.de>\n \n \t* tree-inline.c (tree_function_versioning): Remove set but"}, {"sha": "73d86a7a184d0fd6365f1c1600c226b0cfa4dbd9", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6bb1b12b417f73f36a7405b44fd5b51197159/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6bb1b12b417f73f36a7405b44fd5b51197159/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d0b6bb1b12b417f73f36a7405b44fd5b51197159", "patch": "@@ -2198,6 +2198,18 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of the above\n+(define_insn \"*cstoresi_insn_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (match_operator:SI 1 \"aarch64_comparison_operator\"\n+\t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n+  \"\"\n+  \"cset\\\\t%w0, %m1\"\n+  [(set_attr \"v8type\" \"csel\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*cstore<mode>_neg\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n \t(neg:ALLI (match_operator:ALLI 1 \"aarch64_comparison_operator\"\n@@ -2208,6 +2220,18 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of the above\n+(define_insn \"*cstoresi_neg_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (neg:SI (match_operator:SI 1 \"aarch64_comparison_operator\"\n+\t\t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))))]\n+  \"\"\n+  \"csetm\\\\t%w0, %m1\"\n+  [(set_attr \"v8type\" \"csel\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_expand \"cmov<mode>6\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"\")\n \t(if_then_else:GPI\n@@ -2262,6 +2286,30 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*cmovsi_insn_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,r,r,r,r\")\n+\t(zero_extend:DI\n+\t (if_then_else:SI\n+\t  (match_operator 1 \"aarch64_comparison_operator\"\n+\t   [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n+\t  (match_operand:SI 3 \"aarch64_reg_zero_or_m1_or_1\" \"rZ,rZ,UsM,rZ,Ui1,UsM,Ui1\")\n+\t  (match_operand:SI 4 \"aarch64_reg_zero_or_m1_or_1\" \"rZ,UsM,rZ,Ui1,rZ,UsM,Ui1\"))))]\n+  \"!((operands[3] == const1_rtx && operands[4] == constm1_rtx)\n+     || (operands[3] == constm1_rtx && operands[4] == const1_rtx))\"\n+  ;; Final two alternatives should be unreachable, but included for completeness\n+  \"@\n+   csel\\\\t%w0, %w3, %w4, %m1\n+   csinv\\\\t%w0, %w3, wzr, %m1\n+   csinv\\\\t%w0, %w4, wzr, %M1\n+   csinc\\\\t%w0, %w3, wzr, %m1\n+   csinc\\\\t%w0, %w4, wzr, %M1\n+   mov\\\\t%w0, -1\n+   mov\\\\t%w0, 1\"\n+  [(set_attr \"v8type\" \"csel\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*cmov<mode>_insn\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n \t(if_then_else:GPF\n@@ -2374,6 +2422,17 @@\n   [(set_attr \"v8type\" \"logic,logic_imm\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; zero_extend version of above\n+(define_insn \"*<optab>si3_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,rk\")\n+\t(zero_extend:DI\n+         (LOGICAL:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n+\t\t     (match_operand:SI 2 \"aarch64_logical_operand\" \"r,K\"))))]\n+  \"\"\n+  \"<logical>\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"logic,logic_imm\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*<LOGICAL:optab>_<SHIFT:optab><mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(LOGICAL:GPI (SHIFT:GPI\n@@ -2385,6 +2444,19 @@\n   [(set_attr \"v8type\" \"logic_shift\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; zero_extend version of above\n+(define_insn \"*<LOGICAL:optab>_<SHIFT:optab>si3_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (LOGICAL:SI (SHIFT:SI\n+\t\t      (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n+\t\t     (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"<LOGICAL:logical>\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n+  [(set_attr \"v8type\" \"logic_shift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(not:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))]\n@@ -2596,6 +2668,18 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*<optab>si3_insn_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (SHIFT:SI\n+\t (match_operand:SI 1 \"register_operand\" \"r\")\n+\t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_si\" \"rUss\"))))]\n+  \"\"\n+  \"<shift>\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"shift\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*ashl<mode>3_insn\"\n   [(set (match_operand:SHORT 0 \"register_operand\" \"=r\")\n \t(ashift:SHORT (match_operand:SHORT 1 \"register_operand\" \"r\")\n@@ -2733,6 +2817,16 @@\n    (set_attr \"mode\" \"HI\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*bswapsi2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (zero_extend:DI (bswap:SI (match_operand:SI 1 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"rev\\\\t%w0, %w1\"\n+  [(set_attr \"v8type\" \"rev\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Floating-point intrinsics\n ;; -------------------------------------------------------------------"}]}