{"sha": "5dc99c46786e91f2892c4318ed36054302e0c964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjOTljNDY3ODZlOTFmMjg5MmM0MzE4ZWQzNjA1NDMwMmUwYzk2NA==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@google.com", "date": "2012-11-16T17:14:05Z"}, "committer": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2012-11-16T17:14:05Z"}, "message": "cpplib.h (struct cpp_options): Add canonical_system_headers.\n\n\n    * include/cpplib.h (struct cpp_options): Add canonical_system_headers.\n    * files.c (find_file_in_dir): Call maybe_shorter_path() only if\n    canonical_system_headers is set.\n    * init.c (cpp_create_reader): Initialize canonical_system_headers.\n    * configure.ac: Add new --enable-canonical-system-headers.\n    * configure: Regenerate.\n    * config.in: Regenerate.\n\n    * doc/cppopts.texi: Document -f[no-]canonical-system-headers.\n    * doc/install.texi: Document --enable-canonical-system-headers.\n\n    * c.opt: Add f[no-]canonical-system-headers.\n    * c-opts.c (c_common_handle_option): Handle\n    OPT_fcanonical_system_headers.\n\nFrom-SVN: r193569", "tree": {"sha": "709320b578253406cba90335431f68194bf6b70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/709320b578253406cba90335431f68194bf6b70a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dc99c46786e91f2892c4318ed36054302e0c964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc99c46786e91f2892c4318ed36054302e0c964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc99c46786e91f2892c4318ed36054302e0c964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc99c46786e91f2892c4318ed36054302e0c964/comments", "author": null, "committer": null, "parents": [{"sha": "b185792f5216497c74664bdf9ba2d465628d6f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b185792f5216497c74664bdf9ba2d465628d6f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b185792f5216497c74664bdf9ba2d465628d6f4c"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "e430af93a6308ebaf33f1742976e1d870eea2910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -1,3 +1,8 @@\n+2012-11-16  Simon Baldwin  <simonb@google.com>\n+\n+\t* doc/cppopts.texi: Document -f[no-]canonical-system-headers.\n+\t* doc/install.texi: Document --enable-canonical-system-headers.\n+\n 2012-11-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/55330"}, {"sha": "29386629437c0e94e6dffece78c1b982ca26fc36", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -1,3 +1,9 @@\n+2012-11-16  Simon Baldwin  <simonb@google.com>\n+\n+\t* c.opt: Add f[no-]canonical-system-headers.\n+\t* c-opts.c (c_common_handle_option): Handle\n+\tOPT_fcanonical_system_headers.\n+\n 2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/54413"}, {"sha": "488c085f4fb1c24ceea0ba590a2cca906e682adc", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -456,6 +456,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       handle_OPT_d (arg);\n       break;\n \n+    case OPT_fcanonical_system_headers:\n+      cpp_opts->canonical_system_headers = value;\n+      break;\n+\n     case OPT_fcond_mismatch:\n       if (!c_dialect_cxx ())\n \t{"}, {"sha": "f5f086760ae0da7f9010dae6696a1f7c4cdc564c", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -840,6 +840,10 @@ Recognize built-in functions\n fbuiltin-\n C ObjC C++ ObjC++ Joined\n \n+fcanonical-system-headers\n+C ObjC C++ ObjC++\n+Where shorter, use canonicalized paths to systems headers.\n+\n fcheck-new\n C++ ObjC++ Var(flag_check_new)\n Check the return value of new"}, {"sha": "37e0b7b57ff03fc918c3505ce52d8ffe1ed0da38", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -564,6 +564,10 @@ Accept universal character names in identifiers.  This option is\n experimental; in a future version of GCC, it will be enabled by\n default for C99 and C++.\n \n+@item -fno-canonical-system-headers\n+@opindex fno-canonical-system-headers\n+When preprocessing, do not shorten system header paths with canonicalization.\n+\n @item -fpreprocessed\n @opindex fpreprocessed\n Indicate to the preprocessor that the input file has already been"}, {"sha": "b78d127a8c01a29d18fa8a3c9a868b214f38bf41", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -1719,6 +1719,14 @@ link time when @option{-fuse-linker-plugin} is enabled.\n This linker should have plugin support such as gold starting with\n version 2.20 or GNU ld starting with version 2.21.\n See @option{-fuse-linker-plugin} for details.\n+\n+@item --enable-canonical-system-headers\n+@itemx --disable-canonical-system-headers\n+Enable system header path canonicalization for @file{libcpp}.  This can\n+produce shorter header file paths in diagnostics and dependency output\n+files, but these changed header paths may conflict with some compilation\n+environments.  Enabled by default, and may be disabled using\n+@option{--disable-canonical-system-headers}.\n @end table\n \n @subheading Cross-Compiler-Specific Options"}, {"sha": "30cef77e3e319ab052c42e5ce582a04ce6771fe7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -1,3 +1,13 @@\n+2012-11-16  Simon Baldwin  <simonb@google.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add canonical_system_headers.\n+\t* files.c (find_file_in_dir): Call maybe_shorter_path() only if\n+\tcanonical_system_headers is set.\n+\t* init.c (cpp_create_reader): Initialize canonical_system_headers.\n+\t* configure.ac: Add new --enable-canonical-system-headers.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n 2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/54413"}, {"sha": "fca690cd30635c636e8dfad5cc992296676dad7b", "filename": "libcpp/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -11,6 +11,9 @@\n /* Define to 1 if using `alloca.c'. */\n #undef C_ALLOCA\n \n+/* Define to enable system headers canonicalization. */\n+#undef ENABLE_CANONICAL_SYSTEM_HEADERS\n+\n /* Define if you want more run-time sanity checks. */\n #undef ENABLE_CHECKING\n "}, {"sha": "d07aed3199c979ee8b0e289476a36ef51efca633", "filename": "libcpp/configure", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -700,6 +700,7 @@ enable_rpath\n with_libiconv_prefix\n enable_maintainer_mode\n enable_checking\n+enable_canonical_system_headers\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1333,6 +1334,8 @@ Optional Features:\n   --disable-rpath         do not hardcode runtime library paths\n   --enable-maintainer-mode enable rules only needed by maintainers\n   --enable-checking      enable expensive run-time checks\n+  --enable-canonical-system-headers\n+                          enable or disable system headers canonicalization\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -7094,6 +7097,19 @@ $as_echo \"#define ENABLE_CHECKING 1\" >>confdefs.h\n \n fi\n \n+# Check whether --enable-canonical-system-headers was given.\n+if test \"${enable_canonical_system_headers+set}\" = set; then :\n+  enableval=$enable_canonical_system_headers;\n+else\n+  enable_canonical_system_headers=yes\n+fi\n+\n+if test $enable_canonical_system_headers != no; then\n+\n+$as_echo \"#define ENABLE_CANONICAL_SYSTEM_HEADERS 1\" >>confdefs.h\n+\n+fi\n+\n \n case $target in\n \taarch64*-*-* | \\"}, {"sha": "34ae5c206222f94d90ce50c2aa9757558a2f6add", "filename": "libcpp/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -132,6 +132,16 @@ if test $enable_checking != no ; then\n [Define if you want more run-time sanity checks.])\n fi\n \n+AC_ARG_ENABLE(canonical-system-headers,\n+[  --enable-canonical-system-headers\n+                          enable or disable system headers canonicalization],\n+[],\n+enable_canonical_system_headers=yes)\n+if test $enable_canonical_system_headers != no; then\n+  AC_DEFINE(ENABLE_CANONICAL_SYSTEM_HEADERS,\n+            1, [Define to enable system headers canonicalization.])\n+fi\n+\n m4_changequote(,)\n case $target in\n \taarch64*-*-* | \\"}, {"sha": "a8288dc934d8ff69bd73575916a7d9b467967577", "filename": "libcpp/files.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -389,7 +389,7 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n       void **pp;\n \n       /* We try to canonicalize system headers.  */\n-      if (file->dir->sysp)\n+      if (CPP_OPTION (pfile, canonical_system_headers) && file->dir->sysp)\n \t{\n \t  char * canonical_path = maybe_shorter_path (path);\n \t  if (canonical_path)"}, {"sha": "85432a2faa413a5e311ea5f61b6316179926630a", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -493,6 +493,9 @@ struct cpp_options\n \n   /* True disables tokenization outside of preprocessing directives. */\n   bool directives_only;\n+\n+  /* True enables canonicalization of system header file paths. */\n+  bool canonical_system_headers;\n };\n \n /* Callback for header lookup for HEADER, which is the name of a"}, {"sha": "2ec5ecbce11fa200b38bd62b7939b61746682cf3", "filename": "libcpp/init.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc99c46786e91f2892c4318ed36054302e0c964/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=5dc99c46786e91f2892c4318ed36054302e0c964", "patch": "@@ -28,6 +28,10 @@ along with this program; see the file COPYING3.  If not see\n #include \"localedir.h\"\n #include \"filenames.h\"\n \n+#ifndef ENABLE_CANONICAL_SYSTEM_HEADERS\n+#define ENABLE_CANONICAL_SYSTEM_HEADERS 0\n+#endif\n+\n static void init_library (void);\n static void mark_named_operators (cpp_reader *, int);\n static void read_original_filename (cpp_reader *);\n@@ -182,6 +186,8 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, track_macro_expansion) = 2;\n   CPP_OPTION (pfile, warn_normalize) = normalized_C;\n   CPP_OPTION (pfile, warn_literal_suffix) = 1;\n+  CPP_OPTION (pfile, canonical_system_headers)\n+      = ENABLE_CANONICAL_SYSTEM_HEADERS;\n   CPP_OPTION (pfile, ext_numeric_literals) = 1;\n \n   /* Default CPP arithmetic to something sensible for the host for the"}]}