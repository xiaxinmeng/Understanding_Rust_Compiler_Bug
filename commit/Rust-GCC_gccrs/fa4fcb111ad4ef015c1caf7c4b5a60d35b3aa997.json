{"sha": "fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "node_id": "C_kwDOANBUbNoAKGZhNGZjYjExMWFkNGVmMDE1YzFjYWY3YzRiNWE2MGQzNWIzYWE5OTc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-11T12:57:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-11T12:57:31Z"}, "message": "libgomp: Use TLS storage for omp_get_num_teams()/omp_get_team_num() values\n\nWhen thinking about GOMP_teams3, I've realized that using global variables\nfor the values returned by omp_get_num_teams()/omp_get_team_num() calls\nis incorrect even with our right now dumb way of implementing host teams.\nThe problems are two, one is if host teams is used from multiple pthread_create\ncreated threads - the spec says that host teams can't be nested inside of\nexplicit parallel or other teams constructs, but with pthread_create the\nstandard says obviously nothing about it.  Another more important thing\nis host fallback, right now we don't do anything for omp_get_num_teams()\nor omp_get_team_num() which was fine before host teams was introduced and\nthe 5.1 requirement that num_teams clause specifies minimum of teams, but\nwith the global vars it means inside of target teams num_teams (2) we happily\nreturn omp_get_num_teams() == 4 if the target teams is inside of host teams\nwith num_teams(4).  With target fallback being invoked from parallel\nregions global vars simply can't work right on the host.\n\nSo, this patch moves them to struct gomp_thread and propagates those for\nparallel to child threads.  For host fallback, the implicit zeroing of\n*thr results in us returning omp_get_num_teams () == 1 and\nomp_get_team_num () == 0 which is fine for target teams without num_teams\nclause, for target teams with num_teams clause something to work on and\nfor target without teams nested in it I've asked on omp-lang what should\nbe done.\n\n2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n\n\t* libgomp.h (struct gomp_thread): Add num_teams and team_num members.\n\t* team.c (struct gomp_thread_start_data): Likewise.\n\t(gomp_thread_start): Initialize thr->num_teams and thr->team_num.\n\t(gomp_team_start): Initialize start_data->num_teams and\n\tstart_data->team_num.  Update nthr->num_teams and nthr->team_num.\n\t* teams.c (gomp_num_teams, gomp_team_num): Remove.\n\t(GOMP_teams_reg): Set and restore thr->num_teams and thr->team_num\n\tinstead of gomp_num_teams and gomp_team_num.\n\t(omp_get_num_teams): Use thr->num_teams + 1 instead of gomp_num_teams.\n\t(omp_get_team_num): Use thr->team_num instead of gomp_team_num.\n\t* testsuite/libgomp.c/teams-4.c: New test.", "tree": {"sha": "47cf272646cfeb4696cf717425f5ddfb2de4c70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47cf272646cfeb4696cf717425f5ddfb2de4c70d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e5a19053310ad090b930fbecebceb28bd1b91a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5a19053310ad090b930fbecebceb28bd1b91a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5a19053310ad090b930fbecebceb28bd1b91a4"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "ceef643216c4ad0ac937fbef9b044777997cafc3", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "patch": "@@ -768,6 +768,14 @@ struct gomp_thread\n   /* User pthread thread pool */\n   struct gomp_thread_pool *thread_pool;\n \n+#ifdef LIBGOMP_USE_PTHREADS\n+  /* omp_get_num_teams () - 1.  */\n+  unsigned int num_teams;\n+\n+  /* omp_get_team_num ().  */\n+  unsigned int team_num;\n+#endif\n+\n #if defined(LIBGOMP_USE_PTHREADS) \\\n     && (!defined(HAVE_TLS) \\\n \t|| !defined(__GLIBC__) \\"}, {"sha": "3bcc8174d1d079a71aaf150750db8d6bff358ab1", "filename": "libgomp/team.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "patch": "@@ -56,6 +56,8 @@ struct gomp_thread_start_data\n   struct gomp_task *task;\n   struct gomp_thread_pool *thread_pool;\n   unsigned int place;\n+  unsigned int num_teams;\n+  unsigned int team_num;\n   bool nested;\n   pthread_t handle;\n };\n@@ -88,6 +90,8 @@ gomp_thread_start (void *xdata)\n   thr->ts = data->ts;\n   thr->task = data->task;\n   thr->place = data->place;\n+  thr->num_teams = data->num_teams;\n+  thr->team_num = data->team_num;\n #ifdef GOMP_NEEDS_THREAD_HANDLE\n   thr->handle = data->handle;\n #endif\n@@ -645,6 +649,8 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n \t  nthr->ts.single_count = 0;\n #endif\n \t  nthr->ts.static_trip = 0;\n+\t  nthr->num_teams = thr->num_teams;\n+\t  nthr->team_num = thr->team_num;\n \t  nthr->task = &team->implicit_task[i];\n \t  nthr->place = place;\n \t  gomp_init_task (nthr->task, task, icv);\n@@ -833,6 +839,8 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n       start_data->ts.single_count = 0;\n #endif\n       start_data->ts.static_trip = 0;\n+      start_data->num_teams = thr->num_teams;\n+      start_data->team_num = thr->team_num;\n       start_data->task = &team->implicit_task[i];\n       gomp_init_task (start_data->task, task, icv);\n       team->implicit_task[i].icv.nthreads_var = nthreads_var;"}, {"sha": "a93fb7cc6e181f93a70040a2215ff1b8a598a117", "filename": "libgomp/teams.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Fteams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Fteams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteams.c?ref=fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "patch": "@@ -28,14 +28,12 @@\n #include \"libgomp.h\"\n #include <limits.h>\n \n-static unsigned gomp_num_teams = 1, gomp_team_num = 0;\n-\n void\n GOMP_teams_reg (void (*fn) (void *), void *data, unsigned int num_teams,\n \t\tunsigned int thread_limit, unsigned int flags)\n {\n+  struct gomp_thread *thr = gomp_thread ();\n   (void) flags;\n-  (void) num_teams;\n   unsigned old_thread_limit_var = 0;\n   if (thread_limit == 0)\n     thread_limit = gomp_teams_thread_limit_var;\n@@ -48,11 +46,11 @@ GOMP_teams_reg (void (*fn) (void *), void *data, unsigned int num_teams,\n     }\n   if (num_teams == 0)\n     num_teams = gomp_nteams_var ? gomp_nteams_var : 3;\n-  gomp_num_teams = num_teams;\n-  for (gomp_team_num = 0; gomp_team_num < num_teams; gomp_team_num++)\n+  thr->num_teams = num_teams - 1;\n+  for (thr->team_num = 0; thr->team_num < num_teams; thr->team_num++)\n     fn (data);\n-  gomp_num_teams = 1;\n-  gomp_team_num = 0;\n+  thr->num_teams = 0;\n+  thr->team_num = 0;\n   if (thread_limit)\n     {\n       struct gomp_task_icv *icv = gomp_icv (true);\n@@ -63,13 +61,15 @@ GOMP_teams_reg (void (*fn) (void *), void *data, unsigned int num_teams,\n int\n omp_get_num_teams (void)\n {\n-  return gomp_num_teams;\n+  struct gomp_thread *thr = gomp_thread ();\n+  return thr->num_teams + 1;\n }\n \n int\n omp_get_team_num (void)\n {\n-  return gomp_team_num;\n+  struct gomp_thread *thr = gomp_thread ();\n+  return thr->team_num;\n }\n \n ialias (omp_get_num_teams)"}, {"sha": "c1f5356c622bdad580522d9cb5f7ff2dd8e83577", "filename": "libgomp/testsuite/libgomp.c/teams-4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Ftestsuite%2Flibgomp.c%2Fteams-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997/libgomp%2Ftestsuite%2Flibgomp.c%2Fteams-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fteams-4.c?ref=fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "patch": "@@ -0,0 +1,30 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  if (omp_get_num_teams () != 1 || omp_get_team_num () != 0)\n+    abort ();\n+  #pragma omp parallel num_threads (2)\n+  if (omp_get_num_teams () != 1 || omp_get_team_num () != 0)\n+    abort ();\n+  #pragma omp teams num_teams (4)\n+  {\n+    int team = omp_get_team_num ();\n+    if (omp_get_num_teams () != 4 || (unsigned) team >= 4U)\n+      abort ();\n+    #pragma omp parallel num_threads (3)\n+    if (omp_get_num_teams () != 4 || omp_get_team_num () != team)\n+      abort ();\n+    #pragma omp parallel if (0)\n+    #pragma omp target\n+    #pragma omp teams num_teams (2)\n+    if (omp_get_num_teams () > 2\n+\t|| (unsigned) omp_get_team_num () >= 2U)\n+      abort ();\n+    if (omp_get_num_teams () != 4 || (unsigned) team >= 4U)\n+      abort ();\n+  }\n+  return 0;\n+}"}]}