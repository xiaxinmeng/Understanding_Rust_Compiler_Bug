{"sha": "5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzYTEwZmJjMWQ0ZTkxMjg3YjYzNWQ2ZmYwNjhjOGY4MGRmZjhjZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-05-11T17:07:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-05-11T17:07:37Z"}, "message": "re PR c++/71024 (Missing warning for contradictory attributes)\n\n\tPR c++/71024\n\t* c-common.c (diagnose_mismatched_attributes): New function.\n\t* c-common.h (diagnose_mismatched_attributes): Declare.\n\n\t* c-decl.c (diagnose_mismatched_decls): Factor out code to\n\tdiagnose_mismatched_attributes and call it.\n\n\t* decl.c (duplicate_decls): Call diagnose_mismatched_decls.\n\n\t* c-c++-common/attributes-3.c: New test.\n\nFrom-SVN: r236129", "tree": {"sha": "e5ba1d4738473b86a982524a9ab092d6e15fa106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5ba1d4738473b86a982524a9ab092d6e15fa106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cfb065b0e75bf8dab8337d1c3ce33f79110226f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cfb065b0e75bf8dab8337d1c3ce33f79110226f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cfb065b0e75bf8dab8337d1c3ce33f79110226f"}], "stats": {"total": 194, "additions": 113, "deletions": 81}, "files": [{"sha": "0b31517a1188f20005340a7a6fa27038df5294b3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -1,3 +1,9 @@\n+2016-05-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/71024\n+\t* c-common.c (diagnose_mismatched_attributes): New function.\n+\t* c-common.h (diagnose_mismatched_attributes): Declare.\n+\n 2016-05-04  Marek Polacek  <polacek@redhat.com>\n \n \t* c.opt (Wdangling-else): New option."}, {"sha": "665448c2298b694b28730b2ba9b21c41d00a7bd4", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -12824,4 +12824,58 @@ get_source_date_epoch ()\n   return (time_t) epoch;\n }\n \n+/* Check and possibly warn if two declarations have contradictory\n+   attributes, such as always_inline vs. noinline.  */\n+\n+bool\n+diagnose_mismatched_attributes (tree olddecl, tree newdecl)\n+{\n+  bool warned = false;\n+\n+  tree a1 = lookup_attribute (\"optimize\", DECL_ATTRIBUTES (olddecl));\n+  tree a2 = lookup_attribute (\"optimize\", DECL_ATTRIBUTES (newdecl));\n+  /* An optimization attribute applied on a declaration after the\n+     definition is likely not what the user wanted.  */\n+  if (a2 != NULL_TREE\n+      && DECL_SAVED_TREE (olddecl) != NULL_TREE\n+      && (a1 == NULL_TREE || !attribute_list_equal (a1, a2)))\n+    warned |= warning (OPT_Wattributes,\n+\t\t       \"optimization attribute on %qD follows \"\n+\t\t       \"definition but the attribute doesn%'t match\",\n+\t\t       newdecl);\n+\n+  /* Diagnose inline __attribute__ ((noinline)) which is silly.  */\n+  if (DECL_DECLARED_INLINE_P (newdecl)\n+      && DECL_UNINLINABLE (olddecl)\n+      && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n+    warned |= warning (OPT_Wattributes, \"inline declaration of %qD follows \"\n+\t\t       \"declaration with attribute noinline\", newdecl);\n+  else if (DECL_DECLARED_INLINE_P (olddecl)\n+\t   && DECL_UNINLINABLE (newdecl)\n+\t   && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n+    warned |= warning (OPT_Wattributes, \"declaration of %q+D with attribute \"\n+\t\t       \"noinline follows inline declaration \", newdecl);\n+  else if (lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl))\n+\t   && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (olddecl)))\n+    warned |= warning (OPT_Wattributes, \"declaration of %q+D with attribute \"\n+\t\t       \"%qs follows declaration with attribute %qs\",\n+\t\t       newdecl, \"noinline\", \"always_inline\");\n+  else if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (newdecl))\n+\t   && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n+    warned |= warning (OPT_Wattributes, \"declaration of %q+D with attribute \"\n+\t\t       \"%qs follows declaration with attribute %qs\",\n+\t\t       newdecl, \"always_inline\", \"noinline\");\n+  else if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (newdecl))\n+\t   && lookup_attribute (\"hot\", DECL_ATTRIBUTES (olddecl)))\n+    warned |= warning (OPT_Wattributes, \"declaration of %q+D with attribute \"\n+\t\t       \"%qs follows declaration with attribute %qs\",\n+\t\t       newdecl, \"cold\", \"hot\");\n+  else if (lookup_attribute (\"hot\", DECL_ATTRIBUTES (newdecl))\n+\t   && lookup_attribute (\"cold\", DECL_ATTRIBUTES (olddecl)))\n+    warned |= warning (OPT_Wattributes, \"declaration of %q+D with attribute \"\n+\t\t       \"%qs follows declaration with attribute %qs\",\n+\t\t       newdecl, \"hot\", \"cold\");\n+  return warned;\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "0ee9f56712357653479162795011d2c13155a23a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -850,6 +850,7 @@ extern bool keyword_is_type_qualifier (enum rid);\n extern bool keyword_is_decl_specifier (enum rid);\n extern bool cxx_fundamental_alignment_p (unsigned);\n extern bool pointer_to_zero_sized_aggr_p (tree);\n+extern bool diagnose_mismatched_attributes (tree, tree);\n \n #define c_sizeof(LOC, T)  c_sizeof_or_alignof_type (LOC, T, true, false, 1)\n #define c_alignof(LOC, T) c_sizeof_or_alignof_type (LOC, T, false, false, 1)"}, {"sha": "70444002652bb499179655f4723ff2de61218b57", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -1,3 +1,9 @@\n+2016-05-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/71024\n+\t* c-decl.c (diagnose_mismatched_decls): Factor out code to\n+\tdiagnose_mismatched_attributes and call it.\n+\n 2016-05-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70255"}, {"sha": "6ba0e0e52a55be2de5399bda32bb743faa1bf7ec", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -2227,55 +2227,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n     }\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n-    {\n-      tree a1 = lookup_attribute (\"optimize\", DECL_ATTRIBUTES (olddecl));\n-      tree a2 = lookup_attribute (\"optimize\", DECL_ATTRIBUTES (newdecl));\n-      /* An optimization attribute applied on a declaration after the\n-\t definition is likely not what the user wanted.  */\n-      if (a2 != NULL_TREE\n-\t  && DECL_SAVED_TREE (olddecl) != NULL_TREE\n-\t  && (a1 == NULL_TREE || !attribute_list_equal (a1, a2)))\n-\twarned |= warning (OPT_Wattributes,\n-\t\t\t   \"optimization attribute on %qD follows \"\n-\t\t\t   \"definition but the attribute doesn%'t match\",\n-\t\t\t   newdecl);\n-\n-      /* Diagnose inline __attribute__ ((noinline)) which is silly.  */\n-      if (DECL_DECLARED_INLINE_P (newdecl)\n-\t  && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n-\twarned |= warning (OPT_Wattributes,\n-\t\t\t   \"inline declaration of %qD follows \"\n-\t\t\t   \"declaration with attribute noinline\", newdecl);\n-      else if (DECL_DECLARED_INLINE_P (olddecl)\n-\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n-\twarned |= warning (OPT_Wattributes,\n-\t\t\t   \"declaration of %q+D with attribute \"\n-\t\t\t   \"noinline follows inline declaration \", newdecl);\n-      else if (lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl))\n-\t       && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (olddecl)))\n-\twarned |= warning (OPT_Wattributes,\n-\t\t\t   \"declaration of %q+D with attribute \"\n-\t\t\t   \"%qs follows declaration with attribute %qs\",\n-\t\t\t   newdecl, \"noinline\", \"always_inline\");\n-      else if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (newdecl))\n-\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n-\twarned |= warning (OPT_Wattributes,\n-\t\t\t   \"declaration of %q+D with attribute \"\n-\t\t\t   \"%qs follows declaration with attribute %qs\",\n-\t\t\t   newdecl, \"always_inline\", \"noinline\");\n-      else if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (newdecl))\n-\t       && lookup_attribute (\"hot\", DECL_ATTRIBUTES (olddecl)))\n-\twarned |= warning (OPT_Wattributes,\n-\t\t\t   \"declaration of %q+D with attribute %qs follows \"\n-\t\t\t   \"declaration with attribute %qs\", newdecl, \"cold\",\n-\t\t\t   \"hot\");\n-      else if (lookup_attribute (\"hot\", DECL_ATTRIBUTES (newdecl))\n-\t       && lookup_attribute (\"cold\", DECL_ATTRIBUTES (olddecl)))\n-\twarned |= warning (OPT_Wattributes,\n-\t\t\t   \"declaration of %q+D with attribute %qs follows \"\n-\t\t\t   \"declaration with attribute %qs\", newdecl, \"hot\",\n-\t\t\t   \"cold\");\n-    }\n+    warned |= diagnose_mismatched_attributes (olddecl, newdecl);\n   else /* PARM_DECL, VAR_DECL */\n     {\n       /* Redeclaration of a parameter is a constraint violation (this is"}, {"sha": "fda48a700b94a44d77745553e21695bee13b6358", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -1,3 +1,8 @@\n+2016-05-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/71024\n+\t* decl.c (duplicate_decls): Call diagnose_mismatched_decls.\n+\n 2016-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_selection_statement): For RID_SWITCH,"}, {"sha": "126d8707e459d304f1918d7f6c2151b98d7e9f27", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -1389,38 +1389,14 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n   if (DECL_P (olddecl)\n       && TREE_CODE (newdecl) == FUNCTION_DECL\n       && TREE_CODE (olddecl) == FUNCTION_DECL\n-      && (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl)))\n-    {\n-      if (DECL_DECLARED_INLINE_P (newdecl)\n-\t  && DECL_UNINLINABLE (newdecl)\n-\t  && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n-\t/* Already warned elsewhere.  */;\n-      else if (DECL_DECLARED_INLINE_P (olddecl)\n-\t       && DECL_UNINLINABLE (olddecl)\n-\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n-\t/* Already warned.  */;\n-      else if (DECL_DECLARED_INLINE_P (newdecl)\n-\t       && DECL_UNINLINABLE (olddecl)\n-\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n-\t{\n-\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl),\n-\t\t\t  OPT_Wattributes, \"function %qD redeclared as inline\",\n-\t\t\t  newdecl))\n-\t    inform (DECL_SOURCE_LOCATION (olddecl),\n-\t\t    \"previous declaration of %qD with attribute noinline\",\n-\t\t    olddecl);\n-\t}\n-      else if (DECL_DECLARED_INLINE_P (olddecl)\n-\t       && DECL_UNINLINABLE (newdecl)\n-\t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n-\t{\n-\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl),\n-\t\t\t  OPT_Wattributes, \"function %qD redeclared with \"\n-\t\t\t  \"attribute noinline\", newdecl))\n-\t    inform (DECL_SOURCE_LOCATION (olddecl),\n-\t\t    \"previous declaration of %qD was inline\",\n-\t\t    olddecl);\n-\t}\n+      && diagnose_mismatched_attributes (olddecl, newdecl))\n+    {\n+      if (DECL_INITIAL (olddecl))\n+\tinform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t\"previous definition of %q+D was here\", olddecl);\n+      else\n+\tinform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t\"previous declaration of %qD was here\", olddecl);\n     }\n \n   /* Check for redeclaration and other discrepancies.  */"}, {"sha": "93c8706aca6df53a0f347a9c59239053b1bd5770", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -1,3 +1,8 @@\n+2016-05-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/71024\n+\t* c-c++-common/attributes-3.c: New test.\n+\n 2016-05-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/pr68671.c: Xfail on PTX -- assembler crash."}, {"sha": "821278c680fb8c30d31e3e92ee73623c9c2c8976", "filename": "gcc/testsuite/c-c++-common/attributes-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-3.c?ref=5c3a10fbc1d4e91287b635d6ff068c8f80dff8cd", "patch": "@@ -0,0 +1,27 @@\n+/* PR c++/71024 */\n+/* { dg-do compile } */\n+/* { dg-prune-output \"declared but never defined\" } */\n+\n+void\n+fn0 (void) /* { dg-message \"previous definition\" } */\n+{\n+}\n+extern void __attribute__((optimize (\"O2\"))) fn0 (void); /* { dg-warning \"optimization attribute\" } */\n+\n+extern __attribute__((noinline)) int fn1 (void); /* { dg-message \"previous declaration\" } */\n+extern inline int fn1 (void); /* { dg-warning \"inline declaration of\" } */\n+\n+extern inline int fn2 (void); /* { dg-message \"previous declaration\" } */\n+extern __attribute__((noinline)) int fn2 (void); /* { dg-warning \"attribute noinline follows inline declaration\" } */\n+\n+extern __attribute__((always_inline)) int fn3 (void); /* { dg-message \"previous declaration\" } */\n+extern __attribute__((noinline)) int fn3 (void); /* { dg-warning \"attribute .noinline. follows declaration with attribute .always_inline.\" } */\n+\n+extern __attribute__((noinline)) int fn4 (void); /* { dg-message \"previous declaration\" } */\n+extern __attribute__((always_inline)) int fn4 (void); /* { dg-warning \"attribute .always_inline. follows declaration with attribute .noinline.\" } */\n+\n+extern __attribute__((hot)) int fn5 (void); /* { dg-message \"previous declaration\" } */\n+extern __attribute__((cold)) int fn5 (void); /* { dg-warning \"attribute .cold. follows declaration with attribute .hot.\" } */\n+\n+extern __attribute__((cold)) int fn6 (void); /* { dg-message \"previous declaration\" } */\n+extern __attribute__((hot)) int fn6 (void); /* { dg-warning \"attribute .hot. follows declaration with attribute .cold.\" } */"}]}