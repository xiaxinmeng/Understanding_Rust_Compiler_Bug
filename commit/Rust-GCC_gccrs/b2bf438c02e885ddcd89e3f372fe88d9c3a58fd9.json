{"sha": "b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiZjQzOGMwMmU4ODVkZGNkODllM2YzNzJmZTg4ZDljM2E1OGZkOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-29T23:44:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-29T23:44:10Z"}, "message": "Folding and check_function_arguments\n\nThis patch eliminates the arglocs array I introduced to build_over_call\nin r264887, and eliminates the call to maybe_constant_value when building\n\"fargs\" (thus retaining location wrapper nodes).\n\nInstead, this patch requires that any checks within\ncheck_function_arguments that need folded arguments do their own folding.\n\nOf the various checks:\n(a) check_function_nonnull already calls fold_for_warn,\n(b) check_function_format doesn't need folding\n(c) check_function_sentinel needs fold_for_warn in one place, which the\npatch adds, and\n(d) check_function_restrict needs per-argument folding, which the patch\nadds.  Given that it scans before and after resetting TREE_VISITED on\neach argument, it seemed best to make a copy of the array, folding each\nargument from the outset, rather than repeatedly calling fold_for_warn;\n\ngcc/c-family/ChangeLog:\n\tPR c++/56856\n\t* c-common.c (check_function_sentinel): Call fold_for_warn on the\n\targument.\n\t(check_function_restrict): Rename param \"argarray\" to\n\t\"unfolded_argarray\", and make a copy named \"argarray\", calling\n\tfold_for_warn on each argument.\n\t(check_function_arguments): Add note about responsibility for\n\tfolding the arguments.\n\ngcc/cp/ChangeLog:\n\tPR c++/56856\n\t* call.c (build_over_call): Eliminate the \"arglocs\" array, and the\n\tcall to maybe_constant_value when building \"fargs\".\n\nFrom-SVN: r265609", "tree": {"sha": "0dcee2d28ee9534b49dcdd465bd13dd78d31a832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dcee2d28ee9534b49dcdd465bd13dd78d31a832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "6199db74f8a8094f0305eab57ef133939784a348", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "patch": "@@ -1,3 +1,14 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/56856\n+\t* c-common.c (check_function_sentinel): Call fold_for_warn on the\n+\targument.\n+\t(check_function_restrict): Rename param \"argarray\" to\n+\t\"unfolded_argarray\", and make a copy named \"argarray\", calling\n+\tfold_for_warn on each argument.\n+\t(check_function_arguments): Add note about responsibility for\n+\tfolding the arguments.\n+\n 2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (flag_isoc2x): New variable."}, {"sha": "534d928fd1bd82e4bc48c7889f3ee4b4b9eaf2f3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "patch": "@@ -5301,7 +5301,7 @@ check_function_sentinel (const_tree fntype, int nargs, tree *argarray)\n \t}\n \n       /* Validate the sentinel.  */\n-      sentinel = argarray[nargs - 1 - pos];\n+      sentinel = fold_for_warn (argarray[nargs - 1 - pos]);\n       if ((!POINTER_TYPE_P (TREE_TYPE (sentinel))\n \t   || !integer_zerop (sentinel))\n \t  /* Although __null (in C++) is only an integer we allow it\n@@ -5320,11 +5320,16 @@ check_function_sentinel (const_tree fntype, int nargs, tree *argarray)\n \n static bool\n check_function_restrict (const_tree fndecl, const_tree fntype,\n-\t\t\t int nargs, tree *argarray)\n+\t\t\t int nargs, tree *unfolded_argarray)\n {\n   int i;\n   tree parms = TYPE_ARG_TYPES (fntype);\n \n+  /* Call fold_for_warn on all of the arguments.  */\n+  auto_vec<tree> argarray (nargs);\n+  for (i = 0; i < nargs; i++)\n+    argarray.quick_push (fold_for_warn (unfolded_argarray[i]));\n+\n   if (fndecl\n       && TREE_CODE (fndecl) == FUNCTION_DECL)\n     {\n@@ -5361,7 +5366,7 @@ check_function_restrict (const_tree fndecl, const_tree fntype,\n       if (POINTER_TYPE_P (type)\n \t  && TYPE_RESTRICT (type)\n \t  && !TYPE_READONLY (TREE_TYPE (type)))\n-\twarned |= warn_for_restrict (i, argarray, nargs);\n+\twarned |= warn_for_restrict (i, argarray.address (), nargs);\n     }\n \n   for (i = 0; i < nargs; i++)\n@@ -5608,7 +5613,11 @@ attribute_fallthrough_p (tree attr)\n /* Check for valid arguments being passed to a function with FNTYPE.\n    There are NARGS arguments in the array ARGARRAY.  LOC should be used\n    for diagnostics.  Return true if either -Wnonnull or -Wrestrict has\n-   been issued.  */\n+   been issued.\n+\n+   The arguments in ARGARRAY may not have been folded yet (e.g. for C++,\n+   to preserve location wrappers); checks that require folded arguments\n+   should call fold_for_warn on them.  */\n \n bool\n check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,"}, {"sha": "78d2b5bab501922de79583b1380144ab8f920149", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "patch": "@@ -1,3 +1,9 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/56856\n+\t* call.c (build_over_call): Eliminate the \"arglocs\" array, and the\n+\tcall to maybe_constant_value when building \"fargs\".\n+\n 2018-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (create_array_type_for_decl): Add location_t parameter"}, {"sha": "a7dce2ea0aadce80ab9953dd43adc7c7dc256e73", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "patch": "@@ -8198,7 +8198,6 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     {\n       tree *fargs = (!nargs ? argarray\n \t\t\t    : (tree *) alloca (nargs * sizeof (tree)));\n-      auto_vec<location_t> arglocs (nargs);\n       for (j = 0; j < nargs; j++)\n \t{\n \t  /* For -Wformat undo the implicit passing by hidden reference\n@@ -8207,12 +8206,11 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t      && TYPE_REF_P (TREE_TYPE (argarray[j])))\n \t    fargs[j] = TREE_OPERAND (argarray[j], 0);\n \t  else\n-\t    fargs[j] = maybe_constant_value (argarray[j]);\n-\t  arglocs.quick_push (EXPR_LOC_OR_LOC (argarray[j], input_location));\n+\t    fargs[j] = argarray[j];\n \t}\n \n       warned_p = check_function_arguments (input_location, fn, TREE_TYPE (fn),\n-\t\t\t\t\t   nargs, fargs, &arglocs);\n+\t\t\t\t\t   nargs, fargs, NULL);\n     }\n \n   if (DECL_INHERITED_CTOR (fn))"}]}