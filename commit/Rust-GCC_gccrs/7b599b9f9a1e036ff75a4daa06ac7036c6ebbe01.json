{"sha": "7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1OTliOWY5YTFlMDM2ZmY3NWE0ZGFhMDZhYzcwMzZjNmViYmUwMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-28T04:35:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-28T18:58:16Z"}, "message": "c++: Immediately deduce auto member [PR94926].\n\nIn r9-297 I was trying to be more flexible and treat static data members of\nclass templates more like variable templates, where the type need not be\ndetermined until the variable is instantiated, but I suppose that in a class\nthe types of all the non-template members need to be determined at the time\nof class instantiation.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94926\n\t* decl.c (cp_finish_decl): Revert r9-297 change.\n\t(check_static_variable_definition): Likewise.\n\t* constexpr.c (ensure_literal_type_for_constexpr_object): Likewise.\n\t* pt.c (instantiate_decl): Return early on type error.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/pr86648.C: Expect error.\n\t* g++.dg/cpp1z/static2.C: Expect error.\n\t* g++.dg/cpp0x/nsdmi16.C: New test.", "tree": {"sha": "32f368ca47633fad4cba5936700a702f83585b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32f368ca47633fad4cba5936700a702f83585b9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c83027f32d9cca84959c7d6a1e519a0129731501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83027f32d9cca84959c7d6a1e519a0129731501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83027f32d9cca84959c7d6a1e519a0129731501"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "4b1f92f989cf7163870b41181f7f1c186537ecde", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "patch": "@@ -96,8 +96,6 @@ ensure_literal_type_for_constexpr_object (tree decl)\n       if (CLASS_TYPE_P (stype) && !COMPLETE_TYPE_P (complete_type (stype)))\n \t/* Don't complain here, we'll complain about incompleteness\n \t   when we try to initialize the variable.  */;\n-      else if (type_uses_auto (type))\n-\t/* We don't know the actual type yet.  */;\n       else if (!literal_type_p (type))\n \t{\n \t  if (DECL_DECLARED_CONSTEXPR_P (decl))"}, {"sha": "b0de90630d7c6e00dda8349011cfa14ec542437b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "patch": "@@ -7467,18 +7467,24 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       && (DECL_INITIAL (decl) || init))\n     DECL_INITIALIZED_IN_CLASS_P (decl) = 1;\n \n-  /* Do auto deduction unless decl is a function or an uninstantiated\n-     template specialization.  */\n   if (TREE_CODE (decl) != FUNCTION_DECL\n-      && !(init == NULL_TREE\n-\t   && DECL_LANG_SPECIFIC (decl)\n-\t   && DECL_TEMPLATE_INSTANTIATION (decl)\n-\t   && !DECL_TEMPLATE_INSTANTIATED (decl))\n       && (auto_node = type_uses_auto (type)))\n     {\n       tree d_init;\n       if (init == NULL_TREE)\n-\tgcc_assert (CLASS_PLACEHOLDER_TEMPLATE (auto_node));\n+\t{\n+\t  if (DECL_LANG_SPECIFIC (decl)\n+\t      && DECL_TEMPLATE_INSTANTIATION (decl)\n+\t      && !DECL_TEMPLATE_INSTANTIATED (decl))\n+\t    {\n+\t      /* init is null because we're deferring instantiating the\n+\t\t initializer until we need it.  Well, we need it now.  */\n+\t      instantiate_decl (decl, /*defer_ok*/true, /*expl*/false);\n+\t      return;\n+\t    }\n+\n+\t  gcc_assert (CLASS_PLACEHOLDER_TEMPLATE (auto_node));\n+\t}\n       d_init = init;\n       if (d_init)\n \t{\n@@ -10171,7 +10177,6 @@ check_static_variable_definition (tree decl, tree type)\n      in check_initializer.  Similarly for inline static data members.  */\n   else if (DECL_P (decl)\n       && (DECL_DECLARED_CONSTEXPR_P (decl)\n-\t  || undeduced_auto_decl (decl)\n \t  || DECL_VAR_DECLARED_INLINE_P (decl)))\n     ;\n   else if (cxx_dialect >= cxx11 && !INTEGRAL_OR_ENUMERATION_TYPE_P (type))"}, {"sha": "90dafff3aa700ab29d8467e0e9175e49ca2b6ac9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "patch": "@@ -25293,6 +25293,7 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n     d = DECL_CLONED_FUNCTION (d);\n \n   if (DECL_TEMPLATE_INSTANTIATED (d)\n+      || TREE_TYPE (d) == error_mark_node\n       || (TREE_CODE (d) == FUNCTION_DECL\n \t  && DECL_DEFAULTED_FN (d) && DECL_INITIAL (d))\n       || DECL_TEMPLATE_SPECIALIZATION (d))"}, {"sha": "07bc198e6916622a7401a2a1e68a3f0d2fa95f35", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi16.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi16.C?ref=7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/94926\n+// { dg-do compile { target c++11 } }\n+\n+template<typename>\n+struct A {\n+    static auto self_reference = A{}; // { dg-error \"incomplete\" }\n+};\n+\n+int main() {\n+    A<void>{};\n+}"}, {"sha": "58c611c985fc255120ed09a35fec837d433c5cb4", "filename": "gcc/testsuite/g++.dg/cpp1z/pr86648.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr86648.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr86648.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr86648.C?ref=7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "patch": "@@ -1,5 +1,7 @@\n // { dg-do compile { target c++17 } }\n \n template <typename> class A;\n-template <class T> struct B { static A a{T::a}; };\n+template <class T> struct B {\n+  static A a{T::a};\t\t// { dg-error \"int\" }\n+};\n void foo () { B<int> a; }"}, {"sha": "5d93a0e7242bdb87fce4a4f6da9142c04dd2cdea", "filename": "gcc/testsuite/g++.dg/cpp1z/static2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic2.C?ref=7b599b9f9a1e036ff75a4daa06ac7036c6ebbe01", "patch": "@@ -3,7 +3,7 @@\n template <class T>\n struct A\n {\n-  static constexpr auto x = T::x;\n+  static constexpr auto x = T::x; // { dg-error \"incomplete\" }\n };\n \n struct B;"}]}