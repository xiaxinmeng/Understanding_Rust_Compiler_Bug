{"sha": "999c14cf249758b75e0ecf5acfab209aa5974d96", "node_id": "C_kwDOANBUbNoAKDk5OWMxNGNmMjQ5NzU4Yjc1ZTBlY2Y1YWNmYWIyMDlhYTU5NzRkOTY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T13:40:34Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-11T08:52:22Z"}, "message": "changelog: check for space after tab\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_commit.py: Check for a space after leading\n\ttab.\n\t* gcc-changelog/test_email.py: Likewise.\n\t* gcc-changelog/test_patches.txt: Likewise.", "tree": {"sha": "175f55abd25fd39d8f4d2eb86deb8f64a1a2973e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/175f55abd25fd39d8f4d2eb86deb8f64a1a2973e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/999c14cf249758b75e0ecf5acfab209aa5974d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999c14cf249758b75e0ecf5acfab209aa5974d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999c14cf249758b75e0ecf5acfab209aa5974d96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999c14cf249758b75e0ecf5acfab209aa5974d96/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5576518a5667ad826937125a19b7c59c34d8733c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5576518a5667ad826937125a19b7c59c34d8733c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5576518a5667ad826937125a19b7c59c34d8733c"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "3bd671011f20de8f5156f6374e831959405cb531", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999c14cf249758b75e0ecf5acfab209aa5974d96/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999c14cf249758b75e0ecf5acfab209aa5974d96/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=999c14cf249758b75e0ecf5acfab209aa5974d96", "patch": "@@ -365,6 +365,7 @@ def __init__(self, info, commit_to_info_hook=None, ref_name=None):\n             self.check_for_broken_parentheses()\n             self.deduce_changelog_locations()\n             self.check_file_patterns()\n+            self.check_line_start()\n             if not self.errors:\n                 self.check_mentioned_files()\n                 self.check_for_correct_changelog()\n@@ -613,6 +614,13 @@ def check_for_broken_parentheses(self):\n                 msg = 'bad parentheses wrapping'\n                 self.errors.append(Error(msg, entry.parentheses_stack[-1]))\n \n+    def check_line_start(self):\n+        for entry in self.changelog_entries:\n+            for line in entry.lines:\n+                if line.startswith('\\t '):\n+                    msg = 'extra space after tab'\n+                    self.errors.append(Error(msg, line))\n+\n     def get_file_changelog_location(self, changelog_file):\n         for file in self.info.modified_files:\n             if file[0] == changelog_file:"}, {"sha": "d0de88cf5629b384620ecd087c3c65055ac67ab6", "filename": "contrib/gcc-changelog/test_email.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999c14cf249758b75e0ecf5acfab209aa5974d96/contrib%2Fgcc-changelog%2Ftest_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999c14cf249758b75e0ecf5acfab209aa5974d96/contrib%2Fgcc-changelog%2Ftest_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_email.py?ref=999c14cf249758b75e0ecf5acfab209aa5974d96", "patch": "@@ -451,3 +451,7 @@ def test_new_file_in_root_folder(self):\n         email = self.from_patch_glob('toplev-new-file.patch')\n         assert (email.errors[0].message ==\n                 'new file in the top-level folder not mentioned in a ChangeLog')\n+\n+    def test_space_after_tab(self):\n+        email = self.from_patch_glob('0001-Use-Value_Range-when-applying-inferred-ranges.patch')\n+        assert (email.errors[0].message == 'extra space after tab')"}, {"sha": "b28de7d30b06436cd141238257b47edd96f9dc20", "filename": "contrib/gcc-changelog/test_patches.txt", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999c14cf249758b75e0ecf5acfab209aa5974d96/contrib%2Fgcc-changelog%2Ftest_patches.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999c14cf249758b75e0ecf5acfab209aa5974d96/contrib%2Fgcc-changelog%2Ftest_patches.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_patches.txt?ref=999c14cf249758b75e0ecf5acfab209aa5974d96", "patch": "@@ -3571,3 +3571,42 @@ index 00000000000..d6459e00543\n +xxx\n -- \n 2.34.1\n+\n+=== 0001-Use-Value_Range-when-applying-inferred-ranges.patch ===\n+From 69a233610f6b27cd4283561569d8ce0f35044dc4 Mon Sep 17 00:00:00 2001\n+From: Andrew MacLeod <amacleod@redhat.com>\n+Date: Wed, 19 Oct 2022 09:21:22 -0400\n+Subject: [PATCH] Use Value_Range when applying inferred ranges.\n+\n+Applying an inferred range is using int_range_ma as the\n+temporary rather than the general purpose Value_Range.  This causes it\n+to trap if we have a non-integral inferred range.\n+\n+\t* gimple-range-cache.cc (ranger_cache::range_from_dom): Use\n+\t  Value_Range not int_range_max.\n+---\n+ gcc/gimple-range-cache.cc | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/gcc/gimple-range-cache.cc b/gcc/gimple-range-cache.cc\n+index 0b9aa3639c5..f279371948a 100644\n+--- a/gcc/gimple-range-cache.cc\n++++ b/gcc/gimple-range-cache.cc\n+@@ -1546,7 +1546,6 @@ ranger_cache::range_from_dom (vrange &r, tree name, basic_block start_bb,\n+ void\n+ ranger_cache::apply_inferred_ranges (gimple *s)\n+ {\n+-  int_range_max r;\n+   bool update = true;\n+ \n+   basic_block bb = gimple_bb (s);\n+@@ -1572,6 +1571,7 @@ ranger_cache::apply_inferred_ranges (gimple *s)\n+       m_exit.add_range (name, bb, infer.range (x));\n+       if (update)\n+ \t{\n++\t  Value_Range r (TREE_TYPE (name));\n+ \t  if (!m_on_entry.get_bb_range (r, name, bb))\n+ \t    exit_range (r, name, bb, RFD_READ_ONLY);\n+ \t  if (r.intersect (infer.range (x)))\n+-- \n+2.38.0"}]}