{"sha": "93284395b02210f59118783ba162e4544061751c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyODQzOTViMDIyMTBmNTkxMTg3ODNiYTE2MmU0NTQ0MDYxNzUxYw==", "commit": {"author": {"name": "Mark Elbrecht", "email": "snowball3@bigfoot.com", "date": "2000-08-04T16:19:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-08-04T16:19:19Z"}, "message": "x-djgpp: Delete code that conditionally modifies target_alias.\n\n        * i386/x-djgpp: Delete code that conditionally modifies target_alias.\n        Delete code that conditionally modifies 'version'.\n        Delete X_CPPFLAGS. Add comment for SYSTEM_HEADER_DIR.\n        * i386/xm-djgpp.h (GCC_DRIVER_HOST_INITIALIZATION): New macro.\n        * gcc.c (main): Use it.\n        * config/i386/xm-djgpp.h (UPDATE_PATH_HOST_CANONICALIZE): New macro.\n        * prefix.c (update_path): Use it.\n        * i386/djgpp.h (STANDARD_INCLUDE_DIR): Define.\n        (MD_EXEC_PREFIX): Set to '/dev/env/DJDIR/bin/'.\n        (ASM_OUTPUT_SECTION_NAME): Add code attribute to sections containing\n        code.\n        (SUPPORTS_WEAK, SUPPORTS_ONE_ONLY): Default to true.\n        (SUBTARGET_SWITCHES): Adjust.\n        (WCHAR_UNSIGNED, WCHAR_TYPE_SIZE, WCHAR_TYPE): Undefine before\n        defining.\n        (WINT_TYPE, SIZE_TYPE, PTRDIFF_TYPE): Define.\n\nFrom-SVN: r35484", "tree": {"sha": "90cc1c32eb22a14f77dd68506630684be56db697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90cc1c32eb22a14f77dd68506630684be56db697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93284395b02210f59118783ba162e4544061751c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93284395b02210f59118783ba162e4544061751c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93284395b02210f59118783ba162e4544061751c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93284395b02210f59118783ba162e4544061751c/comments", "author": null, "committer": null, "parents": [{"sha": "326c5cd1b3b31f624d4ab7701bf2c0d6516b4ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/326c5cd1b3b31f624d4ab7701bf2c0d6516b4ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/326c5cd1b3b31f624d4ab7701bf2c0d6516b4ce0"}], "stats": {"total": 151, "additions": 120, "deletions": 31}, "files": [{"sha": "2437da28ef1a239412b6eaf27f3abfa1dfdab55a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93284395b02210f59118783ba162e4544061751c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93284395b02210f59118783ba162e4544061751c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93284395b02210f59118783ba162e4544061751c", "patch": "@@ -1,3 +1,22 @@\n+2000-07-17  Mark Elbrecht  <snowball3@bigfoot.com>\n+\n+\t* i386/x-djgpp: Delete code that conditionally modifies target_alias.\n+\tDelete code that conditionally modifies 'version'.\n+\tDelete X_CPPFLAGS. Add comment for SYSTEM_HEADER_DIR.\n+\t* i386/xm-djgpp.h (GCC_DRIVER_HOST_INITIALIZATION): New macro.\n+\t* gcc.c (main): Use it.\n+\t* config/i386/xm-djgpp.h (UPDATE_PATH_HOST_CANONICALIZE): New macro.\n+\t* prefix.c (update_path): Use it.\n+\t* i386/djgpp.h (STANDARD_INCLUDE_DIR): Define.\n+\t(MD_EXEC_PREFIX): Set to '/dev/env/DJDIR/bin/'.\n+\t(ASM_OUTPUT_SECTION_NAME): Add code attribute to sections containing\n+\tcode.\n+\t(SUPPORTS_WEAK, SUPPORTS_ONE_ONLY): Default to true.\n+\t(SUBTARGET_SWITCHES): Adjust.\n+\t(WCHAR_UNSIGNED, WCHAR_TYPE_SIZE, WCHAR_TYPE): Undefine before\n+\tdefining.\n+\t(WINT_TYPE, SIZE_TYPE, PTRDIFF_TYPE): Define.\n+\n 2000-08-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.h (flag_isoc94): Declare."}, {"sha": "e18db77563744c81ea41a10a1c388d41313c68cb", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93284395b02210f59118783ba162e4544061751c/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93284395b02210f59118783ba162e4544061751c/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=93284395b02210f59118783ba162e4544061751c", "patch": "@@ -18,7 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n #include \"dbxcoff.h\"\n \n /* Don't assume anything about the header files. */\n@@ -76,8 +75,12 @@ Boston, MA 02111-1307, USA.  */\n #undef TEXT_SECTION_ASM_OP\n #define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n \n+/* Tell GCC where our standard include directory is.  */\n+#undef STANDARD_INCLUDE_DIR\n+#define STANDARD_INCLUDE_DIR \"/dev/env/DJDIR/include/\"\n+\n /* Search for as.exe and ld.exe in DJGPP's binary directory. */ \n-#define MD_EXEC_PREFIX \"$DJDIR/bin/\"\n+#define MD_EXEC_PREFIX \"/dev/env/DJDIR/bin/\"\n \n /* Correctly handle absolute filename detection in cp/xref.c */\n #define FILE_NAME_ABSOLUTE_P(NAME) \\\n@@ -161,10 +164,13 @@ dtor_section ()\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)\n \n-/* Allow (eg) __attribute__((section \"locked\")) to work */\n+/* Tell GCC how to output a section name. Add \"x\" for code sections.  */\n #define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\\\n-  do {\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.section %s\\n\", NAME);\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+      fprintf ((FILE), \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"\\t.section %s\\n\", (NAME));\t\t\t\\\n   } while (0)\n \n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n@@ -207,12 +213,26 @@ dtor_section ()\t\t\t\t\t\t\t\\\n    in libgcc, nor call one in main().  */\n #define HAS_INIT_SECTION\n \n-/* Definitions to set wchar_t type to 'unsigned short int' to help out\n-   add-on Windows compilers for DJGPP. */\n+/* Definitions for types and sizes. Wide characters are 16-bits long so\n+   Win32 compiler add-ons will be wide character compatible.  */\n+#undef WCHAR_UNSIGNED\n #define WCHAR_UNSIGNED 1\n+\n+#undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 16\n+\n+#undef WCHAR_TYPE\n #define WCHAR_TYPE \"short unsigned int\"\n \n+#undef WINT_TYPE\n+#define WINT_TYPE \"int\"\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n /* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */\n #define LIBSTDCXX \"-lstdcxx\"\n \n@@ -222,16 +242,16 @@ dtor_section ()\t\t\t\t\t\t\t\\\n \n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \t\t\\\n-  { \"bnu210\", MASK_BNU210, N_(\"Enable weak symbol and enhanced C++ template support. Binutils 2.9.5.1 or higher required.\") }, \\\n-  { \"no-bnu210\", -MASK_BNU210, N_(\"Disable weak symbol and enhanced C++ template support.\") },\n+  { \"bnu210\", -MASK_BNU210, \"Enable weak symbol and enhanced C++ template support. Binutils 2.10 or higher required.\" }, \\\n+  { \"no-bnu210\", MASK_BNU210, \"Disable weak symbol and enhanced C++ template support.\" },\n \n-/* Weak symbols and .gnu.linkonce are only in the binutils snapshots\n-   and binutils-2.10.  So do it only when -mbnu210 is specified.  */\n+/* Weak symbols and .gnu.linkonce are only in Binutils-2.10 and later. \n+   Default to using Binutils 2.10 features.  */\n #undef SUPPORTS_WEAK\n-#define SUPPORTS_WEAK (target_flags & MASK_BNU210)\n+#define SUPPORTS_WEAK ((target_flags & MASK_BNU210) == 0)\n \n #undef SUPPORTS_ONE_ONLY\n-#define SUPPORTS_ONE_ONLY (target_flags & MASK_BNU210)\n+#define SUPPORTS_ONE_ONLY ((target_flags & MASK_BNU210) == 0)\n \n /* Support for C++ templates.  */\n #undef MAKE_DECL_ONE_ONLY"}, {"sha": "a49a51cda0fdf4900d167bbedf69c48a02f94770", "filename": "gcc/config/i386/x-djgpp", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93284395b02210f59118783ba162e4544061751c/gcc%2Fconfig%2Fi386%2Fx-djgpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93284395b02210f59118783ba162e4544061751c/gcc%2Fconfig%2Fi386%2Fx-djgpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-djgpp?ref=93284395b02210f59118783ba162e4544061751c", "patch": "@@ -1,22 +1,5 @@\n-# translate the version string, so it can be used on DJGPP, where only\n-# one dot in filename is allowed\n-\n-# to avoid recursion when redefining $(version)\n-_version:=$(version)\n-__version=$(subst ., ,$(_version))\n-version=$(word 1,$(__version))$(word 2,$(__version)).$(word 3,$(__version))\n-\n+# Location of DJGPP's header directory.\n SYSTEM_HEADER_DIR=$(DJDIR)/include\n-X_CPPFLAGS=-DSTANDARD_INCLUDE_DIR=\\\"\\$$DJDIR/include\\\" \\\n-\t   -DSTANDARD_INCLUDE_COMPONENT=\\\"\\\"\n-\n-# when building a native compiler for DJGPP, make the target_alias\n-# a shorter name, since otherwise it will produce some problems, when\n-# using the same gcc once with long filenames and once with short (8+3)\n-# filenames\n-ifeq ($(findstring -pc-msdosdjgpp,$(target_alias)),-pc-msdosdjgpp)\n-target_alias=djgpp\n-endif\n \n # on DJGPP the 'ln -s' does not work correctly\n LN = cp -p"}, {"sha": "f9932589214270ec11e00053962c8de9271aa757", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93284395b02210f59118783ba162e4544061751c/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93284395b02210f59118783ba162e4544061751c/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=93284395b02210f59118783ba162e4544061751c", "patch": "@@ -54,3 +54,60 @@ Boston, MA 02111-1307, USA.  */\n       strcat (xref_file, xref_ext); \\\n   } while (0)\n \n+/* Change /dev/env/DJDIR/prefix/dir/ to canonical form so gcc_exec_prefix\n+   is set properly in 'gcc.c'. It also helps to cut down the number of times\n+   the value of the DJGPP environment variable 'DJDIR' is evaluated.  */\n+#undef GCC_DRIVER_HOST_INITIALIZATION\n+#define GCC_DRIVER_HOST_INITIALIZATION \\\n+  do { \\\n+    /* If the environment variable DJDIR is not defined, then DJGPP is not \\\n+       installed correctly and GCC will quickly become confused with the \\\n+       default prefix settings. Report the problem now so the user doesn't \\\n+       receive deceptive \"file not found\" error messages later.  */ \\\n+    char *djdir = getenv (\"DJDIR\"); \\\n+    if (djdir == NULL) \\\n+      { \\\n+        /* DJDIR is automatically defined by the DJGPP environment config \\\n+           file pointed to by the environment variable DJGPP. Examine DJGPP \\\n+           to try and figure out what's wrong.  */ \\\n+        char *djgpp = getenv (\"DJGPP\"); \\\n+        if (djgpp == NULL) \\\n+          fatal (\"Environment variable DJGPP not defined.\"); \\\n+        else if (access (djgpp, R_OK) == 0) \\\n+          fatal (\"Environment variable DJGPP points to missing file '%s'.\", \\\n+                 djgpp); \\\n+        else \\\n+          fatal (\"Environment variable DJGPP points to corrupt file '%s'.\", \\\n+                  djgpp); \\\n+      } \\\n+    standard_exec_prefix = update_path (standard_exec_prefix, NULL); \\\n+    standard_bindir_prefix = update_path (standard_bindir_prefix, NULL); \\\n+    standard_startfile_prefix = update_path (standard_startfile_prefix, NULL); \\\n+    md_exec_prefix = update_path (md_exec_prefix, NULL); \\\n+  } while (0)\n+\n+/* Canonicalize paths containing '/dev/env/', especially those in\n+   prefix.c.  */\n+#define UPDATE_PATH_HOST_CANONICALIZE(PATH, KEY) \\\n+  do { \\\n+    if (strncmp (PATH, \"/dev/env/\", sizeof(\"/dev/env/\") - 1) == 0) \\\n+      { \\\n+        static char *djdir; \\\n+        static int djdir_len; \\\n+        static char fixed_path[FILENAME_MAX + 1]; \\\n+        char *new_path; \\\n+        /* The default prefixes all use '/dev/env/DJDIR', so optimize \\\n+           for this. All other uses of '/dev/env/' go through \\\n+           libc's canonicalization function.  */ \\\n+        _fixpath (PATH, fixed_path); \\\n+        /* _fixpath removes any trailing '/', so add it back.  */ \\\n+        strcat (fixed_path, \"/\"); \\\n+        new_path = xstrdup (fixed_path); \\\n+        PATH = new_path; \\\n+        return PATH; \\\n+      } \\\n+    /* If DIR_SEPARATOR_2 isn't in PATH, nothing more need be done.  */ \\\n+    if (strchr (PATH, DIR_SEPARATOR_2) == NULL) \\\n+      return PATH; \\\n+  } while (0)\n+"}, {"sha": "50c49ea7e851b77f52164fed01df5770fdc00a6f", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93284395b02210f59118783ba162e4544061751c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93284395b02210f59118783ba162e4544061751c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=93284395b02210f59118783ba162e4544061751c", "patch": "@@ -5110,6 +5110,11 @@ main (argc, argv)\n     --p;\n   programname = p;\n \n+#ifdef GCC_DRIVER_HOST_INITIALIZATION\n+  /* Perform host dependant initialization when needed.  */\n+  GCC_DRIVER_HOST_INITIALIZATION;\n+#endif\n+\n #ifdef HAVE_LC_MESSAGES\n   setlocale (LC_MESSAGES, \"\");\n #endif"}, {"sha": "1c98271b1879bf0a837831f3737d2d0693bc78ce", "filename": "gcc/prefix.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93284395b02210f59118783ba162e4544061751c/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93284395b02210f59118783ba162e4544061751c/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=93284395b02210f59118783ba162e4544061751c", "patch": "@@ -298,6 +298,11 @@ update_path (path, key)\n \tpath = translate_name (path);\n     }\n \n+#ifdef UPDATE_PATH_HOST_CANONICALIZE\n+/* Perform host dependant canonicalization when needed.  */\n+UPDATE_PATH_HOST_CANONICALIZE (path, key);\n+#endif\n+\n #ifdef DIR_SEPARATOR_2\n   /* Convert DIR_SEPARATOR_2 to DIR_SEPARATOR. */\n   if (DIR_SEPARATOR != DIR_SEPARATOR_2)"}]}