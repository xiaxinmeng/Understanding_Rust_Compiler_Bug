{"sha": "86c5a5c3bba487a03c0288c912641275e3df812b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZjNWE1YzNiYmE0ODdhMDNjMDI4OGM5MTI2NDEyNzVlM2RmODEyYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-04-09T18:30:34Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-04-09T18:30:34Z"}, "message": "re PR middle-end/65554 (ICE: verify_gimple failed)\n\n\tPR middle-end/65554\n\t* gimple-fold.c (gimple_fold_builtin_memory_op): Update comment.\n\t(fold_ctor_reference): Use STRIP_USELESS_TYPE_CONVERSION instead\n\tof STRIP_NOPS.\n\n\t* g++.dg/opt/pr65554.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r221954", "tree": {"sha": "22176e816e51dba61146e1127367061dd97d9b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22176e816e51dba61146e1127367061dd97d9b07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86c5a5c3bba487a03c0288c912641275e3df812b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c5a5c3bba487a03c0288c912641275e3df812b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c5a5c3bba487a03c0288c912641275e3df812b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c5a5c3bba487a03c0288c912641275e3df812b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bf137444b0fc1f40304c40c0730b08a71c8ba48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf137444b0fc1f40304c40c0730b08a71c8ba48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf137444b0fc1f40304c40c0730b08a71c8ba48"}], "stats": {"total": 142, "additions": 140, "deletions": 2}, "files": [{"sha": "32149ba7029d90523c92837fd24a472d89b7305f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86c5a5c3bba487a03c0288c912641275e3df812b", "patch": "@@ -1,3 +1,11 @@\n+2015-04-09  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/65554\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Update comment.\n+\t(fold_ctor_reference): Use STRIP_USELESS_TYPE_CONVERSION instead\n+\tof STRIP_NOPS.\n+\n 2015-04-09  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/65693"}, {"sha": "9458f96545243dcba1224d32515d8526fc875e14", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=86c5a5c3bba487a03c0288c912641275e3df812b", "patch": "@@ -769,7 +769,7 @@ var_decl_component_p (tree var)\n }\n \n /* Fold function call to builtin mem{{,p}cpy,move}.  Return\n-   NULL_TREE if no simplification can be made.\n+   false if no simplification can be made.\n    If ENDP is 0, return DEST (like memcpy).\n    If ENDP is 1, return DEST+LEN (like mempcpy).\n    If ENDP is 2, return DEST+LEN-1 (like stpcpy).\n@@ -5472,7 +5472,7 @@ fold_ctor_reference (tree type, tree ctor, unsigned HOST_WIDE_INT offset,\n       ret = canonicalize_constructor_val (unshare_expr (ctor), from_decl);\n       ret = fold_unary (VIEW_CONVERT_EXPR, type, ret);\n       if (ret)\n-\tSTRIP_NOPS (ret);\n+\tSTRIP_USELESS_TYPE_CONVERSION (ret);\n       return ret;\n     }\n   /* For constants and byte-aligned/sized reads try to go through"}, {"sha": "a44374f643e6e1cbe4570c6e2d771899277afc65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86c5a5c3bba487a03c0288c912641275e3df812b", "patch": "@@ -1,3 +1,9 @@\n+2015-04-09  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/65554\n+\t* g++.dg/opt/pr65554.C: New test.\n+\n 2015-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/65690"}, {"sha": "70e43a44e261d7527f9da1d5b7bae5f3cfeb7344", "filename": "gcc/testsuite/g++.dg/opt/pr65554.C", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65554.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c5a5c3bba487a03c0288c912641275e3df812b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65554.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65554.C?ref=86c5a5c3bba487a03c0288c912641275e3df812b", "patch": "@@ -0,0 +1,124 @@\n+// PR middle-end/65554\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O\" }\n+\n+namespace std\n+{\n+  struct B { enum { __value }; };\n+  template <typename _Iterator> struct C\n+  {\n+    static _Iterator _S_base (_Iterator p1) { return p1; }\n+  };\n+  template <typename> using _RequireInputIter = int;\n+  template <typename _Iterator> _Iterator __niter_base (_Iterator p1)\n+  {\n+    return std::C <_Iterator>::_S_base (p1);\n+  }\n+  template <typename _Iterator> _Iterator __miter_base (_Iterator p1)\n+  {\n+    return std::C <_Iterator>::_S_base (p1);\n+  }\n+  struct D\n+  {\n+    template <typename _Tp> static _Tp *__copy_m (_Tp * p1, _Tp * p2, _Tp *)\n+    {\n+      int _Num = p2 - p1;\n+      __builtin_memmove (0, p1, sizeof (_Tp) * _Num);\n+    }\n+  };\n+  template <int, typename _II, typename _OI> void __copy_move_a (_II p1, _II p2, _OI p3)\n+  {\n+    D::__copy_m (p1, p2, p3);\n+  }\n+  template <int, typename _II, typename _OI> void __copy_move_a2 (_II p1, _II p2, _OI p3)\n+  {\n+    __copy_move_a <0> (std::__niter_base (p1), std::__niter_base (p2), std::__niter_base (p3));\n+  }\n+  template <typename _II, typename _OI> void copy (_II p1, _II p2, _OI p3)\n+  {\n+    __copy_move_a2 <B::__value> (std::__miter_base (p1), std::__miter_base (p2), p3);\n+  }\n+}\n+template <typename _Tp> struct F { typedef _Tp *pointer; };\n+namespace std\n+{\n+  template <typename _Tp> using __allocator_base = F <_Tp>;\n+  template <typename _Tp> struct allocator:__allocator_base <_Tp> {};\n+  template <class _E> struct initializer_list\n+  {\n+    typedef _E *const_iterator;\n+    _E *_M_array;\n+    unsigned long _M_len;\n+    const_iterator begin () { return _M_array; }\n+    const_iterator end () { return begin () + 1; }\n+  };\n+  template <typename _Alloc> struct allocator_traits\n+  {\n+    template <typename _Tp> static typename _Tp::pointer _S_pointer_helper (_Tp *);\n+    typedef decltype (_S_pointer_helper ((_Alloc *) 0)) __pointer;\n+    typedef __pointer pointer;\n+  };\n+}\n+template <typename> struct __alloc_traits:\n+std::allocator_traits <std::allocator <const char *>> {};\n+namespace std\n+{\n+  struct G\n+  {\n+    template <typename _InputIterator, typename _ForwardIterator> static _ForwardIterator __uninit_copy (_InputIterator p1, _InputIterator p2, _ForwardIterator p3)\n+    {\n+      copy (p1, p2, p3);\n+    }\n+  };\n+  template <typename _InputIterator, typename _ForwardIterator> void\n+  uninitialized_copy (_InputIterator p1, _InputIterator p2, _ForwardIterator p3)\n+  {\n+    G::__uninit_copy (p1, p2, p3);\n+  }\n+  template <typename _InputIterator, typename _ForwardIterator, typename _Tp> void __uninitialized_copy_a (_InputIterator p1, _InputIterator p2, _ForwardIterator p3, allocator <_Tp> &)\n+  {\n+    uninitialized_copy (p1, p2, p3);\n+  }\n+  struct H\n+  {\n+    typedef std::allocator <int *> _Tp_alloc_type;\n+    typedef __alloc_traits <_Tp_alloc_type>::pointer pointer;\n+    _Tp_alloc_type & _M_get_Tp_allocator ();\n+  };\n+  template <typename _Tp, typename = std::allocator <_Tp>> struct J: H\n+  {\n+    void operator= (initializer_list <_Tp> p1)\n+    {\n+      this->assign (p1.begin (), p1.end ());\n+    }\n+    template <typename _InputIterator, typename = std::_RequireInputIter <_InputIterator>> void assign (_InputIterator p1, _InputIterator p2)\n+    {\n+      _M_assign_dispatch (p1, p2, 0);\n+    }\n+    pointer _M_allocate_and_copy___result;\n+    template <typename _ForwardIterator> void _M_allocate_and_copy (int, _ForwardIterator p2, _ForwardIterator p3)\n+    {\n+      __uninitialized_copy_a (p2, p3, _M_allocate_and_copy___result, _M_get_Tp_allocator ());\n+    }\n+    template <typename _InputIterator> void _M_assign_dispatch (_InputIterator p1, _InputIterator p2, int)\n+    {\n+      _M_assign_aux (p1, p2, 0);\n+    }\n+    template <typename _ForwardIterator> void _M_assign_aux (_ForwardIterator, _ForwardIterator, int);\n+  };\n+  template <typename _Tp, typename _Alloc>\n+    template <typename _ForwardIterator> void J <_Tp, _Alloc>::_M_assign_aux (_ForwardIterator p1, _ForwardIterator p2, int)\n+  {\n+    _M_allocate_and_copy (0, p1, p2);\n+  }\n+  class I\n+  {\n+    void tabCompletion (std::J <int>&) const;\n+  };\n+  void\n+  I::tabCompletion (J <int>&) const\n+  {\n+    J <const char *> extra;\n+    extra = { \"foo\" };\n+  }\n+}"}]}