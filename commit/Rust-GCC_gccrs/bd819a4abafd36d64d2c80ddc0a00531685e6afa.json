{"sha": "bd819a4abafd36d64d2c80ddc0a00531685e6afa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4MTlhNGFiYWZkMzZkNjRkMmM4MGRkYzBhMDA1MzE2ODVlNmFmYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-24T23:04:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-24T23:04:49Z"}, "message": "extend.texi, [...]: Remove uses of @refill.\n\n\t* doc/extend.texi, doc/gcc.texi, doc/install-old.texi,\n\tdoc/invoke.texi, doc/md.texi, doc/rtl.texi, doc/tm.texi: Remove\n\tuses of @refill.\n\nFrom-SVN: r43545", "tree": {"sha": "4015a862151e4ad236d46478271374306c52e026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4015a862151e4ad236d46478271374306c52e026"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd819a4abafd36d64d2c80ddc0a00531685e6afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd819a4abafd36d64d2c80ddc0a00531685e6afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd819a4abafd36d64d2c80ddc0a00531685e6afa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd819a4abafd36d64d2c80ddc0a00531685e6afa/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac826449f7bd552a450e693f665a4071f9eec07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac826449f7bd552a450e693f665a4071f9eec07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac826449f7bd552a450e693f665a4071f9eec07"}], "stats": {"total": 146, "additions": 76, "deletions": 70}, "files": [{"sha": "ee2bef92d1997618871bff558130c0af20c81825", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -1,3 +1,9 @@\n+2001-06-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/extend.texi, doc/gcc.texi, doc/install-old.texi,\n+\tdoc/invoke.texi, doc/md.texi, doc/rtl.texi, doc/tm.texi: Remove\n+\tuses of @refill.\n+\n Sun Jun 24 21:21:49 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* (movsi_insv_1, movsi_insv_1_rex64): Allow immediate operand."}, {"sha": "f96341d8b78f395580fc6860482c8d0579041b60", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -2373,7 +2373,7 @@ struct foo @{ int x; char y; @} foo1;\n @noindent\n the value of @code{__alignof__ (foo1.y)} is probably 2 or 4, the same as\n @code{__alignof__ (int)}, even though the data type of @code{foo1.y}\n-does not itself demand any alignment.@refill\n+does not itself demand any alignment.\n \n It is an error to ask for the alignment of an incomplete type.\n \n@@ -3553,7 +3553,7 @@ since they won't work in a program compiled with @option{-ansi}\n compiled with @option{-traditional}.  The ISO C99 keyword\n @code{restrict} is only available when @option{-std=gnu99} (which will\n eventually be the default) or @option{-std=c99} (or the equivalent\n-@option{-std=iso9899:1999}) is used.@refill\n+@option{-std=iso9899:1999}) is used.\n \n The way to solve these problems is to put @samp{__} at the beginning and\n end of each problematical keyword.  For example, use @code{__asm__}"}, {"sha": "d7b1089e8ea56de03a2c053dd0b0b3144fc57d15", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -3185,7 +3185,7 @@ Variables are represented as declaration nodes.\n The language-independent source files for parsing are\n @file{stor-layout.c}, @file{fold-const.c}, and @file{tree.c}.\n There are also header files @file{tree.h} and @file{tree.def}\n-which define the format of the tree representation.@refill\n+which define the format of the tree representation.\n \n C Preprocessing, for language front ends, that want or require it, is\n performed by cpplib, which is covered in seperate documentation.  In\n@@ -3293,14 +3293,14 @@ and @file{emit-rtl.c}.\n Also, the file\n @file{insn-emit.c}, generated from the machine description by the\n program @code{genemit}, is used in this pass.  The header file\n-@file{expr.h} is used for communication within this pass.@refill\n+@file{expr.h} is used for communication within this pass.\n \n @findex genflags\n @findex gencodes\n The header files @file{insn-flags.h} and @file{insn-codes.h},\n generated from the machine description by the programs @code{genflags}\n and @code{gencodes}, tell this pass which standard names are available\n-for use and which patterns correspond to them.@refill\n+for use and which patterns correspond to them.\n \n Aside from debugging information output, none of the following passes\n refers to the tree structure representation of the function (only\n@@ -3731,7 +3731,7 @@ Several passes use the instruction recognizer, which consists of\n @file{recog.c} and @file{recog.h}, plus the files @file{insn-recog.c}\n and @file{insn-extract.c} that are generated automatically from the\n machine description by the tools @file{genrecog} and\n-@file{genextract}.@refill\n+@file{genextract}.\n \n @item\n Several passes use the header files @file{regs.h} which defines the\n@@ -3751,7 +3751,7 @@ attributes defined for a particular machine is in file\n @file{insn-attr.h}, which is generated from the machine description by\n the program @file{genattr}.  The file @file{insn-attrtab.c} contains\n subroutines to obtain the attribute values for insns.  It is generated\n-from the machine description by the program @file{genattrtab}.@refill\n+from the machine description by the program @file{genattrtab}.\n @end itemize\n @end ifset\n "}, {"sha": "689ce86e74122382ce4aad682c41dff54796d869", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -503,7 +503,7 @@ file for GNU CC as follows:\n Define the VMS logical names @samp{GNU_CC} and @samp{GNU_CC_INCLUDE}\n to point to the directories where the GNU CC executables\n (@file{gcc-cpp.exe}, @file{gcc-cc1.exe}, etc.) and the C include files are\n-kept respectively.  This should be done with the commands:@refill\n+kept respectively.  This should be done with the commands:\n \n @smallexample\n $ assign /system /translation=concealed -\n@@ -547,7 +547,7 @@ perform the following steps:\n @item\n Define the VMS logical name @samp{GNU_GXX_INCLUDE} to point to the\n directory where the preprocessor will search for the C++ header files.\n-This can be done with the command:@refill\n+This can be done with the command:\n \n @smallexample\n $ assign /system /translation=concealed -\n@@ -582,7 +582,7 @@ Execute the command procedure @file{vmsconfig.com} to set up the files\n @file{tm.h}, @file{config.h}, @file{aux-output.c}, and @file{md.}, and\n to create files @file{tconfig.h} and @file{hconfig.h}.  This procedure\n also creates several linker option files used by @file{make-cc1.com} and\n-a data file used by @file{make-l2.com}.@refill\n+a data file used by @file{make-l2.com}.\n \n @smallexample\n $ @@vmsconfig.com\n@@ -592,7 +592,7 @@ $ @@vmsconfig.com\n Setup the logical names and command tables as defined above.  In\n addition, define the VMS logical name @samp{GNU_BISON} to point at the\n to the directories where the Bison executable is kept.  This should be\n-done with the command:@refill\n+done with the command:\n \n @smallexample\n $ assign /system /translation=concealed -\n@@ -603,7 +603,7 @@ You may, if you choose, use the @file{INSTALL_BISON.COM} script in the\n @file{[BISON]} directory.\n \n @item\n-Install the @samp{BISON} command with the command line:@refill\n+Install the @samp{BISON} command with the command line:\n \n @smallexample\n $ set command /table=sys$common:[syslib]dcltables -\n@@ -617,7 +617,7 @@ Type @samp{@@make-gcc} to recompile everything (alternatively, submit\n the file @file{make-gcc.com} to a batch queue).  If you wish to build\n the GNU C++ compiler as well as the GNU CC compiler, you must first edit\n @file{make-gcc.com} and follow the instructions that appear in the\n-comments.@refill\n+comments.\n \n @item\n In order to use GCC, you need a library of functions which GCC compiled code\n@@ -628,7 +628,7 @@ file @file{libgcc2.c}.  To compile this you should use the command procedure\n the same distribution that @file{libgcc2.c} came from, and\n @file{make-gcc.com} will automatically do all of this for you.\n \n-To install the library, use the following commands:@refill\n+To install the library, use the following commands:\n \n @smallexample\n $ library gnu_cc:[000000]gcclib/delete=(new,eprintf)"}, {"sha": "88f73c301b677ff77c055f4503dc240b3ce7c0ea", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -793,7 +793,7 @@ producing an executable file as output.\n If @option{-o} is not specified, the default is to put an executable file\n in @file{a.out}, the object file for @file{@var{source}.@var{suffix}} in\n @file{@var{source}.o}, its assembler file in @file{@var{source}.s}, and\n-all preprocessed C source on standard output.@refill\n+all preprocessed C source on standard output.\n \n @item -v\n @opindex v\n@@ -3163,7 +3163,7 @@ and @option{-fdefer-pop} on all machines.  The compiler turns on\n @option{-fdelayed-branch} on machines that have delay slots, and\n @option{-fomit-frame-pointer} on machines that can support debugging even\n without a frame pointer.  On some machines the compiler also turns\n-on other flags.@refill\n+on other flags.\n \n @item -O2\n @opindex O2\n@@ -3263,15 +3263,15 @@ On some machines, such as the Vax, this flag has no effect, because\n the standard calling sequence automatically handles the frame pointer\n and nothing is saved by pretending it doesn't exist.  The\n machine-description macro @code{FRAME_POINTER_REQUIRED} controls\n-whether a target machine supports this flag.  @xref{Registers}.@refill\n+whether a target machine supports this flag.  @xref{Registers}.\n @end ifset\n @ifclear INTERNALS\n On some machines, such as the Vax, this flag has no effect, because\n the standard calling sequence automatically handles the frame pointer\n and nothing is saved by pretending it doesn't exist.  The\n machine-description macro @code{FRAME_POINTER_REQUIRED} controls\n whether a target machine supports this flag.  @xref{Registers,,Register\n-Usage, gcc.info, Using and Porting GCC}.@refill\n+Usage, gcc.info, Using and Porting GCC}.\n @end ifclear\n \n @item -foptimize-sibling-calls\n@@ -4934,7 +4934,7 @@ version of GCC that you installed.\n The @option{-b} and @option{-V} options actually work by controlling part of\n the file name used for the executable files and libraries used for\n compilation.  A given version of GCC, for a given target machine, is\n-normally kept in the directory @file{/usr/local/lib/gcc-lib/@var{machine}/@var{version}}.@refill\n+normally kept in the directory @file{/usr/local/lib/gcc-lib/@var{machine}/@var{version}}.\n \n Thus, sites can customize the effect of @option{-b} or @option{-V} either by\n changing the names of these directories or adding alternate names (or\n@@ -6523,7 +6523,7 @@ Supported values for @var{cpu_type} are @samp{rios}, @samp{rios1},\n @option{-mcpu=power2}, @option{-mcpu=powerpc}, and @option{-mcpu=powerpc64}\n specify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not MPC601),\n and 64-bit PowerPC architecture machine types, with an appropriate,\n-generic processor model assumed for scheduling purposes.@refill\n+generic processor model assumed for scheduling purposes.\n \n Specifying any of the following options:\n @option{-mcpu=rios1}, @option{-mcpu=rios2}, @option{-mcpu=rsc},\n@@ -6538,7 +6538,7 @@ Exactly similarly, all of @option{-mcpu=403},\n @option{-mcpu=505}, @option{-mcpu=821}, @option{-mcpu=860} and @option{-mcpu=powerpc}\n enable the @option{-mpowerpc} option and disable the @option{-mpower} option.\n @option{-mcpu=common} disables both the\n-@option{-mpower} and @option{-mpowerpc} options.@refill\n+@option{-mpower} and @option{-mpowerpc} options.\n \n AIX versions 4 or greater selects @option{-mcpu=common} by default, so\n that code will operate on all members of the RS/6000 POWER and PowerPC\n@@ -6553,7 +6553,7 @@ disables the @samp{new-mnemonics} option.  Specifying @option{-mcpu=601},\n @option{-mcpu=602}, @option{-mcpu=603}, @option{-mcpu=603e}, @option{-mcpu=604},\n @option{-mcpu=620}, @option{-mcpu=630}, @option{-mcpu=403}, @option{-mcpu=505},\n @option{-mcpu=821}, @option{-mcpu=860} or @option{-mcpu=powerpc} also enables\n-the @samp{new-mnemonics} option.@refill\n+the @samp{new-mnemonics} option.\n \n Specifying @option{-mcpu=403}, @option{-mcpu=821}, or @option{-mcpu=860} also\n enables the @option{-msoft-float} option.\n@@ -6598,7 +6598,7 @@ these options, specify @option{-mminimal-toc} instead.  This option causes\n GCC to make only one TOC entry for every file.  When you specify this\n option, GCC will produce code that is slower and larger but which\n uses extremely little TOC space.  You may wish to use this option\n-only on files that contain less frequently executed code. @refill\n+only on files that contain less frequently executed code.\n \n @item -maix64\n @itemx -maix32"}, {"sha": "680c76ceb21c75d394ed098e80197d253d1df4f5", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -426,7 +426,7 @@ vector of @var{subpat} expressions in the @code{match_parallel}, if each\n @emph{and} the function @var{predicate} returns nonzero on the\n @code{parallel} that is the body of the insn.  It is the responsibility\n of the predicate to validate elements of the @code{parallel} beyond\n-those listed in the @code{match_parallel}.@refill\n+those listed in the @code{match_parallel}.\n \n A typical use of @code{match_parallel} is to match load and store\n multiple expressions, which can contain a variable number of elements\n@@ -3357,7 +3357,7 @@ logically equivalent RTL expressions.\n @item\n The only possible RTL expressions involving both bitwise exclusive-or\n and bitwise negation are @code{(xor:@var{m} @var{x} @var{y})}\n-and @code{(not:@var{m} (xor:@var{m} @var{x} @var{y}))}.@refill\n+and @code{(not:@var{m} (xor:@var{m} @var{x} @var{y}))}.\n \n @item\n The sum of three items, one of which is a constant, will only appear in\n@@ -3370,7 +3370,7 @@ the form\n @item\n On machines that do not use @code{cc0},\n @code{(compare @var{x} (const_int 0))} will be converted to\n-@var{x}.@refill\n+@var{x}.\n \n @cindex @code{zero_extract}, canonicalization of\n @cindex @code{sign_extract}, canonicalization of\n@@ -3596,7 +3596,7 @@ then the last insn it generates must not be a @code{code_label},\n @code{jump_insn} or @code{call_insn}.  If you don't need a real insn\n at the end, emit an insn to copy the result of the operation into\n itself.  Such an insn will generate no code, but it can avoid problems\n-in the compiler.@refill\n+in the compiler.\n \n @node Insn Splitting\n @section Defining How to Split Instructions\n@@ -3867,7 +3867,7 @@ it must obey the same rules as in a @code{define_insn}.\n In this skeleton, @var{insn-pattern-1} and so on are patterns to match\n consecutive insns.  The optimization applies to a sequence of insns when\n @var{insn-pattern-1} matches the first one, @var{insn-pattern-2} matches\n-the next, and so on.@refill\n+the next, and so on.\n \n Each of the insns matched by a peephole must also match a\n @code{define_insn}.  Peepholes are checked only at the last stage just\n@@ -3919,7 +3919,7 @@ elsewhere.  Use the C expression @code{dead_or_set_p (@var{insn},\n @var{op})}, where @var{insn} is the insn in which you expect the value\n to be used for the last time (from the value of @code{insn}, together\n with use of @code{prev_nonnote_insn}), and @var{op} is the intermediate\n-value (from @code{operands[@var{i}]}).@refill\n+value (from @code{operands[@var{i}]}).\n \n Applying the optimization means replacing the sequence of insns with one\n new insn.  The @var{template} controls ultimate output of assembler code\n@@ -4233,7 +4233,7 @@ The string @var{value} specifies a constant attribute value.\n If @var{value} is specified as @samp{\"*\"}, it means that the default value of\n the attribute is to be used for the insn containing this expression.\n @samp{\"*\"} obviously cannot be used in the @var{default} expression\n-of a @code{define_attr}.@refill\n+of a @code{define_attr}.\n \n If the attribute whose value is being specified is numeric, @var{value}\n must be a string containing a non-negative integer (normally\n@@ -4315,14 +4315,14 @@ These tests are true if the indicated comparison of the two arithmetic\n expressions is true.  Arithmetic expressions are formed with\n @code{plus}, @code{minus}, @code{mult}, @code{div}, @code{mod},\n @code{abs}, @code{neg}, @code{and}, @code{ior}, @code{xor}, @code{not},\n-@code{ashift}, @code{lshiftrt}, and @code{ashiftrt} expressions.@refill\n+@code{ashift}, @code{lshiftrt}, and @code{ashiftrt} expressions.\n \n @findex get_attr\n @code{const_int} and @code{symbol_ref} are always valid terms (@pxref{Insn\n Lengths},for additional forms).  @code{symbol_ref} is a string\n denoting a C expression that yields an @code{int} when evaluated by the\n @samp{get_attr_@dots{}} routine.  It should normally be a global\n-variable.@refill\n+variable.\n \n @findex eq_attr\n @item (eq_attr @var{name} @var{value})\n@@ -4352,7 +4352,7 @@ is equivalent to\n If @var{name} specifies an attribute of @samp{alternative}, it refers to the\n value of the compiler variable @code{which_alternative}\n (@pxref{Output Statement}) and the values must be small integers.  For\n-example,@refill\n+example,\n \n @smallexample\n (eq_attr \"alternative\" \"2,3\")\n@@ -4368,7 +4368,7 @@ is equivalent to\n \n Note that, for most attributes, an @code{eq_attr} test is simplified in cases\n where the value of the attribute being tested is known for all insns matching\n-a particular pattern.  This is by far the most common case.@refill\n+a particular pattern.  This is by far the most common case.\n \n @findex attr_flag\n @item (attr_flag @var{name})\n@@ -4430,15 +4430,15 @@ insn is set to the default value for that attribute, as specified in its\n @code{define_attr}.  Extensive use of default values for attributes\n permits the specification of the values for only one or two attributes\n in the definition of most insn patterns, as seen in the example in the\n-next section.@refill\n+next section.\n \n The optional last argument of @code{define_insn} and\n @code{define_peephole} is a vector of expressions, each of which defines\n the value for a single attribute.  The most general way of assigning an\n attribute's value is to use a @code{set} expression whose first operand is an\n @code{attr} expression giving the name of the attribute being set.  The\n second operand of the @code{set} is an attribute expression\n-(@pxref{Expressions}) giving the value of the attribute.@refill\n+(@pxref{Expressions}) giving the value of the attribute.\n \n When the attribute value depends on the @samp{alternative} attribute\n (i.e., which is the applicable alternative in the constraint of the\n@@ -4737,7 +4737,7 @@ satisfy attribute test @var{delay-n}.  @var{annul-true-n} is an\n attribute test that specifies which insns may be annulled if the branch\n is true.  Similarly, @var{annul-false-n} specifies which insns in the\n delay slot may be annulled if the branch is false.  If annulling is not\n-supported for that delay slot, @code{(nil)} should be coded.@refill\n+supported for that delay slot, @code{(nil)} should be coded.\n \n For example, in the common case where branch and call insns require\n a single delay slot, which may contain any insn other than a branch or"}, {"sha": "9254d27b2565c50a4a9b137aa25f908fcd92fa2f", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -185,7 +185,7 @@ expression (actually a pointer to an expression), @samp{i} for integer,\n @samp{w} for wide integer, @samp{s} for string, and @samp{E} for vector\n of expressions.  The sequence of letters for an expression code is\n called its @dfn{format}.  For example, the format of @code{subreg} is\n-@samp{ei}.@refill\n+@samp{ei}.\n \n @cindex RTL format characters\n A few other format characters are used occasionally:\n@@ -271,7 +271,7 @@ You can make no assumptions about the format of these codes.\n Operands of expressions are accessed using the macros @code{XEXP},\n @code{XINT}, @code{XWINT} and @code{XSTR}.  Each of these macros takes\n two arguments: an expression-pointer (RTX) and an operand number\n-(counting from zero).  Thus,@refill\n+(counting from zero).  Thus,\n \n @example\n XEXP (@var{x}, 2)\n@@ -304,7 +304,7 @@ compile without error, and would return the second, integer operand cast as\n an expression pointer, which would probably result in a crash when\n accessed.  Nothing stops you from writing @code{XEXP (@var{x}, 28)} either,\n but this will access memory past the end of the expression with\n-unpredictable results.@refill\n+unpredictable results.\n \n Access to operands which are vectors is more complicated.  You can use the\n macro @code{XVEC} to get the vector-pointer itself, or the macros\n@@ -963,15 +963,15 @@ only expression for integer value negative one is found in\n @code{constm1_rtx}.  Any attempt to create an expression of code\n @code{const_int} and value zero, one, two or negative one will return\n @code{const0_rtx}, @code{const1_rtx}, @code{const2_rtx} or\n-@code{constm1_rtx} as appropriate.@refill\n+@code{constm1_rtx} as appropriate.\n \n @findex const_true_rtx\n Similarly, there is only one object for the integer whose value is\n @code{STORE_FLAG_VALUE}.  It is found in @code{const_true_rtx}.  If\n @code{STORE_FLAG_VALUE} is one, @code{const_true_rtx} and\n @code{const1_rtx} will point to the same object.  If\n @code{STORE_FLAG_VALUE} is @minus{}1, @code{const_true_rtx} and\n-@code{constm1_rtx} will point to the same object.@refill\n+@code{constm1_rtx} will point to the same object.\n \n @findex const_double\n @item (const_double:@var{m} @var{addr} @var{i0} @var{i1} @dots{})\n@@ -990,7 +990,7 @@ it has not been allocated a memory location, but is on the chain of all\n undisplayed field), @var{addr} contains @code{const0_rtx}.  If it is not\n on the chain, @var{addr} contains @code{cc0_rtx}.  @var{addr} is\n customarily accessed with the macro @code{CONST_DOUBLE_MEM} and the\n-chain field via @code{CONST_DOUBLE_CHAIN}.@refill\n+chain field via @code{CONST_DOUBLE_CHAIN}.\n \n @findex CONST_DOUBLE_LOW\n If @var{m} is @code{VOIDmode}, the bits of the value are stored in\n@@ -1966,10 +1966,10 @@ Represents the action of storing the value of @var{x} into the place\n represented by @var{lval}.  @var{lval} must be an expression\n representing a place that can be stored in: @code{reg} (or @code{subreg}\n or @code{strict_low_part}), @code{mem}, @code{pc}, @code{parallel}, or\n-@code{cc0}.@refill\n+@code{cc0}.\n \n If @var{lval} is a @code{reg}, @code{subreg} or @code{mem}, it has a\n-machine mode; then @var{x} must be valid for that mode.@refill\n+machine mode; then @var{x} must be valid for that mode.\n \n If @var{lval} is a @code{reg} whose machine mode is less than the full\n width of the register, then it means that the part of the register\n@@ -1982,7 +1982,7 @@ an undefined way.\n If @var{lval} is a @code{strict_low_part} of a @code{subreg}, then the\n part of the register specified by the machine mode of the\n @code{subreg} is given the value @var{x} and the rest of the register\n-is not changed.@refill\n+is not changed.\n \n If @var{lval} is @code{(cc0)}, it has no machine mode, and @var{x} may\n be either a @code{compare} expression or a value that may have any mode.\n@@ -2010,7 +2010,7 @@ does not jump) and the other of the two must be a @code{label_ref}\n (for the case which does jump).  @var{x} may also be a @code{mem} or\n @code{(plus:SI (pc) @var{y})}, where @var{y} may be a @code{reg} or a\n @code{mem}; these unusual patterns are used to represent jumps through\n-branch tables.@refill\n+branch tables.\n \n If @var{lval} is neither @code{(cc0)} nor @code{(pc)}, the mode of\n @var{lval} must not be @code{VOIDmode} and the mode of @var{x} must be\n@@ -2160,7 +2160,7 @@ Represents several side effects performed in parallel.  The square\n brackets stand for a vector; the operand of @code{parallel} is a\n vector of expressions.  @var{x0}, @var{x1} and so on are individual\n side effect expressions---expressions of code @code{set}, @code{call},\n-@code{return}, @code{clobber} or @code{use}.@refill\n+@code{return}, @code{clobber} or @code{use}.\n \n ``In parallel'' means that first all the values used in the individual\n side-effects are computed, and second all the actual side-effects are\n@@ -2277,7 +2277,7 @@ space is given to each address-difference.  @var{min} and @var{max}\n are set up by branch shortening and hold a label with a minimum and a\n maximum address, respectively.  @var{flags} indicates the relative\n position of @var{base}, @var{min} and @var{max} to the containing insn\n-and of @var{min} and @var{max} to @var{base}.  See rtl.def for details.@refill\n+and of @var{min} and @var{max} to @var{base}.  See rtl.def for details.\n @end table\n \n @node Incdec\n@@ -2299,7 +2299,7 @@ machines allow only a @code{reg}.  @var{m} must be the machine mode\n for pointers on the machine in use.  The amount @var{x} is decremented\n by is the length in bytes of the machine mode of the containing memory\n reference of which this expression serves as the address.  Here is an\n-example of its use:@refill\n+example of its use:\n \n @example\n (mem:DF (pre_dec:SI (reg:SI 39)))\n@@ -2342,7 +2342,7 @@ The expression @var{y} must be one of three forms:\n @end table\n where @var{z} is an index register and @var{i} is a constant.\n \n-Here is an example of its use:@refill\n+Here is an example of its use:\n \n @example\n (mem:SF (post_modify:SI (reg:SI 42) (plus (reg:SI 42) (reg:SI 48))))\n@@ -2492,7 +2492,7 @@ first insn in a @code{sequence}, @code{NEXT_INSN (PREV_INSN (@var{insn}))}\n is the insn containing the @code{sequence} expression, as is the value\n of @code{PREV_INSN (NEXT_INSN (@var{insn}))} is @var{insn} is the last\n insn in the @code{sequence} expression.  You can use these expressions\n-to find the containing @code{sequence} expression.@refill\n+to find the containing @code{sequence} expression.\n \n Every insn has one of the following six expression codes:\n \n@@ -2957,7 +2957,7 @@ filling is done, this may no longer be true.  In this case a\n @code{REG_CC_USER} note will be placed on the insn setting @code{cc0} to\n point to the insn using @code{cc0} and a @code{REG_CC_SETTER} note will\n be placed on the insn using @code{cc0} to point to the insn setting\n-@code{cc0}.@refill\n+@code{cc0}.\n @end table\n \n These values are only used in the @code{LOG_LINKS} field, and indicate"}, {"sha": "a159874718f2a1b7f51e04dceada782cc9cf41ee", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd819a4abafd36d64d2c80ddc0a00531685e6afa/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bd819a4abafd36d64d2c80ddc0a00531685e6afa", "patch": "@@ -2815,7 +2815,7 @@ register windows are used, the register number as seen by the called\n function is @code{STATIC_CHAIN_INCOMING_REGNUM}, while the register\n number as seen by the calling function is @code{STATIC_CHAIN_REGNUM}.  If\n these registers are the same, @code{STATIC_CHAIN_INCOMING_REGNUM} need\n-not be defined.@refill\n+not be defined.\n \n The static chain register need not be a fixed register.\n \n@@ -2831,7 +2831,7 @@ If the static chain is passed in memory, these macros provide rtx giving\n @code{STATIC_CHAIN} and @code{STATIC_CHAIN_INCOMING} give the locations\n as seen by the calling and called functions, respectively.  Often the former\n will be at an offset from the stack pointer and the latter at an offset from\n-the frame pointer.@refill\n+the frame pointer.\n \n @findex stack_pointer_rtx\n @findex frame_pointer_rtx\n@@ -2867,7 +2867,7 @@ In certain cases, the compiler does not know how to produce valid code\n without a frame pointer.  The compiler recognizes those cases and\n automatically gives the function a frame pointer regardless of what\n @code{FRAME_POINTER_REQUIRED} says.  You don't need to worry about\n-them.@refill\n+them.\n \n In a function that does not require a frame pointer, the frame pointer\n register can be allocated for ordinary usage, unless you mark it as a\n@@ -3185,7 +3185,7 @@ be defined in a similar fashion to tell the function being called\n where the arguments will arrive.\n \n If @code{FUNCTION_INCOMING_ARG} is not defined, @code{FUNCTION_ARG}\n-serves both purposes.@refill\n+serves both purposes.\n \n @findex FUNCTION_ARG_PARTIAL_NREGS\n @item FUNCTION_ARG_PARTIAL_NREGS (@var{cum}, @var{mode}, @var{type}, @var{named})\n@@ -3296,7 +3296,7 @@ A C statement (sans semicolon) to update the summarizer variable\n @var{cum} to advance past an argument in the argument list.  The\n values @var{mode}, @var{type} and @var{named} describe that argument.\n Once this is done, the variable @var{cum} is suitable for analyzing\n-the @emph{following} argument with @code{FUNCTION_ARG}, etc.@refill\n+the @emph{following} argument with @code{FUNCTION_ARG}, etc.\n \n This macro need not do anything if the argument in question was passed\n on the stack.  The compiler knows how to track the amount of stack space\n@@ -3373,7 +3373,7 @@ a tree node representing a data type.  Write @code{TYPE_MODE\n (@var{valtype})} to get the machine mode used to represent that type.\n On many machines, only the mode is relevant.  (Actually, on most\n machines, scalar values are returned in the same place regardless of\n-mode).@refill\n+mode).\n \n The value of the expression is usually a @code{reg} RTX for the hard\n register where the return value is stored.  The value can also be a\n@@ -3388,7 +3388,7 @@ If the precise function being called is known, @var{func} is a tree\n node (@code{FUNCTION_DECL}) for it; otherwise, @var{func} is a null\n pointer.  This makes it possible to use a different value-returning\n convention for specific functions when all their calls are\n-known.@refill\n+known.\n \n @code{FUNCTION_VALUE} is not used for return vales with aggregate data\n types, because these are returned in another way.  See\n@@ -3403,10 +3403,10 @@ the same as the one in which the caller sees the value.\n For such machines, @code{FUNCTION_VALUE} computes the register in which\n the caller will see the value.  @code{FUNCTION_OUTGOING_VALUE} should be\n defined in a similar fashion to tell the function where to put the\n-value.@refill\n+value.\n \n If @code{FUNCTION_OUTGOING_VALUE} is not defined,\n-@code{FUNCTION_VALUE} serves both purposes.@refill\n+@code{FUNCTION_VALUE} serves both purposes.\n \n @code{FUNCTION_OUTGOING_VALUE} is not used for return vales with\n aggregate data types, because these are returned in another way.  See\n@@ -3420,7 +3420,7 @@ being called is known, @var{func} is a tree node\n (@code{FUNCTION_DECL}) for it; otherwise, @var{func} is a null\n pointer.  This makes it possible to use a different value-returning\n convention for specific functions when all their calls are\n-known.@refill\n+known.\n \n Note that ``library function'' in this context means a compiler\n support routine, used to perform arithmetic, whose name is known\n@@ -4625,7 +4625,7 @@ Subroutines to check for acceptable registers for various purposes (one\n for base registers, one for index registers, and so on) are typically\n among the subroutines used to define @code{GO_IF_LEGITIMATE_ADDRESS}.\n Then only these subroutine macros need have two variants; the higher\n-levels of macros may be the same whether strict or not.@refill\n+levels of macros may be the same whether strict or not.\n \n Normally, constant addresses which are the sum of a @code{symbol_ref}\n and an integer are stored inside a @code{const} RTX to mark them as\n@@ -4801,7 +4801,7 @@ A C expression that is nonzero if @var{x} is a legitimate constant for\n an immediate operand on the target machine.  You can assume that\n @var{x} satisfies @code{CONSTANT_P}, so you need not check this.  In fact,\n @samp{1} is a suitable definition for this macro on machines where\n-anything @code{CONSTANT_P} is valid.@refill\n+anything @code{CONSTANT_P} is valid.\n @end table\n \n @node Condition Code\n@@ -5698,7 +5698,7 @@ instruction to assemble an integer of 16, 8, 4, 2 or 1 bytes,\n respectively, whose value is @var{value}.  The argument @var{exp} will\n be an RTL expression which represents a constant value.  Use\n @samp{output_addr_const (@var{stream}, @var{exp})} to output this value\n-as an assembler expression.@refill\n+as an assembler expression.\n \n For sizes larger than @code{UNITS_PER_WORD}, if the action of a macro\n would be identical to repeatedly calling the macro corresponding to\n@@ -5738,7 +5738,7 @@ A C string constant, including spacing, giving the pseudo-op to use\n to assemble 16-, 32-, and 64-bit integers respectively @emph{without}\n adding implicit padding or alignment.  These macros are required if\n DWARF 2 frame unwind is used.  On ELF systems, these will default\n-to @code{.2byte}, @code{.4byte}, and @code{.8byte}.@refill\n+to @code{.2byte}, @code{.4byte}, and @code{.8byte}.\n \n @findex ASM_OUTPUT_ASCII\n @item ASM_OUTPUT_ASCII (@var{stream}, @var{ptr}, @var{len})\n@@ -7643,7 +7643,7 @@ in @var{output} (which will be a variable).\n The operation to be performed is specified by @var{code}, a tree code\n which will always be one of the following: @code{PLUS_EXPR},\n @code{MINUS_EXPR}, @code{MULT_EXPR}, @code{RDIV_EXPR},\n-@code{MAX_EXPR}, @code{MIN_EXPR}.@refill\n+@code{MAX_EXPR}, @code{MIN_EXPR}.\n \n @cindex overflow while constant folding\n The expansion of this macro is responsible for checking for overflow.\n@@ -7876,7 +7876,7 @@ extends.\n @item IMPLICIT_FIX_EXPR\n An alias for a tree code that should be used by default for conversion\n of floating point values to fixed point.  Normally,\n-@code{FIX_ROUND_EXPR} is used.@refill\n+@code{FIX_ROUND_EXPR} is used.\n \n @findex FIXUNS_TRUNC_LIKE_FIX_TRUNC\n @item FIXUNS_TRUNC_LIKE_FIX_TRUNC\n@@ -7892,7 +7892,7 @@ compile code for in the general case.  It may be\n @code{ROUND_DIV_EXPR}.  These four division operators differ in how\n they round the result to an integer.  @code{EASY_DIV_EXPR} is used\n when it is permissible to use any of those kinds of division and the\n-choice should be made on the basis of efficiency.@refill\n+choice should be made on the basis of efficiency.\n \n @findex MOVE_MAX\n @item MOVE_MAX"}]}