{"sha": "fcedf218ead3b73d095a88121224df3347c102a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlZGYyMThlYWQzYjczZDA5NWE4ODEyMTIyNGRmMzM0N2MxMDJhNg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-13T10:28:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:28:10Z"}, "message": "g-spipat.adb (Break): Fix accessibility error (vsn taking not null access Vstring)\n\n2007-12-06  Robert Dewar  <dewar@adacore.com>\n\n\t* g-spipat.adb (Break): Fix accessibility error (vsn taking not null\n\taccess Vstring)\n\nFrom-SVN: r130844", "tree": {"sha": "c7e76bab420c88694875a9196cb8efacbc775cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e76bab420c88694875a9196cb8efacbc775cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcedf218ead3b73d095a88121224df3347c102a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcedf218ead3b73d095a88121224df3347c102a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcedf218ead3b73d095a88121224df3347c102a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcedf218ead3b73d095a88121224df3347c102a6/comments", "author": null, "committer": null, "parents": [{"sha": "c80d48556afdb3226ee55ef42b8b3327b71c631f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80d48556afdb3226ee55ef42b8b3327b71c631f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80d48556afdb3226ee55ef42b8b3327b71c631f"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "0e56f8ac409b5ba1b14ea498def32ff67a01c051", "filename": "gcc/ada/g-spipat.adb", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcedf218ead3b73d095a88121224df3347c102a6/gcc%2Fada%2Fg-spipat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcedf218ead3b73d095a88121224df3347c102a6/gcc%2Fada%2Fg-spipat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spipat.adb?ref=fcedf218ead3b73d095a88121224df3347c102a6", "patch": "@@ -1356,7 +1356,6 @@ package body GNAT.Spitbol.Patterns is\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,    0, EOP);\n       A   : constant PE_Ptr :=\n               new PE'(PC_Assign_Imm, 0, EOP, Var'Unrestricted_Access);\n-\n    begin\n       return (AFC with P.Stk + 3, Bracket (E, Pat, A));\n    end \"*\";\n@@ -1366,7 +1365,6 @@ package body GNAT.Spitbol.Patterns is\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,    0, EOP);\n       A   : constant PE_Ptr :=\n               new PE'(PC_Assign_Imm, 0, EOP, Var'Unrestricted_Access);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, A));\n    end \"*\";\n@@ -1376,7 +1374,6 @@ package body GNAT.Spitbol.Patterns is\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,    0, EOP);\n       A   : constant PE_Ptr :=\n               new PE'(PC_Assign_Imm, 0, EOP, Var'Unrestricted_Access);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, A));\n    end \"*\";\n@@ -1395,7 +1392,6 @@ package body GNAT.Spitbol.Patterns is\n       Pat : constant PE_Ptr := Copy (P.P);\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,   0, EOP);\n       W   : constant PE_Ptr := new PE'(PC_Write_Imm, 0, EOP, Fil);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, W));\n    end \"*\";\n@@ -1404,7 +1400,6 @@ package body GNAT.Spitbol.Patterns is\n       Pat : constant PE_Ptr := S_To_PE (P);\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,   0, EOP);\n       W   : constant PE_Ptr := new PE'(PC_Write_Imm, 0, EOP, Fil);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, W));\n    end \"*\";\n@@ -1413,7 +1408,6 @@ package body GNAT.Spitbol.Patterns is\n       Pat : constant PE_Ptr := C_To_PE (P);\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,   0, EOP);\n       W   : constant PE_Ptr := new PE'(PC_Write_Imm, 0, EOP, Fil);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, W));\n    end \"*\";\n@@ -1437,7 +1431,6 @@ package body GNAT.Spitbol.Patterns is\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,    0, EOP);\n       A   : constant PE_Ptr :=\n               new PE'(PC_Assign_OnM, 0, EOP, Var'Unrestricted_Access);\n-\n    begin\n       return (AFC with P.Stk + 3, Bracket (E, Pat, A));\n    end \"**\";\n@@ -1447,7 +1440,6 @@ package body GNAT.Spitbol.Patterns is\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,    0, EOP);\n       A   : constant PE_Ptr :=\n               new PE'(PC_Assign_OnM, 0, EOP, Var'Unrestricted_Access);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, A));\n    end \"**\";\n@@ -1457,7 +1449,6 @@ package body GNAT.Spitbol.Patterns is\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,    0, EOP);\n       A   : constant PE_Ptr :=\n               new PE'(PC_Assign_OnM, 0, EOP, Var'Unrestricted_Access);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, A));\n    end \"**\";\n@@ -1476,7 +1467,6 @@ package body GNAT.Spitbol.Patterns is\n       Pat : constant PE_Ptr := Copy (P.P);\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,   0, EOP);\n       W   : constant PE_Ptr := new PE'(PC_Write_OnM, 0, EOP, Fil);\n-\n    begin\n       return (AFC with P.Stk + 3, Bracket (E, Pat, W));\n    end \"**\";\n@@ -1485,7 +1475,6 @@ package body GNAT.Spitbol.Patterns is\n       Pat : constant PE_Ptr := S_To_PE (P);\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,   0, EOP);\n       W   : constant PE_Ptr := new PE'(PC_Write_OnM, 0, EOP, Fil);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, W));\n    end \"**\";\n@@ -1494,7 +1483,6 @@ package body GNAT.Spitbol.Patterns is\n       Pat : constant PE_Ptr := C_To_PE (P);\n       E   : constant PE_Ptr := new PE'(PC_R_Enter,   0, EOP);\n       W   : constant PE_Ptr := new PE'(PC_Write_OnM, 0, EOP, Fil);\n-\n    begin\n       return (AFC with 3, Bracket (E, Pat, W));\n    end \"**\";\n@@ -1674,7 +1662,6 @@ package body GNAT.Spitbol.Patterns is\n    function Arb return Pattern is\n       Y : constant PE_Ptr := new PE'(PC_Arb_Y, 1, EOP);\n       X : constant PE_Ptr := new PE'(PC_Arb_X, 2, EOP, Y);\n-\n    begin\n       return (AFC with 1, X);\n    end Arb;\n@@ -1687,7 +1674,6 @@ package body GNAT.Spitbol.Patterns is\n    begin\n       if P'Length = 0 then\n          return (AFC with 0, EOP);\n-\n       else\n          return (AFC with 0, Arbno_Simple (S_To_PE (P)));\n       end if;\n@@ -1733,7 +1719,6 @@ package body GNAT.Spitbol.Patterns is\n          X   : constant PE_Ptr := new PE'(PC_Arbno_X, 0, EOP, E);\n          Y   : constant PE_Ptr := new PE'(PC_Arbno_Y, 0, X,   P.Stk + 3);\n          EPY : constant PE_Ptr := Bracket (E, Pat, Y);\n-\n       begin\n          X.Alt := EPY;\n          X.Index := EPY.Index + 1;\n@@ -1765,7 +1750,6 @@ package body GNAT.Spitbol.Patterns is\n \n    function Arbno_Simple (P : PE_Ptr) return PE_Ptr is\n       S : constant PE_Ptr := new PE'(PC_Arbno_S, P.Index + 1, EOP, P);\n-\n    begin\n       Set_Successor (P, S);\n       return S;\n@@ -1827,7 +1811,8 @@ package body GNAT.Spitbol.Patterns is\n \n    function Break (Str : not null access VString) return Pattern is\n    begin\n-      return (AFC with 0, new PE'(PC_Break_VP, 1, EOP, VString_Ptr (Str)));\n+      return (AFC with 0,\n+              new PE'(PC_Break_VP, 1, EOP, Str.all'Unchecked_Access));\n    end Break;\n \n    function Break (Str : VString_Func) return Pattern is\n@@ -1888,7 +1873,6 @@ package body GNAT.Spitbol.Patterns is\n    function BreakX_Make (B : PE_Ptr) return Pattern is\n       X : constant PE_Ptr := new PE'(PC_BreakX_X, 2, B);\n       A : constant PE_Ptr := new PE'(PC_Alt,      1, EOP, X);\n-\n    begin\n       B.Pthen := A;\n       return (AFC with 2, B);\n@@ -1904,6 +1888,10 @@ package body GNAT.Spitbol.Patterns is\n       --  Record given pattern element if not already recorded in RA,\n       --  and also record any referenced pattern elements recursively.\n \n+      ---------------\n+      -- Record_PE --\n+      ---------------\n+\n       procedure Record_PE (E : PE_Ptr) is\n       begin\n          PutD (\"  Record_PE called with PE_Ptr = \" & Image (E));\n@@ -2091,6 +2079,10 @@ package body GNAT.Spitbol.Patterns is\n       procedure Write_Node_Id (E : PE_Ptr);\n       --  Writes out a string identifying the given pattern element\n \n+      -------------------\n+      -- Write_Node_Id --\n+      -------------------\n+\n       procedure Write_Node_Id (E : PE_Ptr) is\n       begin\n          if E = EOP then\n@@ -2118,6 +2110,8 @@ package body GNAT.Spitbol.Patterns is\n          end if;\n       end Write_Node_Id;\n \n+   --  Start of processing for Dump\n+\n    begin\n       New_Line;\n       Put (\"Pattern Dump Output (pattern at \" &\n@@ -2313,7 +2307,6 @@ package body GNAT.Spitbol.Patterns is\n       Pat : constant PE_Ptr := Copy (P.P);\n       E   : constant PE_Ptr := new PE'(PC_R_Enter, 0, EOP);\n       X   : constant PE_Ptr := new PE'(PC_Fence_X, 0, EOP);\n-\n    begin\n       return (AFC with P.Stk + 1, Bracket (E, Pat, X));\n    end Fence;\n@@ -2402,7 +2395,6 @@ package body GNAT.Spitbol.Patterns is\n \n       procedure Delete_Ampersand is\n          L : constant Natural := Length (Result);\n-\n       begin\n          if L > 2 then\n             Delete (Result, L - 1, L);\n@@ -4340,7 +4332,6 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Len_NF => declare\n             N : constant Natural := Node.NF.all;\n-\n          begin\n             if Cursor + N > Length then\n                goto Fail;\n@@ -4504,7 +4495,6 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Pos_NF => declare\n             N : constant Natural := Node.NF.all;\n-\n          begin\n             if Cursor = N then\n                goto Succeed;\n@@ -4593,7 +4583,6 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_RPos_NF => declare\n             N : constant Natural := Node.NF.all;\n-\n          begin\n             if Length - Cursor = N then\n                goto Succeed;\n@@ -4625,7 +4614,6 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_RTab_NF => declare\n             N : constant Natural := Node.NF.all;\n-\n          begin\n             if Length - Cursor >= N then\n                Cursor := Length - N;\n@@ -4654,9 +4642,10 @@ package body GNAT.Spitbol.Patterns is\n          --  Span (one character case)\n \n          when PC_Span_CH => declare\n-            P : Natural := Cursor;\n+            P : Natural;\n \n          begin\n+            P := Cursor;\n             while P < Length\n               and then Subject (P + 1) = Node.Char\n             loop\n@@ -4674,9 +4663,10 @@ package body GNAT.Spitbol.Patterns is\n          --  Span (character set case)\n \n          when PC_Span_CS => declare\n-            P : Natural := Cursor;\n+            P : Natural;\n \n          begin\n+            P := Cursor;\n             while P < Length\n               and then Is_In (Subject (P + 1), Node.CS)\n             loop\n@@ -4807,7 +4797,6 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_String => declare\n             Len : constant Natural := Node.Str'Length;\n-\n          begin\n             if (Length - Cursor) >= Len\n               and then Node.Str.all = Subject (Cursor + 1 .. Cursor + Len)\n@@ -4879,7 +4868,6 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Tab_NF => declare\n             N : constant Natural := Node.NF.all;\n-\n          begin\n             if Cursor <= N then\n                Cursor := N;"}]}