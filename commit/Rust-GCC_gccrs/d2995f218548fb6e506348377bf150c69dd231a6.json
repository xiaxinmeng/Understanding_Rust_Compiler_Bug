{"sha": "d2995f218548fb6e506348377bf150c69dd231a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI5OTVmMjE4NTQ4ZmI2ZTUwNjM0ODM3N2JmMTUwYzY5ZGQyMzFhNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-02-16T13:54:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-02-16T13:54:30Z"}, "message": "quadmath-printf.c: Also check __GLIBC__ when checking whether workarounds for printf hook handling...\n\n\t* printf/quadmath-printf.c: Also check __GLIBC__ when checking\n\twhether workarounds for printf hook handling should be added.\n\n\t* configure.ac: Check for locale.h too.\n\t(USE_LOCALE_SUPPORT): Remove check.\n\t(USE_NL_LANGINFO, USE_NL_LANGINFO_WC, USE_LOCALECONV): New checks.\n\t(USE_I18_NUMBER_H): Check also for _NL_CTYPE_MB_CUR_MAX.\n\t* printf/printf_fphex.c (__quadmath_printf_fphex): Use nl_langinfo\n\tor localeconv for narrow version and nl_langinfo if USE_NL_LANGINFO_WC\n\tfor wide version.\n\t* printf/quadmath-printf.h: Include locale.h if HAVE_LOCALE_H.\n\t* printf/printf_fp.c (USE_I18N_NUMBER_H): Don't define to 0.\n\t(__quadmath_printf_fp): Use nl_langinfo or localeconv for narrow\n\tversion and nl_langinfo if USE_NL_LANGINFO_WC for wide version.\n\tGuard nl_langinfo (_NL_CTYPE_MB_CUR_MAX) use with\n\tUSE_I18N_NUMBER_H #ifdef.\n\t* configure: Regenerated.\n\t* config.h.in: Regenerated.\n\nFrom-SVN: r170211", "tree": {"sha": "f3947cffa865d6825f1d64a027010b829f2e6182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3947cffa865d6825f1d64a027010b829f2e6182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2995f218548fb6e506348377bf150c69dd231a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2995f218548fb6e506348377bf150c69dd231a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2995f218548fb6e506348377bf150c69dd231a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2995f218548fb6e506348377bf150c69dd231a6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5037599a7442f3b528905f13221c8affa5a9f20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5037599a7442f3b528905f13221c8affa5a9f20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5037599a7442f3b528905f13221c8affa5a9f20e"}], "stats": {"total": 309, "additions": 260, "deletions": 49}, "files": [{"sha": "b8706ae676a655b06d603004f0aa15ed5a0c869a", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -1,3 +1,24 @@\n+2011-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* printf/quadmath-printf.c: Also check __GLIBC__ when checking\n+\twhether workarounds for printf hook handling should be added.\n+\n+\t* configure.ac: Check for locale.h too.\n+\t(USE_LOCALE_SUPPORT): Remove check.\n+\t(USE_NL_LANGINFO, USE_NL_LANGINFO_WC, USE_LOCALECONV): New checks.\n+\t(USE_I18_NUMBER_H): Check also for _NL_CTYPE_MB_CUR_MAX.\n+\t* printf/printf_fphex.c (__quadmath_printf_fphex): Use nl_langinfo\n+\tor localeconv for narrow version and nl_langinfo if USE_NL_LANGINFO_WC\n+\tfor wide version.\n+\t* printf/quadmath-printf.h: Include locale.h if HAVE_LOCALE_H.\n+\t* printf/printf_fp.c (USE_I18N_NUMBER_H): Don't define to 0.\n+\t(__quadmath_printf_fp): Use nl_langinfo or localeconv for narrow\n+\tversion and nl_langinfo if USE_NL_LANGINFO_WC for wide version.\n+\tGuard nl_langinfo (_NL_CTYPE_MB_CUR_MAX) use with\n+\tUSE_I18N_NUMBER_H #ifdef.\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\n 2011-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/47736"}, {"sha": "38e08c03366abe407fc01f0f3fafdff0d03759d2", "filename": "libquadmath/config.h.in", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfig.h.in?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -42,6 +42,9 @@\n /* Define to 1 if you have the <limits.h> header file. */\n #undef HAVE_LIMITS_H\n \n+/* Define to 1 if you have the <locale.h> header file. */\n+#undef HAVE_LOCALE_H\n+\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n@@ -115,8 +118,14 @@\n /* whether i18n number rewriting can be supported */\n #undef USE_I18N_NUMBER_H\n \n-/* whether nl_langinfo is sufficiently supported */\n-#undef USE_LOCALE_SUPPORT\n+/* whether localeconv should be used */\n+#undef USE_LOCALECONV\n+\n+/* whether nl_langinfo should be used */\n+#undef USE_NL_LANGINFO\n+\n+/* whether nl_langinfo should be used for wide char locale info */\n+#undef USE_NL_LANGINFO_WC\n \n /* Enable extensions on AIX 3, Interix.  */\n #ifndef _ALL_SOURCE"}, {"sha": "612d56c7ccbc7f3b7c42c58205a306e0916cbda0", "filename": "libquadmath/configure", "status": "modified", "additions": 77, "deletions": 10, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -11922,7 +11922,7 @@ esac\n \n \n \n-for ac_header in fenv.h langinfo.h wchar.h wctype.h limits.h ctype.h printf.h errno.h\n+for ac_header in fenv.h langinfo.h locale.h wchar.h wctype.h limits.h ctype.h printf.h errno.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\"\n@@ -12577,8 +12577,8 @@ fi\n \n # Check for whether locale support for quadmath_snprintf or Q printf hooks\n # should be provided.\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether locale support for quadmath_snprintf should be added\" >&5\n-$as_echo_n \"checking whether locale support for quadmath_snprintf should be added... \" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether nl_langinfo should be used\" >&5\n+$as_echo_n \"checking whether nl_langinfo should be used... \" >&6; }\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <langinfo.h>\n@@ -12593,28 +12593,94 @@ s = nl_langinfo (GROUPING);\n s = nl_langinfo (MON_GROUPING);\n s = nl_langinfo (THOUSANDS_SEP);\n s = nl_langinfo (MON_THOUSANDS_SEP);\n+(void) s;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  quadmath_use_nl_langinfo=yes\n+else\n+  quadmath_use_nl_langinfo=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $quadmath_use_nl_langinfo\" >&5\n+$as_echo \"$quadmath_use_nl_langinfo\" >&6; }\n+if test x$quadmath_use_nl_langinfo = xyes; then\n+\n+$as_echo \"#define USE_NL_LANGINFO 1\" >>confdefs.h\n+\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether nl_langinfo should be used for wide char locale info\" >&5\n+$as_echo_n \"checking whether nl_langinfo should be used for wide char locale info... \" >&6; }\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <langinfo.h>\n+int\n+main ()\n+{\n+\n+const char *s;\n s = nl_langinfo (_NL_NUMERIC_DECIMAL_POINT_WC);\n s = nl_langinfo (_NL_MONETARY_DECIMAL_POINT_WC);\n s = nl_langinfo (_NL_NUMERIC_THOUSANDS_SEP_WC);\n s = nl_langinfo (_NL_MONETARY_THOUSANDS_SEP_WC);\n-s = nl_langinfo (_NL_CTYPE_MB_CUR_MAX);\n (void) s;\n \n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  quadmath_use_locale_support=yes\n+  quadmath_use_nl_langinfo_wc=yes\n else\n-  quadmath_use_locale_support=no\n+  quadmath_use_nl_langinfo_wc=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $quadmath_use_locale_support\" >&5\n-$as_echo \"$quadmath_use_locale_support\" >&6; }\n-if test x$quadmath_use_locale_support = xyes; then\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $quadmath_use_nl_langinfo_wc\" >&5\n+$as_echo \"$quadmath_use_nl_langinfo_wc\" >&6; }\n+if test x$quadmath_use_nl_langinfo_wc = xyes; then\n \n-$as_echo \"#define USE_LOCALE_SUPPORT 1\" >>confdefs.h\n+$as_echo \"#define USE_NL_LANGINFO_WC 1\" >>confdefs.h\n+\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether localeconv should be used\" >&5\n+$as_echo_n \"checking whether localeconv should be used... \" >&6; }\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <locale.h>\n+int\n+main ()\n+{\n+\n+const struct lconv *l = localeconv ();\n+const char *s;\n+s = l->decimal_point;\n+s = l->mon_decimal_point;\n+s = l->grouping;\n+s = l->mon_grouping;\n+s = l->thousands_sep;\n+s = l->mon_thousands_sep;\n+(void) s;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  quadmath_use_localeconv=yes\n+else\n+  quadmath_use_localeconv=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $quadmath_use_localeconv\" >&5\n+$as_echo \"$quadmath_use_localeconv\" >&6; }\n+if test x$quadmath_use_localeconv = xyes; then\n+\n+$as_echo \"#define USE_LOCALECONV 1\" >>confdefs.h\n \n fi\n \n@@ -12642,6 +12708,7 @@ memset (&state, '\\0', sizeof (state));\n wcrtomb (decimal, wdecimal, &state);\n s = nl_langinfo (_NL_CTYPE_OUTDIGIT0_MB);\n s = nl_langinfo (_NL_CTYPE_OUTDIGIT0_WC);\n+s = nl_langinfo (_NL_CTYPE_MB_CUR_MAX);\n (void) s;\n \n   ;"}, {"sha": "0cd675fb2fc245d18aa2851bf33842c9a46c9873", "filename": "libquadmath/configure.ac", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure.ac?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -112,7 +112,7 @@ esac\n AC_SUBST(toolexecdir)\n AC_SUBST(toolexeclibdir)\n \n-AC_CHECK_HEADERS(fenv.h langinfo.h wchar.h wctype.h limits.h ctype.h printf.h errno.h)\n+AC_CHECK_HEADERS(fenv.h langinfo.h locale.h wchar.h wctype.h limits.h ctype.h printf.h errno.h)\n \n # If available, sqrtl and cbrtl speed up the calculation -\n # but they are not required\n@@ -251,7 +251,7 @@ fi\n \n # Check for whether locale support for quadmath_snprintf or Q printf hooks\n # should be provided.\n-AC_MSG_CHECKING([whether locale support for quadmath_snprintf should be added])\n+AC_MSG_CHECKING([whether nl_langinfo should be used])\n AC_TRY_COMPILE([#include <langinfo.h>],[\n const char *s;\n s = nl_langinfo (DECIMAL_POINT);\n@@ -260,17 +260,45 @@ s = nl_langinfo (GROUPING);\n s = nl_langinfo (MON_GROUPING);\n s = nl_langinfo (THOUSANDS_SEP);\n s = nl_langinfo (MON_THOUSANDS_SEP);\n+(void) s;\n+],\n+[quadmath_use_nl_langinfo=yes],[quadmath_use_nl_langinfo=no])\n+AC_MSG_RESULT($quadmath_use_nl_langinfo)\n+if test x$quadmath_use_nl_langinfo = xyes; then\n+  AC_DEFINE([USE_NL_LANGINFO],[1],[whether nl_langinfo should be used])\n+fi\n+\n+AC_MSG_CHECKING([whether nl_langinfo should be used for wide char locale info])\n+AC_TRY_COMPILE([#include <langinfo.h>],[\n+const char *s;\n s = nl_langinfo (_NL_NUMERIC_DECIMAL_POINT_WC);\n s = nl_langinfo (_NL_MONETARY_DECIMAL_POINT_WC);\n s = nl_langinfo (_NL_NUMERIC_THOUSANDS_SEP_WC);\n s = nl_langinfo (_NL_MONETARY_THOUSANDS_SEP_WC);\n-s = nl_langinfo (_NL_CTYPE_MB_CUR_MAX);\n (void) s;\n ],\n-[quadmath_use_locale_support=yes],[quadmath_use_locale_support=no])\n-AC_MSG_RESULT($quadmath_use_locale_support)\n-if test x$quadmath_use_locale_support = xyes; then\n-  AC_DEFINE([USE_LOCALE_SUPPORT],[1],[whether nl_langinfo is sufficiently supported])\n+[quadmath_use_nl_langinfo_wc=yes],[quadmath_use_nl_langinfo_wc=no])\n+AC_MSG_RESULT($quadmath_use_nl_langinfo_wc)\n+if test x$quadmath_use_nl_langinfo_wc = xyes; then\n+  AC_DEFINE([USE_NL_LANGINFO_WC],[1],[whether nl_langinfo should be used for wide char locale info])\n+fi\n+\n+AC_MSG_CHECKING([whether localeconv should be used])\n+AC_TRY_COMPILE([#include <locale.h>],[\n+const struct lconv *l = localeconv ();\n+const char *s;\n+s = l->decimal_point;\n+s = l->mon_decimal_point;\n+s = l->grouping;\n+s = l->mon_grouping;\n+s = l->thousands_sep;\n+s = l->mon_thousands_sep;\n+(void) s;\n+],\n+[quadmath_use_localeconv=yes],[quadmath_use_localeconv=no])\n+AC_MSG_RESULT($quadmath_use_localeconv)\n+if test x$quadmath_use_localeconv = xyes; then\n+  AC_DEFINE([USE_LOCALECONV],[1],[whether localeconv should be used])\n fi\n \n # Check for whether i18n number rewriting support for quadmath_snprintf\n@@ -290,6 +318,7 @@ memset (&state, '\\0', sizeof (state));\n wcrtomb (decimal, wdecimal, &state);\n s = nl_langinfo (_NL_CTYPE_OUTDIGIT0_MB);\n s = nl_langinfo (_NL_CTYPE_OUTDIGIT0_WC);\n+s = nl_langinfo (_NL_CTYPE_MB_CUR_MAX);\n (void) s;\n ],\n [quadmath_use_i18n_number_h=yes],[quadmath_use_i18n_number_h=no])"}, {"sha": "4a63be9f8a34a4f62247acdbbd4a972b439a5c34", "filename": "libquadmath/printf/printf_fp.c", "status": "modified", "additions": 84, "deletions": 21, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fprintf_fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fprintf_fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fprintf_fp.c?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -37,8 +37,6 @@\n \n #ifdef USE_I18N_NUMBER_H\n #include \"_i18n_number.h\"\n-#else\n-#define USE_I18N_NUMBER_H 0\n #endif\n \n \f\n@@ -227,30 +225,48 @@ __quadmath_printf_fp (struct __quadmath_printf_file *fp,\n     }\n \n   /* Figure out the decimal point character.  */\n-#ifdef USE_LOCALE_SUPPORT\n+#ifdef USE_NL_LANGINFO\n   if (info->extra == 0)\n-    {\n-      decimal = nl_langinfo (DECIMAL_POINT);\n-      decimalwc = nl_langinfo_wc (_NL_NUMERIC_DECIMAL_POINT_WC);\n-    }\n+    decimal = nl_langinfo (DECIMAL_POINT);\n   else\n     {\n       decimal = nl_langinfo (MON_DECIMAL_POINT);\n       if (*decimal == '\\0')\n \tdecimal = nl_langinfo (DECIMAL_POINT);\n+    }\n+  /* The decimal point character must never be zero.  */\n+  assert (*decimal != '\\0');\n+#elif defined USE_LOCALECONV\n+  const struct lconv *lc = localeconv ();\n+  if (info->extra == 0)\n+    decimal = lc->decimal_point;\n+  else\n+    {\n+      decimal = lc->mon_decimal_point;\n+      if (decimal == NULL || *decimal == '\\0')\n+\tdecimal = lc->decimal_point;\n+    }\n+  if (decimal == NULL || *decimal == '\\0')\n+    decimal = \".\";\n+#else\n+  decimal = \".\";\n+#endif\n+#ifdef USE_NL_LANGINFO_WC\n+  if (info->extra == 0)\n+    decimalwc = nl_langinfo_wc (_NL_NUMERIC_DECIMAL_POINT_WC);\n+  else\n+    {\n       decimalwc = nl_langinfo_wc (_NL_MONETARY_DECIMAL_POINT_WC);\n       if (decimalwc == L_('\\0'))\n \tdecimalwc = nl_langinfo_wc (_NL_NUMERIC_DECIMAL_POINT_WC);\n     }\n-  /* The decimal point character must not be zero.  */\n-  assert (*decimal != '\\0');\n+  /* The decimal point character must never be zero.  */\n   assert (decimalwc != L_('\\0'));\n #else\n-  decimal = \".\";\n   decimalwc = L_('.');\n #endif\n \n-#ifdef USE_LOCALE_SUPPORT\n+#if defined USE_NL_LANGINFO && defined USE_NL_LANGINFO_WC\n   if (info->group)\n     {\n       if (info->extra == 0)\n@@ -269,29 +285,76 @@ __quadmath_printf_fp (struct __quadmath_printf_file *fp,\n \t\tthousands_sepwc = nl_langinfo_wc (_NL_NUMERIC_THOUSANDS_SEP_WC);\n \t      else\n \t\tthousands_sepwc = nl_langinfo_wc (_NL_MONETARY_THOUSANDS_SEP_WC);\n+\n+\t      if (thousands_sepwc == L_('\\0'))\n+\t\tgrouping = NULL;\n \t    }\n \t  else\n \t    {\n \t      if (info->extra == 0)\n \t\tthousands_sep = nl_langinfo (THOUSANDS_SEP);\n \t      else\n \t\tthousands_sep = nl_langinfo (MON_THOUSANDS_SEP);\n+\t      if (*thousands_sep == '\\0')\n+\t\tgrouping = NULL;\n \t    }\n+\t}\n+    }\n+  else\n+#elif defined USE_NL_LANGINFO\n+  if (info->group && !wide)\n+    {\n+      if (info->extra == 0)\n+\tgrouping = nl_langinfo (GROUPING);\n+      else\n+\tgrouping = nl_langinfo (MON_GROUPING);\n+\n+      if (*grouping <= 0 || *grouping == CHAR_MAX)\n+\tgrouping = NULL;\n+      else\n+\t{\n+\t  /* Figure out the thousands separator character.  */\n+\t  if (info->extra == 0)\n+\t    thousands_sep = nl_langinfo (THOUSANDS_SEP);\n+\t  else\n+\t    thousands_sep = nl_langinfo (MON_THOUSANDS_SEP);\n+\n+\t  if (*thousands_sep == '\\0')\n+\t    grouping = NULL;\n+\t}\n+    }\n+  else\n+#elif defined USE_LOCALECONV\n+  if (info->group && !wide)\n+    {\n+      if (info->extra == 0)\n+\tgrouping = lc->grouping;\n+      else\n+\tgrouping = lc->mon_grouping;\n+\n+      if (grouping == NULL || *grouping <= 0 || *grouping == CHAR_MAX)\n+\tgrouping = NULL;\n+      else\n+\t{\n+\t  /* Figure out the thousands separator character.  */\n+\t  if (info->extra == 0)\n+\t    thousands_sep = lc->thousands_sep;\n+\t  else\n+\t    thousands_sep = lc->mon_thousands_sep;\n \n-\t  if ((wide && thousands_sepwc == L_('\\0'))\n-\t      || (! wide && *thousands_sep == '\\0'))\n+\t  if (thousands_sep == NULL || *thousands_sep == '\\0')\n \t    grouping = NULL;\n-\t  else if (thousands_sepwc == L_('\\0'))\n-\t    /* If we are printing multibyte characters and there is a\n-\t       multibyte representation for the thousands separator,\n-\t       we must ensure the wide character thousands separator\n-\t       is available, even if it is fake.  */\n-\t    thousands_sepwc = (wchar_t) 0xfffffffe;\n \t}\n     }\n   else\n #endif\n     grouping = NULL;\n+  if (grouping != NULL && !wide)\n+    /* If we are printing multibyte characters and there is a\n+       multibyte representation for the thousands separator,\n+       we must ensure the wide character thousands separator\n+       is available, even if it is fake.  */\n+    thousands_sepwc = (wchar_t) 0xfffffffe;\n \n   /* Fetch the argument value.\t*/\n     {\n@@ -1095,8 +1158,8 @@ __quadmath_printf_fp (struct __quadmath_printf_file *fp,\n \t  size_t decimal_len;\n \t  size_t thousands_sep_len;\n \t  wchar_t *copywc;\n-#ifdef USE_LOCALE_SUPPORT\n-\t  size_t factor = ((info->i18n && USE_I18N_NUMBER_H)\n+#ifdef USE_I18N_NUMBER_H\n+\t  size_t factor = (info->i18n\n \t\t\t   ? nl_langinfo_wc (_NL_CTYPE_MB_CUR_MAX)\n \t\t\t   : 1);\n #else"}, {"sha": "941e93307e06d258c1263774b34c037e400981fc", "filename": "libquadmath/printf/printf_fphex.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fprintf_fphex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fprintf_fphex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fprintf_fphex.c?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -117,25 +117,44 @@ __quadmath_printf_fphex (struct __quadmath_printf_file *fp,\n   int wide = info->wide;\n \n   /* Figure out the decimal point character.  */\n-#ifdef USE_LOCALE_SUPPORT\n+#ifdef USE_NL_LANGINFO\n   if (info->extra == 0)\n-    {\n-      decimal = nl_langinfo (DECIMAL_POINT);\n-      decimalwc = nl_langinfo_wc (_NL_NUMERIC_DECIMAL_POINT_WC);\n-    }\n+    decimal = nl_langinfo (DECIMAL_POINT);\n   else\n     {\n       decimal = nl_langinfo (MON_DECIMAL_POINT);\n       if (*decimal == '\\0')\n \tdecimal = nl_langinfo (DECIMAL_POINT);\n+    }\n+  /* The decimal point character must never be zero.  */\n+  assert (*decimal != '\\0');\n+#elif defined USE_LOCALECONV\n+  const struct lconv *lc = localeconv ();\n+  if (info->extra == 0)\n+    decimal = lc->decimal_point;\n+  else\n+    {\n+      decimal = lc->mon_decimal_point;\n+      if (decimal == NULL || *decimal == '\\0')\n+\tdecimal = lc->decimal_point;\n+    }\n+  if (decimal == NULL || *decimal == '\\0')\n+    decimal = \".\";\n+#else\n+  decimal = \".\";\n+#endif\n+#ifdef USE_NL_LANGINFO_WC\n+  if (info->extra == 0)\n+    decimalwc = nl_langinfo_wc (_NL_NUMERIC_DECIMAL_POINT_WC);\n+  else\n+    {\n       decimalwc = nl_langinfo_wc (_NL_MONETARY_DECIMAL_POINT_WC);\n-      if (decimalwc == L'\\0')\n+      if (decimalwc == L_('\\0'))\n \tdecimalwc = nl_langinfo_wc (_NL_NUMERIC_DECIMAL_POINT_WC);\n     }\n   /* The decimal point character must never be zero.  */\n-  assert (*decimal != '\\0' && decimalwc != L'\\0');\n+  assert (decimalwc != L_('\\0'));\n #else\n-  decimal = \".\";\n   decimalwc = L_('.');\n #endif\n "}, {"sha": "750dc246fcc885e0842041743d757a7ab109322c", "filename": "libquadmath/printf/quadmath-printf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fquadmath-printf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fquadmath-printf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fquadmath-printf.c?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -292,7 +292,7 @@ flt128_ais (const struct printf_info *info, size_t n __attribute__ ((unused)),\n       size[0] = sizeof (__float128);\n       return 1;\n     }\n-#if __GLIBC_MINOR__ <= 13\n+#if __GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ <= 13)\n   /* Workaround bug in glibc printf hook handling.  */\n   size[0] = -1;\n   switch (info->spec)"}, {"sha": "05fed7aaf078322ae83171bdb575ff492ad7f269", "filename": "libquadmath/printf/quadmath-printf.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fquadmath-printf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2995f218548fb6e506348377bf150c69dd231a6/libquadmath%2Fprintf%2Fquadmath-printf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fquadmath-printf.h?ref=d2995f218548fb6e506348377bf150c69dd231a6", "patch": "@@ -38,6 +38,9 @@ Boston, MA 02110-1301, USA.  */\n #ifdef HAVE_PRINTF_HOOKS\n #include <printf.h>\n #endif\n+#ifdef HAVE_LOCALE_H\n+#include <locale.h>\n+#endif\n #include \"quadmath-imp.h\"\n #include \"gmp-impl.h\"\n "}]}