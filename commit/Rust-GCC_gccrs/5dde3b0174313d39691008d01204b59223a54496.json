{"sha": "5dde3b0174313d39691008d01204b59223a54496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRkZTNiMDE3NDMxM2QzOTY5MTAwOGQwMTIwNGI1OTIyM2E1NDQ5Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-07-08T14:20:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-07-08T14:20:23Z"}, "message": "ipa.c: Include pointer-set.h\n\n\t* ipa.c: Include pointer-set.h\n\t(cgraph_externally_visible_p): New attribute ALIASED;\n\twhen in LTO, hidden symbols are local unless they are aliased.\n\t(function_and_variable_visibility): Compute aliased nodes;\n\thandle LTO and hidden symbol on functions and vars.\n\t* cgraph.c (cgraph_make_decl_local): Clear NAMED_SECTION\n\tfor COMDAT symbols; handle COMDAT_GROUPS also at vars.\n\nFrom-SVN: r161957", "tree": {"sha": "b48a07adef9b35b2300676942bad2b110175cd69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b48a07adef9b35b2300676942bad2b110175cd69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dde3b0174313d39691008d01204b59223a54496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dde3b0174313d39691008d01204b59223a54496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dde3b0174313d39691008d01204b59223a54496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dde3b0174313d39691008d01204b59223a54496/comments", "author": null, "committer": null, "parents": [{"sha": "cf8ca1a9b7377c4d20fc394adb70733baad5aa19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8ca1a9b7377c4d20fc394adb70733baad5aa19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8ca1a9b7377c4d20fc394adb70733baad5aa19"}], "stats": {"total": 107, "additions": 85, "deletions": 22}, "files": [{"sha": "8d5761f15887b4490cd9d8fbace8054ff8b021d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dde3b0174313d39691008d01204b59223a54496/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dde3b0174313d39691008d01204b59223a54496/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dde3b0174313d39691008d01204b59223a54496", "patch": "@@ -1,3 +1,13 @@\n+2010-07-08  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa.c: Include pointer-set.h\n+\t(cgraph_externally_visible_p): New attribute ALIASED;\n+\twhen in LTO, hidden symbols are local unless they are aliased.\n+\t(function_and_variable_visibility): Compute aliased nodes;\n+\thandle LTO and hidden symbol on functions and vars.\n+\t* cgraph.c (cgraph_make_decl_local): Clear NAMED_SECTION\n+\tfor COMDAT symbols; handle COMDAT_GROUPS also at vars.\n+\n 2010-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/cygming.h (STACK_CHECK_STATIC_BUILTIN): Define to 1."}, {"sha": "5e990066c863e733d3785ccff93f13f56a406c03", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dde3b0174313d39691008d01204b59223a54496/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dde3b0174313d39691008d01204b59223a54496/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5dde3b0174313d39691008d01204b59223a54496", "patch": "@@ -2992,7 +2992,7 @@ varpool.o : varpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TIMEVAR_H) debug.h $(TARGET_H) output.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) gt-varpool.h\n ipa.o : ipa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH_H) \\\n-   $(TREE_PASS_H) $(TIMEVAR_H) $(GIMPLE_H) $(GGC_H)\n+   $(TREE_PASS_H) $(TIMEVAR_H) $(GIMPLE_H) $(GGC_H) pointer-set.h\n ipa-prop.o : ipa-prop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) $(DIAGNOSTIC_H) \\\n    $(TREE_FLOW_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) \\"}, {"sha": "33653df154933bc41629a7efb2039a627f3f0664", "filename": "gcc/cgraph.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dde3b0174313d39691008d01204b59223a54496/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dde3b0174313d39691008d01204b59223a54496/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=5dde3b0174313d39691008d01204b59223a54496", "patch": "@@ -2455,15 +2455,16 @@ cgraph_make_decl_local (tree decl)\n \n   if (TREE_CODE (decl) == VAR_DECL)\n     DECL_COMMON (decl) = 0;\n-  else if (TREE_CODE (decl) == FUNCTION_DECL)\n+  else gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+\n+  if (DECL_COMDAT (decl))\n     {\n+      DECL_SECTION_NAME (decl) = 0;\n       DECL_COMDAT (decl) = 0;\n-      DECL_COMDAT_GROUP (decl) = 0;\n-      DECL_WEAK (decl) = 0;\n-      DECL_EXTERNAL (decl) = 0;\n     }\n-  else\n-    gcc_unreachable ();\n+  DECL_COMDAT_GROUP (decl) = 0;\n+  DECL_WEAK (decl) = 0;\n+  DECL_EXTERNAL (decl) = 0;\n   TREE_PUBLIC (decl) = 0;\n   if (!DECL_RTL_SET_P (decl))\n     return;"}, {"sha": "785b4bd4053a16f5074fb3b1e0094dbf180201b9", "filename": "gcc/ipa.c", "status": "modified", "additions": 67, "deletions": 15, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dde3b0174313d39691008d01204b59223a54496/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dde3b0174313d39691008d01204b59223a54496/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=5dde3b0174313d39691008d01204b59223a54496", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"ggc.h\"\n #include \"flags.h\"\n+#include \"pointer-set.h\"\n \n /* Fill array order with all nodes with output flag set in the reverse\n    topological order.  */\n@@ -567,23 +568,28 @@ ipa_discover_readonly_nonaddressable_vars (void)\n /* Return true when function NODE should be considered externally visible.  */\n \n static bool\n-cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program)\n+cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program, bool aliased)\n {\n   if (!node->local.finalized)\n     return false;\n   if (!DECL_COMDAT (node->decl)\n       && (!TREE_PUBLIC (node->decl) || DECL_EXTERNAL (node->decl)))\n     return false;\n-  if (!whole_program)\n-    return true;\n-  if (node->local.used_from_object_file)\n+\n+  /* Do not even try to be smart about aliased nodes.  Until we properly\n+     represent everything by same body alias, these are just evil.  */\n+  if (aliased)\n     return true;\n-  if (DECL_PRESERVE_P (node->decl))\n+\n+  /* When doing link time optimizations, hidden symbols become local.  */\n+  if (in_lto_p && DECL_VISIBILITY (node->decl) == VISIBILITY_HIDDEN)\n+    ;\n+  else if (!whole_program)\n     return true;\n   /* COMDAT functions must be shared only if they have address taken,\n      otherwise we can produce our own private implementation with\n      -fwhole-program.  */\n-  if (DECL_COMDAT (node->decl))\n+  else if (DECL_COMDAT (node->decl))\n     {\n       if (node->address_taken || !node->analyzed)\n \treturn true;\n@@ -601,6 +607,10 @@ cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program)\n \t      return true;\n \t}\n     }\n+  if (node->local.used_from_object_file)\n+    return true;\n+  if (DECL_PRESERVE_P (node->decl))\n+    return true;\n   if (MAIN_NAME_P (DECL_NAME (node->decl)))\n     return true;\n   if (lookup_attribute (\"externally_visible\", DECL_ATTRIBUTES (node->decl)))\n@@ -639,6 +649,38 @@ function_and_variable_visibility (bool whole_program)\n {\n   struct cgraph_node *node;\n   struct varpool_node *vnode;\n+  struct pointer_set_t *aliased_nodes = pointer_set_create ();\n+  struct pointer_set_t *aliased_vnodes = pointer_set_create ();\n+  unsigned i;\n+  alias_pair *p;\n+\n+  /* Discover aliased nodes.  */\n+  for (i = 0; VEC_iterate (alias_pair, alias_pairs, i, p); i++)\n+    {\n+      if (dump_file)\n+       fprintf (dump_file, \"Alias %s->%s\",\n+\t\tIDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (p->decl)),\n+\t\tIDENTIFIER_POINTER (p->target));\n+\t\t\n+      if ((node = cgraph_node_for_asm (p->target)) != NULL)\n+        {\n+\t  gcc_assert (node->needed);\n+\t  pointer_set_insert (aliased_nodes, node);\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"  node %s/%i\",\n+\t\t     cgraph_node_name (node), node->uid);\n+        }\n+      else if ((vnode = varpool_node_for_asm (p->target)) != NULL)\n+        {\n+\t  gcc_assert (vnode->needed);\n+\t  pointer_set_insert (aliased_vnodes, vnode);\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"  varpool node %s\",\n+\t\t     varpool_node_name (vnode));\n+        }\n+      if (dump_file)\n+       fprintf (dump_file, \"\\n\");\n+    }\n \n   for (node = cgraph_nodes; node; node = node->next)\n     {\n@@ -667,7 +709,9 @@ function_and_variable_visibility (bool whole_program)\n \t}\n       gcc_assert ((!DECL_WEAK (node->decl) && !DECL_COMDAT (node->decl))\n       \t          || TREE_PUBLIC (node->decl) || DECL_EXTERNAL (node->decl));\n-      if (cgraph_externally_visible_p (node, whole_program))\n+      if (cgraph_externally_visible_p (node, whole_program,\n+\t\t\t\t       pointer_set_contains (aliased_nodes,\n+\t\t\t\t\t\t\t     node)))\n         {\n \t  gcc_assert (!node->global.inlined_to);\n \t  node->local.externally_visible = true;\n@@ -678,7 +722,7 @@ function_and_variable_visibility (bool whole_program)\n \t  && !DECL_EXTERNAL (node->decl))\n \t{\n           struct cgraph_node *alias;\n-\t  gcc_assert (whole_program || !TREE_PUBLIC (node->decl));\n+\t  gcc_assert (whole_program || in_lto_p || !TREE_PUBLIC (node->decl));\n \t  cgraph_make_decl_local (node->decl);\n \t  for (alias = node->same_body; alias; alias = alias->next)\n \t    cgraph_make_decl_local (alias->decl);\n@@ -725,25 +769,33 @@ function_and_variable_visibility (bool whole_program)\n         continue;\n       if (vnode->needed\n \t  && (DECL_COMDAT (vnode->decl) || TREE_PUBLIC (vnode->decl))\n-\t  && (!whole_program\n-\t      /* We can privatize comdat readonly variables whose address is not taken,\n-\t         but doing so is not going to bring us optimization oppurtunities until\n-\t         we start reordering datastructures.  */\n-\t      || DECL_COMDAT (vnode->decl)\n-\t      || DECL_WEAK (vnode->decl)\n+\t  && (((!whole_program\n+\t        /* We can privatize comdat readonly variables whose address is\n+\t\t   not taken, but doing so is not going to bring us\n+\t\t   optimization oppurtunities until we start reordering\n+\t\t   datastructures.  */\n+\t\t|| DECL_COMDAT (vnode->decl)\n+\t\t|| DECL_WEAK (vnode->decl))\n+\t       /* When doing linktime optimizations, all hidden symbols will\n+\t\t  become local.  */\n+\t       && (!in_lto_p\n+\t\t   || DECL_VISIBILITY (vnode->decl) != VISIBILITY_HIDDEN))\n               || vnode->used_from_object_file\n+\t      || pointer_set_contains (aliased_vnodes, vnode)\n \t      || lookup_attribute (\"externally_visible\",\n \t\t\t\t   DECL_ATTRIBUTES (vnode->decl))))\n \tvnode->externally_visible = true;\n       else\n         vnode->externally_visible = false;\n       if (!vnode->externally_visible)\n \t{\n-\t  gcc_assert (whole_program || !TREE_PUBLIC (vnode->decl));\n+\t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->decl));\n \t  cgraph_make_decl_local (vnode->decl);\n \t}\n      gcc_assert (TREE_STATIC (vnode->decl));\n     }\n+  pointer_set_destroy (aliased_nodes);\n+  pointer_set_destroy (aliased_vnodes);\n \n   if (dump_file)\n     {"}]}