{"sha": "a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFjOWM5ZmYwNmFiMTVlNjk3ZDViYWM2ZWE2ZTVkYTJkZjg0MGNmNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-04T19:21:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-04T19:49:19Z"}, "message": "c++: Fix ({ ... }) array mem-initializer.\n\nHere, we were going down the wrong path in perform_member_init because of\nthe incorrect parens around the mem-initializer for the array.  And then\ncxx_eval_vec_init_1 didn't know what to do with a CONSTRUCTOR as the\ninitializer.  The latter issue was a straightforward fix, but I also wanted\nto fix us silently accepting the parens, which led to factoring out handling\nof TREE_LIST and flexarrays.  The latter led to adjusting the expected\nbehavior on flexary29.C: we should complain about the initializer, but not\ncomplain about a missing initializer.\n\nAs I commented on PR 92812, in this process I noticed that we weren't\nhandling C++20 parenthesized aggregate initialization as a mem-initializer.\nSo my TREE_LIST handling includes a commented out section that should\nprobably be part of a future fix for that issue; with it uncommented we\ncontinue to crash on the testcase in C++20 mode, but should instead complain\nabout the braced-init-list not being a valid initializer for an A.\n\n\tPR c++/86917\n\t* init.c (perform_member_init): Simplify.\n\t* constexpr.c (cx_check_missing_mem_inits): Allow uninitialized\n\tflexarray.\n\t(cxx_eval_vec_init_1): Handle CONSTRUCTOR.", "tree": {"sha": "af34dc70a827bcd8d370e55e2834c5d90c5f8446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af34dc70a827bcd8d370e55e2834c5d90c5f8446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c422cec54a5495f6f42b80f35a11c5508fe8eec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c422cec54a5495f6f42b80f35a11c5508fe8eec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c422cec54a5495f6f42b80f35a11c5508fe8eec3"}], "stats": {"total": 109, "additions": 65, "deletions": 44}, "files": [{"sha": "53f414fc45383fc689cfb719c4959dddd442d885", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -1,3 +1,11 @@\n+2020-02-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86917\n+\t* init.c (perform_member_init): Simplify.\n+\t* constexpr.c (cx_check_missing_mem_inits): Allow uninitialized\n+\tflexarray.\n+\t(cxx_eval_vec_init_1): Handle CONSTRUCTOR.\n+\n 2020-02-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* coroutines.cc (find_promise_type): Delete unused forward"}, {"sha": "c35ec5acc9770b80a48122c26a2db3cacdd0cc02", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -826,7 +826,12 @@ cx_check_missing_mem_inits (tree ctype, tree body, bool complain)\n \t\treturn true;\n \t      continue;\n \t    }\n-\t  ftype = strip_array_types (TREE_TYPE (field));\n+\t  ftype = TREE_TYPE (field);\n+\t  if (!ftype || !TYPE_P (ftype) || !COMPLETE_TYPE_P (ftype))\n+\t    /* A flexible array can't be intialized here, so don't complain\n+\t       that it isn't.  */\n+\t    continue;\n+\t  ftype = strip_array_types (ftype);\n \t  if (type_has_constexpr_default_constructor (ftype))\n \t    {\n \t      /* It's OK to skip a member with a trivial constexpr ctor.\n@@ -3784,6 +3789,10 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n   unsigned HOST_WIDE_INT i;\n   tsubst_flags_t complain = ctx->quiet ? tf_none : tf_warning_or_error;\n \n+  if (init && TREE_CODE (init) == CONSTRUCTOR)\n+    return cxx_eval_bare_aggregate (ctx, init, lval,\n+\t\t\t\t    non_constant_p, overflow_p);\n+\n   /* For the default constructor, build up a call to the default\n      constructor of the element type.  We only need to handle class types\n      here, as for a constructor to be constexpr, all members must be"}, {"sha": "625062b60adb5200024d7c8a274abb810ddf9b1b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -801,6 +801,17 @@ perform_member_init (tree member, tree init)\n \t\t    member);\n     }\n \n+  if (maybe_reject_flexarray_init (member, init))\n+    return;\n+\n+  if (init && TREE_CODE (init) == TREE_LIST\n+      && (DIRECT_LIST_INIT_P (TREE_VALUE (init))\n+\t  /* FIXME C++20 parenthesized aggregate init (PR 92812).  */\n+\t  || !(/* cxx_dialect >= cxx2a ? CP_AGGREGATE_TYPE_P (type) */\n+\t       /* :  */CLASS_TYPE_P (type))))\n+    init = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n+\t\t\t\t\t    tf_warning_or_error);\n+\n   if (init == void_type_node)\n     {\n       /* mem() means value-initialization.  */\n@@ -832,12 +843,7 @@ perform_member_init (tree member, tree init)\n     }\n   else if (init\n \t   && (TYPE_REF_P (type)\n-\t       /* Pre-digested NSDMI.  */\n-\t       || (((TREE_CODE (init) == CONSTRUCTOR\n-\t\t     && TREE_TYPE (init) == type)\n-\t\t    /* { } mem-initializer.  */\n-\t\t    || (TREE_CODE (init) == TREE_LIST\n-\t\t\t&& DIRECT_LIST_INIT_P (TREE_VALUE (init))))\n+\t       || (TREE_CODE (init) == CONSTRUCTOR\n \t\t   && (CP_AGGREGATE_TYPE_P (type)\n \t\t       || is_std_init_list (type)))))\n     {\n@@ -847,10 +853,7 @@ perform_member_init (tree member, tree init)\n \t persists until the constructor exits.\"  */\n       unsigned i; tree t;\n       releasing_vec cleanups;\n-      if (TREE_CODE (init) == TREE_LIST)\n-\tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n-\t\t\t\t\t\ttf_warning_or_error);\n-      if (TREE_TYPE (init) != type)\n+      if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (init), type))\n \t{\n \t  if (BRACE_ENCLOSED_INITIALIZER_P (init)\n \t      && CP_AGGREGATE_TYPE_P (type))\n@@ -876,23 +879,6 @@ perform_member_init (tree member, tree init)\n     {\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  if (init)\n-\t    {\n-\t      /* Check to make sure the member initializer is valid and\n-\t\t something like a CONSTRUCTOR in: T a[] = { 1, 2 } and\n-\t\t if it isn't, return early to avoid triggering another\n-\t\t error below.  */\n-\t      if (maybe_reject_flexarray_init (member, init))\n-\t\treturn;\n-\n-\t      if (TREE_CODE (init) != TREE_LIST || TREE_CHAIN (init))\n-\t\tinit = error_mark_node;\n-\t      else\n-\t\tinit = TREE_VALUE (init);\n-\n-\t      if (BRACE_ENCLOSED_INITIALIZER_P (init))\n-\t\tinit = digest_init (type, init, tf_warning_or_error);\n-\t    }\n \t  if (init == NULL_TREE\n \t      || same_type_ignoring_top_level_qualifiers_p (type,\n \t\t\t\t\t\t\t    TREE_TYPE (init)))\n@@ -962,16 +948,10 @@ perform_member_init (tree member, tree init)\n \t\t\t\t\t\t      /*using_new=*/false,\n \t\t\t\t\t\t      /*complain=*/true);\n \t}\n-      else if (TREE_CODE (init) == TREE_LIST)\n-\t/* There was an explicit member initialization.  Do some work\n-\t   in that case.  */\n-\tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n-\t\t\t\t\t\ttf_warning_or_error);\n \n       maybe_warn_list_ctor (member, init);\n \n-      /* Reject a member initializer for a flexible array member.  */\n-      if (init && !maybe_reject_flexarray_init (member, init))\n+      if (init)\n \tfinish_expr_stmt (cp_build_modify_expr (input_location, decl,\n \t\t\t\t\t\tINIT_EXPR, init,\n \t\t\t\t\t\ttf_warning_or_error));"}, {"sha": "1323271a0a56cc48026b984b66f1ea538dee3f3a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array23.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array23.C?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/86917\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  constexpr A () : c (0) {}\n+  static const A z;\n+  unsigned c;\n+};\n+\n+struct B\n+{\t\t\t\t// This should really be target { ! c++2a }\n+  typedef A W[4];\t\t// { dg-error \"paren\" \"\" { target *-*-* } .+1 }\n+  constexpr B () : w ({ A::z, A::z, A::z, A::z }) {} // { dg-error \"constant\" }\n+  W w;\n+};\n+\n+struct C\n+{\n+  C ();\n+  B w[1];\n+};\n+\n+C::C () { }"}, {"sha": "21724e047962d5d6c059b9c0764801115e0af0aa", "filename": "gcc/testsuite/g++.dg/cpp0x/desig2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig2.C?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -15,9 +15,9 @@ private:\n };\n \n SomeClass::SomeClass()\n- : member({\n+ : member{\n    [INDEX1] = { .field = 0 },\n    [INDEX2] = { .field = 1 }\n- })\n+ }\n {\n }"}, {"sha": "5c27833d5c19b1bb19dfcb397d076d9ba33db550", "filename": "gcc/testsuite/g++.dg/cpp0x/desig3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig3.C?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -13,9 +13,9 @@ private:\n };\n \n SomeClass::SomeClass()\n- : member({\n+ : member{\n    [INDEX1] = { .field = 0 },\n    [INDEX2] = { .field = 1 }\n- })\n+ }\n {\n }"}, {"sha": "4180e0983eaafe7df1e751b3e6fa1b212c22d1a1", "filename": "gcc/testsuite/g++.dg/cpp0x/desig4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig4.C?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -13,9 +13,9 @@ private:\n };\n \n SomeClass::SomeClass()\n- : member({\n+ : member{\n    [INDEX1] = { .field = 0 },  // { dg-error \"constant expression\" }\n    [INDEX2] = { .field = 1 }   // { dg-error \"constant expression\" }\n- })\n+ }\n {\n }"}, {"sha": "f4c3630be1602e4ac7668f18894af7d980905d27", "filename": "gcc/testsuite/g++.dg/ext/array1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farray1.C?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -3,7 +3,7 @@\n \n class A { \n public: \n-  A() : argc(0), argv() { }; \n+  A() : argc(0), argv() { }; \t// { dg-error \"flexible array\" }\n private: \n   int argc; \n   char* argv[]; "}, {"sha": "8fef06e6a978394a95c4d492f5c1bf68a510df0d", "filename": "gcc/testsuite/g++.dg/ext/flexary29.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary29.C?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -4,7 +4,7 @@\n \n struct A\n {\n-  constexpr A() : i(), x() {}\n+  constexpr A() : i(), x() {}\t// { dg-error \"flexible\" }\n   int i;\n   char x[];\n };"}, {"sha": "9869354279d1fb5c014ff755197c5b29b61350cb", "filename": "gcc/testsuite/g++.dg/init/array28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray28.C?ref=a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "patch": "@@ -2,6 +2,6 @@\n \n struct Foo { explicit Foo(int) { } };\n struct Goo {\n-  Goo() : x(Foo(4), Foo(5)) { } // { dg-error \"array\" }\n+  Goo() : x(Foo(4), Foo(5)) { } // { dg-error \"\" }\n   Foo x[2];\n };"}]}