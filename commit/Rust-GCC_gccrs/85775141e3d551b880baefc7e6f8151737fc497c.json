{"sha": "85775141e3d551b880baefc7e6f8151737fc497c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3NzUxNDFlM2Q1NTFiODgwYmFlZmM3ZTZmODE1MTczN2ZjNDk3Yw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2019-06-11T17:36:58Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-06-11T17:36:58Z"}, "message": "Do not enable -mpcrel by default at the current time\n\nFrom-SVN: r272165", "tree": {"sha": "0280dd26feffa2da07cdffcfabf115a9b835038f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0280dd26feffa2da07cdffcfabf115a9b835038f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85775141e3d551b880baefc7e6f8151737fc497c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85775141e3d551b880baefc7e6f8151737fc497c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85775141e3d551b880baefc7e6f8151737fc497c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85775141e3d551b880baefc7e6f8151737fc497c/comments", "author": null, "committer": null, "parents": [{"sha": "ce9c4ec3c5e70023b27e49c2fb45eafaddec9a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9c4ec3c5e70023b27e49c2fb45eafaddec9a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9c4ec3c5e70023b27e49c2fb45eafaddec9a14"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "bf0dc947e8fa13fd5387a8ec030f45d66a85cbac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -1,3 +1,13 @@\n+2019-06-11  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Delete\n+\tenabling -mpcrel by default.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Update\n+\ttest for -mpcrel and/or -mprefixed-addr needing -mcpu=future, so\n+\tthat the test against -mcpu=future is done first.  Then test if\n+\t-mprefixed-addr is on for -mpcrel.\n+\t(rs6000_disable_incompatible_switches): Add -mcpu=future support.\n+\n 2019-06-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/90811"}, {"sha": "972d19fabc76d7a4890ca3ea253aa847bcb06c18", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -75,10 +75,10 @@\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR)\n \n-/* Support for a future processor's features.  */\n+/* Support for a future processor's features.  Do not enable -mpcrel until it\n+   is fully functional.  */\n #define ISA_FUTURE_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n \t\t\t\t | OPTION_MASK_FUTURE\t\t\t\\\n-\t\t\t\t | OPTION_MASK_PCREL\t\t\t\\\n \t\t\t\t | OPTION_MASK_PREFIXED_ADDR)\n \n /* Flags that need to be turned off if -mno-future.  */"}, {"sha": "f17faebff6a7b10f7c0eee9bd959cba2136cc7d0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -4245,22 +4245,24 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n-  /* -mpcrel requires prefixed load/store addressing.  */\n-  if (TARGET_PCREL && !TARGET_PREFIXED_ADDR)\n+  /* -mprefixed-addr (and hence -mpcrel) requires -mcpu=future.  */\n+  if (TARGET_PREFIXED_ADDR && !TARGET_FUTURE)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_PCREL) != 0)\n-\terror (\"%qs requires %qs\", \"-mpcrel\", \"-mprefixed-addr\");\n+\terror (\"%qs requires %qs\", \"-mpcrel\", \"-mcpu=future\");\n+      else if ((rs6000_isa_flags_explicit & OPTION_MASK_PREFIXED_ADDR) != 0)\n+\terror (\"%qs requires %qs\", \"-mprefixed-addr\", \"-mcpu=future\");\n \n-      rs6000_isa_flags &= ~OPTION_MASK_PCREL;\n+      rs6000_isa_flags &= ~(OPTION_MASK_PCREL | OPTION_MASK_PREFIXED_ADDR);\n     }\n \n-  /* -mprefixed-addr (and hence -mpcrel) requires -mcpu=future.  */\n-  if (TARGET_PREFIXED_ADDR && !TARGET_FUTURE)\n+  /* -mpcrel requires prefixed load/store addressing.  */\n+  if (TARGET_PCREL && !TARGET_PREFIXED_ADDR)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_PCREL) != 0)\n-\terror (\"%qs requires %qs\", \"-mprefixed-addr\", \"-mcpu=future\");\n+\terror (\"%qs requires %qs\", \"-mpcrel\", \"-mprefixed-addr\");\n \n-      rs6000_isa_flags &= ~(OPTION_MASK_PCREL | OPTION_MASK_PREFIXED_ADDR);\n+      rs6000_isa_flags &= ~OPTION_MASK_PCREL;\n     }\n \n   /* Print the options after updating the defaults.  */\n@@ -37155,6 +37157,7 @@ rs6000_disable_incompatible_switches (void)\n     const HOST_WIDE_INT dep_flags;\t/* flags that depend on this option.  */\n     const char *const name;\t\t/* name of the switch.  */\n   } flags[] = {\n+    { OPTION_MASK_FUTURE,\tOTHER_FUTURE_MASKS,\t\"future\"\t},\n     { OPTION_MASK_P9_VECTOR,\tOTHER_P9_VECTOR_MASKS,\t\"power9-vector\"\t},\n     { OPTION_MASK_P8_VECTOR,\tOTHER_P8_VECTOR_MASKS,\t\"power8-vector\"\t},\n     { OPTION_MASK_VSX,\t\tOTHER_VSX_VECTOR_MASKS,\t\"vsx\"\t\t},"}, {"sha": "d5b92198587caf7c3aa317c82b14ddd65280d167", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -1,3 +1,12 @@\n+2019-06-11  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/localentry-1.c: Add -mpcrel option.\n+\t* gcc.target/powerpc/localentry-detect-1.c: Explicitly set and\n+\tunset -mpcrel in the target pragmas.\n+\t* gcc.target/powerpc/notoc-direct-1.c: Add -mpcrel option.\n+\t* gcc.target/powerpc/pcrel-sibcall-1.c: Explicitly set and\n+\tunset -mpcrel in the target pragmas.\n+\n 2019-06-11  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/tree-ssa/cmpexactdiv-5.c: New file."}, {"sha": "068b0c080bb7036470998ce38587379d0149753f", "filename": "gcc/testsuite/gcc.target/powerpc/localentry-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-1.c?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -1,10 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=future -O2\" } */\n+/* { dg-options \"-mdejagnu-cpu=future -O2 -mpcrel\" } */\n /* { dg-require-effective-target powerpc_elfv2 } */\n /* { dg-require-effective-target powerpc_future_ok } */\n \n-/* Ensure we generate \".localentry fn,1\" for both leaf and non-leaf\n-   functions.  */\n+/* Ensure we generate \".localentry fn,1\" for both leaf and non-leaf functions.\n+   At present, -mcpu=future does not enable pc-relative mode, so make sure we\n+   enable it to be able to check for .localentry.  */\n \n extern int y (int);\n "}, {"sha": "e67e7f824f8e55916243db5e3a7d5f4afdefbaed", "filename": "gcc/testsuite/gcc.target/powerpc/localentry-detect-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-detect-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-detect-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flocalentry-detect-1.c?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -3,10 +3,12 @@\n /* { dg-require-effective-target powerpc_future_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n \n-\n+/* At present, -mcpu=future does not enable pc-relative mode.  Enable it here\n+   explicitly until it is turned on by default.  */\n+#pragma GCC target (\"cpu=future,pcrel\")\n int localentry1 () { return 5; }\n \n-#pragma GCC target (\"cpu=power9\")\n+#pragma GCC target (\"cpu=power9,no-pcrel\")\n int localentry2 () { return 5; }\n \n /* { dg-final { scan-assembler {\\.localentry\\tlocalentry1,1\\M} } } */"}, {"sha": "8603ff7706b8c4a31b4ecd0c2f12c18995bb259a", "filename": "gcc/testsuite/gcc.target/powerpc/notoc-direct-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fnotoc-direct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fnotoc-direct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fnotoc-direct-1.c?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -1,10 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=future -O2\" } */\n+/* { dg-options \"-mdejagnu-cpu=future -O2 -mpcrel\" } */\n /* { dg-require-effective-target powerpc_elfv2 } */\n /* { dg-require-effective-target powerpc_future_ok } */\n \n-/* Test that calls generated from PC-relative code are\n-   annotated with @notoc.  */\n+/* Test that calls generated from PC-relative code are annotated with @notoc.\n+   At present, -mcpu=future does not enable pc-relative mode.  Enable it here\n+   explicitly until it is turned on by default.  */\n \n extern int yy0 (int);\n extern void yy1 (int);"}, {"sha": "0cb40d45ace5dc204379b080a10a3a073c638464", "filename": "gcc/testsuite/gcc.target/powerpc/pcrel-sibcall-1.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpcrel-sibcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85775141e3d551b880baefc7e6f8151737fc497c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpcrel-sibcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpcrel-sibcall-1.c?ref=85775141e3d551b880baefc7e6f8151737fc497c", "patch": "@@ -3,9 +3,12 @@\n /* { dg-require-effective-target powerpc_elfv2 } */\n /* { dg-require-effective-target powerpc_future_ok } */\n \n-/* Test that potential sibcalls are not generated when the caller preserves\n-   the TOC and the callee doesn't, or vice versa.  */\n+/* Test that potential sibcalls are not generated when the caller preserves the\n+   TOC and the callee doesn't, or vice versa.  At present, -mcpu=future does\n+   not enable pc-relative mode.  Enable it here explicitly until it is turned\n+   on by default.  */\n \n+#pragma GCC target (\"cpu=future,pcrel\")\n int x (void) __attribute__((noinline));\n int y (void) __attribute__((noinline));\n int xx (void) __attribute__((noinline));\n@@ -25,7 +28,7 @@ int sib_call (void)\n   return x ();\n }\n \n-#pragma GCC target (\"cpu=power9\")\n+#pragma GCC target (\"cpu=power9,no-pcrel\")\n int normal_call (void)\n {\n   return y ();\n@@ -36,7 +39,7 @@ int xx (void)\n   return 1;\n }\n \n-#pragma GCC target (\"cpu=future\")\n+#pragma GCC target (\"cpu=future,pcrel\")\n int notoc_call (void)\n {\n   return xx ();"}]}