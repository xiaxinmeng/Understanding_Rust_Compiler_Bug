{"sha": "275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc1YjYwZDZkODk0NTE5Y2MxMWVlM2NkNGY4YWQwYmE2ZjkyYjBkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-12-15T11:49:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-12-15T11:49:18Z"}, "message": "configure.in: Check for ld.\n\n\t* configure.in: Check for ld.\n\t(HAVE_LD_EH_FRAME_HDR): Define if ld supports --eh-frame-hdr option.\n\t* configure, config.in: Rebuilt.\n\t* config.gcc: Add crtbeginT.o to extra_parts where needed.\n\t* config/t-linux (LIB2ADDEH, LIB2ADDEHDEP): Use unwind-dw2-fde-glibc\n\tframe unwinding on Linux.\n\t* config/t-linux-gnulibc1 (LIB2ADDEH, LIB2ADDEHDEP): Use unwind-dw2-fde\n\tframe unwinding.\n\t* config/linux.h (STARTFILE_SPEC): Use crtbeginT.o for -static.\n\t(LINK_EH_SPEC): Define.\n\t* config/i386/gnu.h (STARTFILE_SPEC): Use crtbeginT.o for -static.\n\t* config/ia64/linux.h (STARTFILE_SPEC, LINK_EH_SPEC): Define.\n\t* config/ia64/fde-glibc.c (_Unwind_IteratePhdrCallback): Don't\n\titerate further if pc falls into current library, but fde was not\n\tfound.\n\t* config/sparc/linux.h (STARTFILE_SPEC): Use crtbeginT.o for -static\n\tif using glibc.\n\t(LINK_EH_SPEC): Define.\n\t* config/sparc/linux64.h (STARTFILE_SPEC32, STARTFILE_SPEC64):\n\tUse crtbeginT.o for -static.\n\t(LINK_EH_SPEC): Define.\n\t* config/sparc/t-linux64 (EXTRA_MULTILIB_PARTS): Add crtbeginT.o.\n\t* Makefile.in (crtbeginT.o): Add rule.\n\t* gcc.c (init_gcc_specs): For -static-libgcc, use -lgcc -lgcc_eh.\n\tIf neither -static-libgcc nor -shared-libgcc is passed and -shared,\n\tuse -lgcc if LINK_EH_SPEC is defined and -lgcc_s -lgcc if not.\n\tIf none of the above switches are passed, use -lgcc -lgcc_eh.\n\t(init_spec): If LINK_EH_SPEC is defined, prepend it to link_spec.\n\t* mklibgcc.in: Don't include LIB2ADDEH objects into libgcc.a if\n\tcreating libgcc_s.so, put them into separate libgcc_eh.a instead.\n\t* unwind-dw2-fde.c: Don't include any headers if this file\n\tis included from other .c file.\n\t* unwind-dw2-fde-glibc.c: New file.\n\t* crtstuff.c (USE_PT_GNU_EH_FRAME, USE_EH_FRAME_REGISTRY): Define.\n\tUse it instead of EH_FRAME_SECTION_NAME where appropriate.\n\nFrom-SVN: r48039", "tree": {"sha": "1e290b8253af587309d21dfa2217501a304a75ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e290b8253af587309d21dfa2217501a304a75ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "861ef92859ce3681ae24ecac1384e0be2a035c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861ef92859ce3681ae24ecac1384e0be2a035c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861ef92859ce3681ae24ecac1384e0be2a035c9d"}], "stats": {"total": 778, "additions": 731, "deletions": 47}, "files": [{"sha": "36f16c6e5fd787d9a356ec3833697ad6de481c99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -1,3 +1,41 @@\n+2001-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.in: Check for ld.\n+\t(HAVE_LD_EH_FRAME_HDR): Define if ld supports --eh-frame-hdr option.\n+\t* configure, config.in: Rebuilt.\n+\t* config.gcc: Add crtbeginT.o to extra_parts where needed.\n+\t* config/t-linux (LIB2ADDEH, LIB2ADDEHDEP): Use unwind-dw2-fde-glibc\n+\tframe unwinding on Linux.\n+\t* config/t-linux-gnulibc1 (LIB2ADDEH, LIB2ADDEHDEP): Use unwind-dw2-fde\n+\tframe unwinding.\n+\t* config/linux.h (STARTFILE_SPEC): Use crtbeginT.o for -static.\n+\t(LINK_EH_SPEC): Define.\n+\t* config/i386/gnu.h (STARTFILE_SPEC): Use crtbeginT.o for -static.\n+\t* config/ia64/linux.h (STARTFILE_SPEC, LINK_EH_SPEC): Define.\n+\t* config/ia64/fde-glibc.c (_Unwind_IteratePhdrCallback): Don't\n+\titerate further if pc falls into current library, but fde was not\n+\tfound.\n+\t* config/sparc/linux.h (STARTFILE_SPEC): Use crtbeginT.o for -static\n+\tif using glibc.\n+\t(LINK_EH_SPEC): Define.\n+\t* config/sparc/linux64.h (STARTFILE_SPEC32, STARTFILE_SPEC64):\n+\tUse crtbeginT.o for -static.\n+\t(LINK_EH_SPEC): Define.\n+\t* config/sparc/t-linux64 (EXTRA_MULTILIB_PARTS): Add crtbeginT.o.\n+\t* Makefile.in (crtbeginT.o): Add rule.\n+\t* gcc.c (init_gcc_specs): For -static-libgcc, use -lgcc -lgcc_eh.\n+\tIf neither -static-libgcc nor -shared-libgcc is passed and -shared,\n+\tuse -lgcc if LINK_EH_SPEC is defined and -lgcc_s -lgcc if not.\n+\tIf none of the above switches are passed, use -lgcc -lgcc_eh.\n+\t(init_spec): If LINK_EH_SPEC is defined, prepend it to link_spec.\n+\t* mklibgcc.in: Don't include LIB2ADDEH objects into libgcc.a if\n+\tcreating libgcc_s.so, put them into separate libgcc_eh.a instead.\n+\t* unwind-dw2-fde.c: Don't include any headers if this file\n+\tis included from other .c file.\n+\t* unwind-dw2-fde-glibc.c: New file.\n+\t* crtstuff.c (USE_PT_GNU_EH_FRAME, USE_EH_FRAME_REGISTRY): Define.\n+\tUse it instead of EH_FRAME_SECTION_NAME where appropriate.\n+\n 2001-12-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (expand_builtin_memcmp): Mark parameter with"}, {"sha": "ecba14f7a79f4409d6c6e7a541022462de69639b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -1106,6 +1106,15 @@ $(T)crtendS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n \t  -c $(srcdir)/crtstuff.c -DCRT_END -DCRTSTUFFS_O \\\n \t  -o $(T)crtendS$(objext)\n \n+# This is a version of crtbegin for -static links.\n+$(T)crtbeginT.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n+  gbl-ctors.h stmp-int-hdrs tsystem.h\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n+\t  -finhibit-size-directive -fno-inline-functions \\\n+\t  -fno-exceptions $(CRTSTUFF_T_CFLAGS) @inhibit_libc@ \\\n+\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O \\\n+\t  -o $(T)crtbeginT$(objext)\n+\n # Compile the start modules crt0.o and mcrt0.o that are linked with\n # every program\n crt0.o: s-crt0 ; @true\n@@ -2384,7 +2393,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n # that don't exist in the distribution.\n INTL_CLEAN = intl.clean\n clean: mostlyclean $(INTL_CLEAN) lang.clean\n-\t-rm -f libgcc.a libgcc_s$(SHLIB_EXT) libgcc_s$(SHLIB_EXT).1\n+\t-rm -f libgcc.a libgcc_eh.a libgcc_s$(SHLIB_EXT) libgcc_s$(SHLIB_EXT).1\n \t-rm -f config.h tconfig.h hconfig.h tm_p.h\n \t-rm -f cs-*\n \t-rm -rf libgcc\n@@ -3140,11 +3149,15 @@ stage1-start:\n \t-if [ -f as$(exeext) ] ; then (cd stage1 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n \t-if [ -f ld$(exeext) ] ; then (cd stage1 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage1 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-rm -f stage1/libgcc.a\n+\t-rm -f stage1/libgcc.a stage1/libgcc_eh.a\n \t-cp libgcc.a stage1\n \t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n \t  $(RANLIB_FOR_TARGET) stage1/libgcc.a; \\\n \telse true; fi\n+\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage1; \\\n+\t  if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t   $(RANLIB_FOR_TARGET) stage1/libgcc_eh.a; \\\n+\t  else true; fi; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage1/$${f} . ; \\\n \telse true; \\\n@@ -3165,11 +3178,15 @@ stage2-start:\n \t-if [ -f as$(exeext) ] ; then (cd stage2 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n \t-if [ -f ld$(exeext) ] ; then (cd stage2 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage2 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-rm -f stage2/libgcc.a\n+\t-rm -f stage2/libgcc.a stage2/libgcc_eh.a\n \t-cp libgcc.a stage2\n \t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n \t  $(RANLIB_FOR_TARGET) stage2/libgcc.a; \\\n \telse true; fi\n+\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage2; \\\n+\t  if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t   $(RANLIB_FOR_TARGET) stage2/libgcc_eh.a; \\\n+\t  else true; fi; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage2/$${f} . ; \\\n \telse true; \\\n@@ -3190,11 +3207,15 @@ stage3-start:\n \t-if [ -f as$(exeext) ] ; then (cd stage3 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n \t-if [ -f ld$(exeext) ] ; then (cd stage3 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage3 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-rm -f stage3/libgcc.a\n+\t-rm -f stage3/libgcc.a stage3/libgcc_eh.a\n \t-cp libgcc.a stage3\n \t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n \t  $(RANLIB_FOR_TARGET) stage3/libgcc.a; \\\n \telse true; fi\n+\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage3; \\\n+\t  if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t   $(RANLIB_FOR_TARGET) stage3/libgcc_eh.a; \\\n+\t  else true; fi; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage3/$${f} . ; \\\n \telse true; \\\n@@ -3215,11 +3236,15 @@ stage4-start:\n \t-if [ -f as$(exeext) ] ; then (cd stage4 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n \t-if [ -f ld$(exeext) ] ; then (cd stage4 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage4 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-rm -f stage4/libgcc.a\n+\t-rm -f stage4/libgcc.a stage4/libgcc_eh.a\n \t-cp libgcc.a stage4\n \t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n \t  $(RANLIB_FOR_TARGET) stage4/libgcc.a; \\\n \telse true; fi\n+\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage4; \\\n+\t  if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t   $(RANLIB_FOR_TARGET) stage4/libgcc_eh.a; \\\n+\t  else true; fi; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage4/$${f} . ; \\\n \telse true; \\"}, {"sha": "061c970074c44bbab2ecab6164cb47acb0915024", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -276,7 +276,7 @@ case $machine in\n \t# support are matched above and just set $cpu_type.\n \txm_defines=POSIX\n \ttm_file=\"${cpu_type}/gnu.h\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \t# GNU always uses ELF.\n \telf=yes\n \t# GNU tools are the only tools.\n@@ -700,7 +700,7 @@ cris-*-elf | cris-*-none)\n cris-*-linux*)\n \ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} linux.h cris/linux.h\"\n \ttmake_file=\"cris/t-cris t-slibgcc-elf-ver cris/t-linux\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tcase x${enable_threads} in\n \tx | xyes | xpthreads | xposix)\n \t\tthread_file=posix\n@@ -750,7 +750,7 @@ hppa*-*-linux* | parisc*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h pa/pa-linux.h \\\n \t\t pa/pa32-regs.h pa/pa32-linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux pa/t-linux\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tgas=yes gnu_ld=yes\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n@@ -981,7 +981,7 @@ i370-*-linux*)\n \ttm_file=\"dbxelf.h elfos.h svr4.h linux.h i370/linux.h ${tm_file}\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux\"\n \t# broken_install=yes\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \t# extra_parts=\"crtbegin.o crtend.o\"\n \tgnu_ld=yes\n \tgas=yes\n@@ -1178,7 +1178,7 @@ i[34567]86-*-linux*)\t# Intel 80386's running GNU/Linux\n \t\t\t# aka GNU/Linux C library 6\n \ttm_file=\"${tm_file} i386/att.h dbxelf.h elfos.h svr4.h linux.h i386/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux i386/t-crtstuff\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n \tfloat_format=i386\n \tif test x$enable_threads = xyes; then\n@@ -1189,7 +1189,7 @@ x86_64-*-linux*)\n \ttm_file=\"i386/biarch64.h i386/i386.h i386/att.h dbxelf.h elfos.h svr4.h linux.h \\\n \t\t i386/x86-64.h i386/linux64.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux i386/t-crtstuff\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n \tfloat_format=i386\n \tif test x$enable_threads = xyes; then\n@@ -2280,7 +2280,7 @@ mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n                 ;;\n \tesac\n \ttmake_file=\"t-slibgcc-elf-ver t-linux\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n \tgas=yes\n \tif test x$enable_threads = xyes; then\n@@ -2867,7 +2867,7 @@ rs6000-*-lynxos*)\n s390-*-linux*)\n \ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux s390/t-linux\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n \tfi\n@@ -2878,7 +2878,7 @@ s390x-*-linux*)\n \tmd_file=s390/s390.md\n \tout_file=s390/s390.c\n \ttmake_file=\"t-slibgcc-elf-ver t-linux s390/t-linux\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n \tfi\n@@ -2982,7 +2982,7 @@ sparc-*-linux*libc1*)\t# Sparc's running GNU/Linux, libc5\n sparc-*-linux*)\t\t# Sparc's running GNU/Linux, libc6\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n@@ -3177,7 +3177,7 @@ sparc64-*-elf*)\n sparc64-*-linux*)\t\t# 64-bit Sparc's running GNU/Linux\n \ttmake_file=\"t-slibgcc-elf-ver t-linux sparc/t-linux64\"\n \ttm_file=\"sparc/sparc_bi.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux64.h\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'"}, {"sha": "d1b8068045c44c85e07b7e200607d696288420cf", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -551,6 +551,9 @@\n /* Define if your assembler supports the --gstabs option. */\n #undef HAVE_AS_GSTABS_DEBUG_FLAG\n \n+/* Define if your linker supports --eh-frame-hdr option. */\n+#undef HAVE_LD_EH_FRAME_HDR\n+\n /* Define 0/1 to force the choice for exception handling model. */\n #undef CONFIG_SJLJ_EXCEPTIONS\n "}, {"sha": "0214c05771fe455109dacf22c8fb327e31765233", "filename": "gcc/config/i386/gnu.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fi386%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fi386%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu.h?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -29,7 +29,8 @@\n      %{!static: \\\n        %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}} \\\n      %{static:crt0.o%s}} \\\n-   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+   crti.o%s %{static:crtbeginT.o%s}\\\n+   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n \n /* FIXME: Is a Hurd-specific fallback mechanism necessary?  */\n #undef MD_FALLBACK_FRAME_STATE_FOR"}, {"sha": "83cc93a92563c13ec290d38b61bf3bb5b5c1cbc0", "filename": "gcc/config/ia64/fde-glibc.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fia64%2Ffde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fia64%2Ffde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ffde-glibc.c?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -110,7 +110,9 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n       else\n         goto found;\n     }\n-  return 0;\n+  /* No need to search for further libraries when we know pc is contained\n+     in this library.  */\n+  return 1;\n \n  found:\n   *data->segment_base = seg_base;"}, {"sha": "91f2f39d845792b8317c5077dbc4323641bef5b6", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -18,6 +18,15 @@\n #undef ASM_SPEC\n #define ASM_SPEC \"-x %{mconstant-gp} %{mauto-pic}\"\n \n+/* Need to override linux.h STARTFILE_SPEC, since it has crtbeginT.o in.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n+\t\t       %{!p:%{profile:gcrt1.o%s} \\\n+\t\t\t %{!profile:crt1.o%s}}}} \\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n /* Similar to standard Linux, but adding -ffast-math support.  */\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n@@ -45,4 +54,10 @@\n #undef PROFILE_BEFORE_PROLOGUE\n #define PROFILE_BEFORE_PROLOGUE 1\n \n+/* Override linux.h LINK_EH_SPEC definition.\n+   Signalize that because we have fde-glibc, we don't need all C shared libs\n+   linked against -lgcc_s.  */\n+#undef LINK_EH_SPEC\n+#define LINK_EH_SPEC \"\"\n+\n /* End of linux.h */"}, {"sha": "6e60c008d852357bcc6474ca7b99f146ee253e15", "filename": "gcc/config/linux.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -50,12 +50,22 @@ Boston, MA 02111-1307, USA.  */\n    object constructed before entering `main'. */\n    \n #undef\tSTARTFILE_SPEC\n+#ifdef USE_GNULIBC_1\n #define STARTFILE_SPEC \\\n   \"%{!shared: \\\n      %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n \t\t       %{!p:%{profile:gcrt1.o%s} \\\n \t\t\t %{!profile:crt1.o%s}}}} \\\n    crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+#else\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n+\t\t       %{!p:%{profile:gcrt1.o%s} \\\n+\t\t\t %{!profile:crt1.o%s}}}} \\\n+   crti.o%s %{static:crtbeginT.o%s}\\\n+   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+#endif\n \n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n    the GNU/Linux magical crtend.o file (see crtstuff.c) which\n@@ -98,5 +108,9 @@ Boston, MA 02111-1307, USA.  */\n        %{!p:%{!pg:%{!g*:-lc} %{g*:-lg}}}}\"\n #endif\n \n+#if !defined(USE_GNULIBC_1) && defined(HAVE_LD_EH_FRAME_HDR)\n+#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n+#endif\n+\n /* Define this so we can compile MS code for use with WINE.  */\n #define HANDLE_PRAGMA_PACK_PUSH_POP"}, {"sha": "cfc3e527d18c4de1d3c75852206c4f48834f8c25", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -44,10 +44,17 @@ Boston, MA 02111-1307, USA.  */\n    object constructed before entering `main'.  */\n    \n #undef  STARTFILE_SPEC\n+#ifdef USE_GNULIBC_1\n #define STARTFILE_SPEC \\\n   \"%{!shared: \\\n      %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n    crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+#else\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n+   crti.o%s %{static:crtbeginT.o%s}\\\n+   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+#endif\n \n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n    the GNU/Linux magical crtend.o file (see crtstuff.c) which\n@@ -242,4 +249,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #else\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n #endif\n+\n+#if !defined(USE_GNULIBC_1) && defined(HAVE_LD_EH_FRAME_HDR)\n+#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n+#endif\n \f"}, {"sha": "54b672e826f70a434078cd54df744cfe80173581", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -59,13 +59,15 @@ Boston, MA 02111-1307, USA.  */\n #define STARTFILE_SPEC32 \\\n   \"%{!shared: \\\n      %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n-   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+   crti.o%s %{static:crtbeginT.o%s}\\\n+   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n \n #define STARTFILE_SPEC64 \\\n   \"%{!shared: \\\n      %{pg:/usr/lib64/gcrt1.o%s} %{!pg:%{p:/usr/lib64/gcrt1.o%s} %{!p:/usr/lib64/crt1.o%s}}}\\\n-   /usr/lib64/crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n-   \n+   /usr/lib64/crti.o%s %{static:crtbeginT.o%s}\\\n+   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+\n #ifdef SPARC_BI_ARCH\n \n #if DEFAULT_ARCH32_P\n@@ -367,4 +369,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    RELATIVE relocations.  */\n \n /* #define DWARF_OFFSET_SIZE PTR_SIZE */\n+\n+#if defined(HAVE_LD_EH_FRAME_HDR)\n+#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n+#endif\n \f"}, {"sha": "4f552e07d1e8d93b89fc80f6245836269d79fb0c", "filename": "gcc/config/sparc/t-linux64", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fsparc%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Fsparc%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-linux64?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -7,4 +7,4 @@ MULTILIB_EXCLUSIONS = m32/!m64/mno-app-regs m32/!m64/mcmodel=medany\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o\n+EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "570135aef5062679cb4ae157925df13da0fdacde", "filename": "gcc/config/t-linux", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -9,3 +9,8 @@ TARGET_LIBGCC2_CFLAGS = -fPIC\n # Override t-slibgcc-elf-ver to export some libgcc symbols with\n # the symbol versions that glibc used.\n SHLIB_MAPFILES += $(srcdir)/config/libgcc-glibc.ver\n+\n+# Use unwind-dw2-fde-glibc\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-glibc.c \\\n+  $(srcdir)/unwind-sjlj.c\n+LIB2ADDEHDEP = unwind.inc unwind-dw2-fde.h unwind-dw2-fde.c"}, {"sha": "56a471579edfcdad0e1b809a46aa2147a4ca74d1", "filename": "gcc/config/t-linux-gnulibc1", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Ft-linux-gnulibc1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfig%2Ft-linux-gnulibc1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux-gnulibc1?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -1,2 +1,7 @@\n # We are building for the Linux C library 5.\n T_CFLAGS = -DUSE_GNULIBC_1\n+\n+# Use unwind-dw2-fde\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n+  $(srcdir)/unwind-sjlj.c\n+LIB2ADDEHDEP = unwind.inc unwind-dw2-fde.h"}, {"sha": "39107bca71a139ce0228a3b706f95c4d06a1e896", "filename": "gcc/configure", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -6904,6 +6904,92 @@ else\n   echo \"$ac_t\"\"$gcc_cv_as\" 1>&6\n fi\n \n+# Figure out what linker we will be using.\n+echo $ac_n \"checking what linker to use\"\"... $ac_c\" 1>&6\n+echo \"configure:6904: checking what linker to use\" >&5\n+gcc_cv_ld=\n+gcc_cv_gld_major_version=\n+gcc_cv_gld_minor_version=\n+gcc_cv_ld_gld_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/ld\n+gcc_cv_ld_bfd_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/bfd\n+if test -x \"$DEFAULT_LINKER\"; then\n+\tgcc_cv_ld=\"$DEFAULT_LINKER\"\n+elif test -x \"$LD\"; then\n+\tgcc_cv_ld=\"$LD\"\n+elif test -x ld$host_exeext; then\n+\t# Build using linker in the current directory.\n+\tgcc_cv_ld=./ld$host_exeext\n+elif test -f $gcc_cv_ld_gld_srcdir/configure.in -a -f ../ld/Makefile; then\n+\t# Single tree build which includes ld.\n+\tfor f in $gcc_cv_ld_bfd_srcdir/configure $gcc_cv_ld_gld_srcdir/configure $gcc_cv_ld_gld_srcdir/configure.in $gcc_cv_ld_gld_srcdir/Makefile.in\n+\tdo\n+\t\tgcc_cv_gld_version=`grep '^VERSION=[0-9]*\\.[0-9]*' $f`\n+\t\tif test x$gcc_cv_gld_version != x; then\n+\t\t\tbreak\n+\t\tfi\n+\tdone\n+\tgcc_cv_gld_major_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=\\([0-9]*\\)\"`\n+\tgcc_cv_gld_minor_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=[0-9]*\\.\\([0-9]*\\)\"`\n+fi\n+\n+if test \"x$gcc_cv_ld\" = x -a x$host = x$target; then\n+\t# Native build.\n+\t# Search the same directories that the installed compiler will\n+\t# search.  Else we may find the wrong linker and lose.  If we\n+\t# do not find a suitable linker binary, then try the user's\n+\t# path.\n+\t#\n+\t# Also note we have to check MD_EXEC_PREFIX before checking the\n+\t# user's path.  Unfortunately, there is no good way to get at the\n+\t# value of MD_EXEC_PREFIX here.  So we do a brute force search\n+\t# through all the known MD_EXEC_PREFIX values.  Ugh.  This needs\n+\t# to be fixed as part of the make/configure rewrite too.\n+\n+\tif test \"x$exec_prefix\" = xNONE; then\n+\t\tif test \"x$prefix\" = xNONE; then\n+\t\t\ttest_prefix=/usr/local\n+\t\telse\n+\t\t\ttest_prefix=$prefix\n+\t\tfi\n+\telse\n+\t\ttest_prefix=$exec_prefix\n+\tfi\n+\n+\t# If the loop below does not find an linker, then use whatever\n+\t# one we can find in the users's path.\n+\t# user's path.\n+\tgcc_cv_ld=ld$host_exeext\n+\n+\ttest_dirs=\"$test_prefix/lib/gcc-lib/$target/$gcc_version \\\n+\t\t   $test_prefix/lib/gcc-lib/$target \\\n+\t\t   /usr/lib/gcc/$target/$gcc_version \\\n+\t\t   /usr/lib/gcc/$target \\\n+\t\t   $test_prefix/$target/bin/$target/$gcc_version \\\n+\t\t   $test_prefix/$target/bin \\\n+\t\t   /usr/libexec \\\n+\t\t   /usr/ccs/gcc \\\n+\t\t   /usr/ccs/bin \\\n+\t\t   /udk/usr/ccs/bin \\\n+\t\t   /bsd43/usr/lib/cmplrs/cc \\\n+\t\t   /usr/cross64/usr/bin \\\n+\t\t   /usr/lib/cmplrs/cc \\\n+\t\t   /sysv/usr/lib/cmplrs/cc \\\n+\t\t   /svr4/usr/lib/cmplrs/cc \\\n+\t\t   /usr/bin\"\n+\n+\tfor dir in $test_dirs; do\n+\t\tif test -f $dir/ld$host_exeext; then\n+\t\t\tgcc_cv_ld=$dir/ld$host_exeext\n+\t\t\tbreak;\n+\t\tfi\n+\tdone\n+fi\n+if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n+  echo \"$ac_t\"\"\"newly built ld\"\" 1>&6\n+else\n+  echo \"$ac_t\"\"$gcc_cv_ld\" 1>&6\n+fi\n+\n # Figure out what nm we will be using.\n echo $ac_n \"checking what nm to use\"\"... $ac_c\" 1>&6\n echo \"configure:6910: checking what nm to use\" >&5\n@@ -7526,6 +7612,27 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n+echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n+echo \"configure:7611: checking linker PT_GNU_EH_FRAME support\" >&5\n+gcc_cv_ld_eh_frame_hdr=no\n+if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n+    gcc_cv_ld_eh_frame_hdr=yes\n+  fi\n+elif test x$gcc_cv_ld != x; then\n+\t# Check if linker supports --eh-frame-hdr option\n+\tif $gcc_cv_ld --help 2>/dev/null | grep eh-frame-hdr > /dev/null; then\n+\t\tgcc_cv_ld_eh_frame_hdr=yes\n+\tfi\n+fi\n+if test x\"$gcc_cv_ld_eh_frame_hdr\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_LD_EH_FRAME_HDR 1\n+EOF\n+\n+fi\n+echo \"$ac_t\"\"$gcc_cv_ld_eh_frame_hdr\" 1>&6\n+\n if test \"$prefix\" != \"/usr\" && test \"$prefix\" != \"/usr/local\" ; then\n   cat >> confdefs.h <<EOF\n #define PREFIX_INCLUDE_DIR \"$prefix/include\""}, {"sha": "34a5b2bc7b056c55a3f8b806066c702d696d2f2c", "filename": "gcc/configure.in", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -1257,6 +1257,95 @@ else\n   AC_MSG_RESULT($gcc_cv_as)\n fi\n \n+# Figure out what linker we will be using.\n+AC_MSG_CHECKING(what linker to use)\n+gcc_cv_ld=\n+gcc_cv_gld_major_version=\n+gcc_cv_gld_minor_version=\n+gcc_cv_ld_gld_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/ld\n+gcc_cv_ld_bfd_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/bfd\n+if test -x \"$DEFAULT_LINKER\"; then\n+\tgcc_cv_ld=\"$DEFAULT_LINKER\"\n+elif test -x \"$LD\"; then\n+\tgcc_cv_ld=\"$LD\"\n+elif test -x ld$host_exeext; then\n+\t# Build using linker in the current directory.\n+\tgcc_cv_ld=./ld$host_exeext\n+elif test -f $gcc_cv_ld_gld_srcdir/configure.in -a -f ../ld/Makefile; then\n+\t# Single tree build which includes ld.\n+\tfor f in $gcc_cv_ld_bfd_srcdir/configure $gcc_cv_ld_gld_srcdir/configure $gcc_cv_ld_gld_srcdir/configure.in $gcc_cv_ld_gld_srcdir/Makefile.in\n+\tdo\n+changequote(,)dnl\n+\t\tgcc_cv_gld_version=`grep '^VERSION=[0-9]*\\.[0-9]*' $f`\n+changequote([,])dnl\n+\t\tif test x$gcc_cv_gld_version != x; then\n+\t\t\tbreak\n+\t\tfi\n+\tdone\n+changequote(,)dnl\n+\tgcc_cv_gld_major_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=\\([0-9]*\\)\"`\n+\tgcc_cv_gld_minor_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=[0-9]*\\.\\([0-9]*\\)\"`\n+changequote([,])dnl\n+fi\n+\n+if test \"x$gcc_cv_ld\" = x -a x$host = x$target; then\n+\t# Native build.\n+\t# Search the same directories that the installed compiler will\n+\t# search.  Else we may find the wrong linker and lose.  If we\n+\t# do not find a suitable linker binary, then try the user's\n+\t# path.\n+\t#\n+\t# Also note we have to check MD_EXEC_PREFIX before checking the\n+\t# user's path.  Unfortunately, there is no good way to get at the\n+\t# value of MD_EXEC_PREFIX here.  So we do a brute force search\n+\t# through all the known MD_EXEC_PREFIX values.  Ugh.  This needs\n+\t# to be fixed as part of the make/configure rewrite too.\n+\n+\tif test \"x$exec_prefix\" = xNONE; then\n+\t\tif test \"x$prefix\" = xNONE; then\n+\t\t\ttest_prefix=/usr/local\n+\t\telse\n+\t\t\ttest_prefix=$prefix\n+\t\tfi\n+\telse\n+\t\ttest_prefix=$exec_prefix\n+\tfi\n+\n+\t# If the loop below does not find an linker, then use whatever\n+\t# one we can find in the users's path.\n+\t# user's path.\n+\tgcc_cv_ld=ld$host_exeext\n+\n+\ttest_dirs=\"$test_prefix/lib/gcc-lib/$target/$gcc_version \\\n+\t\t   $test_prefix/lib/gcc-lib/$target \\\n+\t\t   /usr/lib/gcc/$target/$gcc_version \\\n+\t\t   /usr/lib/gcc/$target \\\n+\t\t   $test_prefix/$target/bin/$target/$gcc_version \\\n+\t\t   $test_prefix/$target/bin \\\n+\t\t   /usr/libexec \\\n+\t\t   /usr/ccs/gcc \\\n+\t\t   /usr/ccs/bin \\\n+\t\t   /udk/usr/ccs/bin \\\n+\t\t   /bsd43/usr/lib/cmplrs/cc \\\n+\t\t   /usr/cross64/usr/bin \\\n+\t\t   /usr/lib/cmplrs/cc \\\n+\t\t   /sysv/usr/lib/cmplrs/cc \\\n+\t\t   /svr4/usr/lib/cmplrs/cc \\\n+\t\t   /usr/bin\"\n+\n+\tfor dir in $test_dirs; do\n+\t\tif test -f $dir/ld$host_exeext; then\n+\t\t\tgcc_cv_ld=$dir/ld$host_exeext\n+\t\t\tbreak;\n+\t\tfi\n+\tdone\n+fi\n+if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n+  AC_MSG_RESULT(\"newly built ld\")\n+else\n+  AC_MSG_RESULT($gcc_cv_ld)\n+fi\n+\n # Figure out what nm we will be using.\n AC_MSG_CHECKING(what nm to use)\n if test -x nm$host_exeext; then\n@@ -1533,7 +1622,7 @@ if test x\"$gcc_cv_as_shf_merge\" = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_as_shf_merge)\n \n-case \"$target\" in \n+case \"$target\" in\n   sparc*-*-*)\n     AC_CACHE_CHECK([assembler .register pseudo-op support],\n \tgcc_cv_as_register_pseudo_op, [\n@@ -1800,6 +1889,24 @@ if test x\"$gcc_cv_as_gstabs_flag\" = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_as_gstabs_flag)\n \n+AC_MSG_CHECKING(linker PT_GNU_EH_FRAME support)\n+gcc_cv_ld_eh_frame_hdr=no\n+if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n+    gcc_cv_ld_eh_frame_hdr=yes\n+  fi\n+elif test x$gcc_cv_ld != x; then\n+\t# Check if linker supports --eh-frame-hdr option\n+\tif $gcc_cv_ld --help 2>/dev/null | grep eh-frame-hdr > /dev/null; then\n+\t\tgcc_cv_ld_eh_frame_hdr=yes\n+\tfi\n+fi\n+if test x\"$gcc_cv_ld_eh_frame_hdr\" = xyes; then\n+\tAC_DEFINE(HAVE_LD_EH_FRAME_HDR, 1,\n+[Define if your linker supports --eh-frame-hdr option.])\n+fi\n+AC_MSG_RESULT($gcc_cv_ld_eh_frame_hdr)\n+\n if test \"$prefix\" != \"/usr\" && test \"$prefix\" != \"/usr/local\" ; then\n   AC_DEFINE_UNQUOTED(PREFIX_INCLUDE_DIR, \"$prefix/include\")\n fi"}, {"sha": "8beb64cf51cee9dfb4ee8a55a078b59b9662ea02", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -66,6 +66,19 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n # define CRT_CALL_STATIC_FUNCTION(func) func ()\n #endif\n \n+#if defined(OBJECT_FORMAT_ELF) && defined(HAVE_LD_EH_FRAME_HDR) \\\n+    && !defined(CRTSTUFFT_O) \\\n+    && defined(__GLIBC__) && __GLIBC__ >= 2\n+#include <link.h>\n+# if (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2) \\\n+     || (__GLIBC__ == 2 && __GLIBC_MINOR__ == 2 && defined(DT_CONFIG)))\n+#  define USE_PT_GNU_EH_FRAME\n+# endif\n+#endif\n+#if defined(EH_FRAME_SECTION_NAME) && !defined(USE_PT_GNU_EH_FRAME)\n+# define USE_EH_FRAME_REGISTRY\n+#endif\n+\n /* We do not want to add the weak attribute to the declarations of these\n    routines in unwind-dw2-fde.h because that will cause the definition of\n    these symbols to be weak as well.\n@@ -245,7 +258,7 @@ __do_global_dtors_aux (void)\n       f ();\n     }\n \n-#ifdef EH_FRAME_SECTION_NAME\n+#ifdef USE_EH_FRAME_REGISTRY\n #if defined(CRT_GET_RFIB_TEXT) || defined(CRT_GET_RFIB_DATA)\n   /* If we used the new __register_frame_info_bases interface,\n      make sure that we deregister from the same place.  */\n@@ -274,15 +287,15 @@ fini_dummy (void)\n   asm (TEXT_SECTION_ASM_OP);\n }\n \n-#if defined(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n+#if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n /* Stick a call to __register_frame_info into the .init section.  For some\n    reason calls with no arguments work more reliably in .init, so stick the\n    call in another function.  */\n \n static void\n frame_dummy (void)\n {\n-#ifdef EH_FRAME_SECTION_NAME\n+#ifdef USE_EH_FRAME_REGISTRY\n   static struct object object;\n #if defined(CRT_GET_RFIB_TEXT) || defined(CRT_GET_RFIB_DATA)\n   void *tbase, *dbase;\n@@ -386,21 +399,21 @@ __do_global_dtors (void)\n   for (p = __DTOR_LIST__ + 1; (f = *p); p++)\n     f ();\n \n-#ifdef EH_FRAME_SECTION_NAME\n+#ifdef USE_EH_FRAME_REGISTRY\n   if (__deregister_frame_info)\n     __deregister_frame_info (__EH_FRAME_BEGIN__);\n #endif\n }\n \n-#if defined(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n+#if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n /* A helper function for __do_global_ctors, which is in crtend.o.  Here\n    in crtbegin.o, we can reference a couple of symbols not visible there.\n    Plus, since we're before libgcc.a, we have no problems referencing\n    functions from there.  */\n void\n __do_global_ctors_1(void)\n {\n-#ifdef EH_FRAME_SECTION_NAME\n+#ifdef USE_EH_FRAME_REGISTRY\n   static struct object object;\n   if (__register_frame_info)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n@@ -547,7 +560,7 @@ void\n __do_global_ctors (void)\n {\n   func_ptr *p;\n-#if defined(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n+#if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n   __do_global_ctors_1();\n #endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)"}, {"sha": "466f6cdb1a70306312a830c866bb3de2150ef4ac", "filename": "gcc/gcc.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -323,7 +323,7 @@ static void clear_args\t\t\tPARAMS ((void));\n static void fatal_error\t\t\tPARAMS ((int));\n #ifdef ENABLE_SHARED_LIBGCC\n static void init_gcc_specs              PARAMS ((struct obstack *,\n-\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t const char *, const char *,\n \t\t\t\t\t\t const char *));\n #endif\n #if defined(HAVE_TARGET_OBJECT_SUFFIX) || defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n@@ -1416,28 +1416,36 @@ static struct spec_list *specs = (struct spec_list *) 0;\n \n #ifdef ENABLE_SHARED_LIBGCC\n static void\n-init_gcc_specs (obstack, shared_name, static_name)\n+init_gcc_specs (obstack, shared_name, static_name, eh_name)\n      struct obstack *obstack;\n      const char *shared_name;\n      const char *static_name;\n+     const char *eh_name;\n {\n   char buffer[128];\n+  const char *p;\n \n   /* If we see -shared-libgcc, then use the shared version.  */\n   sprintf (buffer, \"%%{shared-libgcc:%s %s}\", shared_name, static_name);\n   obstack_grow (obstack, buffer, strlen (buffer));\n   /* If we see -static-libgcc, then use the static version.  */\n-  sprintf (buffer, \"%%{static-libgcc:%s}\", static_name);\n+  sprintf (buffer, \"%%{static-libgcc:%s %s}\", static_name, eh_name);\n   obstack_grow (obstack, buffer, strlen (buffer));\n-  /* Otherwise, if we see -shared, then use the shared version.  */\n-  sprintf (buffer,\n-\t   \"%%{!shared-libgcc:%%{!static-libgcc:%%{shared:%s %s}}}\", \n-\t   shared_name, static_name);\n+  /* Otherwise, if we see -shared, then use the shared version\n+     if using EH registration routines or static version without\n+     exception handling routines otherwise.  */\n+  p = \"%{!shared-libgcc:%{!static-libgcc:%{shared:\";\n+  obstack_grow (obstack, p, strlen (p));\n+#ifdef LINK_EH_SPEC\n+  sprintf (buffer, \"%s}}}\", static_name);\n+#else\n+  sprintf (buffer, \"%s %s}}}\", shared_name, static_name);\n+#endif\n   obstack_grow (obstack, buffer, strlen (buffer));\n   /* Otherwise, use the static version.  */\n   sprintf (buffer, \n-\t   \"%%{!shared-libgcc:%%{!static-libgcc:%%{!shared:%s}}}\", \n-\t   static_name);\n+\t   \"%%{!shared-libgcc:%%{!static-libgcc:%%{!shared:%s %s}}}\", \n+\t   static_name, eh_name);\n   obstack_grow (obstack, buffer, strlen (buffer));\n }\n #endif /* ENABLE_SHARED_LIBGCC */\n@@ -1525,7 +1533,8 @@ init_spec ()\n \t\t\t    \"-lgcc_s%M\"\n #endif\n \t\t\t    ,\n-\t\t\t    \"-lgcc\");\n+\t\t\t    \"-lgcc\",\n+\t\t\t    \"-lgcc_eh\");\n \t    p += 5;\n \t    in_sep = 0;\n \t  }\n@@ -1540,7 +1549,8 @@ init_spec ()\n \t\t\t    \"-lgcc_s%M\"\n #endif\n \t\t\t    ,\n-\t\t\t    \"libgcc.a%s\");\n+\t\t\t    \"libgcc.a%s\",\n+\t\t\t    \"libgcc_eh.a%s\");\n \t    p += 10;\n \t    in_sep = 0;\n \t  }\n@@ -1565,6 +1575,12 @@ init_spec ()\n     asm_spec = obstack_finish (&obstack);\n   }\n #endif\n+#ifdef LINK_EH_SPEC\n+  /* Prepend LINK_EH_SPEC to whatever link_spec we had before.  */\n+  obstack_grow (&obstack, LINK_EH_SPEC, sizeof(LINK_EH_SPEC) - 1);\n+  obstack_grow0 (&obstack, link_spec, strlen (link_spec));\n+  link_spec = obstack_finish (&obstack);\n+#endif\n \n   specs = sl;\n }"}, {"sha": "8f9174a0f5d6e052f685a88758102d91be5cdcdd", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -97,6 +97,7 @@ done\n \n libgcc2_objs=\"\"\n libgcc2_st_objs=\"\"\n+libgcc2_eh_objs=\"\"\n \n for name in $LIB2FUNCS; do\n   for ml in $MULTILIBS; do\n@@ -200,7 +201,11 @@ for file in $LIB2ADDEH; do\n     echo $out: stmp-dirs $file\n     echo \"\t$gcc_compile\" $flags -fexceptions -c $file -o $out\n   done\n-  libgcc2_objs=\"$libgcc2_objs ${oname}${objext}\"\n+  if [ \"$SHLIB_LINK\" ]; then\n+    libgcc2_eh_objs=\"$libgcc2_eh_objs ${oname}${objext}\"\n+  else\n+    libgcc2_objs=\"$libgcc2_objs ${oname}${objext}\"\n+  fi\n done\n \n for file in $LIB2ADD_ST; do\n@@ -228,13 +233,18 @@ for ml in $MULTILIBS; do\n   flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n \n   libgcc_objs=\"\"\n+  libgcc_eh_objs=\"\"\n   for o in $libgcc1_objs; do\n     libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\"\n   done\n   for o in $libgcc2_objs; do\n     libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\"\n   done\n-  shlib_deps=\"$libgcc_objs\"\n+  for o in $libgcc2_eh_objs; do\n+    libgcc_eh_objs=\"$libgcc_eh_objs libgcc/${dir}/$o\"\n+  done\n+  libgcc_sh_objs=\"$libgcc_objs $libgcc_eh_objs\"\n+  shlib_deps=\"$libgcc_sh_objs\"\n \n   libgcc_st_objs=\"\"\n   for o in $libgcc2_st_objs; do\n@@ -244,8 +254,8 @@ for ml in $MULTILIBS; do\n   if [ \"$SHLIB_LINK\" -a \"$SHLIB_MKMAP\" -a -z \"$mapfile\" ]; then\n     mapfile=\"libgcc.map\"\n     echo \"\"\n-    echo \"${mapfile}: $SHLIB_MKMAP $SHLIB_MAPFILES $libgcc_objs\"\n-    echo '\t{ $(NM_FOR_TARGET)'\" $SHLIB_NM_FLAGS $libgcc_objs; echo %%; cat $SHLIB_MAPFILES; } | \"'$(AWK)'\" -f $SHLIB_MKMAP > \"'tmp-$@'\n+    echo \"${mapfile}: $SHLIB_MKMAP $SHLIB_MAPFILES $libgcc_sh_objs\"\n+    echo '\t{ $(NM_FOR_TARGET)'\" $SHLIB_NM_FLAGS $libgcc_sh_objs; echo %%; cat $SHLIB_MAPFILES; } | \"'$(AWK)'\" -f $SHLIB_MKMAP > \"'tmp-$@'\n     echo '\tmv tmp-$@ $@'\n   fi\n   shlib_deps=\"$shlib_deps $mapfile\"\n@@ -265,6 +275,15 @@ for ml in $MULTILIBS; do\n   echo '\telse true; fi;'\n \n   if [ \"$SHLIB_LINK\" ]; then\n+\n+    echo \"\"\n+    echo \"${dir}/libgcc_eh.a: $libgcc_eh_objs\"\n+    echo \"\t-rm -rf ${dir}/libgcc_eh.a\"\n+    echo '\t$(AR_CREATE_FOR_TARGET)' ${dir}/libgcc_eh.a $libgcc_eh_objs\n+    echo '\tif $(RANLIB_TEST_FOR_TARGET) ; then' \\\\\n+    echo '\t  $(RANLIB_FOR_TARGET)' ${dir}/libgcc_eh.a ';' \\\\\n+    echo '\telse true; fi;'\n+\n     if [ -z \"$SHLIB_MULTILIB\" ]; then\n       if [ \"$dir\" = \".\" ]; then\n \tshlib_base_name=\"libgcc_s\";\n@@ -276,7 +295,7 @@ for ml in $MULTILIBS; do\n       echo \"\t$SHLIB_LINK\" \\\n \t | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t       -e \"s%@multilib_dir@%$dir%g\" \\\n-\t       -e \"s%@shlib_objs@%$libgcc_objs%g\" \\\n+\t       -e \"s%@shlib_objs@%$libgcc_sh_objs%g\" \\\n \t       -e \"s%@shlib_base_name@%$shlib_base_name%g\" \\\n \t       -e \"s%@shlib_map_file@%$mapfile%g\"\n     elif [ \"$SHLIB_MULTILIB\" = \"$dir\" ]; then\n@@ -286,7 +305,7 @@ for ml in $MULTILIBS; do\n       echo \"\t$SHLIB_LINK\" \\\n \t | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t       -e \"s%@multilib_dir@%$dir%g\" \\\n-\t       -e \"s%@shlib_objs@%$libgcc_objs%g\" \\\n+\t       -e \"s%@shlib_objs@%$libgcc_sh_objs%g\" \\\n \t       -e \"s%@shlib_base_name@%$shlib_base_name%g\" \\\n \t       -e \"s%@shlib_map_file@%$mapfile%g\"\n     fi\n@@ -320,6 +339,7 @@ for ml in $MULTILIBS; do\n   fi\n   all=\"$all ${dir}/libgcc.a\"\n   if [ \"$SHLIB_LINK\" ]; then\n+    all=\"$all ${dir}/libgcc_eh.a\"\n     if [ -z \"$SHLIB_MULTILIB\" ]; then\n       if [ \"$dir\" = \".\" ]; then\n \tsuff=\"\";\n@@ -379,6 +399,9 @@ for ml in $MULTILIBS; do\n   echo '\t$(RANLIB_FOR_TARGET)' ${ldir}/libgcc.a\n \n   if [ \"$SHLIB_LINK\" ]; then\n+    echo '\t$(INSTALL_DATA)' ${dir}/libgcc_eh.a ${ldir}/\n+    echo '\t$(RANLIB_FOR_TARGET)' ${ldir}/libgcc_eh.a\n+\n     if [ -z \"$SHLIB_MULTILIB\" ]; then\n       if [ \"$dir\" = \".\" ]; then\n \tshlib_base_name=\"libgcc_s\";"}, {"sha": "c57986118a44773c9fb5262813f33d87c54196b7", "filename": "gcc/unwind-dw2-fde-glibc.c", "status": "added", "additions": 291, "deletions": 0, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Funwind-dw2-fde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Funwind-dw2-fde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-glibc.c?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -0,0 +1,291 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Jakub Jelinek <jakub@redhat.com>.\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/* Locate the FDE entry for a given address, using PT_GNU_EH_FRAME ELF\n+   segment and dl_iterate_phdr to avoid register/deregister calls at\n+   DSO load/unload.  */\n+\n+#include \"auto-host.h\" /* For HAVE_LD_EH_FRAME_HDR.  */\n+#include \"tconfig.h\"\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <link.h>\n+#include \"tsystem.h\"\n+#include \"dwarf2.h\"\n+#include \"unwind.h\"\n+#define NO_BASE_OF_ENCODED_VALUE\n+#include \"unwind-pe.h\"\n+#include \"unwind-dw2-fde.h\"\n+#include \"gthr.h\"\n+\n+#if defined(HAVE_LD_EH_FRAME_HDR) \\\n+    && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2) \\\n+\t|| (__GLIBC__ == 2 && __GLIBC_MINOR__ == 2 && defined(DT_CONFIG)))\n+\n+static fde * _Unwind_Find_registered_FDE (void *pc, struct dwarf_eh_bases *bases);\n+\n+#define _Unwind_Find_FDE _Unwind_Find_registered_FDE\n+#include \"unwind-dw2-fde.c\"\n+#undef _Unwind_Find_FDE\n+\n+#ifndef PT_GNU_EH_FRAME\n+#define PT_GNU_EH_FRAME (PT_LOOS + 0x474e550)\n+#endif\n+\n+struct unw_eh_callback_data\n+{\n+  _Unwind_Ptr pc;\n+  void *tbase;\n+  void *dbase;\n+  void *func;\n+  fde *ret;\n+};\n+\n+struct unw_eh_frame_hdr\n+{\n+  unsigned char version;\n+  unsigned char eh_frame_ptr_enc;\n+  unsigned char fde_count_enc;\n+  unsigned char table_enc;\n+};\n+\n+/* Like base_of_encoded_value, but take the base from a struct object\n+   instead of an _Unwind_Context.  */\n+   \n+static _Unwind_Ptr\n+base_from_cb_data (unsigned char encoding, struct unw_eh_callback_data *data)\n+{\n+  if (encoding == DW_EH_PE_omit)\n+    return 0;\n+\n+  switch (encoding & 0x70)\n+    {\n+    case DW_EH_PE_absptr:\n+    case DW_EH_PE_pcrel:\n+    case DW_EH_PE_aligned:\n+      return 0;\n+                                 \n+    case DW_EH_PE_textrel:\n+      return (_Unwind_Ptr) data->tbase;\n+    case DW_EH_PE_datarel:\n+      return (_Unwind_Ptr) data->dbase;\n+    }\n+  abort ();\n+}\n+\n+static int\n+_Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n+{\n+  struct unw_eh_callback_data *data = (struct unw_eh_callback_data *) ptr;\n+  const ElfW(Phdr) *phdr, *p_eh_frame_hdr, *p_dynamic;\n+  long n, match;\n+  _Unwind_Ptr load_base;\n+  const unsigned char *p;\n+  const struct unw_eh_frame_hdr *hdr;\n+  _Unwind_Ptr eh_frame;\n+  struct object ob;\n+\n+  /* Make sure struct dl_phdr_info is at least as big as we need.  */\n+  if (size < offsetof (struct dl_phdr_info, dlpi_phnum)\n+\t     + sizeof (info->dlpi_phnum))\n+    return -1;\n+\n+  match = 0;\n+  phdr = info->dlpi_phdr;\n+  load_base = info->dlpi_addr;\n+  p_eh_frame_hdr = NULL;\n+  p_dynamic = NULL;\n+\n+  /* See if PC falls into one of the loaded segments.  Find the eh_frame\n+     segment at the same time.  */\n+  for (n = info->dlpi_phnum; --n >= 0; phdr++)\n+    {\n+      if (phdr->p_type == PT_LOAD)\n+\t{\n+\t  _Unwind_Ptr vaddr = phdr->p_vaddr + load_base;\n+\t  if (data->pc >= vaddr && data->pc < vaddr + phdr->p_memsz)\n+\t    match = 1;\n+\t}\n+      else if (phdr->p_type == PT_GNU_EH_FRAME)\n+\tp_eh_frame_hdr = phdr;\n+      else if (phdr->p_type == PT_DYNAMIC)\n+\tp_dynamic = phdr;\n+    }\n+  if (!match || !p_eh_frame_hdr)\n+    return 0;\n+\n+  /* Read .eh_frame_hdr header.  */\n+  hdr = (const struct unw_eh_frame_hdr *)\n+\t(p_eh_frame_hdr->p_vaddr + load_base);\n+  if (hdr->version != 1)\n+    return 1;\n+\n+#ifdef CRT_GET_RFIB_DATA\n+# ifdef __i386__\n+  data->dbase = NULL;\n+  if (p_dynamic)\n+    {\n+      /* For dynamicly linked executables and shared libraries,\n+\t DT_PLTGOT is the gp value for that object.  */\n+      ElfW(Dyn) *dyn = (ElfW(Dyn) *)(p_dynamic->p_vaddr + load_base);\n+      for (; dyn->d_tag != DT_NULL ; dyn++)\n+\tif (dyn->d_tag == DT_PLTGOT)\n+\t  {\n+\t    /* On IA-32, _DYNAMIC is writable and GLIBC has relocated it.  */\n+\t    data->dbase = (void *) dyn->d_un.d_ptr;\n+\t    break;\n+\t  }\n+    }\n+# else\n+#  error What is DW_EH_PE_datarel base on this platform?\n+# endif\n+#endif\n+#ifdef CRT_GET_RFIB_TEXT\n+# error What is DW_EH_PE_textrel base on this platform?\n+#endif\n+\n+  p = read_encoded_value_with_base (hdr->eh_frame_ptr_enc,\n+\t\t\t\t    base_from_cb_data (hdr->eh_frame_ptr_enc,\n+\t\t\t\t\t\t       data),\n+\t\t\t\t    (const unsigned char *) (hdr + 1),\n+\t\t\t\t    &eh_frame);\n+\n+  /* We require here specific table encoding to speed things up.\n+     Also, DW_EH_PE_datarel here means using PT_GNU_EH_FRAME start\n+     as base, not the processor specific DW_EH_PE_datarel.  */\n+  if (hdr->fde_count_enc != DW_EH_PE_omit\n+      && hdr->table_enc == (DW_EH_PE_datarel | DW_EH_PE_sdata4))\n+    {\n+      _Unwind_Ptr fde_count;\n+\n+      p = read_encoded_value_with_base (hdr->fde_count_enc,\n+\t\t\t\t\tbase_from_cb_data (hdr->fde_count_enc,\n+\t\t\t\t\t\t\t   data),\n+\t\t\t\t\tp, &fde_count);\n+      /* Shouldn't happen.  */\n+      if (fde_count == 0)\n+\treturn 1;\n+      if ((((_Unwind_Ptr) p) & 3) == 0)\n+\t{\n+\t  struct fde_table {\n+\t    signed initial_loc __attribute__ ((mode (SI)));\n+\t    signed fde __attribute__ ((mode (SI)));\n+\t  };\n+\t  const struct fde_table *table = (const struct fde_table *) p;\n+\t  size_t lo, hi, mid;\n+\t  _Unwind_Ptr data_base = (_Unwind_Ptr) hdr;\n+\t  fde *f;\n+\t  unsigned int f_enc, f_enc_size;\n+\t  _Unwind_Ptr range;\n+\n+\t  mid = fde_count - 1;\n+\t  if (data->pc < table[0].initial_loc + data_base)\n+\t    return 1;\n+\t  else if (data->pc < table[mid].initial_loc + data_base)\n+\t    {\n+\t      lo = 0;\n+\t      hi = mid;\n+\n+\t      while (lo < hi)\n+\t\t{\n+\t\t  mid = (lo + hi) / 2;\n+\t\t  if (data->pc < table[mid].initial_loc + data_base)\n+\t\t    hi = mid;\n+\t\t  else if (data->pc >= table[mid + 1].initial_loc + data_base)\n+\t\t    lo = mid + 1;\n+\t\t  else\n+\t\t    break;\n+\t\t}\n+\n+\t      if (lo >= hi)\n+\t\t__gxx_abort ();\n+\t    }\n+\n+\t  f = (fde *) (table[mid].fde + data_base);\n+\t  f_enc = get_fde_encoding (f);\n+\t  f_enc_size = size_of_encoded_value (f_enc);\n+\t  read_encoded_value_with_base (f_enc & 0x0f, 0,\n+\t\t\t\t\t&f->pc_begin[f_enc_size], &range);\n+\t  if (data->pc < table[mid].initial_loc + data_base + range)\n+\t    data->ret = f;\n+\t  data->func = (void *) (table[mid].initial_loc + data_base);\n+\t  return 1;\n+\t}\n+    }\n+\n+  /* We have no sorted search table, so need to go the slow way.\n+     As soon as GLIBC will provide API so to notify that a library has been\n+     removed, we could cache this (and thus use search_object).  */\n+  ob.pc_begin = NULL;\n+  ob.tbase = data->tbase;\n+  ob.dbase = data->dbase;\n+  ob.u.single = (fde *) eh_frame;\n+  ob.s.i = 0;\n+  ob.s.b.mixed_encoding = 1;  /* Need to assume worst case.  */\n+  data->ret = linear_search_fdes (&ob, (fde *) eh_frame, (void *) data->pc);\n+  if (data->ret != NULL)\n+    {\n+      unsigned int encoding = get_fde_encoding (data->ret);\n+      read_encoded_value_with_base (encoding,\n+\t\t\t\t    base_from_cb_data (encoding, data),\n+\t\t\t\t    data->ret->pc_begin,\n+\t\t\t\t    (_Unwind_Ptr *)&data->func);\n+    }\n+  return 1;\n+}\n+\n+fde *\n+_Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n+{\n+  struct unw_eh_callback_data data;\n+  fde *ret;\n+\n+  ret = _Unwind_Find_registered_FDE (pc, bases);\n+  if (ret != NULL)\n+    return ret;\n+\n+  data.pc = (_Unwind_Ptr) pc;\n+  data.tbase = NULL;\n+  data.dbase = NULL;\n+  data.func = NULL;\n+  data.ret = NULL;\n+\n+  if (dl_iterate_phdr (_Unwind_IteratePhdrCallback, &data) < 0)\n+    return NULL;\n+\n+  if (data.ret)\n+    {\n+      bases->tbase = data.tbase;\n+      bases->dbase = data.dbase;\n+      bases->func = data.func;\n+    }\n+  return data.ret;\n+}\n+\n+#else\n+#include \"unwind-dw2-fde.c\"\n+#endif"}, {"sha": "29d84cee6a56938484632fb09e152867e9faaa64", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=275b60d6d894519cc11ee3cd4f8ad0ba6f92b0d3", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef _Unwind_Find_FDE\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n #include \"dwarf2.h\"\n@@ -36,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"unwind-pe.h\"\n #include \"unwind-dw2-fde.h\"\n #include \"gthr.h\"\n+#endif\n \n /* The unseen_objects list contains objects that have been registered\n    but not yet categorized in any way.  The seen_objects list has had"}]}