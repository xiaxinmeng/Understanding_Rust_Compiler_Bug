{"sha": "efe554e48b242c720f36c632c60833f8ed1c2344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlNTU0ZTQ4YjI0MmM3MjBmMzZjNjMyYzYwODMzZjhlZDFjMjM0NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-17T18:14:45Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-17T18:14:45Z"}, "message": "m68hc11-protos.h (print_operand): Delete.\n\n\t* config/m68hc11/m68hc11-protos.h (print_operand): Delete.\n\t(print_operand_address): Delete.\n\t* config/m68hc11/m68hc11.h (PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_ADDRESS): Delete.\n\t* config/m68hc11/m68hc11.c (m68hc11_print_operand_address): Make\n\tstatic.\n\t(m68hc11_print_operand): Make static.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS): Define.\n\nFrom-SVN: r160940", "tree": {"sha": "803c1463587abc57910927e1a6cbfa462f693eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/803c1463587abc57910927e1a6cbfa462f693eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe554e48b242c720f36c632c60833f8ed1c2344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe554e48b242c720f36c632c60833f8ed1c2344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe554e48b242c720f36c632c60833f8ed1c2344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe554e48b242c720f36c632c60833f8ed1c2344/comments", "author": null, "committer": null, "parents": [{"sha": "c73035c79895d565752f75d84646b9f87efd3594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73035c79895d565752f75d84646b9f87efd3594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73035c79895d565752f75d84646b9f87efd3594"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "0aceca84bf69c6e90fd010d090b84fcbe6f345c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efe554e48b242c720f36c632c60833f8ed1c2344", "patch": "@@ -1,3 +1,14 @@\n+2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/m68hc11/m68hc11-protos.h (print_operand): Delete.\n+\t(print_operand_address): Delete.\n+\t* config/m68hc11/m68hc11.h (PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_ADDRESS): Delete.\n+\t* config/m68hc11/m68hc11.c (m68hc11_print_operand_address): Make\n+\tstatic.\n+\t(m68hc11_print_operand): Make static.\n+\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\n 2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/m32r/m32r-protos.h (m32r_print_operand): Delete."}, {"sha": "d8ae8e078a9d334944b5aa4fbb703ac8efaba6df", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=efe554e48b242c720f36c632c60833f8ed1c2344", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in m68hc11.c\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2009\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n@@ -57,9 +57,6 @@ extern void m68hc11_output_swap (rtx, rtx*);\n \n extern int next_insn_test_reg (rtx, rtx);\n \n-extern void print_operand (FILE*, rtx, int);\n-extern void print_operand_address (FILE*, rtx);\n-\n extern int m68hc11_reload_operands (rtx*);\n \n extern int dead_register_here (rtx, rtx);"}, {"sha": "ad63ee8153d384f6f23318df0e33235f37bfd9c8", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=efe554e48b242c720f36c632c60833f8ed1c2344", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for code generation on Motorola 68HC11 and 68HC12.\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009 Free Software Foundation, Inc.\n+   2009, 2010 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GCC.\n@@ -78,6 +78,8 @@ static tree m68hc11_handle_page0_attribute (tree *, tree, tree, int, bool *);\n void create_regs_rtx (void);\n \n static void asm_print_register (FILE *, int);\n+static void m68hc11_print_operand (FILE *, rtx, int);\n+static void m68hc11_print_operand_address (FILE *, rtx);\n static void m68hc11_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void m68hc11_asm_out_constructor (rtx, int);\n static void m68hc11_asm_out_destructor (rtx, int);\n@@ -238,6 +240,11 @@ static const struct attribute_spec m68hc11_attribute_table[] =\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND m68hc11_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS m68hc11_print_operand_address\n+\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m68hc11_output_function_epilogue\n \n@@ -2123,8 +2130,8 @@ asm_print_register (FILE *file, int regno)\n    'T' generate the low-part temporary scratch register.  The operand is\n        ignored.  */\n \n-void\n-print_operand (FILE *file, rtx op, int letter)\n+static void\n+m68hc11_print_operand (FILE *file, rtx op, int letter)\n {\n   if (letter == 't')\n     {\n@@ -2316,8 +2323,8 @@ must_parenthesize (rtx op)\n    assembler syntax for an instruction operand that is a memory\n    reference whose address is ADDR.  ADDR is an RTL expression.  */\n \n-void\n-print_operand_address (FILE *file, rtx addr)\n+static void\n+m68hc11_print_operand_address (FILE *file, rtx addr)\n {\n   rtx base;\n   rtx offset;"}, {"sha": "aef48a6e89432254ffe3d6c6c555209838bb09bb", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe554e48b242c720f36c632c60833f8ed1c2344/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=efe554e48b242c720f36c632c60833f8ed1c2344", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n@@ -1351,17 +1351,6 @@ do {                                                                    \\\n   \"*_.frame\", \"*_.tmp\", \"*_.z\", \"*_.xy\", \"*fake clobber\",\t\\\n   SOFT_REG_NAMES, \"*sframe\", \"*ap\"}\n \n-/* Print an instruction operand X on file FILE. CODE is the code from the\n-   %-spec for printing this operand. If `%z3' was used to print operand\n-   3, then CODE is 'z'.  */\n-\n-#define PRINT_OPERAND(FILE, X, CODE) \\\n-  print_operand (FILE, X, CODE)\n-\n-/* Print a memory operand whose address is X, on file FILE.  */\n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n-  print_operand_address (FILE, ADDR)\n-\n /* This is how to output an insn to push/pop a register on the stack.\n    It need not be very fast code.  \n "}]}