{"sha": "91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmMmZhZThjYzU4ZTFiMWRhZTNiNjJlMjQwNzkwMzE5MGVkMWFmNA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-04-03T11:11:25Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-04-03T11:11:25Z"}, "message": "tree.c (decl_init_priority_insert): Don't create entry for default priority.\n\n\t* tree.c (decl_init_priority_insert): Don't create entry for\n\tdefault priority.\n\t(decl_fini_priority_insert): Ditto.\n\t(fields_compatible_p, find_compatible_field): Remove.\n\t* tree.h (fields_compatible_p, find_compatible_field): Remove.\n\t* gimple.c (gimple_compare_field_offset): Adjust block comment.\n\nFrom-SVN: r171902", "tree": {"sha": "25ab032bda972a888799a728d07c2ae2dce55dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ab032bda972a888799a728d07c2ae2dce55dec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/comments", "author": null, "committer": null, "parents": [{"sha": "da29e0700f78da1fc757ca9af99b316b236dd03b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da29e0700f78da1fc757ca9af99b316b236dd03b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da29e0700f78da1fc757ca9af99b316b236dd03b"}], "stats": {"total": 69, "additions": 17, "deletions": 52}, "files": [{"sha": "801e52bd227c4d7e51627a20cd31f13247dce95f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "patch": "@@ -1,9 +1,18 @@\n+2011-04-03  Michael Matz  <matz@suse.de>\n+\n+\t* tree.c (decl_init_priority_insert): Don't create entry for\n+\tdefault priority.\n+\t(decl_fini_priority_insert): Ditto.\n+\t(fields_compatible_p, find_compatible_field): Remove.\n+\t* tree.h (fields_compatible_p, find_compatible_field): Remove.\n+\t* gimple.c (gimple_compare_field_offset): Adjust block comment.\n+\n 2011-04-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* combine.c (try_combine): Remove useless local variable.\n \n 2011-04-03  Richard Guenther  <rguenther@suse.de>\n-            Ira Rosen  <ira.rosen@linaro.org>\n+\t    Ira Rosen  <ira.rosen@linaro.org>\n \n \t* tree-if-conv.c (memrefs_read_or_written_unconditionally): Strip all\n \tnon-variable offsets and compare the remaining bases of the two\n@@ -25,8 +34,8 @@\n \t(x86_output_mi_thunk): Likewise.\n \n 2011-04-01  Olivier Hainque  <hainque@adacore.com>\n-            Nicolas Setton  <setton@adacore.com>\n-            Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Nicolas Setton  <setton@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (dwarf_attr_name): Map DW_AT_GNAT_descriptive_type.\n \t(add_gnat_descriptive_type_attribute): New function."}, {"sha": "fe76942551a1ac4b71fc19f5de0df876dd4328ad", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "patch": "@@ -3306,8 +3306,7 @@ compare_type_names_p (tree t1, tree t2, bool for_completion_p)\n \n /* Return true if the field decls F1 and F2 are at the same offset.\n \n-   This is intended to be used on GIMPLE types only.  In order to\n-   compare GENERIC types, use fields_compatible_p instead.  */\n+   This is intended to be used on GIMPLE types only.  */\n \n bool\n gimple_compare_field_offset (tree f1, tree f2)"}, {"sha": "eec4a8b290580adfccc264a7b548e11aa1c56a5f", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "patch": "@@ -5913,6 +5913,8 @@ decl_init_priority_insert (tree decl, priority_type priority)\n   struct tree_priority_map *h;\n \n   gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));\n+  if (priority == DEFAULT_INIT_PRIORITY)\n+    return;\n   h = decl_priority_info (decl);\n   h->init = priority;\n }\n@@ -5925,6 +5927,8 @@ decl_fini_priority_insert (tree decl, priority_type priority)\n   struct tree_priority_map *h;\n \n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+  if (priority == DEFAULT_INIT_PRIORITY)\n+    return;\n   h = decl_priority_info (decl);\n   h->fini = priority;\n }\n@@ -9893,50 +9897,6 @@ needs_to_live_in_memory (const_tree t)\n \t      && aggregate_value_p (t, current_function_decl)));\n }\n \n-/* There are situations in which a language considers record types\n-   compatible which have different field lists.  Decide if two fields\n-   are compatible.  It is assumed that the parent records are compatible.  */\n-\n-bool\n-fields_compatible_p (const_tree f1, const_tree f2)\n-{\n-  if (!operand_equal_p (DECL_FIELD_BIT_OFFSET (f1),\n-\t\t\tDECL_FIELD_BIT_OFFSET (f2), OEP_ONLY_CONST))\n-    return false;\n-\n-  if (!operand_equal_p (DECL_FIELD_OFFSET (f1),\n-                        DECL_FIELD_OFFSET (f2), OEP_ONLY_CONST))\n-    return false;\n-\n-  if (!types_compatible_p (TREE_TYPE (f1), TREE_TYPE (f2)))\n-    return false;\n-\n-  return true;\n-}\n-\n-/* Locate within RECORD a field that is compatible with ORIG_FIELD.  */\n-\n-tree\n-find_compatible_field (tree record, tree orig_field)\n-{\n-  tree f;\n-\n-  for (f = TYPE_FIELDS (record); f ; f = TREE_CHAIN (f))\n-    if (TREE_CODE (f) == FIELD_DECL\n-\t&& fields_compatible_p (f, orig_field))\n-      return f;\n-\n-  /* ??? Why isn't this on the main fields list?  */\n-  f = TYPE_VFIELD (record);\n-  if (f && TREE_CODE (f) == FIELD_DECL\n-      && fields_compatible_p (f, orig_field))\n-    return f;\n-\n-  /* ??? We should abort here, but Java appears to do Bad Things\n-     with inherited fields.  */\n-  return orig_field;\n-}\n-\n /* Return value of a constant X and sign-extend it.  */\n \n HOST_WIDE_INT"}, {"sha": "b50336190f9128899607c01f3183165b2c962e72", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f2fae8cc58e1b1dae3b62e2407903190ed1af4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=91f2fae8cc58e1b1dae3b62e2407903190ed1af4", "patch": "@@ -5228,9 +5228,6 @@ extern bool subrange_type_for_debug_p (const_tree, tree *, tree *);\n extern HOST_WIDE_INT int_cst_value (const_tree);\n extern HOST_WIDEST_INT widest_int_cst_value (const_tree);\n \n-extern bool fields_compatible_p (const_tree, const_tree);\n-extern tree find_compatible_field (tree, tree);\n-\n extern tree *tree_block (tree);\n extern location_t *block_nonartificial_location (tree);\n extern location_t tree_nonartificial_location (tree);"}]}