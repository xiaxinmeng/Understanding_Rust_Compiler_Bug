{"sha": "d2bfc447e80b028f860149439e48544d967af685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiZmM0NDdlODBiMDI4Zjg2MDE0OTQzOWU0ODU0NGQ5NjdhZjY4NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-10-30T15:46:07Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-10-30T15:46:07Z"}, "message": "extend.texi (optimize): Clarify/expand attribute documentation.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (optimize): Clarify/expand attribute documentation.\n\t(target, pragma GCC optimize, pragma GCC target): Ditto.\n\nFrom-SVN: r265631", "tree": {"sha": "d685cfe3996364aae42d068d98c5b7c8ca392368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d685cfe3996364aae42d068d98c5b7c8ca392368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2bfc447e80b028f860149439e48544d967af685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bfc447e80b028f860149439e48544d967af685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2bfc447e80b028f860149439e48544d967af685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bfc447e80b028f860149439e48544d967af685/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2e0398a319ac089433f0ba3c7870e027e866c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e0398a319ac089433f0ba3c7870e027e866c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e0398a319ac089433f0ba3c7870e027e866c1d"}], "stats": {"total": 91, "additions": 57, "deletions": 34}, "files": [{"sha": "851502e5ba0c8ef09a161c8bb163208b84d39f0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bfc447e80b028f860149439e48544d967af685/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bfc447e80b028f860149439e48544d967af685/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2bfc447e80b028f860149439e48544d967af685", "patch": "@@ -1,3 +1,8 @@\n+2018-10-30  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi (optimize): Clarify/expand attribute documentation.\n+\t(target, pragma GCC optimize, pragma GCC target): Ditto.\n+\n 2018-10-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/extend.texi: Fix prototype and description of"}, {"sha": "e2b9ee11a54d827c5bb0f6e8f203a94e0e8fbabe", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 52, "deletions": 34, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bfc447e80b028f860149439e48544d967af685/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bfc447e80b028f860149439e48544d967af685/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d2bfc447e80b028f860149439e48544d967af685", "patch": "@@ -3193,21 +3193,32 @@ the standard C library can be guaranteed not to throw an exception\n with the notable exceptions of @code{qsort} and @code{bsearch} that\n take function pointer arguments.\n \n-@item optimize\n+@item optimize (@var{level}, @dots{})\n+@item optimize (@var{string}, @dots{})\n @cindex @code{optimize} function attribute\n The @code{optimize} attribute is used to specify that a function is to\n be compiled with different optimization options than specified on the\n-command line.  Arguments can either be numbers or strings.  Numbers\n-are assumed to be an optimization level.  Strings that begin with\n-@code{O} are assumed to be an optimization option, while other options\n-are assumed to be used with a @code{-f} prefix.  You can also use the\n-@samp{#pragma GCC optimize} pragma to set the optimization options\n-that affect more than one function.\n-@xref{Function Specific Option Pragmas}, for details about the\n-@samp{#pragma GCC optimize} pragma.\n-\n-This attribute should be used for debugging purposes only.  It is not\n-suitable in production code.\n+command line.  Valid arguments are constant non-negative integers and\n+strings.  Each numeric argument specifies an optimization @var{level}.\n+Each @var{string} argument consists of one or more comma-separated\n+substrings.  Each substring that begins with the letter @code{O} refers\n+to an optimization option such as @option{-O0} or @option{-Os}.  Other\n+substrings are taken as suffixes to the @code{-f} prefix jointly\n+forming the name of an optimization option.  @xref{Optimize Options}.\n+\n+@samp{#pragma GCC optimize} can be used to set optimization options\n+for more than one function.  @xref{Function Specific Option Pragmas},\n+for details about the pragma.\n+\n+Providing multiple strings as arguments separated by commas to specify\n+multiple options is equivalent to separating the option suffixes with\n+a comma (@samp{,}) within a single string.  Spaces are not permitted\n+within the strings.\n+\n+Not every optimization option that starts with the @var{-f} prefix\n+specified by the attribute necessarily has an effect on the function.\n+The @code{optimize} attribute should be used for debugging purposes only.\n+It is not suitable in production code.\n \n @item patchable_function_entry\n @cindex @code{patchable_function_entry} function attribute\n@@ -3361,17 +3372,21 @@ This attribute adds stack protection code to the function if\n flags @option{-fstack-protector}, @option{-fstack-protector-strong}\n or @option{-fstack-protector-explicit} are set.\n \n-@item target (@var{options})\n+@item target (@var{string}, @dots{})\n @cindex @code{target} function attribute\n Multiple target back ends implement the @code{target} attribute\n to specify that a function is to\n be compiled with different target options than specified on the\n-command line.  This can be used for instance to have functions\n+command line.  One or more strings can be provided as arguments.\n+Each string consists of one or more comma-separated suffixes to\n+the @code{-m} prefix jointly forming the name of a machine-dependent\n+option.  @xref{Submodel Options,,Machine-Dependent Options}.\n+\n+The @code{target} attribute can be used for instance to have a function\n compiled with a different ISA (instruction set architecture) than the\n-default.  You can also use the @samp{#pragma GCC target} pragma to set\n-more than one function to be compiled with specific target options.\n-@xref{Function Specific Option Pragmas}, for details about the\n-@samp{#pragma GCC target} pragma.\n+default.  @samp{#pragma GCC target} can be used to specify target-specific\n+options for more than one function.  @xref{Function Specific Option Pragmas},\n+for details about the pragma.\n \n For instance, on an x86, you could declare one function with the\n @code{target(\"sse4.1,arch=core2\")} attribute and another with\n@@ -3389,9 +3404,10 @@ int core2_func (void) __attribute__ ((__target__ (\"arch=core2\")));\n int sse3_func (void) __attribute__ ((__target__ (\"sse3\")));\n @end smallexample\n \n-You can either use multiple\n-strings separated by commas to specify multiple options,\n-or separate the options with a comma (@samp{,}) within a single string.\n+Providing multiple strings as arguments separated by commas to specify\n+multiple options is equivalent to separating the option suffixes with\n+a comma (@samp{,}) within a single string.  Spaces are not permitted\n+within the strings.\n \n The options supported are specific to each target; refer to @ref{x86\n Function Attributes}, @ref{PowerPC Function Attributes},\n@@ -22404,30 +22420,32 @@ push_macro} and restored by @code{#pragma pop_macro}.\n @subsection Function Specific Option Pragmas\n \n @table @code\n-@item #pragma GCC target (@var{\"string\"}...)\n+@item #pragma GCC target (@var{string}, @dots{})\n @cindex pragma GCC target\n \n-This pragma allows you to set target specific options for functions\n+This pragma allows you to set target-specific options for functions\n defined later in the source file.  One or more strings can be\n-specified.  Each function that is defined after this point is as\n-if @code{attribute((target(\"STRING\")))} was specified for that\n-function.  The parenthesis around the options is optional.\n-@xref{Function Attributes}, for more information about the\n-@code{target} attribute and the attribute syntax.\n+specified.  Each function that is defined after this point is treated\n+as if it had been declared with one @code{target(}@var{string}@code{)}\n+attribute for each @var{string} argument.  The parentheses around\n+the strings in the pragma are optional.  @xref{Function Attributes},\n+for more information about the @code{target} attribute and the attribute\n+syntax.\n \n The @code{#pragma GCC target} pragma is presently implemented for\n x86, ARM, AArch64, PowerPC, S/390, and Nios II targets only.\n \n-@item #pragma GCC optimize (@var{\"string\"}...)\n+@item #pragma GCC optimize (@var{string}, @dots{})\n @cindex pragma GCC optimize\n \n This pragma allows you to set global optimization options for functions\n defined later in the source file.  One or more strings can be\n-specified.  Each function that is defined after this point is as\n-if @code{attribute((optimize(\"STRING\")))} was specified for that\n-function.  The parenthesis around the options is optional.\n-@xref{Function Attributes}, for more information about the\n-@code{optimize} attribute and the attribute syntax.\n+specified.  Each function that is defined after this point is treated\n+as if it had been declared with one @code{optimize(}@var{string}@code{)}\n+attribute for each @var{string} argument.  The parentheses around\n+the strings in the pragma are optional.  @xref{Function Attributes},\n+for more information about the @code{optimize} attribute and the attribute\n+syntax.\n \n @item #pragma GCC push_options\n @itemx #pragma GCC pop_options"}]}