{"sha": "8899dc9bf70b193dc59dbc8e81400de22c203e8f", "node_id": "C_kwDOANBUbNoAKDg4OTlkYzliZjcwYjE5M2RjNTlkYmM4ZTgxNDAwZGUyMmMyMDNlOGY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-11T10:01:10Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-11T12:52:40Z"}, "message": "intrinsics: Add wrapping_{add, sub, mul}\n\nSince wrapping arithmetics are guaranteed in Rust, we turn on the -fwrapv and simply desugar wrapping_{add, sub, mul} to their non-checked inner operations. This is the only difference between a wrapping add and a regular addition: The regular addition will gain some checks for overflows, which are simply not used for the wrapping version.", "tree": {"sha": "d9972cf5dfca4299cfebf9f9eb4958372b3c923e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9972cf5dfca4299cfebf9f9eb4958372b3c923e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8899dc9bf70b193dc59dbc8e81400de22c203e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8899dc9bf70b193dc59dbc8e81400de22c203e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8899dc9bf70b193dc59dbc8e81400de22c203e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8899dc9bf70b193dc59dbc8e81400de22c203e8f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd"}], "stats": {"total": 111, "additions": 109, "deletions": 2}, "files": [{"sha": "06dc45797e9a39868fd2533048f5c4eca8762fd7", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=8899dc9bf70b193dc59dbc8e81400de22c203e8f", "patch": "@@ -37,6 +37,8 @@ static tree\n transmute_handler (Context *ctx, TyTy::FnType *fntype);\n static tree\n rotate_handler (Context *ctx, TyTy::FnType *fntype, tree_code op);\n+static tree\n+wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op);\n \n static inline tree\n rotate_left_handler (Context *ctx, TyTy::FnType *fntype)\n@@ -49,13 +51,32 @@ rotate_right_handler (Context *ctx, TyTy::FnType *fntype)\n   return rotate_handler (ctx, fntype, RROTATE_EXPR);\n }\n \n+static inline tree\n+wrapping_add_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return wrapping_op_handler (ctx, fntype, PLUS_EXPR);\n+}\n+static inline tree\n+wrapping_sub_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return wrapping_op_handler (ctx, fntype, MINUS_EXPR);\n+}\n+static inline tree\n+wrapping_mul_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return wrapping_op_handler (ctx, fntype, MULT_EXPR);\n+}\n+\n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::FnType *)>>\n   generic_intrinsics = {{\"offset\", &offset_handler},\n \t\t\t{\"size_of\", &sizeof_handler},\n \t\t\t{\"transmute\", &transmute_handler},\n \t\t\t{\"rotate_left\", &rotate_left_handler},\n-\t\t\t{\"rotate_right\", &rotate_right_handler}};\n+\t\t\t{\"rotate_right\", &rotate_right_handler},\n+\t\t\t{\"wrapping_add\", &wrapping_add_handler},\n+\t\t\t{\"wrapping_sub\", &wrapping_sub_handler},\n+\t\t\t{\"wrapping_mul\", &wrapping_mul_handler}};\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n \n@@ -373,5 +394,51 @@ rotate_handler (Context *ctx, TyTy::FnType *fntype, tree_code op)\n   return fndecl;\n }\n \n+/**\n+ * pub fn wrapping_{add, sub, mul}<T>(lhs: T, rhs: T) -> T;\n+ */\n+static tree\n+wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op)\n+{\n+  // wrapping_<op> intrinsics have two parameter\n+  rust_assert (fntype->get_params ().size () == 2);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  compile_fn_params (ctx, fntype, fndecl, &param_vars);\n+\n+  auto &lhs_param = param_vars.at (0);\n+  auto &rhs_param = param_vars.at (1);\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n+    return error_mark_node;\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  // BUILTIN wrapping_<op> FN BODY BEGIN\n+  auto lhs = ctx->get_backend ()->var_expression (lhs_param, Location ());\n+  auto rhs = ctx->get_backend ()->var_expression (rhs_param, Location ());\n+\n+  // Operations are always wrapping in Rust, as we have -fwrapv enabled by\n+  // default. The difference between a wrapping_{add, sub, mul} and a regular\n+  // arithmetic operation is that these intrinsics do not panic - they always\n+  // carry over.\n+  auto wrap_expr = build2 (op, TREE_TYPE (lhs), lhs, rhs);\n+\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {wrap_expr}, Location ());\n+  ctx->add_statement (return_statement);\n+  // BUILTIN wrapping_<op> FN BODY END\n+\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "ed822cc4f139fdac00d4e32d233a35c253f3f933", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=8899dc9bf70b193dc59dbc8e81400de22c203e8f", "patch": "@@ -152,8 +152,14 @@ grs_langhook_option_lang_mask (void)\n \n /* Initialize the options structure. */\n static void\n-grs_langhook_init_options_struct (struct gcc_options * /* opts */)\n+grs_langhook_init_options_struct (struct gcc_options *opts)\n {\n+  /* Operations are always wrapping in Rust, even on signed integer. This is\n+   * useful for the low level wrapping_{add, sub, mul} intrinsics, not for\n+   * regular arithmetic operations which are checked for overflow anyway using\n+   * builtins */\n+  opts->x_flag_wrapv = 1;\n+\n   // nothing yet - used by frontends to change specific options for the language\n   Rust::Session::get_instance ().init_options ();\n }"}, {"sha": "64b37085ab75d51c1c144315643d8016d2ff2b03", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs?ref=8899dc9bf70b193dc59dbc8e81400de22c203e8f", "patch": "@@ -0,0 +1,14 @@\n+extern \"rust-intrinsic\" {\n+    pub fn wrapping_add<T>(l: T, r: T) -> T;\n+}\n+\n+fn five() -> u8 {\n+    5\n+}\n+\n+fn main() -> u8 {\n+    let l = 255;\n+    let r = five();\n+\n+    unsafe { wrapping_add(l, r) - 4 }\n+}"}, {"sha": "f9990157894d19996665b96e97171a390a49bafd", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8899dc9bf70b193dc59dbc8e81400de22c203e8f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs?ref=8899dc9bf70b193dc59dbc8e81400de22c203e8f", "patch": "@@ -0,0 +1,20 @@\n+extern \"rust-intrinsic\" {\n+    pub fn wrapping_add<T>(l: T, r: T) -> T;\n+    pub fn wrapping_sub<T>(l: T, r: T) -> T;\n+    pub fn wrapping_mul<T>(l: T, r: T) -> T;\n+}\n+\n+fn five() -> u8 {\n+    5\n+}\n+\n+fn main() -> u8 {\n+    let l = 255;\n+    let r = five();\n+\n+    let ret0 = unsafe { wrapping_add(l, r) - 4 }; // 4\n+    let ret1 = unsafe { wrapping_sub(r, l) - 6 }; // 6\n+    let ret2 = unsafe { wrapping_mul(r, l) - 251 }; // 251\n+\n+    ret0 + ret1 + ret2\n+}"}]}