{"sha": "c3da495616f26855ac6b2522e8bbecd7e718074e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNkYTQ5NTYxNmYyNjg1NWFjNmIyNTIyZThiYmVjZDdlNzE4MDc0ZQ==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "m.ostapenko@samsung.com", "date": "2016-04-08T10:46:13Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2016-04-08T10:46:13Z"}, "message": "re PR sanitizer/70541 (unnoticed invalid dereference when using address sanitizer)\n\n2016-04-08  Maxim Ostapenko  <m.ostapenko@samsung.com>\n\n\tPR sanitizer/70541\n\t* asan.c (instrument_derefs): If we get unknown location, extract it\n\twith EXPR_LOCATION.\n\t(maybe_instrument_call): Instrument gimple_call's arguments if needed.\n\n\t* c-c++-common/asan/pr70541.c: New test.\n\nFrom-SVN: r234827", "tree": {"sha": "d28e1f8c16d17d15af785dbac2a8216e5da79f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d28e1f8c16d17d15af785dbac2a8216e5da79f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3da495616f26855ac6b2522e8bbecd7e718074e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3da495616f26855ac6b2522e8bbecd7e718074e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3da495616f26855ac6b2522e8bbecd7e718074e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3da495616f26855ac6b2522e8bbecd7e718074e/comments", "author": null, "committer": null, "parents": [{"sha": "9f1b833bc3f28a3000f2ce8c076a1930f44bcda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1b833bc3f28a3000f2ce8c076a1930f44bcda9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1b833bc3f28a3000f2ce8c076a1930f44bcda9"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "8e2ddf10011541f07beb492cc102fead64a1a589", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3da495616f26855ac6b2522e8bbecd7e718074e", "patch": "@@ -1,3 +1,10 @@\n+2016-04-08  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\tPR sanitizer/70541\n+\t* asan.c (instrument_derefs): If we get unknown location, extract it\n+\twith EXPR_LOCATION.\n+\t(maybe_instrument_call): Instrument gimple_call's arguments if needed.\n+\n 2016-04-08  Tom de Vries  <tom@codesourcery.com>\n \n \t* omp-low.c (lower_omp_target): Set TREE_NO_WARNING for oacc"}, {"sha": "71095fb9b1fd2107fb5b2936cbc1b24066052d93", "filename": "gcc/asan.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=c3da495616f26855ac6b2522e8bbecd7e718074e", "patch": "@@ -1766,6 +1766,8 @@ instrument_derefs (gimple_stmt_iterator *iter, tree t,\n \n   tree type, base;\n   HOST_WIDE_INT size_in_bytes;\n+  if (location == UNKNOWN_LOCATION)\n+    location = EXPR_LOCATION (t);\n \n   type = TREE_TYPE (t);\n   switch (TREE_CODE (t))\n@@ -2049,18 +2051,38 @@ maybe_instrument_call (gimple_stmt_iterator *iter)\n       gsi_insert_before (iter, g, GSI_SAME_STMT);\n     }\n \n+  bool instrumented = false;\n   if (gimple_store_p (stmt))\n     {\n       tree ref_expr = gimple_call_lhs (stmt);\n       instrument_derefs (iter, ref_expr,\n \t\t\t gimple_location (stmt),\n \t\t\t /*is_store=*/true);\n \n-      gsi_next (iter);\n-      return true;\n+      instrumented = true;\n     }\n \n-  return false;\n+  /* Walk through gimple_call arguments and check them id needed.  */\n+  unsigned args_num = gimple_call_num_args (stmt);\n+  for (unsigned i = 0; i < args_num; ++i)\n+    {\n+      tree arg = gimple_call_arg (stmt, i);\n+      /* If ARG is not a non-aggregate register variable, compiler in general\n+\t creates temporary for it and pass it as argument to gimple call.\n+\t But in some cases, e.g. when we pass by value a small structure that\n+\t fits to register, compiler can avoid extra overhead by pulling out\n+\t these temporaries.  In this case, we should check the argument.  */\n+      if (!is_gimple_reg (arg) && !is_gimple_min_invariant (arg))\n+\t{\n+\t  instrument_derefs (iter, arg,\n+\t\t\t     gimple_location (stmt),\n+\t\t\t     /*is_store=*/false);\n+\t  instrumented = true;\n+\t}\n+    }\n+  if (instrumented)\n+    gsi_next (iter);\n+  return instrumented;\n }\n \n /* Walk each instruction of all basic block and instrument those that"}, {"sha": "65c35e0c0918b9aca9cecb43c687286b37814b2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3da495616f26855ac6b2522e8bbecd7e718074e", "patch": "@@ -1,3 +1,8 @@\n+2016-04-08  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\tPR sanitizer/70541\n+\t* c-c++-common/asan/pr70541.c: New test.\n+\n 2016-04-08  Tom de Vries  <tom@codesourcery.com>\n \n \t* c-c++-common/goacc/uninit-firstprivate-clause.c: New test."}, {"sha": "b2a4bd5e079a90d591a75da4474f0b2906b78a71", "filename": "gcc/testsuite/c-c++-common/asan/pr70541.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr70541.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3da495616f26855ac6b2522e8bbecd7e718074e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr70541.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr70541.c?ref=c3da495616f26855ac6b2522e8bbecd7e718074e", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-malloc -fno-builtin-free\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+struct Simple {\n+  int value;\n+};\n+\n+int f(struct Simple simple) {\n+  return simple.value;\n+}\n+\n+int main() {\n+  struct Simple *psimple = (struct Simple *) malloc(sizeof(struct Simple));\n+  psimple->value = 42;\n+  free(psimple);\n+  printf(\"%d\\n\", f(*psimple));\n+  return 0;\n+}\n+\n+/* { dg-output \"ERROR: AddressSanitizer:? heap-use-after-free on address\\[^\\n\\r]*\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*READ of size 4 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*pr70541.c:21|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*freed by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*(interceptor_|wrap_|)free|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*pr70541.c:20|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*previously allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*(interceptor_|wrap_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*pr70541.c:18|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}]}