{"sha": "258dba8f6285d860fa57b63d1dba7b3a38ae308f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4ZGJhOGY2Mjg1ZDg2MGZhNTdiNjNkMWRiYTdiM2EzOGFlMzA4Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2005-02-18T19:35:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-02-18T19:35:37Z"}, "message": "* gimplify.c (gimplify_modify_expr_rhs) [CALL_EXPR]: Revert again.\n\nFrom-SVN: r95231", "tree": {"sha": "7d8ca8871317d292e84d56e95e3d13c3ed0b701d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d8ca8871317d292e84d56e95e3d13c3ed0b701d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/258dba8f6285d860fa57b63d1dba7b3a38ae308f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258dba8f6285d860fa57b63d1dba7b3a38ae308f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258dba8f6285d860fa57b63d1dba7b3a38ae308f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258dba8f6285d860fa57b63d1dba7b3a38ae308f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aecc0cf071f98308306003f76458fe47ecebc3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecc0cf071f98308306003f76458fe47ecebc3c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aecc0cf071f98308306003f76458fe47ecebc3c9"}], "stats": {"total": 67, "additions": 4, "deletions": 63}, "files": [{"sha": "f448cc195b8f875a6c31aebac0648de4f85202d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258dba8f6285d860fa57b63d1dba7b3a38ae308f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258dba8f6285d860fa57b63d1dba7b3a38ae308f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=258dba8f6285d860fa57b63d1dba7b3a38ae308f", "patch": "@@ -1,3 +1,7 @@\n+2005-02-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* gimplify.c (gimplify_modify_expr_rhs) [CALL_EXPR]: Revert again.\n+\n 2005-02-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm/lib1funcs.asm (FUNC_ALIAS): New macro."}, {"sha": "d461d776ee83da0072ce94c577e349ba00cc4fcd", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258dba8f6285d860fa57b63d1dba7b3a38ae308f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258dba8f6285d860fa57b63d1dba7b3a38ae308f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=258dba8f6285d860fa57b63d1dba7b3a38ae308f", "patch": "@@ -2913,69 +2913,6 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t  ret = GS_UNHANDLED;\n \tbreak;\n \n-      case CALL_EXPR:\n-\t/* For calls that return in memory, give *to_p as the CALL_EXPR's\n-\t   return slot so that we don't generate a temporary.  */\n-\tif (aggregate_value_p (*from_p, *from_p))\n-\t  {\n-\t    tree init = *from_p;\n-\t    tree fn = TREE_OPERAND (init, 0);\n-\t    tree args = TREE_OPERAND (init, 1);\n-\t    tree rettype = TREE_TYPE (TREE_TYPE (TREE_TYPE (fn)));\n-\t    tree arg = *to_p;\n-\t    tree type;\n-\n-\t    /* Only use the original target if *to_p isn't already\n-\t       addressable; if its address escapes, and the called function\n-\t       uses the NRV optimization, a conforming program could see\n-\t       *to_p change before the called function returns.  This is\n-\t       c++/19317.  */\n-\t    bool use_temp = !is_gimple_non_addressable (*to_p);\n-\n-\t    /* A CALL_EXPR with an explicit return slot argument should\n-\t       never appear on the RHS of a MODIFY_EXPR.  */\n-\t    if (CALL_EXPR_HAS_RETURN_SLOT_ADDR (*from_p))\n-\t      abort ();\n-\n-\t    if (use_temp)\n-\t      {\n-\t\targ = create_tmp_var (rettype, \"ret\");\n-\t\t*from_p = arg;\n-\t      }\n-\n-\t    type = TREE_TYPE (arg);\n-\t    /* FIXME: Mark the address as not escaping.  */\n-\t    lang_hooks.mark_addressable (arg);\n-\t    arg = build1 (ADDR_EXPR, build_pointer_type (type), arg);\n-\t    /* The return type might have different cv-quals from arg.  */\n-\t    arg = convert (build_pointer_type (rettype), arg);\n-\t    args = tree_cons (NULL_TREE, arg, args);\n-\t    init = build3 (CALL_EXPR, rettype, fn, args, NULL_TREE);\n-\t    CALL_EXPR_HAS_RETURN_SLOT_ADDR (init) = 1;\n-\t    TREE_USED (init) = 1;\n-\n-\t    if (use_temp)\n-\t      {\n-\t\tgimplify_and_add (init, pre_p);\n-\t\tret = GS_OK;\n-\t\tbreak;\n-\t      }\n-\t    else if (want_value)\n-\t      {\n-\t\tgimplify_and_add (init, pre_p);\n-\t\t*expr_p = *to_p;\n-\t\treturn GS_OK;\n-\t      }\n-\t    else\n-\t      {\n-\t\t*expr_p = init;\n-\t\treturn GS_OK;\n-\t      }\n-\t  }\n-\telse\n-\t  ret = GS_UNHANDLED;\n-\tbreak;\n-\n       default:\n \tret = GS_UNHANDLED;\n \tbreak;"}]}