{"sha": "ad323bbf943820aab97a06d318aadd003f8b978e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQzMjNiYmY5NDM4MjBhYWI5N2EwNmQzMThhYWRkMDAzZjhiOTc4ZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-06-08T17:54:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-16T09:18:05Z"}, "message": "[Ada] Ada2020: AI12-0289 Implicitly null excluding anon access\n\ngcc/ada/\n\n\t* sem_ch6.adb (Null_Exclusions_Match): New function to check\n\tthat the null exclusions match, including in the case addressed\n\tby this AI.\n\t(Check_Conformance): Remove calls to Comes_From_Source\n\twhen calling Null_Exclusions_Match. These are not\n\tneeded, as indicated by an ancient \"???\" comment.", "tree": {"sha": "e4d1e68be6199e2c03b46f59a00deeaf3cfe8af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d1e68be6199e2c03b46f59a00deeaf3cfe8af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad323bbf943820aab97a06d318aadd003f8b978e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad323bbf943820aab97a06d318aadd003f8b978e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad323bbf943820aab97a06d318aadd003f8b978e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad323bbf943820aab97a06d318aadd003f8b978e/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "cd108d8b7339dd0fc3482ca9bba231d0154ff84f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 55, "deletions": 21, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad323bbf943820aab97a06d318aadd003f8b978e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad323bbf943820aab97a06d318aadd003f8b978e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ad323bbf943820aab97a06d318aadd003f8b978e", "patch": "@@ -5605,10 +5605,11 @@ package body Sem_Ch6 is\n       --  in the message, and also provides the location for posting the\n       --  message in the absence of a specified Err_Loc location.\n \n-      function Conventions_Match\n-        (Id1 : Entity_Id;\n-         Id2 : Entity_Id) return Boolean;\n-      --  Determine whether the conventions of arbitrary entities Id1 and Id2\n+      function Conventions_Match (Id1, Id2 : Entity_Id) return Boolean;\n+      --  True if the conventions of entities Id1 and Id2 match.\n+\n+      function Null_Exclusions_Match (F1, F2 : Entity_Id) return Boolean;\n+      --  True if the null exclusions of two formals of anonymous access type\n       --  match.\n \n       -----------------------\n@@ -5699,6 +5700,50 @@ package body Sem_Ch6 is\n          end if;\n       end Conventions_Match;\n \n+      ---------------------------\n+      -- Null_Exclusions_Match --\n+      ---------------------------\n+\n+      function Null_Exclusions_Match (F1, F2 : Entity_Id) return Boolean is\n+      begin\n+         if not Is_Anonymous_Access_Type (Etype (F1))\n+           or else not Is_Anonymous_Access_Type (Etype (F2))\n+         then\n+            return True;\n+         end if;\n+\n+         --  AI12-0289-1: Case of controlling access parameter; False if the\n+         --  partial view is untagged, the full view is tagged, and no explicit\n+         --  \"not null\". Note that at this point, we're processing the package\n+         --  body, so private/full types have been swapped. The Sloc test below\n+         --  is to detect the (legal) case where F1 comes after the full type\n+         --  declaration. This part is disabled pre-2005, because \"not null\" is\n+         --  not allowed on those language versions.\n+\n+         if Ada_Version >= Ada_2005\n+           and then Is_Controlling_Formal (F1)\n+           and then not Null_Exclusion_Present (Parent (F1))\n+           and then not Null_Exclusion_Present (Parent (F2))\n+         then\n+            declare\n+               D : constant Entity_Id := Directly_Designated_Type (Etype (F1));\n+               Partial_View_Of_Desig : constant Entity_Id :=\n+                 Incomplete_Or_Partial_View (D);\n+            begin\n+               return No (Partial_View_Of_Desig)\n+                 or else Is_Tagged_Type (Partial_View_Of_Desig)\n+                 or else Sloc (D) < Sloc (F1);\n+            end;\n+\n+         --  Not a controlling parameter, or one or both views have an explicit\n+         --  \"not null\".\n+\n+         else\n+            return Null_Exclusion_Present (Parent (F1)) =\n+                   Null_Exclusion_Present (Parent (F2));\n+         end if;\n+      end Null_Exclusions_Match;\n+\n       --  Local Variables\n \n       Old_Type           : constant Entity_Id := Etype (Old_Id);\n@@ -5868,25 +5913,14 @@ package body Sem_Ch6 is\n \n             --  Null exclusion must match\n \n-            if Null_Exclusion_Present (Parent (Old_Formal))\n-                 /=\n-               Null_Exclusion_Present (Parent (New_Formal))\n-            then\n-               --  Only give error if both come from source. This should be\n-               --  investigated some time, since it should not be needed ???\n-\n-               if Comes_From_Source (Old_Formal)\n-                    and then\n-                  Comes_From_Source (New_Formal)\n-               then\n-                  Conformance_Error\n-                    (\"\\null exclusion for& does not match\", New_Formal);\n+            if not Null_Exclusions_Match (Old_Formal, New_Formal) then\n+               Conformance_Error\n+                 (\"\\null exclusion for& does not match\", New_Formal);\n \n-                  --  Mark error posted on the new formal to avoid duplicated\n-                  --  complaint about types not matching.\n+               --  Mark error posted on the new formal to avoid duplicated\n+               --  complaint about types not matching.\n \n-                  Set_Error_Posted (New_Formal);\n-               end if;\n+               Set_Error_Posted (New_Formal);\n             end if;\n          end if;\n "}]}