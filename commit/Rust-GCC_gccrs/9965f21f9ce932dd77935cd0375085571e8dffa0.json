{"sha": "9965f21f9ce932dd77935cd0375085571e8dffa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2NWYyMWY5Y2U5MzJkZDc3OTM1Y2QwMzc1MDg1NTcxZThkZmZhMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-06T21:05:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-06T21:05:44Z"}, "message": "re PR c++/47695 ([C++0X] Calling a deleted function fails twice)\n\n2011-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/47695\n\t* decl2.c (mark_used): Early return false after error or sorry.\n\t* cp-tree.h (mark_used): Adjust declaration.\n\t* semantics.c (finish_id_expression): Check mark_used return value.\n\nFrom-SVN: r181042", "tree": {"sha": "078f15895c3fe1af4a24d246903573fc9dfad9d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078f15895c3fe1af4a24d246903573fc9dfad9d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9965f21f9ce932dd77935cd0375085571e8dffa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9965f21f9ce932dd77935cd0375085571e8dffa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9965f21f9ce932dd77935cd0375085571e8dffa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9965f21f9ce932dd77935cd0375085571e8dffa0/comments", "author": null, "committer": null, "parents": [{"sha": "f25481f470c2810f6af2a7fcd76e2a0804b5f738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25481f470c2810f6af2a7fcd76e2a0804b5f738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25481f470c2810f6af2a7fcd76e2a0804b5f738"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "f374af65e26bc6ba2d49664949f4015e674e7184", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9965f21f9ce932dd77935cd0375085571e8dffa0", "patch": "@@ -1,3 +1,10 @@\n+2011-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/47695\n+\t* decl2.c (mark_used): Early return false after error or sorry.\n+\t* cp-tree.h (mark_used): Adjust declaration.\n+\t* semantics.c (finish_id_expression): Check mark_used return value.\n+\n 2011-11-05  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (cp_finish_decl): Mostly revert previous change."}, {"sha": "fd57409dcedbc5e691d3ea7d04020237a0eb99c4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9965f21f9ce932dd77935cd0375085571e8dffa0", "patch": "@@ -5049,7 +5049,7 @@ extern tree build_offset_ref_call_from_tree\t(tree, VEC(tree,gc) **);\n extern bool decl_constant_var_p\t\t\t(tree);\n extern bool decl_maybe_constant_var_p\t\t(tree);\n extern void check_default_args\t\t\t(tree);\n-extern void mark_used\t\t\t\t(tree);\n+extern bool mark_used\t\t\t\t(tree);\n extern void finish_static_data_member_decl\t(tree, tree, bool, tree, int);\n extern tree cp_build_parm_decl\t\t\t(tree, tree);\n extern tree get_guard\t\t\t\t(tree);"}, {"sha": "f4499b5a0945fabd2c04a05ca1ba10516d24719d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9965f21f9ce932dd77935cd0375085571e8dffa0", "patch": "@@ -4203,9 +4203,10 @@ possibly_inlined_p (tree decl)\n \n /* Mark DECL (either a _DECL or a BASELINK) as \"used\" in the program.\n    If DECL is a specialization or implicitly declared class member,\n-   generate the actual definition.  */\n+   generate the actual definition.  Return false if something goes\n+   wrong, true otherwise.  */\n \n-void\n+bool\n mark_used (tree decl)\n {\n   /* If DECL is a BASELINK for a single function, then treat it just\n@@ -4216,7 +4217,7 @@ mark_used (tree decl)\n     {\n       decl = BASELINK_FUNCTIONS (decl);\n       if (really_overloaded_fn (decl))\n-\treturn;\n+\treturn true;\n       decl = OVL_CURRENT (decl);\n     }\n \n@@ -4237,13 +4238,13 @@ mark_used (tree decl)\n \t\t generate it properly; see maybe_add_lambda_conv_op.  */\n \t      sorry (\"converting lambda which uses %<...%> to \"\n \t\t     \"function pointer\");\n-\t      return;\n+\t      return false;\n \t    }\n \t}\n       error (\"use of deleted function %qD\", decl);\n       if (!maybe_explain_implicit_delete (decl))\n \terror_at (DECL_SOURCE_LOCATION (decl), \"declared here\");\n-      return;\n+      return false;\n     }\n \n   /* We can only check DECL_ODR_USED on variables or functions with\n@@ -4252,20 +4253,20 @@ mark_used (tree decl)\n   if ((TREE_CODE (decl) != VAR_DECL && TREE_CODE (decl) != FUNCTION_DECL)\n       || DECL_LANG_SPECIFIC (decl) == NULL\n       || DECL_THUNK_P (decl))\n-    return;\n+    return true;\n \n   /* We only want to do this processing once.  We don't need to keep trying\n      to instantiate inline templates, because unit-at-a-time will make sure\n      we get them compiled before functions that want to inline them.  */\n   if (DECL_ODR_USED (decl))\n-    return;\n+    return true;\n \n   /* If within finish_function, defer the rest until that function\n      finishes, otherwise it might recurse.  */\n   if (defer_mark_used_calls)\n     {\n       VEC_safe_push (tree, gc, deferred_mark_used_calls, decl);\n-      return;\n+      return true;\n     }\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n@@ -4294,15 +4295,15 @@ mark_used (tree decl)\n \n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n   if (cp_unevaluated_operand != 0)\n-    return;\n+    return true;\n \n   if (processing_template_decl)\n-    return;\n+    return true;\n \n   /* Check this too in case we're within fold_non_dependent_expr.  */\n   if (DECL_TEMPLATE_INFO (decl)\n       && uses_template_parms (DECL_TI_ARGS (decl)))\n-    return;\n+    return true;\n \n   DECL_ODR_USED (decl) = 1;\n   if (DECL_CLONED_FUNCTION_P (decl))\n@@ -4380,6 +4381,8 @@ mark_used (tree decl)\n \t\t\t/*expl_inst_class_mem_p=*/false);\n       --function_depth;\n     }\n+\n+  return true;\n }\n \n #include \"gt-cp-decl2.h\""}, {"sha": "c5ced8727dcb42db3b129ee2626de9b72b2e202f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9965f21f9ce932dd77935cd0375085571e8dffa0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9965f21f9ce932dd77935cd0375085571e8dffa0", "patch": "@@ -3286,8 +3286,9 @@ finish_id_expression (tree id_expression,\n \t  if (TREE_CODE (first_fn) == TEMPLATE_DECL)\n \t    first_fn = DECL_TEMPLATE_RESULT (first_fn);\n \n-\t  if (!really_overloaded_fn (decl))\n-\t    mark_used (first_fn);\n+\t  if (!really_overloaded_fn (decl)\n+\t      && !mark_used (first_fn))\n+\t    return error_mark_node;\n \n \t  if (!template_arg_p\n \t      && TREE_CODE (first_fn) == FUNCTION_DECL"}]}