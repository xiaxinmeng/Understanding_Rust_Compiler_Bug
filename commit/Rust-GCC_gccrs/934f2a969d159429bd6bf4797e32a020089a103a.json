{"sha": "934f2a969d159429bd6bf4797e32a020089a103a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0ZjJhOTY5ZDE1OTQyOWJkNmJmNDc5N2UzMmEwMjAwODlhMTAzYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-06-27T20:53:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-27T20:53:34Z"}, "message": "i386.md (ashlti3, [...]): Expand using ix86_expand_binary_operator directly.\n\n\t* config/i386/i386.md (ashlti3, ashrti3, lshrti3): Expand using\n\tix86_expand_binary_operator directly.\n\t(*ashlti3_1): Rename from ashlti3_1.  Use nonmemory_operand predicate\n\tfor operand 2.\n\t(*ashrti3_1): Ditto.\n\t(*lshrti3_1): Ditto.\n\t(*ashlti3_2, *ashrti3_2, *lshrti3_2): Remove insn patterns.\n\t(ashlti, ashrti and lshrti splitters): Handle nonmemory operand 2\n\tusing only one splitter.  Conditionaly execute splitter before or\n\tafter peephole2 pass.\n\t(ashlti, ashrti and lshrti peephole2): Define peephole2 patterns.\n\t(x86_shld): Rename from x86_shld_1.  Compress operand 2 constraints.\n\tUse only one alternative in asm template.\n\t(x86_64_shld): Compress operand 2 constraints. Use only one alternative\n\tin asm template.\n\t(*ashldi3_cmp_rex64): Use const_1_to_63_operand operand predicate and\n\t\"J\" operand constraint for operand 2.\n\t(*ashldi3_cconly_rex64): Ditto.\n\t(*ashrdi3_cmp_rex64): Ditto.\n\t(*ashrdi3_cconly_rex64): Ditto.\n\t(*lshrdi3_cmp_rex64): Ditto.\n\t(*lshrdi3_cconly_rex64): Ditto.\n\t* config/i386/predicates.md (const_1_to_63_operand): New predicate.\n\t* config/i386/i386.md (print_operand) ['s']: Print \", \" using fputs.\n\t(split_ashr, split_ashl, split_lshr): Use gen_x86_shrd instead of\n\tgen_x86_shrd_1.\n\nFrom-SVN: r137201", "tree": {"sha": "74ddc739701c825b6c78f6743d4b1ba4362cb632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ddc739701c825b6c78f6743d4b1ba4362cb632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934f2a969d159429bd6bf4797e32a020089a103a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934f2a969d159429bd6bf4797e32a020089a103a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934f2a969d159429bd6bf4797e32a020089a103a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934f2a969d159429bd6bf4797e32a020089a103a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7235bfbb1bc521f11932a917de5ce70c69f821b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7235bfbb1bc521f11932a917de5ce70c69f821b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7235bfbb1bc521f11932a917de5ce70c69f821b"}], "stats": {"total": 270, "additions": 123, "deletions": 147}, "files": [{"sha": "de6e75b53e893b728a28c9520478c0fb9239c995", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=934f2a969d159429bd6bf4797e32a020089a103a", "patch": "@@ -1,3 +1,32 @@\n+2008-06-27 Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ashlti3, ashrti3, lshrti3): Expand using\n+\tix86_expand_binary_operator directly.\n+\t(*ashlti3_1): Rename from ashlti3_1.  Use nonmemory_operand predicate\n+\tfor operand 2.\n+\t(*ashrti3_1): Ditto.\n+\t(*lshrti3_1): Ditto.\n+\t(*ashlti3_2, *ashrti3_2, *lshrti3_2): Remove insn patterns.\n+\t(ashlti, ashrti and lshrti splitters): Handle nonmemory operand 2\n+\tusing only one splitter.  Conditionaly execute splitter before or\n+\tafter peephole2 pass.\n+\t(ashlti, ashrti and lshrti peephole2): Define peephole2 patterns.\n+\t(x86_shld): Rename from x86_shld_1.  Compress operand 2 constraints.\n+\tUse only one alternative in asm template.\n+\t(x86_64_shld): Compress operand 2 constraints. Use only one alternative\n+\tin asm template.\n+\t(*ashldi3_cmp_rex64): Use const_1_to_63_operand operand predicate and\n+\t\"J\" operand constraint for operand 2.\n+\t(*ashldi3_cconly_rex64): Ditto.\n+\t(*ashrdi3_cmp_rex64): Ditto.\n+\t(*ashrdi3_cconly_rex64): Ditto.\n+\t(*lshrdi3_cmp_rex64): Ditto.\n+\t(*lshrdi3_cconly_rex64): Ditto.\n+\t* config/i386/predicates.md (const_1_to_63_operand): New predicate.\n+\t* config/i386/i386.md (print_operand) ['s']: Print \", \" using fputs.\n+\t(split_ashr, split_ashl, split_lshr): Use gen_x86_shrd instead of\n+\tgen_x86_shrd_1.\n+\n 2008-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimplify.c (omp_is_private): Don't return true if decl"}, {"sha": "38b4477b1c37063af59eb905e65a27b77418fe48", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=934f2a969d159429bd6bf4797e32a020089a103a", "patch": "@@ -9207,7 +9207,7 @@ print_operand (FILE *file, rtx x, int code)\n \t  if (CONST_INT_P (x) || ! SHIFT_DOUBLE_OMITS_COUNT)\n \t    {\n \t      PRINT_OPERAND (file, x, 0);\n-\t      putc (',', file);\n+\t      fputs (\", \", file);\n \t    }\n \t  return;\n \n@@ -14542,7 +14542,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n \t  if (!rtx_equal_p (operands[0], operands[1]))\n \t    emit_move_insn (operands[0], operands[1]);\n \t  emit_insn ((mode == DImode\n-\t\t     ? gen_x86_shld_1\n+\t\t     ? gen_x86_shld\n \t\t     : gen_x86_64_shld) (high[0], low[0], GEN_INT (count)));\n \t  ix86_expand_ashl_const (low[0], count, mode);\n \t}\n@@ -14627,7 +14627,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n \n       (mode == DImode ? split_di : split_ti) (operands, 1, low, high);\n       emit_insn ((mode == DImode\n-\t\t  ? gen_x86_shld_1\n+\t\t  ? gen_x86_shld\n \t\t  : gen_x86_64_shld) (high[0], low[0], operands[2]));\n     }\n \n@@ -14685,7 +14685,7 @@ ix86_split_ashr (rtx *operands, rtx scratch, enum machine_mode mode)\n \t  if (!rtx_equal_p (operands[0], operands[1]))\n \t    emit_move_insn (operands[0], operands[1]);\n \t  emit_insn ((mode == DImode\n-\t\t      ? gen_x86_shrd_1\n+\t\t      ? gen_x86_shrd\n \t\t      : gen_x86_64_shrd) (low[0], high[0], GEN_INT (count)));\n \t  emit_insn ((mode == DImode\n \t\t      ? gen_ashrsi3\n@@ -14700,7 +14700,7 @@ ix86_split_ashr (rtx *operands, rtx scratch, enum machine_mode mode)\n       (mode == DImode ? split_di : split_ti) (operands, 1, low, high);\n \n       emit_insn ((mode == DImode\n-\t\t  ? gen_x86_shrd_1\n+\t\t  ? gen_x86_shrd\n \t\t  : gen_x86_64_shrd) (low[0], high[0], operands[2]));\n       emit_insn ((mode == DImode\n \t\t  ? gen_ashrsi3\n@@ -14751,7 +14751,7 @@ ix86_split_lshr (rtx *operands, rtx scratch, enum machine_mode mode)\n \t  if (!rtx_equal_p (operands[0], operands[1]))\n \t    emit_move_insn (operands[0], operands[1]);\n \t  emit_insn ((mode == DImode\n-\t\t      ? gen_x86_shrd_1\n+\t\t      ? gen_x86_shrd\n \t\t      : gen_x86_64_shrd) (low[0], high[0], GEN_INT (count)));\n \t  emit_insn ((mode == DImode\n \t\t      ? gen_lshrsi3\n@@ -14766,7 +14766,7 @@ ix86_split_lshr (rtx *operands, rtx scratch, enum machine_mode mode)\n       (mode == DImode ? split_di : split_ti) (operands, 1, low, high);\n \n       emit_insn ((mode == DImode\n-\t\t  ? gen_x86_shrd_1\n+\t\t  ? gen_x86_shrd\n \t\t  : gen_x86_64_shrd) (low[0], high[0], operands[2]));\n       emit_insn ((mode == DImode\n \t\t  ? gen_lshrsi3"}, {"sha": "36e812f33fd9d9d0de60bd533a134adaa85a8f8f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 81, "deletions": 140, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=934f2a969d159429bd6bf4797e32a020089a103a", "patch": "@@ -10849,33 +10849,14 @@\n ;; than 31.\n \n (define_expand \"ashlti3\"\n-  [(parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t\t   (ashift:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (! immediate_operand (operands[2], QImode))\n-    {\n-      emit_insn (gen_ashlti3_1 (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-  ix86_expand_binary_operator (ASHIFT, TImode, operands);\n-  DONE;\n-})\n-\n-(define_insn \"ashlti3_1\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n-\t(ashift:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"register_operand\" \"c\")))\n-   (clobber (match_scratch:DI 3 \"=&r\"))\n-   (clobber (reg:CC FLAGS_REG))]\n+  [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t(ashift:TI (match_operand:TI 1 \"reg_or_pm1_operand\" \"\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n+  \"ix86_expand_binary_operator (ASHIFT, TImode, operands); DONE;\")\n \n-;; This pattern must be defined before *ashlti3_2 to prevent\n-;; combine pass from converting sse2_ashlti3 to *ashlti3_2.\n+;; This pattern must be defined before *ashlti3_1 to prevent\n+;; combine pass from converting sse2_ashlti3 to *ashlti3_1.\n \n (define_insn \"sse2_ashlti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n@@ -10890,45 +10871,45 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*ashlti3_2\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n-\t(ashift:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"immediate_operand\" \"O\")))\n+(define_insn \"*ashlti3_1\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=&r,r\")\n+\t(ashift:TI (match_operand:TI 1 \"reg_or_pm1_operand\" \"n,0\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"Oc,Oc\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_split\n-  [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t(ashift:TI (match_operand:TI 1 \"nonmemory_operand\" \"\")\n-\t\t   (match_operand:QI 2 \"register_operand\" \"\")))\n-   (clobber (match_scratch:DI 3 \"\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n+(define_peephole2\n+  [(match_scratch:DI 3 \"r\")\n+   (parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t\t   (ashift:TI (match_operand:TI 1 \"nonmemory_operand\" \"\")\n+\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (match_dup 3)]\n+  \"TARGET_64BIT\"\n   [(const_int 0)]\n   \"ix86_split_ashl (operands, operands[3], TImode); DONE;\")\n \n (define_split\n   [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t(ashift:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))\n+\t(ashift:TI (match_operand:TI 1 \"nonmemory_operand\" \"\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n+  \"TARGET_64BIT && ((optimize > 0 && flag_peephole2)\n+\t\t    ? epilogue_completed : reload_completed)\"\n   [(const_int 0)]\n   \"ix86_split_ashl (operands, NULL_RTX, TImode); DONE;\")\n \n (define_insn \"x86_64_shld\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m,r*m\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (ashift:DI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"J,c\"))\n-\t\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r,r\")\n+\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Jc\"))\n+\t\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (minus:QI (const_int 64) (match_dup 2)))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n-  \"@\n-   shld{q}\\t{%2, %1, %0|%0, %1, %2}\n-   shld{q}\\t{%s2%1, %0|%0, %1, %2}\"\n+  \"shld{q}\\t{%s2%1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"DI\")\n@@ -11021,7 +11002,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"immediate_operand\" \"e\"))\n+\t\t     (match_operand:QI 2 \"const_1_to_63_operand\" \"J\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:DI (match_dup 1) (match_dup 2)))]\n@@ -11064,7 +11045,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"immediate_operand\" \"e\"))\n+\t\t     (match_operand:QI 2 \"const_1_to_63_operand\" \"J\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n@@ -11135,17 +11116,15 @@\n   [(const_int 0)]\n   \"ix86_split_ashl (operands, NULL_RTX, DImode); DONE;\")\n \n-(define_insn \"x86_shld_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m,r*m\")\n+(define_insn \"x86_shld\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (ashift:SI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Ic\"))\n+\t\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (minus:QI (const_int 32) (match_dup 2)))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"@\n-   shld{l}\\t{%2, %1, %0|%0, %1, %2}\n-   shld{l}\\t{%s2%1, %0|%0, %1, %2}\"\n+  \"shld{l}\\t{%s2%1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"SI\")\n@@ -11845,70 +11824,51 @@\n ;; See comment above `ashldi3' about how this works.\n \n (define_expand \"ashrti3\"\n-  [(parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t\t   (ashiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t\t\t(match_operand:QI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n+  [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t(ashiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-{\n-  if (! immediate_operand (operands[2], QImode))\n-    {\n-      emit_insn (gen_ashrti3_1 (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-  ix86_expand_binary_operator (ASHIFTRT, TImode, operands);\n-  DONE;\n-})\n+  \"ix86_expand_binary_operator (ASHIFTRT, TImode, operands); DONE;\")\n \n-(define_insn \"ashrti3_1\"\n+(define_insn \"*ashrti3_1\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"register_operand\" \"c\")))\n-   (clobber (match_scratch:DI 3 \"=&r\"))\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"Oc\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"*ashrti3_2\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n-\t(ashiftrt:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"immediate_operand\" \"O\")))\n-   (clobber (reg:CC FLAGS_REG))]\n+(define_peephole2\n+  [(match_scratch:DI 3 \"r\")\n+   (parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t\t   (ashiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n+\t\t\t        (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (match_dup 3)]\n   \"TARGET_64BIT\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n-\n-(define_split\n-  [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t(ashiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"register_operand\" \"\")))\n-   (clobber (match_scratch:DI 3 \"\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_ashr (operands, operands[3], TImode); DONE;\")\n \n (define_split\n   [(set (match_operand:TI 0 \"register_operand\" \"\")\n \t(ashiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"immediate_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n+  \"TARGET_64BIT && ((optimize > 0 && flag_peephole2)\n+\t\t    ? epilogue_completed : reload_completed)\"\n   [(const_int 0)]\n   \"ix86_split_ashr (operands, NULL_RTX, TImode); DONE;\")\n \n (define_insn \"x86_64_shrd\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m,r*m\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (ashiftrt:DI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"J,c\"))\n-\t\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r,r\")\n+\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Jc\"))\n+\t\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (minus:QI (const_int 64) (match_dup 2)))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n-  \"@\n-   shrd{q}\\t{%2, %1, %0|%0, %1, %2}\n-   shrd{q}\\t{%s2%1, %0|%0, %1, %2}\"\n+  \"shrd{q}\\t{%s2%1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"DI\")\n@@ -12010,7 +11970,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_operand\" \"n\"))\n+\t\t       (match_operand:QI 2 \"const_1_to_63_operand\" \"J\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n@@ -12026,7 +11986,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_operand\" \"n\"))\n+\t\t       (match_operand:QI 2 \"const_1_to_63_operand\" \"J\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n@@ -12070,17 +12030,15 @@\n   [(const_int 0)]\n   \"ix86_split_ashr (operands, NULL_RTX, DImode); DONE;\")\n \n-(define_insn \"x86_shrd_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m,r*m\")\n+(define_insn \"x86_shrd\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (ashiftrt:SI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Ic\"))\n+\t\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (minus:QI (const_int 32) (match_dup 2)))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"@\n-   shrd{l}\\t{%2, %1, %0|%0, %1, %2}\n-   shrd{l}\\t{%s2%1, %0|%0, %1, %2}\"\n+  \"shrd{l}\\t{%s2%1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"pent_pair\" \"np\")\n@@ -12540,33 +12498,14 @@\n ;; See comment above `ashldi3' about how this works.\n \n (define_expand \"lshrti3\"\n-  [(parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t\t   (lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t\t        (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (! immediate_operand (operands[2], QImode))\n-    {\n-      emit_insn (gen_lshrti3_1 (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-  ix86_expand_binary_operator (LSHIFTRT, TImode, operands);\n-  DONE;\n-})\n-\n-(define_insn \"lshrti3_1\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n-\t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"register_operand\" \"c\")))\n-   (clobber (match_scratch:DI 3 \"=&r\"))\n-   (clobber (reg:CC FLAGS_REG))]\n+  [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n+  \"ix86_expand_binary_operator (LSHIFTRT, TImode, operands); DONE;\")\n \n-;; This pattern must be defined before *lshrti3_2 to prevent\n-;; combine pass from converting sse2_lshrti3 to *lshrti3_2.\n+;; This pattern must be defined before *lshrti3_1 to prevent\n+;; combine pass from converting sse2_lshrti3 to *lshrti3_1.\n \n (define_insn \"sse2_lshrti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n@@ -12581,31 +12520,33 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*lshrti3_2\"\n+(define_insn \"*lshrti3_1\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"immediate_operand\" \"O\")))\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"Oc\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_split\n-  [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"register_operand\" \"\")))\n-   (clobber (match_scratch:DI 3 \"\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n+(define_peephole2\n+  [(match_scratch:DI 3 \"r\")\n+   (parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t\t   (lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n+\t\t\t        (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (match_dup 3)]\n+  \"TARGET_64BIT\"\n   [(const_int 0)]\n   \"ix86_split_lshr (operands, operands[3], TImode); DONE;\")\n \n (define_split\n   [(set (match_operand:TI 0 \"register_operand\" \"\")\n \t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"immediate_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n+  \"!TARGET_64BIT && ((optimize > 0 && flag_peephole2)\n+\t\t     ? epilogue_completed : reload_completed)\"\n   [(const_int 0)]\n   \"ix86_split_lshr (operands, NULL_RTX, TImode); DONE;\")\n \n@@ -12687,7 +12628,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_operand\" \"e\"))\n+\t\t       (match_operand:QI 2 \"const_1_to_63_operand\" \"J\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n@@ -12703,7 +12644,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_operand\" \"e\"))\n+\t\t       (match_operand:QI 2 \"const_1_to_63_operand\" \"J\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT"}, {"sha": "f36c6d4cc4af44f07f0320fe0681e177df9bbc7b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f2a969d159429bd6bf4797e32a020089a103a/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=934f2a969d159429bd6bf4797e32a020089a103a", "patch": "@@ -629,6 +629,12 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 1, 31)\")))\n \n+;; Return nonzero if OP is CONST_INT >= 1 and <= 63 (a valid operand\n+;; for 64bit shift & compare patterns, as shifting by 0 does not change flags).\n+(define_predicate \"const_1_to_63_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 63)\")))\n+\n ;; Match 2 or 3.\n (define_predicate \"const_2_to_3_operand\"\n   (and (match_code \"const_int\")"}]}