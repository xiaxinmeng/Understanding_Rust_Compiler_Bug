{"sha": "38285dd71996a0020d3bd24fb0c366e8859368af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyODVkZDcxOTk2YTAwMjBkM2JkMjRmYjBjMzY2ZTg4NTkzNjhhZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-01-08T06:36:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-01-08T06:36:10Z"}, "message": "PR c++/78948 - instantiation from discarded statement\n\n\tPR c++/78948 - instantiation from discarded statement\n\t* parser.h (struct cp_parser): Remove in_discarded_stmt field.\n\t* cp-tree.h (in_discarded_stmt): Declare it.\n\t(struct saved_scope): Add discarded_stmt bitfield.\n\t(in_discarded_stmt): New macro.\n\t* decl2.c (mark_used): Check it.\n\t* parser.c (cp_parser_selection_statement): Adjust.\n\t(cp_parser_jump_statement): Adjust.\n\nFrom-SVN: r244206", "tree": {"sha": "602aa0c8a01de98b3ea3c63aa538579a42858263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602aa0c8a01de98b3ea3c63aa538579a42858263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38285dd71996a0020d3bd24fb0c366e8859368af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38285dd71996a0020d3bd24fb0c366e8859368af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38285dd71996a0020d3bd24fb0c366e8859368af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38285dd71996a0020d3bd24fb0c366e8859368af/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3e50bc4e45a3429b8a97bee03dd967cf0c7311f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e50bc4e45a3429b8a97bee03dd967cf0c7311f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e50bc4e45a3429b8a97bee03dd967cf0c7311f"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "aa1fd0c03c8bb51097fef8129c6031479dadd48e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38285dd71996a0020d3bd24fb0c366e8859368af", "patch": "@@ -1,3 +1,14 @@\n+2017-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/78948 - instantiation from discarded statement\n+\t* parser.h (struct cp_parser): Remove in_discarded_stmt field.\n+\t* cp-tree.h (in_discarded_stmt): Declare it.\n+\t(struct saved_scope): Add discarded_stmt bitfield.\n+\t(in_discarded_stmt): New macro.\n+\t* decl2.c (mark_used): Check it.\n+\t* parser.c (cp_parser_selection_statement): Adjust.\n+\t(cp_parser_jump_statement): Adjust.\n+\n 2017-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/78931"}, {"sha": "24de3462bb7711ba0880038e627561bc01a32c6d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=38285dd71996a0020d3bd24fb0c366e8859368af", "patch": "@@ -1281,6 +1281,10 @@ struct GTY(()) saved_scope {\n   BOOL_BITFIELD x_processing_explicit_instantiation : 1;\n   BOOL_BITFIELD need_pop_function_context : 1;\n \n+/* Nonzero if we are parsing the discarded statement of a constexpr\n+   if-statement.  */\n+  BOOL_BITFIELD discarded_stmt : 1;\n+\n   int unevaluated_operand;\n   int inhibit_evaluation_warnings;\n   int noexcept_operand;\n@@ -1341,6 +1345,8 @@ extern GTY(()) struct saved_scope *scope_chain;\n #define processing_specialization scope_chain->x_processing_specialization\n #define processing_explicit_instantiation scope_chain->x_processing_explicit_instantiation\n \n+#define in_discarded_stmt scope_chain->discarded_stmt\n+\n /* RAII sentinel to handle clearing processing_template_decl and restoring\n    it when done.  */\n "}, {"sha": "435f51fe5644f9360c0123d349fdda9a19ab9aee", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=38285dd71996a0020d3bd24fb0c366e8859368af", "patch": "@@ -5112,7 +5112,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n     }\n \n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n-  if (cp_unevaluated_operand != 0)\n+  if (cp_unevaluated_operand || in_discarded_stmt)\n     return true;\n \n   DECL_ODR_USED (decl) = 1;"}, {"sha": "e8c06424e29f515c0aeca26d017025bdd476904d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=38285dd71996a0020d3bd24fb0c366e8859368af", "patch": "@@ -11147,12 +11147,12 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \n \t    /* Outside a template, the non-selected branch of a constexpr\n \t       if is a 'discarded statement', i.e. unevaluated.  */\n-\t    bool was_discarded = parser->in_discarded_stmt;\n+\t    bool was_discarded = in_discarded_stmt;\n \t    bool discard_then = (cx && !processing_template_decl\n \t\t\t\t && integer_zerop (condition));\n \t    if (discard_then)\n \t      {\n-\t\tparser->in_discarded_stmt = true;\n+\t\tin_discarded_stmt = true;\n \t\t++c_inhibit_evaluation_warnings;\n \t      }\n \n@@ -11166,7 +11166,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    if (discard_then)\n \t      {\n \t\tTHEN_CLAUSE (statement) = NULL_TREE;\n-\t\tparser->in_discarded_stmt = was_discarded;\n+\t\tin_discarded_stmt = was_discarded;\n \t\t--c_inhibit_evaluation_warnings;\n \t      }\n \n@@ -11178,7 +11178,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\t\t\t     && integer_nonzerop (condition));\n \t\tif (discard_else)\n \t\t  {\n-\t\t    parser->in_discarded_stmt = true;\n+\t\t    in_discarded_stmt = true;\n \t\t    ++c_inhibit_evaluation_warnings;\n \t\t  }\n \n@@ -11235,7 +11235,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\tif (discard_else)\n \t\t  {\n \t\t    ELSE_CLAUSE (statement) = NULL_TREE;\n-\t\t    parser->in_discarded_stmt = was_discarded;\n+\t\t    in_discarded_stmt = was_discarded;\n \t\t    --c_inhibit_evaluation_warnings;\n \t\t  }\n \t      }\n@@ -12143,7 +12143,7 @@ cp_parser_jump_statement (cp_parser* parser)\n \t     expression.  */\n \t  expr = NULL_TREE;\n \t/* Build the return-statement.  */\n-\tif (current_function_auto_return_pattern && parser->in_discarded_stmt)\n+\tif (current_function_auto_return_pattern && in_discarded_stmt)\n \t  /* Don't deduce from a discarded return statement.  */;\n \telse\n \t  statement = finish_return_stmt (expr);"}, {"sha": "0994e1e7f4fc88150d61118190cfe54ace9180fe", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=38285dd71996a0020d3bd24fb0c366e8859368af", "patch": "@@ -336,10 +336,6 @@ struct GTY(()) cp_parser {\n      a local class.  */\n   bool in_function_body;\n \n-  /* TRUE if we are parsing a C++17 discarded statement (the non-taken branch\n-     of an if constexpr).  */\n-  bool in_discarded_stmt;\n-\n   /* Nonzero if we're processing a __transaction_atomic or\n      __transaction_relaxed statement.  */\n   unsigned char in_transaction;"}, {"sha": "64de53f06035ce3562dc09261d8ad0d1d8fe6a15", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if10.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if10.C?ref=38285dd71996a0020d3bd24fb0c366e8859368af", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/79848\n+// { dg-options -std=c++1z }\n+\n+template <int T>\n+void sizeof_mismatch()\n+{\n+    static_assert(T == 0, \"sizeof mismatch\");\n+}\n+\n+int main()\n+{\n+  if constexpr(sizeof(long long) == sizeof(char*))\n+    ;\n+  else\n+    sizeof_mismatch<sizeof(long long)>();\n+}"}, {"sha": "1c6247e0e35ecd6fe8b9965983d6154cdeb32126", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if11.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38285dd71996a0020d3bd24fb0c366e8859368af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if11.C?ref=38285dd71996a0020d3bd24fb0c366e8859368af", "patch": "@@ -0,0 +1,16 @@\n+// Test that discarded statements differ from unevaluated operands in some\n+// ways.\n+// { dg-options -std=c++1z }\n+\n+struct A { int i; };\n+\n+int main()\n+{\n+  if constexpr(true)\n+    ;\n+  else\n+    {\n+      []{}();\n+      A::i;\t\t\t// { dg-error \"non-static\" }\n+    }\n+}"}]}