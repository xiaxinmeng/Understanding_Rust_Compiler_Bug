{"sha": "922e18828a123733841dd652f8a78bfd13ac9856", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyZTE4ODI4YTEyMzczMzg0MWRkNjUyZjhhNzhiZmQxM2FjOTg1Ng==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-06-26T13:11:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-06-26T13:11:04Z"}, "message": "gcc.c (n_switches_alloc, [...]): New.\n\n\t* gcc.c (n_switches_alloc, n_infiles_alloc, alloc_infile,\n\tadd_infile, alloc_switch): New.\n\t(process_command): Remove variable lang_n_infiles.  Process\n\toptions in a single pass.  Use new functions for allocating\n\tinfiles and switches arrays.  Properly skip operands of\n\t-Xpreprocessor and -Xassembler.\n\ntestsuite:\n\t* gcc.dg/opts-3.c: New test.\n\nFrom-SVN: r161430", "tree": {"sha": "69e32efa392858583e2001434b63b709abf0b5c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e32efa392858583e2001434b63b709abf0b5c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/922e18828a123733841dd652f8a78bfd13ac9856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922e18828a123733841dd652f8a78bfd13ac9856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922e18828a123733841dd652f8a78bfd13ac9856", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922e18828a123733841dd652f8a78bfd13ac9856/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb56814562a062c227b30adf8f4fb19df9725f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb56814562a062c227b30adf8f4fb19df9725f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb56814562a062c227b30adf8f4fb19df9725f9"}], "stats": {"total": 525, "additions": 244, "deletions": 281}, "files": [{"sha": "45cffd9549e44d773014f844e44ed3ed774d09a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=922e18828a123733841dd652f8a78bfd13ac9856", "patch": "@@ -1,3 +1,12 @@\n+2010-06-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.c (n_switches_alloc, n_infiles_alloc, alloc_infile,\n+\tadd_infile, alloc_switch): New.\n+\t(process_command): Remove variable lang_n_infiles.  Process\n+\toptions in a single pass.  Use new functions for allocating\n+\tinfiles and switches arrays.  Properly skip operands of\n+\t-Xpreprocessor and -Xassembler.\n+\n 2010-06-26  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/44671"}, {"sha": "7376a774180d53faf77e42240cae7d99a142283f", "filename": "gcc/gcc.c", "status": "modified", "additions": 224, "deletions": 281, "changes": 505, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=922e18828a123733841dd652f8a78bfd13ac9856", "patch": "@@ -3251,6 +3251,8 @@ static struct switchstr *switches;\n \n static int n_switches;\n \n+static int n_switches_alloc;\n+\n /* Set to zero if -fcompare-debug is disabled, positive if it's\n    enabled and we're running the first compilation, negative if it's\n    enabled and we're running the second compilation.  For most of the\n@@ -3296,6 +3298,8 @@ static struct infile *infiles;\n \n int n_infiles;\n \n+static int n_infiles_alloc;\n+\n /* True if multiple input files are being compiled to a single\n    assembly file.  */\n \n@@ -3480,6 +3484,51 @@ add_linker_option (const char *option, int len)\n   linker_options [n_linker_options - 1] = save_string (option, len);\n }\n \f\n+/* Allocate space for an input file in infiles.  */\n+\n+static void\n+alloc_infile (void)\n+{\n+  if (n_infiles_alloc == 0)\n+    {\n+      n_infiles_alloc = 16;\n+      infiles = XNEWVEC (struct infile, n_infiles_alloc);\n+    }\n+  else if (n_infiles_alloc == n_infiles)\n+    {\n+      n_infiles_alloc *= 2;\n+      infiles = XRESIZEVEC (struct infile, infiles, n_infiles_alloc);\n+    }\n+}\n+\n+/* Store an input file with the given NAME and LANGUAGE in\n+   infiles.  */\n+\n+static void\n+add_infile (const char *name, const char *language)\n+{\n+  alloc_infile ();\n+  infiles[n_infiles].name = name;\n+  infiles[n_infiles++].language = language;\n+}\n+\n+/* Allocate space for a switch in switches.  */\n+\n+static void\n+alloc_switch (void)\n+{\n+  if (n_switches_alloc == 0)\n+    {\n+      n_switches_alloc = 16;\n+      switches = XNEWVEC (struct switchstr, n_switches_alloc);\n+    }\n+  else if (n_switches_alloc == n_switches)\n+    {\n+      n_switches_alloc *= 2;\n+      switches = XRESIZEVEC (struct switchstr, switches, n_switches_alloc);\n+    }\n+}\n+\n /* Create the vector `switches' and its contents.\n    Store its length in `n_switches'.  */\n \n@@ -3491,7 +3540,6 @@ process_command (int argc, const char **argv)\n   char *temp1;\n   const char *spec_lang = 0;\n   int last_language_n_infiles;\n-  int lang_n_infiles = 0;\n   const char *tooldir_prefix;\n   char *(*get_relative_prefix) (const char *, const char *,\n \t\t\t\tconst char *) = NULL;\n@@ -3705,12 +3753,22 @@ process_command (int argc, const char **argv)\n \t}\n     }\n \n-  /* Scan argv twice.  Here, the first time, just count how many switches\n-     there will be in their vector, and how many input files in theirs.\n-     Here we also parse the switches that cc itself uses (e.g. -v).  */\n+  /* Process the options and store input files and switches in their\n+     vectors.  */\n+\n+  last_language_n_infiles = -1;\n \n   for (i = 1; i < argc; i++)\n     {\n+      const char *p = NULL;\n+      int c = 0;\n+\n+      if (argv[i][0] == '-' && argv[i][1] != 0)\n+\t{\n+\t  p = &argv[i][1];\n+\t  c = *p;\n+\t}\n+\n       if (! strcmp (argv[i], \"-dumpspecs\"))\n \t{\n \t  struct spec_list *sl;\n@@ -3736,59 +3794,50 @@ process_command (int argc, const char **argv)\n \t  /* translate_options () has turned --version into -fversion.  */\n \t  print_version = 1;\n \n-\t  /* We will be passing a dummy file on to the sub-processes.  */\n-\t  n_infiles++;\n-\t  n_switches++;\n-\n \t  /* CPP driver cannot obtain switch from cc1_options.  */\n \t  if (is_cpp_driver)\n \t    add_preprocessor_option (\"--version\", strlen (\"--version\"));\n \t  add_assembler_option (\"--version\", strlen (\"--version\"));\n \t  add_linker_option (\"--version\", strlen (\"--version\"));\n+\n+\t  goto normal_switch;\n \t}\n       else if (strcmp (argv[i], \"-fhelp\") == 0)\n \t{\n \t  /* translate_options () has turned --help into -fhelp.  */\n \t  print_help_list = 1;\n \n-\t  /* We will be passing a dummy file on to the sub-processes.  */\n-\t  n_infiles++;\n-\t  n_switches++;\n-\n \t  /* CPP driver cannot obtain switch from cc1_options.  */\n \t  if (is_cpp_driver)\n \t    add_preprocessor_option (\"--help\", 6);\n \t  add_assembler_option (\"--help\", 6);\n \t  add_linker_option (\"--help\", 6);\n+\n+\t  goto normal_switch;\n \t}\n       else if (strncmp (argv[i], \"-fhelp=\", 7) == 0)\n \t{\n \t  /* translate_options () has turned --help into -fhelp.  */\n \t  print_subprocess_help = 2;\n \n-\t  /* We will be passing a dummy file on to the sub-processes.  */\n-\t  n_infiles++;\n-\t  n_switches++;\n+\t  goto normal_switch;\n \t}\n       else if (strcmp (argv[i], \"-ftarget-help\") == 0)\n \t{\n \t  /* translate_options() has turned --target-help into -ftarget-help.  */\n \t  print_subprocess_help = 1;\n \n-\t  /* We will be passing a dummy file on to the sub-processes.  */\n-\t  n_infiles++;\n-\t  n_switches++;\n-\n \t  /* CPP driver cannot obtain switch from cc1_options.  */\n \t  if (is_cpp_driver)\n \t    add_preprocessor_option (\"--target-help\", 13);\n \t  add_assembler_option (\"--target-help\", 13);\n \t  add_linker_option (\"--target-help\", 13);\n+\n+\t  goto normal_switch;\n \t}\n       else if (! strcmp (argv[i], \"-pass-exit-codes\"))\n \t{\n \t  pass_exit_codes = 1;\n-\t  n_switches++;\n \t}\n       else if (! strcmp (argv[i], \"-print-search-dirs\"))\n \tprint_search_dirs = 1;\n@@ -3811,16 +3860,18 @@ process_command (int argc, const char **argv)\n       else if (! strcmp (argv[i], \"-fcompare-debug-second\"))\n \t{\n \t  compare_debug_second = 1;\n-\t  n_switches++;\n+\t  goto normal_switch;\n \t}\n       else if (! strcmp (argv[i], \"-fno-compare-debug\"))\n \t{\n \t  argv[i] = \"-fcompare-debug=\";\n+\t  p = &argv[i][1];\n \t  goto compare_debug_with_arg;\n \t}\n       else if (! strcmp (argv[i], \"-fcompare-debug\"))\n \t{\n \t  argv[i] = \"-fcompare-debug=-gtoggle\";\n+\t  p = &argv[i][1];\n \t  goto compare_debug_with_arg;\n \t}\n #define OPT \"-fcompare-debug=\"\n@@ -3838,7 +3889,7 @@ process_command (int argc, const char **argv)\n \t    compare_debug_opt = NULL;\n \t  else\n \t    compare_debug_opt = opt;\n-\t  n_switches++;\n+\t  goto normal_switch;\n \t}\n       else if (! strncmp (argv[i], \"-Wa,\", 4))\n \t{\n@@ -3876,17 +3927,24 @@ process_command (int argc, const char **argv)\n \t}\n       else if (strncmp (argv[i], \"-Wl,\", 4) == 0)\n \t{\n-\t  int j;\n+\t  int prev, j;\n \t  /* Split the argument at commas.  */\n-\t  for (j = 3; argv[i][j]; j++)\n-\t    n_infiles += (argv[i][j] == ',');\n+\t  prev = 4;\n+\t  for (j = 4; argv[i][j]; j++)\n+\t    if (argv[i][j] == ',')\n+\t      {\n+\t\tadd_infile (save_string (argv[i] + prev, j - prev), \"*\");\n+\t\tprev = j + 1;\n+\t      }\n+\t  /* Record the part after the last comma.  */\n+\t  add_infile (argv[i] + prev, \"*\");\n \t}\n       else if (strcmp (argv[i], \"-Xlinker\") == 0)\n \t{\n \t  if (i + 1 == argc)\n \t    fatal_error (\"argument to %<-Xlinker%> is missing\");\n \n-\t  n_infiles++;\n+\t  add_infile (argv[i+1], \"*\");\n \t  i++;\n \t}\n       else if (strcmp (argv[i], \"-Xpreprocessor\") == 0)\n@@ -3895,47 +3953,53 @@ process_command (int argc, const char **argv)\n \t    fatal_error (\"argument to %<-Xpreprocessor%> is missing\");\n \n \t  add_preprocessor_option (argv[i+1], strlen (argv[i+1]));\n+\t  i++;\n \t}\n       else if (strcmp (argv[i], \"-Xassembler\") == 0)\n \t{\n \t  if (i + 1 == argc)\n \t    fatal_error (\"argument to %<-Xassembler%> is missing\");\n \n \t  add_assembler_option (argv[i+1], strlen (argv[i+1]));\n+\t  i++;\n \t}\n       else if (strcmp (argv[i], \"-l\") == 0)\n \t{\n \t  if (i + 1 == argc)\n \t    fatal_error (\"argument to %<-l%> is missing\");\n \n-\t  n_infiles++;\n+\t  /* POSIX allows separation of -l and the lib arg;\n+\t     canonicalize by concatenating -l with its arg */\n+\t  add_infile (concat (\"-l\", argv[i + 1], NULL), \"*\");\n \t  i++;\n \t}\n       else if (strncmp (argv[i], \"-l\", 2) == 0)\n-\tn_infiles++;\n+\t{\n+\t  add_infile (argv[i], \"*\");\n+\t}\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n \t{\n \t  save_temps_flag = SAVE_TEMPS_CWD;\n-\t  n_switches++;\n+\t  goto normal_switch;\n \t}\n       else if (strncmp (argv[i], \"-save-temps=\", 12) == 0)\n \t{\n-\t  n_switches++;\n \t  if (strcmp (argv[i]+12, \"cwd\") == 0)\n \t    save_temps_flag = SAVE_TEMPS_CWD;\n \t  else if (strcmp (argv[i]+12, \"obj\") == 0\n \t\t   || strcmp (argv[i]+12, \"object\") == 0)\n \t    save_temps_flag = SAVE_TEMPS_OBJ;\n \t  else\n \t    fatal_error (\"%qs is an unknown -save-temps option\", argv[i]);\n+\t  goto normal_switch;\n \t}\n       else if (strcmp (argv[i], \"-no-canonical-prefixes\") == 0)\n \t/* Already handled as a special case, so ignored here.  */\n \t;\n       else if (strcmp (argv[i], \"-combine\") == 0)\n \t{\n \t  combine_flag = 1;\n-\t  n_switches++;\n+\t  goto normal_switch;\n \t}\n       else if (strcmp (argv[i], \"-specs\") == 0)\n \t{\n@@ -3965,6 +4029,11 @@ process_command (int argc, const char **argv)\n \t    user_specs_head = user;\n \t  user_specs_tail = user;\n \t}\n+      else if (! strncmp (argv[i], \"--sysroot=\", strlen (\"--sysroot=\")))\n+\t{\n+\t  target_system_root = argv[i] + strlen (\"--sysroot=\");\n+\t  target_system_root_changed = 1;\n+\t}\n       else if (strcmp (argv[i], \"-time\") == 0)\n \treport_times = 1;\n       else if (strncmp (argv[i], \"-time=\", sizeof (\"-time=\") - 1) == 0)\n@@ -3978,16 +4047,14 @@ process_command (int argc, const char **argv)\n \t  /* -pipe has to go into the switches array as well as\n \t     setting a flag.  */\n \t  use_pipes = 1;\n-\t  n_switches++;\n+\t  goto normal_switch;\n \t}\n       else if (strcmp (argv[i], \"-wrapper\") == 0)\n         {\n \t  if (++i >= argc)\n \t    fatal_error (\"argument to %<-wrapper%> is missing\");\n \n           wrapper_string = argv[i];\n-\t  n_switches++;\n-\t  n_switches++;\n         }\n       else if (strcmp (argv[i], \"-###\") == 0)\n \t{\n@@ -4000,9 +4067,6 @@ process_command (int argc, const char **argv)\n \t}\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n-\t  const char *p = &argv[i][1];\n-\t  int c = *p;\n-\n \t  switch (c)\n \t    {\n \t    case 'B':\n@@ -4013,7 +4077,7 @@ process_command (int argc, const char **argv)\n \t\tif (p[1] == 0 && i + 1 == argc)\n \t\t  fatal_error (\"argument to %<-B%> is missing\");\n \t\tif (p[1] == 0)\n-\t\t  value = argv[++i];\n+\t\t  value = argv[i + 1];\n \t\telse\n \t\t  value = p + 1;\n \n@@ -4042,28 +4106,38 @@ process_command (int argc, const char **argv)\n \t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n \t\tadd_prefix (&include_prefixes, value, NULL,\n \t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n-\t\tn_switches++;\n \t      }\n-\t      break;\n+\t      goto normal_switch;\n \n \t    case 'v':\t/* Print our subcommands and print versions.  */\n-\t      n_switches++;\n \t      /* If they do anything other than exactly `-v', don't set\n \t\t verbose_flag; rather, continue on to give the error.  */\n \t      if (p[1] != 0)\n \t\tbreak;\n \t      verbose_flag++;\n+\t      goto normal_switch;\n+\n+\t    case 'x':\n+\t      if (p[1] == 0 && i + 1 == argc)\n+\t\tfatal_error (\"argument to %<-x%> is missing\");\n+\t      if (p[1] == 0)\n+\t\tspec_lang = argv[++i];\n+\t      else\n+\t\tspec_lang = p + 1;\n+\t      if (! strcmp (spec_lang, \"none\"))\n+\t\t/* Suppress the warning if -xnone comes after the last input\n+\t\t   file, because alternate command interfaces like g++ might\n+\t\t   find it useful to place -xnone after each input file.  */\n+\t\tspec_lang = 0;\n+\t      else\n+\t\tlast_language_n_infiles = n_infiles;\n \t      break;\n \n \t    case 'S':\n \t    case 'c':\n \t    case 'E':\n \t      if (p[1] == 0)\n-\t\t{\n-\t\t  have_c = 1;\n-\t\t  n_switches++;\n-\t\t  break;\n-\t\t}\n+\t\thave_c = 1;\n \t      goto normal_switch;\n \n \t    case 'o':\n@@ -4101,7 +4175,10 @@ process_command (int argc, const char **argv)\n \t      if (p[1] == 0)\n \t\targv[i + 1] = convert_filename (argv[i + 1], ! have_c, 0);\n \t      else\n-\t\targv[i] = convert_filename (argv[i], ! have_c, 0);\n+\t\t{\n+\t\t  argv[i] = convert_filename (argv[i], ! have_c, 0);\n+\t\t  p = &argv[i][1];\n+\t\t}\n #endif\n \t      /* Save the output name in case -save-temps=obj was used.  */\n \t      if ((p[1] == 0) && argv[i + 1])\n@@ -4113,18 +4190,105 @@ process_command (int argc, const char **argv)\n \t    default:\n \t    normal_switch:\n \n-\t      n_switches++;\n+\t      alloc_switch ();\n+\t      switches[n_switches].part1 = p;\n+\t      /* Deal with option arguments in separate argv elements.  */\n+\t      if ((SWITCH_TAKES_ARG (c) > (p[1] != 0))\n+\t\t  || WORD_SWITCH_TAKES_ARG (p))\n+\t\t{\n+\t\t  int j = 0;\n+\t\t  int n_args = WORD_SWITCH_TAKES_ARG (p);\n \n-\t      if (SWITCH_TAKES_ARG (c) > (p[1] != 0))\n-\t\ti += SWITCH_TAKES_ARG (c) - (p[1] != 0);\n-\t      else if (WORD_SWITCH_TAKES_ARG (p))\n-\t\ti += WORD_SWITCH_TAKES_ARG (p);\n+\t\t  if (n_args == 0)\n+\t\t    {\n+\t\t      /* Count only the option arguments in separate\n+\t\t\t argv elements.  */\n+\t\t      n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n+\t\t    }\n+\t\t  if (i + n_args >= argc)\n+\t\t    fatal_error (\"argument to %<-%s%> is missing\", p);\n+\t\t  switches[n_switches].args\n+\t\t    = XNEWVEC (const char *, n_args + 1);\n+\t\t  while (j < n_args)\n+\t\t    switches[n_switches].args[j++] = argv[++i];\n+\t\t  /* Null-terminate the vector.  */\n+\t\t  switches[n_switches].args[j] = 0;\n+\t\t}\n+\t      else if (strchr (switches_need_spaces, c))\n+\t\t{\n+\t\t  /* On some systems, ld cannot handle some options without\n+\t\t     a space.  So split the option from its argument.  */\n+\t\t  char *part1 = XNEWVEC (char, 2);\n+\t\t  part1[0] = c;\n+\t\t  part1[1] = '\\0';\n+\n+\t\t  switches[n_switches].part1 = part1;\n+\t\t  switches[n_switches].args = XNEWVEC (const char *, 2);\n+\t\t  switches[n_switches].args[0] = xstrdup (p+1);\n+\t\t  switches[n_switches].args[1] = 0;\n+\t\t}\n+\t      else\n+\t\tswitches[n_switches].args = 0;\n+\n+\t      switches[n_switches].live_cond = 0;\n+\t      switches[n_switches].validated = 0;\n+\t      switches[n_switches].ordering = 0;\n+\t      /* These are always valid, since gcc.c itself understands the\n+\t\t first four, gfortranspec.c understands -static-libgfortran\n+\t\t and g++spec.c understands -static-libstdc++ */\n+\t      if (!strcmp (p, \"save-temps\")\n+\t\t  || !strcmp (p, \"static-libgcc\")\n+\t\t  || !strcmp (p, \"shared-libgcc\")\n+\t\t  || !strcmp (p, \"pipe\")\n+\t\t  || !strcmp (p, \"static-libgfortran\")\n+\t\t  || !strcmp (p, \"static-libstdc++\"))\n+\t\tswitches[n_switches].validated = 1;\n+\t      else\n+\t\t{\n+\t\t  char ch = switches[n_switches].part1[0];\n+\t\t  if (ch == 'B')\n+\t\t    switches[n_switches].validated = 1;\n+\t\t}\n+\t      n_switches++;\n \t    }\n \t}\n       else\n \t{\n-\t  n_infiles++;\n-\t  lang_n_infiles++;\n+          const char *p = strrchr (argv[i], '@');\n+          char *fname;\n+\t  long offset;\n+\t  int consumed;\n+#ifdef HAVE_TARGET_OBJECT_SUFFIX\n+\t  argv[i] = convert_filename (argv[i], 0, access (argv[i], F_OK));\n+#endif\n+\t  /* For LTO static archive support we handle input file\n+\t     specifications that are composed of a filename and\n+\t     an offset like FNAME@OFFSET.  */\n+\t  if (p\n+\t      && p != argv[i]\n+\t      && sscanf (p, \"@%li%n\", &offset, &consumed) >= 1\n+\t      && strlen (p) == (unsigned int)consumed)\n+\t    {\n+              fname = (char *)xmalloc (p - argv[i] + 1);\n+              memcpy (fname, argv[i], p - argv[i]);\n+              fname[p - argv[i]] = '\\0';\n+\t      /* Only accept non-stdin and existing FNAME parts, otherwise\n+\t\t try with the full name.  */\n+\t      if (strcmp (fname, \"-\") == 0 || access (fname, F_OK) < 0)\n+\t\t{\n+\t\t  free (fname);\n+\t\t  fname = xstrdup (argv[i]);\n+\t\t}\n+\t    }\n+\t  else\n+\t    fname = xstrdup (argv[i]);\n+ \n+          if (strcmp (fname, \"-\") != 0 && access (fname, F_OK) < 0)\n+\t    perror_with_name (fname);\n+          else\n+\t    add_infile (argv[i], spec_lang);\n+\n+          free (fname);\n \t}\n     }\n \n@@ -4163,13 +4327,11 @@ process_command (int argc, const char **argv)\n \t{\n \t  compare_debug = 2;\n \t  compare_debug_opt = gcd;\n-\t  n_switches++;\n \t}\n       else if (gcd && *gcd && strcmp (gcd, \"0\"))\n \t{\n \t  compare_debug = 3;\n \t  compare_debug_opt = \"-gtoggle\";\n-\t  n_switches++;\n \t}\n     }\n   else if (compare_debug < 0)\n@@ -4222,7 +4384,7 @@ process_command (int argc, const char **argv)\n      then consider it to relocate with the rest of the GCC installation\n      if GCC_EXEC_PREFIX is set.\n      ``make_relative_prefix'' is not compiled for VMS, so don't call it.  */\n-  if (target_system_root && gcc_exec_prefix)\n+  if (target_system_root && !target_system_root_changed && gcc_exec_prefix)\n     {\n       char *tmp_prefix = get_relative_prefix (argv[0],\n \t\t\t\t\t      standard_bindir_prefix,\n@@ -4238,232 +4400,12 @@ process_command (int argc, const char **argv)\n   /* More prefixes are enabled in main, after we read the specs file\n      and determine whether this is cross-compilation or not.  */\n \n-  /* Then create the space for the vectors and scan again.  */\n-\n-  switches = XNEWVEC (struct switchstr, n_switches + 1);\n-  infiles = XNEWVEC (struct infile, n_infiles + 1);\n-  n_switches = 0;\n-  n_infiles = 0;\n-  last_language_n_infiles = -1;\n-\n-  /* This, time, copy the text of each switch and store a pointer\n-     to the copy in the vector of switches.\n-     Store all the infiles in their vector.  */\n-\n-  for (i = 1; i < argc; i++)\n-    {\n-      /* Just skip the switches that were handled by the preceding loop.  */\n-      if (! strncmp (argv[i], \"-Wa,\", 4))\n-\t;\n-      else if (! strncmp (argv[i], \"-Wp,\", 4))\n-\t;\n-      else if (! strcmp (argv[i], \"-no-canonical-prefixes\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-pass-exit-codes\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-print-search-dirs\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-print-libgcc-file-name\"))\n-\t;\n-      else if (! strncmp (argv[i], \"-print-file-name=\", 17))\n-\t;\n-      else if (! strncmp (argv[i], \"-print-prog-name=\", 17))\n-\t;\n-      else if (! strcmp (argv[i], \"-print-multi-lib\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-print-multi-directory\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-print-sysroot\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-print-multi-os-directory\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-print-sysroot-headers-suffix\"))\n-\t;\n-      else if (! strncmp (argv[i], \"--sysroot=\", strlen (\"--sysroot=\")))\n-\t{\n-\t  target_system_root = argv[i] + strlen (\"--sysroot=\");\n-\t  target_system_root_changed = 1;\n-\t}\n-      else if (strncmp (argv[i], \"-Wl,\", 4) == 0)\n-\t{\n-\t  int prev, j;\n-\t  /* Split the argument at commas.  */\n-\t  prev = 4;\n-\t  for (j = 4; argv[i][j]; j++)\n-\t    if (argv[i][j] == ',')\n-\t      {\n-\t\tinfiles[n_infiles].language = \"*\";\n-\t\tinfiles[n_infiles++].name\n-\t\t  = save_string (argv[i] + prev, j - prev);\n-\t\tprev = j + 1;\n-\t      }\n-\t  /* Record the part after the last comma.  */\n-\t  infiles[n_infiles].language = \"*\";\n-\t  infiles[n_infiles++].name = argv[i] + prev;\n-\t}\n-      else if (strcmp (argv[i], \"-Xlinker\") == 0)\n-\t{\n-\t  infiles[n_infiles].language = \"*\";\n-\t  infiles[n_infiles++].name = argv[++i];\n-\t}\n-      /* Xassembler and Xpreprocessor were already handled in the first argv\n-\t scan, so all we need to do here is ignore them and their argument.  */\n-      else if (strcmp (argv[i], \"-Xassembler\") == 0)\n-\ti++;\n-      else if (strcmp (argv[i], \"-Xpreprocessor\") == 0)\n-\ti++;\n-      else if (strcmp (argv[i], \"-l\") == 0)\n-\t{ /* POSIX allows separation of -l and the lib arg;\n-\t     canonicalize by concatenating -l with its arg */\n-\t  infiles[n_infiles].language = \"*\";\n-\t  infiles[n_infiles++].name = concat (\"-l\", argv[++i], NULL);\n-\t}\n-      else if (strncmp (argv[i], \"-l\", 2) == 0)\n-\t{\n-\t  infiles[n_infiles].language = \"*\";\n-\t  infiles[n_infiles++].name = argv[i];\n-\t}\n-      else if (strcmp (argv[i], \"-wrapper\") == 0)\n-        i++;\n-      else if (strcmp (argv[i], \"-specs\") == 0)\n-\ti++;\n-      else if (strncmp (argv[i], \"-specs=\", 7) == 0)\n-\t;\n-      else if (strcmp (argv[i], \"-time\") == 0)\n-\t;\n-      else if (strncmp (argv[i], \"-time=\", sizeof (\"-time=\") - 1) == 0)\n-\t;\n-      else if (strcmp (argv[i], \"-###\") == 0)\n-\t;\n-      else if (argv[i][0] == '-' && argv[i][1] != 0)\n-\t{\n-\t  const char *p = &argv[i][1];\n-\t  int c = *p;\n-\n-\t  if (c == 'x')\n-\t    {\n-\t      if (p[1] == 0 && i + 1 == argc)\n-\t\tfatal_error (\"argument to %<-x%> is missing\");\n-\t      if (p[1] == 0)\n-\t\tspec_lang = argv[++i];\n-\t      else\n-\t\tspec_lang = p + 1;\n-\t      if (! strcmp (spec_lang, \"none\"))\n-\t\t/* Suppress the warning if -xnone comes after the last input\n-\t\t   file, because alternate command interfaces like g++ might\n-\t\t   find it useful to place -xnone after each input file.  */\n-\t\tspec_lang = 0;\n-\t      else\n-\t\tlast_language_n_infiles = n_infiles;\n-\t      continue;\n-\t    }\n-\t  switches[n_switches].part1 = p;\n-\t  /* Deal with option arguments in separate argv elements.  */\n-\t  if ((SWITCH_TAKES_ARG (c) > (p[1] != 0))\n-\t      || WORD_SWITCH_TAKES_ARG (p))\n-\t    {\n-\t      int j = 0;\n-\t      int n_args = WORD_SWITCH_TAKES_ARG (p);\n-\n-\t      if (n_args == 0)\n-\t\t{\n-\t\t  /* Count only the option arguments in separate argv elements.  */\n-\t\t  n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n-\t\t}\n-\t      if (i + n_args >= argc)\n-\t\tfatal_error (\"argument to %<-%s%> is missing\", p);\n-\t      switches[n_switches].args\n-\t\t= XNEWVEC (const char *, n_args + 1);\n-\t      while (j < n_args)\n-\t\tswitches[n_switches].args[j++] = argv[++i];\n-\t      /* Null-terminate the vector.  */\n-\t      switches[n_switches].args[j] = 0;\n-\t    }\n-\t  else if (strchr (switches_need_spaces, c))\n-\t    {\n-\t      /* On some systems, ld cannot handle some options without\n-\t\t a space.  So split the option from its argument.  */\n-\t      char *part1 = XNEWVEC (char, 2);\n-\t      part1[0] = c;\n-\t      part1[1] = '\\0';\n-\n-\t      switches[n_switches].part1 = part1;\n-\t      switches[n_switches].args = XNEWVEC (const char *, 2);\n-\t      switches[n_switches].args[0] = xstrdup (p+1);\n-\t      switches[n_switches].args[1] = 0;\n-\t    }\n-\t  else\n-\t    switches[n_switches].args = 0;\n-\n-\t  switches[n_switches].live_cond = 0;\n-\t  switches[n_switches].validated = 0;\n-\t  switches[n_switches].ordering = 0;\n-\t  /* These are always valid, since gcc.c itself understands the\n-\t     first four, gfortranspec.c understands -static-libgfortran\n-\t     and g++spec.c understands -static-libstdc++ */\n-\t  if (!strcmp (p, \"save-temps\")\n-\t      || !strcmp (p, \"static-libgcc\")\n-\t      || !strcmp (p, \"shared-libgcc\")\n-\t      || !strcmp (p, \"pipe\")\n-\t      || !strcmp (p, \"static-libgfortran\")\n-\t      || !strcmp (p, \"static-libstdc++\"))\n-\t    switches[n_switches].validated = 1;\n-\t  else\n-\t    {\n-\t      char ch = switches[n_switches].part1[0];\n-\t      if (ch == 'B')\n-\t\tswitches[n_switches].validated = 1;\n-\t    }\n-\t  n_switches++;\n-\t}\n-      else\n-\t{\n-          const char *p = strrchr (argv[i], '@');\n-          char *fname;\n-\t  long offset;\n-\t  int consumed;\n-#ifdef HAVE_TARGET_OBJECT_SUFFIX\n-\t  argv[i] = convert_filename (argv[i], 0, access (argv[i], F_OK));\n-#endif\n-\t  /* For LTO static archive support we handle input file\n-\t     specifications that are composed of a filename and\n-\t     an offset like FNAME@OFFSET.  */\n-\t  if (p\n-\t      && p != argv[i]\n-\t      && sscanf (p, \"@%li%n\", &offset, &consumed) >= 1\n-\t      && strlen (p) == (unsigned int)consumed)\n-\t    {\n-              fname = (char *)xmalloc (p - argv[i] + 1);\n-              memcpy (fname, argv[i], p - argv[i]);\n-              fname[p - argv[i]] = '\\0';\n-\t      /* Only accept non-stdin and existing FNAME parts, otherwise\n-\t\t try with the full name.  */\n-\t      if (strcmp (fname, \"-\") == 0 || access (fname, F_OK) < 0)\n-\t\t{\n-\t\t  free (fname);\n-\t\t  fname = xstrdup (argv[i]);\n-\t\t}\n-\t    }\n-\t  else\n-\t    fname = xstrdup (argv[i]);\n- \n-          if (strcmp (fname, \"-\") != 0 && access (fname, F_OK) < 0)\n-\t    perror_with_name (fname);\n-          else\n-            {\n-              infiles[n_infiles].language = spec_lang;\n-              infiles[n_infiles++].name = argv[i];\n-            }\n-\n-          free (fname);\n-\t}\n-    }\n-\n   if (n_infiles == last_language_n_infiles && spec_lang != 0)\n     warning (0, \"%<-x %s%> after last input file has no effect\", spec_lang);\n \n   if (compare_debug == 2 || compare_debug == 3)\n     {\n+      alloc_switch ();\n       switches[n_switches].part1 = concat (\"fcompare-debug=\",\n \t\t\t\t\t   compare_debug_opt,\n \t\t\t\t\t   NULL);\n@@ -4478,15 +4420,16 @@ process_command (int argc, const char **argv)\n   /* Ensure we only invoke each subprocess once.  */\n   if (print_subprocess_help || print_help_list || print_version)\n     {\n-      n_infiles = 1;\n+      n_infiles = 0;\n \n       /* Create a dummy input file, so that we can pass\n \t the help option on to the various sub-processes.  */\n-      infiles[0].language = \"c\";\n-      infiles[0].name   = \"help-dummy\";\n+      add_infile (\"help-dummy\", \"c\");\n     }\n \n+  alloc_switch ();\n   switches[n_switches].part1 = 0;\n+  alloc_infile ();\n   infiles[n_infiles].name = 0;\n }\n "}, {"sha": "853540f84c00c1a63effbb44b9c6ae380474646c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=922e18828a123733841dd652f8a78bfd13ac9856", "patch": "@@ -1,3 +1,7 @@\n+2010-06-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/opts-3.c: New test.\n+\n 2010-06-26  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/type_decl_1.f90: New."}, {"sha": "50cd1db52d41836473050c69bc47ea074cee12f6", "filename": "gcc/testsuite/gcc.dg/opts-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e18828a123733841dd652f8a78bfd13ac9856/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-3.c?ref=922e18828a123733841dd652f8a78bfd13ac9856", "patch": "@@ -0,0 +1,7 @@\n+/* Parameters of -Xassembler should not be interpreted as driver\n+   options (and so cause the driver to exit prematurely, as in this\n+   testcase, or have other unintended effects).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Xassembler -dumpmachine\" } */\n+\n+int int x; /* { dg-error \"two or more data types\" } */"}]}