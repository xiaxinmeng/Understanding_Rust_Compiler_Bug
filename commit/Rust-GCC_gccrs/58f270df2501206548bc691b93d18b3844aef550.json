{"sha": "58f270df2501206548bc691b93d18b3844aef550", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmMjcwZGYyNTAxMjA2NTQ4YmM2OTFiOTNkMThiMzg0NGFlZjU1MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-02T09:51:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-02T09:51:49Z"}, "message": "ops.cc (last_write_time): Set timespec members explicitly instead of with a braced-init-list.\n\n\t* src/filesystem/ops.cc (last_write_time) [_GLIBCXX_USE_UTIMENSAT]:\n\tSet timespec members explicitly instead of with a braced-init-list.\n\t[_GLIBCXX_HAVE_UTIME_H]: Use lambda to handle st_atime being a macro.\n\nFrom-SVN: r222718", "tree": {"sha": "27ef7457837a52d6cefb1efc9294e8242996acae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ef7457837a52d6cefb1efc9294e8242996acae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f270df2501206548bc691b93d18b3844aef550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f270df2501206548bc691b93d18b3844aef550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f270df2501206548bc691b93d18b3844aef550", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f270df2501206548bc691b93d18b3844aef550/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4afeb6fcf5299c8d0192d687c6119e00d4c41dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afeb6fcf5299c8d0192d687c6119e00d4c41dcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afeb6fcf5299c8d0192d687c6119e00d4c41dcb"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "521ca9cb9dfba6e37aa0b3ad037321c34f899ecd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f270df2501206548bc691b93d18b3844aef550/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f270df2501206548bc691b93d18b3844aef550/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=58f270df2501206548bc691b93d18b3844aef550", "patch": "@@ -1,3 +1,9 @@\n+2015-05-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/ops.cc (last_write_time) [_GLIBCXX_USE_UTIMENSAT]:\n+\tSet timespec members explicitly instead of with a braced-init-list.\n+\t[_GLIBCXX_HAVE_UTIME_H]: Use lambda to handle st_atime being a macro.\n+\n 2015-05-02  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/experimental/deque: Add feature-test macro."}, {"sha": "aa1ab048c70b0620141b57b64655d5fed1464af1", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f270df2501206548bc691b93d18b3844aef550/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f270df2501206548bc691b93d18b3844aef550/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=58f270df2501206548bc691b93d18b3844aef550", "patch": "@@ -871,20 +871,22 @@ fs::last_write_time(const path& p __attribute__((__unused__)),\n {\n   auto d = new_time.time_since_epoch();\n   auto s = chrono::duration_cast<chrono::seconds>(d);\n+#if _GLIBCXX_USE_UTIMENSAT\n   auto ns = chrono::duration_cast<chrono::nanoseconds>(d - s);\n-#ifdef _GLIBCXX_USE_UTIMENSAT\n-  struct ::timespec ts[2] = {\n-    { 0, UTIME_OMIT },\n-    { static_cast<std::time_t>(s.count()), static_cast<long>(ns.count()) }\n-  };\n-  if (utimensat(AT_FDCWD, p.c_str(), ts, 0))\n+  struct ::timespec ts[2];\n+  ts[0].tv_sec = 0;\n+  ts[0].tv_nsec = UTIME_OMIT;\n+  ts[1].tv_sec = static_cast<std::time_t>(s.count());\n+  ts[1].tv_nsec = static_cast<long>(ns.count());\n+  if (::utimensat(AT_FDCWD, p.c_str(), ts, 0))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n #elif _GLIBCXX_HAVE_UTIME_H\n   ::utimbuf times;\n   times.modtime = s.count();\n-  times.actime = do_stat(p, ec, std::mem_fn(&stat::st_atime), times.modtime);\n+  times.actime = do_stat(p, ec, [](const auto& st) { return st.st_atime; },\n+\t\t\t times.modtime);\n   if (::utime(p.c_str(), &times))\n     ec.assign(errno, std::generic_category());\n   else"}]}