{"sha": "43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiNjAzZWEzZDg0NTdmOGZlMTY3ZjRkMmNiOWFlYWNiODc3MmZmYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T18:11:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T18:11:53Z"}, "message": "Rename R_ACC to R_ACU to not conflict with access.h.\n\nFrom-SVN: r6321", "tree": {"sha": "6af6b83531a199e06a7cd6a51bd9ea329aed9f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6af6b83531a199e06a7cd6a51bd9ea329aed9f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa/comments", "author": null, "committer": null, "parents": [{"sha": "d9ee453842b80eaf48f565e3abf0ae1d106be59d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ee453842b80eaf48f565e3abf0ae1d106be59d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ee453842b80eaf48f565e3abf0ae1d106be59d"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c4ec53d03afbc71c201a0bb7a2cda41dbd3a49a5", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "patch": "@@ -233,7 +233,7 @@ accum_reg_operand (op, mode)\n      enum machine_mode mode;\n {\n   return (GET_CODE (op) == REG\n-\t  && REGNO (op) >= R_ACC (0) && REGNO (op) <= R_ACC (3));\n+\t  && REGNO (op) >= R_ACU (0) && REGNO (op) <= R_ACU (3));\n }\n \n /* Returns 1 if OP is a normal data register.  */"}, {"sha": "c0f97a8ae0de7dbaa9e4f9c23e01762f4b815389", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "patch": "@@ -292,7 +292,7 @@ extern int target_flags;\n #define R_EXO\t199\n \n /* Define the number for floating-point accumulator N.  */\n-#define R_ACC(N)\t((N) + 200)\n+#define R_ACU(N)\t((N) + 200)\n \n /* Now define the registers used in the calling sequence.  */\n #define R_TAV\tR_GR (121)\n@@ -390,7 +390,7 @@ extern int target_flags;\n    R_LR (117), R_LR (118), R_LR (119), R_LR (120), R_LR (121),\t\t\\\n    R_LR (122), R_LR (123), R_LR (124), R_LR (124), R_LR (126),\t\t\\\n    R_LR (127),\t\t\t\t\t\t\t\t\\\n-   R_ACC (3), R_ACC (2), R_ACC (1), R_ACC (0),\t\t\t\t\\\n+   R_ACU (3), R_ACU (2), R_ACU (1), R_ACU (0),\t\t\t\t\\\n    R_GR (112), R_GR (113), R_GR (114), R_GR (115), R_GR (121),\t\t\\\n    R_GR (122), R_GR (123), R_GR (124), R_GR (125), R_GR (126),\t\t\\\n    R_GR (127),\t\t\t\t\t\t\t\t\\\n@@ -411,7 +411,7 @@ extern int target_flags;\n    but can be less for certain modes in special long registers.  */\n \n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n-  ((REGNO) >= R_ACC (0) && (REGNO) <= R_ACC (3)? 1\t\t\\\n+  ((REGNO) >= R_ACU (0) && (REGNO) <= R_ACU (3)? 1\t\t\\\n    : (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n@@ -428,12 +428,12 @@ extern int target_flags;\n    (I'd like to use the \"?:\" syntax to make this more readable, but Sun's\n    compiler doesn't seem to accept it.)  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE)  \t\t\t\t\\\n-(((REGNO) >= R_ACC (0) && (REGNO) <= R_ACC (3)\t\t\t\t\\\n+(((REGNO) >= R_ACU (0) && (REGNO) <= R_ACU (3)\t\t\t\t\\\n     && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\t\\\n \t|| GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT))\t\t\\\n    || ((REGNO) >= R_BP && (REGNO) <= R_CR\t\t\t\t\\\n        && GET_MODE_CLASS (MODE) == MODE_PARTIAL_INT)\t\t\t\\\n-   || ((REGNO) >= R_Q && (REGNO) < R_ACC (0)\t\t\t\t\\\n+   || ((REGNO) >= R_Q && (REGNO) < R_ACU (0)\t\t\t\t\\\n        && GET_MODE_CLASS (MODE) != MODE_FLOAT\t\t\t\t\\\n        && GET_MODE_CLASS (MODE) != MODE_COMPLEX_FLOAT)\t\t\t\\\n    || (((REGNO) < R_BP || (REGNO) >= R_KR (0))\t\t\t\t \\\n@@ -556,9 +556,9 @@ enum reg_class { NO_REGS, LR0_REGS, GENERAL_REGS, BP_REGS, FC_REGS, CR_REGS,\n    : (REGNO) == R_CR ? CR_REGS\t\t\\\n    : (REGNO) == R_Q ? Q_REGS\t\t\\\n    : (REGNO) > R_BP && (REGNO) <= R_EXO ? SPECIAL_REGS\t\\\n-   : (REGNO) == R_ACC (0) ? ACCUM0_REGS\t\\\n+   : (REGNO) == R_ACU (0) ? ACCUM0_REGS\t\\\n    : (REGNO) >= R_KR (0) ? GENERAL_REGS \\\n-   : (REGNO) > R_ACC (0) ? ACCUM_REGS\t\\\n+   : (REGNO) > R_ACU (0) ? ACCUM_REGS\t\\\n    : (REGNO) == R_LR (0) ? LR0_REGS\t\\\n    : GENERAL_REGS)\n "}]}