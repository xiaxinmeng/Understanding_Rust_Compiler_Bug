{"sha": "e8109bd87766be88e83fe88a44433dae16358a02", "node_id": "C_kwDOANBUbNoAKGU4MTA5YmQ4Nzc2NmJlODhlODNmZTg4YTQ0NDMzZGFlMTYzNThhMDI", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-02-03T12:28:24Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-02-03T12:29:59Z"}, "message": "ipa: Avoid invalid gimple when IPA-CP and IPA-SRA disagree on types (108384)\n\nWhen the compiled program contains type mismatches between callers and\ncallees when it comes to a parameter, IPA-CP can try to propagate one\nconstant from callers while IPA-SRA may try to split a parameter\nexpecting a value of a different size on the same offset.  This then\ncurrently leads to creation of a VIEW_CONVERT_EXPR with mismatching\ntype sizes of LHS and RHS which is correctly flagged by the GIMPLE\nverifier as invalid.\n\nIt seems that the best course of action is to try and avoid the\nsituation altogether and so this patch adds a check to IPA-SRA that\npeeks into the result of IPA-CP and when it sees a value on the same\noffset but with a mismatching size, it just decides to leave that\nparticular parameter be.\n\ngcc/ChangeLog:\n\n2023-02-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108384\n\t* ipa-sra.cc (push_param_adjustments_for_index): Remove a size check\n\twhen comparing to an IPA-CP value.\n\t(dump_list_of_param_indices): New function.\n\t(adjust_parameter_descriptions): Check for mismatching IPA-CP values.\n\tDump removed candidates using dump_list_of_param_indices.\n\t* ipa-param-manipulation.cc\n\t(ipa_param_body_adjustments::modify_expression): Add assert checking\n\tsizes of a VIEW_CONVERT_EXPR will match.\n\t(ipa_param_body_adjustments::modify_assignment): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2023-02-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108384\n\t* gcc.dg/ipa/pr108384.c: New test.", "tree": {"sha": "7a257f734540699ac9341c55edd26e63475cfa95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a257f734540699ac9341c55edd26e63475cfa95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8109bd87766be88e83fe88a44433dae16358a02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmPc/kcACgkQv2PBvD+k\nNUCTuxAAiLMnIErTn84VT6nTdPEVZApCT28vsd4SHexAA2NN/bDnP9NM+8FQbL/o\nKQ604tM/cKeo9paGRblmUOT3XBeDbacJ34KzLjxgG87x9PCIX/ZDaWihXisQtyxg\nIHankZjSU1tGMGrq29xmp62VZ8pSmSzCBS2iUwqrJPMWdfhfS8qvq1NIg8TSQ3DT\nnjQedytwTOpOdkC+kI/HnWZgZ320378Hzlo2QYoPxuBTdgmjehn79RBWAMiNuAX9\nNF1g4s7JfZqj1I4EnApUw1xZ3ZwddhiEIFz/5tbZYthEbPj4SIx/jGReOgAKRN4T\nSUDgNtgu/swkTSPjI4flmY9ienXev8l6A0KqpuymDWYJWv7tnQTA2gqEkKXXxz60\n49n+5S+2FNP9egy/ACX8h4N4MSvx1Zs+CHg0mHk/j4Qqv3NoBxiDfOTS4XYRJwdr\nCXJgTtNkcIeBSPOJbbAqhaDGXqDKX/dA9iwfrIs/wPkHzb3gkVkGZzI8btKFAWRS\nrrb/DX4zlrkfRd1YCkH3z0RH0D0PSHl2J/AXJv0Vdc5SZq/IOsLtN/py1R+tNT9j\n4F1iWaU0IkKnU/rvkn+jwLmsm0BAA7GT8uZCatsq/ZGEeyj/qT3wTT8MAuDYMItK\niGj8Z60qFbqYhiwlLisFmiB+UVnWZobjK+klur2n3+4KHygSMks=\n=Sq/6\n-----END PGP SIGNATURE-----", "payload": "tree 7a257f734540699ac9341c55edd26e63475cfa95\nparent 0b1ce70a813b98ef2893779d14ad6c90c5d06a71\nauthor Martin Jambor <mjambor@suse.cz> 1675427304 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1675427399 +0100\n\nipa: Avoid invalid gimple when IPA-CP and IPA-SRA disagree on types (108384)\n\nWhen the compiled program contains type mismatches between callers and\ncallees when it comes to a parameter, IPA-CP can try to propagate one\nconstant from callers while IPA-SRA may try to split a parameter\nexpecting a value of a different size on the same offset.  This then\ncurrently leads to creation of a VIEW_CONVERT_EXPR with mismatching\ntype sizes of LHS and RHS which is correctly flagged by the GIMPLE\nverifier as invalid.\n\nIt seems that the best course of action is to try and avoid the\nsituation altogether and so this patch adds a check to IPA-SRA that\npeeks into the result of IPA-CP and when it sees a value on the same\noffset but with a mismatching size, it just decides to leave that\nparticular parameter be.\n\ngcc/ChangeLog:\n\n2023-02-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108384\n\t* ipa-sra.cc (push_param_adjustments_for_index): Remove a size check\n\twhen comparing to an IPA-CP value.\n\t(dump_list_of_param_indices): New function.\n\t(adjust_parameter_descriptions): Check for mismatching IPA-CP values.\n\tDump removed candidates using dump_list_of_param_indices.\n\t* ipa-param-manipulation.cc\n\t(ipa_param_body_adjustments::modify_expression): Add assert checking\n\tsizes of a VIEW_CONVERT_EXPR will match.\n\t(ipa_param_body_adjustments::modify_assignment): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2023-02-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108384\n\t* gcc.dg/ipa/pr108384.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8109bd87766be88e83fe88a44433dae16358a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8109bd87766be88e83fe88a44433dae16358a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8109bd87766be88e83fe88a44433dae16358a02/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1ce70a813b98ef2893779d14ad6c90c5d06a71"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "42488ee09c3719f66a657c5b1c277dc901c96680", "filename": "gcc/ipa-param-manipulation.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8109bd87766be88e83fe88a44433dae16358a02/gcc%2Fipa-param-manipulation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8109bd87766be88e83fe88a44433dae16358a02/gcc%2Fipa-param-manipulation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.cc?ref=e8109bd87766be88e83fe88a44433dae16358a02", "patch": "@@ -1857,6 +1857,8 @@ ipa_param_body_adjustments::modify_expression (tree *expr_p, bool convert)\n   if (convert && !useless_type_conversion_p (TREE_TYPE (expr),\n \t\t\t\t\t     TREE_TYPE (repl)))\n     {\n+      gcc_checking_assert (tree_to_shwi (TYPE_SIZE (TREE_TYPE (expr)))\n+\t\t\t   == tree_to_shwi (TYPE_SIZE (TREE_TYPE (repl))));\n       tree vce = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (expr), repl);\n       *expr_p = vce;\n     }\n@@ -1900,6 +1902,8 @@ ipa_param_body_adjustments::modify_assignment (gimple *stmt,\n \t}\n       else\n \t{\n+\t  gcc_checking_assert (tree_to_shwi (TYPE_SIZE (TREE_TYPE (*lhs_p)))\n+\t\t\t      == tree_to_shwi (TYPE_SIZE (TREE_TYPE (*rhs_p))));\n \t  tree new_rhs = fold_build1_loc (gimple_location (stmt),\n \t\t\t\t\t  VIEW_CONVERT_EXPR, TREE_TYPE (*lhs_p),\n \t\t\t\t\t  *rhs_p);"}, {"sha": "7a2b4dc860805007d7b6aa985409811aee0ad77a", "filename": "gcc/ipa-sra.cc", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8109bd87766be88e83fe88a44433dae16358a02/gcc%2Fipa-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8109bd87766be88e83fe88a44433dae16358a02/gcc%2Fipa-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.cc?ref=e8109bd87766be88e83fe88a44433dae16358a02", "patch": "@@ -3989,9 +3989,7 @@ push_param_adjustments_for_index (isra_func_summary *ifs, unsigned base_index,\n \t{\n \t  ipa_argagg_value_list avl (ipcp_ts);\n \t  tree value = avl.get_value (base_index, pa->unit_offset);\n-\t  if (value\n-\t      && (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (value))) / BITS_PER_UNIT\n-\t\t  == pa->unit_size))\n+\t  if (value)\n \t    {\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"    - omitting component at byte \"\n@@ -4130,6 +4128,22 @@ process_isra_node_results (cgraph_node *node,\n   callers.release ();\n }\n \n+/* If INDICES is not empty, dump a combination of NODE's dump_name and MSG\n+   followed by the list of numbers in INDICES.  */\n+\n+static void\n+dump_list_of_param_indices (const cgraph_node *node, const char* msg,\n+\t\t\t    const vec<unsigned> &indices)\n+{\n+  if (indices.is_empty ())\n+    return;\n+  fprintf (dump_file, \"The following parameters of %s %s:\", node->dump_name (),\n+\t   msg);\n+  for (unsigned i : indices)\n+    fprintf (dump_file, \" %u\", i);\n+  fprintf (dump_file, \"\\n\");\n+}\n+\n /* Check which parameters of NODE described by IFS have survived until IPA-SRA\n    and disable transformations for those which have not or which should not\n    transformed because the associated debug counter reached its limit.  Return\n@@ -4153,6 +4167,7 @@ adjust_parameter_descriptions (cgraph_node *node, isra_func_summary *ifs)\n       check_surviving = true;\n       cinfo->param_adjustments->get_surviving_params (&surviving_params);\n     }\n+  ipcp_transformation *ipcp_ts = ipcp_get_transformation_summary (node);\n   auto_vec <unsigned> dump_dead_indices;\n   auto_vec <unsigned> dump_bad_cond_indices;\n   for (unsigned i = 0; i < len; i++)\n@@ -4202,27 +4217,40 @@ adjust_parameter_descriptions (cgraph_node *node, isra_func_summary *ifs)\n \t      if (size_would_violate_limit_p (desc, desc->size_reached))\n \t\tdesc->split_candidate = false;\n \t    }\n+\n+\t  /* Avoid ICEs on size-mismatched VIEW_CONVERT_EXPRs when callers and\n+\t     callees don't agree on types in aggregates and we try to do both\n+\t     IPA-CP and IPA-SRA.  */\n+\t  if (ipcp_ts && desc->split_candidate)\n+\t    {\n+\t      ipa_argagg_value_list avl (ipcp_ts);\n+\t      for (const param_access *pa : desc->accesses)\n+\t\t{\n+\t\t  if (!pa->certain)\n+\t\t    continue;\n+\t\t  tree value = avl.get_value (i, pa->unit_offset);\n+\t\t  if (value\n+\t\t      && ((tree_to_uhwi (TYPE_SIZE (TREE_TYPE (value)))\n+\t\t\t   / BITS_PER_UNIT)\n+\t\t\t  != pa->unit_size))\n+\t\t    {\n+\t\t      desc->split_candidate = false;\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\tdump_dead_indices.safe_push (i);\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n \t  if (desc->locally_unused || desc->split_candidate)\n \t    ret = false;\n \t}\n     }\n \n-  if (!dump_dead_indices.is_empty ())\n-    {\n-      fprintf (dump_file, \"The following parameters of %s are dead on arrival:\",\n-\t       node->dump_name ());\n-      for (unsigned i : dump_dead_indices)\n-\tfprintf (dump_file, \" %u\", i);\n-      fprintf (dump_file, \"\\n\");\n-    }\n-  if (!dump_bad_cond_indices.is_empty ())\n-    {\n-      fprintf (dump_file, \"The following parameters of %s are not safe to \"\n-\t       \"derefernce in all callers:\", node->dump_name ());\n-      for (unsigned i : dump_bad_cond_indices)\n-\tfprintf (dump_file, \" %u\", i);\n-      fprintf (dump_file, \"\\n\");\n-    }\n+  dump_list_of_param_indices (node, \"are dead on arrival or have a type \"\n+\t\t\t      \"mismatch with IPA-CP\", dump_dead_indices);\n+  dump_list_of_param_indices (node, \"are not safe to derefernce in all callers\",\n+\t\t\t      dump_bad_cond_indices);\n \n   return ret;\n }"}, {"sha": "2b714aa78b18d1c8db862ceda61a22914a6b1058", "filename": "gcc/testsuite/gcc.dg/ipa/pr108384.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8109bd87766be88e83fe88a44433dae16358a02/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108384.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8109bd87766be88e83fe88a44433dae16358a02/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108384.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108384.c?ref=e8109bd87766be88e83fe88a44433dae16358a02", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+struct S0 {\n+  int f0;\n+  short f1;\n+  unsigned f2 : 7;\n+  short f3;\n+} func_2_l_27;\n+int *g_389;\n+int safe_sub_func_int16_t_s_s(void);\n+void safe_lshift_func_uint8_t_u_s(int);\n+void func_23(struct S0 p_24, struct S0 p_25) {\n+  int *l_1051 = g_389;\n+  if (safe_sub_func_int16_t_s_s())\n+    for (;;)\n+      safe_lshift_func_uint8_t_u_s(p_24.f1);\n+  *l_1051 = p_25.f0;\n+}\n+void func_2(void) {\n+  struct S0 l_26[2];\n+  l_26[1].f0 = 4;\n+  ((long long*)&l_26)[2] = 25770065925;\n+  func_23(l_26[1], func_2_l_27);\n+}"}]}