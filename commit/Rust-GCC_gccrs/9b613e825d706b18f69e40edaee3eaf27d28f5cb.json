{"sha": "9b613e825d706b18f69e40edaee3eaf27d28f5cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2MTNlODI1ZDcwNmIxOGY2OWU0MGVkYWVlM2VhZjI3ZDI4ZjVjYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-22T13:21:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-22T13:21:35Z"}, "message": "expand: Fix up empty class return optimization [PR101160]\n\nOn Mon, Jun 14, 2021 at 11:24:22PM -0400, Jason Merrill via Gcc-patches wrote:\n> The x86_64 psABI says that an empty class isn't passed or returned in memory or\n> registers, so we shouldn't set %eax in this function.  Is this a reasonable\n> place to implement that?  Another possibility would be to remove the hack to\n> prevent i386.c:function_value_64 from returning NULL in this case and fix the\n> callers to deal, but that seems like more work.\n>\n> The df-scan hunk catches the case where we look at a 0-length reg and build\n> a range the length of unsigned int, which happened before I changed\n> assign_parms to match expand_function_end.\n\nThe assign_params change unfortunately breaks e.g. the following testcase.\nThe problem is that some passes (e.g. subreg lowering but assign_parms\ncomments also talk about delayed slot scheduling) rely on crtl->return_rtx\nnot to contain pseudo registers, and the assign_parms change results\nin the pseudo in there not being replaced with a hard register.\n\nThe following patch instead clears the crtl->return_rtx if a function\nreturns TYPE_EMPTY_P structure, that way (use (pseudo)) is not emitted\ninto the IL and it is treated like more like functions returning void.\n\nI've also changed the effective target on the empty-class1.C testcase, so\nthat it doesn't fail on x86_64-linux with -m32 testing.\n\n2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101160\n\t* function.c (assign_parms): For decl_result with TYPE_EMPTY_P type\n\tclear crtl->return_rtx instead of keeping it referencing a pseudo.\n\n\t* g++.target/i386/empty-class1.C: Require lp64 effective target\n\tinstead of x86_64-*-*.\n\t* g++.target/i386/empty-class2.C: New test.", "tree": {"sha": "d23b0b9285d24ef8b3d5fc22be799cecb2eed7b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d23b0b9285d24ef8b3d5fc22be799cecb2eed7b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b613e825d706b18f69e40edaee3eaf27d28f5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b613e825d706b18f69e40edaee3eaf27d28f5cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b613e825d706b18f69e40edaee3eaf27d28f5cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b613e825d706b18f69e40edaee3eaf27d28f5cb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d9c9e705f039f42734139c233202888d2bf01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d9c9e705f039f42734139c233202888d2bf01b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d9c9e705f039f42734139c233202888d2bf01b"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "00b2fe70c7d05e6e0fc4046789435adf6efb99f2", "filename": "gcc/function.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b613e825d706b18f69e40edaee3eaf27d28f5cb/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b613e825d706b18f69e40edaee3eaf27d28f5cb/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9b613e825d706b18f69e40edaee3eaf27d28f5cb", "patch": "@@ -3821,17 +3821,22 @@ assign_parms (tree fndecl)\n       tree decl_result = DECL_RESULT (fndecl);\n       rtx decl_rtl = DECL_RTL (decl_result);\n \n-      if ((REG_P (decl_rtl)\n-\t   ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n-\t   : DECL_REGISTER (decl_result))\n-\t  /* Unless the psABI says not to.  */\n-\t  && !TYPE_EMPTY_P (TREE_TYPE (decl_result)))\n+      if (REG_P (decl_rtl)\n+\t  ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n+\t  : DECL_REGISTER (decl_result))\n \t{\n \t  rtx real_decl_rtl;\n \n-\t  real_decl_rtl = targetm.calls.function_value (TREE_TYPE (decl_result),\n-\t\t\t\t\t\t\tfndecl, true);\n-\t  REG_FUNCTION_VALUE_P (real_decl_rtl) = 1;\n+\t  /* Unless the psABI says not to.  */\n+\t  if (TYPE_EMPTY_P (TREE_TYPE (decl_result)))\n+\t    real_decl_rtl = NULL_RTX;\n+\t  else\n+\t    {\n+\t      real_decl_rtl\n+\t\t= targetm.calls.function_value (TREE_TYPE (decl_result),\n+\t\t\t\t\t\tfndecl, true);\n+\t      REG_FUNCTION_VALUE_P (real_decl_rtl) = 1;\n+\t    }\n \t  /* The delay slot scheduler assumes that crtl->return_rtx\n \t     holds the hard register containing the return value, not a\n \t     temporary pseudo.  */"}, {"sha": "96a1fad5046bd39086dab738dd44c130a8d3e2fe", "filename": "gcc/testsuite/g++.target/i386/empty-class1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b613e825d706b18f69e40edaee3eaf27d28f5cb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b613e825d706b18f69e40edaee3eaf27d28f5cb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class1.C?ref=9b613e825d706b18f69e40edaee3eaf27d28f5cb", "patch": "@@ -1,5 +1,5 @@\n // PR target/88529\n-// { dg-do compile { target { c++11 && x86_64-*-* } } }\n+// { dg-do compile { target { c++11 && lp64 } } }\n // { dg-additional-options -fdump-rtl-expand }\n // { dg-final { scan-rtl-dump-not \"set\" \"expand\" } }\n // The x86_64 psABI says that f() doesn't put the return value anywhere."}, {"sha": "b9317c567063f0c933ab02da9fe532f19a6bd123", "filename": "gcc/testsuite/g++.target/i386/empty-class2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b613e825d706b18f69e40edaee3eaf27d28f5cb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b613e825d706b18f69e40edaee3eaf27d28f5cb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class2.C?ref=9b613e825d706b18f69e40edaee3eaf27d28f5cb", "patch": "@@ -0,0 +1,20 @@\n+// PR middle-end/101160\n+// Test passing aligned empty aggregate\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-Wno-psabi\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } }\n+\n+struct S { union {} a; } __attribute__((aligned));\n+\n+S\n+foo (S arg)\n+{\n+  return arg;\n+}\n+\n+void\n+bar (void)\n+{\n+  S arg;\n+  foo (arg);\n+}"}]}