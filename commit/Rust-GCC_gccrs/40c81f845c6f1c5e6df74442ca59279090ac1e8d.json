{"sha": "40c81f845c6f1c5e6df74442ca59279090ac1e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjODFmODQ1YzZmMWM1ZTZkZjc0NDQyY2E1OTI3OTA5MGFjMWU4ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-05-15T17:59:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-05-15T17:59:19Z"}, "message": "i386-expand.c (ix86_split_idivmod): Rename signed_p argument to unsigned_p.\n\n\t* config/i386/i386-expand.c (ix86_split_idivmod): Rename\n\tsigned_p argument to unsigned_p.  Update all uses for changed polarity.\n\t* config/i386/i386.md (u_bool): Handle DIV and UDIV RTXes.\n\t(divmod splitters): Use u_bool macro in the call to ix86_split_idivmod.\n\nFrom-SVN: r271259", "tree": {"sha": "032576484945aaf9cdcde1511aa90e2fe60fb1ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/032576484945aaf9cdcde1511aa90e2fe60fb1ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c81f845c6f1c5e6df74442ca59279090ac1e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c81f845c6f1c5e6df74442ca59279090ac1e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c81f845c6f1c5e6df74442ca59279090ac1e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c81f845c6f1c5e6df74442ca59279090ac1e8d/comments", "author": null, "committer": null, "parents": [{"sha": "53f45e3cb9ce761f0589af2dcb82409e4cccb6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f45e3cb9ce761f0589af2dcb82409e4cccb6a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f45e3cb9ce761f0589af2dcb82409e4cccb6a6"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "df035607fa7da969761079ec0deebf7f2c9d41fb", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c81f845c6f1c5e6df74442ca59279090ac1e8d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c81f845c6f1c5e6df74442ca59279090ac1e8d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=40c81f845c6f1c5e6df74442ca59279090ac1e8d", "patch": "@@ -1115,7 +1115,7 @@ predict_jump (int prob)\n \n void\n ix86_split_idivmod (machine_mode mode, rtx operands[],\n-\t\t    bool signed_p)\n+\t\t    bool unsigned_p)\n {\n   rtx_code_label *end_label, *qimode_label;\n   rtx div, mod;\n@@ -1131,22 +1131,22 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n       if (GET_MODE (operands[0]) == SImode)\n \t{\n \t  if (GET_MODE (operands[1]) == SImode)\n-\t    gen_divmod4_1 = signed_p ? gen_divmodsi4_1 : gen_udivmodsi4_1;\n+\t    gen_divmod4_1 = unsigned_p ? gen_udivmodsi4_1 : gen_divmodsi4_1;\n \t  else\n \t    gen_divmod4_1\n-\t      = signed_p ? gen_divmodsi4_zext_2 : gen_udivmodsi4_zext_2;\n+\t      = unsigned_p ? gen_udivmodsi4_zext_2 : gen_divmodsi4_zext_2;\n \t  gen_zero_extend = gen_zero_extendqisi2;\n \t}\n       else\n \t{\n \t  gen_divmod4_1\n-\t    = signed_p ? gen_divmodsi4_zext_1 : gen_udivmodsi4_zext_1;\n+\t    = unsigned_p ? gen_udivmodsi4_zext_1 : gen_divmodsi4_zext_1;\n \t  gen_zero_extend = gen_zero_extendqidi2;\n \t}\n       gen_test_ccno_1 = gen_testsi_ccno_1;\n       break;\n     case E_DImode:\n-      gen_divmod4_1 = signed_p ? gen_divmoddi4_1 : gen_udivmoddi4_1;\n+      gen_divmod4_1 = unsigned_p ? gen_udivmoddi4_1 : gen_divmoddi4_1;\n       gen_test_ccno_1 = gen_testdi_ccno_1;\n       gen_zero_extend = gen_zero_extendqidi2;\n       break;\n@@ -1192,15 +1192,15 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n   tmp2 = lowpart_subreg (QImode, operands[3], mode);\n   emit_insn (gen_udivmodhiqi3 (tmp0, tmp1, tmp2));\n \n-  if (signed_p)\n+  if (unsigned_p)\n     {\n-      div = gen_rtx_DIV (mode, operands[2], operands[3]);\n-      mod = gen_rtx_MOD (mode, operands[2], operands[3]);\n+      div = gen_rtx_UDIV (mode, operands[2], operands[3]);\n+      mod = gen_rtx_UMOD (mode, operands[2], operands[3]);\n     }\n   else\n     {\n-      div = gen_rtx_UDIV (mode, operands[2], operands[3]);\n-      mod = gen_rtx_UMOD (mode, operands[2], operands[3]);\n+      div = gen_rtx_DIV (mode, operands[2], operands[3]);\n+      mod = gen_rtx_MOD (mode, operands[2], operands[3]);\n     }\n   if (mode == SImode)\n     {"}, {"sha": "2e6329a3890aaa954dda2ee40e453e508ed843f6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c81f845c6f1c5e6df74442ca59279090ac1e8d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c81f845c6f1c5e6df74442ca59279090ac1e8d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=40c81f845c6f1c5e6df74442ca59279090ac1e8d", "patch": "@@ -952,7 +952,8 @@\n (define_code_attr s [(sign_extend \"s\") (zero_extend \"u\")])\n (define_code_attr u [(sign_extend \"\") (zero_extend \"u\")\n \t\t     (div \"\") (udiv \"u\")])\n-(define_code_attr u_bool [(sign_extend \"false\") (zero_extend \"true\")])\n+(define_code_attr u_bool [(sign_extend \"false\") (zero_extend \"true\")\n+\t\t\t  (div \"false\") (udiv \"true\")])\n \n ;; Used in signed and unsigned truncations.\n (define_code_iterator any_truncate [ss_truncate truncate us_truncate])\n@@ -7522,7 +7523,7 @@\n    && can_create_pseudo_p ()\n    && !optimize_insn_for_size_p ()\"\n   [(const_int 0)]\n-  \"ix86_split_idivmod (<MODE>mode, operands, true); DONE;\")\n+  \"ix86_split_idivmod (<MODE>mode, operands, <u_bool>); DONE;\")\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n@@ -7538,7 +7539,7 @@\n    && can_create_pseudo_p ()\n    && !optimize_insn_for_size_p ()\"\n   [(const_int 0)]\n-  \"ix86_split_idivmod (SImode, operands, true); DONE;\")\n+  \"ix86_split_idivmod (SImode, operands, <u_bool>); DONE;\")\n \n (define_split\n   [(set (match_operand:DI 1 \"register_operand\")\n@@ -7554,7 +7555,7 @@\n    && can_create_pseudo_p ()\n    && !optimize_insn_for_size_p ()\"\n   [(const_int 0)]\n-  \"ix86_split_idivmod (SImode, operands, true); DONE;\")\n+  \"ix86_split_idivmod (SImode, operands, <u_bool>); DONE;\")\n \n (define_insn_and_split \"divmod<mode>4_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=a\")"}]}