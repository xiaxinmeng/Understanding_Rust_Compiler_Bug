{"sha": "02e562027411e550d6df7b3d995d2235e0b0c98a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlNTYyMDI3NDExZTU1MGQ2ZGY3YjNkOTk1ZDIyMzVlMGIwYzk4YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-05-07T19:32:12Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-05-07T19:32:12Z"}, "message": "Disable remaining conditional move patterns.\n\n\t* i386.md (movsicc, movhicc, movsicc_1, movhicc_1, movsfcc_1,\n\tmovdfcc_1): Disable.\n\nFrom-SVN: r19621", "tree": {"sha": "c4ebf2386a64fde1c453fc60bb8d02a2fda412bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4ebf2386a64fde1c453fc60bb8d02a2fda412bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02e562027411e550d6df7b3d995d2235e0b0c98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e562027411e550d6df7b3d995d2235e0b0c98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e562027411e550d6df7b3d995d2235e0b0c98a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e562027411e550d6df7b3d995d2235e0b0c98a/comments", "author": null, "committer": null, "parents": [{"sha": "e445171e7c2f919578652f2755e9edab8201c4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e445171e7c2f919578652f2755e9edab8201c4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e445171e7c2f919578652f2755e9edab8201c4df"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "edb021d5ff63e413e8411ceb63bcbf61c48a66c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e562027411e550d6df7b3d995d2235e0b0c98a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e562027411e550d6df7b3d995d2235e0b0c98a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02e562027411e550d6df7b3d995d2235e0b0c98a", "patch": "@@ -1,3 +1,8 @@\n+Thu May  7 19:26:34 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* i386.md (movsicc, movhicc, movsicc_1, movhicc_1, movsfcc_1,\n+\tmovdfcc_1): Disable.\n+\n Thu May  7 15:39:14 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* configure.in (enable_threads): Rename to enable_threads_flag before"}, {"sha": "8baeddc000315561a2875e62b68c78c07f02f844", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e562027411e550d6df7b3d995d2235e0b0c98a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e562027411e550d6df7b3d995d2235e0b0c98a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=02e562027411e550d6df7b3d995d2235e0b0c98a", "patch": "@@ -7225,14 +7225,20 @@ byte_xor_operation:\n \n /* Conditional move define_insns.  */\n \n+;; These are all disabled, because they are buggy.  They are all susceptible\n+;; to problems with input reloads clobbering the condition code registers.\n+;; It appears the only safe way to write a integer/FP conditional move pattern\n+;; is to write one which emits both the compare and the cmov, and which can be\n+;; split only after reload.\n+\n (define_expand \"movsicc\"\n   [(match_dup 4)\n    (parallel [(set (match_operand 0 \"register_operand\" \"\")\n \t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"\")))\n    (clobber (match_scratch:SI 4 \"=&r\"))])]\n-  \"TARGET_CMOVE\"\n+  \"0 && TARGET_CMOVE\"\n   \"\n {\n   operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n@@ -7245,7 +7251,7 @@ byte_xor_operation:\n \t\t\t (match_operand:HI 2 \"general_operand\" \"\")\n \t\t\t (match_operand:HI 3 \"general_operand\" \"\")))\n    (clobber (match_scratch:SI 4 \"=&r\"))])]\n-  \"TARGET_CMOVE\"\n+  \"0 && TARGET_CMOVE\"\n   \"\n {\n   operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n@@ -7258,7 +7264,7 @@ byte_xor_operation:\n \t\t      (match_operand:SI 2 \"general_operand\" \"rm,0,rm,g\")\n \t\t      (match_operand:SI 3 \"general_operand\" \"0,rm,rm,g\")))\n    (clobber (match_scratch:SI 4 \"X,X,X,=&r\"))]\n-  \"TARGET_CMOVE\"\n+  \"0 && TARGET_CMOVE\"\n   \"*\n {\n   if (which_alternative == 0)\n@@ -7319,7 +7325,7 @@ byte_xor_operation:\n \t\t      (match_operand:HI 2 \"general_operand\" \"rm,0,rm,g\")\n \t\t      (match_operand:HI 3 \"general_operand\" \"0,rm,rm,g\")))\n    (clobber (match_scratch:SI 4 \"X,X,X,=&r\"))]\n-  \"TARGET_CMOVE\"\n+  \"0 && TARGET_CMOVE\"\n   \"*\n {\n   if (which_alternative == 0)\n@@ -7418,7 +7424,7 @@ byte_xor_operation:\n \t\t\t\t\t [(cc0) (const_int 0)])\n \t\t\t (match_operand:SF 2 \"register_operand\" \"0,f,f\")\n \t\t\t (match_operand:SF 3 \"register_operand\" \"f,0,f\")))]\n-  \"TARGET_CMOVE\"\n+  \"0 && TARGET_CMOVE\"\n   \"*\n {\n   switch (which_alternative)\n@@ -7449,7 +7455,7 @@ byte_xor_operation:\n \t\t\t\t\t [(cc0) (const_int 0)])\n \t\t\t (match_operand:DF 2 \"register_operand\" \"0,f,f\")\n \t\t\t (match_operand:DF 3 \"register_operand\" \"f,0,f\")))]\n-  \"TARGET_CMOVE\"\n+  \"0 && TARGET_CMOVE\"\n   \"*\n {\n   switch (which_alternative)"}]}