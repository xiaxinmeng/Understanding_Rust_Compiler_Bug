{"sha": "6a2dfd9a66a678b26c762d0fc614fea267ea706b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyZGZkOWE2NmE2NzhiMjZjNzYyZDBmYzYxNGZlYTI2N2VhNzA2Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-16T14:33:45Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-16T14:33:45Z"}, "message": "Make keyed_classes a vector.\n\n\t* cp-tree.h (CPTI_KEYED_CLASSES, keyed_classes): Delete.\n\t(keyed_classes): Declare as vector.\n\t* decl.c (keyed_classes): Define.\n\t(cxx_init_decl_processing): Allocate it.\n\t(record_key_method_defined): Use vec_safe_push.\n\t* class.c (finish_struct_1): Likewise.\n\t* pt.c (instantiate_class_template_1): Likewise.\n\t* decl2.c (c_parse_final_cleanups): Reverse iterate keyed_classes.\n\nFrom-SVN: r249263", "tree": {"sha": "71512245eb8338397e64115e91116c5af543c327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71512245eb8338397e64115e91116c5af543c327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a2dfd9a66a678b26c762d0fc614fea267ea706b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2dfd9a66a678b26c762d0fc614fea267ea706b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2dfd9a66a678b26c762d0fc614fea267ea706b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2dfd9a66a678b26c762d0fc614fea267ea706b/comments", "author": null, "committer": null, "parents": [{"sha": "8c1ca7ee3a35bf00201c6a82ccd5b663575328a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1ca7ee3a35bf00201c6a82ccd5b663575328a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1ca7ee3a35bf00201c6a82ccd5b663575328a7"}], "stats": {"total": 64, "additions": 24, "deletions": 40}, "files": [{"sha": "ebb46fbf38c20be66904ca1833c3b82dde3976c3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6a2dfd9a66a678b26c762d0fc614fea267ea706b", "patch": "@@ -7189,8 +7189,8 @@ finish_struct_1 (tree t)\n \t in every translation unit where the class definition appears.  If\n \t we're devirtualizing, we can look into the vtable even if we\n \t aren't emitting it.  */\n-      if (CLASSTYPE_KEY_METHOD (t) == NULL_TREE)\n-\tkeyed_classes = tree_cons (NULL_TREE, t, keyed_classes);\n+      if (!CLASSTYPE_KEY_METHOD (t))\n+\tvec_safe_push (keyed_classes, t);\n     }\n \n   /* Layout the class itself.  */"}, {"sha": "11250737ccb1a275e9de46b777991b09e933ac64", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6a2dfd9a66a678b26c762d0fc614fea267ea706b", "patch": "@@ -169,8 +169,6 @@ enum cp_tree_index\n     CPTI_DSO_HANDLE,\n     CPTI_DCAST,\n \n-    CPTI_KEYED_CLASSES,\n-\n     CPTI_NULLPTR,\n     CPTI_NULLPTR_TYPE,\n \n@@ -290,11 +288,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n    destructors.  */\n #define vtt_parm_type\t\t\tcp_global_trees[CPTI_VTT_PARM_TYPE]\n \n-/* A TREE_LIST of the dynamic classes whose vtables may have to be\n-   emitted in this translation unit.  */\n-\n-#define keyed_classes\t\t\tcp_global_trees[CPTI_KEYED_CLASSES]\n-\n /* A node which matches any template argument.  */\n #define any_targ_node\t\t\tcp_global_trees[CPTI_ANY_TARG]\n \n@@ -5107,6 +5100,10 @@ extern GTY(()) vec<tree, va_gc> *local_classes;\n /* An array of static vars & fns.  */\n extern GTY(()) vec<tree, va_gc> *static_decls;\n \n+/* An array of vtable-needing types that have no key function, or have\n+   an emitted key function.  */\n+extern GTY(()) vec<tree, va_gc> *keyed_classes;\n+\n \f\n /* Here's where we control how name mangling takes place.  */\n "}, {"sha": "04418a19ddfcbd0f28129932353c0003cf8a0407", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6a2dfd9a66a678b26c762d0fc614fea267ea706b", "patch": "@@ -160,6 +160,9 @@ tree integer_two_node;\n /* vector of static decls.  */\n vec<tree, va_gc> *static_decls;\n \n+/* vector of keyed classes.  */\n+vec<tree, va_gc> *keyed_classes;\n+\n /* Used only for jumps to as-yet undefined labels, since jumps to\n    defined labels can have their validity checked immediately.  */\n \n@@ -4064,6 +4067,9 @@ cxx_init_decl_processing (void)\n   /* Guess at the initial static decls size.  */\n   vec_alloc (static_decls, 500);\n \n+  /* ... and keyed classes.  */\n+  vec_alloc (keyed_classes, 100);\n+\n   record_builtin_type (RID_BOOL, \"bool\", boolean_type_node);\n   truthvalue_type_node = boolean_type_node;\n   truthvalue_false_node = boolean_false_node;\n@@ -15438,7 +15444,7 @@ record_key_method_defined (tree fndecl)\n     {\n       tree fnclass = DECL_CONTEXT (fndecl);\n       if (fndecl == CLASSTYPE_KEY_METHOD (fnclass))\n-\tkeyed_classes = tree_cons (NULL_TREE, fnclass, keyed_classes);\n+\tvec_safe_push (keyed_classes, fnclass);\n     }\n }\n "}, {"sha": "f9d588725c0051b96ef6e2559c0ced55a7e871de", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6a2dfd9a66a678b26c762d0fc614fea267ea706b", "patch": "@@ -4511,37 +4511,18 @@ c_parse_final_cleanups (void)\n       instantiate_pending_templates (retries);\n       ggc_collect ();\n \n-      /* Write out virtual tables as required.  Note that writing out\n-\t the virtual table for a template class may cause the\n+      /* Write out virtual tables as required.  Writing out the\n+\t virtual table for a template class may cause the\n \t instantiation of members of that class.  If we write out\n \t vtables then we remove the class from our list so we don't\n \t have to look at it again.  */\n-\n-      while (keyed_classes != NULL_TREE\n-\t     && maybe_emit_vtables (TREE_VALUE (keyed_classes)))\n-\t{\n-\t  reconsider = true;\n-\t  keyed_classes = TREE_CHAIN (keyed_classes);\n-\t}\n-\n-      t = keyed_classes;\n-      if (t != NULL_TREE)\n-\t{\n-\t  tree next = TREE_CHAIN (t);\n-\n-\t  while (next)\n-\t    {\n-\t      if (maybe_emit_vtables (TREE_VALUE (next)))\n-\t\t{\n-\t\t  reconsider = true;\n-\t\t  TREE_CHAIN (t) = TREE_CHAIN (next);\n-\t\t}\n-\t      else\n-\t\tt = next;\n-\n-\t      next = TREE_CHAIN (t);\n-\t    }\n-\t}\n+      for (i = keyed_classes->length ();\n+\t   keyed_classes->iterate (--i, &t);)\n+\tif (maybe_emit_vtables (t))\n+\t  {\n+\t    reconsider = true;\n+\t    keyed_classes->unordered_remove (i);\n+\t  }\n \n       /* Write out needed type info variables.  We have to be careful\n \t looping through unemitted decls, because emit_tinfo_decl may"}, {"sha": "91b98d4de9f7fc42ecd717dce63219cad7129bf6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dfd9a66a678b26c762d0fc614fea267ea706b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6a2dfd9a66a678b26c762d0fc614fea267ea706b", "patch": "@@ -10864,9 +10864,9 @@ instantiate_class_template_1 (tree type)\n   /* The vtable for a template class can be emitted in any translation\n      unit in which the class is instantiated.  When there is no key\n      method, however, finish_struct_1 will already have added TYPE to\n-     the keyed_classes list.  */\n+     the keyed_classes.  */\n   if (TYPE_CONTAINS_VPTR_P (type) && CLASSTYPE_KEY_METHOD (type))\n-    keyed_classes = tree_cons (NULL_TREE, type, keyed_classes);\n+    vec_safe_push (keyed_classes, type);\n \n   return type;\n }"}]}