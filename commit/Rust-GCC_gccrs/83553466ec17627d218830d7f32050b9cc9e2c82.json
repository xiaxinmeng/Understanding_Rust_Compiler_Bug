{"sha": "83553466ec17627d218830d7f32050b9cc9e2c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM1NTM0NjZlYzE3NjI3ZDIxODgzMGQ3ZjMyMDUwYjljYzllMmM4Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:13:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:13:03Z"}, "message": "[multiple changes]\n\n2013-10-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Provide a\n\tmore precise error message when pragma Refined_Pre applies to\n\tan expression function that is not a completion.\n\n2013-10-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_attr.adb (Analyse_Attribute, case\n\tAttribute_Scalar_Storage_Order): a 'Scalar_Storage_Order attribute\n\treference for a generic type is permitted in GNAT runtime mode.\n\t* a-sequio.adb (Read, Write): Use the endianness of the actual\n\ttype to encode length information written to the file.\n\nFrom-SVN: r203356", "tree": {"sha": "58dff54bc2ea931885cd4e286047bbea353af86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58dff54bc2ea931885cd4e286047bbea353af86e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83553466ec17627d218830d7f32050b9cc9e2c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83553466ec17627d218830d7f32050b9cc9e2c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83553466ec17627d218830d7f32050b9cc9e2c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83553466ec17627d218830d7f32050b9cc9e2c82/comments", "author": null, "committer": null, "parents": [{"sha": "e28072cdc85406f97fb06389639f5b9933101201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28072cdc85406f97fb06389639f5b9933101201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28072cdc85406f97fb06389639f5b9933101201"}], "stats": {"total": 112, "additions": 94, "deletions": 18}, "files": [{"sha": "df6f31c091417c66a0567271a9079acb059c6287", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=83553466ec17627d218830d7f32050b9cc9e2c82", "patch": "@@ -1,3 +1,17 @@\n+2013-10-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Provide a\n+\tmore precise error message when pragma Refined_Pre applies to\n+\tan expression function that is not a completion.\n+\n+2013-10-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_attr.adb (Analyse_Attribute, case\n+\tAttribute_Scalar_Storage_Order): a 'Scalar_Storage_Order attribute\n+\treference for a generic type is permitted in GNAT runtime mode.\n+\t* a-sequio.adb (Read, Write): Use the endianness of the actual\n+\ttype to encode length information written to the file.\n+\n 2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* par-ch13.adb (Aspect_Specifications_Present)): In earlier than"}, {"sha": "b9442e913d41240a8deabbd6f9782e372c017c1f", "filename": "gcc/ada/a-sequio.adb", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2Fa-sequio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2Fa-sequio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sequio.adb?ref=83553466ec17627d218830d7f32050b9cc9e2c82", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,13 +34,14 @@\n --  in System.File_IO (for common file functions), or in System.Sequential_IO\n --  (for specialized Sequential_IO functions)\n \n-with Interfaces.C_Streams; use Interfaces.C_Streams;\n+with Ada.Unchecked_Conversion;\n with System;\n with System.CRTL;\n with System.File_Control_Block;\n with System.File_IO;\n with System.Storage_Elements;\n-with Ada.Unchecked_Conversion;\n+with Interfaces.C_Streams; use Interfaces.C_Streams;\n+with GNAT.Byte_Swapping;\n \n package body Ada.Sequential_IO is\n \n@@ -57,8 +58,26 @@ package body Ada.Sequential_IO is\n    function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n    function To_SIO is new Ada.Unchecked_Conversion (FCB.File_Mode, File_Mode);\n \n+   use type System.Bit_Order;\n    use type System.CRTL.size_t;\n \n+   procedure Byte_Swap (Siz : in out size_t);\n+   --  Byte swap Siz\n+\n+   ---------------\n+   -- Byte_Swap --\n+   ---------------\n+\n+   procedure Byte_Swap (Siz : in out size_t) is\n+      use GNAT.Byte_Swapping;\n+   begin\n+      case Siz'Size is\n+         when 32     => Swap4 (Siz'Address);\n+         when 64     => Swap8 (Siz'Address);\n+         when others => raise Program_Error;\n+      end case;\n+   end Byte_Swap;\n+\n    -----------\n    -- Close --\n    -----------\n@@ -170,6 +189,10 @@ package body Ada.Sequential_IO is\n          FIO.Read_Buf\n            (AP (File), Rsiz'Address, size_t'Size / System.Storage_Unit);\n \n+         if Element_Type'Scalar_Storage_Order /= System.Default_Bit_Order then\n+            Byte_Swap (Rsiz);\n+         end if;\n+\n          --  For a type with discriminants, we have to read into a temporary\n          --  buffer if Item is constrained, to check that the discriminants\n          --  are correct.\n@@ -252,6 +275,10 @@ package body Ada.Sequential_IO is\n \n    procedure Write (File : File_Type; Item : Element_Type) is\n       Siz : constant size_t := (Item'Size + SU - 1) / SU;\n+      --  Size to be written, in native representation\n+\n+      Swapped_Siz : size_t := Siz;\n+      --  Same, possibly byte swapped to account for Element_Type endianness\n \n    begin\n       FIO.Check_Write_Status (AP (File));\n@@ -261,8 +288,12 @@ package body Ada.Sequential_IO is\n       if not Element_Type'Definite\n         or else Element_Type'Has_Discriminants\n       then\n+         if Element_Type'Scalar_Storage_Order /= System.Default_Bit_Order then\n+            Byte_Swap (Swapped_Siz);\n+         end if;\n+\n          FIO.Write_Buf\n-           (AP (File), Siz'Address, size_t'Size / System.Storage_Unit);\n+           (AP (File), Swapped_Siz'Address, size_t'Size / System.Storage_Unit);\n       end if;\n \n       FIO.Write_Buf (AP (File), Item'Address, Siz);"}, {"sha": "bc5139ff1e825f42568a8faab0f63165886d5197", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=83553466ec17627d218830d7f32050b9cc9e2c82", "patch": "@@ -5040,21 +5040,41 @@ package body Sem_Attr is\n       --------------------------\n \n       when Attribute_Scalar_Storage_Order => Scalar_Storage_Order :\n+      declare\n+         Ent : Entity_Id := Empty;\n       begin\n          Check_E0;\n          Check_Type;\n \n-         if not Is_Record_Type (P_Type) or else Is_Array_Type (P_Type) then\n-            Error_Attr_P\n-              (\"prefix of % attribute must be record or array type\");\n-         end if;\n+         if not (Is_Record_Type (P_Type) or else Is_Array_Type (P_Type)) then\n+\n+            --  In GNAT mode, the attribute applies to generic types as well\n+            --  as composite types, and for non-composite types always returns\n+            --  the default bit order for the target.\n+\n+            if not (GNAT_Mode and then Is_Generic_Type (P_Type))\n+                  and then not In_Instance\n+            then\n+               Error_Attr_P\n+                 (\"prefix of % attribute must be record or array type\");\n+\n+            elsif not Is_Generic_Type (P_Type) then\n+               if Bytes_Big_Endian then\n+                  Ent := RTE (RE_High_Order_First);\n+               else\n+                  Ent := RTE (RE_Low_Order_First);\n+               end if;\n+            end if;\n+\n+         elsif Bytes_Big_Endian xor Reverse_Storage_Order (P_Type) then\n+            Ent := RTE (RE_High_Order_First);\n \n-         if Bytes_Big_Endian xor Reverse_Storage_Order (P_Type) then\n-            Rewrite (N,\n-              New_Occurrence_Of (RTE (RE_High_Order_First), Loc));\n          else\n-            Rewrite (N,\n-              New_Occurrence_Of (RTE (RE_Low_Order_First), Loc));\n+            Ent := RTE (RE_Low_Order_First);\n+         end if;\n+\n+         if Present (Ent) then\n+            Rewrite (N, New_Occurrence_Of (Ent, Loc));\n          end if;\n \n          Set_Etype (N, RTE (RE_Bit_Order));"}, {"sha": "fa189aad9697012d4197f11c667ae7c75d1d7ca9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83553466ec17627d218830d7f32050b9cc9e2c82/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=83553466ec17627d218830d7f32050b9cc9e2c82", "patch": "@@ -15964,17 +15964,28 @@ package body Sem_Prag is\n                      Error_Msg_N (\"pragma % duplicates pragma declared #\", N);\n                   end if;\n \n-               --  Skip internally generated code\n-\n-               elsif not Comes_From_Source (Stmt) then\n-                  null;\n-\n                --  The pragma applies to a subprogram body stub\n \n                elsif Nkind (Stmt) = N_Subprogram_Body_Stub then\n                   Body_Decl := Stmt;\n                   exit;\n \n+               --  The pragma applies to an expression function that does not\n+               --  act as a completion of a previous function declaration.\n+\n+               elsif Nkind (Stmt) = N_Subprogram_Declaration\n+                 and then Nkind (Original_Node (Stmt)) = N_Expression_Function\n+                 and then not\n+                   Has_Completion (Defining_Unit_Name (Specification (Stmt)))\n+               then\n+                  Error_Pragma (\"pragma % cannot apply to a stand alone body\");\n+                  return;\n+\n+               --  Skip internally generated code\n+\n+               elsif not Comes_From_Source (Stmt) then\n+                  null;\n+\n                --  The pragma does not apply to a legal construct, issue an\n                --  error and stop the analysis.\n "}]}