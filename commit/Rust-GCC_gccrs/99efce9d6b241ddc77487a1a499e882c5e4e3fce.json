{"sha": "99efce9d6b241ddc77487a1a499e882c5e4e3fce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllZmNlOWQ2YjI0MWRkYzc3NDg3YTFhNDk5ZTg4MmM1ZTRlM2ZjZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-02-21T18:08:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-02-21T18:08:55Z"}, "message": "pa.md (const_double -> FP pattern): Remove cases which can neve happen anymore.\n\n\t* pa.md (const_double -> FP pattern): Remove cases which can neve\n\thappen anymore.\n\nFrom-SVN: r3509", "tree": {"sha": "1f553ad2892007080ee181e28a985e2a0a63f9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f553ad2892007080ee181e28a985e2a0a63f9f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99efce9d6b241ddc77487a1a499e882c5e4e3fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99efce9d6b241ddc77487a1a499e882c5e4e3fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99efce9d6b241ddc77487a1a499e882c5e4e3fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99efce9d6b241ddc77487a1a499e882c5e4e3fce/comments", "author": null, "committer": null, "parents": [{"sha": "d6c0d37780931a82f979aee0844eced3d97abdad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c0d37780931a82f979aee0844eced3d97abdad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c0d37780931a82f979aee0844eced3d97abdad"}], "stats": {"total": 31, "additions": 5, "deletions": 26}, "files": [{"sha": "d780323c222d41a18edd37429f77746ba1899176", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99efce9d6b241ddc77487a1a499e882c5e4e3fce/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99efce9d6b241ddc77487a1a499e882c5e4e3fce/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=99efce9d6b241ddc77487a1a499e882c5e4e3fce", "patch": "@@ -1164,27 +1164,14 @@\n ;; This pattern forces (set (reg:DF ...) (const_double ...))\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general movdf pattern.\n-;; In the 3rd alternative case -- we know we will not be using a \n-;; general register, so we can be sure length is just 1.\n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=?r,r,fx\")\n-\t(match_operand:DF 1 \"\" \"?E,G,m\"))]\n+  [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n+\t(match_operand:DF 1 \"\" \"m\"))]\n   \"GET_CODE (operands[1]) == CONST_DOUBLE\n    && operands[1] != CONST0_RTX (DFmode)\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return output_move_double (operands);\n-    case 1:\n-      return \\\"copy 0,%0\\;copy 0,%R0\\\";\n-    case 2:\n-      return output_fp_move_double (operands);\n-    }\n-}\"\n-  [(set_attr \"type\" \"load,move,fpload\")\n-   (set_attr \"length\" \"3,2,1\")])\n+  \"fldds%F1 %1,%0\"\n+  [(set_attr \"type\" \"fpload\")\n+   (set_attr \"length\" \"1\")])\n \n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n@@ -1504,8 +1491,6 @@\n ;; This pattern forces (set (reg:SF ...) (float:SF (const_int ...)))\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general floatsisf2 pattern.\n-;; Note length will always be 2 since we know we are loading\n-;; operand 1 from memory and the target is a FP register.\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n \t(float:SF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n@@ -1514,8 +1499,6 @@\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"2\")])\n \n-;; Note length will always be 1 since we only allow FP registers\n-;; for the source and target.\n (define_insn \"floatsisf2\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n \t(float:SF (match_operand:SI 1 \"register_operand\" \"fx\")))]\n@@ -1527,8 +1510,6 @@\n ;; This pattern forces (set (reg:DF ...) (float:DF (const_int ...)))\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general floatsidf2 pattern.\n-;; Note length will always be 2 since we know we are loading\n-;; operand 1 from memory and the target is a FP register.\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n \t(float:DF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n@@ -1537,8 +1518,6 @@\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"2\")])\n \n-;; Note length will always be 1 since we only allow FP registers\n-;; for the source and target.\n (define_insn \"floatsidf2\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n \t(float:DF (match_operand:SI 1 \"register_operand\" \"fx\")))]"}]}