{"sha": "415594bb5c49d69f5350401d07abac62bce8656a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1NTk0YmI1YzQ5ZDY5ZjUzNTA0MDFkMDdhYmFjNjJiY2U4NjU2YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-08T15:31:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-08T15:31:47Z"}, "message": "re PR c++/69631 (Bogus overflow in constant expression error)\n\n\tPR c++/69631\n\ngcc/\n\t* convert.c (convert_to_integer_1): Check dofold on truncation\n\tdistribution.\n\t(convert_to_pointer_maybe_fold, convert_to_real_maybe_fold)\n\t(convert_to_integer_maybe_fold, convert_to_complex_maybe_fold):\n\tRename from *_nofold.\n\t* convert.h (convert_to_pointer_nofold, convert_to_integer_nofold)\n\t(convert_to_real_nofold, convert_to_complex_nofold): New inlines.\ngcc/cp/\n\t* cp-tree.h (CONV_FOLD, CONV_BACKEND_CONVERT): New.\n\t* cvt.c (convert): Pass CONV_BACKEND_CONVERT.\n\t(ocp_convert): Use *_maybe_fold.\n\t(cp_convert_to_pointer): Add dofold parameter.\n\t* cp-gimplify.c (cp_fold) [CONVERT_EXPR]: Call convert.\n\nFrom-SVN: r233216", "tree": {"sha": "fffcfe2c7dae6ee698e378ab02e9cdf2d86a254e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fffcfe2c7dae6ee698e378ab02e9cdf2d86a254e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/415594bb5c49d69f5350401d07abac62bce8656a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415594bb5c49d69f5350401d07abac62bce8656a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/415594bb5c49d69f5350401d07abac62bce8656a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415594bb5c49d69f5350401d07abac62bce8656a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae9dd7f3f8219057b459356c8234bf4aa73f7e1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9dd7f3f8219057b459356c8234bf4aa73f7e1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9dd7f3f8219057b459356c8234bf4aa73f7e1e"}], "stats": {"total": 114, "additions": 74, "deletions": 40}, "files": [{"sha": "eef961c89638156d0848c4e8198e3e583c409ce0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -1,3 +1,14 @@\n+2016-02-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/69631\n+\t* convert.c (convert_to_integer_1): Check dofold on truncation\n+\tdistribution.\n+\t(convert_to_pointer_maybe_fold, convert_to_real_maybe_fold)\n+\t(convert_to_integer_maybe_fold, convert_to_complex_maybe_fold):\n+\tRename from *_nofold.\n+\t* convert.h (convert_to_pointer_nofold, convert_to_integer_nofold)\n+\t(convert_to_real_nofold, convert_to_complex_nofold): New inlines.\n+\n 2016-02-08  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/68730"}, {"sha": "dca1d2b67d4252106656247b1d67ce872632e22e", "filename": "gcc/convert.c", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -105,12 +105,12 @@ convert_to_pointer (tree type, tree expr)\n }\n \n /* A wrapper around convert_to_pointer_1 that only folds the\n-   expression if it is CONSTANT_CLASS_P.  */\n+   expression if DOFOLD, or if it is CONSTANT_CLASS_P.  */\n \n tree\n-convert_to_pointer_nofold (tree type, tree expr)\n+convert_to_pointer_maybe_fold (tree type, tree expr, bool dofold)\n {\n-  return convert_to_pointer_1 (type, expr, CONSTANT_CLASS_P (expr));\n+  return convert_to_pointer_1 (type, expr, dofold || CONSTANT_CLASS_P (expr));\n }\n \n /* Convert EXPR to some floating-point type TYPE.\n@@ -403,12 +403,12 @@ convert_to_real (tree type, tree expr)\n }\n \n /* A wrapper around convert_to_real_1 that only folds the\n-   expression if it is CONSTANT_CLASS_P.  */\n+   expression if DOFOLD, or if it is CONSTANT_CLASS_P.  */\n \n tree\n-convert_to_real_nofold (tree type, tree expr)\n+convert_to_real_maybe_fold (tree type, tree expr, bool dofold)\n {\n-  return convert_to_real_1 (type, expr, CONSTANT_CLASS_P (expr));\n+  return convert_to_real_1 (type, expr, dofold || CONSTANT_CLASS_P (expr));\n }\n \n /* Convert EXPR to some integer (or enum) type TYPE.\n@@ -669,6 +669,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t two narrow values can be combined in their narrow type even to\n \t make a wider result--are handled by \"shorten\" in build_binary_op.  */\n \n+      if (dofold)\n       switch (ex_form)\n \t{\n \tcase RSHIFT_EXPR:\n@@ -857,9 +858,6 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t  /* This is not correct for ABS_EXPR,\n \t     since we must test the sign before truncation.  */\n \t  {\n-\t    if (!dofold)\n-\t      break;\n-\n \t    /* Do the arithmetic in type TYPEX,\n \t       then convert result to TYPE.  */\n \t    tree typex = type;\n@@ -895,7 +893,6 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t     the conditional and never loses.  A COND_EXPR may have a throw\n \t     as one operand, which then has void type.  Just leave void\n \t     operands as they are.  */\n-\t  if (dofold)\n \t    return\n \t      fold_build3 (COND_EXPR, type, TREE_OPERAND (expr, 0),\n \t\t\t   VOID_TYPE_P (TREE_TYPE (TREE_OPERAND (expr, 1)))\n@@ -968,19 +965,13 @@ convert_to_integer (tree type, tree expr)\n   return convert_to_integer_1 (type, expr, true);\n }\n \n-/* Convert EXPR to some integer (or enum) type TYPE.\n-\n-   EXPR must be pointer, integer, discrete (enum, char, or bool), float,\n-   fixed-point or vector; in other cases error is called.\n-\n-   The result of this is always supposed to be a newly created tree node\n-   not in use in any existing structure.  The tree node isn't folded,\n-   beside EXPR is of constant class.  */\n+/* A wrapper around convert_to_complex_1 that only folds the\n+   expression if DOFOLD, or if it is CONSTANT_CLASS_P.  */\n \n tree\n-convert_to_integer_nofold (tree type, tree expr)\n+convert_to_integer_maybe_fold (tree type, tree expr, bool dofold)\n {\n-  return convert_to_integer_1 (type, expr, CONSTANT_CLASS_P (expr));\n+  return convert_to_integer_1 (type, expr, dofold || CONSTANT_CLASS_P (expr));\n }\n \n /* Convert EXPR to the complex type TYPE in the usual ways.  If FOLD_P is\n@@ -1059,12 +1050,12 @@ convert_to_complex (tree type, tree expr)\n }\n \n /* A wrapper around convert_to_complex_1 that only folds the\n-   expression if it is CONSTANT_CLASS_P.  */\n+   expression if DOFOLD, or if it is CONSTANT_CLASS_P.  */\n \n tree\n-convert_to_complex_nofold (tree type, tree expr)\n+convert_to_complex_maybe_fold (tree type, tree expr, bool dofold)\n {\n-  return convert_to_complex_1 (type, expr, CONSTANT_CLASS_P (expr));\n+  return convert_to_complex_1 (type, expr, dofold || CONSTANT_CLASS_P (expr));\n }\n \n /* Convert EXPR to the vector type TYPE in the usual ways.  */"}, {"sha": "bee280de78b52913358dbea15a03688fa10aacc8", "filename": "gcc/convert.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fconvert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fconvert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.h?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -21,14 +21,23 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_CONVERT_H\n \n extern tree convert_to_integer (tree, tree);\n-extern tree convert_to_integer_nofold (tree, tree);\n+extern tree convert_to_integer_maybe_fold (tree, tree, bool);\n extern tree convert_to_pointer (tree, tree);\n-extern tree convert_to_pointer_nofold (tree, tree);\n+extern tree convert_to_pointer_maybe_fold (tree, tree, bool);\n extern tree convert_to_real (tree, tree);\n-extern tree convert_to_real_nofold (tree, tree);\n+extern tree convert_to_real_maybe_fold (tree, tree, bool);\n extern tree convert_to_fixed (tree, tree);\n extern tree convert_to_complex (tree, tree);\n-extern tree convert_to_complex_nofold (tree, tree);\n+extern tree convert_to_complex_maybe_fold (tree, tree, bool);\n extern tree convert_to_vector (tree, tree);\n \n+extern inline tree convert_to_integer_nofold (tree t, tree x)\n+{ return convert_to_integer_maybe_fold (t, x, false); }\n+extern inline tree convert_to_pointer_nofold (tree t, tree x)\n+{ return convert_to_pointer_maybe_fold (t, x, false); }\n+extern inline tree convert_to_real_nofold (tree t, tree x)\n+{ return convert_to_real_maybe_fold (t, x, false); }\n+extern inline tree convert_to_complex_nofold (tree t, tree x)\n+{ return convert_to_complex_maybe_fold (t, x, false); }\n+\n #endif /* GCC_CONVERT_H */"}, {"sha": "470d82536f466a5744d22dc12d1d21d10f517c07", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -1,3 +1,11 @@\n+2016-02-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (CONV_FOLD, CONV_BACKEND_CONVERT): New.\n+\t* cvt.c (convert): Pass CONV_BACKEND_CONVERT.\n+\t(ocp_convert): Use *_maybe_fold.\n+\t(cp_convert_to_pointer): Add dofold parameter.\n+\t* cp-gimplify.c (cp_fold) [CONVERT_EXPR]: Call convert.\n+\n 2016-02-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69662"}, {"sha": "d83e9deed07acd8e8ed098ebae75f10debc2888b", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -1953,7 +1953,13 @@ cp_fold (tree x)\n       loc = EXPR_LOCATION (x);\n       op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), rval_ops);\n \n-      if (op0 != TREE_OPERAND (x, 0))\n+      if (code == CONVERT_EXPR\n+\t  && SCALAR_TYPE_P (TREE_TYPE (x))\n+\t  && op0 != void_node)\n+\t/* During parsing we used convert_to_*_nofold; re-convert now using the\n+\t   folding variants, since fold() doesn't do those transformations.  */\n+\tx = fold (convert (TREE_TYPE (x), op0));\n+      else if (op0 != TREE_OPERAND (x, 0))\n \t{\n \t  if (op0 == error_mark_node)\n \t    x = error_mark_node;"}, {"sha": "786927b51ac2589b7e39a8084455290d51a4e29a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -5019,10 +5019,12 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n #define CONV_PRIVATE\t 16\n /* #define CONV_NONCONVERTING 32 */\n #define CONV_FORCE_TEMP  64\n+#define CONV_FOLD\t 128\n #define CONV_OLD_CONVERT (CONV_IMPLICIT | CONV_STATIC | CONV_CONST \\\n \t\t\t  | CONV_REINTERPRET)\n #define CONV_C_CAST      (CONV_IMPLICIT | CONV_STATIC | CONV_CONST \\\n \t\t\t  | CONV_REINTERPRET | CONV_PRIVATE | CONV_FORCE_TEMP)\n+#define CONV_BACKEND_CONVERT (CONV_OLD_CONVERT | CONV_FOLD)\n \n /* Used by build_expr_type_conversion to indicate which types are\n    acceptable as arguments to the expression under consideration.  */"}, {"sha": "60362fd73c4989b8e847958d633e5b9f16c7fdaf", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -34,7 +34,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"convert.h\"\n \n-static tree cp_convert_to_pointer (tree, tree, tsubst_flags_t);\n static tree convert_to_pointer_force (tree, tree, tsubst_flags_t);\n static tree build_type_conversion (tree, tree);\n static tree build_up_reference (tree, tree, int, tree, tsubst_flags_t);\n@@ -50,7 +49,7 @@ static void diagnose_ref_binding (location_t, tree, tree, tree);\n \n    Here is a list of all the functions that assume that widening and\n    narrowing is always done with a NOP_EXPR:\n-     In convert.c, convert_to_integer[_nofold].\n+     In convert.c, convert_to_integer[_maybe_fold].\n      In c-typeck.c, build_binary_op_nodefault (boolean ops),\n \tand c_common_truthvalue_conversion.\n      In expr.c: expand_expr, for operands of a MULT_EXPR.\n@@ -70,7 +69,8 @@ static void diagnose_ref_binding (location_t, tree, tree, tree);\n    else try C-style pointer conversion.  */\n \n static tree\n-cp_convert_to_pointer (tree type, tree expr, tsubst_flags_t complain)\n+cp_convert_to_pointer (tree type, tree expr, bool dofold,\n+\t\t       tsubst_flags_t complain)\n {\n   tree intype = TREE_TYPE (expr);\n   enum tree_code form;\n@@ -185,7 +185,7 @@ cp_convert_to_pointer (tree type, tree expr, tsubst_flags_t complain)\n \t{\n \t  if (TREE_CODE (expr) == PTRMEM_CST)\n \t    return cp_convert_to_pointer (type, PTRMEM_CST_MEMBER (expr),\n-\t\t\t\t\t  complain);\n+\t\t\t\t\t  dofold, complain);\n \t  else if (TREE_CODE (expr) == OFFSET_REF)\n \t    {\n \t      tree object = TREE_OPERAND (expr, 0);\n@@ -237,7 +237,7 @@ cp_convert_to_pointer (tree type, tree expr, tsubst_flags_t complain)\n       gcc_assert (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (expr)))\n \t\t  == GET_MODE_SIZE (TYPE_MODE (type)));\n \n-      return convert_to_pointer_nofold (type, expr);\n+      return convert_to_pointer_maybe_fold (type, expr, dofold);\n     }\n \n   if (type_unknown_p (expr))\n@@ -296,7 +296,7 @@ convert_to_pointer_force (tree type, tree expr, tsubst_flags_t complain)\n \t}\n     }\n \n-  return cp_convert_to_pointer (type, expr, complain);\n+  return cp_convert_to_pointer (type, expr, /*fold*/false, complain);\n }\n \n /* We are passing something to a function which requires a reference.\n@@ -670,6 +670,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n   const char *invalid_conv_diag;\n   tree e1;\n   location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n+  bool dofold = (convtype & CONV_FOLD);\n \n   if (error_operand_p (e) || type == error_mark_node)\n     return error_mark_node;\n@@ -706,7 +707,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n       /* For complex data types, we need to perform componentwise\n \t conversion.  */\n       else if (TREE_CODE (type) == COMPLEX_TYPE)\n-\treturn convert_to_complex_nofold (type, e);\n+\treturn convert_to_complex_maybe_fold (type, e, dofold);\n       else if (VECTOR_TYPE_P (type))\n \treturn convert_to_vector (type, e);\n       else if (TREE_CODE (e) == TARGET_EXPR)\n@@ -799,7 +800,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \t  return cp_truthvalue_conversion (e);\n \t}\n \n-      converted = convert_to_integer_nofold (type, e);\n+      converted = convert_to_integer_maybe_fold (type, e, dofold);\n \n       /* Ignore any integer overflow caused by the conversion.  */\n       return ignore_overflows (converted, e);\n@@ -811,7 +812,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n       return nullptr_node;\n     }\n   if (POINTER_TYPE_P (type) || TYPE_PTRMEM_P (type))\n-    return cp_convert_to_pointer (type, e, complain);\n+    return cp_convert_to_pointer (type, e, dofold, complain);\n   if (code == VECTOR_TYPE)\n     {\n       tree in_vtype = TREE_TYPE (e);\n@@ -842,9 +843,9 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \t\t      TREE_TYPE (e));\n \t}\n       if (code == REAL_TYPE)\n-\treturn convert_to_real_nofold (type, e);\n+\treturn convert_to_real_maybe_fold (type, e, dofold);\n       else if (code == COMPLEX_TYPE)\n-\treturn convert_to_complex_nofold (type, e);\n+\treturn convert_to_complex_maybe_fold (type, e, dofold);\n     }\n \n   /* New C++ semantics:  since assignment is now based on\n@@ -1460,7 +1461,7 @@ convert (tree type, tree expr)\n   if (POINTER_TYPE_P (type) && POINTER_TYPE_P (intype))\n     return build_nop (type, expr);\n \n-  return ocp_convert (type, expr, CONV_OLD_CONVERT,\n+  return ocp_convert (type, expr, CONV_BACKEND_CONVERT,\n \t\t      LOOKUP_NORMAL|LOOKUP_NO_CONVERSION,\n \t\t      tf_warning_or_error);\n }"}, {"sha": "412535ce1eef481debbdbe1f4d3af334be5f1df0", "filename": "gcc/testsuite/g++.dg/delayedfold/fwrapv1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Ffwrapv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415594bb5c49d69f5350401d07abac62bce8656a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Ffwrapv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Ffwrapv1.C?ref=415594bb5c49d69f5350401d07abac62bce8656a", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/69631\n+// { dg-options -fwrapv }\n+\n+struct C {\n+  static const unsigned short max = static_cast<unsigned short>((32767 * 2 + 1));\n+};"}]}