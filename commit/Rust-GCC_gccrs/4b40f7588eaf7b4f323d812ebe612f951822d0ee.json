{"sha": "4b40f7588eaf7b4f323d812ebe612f951822d0ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0MGY3NTg4ZWFmN2I0ZjMyM2Q4MTJlYmU2MTJmOTUxODIyZDBlZQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-09-25T21:20:19Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-09-25T21:20:19Z"}, "message": "diagnostic.c (output_last_position): Define.\n\n\t* diagnostic.c (output_last_position): Define.\n\t(set_real_maximum_length): Tweek.\n\t* diagnostic.h (output_last_position): Declare.\n\nFrom-SVN: r36629", "tree": {"sha": "f128e42344fe386dab97b5430694219834c7bcd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f128e42344fe386dab97b5430694219834c7bcd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b40f7588eaf7b4f323d812ebe612f951822d0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b40f7588eaf7b4f323d812ebe612f951822d0ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b40f7588eaf7b4f323d812ebe612f951822d0ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b40f7588eaf7b4f323d812ebe612f951822d0ee/comments", "author": null, "committer": null, "parents": [{"sha": "0f2907682ea0bc5a977d66aa110fe3b30119d4bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2907682ea0bc5a977d66aa110fe3b30119d4bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2907682ea0bc5a977d66aa110fe3b30119d4bb"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "0e200f9c5516b9ceae627e1b120c222f4e672d13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b40f7588eaf7b4f323d812ebe612f951822d0ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b40f7588eaf7b4f323d812ebe612f951822d0ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b40f7588eaf7b4f323d812ebe612f951822d0ee", "patch": "@@ -1,3 +1,9 @@\n+2000-09-25  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.c (output_last_position): Define.\n+\t(set_real_maximum_length): Tweek.\n+\t* diagnostic.h (output_last_position): Declare.\n+\n 2000-09-25  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/i386/i386.c: Fix formatting."}, {"sha": "56ed9574bb99877bd315d262147bf24c06e58ccb", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b40f7588eaf7b4f323d812ebe612f951822d0ee/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b40f7588eaf7b4f323d812ebe612f951822d0ee/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=4b40f7588eaf7b4f323d812ebe612f951822d0ee", "patch": "@@ -230,8 +230,12 @@ static void\n set_real_maximum_length (buffer)\n      output_buffer *buffer;\n {\n-  /* If we're told not to wrap lines then do the obvious thing.  */\n-  if (! output_is_line_wrapping (buffer))\n+  /* If we're told not to wrap lines then do the obvious thing.  In case\n+   we'll emit prefix only once per diagnostic message, it is appropriate\n+  not to increase unncessarily the line-length cut-off.  */\n+  if (! output_is_line_wrapping (buffer)\n+      || prefixing_policy (buffer) == DIAGNOSTICS_SHOW_PREFIX_ONCE\n+      || prefixing_policy (buffer) == DIAGNOSTICS_SHOW_PREFIX_NEVER)\n     line_wrap_cutoff (buffer) = ideal_line_wrap_cutoff (buffer);\n   else\n     {\n@@ -271,6 +275,19 @@ output_set_prefix (buffer, prefix)\n   output_indentation (buffer) = 0;\n }\n \n+/*  Return a pointer to the last character emitted in the output\n+    BUFFER area.  A NULL pointer means no character available.  */\n+const char *\n+output_last_position (buffer)\n+     const output_buffer *buffer;\n+{\n+  const char *p = NULL;\n+  \n+  if (obstack_base (&buffer->obstack) != obstack_next_free (&buffer->obstack))\n+    p = ((const char *) obstack_next_free (&buffer->obstack)) - 1;\n+  return p;\n+}\n+\n /* Free BUFFER's prefix, a previously malloc'd string.  */\n \n void"}, {"sha": "8748929da116bb052faea948590e2d5b11049bc4", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b40f7588eaf7b4f323d812ebe612f951822d0ee/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b40f7588eaf7b4f323d812ebe612f951822d0ee/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=4b40f7588eaf7b4f323d812ebe612f951822d0ee", "patch": "@@ -176,6 +176,7 @@ void init_output_buffer\t\tPARAMS ((output_buffer *, const char *, int));\n void flush_diagnostic_buffer    PARAMS ((void));\n void output_clear\t\tPARAMS ((output_buffer *));\n const char *output_get_prefix\tPARAMS ((const output_buffer *));\n+const char *output_last_position PARAMS ((const output_buffer *));\n void output_set_prefix\t\tPARAMS ((output_buffer *, const char *));\n void output_destroy_prefix      PARAMS ((output_buffer *));\n void output_set_maximum_length  PARAMS ((output_buffer *, int));"}]}