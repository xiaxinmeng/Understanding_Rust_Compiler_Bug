{"sha": "47f339cf8d8fa88fb209221fd010b2db24470df2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmMzM5Y2Y4ZDhmYTg4ZmIyMDkyMjFmZDAxMGIyZGIyNDQ3MGRmMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-09-28T18:00:35Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-09-28T18:00:35Z"}, "message": "Add support for 3Dnow builtins\n\nFrom-SVN: r45863", "tree": {"sha": "ed3a0fd403af3666e62d6260eb780d02efdfc593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed3a0fd403af3666e62d6260eb780d02efdfc593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f339cf8d8fa88fb209221fd010b2db24470df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f339cf8d8fa88fb209221fd010b2db24470df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f339cf8d8fa88fb209221fd010b2db24470df2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f339cf8d8fa88fb209221fd010b2db24470df2/comments", "author": null, "committer": null, "parents": [{"sha": "ad91981212e1f9cf0c9b57a93f85e0a5cf1e096b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad91981212e1f9cf0c9b57a93f85e0a5cf1e096b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad91981212e1f9cf0c9b57a93f85e0a5cf1e096b"}], "stats": {"total": 691, "additions": 648, "deletions": 43}, "files": [{"sha": "aaaaa30da1cf9898e285e69566c582f17e828d39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47f339cf8d8fa88fb209221fd010b2db24470df2", "patch": "@@ -1,3 +1,34 @@\n+2001-09-25  Bernd Schmidt  <bernds@redhat.com>\n+\n+\tMostly from Graham Stott  <grahams@redhat.com>\n+\t* c-common.c (type_for_mode): Add support for V2SFmode.\n+\t* tree.c (build_common_tree_nodes_2): Likewise.\n+\t* tree.h (enum tree_index, global_trees): Likewise.\n+\t* config/i386/i386.c (x86_3dnow_a): New variable.\n+\t(override_options): Support 3Dnow extensions.\n+\t(bdesc_2arg, bdesc_1arg): Some SSE instructions are also part of\n+\tAthlon's version of 3Dnow.\n+\t(ix86_init_mmx_sse_builtins): Create 3Dnow builtins.\n+\t(ix86_expand_builtin): Handle them.\n+\t(ix86_hard_regno_mode_ok): Support V2SFmode if using 3Dnow.\n+\t* config/i386/i386.h (MASK_3DNOW, MASK_3DNOW_A, TARGET_3DNOW,\n+\tTARGET_3DNOW_A): New macros.\n+\t(TARGET_SWITCHES): Add 3Dnow switches.\n+\t(VALID_MMX_REG_MODE_3DNOW): New macro.\n+\t(VECTOR_MODE_SUPPORTED_P): Use it.\n+\t(enum ix86_builtins): Add entries for 3Dnow builtins.\n+\t* config/i386/i386.md (movv2sf_internal, movv2sf, pushv2sf, pf2id,\n+\tpf2iw, addv2sf3, subv2sf3, subrv2sf3, gtv2sf3, gev2sf3, eqv2sf3,\n+\tpfmaxv23sf3, pfminv2sf3, mulv2sf3, femms, prefetch_3dnow, prefetchw,\n+\tpfacc, pfnacc, pfpnacc, pi2fw, floatv2si2, pavgusb, pfrcpv2sf2,\n+\tpfrcpit1v2sf3, pfrcpit2v2sf3, pfrsqrtv2sf2, pfrsqit1v2sf3,\n+\tpmulhrwvhi3, pswapdv2si2, pswapdv2sf2): New patterns.\n+\t(mmx_pmovmskb, mmx_maskmovq, sse_movntdi, umulv4hi3_highpart,\n+\tmmx_uavgv8qi3, mmx_uavgv4hi3, mmx_psadbw, mmx_pinsrw, mmx_pextrw,\n+\tmmx_pshufw, umaxv8qi3, smaxv4hi3, uminv8qi3, sminv4hi3, sfence,\n+\tsfence_insn, prefetch): Make these available if TARGET_SSE or\n+\tTARGET_3DNOW_A.\n+\t\n Fri Sep 28 19:18:40 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386-protos.h (ix86_setup_incoming_varargs, ix86_va_arg,"}, {"sha": "190c338d5f96010615118ad38c20dd2b1a7212a9", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=47f339cf8d8fa88fb209221fd010b2db24470df2", "patch": "@@ -1347,6 +1347,8 @@ type_for_mode (mode, unsignedp)\n     return V4HI_type_node;\n   if (mode == TYPE_MODE (V8QI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n     return V8QI_type_node;\n+  if (mode == TYPE_MODE (V2SF_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n+    return V2SF_type_node;\n #endif\n \n   return 0;"}, {"sha": "f8b65daf5fd8d3e7b4afa8981faa0d53676930b5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 195, "deletions": 21, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=47f339cf8d8fa88fb209221fd010b2db24470df2", "patch": "@@ -323,6 +323,7 @@ const int x86_double_with_add = ~m_386;\n const int x86_use_bit_test = m_386;\n const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON | m_K6;\n const int x86_cmove = m_PPRO | m_ATHLON | m_PENT4;\n+const int x86_3dnow_a = m_ATHLON;\n const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON | m_PENT4;\n const int x86_branch_hints = m_PENT4;\n const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4;\n@@ -988,6 +989,15 @@ override_options ()\n   if (TARGET_SSE)\n     target_flags |= MASK_MMX;\n \n+  /* If it has 3DNow! it also has MMX so MMX is also turned on by -m3dnow */\n+  if (TARGET_3DNOW)\n+    {\n+      target_flags |= MASK_MMX;\n+      /* If we are targetting the Athlon architecture, enable the 3Dnow/MMX\n+\t extensions it adds.  */\n+      if (x86_3dnow_a & (1 << ix86_arch))\n+\ttarget_flags |= MASK_3DNOW_A;\n+    }\n   if ((x86_accumulate_outgoing_args & CPUMASK)\n       && !(target_flags & MASK_NO_ACCUMULATE_OUTGOING_ARGS)\n       && !optimize_size)\n@@ -10731,15 +10741,15 @@ static struct builtin_description bdesc_2arg[] =\n \n   { MASK_MMX, CODE_FOR_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, 0, 0 },\n   { MASK_MMX, CODE_FOR_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, 0, 0 },\n-  { MASK_SSE, CODE_FOR_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_mmx_anddi3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_nanddi3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_iordi3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_xordi3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, 0, 0 },\n \n-  { MASK_SSE, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, 0, 0 },\n-  { MASK_SSE, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, 0, 0 },\n   { MASK_MMX, CODE_FOR_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, 0, 0 },\n@@ -10748,10 +10758,10 @@ static struct builtin_description bdesc_2arg[] =\n   { MASK_MMX, CODE_FOR_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, 0, 0 },\n   { MASK_MMX, CODE_FOR_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, 0, 0 },\n \n-  { MASK_SSE, CODE_FOR_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, 0, 0 },\n-  { MASK_SSE, CODE_FOR_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, 0, 0 },\n-  { MASK_SSE, CODE_FOR_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, 0, 0 },\n-  { MASK_SSE, CODE_FOR_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_mmx_punpckhbw, \"__builtin_ia32_punpckhbw\", IX86_BUILTIN_PUNPCKHBW, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_punpckhwd, \"__builtin_ia32_punpckhwd\", IX86_BUILTIN_PUNPCKHWD, 0, 0 },\n@@ -10794,7 +10804,7 @@ static struct builtin_description bdesc_2arg[] =\n \n static struct builtin_description bdesc_1arg[] =\n {\n-  { MASK_SSE, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, 0, 0 },\n   { MASK_SSE, CODE_FOR_sse_movmskps, 0, IX86_BUILTIN_MOVMSKPS, 0, 0 },\n \n   { MASK_SSE, CODE_FOR_sqrtv4sf2, 0, IX86_BUILTIN_SQRTPS, 0, 0 },\n@@ -11034,6 +11044,40 @@ ix86_init_mmx_sse_builtins ()\n \t\t\t\t\t\t long_long_unsigned_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  tree v2si_ftype_v2sf\n+    = build_function_type (V2SI_type_node,\n+                           tree_cons (NULL_TREE, V2SF_type_node,\n+                                      endlink));\n+  tree v2sf_ftype_v2si\n+    = build_function_type (V2SF_type_node,\n+                           tree_cons (NULL_TREE, V2SI_type_node,\n+                                      endlink));\n+  tree v2si_ftype_v2si\n+    = build_function_type (V2SI_type_node,\n+                           tree_cons (NULL_TREE, V2SI_type_node,\n+                                      endlink));\n+  tree v2sf_ftype_v2sf\n+    = build_function_type (V2SF_type_node,\n+                           tree_cons (NULL_TREE, V2SF_type_node,\n+                                      endlink));\n+  tree v2sf_ftype_v2sf_v2sf\n+    = build_function_type (V2SF_type_node,\n+                           tree_cons (NULL_TREE, V2SF_type_node,\n+                                      tree_cons (NULL_TREE,\n+                                                 V2SF_type_node,\n+                                                 endlink)));\n+  tree v2si_ftype_v2sf_v2sf\n+    = build_function_type (V2SI_type_node,\n+                           tree_cons (NULL_TREE, V2SF_type_node,\n+                                      tree_cons (NULL_TREE,\n+                                                 V2SF_type_node,\n+                                                 endlink)));\n+\n+  tree void_ftype_pchar\n+    = build_function_type (void_type_node,\n+                           tree_cons (NULL_TREE, pchar_type_node,\n+                                      endlink));\n+\n   /* Add all builtins that are more or less simple operations on two\n      operands.  */\n   for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n@@ -11047,9 +11091,6 @@ ix86_init_mmx_sse_builtins ()\n \tcontinue;\n       mode = insn_data[d->icode].operand[1].mode;\n \n-      if (! TARGET_SSE && ! VALID_MMX_REG_MODE (mode))\n-\tcontinue;\n-\n       switch (mode)\n \t{\n \tcase V4SFmode:\n@@ -11121,10 +11162,10 @@ ix86_init_mmx_sse_builtins ()\n   def_builtin (MASK_SSE, \"__builtin_ia32_cvttps2pi\", v2si_ftype_v4sf, IX86_BUILTIN_CVTTPS2PI);\n   def_builtin (MASK_SSE, \"__builtin_ia32_cvttss2si\", int_ftype_v4sf, IX86_BUILTIN_CVTTSS2SI);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_pextrw\", int_ftype_v4hi_int, IX86_BUILTIN_PEXTRW);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_pinsrw\", v4hi_ftype_v4hi_int_int, IX86_BUILTIN_PINSRW);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_pextrw\", int_ftype_v4hi_int, IX86_BUILTIN_PEXTRW);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_pinsrw\", v4hi_ftype_v4hi_int_int, IX86_BUILTIN_PINSRW);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_maskmovq\", void_ftype_v8qi_v8qi_pchar, IX86_BUILTIN_MASKMOVQ);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_maskmovq\", void_ftype_v8qi_v8qi_pchar, IX86_BUILTIN_MASKMOVQ);\n \n   def_builtin (MASK_SSE, \"__builtin_ia32_loadaps\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADAPS);\n   def_builtin (MASK_SSE, \"__builtin_ia32_loadups\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADUPS);\n@@ -11139,14 +11180,14 @@ ix86_init_mmx_sse_builtins ()\n   def_builtin (MASK_SSE, \"__builtin_ia32_storelps\", v4sf_ftype_pv2si_v4sf, IX86_BUILTIN_STORELPS);\n \n   def_builtin (MASK_SSE, \"__builtin_ia32_movmskps\", int_ftype_v4sf, IX86_BUILTIN_MOVMSKPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_pmovmskb\", int_ftype_v8qi, IX86_BUILTIN_PMOVMSKB);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_pmovmskb\", int_ftype_v8qi, IX86_BUILTIN_PMOVMSKB);\n   def_builtin (MASK_SSE, \"__builtin_ia32_movntps\", void_ftype_pfloat_v4sf, IX86_BUILTIN_MOVNTPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_movntq\", void_ftype_pdi_di, IX86_BUILTIN_MOVNTQ);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_movntq\", void_ftype_pdi_di, IX86_BUILTIN_MOVNTQ);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_sfence\", void_ftype_void, IX86_BUILTIN_SFENCE);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_prefetch\", void_ftype_pchar_int, IX86_BUILTIN_PREFETCH);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_sfence\", void_ftype_void, IX86_BUILTIN_SFENCE);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_prefetch\", void_ftype_pchar_int, IX86_BUILTIN_PREFETCH);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_psadbw\", v4hi_ftype_v8qi_v8qi, IX86_BUILTIN_PSADBW);\n+  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_psadbw\", v4hi_ftype_v8qi_v8qi, IX86_BUILTIN_PSADBW);\n \n   def_builtin (MASK_SSE, \"__builtin_ia32_rcpps\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPPS);\n   def_builtin (MASK_SSE, \"__builtin_ia32_rcpss\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPSS);\n@@ -11157,6 +11198,38 @@ ix86_init_mmx_sse_builtins ()\n \n   def_builtin (MASK_SSE, \"__builtin_ia32_shufps\", v4sf_ftype_v4sf_v4sf_int, IX86_BUILTIN_SHUFPS);\n \n+  /* Original 3DNow!  */\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_femms\", void_ftype_void, IX86_BUILTIN_FEMMS);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pavgusb\", v8qi_ftype_v8qi_v8qi, IX86_BUILTIN_PAVGUSB);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pf2id\", v2si_ftype_v2sf, IX86_BUILTIN_PF2ID);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfacc\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFACC);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfadd\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFADD);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfcmpeq\", v2si_ftype_v2sf_v2sf, IX86_BUILTIN_PFCMPEQ);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfcmpge\", v2si_ftype_v2sf_v2sf, IX86_BUILTIN_PFCMPGE);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfcmpgt\", v2si_ftype_v2sf_v2sf, IX86_BUILTIN_PFCMPGT);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfmax\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFMAX);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfmin\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFMIN);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfmul\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFMUL);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfrcp\", v2sf_ftype_v2sf, IX86_BUILTIN_PFRCP);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfrcpit1\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFRCPIT1);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfrcpit2\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFRCPIT2);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfrsqrt\", v2sf_ftype_v2sf, IX86_BUILTIN_PFRSQRT);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfrsqit1\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFRSQIT1);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfsub\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFSUB);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pfsubr\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFSUBR);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pi2fd\", v2sf_ftype_v2si, IX86_BUILTIN_PI2FD);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_pmulhrw\", v4hi_ftype_v4hi_v4hi, IX86_BUILTIN_PMULHRW);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_prefetch_3dnow\", void_ftype_pchar, IX86_BUILTIN_PREFETCH_3DNOW);\n+  def_builtin (MASK_3DNOW, \"__builtin_ia32_prefetchw\", void_ftype_pchar, IX86_BUILTIN_PREFETCHW);\n+\n+  /* 3DNow! extension as used in the Athlon CPU.  */\n+  def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pf2iw\", v2si_ftype_v2sf, IX86_BUILTIN_PF2IW);\n+  def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pfnacc\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFNACC);\n+  def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pfpnacc\", v2sf_ftype_v2sf_v2sf, IX86_BUILTIN_PFPNACC);\n+  def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pi2fw\", v2sf_ftype_v2si, IX86_BUILTIN_PI2FW);\n+  def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pswapdsf\", v2sf_ftype_v2sf, IX86_BUILTIN_PSWAPDSF);\n+  def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pswapdsi\", v2si_ftype_v2si, IX86_BUILTIN_PSWAPDSI);\n+\n   /* Composite intrinsics.  */\n   def_builtin (MASK_SSE, \"__builtin_ia32_setps1\", v4sf_ftype_float, IX86_BUILTIN_SETPS1);\n   def_builtin (MASK_SSE, \"__builtin_ia32_setps\", v4sf_ftype_float_float_float_float, IX86_BUILTIN_SETPS);\n@@ -11179,7 +11252,7 @@ safe_vector_operand (x, mode)\n     return x;\n   x = gen_reg_rtx (mode);\n \n-  if (VALID_MMX_REG_MODE (mode))\n+  if (VALID_MMX_REG_MODE (mode) || VALID_MMX_REG_MODE_3DNOW (mode))\n     emit_insn (gen_mmx_clrdi (mode == DImode ? x\n \t\t\t      : gen_rtx_SUBREG (DImode, x, 0)));\n   else\n@@ -11739,6 +11812,107 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       emit_insn (pat);\n       return target;\n \n+    case IX86_BUILTIN_FEMMS:\n+      emit_insn (gen_femms ());\n+      return NULL_RTX;\n+\n+    case IX86_BUILTIN_PAVGUSB:\n+      return ix86_expand_binop_builtin (CODE_FOR_pavgusb, arglist, target);\n+\n+    case IX86_BUILTIN_PF2ID:\n+      return ix86_expand_unop_builtin (CODE_FOR_pf2id, arglist, target, 0);\n+\n+    case IX86_BUILTIN_PFACC:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfacc, arglist, target);\n+\n+    case IX86_BUILTIN_PFADD:\n+     return ix86_expand_binop_builtin (CODE_FOR_addv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFCMPEQ:\n+      return ix86_expand_binop_builtin (CODE_FOR_eqv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFCMPGE:\n+      return ix86_expand_binop_builtin (CODE_FOR_gev2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFCMPGT:\n+      return ix86_expand_binop_builtin (CODE_FOR_gtv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFMAX:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfmaxv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFMIN:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfminv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFMUL:\n+      return ix86_expand_binop_builtin (CODE_FOR_mulv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFRCP:\n+      return ix86_expand_unop_builtin (CODE_FOR_pfrcpv2sf2, arglist, target, 0);\n+\n+    case IX86_BUILTIN_PFRCPIT1:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfrcpit1v2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFRCPIT2:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfrcpit2v2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFRSQIT1:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfrsqit1v2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFRSQRT:\n+      return ix86_expand_unop_builtin (CODE_FOR_pfrsqrtv2sf2, arglist, target, 0);\n+\n+    case IX86_BUILTIN_PFSUB:\n+      return ix86_expand_binop_builtin (CODE_FOR_subv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PFSUBR:\n+      return ix86_expand_binop_builtin (CODE_FOR_subrv2sf3, arglist, target);\n+\n+    case IX86_BUILTIN_PI2FD:\n+      return ix86_expand_unop_builtin (CODE_FOR_floatv2si2, arglist, target, 0);\n+\n+    case IX86_BUILTIN_PMULHRW:\n+      return ix86_expand_binop_builtin (CODE_FOR_pmulhrwv4hi3, arglist, target);\n+\n+    case IX86_BUILTIN_PREFETCH_3DNOW:\n+      icode = CODE_FOR_prefetch_3dnow;\n+      arg0 = TREE_VALUE (arglist);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+      pat = GEN_FCN (icode) (copy_to_mode_reg (Pmode, op0));\n+      if (! pat)\n+        return NULL_RTX;\n+      emit_insn (pat);\n+      return NULL_RTX;\n+\n+    case IX86_BUILTIN_PREFETCHW:\n+      icode = CODE_FOR_prefetchw;\n+      arg0 = TREE_VALUE (arglist);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+      pat = GEN_FCN (icode) (copy_to_mode_reg (Pmode, op0));\n+      if (! pat)\n+        return NULL_RTX;\n+      emit_insn (pat);\n+      return NULL_RTX;\n+\n+    case IX86_BUILTIN_PF2IW:\n+      return ix86_expand_unop_builtin (CODE_FOR_pf2iw, arglist, target, 0);\n+\n+    case IX86_BUILTIN_PFNACC:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfnacc, arglist, target);\n+\n+    case IX86_BUILTIN_PFPNACC:\n+      return ix86_expand_binop_builtin (CODE_FOR_pfpnacc, arglist, target);\n+\n+    case IX86_BUILTIN_PI2FW:\n+      return ix86_expand_unop_builtin (CODE_FOR_pi2fw, arglist, target, 0);\n+\n+    case IX86_BUILTIN_PSWAPDSI:\n+      return ix86_expand_unop_builtin (CODE_FOR_pswapdv2si2, arglist, target, 0);\n+\n+    case IX86_BUILTIN_PSWAPDSF:\n+      return ix86_expand_unop_builtin (CODE_FOR_pswapdv2sf2, arglist, target, 0);\n+\n       /* Composite intrinsics.  */\n     case IX86_BUILTIN_SETPS1:\n       target = assign_386_stack_local (SFmode, 0);\n@@ -12055,7 +12229,7 @@ ix86_hard_regno_mode_ok (regno, mode)\n   if (SSE_REGNO_P (regno))\n     return VALID_SSE_REG_MODE (mode);\n   if (MMX_REGNO_P (regno))\n-    return VALID_MMX_REG_MODE (mode);\n+    return VALID_MMX_REG_MODE (mode) || VALID_MMX_REG_MODE_3DNOW (mode);\n   /* We handle both integer and floats in the general purpose registers.\n      In future we should be able to handle vector modes as well.  */\n   if (!VALID_INT_MODE_P (mode) && !VALID_FP_MODE_P (mode))"}, {"sha": "fc6f1c9386192d9ea82bd32d8131402d78ac2e96", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=47f339cf8d8fa88fb209221fd010b2db24470df2", "patch": "@@ -118,10 +118,12 @@ extern int target_flags;\n #define MASK_MMX\t\t0x00020000\t/* Support MMX regs/builtins */\n #define MASK_SSE\t\t0x00040000\t/* Support SSE regs/builtins */\n #define MASK_SSE2\t\t0x00080000\t/* Support SSE2 regs/builtins */\n-#define MASK_128BIT_LONG_DOUBLE 0x00100000\t/* long double size is 128bit */\n-#define MASK_MIX_SSE_I387\t0x00200000\t/* Mix SSE and i387 instructions */\n-#define MASK_64BIT\t\t0x00400000\t/* Produce 64bit code */\n-#define MASK_NO_RED_ZONE\t0x00800000\t/* Do not use red zone */\n+#define MASK_3DNOW\t\t0x00100000\t/* Support 3Dnow builtins */\n+#define MASK_3DNOW_A\t\t0x00200000\t/* Support Athlon 3Dnow builtins */\n+#define MASK_128BIT_LONG_DOUBLE 0x00400000\t/* long double size is 128bit */\n+#define MASK_MIX_SSE_I387\t0x00800000\t/* Mix SSE and i387 instructions */\n+#define MASK_64BIT\t\t0x01000000\t/* Produce 64bit code */\n+#define MASK_NO_RED_ZONE\t0x02000000\t/* Do not use red zone */\n \n /* Temporary codegen switches */\n #define MASK_INTEL_SYNTAX\t0x00000200\n@@ -264,6 +266,8 @@ extern const int x86_epilogue_using_move;\n #define TARGET_SSE2 ((target_flags & MASK_SSE2) != 0)\n #define TARGET_MIX_SSE_I387 ((target_flags & MASK_MIX_SSE_I387) != 0)\n #define TARGET_MMX ((target_flags & MASK_MMX) != 0)\n+#define TARGET_3DNOW ((target_flags & MASK_3DNOW) != 0)\n+#define TARGET_3DNOW_A ((target_flags & MASK_3DNOW_A) != 0)\n \n #define TARGET_RED_ZONE (!(target_flags & MASK_NO_RED_ZONE))\n \n@@ -335,6 +339,10 @@ extern const int x86_epilogue_using_move;\n   { \"mmx\",\t\t\t MASK_MMX, N_(\"Support MMX builtins\") },      \\\n   { \"no-mmx\",\t\t\t-MASK_MMX,\t\t\t\t      \\\n     N_(\"Do not support MMX builtins\") },\t\t\t\t      \\\n+  { \"3dnow\",                     MASK_3DNOW,\t\t\t\t      \\\n+    N_(\"Support 3DNow! builtins\") },\t\t\t\t\t      \\\n+  { \"no-3dnow\",                 -MASK_3DNOW,\t\t\t\t      \\\n+    N_(\"Do not support 3DNow! builtins\") },\t\t\t\t      \\\n   { \"sse\",\t\t\t MASK_SSE,\t\t\t\t      \\\n     N_(\"Support MMX and SSE builtins and code generation\") },\t\t      \\\n   { \"no-sse\",\t\t\t-MASK_SSE,\t\t\t\t      \\\n@@ -918,13 +926,17 @@ extern int ix86_arch;\n      || (MODE) == SFmode \\\n      || (TARGET_SSE2 && ((MODE) == DFmode || VALID_MMX_REG_MODE (MODE))))\n \n+#define VALID_MMX_REG_MODE_3DNOW(MODE) \\\n+    ((MODE) == V2SFmode || (MODE) == SFmode)\n+\n #define VALID_MMX_REG_MODE(MODE) \\\n     ((MODE) == DImode || (MODE) == V8QImode || (MODE) == V4HImode \\\n      || (MODE) == V2SImode || (MODE) == SImode)\n \n #define VECTOR_MODE_SUPPORTED_P(MODE)\t\t\t\t\t\\\n     (VALID_SSE_REG_MODE (MODE) && TARGET_SSE ? 1\t\t\t\\\n-     : VALID_MMX_REG_MODE (MODE) && TARGET_MMX ? 1 : 0)\n+     : VALID_MMX_REG_MODE (MODE) && TARGET_MMX ? 1\t\t\t\\\n+     : VALID_MMX_REG_MODE_3DNOW (MODE) && TARGET_3DNOW ? 1 : 0)\n \n #define VALID_FP_MODE_P(mode) \\\n     ((mode) == SFmode || (mode) == DFmode || (mode) == TFmode\t\\\n@@ -2204,6 +2216,38 @@ enum ix86_builtins\n   IX86_BUILTIN_SFENCE,\n   IX86_BUILTIN_PREFETCH,\n \n+  /* 3DNow! Original */\n+  IX86_BUILTIN_FEMMS,\n+  IX86_BUILTIN_PAVGUSB,\n+  IX86_BUILTIN_PF2ID,\n+  IX86_BUILTIN_PFACC,\n+  IX86_BUILTIN_PFADD,\n+  IX86_BUILTIN_PFCMPEQ,\n+  IX86_BUILTIN_PFCMPGE,\n+  IX86_BUILTIN_PFCMPGT,\n+  IX86_BUILTIN_PFMAX,\n+  IX86_BUILTIN_PFMIN,\n+  IX86_BUILTIN_PFMUL,\n+  IX86_BUILTIN_PFRCP,\n+  IX86_BUILTIN_PFRCPIT1,\n+  IX86_BUILTIN_PFRCPIT2,\n+  IX86_BUILTIN_PFRSQIT1,\n+  IX86_BUILTIN_PFRSQRT,\n+  IX86_BUILTIN_PFSUB,\n+  IX86_BUILTIN_PFSUBR,\n+  IX86_BUILTIN_PI2FD,\n+  IX86_BUILTIN_PMULHRW,\n+  IX86_BUILTIN_PREFETCH_3DNOW, /* PREFETCH already used */\n+  IX86_BUILTIN_PREFETCHW,\n+\n+  /* 3DNow! Athlon Extensions */\n+  IX86_BUILTIN_PF2IW,\n+  IX86_BUILTIN_PFNACC,\n+  IX86_BUILTIN_PFPNACC,\n+  IX86_BUILTIN_PI2FW,\n+  IX86_BUILTIN_PSWAPDSI,\n+  IX86_BUILTIN_PSWAPDSF,\n+\n   /* Composite builtins, expand to more than one insn.  */\n   IX86_BUILTIN_SETPS1,\n   IX86_BUILTIN_SETPS,"}, {"sha": "3b98788b67aa1b0a1bcc16981d7799cd48535723", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 364, "deletions": 17, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=47f339cf8d8fa88fb209221fd010b2db24470df2", "patch": "@@ -92,6 +92,15 @@\n ;; 43 This is a `rsqsrt' operation.\n ;; 44 This is a `sfence' operation.\n ;; 45 This is a noop to prevent excessive combiner cleverness.\n+;; 46 This is a `femms' operation.\n+;; 47 This is a `prefetch' (3DNow) operation.\n+;; 48 This is a `prefetchw' operation.\n+;; 49 This is a 'pavgusb' operation.\n+;; 50 This is a `pfrcp' operation.\n+;; 51 This is a `pfrcpit1' operation.\n+;; 52 This is a `pfrcpit2' operation.\n+;; 53 This is a `pfrsqrt' operation.\n+;; 54 This is a `pfrsqrit1' operation.\n \n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls\n ;; from i386.c.\n@@ -17455,6 +17464,13 @@\n   \"movq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmx\")])\n \n+(define_insn \"movv2sf_internal\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=y,m\")\n+        (match_operand:V2SF 1 \"general_operand\" \"ym,y\"))]\n+  \"TARGET_3DNOW\"\n+  \"movq\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n (define_expand \"movti\"\n   [(set (match_operand:TI 0 \"general_operand\" \"\")\n \t(match_operand:TI 1 \"general_operand\" \"\"))]\n@@ -17641,6 +17657,40 @@\n     }\n })\n \n+(define_expand \"movv2sf\"\n+  [(set (match_operand:V2SF 0 \"general_operand\" \"\")\n+\t(match_operand:V2SF 1 \"general_operand\" \"\"))]\n+   \"TARGET_3DNOW\"\n+   \"\n+{\n+  /* For constants other than zero into memory.  We do not know how the\n+     instructions used to build constants modify the upper 64 bits\n+     of the register, once we have that information we may be able\n+     to handle some of them more efficiently.  */\n+  if ((reload_in_progress | reload_completed) == 0\n+      && register_operand (operands[0], V2SFmode)\n+      && CONSTANT_P (operands[1]))\n+    {\n+      rtx addr = gen_reg_rtx (Pmode);\n+\n+      emit_move_insn (addr,\n+\t\t      XEXP (force_const_mem (V2SFmode, operands[1]), 0));\n+      operands[1] = gen_rtx_MEM (V2SFmode, addr);\n+   }\n+\n+  /* Make operand1 a register is it isn't already.  */\n+  if ((reload_in_progress | reload_completed) == 0\n+      && !register_operand (operands[0], V2SFmode)\n+      && !register_operand (operands[1], V2SFmode)\n+      && (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n+      && operands[1] != CONST0_RTX (V2SFmode))\n+   {\n+      rtx temp = force_reg (V2SFmode, operands[1]);\n+      emit_move_insn (operands[0], temp);\n+      DONE;\n+    }\n+}\")\n+\n (define_insn_and_split \"*pushti\"\n   [(set (match_operand:TI 0 \"push_operand\" \"=<\")\n \t(match_operand:TI 1 \"nonmemory_operand\" \"x\"))]\n@@ -17707,6 +17757,17 @@\n   \"\"\n   [(set_attr \"type\" \"mmx\")])\n \n+(define_insn_and_split \"*pushv2sf\"\n+  [(set (match_operand:V2SF 0 \"push_operand\" \"=<\")\n+\t(match_operand:V2SF 1 \"nonmemory_operand\" \"y\"))]\n+  \"TARGET_3DNOW\"\n+  \"#\"\n+  \"\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n+   (set (mem:V2SF (reg:SI 7)) (match_dup 1))]\n+  \"\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n (define_insn \"movti_internal\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,m\")\n \t(match_operand:TI 1 \"general_operand\" \"xm,x\"))]\n@@ -17749,15 +17810,15 @@\n (define_insn \"mmx_pmovmskb\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(match_operand:V8QI 1 \"register_operand\" \"y\")] 33))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pmovmskb\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"mmx_maskmovq\"\n   [(set (mem:V8QI (match_operand:SI 0 \"register_operand\" \"D\"))\n \t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n \t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")] 32))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   ;; @@@ check ordering of operands in intel/nonintel syntax\n   \"maskmovq\\t{%2, %1|%1, %2}\"\n   [(set_attr \"type\" \"sse\")])\n@@ -17772,7 +17833,7 @@\n (define_insn \"sse_movntdi\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"y\")] 34))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"movntq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18535,7 +18596,7 @@\n \t  (mult:V4SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"0\"))\n \t\t     (zero_extend:V4SI (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n \t  (const_int 16))))]\n-  \"TARGET_MMX\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pmulhuw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")])\n \n@@ -18628,7 +18689,7 @@\n \t\t\t\t\t       (const_int 1)\n \t\t\t\t\t       (const_int 1)])))\n \t (const_int 1)))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pavgb\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18643,15 +18704,15 @@\n \t\t\t\t\t       (const_int 1)\n \t\t\t\t\t       (const_int 1)])))\n \t (const_int 1)))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pavgw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"mmx_psadbw\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n         (abs:V8QI (minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n \t\t\t      (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\"))))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"psadbw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18664,7 +18725,7 @@\n \t\t\t(vec_duplicate:V4HI\n \t\t\t (truncate:HI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n \t\t\t(match_operand:SI 3 \"immediate_operand\" \"i\")))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18673,7 +18734,7 @@\n         (zero_extend:SI (vec_select:HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n \t\t\t\t       (parallel\n \t\t\t\t\t[(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pextrw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18682,7 +18743,7 @@\n         (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"0\")\n \t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n \t\t      (match_operand:SI 3 \"immediate_operand\" \"i\")] 41))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pshufw\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18744,31 +18805,31 @@\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n         (umax:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pmaxub\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"smaxv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n         (smax:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pmaxsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"uminv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n         (umin:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pminub\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"sminv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n         (smin:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pminsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -19031,7 +19092,7 @@\n (define_expand \"sfence\"\n   [(set (match_dup 0)\n \t(unspec:BLK [(match_dup 0)] 44))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n {\n   operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n   MEM_VOLATILE_P (operands[0]) = 1;\n@@ -19040,15 +19101,15 @@\n (define_insn \"*sfence_insn\"\n   [(set (match_operand:BLK 0 \"\" \"\")\n \t(unspec:BLK [(match_dup 0)] 44))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"sfence\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"memory\" \"unknown\")])\n \n (define_insn \"prefetch\"\n   [(unspec [(match_operand:SI 0 \"address_operand\" \"p\")\n \t    (match_operand:SI 1 \"immediate_operand\" \"n\")] 35)]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n {\n   switch (INTVAL (operands[1]))\n     {\n@@ -19126,3 +19187,289 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"modrm\" \"0\")\n    (set_attr \"mode\" \"DI\")])\n+\n+;; 3Dnow! instructions\n+\n+(define_insn \"addv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(plus:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfadd\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"subv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (minus:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfsub\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"subrv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (minus:V2SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")\n+                    (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfsubr\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"gtv2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(gt:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+ \"TARGET_3DNOW\"\n+  \"pfcmpgt\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"gev2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(ge:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfcmpge\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"eqv2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(eq:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfcmpeq\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfmaxv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (smax:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+                   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfmax\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfminv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (smin:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+                   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfmin\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"mulv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(mult:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfmul\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"femms\"\n+  [(unspec_volatile [(const_int 0)] 46)\n+   (clobber (reg:XF 8))\n+   (clobber (reg:XF 9))\n+   (clobber (reg:XF 10))\n+   (clobber (reg:XF 11))\n+   (clobber (reg:XF 12))\n+   (clobber (reg:XF 13))\n+   (clobber (reg:XF 14))\n+   (clobber (reg:XF 15))\n+   (clobber (reg:DI 29))\n+   (clobber (reg:DI 30))\n+   (clobber (reg:DI 31))\n+   (clobber (reg:DI 32))\n+   (clobber (reg:DI 33))\n+   (clobber (reg:DI 34))\n+   (clobber (reg:DI 35))\n+   (clobber (reg:DI 36))]\n+  \"TARGET_3DNOW\"\n+  \"femms\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"prefetch_3dnow\"\n+  [(unspec [(match_operand:SI 0 \"address_operand\" \"p\")] 47)]\n+  \"TARGET_3DNOW\"\n+  \"prefetch\\\\t%a0\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"prefetchw\"\n+  [(unspec [(match_operand:SI 0 \"address_operand\" \"p\")] 48)]\n+  \"TARGET_3DNOW\"\n+  \"prefetchw\\\\t%a0\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pf2id\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(fix:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pf2id\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pf2iw\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(sign_extend:V2SI\n+\t   (ss_truncate:V2HI\n+\t      (fix:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")))))]\n+  \"TARGET_3DNOW_A\"\n+  \"pf2iw\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfacc\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V2SF\n+\t   (plus:SF\n+\t      (vec_select:SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t\t     (parallel [(const_int  0)]))\n+\t      (vec_select:SF (match_dup 1)\n+\t\t\t     (parallel [(const_int 1)])))\n+           (plus:SF\n+              (vec_select:SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"y\")\n+\t\t\t     (parallel [(const_int  0)]))\n+              (vec_select:SF (match_dup 2)\n+\t\t\t     (parallel [(const_int 1)])))))]\n+  \"TARGET_3DNOW\"\n+  \"pfacc\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfnacc\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+  \t(vec_concat:V2SF\n+           (minus:SF\n+              (vec_select:SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t\t     (parallel [(const_int 0)]))\n+              (vec_select:SF (match_dup 1)\n+\t\t\t     (parallel [(const_int 1)])))\n+           (minus:SF\n+              (vec_select:SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"y\")\n+\t\t\t     (parallel [(const_int  0)]))\n+              (vec_select:SF (match_dup 2)\n+\t\t\t     (parallel [(const_int 1)])))))]\n+  \"TARGET_3DNOW_A\"\n+  \"pfnacc\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfpnacc\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (vec_concat:V2SF\n+           (minus:SF\n+              (vec_select:SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t\t     (parallel [(const_int 0)]))\n+              (vec_select:SF (match_dup 1)\n+\t\t\t     (parallel [(const_int 1)])))\n+           (plus:SF\n+              (vec_select:SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"y\")\n+\t\t\t     (parallel [(const_int 0)]))\n+              (vec_select:SF (match_dup 2)\n+\t\t\t     (parallel [(const_int 1)])))))]\n+  \"TARGET_3DNOW_A\"\n+  \"pfpnacc\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pi2fw\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(float:V2SF\n+\t   (vec_concat:V2SI\n+\t      (sign_extend:SI\n+\t\t (truncate:HI\n+\t\t    (vec_select:SI (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")\n+\t\t\t\t   (parallel [(const_int 0)]))))\n+              (sign_extend:SI\n+\t\t (truncate:HI\n+                    (vec_select:SI (match_dup 1)\n+\t\t\t\t   (parallel [(const_int  1)])))))))]\n+  \"TARGET_3DNOW_A\"\n+  \"pi2fw\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"floatv2si2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(float:V2SF (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pi2fd\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+;; This insn is identical to pavgb in operation, but the opcode is\n+;; different.  To avoid accidentally matching pavgb, use an unspec.\n+\n+(define_insn \"pavgusb\"\n+ [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+       (unspec:V8QI\n+          [(match_operand:V8QI 1 \"register_operand\" \"0\")\n+           (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")] 49))]\n+  \"TARGET_3DNOW\"\n+  \"pavgusb\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+;; 3DNow reciprical and sqrt\n+ \n+(define_insn \"pfrcpv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (unspec:V2SF [(match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")] 50))]\n+  \"TARGET_3DNOW\"\n+  \"pfrcp\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfrcpit1v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")] 51))]\n+  \"TARGET_3DNOW\"\n+  \"pfrcpit1\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfrcpit2v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")] 52))]\n+  \"TARGET_3DNOW\"\n+  \"pfrcpit2\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pfrsqrtv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")] 53))]\n+  \"TARGET_3DNOW\"\n+   \"pfrsqrt\\\\t{%1, %0|%0, %1}\"\n+   [(set_attr \"type\" \"mmx\")])\n+\t\t\n+(define_insn \"pfrsqit1v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")] 54))]\n+  \"TARGET_3DNOW\"\n+  \"pfrsqit1\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pmulhrwv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t   (lshiftrt:V4SI\n+\t      (plus:V4SI\n+\t         (mult:V4SI\n+\t            (sign_extend:V4SI\n+\t\t       (match_operand:V4HI 1 \"register_operand\" \"0\"))\n+\t            (sign_extend:V4SI\n+\t\t       (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n+\t      (vec_const:V4SI\n+\t         (parallel [(const_int 0x8000)\n+\t\t\t    (const_int 0x8000)\n+\t\t\t    (const_int 0x8000)\n+\t\t\t    (const_int 0x8000)])))\n+\t   (const_int 16))))]\n+  \"TARGET_3DNOW\"\n+  \"pmulhrw\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pswapdv2si2\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")\n+\t\t\t (parallel [(const_int 1) (const_int 0)])))]\n+  \"TARGET_3DNOW_A\"\n+  \"pswapd\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])\n+\n+(define_insn \"pswapdv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")\n+\t\t\t (parallel [(const_int 1) (const_int 0)])))]\n+  \"TARGET_3DNOW_A\"\n+  \"pswapd\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")])"}, {"sha": "62b07600497a8dbdd7584303a2ffac8edf758062", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=47f339cf8d8fa88fb209221fd010b2db24470df2", "patch": "@@ -4877,4 +4877,9 @@ build_common_tree_nodes_2 (short_double)\n   TREE_TYPE (V8QI_type_node) = intQI_type_node;\n   TYPE_MODE (V8QI_type_node) = V8QImode;\n   finish_vector_type (V8QI_type_node);\n+\n+  V2SF_type_node = make_node (VECTOR_TYPE);\n+  TREE_TYPE (V2SF_type_node) = float_type_node;\n+  TYPE_MODE (V2SF_type_node) = V2SFmode;\n+  finish_vector_type (V2SF_type_node);\n }"}, {"sha": "d4306a88eda7b8a2ef4164ec3b173348df218d03", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f339cf8d8fa88fb209221fd010b2db24470df2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=47f339cf8d8fa88fb209221fd010b2db24470df2", "patch": "@@ -1846,6 +1846,7 @@ enum tree_index\n   TI_V8QI_TYPE,\n   TI_V4HI_TYPE,\n   TI_V2SI_TYPE,\n+  TI_V2SF_TYPE,\n \n   TI_MAIN_IDENTIFIER,\n \n@@ -1911,6 +1912,7 @@ extern tree global_trees[TI_MAX];\n #define V8QI_type_node\t\t\tglobal_trees[TI_V8QI_TYPE]\n #define V4HI_type_node\t\t\tglobal_trees[TI_V4HI_TYPE]\n #define V2SI_type_node\t\t\tglobal_trees[TI_V2SI_TYPE]\n+#define V2SF_type_node\t\t\tglobal_trees[TI_V2SF_TYPE]\n \n /* An enumeration of the standard C integer types.  These must be\n    ordered so that shorter types appear before longer ones.  */"}]}