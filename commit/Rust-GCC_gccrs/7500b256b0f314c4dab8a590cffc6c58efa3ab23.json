{"sha": "7500b256b0f314c4dab8a590cffc6c58efa3ab23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwMGIyNTZiMGYzMTRjNGRhYjhhNTkwY2ZmYzZjNThlZmEzYWIyMw==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-05-08T01:23:01Z"}, "committer": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2014-05-08T01:23:01Z"}, "message": "re PR middle-end/39246 (FAIL: gcc.dg/uninit-13.c)\n\n2014-05-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n        PR middle-end/39246\n        * tree-complex.c (expand_complex_move): Keep line info when expanding\n        complex move.\n        * tree-ssa-uninit.c (warn_uninit): New argument. Ignore assignment \n        of complex expression. Use new argument to display correct location \n        for values coming from phi statement.\n        (warn_uninitialized_vars): Adapt to new signature of warn_uninit.\n        (warn_uninitialized_phi): Pass location of phi argument to \n        warn_uninit.\n        * tree-ssa.c (ssa_undefined_value_p): For SSA_NAME initialized by a\n        COMPLEX_EXPR, recurse on each part of the COMPLEX_EXPR.\n\ntestsuite:\n\n        * gcc.dg/uninit-13.c: Move warning on the actual source line where\n        the uninitialized complex is used.\n        * gcc.dg/uninit-17.c: New test to check partial initialization of\n        complex with branches.\n        * gcc.dg/uninit-17-O0.c: Likewise.\n\nFrom-SVN: r210200", "tree": {"sha": "50791434e4b094eb34bb271837000e548a1948dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50791434e4b094eb34bb271837000e548a1948dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7500b256b0f314c4dab8a590cffc6c58efa3ab23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7500b256b0f314c4dab8a590cffc6c58efa3ab23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7500b256b0f314c4dab8a590cffc6c58efa3ab23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7500b256b0f314c4dab8a590cffc6c58efa3ab23/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1ec47c453e0d7cb4e62d1d1f6c0efb43cc0bfb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1ec47c453e0d7cb4e62d1d1f6c0efb43cc0bfb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1ec47c453e0d7cb4e62d1d1f6c0efb43cc0bfb5"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "0eaef0533676cdd26e05696edb5921850b630222", "filename": "gcc/testsuite/gcc.dg/uninit-17-O0.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7500b256b0f314c4dab8a590cffc6c58efa3ab23/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-17-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7500b256b0f314c4dab8a590cffc6c58efa3ab23/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-17-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-17-O0.c?ref=7500b256b0f314c4dab8a590cffc6c58efa3ab23", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+typedef _Complex float C;\n+C foo(int cond)\n+{\n+  C f;\n+  __imag__ f = 0;\n+  if (cond)\n+    {\n+      __real__ f = 1;\n+      return f;\n+    }\n+  return f;\n+}"}, {"sha": "8a95f15c5ae6c19421abb9a5301061b1d46e4374", "filename": "gcc/testsuite/gcc.dg/uninit-17.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7500b256b0f314c4dab8a590cffc6c58efa3ab23/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7500b256b0f314c4dab8a590cffc6c58efa3ab23/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-17.c?ref=7500b256b0f314c4dab8a590cffc6c58efa3ab23", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+typedef _Complex float C;\n+C foo(int cond)\n+{\n+  C f;\n+  __imag__ f = 0;\n+  if (cond)\n+    {\n+      __real__ f = 1;\n+      return f;\n+    }\n+  return f;\t/* { dg-warning \"may be used\" \"unconditional\" } */\n+}"}]}