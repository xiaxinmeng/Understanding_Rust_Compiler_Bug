{"sha": "b2cf76f3a58d065122d2ae94bf55510551ff27f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjZjc2ZjNhNThkMDY1MTIyZDJhZTk0YmY1NTUxMDU1MWZmMjdmNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-27T17:27:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-27T17:27:49Z"}, "message": "cp-tree.h (CLASSTYPE_DESTRUCTORS): Rename to ...\n\n\t* cp-tree.h (CLASSTYPE_DESTRUCTORS): Rename to ...\n\t(CLASSTYPE_DESTRUCTOR): ... this.\n\t* class.c (accessible_nvdtor_p)\n\tmaybe_warn_about_overly_private_class,\n\tadd_implicitly_declared_members,\n\tclone_constructors_and_destructors, type_has_virtual_destructor):\n\tAdjust for CLASSTYPE_DESTRUCTOR.\n\t(deduce_noexcept_on_destructors): Absorb into ...\n\t(check_bases_and_members): ... here.\n\t* except.c (dtor_nothrow): Adjust for CLASSTYPE_DESTRUCTOR.\n\t* init.c (build_delete): Likewise.\n\t* parser.c (cp_parser_lookup_name): Likewise.\n\t* pt.c (check_explicit_specialization): Likewise.\n\t* rtti.c (emit_support_tinfos): Likewise.\n\t* search.c (lookup_fnfields_idx_nolazy): Likewise.\n(--This line, and those below, will be ignored--\n\nM    cp/cp-tree.h\nM    cp/search.c\nM    cp/init.c\nM    cp/class.c\nM    cp/rtti.c\nM    cp/except.c\nM    cp/ChangeLog\nM    cp/pt.c\nM    cp/parser.c\n\nFrom-SVN: r249701", "tree": {"sha": "37e8225773157de7dee0c8d54f30a477abf6d3f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e8225773157de7dee0c8d54f30a477abf6d3f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2cf76f3a58d065122d2ae94bf55510551ff27f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2cf76f3a58d065122d2ae94bf55510551ff27f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2cf76f3a58d065122d2ae94bf55510551ff27f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2cf76f3a58d065122d2ae94bf55510551ff27f4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68fe5f441e9ea89a48a240ff5fcc05cf0146af7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68fe5f441e9ea89a48a240ff5fcc05cf0146af7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68fe5f441e9ea89a48a240ff5fcc05cf0146af7d"}], "stats": {"total": 92, "additions": 45, "deletions": 47}, "files": [{"sha": "bd22319616232f887ed7833378af35bd5970e183", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -1,5 +1,21 @@\n 2017-06-27  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (CLASSTYPE_DESTRUCTORS): Rename to ...\n+\t(CLASSTYPE_DESTRUCTOR): ... this.\n+\t* class.c (accessible_nvdtor_p,\n+\tmaybe_warn_about_overly_private_class,\n+\tadd_implicitly_declared_members,\n+\tclone_constructors_and_destructors, type_has_virtual_destructor):\n+\tAdjust for CLASSTYPE_DESTRUCTOR.\n+\t(deduce_noexcept_on_destructors): Absorb into ...\n+\t(check_bases_and_members): ... here.\n+\t* except.c (dtor_nothrow): Adjust for CLASSTYPE_DESTRUCTOR.\n+\t* init.c (build_delete): Likewise.\n+\t* parser.c (cp_parser_lookup_name): Likewise.\n+\t* pt.c (check_explicit_specialization): Likewise.\n+\t* rtti.c (emit_support_tinfos): Likewise.\n+\t* search.c (lookup_fnfields_idx_nolazy): Likewise.\n+\n \tKill IDENTIFIER_TEMPLATE.\n \t* cp-tree.h (lang_identifier): Remove class_template_info field.\n \t(IDENTIFIER_TEMPLATE): Delete."}, {"sha": "833eb94b4667cb97ffc0598d5083dd66652f0f4c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -1711,7 +1711,7 @@ inherit_targ_abi_tags (tree t)\n static bool\n accessible_nvdtor_p (tree t)\n {\n-  tree dtor = CLASSTYPE_DESTRUCTORS (t);\n+  tree dtor = CLASSTYPE_DESTRUCTOR (t);\n \n   /* An implicitly declared destructor is always public.  And,\n      if it were virtual, we would have created it by now.  */\n@@ -2220,7 +2220,7 @@ maybe_warn_about_overly_private_class (tree t)\n   /* Even if some of the member functions are non-private, the class\n      won't be useful for much if all the constructors or destructors\n      are private: such an object can never be created or destroyed.  */\n-  fn = CLASSTYPE_DESTRUCTORS (t);\n+  fn = CLASSTYPE_DESTRUCTOR (t);\n   if (fn && TREE_PRIVATE (fn))\n     {\n       warning (OPT_Wctor_dtor_privacy,\n@@ -3366,18 +3366,17 @@ add_implicitly_declared_members (tree t, tree* access_decls,\n \t\t\t\t int cant_have_const_cctor,\n \t\t\t\t int cant_have_const_assignment)\n {\n-  bool move_ok = false;\n+  /* Destructor.  */\n+  if (!CLASSTYPE_DESTRUCTOR (t))\n+    /* In general, we create destructors lazily.  */\n+    CLASSTYPE_LAZY_DESTRUCTOR (t) = 1;\n \n-  if (cxx_dialect >= cxx11 && !CLASSTYPE_DESTRUCTORS (t)\n+  bool move_ok = false;\n+  if (cxx_dialect >= cxx11 && CLASSTYPE_LAZY_DESTRUCTOR (t)\n       && !TYPE_HAS_COPY_CTOR (t) && !TYPE_HAS_COPY_ASSIGN (t)\n       && !type_has_move_constructor (t) && !type_has_move_assign (t))\n     move_ok = true;\n \n-  /* Destructor.  */\n-  if (!CLASSTYPE_DESTRUCTORS (t))\n-    /* In general, we create destructors lazily.  */\n-    CLASSTYPE_LAZY_DESTRUCTOR (t) = 1;\n-\n   /* [class.ctor]\n \n      If there is no user-declared constructor for a class, a default\n@@ -5015,8 +5014,9 @@ clone_constructors_and_destructors (tree t)\n      we no longer need to know that.  */\n   for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n     clone_function_decl (*iter, /*update_methods=*/true);\n-  for (ovl_iterator iter (CLASSTYPE_DESTRUCTORS (t)); iter; ++iter)\n-    clone_function_decl (*iter, /*update_methods=*/true);\n+\n+  if (tree dtor = CLASSTYPE_DESTRUCTOR (t))\n+    clone_function_decl (dtor, /*update_methods=*/true);\n }\n \n /* Deduce noexcept for a destructor DTOR.  */\n@@ -5029,24 +5029,6 @@ deduce_noexcept_on_destructor (tree dtor)\n \t\t\t\t\t\tnoexcept_deferred_spec);\n }\n \n-/* For each destructor in T, deduce noexcept:\n-\n-   12.4/3: A declaration of a destructor that does not have an\n-   exception-specification is implicitly considered to have the\n-   same exception-specification as an implicit declaration (15.4).  */\n-\n-static void\n-deduce_noexcept_on_destructors (tree t)\n-{\n-  /* If for some reason we don't have a CLASSTYPE_METHOD_VEC, we bail\n-     out now.  */\n-  if (!CLASSTYPE_METHOD_VEC (t))\n-    return;\n-\n-  for (ovl_iterator iter (CLASSTYPE_DESTRUCTORS (t)); iter; ++iter)\n-    deduce_noexcept_on_destructor (*iter);\n-}\n-\n /* Subroutine of set_one_vmethod_tm_attributes.  Search base classes\n    of TYPE for virtual functions which FNDECL overrides.  Return a\n    mask of the tm attributes found therein.  */\n@@ -5460,7 +5442,7 @@ type_has_virtual_destructor (tree type)\n     return false;\n \n   gcc_assert (COMPLETE_TYPE_P (type));\n-  dtor = CLASSTYPE_DESTRUCTORS (type);\n+  dtor = CLASSTYPE_DESTRUCTOR (type);\n   return (dtor && DECL_VIRTUAL_P (dtor));\n }\n \n@@ -5851,10 +5833,11 @@ check_bases_and_members (tree t)\n      of potential interest.  */\n   check_bases (t, &cant_have_const_ctor, &no_const_asn_ref);\n \n-  /* Deduce noexcept on destructors.  This needs to happen after we've set\n+  /* Deduce noexcept on destructor.  This needs to happen after we've set\n      triviality flags appropriately for our bases.  */\n   if (cxx_dialect >= cxx11)\n-    deduce_noexcept_on_destructors (t);\n+    if (tree dtor = CLASSTYPE_DESTRUCTOR (t))\n+      deduce_noexcept_on_destructor (dtor);\n \n   /* Check all the method declarations.  */\n   check_methods (t);"}, {"sha": "f82b1b6ae10fe5726415e672d4429d03079a084e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -2145,11 +2145,11 @@ struct GTY(()) lang_type {\n #define CLASSTYPE_CONSTRUCTORS(NODE) \\\n   ((*CLASSTYPE_METHOD_VEC (NODE))[CLASSTYPE_CONSTRUCTOR_SLOT])\n \n-/* A FUNCTION_DECL for the destructor for NODE.  These are the\n+/* A FUNCTION_DECL for the destructor for NODE.  This is the\n    destructors that take an in-charge parameter.  If\n    CLASSTYPE_LAZY_DESTRUCTOR is true, then this entry will be NULL\n    until the destructor is created with lazily_declare_fn.  */\n-#define CLASSTYPE_DESTRUCTORS(NODE) \\\n+#define CLASSTYPE_DESTRUCTOR(NODE) \\\n   (CLASSTYPE_METHOD_VEC (NODE)\t\t\t\t\t\t      \\\n    ? (*CLASSTYPE_METHOD_VEC (NODE))[CLASSTYPE_DESTRUCTOR_SLOT]\t\t      \\\n    : NULL_TREE)\n@@ -2179,11 +2179,9 @@ struct GTY(()) lang_type {\n \n /* The type corresponding to NODE when NODE is used as a base class,\n    i.e., NODE without virtual base classes or tail padding.  */\n-\n #define CLASSTYPE_AS_BASE(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->as_base)\n \n /* True iff NODE is the CLASSTYPE_AS_BASE version of some type.  */\n-\n #define IS_FAKE_BASE_TYPE(NODE)\t\t\t\t\t\\\n   (TREE_CODE (NODE) == RECORD_TYPE\t\t\t\t\\\n    && TYPE_CONTEXT (NODE) && CLASS_TYPE_P (TYPE_CONTEXT (NODE))\t\\"}, {"sha": "208e52a405b4b955ab9356da821ebad9fab48e8c", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -218,7 +218,7 @@ dtor_nothrow (tree type)\n   if (CLASSTYPE_LAZY_DESTRUCTOR (type))\n     lazily_declare_fn (sfk_destructor, type);\n \n-  return TREE_NOTHROW (CLASSTYPE_DESTRUCTORS (type));\n+  return TREE_NOTHROW (CLASSTYPE_DESTRUCTOR (type));\n }\n \n /* Build up a call to __cxa_end_catch, to destroy the exception object"}, {"sha": "14335388a50d78b70cb78ab2c30d2945043d0b9d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -4580,8 +4580,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t           && MAYBE_CLASS_TYPE_P (type) && !CLASSTYPE_FINAL (type)\n \t\t   && TYPE_POLYMORPHIC_P (type))\n \t    {\n-\t      tree dtor;\n-\t      dtor = CLASSTYPE_DESTRUCTORS (type);\n+\t      tree dtor = CLASSTYPE_DESTRUCTOR (type);\n \t      if (!dtor || !DECL_VINDEX (dtor))\n \t\t{\n \t\t  if (CLASSTYPE_PURE_VIRTUALS (type))\n@@ -4671,7 +4670,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n       /* If the destructor is non-virtual, there is no deleting\n \t variant.  Instead, we must explicitly call the appropriate\n \t `operator delete' here.  */\n-      else if (!DECL_VIRTUAL_P (CLASSTYPE_DESTRUCTORS (type))\n+      else if (!DECL_VIRTUAL_P (CLASSTYPE_DESTRUCTOR (type))\n \t       && auto_delete == sfk_deleting_destructor)\n \t{\n \t  /* We will use ADDR multiple times so we must save it.  */"}, {"sha": "2ff6afdbf6477bb6a5bf3cab205b06c03ebeb440", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -25679,12 +25679,14 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n       /* If that's not a class type, there is no destructor.  */\n       if (!type || !CLASS_TYPE_P (type))\n \treturn error_mark_node;\n+\n       if (CLASSTYPE_LAZY_DESTRUCTOR (type))\n \tlazily_declare_fn (sfk_destructor, type);\n-      if (!CLASSTYPE_DESTRUCTORS (type))\n-\t  return error_mark_node;\n-      /* If it was a class type, return the destructor.  */\n-      return CLASSTYPE_DESTRUCTORS (type);\n+\n+      if (tree dtor = CLASSTYPE_DESTRUCTOR (type))\n+\treturn dtor;\n+\n+      return error_mark_node;\n     }\n \n   /* By this point, the NAME should be an ordinary identifier.  If"}, {"sha": "c724e27b4a1ac2aada64ff378617c052a3e7c03f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -2884,7 +2884,7 @@ check_explicit_specialization (tree declarator,\n \t      int is_constructor = DECL_CONSTRUCTOR_P (decl);\n \n \t      if (is_constructor ? !TYPE_HAS_USER_CONSTRUCTOR (ctype)\n-\t\t  : !CLASSTYPE_DESTRUCTORS (ctype))\n+\t\t  : !CLASSTYPE_DESTRUCTOR (ctype))\n \t\t{\n \t\t  /* From [temp.expl.spec]:\n "}, {"sha": "d73b1bcfa973de1b2d42206005eb1e5b74623dce", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -1556,7 +1556,7 @@ emit_support_tinfos (void)\n   bltn_type = TREE_TYPE (bltn_type);\n   if (!COMPLETE_TYPE_P (bltn_type))\n     return;\n-  tree dtor = CLASSTYPE_DESTRUCTORS (bltn_type);\n+  tree dtor = CLASSTYPE_DESTRUCTOR (bltn_type);\n   if (!dtor || DECL_EXTERNAL (dtor))\n     return;\n "}, {"sha": "d7895a05593b7915e3d836e02ef34935eb291db3", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cf76f3a58d065122d2ae94bf55510551ff27f4/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=b2cf76f3a58d065122d2ae94bf55510551ff27f4", "patch": "@@ -1592,7 +1592,7 @@ lookup_fnfields_idx_nolazy (tree type, tree name)\n   /* and destructors are second.  */\n   if (name == dtor_identifier)\n     {\n-      fn = CLASSTYPE_DESTRUCTORS (type);\n+      fn = CLASSTYPE_DESTRUCTOR (type);\n       return fn ? CLASSTYPE_DESTRUCTOR_SLOT : -1;\n     }\n   if (IDENTIFIER_CONV_OP_P (name))"}]}