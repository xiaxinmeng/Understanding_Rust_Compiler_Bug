{"sha": "7d14c755ce793f99c3e833e7115d954cfbed175c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxNGM3NTVjZTc5M2Y5OWMzZTgzM2U3MTE1ZDk1NGNmYmVkMTc1Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-18T03:30:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-18T03:30:57Z"}, "message": "c-common.c (struct disabled_builtin, [...]): New.\n\n\t* c-common.c (struct disabled_builtin, disabled_builtins,\n\tdisable_builtin_function, builtin_function_disabled_p): New.\n\t(builtin_function_2): Check for disabled built-in functions.\n\t* c-common.h (disable_builtin_function): Declare.\n\t* c-decl.c (c_decode_option): Handle -fno-builtin-FUNCTION.\n\t* doc/invoke.texi: Document -fno-builtin-FUNCTION.\n\t* doc/extend.texi: Mention -fno-builtin-FUNCTION.\n\ntestsuite:\n\t* gcc.dg/no-builtin-1.c: New test.\n\nFrom-SVN: r47133", "tree": {"sha": "3bf2e6da7732b3b856461efc1c4fffe0eba2760d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bf2e6da7732b3b856461efc1c4fffe0eba2760d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d14c755ce793f99c3e833e7115d954cfbed175c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d14c755ce793f99c3e833e7115d954cfbed175c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d14c755ce793f99c3e833e7115d954cfbed175c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d14c755ce793f99c3e833e7115d954cfbed175c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a3070ffad610701440467a2bd0b6627a76e568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a3070ffad610701440467a2bd0b6627a76e568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a3070ffad610701440467a2bd0b6627a76e568"}], "stats": {"total": 132, "additions": 129, "deletions": 3}, "files": [{"sha": "c27ba9d5692bbe601bbc25d4d7bd74da06185c1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -1,3 +1,13 @@\n+2001-11-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (struct disabled_builtin, disabled_builtins,\n+\tdisable_builtin_function, builtin_function_disabled_p): New.\n+\t(builtin_function_2): Check for disabled built-in functions.\n+\t* c-common.h (disable_builtin_function): Declare.\n+\t* c-decl.c (c_decode_option): Handle -fno-builtin-FUNCTION.\n+\t* doc/invoke.texi: Document -fno-builtin-FUNCTION.\n+\t* doc/extend.texi: Mention -fno-builtin-FUNCTION.\n+\n 2001-11-17  Craig Rodrigues  <rodrigc@gcc.gnu.org>\n \n \tPR target/4606"}, {"sha": "6b6b36b720fa6af646c1e237d3506b2a02341a65", "filename": "gcc/c-common.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -2703,6 +2703,53 @@ build_va_arg (expr, type)\n }\n \n \n+/* Linked list of disabled built-in functions.  */\n+\n+typedef struct disabled_builtin\n+{\n+  const char *name;\n+  struct disabled_builtin *next;\n+} disabled_builtin;\n+static disabled_builtin *disabled_builtins = NULL;\n+\n+static bool builtin_function_disabled_p PARAMS ((const char *));\n+\n+/* Disable a built-in function specified by -fno-builtin-NAME.  If NAME\n+   begins with \"__builtin_\", give an error.  */\n+\n+void\n+disable_builtin_function (name)\n+     const char *name;\n+{\n+  if (strncmp (name, \"__builtin_\", strlen (\"__builtin_\")) == 0)\n+    error (\"cannot disable built-in function `%s'\", name);\n+  else\n+    {\n+      disabled_builtin *new = xmalloc (sizeof (disabled_builtin));\n+      new->name = name;\n+      new->next = disabled_builtins;\n+      disabled_builtins = new;\n+    }\n+}\n+\n+\n+/* Return true if the built-in function NAME has been disabled, false\n+   otherwise.  */\n+\n+static bool\n+builtin_function_disabled_p (name)\n+     const char *name;\n+{\n+  disabled_builtin *p;\n+  for (p = disabled_builtins; p != NULL; p = p->next)\n+    {\n+      if (strcmp (name, p->name) == 0)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+\n /* Possibly define a builtin function with one or two names.  BUILTIN_NAME\n    is an __builtin_-prefixed name; NAME is the ordinary name; one or both\n    of these may be NULL (though both being NULL is useless).\n@@ -2743,7 +2790,8 @@ builtin_function_2 (builtin_name, name, builtin_type, type, function_code,\n \t  TREE_SIDE_EFFECTS (bdecl) = 1;\n \t}\n     }\n-  if (name != 0 && !flag_no_builtin && !(nonansi_p && flag_no_nonansi_builtin))\n+  if (name != 0 && !flag_no_builtin && !builtin_function_disabled_p (name)\n+      && !(nonansi_p && flag_no_nonansi_builtin))\n     {\n       decl = builtin_function (name, type, function_code, class, NULL);\n       if (nonansi_p)"}, {"sha": "df6cd9d387fe492741f626cb81ef7ab2472af1b9", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -538,6 +538,8 @@ extern tree c_build_qualified_type              PARAMS ((tree, int));\n    frontends.  */\n extern void c_common_nodes_and_builtins\t\tPARAMS ((void));\n \n+extern void disable_builtin_function\t\tPARAMS ((const char *));\n+\n extern tree build_va_arg\t\t\tPARAMS ((tree, tree));\n \n extern const char *c_common_lang_init\t\tPARAMS ((const char *));"}, {"sha": "5a34a2c1a4066e6e2e7426fa1a61ffc7b7c9ae05", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -596,6 +596,8 @@ c_decode_option (argc, argv)\n     flag_no_builtin = 0;\n   else if (!strcmp (p, \"-fno-builtin\"))\n     flag_no_builtin = 1;\n+  else if (!strncmp (p, \"-fno-builtin-\", strlen (\"-fno-builtin-\")))\n+    disable_builtin_function (p + strlen (\"-fno-builtin-\"));\n   else if (p[0] == '-' && p[1] == 'f' && dump_switch_p (p + 2))\n     ;\n   else if (!strcmp (p, \"-ansi\"))"}, {"sha": "d0fdae60c11aa7349c12d85fee379697f8f01622", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -4376,7 +4376,9 @@ The ISO C89 functions @code{abs}, @code{cos}, @code{fabs},\n @code{strlen}, @code{strncat}, @code{strncmp}, @code{strncpy},\n @code{strpbrk}, @code{strrchr}, @code{strspn}, and @code{strstr} are all\n recognized as built-in functions unless @option{-fno-builtin} is\n-specified.  All of these functions have corresponding versions prefixed\n+specified (or @option{-fno-builtin-@var{function}} is specified for an\n+individual function).  All of these functions have\n+corresponding versions prefixed\n with @code{__builtin_}, except that the version for @code{sqrt} is\n called @code{__builtin_fsqrt}.\n "}, {"sha": "83e5c97e8f6b9b7434f18bc92b0a811bbb64abd2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -162,7 +162,7 @@ in the following sections.\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n @gccoptlist{\n -ansi  -std=@var{standard}  -aux-info @var{filename} @gol\n--fno-asm  -fno-builtin @gol\n+-fno-asm  -fno-builtin -fno-builtin-@var{function} @gol\n -fhosted  -ffreestanding @gol\n -trigraphs  -traditional  -traditional-cpp @gol\n -fallow-single-precision  -fcond-mismatch @gol\n@@ -1025,6 +1025,7 @@ switch only affects the @code{asm} and @code{typeof} keywords, since\n @code{inline} is a standard keyword in ISO C99.\n \n @item -fno-builtin\n+@itemx -fno-builtin-@var{function} @r{(C and Objective-C only)}\n @opindex fno-builtin\n @cindex built-in functions\n Don't recognize built-in functions that do not begin with\n@@ -1049,6 +1050,20 @@ using the @samp{__builtin_} prefix.  The GNU C++ Standard Library uses\n built-in functions to implement many functions (like\n @code{std::strchr}), so that you automatically get efficient code.\n \n+With the @option{-fno-builtin-@var{function}} option, not available\n+when compiling C++, only the built-in function @var{function} is\n+disabled.  @var{function} must not begin with @samp{__builtin_}.  If a\n+function is named this is not built-in in this version of GCC, this\n+option is ignored.  There is no corresponding\n+@option{-fbuiltin-@var{function}} option; if you wish to enable\n+built-in functions selectively when using @option{-fno-builtin} or\n+@option{-ffreestanding}, you may define macros such as:\n+\n+@smallexample\n+#define abs(n)          __builtin_abs ((n))\n+#define strcpy(d, s)    __builtin_strcpy ((d), (s))\n+@end smallexample\n+\n @item -fhosted\n @opindex fhosted\n @cindex hosted environment"}, {"sha": "154d9c5ca3fdd1a784330d93015129c6feb436ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -1,3 +1,7 @@\n+2001-11-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/no-builtin-1.c: New test.\n+\n 2001-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20011115-1.c: New test."}, {"sha": "4f392e8b512eae75fafa3b2ca01a68b8494e9ec2", "filename": "gcc/testsuite/gcc.dg/no-builtin-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Ftestsuite%2Fgcc.dg%2Fno-builtin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d14c755ce793f99c3e833e7115d954cfbed175c/gcc%2Ftestsuite%2Fgcc.dg%2Fno-builtin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fno-builtin-1.c?ref=7d14c755ce793f99c3e833e7115d954cfbed175c", "patch": "@@ -0,0 +1,43 @@\n+/* Test for -fno-builtin-FUNCTION.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-abs\" } */\n+\n+/* GCC normally handles abs and labs as built-in functions even without\n+   optimization.  So test that with -fno-builtin-abs, labs is so handled\n+   but abs isn't.  */\n+\n+int abs_called = 0;\n+\n+extern int abs (int);\n+extern long labs (long);\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  if (labs (0) != 0)\n+    abort ();\n+  if (abs (0) != 0)\n+    abort ();\n+  if (!abs_called)\n+    abort ();\n+  exit (0);\n+}\n+\n+/* The labs call above should have been optimized, but the abs call\n+   shouldn't have been.  */\n+\n+static int\n+abs (int x)\n+{ /* { dg-warning \"static\" \"static decl warning\" } */\n+  abs_called = 1;\n+  return (x < 0 ? -1 : x);\n+}\n+\n+static long\n+labs (long x)\n+{\n+  abort ();\n+}"}]}