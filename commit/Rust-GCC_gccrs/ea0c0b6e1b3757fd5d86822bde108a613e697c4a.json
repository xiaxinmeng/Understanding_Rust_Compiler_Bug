{"sha": "ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwYzBiNmUxYjM3NTdmZDVkODY4MjJiZGUxMDhhNjEzZTY5N2M0YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-08-18T02:53:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-08-18T02:53:13Z"}, "message": "Implement std::collate.\n\n\n2001-08-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tImplement std::collate.\n\t* config/locale/collate_specializations_gnu.cc: Add here, implement in\n\tMT-safe way.\n\t* config/locale/collate_specializations_generic.cc: Add here, but\n\tin a less sophisticated manner.\n\t* include/bits/locale_facets.tcc (collate): Add generic definition.\n\t* include/bits/locale_facets.h (~collate): Mark virtual.\n\t(collate::_M_compare_helper): New.\n\t(collate::_M_transform_helper): New.\n\t* src/locale.cc: Remove unnecessary specializations.\n\t* src/string-inst.cc: Tweak instantiation of ctors.\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Do configury for collate.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* src/Makefile.am (sources): Add collate.cc.\n\t* src/Makefile.in: Regenerate.\n\n\t* testsuite/22_locale/collate_byname.cc: New.\n\t* testsuite/22_locale/collate.cc: New file.\n\t* testsuite/22_locale/collate_char_members.cc: New file.\n\t* testsuite/22_locale/collate_wchar_t_members.cc: New file.\n\nFrom-SVN: r44996", "tree": {"sha": "e7584e40d7eed94eae7c070a823234cb31e6a925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7584e40d7eed94eae7c070a823234cb31e6a925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/comments", "author": null, "committer": null, "parents": [{"sha": "5a2586cf8fcf001cddb47d3f9bf6610975d1564d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2586cf8fcf001cddb47d3f9bf6610975d1564d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2586cf8fcf001cddb47d3f9bf6610975d1564d"}], "stats": {"total": 2557, "additions": 1585, "deletions": 972}, "files": [{"sha": "71496a4607adefcd6b460c63d6e7cdd17df52c43", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -1,3 +1,28 @@\n+2001-08-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tImplement std::collate.\t\n+\t* config/locale/collate_specializations_gnu.cc: Add here, implement in\n+\tMT-safe way.\n+\t* config/locale/collate_specializations_generic.cc: Add here, but\n+\tin a less sophisticated manner.\n+\t* include/bits/locale_facets.tcc (collate): Add generic definition.\n+\t* include/bits/locale_facets.h (~collate): Mark virtual.\n+\t(collate::_M_compare_helper): New.\n+\t(collate::_M_transform_helper): New.\n+\t* src/locale.cc: Remove unnecessary specializations.\n+\t* src/string-inst.cc: Tweak instantiation of ctors.\n+\t\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Do configury for collate.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/Makefile.am (sources): Add collate.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t\n+\t* testsuite/22_locale/collate_byname.cc: New.\n+\t* testsuite/22_locale/collate.cc: New file.\n+\t* testsuite/22_locale/collate_char_members.cc: New file.\n+\t* testsuite/22_locale/collate_wchar_t_members.cc: New file.\t\n+\t\n 2001-08-16  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* configure.target: Set LIMITSH for powerpc-*-*."}, {"sha": "006acfd7e569d0230e24214e7dea7a9aaa2b3b86", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -1060,6 +1060,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CCODECVT_H=config/locale/codecvt_specializations_generic.h\n       CMESSAGES_H=config/locale/messages_members_generic.h\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n+      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n       ;;\n     xgnu)\n       AC_MSG_RESULT(gnu)\n@@ -1085,6 +1086,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CMESSAGES_H=config/locale/messages_members_gnu.h\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n+      CCOLLATE_CC=config/locale/collate_specializations_gnu.cc\n       ;;\n     xieee_1003.1)\n       AC_MSG_RESULT(generic)\n@@ -1097,6 +1099,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n+      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n@@ -1114,7 +1117,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n+  AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n ])\n \n "}, {"sha": "b83c7a76c966ed5b89cb0382f1238f99565fee07", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -1072,6 +1072,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CCODECVT_H=config/locale/codecvt_specializations_generic.h\n       CMESSAGES_H=config/locale/messages_members_generic.h\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n+      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n       ;;\n     xgnu)\n       AC_MSG_RESULT(gnu)\n@@ -1097,6 +1098,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CMESSAGES_H=config/locale/messages_members_gnu.h\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n+      CCOLLATE_CC=config/locale/collate_specializations_gnu.cc\n       ;;\n     xieee_1003.1)\n       AC_MSG_RESULT(generic)\n@@ -1109,6 +1111,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n       CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n+      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n@@ -1126,7 +1129,8 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n+  AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n ])\n \n "}, {"sha": "c0b16d9ef415e04870b0f82a18f89fd3546247a2", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -690,6 +690,9 @@\n /* Define if you have the <sys/resource.h> header file.  */\n #undef HAVE_SYS_RESOURCE_H\n \n+/* Define if you have the <sys/types.h> header file.  */\n+#undef HAVE_SYS_TYPES_H\n+\n /* Define if you have the <unistd.h> header file.  */\n #undef HAVE_UNISTD_H\n "}, {"sha": "e81a52c1750b11f402bc6e04c3c09f54e21c34d7", "filename": "libstdc++-v3/config/locale/c_locale_gnu.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -1,3 +1,4 @@\n+\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n@@ -46,7 +47,7 @@ namespace std\n     // perhaps locale::categories could be made equivalent to LC_*_MASK\n     //    _M_c_locale = __newlocale(1 << LC_ALL, __str.c_str(), NULL);\n     //    _M_c_locale = __newlocale(locale::all, __str.c_str(), NULL);\n-    __cloc = __newlocale(LC_ALL, __s, NULL);\n+    __cloc = __newlocale(1 << LC_ALL, __s, 0);\n     if (!__cloc)\n       {\n \t// This named locale is not supported by the underlying OS."}, {"sha": "0abd784378a98542af619ce23a872e0151499b10", "filename": "libstdc++-v3/config/locale/collate_specializations_generic.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_specializations_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_specializations_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_specializations_generic.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -0,0 +1,67 @@\n+// std::collate implementation details, generic version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.4.1.2  collate virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  // These are basically extensions to char_traits, and perhaps should\n+  // be put there instead of here.\n+  template<>\n+    int \n+    collate<char>::_M_compare_helper(const char* __one, \n+\t\t\t\t     const char* __two) const\n+    { return strcoll(__one, __two); }\n+  \n+  template<>\n+    size_t\n+    collate<char>::_M_transform_helper(char* __to, const char* __from, \n+\t\t\t\t       size_t __n) const\n+    { return strxfrm(__to, __from, __n); }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    int \n+    collate<wchar_t>::_M_compare_helper(const wchar_t* __one, \n+\t\t\t\t\tconst wchar_t* __two) const\n+    { return wcscoll(__one, __two); }\n+  \n+  template<>\n+    size_t\n+    collate<wchar_t>::_M_transform_helper(wchar_t* __to, const wchar_t* __from,\n+\t\t\t\t\t  size_t __n) const\n+    { return wcsxfrm(__to, __from, __n); }\n+#endif\n+}"}, {"sha": "a77adbf35181dbff87e3ec5de66ed36d00e16f27", "filename": "libstdc++-v3/config/locale/collate_specializations_gnu.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_specializations_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_specializations_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_specializations_gnu.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -0,0 +1,88 @@\n+// std::collate implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.4.1.2  collate virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  // These are basically extensions to char_traits, and perhaps should\n+  // be put there instead of here.\n+  template<>\n+    int \n+    collate<char>::_M_compare_helper(const char* __one, \n+\t\t\t\t     const char* __two) const\n+    {\n+      if (_M_c_locale_collate)\n+\treturn __strcoll_l(__one, __two, _M_c_locale_collate);\n+      else\n+\treturn strcoll(__one, __two);      \n+    }\n+  \n+  template<>\n+    size_t\n+    collate<char>::_M_transform_helper(char* __to, const char* __from, \n+\t\t\t\t       size_t __n) const\n+    {\n+      if (_M_c_locale_collate)\n+\treturn __strxfrm_l(__to, __from, __n, _M_c_locale_collate);\n+      else\n+\treturn strxfrm(__to, __from, __n);      \n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    int \n+    collate<wchar_t>::_M_compare_helper(const wchar_t* __one, \n+\t\t\t\t\tconst wchar_t* __two) const\n+    {\n+      if (_M_c_locale_collate)\n+\treturn __wcscoll_l(__one, __two, _M_c_locale_collate);\n+      else\n+\treturn wcscoll(__one, __two);      \n+    }\n+  \n+  template<>\n+    size_t\n+    collate<wchar_t>::_M_transform_helper(wchar_t* __to, \n+\t\t\t\t\t  const wchar_t* __from, \n+\t\t\t\t\t  size_t __n) const\n+    {\n+      if (_M_c_locale_collate)\n+\treturn __wcsxfrm_l(__to, __from, __n, _M_c_locale_collate);\n+      else\n+\treturn wcsxfrm(__to, __from, __n);      \n+    }\n+#endif\n+}"}, {"sha": "cbd02b480b86ed547d035c8cef2dfc9d416cfbaa", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 841, "deletions": 837, "changes": 1678, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a"}, {"sha": "5eedc43ec64d6fb98af472c868c42c1841c0688b", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -196,7 +196,7 @@ thread_headers =  \t${thread_builddir}/gthr.h \t${thread_builddir}/gthr-single.h\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread \n \n \n-# Target inludes for threads\n+# Target includes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n@@ -346,16 +346,15 @@ stamp-ext: ${ext_headers}\n # This target is special.  The timestamp on a directory gets modified\n # whenever a file it contains gets modified, and that'll throw off all the\n # build dependencies that need this target.  On the other hand, someone\n-# could delete the directory and not the stamp file, faking out the make.\n+# could delete the directory and not the stamp file, faking out make.\n ${target_builddir}: stamp-${target_alias}\n stamp-${target_alias}:\n \t@if [ ! -d ${target_builddir} ]; then \\\n \t  mkdir -p ${target_builddir} ;\\\n \t  echo `date` > stamp-${target_alias} ;\\\n \tfi\n \n-# c++config would make these be rebuilt all the time.\n-# we get bizarre symlinks mazes.\n+# Target includes static.\n stamp-target: ${target_headers} ${target_builddir}\n \t@cd ${target_builddir} ;\\\n \tif [ ! -f stamp-target ]; then \\\n@@ -368,6 +367,7 @@ stamp-target: ${target_headers} ${target_builddir}\n \t  echo `date` > stamp-target; \\\n \tfi\n \n+# Target includes dynamic.\n ${target_builddir}/c++config.h: ../config.h \\\n \t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n \t\t\t\t${target_builddir}"}, {"sha": "159becfa7e5d2f7cd7db2cb05ab3199f30a4145c", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 50, "deletions": 31, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -520,6 +520,7 @@ namespace std\n     _S_literals[] = \"-+xX0123456789abcdef0123456789ABCDEF\";\n \n    template<> _Format_cache<char>::_Format_cache();\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n    template<> _Format_cache<wchar_t>::_Format_cache();\n #endif\n@@ -907,6 +908,7 @@ namespace std\n   template<> \n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n@@ -944,13 +946,30 @@ namespace std\n     {\n     public:\n       // Types:\n-      typedef _CharT               char_type;\n-      typedef basic_string<_CharT> string_type;\n+      typedef _CharT               \tchar_type;\n+      typedef basic_string<_CharT> \tstring_type;\n \n+    protected:\n+      // Underlying \"C\" library locale information saved from\n+      // initialization, needed by collate_byname as well.\n+      __c_locale\t\t\t_M_c_locale_collate;\n+ \n+    public:\n       static locale::id id;\n \n       explicit \n-      collate(size_t __refs = 0) : locale::facet(__refs) { }\n+      collate(size_t __refs = 0)\n+      : locale::facet(__refs), _M_c_locale_collate(NULL)\n+      { } \n+\n+      // Non-standard.\n+      explicit \n+      collate(__c_locale __cloc, size_t __refs = 0) \n+      : locale::facet(__refs)\n+      { \n+\tif (__cloc)\n+\t  _M_c_locale_collate = _S_clone_c_locale(__cloc); \n+      }\n \n       int \n       compare(const _CharT* __lo1, const _CharT* __hi1,\n@@ -965,8 +984,20 @@ namespace std\n       hash(const _CharT* __lo, const _CharT* __hi) const\n       { return this->do_hash(__lo, __hi); }\n       \n+      // Used to abstract out _CharT bits in virtual member functions, below.\n+      int\n+      _M_compare_helper(const _CharT*, const _CharT*) const;\n+\n+      size_t\n+      _M_transform_helper(_CharT*, const _CharT*, size_t) const;;\n+\n   protected:\n-      ~collate() { } // virtual\n+      virtual\n+      ~collate() \n+      {\n+\tif (_M_c_locale_collate)\n+\t  _S_destroy_c_locale(_M_c_locale_collate); \n+      }\n \n       virtual int  \n       do_compare(const _CharT* __lo1, const _CharT* __hi1,\n@@ -982,34 +1013,24 @@ namespace std\n   template<typename _CharT>\n     locale::id collate<_CharT>::id;\n \n-  // Required specializations.\n+  // Specializations.\n   template<>\n     int \n-    collate<char>::do_compare(const char* __lo1, const char* __hi1, \n-\t\t\t      const char* __lo2, const char* __hi2) const;\n+    collate<char>::_M_compare_helper(const char*, const char*) const;\n \n   template<>\n-    string\n-    collate<char>::do_transform(const char* __lo, const char* __hi) const;\n+    size_t\n+    collate<char>::_M_transform_helper(char*, const char*, size_t) const;\n \n-  template<>\n-    long\n-    collate<char>::do_hash(const char* __lo, const char* __hi) const;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n     int \n-    collate<wchar_t>::do_compare(const wchar_t* __lo1, const wchar_t* __hi1, \n-\t\t\t\t const wchar_t* __lo2, \n-\t\t\t\t const wchar_t* __hi2) const;\n+    collate<wchar_t>::_M_compare_helper(const wchar_t*, const wchar_t*) const;\n \n   template<>\n-    wstring\n-    collate<wchar_t>::do_transform(const wchar_t* __lo, \n-\t\t\t\t   const wchar_t* __hi) const;\n-\n-  template<>\n-    long\n-    collate<wchar_t>::do_hash(const wchar_t* __lo, const wchar_t* __hi) const;\n+    size_t\n+    collate<wchar_t>::_M_transform_helper(wchar_t*, const wchar_t*, \n+\t\t\t\t\t  size_t) const;\n #endif\n \n   template<typename _CharT>\n@@ -1021,19 +1042,15 @@ namespace std\n       typedef basic_string<_CharT> string_type;\n \n       explicit \n-      collate_byname(const char*, size_t __refs = 0);\n+      collate_byname(const char* __s, size_t __refs = 0)\n+      : collate<_CharT>(__refs) \n+      { _S_create_c_locale(_M_c_locale_collate, __s); }\n \n     protected:\n       virtual \n       ~collate_byname() { }\n     };\n \n-  template<>\n-    collate_byname<char>::collate_byname(const char*, size_t __refs);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    collate_byname<wchar_t>::collate_byname(const char*, size_t __refs);\n-#endif\n \n   class time_base\n   {\n@@ -1420,6 +1437,7 @@ namespace std\n   template<> \n     void\n     moneypunct<char>::_M_initialize_moneypunct(__c_locale __cloc);\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n@@ -1470,10 +1488,10 @@ namespace std\n     protected:\n       // Underlying \"C\" library locale information saved from\n       // initialization, needed by messages_byname as well.\n-      __c_locale\t_M_c_locale_messages;\n+      __c_locale\t\t\t_M_c_locale_messages;\n       #if 1\n       // Only needed if glibc < 2.3\n-      const char*\t_M_name_messages;\n+      const char*\t\t\t_M_name_messages;\n       #endif\n \n     public:\n@@ -1485,6 +1503,7 @@ namespace std\n       _M_name_messages(\"C\")\n       { }\n \n+      // Non-standard.\n       explicit \n       messages(__c_locale __cloc, const char* __name, size_t __refs = 0) \n       : locale::facet(__refs)"}, {"sha": "e999ef9ce7d741e5d2ee30fd4e9038e4490a6922", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 71, "deletions": 6, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -968,7 +968,7 @@ namespace std\n     __output_float(_OutIter __s, ios_base& __io, _CharT __fill,\n                     const char* __sptr, size_t __slen)\n     {\n-      // XXX Not currently done: non streambuf_iterator\n+      // XXX Not currently done: non-streambuf_iterator\n       return __s;\n     }\n \n@@ -1217,10 +1217,75 @@ namespace std\n         __err |= __io.failbit;\n       return __out;\n     }\n-} // std::\n \n-#endif /* _CPP_BITS_LOCFACETS_TCC */\n+  // Generic version does nothing.\n+  template<typename _CharT>\n+    int\n+    collate<_CharT>::\n+    _M_compare_helper(const _CharT*, const _CharT*) const\n+    { return 0; }\n+\n+  // Generic version does nothing.\n+  template<typename _CharT>\n+    size_t\n+    collate<_CharT>::\n+    _M_transform_helper(_CharT*, const _CharT*, size_t) const\n+    { return 0; }\n+\n+  template<typename _CharT>\n+    int\n+    collate<_CharT>::\n+    do_compare(const _CharT* __lo1, const _CharT* __hi1,\n+\t       const _CharT* __lo2, const _CharT* __hi2) const\n+    { \n+      const string_type __one(__lo1, __hi1);\n+      const string_type __two(__lo2, __hi2);\n+      return _M_compare_helper(__one.c_str(), __two.c_str());\n+    }\n+\n+ template<typename _CharT>\n+    collate<_CharT>::string_type\n+    collate<_CharT>::\n+    do_transform(const _CharT* __lo, const _CharT* __hi) const\n+    {\n+      string_type __orig(__lo, __hi);\n+      string_type __trans(__orig.size(), char_type());\n+      size_t __res = _M_transform_helper(__trans.begin().base(), \n+\t\t\t\t\t __orig.c_str(), __trans.size());\n+      while (__res >= __trans.size())\n+\t{\n+\t  // Increment size of translated string.\n+\t  string_type::size_type __newsize = __trans.size() * 2;\n+\t  __trans.resize(__newsize);\n+\t  __res = _M_transform_helper(__trans.begin().base(), __orig.c_str(), \n+\t\t\t\t      __trans.size());\n+\t}\n+      return __trans;\n+    }\n+\n+ template<typename _CharT>\n+    long\n+    collate<_CharT>::\n+    do_hash(const _CharT* __lo, const _CharT* __hi) const\n+    { \n+      unsigned long __val = 0;\n+      for (; __lo < __hi; ++__lo)\n+\t__val = *__lo + ((__val << 7) | \n+\t\t       (__val >> (numeric_limits<unsigned long>::digits - 1)));\n+      return static_cast<long>(__val);\n+    }\n+} // namespace std\n+\n+#endif // _CPP_BITS_LOCFACETS_TCC\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "be1b10d39d59a9bb234531f307a562949c0ddded", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.93 2001/08/10 15:47:22 gdr Exp $\n+## $Id: Makefile.am,v 1.94 2001/08/14 01:24:30 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -64,7 +64,8 @@ INCLUDES = \\\n sources = \\\n \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \\\n-\tlocale.cc locale-inst.cc localename.cc messages_members.cc \\\n+\tlocale.cc locale-inst.cc localename.cc \\\n+\tmessages.cc collate.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n \tvalarray-inst.cc wstring-inst.cc\n "}, {"sha": "cd9a05b9b9dd76c969133e16786007f1b9768a54", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -178,7 +178,7 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n \n \n-sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \tlocale.cc locale-inst.cc localename.cc messages_members.cc \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \tvalarray-inst.cc wstring-inst.cc\n+sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \tlocale.cc locale-inst.cc localename.cc \tmessages.cc collate.cc \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \tvalarray-inst.cc wstring-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src\n@@ -248,9 +248,9 @@ LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo limits.lo \\\n-locale.lo locale-inst.lo localename.lo messages_members.lo misc-inst.lo \\\n-stdexcept.lo stl-inst.lo string-inst.lo strstream.lo valarray-inst.lo \\\n-wstring-inst.lo\n+locale.lo locale-inst.lo localename.lo messages.lo collate.lo \\\n+misc-inst.lo stdexcept.lo stl-inst.lo string-inst.lo strstream.lo \\\n+valarray-inst.lo wstring-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "1ab74a3497fff9ed47026a44a4f0c4a2c18a9c61", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -1003,51 +1003,6 @@ namespace std\n     return __incl_prec;\n   }\n \n-  template <>\n-  collate<char>::collate(size_t __refs)\n-  : locale::facet(__refs) { }\n-  \n-  template<>\n-  collate<char>::~collate() { }\n-  \n-  template<>\n-  int \n-  collate<char>::do_compare(const char* __lo1, const char* __hi1, \n-\t\t\t    const char* __lo2, const char* __hi2) const\n-  {\n-    for (; __lo1 < __hi1 && __lo2 < __hi2; ++__lo1, ++__lo2) \n-      if (*__lo1 != *__lo2) \n-\treturn (*__lo1 < *__lo2) ? -1 : 1;\n-    if (__lo1 < __hi1) \n-      return 1;\n-    else if (__lo2 < __hi2) \n-      return -1;\n-    else \n-      return 0;\n-  }\n-  \n-  template<>\n-  string\n-  collate<char>::\n-  do_transform(const char* __lo, const char* __hi) const\n-  { return string(__lo, __hi - __lo); }\n-  \n-  template<>\n-  long\n-  collate<char>::\n-  do_hash(const char* __lo, const char* __hi) const\n-  {\n-    unsigned long __val = 0xdeadbeef;\n-    for (; __lo < __hi; ++__lo)\n-      __val = *__lo ^ ((__val << 7) & \n-\t\t   (__val >> (numeric_limits<unsigned long>::digits - 1)));\n-    return __val;\n-  }\n-\n-  template<>  \n-  collate_byname<char>::collate_byname(const char* /*__s*/, size_t __refs)\n-  : collate<char>(__refs) { }\n-\n   template<>\n   moneypunct_byname<char, false>::moneypunct_byname(const char* /*__s*/, \n \t\t\t\t\t\t    size_t __refs)\n@@ -1214,41 +1169,5 @@ namespace std\n   ctype_byname<wchar_t>::\n   ctype_byname(const char* /*__s*/, size_t __refs)\n   : ctype<wchar_t>(__refs) { }\n-\n-  template<>\n-  collate<wchar_t>::\n-  collate(size_t __refs): locale::facet(__refs) { }\n-  \n-  template<>\n-  collate<wchar_t>::\n-  ~collate() { }\n-\n-  template<>\n-  int \n-  collate<wchar_t>::\n-  do_compare(const wchar_t* /*__lo1*/, const wchar_t* /*__hi1*/,\n-\t     const wchar_t* /*__lo2*/, const wchar_t* /*__hi2*/) const\n-  {\n-    return 0; // XXX not done\n-  }\n-\n-  template<>  \n-  wstring collate<wchar_t>::\n-  do_transform(const wchar_t* /*__lo*/, const wchar_t* /*__hi*/) const\n-  {\n-    return wstring(); // XXX not done\n-  }\n-  \n-  template<>\n-  long collate<wchar_t>::\n-  do_hash(const wchar_t* /*__lo*/, const wchar_t* /*__hi*/) const\n-  {\n-    return 0; // XXX not done\n-  }\n-\n-  template<>\n-  collate_byname<wchar_t>::\n-  collate_byname(const char* /*__s*/, size_t __refs)\n-  : collate<wchar_t> (__refs) { }\n #endif //  _GLIBCPP_USE_WCHAR_T\n } // namespace std"}, {"sha": "3a2b9cfae7d4875f3e1ba6a14cfa665ac44eca66", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -91,11 +91,12 @@ namespace std\n \n     // Construct all standard facets and add them to _M_facets.\n     // XXX Eventually, all should use __clocale ctor like numpunct\n-    _M_init_facet(new std::collate<char>);\n+    // XXX how to deal cleanly, consistently with null (\"C\") __cloc?\n+    _M_init_facet(new std::collate<char>(__cloc));\n     _M_init_facet(new std::ctype<char>);\n     _M_init_facet(new codecvt<char, char, mbstate_t>);\n     _M_init_facet(new moneypunct<char, false>(__cloc));\n-    _M_init_facet(new moneypunct<char,true >);\n+    _M_init_facet(new moneypunct<char,true>(__cloc));\n     _M_init_facet(new money_get<char>);\n     _M_init_facet(new money_put<char>);\n     _M_init_facet(new numpunct<char>(__cloc));\n@@ -106,11 +107,11 @@ namespace std\n     _M_init_facet(new std::messages<char>(__cloc, __str.c_str()));\n     \n #ifdef  _GLIBCPP_USE_WCHAR_T\n-    _M_init_facet(new std::collate<wchar_t>);\n+    _M_init_facet(new std::collate<wchar_t>(__cloc));\n     _M_init_facet(new std::ctype<wchar_t>);\n     _M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n     _M_init_facet(new moneypunct<wchar_t, false>(__cloc));\n-    _M_init_facet(new moneypunct<wchar_t,true >);\n+    _M_init_facet(new moneypunct<wchar_t,true>(__cloc));\n     _M_init_facet(new money_get<wchar_t>);\n     _M_init_facet(new money_put<wchar_t>);\n     _M_init_facet(new numpunct<wchar_t>(__cloc));"}, {"sha": "7991210de0f7dbe244b7a73cdd3e4dd13c0b913a", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -75,6 +75,9 @@ namespace std\n   template\n     S::basic_string(C*, C*, const allocator<C>&);\n \n+  template\n+    S::basic_string(const C*, const C*, const allocator<C>&);\n+\n   template \n     S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n "}, {"sha": "502f5c0ec28f84d37ce0b571e2617fdf6882e0bd", "filename": "libstdc++-v3/testsuite/22_locale/collate.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -0,0 +1,52 @@\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4 The collate category\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::messages<char> test_type;\n+  typedef std::locale::facet base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_collate: public std::collate<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_collate facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "0d5abc87e562543a881445a0ee1a4890964af09e", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -0,0 +1,77 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.2 Template class collate_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+  string str;\n+  locale loc_c = locale::classic();\n+\n+  locale loc_byname(locale::classic(), new collate_byname<char>(\"es_ES\"));\n+  str = loc_byname.name();\n+\n+  locale loc_es(\"es_ES\");\n+  str = loc_es.name();\n+\n+  VERIFY( loc_es != loc_byname );\n+\n+  // cache the collate facets\n+  const collate<char>& mssg_byname = use_facet<collate<char> >(loc_byname); \n+  const collate<char>& mssg_de = use_facet<collate<char> >(loc_es); \n+\n+#if 0\n+  // Check Spanish (es_ES) locale.\n+  catalog cat_de = mssg_de.open(\"libstdc++\", loc_c, dir);\n+  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n+  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"bitte\" );\n+  VERIFY ( s02 == \"danke\" );\n+  mssg_de.close(cat_de);\n+\n+  // Check byname locale.\n+  catalog cat_byname = mssg_byname.open(\"libstdc++\", loc_c, dir);\n+  string s03 = mssg_byname.get(cat_de, 0, 0, \"please\");\n+  string s04 = mssg_byname.get(cat_de, 0, 0, \"thank you\");\n+  VERIFY ( s03 == \"bitte\" );\n+  VERIFY ( s04 == \"danke\" );\n+  mssg_byname.close(cat_byname);\n+\n+  VERIFY ( s01 == s03 );\n+  VERIFY ( s02 == s04 );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "e4cef57934768b31410c5100703368dd49018fbc", "filename": "libstdc++-v3/testsuite/22_locale/collate_char_members.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_char_members.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -0,0 +1,140 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This may not work for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n+  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+  // long hash(const charT*, const charT*) cosnt\n+  // string_type transform(const charT*, const charT*) const\n+\n+  // Check \"C\" locale.\n+  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n+  const char* strlit2 = \"imperial tea court green oolong\";\n+\n+  int i1;\n+  int size1 = strlen(strlit1) - 1;\n+  i1 = coll_c.compare(strlit1, strlit1 + size1, strlit1, strlit1 + 7);\n+  VERIFY ( i1 > 0 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + size1);\n+  VERIFY ( i1 < 0 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  int i2;\n+  int size2 = strlen(strlit2) - 1;\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + 13);\n+  VERIFY ( i2 > 0 );\n+  i2 = coll_c.compare(strlit2, strlit2 + 13, strlit2, strlit2 + size2);\n+  VERIFY ( i2 < 0 );\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + size2);\n+  VERIFY ( i2 == 0 );\n+\n+  long l1;\n+  long l2;\n+  l1 = coll_c.hash(strlit1, strlit1 + size1);\n+  l2 = coll_c.hash(strlit1, strlit1 + size1 - 1);\n+  VERIFY ( l1 != l2 );\n+  l1 = coll_c.hash(strlit1, strlit1 + size1);\n+  l2 = coll_c.hash(strlit2, strlit2 + size2);\n+  VERIFY ( l1 != l2 );\n+\n+  string str1 = coll_c.transform(strlit1, strlit1 + size1);\n+  string str2 = coll_c.transform(strlit2, strlit2 + size2);\n+  i1 = coll_c.compare(str1.c_str(), str1.c_str() + size1,\n+\t\t       str2.c_str(), str2.c_str() + size2);\n+  i2 = coll_c.compare(strlit1, strlit1 + size1, strlit2, strlit2 + size2);\n+  VERIFY(i1 == i2);\n+\n+  // Check German \"de_DE\" locale.\n+  const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int size3 = strlen(strlit3) - 1;\n+  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n+  VERIFY ( i1 > 0 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size1);\n+  VERIFY ( i1 < 0 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n+  VERIFY ( i1 < 0 );\n+\n+  int size4 = strlen(strlit4) - 1;\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n+  VERIFY ( i2 > 0 );\n+  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n+  VERIFY ( i2 < 0 );\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == 0 );\n+\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n+  VERIFY ( l1 != l2 );\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit4, strlit4 + size4);\n+  VERIFY ( l1 != l2 );\n+\n+  string str3 = coll_de.transform(strlit3, strlit3 + size3);\n+  string str4 = coll_de.transform(strlit4, strlit4 + size4);\n+  i1 = coll_de.compare(str3.c_str(), str3.c_str() + size3,\n+\t\t       str4.c_str(), str4.c_str() + size4);\n+  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n+  VERIFY(i1 == i2);\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "c60f8bb2be1650686b4605c32f4b6aeb187b4f44", "filename": "libstdc++-v3/testsuite/22_locale/collate_wchar_t_members.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_wchar_t_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0c0b6e1b3757fd5d86822bde108a613e697c4a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_wchar_t_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_wchar_t_members.cc?ref=ea0c0b6e1b3757fd5d86822bde108a613e697c4a", "patch": "@@ -0,0 +1,140 @@\n+// 2001-08-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This may not work for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n+  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n+  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+  // long hash(const charT*, const charT*) cosnt\n+  // string_type transform(const charT*, const charT*) const\n+\n+  // Check \"C\" locale.\n+  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n+  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n+\n+  int i1;\n+  int size1 = char_traits<wchar_t>::length(strlit1) - 1;\n+  i1 = coll_c.compare(strlit1, strlit1 + size1, strlit1, strlit1 + 7);\n+  VERIFY ( i1 > 0 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + size1);\n+  VERIFY ( i1 < 0 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  int i2;\n+  int size2 = char_traits<wchar_t>::length(strlit2) - 1;\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + 13);\n+  VERIFY ( i2 > 0 );\n+  i2 = coll_c.compare(strlit2, strlit2 + 13, strlit2, strlit2 + size2);\n+  VERIFY ( i2 < 0 );\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + size2);\n+  VERIFY ( i2 == 0 );\n+\n+  long l1;\n+  long l2;\n+  l1 = coll_c.hash(strlit1, strlit1 + size1);\n+  l2 = coll_c.hash(strlit1, strlit1 + size1 - 1);\n+  VERIFY ( l1 != l2 );\n+  l1 = coll_c.hash(strlit1, strlit1 + size1);\n+  l2 = coll_c.hash(strlit2, strlit2 + size2);\n+  VERIFY ( l1 != l2 );\n+\n+  wstring str1 = coll_c.transform(strlit1, strlit1 + size1);\n+  wstring str2 = coll_c.transform(strlit2, strlit2 + size2);\n+  i1 = coll_c.compare(str1.c_str(), str1.c_str() + size1,\n+\t\t      str2.c_str(), str2.c_str() + size2);\n+  i2 = coll_c.compare(strlit1, strlit1 + size1, strlit2, strlit2 + size2);\n+  VERIFY(i1 == i2);\n+\n+  // Check German \"de_DE\" locale.\n+  const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int size3 = char_traits<wchar_t>::length(strlit3) - 1;\n+  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n+  VERIFY ( i1 > 0 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size1);\n+  VERIFY ( i1 < 0 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n+  VERIFY ( i1 < 0 );\n+\n+  int size4 = char_traits<wchar_t>::length(strlit4) - 1;\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n+  VERIFY ( i2 > 0 );\n+  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n+  VERIFY ( i2 < 0 );\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == 0 );\n+\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n+  VERIFY ( l1 != l2 );\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit4, strlit4 + size4);\n+  VERIFY ( l1 != l2 );\n+\n+  wstring str3 = coll_de.transform(strlit3, strlit3 + size3);\n+  wstring str4 = coll_de.transform(strlit4, strlit4 + size4);\n+  i1 = coll_de.compare(str3.c_str(), str3.c_str() + size3,\n+\t\t       str4.c_str(), str4.c_str() + size4);\n+  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n+  VERIFY(i1 == i2);\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}\n+\n+\n+"}]}