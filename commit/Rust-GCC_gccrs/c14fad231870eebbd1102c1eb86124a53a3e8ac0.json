{"sha": "c14fad231870eebbd1102c1eb86124a53a3e8ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0ZmFkMjMxODcwZWViYmQxMTAyYzFlYjg2MTI0YTUzYTNlOGFjMA==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-06-19T19:56:08Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-06-21T20:04:41Z"}, "message": "Fix various Wformat-diag diagnostics\n\nFix warnings mainly coming from ` being used instead of %< and %>.\n\nAlso fixing occurences of :\n\n../../gcc/rust/lex/rust-token.cc:126:40: warning: unquoted sequence of 2 consecutive punctuation characters \u2018',\u2019 in format [-Wformat-diag]\n  126 |        \"attempted to get string for '%s', which has no string. \"\n      |                                        ^~\n../../gcc/rust/lex/rust-token.cc:127:39: warning: spurious trailing punctuation sequence \u2018.\u2019 in format [-Wformat-diag]\n  127 |        \"returning empty string instead.\",\n      |                                       ^\n../../gcc/rust/lex/rust-token.cc:126:37: warning: unterminated quote character \u2018'\u2019 in format [-Wformat-diag]\n  126 |        \"attempted to get string for '%s', which has no string. \"\n      |                                     ^\n\nand various occurences of :\n\n../../gcc/rust/lex/rust-lex.cc:1326:11: warning: unquoted keyword \u2018char\u2019 in format [-Wformat-diag]\n 1326 |     \"byte char %<%c%> out of range\", byte_char);\n      |           ^~~~\n\nAlso using full word for arguments, integer, character, declaration, variable,\nfloting-point instead of args, int, char, decl, var, float when applicable.", "tree": {"sha": "bad8467a78f300cc72ca6f9825ca52a0da1a6ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad8467a78f300cc72ca6f9825ca52a0da1a6ae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14fad231870eebbd1102c1eb86124a53a3e8ac0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEy35wXiwjotpFIaYoRb3lOkoqmoIFAmDQ8NoACgkQRb3lOkoq\nmoJT7xAAnwZwbexdgrWs0SfA9xAB+F4rdbp/lANd9jZDDkC5gvUBB1H2ZdpHYkX2\n7CU/w/EJUQWJsbrAek3oxjAS4/w+p3qOxxUMwvvr0XfmDaz2KtIiSeaxmnVland1\nwjbkKVUOX0ep0lO7naKlc80oMpOvFYD/pASk3KXnH9ykbbGGq6kyDPYT/QHz+WfL\nYQ1xmmx2tckWjJNcTT0hvb21DMzCZeACovpdXahD/pWhSz4b133SCwn8CxYzdHME\nL6COMQlII0bq3bQEeOmVZLoTUIz6HArBKwWFytgfVvNOwz81w8PN/AeJCr71FqTO\nuo0lP6dElvDoYSVEQqdamBxdUm7F3knxC3gtrgu2/Mwbcr/TzMo0BswCoHBEbldj\ndAQx4e/XyJ7ItLapA/eNuOD/ztQmfbS8u2qyPRBJ/vIa08wsMZOhDkb4qElHJ5ix\nFC6CiXUDNLx9N85E91r0HnuAxf08FUAhU2cuCYB5pk2QuAyVv56nBBG7q5/nVu/u\nkUhG897uDuShcvb1H1/RAceMwU/SNdEuq/EWsUP7O7FdvMGnIQRzs+MRsUCCK+R4\nsYN1ON8e5Bn2bsyAZCPauNSkTcRHhxgRMd/NpBdfcMXJ3X+la6yRl2B3rWfSJSDp\nLV3f3HOjdvvo6a0vRZOda9f90ehRTMNDK0cfHa3Lq68Q386CeKE=\n=Gkq7\n-----END PGP SIGNATURE-----", "payload": "tree bad8467a78f300cc72ca6f9825ca52a0da1a6ae1\nparent 7d3157eec84ef8620f4648200f54b293e561b8c4\nauthor Marc Poulhi\u00e8s <dkm@kataplop.net> 1624132568 +0200\ncommitter Marc Poulhi\u00e8s <dkm@kataplop.net> 1624305881 +0200\n\nFix various Wformat-diag diagnostics\n\nFix warnings mainly coming from ` being used instead of %< and %>.\n\nAlso fixing occurences of :\n\n../../gcc/rust/lex/rust-token.cc:126:40: warning: unquoted sequence of 2 consecutive punctuation characters \u2018',\u2019 in format [-Wformat-diag]\n  126 |        \"attempted to get string for '%s', which has no string. \"\n      |                                        ^~\n../../gcc/rust/lex/rust-token.cc:127:39: warning: spurious trailing punctuation sequence \u2018.\u2019 in format [-Wformat-diag]\n  127 |        \"returning empty string instead.\",\n      |                                       ^\n../../gcc/rust/lex/rust-token.cc:126:37: warning: unterminated quote character \u2018'\u2019 in format [-Wformat-diag]\n  126 |        \"attempted to get string for '%s', which has no string. \"\n      |                                     ^\n\nand various occurences of :\n\n../../gcc/rust/lex/rust-lex.cc:1326:11: warning: unquoted keyword \u2018char\u2019 in format [-Wformat-diag]\n 1326 |     \"byte char %<%c%> out of range\", byte_char);\n      |           ^~~~\n\nAlso using full word for arguments, integer, character, declaration, variable,\nfloting-point instead of args, int, char, decl, var, float when applicable.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14fad231870eebbd1102c1eb86124a53a3e8ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14fad231870eebbd1102c1eb86124a53a3e8ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14fad231870eebbd1102c1eb86124a53a3e8ac0/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3157eec84ef8620f4648200f54b293e561b8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3157eec84ef8620f4648200f54b293e561b8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3157eec84ef8620f4648200f54b293e561b8c4"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "5a224e225b51fc72afcdc0b51c3f0c7641edcbb6", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -203,7 +203,7 @@ class CompileExpr : public HIRCompileBase\n \t      != 0)\n \t    {\n \t      rust_fatal_error (expr.get_locus (),\n-\t\t\t\t\"bad float number in literal\");\n+\t\t\t\t\"bad floating-point number in literal\");\n \t      return;\n \t    }\n "}, {"sha": "af8d609e8d9d3597f8adf76ab464435b6edf2100", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -117,15 +117,15 @@ ResolvePathRef::visit (HIR::PathInExpression &expr)\n \t  else\n \t    {\n \t      rust_error_at (expr.get_locus (),\n-\t\t\t     \"failed to lookup definition decl\");\n+\t\t\t     \"failed to lookup definition declaration\");\n \t      return;\n \t    }\n \t}\n \n       if (!ctx->lookup_function_decl (lookup->get_ty_ref (), &fn))\n \t{\n \t  rust_fatal_error (expr.get_locus (),\n-\t\t\t    \"forward decl was not compiled 1\");\n+\t\t\t    \"forward declaration was not compiled\");\n \t  return;\n \t}\n     }"}, {"sha": "5f37e07f96ac383ee14bf84bf055fb4468f17788", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -64,15 +64,16 @@ class CompileStmt : public HIRCompileBase\n     if (!ctx->get_tyctx ()->lookup_type (stmt.get_mappings ().get_hirid (),\n \t\t\t\t\t &ty))\n       {\n-\trust_fatal_error (stmt.get_locus (), \"failed to lookup var decl type\");\n+\trust_fatal_error (stmt.get_locus (),\n+\t\t\t  \"failed to lookup variable declaration type\");\n \treturn;\n       }\n \n     Bvariable *var = nullptr;\n     if (!ctx->lookup_var_decl (stmt.get_mappings ().get_hirid (), &var))\n       {\n \trust_fatal_error (stmt.get_locus (),\n-\t\t\t  \"failed to lookup compiled variable decl\");\n+\t\t\t  \"failed to lookup compiled variable declaration\");\n \treturn;\n       }\n "}, {"sha": "351271c910914d0b25da3d2e742d589bfa7ec691", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -141,7 +141,8 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \texpr.get_mappings ().get_crate_num (), ref, nullptr);\n       if (resolved_item == nullptr)\n \t{\n-\t  rust_error_at (expr.get_locus (), \"failed to lookup forward decl\");\n+\t  rust_error_at (expr.get_locus (),\n+\t\t\t \"failed to lookup forward declaration\");\n \t  return;\n \t}\n \n@@ -162,7 +163,8 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \n       if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n \t{\n-\t  rust_error_at (expr.get_locus (), \"forward decl was not compiled\");\n+\t  rust_error_at (expr.get_locus (),\n+\t\t\t \"forward declaration was not compiled\");\n \t  return;\n \t}\n     }"}, {"sha": "dcb57c81badaabf71591db996cb012c63ee645f2", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -1323,15 +1323,15 @@ Lexer::parse_byte_char (Location loc)\n       if (byte_char > 127)\n \t{\n \t  rust_error_at (get_current_location (),\n-\t\t\t \"byte char %<%c%> out of range\", byte_char);\n+\t\t\t \"%<byte char%> %<%c%> out of range\", byte_char);\n \t  byte_char = 0;\n \t}\n \n       current_char = peek_input ();\n \n       if (current_char != '\\'')\n \t{\n-\t  rust_error_at (get_current_location (), \"unclosed byte char\");\n+\t  rust_error_at (get_current_location (), \"unclosed %<byte char%>\");\n \t}\n \n       skip_input ();\n@@ -1349,7 +1349,7 @@ Lexer::parse_byte_char (Location loc)\n \n       if (current_char != '\\'')\n \t{\n-\t  rust_error_at (get_current_location (), \"unclosed byte char\");\n+\t  rust_error_at (get_current_location (), \"unclosed %<byte char%>\");\n \t}\n \n       skip_input ();\n@@ -1359,7 +1359,7 @@ Lexer::parse_byte_char (Location loc)\n   else\n     {\n       rust_error_at (get_current_location (),\n-\t\t     \"no character inside %<%> for byte char\");\n+\t\t     \"no character inside %<%> for %<byte char%>\");\n     }\n \n   current_column += length;\n@@ -1398,7 +1398,7 @@ Lexer::parse_byte_string (Location loc)\n \t  if (output_char > 127)\n \t    {\n \t      rust_error_at (get_current_location (),\n-\t\t\t     \"char %<%c%> in byte string out of range\",\n+\t\t\t     \"character %<%c%> in byte string out of range\",\n \t\t\t     output_char);\n \t      output_char = 0;\n \t    }\n@@ -1880,7 +1880,7 @@ Lexer::parse_decimal_int_or_float (Location loc)\n \t  && type_hint != CORETYPE_UNKNOWN)\n \t{\n \t  rust_error_at (get_current_location (),\n-\t\t\t \"invalid type suffix %qs for float literal\",\n+\t\t\t \"invalid type suffix %qs for floating-point literal\",\n \t\t\t get_type_hint_string (type_hint));\n \t  // ignore invalid type suffix as everything else seems fine\n \t  type_hint = CORETYPE_UNKNOWN;\n@@ -1929,7 +1929,7 @@ Lexer::parse_decimal_int_or_float (Location loc)\n \t  && type_hint != CORETYPE_UNKNOWN)\n \t{\n \t  rust_error_at (get_current_location (),\n-\t\t\t \"invalid type suffix %qs for float literal\",\n+\t\t\t \"invalid type suffix %qs for floating-point literal\",\n \t\t\t get_type_hint_string (type_hint));\n \t  // ignore invalid type suffix as everything else seems fine\n \t  type_hint = CORETYPE_UNKNOWN;\n@@ -1975,7 +1975,7 @@ Lexer::parse_char_or_lifetime (Location loc)\n \n       if (peek_codepoint_input ().value != '\\'')\n \t{\n-\t  rust_error_at (get_current_location (), \"unended char literal\");\n+\t  rust_error_at (get_current_location (), \"unended character literal\");\n \t}\n       else\n \t{\n@@ -2032,7 +2032,7 @@ Lexer::parse_char_or_lifetime (Location loc)\n \t{\n \t  rust_error_at (\n \t    get_current_location (),\n-\t    \"expected %' after character constant in char literal\");\n+\t    \"expected %' after character constant in character literal\");\n \t  return nullptr;\n \t}\n     }"}, {"sha": "7b5a305bbea778db367f36f5847e6a20c43e9443", "filename": "gcc/rust/lex/rust-token.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Flex%2Frust-token.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Flex%2Frust-token.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-token.cc?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -123,8 +123,8 @@ Token::get_str () const\n   if (str == NULL)\n     {\n       rust_error_at (get_locus (),\n-\t\t     \"attempted to get string for '%s', which has no string. \"\n-\t\t     \"returning empty string instead.\",\n+\t\t     \"attempted to get string for %<%s%>, which has no string. \"\n+\t\t     \"returning empty string instead\",\n \t\t     get_token_description ());\n       return empty;\n     }"}, {"sha": "264b753b26606bdb6a4711d15acaee5d6954b253", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -49,7 +49,7 @@ class ScanDeadcode : public MarkLiveBase\n     if (live_symbols.find (hirId) == live_symbols.end ())\n       {\n \trust_warning_at (function.get_locus (), 0,\n-\t\t\t \"function is never used: `%s`\",\n+\t\t\t \"function is never used: %<%s%>\",\n \t\t\t function.get_function_name ().c_str ());\n \treturn;\n       }"}, {"sha": "b4f264e026136adafdeeca379dfa7e4d68db858b", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -472,9 +472,9 @@ Parser<ManagedTokenSource>::parse_inner_attribute ()\n {\n   if (lexer.peek_token ()->get_id () != HASH)\n     {\n-      Error error (\n-\tlexer.peek_token ()->get_locus (),\n-\t\"BUG: token %<#%> is missing, but parse_inner_attribute was invoked.\");\n+      Error error (lexer.peek_token ()->get_locus (),\n+\t\t   \"BUG: token %<#%> is missing, but %<parse_inner_attribute%> \"\n+\t\t   \"was invoked\");\n       add_error (std::move (error));\n \n       return AST::Attribute::create_empty ();\n@@ -12000,7 +12000,7 @@ Parser<ManagedTokenSource>::parse_struct_expr_field ()\n       add_error (\n \tError (t->get_locus (),\n \t       \"unrecognised token %qs as first token of struct expr field - \"\n-\t       \"expected identifier or int literal\",\n+\t       \"expected identifier or integer literal\",\n \t       t->get_token_description ()));\n \n       return nullptr;\n@@ -14402,7 +14402,7 @@ Parser<ManagedTokenSource>::parse_struct_expr_struct_partial (\n       add_error (\n \tError (t->get_locus (),\n \t       \"unrecognised token %qs in struct (or enum) expression - \"\n-\t       \"expected %<}%>, identifier, int literal, or %<..%>\",\n+\t       \"expected %<}%>, identifier, integer literal, or %<..%>\",\n \t       t->get_token_description ()));\n \n       return nullptr;"}, {"sha": "bd990f7c5701966febc8ac571c1aea5b494677ac", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -150,7 +150,7 @@ class ResolvePathSegmentToCanonicalPath\n \tif (!ok)\n \t  {\n \t    rust_error_at (seg.get_locus (),\n-\t\t\t   \"failed to resolve all generic args\");\n+\t\t\t   \"failed to resolve all generic arguments\");\n \t    return CanonicalPath::create_empty ();\n \t  }\n "}, {"sha": "e03a745b0240248ffe00c20486756ea52face7b8", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -512,7 +512,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       if (!ok)\n \t{\n \t  rust_error_at (root_segment.get_locus (),\n-\t\t\t \"failed to resolve generic args\");\n+\t\t\t \"failed to resolve generic arguments\");\n \t  return;\n \t}\n     }"}, {"sha": "ba984f8a69b5256dd5a747cfc1b9b66321312af6", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -654,7 +654,8 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t      == TyTy::InferType::INTEGRAL));\n \t  if (!valid)\n \t    {\n-\t      rust_error_at (expr.get_locus (), \"cannot apply unary ! to %s\",\n+\t      rust_error_at (expr.get_locus (),\n+\t\t\t     \"cannot apply unary %<!%> to %s\",\n \t\t\t     negated_expr_ty->as_string ().c_str ());\n \t      return;\n \t    }\n@@ -983,7 +984,8 @@ class TypeCheckExpr : public TypeCheckBase\n     if (!block_expr->is_unit ())\n       {\n \trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n-\t\t       \"expected () got %s\", block_expr->as_string ().c_str ());\n+\t\t       \"expected %<()%> got %s\",\n+\t\t       block_expr->as_string ().c_str ());\n \treturn;\n       }\n \n@@ -1011,7 +1013,8 @@ class TypeCheckExpr : public TypeCheckBase\n     if (!block_expr->is_unit ())\n       {\n \trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n-\t\t       \"expected () got %s\", block_expr->as_string ().c_str ());\n+\t\t       \"expected %<()%> got %s\",\n+\t\t       block_expr->as_string ().c_str ());\n \treturn;\n       }\n \n@@ -1023,7 +1026,7 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     if (!inside_loop)\n       {\n-\trust_error_at (expr.get_locus (), \"cannot `break` outside of a loop\");\n+\trust_error_at (expr.get_locus (), \"cannot %<break%> outside of a loop\");\n \treturn;\n       }\n \n@@ -1036,7 +1039,7 @@ class TypeCheckExpr : public TypeCheckBase\n \tif (loop_context->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    rust_error_at (expr.get_locus (),\n-\t\t\t   \"can only break with a value inside `loop`\");\n+\t\t\t   \"can only break with a value inside %<loop%>\");\n \t    return;\n \t  }\n \n@@ -1052,7 +1055,7 @@ class TypeCheckExpr : public TypeCheckBase\n     if (!inside_loop)\n       {\n \trust_error_at (expr.get_locus (),\n-\t\t       \"cannot `continue` outside of a loop\");\n+\t\t       \"cannot %<continue%> outside of a loop\");\n \treturn;\n       }\n "}, {"sha": "b4baccf42993e8afcc857b83a0d2f0db91f0f3ec", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -170,7 +170,7 @@ class TypeCheckType : public TypeCheckBase\n     else if (!args.is_empty ())\n       {\n \trust_error_at (path.get_locus (),\n-\t\t       \"TypePath %s declares generic argument's but \"\n+\t\t       \"TypePath %s declares generic arguments but \"\n \t\t       \"the type %s does not have any\",\n \t\t       path.as_string ().c_str (),\n \t\t       translated->as_string ().c_str ());"}, {"sha": "dd2472c8c19d87da109ee32306125beb79d6c9a8", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -1504,7 +1504,7 @@ TypeCheckCallExpr::visit (ADTType &type)\n     {\n       rust_error_at (\n \tcall.get_locus (),\n-\t\"expected function, tuple struct or tuple variant, found struct `%s`\",\n+\t\"expected function, tuple struct or tuple variant, found struct %<%s%>\",\n \ttype.get_name ().c_str ());\n       return;\n     }"}, {"sha": "91cabffa89439009b1e2a8804879e62e0b25ca31", "filename": "gcc/testsuite/rust/compile/break1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let a;\n     a = 1;\n-    break a; // { dg-error \"cannot `break` outside of a loop\" }\n+    break a; // { dg-error \"cannot 'break' outside of a loop\" }\n     // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "5ac806aeb9ed00bd29f29190c31cd46028c80907", "filename": "gcc/testsuite/rust/compile/break2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     let mut c;\n     while b > 10 {\n         if (b == 2) {\n-            break b;  // { dg-error \"can only break with a value inside `loop`\" }\n+            break b;  // { dg-error \"can only break with a value inside 'loop'\" }\n             // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n         }\n         c = a + b;"}, {"sha": "994312b52cc6673f3e6461c873abc314c11b7f28", "filename": "gcc/testsuite/rust/compile/continue1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let mut b = 1;\n \n     let _fib = {\n-        continue; // { dg-error \"cannot `continue` outside of a loop\" }\n+        continue; // { dg-error \"cannot 'continue' outside of a loop\" }\n         // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n         123\n     };"}, {"sha": "d95e6b01c008e27ab01402fad51bcf187cb9bda1", "filename": "gcc/testsuite/rust/compile/torture/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused.rs?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -1,9 +1,9 @@\n-// { dg-warning \"function is never used: `bar`\" \"\" { target *-*-* } .+1 }\n+// { dg-warning \"function is never used: 'bar'\" \"\" { target *-*-* } .+1 }\n fn bar() {\n     foo();\n }\n \n-// { dg-warning \"function is never used: `foo`\" \"\" { target *-*-* } .+1 }\n+// { dg-warning \"function is never used: 'foo'\" \"\" { target *-*-* } .+1 }\n fn foo() {\n     bar();\n }"}, {"sha": "74297e03c7daaa1bee420cacf415c9686551fb93", "filename": "gcc/testsuite/rust/compile/torture/unused1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -3,7 +3,7 @@ fn test() -> i32 {\n }\n \n fn unused() -> i32 {\n-    // { dg-warning \"function is never used: `unused`\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"function is never used: 'unused'\" \"\" { target *-*-* } .-1 }\n     // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n     2\n }"}, {"sha": "c382909811d7ee60d289464f95b64050bdd41153", "filename": "gcc/testsuite/rust/compile/tuple_struct1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct1.rs?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -4,7 +4,7 @@ struct Foo {\n }\n \n fn main() {\n-    let a = Foo(1, 2); // { dg-error \"expected function, tuple struct or tuple variant, found struct `Foo`\" }\n+    let a = Foo(1, 2); // { dg-error \"expected function, tuple struct or tuple variant, found struct 'Foo'\" }\n     // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-1 }\n     // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "b0a3dafbbd0862689058feca292d3236bc022ea5", "filename": "gcc/testsuite/rust/compile/unary_not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14fad231870eebbd1102c1eb86124a53a3e8ac0/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs?ref=c14fad231870eebbd1102c1eb86124a53a3e8ac0", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     let c: bool = !false;\n     let d: i32 = !3;\n \n-    let e: f32 = !5f32; // { dg-error \"cannot apply unary ! to f32\" }\n+    let e: f32 = !5f32; // { dg-error \"cannot apply unary '!' to f32\" }\n     // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}]}