{"sha": "88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33", "node_id": "C_kwDOANBUbNoAKDg4NDU5YzM5NjVlMmEyZjYyYWI0ZDRjOGIyYWM4NDYwYjFhMTVjMzM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-11T18:53:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-11T19:30:17Z"}, "message": "c++: lambda template in requires [PR105541]\n\nSince the patch for PR103408, the template parameters for the lambda in this\ntest have level 1 instead of 2, and we were treating null template args as 1\nlevel of arguments, so tsubst_template_parms decided it had nothing to do.\nFixed by distinguishing between <> and no args at all, which is what we have\nin our \"substitution\" in a requires-expression.\n\n\tPR c++/105541\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (TMPL_ARGS_DEPTH): 0 for null args.\n\t* parser.cc (cp_parser_enclosed_template_argument_list):\n\tUse 0-length TREE_VEC for <>.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/lambda-requires1.C: New test.", "tree": {"sha": "94e5295924083ad979f32ab1373c7b3e3d4816c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e5295924083ad979f32ab1373c7b3e3d4816c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc86f716fe6087f1cf786d69c0c6f3f5af810f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc86f716fe6087f1cf786d69c0c6f3f5af810f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc86f716fe6087f1cf786d69c0c6f3f5af810f0"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "b6961a796af84c8cfa75d6da9e097b342bdd63c9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33", "patch": "@@ -3771,11 +3771,13 @@ struct GTY(()) lang_decl {\n \n /* The depth of a template argument vector.  When called directly by\n    the parser, we use a TREE_LIST rather than a TREE_VEC to represent\n-   template arguments.  In fact, we may even see NULL_TREE if there\n-   are no template arguments.  In both of those cases, there is only\n-   one level of template arguments.  */\n-#define TMPL_ARGS_DEPTH(NODE)\t\t\t\t\t\\\n-  (TMPL_ARGS_HAVE_MULTIPLE_LEVELS (NODE) ? TREE_VEC_LENGTH (NODE) : 1)\n+   template arguments.  In that case, there is only one level of template\n+   arguments.  We may even see NULL_TREE if there are 0 levels of\n+   template arguments, as in cp_parser_requires_expression.   */\n+#define TMPL_ARGS_DEPTH(NODE)\t\t\t\t\t\t\\\n+  ((NODE) == NULL_TREE ? 0\t\t\t\t\t\t\\\n+   : TMPL_ARGS_HAVE_MULTIPLE_LEVELS (NODE) ? TREE_VEC_LENGTH (NODE)\t\\\n+   : 1)\n \n /* The LEVELth level of the template ARGS.  The outermost level of\n    args is level 1, not level 0.  */"}, {"sha": "d09d5b7c8b7434d16dc98c486f94b5e148617a90", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33", "patch": "@@ -32151,7 +32151,10 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n       || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT)\n       || cp_lexer_next_token_is (parser->lexer, CPP_GREATER_EQ)\n       || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT_EQ))\n-    arguments = NULL_TREE;\n+    {\n+      arguments = make_tree_vec (0);\n+      SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (arguments, 0);\n+    }\n   else\n     arguments = cp_parser_template_argument_list (parser);\n   /* Look for the `>' that ends the template-argument-list. If we find"}, {"sha": "fdfdaebcf6a8332fba872790487751e55a9f6ca7", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-requires1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-requires1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-requires1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-requires1.C?ref=88459c3965e2a2f62ab4d4c8b2ac8460b1a15c33", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/105541\n+// { dg-do compile { target c++20 } }\n+\n+static_assert(requires { []<typename T>{}; });"}]}