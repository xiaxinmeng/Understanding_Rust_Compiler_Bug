{"sha": "b8063b2909a05268a1dc6863b9fb2487595b8580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwNjNiMjkwOWEwNTI2OGExZGM2ODYzYjlmYjI0ODc1OTViODU4MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-04-26T02:29:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-04-26T02:29:43Z"}, "message": "re PR target/31388 (ICE building libiberty multilib for mips16 multilibs)\n\n\tPR c++/31388\n\t* cp-tree.h (ARITHMETIC_TYPE): Include COMPLEX_TYPE.\n\t* typeck.c (type_after_usual_arithmetic_conversions): Adjust, as\n\tCOMPLEX_TYPE is now an ARITHMETIC_TYPE.\n\t* init.c (build_zero_init): Adjust, as\n\tCOMPLEX_TYPE is now a SCALAR_TYPE.\n\t* typeck2.c (digest_init): Allow brace-enclosed initializers for\n\tCOMPLEX_TYPE, even though that is now a SCALAR_TYPE.\n\n\tPR c++/31388\n\t* g++.dg/ext/complex2.C: New test.\n\nFrom-SVN: r124172", "tree": {"sha": "9b9523b3f9b720207ceab7b0378c8591487f1f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b9523b3f9b720207ceab7b0378c8591487f1f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8063b2909a05268a1dc6863b9fb2487595b8580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8063b2909a05268a1dc6863b9fb2487595b8580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8063b2909a05268a1dc6863b9fb2487595b8580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8063b2909a05268a1dc6863b9fb2487595b8580/comments", "author": null, "committer": null, "parents": [{"sha": "6b2eeb54e04774e73ecf7416e4eb69af0ae3ae1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2eeb54e04774e73ecf7416e4eb69af0ae3ae1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2eeb54e04774e73ecf7416e4eb69af0ae3ae1b"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "3846c0bb6a10e3b3ba1d6edfa7169be50d0a9038", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8063b2909a05268a1dc6863b9fb2487595b8580", "patch": "@@ -1,3 +1,14 @@\n+2007-04-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/31388\n+\t* cp-tree.h (ARITHMETIC_TYPE): Include COMPLEX_TYPE.\n+\t* typeck.c (type_after_usual_arithmetic_conversions): Adjust, as\n+\tCOMPLEX_TYPE is now an ARITHMETIC_TYPE.\n+\t* init.c (build_zero_init): Adjust, as\n+\tCOMPLEX_TYPE is now a SCALAR_TYPE.\n+\t* typeck2.c (digest_init): Allow brace-enclosed initializers for\n+\tCOMPLEX_TYPE, even though that is now a SCALAR_TYPE.\n+\n 2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* semantics.c (classtype_has_nothrow_copy_or_assign_p): Adjust"}, {"sha": "fb682c7ee04cbc988bf59c29a061d749b8520747", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b8063b2909a05268a1dc6863b9fb2487595b8580", "patch": "@@ -2660,14 +2660,21 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n /* [basic.fundamental]\n \n    Integral and floating types are collectively called arithmetic\n-   types.  Keep these checks in ascending code order.  */\n+   types.  \n+\n+   As a GNU extension, we also accept complex types.\n+\n+   Keep these checks in ascending code order.  */\n #define ARITHMETIC_TYPE_P(TYPE) \\\n-  (CP_INTEGRAL_TYPE_P (TYPE) || TREE_CODE (TYPE) == REAL_TYPE)\n+  (CP_INTEGRAL_TYPE_P (TYPE) \\\n+   || TREE_CODE (TYPE) == REAL_TYPE \\\n+   || TREE_CODE (TYPE) == COMPLEX_TYPE)\n \n /* [basic.types]\n \n    Arithmetic types, enumeration types, pointer types, and\n    pointer-to-member types, are collectively called scalar types.\n+   \n    Keep these checks in ascending code order.  */\n #define SCALAR_TYPE_P(TYPE)\t\t\t\\\n   (TYPE_PTRMEM_P (TYPE)\t\t\t\t\\"}, {"sha": "3023cf09d4bdd190c786f33893405b23ff2888dc", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b8063b2909a05268a1dc6863b9fb2487595b8580", "patch": "@@ -178,8 +178,7 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n        items with static storage duration that are not otherwise\n        initialized are initialized to zero.  */\n     ;\n-  else if (SCALAR_TYPE_P (type)\n-\t   || TREE_CODE (type) == COMPLEX_TYPE)\n+  else if (SCALAR_TYPE_P (type))\n     init = convert (type, integer_zero_node);\n   else if (CLASS_TYPE_P (type))\n     {"}, {"sha": "7e816f102f780bf18b73abf7fd94ef662a458a66", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b8063b2909a05268a1dc6863b9fb2487595b8580", "patch": "@@ -258,11 +258,9 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n \n   /* FIXME: Attributes.  */\n   gcc_assert (ARITHMETIC_TYPE_P (t1)\n-\t      || TREE_CODE (t1) == COMPLEX_TYPE\n \t      || TREE_CODE (t1) == VECTOR_TYPE\n \t      || TREE_CODE (t1) == ENUMERAL_TYPE);\n   gcc_assert (ARITHMETIC_TYPE_P (t2)\n-\t      || TREE_CODE (t2) == COMPLEX_TYPE\n \t      || TREE_CODE (t2) == VECTOR_TYPE\n \t      || TREE_CODE (t2) == ENUMERAL_TYPE);\n \n@@ -757,9 +755,9 @@ common_type (tree t1, tree t2)\n   code2 = TREE_CODE (t2);\n \n   if ((ARITHMETIC_TYPE_P (t1) || code1 == ENUMERAL_TYPE\n-       || code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE)\n+       || code1 == VECTOR_TYPE)\n       && (ARITHMETIC_TYPE_P (t2) || code2 == ENUMERAL_TYPE\n-\t  || code2 == COMPLEX_TYPE || code2 == VECTOR_TYPE))\n+\t  || code2 == VECTOR_TYPE))\n     return type_after_usual_arithmetic_conversions (t1, t2);\n \n   else if ((TYPE_PTR_P (t1) && TYPE_PTR_P (t2))"}, {"sha": "9ded7bbf8644406c379639245f97c9e14a14ba23", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b8063b2909a05268a1dc6863b9fb2487595b8580", "patch": "@@ -702,7 +702,8 @@ digest_init (tree type, tree init)\n     }\n \n   /* Handle scalar types (including conversions) and references.  */\n-  if (SCALAR_TYPE_P (type) || code == REFERENCE_TYPE)\n+  if (TREE_CODE (type) != COMPLEX_TYPE\n+      && (SCALAR_TYPE_P (type) || code == REFERENCE_TYPE))\n     return convert_for_initialization (0, type, init, LOOKUP_NORMAL,\n \t\t\t\t       \"initialization\", NULL_TREE, 0);\n "}, {"sha": "c9e8cdce59ac50e2a6e30f9f011bbad578e5beca", "filename": "gcc/testsuite/g++.dg/ext/complex2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplex2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8063b2909a05268a1dc6863b9fb2487595b8580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplex2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplex2.C?ref=b8063b2909a05268a1dc6863b9fb2487595b8580", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/31388\n+// { dg-options \"\" }\n+\n+bool b = !0i;\n+"}]}