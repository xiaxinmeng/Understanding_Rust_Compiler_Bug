{"sha": "aa09da44c7f7974aa79e2e409b86be215fef95b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEwOWRhNDRjN2Y3OTc0YWE3OWUyZTQwOWI4NmJlMjE1ZmVmOTViNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-03-24T16:13:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-03-24T16:13:12Z"}, "message": "tree.c (mapcar): When dealing with a DECL, use it's constant value, if any.\n\n\ufffd\n\t* tree.c (mapcar): When dealing with a DECL, use it's constant\n\tvalue, if any.\n\t* pt.c (lookup_template_class): Don't mangle the names of template\n\tclasses whose arguments are unknown.\n\t* pt.c (tsubst_expr): Handle GOTO_STMT correctly.\n\nFrom-SVN: r18804", "tree": {"sha": "e624fb2b59a8240867b11734d6669841a9a9db75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e624fb2b59a8240867b11734d6669841a9a9db75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa09da44c7f7974aa79e2e409b86be215fef95b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa09da44c7f7974aa79e2e409b86be215fef95b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa09da44c7f7974aa79e2e409b86be215fef95b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa09da44c7f7974aa79e2e409b86be215fef95b7/comments", "author": null, "committer": null, "parents": [{"sha": "ae16ec5f2c93d51d755ea453b4c4efa5e3557e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae16ec5f2c93d51d755ea453b4c4efa5e3557e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae16ec5f2c93d51d755ea453b4c4efa5e3557e97"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "7685f48365e719cbd640bc8a76743193198a0eac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa09da44c7f7974aa79e2e409b86be215fef95b7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa09da44c7f7974aa79e2e409b86be215fef95b7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aa09da44c7f7974aa79e2e409b86be215fef95b7", "patch": "@@ -2827,7 +2827,7 @@ lookup_template_class (d1, arglist, in_decl, context)\n \n       /* We need to set this again after CLASSTYPE_TEMPLATE_INFO is set up.  */\n       DECL_ASSEMBLER_NAME (TYPE_MAIN_DECL (t)) = id;\n-      /* if (! uses_template_parms (arglist)) */\n+      if (! uses_template_parms (arglist))\n \tDECL_ASSEMBLER_NAME (TYPE_MAIN_DECL (t)) \n \t  = get_identifier (build_overload_name (t, 1, 1));\n \n@@ -5077,8 +5077,13 @@ tsubst_expr (t, args, in_decl)\n \n     case GOTO_STMT:\n       lineno = TREE_COMPLEXITY (t);\n-      finish_goto_stmt (tsubst_expr (GOTO_DESTINATION (t),\n-\t\t\t\t     args, in_decl));\n+      t = GOTO_DESTINATION (t);\n+      if (TREE_CODE (t) != IDENTIFIER_NODE)\n+\t/* Computed goto's must be tsubst'd into.  On the other hand,\n+\t   non-computed gotos must not be; the identifier in question\n+\t   will have no binding.  */\n+\tt = tsubst_expr (t, args, in_decl);\n+      finish_goto_stmt (t);\n       break;\n \n     case ASM_STMT:"}, {"sha": "c6c1a569cf28ed3f37edfa15cb88fb0233fecf67", "filename": "gcc/testsuite/g++.old-deja/g++.pt/goto.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa09da44c7f7974aa79e2e409b86be215fef95b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fgoto.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa09da44c7f7974aa79e2e409b86be215fef95b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fgoto.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fgoto.C?ref=aa09da44c7f7974aa79e2e409b86be215fef95b7", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link:\n+\n+template<class T>\n+void compute(T) {\n+    goto Exit;\n+Exit: ;\n+    }\n+\n+int main() \n+{\n+  compute(0);\n+}"}]}