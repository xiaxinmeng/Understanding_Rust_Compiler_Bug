{"sha": "2a49c16d6be771586b39bcb156e9619d68bf4662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0OWMxNmQ2YmU3NzE1ODZiMzliY2IxNTZlOTYxOWQ2OGJmNDY2Mg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-12T18:51:53Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-12T18:51:53Z"}, "message": "Add bounds checking to vqdm*_lane intrinsics via a qualifier that also flips endianness\n\ngcc/:\n\n\t* config/aarch64/aarch64.c (aarch64_simd_lane_bounds): Display indices.\n\n\t* config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers): Add\n\tqualifier_lane_index.\n\t(aarch64_types_ternop_lane_qualifiers, TYPES_TERNOP_LANE): Rename to...\n\t(aarch64_types_quadop_lane_qualifiers, TYPES_QUADOP_LANE): ...these.\n\t(aarch64_types_ternop_lane_qualifiers, TYPES_TERNOP_LANE): New.\n\n\t(aarch64_types_getlane_qualifiers): Rename to...\n\t(aarch64_types_binop_imm_qualifiers): ...this.\n\t(TYPES_SHIFTIMM): Follow renaming.\n\t(TYPES_GETLANE): Rename to...\n\t(TYPE_GETREG): ...this.\n\n\t(aarch64_types_setlane_qualifiers): Rename to...\n\t(aarch64_type_ternop_imm_qualifiers): ...this.\n\t(TYPES_SHIFTINSERT, TYPES_SHIFTACC): Follow renaming.\n\t(TYPES_SETLANE): Follow renaming above, and rename self to...\n\t(TYPE_SETREG): ...this.\n\n\t(enum builtin_simd_arg): Add SIMD_ARG_LANE_INDEX.\n\t(aarch64_simd_expand_args): Add range check and endianness-flip.\n\n\t(aarch64_simd_expand_builtin): Add mapping for qualifier_lane_index.\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_sq<r>dmulh_lane<mode>_internal *2): Rename to...\n\t(aarch64_sq<r>dmulh_lane<mode>): ...this, and remove lane bounds check.\n\t(aarch64_sqdmulh_lane<mode> *2, aarch64_sqrdmulh_lane<mode> *2): Delete.\n\n\t(aarch64_sq<r>dmulh_laneq<mode>_internal): Rename to...\n\t(aarch64_sq<r>dmulh_lane<mode>): ...this.\n\n\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal *2): Rename to...\n\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>): ...this.\n\n\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal *2): Rename to...\n\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>): ...this.\n\n\t(aarch64_sqdmull_lane<mode>_internal *2): Rename to...\n\t(aarch64_sqdmull_lane<mode>): ...this.\n\n\t(aarch64_sqdmull_laneq<mode>_internal *2): Rename to...\n\t(aarch64_sqdmull_laneq<mode>): ...this.\n\n\t(aarch64_sqdmulh_laneq<mode>, aarch64_sqrdmulh_laneq<mode>,\n\t(aarch64_sqdmlal_lane<mode>, aarch64_sqdmlal_laneq<mode>,\n\taarch64_sqdmlsl_lane<mode>, aarch64_sqdmlsl_laneq<mode>,\n\taarch64_sqdmull_lane<mode>, aarch64_sqdmull_laneq<mode>): Delete.\n\n\t(aarch64_sqdmlal2_lane<mode>, aarch64_sqdmlal2_laneq<mode>,\n\taarch64_sqdmlsl2_lane<mode>, aarch64_sqdmlsl2_laneq<mode>,\n\taarch64_sqdmull2_lane<mode>, aarch64_sqdmull2_laneq<mode>): Remove\n\tbounds check and lane flip.\n\n\t* config/aarch64/aarch64-simd-builtins.def (be_checked_get_lane,\n\tget_dregoi, get_dregci, getdregxi, get_qregoi,get_qregci, get_qregxi,\n\tset_qregoi, set_qregci, set_qregxi): Change qualifiers to GETREG.\n\n\t(sqdmlal_lane, sqdmlsl_lane, sqdmlal_laneq, sqdmlsl_laneq,\n\tsqdmlal2_lane, sqdmlsl2_lane, sqdmlal2_laneq, sqdmlsl2_laneq): Follow\n\trenaming of TERNOP_LANE to QUADOP_LANE.\n\n\t(sqdmull_lane, sqdmull_laneq, sqdmull2_lane, sqdmull2_laneq,\n\tsqdmulh_lane, sqdmulh_laneq, sqrdmulh_lane, sqrdmulh_laneq): Set\n\tqualifiers to TERNOP_LANE.\n\ngcc/testsuite/:\n\n         * gcc.target/aarch64/simd/vqdmlal_high_lane_s16_indices_1.c: New test.\n         * gcc.target/aarch64/simd/vqdmlal_high_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlal_high_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlal_high_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlal_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlal_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlal_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlal_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlalh_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlals_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_high_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_high_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_high_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_high_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsl_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlslh_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmlsls_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulh_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulh_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulh_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulh_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulhh_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulhq_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulhq_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulhq_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulhq_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulhs_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_high_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_high_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_high_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_high_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmull_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmullh_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqdmulls_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulh_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulh_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulh_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulh_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulhh_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulhq_lane_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulhq_lane_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulhq_laneq_s16_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulhq_laneq_s32_indices_1.c: Likewise.\n         * gcc.target/aarch64/simd/vqrdmulhs_lane_s32_indices_1.c: Likewise.\n\nFrom-SVN: r217440", "tree": {"sha": "37a7c4094db1d2f1f13bcb74ea4d5eac1f0f5a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37a7c4094db1d2f1f13bcb74ea4d5eac1f0f5a75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a49c16d6be771586b39bcb156e9619d68bf4662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a49c16d6be771586b39bcb156e9619d68bf4662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a49c16d6be771586b39bcb156e9619d68bf4662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a49c16d6be771586b39bcb156e9619d68bf4662/comments", "author": null, "committer": null, "parents": [{"sha": "0a00227221552d6951346876790bd0570de5b5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a00227221552d6951346876790bd0570de5b5be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a00227221552d6951346876790bd0570de5b5be"}], "stats": {"total": 1412, "additions": 1148, "deletions": 264}, "files": [{"sha": "2eb6f3515d88a49f27f80137885e390288171d1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -1,3 +1,72 @@\n+2014-11-12  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_lane_bounds): Display indices.\n+\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers): Add\n+\tqualifier_lane_index.\n+\t(aarch64_types_ternop_lane_qualifiers, TYPES_TERNOP_LANE): Rename to...\n+\t(aarch64_types_quadop_lane_qualifiers, TYPES_QUADOP_LANE): ...these.\n+\t(aarch64_types_ternop_lane_qualifiers, TYPES_TERNOP_LANE): New.\n+\n+\t(aarch64_types_getlane_qualifiers): Rename to...\n+\t(aarch64_types_binop_imm_qualifiers): ...this.\n+\t(TYPES_SHIFTIMM): Follow renaming.\n+\t(TYPES_GETLANE): Rename to...\n+\t(TYPE_GETREG): ...this.\n+\n+\t(aarch64_types_setlane_qualifiers): Rename to...\n+\t(aarch64_type_ternop_imm_qualifiers): ...this.\n+\t(TYPES_SHIFTINSERT, TYPES_SHIFTACC): Follow renaming.\n+\t(TYPES_SETLANE): Follow renaming above, and rename self to...\n+\t(TYPE_SETREG): ...this.\n+\n+\t(enum builtin_simd_arg): Add SIMD_ARG_LANE_INDEX.\n+\t(aarch64_simd_expand_args): Add range check and endianness-flip.\n+\n+\t(aarch64_simd_expand_builtin): Add mapping for qualifier_lane_index.\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_sq<r>dmulh_lane<mode>_internal *2): Rename to...\n+\t(aarch64_sq<r>dmulh_lane<mode>): ...this, and remove lane bounds check.\n+\t(aarch64_sqdmulh_lane<mode> *2, aarch64_sqrdmulh_lane<mode> *2): Delete.\n+\n+\t(aarch64_sq<r>dmulh_laneq<mode>_internal): Rename to...\n+\t(aarch64_sq<r>dmulh_lane<mode>): ...this.\n+\n+\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal *2): Rename to...\n+\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>): ...this.\n+\n+\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal *2): Rename to...\n+\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>): ...this.\n+\n+\t(aarch64_sqdmull_lane<mode>_internal *2): Rename to...\n+\t(aarch64_sqdmull_lane<mode>): ...this.\n+\n+\t(aarch64_sqdmull_laneq<mode>_internal *2): Rename to...\n+\t(aarch64_sqdmull_laneq<mode>): ...this.\n+\n+\t(aarch64_sqdmulh_laneq<mode>, aarch64_sqrdmulh_laneq<mode>,\n+\t(aarch64_sqdmlal_lane<mode>, aarch64_sqdmlal_laneq<mode>,\n+\taarch64_sqdmlsl_lane<mode>, aarch64_sqdmlsl_laneq<mode>,\n+\taarch64_sqdmull_lane<mode>, aarch64_sqdmull_laneq<mode>): Delete.\n+\n+\t(aarch64_sqdmlal2_lane<mode>, aarch64_sqdmlal2_laneq<mode>,\n+\taarch64_sqdmlsl2_lane<mode>, aarch64_sqdmlsl2_laneq<mode>,\n+\taarch64_sqdmull2_lane<mode>, aarch64_sqdmull2_laneq<mode>): Remove\n+\tbounds check and lane flip.\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (be_checked_get_lane,\n+\tget_dregoi, get_dregci, getdregxi, get_qregoi,get_qregci, get_qregxi,\n+\tset_qregoi, set_qregci, set_qregxi): Change qualifiers to GETREG.\n+\n+\t(sqdmlal_lane, sqdmlsl_lane, sqdmlal_laneq, sqdmlsl_laneq,\n+\tsqdmlal2_lane, sqdmlsl2_lane, sqdmlal2_laneq, sqdmlsl2_laneq): Follow\n+\trenaming of TERNOP_LANE to QUADOP_LANE.\n+\n+\t(sqdmull_lane, sqdmull_laneq, sqdmull2_lane, sqdmull2_laneq,\n+\tsqdmulh_lane, sqdmulh_laneq, sqrdmulh_lane, sqrdmulh_laneq): Set\n+\tqualifiers to TERNOP_LANE.\n+\n 2014-11-12  Tobias Burnus  <burnus@net-b.de>\n \n \t* Makefile.in (CLOOGLIBS, CLOOGINC): Remove."}, {"sha": "87962f1f4f990a0b177e4ce318ae6c5366778265", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -114,7 +114,9 @@ enum aarch64_type_qualifiers\n   /* qualifier_const | qualifier_pointer | qualifier_map_mode  */\n   qualifier_const_pointer_map_mode = 0x86,\n   /* Polynomial types.  */\n-  qualifier_poly = 0x100\n+  qualifier_poly = 0x100,\n+  /* Lane indices - must be in range, and flipped for bigendian.  */\n+  qualifier_lane_index = 0x200\n };\n \n typedef struct\n@@ -167,22 +169,26 @@ aarch64_types_ternop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none, qualifier_none };\n #define TYPES_TERNOP (aarch64_types_ternop_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_ternop_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_lane_index };\n+#define TYPES_TERNOP_LANE (aarch64_types_ternop_lane_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_ternopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned,\n       qualifier_unsigned, qualifier_unsigned };\n #define TYPES_TERNOPU (aarch64_types_ternopu_qualifiers)\n \n static enum aarch64_type_qualifiers\n-aarch64_types_ternop_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+aarch64_types_quadop_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none,\n-      qualifier_none, qualifier_immediate };\n-#define TYPES_TERNOP_LANE (aarch64_types_ternop_lane_qualifiers)\n+      qualifier_none, qualifier_lane_index };\n+#define TYPES_QUADOP_LANE (aarch64_types_quadop_lane_qualifiers)\n \n static enum aarch64_type_qualifiers\n-aarch64_types_getlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+aarch64_types_binop_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_immediate };\n-#define TYPES_GETLANE (aarch64_types_getlane_qualifiers)\n-#define TYPES_SHIFTIMM (aarch64_types_getlane_qualifiers)\n+#define TYPES_GETREG (aarch64_types_binop_imm_qualifiers)\n+#define TYPES_SHIFTIMM (aarch64_types_binop_imm_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_shift_to_unsigned_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_none, qualifier_immediate };\n@@ -193,11 +199,11 @@ aarch64_types_unsigned_shift_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define TYPES_USHIFTIMM (aarch64_types_unsigned_shift_qualifiers)\n \n static enum aarch64_type_qualifiers\n-aarch64_types_setlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+aarch64_types_ternop_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none, qualifier_immediate };\n-#define TYPES_SETLANE (aarch64_types_setlane_qualifiers)\n-#define TYPES_SHIFTINSERT (aarch64_types_setlane_qualifiers)\n-#define TYPES_SHIFTACC (aarch64_types_setlane_qualifiers)\n+#define TYPES_SETREG (aarch64_types_ternop_imm_qualifiers)\n+#define TYPES_SHIFTINSERT (aarch64_types_ternop_imm_qualifiers)\n+#define TYPES_SHIFTACC (aarch64_types_ternop_imm_qualifiers)\n \n static enum aarch64_type_qualifiers\n aarch64_types_unsigned_shiftacc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -853,6 +859,7 @@ typedef enum\n {\n   SIMD_ARG_COPY_TO_REG,\n   SIMD_ARG_CONSTANT,\n+  SIMD_ARG_LANE_INDEX,\n   SIMD_ARG_STOP\n } builtin_simd_arg;\n \n@@ -896,6 +903,19 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t\top[argc] = copy_to_mode_reg (mode[argc], op[argc]);\n \t      break;\n \n+\t    case SIMD_ARG_LANE_INDEX:\n+\t      /* Must be a previous operand into which this is an index.  */\n+\t      gcc_assert (argc > 0);\n+\t      if (CONST_INT_P (op[argc]))\n+\t\t{\n+\t\t  enum machine_mode vmode = mode[argc - 1];\n+\t\t  aarch64_simd_lane_bounds (op[argc],\n+\t\t\t\t\t    0, GET_MODE_NUNITS (vmode));\n+\t\t  /* Keep to GCC-vector-extension lane indices in the RTL.  */\n+\t\t  op[argc] = GEN_INT (ENDIAN_LANE_N (vmode, INTVAL (op[argc])));\n+\t\t}\n+\t      /* Fall through - if the lane index isn't a constant then\n+\t\t the next case will error.  */\n \t    case SIMD_ARG_CONSTANT:\n \t      if (!(*insn_data[icode].operand[argc + have_retval].predicate)\n \t\t  (op[argc], mode[argc]))\n@@ -1004,7 +1024,9 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n       int operands_k = k - is_void;\n       int expr_args_k = k - 1;\n \n-      if (d->qualifiers[qualifiers_k] & qualifier_immediate)\n+      if (d->qualifiers[qualifiers_k] & qualifier_lane_index)\n+\targs[k] = SIMD_ARG_LANE_INDEX;\n+      else if (d->qualifiers[qualifiers_k] & qualifier_immediate)\n \targs[k] = SIMD_ARG_CONSTANT;\n       else if (d->qualifiers[qualifiers_k] & qualifier_maybe_immediate)\n \t{"}, {"sha": "10bf67eb7c87346199c3c88253a2331720a380ef", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -47,7 +47,8 @@\n   VAR1 (UNOP, addp, 0, di)\n   BUILTIN_VDQ_BHSI (UNOP, clz, 2)\n \n-  BUILTIN_VALL (GETLANE, be_checked_get_lane, 0)\n+  /* be_checked_get_lane does its own lane swapping, so not a lane index.  */\n+  BUILTIN_VALL (GETREG, be_checked_get_lane, 0)\n \n   /* Implemented by aarch64_<sur>q<r>shl<mode>.  */\n   BUILTIN_VSDQ_I (BINOP, sqshl, 0)\n@@ -64,17 +65,17 @@\n   BUILTIN_VSDQ_I (BINOP_UUS, usqadd, 0)\n \n   /* Implemented by aarch64_get_dreg<VSTRUCT:mode><VDC:mode>.  */\n-  BUILTIN_VDC (GETLANE, get_dregoi, 0)\n-  BUILTIN_VDC (GETLANE, get_dregci, 0)\n-  BUILTIN_VDC (GETLANE, get_dregxi, 0)\n+  BUILTIN_VDC (GETREG, get_dregoi, 0)\n+  BUILTIN_VDC (GETREG, get_dregci, 0)\n+  BUILTIN_VDC (GETREG, get_dregxi, 0)\n   /* Implemented by aarch64_get_qreg<VSTRUCT:mode><VQ:mode>.  */\n-  BUILTIN_VQ (GETLANE, get_qregoi, 0)\n-  BUILTIN_VQ (GETLANE, get_qregci, 0)\n-  BUILTIN_VQ (GETLANE, get_qregxi, 0)\n+  BUILTIN_VQ (GETREG, get_qregoi, 0)\n+  BUILTIN_VQ (GETREG, get_qregci, 0)\n+  BUILTIN_VQ (GETREG, get_qregxi, 0)\n   /* Implemented by aarch64_set_qreg<VSTRUCT:mode><VQ:mode>.  */\n-  BUILTIN_VQ (SETLANE, set_qregoi, 0)\n-  BUILTIN_VQ (SETLANE, set_qregci, 0)\n-  BUILTIN_VQ (SETLANE, set_qregxi, 0)\n+  BUILTIN_VQ (SETREG, set_qregoi, 0)\n+  BUILTIN_VQ (SETREG, set_qregci, 0)\n+  BUILTIN_VQ (SETREG, set_qregxi, 0)\n   /* Implemented by aarch64_ld<VSTRUCT:nregs><VDC:mode>.  */\n   BUILTIN_VDC (LOADSTRUCT, ld2, 0)\n   BUILTIN_VDC (LOADSTRUCT, ld3, 0)\n@@ -142,43 +143,44 @@\n   BUILTIN_VSDQ_I (UNOP, sqabs, 0)\n   BUILTIN_VSDQ_I (UNOP, sqneg, 0)\n \n-  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlal_lane, 0)\n-  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlsl_lane, 0)\n-  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlal_laneq, 0)\n-  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlsl_laneq, 0)\n-  BUILTIN_VQ_HSI (TERNOP, sqdmlal2, 0)\n-  BUILTIN_VQ_HSI (TERNOP, sqdmlsl2, 0)\n-  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlal2_lane, 0)\n-  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlsl2_lane, 0)\n-  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlal2_laneq, 0)\n-  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlsl2_laneq, 0)\n-  BUILTIN_VQ_HSI (TERNOP, sqdmlal2_n, 0)\n-  BUILTIN_VQ_HSI (TERNOP, sqdmlsl2_n, 0)\n   /* Implemented by aarch64_sqdml<SBINQOPS:as>l<mode>.  */\n   BUILTIN_VSD_HSI (TERNOP, sqdmlal, 0)\n   BUILTIN_VSD_HSI (TERNOP, sqdmlsl, 0)\n+  /* Implemented by aarch64_sqdml<SBINQOPS:as>l_lane<mode>.  */\n+  BUILTIN_VSD_HSI (QUADOP_LANE, sqdmlal_lane, 0)\n+  BUILTIN_VSD_HSI (QUADOP_LANE, sqdmlsl_lane, 0)\n+  /* Implemented by aarch64_sqdml<SBINQOPS:as>l_laneq<mode>.  */\n+  BUILTIN_VSD_HSI (QUADOP_LANE, sqdmlal_laneq, 0)\n+  BUILTIN_VSD_HSI (QUADOP_LANE, sqdmlsl_laneq, 0)\n   /* Implemented by aarch64_sqdml<SBINQOPS:as>l_n<mode>.  */\n   BUILTIN_VD_HSI (TERNOP, sqdmlal_n, 0)\n   BUILTIN_VD_HSI (TERNOP, sqdmlsl_n, 0)\n \n+  BUILTIN_VQ_HSI (TERNOP, sqdmlal2, 0)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmlsl2, 0)\n+  BUILTIN_VQ_HSI (QUADOP_LANE, sqdmlal2_lane, 0)\n+  BUILTIN_VQ_HSI (QUADOP_LANE, sqdmlsl2_lane, 0)\n+  BUILTIN_VQ_HSI (QUADOP_LANE, sqdmlal2_laneq, 0)\n+  BUILTIN_VQ_HSI (QUADOP_LANE, sqdmlsl2_laneq, 0)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmlal2_n, 0)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmlsl2_n, 0)\n+\n   BUILTIN_VSD_HSI (BINOP, sqdmull, 0)\n-  BUILTIN_VSD_HSI (TERNOP, sqdmull_lane, 0)\n-  BUILTIN_VSD_HSI (TERNOP, sqdmull_laneq, 0)\n+  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_lane, 0)\n+  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_laneq, 0)\n   BUILTIN_VD_HSI (BINOP, sqdmull_n, 0)\n   BUILTIN_VQ_HSI (BINOP, sqdmull2, 0)\n-  BUILTIN_VQ_HSI (TERNOP, sqdmull2_lane, 0)\n-  BUILTIN_VQ_HSI (TERNOP, sqdmull2_laneq, 0)\n+  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmull2_lane, 0)\n+  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmull2_laneq, 0)\n   BUILTIN_VQ_HSI (BINOP, sqdmull2_n, 0)\n   /* Implemented by aarch64_sq<r>dmulh<mode>.  */\n   BUILTIN_VSDQ_HSI (BINOP, sqdmulh, 0)\n   BUILTIN_VSDQ_HSI (BINOP, sqrdmulh, 0)\n   /* Implemented by aarch64_sq<r>dmulh_lane<q><mode>.  */\n-  BUILTIN_VDQHS (TERNOP, sqdmulh_lane, 0)\n-  BUILTIN_VSDQ_HSI (TERNOP, sqdmulh_laneq, 0)\n-  BUILTIN_VDQHS (TERNOP, sqrdmulh_lane, 0)\n-  BUILTIN_VSDQ_HSI (TERNOP, sqrdmulh_laneq, 0)\n-  BUILTIN_SD_HSI (TERNOP, sqdmulh_lane, 0)\n-  BUILTIN_SD_HSI (TERNOP, sqrdmulh_lane, 0)\n+  BUILTIN_VSDQ_HSI (TERNOP_LANE, sqdmulh_lane, 0)\n+  BUILTIN_VSDQ_HSI (TERNOP_LANE, sqdmulh_laneq, 0)\n+  BUILTIN_VSDQ_HSI (TERNOP_LANE, sqrdmulh_lane, 0)\n+  BUILTIN_VSDQ_HSI (TERNOP_LANE, sqrdmulh_laneq, 0)\n \n   BUILTIN_VSDQ_I_DI (BINOP, ashl, 3)\n   /* Implemented by aarch64_<sur>shl<mode>.  */"}, {"sha": "1a9e0dee1f71097b54b524b72f2c3e43f3c972c2", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 219, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -2771,41 +2771,7 @@\n \n ;; sq<r>dmulh_lane\n \n-(define_expand \"aarch64_sqdmulh_lane<mode>\"\n-  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n-   (match_operand:VDQHS 1 \"register_operand\" \"\")\n-   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"immediate_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-  {\n-     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n-     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n-     emit_insn (gen_aarch64_sqdmulh_lane<mode>_internal (operands[0],\n-                                                         operands[1],\n-                                                         operands[2],\n-                                                         operands[3]));\n-     DONE;\n-  }\n-)\n-\n-(define_expand \"aarch64_sqrdmulh_lane<mode>\"\n-  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n-   (match_operand:VDQHS 1 \"register_operand\" \"\")\n-   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"immediate_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-  {\n-     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n-     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n-     emit_insn (gen_aarch64_sqrdmulh_lane<mode>_internal (operands[0],\n-                                                          operands[1],\n-                                                          operands[2],\n-                                                          operands[3]));\n-     DONE;\n-  }\n-)\n-\n-(define_insn \"aarch64_sq<r>dmulh_lane<mode>_internal\"\n+(define_insn \"aarch64_sq<r>dmulh_lane<mode>\"\n   [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n         (unspec:VDQHS\n \t  [(match_operand:VDQHS 1 \"register_operand\" \"w\")\n@@ -2815,47 +2781,12 @@\n \t VQDMULH))]\n   \"TARGET_SIMD\"\n   \"*\n-   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n    return \\\"sq<r>dmulh\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\\\";\"\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_expand \"aarch64_sqdmulh_laneq<mode>\"\n-  [(match_operand:VSDQ_HSI 0 \"register_operand\" \"\")\n-   (match_operand:VSDQ_HSI 1 \"register_operand\" \"\")\n-   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"immediate_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-  {\n-     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n-     emit_insn (gen_aarch64_sqdmulh_laneq<mode>_internal (operands[0],\n-                                                          operands[1],\n-                                                          operands[2],\n-                                                          operands[3]));\n-     DONE;\n-   }\n-)\n-\n-(define_expand \"aarch64_sqrdmulh_laneq<mode>\"\n-  [(match_operand:VSDQ_HSI 0 \"register_operand\" \"\")\n-   (match_operand:VSDQ_HSI 1 \"register_operand\" \"\")\n-   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"immediate_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-  {\n-     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n-     emit_insn (gen_aarch64_sqrdmulh_laneq<mode>_internal (operands[0],\n-                                                           operands[1],\n-                                                           operands[2],\n-                                                           operands[3]));\n-     DONE;\n-   }\n-)\n-\n-(define_insn \"aarch64_sq<r>dmulh_laneq<mode>_internal\"\n+(define_insn \"aarch64_sq<r>dmulh_laneq<mode>\"\n   [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n         (unspec:VDQHS\n \t  [(match_operand:VDQHS 1 \"register_operand\" \"w\")\n@@ -2870,41 +2801,7 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_expand \"aarch64_sqdmulh_lane<mode>\"\n-  [(match_operand:SD_HSI 0 \"register_operand\" \"\")\n-   (match_operand:SD_HSI 1 \"register_operand\" \"\")\n-   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"immediate_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-  {\n-    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n-    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n-    emit_insn (gen_aarch64_sqdmulh_lane<mode>_internal (operands[0],\n-                                                        operands[1],\n-                                                        operands[2],\n-                                                        operands[3]));\n-    DONE;\n-  }\n-)\n-\n-(define_expand \"aarch64_sqrdmulh_lane<mode>\"\n-  [(match_operand:SD_HSI 0 \"register_operand\" \"\")\n-   (match_operand:SD_HSI 1 \"register_operand\" \"\")\n-   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"immediate_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-  {\n-    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n-    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n-    emit_insn (gen_aarch64_sqrdmulh_lane<mode>_internal (operands[0],\n-                                                         operands[1],\n-                                                         operands[2],\n-                                                         operands[3]));\n-    DONE;\n-  }\n-)\n-\n-(define_insn \"aarch64_sq<r>dmulh_lane<mode>_internal\"\n+(define_insn \"aarch64_sq<r>dmulh_lane<mode>\"\n   [(set (match_operand:SD_HSI 0 \"register_operand\" \"=w\")\n         (unspec:SD_HSI\n \t  [(match_operand:SD_HSI 1 \"register_operand\" \"w\")\n@@ -2919,7 +2816,7 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"aarch64_sq<r>dmulh_laneq<mode>_internal\"\n+(define_insn \"aarch64_sq<r>dmulh_laneq<mode>\"\n   [(set (match_operand:SD_HSI 0 \"register_operand\" \"=w\")\n         (unspec:SD_HSI\n \t  [(match_operand:SD_HSI 1 \"register_operand\" \"w\")\n@@ -2954,7 +2851,7 @@\n \n ;; vqdml[sa]l_lane\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal\"\n+(define_insn \"aarch64_sqdml<SBINQOPS:as>l_lane<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (SBINQOPS:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n@@ -2978,7 +2875,7 @@\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal\"\n+(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (SBINQOPS:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n@@ -3002,7 +2899,7 @@\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal\"\n+(define_insn \"aarch64_sqdml<SBINQOPS:as>l_lane<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (SBINQOPS:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n@@ -3025,7 +2922,7 @@\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal\"\n+(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (SBINQOPS:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n@@ -3048,70 +2945,6 @@\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_expand \"aarch64_sqdmlal_lane<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n-   (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlal_lane<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t      operands[2], operands[3],\n-\t\t\t\t\t\t      operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmlal_laneq<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n-   (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlal_laneq<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t      operands[2], operands[3],\n-\t\t\t\t\t\t      operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmlsl_lane<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n-   (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlsl_lane<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t      operands[2], operands[3],\n-\t\t\t\t\t\t      operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmlsl_laneq<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n-   (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlsl_laneq<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t      operands[2], operands[3],\n-\t\t\t\t\t\t      operands[4]));\n-  DONE;\n-})\n-\n ;; vqdml[sa]l_n\n \n (define_insn \"aarch64_sqdml<SBINQOPS:as>l_n<mode>\"\n@@ -3242,8 +3075,6 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3259,8 +3090,6 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3276,8 +3105,6 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3293,8 +3120,6 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3366,7 +3191,7 @@\n \n ;; vqdmull_lane\n \n-(define_insn \"aarch64_sqdmull_lane<mode>_internal\"\n+(define_insn \"aarch64_sqdmull_lane<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n@@ -3387,7 +3212,7 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdmull_laneq<mode>_internal\"\n+(define_insn \"aarch64_sqdmull_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n@@ -3408,7 +3233,7 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdmull_lane<mode>_internal\"\n+(define_insn \"aarch64_sqdmull_lane<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n@@ -3428,7 +3253,7 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdmull_laneq<mode>_internal\"\n+(define_insn \"aarch64_sqdmull_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n@@ -3448,34 +3273,6 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar_long\")]\n )\n \n-(define_expand \"aarch64_sqdmull_lane<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VSD_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n-  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n-  emit_insn (gen_aarch64_sqdmull_lane<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t      operands[2], operands[3]));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmull_laneq<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VSD_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n-  emit_insn (gen_aarch64_sqdmull_laneq<mode>_internal\n-\t       (operands[0], operands[1], operands[2], operands[3]));\n-  DONE;\n-})\n-\n ;; vqdmull_n\n \n (define_insn \"aarch64_sqdmull_n<mode>\"\n@@ -3585,8 +3382,6 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n-  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));\n@@ -3601,8 +3396,6 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));"}, {"sha": "07f75e14f3622034a8a92e29b51fb1e0d04986f0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -8163,7 +8163,7 @@ aarch64_simd_lane_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n   lane = INTVAL (operand);\n \n   if (lane < low || lane >= high)\n-    error (\"lane out of range\");\n+    error (\"lane %ld out of range %ld - %ld\", lane, low, high - 1);\n }\n \n /* Emit code to place a AdvSIMD pair result in memory locations (with equal"}, {"sha": "5478e501010f53dce3af04afe8d4976070e47fe0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -1,3 +1,56 @@\n+2014-11-12  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+         * gcc.target/aarch64/simd/vqdmlal_high_lane_s16_indices_1.c: New test.\n+         * gcc.target/aarch64/simd/vqdmlal_high_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlal_high_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlal_high_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlal_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlal_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlal_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlal_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlalh_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlals_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_high_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_high_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_high_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_high_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsl_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlslh_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmlsls_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulh_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulh_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulh_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulh_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulhh_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulhq_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulhq_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulhq_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulhq_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulhs_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_high_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_high_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_high_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_high_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmull_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmullh_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqdmulls_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulh_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulh_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulh_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulh_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulhh_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulhq_lane_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulhq_lane_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulhq_laneq_s16_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulhq_laneq_s32_indices_1.c: Likewise.\n+         * gcc.target/aarch64/simd/vqrdmulhs_lane_s32_indices_1.c: Likewise.\n+\n 2014-11-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/387-1.c (dg-skip-if): Use *-*-* target selector."}, {"sha": "dd52b3e727921e4645066a832931becb64479fee", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_lane_s16_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_c = vreinterpret_s16_u64 (base_c);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_lane_s16 (int32x4_a, int16x8_b, int16x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_lane_s16 (int32x4_a, int16x8_b, int16x4_c, 4);\n+}"}, {"sha": "279e5923464f54450758990244845c9270cd9283", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_lane_s32_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_c = vreinterpret_s32_u64 (base_c);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_lane_s32 (int64x2_a, int32x4_b, int32x2_c, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_lane_s32 (int64x2_a, int32x4_b, int32x2_c, 2);\n+}"}, {"sha": "6a6e8779e9cad2201e0f7b92daa3c601c8f58f80", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_laneq_s16_indices_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+  int16x8_t int16x8_c = vreinterpretq_s16_u64 (baseq_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_laneq_s16 (int32x4_a, int16x8_b, int16x8_c, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_laneq_s16 (int32x4_a, int16x8_b, int16x8_c, 8);\n+}"}, {"sha": "e3353a3f9a8e27a362bce765e0e7c4df51d4fce9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_laneq_s32_indices_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+  int32x4_t int32x4_c = vreinterpretq_s32_u64 (baseq_c);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_laneq_s32 (int64x2_a, int32x4_b, int32x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_high_laneq_s32 (int64x2_a, int32x4_b, int32x4_c, 4);\n+}"}, {"sha": "69bd5f5b2363481e04849b4526d4725ac7b9d7d9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_lane_s16_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+  int16x4_t int16x4_c = vreinterpret_s16_u64 (base_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_lane_s16 (int32x4_a, int16x4_b, int16x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_lane_s16 (int32x4_a, int16x4_b, int16x4_c, 4);\n+}"}, {"sha": "e8886c565687e0eebe1ba1cf540e819d20613c43", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_lane_s32_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+  int32x2_t int32x2_c = vreinterpret_s32_u64 (base_c);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_lane_s32 (int64x2_a, int32x2_b, int32x2_c, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_lane_s32 (int64x2_a, int32x2_b, int32x2_c, 2);\n+}"}, {"sha": "f800d360a7a6fae0a58d37ff87cd081e00d77e5c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_laneq_s16_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+  int16x8_t int16x8_c = vreinterpretq_s16_u64 (baseq_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_laneq_s16 (int32x4_a, int16x4_b, int16x8_c, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_laneq_s16 (int32x4_a, int16x4_b, int16x8_c, 8);\n+}"}, {"sha": "f72f92a63deccd8b40851801cb52082ddd1fcbbe", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_laneq_s32_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+  int32x4_t int32x4_c = vreinterpretq_s32_u64 (baseq_c);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_laneq_s32 (int64x2_a, int32x2_b, int32x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlal_laneq_s32 (int64x2_a, int32x2_b, int32x4_c, 4);\n+}"}, {"sha": "34b01f0a606a6b404f4734d20e675263ac44f623", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlalh_lane_s16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  int16_t int16_b = 0x5678;\n+  int16x4_t int16x4_c = vreinterpret_s16_u64 (base_c);\n+  int32_t int32_a = 0xdeadbeef;\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlalh_lane_s16 (int32_a, int16_b, int16x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlalh_lane_s16 (int32_a, int16_b, int16x4_c, 4);\n+}"}, {"sha": "43e656a4c5e599a0ca8904457448de7f2a1e3e02", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlals_lane_s32_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  int64_t int64_a = 0x1111222233334444LL;\n+  int32_t int32_b = 0xcafebabe;\n+  int32x2_t int32x2_c = vreinterpret_s32_u64 (base_c);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlals_lane_s32 (int64_a, int32_b, int32x2_c, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlals_lane_s32 (int64_a, int32_b, int32x2_c, 2);\n+}"}, {"sha": "c4c009fbdb369de9c10cdf09d35701c1a92baf51", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_lane_s16_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_c = vreinterpret_s16_u64 (base_c);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_lane_s16 (int32x4_a, int16x8_b, int16x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_lane_s16 (int32x4_a, int16x8_b, int16x4_c, 4);\n+}"}, {"sha": "1d9d242fd1a8037382c3d7be1a735dca21147848", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_lane_s32_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_c = vreinterpret_s32_u64 (base_c);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_lane_s32 (int64x2_a, int32x4_b, int32x2_c, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_lane_s32 (int64x2_a, int32x4_b, int32x2_c, 2);\n+}"}, {"sha": "d0675f1ce8a0b6a5dd0c110388d64d6eecfb33e2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_laneq_s16_indices_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+  int16x8_t int16x8_c = vreinterpretq_s16_u64 (baseq_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_laneq_s16 (int32x4_a, int16x8_b, int16x8_c, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_laneq_s16 (int32x4_a, int16x8_b, int16x8_c, 8);\n+}"}, {"sha": "56383eee1fb4bde84931e3caf81c1f2818569070", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_laneq_s32_indices_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+  int32x4_t int32x4_c = vreinterpretq_s32_u64 (baseq_c);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_laneq_s32 (int64x2_a, int32x4_b, int32x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_high_laneq_s32 (int64x2_a, int32x4_b, int32x4_c, 4);\n+}"}, {"sha": "99996804f075553feb1731484a61fe8b2ffca058", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_lane_s16_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+  int16x4_t int16x4_c = vreinterpret_s16_u64 (base_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_lane_s16 (int32x4_a, int16x4_b, int16x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_lane_s16 (int32x4_a, int16x4_b, int16x4_c, 4);\n+}"}, {"sha": "a4f35ca0fa4dc384d2d228caccc185a4a1ef07bd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_lane_s32_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+  int32x2_t int32x2_c = vreinterpret_s32_u64 (base_c);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_lane_s32 (int64x2_a, int32x2_b, int32x2_c, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_lane_s32 (int64x2_a, int32x2_b, int32x2_c, 2);\n+}"}, {"sha": "65e9c0094a74b782e8847a0f410f05d0a4b2d617", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_laneq_s16_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+  int16x8_t int16x8_c = vreinterpretq_s16_u64 (baseq_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_laneq_s16 (int32x4_a, int16x4_b, int16x8_c, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_laneq_s16 (int32x4_a, int16x4_b, int16x8_c, 8);\n+}"}, {"sha": "4dc33607e38c1261e7dc97e6d4622bf34b84b514", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_laneq_s32_indices_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_c = vcombine_u64 (base_c, base_a);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+  int32x4_t int32x4_c = vreinterpretq_s32_u64 (baseq_c);\n+  int64x2_t int64x2_a = vreinterpretq_s64_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_laneq_s32 (int64x2_a, int32x2_b, int32x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlsl_laneq_s32 (int64x2_a, int32x2_b, int32x4_c, 4);\n+}"}, {"sha": "f46e5bb201b619cc09a8a523c4dee552e4a11e51", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlslh_lane_s16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  int16_t int16_b = 0x5678;\n+  int16x4_t int16x4_c = vreinterpret_s16_u64 (base_c);\n+  int32_t int32_a = 0xdeadbeef;\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlslh_lane_s16 (int32_a, int16_b, int16x4_c, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmlslh_lane_s16 (int32_a, int16_b, int16x4_c, 4);\n+}"}, {"sha": "c8271f4c7c249b26caeb89fca49ee4e88321a89f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsls_lane_s32_indices_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  int64_t int64_a = 0x1111222233334444LL;\n+  int32_t int32_b = 0xcafebabe;\n+  int32x2_t int32x2_c = vreinterpret_s32_u64 (base_c);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlsls_lane_s32 (int64_a, int32_b, int32x2_c, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmlsls_lane_s32 (int64_a, int32_b, int32x2_c, 2);\n+}\n+"}, {"sha": "9bde011bf9ae62e3c5f7962d2e24cfa24a9a229a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulh_lane_s16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int16x4_t int16x4_a = vreinterpret_s16_u64 (base_a);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_lane_s16 (int16x4_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_lane_s16 (int16x4_a, int16x4_b, 4);\n+}"}, {"sha": "bd93566fe0588674f26b88ccdfae7c0dc645e733", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulh_lane_s32_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int32x2_t int32x2_a = vreinterpret_s32_u64 (base_a);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_lane_s32 (int32x2_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_lane_s32 (int32x2_a, int32x2_b, 2);\n+}"}, {"sha": "ece91e63f07cebf007a72612f87f85b9561a2b58", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulh_laneq_s16_indices_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int16x4_t int16x4_a = vreinterpret_s16_u64 (base_a);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_laneq_s16 (int16x4_a, int16x8_b, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_laneq_s16 (int16x4_a, int16x8_b, 8);\n+}"}, {"sha": "dd5afb32abfcea14ee91f54faa3078c4ff9f5e01", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulh_laneq_s32_indices_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int32x2_t int32x2_a = vreinterpret_s32_u64 (base_a);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_laneq_s32 (int32x2_a, int32x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulh_laneq_s32 (int32x2_a, int32x4_b, 4);\n+}"}, {"sha": "8804e8402674b128d8ef7e69f00fdf0727b33e2c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhh_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int16_t int16_a = 0x1234;\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulhh_lane_s16 (int16_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulhh_lane_s16 (int16_a, int16x4_b, 4);\n+}"}, {"sha": "0b19ea9b17c31a43dbba85876777888e8217d6f5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhq_lane_s16_indices_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+  int16x8_t int16x8_a = vreinterpretq_s16_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_lane_s16 (int16x8_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_lane_s16 (int16x8_a, int16x4_b, 4);\n+}"}, {"sha": "f2d3228a8014f64bc1f4c9f9ffe4a8c90b74cc79", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhq_lane_s32_indices_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_lane_s32 (int32x4_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_lane_s32 (int32x4_a, int32x2_b, 2);\n+}"}, {"sha": "20f528422326decf78f30c393de6960508b420e2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhq_laneq_s16_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int16x8_t int16x8_a = vreinterpretq_s16_u64 (baseq_a);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_laneq_s16 (int16x8_a, int16x8_b, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_laneq_s16 (int16x8_a, int16x8_b, 8);\n+}"}, {"sha": "916efbb7cdf53d07dbcd533854e663a99128caad", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhq_laneq_s32_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_laneq_s32 (int32x4_a, int32x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmulhq_laneq_s32 (int32x4_a, int32x4_b, 4);\n+}"}, {"sha": "8bcfb33e6903a61d77ca1429d2d41ac3e5318a09", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhs_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int32_t int32_a = 0xdeadbeef;\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulhs_lane_s32 (int32_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulhs_lane_s32 (int32_a, int32x2_b, 2);\n+}"}, {"sha": "e21ca9c2a7e06247521e94c098fb5162501c7be0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_lane_s16_indices_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+  int16x8_t int16x8_a = vreinterpretq_s16_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_lane_s16 (int16x8_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_lane_s16 (int16x8_a, int16x4_b, 4);\n+}"}, {"sha": "1df33b2fb0c0ca91cba601a9ebc5482051d59bae", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_lane_s32_indices_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_lane_s32 (int32x4_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_lane_s32 (int32x4_a, int32x2_b, 2);\n+}"}, {"sha": "df81cb38c5ebd94a7c2b1450e3a774e4a9da79e7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_laneq_s16_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int16x8_t int16x8_a = vreinterpretq_s16_u64 (baseq_a);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_laneq_s16 (int16x8_a, int16x8_b, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_laneq_s16 (int16x8_a, int16x8_b, 8);\n+}"}, {"sha": "a67da624a229ae1b8b95ee65dc4b813b5e781d68", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_laneq_s32_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_laneq_s32 (int32x4_a, int32x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_high_laneq_s32 (int32x4_a, int32x4_b, 4);\n+}"}, {"sha": "938279caf49c50dc4366d8cc8f0a00c1435d9187", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_lane_s16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int16x4_t int16x4_a = vreinterpret_s16_u64 (base_a);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_lane_s16 (int16x4_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_lane_s16 (int16x4_a, int16x4_b, 4);\n+}"}, {"sha": "b922c6587800f30f472883d9f95f4106e851ff7e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_lane_s32_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int32x2_t int32x2_a = vreinterpret_s32_u64 (base_a);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmull_lane_s32 (int32x2_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmull_lane_s32 (int32x2_a, int32x2_b, 2);\n+}"}, {"sha": "e38cbc85cba1a08d2c8a53f15a46b0455c38eb4f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_laneq_s16_indices_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int16x4_t int16x4_a = vreinterpret_s16_u64 (base_a);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmull_laneq_s16 (int16x4_a, int16x8_b, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqdmull_laneq_s16 (int16x4_a, int16x8_b, 8);\n+}"}, {"sha": "f90fbe6a32802d14f4248dff790fbce0c0775bc5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_laneq_s32_indices_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int32x2_t int32x2_a = vreinterpret_s32_u64 (base_a);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_laneq_s32 (int32x2_a, int32x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmull_laneq_s32 (int32x2_a, int32x4_b, 4);\n+}"}, {"sha": "fc53284525768a057434b27cc4ed8f03a6b99311", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmullh_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int16_t int16_a = 0x1234;\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmullh_lane_s16 (int16_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqdmullh_lane_s16 (int16_a, int16x4_b, 4);\n+}"}, {"sha": "edc66b52b3fdfa199e8227fb8ce03bda5a8ad8e8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulls_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int32_t int32_a = 0xdeadbeef;\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulls_lane_s32 (int32_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqdmulls_lane_s32 (int32_a, int32x2_b, 2);\n+}"}, {"sha": "1ce5c4b878ee79cc8b2c51698ead37c9c6e4ccb5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulh_lane_s16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int16x4_t int16x4_a = vreinterpret_s16_u64 (base_a);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_lane_s16 (int16x4_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_lane_s16 (int16x4_a, int16x4_b, 4);\n+}"}, {"sha": "b16f1b8be5a35bdf6fbdab62b76de5e2c20716ad", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulh_lane_s32_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int32x2_t int32x2_a = vreinterpret_s32_u64 (base_a);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_lane_s32 (int32x2_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_lane_s32 (int32x2_a, int32x2_b, 2);\n+}"}, {"sha": "19cad843ce6fe0bcba93a8182b8b0676704e7b78", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulh_laneq_s16_indices_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int16x4_t int16x4_a = vreinterpret_s16_u64 (base_a);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_laneq_s16 (int16x4_a, int16x8_b, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_laneq_s16 (int16x4_a, int16x8_b, 8);\n+}"}, {"sha": "af20661741d9de95acd7527bd7d8ae2e8f81c4c3", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulh_laneq_s32_indices_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int32x2_t int32x2_a = vreinterpret_s32_u64 (base_a);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_laneq_s32 (int32x2_a, int32x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulh_laneq_s32 (int32x2_a, int32x4_b, 4);\n+}"}, {"sha": "a15d39e85fce3f4ba13b889daf782aa125403e1a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhh_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int16_t int16_a = 0x1234;\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhh_lane_s16 (int16_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhh_lane_s16 (int16_a, int16x4_b, 4);\n+}"}, {"sha": "3b0c41ea418b6bf2319ccd6253ed5358dc4cb1f7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhq_lane_s16_indices_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_lane_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);\n+  int16x8_t int16x8_a = vreinterpretq_s16_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_lane_s16 (int16x8_a, int16x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_lane_s16 (int16x8_a, int16x4_b, 4);\n+}"}, {"sha": "9a91c37d5ac8b80f9495e358de95966c90d5f3d8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhq_lane_s32_indices_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_lane_s32 (int32x4_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_lane_s32 (int32x4_a, int32x2_b, 2);\n+}"}, {"sha": "038d796e33afd0913d830fcbade9d03a0f4b7bea", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhq_laneq_s16_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s16_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int16x8_t int16x8_a = vreinterpretq_s16_u64 (baseq_a);\n+  int16x8_t int16x8_b = vreinterpretq_s16_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_laneq_s16 (int16x8_a, int16x8_b, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_laneq_s16 (int16x8_a, int16x8_b, 8);\n+}"}, {"sha": "b46b92ad54f4c2fc52e4b33ded6ba2e544ecd137", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhq_laneq_s32_indices_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  uint64x2_t baseq_a = vcombine_u64 (base_a, base_b);\n+  uint64x1_t base_c = vcreate_u64 (0x9999aaaabbbbccccULL);\n+  uint64x2_t baseq_b = vcombine_u64 (base_b, base_c);\n+  int32x4_t int32x4_a = vreinterpretq_s32_u64 (baseq_a);\n+  int32x4_t int32x4_b = vreinterpretq_s32_u64 (baseq_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_laneq_s32 (int32x4_a, int32x4_b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhq_laneq_s32 (int32x4_a, int32x4_b, 4);\n+}"}, {"sha": "48223cb89118f66617b6ff783e8767c68091d590", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhs_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a49c16d6be771586b39bcb156e9619d68bf4662/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32_indices_1.c?ref=2a49c16d6be771586b39bcb156e9619d68bf4662", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-std=c99\" } */\n+#include <arm_neon.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);\n+  int32_t int32_a = 0xdeadbeef;\n+  int32x2_t int32x2_b = vreinterpret_s32_u64 (base_b);\n+\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhs_lane_s32 (int32_a, int32x2_b, -1);\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  vqrdmulhs_lane_s32 (int32_a, int32x2_b, 2);\n+}"}]}