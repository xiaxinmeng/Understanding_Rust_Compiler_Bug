{"sha": "74a002883c0a800298ad2db7fff646fca07870cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhMDAyODgzYzBhODAwMjk4YWQyZGI3ZmZmNjQ2ZmNhMDc4NzBjZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-02-24T11:00:28Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-02-24T11:00:28Z"}, "message": "[ARM] PR target/69875 Fix atomic_loaddi expansion\n\n\tPR target/69875\n\t* config/arm/arm.h (TARGET_HAVE_LPAE): Define.\n\t* config/arm/unspecs.md (VUNSPEC_LDRD_ATOMIC): New value.\n\t* config/arm/sync.md (arm_atomic_loaddi2_ldrd): New pattern.\n\t(atomic_loaddi_1): Delete.\n\t(atomic_loaddi): Rewrite expander using the above changes.\n\n\t* gcc.target/arm/atomic_loaddi_acquire.x: New file.\n\t* gcc.target/arm/atomic_loaddi_relaxed.x: Likewise.\n\t* gcc.target/arm/atomic_loaddi_seq_cst.x: Likewise.\n\t* gcc.target/arm/atomic_loaddi_1.c: New test.\n\t* gcc.target/arm/atomic_loaddi_2.c: Likewise.\n\t* gcc.target/arm/atomic_loaddi_3.c: Likewise.\n\t* gcc.target/arm/atomic_loaddi_4.c: Likewise.\n\t* gcc.target/arm/atomic_loaddi_5.c: Likewise.\n\t* gcc.target/arm/atomic_loaddi_6.c: Likewise.\n\t* gcc.target/arm/atomic_loaddi_7.c: Likewise.\n\t* gcc.target/arm/atomic_loaddi_8.c: Likewise.\n\t* gcc.target/arm/atomic_loaddi_9.c: Likewise.\n\nFrom-SVN: r233658", "tree": {"sha": "88c83daf7ce5206486dc7168e43397fe7e35f6e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c83daf7ce5206486dc7168e43397fe7e35f6e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74a002883c0a800298ad2db7fff646fca07870cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a002883c0a800298ad2db7fff646fca07870cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a002883c0a800298ad2db7fff646fca07870cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a002883c0a800298ad2db7fff646fca07870cf/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d46cfcc0b9d41c4c6bd2611368b9cbc45872bb7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46cfcc0b9d41c4c6bd2611368b9cbc45872bb7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46cfcc0b9d41c4c6bd2611368b9cbc45872bb7f"}], "stats": {"total": 208, "additions": 191, "deletions": 17}, "files": [{"sha": "eeaf4c6fb36cbb09928b74c00f25ef5c0af1af66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -1,3 +1,12 @@\n+2016-02-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/69875\n+\t* config/arm/arm.h (TARGET_HAVE_LPAE): Define.\n+\t* config/arm/unspecs.md (VUNSPEC_LDRD_ATOMIC): New value.\n+\t* config/arm/sync.md (arm_atomic_loaddi2_ldrd): New pattern.\n+\t(atomic_loaddi_1): Delete.\n+\t(atomic_loaddi): Rewrite expander using the above changes.\n+\n 2016-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/69918"}, {"sha": "63521403f6cab70977161b4afc79e204a54a321e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -253,6 +253,10 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* Nonzero if this chip supports ldrex and strex */\n #define TARGET_HAVE_LDREX        ((arm_arch6 && TARGET_ARM) || arm_arch7)\n \n+/* Nonzero if this chip supports LPAE.  */\n+#define TARGET_HAVE_LPAE\t\t\t\t\t\t\\\n+  (arm_arch7 && ARM_FSET_HAS_CPU1 (insn_flags, FL_FOR_ARCH7VE))\n+\n /* Nonzero if this chip supports ldrex{bh} and strex{bh}.  */\n #define TARGET_HAVE_LDREXBH ((arm_arch6k && TARGET_ARM) || arm_arch7)\n "}, {"sha": "0589e4d89059bd0845e5c4741516f04a567459a7", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -96,32 +96,62 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n-;; Note that ldrd and vldr are *not* guaranteed to be single-copy atomic,\n-;; even for a 64-bit aligned address.  Instead we use a ldrexd unparied\n-;; with a store.\n+;; An LDRD instruction usable by the atomic_loaddi expander on LPAE targets\n+\n+(define_insn \"arm_atomic_loaddi2_ldrd\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:DI\n+\t  [(match_operand:DI 1 \"arm_sync_memory_operand\" \"Q\")]\n+\t    VUNSPEC_LDRD_ATOMIC))]\n+  \"ARM_DOUBLEWORD_ALIGN && TARGET_HAVE_LPAE\"\n+  \"ldrd%?\\t%0, %H0, %C1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")])\n+\n+;; There are three ways to expand this depending on the architecture\n+;; features available.  As for the barriers, a load needs a barrier\n+;; after it on all non-relaxed memory models except when the load\n+;; has acquire semantics (for ARMv8-A).\n+\n (define_expand \"atomic_loaddi\"\n   [(match_operand:DI 0 \"s_register_operand\")\t\t;; val out\n    (match_operand:DI 1 \"mem_noofs_operand\")\t\t;; memory\n    (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n-  \"TARGET_HAVE_LDREXD && ARM_DOUBLEWORD_ALIGN\"\n+  \"(TARGET_HAVE_LDREXD || TARGET_HAVE_LPAE || TARGET_HAVE_LDACQ)\n+   && ARM_DOUBLEWORD_ALIGN\"\n {\n-  enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n-  expand_mem_thread_fence (model);\n-  emit_insn (gen_atomic_loaddi_1 (operands[0], operands[1]));\n-  if (is_mm_seq_cst (model))\n+  memmodel model = memmodel_from_int (INTVAL (operands[2]));\n+\n+  /* For ARMv8-A we can use an LDAEXD to atomically load two 32-bit registers\n+     when acquire or stronger semantics are needed.  When the relaxed model is\n+     used this can be relaxed to a normal LDRD.  */\n+  if (TARGET_HAVE_LDACQ)\n+    {\n+      if (is_mm_relaxed (model))\n+\temit_insn (gen_arm_atomic_loaddi2_ldrd (operands[0], operands[1]));\n+      else\n+\temit_insn (gen_arm_load_acquire_exclusivedi (operands[0], operands[1]));\n+\n+      DONE;\n+    }\n+\n+  /* On LPAE targets LDRD and STRD accesses to 64-bit aligned\n+     locations are 64-bit single-copy atomic.  We still need barriers in the\n+     appropriate places to implement the ordering constraints.  */\n+  if (TARGET_HAVE_LPAE)\n+    emit_insn (gen_arm_atomic_loaddi2_ldrd (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_arm_load_exclusivedi (operands[0], operands[1]));\n+\n+\n+  /* All non-relaxed models need a barrier after the load when load-acquire\n+     instructions are not available.  */\n+  if (!is_mm_relaxed (model))\n     expand_mem_thread_fence (model);\n+\n   DONE;\n })\n \n-(define_insn \"atomic_loaddi_1\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"mem_noofs_operand\" \"Ua\")]\n-\t\t   UNSPEC_LL))]\n-  \"TARGET_HAVE_LDREXD && ARM_DOUBLEWORD_ALIGN\"\n-  \"ldrexd%?\\t%0, %H0, %C1\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")])\n-\n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:SI 0 \"s_register_operand\" \"\")\t\t;; bool out\n    (match_operand:QHSD 1 \"s_register_operand\" \"\")\t;; val out"}, {"sha": "5744c62cf5ab3b3711fef2b442c62cd3eadf0793", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -139,6 +139,7 @@\n   VUNSPEC_ATOMIC_XCHG\t; Represent an atomic exchange.\n   VUNSPEC_ATOMIC_OP\t; Represent an atomic operation.\n   VUNSPEC_LL\t\t; Represent a load-register-exclusive.\n+  VUNSPEC_LDRD_ATOMIC\t; Represent an LDRD used as an atomic DImode load.\n   VUNSPEC_SC\t\t; Represent a store-register-exclusive.\n   VUNSPEC_LAX\t\t; Represent a load-register-acquire-exclusive.\n   VUNSPEC_SLX\t\t; Represent a store-register-release-exclusive."}, {"sha": "f678fbaeb398390d5b676e5afa622184302f5210", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -1,3 +1,19 @@\n+2016-02-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/69875\n+\t* gcc.target/arm/atomic_loaddi_acquire.x: New file.\n+\t* gcc.target/arm/atomic_loaddi_relaxed.x: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_seq_cst.x: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_1.c: New test.\n+\t* gcc.target/arm/atomic_loaddi_2.c: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_3.c: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_4.c: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_5.c: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_6.c: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_7.c: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_8.c: Likewise.\n+\t* gcc.target/arm/atomic_loaddi_9.c: Likewise.\n+\n 2016-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/69909"}, {"sha": "4f39971a336378be7cafabea9fdc16c3b94c3d3b", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_1.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v7a_ok } */\n+/* { dg-add-options arm_arch_v7a } */\n+\n+#include \"atomic_loaddi_acquire.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldrexd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"dmb\\tish\" 1 } } */"}, {"sha": "0b18f03e09d1d25daf5c8b2fd460538bedf43dfb", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_2.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v7ve_ok } */\n+/* { dg-add-options arm_arch_v7ve } */\n+\n+#include \"atomic_loaddi_acquire.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldrd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"dmb\\tish\" 1 } } */"}, {"sha": "080a9362abb334c764224620153deb2013ddcccb", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_3.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-add-options arm_arch_v8a } */\n+\n+#include \"atomic_loaddi_acquire.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldaexd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"dmb\\tish\" } } */"}, {"sha": "8f94ba61b4d9bd99abdf5a12cd8c0bbed3f7ba18", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_4.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v7a_ok } */\n+/* { dg-add-options arm_arch_v7a } */\n+\n+#include \"atomic_loaddi_relaxed.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldrexd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"dmb\\tish\" } } */"}, {"sha": "39502c7e25db62cb66660b7ced6bda530431c843", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_5.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v7ve_ok } */\n+/* { dg-add-options arm_arch_v7ve } */\n+\n+#include \"atomic_loaddi_relaxed.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldrd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"dmb\\tish\" } } */\n\\ No newline at end of file"}, {"sha": "aa62d5a103929658718a40f7b469b2fb4e327886", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_6.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-add-options arm_arch_v8a } */\n+\n+#include \"atomic_loaddi_relaxed.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldrd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"dmb\\tish\" } } */\n\\ No newline at end of file"}, {"sha": "6743663f1e6831d3fc441e80fcfe3d761987970b", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_7.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_7.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v7a_ok } */\n+/* { dg-add-options arm_arch_v7a } */\n+\n+#include \"atomic_loaddi_seq_cst.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldrexd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"dmb\\tish\" 1 } } */"}, {"sha": "f7bd3e5a2b515d91418f5f4a7a8db00336a8b594", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_8.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_8.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v7ve_ok } */\n+/* { dg-add-options arm_arch_v7ve } */\n+\n+#include \"atomic_loaddi_seq_cst.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldrd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"dmb\\tish\" 1 } } */"}, {"sha": "68b293409ff99965f9f95b92a093da7732f66299", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_9.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_9.c?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O\" } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-add-options arm_arch_v8a } */\n+\n+#include \"atomic_loaddi_seq_cst.x\"\n+\n+/* { dg-final { scan-assembler-times \"ldaexd\\tr\\[0-9\\]+, r\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"dmb\\tish\" } } */"}, {"sha": "28997ef565be7640531808579e5930b61c6b50e5", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_acquire.x", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_acquire.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_acquire.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_acquire.x?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,11 @@\n+#include <stdatomic.h>\n+\n+atomic_ullong foo;\n+int glob;\n+\n+int\n+main (void)\n+{\n+  atomic_load_explicit (&foo, memory_order_acquire);\n+  return glob;\n+}"}, {"sha": "701b3c42c09b6bcd0add779c29321674921a95e5", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_relaxed.x", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_relaxed.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_relaxed.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_relaxed.x?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,11 @@\n+#include <stdatomic.h>\n+\n+atomic_ullong foo;\n+int glob;\n+\n+int\n+main (void)\n+{\n+  atomic_load_explicit (&foo, memory_order_relaxed);\n+  return glob;\n+}"}, {"sha": "32e78da67e8b67f8a3bdd80b4957f55d9f413669", "filename": "gcc/testsuite/gcc.target/arm/atomic_loaddi_seq_cst.x", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_seq_cst.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a002883c0a800298ad2db7fff646fca07870cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_seq_cst.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fatomic_loaddi_seq_cst.x?ref=74a002883c0a800298ad2db7fff646fca07870cf", "patch": "@@ -0,0 +1,11 @@\n+#include <stdatomic.h>\n+\n+atomic_ullong foo;\n+int glob;\n+\n+int\n+main (void)\n+{\n+  atomic_load_explicit (&foo, memory_order_seq_cst);\n+  return glob;\n+}"}]}