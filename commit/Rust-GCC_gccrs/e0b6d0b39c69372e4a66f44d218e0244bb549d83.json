{"sha": "e0b6d0b39c69372e4a66f44d218e0244bb549d83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiNmQwYjM5YzY5MzcyZTRhNjZmNDRkMjE4ZTAyNDRiYjU0OWQ4Mw==", "commit": {"author": {"name": "Serge Belyshev", "email": "belyshev@depni.sinp.msu.ru", "date": "2021-07-20T06:52:55Z"}, "committer": {"name": "Serge Belyshev", "email": "belyshev@depni.sinp.msu.ru", "date": "2021-08-20T21:10:20Z"}, "message": "configure: remove version argument from gcc_GAS_CHECK_FEATURE\n\ngcc/ChangeLog:\n\n\t* acinclude.m4 (gcc_GAS_CHECK_FEATURE): Remove third argument and ...\n\t* configure.ac: ... update all callers.", "tree": {"sha": "93086c1e238551892168bad11eaf0e5e13b0d27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93086c1e238551892168bad11eaf0e5e13b0d27e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b6d0b39c69372e4a66f44d218e0244bb549d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b6d0b39c69372e4a66f44d218e0244bb549d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b6d0b39c69372e4a66f44d218e0244bb549d83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b6d0b39c69372e4a66f44d218e0244bb549d83/comments", "author": {"login": "ssb83", "id": 37732995, "node_id": "MDQ6VXNlcjM3NzMyOTk1", "avatar_url": "https://avatars.githubusercontent.com/u/37732995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssb83", "html_url": "https://github.com/ssb83", "followers_url": "https://api.github.com/users/ssb83/followers", "following_url": "https://api.github.com/users/ssb83/following{/other_user}", "gists_url": "https://api.github.com/users/ssb83/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssb83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssb83/subscriptions", "organizations_url": "https://api.github.com/users/ssb83/orgs", "repos_url": "https://api.github.com/users/ssb83/repos", "events_url": "https://api.github.com/users/ssb83/events{/privacy}", "received_events_url": "https://api.github.com/users/ssb83/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssb83", "id": 37732995, "node_id": "MDQ6VXNlcjM3NzMyOTk1", "avatar_url": "https://avatars.githubusercontent.com/u/37732995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssb83", "html_url": "https://github.com/ssb83", "followers_url": "https://api.github.com/users/ssb83/followers", "following_url": "https://api.github.com/users/ssb83/following{/other_user}", "gists_url": "https://api.github.com/users/ssb83/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssb83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssb83/subscriptions", "organizations_url": "https://api.github.com/users/ssb83/orgs", "repos_url": "https://api.github.com/users/ssb83/repos", "events_url": "https://api.github.com/users/ssb83/events{/privacy}", "received_events_url": "https://api.github.com/users/ssb83/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cad8a8f9f7bfa8e98f6a0615541f589fd1d3fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cad8a8f9f7bfa8e98f6a0615541f589fd1d3fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cad8a8f9f7bfa8e98f6a0615541f589fd1d3fc1"}], "stats": {"total": 240, "additions": 120, "deletions": 120}, "files": [{"sha": "082fa16ecb5993d76b4b0ab51faa63a90eb60350", "filename": "gcc/acinclude.m4", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b6d0b39c69372e4a66f44d218e0244bb549d83/gcc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b6d0b39c69372e4a66f44d218e0244bb549d83/gcc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facinclude.m4?ref=e0b6d0b39c69372e4a66f44d218e0244bb549d83", "patch": "@@ -470,7 +470,7 @@ AC_DEFUN([gcc_GAS_FLAGS],\n   esac])\n ])\n \n-dnl gcc_GAS_CHECK_FEATURE(description, cv, [[elf,]major,minor,patchlevel],\n+dnl gcc_GAS_CHECK_FEATURE(description, cv,\n dnl [extra switches to as], [assembler input],\n dnl [extra testing logic], [command if feature available])\n dnl\n@@ -484,23 +484,23 @@ AC_DEFUN([gcc_GAS_CHECK_FEATURE],\n AC_CACHE_CHECK([assembler for $1], [$2],\n  [[$2]=no\n   if test x$gcc_cv_as != x; then\n-    AS_ECHO([ifelse(m4_substr([$5],0,1),[$], \"[$5]\", '[$5]')]) > conftest.s\n-    if AC_TRY_COMMAND([$gcc_cv_as $gcc_cv_as_flags $4 -o conftest.o conftest.s >&AS_MESSAGE_LOG_FD])\n+    AS_ECHO([ifelse(m4_substr([$4],0,1),[$], \"[$4]\", '[$4]')]) > conftest.s\n+    if AC_TRY_COMMAND([$gcc_cv_as $gcc_cv_as_flags $3 -o conftest.o conftest.s >&AS_MESSAGE_LOG_FD])\n     then\n-\tifelse([$6],, [$2]=yes, [$6])\n+\tifelse([$5],, [$2]=yes, [$5])\n     else\n       echo \"configure: failed program was\" >&AS_MESSAGE_LOG_FD\n       cat conftest.s >&AS_MESSAGE_LOG_FD\n     fi\n     rm -f conftest.o conftest.s\n   fi])\n-ifelse([$7],,,[dnl\n+ifelse([$6],,,[dnl\n if test $[$2] = yes; then\n-  $7\n+  $6\n fi])\n-ifelse([$8],,,[dnl\n+ifelse([$7],,,[dnl\n if test $[$2] != yes; then\n-  $8\n+  $7\n fi])])\n \n dnl GCC_TARGET_TEMPLATE(KEY)"}, {"sha": "bc24648d8e9431f198058f9057a51b86c963d0d8", "filename": "gcc/configure.ac", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b6d0b39c69372e4a66f44d218e0244bb549d83/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b6d0b39c69372e4a66f44d218e0244bb549d83/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e0b6d0b39c69372e4a66f44d218e0244bb549d83", "patch": "@@ -2884,27 +2884,27 @@ esac\n \n # Figure out what assembler alignment features are present.\n gcc_GAS_CHECK_FEATURE([.balign and .p2align], gcc_cv_as_balign_and_p2align,\n- [2,6,0],,\n+ ,\n [.balign 4\n .p2align 2],,\n [AC_DEFINE(HAVE_GAS_BALIGN_AND_P2ALIGN, 1,\n   [Define if your assembler supports .balign and .p2align.])])\n \n gcc_GAS_CHECK_FEATURE([.p2align with maximum skip], gcc_cv_as_max_skip_p2align,\n- [2,8,0],,\n+ ,\n  [.p2align 4,,7],,\n [AC_DEFINE(HAVE_GAS_MAX_SKIP_P2ALIGN, 1,\n   [Define if your assembler supports specifying the maximum number\n    of bytes to skip when using the GAS .p2align command.])])\n \n gcc_GAS_CHECK_FEATURE([.literal16], gcc_cv_as_literal16,\n- [2,8,0],,\n+ ,\n  [.literal16],,\n [AC_DEFINE(HAVE_GAS_LITERAL16, 1,\n   [Define if your assembler supports .literal16.])])\n \n gcc_GAS_CHECK_FEATURE([working .subsection -1], gcc_cv_as_subsection_m1,\n- [elf,2,9,0],,\n+ ,\n  [conftest_label1: .word 0\n .subsection -1\n conftest_label2: .word 0\n@@ -2923,17 +2923,17 @@ conftest_label2: .word 0\n    emitting at the beginning of your section.])])\n \n gcc_GAS_CHECK_FEATURE([.weak], gcc_cv_as_weak,\n- [2,2,0],,\n+ ,\n  [\t.weak foobar],,\n [AC_DEFINE(HAVE_GAS_WEAK, 1, [Define if your assembler supports .weak.])])\n \n gcc_GAS_CHECK_FEATURE([.weakref], gcc_cv_as_weakref,\n- [2,17,0],,\n+ ,\n  [\t.weakref foobar, barfnot],,\n [AC_DEFINE(HAVE_GAS_WEAKREF, 1, [Define if your assembler supports .weakref.])])\n \n gcc_GAS_CHECK_FEATURE([.nsubspa comdat], gcc_cv_as_nsubspa_comdat,\n- [2,15,91],,\n+ ,\n  [\t.SPACE $TEXT$\n \t.NSUBSPA $CODE$,COMDAT],,\n [AC_DEFINE(HAVE_GAS_NSUBSPA_COMDAT, 1, [Define if your assembler supports .nsubspa comdat option.])])\n@@ -2955,7 +2955,7 @@ foobar:'\n     ;;\n esac\n gcc_GAS_CHECK_FEATURE([.hidden], gcc_cv_as_hidden,\n- [elf,2,13,0],, [$conftest_s])\n+ , [$conftest_s])\n case \"${target}\" in\n   *-*-darwin*)\n     # Darwin as has some visibility support, though with a different syntax.\n@@ -3174,7 +3174,7 @@ gcc_AC_INITFINI_ARRAY\n # Older versions of GAS and some non-GNU assemblers, have a bugs handling\n # these directives, even when they appear to accept them.\n gcc_GAS_CHECK_FEATURE([.sleb128 and .uleb128], gcc_cv_as_leb128,\n- [elf,2,11,0],,\n+ ,\n [\t.data\n \t.uleb128 L2 - L1\n L1:\n@@ -3213,7 +3213,7 @@ gcc_fn_eh_frame_ro () {\n \n # Check if we have assembler support for unwind directives.\n gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n-  ,,\n+  ,\n [\t.text\n \t.cfi_startproc\n \t.cfi_offset 0, 0\n@@ -3269,7 +3269,7 @@ gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n esac])\n if test $gcc_cv_as_cfi_directive = yes && test x$gcc_cv_objdump != x; then\n gcc_GAS_CHECK_FEATURE([working cfi advance], gcc_cv_as_cfi_advance_working,\n-  ,,\n+  ,\n [\t.text\n \t.cfi_startproc\n \t.cfi_adjust_cfa_offset 64\n@@ -3294,7 +3294,7 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_DIRECTIVE,\n \n GCC_TARGET_TEMPLATE(HAVE_GAS_CFI_PERSONALITY_DIRECTIVE)\n gcc_GAS_CHECK_FEATURE([cfi personality directive],\n-  gcc_cv_as_cfi_personality_directive, ,,\n+  gcc_cv_as_cfi_personality_directive,,\n [\t.text\n \t.cfi_startproc\n \t.cfi_personality 0, symbol\n@@ -3304,7 +3304,7 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_PERSONALITY_DIRECTIVE,\n   [Define 0/1 if your assembler supports .cfi_personality.])\n \n gcc_GAS_CHECK_FEATURE([cfi sections directive],\n-  gcc_cv_as_cfi_sections_directive, ,,\n+  gcc_cv_as_cfi_sections_directive,,\n [\t.text\n \t.cfi_sections .debug_frame, .eh_frame\n \t.cfi_startproc\n@@ -3333,7 +3333,7 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_SECTIONS_DIRECTIVE,\n # GAS versions up to and including 2.11.0 may mis-optimize\n # .eh_frame data.\n gcc_GAS_CHECK_FEATURE(eh_frame optimization, gcc_cv_as_eh_frame,\n-  [elf,2,12,0],,\n+  ,\n [\t.text\n .LFB1:\n \t.4byte\t0\n@@ -3404,7 +3404,7 @@ fi\n # Test if the assembler supports the section flag 'e' or #exclude for\n # specifying an excluded section.\n gcc_GAS_CHECK_FEATURE([section exclude flag], gcc_cv_as_section_exclude_e,\n- [2,22,51], [--fatal-warnings],\n+ [--fatal-warnings],\n  [.section foo1,\"e\"\n   .byte 0,0,0,0])\n if test $gcc_cv_as_section_exclude_e = no; then\n@@ -3421,7 +3421,7 @@ if test $gcc_cv_as_section_exclude_e = no; then\n       esac\n       ;;\n     esac\n-  gcc_GAS_CHECK_FEATURE([section exclude flag], gcc_cv_as_section_exclude_hash,,,\n+  gcc_GAS_CHECK_FEATURE([section exclude flag], gcc_cv_as_section_exclude_hash,,\n     [$conftest_s\n      .byte 0,0,0,0])\n fi\n@@ -3440,7 +3440,7 @@ case \"${target}\" in\n     ;;\n   *)\n     gcc_GAS_CHECK_FEATURE([section 'R' flag], gcc_cv_as_shf_gnu_retain,\n-      [elf,2,36,0], [--fatal-warnings],\n+      [--fatal-warnings],\n       [.section .foo,\"awR\",%progbits\n .byte 0])\n     ;;\n@@ -3460,7 +3460,7 @@ case \"${target}\" in\n     ;;\n   *)\n     gcc_GAS_CHECK_FEATURE([section 'o' flag], gcc_cv_as_section_link_order,\n-      [2,35,0], [--fatal-warnings],\n+      [--fatal-warnings],\n       [.section .foo,\"a\"\n .byte 0\n .section __patchable_function_entries,\"awo\",%progbits,.foo\n@@ -3472,11 +3472,11 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_SECTION_LINK_ORDER,\n   [Define 0/1 if your assembler supports 'o' flag in .section directive.])\n \n gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,\n- [elf,2,12,0], [--fatal-warnings],\n+ [--fatal-warnings],\n  [.section .rodata.str, \"aMS\", @progbits, 1])\n if test $gcc_cv_as_shf_merge = no; then\n   gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,\n-    [elf,2,12,0], [--fatal-warnings],\n+    [--fatal-warnings],\n     [.section .rodata.str, \"aMS\", %progbits, 1])\n fi\n AC_DEFINE_UNQUOTED(HAVE_GAS_SHF_MERGE,\n@@ -3498,22 +3498,22 @@ AC_DEFINE_UNQUOTED(HAVE_LD_ALIGNED_SHF_MERGE,\n   [`if test $gcc_cv_ld_aligned_shf_merge = yes; then echo 1; else echo 0; fi`],\n [Define 0/1 if your linker supports the SHF_MERGE flag with section alignment > 1.])\n \n-gcc_GAS_CHECK_FEATURE([stabs directive], gcc_cv_as_stabs_directive, ,,\n+gcc_GAS_CHECK_FEATURE([stabs directive], gcc_cv_as_stabs_directive,,\n [.stabs \"gcc2_compiled.\",60,0,0,0],,\n [AC_DEFINE(HAVE_AS_STABS_DIRECTIVE, 1,\n   [Define if your assembler supports .stabs.])])\n \n gcc_GAS_CHECK_FEATURE([COMDAT group support (GNU as)],\n  gcc_cv_as_comdat_group,\n- [elf,2,16,0], [--fatal-warnings],\n+ [--fatal-warnings],\n  [.section .text,\"axG\",@progbits,.foo,comdat])\n if test $gcc_cv_as_comdat_group = yes; then\n   gcc_cv_as_comdat_group_percent=no\n   gcc_cv_as_comdat_group_group=no\n else\n  gcc_GAS_CHECK_FEATURE([COMDAT group support (GNU as, %type)],\n    gcc_cv_as_comdat_group_percent,\n-   [elf,2,16,0], [--fatal-warnings],\n+   [--fatal-warnings],\n    [.section .text,\"axG\",%progbits,.foo,comdat])\n  if test $gcc_cv_as_comdat_group_percent = yes; then\n    gcc_cv_as_comdat_group_group=no\n@@ -3541,7 +3541,7 @@ else\n        esac\n        gcc_GAS_CHECK_FEATURE([COMDAT group support (Sun as, .group)],\n          gcc_cv_as_comdat_group_group,\n-         ,, [$conftest_s])\n+         , [$conftest_s])\n        ;;\n    esac\n    if test -z \"${gcc_cv_as_comdat_group_group+set}\"; then\n@@ -3637,7 +3637,7 @@ esac\n \n gcc_GAS_CHECK_FEATURE([line table is_stmt support],\n  gcc_cv_as_is_stmt,\n- [2,16,92],,\n+ ,\n [\t.text\n \t.file 1 \"conf.c\"\n \t.loc 1 1 0 is_stmt 1],,\n@@ -3646,7 +3646,7 @@ gcc_GAS_CHECK_FEATURE([line table is_stmt support],\n \n gcc_GAS_CHECK_FEATURE([line table discriminator support],\n  gcc_cv_as_discriminator,\n- [2,19,51],,\n+ ,\n [\t.text\n \t.file 1 \"conf.c\"\n \t.loc 1 1 0 discriminator 1],,\n@@ -4162,7 +4162,7 @@ elif test -z \"$tls_first_major\"; then\n   : # If we don't have a check, assume no support.\n else\n   gcc_GAS_CHECK_FEATURE(thread-local storage support, gcc_cv_as_tls,\n-  [$tls_first_major,$tls_first_minor,0], [$tls_as_opt], [$conftest_s],,\n+  [$tls_as_opt], [$conftest_s],,\n   [set_have_as_tls=yes])\n fi\n if test $set_have_as_tls = yes ; then\n@@ -4342,7 +4342,7 @@ AC_MSG_RESULT($gcc_cv_lto_plugin)\n case \"$target_os\" in\n   darwin*)\n     gcc_GAS_CHECK_FEATURE([-mmacosx-version-min option],\n-      gcc_cv_as_mmacosx_version_min,,\n+      gcc_cv_as_mmacosx_version_min,\n       [-mmacosx-version-min=10.1], [.text],,\n       [AC_DEFINE(HAVE_AS_MMACOSX_VERSION_MIN_OPTION, 1,\n \t[Define if your Mac OS X assembler supports the -mmacos-version-min option.])])\n@@ -4353,7 +4353,7 @@ esac\n \n case \"$target\" in\n   aarch64*-*-*)\n-    gcc_GAS_CHECK_FEATURE([-mabi option], gcc_cv_as_aarch64_mabi,,\n+    gcc_GAS_CHECK_FEATURE([-mabi option], gcc_cv_as_aarch64_mabi,\n                           [-mabi=lp64], [.text],,,)\n     if test x$gcc_cv_as_aarch64_mabi = xyes; then\n       AC_DEFINE(HAVE_AS_MABI_OPTION, 1,\n@@ -4380,7 +4380,7 @@ case \"$target\" in\n       fi\n     fi\n     # Check if we have binutils support for relocations types needed by -fpic\n-    gcc_GAS_CHECK_FEATURE([-fpic relocs], gcc_cv_as_aarch64_picreloc,,,\n+    gcc_GAS_CHECK_FEATURE([-fpic relocs], gcc_cv_as_aarch64_picreloc,,\n     [\n \t.text\n \tldr     x0, [[x2, #:gotpage_lo15:globalsym]]\n@@ -4460,7 +4460,7 @@ AS_HELP_STRING([--disable-fix-cortex-a53-843419],\n   # All TARGET_ABI_OSF targets.\n   alpha*-*-linux* | alpha*-*-*bsd*)\n     gcc_GAS_CHECK_FEATURE([explicit relocation support],\n-\tgcc_cv_as_alpha_explicit_relocs, [2,12,0],,\n+\tgcc_cv_as_alpha_explicit_relocs,,\n [\t.set nomacro\n \t.text\n \textbl\t$3, $2, $3\t!lituse_bytoff!1\n@@ -4477,7 +4477,7 @@ AS_HELP_STRING([--disable-fix-cortex-a53-843419],\n     [AC_DEFINE(HAVE_AS_EXPLICIT_RELOCS, 1,\n   [Define if your assembler supports explicit relocations.])])\n     gcc_GAS_CHECK_FEATURE([jsrdirect relocation support],\n-\tgcc_cv_as_alpha_jsrdirect_relocs, [2,16,90],,\n+\tgcc_cv_as_alpha_jsrdirect_relocs,,\n [\t.set nomacro\n \t.text\n \tldq\t$27, a($29)\t!literal!1\n@@ -4487,18 +4487,18 @@ AS_HELP_STRING([--disable-fix-cortex-a53-843419],\n     ;;\n \n   avr-*-*)\n-    gcc_GAS_CHECK_FEATURE([--mlink-relax option], gcc_cv_as_avr_mlink_relax,,\n+    gcc_GAS_CHECK_FEATURE([--mlink-relax option], gcc_cv_as_avr_mlink_relax,\n       [--mlink-relax], [.text],,\n       [AC_DEFINE(HAVE_AS_AVR_MLINK_RELAX_OPTION, 1,\n \t\t[Define if your avr assembler supports --mlink-relax option.])])\n \n-    gcc_GAS_CHECK_FEATURE([-mrmw option], gcc_cv_as_avr_mrmw,,\n+    gcc_GAS_CHECK_FEATURE([-mrmw option], gcc_cv_as_avr_mrmw,\n       [-mrmw], [.text],,\n       [AC_DEFINE(HAVE_AS_AVR_MRMW_OPTION, 1,\n \t\t[Define if your avr assembler supports -mrmw option.])])\n \n     gcc_GAS_CHECK_FEATURE([__gcc_isr pseudo instruction],\n-      gcc_cv_as_avr_mgccisr,,\n+      gcc_cv_as_avr_mgccisr,\n       [-mgcc-isr], [.text\n       \t\t    __gcc_isr 1\n       \t\t    __gcc_isr 2\n@@ -4546,20 +4546,20 @@ EOF\n \n   cris-*-*)\n     gcc_GAS_CHECK_FEATURE([-no-mul-bug-abort option],\n-      gcc_cv_as_cris_no_mul_bug,[2,15,91],\n+      gcc_cv_as_cris_no_mul_bug,\n       [-no-mul-bug-abort], [.text],,\n       [AC_DEFINE(HAVE_AS_NO_MUL_BUG_ABORT_OPTION, 1,\n \t\t[Define if your assembler supports the -no-mul-bug-abort option.])])\n     ;;\n \n   sparc*-*-*)\n-    gcc_GAS_CHECK_FEATURE([-relax option], gcc_cv_as_sparc_relax,,\n+    gcc_GAS_CHECK_FEATURE([-relax option], gcc_cv_as_sparc_relax,\n       [-relax], [.text],,\n       [AC_DEFINE(HAVE_AS_RELAX_OPTION, 1,\n \t\t[Define if your assembler supports -relax option.])])\n \n     gcc_GAS_CHECK_FEATURE([GOTDATA_OP relocs],\n-      gcc_cv_as_sparc_gotdata_op,,\n+      gcc_cv_as_sparc_gotdata_op,\n       [-K PIC],\n [.text\n .align 4\n@@ -4585,7 +4585,7 @@ bar:\n \t\t[Define if your assembler and linker support GOTDATA_OP relocs.])])\n \n     gcc_GAS_CHECK_FEATURE([unaligned pcrel relocs],\n-      gcc_cv_as_sparc_ua_pcrel,,\n+      gcc_cv_as_sparc_ua_pcrel,\n       [-K PIC],\n [.text\n foo:\n@@ -4603,7 +4603,7 @@ foo:\n \t\t[Define if your assembler and linker support unaligned PC relative relocs.])\n \n       gcc_GAS_CHECK_FEATURE([unaligned pcrel relocs against hidden symbols],\n-\tgcc_cv_as_sparc_ua_pcrel_hidden,,\n+\tgcc_cv_as_sparc_ua_pcrel_hidden,\n \t[-K PIC],\n [.data\n .align 4\n@@ -4631,7 +4631,7 @@ foo:\n     ]) # unaligned pcrel relocs\n \n     gcc_GAS_CHECK_FEATURE([offsetable %lo()],\n-      gcc_cv_as_sparc_offsetable_lo10,,\n+      gcc_cv_as_sparc_offsetable_lo10,\n       [-xarch=v9],\n [.text\n \tor %g1, %lo(ab) + 12, %g1\n@@ -4645,7 +4645,7 @@ foo:\n \t         [Define if your assembler supports offsetable %lo().])])\n \n     gcc_GAS_CHECK_FEATURE([FMAF, HPC, and VIS 3.0 instructions],\n-      gcc_cv_as_sparc_fmaf,,\n+      gcc_cv_as_sparc_fmaf,\n       [-xarch=v9d],\n       [.text\n        .register %g2, #scratch\n@@ -4659,7 +4659,7 @@ foo:\n                 [Define if your assembler supports FMAF, HPC, and VIS 3.0 instructions.])])\n \n     gcc_GAS_CHECK_FEATURE([SPARC4 instructions],\n-      gcc_cv_as_sparc_sparc4,,\n+      gcc_cv_as_sparc_sparc4,\n       [-xarch=sparc4],\n       [.text\n        .register %g2, #scratch\n@@ -4677,7 +4677,7 @@ foo:\n                 [Define if your assembler supports SPARC4 instructions.])])\n \n     gcc_GAS_CHECK_FEATURE([SPARC5 and VIS 4.0 instructions],\n-      gcc_cv_as_sparc_sparc5,,\n+      gcc_cv_as_sparc_sparc5,\n       [-xarch=sparc5],\n       [.text\n        .register %g2, #scratch\n@@ -4689,7 +4689,7 @@ foo:\n                 [Define if your assembler supports SPARC5 and VIS 4.0 instructions.])])\n \n     gcc_GAS_CHECK_FEATURE([SPARC6 instructions],\n-      gcc_cv_as_sparc_sparc6,,\n+      gcc_cv_as_sparc_sparc6,\n       [-xarch=sparc6],\n       [.text\n        .register %g2, #scratch\n@@ -4701,7 +4701,7 @@ foo:\n                 [Define if your assembler supports SPARC6 instructions.])])\n \n     gcc_GAS_CHECK_FEATURE([LEON instructions],\n-      gcc_cv_as_sparc_leon,,\n+      gcc_cv_as_sparc_leon,\n       [-Aleon],\n       [.text\n        .register %g2, #scratch\n@@ -4742,15 +4742,15 @@ changequote([,])dnl\n \t# definition is used unconditionally to initialise the default state of\n \t# the target option variable that governs usage of the feature.\n \tgcc_GAS_CHECK_FEATURE([.comm with alignment], gcc_cv_as_comm_has_align,\n-\t [2,19,52],,[.comm foo,1,32])\n+\t ,[.comm foo,1,32])\n \tAC_DEFINE_UNQUOTED(HAVE_GAS_ALIGNED_COMM,\n \t  [`if test $gcc_cv_as_comm_has_align = yes; then echo 1; else echo 0; fi`],\n \t  [Define if your assembler supports specifying the alignment\n \t   of objects allocated using the GAS .comm command.])\n \t# Used for DWARF 2 in PE\n \tgcc_GAS_CHECK_FEATURE([.secrel32 relocs],\n \t  gcc_cv_as_ix86_pe_secrel32,\n-\t  [2,15,91],,\n+\t  ,\n [.text\n foo:\tnop\n .data\n@@ -4767,7 +4767,7 @@ foo:\tnop\n \t# but normally only after installation, so we warn but don't fail the\n \t# configure if LTO is enabled but the assembler does not support it.\n \tgcc_GAS_CHECK_FEATURE([.section with alignment], gcc_cv_as_section_has_align,\n-\t  [2,20,1],-fatal-warnings,[.section lto_test,\"dr0\"])\n+\t  -fatal-warnings,[.section lto_test,\"dr0\"])\n \tif test x$gcc_cv_as_section_has_align != xyes; then\n \t  case \",$enable_languages,\" in\n \t    *,lto,*)\n@@ -4787,50 +4787,50 @@ foo:\tnop\n        ;;\n     esac\n \n-    gcc_GAS_CHECK_FEATURE([-xbrace_comment], gcc_cv_as_ix86_xbrace_comment,,\n+    gcc_GAS_CHECK_FEATURE([-xbrace_comment], gcc_cv_as_ix86_xbrace_comment,\n       [-xbrace_comment=no], [.text],,\n       [AC_DEFINE(HAVE_AS_XBRACE_COMMENT_OPTION, 1,\n \t\t[Define if your assembler supports -xbrace_comment option.])])\n \n     gcc_GAS_CHECK_FEATURE([filds and fists mnemonics],\n-       gcc_cv_as_ix86_filds,,,\n+       gcc_cv_as_ix86_filds,,\n        [filds (%ebp); fists (%ebp)],,\n        [AC_DEFINE(HAVE_AS_IX86_FILDS, 1,\n          [Define if your assembler uses filds and fists mnemonics.])])\n \n     gcc_GAS_CHECK_FEATURE([fildq and fistpq mnemonics],\n-       gcc_cv_as_ix86_fildq,,,\n+       gcc_cv_as_ix86_fildq,,\n        [fildq (%ebp); fistpq (%ebp)],,\n        [AC_DEFINE(HAVE_AS_IX86_FILDQ, 1,\n          [Define if your assembler uses fildq and fistq mnemonics.])])\n \n     gcc_GAS_CHECK_FEATURE([cmov syntax],\n-      gcc_cv_as_ix86_cmov_sun_syntax,,,\n+      gcc_cv_as_ix86_cmov_sun_syntax,,\n       [cmovl.l %edx, %eax],,\n       [AC_DEFINE(HAVE_AS_IX86_CMOV_SUN_SYNTAX, 1,\n         [Define if your assembler supports the Sun syntax for cmov.])])\n \n     gcc_GAS_CHECK_FEATURE([ffreep mnemonic],\n-      gcc_cv_as_ix86_ffreep,,,\n+      gcc_cv_as_ix86_ffreep,,\n       [ffreep %st(1)],,\n       [AC_DEFINE(HAVE_AS_IX86_FFREEP, 1,\n         [Define if your assembler supports the ffreep mnemonic.])])\n \n     gcc_GAS_CHECK_FEATURE([.quad directive],\n-      gcc_cv_as_ix86_quad,,,\n+      gcc_cv_as_ix86_quad,,\n       [.quad 0],,\n       [AC_DEFINE(HAVE_AS_IX86_QUAD, 1,\n         [Define if your assembler supports the .quad directive.])])\n \n     gcc_GAS_CHECK_FEATURE([sahf mnemonic],\n-      gcc_cv_as_ix86_sahf,,,\n+      gcc_cv_as_ix86_sahf,,\n       [.code64\n        sahf],,\n       [AC_DEFINE(HAVE_AS_IX86_SAHF, 1,\n         [Define if your assembler supports the sahf mnemonic in 64bit mode.])])\n \n     gcc_GAS_CHECK_FEATURE([interunit movq mnemonic],\n-      gcc_cv_as_ix86_interunit_movq,,,\n+      gcc_cv_as_ix86_interunit_movq,,\n       [.code64\n        movq %mm0, %rax\n        movq %rax, %xmm0])\n@@ -4839,19 +4839,19 @@ foo:\tnop\n       [Define if your assembler supports interunit movq mnemonic.])\n \n     gcc_GAS_CHECK_FEATURE([hle prefixes],\n-      gcc_cv_as_ix86_hle,,,\n+      gcc_cv_as_ix86_hle,,\n       [lock xacquire cmpxchg %esi, (%ecx)],,\n       [AC_DEFINE(HAVE_AS_IX86_HLE, 1,\n         [Define if your assembler supports HLE prefixes.])])\n \n     gcc_GAS_CHECK_FEATURE([swap suffix],\n-      gcc_cv_as_ix86_swap,,,\n+      gcc_cv_as_ix86_swap,,\n       [movl.s %esp, %ebp],,\n       [AC_DEFINE(HAVE_AS_IX86_SWAP, 1,\n         [Define if your assembler supports the swap suffix.])])\n \n     gcc_GAS_CHECK_FEATURE([different section symbol subtraction],\n-      gcc_cv_as_ix86_diff_sect_delta,,,\n+      gcc_cv_as_ix86_diff_sect_delta,,\n       [.section .rodata\n .L1:\n         .long .L2-.L1\n@@ -4863,7 +4863,7 @@ foo:\tnop\n         [Define if your assembler supports the subtraction of symbols in different sections.])])\n \n     gcc_GAS_CHECK_FEATURE([rep and lock prefix],\n-        gcc_cv_as_ix86_rep_lock_prefix,,,\n+        gcc_cv_as_ix86_rep_lock_prefix,,\n \t[rep movsl\n \t rep ret\n \t rep nop\n@@ -4875,7 +4875,7 @@ foo:\tnop\n           [Define if the assembler supports 'rep <insn>, lock <insn>'.])])\n \n     gcc_GAS_CHECK_FEATURE([ud2 mnemonic],\n-\tgcc_cv_as_ix86_ud2,,,\n+\tgcc_cv_as_ix86_ud2,,\n \t[ud2],,\n       [AC_DEFINE(HAVE_AS_IX86_UD2, 1,\n \t[Define if your assembler supports the 'ud2' mnemonic.])])\n@@ -4893,7 +4893,7 @@ foo:\tnop\n     fi\n \n     gcc_GAS_CHECK_FEATURE([R_386_TLS_GD_PLT reloc],\n-        gcc_cv_as_ix86_tlsgdplt,,\n+        gcc_cv_as_ix86_tlsgdplt,\n \t[$as_ix86_gas_32_opt],\n \t[call    tls_gd@tlsgdplt],\n \t[if test x$gcc_cv_ld != x \\\n@@ -4911,7 +4911,7 @@ tls_ld:\n \t call    tls_ld@tlsldmplt'\n \n     gcc_GAS_CHECK_FEATURE([R_386_TLS_LDM_PLT reloc],\n-        gcc_cv_as_ix86_tlsldmplt,,\n+        gcc_cv_as_ix86_tlsldmplt,\n \t[$as_ix86_gas_32_opt],\n \t[$conftest_s],\n \t[if test x$gcc_cv_ld != x \\\n@@ -4935,7 +4935,7 @@ _start:\n         .type\tvalue, @object\n value:'\n     gcc_GAS_CHECK_FEATURE([R_386_TLS_LDM reloc],\n-        gcc_cv_as_ix86_tlsldm,,\n+        gcc_cv_as_ix86_tlsldm,\n \t[$as_ix86_gas_32_opt],\n \t[$conftest_s],\n \t[if test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n@@ -4960,7 +4960,7 @@ _start:\n \t cmpl $0, bar@GOT\n \t jmp *_start@GOT'\n     gcc_GAS_CHECK_FEATURE([R_386_GOT32X reloc],\n-        gcc_cv_as_ix86_got32x,,\n+        gcc_cv_as_ix86_got32x,\n \t[$as_ix86_gas_32_opt],\n \t[$conftest_s],\n \t[if test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n@@ -4981,7 +4981,7 @@ _start:\n       [Define 0/1 if your assembler and linker support @GOT.])\n \n     gcc_GAS_CHECK_FEATURE([GOTOFF in data],\n-      gcc_cv_as_ix86_gotoff_in_data, [2,11,0],\n+      gcc_cv_as_ix86_gotoff_in_data,\n       [$as_ix86_gas_32_opt],\n [\t.text\n .L0:\n@@ -5011,7 +5011,7 @@ ld:\n gd:\n \t.byte 0'\n     gcc_GAS_CHECK_FEATURE([calling ___tls_get_addr via GOT],\n-        gcc_cv_as_ix86_tls_get_addr_via_got,,\n+        gcc_cv_as_ix86_tls_get_addr_via_got,\n \t[$as_ix86_gas_32_opt],\n \t[$conftest_s],\n \t[if test x$gcc_cv_ld != x \\\n@@ -5026,7 +5026,7 @@ gd:\n \n   ia64*-*-*)\n     gcc_GAS_CHECK_FEATURE([ltoffx and ldxmov relocs],\n-\tgcc_cv_as_ia64_ltoffx_ldxmov_relocs, [2,14,0],,\n+\tgcc_cv_as_ia64_ltoffx_ldxmov_relocs,,\n [\t.text\n \taddl r15 = @ltoffx(x#), gp\n \t;;\n@@ -5042,7 +5042,7 @@ gd:\n     case $target in\n       *-*-darwin*)\n \tgcc_GAS_CHECK_FEATURE([.machine directive support],\n-\t  gcc_cv_as_machine_directive,,,\n+\t  gcc_cv_as_machine_directive,,\n \t  [\t.machine ppc7400])\n \tif test x$gcc_cv_as_machine_directive != xyes; then\n \t  echo \"*** This target requires an assembler supporting \\\".machine\\\"\" >&2\n@@ -5064,7 +5064,7 @@ gd:\n     esac\n \n     gcc_GAS_CHECK_FEATURE([mfcr field support],\n-      gcc_cv_as_powerpc_mfcrf, [2,14,0],,\n+      gcc_cv_as_powerpc_mfcrf,,\n       [$conftest_s],,\n       [AC_DEFINE(HAVE_AS_MFCRF, 1,\n \t  [Define if your assembler supports mfcr field.])])\n@@ -5083,7 +5083,7 @@ LCF0:\n     esac\n \n     gcc_GAS_CHECK_FEATURE([rel16 relocs],\n-      gcc_cv_as_powerpc_rel16, [2,17,0], -a32,\n+      gcc_cv_as_powerpc_rel16, -a32,\n       [$conftest_s],,\n       [AC_DEFINE(HAVE_AS_REL16, 1,\n \t  [Define if your assembler supports R_PPC_REL16 relocs.])])\n@@ -5098,33 +5098,33 @@ LCF0:\n     esac\n \n     gcc_GAS_CHECK_FEATURE([vector-scalar support],\n-      gcc_cv_as_powerpc_vsx, [2,19,2], -a32,\n+      gcc_cv_as_powerpc_vsx, -a32,\n       [$conftest_s],,\n       [AC_DEFINE(HAVE_AS_VSX, 1,\n \t  [Define if your assembler supports VSX instructions.])])\n \n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n-      gcc_cv_as_powerpc_gnu_attribute, [2,18,0],,\n+      gcc_cv_as_powerpc_gnu_attribute,,\n       [.gnu_attribute 4,1],,\n       [AC_DEFINE(HAVE_AS_GNU_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .gnu_attribute.])])\n \n     gcc_GAS_CHECK_FEATURE([prologue entry point marker support],\n-      gcc_cv_as_powerpc_entry_markers, [2,26,0],-a64 --fatal-warnings,\n+      gcc_cv_as_powerpc_entry_markers,-a64 --fatal-warnings,\n       [ .reloc .,R_PPC64_ENTRY; nop],,\n       [AC_DEFINE(HAVE_AS_ENTRY_MARKERS, 1,\n \t  [Define if your assembler supports the R_PPC64_ENTRY relocation.])])\n \n     gcc_GAS_CHECK_FEATURE([plt sequence marker support],\n-      gcc_cv_as_powerpc_pltseq_markers, [2,31,0],-a32 --fatal-warnings,\n+      gcc_cv_as_powerpc_pltseq_markers,-a32 --fatal-warnings,\n       [ .reloc .,R_PPC_PLTSEQ; nop],,\n       [AC_DEFINE(HAVE_AS_PLTSEQ, 1,\n \t  [Define if your assembler supports R_PPC*_PLTSEQ relocations.])])\n \n     case $target in\n       *-*-aix*)\n \tgcc_GAS_CHECK_FEATURE([AIX .ref support],\n-\t  gcc_cv_as_aix_ref, [2,21,0],,\n+\t  gcc_cv_as_aix_ref,,\n \t  [\t.csect stuff[[rw]]\n \t     stuff:\n \t\t.long 1\n@@ -5135,7 +5135,7 @@ LCF0:\n \t    [Define if your assembler supports .ref])])\n \n \tgcc_GAS_CHECK_FEATURE([AIX DWARF location lists section support],\n-\t  gcc_cv_as_aix_dwloc, [2,21,0],,\n+\t  gcc_cv_as_aix_dwloc,,\n \t  [\t.dwsect 0xA0000\n \tLframe..0:\n \t\t.vbyte 4,Lframe..0\n@@ -5148,26 +5148,26 @@ LCF0:\n \n   mips*-*-*)\n     gcc_GAS_CHECK_FEATURE([explicit relocation support],\n-      gcc_cv_as_mips_explicit_relocs, [2,14,0],,\n+      gcc_cv_as_mips_explicit_relocs,,\n [\tlw $4,%gp_rel(foo)($4)],,\n       [if test x$target_cpu_default = x\n        then target_cpu_default=MASK_EXPLICIT_RELOCS\n        else target_cpu_default=\"($target_cpu_default)|MASK_EXPLICIT_RELOCS\"\n        fi])\n \n     gcc_GAS_CHECK_FEATURE([-mno-shared support],\n-      gcc_cv_as_mips_no_shared, [2,16,0], [-mno-shared], [nop],,\n+      gcc_cv_as_mips_no_shared,[-mno-shared], [nop],,\n       [AC_DEFINE(HAVE_AS_NO_SHARED, 1,\n \t\t [Define if the assembler understands -mno-shared.])])\n \n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n-      gcc_cv_as_mips_gnu_attribute, [2,18,0],,\n+      gcc_cv_as_mips_gnu_attribute,,\n       [.gnu_attribute 4,1],,\n       [AC_DEFINE(HAVE_AS_GNU_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .gnu_attribute.])])\n \n     gcc_GAS_CHECK_FEATURE([.module support],\n-      gcc_cv_as_mips_dot_module,,[-32],\n+      gcc_cv_as_mips_dot_module,[-32],\n       [.module mips2\n        .module fp=xx],,\n       [AC_DEFINE(HAVE_AS_DOT_MODULE, 1,\n@@ -5179,13 +5179,13 @@ LCF0:\n     fi\n \n     gcc_GAS_CHECK_FEATURE([.micromips support],\n-      gcc_cv_as_micromips_support,,[--fatal-warnings],\n+      gcc_cv_as_micromips_support,[--fatal-warnings],\n       [.set micromips],,\n       [AC_DEFINE(HAVE_GAS_MICROMIPS, 1,\n           [Define if your assembler supports the .set micromips directive])])\n \n     gcc_GAS_CHECK_FEATURE([.dtprelword support],\n-      gcc_cv_as_mips_dtprelword, [2,18,0],,\n+      gcc_cv_as_mips_dtprelword,,\n       [.section .tdata,\"awT\",@progbits\n x:\n \t.word 2\n@@ -5195,7 +5195,7 @@ x:\n \t  [Define if your assembler supports .dtprelword.])])\n \n     gcc_GAS_CHECK_FEATURE([DSPR1 mult with four accumulators support],\n-      gcc_cv_as_mips_dspr1_mult,,,\n+      gcc_cv_as_mips_dspr1_mult,,\n [\t.set\tmips32r2\n \t.set\tnodspr2\n \t.set\tdsp\n@@ -5290,7 +5290,7 @@ pointers into PC-relative form.])\n     fi\n \n     gcc_GAS_CHECK_FEATURE([-mnan= support],\n-      gcc_cv_as_mips_nan,,\n+      gcc_cv_as_mips_nan,\n       [-mnan=2008],,,\n       [AC_DEFINE(HAVE_AS_NAN, 1,\n \t\t [Define if the assembler understands -mnan=.])])\n@@ -5304,12 +5304,12 @@ pointers into PC-relative form.])\n     # Earlier GAS versions generically support .gnu_attribute, but the\n     # msp430 assembler will not do anything with it.\n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n-      gcc_cv_as_msp430_gnu_attribute, [2,33,50],,\n+      gcc_cv_as_msp430_gnu_attribute,,\n       [.gnu_attribute 4,1],,\n       [AC_DEFINE(HAVE_AS_GNU_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .gnu_attribute.])])\n     gcc_GAS_CHECK_FEATURE([.mspabi_attribute support],\n-      gcc_cv_as_msp430_mspabi_attribute, [2,33,50],,\n+      gcc_cv_as_msp430_mspabi_attribute,,\n       [.mspabi_attribute 4,2],,\n       [AC_DEFINE(HAVE_AS_MSPABI_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .mspabi_attribute.])])\n@@ -5322,7 +5322,7 @@ configured with --enable-newlib-nano-formatted-io.])\n     # Versions 2.33 and earlier lacked support for the %gotoff relocation\n     # syntax that is documented in the ABI specification.\n     gcc_GAS_CHECK_FEATURE([support for %gotoff relocations in constant data],\n-      gcc_cv_as_nios2_gotoff_relocation,,,\n+      gcc_cv_as_nios2_gotoff_relocation,,\n [\t.extern foo\n \t.data\n \t.long %gotoff(foo)],,\n@@ -5331,47 +5331,47 @@ configured with --enable-newlib-nano-formatted-io.])\n     ;;\n     riscv*-*-*)\n     gcc_GAS_CHECK_FEATURE([.attribute support],\n-      gcc_cv_as_riscv_attribute, [2,32,0],,\n+      gcc_cv_as_riscv_attribute,,\n       [.attribute stack_align,4],,\n       [AC_DEFINE(HAVE_AS_RISCV_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .attribute.])])\n     gcc_GAS_CHECK_FEATURE([-misa-spec= support],\n-      gcc_cv_as_riscv_isa_spec,,\n+      gcc_cv_as_riscv_isa_spec,\n       [-misa-spec=2.2],,,\n       [AC_DEFINE(HAVE_AS_MISA_SPEC, 1,\n \t\t [Define if the assembler understands -misa-spec=.])])\n     gcc_GAS_CHECK_FEATURE([-march=rv32i_zifencei support],\n-      gcc_cv_as_riscv_march_zifencei,,\n+      gcc_cv_as_riscv_march_zifencei,\n       [-march=rv32i_zifencei],,,\n       [AC_DEFINE(HAVE_AS_MARCH_ZIFENCEI, 1,\n \t\t [Define if the assembler understands -march=rv*_zifencei.])])\n     ;;\n     s390*-*-*)\n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n-      gcc_cv_as_s390_gnu_attribute, [2,18,0],,\n+      gcc_cv_as_s390_gnu_attribute,,\n       [.gnu_attribute 8,1],,\n       [AC_DEFINE(HAVE_AS_GNU_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .gnu_attribute.])])\n     gcc_GAS_CHECK_FEATURE([.machine and .machinemode support],\n-      gcc_cv_as_s390_machine_machinemode, [2,24,0],,\n+      gcc_cv_as_s390_machine_machinemode,,\n       [\t.machinemode push\n \t.machinemode pop\n \t.machine push\n \t.machine pop],,\n       [AC_DEFINE(HAVE_AS_MACHINE_MACHINEMODE, 1,\n \t  [Define if your assembler supports .machine and .machinemode.])])\n     gcc_GAS_CHECK_FEATURE([architecture modifiers support],\n-      gcc_cv_as_s390_architecture_modifiers, [2,26,0],,\n+      gcc_cv_as_s390_architecture_modifiers,,\n       [\t.machine z13+vx ],,\n       [AC_DEFINE(HAVE_AS_ARCHITECTURE_MODIFIERS, 1,\n \t  [Define if your assembler supports architecture modifiers.])])\n     gcc_GAS_CHECK_FEATURE([vector load/store alignment hints],\n-      gcc_cv_as_s390_vector_loadstore_alignment_hints, [2,31,0],,\n+      gcc_cv_as_s390_vector_loadstore_alignment_hints,,\n       [\tvl %v24,0(%r15),3 ],,\n       [AC_DEFINE(HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS, 1,\n \t  [Define if your assembler supports vl/vst/vlm/vstm with an optional alignment hint argument.])])\n     gcc_GAS_CHECK_FEATURE([vector load/store alignment hints on z13],\n-      gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13,, [-mzarch -march=z13],\n+      gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13, [-mzarch -march=z13],\n       [\tvl %v24,0(%r15),3 ],,\n       [AC_DEFINE(HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13, 1,\n \t  [Define if your assembler supports vl/vst/vlm/vstm with an optional alignment hint argument on z13.])])\n@@ -5473,7 +5473,7 @@ if test x\"$insn\" != x; then\n \t$insn\"\n  gcc_GAS_CHECK_FEATURE([dwarf2 debug_line support],\n   gcc_cv_as_dwarf2_debug_line,\n-  [elf,2,11,0],, [$conftest_s],\n+  , [$conftest_s],\n   [if test x$gcc_cv_objdump != x \\\n    && $gcc_cv_objdump -h conftest.o 2> /dev/null \\\n       | grep debug_line > /dev/null 2>&1; then\n@@ -5489,7 +5489,7 @@ if test x\"$insn\" != x; then\n # by DW_AT_decl_file.  Approximate this test by testing if\n # the assembler bitches if the same index is assigned twice.\n  gcc_GAS_CHECK_FEATURE([buggy dwarf2 .file directive],\n-  gcc_cv_as_dwarf2_file_buggy,,,\n+  gcc_cv_as_dwarf2_file_buggy,,\n [\t.file 1 \"foo.s\"\n \t.file 1 \"bar.s\"])\n \n@@ -5510,21 +5510,21 @@ if test x\"$insn\" != x; then\n \"\n \tgcc_GAS_CHECK_FEATURE([dwarf2 debug_view support],\n \t  gcc_cv_as_dwarf2_debug_view,\n-\t  [elf,2,27,0],,[$conftest_s],,\n+\t  ,[$conftest_s],,\n \t  [AC_DEFINE(HAVE_AS_DWARF2_DEBUG_VIEW, 1,\n   [Define if your assembler supports views in dwarf2 .loc directives.])])\n     fi\n  fi\n \n  gcc_GAS_CHECK_FEATURE([--gdwarf2 option],\n   gcc_cv_as_gdwarf2_flag,\n-  [elf,2,11,0], [--gdwarf2], [$insn],,\n+  [--gdwarf2], [$insn],,\n   [AC_DEFINE(HAVE_AS_GDWARF2_DEBUG_FLAG, 1,\n [Define if your assembler supports the --gdwarf2 option.])])\n \n  gcc_GAS_CHECK_FEATURE([--gdwarf-5 option],\n   gcc_cv_as_gdwarf_5_flag,\n-  [elf,2,36,0], [--gdwarf-5], [$insn],\n+  [--gdwarf-5], [$insn],\n   [if test x$gcc_cv_objdump != x \\\n       && $gcc_cv_objdump -Wi conftest.o 2>&1 \\\n \t | grep DW_TAG_compile_unit > /dev/null 2>&1; then\n@@ -5702,19 +5702,19 @@ foo:\n    if test $dwarf4_addr_size = 4; then\n      gcc_GAS_CHECK_FEATURE([assembly of compiler generated 32-bit .debug_line],\n       gcc_cv_as_debug_line_32_flag,\n-      [elf,2,36,0], [], [$conftest_s],,\n+      [], [$conftest_s],,\n       [dwarf4_success=yes])\n    else\n      gcc_GAS_CHECK_FEATURE([assembly of compiler generated 64-bit .debug_line],\n       gcc_cv_as_debug_line_64_flag,\n-      [elf,2,36,0], [], [$conftest_s],,\n+      [], [$conftest_s],,\n       [dwarf4_success=yes])\n    fi\n    if test $dwarf4_success = yes; then\n      dwarf4_success=no\n      gcc_GAS_CHECK_FEATURE([--gdwarf-4 not refusing compiler generated .debug_line],\n       gcc_cv_as_dwarf_4_debug_line_flag,\n-      [elf,2,36,0], [--gdwarf-4], [$conftest_s],,\n+      [--gdwarf-4], [$conftest_s],,\n       [dwarf4_success=yes])\n      break\n    fi\n@@ -5743,7 +5743,7 @@ foo:\n \"\n    dwarf4_success=no\n    gcc_GAS_CHECK_FEATURE([--gdwarf-4 with the APP marker],\n-     gcc_cv_as_dwarf_4_app_flag,,\n+     gcc_cv_as_dwarf_4_app_flag,\n      [--gdwarf-4], [$conftest_s],, [dwarf4_success=yes])\n  fi\n \n@@ -5758,7 +5758,7 @@ foo:\n \t.file\t1 \\\"foo.c\\\"\n \"\n    gcc_GAS_CHECK_FEATURE([working --gdwarf-4/--gdwarf-5 for all sources],\n-     gcc_cv_as_working_gdwarf_n_flag,,\n+     gcc_cv_as_working_gdwarf_n_flag,\n      [--gdwarf-4],\n      [$conftest_s],\n      [changequote(,)dnl\n@@ -5779,19 +5779,19 @@ foo:\n \n  gcc_GAS_CHECK_FEATURE([--gstabs option],\n   gcc_cv_as_gstabs_flag,\n-  [elf,2,11,0], [--gstabs], [$insn],,\n+  [--gstabs], [$insn],,\n   [AC_DEFINE(HAVE_AS_GSTABS_DEBUG_FLAG, 1,\n [Define if your assembler supports the --gstabs option.])])\n \n  gcc_GAS_CHECK_FEATURE([--debug-prefix-map option],\n   gcc_cv_as_debug_prefix_map_flag,\n-  [2,18,0], [--debug-prefix-map /a=/b], [$insn],,\n+  [--debug-prefix-map /a=/b], [$insn],,\n   [AC_DEFINE(HAVE_AS_DEBUG_PREFIX_MAP, 1,\n [Define if your assembler supports the --debug-prefix-map option.])])\n fi\n \n gcc_GAS_CHECK_FEATURE([compressed debug sections],\n-  gcc_cv_as_compress_debug,,,,\n+  gcc_cv_as_compress_debug,,,\n   [# gas compiled without zlib cannot compress debug sections and warns\n    # about it, but still exits successfully.  So check for this, too.\n    if $gcc_cv_as --compress-debug-sections -o conftest.o conftest.s 2>&1 | grep -i warning > /dev/null\n@@ -5822,7 +5822,7 @@ AC_DEFINE_UNQUOTED(AS_NO_COMPRESS_DEBUG_OPTION, \"$gcc_cv_as_no_compress_debug_op\n [Define to the assembler option to disable compressed debug sections.])\n \n gcc_GAS_CHECK_FEATURE([.lcomm with alignment], gcc_cv_as_lcomm_with_alignment,\n- ,,\n+ ,\n [.lcomm bar,4,16],,\n [AC_DEFINE(HAVE_GAS_LCOMM_WITH_ALIGNMENT, 1,\n   [Define if your assembler supports .lcomm with an alignment field.])])\n@@ -5868,7 +5868,7 @@ AC_ARG_ENABLE(gnu-unique-object,\n Valid choices are 'yes' and 'no'.]) ;;\n   esac],\n  [gcc_GAS_CHECK_FEATURE([gnu_unique_object], gcc_cv_as_gnu_unique_object,\n-   [elf,2,19,52],,\n+   ,\n    [.type foo, '$target_type_format_char'gnu_unique_object],,\n # We need to unquote above to to use the definition from config.gcc.\n # Also check for ld.so support, i.e. glibc 2.11 or higher."}]}