{"sha": "8fd17b982de905b1d564b9be985ecaacbc6c635f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkMTdiOTgyZGU5MDViMWQ1NjRiOWJlOTg1ZWNhYWNiYzZjNjM1Zg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-06-29T14:20:50Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-06-29T14:20:50Z"}, "message": "[AArch64] Generalize TLSLE macro and pattern names\n\n2015-06-29  Jiong Wang  <jiong.wang@arm.com>\n\n\t* config/arch64/aarch64.md (UNSPEC_TLSLE): New enumeration.\n\t* config/arch64/aarch64.md (tlsle_small): Rename to tlsle and use new\n\tunspec name.\n\t(tlsle_small_<mode>): Rename to tlsle_<mode> and use new unspec name.\n\t* config/arch64/aarch64-protos.h (arch64_symbol_type): Rename\n\tSYMBOL_SMALL_TPREL to SYMBOL_TLSLE.\n\t(aarch64_symbol_context): Ditto.\n\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Ditto\n\tand use new pattern name.\n\t(aarch64_expand_mov_immediate): Ditto.\n\t(aarch64_print_operand): Ditto.\n\t(aarch64_classify_tls_symbol): Ditto.\n\nFrom-SVN: r225121", "tree": {"sha": "8a7260bf97a6ffea2642cd81453c3bc4f8b068da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a7260bf97a6ffea2642cd81453c3bc4f8b068da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd17b982de905b1d564b9be985ecaacbc6c635f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd17b982de905b1d564b9be985ecaacbc6c635f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd17b982de905b1d564b9be985ecaacbc6c635f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd17b982de905b1d564b9be985ecaacbc6c635f/comments", "author": null, "committer": null, "parents": [{"sha": "f461569a23508a49b913787cc76ab42bc24146f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f461569a23508a49b913787cc76ab42bc24146f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f461569a23508a49b913787cc76ab42bc24146f4"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "40fd3257d133ac5fd125b5a5b2738a7be1b436d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fd17b982de905b1d564b9be985ecaacbc6c635f", "patch": "@@ -1,3 +1,18 @@\n+2015-06-29  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/arch64/aarch64.md (UNSPEC_TLSLE): New enumeration.\n+\t* config/arch64/aarch64.md (tlsle_small): Rename to tlsle and use new\n+\tunspec name.\n+\t(tlsle_small_<mode>): Rename to tlsle_<mode> and use new unspec name.\n+\t* config/arch64/aarch64-protos.h (arch64_symbol_type): Rename\n+\tSYMBOL_SMALL_TPREL to SYMBOL_TLSLE.\n+\t(aarch64_symbol_context): Ditto.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Ditto\n+\tand use new pattern name.\n+\t(aarch64_expand_mov_immediate): Ditto.\n+\t(aarch64_print_operand): Ditto.\n+\t(aarch64_classify_tls_symbol): Ditto.\n+\n 2015-06-29  Marek Polacek  <polacek@redhat.com>\n \t    Marc Glisse  <marc.glisse@inria.fr>\n "}, {"sha": "4062c2736aea04aea648293aa829f9e66b703bde", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=8fd17b982de905b1d564b9be985ecaacbc6c635f", "patch": "@@ -72,7 +72,7 @@ enum aarch64_symbol_context\n    SYMBOL_SMALL_TLSGD\n    SYMBOL_SMALL_TLSDESC\n    SYMBOL_SMALL_GOTTPREL\n-   SYMBOL_SMALL_TPREL\n+   SYMBOL_TLSLE\n    Each of of these represents a thread-local symbol, and corresponds to the\n    thread local storage relocation operator for the symbol being referred to.\n \n@@ -107,9 +107,9 @@ enum aarch64_symbol_type\n   SYMBOL_SMALL_TLSGD,\n   SYMBOL_SMALL_TLSDESC,\n   SYMBOL_SMALL_GOTTPREL,\n-  SYMBOL_SMALL_TPREL,\n   SYMBOL_TINY_ABSOLUTE,\n   SYMBOL_TINY_GOT,\n+  SYMBOL_TLSLE,\n   SYMBOL_FORCE_TO_MEM\n };\n "}, {"sha": "0079c82b0f83966942fedf0d02a06bbca35bed62", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8fd17b982de905b1d564b9be985ecaacbc6c635f", "patch": "@@ -1059,14 +1059,14 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \treturn;\n       }\n \n-    case SYMBOL_SMALL_TPREL:\n+    case SYMBOL_TLSLE:\n       {\n \trtx tp = aarch64_load_tp (NULL);\n \n \tif (GET_MODE (dest) != Pmode)\n \t  tp = gen_lowpart (GET_MODE (dest), tp);\n \n-\temit_insn (gen_tlsle_small (dest, tp, imm));\n+\temit_insn (gen_tlsle (dest, tp, imm));\n \tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n \treturn;\n       }\n@@ -1619,9 +1619,9 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t    }\n \t  /* FALLTHRU */\n \n-        case SYMBOL_SMALL_TPREL:\n \tcase SYMBOL_SMALL_ABSOLUTE:\n \tcase SYMBOL_TINY_ABSOLUTE:\n+\tcase SYMBOL_TLSLE:\n \t  aarch64_load_symref_appropriately (dest, imm, sty);\n \t  return;\n \n@@ -4504,7 +4504,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  asm_fprintf (asm_out_file, \":gottprel:\");\n \t  break;\n \n-\tcase SYMBOL_SMALL_TPREL:\n+\tcase SYMBOL_TLSLE:\n \t  asm_fprintf (asm_out_file, \":tprel:\");\n \t  break;\n \n@@ -4537,7 +4537,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  asm_fprintf (asm_out_file, \":gottprel_lo12:\");\n \t  break;\n \n-\tcase SYMBOL_SMALL_TPREL:\n+\tcase SYMBOL_TLSLE:\n \t  asm_fprintf (asm_out_file, \":tprel_lo12_nc:\");\n \t  break;\n \n@@ -4555,7 +4555,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \n       switch (aarch64_classify_symbolic_expression (x, SYMBOL_CONTEXT_ADR))\n \t{\n-\tcase SYMBOL_SMALL_TPREL:\n+\tcase SYMBOL_TLSLE:\n \t  asm_fprintf (asm_out_file, \":tprel_hi12:\");\n \t  break;\n \tdefault:\n@@ -7635,7 +7635,7 @@ aarch64_classify_tls_symbol (rtx x)\n       return SYMBOL_SMALL_GOTTPREL;\n \n     case TLS_MODEL_LOCAL_EXEC:\n-      return SYMBOL_SMALL_TPREL;\n+      return SYMBOL_TLSLE;\n \n     case TLS_MODEL_EMULATED:\n     case TLS_MODEL_NONE:"}, {"sha": "2d56a75b43fe548642557f865ac37e790740274b", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd17b982de905b1d564b9be985ecaacbc6c635f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8fd17b982de905b1d564b9be985ecaacbc6c635f", "patch": "@@ -117,6 +117,7 @@\n     UNSPEC_ST4_LANE\n     UNSPEC_TLS\n     UNSPEC_TLSDESC\n+    UNSPEC_TLSLE\n     UNSPEC_USHL_2S\n     UNSPEC_VSTRUCTDUMMY\n     UNSPEC_SP_SET\n@@ -4446,27 +4447,25 @@\n    (set_attr \"length\" \"8\")]\n )\n \n-(define_expand \"tlsle_small\"\n+(define_expand \"tlsle\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n         (unspec [(match_operand 1 \"register_operand\" \"r\")\n                    (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n-                   UNSPEC_GOTSMALLTLS))]\n+                   UNSPEC_TLSLE))]\n   \"\"\n {\n   machine_mode mode = GET_MODE (operands[0]);\n   emit_insn ((mode == DImode\n-\t      ? gen_tlsle_small_di\n-\t      : gen_tlsle_small_si) (operands[0],\n-\t\t\t\t     operands[1],\n-\t\t\t\t     operands[2]));\n+\t      ? gen_tlsle_di\n+\t      : gen_tlsle_si) (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"tlsle_small_<mode>\"\n+(define_insn \"tlsle_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n                    (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n-\t\t   UNSPEC_GOTSMALLTLS))]\n+\t\t   UNSPEC_TLSLE))]\n   \"\"\n   \"add\\\\t%<w>0, %<w>1, #%G2, lsl #12\\;add\\\\t%<w>0, %<w>0, #%L2\"\n   [(set_attr \"type\" \"alu_sreg\")"}]}