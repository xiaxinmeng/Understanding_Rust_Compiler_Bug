{"sha": "59d527639cec7c403ea8790c9b15925c0b38327c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkNTI3NjM5Y2VjN2M0MDNlYTg3OTBjOWIxNTkyNWMwYjM4MzI3Yw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-26T08:38:37Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-26T08:38:37Z"}, "message": "entered into RCS\n\nFrom-SVN: r1293", "tree": {"sha": "01ccbf7601a4da272279ceb5675b7258e62b269d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ccbf7601a4da272279ceb5675b7258e62b269d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d527639cec7c403ea8790c9b15925c0b38327c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d527639cec7c403ea8790c9b15925c0b38327c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d527639cec7c403ea8790c9b15925c0b38327c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d527639cec7c403ea8790c9b15925c0b38327c/comments", "author": null, "committer": null, "parents": [{"sha": "45528dbfc50eb8c973f7fe076d7031bfb46bde55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45528dbfc50eb8c973f7fe076d7031bfb46bde55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45528dbfc50eb8c973f7fe076d7031bfb46bde55"}], "stats": {"total": 180, "additions": 161, "deletions": 19}, "files": [{"sha": "28fc0d44935b68206cc9f63e9ee80ace5d13ed74", "filename": "gcc/ginclude/va-i960.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-i960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-i960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-i960.h?ref=59d527639cec7c403ea8790c9b15925c0b38327c", "patch": "@@ -1,5 +1,18 @@\n /* GNU C varargs support for the Intel 80960.  */\n \n+/* Define __gnuc_va_list.  */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+/* The first element is the address of the first argument.\n+   The second element is the number of bytes skipped past so far.  */\n+typedef unsigned __gnuc_va_list[2];\t\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n+\n /* In GCC version 2, we want an ellipsis at the end of the declaration\n    of the argument list.  GCC version 1 can't parse it.  */\n \n@@ -9,10 +22,6 @@\n #define __va_ellipsis\n #endif\n \n-/* The first element is the address of the first argument.\n-   The second element is the number of bytes skipped past so far.  */\n-typedef unsigned va_list[2];\t\n-\n /* The stack size of the type t.  */\n #define __vsiz(T)   (((sizeof (T) + 3) / 4) * 4)\n /* The stack alignment of the type t.  */\n@@ -42,4 +51,8 @@ typedef unsigned va_list[2];\n   *((T *) ((char *) *(AP) + (AP)[1] - __vsiz (T)))\t\t\t\\\n )\n \n+void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define\tva_end(AP)\n+\n+#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n+"}, {"sha": "f43222538cf2d5e8177da5972aa38291b384dee7", "filename": "gcc/ginclude/va-mips.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-mips.h?ref=59d527639cec7c403ea8790c9b15925c0b38327c", "patch": "@@ -7,8 +7,18 @@\n /* ---------------------------------------- */\n \n \n-/* These macros implement traditional (non-ANSI) varargs\n-   for GNU C.  */\n+/* These macros implement varargs for GNU C--either traditional or ANSU.  */\n+\n+/* Define __gnuc_va_list.  */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+typedef char * __gnuc_va_list;\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n \n /* In GCC version 2, we want an ellipsis at the end of the declaration\n    of the argument list.  GCC version 1 can't parse it.  */\n@@ -19,13 +29,6 @@\n #define __va_ellipsis\n #endif\n \n-#ifndef _VA_LIST_\n-#define _VA_LIST_\n-/* Make this a macro rather than a typedef, so we can undef any other defn.  */\n-#define va_list __va___list\n-typedef char * __va___list;\n-#endif\n-\n #define __va_rounded_size(TYPE)  \\\n   (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n \n@@ -38,6 +41,7 @@ typedef char * __va___list;\n #define va_start(AP)  AP = (char *) &__builtin_va_alist\n #endif\n \n+void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define va_end(AP)\n \n #ifdef lint\t/* complains about constant in conditional context */\n@@ -50,3 +54,4 @@ typedef char * __va___list;\n \t\t\t\t: ((int)AP + 2*4 - 1) & -4)))[-1]\n #endif\t\t/* lint */\n \n+#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */"}, {"sha": "8d403f6879071fd6c50dc55a1b829b88c07962f4", "filename": "gcc/ginclude/va-pa.h", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-pa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-pa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-pa.h?ref=59d527639cec7c403ea8790c9b15925c0b38327c", "patch": "@@ -0,0 +1,98 @@\n+#if __GNUC__ > 1\n+\n+/* Define __gnuc_va_list.  */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+\n+typedef struct\n+{\n+  char *__va_stack_start;\t/* Real start of stack args. */\n+  char *__va_int;\t\t/* Pointer to the general register */\n+\t\t\t\t/* args and stack. */\n+  char *__va_float;\t\t/* Pointer to the fp register args.  */\n+  char *__va_double;\n+} __gnuc_va_list;\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n+\n+#ifdef _STDARG_H\n+#define va_start(AP,LASTARG) ((AP) = *(__gnuc_va_list *)__builtin_saveregs())\n+#else\n+#define va_alist  __builtin_va_alist\n+/* The ... causes current_function_varargs to be set in cc1.  */\n+#define va_dcl    int __builtin_va_alist; ...\n+#define va_start(AP) ((AP) = *(__gnuc_va_list *)__builtin_saveregs())\n+#endif /* _STDARG_H */\n+\n+/* Handle pass by invisible reference and voids left by aligned */\n+/* doubles. */\n+\n+#define __va_rounded_size(TYPE)  \\\n+  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n+\n+#define va_arg(AP, TYPE) \\\n+  (((__va_rounded_size(TYPE) <= 8)\t\t\t\t       \t\\\n+    ? ((AP).__va_int -= __va_rounded_size (TYPE),\t\t\t\\\n+       (AP).__va_float -= __va_rounded_size (TYPE),\t\t\t\\\n+       (AP).__va_double -= __va_rounded_size (TYPE),\t\t\t\\\n+       (__alignof__ (TYPE) > 4 ? ((int)(AP).__va_int &= ~(0x7),\t\t\\\n+\t\t\t\t  (int)(AP).__va_float &= ~(0x7),\t\\\n+\t\t\t\t  (int)(AP).__va_double &= ~(0x7)) : 0))\\\n+    : (int)((AP).__va_int -= sizeof (TYPE *),\t\t\t\t\\\n+\t    (AP).__va_float -= sizeof (TYPE *),\t\t\t\t\\\n+\t    (AP).__va_double -= sizeof (TYPE *))),\t\t\t\\\n+   (((AP).__va_int < (AP).__va_stack_start\t\t\t\t\\\n+     || __builtin_classify_type (* (TYPE *) 0) != 8)\t\t\t\\\n+    ? ((__va_rounded_size(TYPE) <= 8) ? *(TYPE *)(AP).__va_int\t\t\\\n+       : **(TYPE **)(AP).__va_int)\t\t\t\t\t\\\n+    : ((__va_rounded_size(TYPE) <= 4) ? *(TYPE *)(AP).__va_float\t\\\n+       : ((__va_rounded_size(TYPE) <= 8) ? *(TYPE *)(AP).__va_double\t\\\n+\t  : **(TYPE **)(AP).__va_int))))\n+\n+\n+void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n+#define va_end(AP)\n+\n+#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n+\n+#else /* not __GNUCC_ > 1 */\n+\n+typedef char *va_list;\n+\n+/* __builtin_saveregs () tickles a bug in the pa-risc gcc 1.39 port, */\n+/* so don't use it for varargs. Obviously the stdarg stuff doesn't */\n+/* work very well. */ \n+\n+#ifdef _STDARG_H\n+#define va_start(AP,LASTARG) \\\n+  (__builtin_saveregs(), (AP) = __builtin_next_arg ())\n+\n+/* gcc1 doesn't implement pass by invisible reference */ \n+#define __va_rounded_size(TYPE)  \\\n+  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n+\n+#define va_arg(AP,TYPE) \\\n+  ((AP) -= __va_rounded_size (TYPE), (__alignof__ (TYPE) > 4 ?\t\\\n+\t\t\t\t      (int)AP &= ~(0x7) : 0),\t\\\n+   *(TYPE *)(AP))\n+\n+void va_end (va_list);\t\t/* Defined in libgcc.a */\n+#define va_end(AP)\n+#else /* _STDARG_H */\n+#define va_alist __va_a__, __va_b__, __va_c__, __va_d__\n+#define va_dcl int __va_a__, __va_b__, __va_c__, __va_d__;\n+#define va_start(list) list = (char *) &__va_a__, &__va_b__, &__va_c__, \\\n+  &__va_d__\n+\n+# define va_arg(list,mode) *(mode *) ((int) (list = (char *) \\\n+\t(((int) list + sizeof(int /*__va_a__*/) - sizeof(mode)) & ~(sizeof(mode)-1)) \\\n+\t- sizeof(int /*__va_a__*/)) + sizeof(int /*__va_a__*/))\n+  \n+#define va_end(list)\n+\n+#endif /* _STDARG_H */\n+#endif /* not __GNUCC__ > 1 */"}, {"sha": "61bddbf60c8fb68e89a37f97cf9053442ce3cbc8", "filename": "gcc/ginclude/va-pyr.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-pyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-pyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-pyr.h?ref=59d527639cec7c403ea8790c9b15925c0b38327c", "patch": "@@ -44,6 +44,11 @@\n  *  # of calls to va_arg (debugging) at __va_buf[15]\n  */\n \n+/* Define __gnuc_va_list.  */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+\n typedef void *__voidptr;\n #if 1\n \n@@ -63,6 +68,14 @@ typedef __voidptr(*__va_buf);\n \n #endif\n \n+typedef __va_buf __gnuc_va_list;\n+\n+#endif /* not __GNUC_VA_LIST */\n+\f\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n+\n /* In GCC version 2, we want an ellipsis at the end of the declaration\n    of the argument list.  GCC version 1 can't parse it.  */\n \n@@ -79,8 +92,6 @@ typedef __voidptr(*__va_buf);\n /* The ... causes current_function_varargs to be set in cc1.  */\n #define va_dcl __voidptr va_alist; __va_ellipsis\n \n-typedef __va_buf va_list;\n-\n \n /* __asm (\"rcsp %0\" : \"=r\" ( _AP [0]));*/\n \n@@ -111,4 +122,7 @@ __extension__\t\t\t\t\t\t\t\t\\\n   *(( _MODE *)__param_addr);\t\t\t\t\t\t\\\n })\n \n+void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define va_end(_X)\n+\n+#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */"}, {"sha": "f98bbc4fd440f46708537a75ef5e1d16cd2ab4f1", "filename": "gcc/ginclude/va-sparc.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d527639cec7c403ea8790c9b15925c0b38327c/gcc%2Fginclude%2Fva-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-sparc.h?ref=59d527639cec7c403ea8790c9b15925c0b38327c", "patch": "@@ -1,17 +1,25 @@\n /* This is just like the default gvarargs.h\n    except for differences described below.  */\n \n-/* Make this a macro rather than a typedef, so we can undef any other defn.  */\n-#define va_list __va___list\n+/* Define __gnuc_va_list.  */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+\n #ifndef __svr4__\n /* This has to be a char * to be compatible with Sun.\n    i.e., we have to pass a `va_list' to vsprintf.  */\n-typedef char * __va___list;\n+typedef char * __gnuc_va_list;\n #else\n /* This has to be a void * to be compatible with Sun svr4.\n    i.e., we have to pass a `va_list' to vsprintf.  */\n-typedef void * __va___list;\n+typedef void * __gnuc_va_list;\n #endif\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n \n /* In GCC version 2, we want an ellipsis at the end of the declaration\n    of the argument list.  GCC version 1 can't parse it.  */\n@@ -34,6 +42,7 @@ typedef void * __va___list;\n  (__builtin_saveregs (), (AP) = ((char *) &__builtin_va_alist))\n #endif\n \n+void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define va_end(pvar)\n \n #define __va_rounded_size(TYPE)  \\\n@@ -64,3 +73,6 @@ __extension__\t\t\t\t\t\t\t\\\n \t *(TYPE *)__u.__d; })\t\t\t\t\t\\\n     : ((pvar) += __va_rounded_size (TYPE),\t\t\t\\\n        *((TYPE *) ((pvar) - __va_rounded_size (TYPE)))));})\n+\n+#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n+"}]}