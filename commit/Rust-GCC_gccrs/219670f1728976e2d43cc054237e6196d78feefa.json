{"sha": "219670f1728976e2d43cc054237e6196d78feefa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE5NjcwZjE3Mjg5NzZlMmQ0M2NjMDU0MjM3ZTYxOTZkNzhmZWVmYQ==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@redhat.com", "date": "2001-07-11T13:10:18Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2001-07-11T13:10:18Z"}, "message": "* Revert today's change -- there is a subtle bug.\n\nFrom-SVN: r43935", "tree": {"sha": "d7996e70883a19e93c2f74f09f9c6c96b94e0abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7996e70883a19e93c2f74f09f9c6c96b94e0abb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/219670f1728976e2d43cc054237e6196d78feefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/219670f1728976e2d43cc054237e6196d78feefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/219670f1728976e2d43cc054237e6196d78feefa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/219670f1728976e2d43cc054237e6196d78feefa/comments", "author": null, "committer": null, "parents": [{"sha": "0e41fb04c0b06c48d000f7f41c972c7dfcd89579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e41fb04c0b06c48d000f7f41c972c7dfcd89579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e41fb04c0b06c48d000f7f41c972c7dfcd89579"}], "stats": {"total": 45, "additions": 17, "deletions": 28}, "files": [{"sha": "03d03d3fb7562b4015b9c5a9acc18b0d63a89558", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=219670f1728976e2d43cc054237e6196d78feefa", "patch": "@@ -1,5 +1,7 @@\n 2001-07-11  Ben Elliston  <bje@redhat.com>\n \n+\t* Revert this change -- there is a subtle bug.\n+\n \tPR c++/80\n \t* decl.c (finish_enum): New \"attributes\" argument; pass it to\n \tcplus_decl_attributes.  Use a narrower type if the enum is packed."}, {"sha": "66ce4fb0d31418aebb26bde50f84fdbb410753ce", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=219670f1728976e2d43cc054237e6196d78feefa", "patch": "@@ -3845,7 +3845,7 @@ extern tree xref_tag\t\t\t\tPARAMS ((tree, tree, int));\n extern tree xref_tag_from_type\t\t\tPARAMS ((tree, tree, int));\n extern void xref_basetypes\t\t\tPARAMS ((tree, tree, tree, tree));\n extern tree start_enum\t\t\t\tPARAMS ((tree));\n-extern void finish_enum\t\t\t\tPARAMS ((tree, tree));\n+extern void finish_enum\t\t\t\tPARAMS ((tree));\n extern void build_enumerator\t\t\tPARAMS ((tree, tree, tree));\n extern int start_function\t\t\tPARAMS ((tree, tree, tree, int));\n extern tree finish_function\t\t\tPARAMS ((int));"}, {"sha": "5de715086267d8f4cc9e73ffe03d0fcb8d91878a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=219670f1728976e2d43cc054237e6196d78feefa", "patch": "@@ -12984,9 +12984,8 @@ start_enum (name)\n    ENUMTYPE is the type object and VALUES a list of name-value pairs.  */\n \n void\n-finish_enum (enumtype, attributes)\n+finish_enum (enumtype)\n      tree enumtype;\n-     tree attributes;\n {\n   tree pair;\n   tree minnode;\n@@ -12997,8 +12996,6 @@ finish_enum (enumtype, attributes)\n   int highprec; \n   int precision;\n \n-  cplus_decl_attributes (enumtype, attributes, NULL_TREE);\n-  \n   /* We built up the VALUES in reverse order.  */\n   TYPE_VALUES (enumtype) = nreverse (TYPE_VALUES (enumtype));\n \n@@ -13077,14 +13074,11 @@ finish_enum (enumtype, attributes)\n   else\n     fixup_signed_type (enumtype);\n \n-  if (flag_short_enums || TYPE_PACKED (enumtype) ||\n-      (precision > TYPE_PRECISION (integer_type_node)))\n-    {\n-      /* Use the width of the narrowest normal C type which is wide\n-\t enough.  */\n-      TYPE_PRECISION (enumtype) = TYPE_PRECISION (type_for_size\n-\t\t\t\t\t\t  (precision, 1));\n-    }\n+  if (flag_short_enums || (precision > TYPE_PRECISION (integer_type_node)))\n+    /* Use the width of the narrowest normal C type which is wide\n+       enough.  */\n+    TYPE_PRECISION (enumtype) = TYPE_PRECISION (type_for_size\n+\t\t\t\t\t\t(precision, 1));\n   else\n     TYPE_PRECISION (enumtype) = TYPE_PRECISION (integer_type_node);\n "}, {"sha": "6e2ac183ce55685f87ee308b47f984753480731c", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=219670f1728976e2d43cc054237e6196d78feefa", "patch": "@@ -340,7 +340,7 @@ cp_parse_init ()\n %type <ttype> init initlist maybeasm maybe_init defarg defarg1\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n-%type <ttype> any_word enum_head\n+%type <ttype> any_word\n \n %type <itype> save_lineno\n %type <ttype> simple_stmt simple_if\n@@ -2240,29 +2240,22 @@ pending_defargs:\n \t\t{ do_pending_defargs (); }\n \t;\n \n-enum_head:\n-\t  ENUM\n-\t\t{ $$ = NULL_TREE; }\n-\t| ENUM attributes\n-\t\t{ $$ = $2; }\n-\t;\n-\n structsp:\n-\t  enum_head identifier '{'\n+\t  ENUM identifier '{'\n \t\t{ $<ttype>$ = current_enum_type;\n \t\t  current_enum_type = start_enum ($2); }\n-\t  enumlist_opt '}' maybe_attribute \n+\t  enumlist_opt '}'\n \t\t{ $$.t = current_enum_type;\n-\t\t  finish_enum (current_enum_type, chainon ($1, $7));\n+\t\t  finish_enum (current_enum_type);\n \t\t  $$.new_type_flag = 1;\n \t\t  current_enum_type = $<ttype>4;\n \t\t  check_for_missing_semicolon ($$.t); }\n-\t| enum_head '{'\n+\t| ENUM '{'\n \t\t{ $<ttype>$ = current_enum_type;\n \t\t  current_enum_type = start_enum (make_anon_name ()); }\n-\t  enumlist_opt '}' maybe_attribute \n+\t  enumlist_opt '}'\n                 { $$.t = current_enum_type;\n-\t\t  finish_enum (current_enum_type, chainon ($1, $6));\n+\t\t  finish_enum (current_enum_type);\n \t\t  $$.new_type_flag = 1;\n \t\t  current_enum_type = $<ttype>3;\n \t\t  check_for_missing_semicolon ($$.t); }"}, {"sha": "3d6279a82823dd81224999c839c7ce80130b896c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219670f1728976e2d43cc054237e6196d78feefa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=219670f1728976e2d43cc054237e6196d78feefa", "patch": "@@ -10149,7 +10149,7 @@ tsubst_enum (tag, newtag, args)\n       build_enumerator (TREE_PURPOSE (e), value, newtag); \n     }\n \n-  finish_enum (newtag, NULL_TREE);\n+  finish_enum (newtag);\n   DECL_SOURCE_LINE (TYPE_NAME (newtag)) = DECL_SOURCE_LINE (TYPE_NAME (tag));\n   DECL_SOURCE_FILE (TYPE_NAME (newtag)) = DECL_SOURCE_FILE (TYPE_NAME (tag));\n }"}]}