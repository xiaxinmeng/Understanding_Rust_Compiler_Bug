{"sha": "cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhM2QwM2RhNmY0NGQ3ZGFjMmRjNThjNzY2MzU2N2VjMzQ1ZDVmNA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-04-28T11:16:07Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-11-10T11:13:38Z"}, "message": "IBM Z: Test long doubles in vector registers\n\ngcc/testsuite/ChangeLog:\n\n2020-11-05  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/vector/long-double-callee-abi-scan.c: New test.\n\t* gcc.target/s390/vector/long-double-caller-abi-run.c: New test.\n\t* gcc.target/s390/vector/long-double-caller-abi-scan.c: New test.\n\t* gcc.target/s390/vector/long-double-copysign.c: New test.\n\t* gcc.target/s390/vector/long-double-fprx2-constant.c: New test.\n\t* gcc.target/s390/vector/long-double-from-double.c: New test.\n\t* gcc.target/s390/vector/long-double-from-float.c: New test.\n\t* gcc.target/s390/vector/long-double-from-i16.c: New test.\n\t* gcc.target/s390/vector/long-double-from-i32.c: New test.\n\t* gcc.target/s390/vector/long-double-from-i64.c: New test.\n\t* gcc.target/s390/vector/long-double-from-i8.c: New test.\n\t* gcc.target/s390/vector/long-double-from-u16.c: New test.\n\t* gcc.target/s390/vector/long-double-from-u32.c: New test.\n\t* gcc.target/s390/vector/long-double-from-u64.c: New test.\n\t* gcc.target/s390/vector/long-double-from-u8.c: New test.\n\t* gcc.target/s390/vector/long-double-to-double.c: New test.\n\t* gcc.target/s390/vector/long-double-to-float.c: New test.\n\t* gcc.target/s390/vector/long-double-to-i16.c: New test.\n\t* gcc.target/s390/vector/long-double-to-i32.c: New test.\n\t* gcc.target/s390/vector/long-double-to-i64.c: New test.\n\t* gcc.target/s390/vector/long-double-to-i8.c: New test.\n\t* gcc.target/s390/vector/long-double-to-u16.c: New test.\n\t* gcc.target/s390/vector/long-double-to-u32.c: New test.\n\t* gcc.target/s390/vector/long-double-to-u64.c: New test.\n\t* gcc.target/s390/vector/long-double-to-u8.c: New test.\n\t* gcc.target/s390/vector/long-double-vec-duplicate.c: New test.\n\t* gcc.target/s390/vector/long-double-wf.h: New test.\n\t* gcc.target/s390/vector/long-double-wfaxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfcxb-0001.c: New test.\n\t* gcc.target/s390/vector/long-double-wfcxb-0111.c: New test.\n\t* gcc.target/s390/vector/long-double-wfcxb-1011.c: New test.\n\t* gcc.target/s390/vector/long-double-wfcxb-1101.c: New test.\n\t* gcc.target/s390/vector/long-double-wfdxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfixb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfkxb-0111.c: New test.\n\t* gcc.target/s390/vector/long-double-wfkxb-1011.c: New test.\n\t* gcc.target/s390/vector/long-double-wfkxb-1101.c: New test.\n\t* gcc.target/s390/vector/long-double-wflcxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wflpxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfmaxb-2.c: New test.\n\t* gcc.target/s390/vector/long-double-wfmaxb-3.c: New test.\n\t* gcc.target/s390/vector/long-double-wfmaxb-disabled.c: New test.\n\t* gcc.target/s390/vector/long-double-wfmaxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfmsxb-disabled.c: New test.\n\t* gcc.target/s390/vector/long-double-wfmsxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfmxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfnmaxb-disabled.c: New test.\n\t* gcc.target/s390/vector/long-double-wfnmaxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfnmsxb-disabled.c: New test.\n\t* gcc.target/s390/vector/long-double-wfnmsxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfsqxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wfsxb-1.c: New test.\n\t* gcc.target/s390/vector/long-double-wfsxb.c: New test.\n\t* gcc.target/s390/vector/long-double-wftcixb-1.c: New test.\n\t* gcc.target/s390/vector/long-double-wftcixb.c: New test.", "tree": {"sha": "98563b6c790dc2f95bf8d44729fe7a373521db0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98563b6c790dc2f95bf8d44729fe7a373521db0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e627cda5686592235dd38e461e73f2d6e8d24cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e627cda5686592235dd38e461e73f2d6e8d24cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e627cda5686592235dd38e461e73f2d6e8d24cd5"}], "stats": {"total": 808, "additions": 808, "deletions": 0}, "files": [{"sha": "69e8c6148c2799f47a709bb7d84a1020d44f86d0", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-callee-abi-scan.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-callee-abi-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-callee-abi-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-callee-abi-scan.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch -fno-unroll-loops\" } */\n+#include <stdarg.h>\n+\n+__attribute__ ((noipa, used)) long double\n+long_double_callee (long double x, int n, ...)\n+{\n+  long double sum = x;\n+  va_list vl;\n+  int i;\n+\n+  va_start (vl, n);\n+  for (i = 0; i < n; i++)\n+    sum += va_arg (vl, long double);\n+  va_end (vl);\n+\n+  return sum;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tvl\\t} 3 } } */"}, {"sha": "f3a41bacc2f89eaa268b8b0a7010beb890dc33ff", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-caller-abi-run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-caller-abi-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-caller-abi-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-caller-abi-run.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-callee-abi-scan.c\"\n+#include \"long-double-caller-abi-scan.c\""}, {"sha": "c1ec5b16e9e8c81ed501b1deea1f473baf369511", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-caller-abi-scan.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-caller-abi-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-caller-abi-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-caller-abi-scan.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include <assert.h>\n+\n+long double long_double_callee (long double x, int n, ...);\n+\n+int\n+main ()\n+{\n+  assert (long_double_callee (1.L, 2, 2.L, 3.L) == 6.L);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tvst\\t} 3 } } */"}, {"sha": "3115195e974e5e5c4f8b162d1f62b21d90478790", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-copysign.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-copysign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-copysign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-copysign.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_copysign (long double x, long double y)\n+{\n+  return __builtin_copysignl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tvsel\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_copysign (1.1L, 2.2L) == 1.1L);\n+  assert (long_double_copysign (1.1L, -2.2L) == -1.1L);\n+  assert (long_double_copysign (-1.1L, 2.2L) == 1.1L);\n+  assert (long_double_copysign (-1.1L, -2.2L) == -1.1L);\n+}"}, {"sha": "02a6a1f69c5759628d2d33af9e1ff6f58ca8355f", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-fprx2-constant.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-fprx2-constant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-fprx2-constant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-fprx2-constant.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mtune=z14 -funroll-loops\" } */\n+\n+long double a;\n+int d;\n+void\n+b ()\n+{\n+  for (int c = 0; c < d; ++c)\n+    a = (a - c) / (c + 1);\n+}"}, {"sha": "5eb31f8bd84cb93d3a7e6c8830e9f0dfe126ea87", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-double.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-double.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_double (double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\twflld\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_double (42.) == 42.L);\n+  assert (long_double_from_double (-42.) == -42.L);\n+}"}, {"sha": "0449f0cfaf20db3b08cc22efe75284c4a3308bd6", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-float.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-float.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_float (float x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tldebr\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\twflld\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_float (42.F) == 42.L);\n+  assert (long_double_from_float (-42.F) == -42.L);\n+}"}, {"sha": "68b164d377f34f1a550601c1562fd0708e8fae34", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-i16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i16.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_i16 (int16_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxfbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_i16 (42) == 42.L);\n+  assert (long_double_from_i16 (-42) == -42.L);\n+}"}, {"sha": "ad8443bf61a53eee8bca142891e9bf9d40c4c587", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-i32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i32.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_i32 (int32_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxfbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_i32 (42) == 42.L);\n+  assert (long_double_from_i32 (-42) == -42.L);\n+}"}, {"sha": "3d2c424bbc7a2b4b0c2d141b70e03fb0ae2c3df4", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-i64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i64.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_i64 (int64_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxgbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_i64 (42) == 42.L);\n+  assert (long_double_from_i64 (-42) == -42.L);\n+}"}, {"sha": "44c8c9d9becb19cc09e95c637ad2d56346d6bfb9", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-i8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-i8.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_i8 (int8_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxfbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_i8 (42) == 42.L);\n+  assert (long_double_from_i8 (-42) == -42.L);\n+}"}, {"sha": "f10c298c6d0d4e0a3390bfa42aa4b99c607b9754", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-u16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u16.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_u16 (uint16_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxlfbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_u16 (42) == 42.L);\n+  assert (long_double_from_u16 (-42) == 65494.L);\n+}"}, {"sha": "2763fb47b5561eefda368bc1857903af92f94236", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-u32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u32.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_u32 (uint32_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxlfbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_u32 (42) == 42.L);\n+  assert (long_double_from_u32 (-42) == 4294967254.L);\n+}"}, {"sha": "4686dfd8d20b27fc2fd7cff3a1d1864acbb2bcf4", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-u64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u64.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_u64 (uint64_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxlgbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_u64 (42) == 42.L);\n+  assert (long_double_from_u64 (-42) == 18446744073709551574.L);\n+}"}, {"sha": "3e6eb924244720a1f70040852fae3f32c77930b8", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-u8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-u8.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_u8 (uint8_t x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcxlfbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_u8 (42) == 42.L);\n+  assert (long_double_from_u8 (-42) == 214.L);\n+}"}, {"sha": "88aa053d203ecd82ec8d27b3a974185bf1cf5b8e", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-double.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-double.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static double\n+long_double_to_double (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\twflrx\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_double (42.L) == 42.);\n+  assert (long_double_to_double (-42.L) == -42.);\n+}"}, {"sha": "36fd4299ae479cb9ca569a22d3df1ba67dc8a447", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-float.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-float.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static float\n+long_double_to_float (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\twflrx\\t%v\\d+,%v\\d+,0,3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tledbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_float (42.L) == 42.F);\n+  assert (long_double_to_float (-42.L) == -42.F);\n+}"}, {"sha": "ddfc668f0d6af9ea78ba97e9fc0505a389794d70", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-i16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i16.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static int16_t\n+long_double_to_i16 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcfxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_i16 (42.L) == 42);\n+  assert (long_double_to_i16 (-42.L) == -42);\n+}"}, {"sha": "975a5deff8f71aacf43ab20a5a141929a64ed56e", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-i32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i32.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static int32_t\n+long_double_to_i32 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcfxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_i32 (42.L) == 42);\n+  assert (long_double_to_i32 (-42.L) == -42);\n+}"}, {"sha": "6bd5079ae97db7c9c6fdf14827ce5eb970527b87", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-i64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i64.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static int64_t\n+long_double_to_i64 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tcgxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_i64 (42.L) == 42);\n+  assert (long_double_to_i64 (-42.L) == -42);\n+}"}, {"sha": "46e6d6bdf3c27545047c7f446eaaf9ce84cfb8d1", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-i8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-i8.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static int8_t\n+long_double_to_i8 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tcfxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_i8 (42.L) == 42);\n+  assert (long_double_to_i8 (-42.L) == -42);\n+}"}, {"sha": "0690f3df1e3b0dc7638519f3ee47ead5b71a09c2", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-u16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u16.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static uint16_t\n+long_double_to_u16 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tclfxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_u16 (42.L) == 42);\n+  /* Not (-42 & 0xffff) due to loss of precision.  */\n+  assert (long_double_to_u16 (-42.L) == 0);\n+}"}, {"sha": "aa0e318f2993ca93f2c7172db9bb1f8bb4732d61", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-u32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u32.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static uint32_t\n+long_double_to_u32 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tclfxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_u32 (42.L) == 42);\n+  /* Not (-42 & 0xffffffff) due to loss of precision.  */\n+  assert (long_double_to_u32 (-42.L) == 0);\n+}"}, {"sha": "e37b65ef6f8c2abd7c3cf0484e80c9a0763d6e01", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-u64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u64.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static uint64_t\n+long_double_to_u64 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tclgxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_u64 (42.L) == 42);\n+  /* Not (-42 & 0xffffffffffffffff) due to loss of precision.  */\n+  assert (long_double_to_u64 (-42.L) == 0);\n+}"}, {"sha": "bddbff8bf69e7507cebcb00cf174ff6985d2f40c", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-u8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-u8.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static uint8_t\n+long_double_to_u8 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tclfxbr\\t} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_u8 (42.L) == 42);\n+  /* Not (-42 & 0xff) due to loss of precision.  */\n+  assert (long_double_to_u8 (-42.L) == 0);\n+}"}, {"sha": "2ce9da33b8eb68567b12c398251d371f8a9008d2", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-vec-duplicate.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vec-duplicate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vec-duplicate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vec-duplicate.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -funroll-loops -march=z14 -mtune=z14\" } */\n+\n+long double a, b;\n+double *c;\n+long double *d;\n+\n+void\n+e ()\n+{\n+  while (d != &a)\n+    *d++ = b * *c++;\n+}"}, {"sha": "a564fc62d479d780db3cf721848c150db1fdbd5c", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wf.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wf.h?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,60 @@\n+#ifndef LONG_DOUBLE_WF_H\n+#define LONG_DOUBLE_WF_H 1\n+\n+#include <math.h>\n+\n+#define ADD(x, y, z) ((x) + (z))\n+#define DIV(x, y, z) ((x) / (z))\n+#define FABSL(x, y, z) (fabsl (y))\n+#define ISINFL(x, y, z) (isinfl (x) ? (y) : (z))\n+#define MUL(x, y, z) ((x) * (z))\n+#define MUL_ADD(x, y, z) ((x) * (y) + (z))\n+#define MUL_SUB(x, y, z) ((x) * (y) - (z))\n+#define NEG(x, y, z)                                                          \\\n+  ({                                                                          \\\n+    volatile long double r = -(y);                                            \\\n+    r;                                                                        \\\n+  })\n+#define NEG_MUL_ADD(x, y, z) NEG (0, MUL_ADD (x, y, z), 0)\n+#define NEG_MUL_SUB(x, y, z) NEG (0, MUL_SUB (x, y, z), 0)\n+#define QUIET_IFEQUAL(x, y, z) ((x) == (y) ? (z) : 0)\n+#define QUIET_IFGREATER(x, y, z) (__builtin_isgreater (x, y) ? (z) : 0)\n+#define QUIET_IFLESS(x, y, z) (__builtin_isless (x, y) ? (z) : 0)\n+#define QUIET_IFUNORDERED(x, y, z) (__builtin_isunordered (x, y) ? (z) : 0)\n+#define SIGNALING_IFEQUAL(x, y, z) (((x) >= (y) && (x) <= (y)) ? (z) : 0)\n+#define SIGNALING_IFGREATER(x, y, z) ((x) > (y) ? (z) : 0)\n+#define SIGNALING_IFLESS(x, y, z) ((x) < (y) ? (z) : 0)\n+#define ROUNDL(x, y, z) (roundl (y))\n+#define SQRTL(x, y, z) (sqrtl (y))\n+#define SUB(x, y, z) ((x) - (z))\n+\n+#define LONG_DOUBLE_WF(op)                                                    \\\n+  long double test (                                                          \\\n+      long double x0, long double x1, long double x2, long double x3,         \\\n+      long double x4, long double x5, long double x6, long double x7,         \\\n+      long double x8, long double x9, long double x10, long double x11,       \\\n+      long double x12, long double x13, long double x14, long double x15)     \\\n+  {                                                                           \\\n+    while (x15 < 1E+30)                                                       \\\n+      {                                                                       \\\n+\tx0 = op (x1, x2, x3);                                                 \\\n+\tx1 = op (x2, x3, x4) + 1;                                             \\\n+\tx2 = op (x3, x4, x5) + 2;                                             \\\n+\tx3 = op (x4, x5, x6) + 3;                                             \\\n+\tx4 = op (x5, x6, x7) + 4;                                             \\\n+\tx5 = op (x6, x7, x8) + 5;                                             \\\n+\tx6 = op (x7, x8, x9) + 6;                                             \\\n+\tx7 = op (x8, x9, x10) + 7;                                            \\\n+\tx8 = op (x9, x10, x11) + 8;                                           \\\n+\tx9 = op (x10, x11, x12) + 9;                                          \\\n+\tx10 = op (x11, x12, x13) + 10;                                        \\\n+\tx11 = op (x12, x13, x14) + 11;                                        \\\n+\tx12 = op (x13, x14, x15) + 12;                                        \\\n+\tx13 = op (x14, x15, x0) + 13;                                         \\\n+\tx14 = op (x15, x0, x1) + 14;                                          \\\n+\tx15 = op (x0, x1, x2) + 15;                                           \\\n+      }                                                                       \\\n+    return x15;                                                               \\\n+  }\n+\n+#endif"}, {"sha": "1b35c1c5dd52a574f675ffd41e3e1ad8a5c5bb31", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfaxb.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfaxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfaxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfaxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static long double\n+wfaxb (long double x, long double y, long double z)\n+{\n+  return x + y + z;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\twfaxb\\t} 2 } } */\n+\n+int\n+main (void)\n+{\n+  assert (wfaxb (1.11L, 2.22L, 3.33L) == 6.66L);\n+}"}, {"sha": "9ffff6ff36f9a583a34cd4c4c187b4daa1192307", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfcxb-0001.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-0001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-0001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-0001.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (QUIET_IFUNORDERED);\n+\n+/* { dg-final { scan-assembler {\\n\\twfcxb\\t} } } */\n+/* jo == brc 0b0001, ...  */\n+/* { dg-final { scan-assembler {\\n\\tjo\\t} } } */"}, {"sha": "3ade835895346600329491c73b49013c1cf64562", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfcxb-0111.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-0111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-0111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-0111.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (QUIET_IFEQUAL);\n+\n+/* { dg-final { scan-assembler {\\n\\twfcxb\\t} } } */\n+/* jne == brc 0b0111, ...  */\n+/* { dg-final { scan-assembler {\\n\\tjne\\t} } } */"}, {"sha": "a9c819de15d7d2ed732af697ae3c4ff19f9161e5", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfcxb-1011.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-1011.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-1011.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-1011.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (QUIET_IFLESS);\n+\n+/* { dg-final { scan-assembler {\\n\\twfcxb\\t} } } */\n+/* jnl == brc 0b1011, ...  */\n+/* { dg-final { scan-assembler {\\n\\tjnl\\t} } } */"}, {"sha": "47ea7c7c3b96a4bbc8fca2b0cb4dbfac28d6daf8", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfcxb-1101.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-1101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-1101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfcxb-1101.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (QUIET_IFGREATER);\n+\n+/* { dg-final { scan-assembler {\\n\\twfcxb\\t} } } */\n+/* jnh == brc 0b1101, ...  */\n+/* { dg-final { scan-assembler {\\n\\tjnh\\t} } } */"}, {"sha": "16b48938ebd89363a0ba90eab97b456b30e8ac1e", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfdxb.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfdxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfdxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfdxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static long double\n+wfdxb (long double x, long double y, long double z)\n+{\n+  return (x / y) / z;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\twfdxb\\t} 2 } } */\n+\n+int\n+main (void)\n+{\n+  assert (wfdxb (2.22L, 1.11L, 2.L) == 1.L);\n+}"}, {"sha": "69348bd4c0731a4d24b632c4dcdf23111d92407c", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfixb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfixb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfixb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfixb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (ROUNDL);\n+\n+/* { dg-final { scan-assembler {\\n\\twfixb\\t} } } */"}, {"sha": "0f7b2090871db214db73838f7249523fab335e55", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfkxb-0111.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-0111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-0111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-0111.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (SIGNALING_IFEQUAL);\n+\n+/* { dg-final { scan-assembler {\\n\\twfkxb\\t} } } */\n+/* jne == brc 0b0111, ...  */\n+/* { dg-final { scan-assembler {\\n\\tjne\\t} } } */"}, {"sha": "b76dbb043eafac99ab4351a794e12e5562814866", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfkxb-1011.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-1011.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-1011.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-1011.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (SIGNALING_IFLESS);\n+\n+/* { dg-final { scan-assembler {\\n\\twfkxb\\t} } } */\n+/* jnl == brc 0b1011, ...  */\n+/* { dg-final { scan-assembler {\\n\\tjnl\\t} } } */"}, {"sha": "61f0ec49c6d7b3b983d509ee08c952b89bf6ba43", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfkxb-1101.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-1101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-1101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfkxb-1101.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (SIGNALING_IFGREATER);\n+\n+/* { dg-final { scan-assembler {\\n\\twfkxb\\t} } } */\n+/* jnh == brc 0b1101, ...  */\n+/* { dg-final { scan-assembler {\\n\\tjnh\\t} } } */"}, {"sha": "ddcf97202ad32dd03940792a165752a0932e926d", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wflcxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wflcxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wflcxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wflcxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (NEG);\n+\n+/* { dg-final { scan-assembler {\\n\\twflcxb\\t} } } */"}, {"sha": "df9050566e585e81eac1112cb114e596e1bd4d90", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wflpxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wflpxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wflpxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wflpxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (FABSL);\n+\n+/* { dg-final { scan-assembler {\\n\\twflpxb\\t} } } */"}, {"sha": "0b2fdcc084d9c0ddd638ae3da79a65a17b14b835", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfmaxb-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-2.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch -mvx-long-double-fma\" } */\n+\n+int a, c, d, f, k, l, m;\n+long double b, e, g, h, i;\n+double j;\n+\n+void\n+n (void)\n+{\n+  while (m)\n+    {\n+      a = b * d;\n+      b = c;\n+      c = d * e + 2;\n+      e = f + g + 4;\n+      f = h + 6;\n+      g = h * 0 + i + 7;\n+      h = i + 9;\n+      i = j * k + 0 + 10;\n+      j = l;\n+      m = a * b;\n+    }\n+}"}, {"sha": "9ef49c1311efff4d298be090aba8fc6bb2a79043", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfmaxb-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-3.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch -mvx-long-double-fma\" } */\n+\n+long double a, c, d;\n+int b;\n+void\n+e (void)\n+{\n+  while (d)\n+    {\n+      a = 0 * c + 0;\n+      d = b;\n+    }\n+}"}, {"sha": "59bc80a0cfe2b25d8db3d0ccb4a70952787c3343", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfmaxb-disabled.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-disabled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-disabled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb-disabled.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (MUL_ADD);\n+\n+/* { dg-final { scan-assembler {\\n\\twfmxb\\t} } } */\n+/* { dg-final { scan-assembler {\\n\\twfaxb\\t} } } */"}, {"sha": "319a02fc84837a0905eeff479315274bbc8f2449", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfmaxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmaxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch -mvx-long-double-fma\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (MUL_ADD);\n+\n+/* { dg-final { scan-assembler {\\n\\twfmaxb\\t} } } */"}, {"sha": "bb5c0f2cce05496fba1ce60b0365efcf29e6150c", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfmsxb-disabled.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmsxb-disabled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmsxb-disabled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmsxb-disabled.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (MUL_SUB);\n+\n+/* { dg-final { scan-assembler {\\n\\twfmxb\\t} } } */\n+/* { dg-final { scan-assembler {\\n\\twfsxb\\t} } } */"}, {"sha": "c14f6733533acfe952f50ce0066a0b205a1cf009", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfmsxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmsxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmsxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmsxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch -mvx-long-double-fma\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (MUL_SUB);\n+\n+/* { dg-final { scan-assembler {\\n\\twfmsxb\\t} } } */"}, {"sha": "6ab1e68d297bd9f8d89320f9eabb68bf3fa0c3f7", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfmxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfmxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (MUL);\n+\n+/* { dg-final { scan-assembler {\\n\\twfmxb\\t} } } */"}, {"sha": "8c5298e4d9c201d3ecab24998511e8cf6430a2f5", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfnmaxb-disabled.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmaxb-disabled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmaxb-disabled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmaxb-disabled.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (NEG_MUL_ADD);\n+\n+/* { dg-final { scan-assembler {\\n\\twfmxb\\t} } } */\n+/* { dg-final { scan-assembler {\\n\\twfaxb\\t} } } */\n+/* { dg-final { scan-assembler {\\n\\twflcxb\\t} } } */"}, {"sha": "9f0da134ed692b93e8fa1eff6c088fb178bb70ea", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfnmaxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmaxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmaxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmaxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch -mvx-long-double-fma\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (NEG_MUL_ADD);\n+\n+/* { dg-final { scan-assembler {\\n\\twfnmaxb\\t} } } */"}, {"sha": "39e4f6071ad9d305f11693ab4b9a6a166c77761a", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfnmsxb-disabled.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmsxb-disabled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmsxb-disabled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmsxb-disabled.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (NEG_MUL_SUB);\n+\n+/* { dg-final { scan-assembler {\\n\\twfmxb\\t} } } */\n+/* { dg-final { scan-assembler {\\n\\twfsxb\\t} } } */\n+/* { dg-final { scan-assembler {\\n\\twflcxb\\t} } } */"}, {"sha": "698e277780a7634c0b03700a9cb927d654887eec", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfnmsxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmsxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmsxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfnmsxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch -mvx-long-double-fma\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (NEG_MUL_SUB);\n+\n+/* { dg-final { scan-assembler {\\n\\twfnmsxb\\t} } } */"}, {"sha": "09f91285aaf16c416314c7be9f1e67a061fc17a8", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfsqxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsqxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsqxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsqxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (SQRTL);\n+\n+/* { dg-final { scan-assembler {\\n\\twfsqxb\\t} } } */"}, {"sha": "20960d05e0c284b99218560cb4f225f562a2737c", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfsxb-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsxb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsxb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsxb-1.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include <assert.h>\n+\n+typedef float tf __attribute__ ((mode (TF)));\n+static tf x;\n+static tf y;\n+\n+__attribute__ ((noipa)) static tf\n+sub (void)\n+{\n+  return x - y;\n+}\n+\n+int\n+main (void)\n+{\n+  x = 1.5L;\n+  y = 2.5L;\n+  assert (sub () == -1.0L);\n+}"}, {"sha": "1c430ee32321dd87732a5bbef93aa6cfe0eac2a5", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wfsxb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsxb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsxb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wfsxb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (SUB);\n+\n+/* { dg-final { scan-assembler {\\n\\twfsxb\\t} } } */"}, {"sha": "224995ff77e24673ff87965724a20e4b19764169", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wftcixb-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wftcixb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wftcixb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wftcixb-1.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -march=z14 -mzarch\" } */\n+\n+int a, b;\n+\n+void\n+c (void)\n+{\n+  long double d;\n+  a = d;\n+  if (__builtin_isinf (d))\n+    b = 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\n\\twftcixb\\t} } } */"}, {"sha": "c2658b88a1823fc412e8425eb334f17bed6e82e4", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-wftcixb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wftcixb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba3d03da6f44d7dac2dc58c7663567ec345d5f4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wftcixb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-wftcixb.c?ref=cba3d03da6f44d7dac2dc58c7663567ec345d5f4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+#include \"long-double-wf.h\"\n+\n+LONG_DOUBLE_WF (ISINFL);\n+\n+/* { dg-final { scan-assembler {\\n\\twftcixb\\t} } } */"}]}