{"sha": "4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlMTk0ZWMyYmEwMGY3ZDE5Y2JjMjY0OWI4OWNlZWFhNzUxYTRjNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-31T06:15:53Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-31T06:15:53Z"}, "message": "(dbxout_parms): Do something for structures\npassed by invisible reference, and living in memory.\n\nFrom-SVN: r1727", "tree": {"sha": "d615cb42cc69fcbdce2236443c9692accd4b3828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d615cb42cc69fcbdce2236443c9692accd4b3828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4/comments", "author": null, "committer": null, "parents": [{"sha": "27f427f88810b4026ab24cd438d5eecb6d7ec007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f427f88810b4026ab24cd438d5eecb6d7ec007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f427f88810b4026ab24cd438d5eecb6d7ec007"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "d5d284249e3a85e6bd7dcefba460ea36083477ae", "filename": "gcc/dbxout.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4ee194ec2ba00f7d19cbc2649b89ceeaa751a4c4", "patch": "@@ -1920,9 +1920,9 @@ dbxout_parms (parms)\n \t    dbxout_finish_symbol (parms);\n \t  }\n \telse if (GET_CODE (DECL_RTL (parms)) == MEM\n-\t\t && GET_CODE (XEXP (DECL_RTL (parms), 0)) == REG\n-\t\t && rtx_equal_p (XEXP (DECL_RTL (parms), 0),\n-\t\t\t\t DECL_INCOMING_RTL (parms)))\n+\t\t && GET_CODE (XEXP (DECL_RTL (parms), 0)) == REG)\n+/*\t\t && rtx_equal_p (XEXP (DECL_RTL (parms), 0),\n+\t\t\t\t DECL_INCOMING_RTL (parms))) */\n \t  {\n \t    /* Parm was passed via invisible reference.\n \t       That is, its address was passed in a register.\n@@ -2084,6 +2084,40 @@ dbxout_reg_parms (parms)\n \t    dbxout_type (TREE_TYPE (parms), 0, 0);\n \t    dbxout_finish_symbol (parms);\n \t  }\n+#if 0\n+\telse if (GET_CODE (DECL_RTL (parms)) == MEM\n+\t\t && GET_CODE (XEXP (DECL_RTL (parms), 0)) == REG)\n+\t  {\n+\t    /* Parm was passed via invisible reference.\n+\t       That is, its address was passed in a register.\n+\t       Output it as if it lived in that register.\n+\t       The debugger will know from the type\n+\t       that it was actually passed by invisible reference.  */\n+\n+\t    current_sym_code = N_RSYM;\n+\n+\t    /* DECL_RTL looks like (MEM (REG...).  Get the register number.  */\n+\t    current_sym_value = REGNO (XEXP (DECL_RTL (parms), 0));\n+\t    current_sym_addr = 0;\n+\n+\t    FORCE_TEXT;\n+\t    if (DECL_NAME (parms))\n+\t      {\n+\t\tcurrent_sym_nchars = 2 + strlen (IDENTIFIER_POINTER (DECL_NAME (parms)));\n+\n+\t\tfprintf (asmfile, \"%s \\\"%s:r\", ASM_STABS_OP,\n+\t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)));\n+\t      }\n+\t    else\n+\t      {\n+\t\tcurrent_sym_nchars = 8;\n+\t\tfprintf (asmfile, \"%s \\\"(anon):r\", ASM_STABS_OP);\n+\t      }\n+\n+\t    dbxout_type (TREE_TYPE (parms), 0, 0);\n+\t    dbxout_finish_symbol (parms);\n+\t  }\n+#endif\n       }\n }\n \f"}]}