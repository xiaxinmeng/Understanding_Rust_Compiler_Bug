{"sha": "1c8e9bed9b9d46d479b83ae05b334543f66961fb", "node_id": "C_kwDOANBUbNoAKDFjOGU5YmVkOWI5ZDQ2ZDQ3OWI4M2FlMDViMzM0NTQzZjY2OTYxZmI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-04T08:07:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-04T08:07:36Z"}, "message": "c++: Don't emit deprecated warnings or unavailable errors on lambda declarations\n\nOn the following testcase, we emit deprecated warnings or unavailable errors\neven on merge declarations of those lambdas (the dg-bogus directives), while\nIMHO we should emit them only when something actually calls those lambdas.\n\nThe following patch temporarily disables that diagnostics during\nmaybe_add_lambda_conv_op.\n\nPR2173R1 also says that ambiguity between attribute-specifier-seq at the\nend of requires-clause and attribute-specifier-seq from lambda-expression\nshould be resolved to attribute-specifier-seq for the latter.  Do we need\nto do anything about that?  I mean, can a valid requires-clause end with\nan attribute-specifier-seq?  Say operator int [[]] is valid primary\nexpression, but requires operator int [[]] isn't valid, nor is\nrequires operator int, no?\n\n2022-05-04  Jakub Jelinek  <jakub@redhat.com>\n\n\t* lambda.cc: Include decl.h.\n\t(maybe_add_lambda_conv_op): Temporarily override deprecated_state to\n\tUNAVAILABLE_DEPRECATED_SUPPRESS.\n\n\t* g++.dg/cpp23/lambda-attr1.C: New test.\n\t* g++.dg/cpp23/lambda-attr2.C: New test.", "tree": {"sha": "f45aed122c2a325abe074685a84c1a80ffb21159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f45aed122c2a325abe074685a84c1a80ffb21159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c8e9bed9b9d46d479b83ae05b334543f66961fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8e9bed9b9d46d479b83ae05b334543f66961fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8e9bed9b9d46d479b83ae05b334543f66961fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8e9bed9b9d46d479b83ae05b334543f66961fb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3771486daa1e904ceae6f3e135b28e58af33849f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3771486daa1e904ceae6f3e135b28e58af33849f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3771486daa1e904ceae6f3e135b28e58af33849f"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "afac53b6d7cab240de3213a7d1833a0762e3f6dc", "filename": "gcc/cp/lambda.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8e9bed9b9d46d479b83ae05b334543f66961fb/gcc%2Fcp%2Flambda.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8e9bed9b9d46d479b83ae05b334543f66961fb/gcc%2Fcp%2Flambda.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.cc?ref=1c8e9bed9b9d46d479b83ae05b334543f66961fb", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"gimplify.h\"\n #include \"target.h\"\n+#include \"decl.h\"\n \n /* Constructor for a lambda expression.  */\n \n@@ -1192,9 +1193,14 @@ maybe_add_lambda_conv_op (tree type)\n \t}\n     }\n   else\n-    call = build_call_a (callop,\n-\t\t\t direct_argvec->length (),\n-\t\t\t direct_argvec->address ());\n+    {\n+      /* Don't warn on deprecated or unavailable lambda declarations, unless\n+\t the lambda is actually called.  */\n+      auto du = make_temp_override (deprecated_state,\n+\t\t\t\t    UNAVAILABLE_DEPRECATED_SUPPRESS);\n+      call = build_call_a (callop, direct_argvec->length (),\n+\t\t\t   direct_argvec->address ());\n+    }\n \n   CALL_FROM_THUNK_P (call) = 1;\n   SET_EXPR_LOCATION (call, UNKNOWN_LOCATION);"}, {"sha": "a653c732fca44972e9a48d8d5bee0c0d1d2061d7", "filename": "gcc/testsuite/g++.dg/cpp23/lambda-attr1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8e9bed9b9d46d479b83ae05b334543f66961fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-attr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8e9bed9b9d46d479b83ae05b334543f66961fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-attr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-attr1.C?ref=1c8e9bed9b9d46d479b83ae05b334543f66961fb", "patch": "@@ -0,0 +1,37 @@\n+// P2173R1 - Attributes on Lambda-Expressions\n+// { dg-do compile { target c++11 } }\n+\n+void\n+foo (bool x, bool y)\n+{\n+  auto a = [][[noreturn]] () {};\t// { dg-warning \"'noreturn' function does return\" }\n+  if (x)\n+    a ();\n+  auto b = [][[noreturn]] {};\t\t// { dg-warning \"'noreturn' function does return\" }\n+  if (y)\n+    b ();\n+  auto c = [] [[ deprecated ]] () {};\t// { dg-bogus \"is deprecated\" }\n+  c ();\t\t\t\t\t// { dg-warning \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(\\\\\\)>' is deprecated\" }\n+  auto d = [][[deprecated]] {};\t\t// { dg-bogus \"is deprecated\" }\n+  d ();\t\t\t\t\t// { dg-warning \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(\\\\\\)>' is deprecated\" }\n+#if __cpp_generic_lambdas >= 201304\n+  auto e = [] [[deprecated]] (auto x) {};\t// { dg-bogus \"is deprecated\" }\n+  e (0.0);\t\t\t\t// { dg-warning \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(auto:1\\\\\\)>\\[^\\n\\r]*' is deprecated\" \"\" { target c++14 } }\n+#endif\n+#if __cpp_generic_lambdas >= 201707\n+  auto f = [] <typename T> [[deprecated]] (T) {};\t// { dg-bogus \"is deprecated\" }\n+  f (1);\t\t\t\t// { dg-warning \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(T\\\\\\)>\\[^\\n\\r]*' is deprecated\" \"\" { target c++20 } }\n+#endif\n+  auto g = [][[nodiscard]](int) { return 1; };\n+  g (1);\t\t\t\t// { dg-warning \"ignoring return value of 'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(int\\\\\\)>', declared with attribute 'nodiscard'\" }\n+  auto h = [] [[nodiscard]] { return 0; };\n+  h ();\t\t\t\t\t// { dg-warning \"ignoring return value of 'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(\\\\\\)>', declared with attribute 'nodiscard'\" }\n+  auto i = [] [[ gnu::unavailable ]] () {};\n+  auto j = [][[gnu::unavailable]] {};\n+#if __cpp_generic_lambdas >= 201304\n+  auto k = [] [[gnu::unavailable]] (auto x) {};\t// { dg-bogus \"is unavailable\" }\n+#endif\n+#if __cpp_generic_lambdas >= 201707\n+  auto l = [] <typename T> [[gnu::unavailable]] (T) {};\t// { dg-bogus \"is unavailable\" }\n+#endif\n+}"}, {"sha": "0392b179b86512bad930d2d54487990686407573", "filename": "gcc/testsuite/g++.dg/cpp23/lambda-attr2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8e9bed9b9d46d479b83ae05b334543f66961fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-attr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8e9bed9b9d46d479b83ae05b334543f66961fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-attr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-attr2.C?ref=1c8e9bed9b9d46d479b83ae05b334543f66961fb", "patch": "@@ -0,0 +1,19 @@\n+// P2173R1 - Attributes on Lambda-Expressions\n+// { dg-do compile { target c++11 } }\n+\n+void\n+foo (bool x, bool y)\n+{\n+  auto i = [] [[ gnu::unavailable ]] () {};\n+  i ();\t\t\t// { dg-error \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(\\\\\\)>' is unavailable\" }\n+  auto j = [][[gnu::unavailable]] {};\n+  j ();\t\t\t// { dg-error \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(\\\\\\)>' is unavailable\" }\n+#if __cpp_generic_lambdas >= 201304\n+  auto k = [] [[gnu::unavailable]] (auto x) {};\t// { dg-bogus \"is unavailable\" }\n+  k (0.0);\t\t// { dg-error \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(auto:1\\\\\\)>\\[^\\n\\r]*' is unavailable\" \"\" { target c++14 } }\n+#endif\n+#if __cpp_generic_lambdas >= 201707\n+  auto l = [] <typename T> [[gnu::unavailable]] (T) {};\t// { dg-bogus \"is unavailable\" }\n+  l (1);\t\t// { dg-error \"'foo\\\\\\(bool, bool\\\\\\)::<lambda\\\\\\(T\\\\\\)>\\[^\\n\\r]*' is unavailable\" \"\" { target c++20 } }\n+#endif\n+}"}]}