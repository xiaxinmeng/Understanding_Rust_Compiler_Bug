{"sha": "650cfcab96c03bae93fe5eceafce792e86a661e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwY2ZjYWI5NmMwM2JhZTkzZmU1ZWNlYWZjZTc5MmU4NmE2NjFlMw==", "commit": {"author": {"name": "Neil Vachharajani", "email": "nvachhar@google.com", "date": "2010-05-04T23:45:58Z"}, "committer": {"name": "Neil Vachharajani", "email": "nvachhar@gcc.gnu.org", "date": "2010-05-04T23:45:58Z"}, "message": "Sanitize the behavior of -Wcoverage-mismatch.\n\n2010-05-04  Neil Vachharajani <nvachhar@google.com>\n\n        * doc/invoke.texi (-Wcoverage-mismatch): Updated documentation as\n        per new semantics.\n        * opts.c (decode_options): Enable -Werror=coverage-mismatch.\n        * coverage.c (get_coverage_counts): Always emit a warning.  Adjust\n        conditions for printing notes.\n        * common.opt (-Wcoverage-mismatch): Allow negative, default to\n        true, update documentation.\n        * Makefile.in (coverage.o): Add dependence on DIAGNOSTIC_H and intl.h.\n        * testsuite/gcc.dg/tree-prof/wcoverage-mismatch.c: Adjusted.\n\nFrom-SVN: r159050", "tree": {"sha": "ea706642f18ee85392a51bf61e49a74bfbdef8bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea706642f18ee85392a51bf61e49a74bfbdef8bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650cfcab96c03bae93fe5eceafce792e86a661e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650cfcab96c03bae93fe5eceafce792e86a661e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650cfcab96c03bae93fe5eceafce792e86a661e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650cfcab96c03bae93fe5eceafce792e86a661e3/comments", "author": null, "committer": null, "parents": [{"sha": "55a46075763ff282cd457c3dc5e00483dae32230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a46075763ff282cd457c3dc5e00483dae32230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a46075763ff282cd457c3dc5e00483dae32230"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "5eed15dfe67d4dbfcd424e385a96c05e4f6c31bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=650cfcab96c03bae93fe5eceafce792e86a661e3", "patch": "@@ -1,3 +1,15 @@\n+2010-05-04  Neil Vachharajani <nvachhar@google.com>\n+\n+\t* doc/invoke.texi (-Wcoverage-mismatch): Updated documentation as\n+\tper new semantics.\n+\t* opts.c (decode_options): Enable -Werror=coverage-mismatch.\n+\t* coverage.c (get_coverage_counts): Always emit a warning.  Adjust\n+\tconditions for printing notes.\n+\t* common.opt (-Wcoverage-mismatch): Allow negative, default to\n+\ttrue, update documentation.\n+\t* Makefile.in (coverage.o): Add dependence on DIAGNOSTIC_H and intl.h.\n+\t* testsuite/gcc.dg/tree-prof/wcoverage-mismatch.c: Adjusted.\n+\n 2010-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/43981"}, {"sha": "7c42b7ca8502b57a3ef823c41a3bcfb0a4e1a4cd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=650cfcab96c03bae93fe5eceafce792e86a661e3", "patch": "@@ -2947,7 +2947,8 @@ ipa-struct-reorg.o: ipa-struct-reorg.c ipa-struct-reorg.h $(CONFIG_H) $(SYSTEM_H\n coverage.o : coverage.c $(GCOV_IO_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) \\\n    $(FUNCTION_H) $(TOPLEV_H) $(GGC_H) langhooks.h $(COVERAGE_H) gt-coverage.h \\\n-   $(HASHTAB_H) tree-iterator.h $(CGRAPH_H) $(TREE_PASS_H) gcov-io.c $(TM_P_H)\n+   $(HASHTAB_H) tree-iterator.h $(CGRAPH_H) $(TREE_PASS_H) gcov-io.c $(TM_P_H) \\\n+   $(DIAGNOSTIC_H) intl.h\n cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h $(RECOG_H) \\\n    $(EMIT_RTL_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(TREE_PASS_H) \\"}, {"sha": "806bd1f282d7db90cd4e8266296eeb6b8c91c8c7", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=650cfcab96c03bae93fe5eceafce792e86a661e3", "patch": "@@ -249,8 +249,8 @@ Common Var(warn_unused_variable) Init(-1) Warning\n Warn when a variable is unused\n \n Wcoverage-mismatch\n-Common RejectNegative Var(warn_coverage_mismatch) Warning\n-Warn instead of error in case profiles in -fprofile-use do not match\n+Common Var(warn_coverage_mismatch) Init(1) Warning\n+Warn in case profiles in -fprofile-use do not match\n \n aux-info\n Common Separate"}, {"sha": "addfac90c2142e9ee0a18a40db4fb1690b7b08c1", "filename": "gcc/coverage.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=650cfcab96c03bae93fe5eceafce792e86a661e3", "patch": "@@ -46,6 +46,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"cgraph.h\"\n #include \"tree-pass.h\"\n+#include \"diagnostic.h\"\n+#include \"intl.h\"\n \n #include \"gcov-io.c\"\n \n@@ -357,34 +359,33 @@ get_coverage_counts (unsigned counter, unsigned expected,\n       || entry->summary.num != expected)\n     {\n       static int warned = 0;\n+      bool warning_printed = false;\n       tree id = DECL_ASSEMBLER_NAME (current_function_decl);\n \n-      if (warn_coverage_mismatch)\n-\twarning (OPT_Wcoverage_mismatch, \"coverage mismatch for function \"\n-\t\t \"%qE while reading counter %qs\", id, ctr_names[counter]);\n-      else\n-\terror (\"coverage mismatch for function %qE while reading counter %qs\",\n-\t       id, ctr_names[counter]);\n-\n-      if (!inhibit_warnings)\n+      warning_printed = \n+\twarning_at (input_location, OPT_Wcoverage_mismatch, \n+\t\t    \"coverage mismatch for function \"\n+\t\t    \"%qE while reading counter %qs\", id, ctr_names[counter]);\n+      if (warning_printed)\n \t{\n \t  if (entry->checksum != checksum)\n-\t    inform (input_location, \"checksum is %x instead of %x\", entry->checksum, checksum);\n+\t    inform (input_location, \"checksum is %x instead of %x\",\n+\t\t    entry->checksum, checksum);\n \t  else\n \t    inform (input_location, \"number of counters is %d instead of %d\",\n \t\t    entry->summary.num, expected);\n-\t}\n-\n-      if (warn_coverage_mismatch\n-\t  && !inhibit_warnings\n-\t  && !warned++)\n-\t{\n-\t  inform (input_location, \"coverage mismatch ignored due to -Wcoverage-mismatch\");\n-\t  inform (input_location, flag_guess_branch_prob\n-\t\t  ? \"execution counts estimated\"\n-\t\t  : \"execution counts assumed to be zero\");\n-\t  if (!flag_guess_branch_prob)\n-\t    inform (input_location, \"this can result in poorly optimized code\");\n+\t  \n+\t  if (!(errorcount || sorrycount)\n+\t      && !warned++)\n+\t    {\n+\t      inform (input_location, \"coverage mismatch ignored\");\n+\t      inform (input_location, flag_guess_branch_prob\n+\t\t      ? G_(\"execution counts estimated\")\n+\t\t      : G_(\"execution counts assumed to be zero\"));\n+\t      if (!flag_guess_branch_prob)\n+\t\tinform (input_location,\n+\t\t\t\"this can result in poorly optimized code\");\n+\t    }\n \t}\n \n       return NULL;"}, {"sha": "237f894ab824c1e15c7e3bbc4acb5a988fbd47bb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=650cfcab96c03bae93fe5eceafce792e86a661e3", "patch": "@@ -2755,12 +2755,13 @@ Warn if feedback profiles do not match when using the\n If a source file was changed between @option{-fprofile-gen} and\n @option{-fprofile-use}, the files with the profile feedback can fail\n to match the source file and GCC can not use the profile feedback\n-information.  By default, GCC emits an error message in this case.\n-The option @option{-Wcoverage-mismatch} emits a warning instead of an\n-error.  GCC does not use appropriate feedback profiles, so using this\n-option can result in poorly optimized code.  This option is useful\n-only in the case of very minor changes such as bug fixes to an\n-existing code-base.\n+information.  By default, this warning is enabled and is treated as an\n+error.  @option{-Wno-coverage-mismatch} can be used to disable the\n+warning or @option{-Wno-error=coverage-mismatch} can be used to\n+disable the error.  Disable the error for this warning can result in\n+poorly optimized code, so disabling the error is useful only in the\n+case of very minor changes such as bug fixes to an existing code-base.\n+Completely disabling the warning is not recommended.\n \n @end table\n "}, {"sha": "fd8a5044323d1ec33c2c7f3d489ef5897ed40c44", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=650cfcab96c03bae93fe5eceafce792e86a661e3", "patch": "@@ -946,6 +946,9 @@ decode_options (unsigned int argc, const char **argv)\n   else\n     set_param_value (\"min-crossjump-insns\", initial_min_crossjump_insns);\n \n+  /* Enable -Werror=coverage-mismatch by default */\n+  enable_warning_as_error(\"coverage-mismatch\", 1, lang_mask);\n+\n   if (first_time_p)\n     {\n       /* Initialize whether `char' is signed.  */"}, {"sha": "e4231057f324df18e6c59633e1869dcd49fca42d", "filename": "gcc/testsuite/gcc.dg/tree-prof/wcoverage-mismatch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fwcoverage-mismatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650cfcab96c03bae93fe5eceafce792e86a661e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fwcoverage-mismatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fwcoverage-mismatch.c?ref=650cfcab96c03bae93fe5eceafce792e86a661e3", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -Wcoverage-mismatch -w\" } */\n+/* { dg-options \"-O2 -Wno-coverage-mismatch\" } */\n \n int __attribute__((noinline)) bar (void)\n {"}]}