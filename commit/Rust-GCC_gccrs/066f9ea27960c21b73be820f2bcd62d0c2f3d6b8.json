{"sha": "066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2ZjllYTI3OTYwYzIxYjczYmU4MjBmMmJjZDYyZDBjMmYzZDZiOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T11:17:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T11:17:23Z"}, "message": "Add __gnu_test::NullablePointer utility to testsuite\n\n\t* testsuite/20_util/allocator_traits/members/allocate_hint_nonpod.cc:\n\tUse operator-> to access raw pointer member.\n\t* testsuite/23_containers/vector/59829.cc: Likewise.\n\t* testsuite/23_containers/vector/bool/80893.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Use NullablePointer.\n\t* testsuite/util/testsuite_allocator.h (NullablePointer): New utility\n\tfor tests.\n\t(PointerBase, PointerBase_void): Derive from NullablePointer and use\n\tits constructors and equality operators. Change converting\n\tconstructors to use operator-> to access private member of the other\n\tpointer type.\n\t(PointerBase_void::operator->()): Add, for access to private member.\n\t(operator-(PointerBase, PointerBase)): Change to hidden friend.\n\t(operator==(PointerBase, PointerBase)): Remove.\n\t(operator!=(PointerBase, PointerBase)): Remove.\n\nFrom-SVN: r271160", "tree": {"sha": "9f674a88bead34cd63d66f7cec0486bfe3f6a4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f674a88bead34cd63d66f7cec0486bfe3f6a4ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25f488d603a6bd7570c1ffdfd9572e4b8a645de"}], "stats": {"total": 167, "additions": 111, "deletions": 56}, "files": [{"sha": "6578a337b9e2e6503fe86bda0f593546fe89ac92", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "patch": "@@ -1,5 +1,21 @@\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/20_util/allocator_traits/members/allocate_hint_nonpod.cc:\n+\tUse operator-> to access raw pointer member.\n+\t* testsuite/23_containers/vector/59829.cc: Likewise.\n+\t* testsuite/23_containers/vector/bool/80893.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Use NullablePointer.\n+\t* testsuite/util/testsuite_allocator.h (NullablePointer): New utility\n+\tfor tests.\n+\t(PointerBase, PointerBase_void): Derive from NullablePointer and use\n+\tits constructors and equality operators. Change converting\n+\tconstructors to use operator-> to access private member of the other\n+\tpointer type.\n+\t(PointerBase_void::operator->()): Add, for access to private member.\n+\t(operator-(PointerBase, PointerBase)): Change to hidden friend.\n+\t(operator==(PointerBase, PointerBase)): Remove.\n+\t(operator!=(PointerBase, PointerBase)): Remove.\n+\n \t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.__init__): Do\n \tnot assume field called _M_head_impl is the first tuple element.\n \t* testsuite/libstdc++-prettyprinters/compat.cc: Make tuple"}, {"sha": "f9193e83e94a912b58540f617b25e35be6fee237", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/members/allocate_hint_nonpod.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fallocate_hint_nonpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fallocate_hint_nonpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fallocate_hint_nonpod.cc?ref=066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "patch": "@@ -45,7 +45,7 @@ struct Alloc\n   { return pointer(std::allocator<T>().allocate(n)); }\n \n   void deallocate(pointer p, std::size_t n)\n-  { std::allocator<T>().deallocate(p.value, n); }\n+  { std::allocator<T>().deallocate(p.operator->(), n); }\n };\n \n template<typename T>"}, {"sha": "892b9055eb40b4499dbb221df56876c67435b126", "filename": "libstdc++-v3/testsuite/23_containers/vector/59829.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F59829.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F59829.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F59829.cc?ref=066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "patch": "@@ -51,7 +51,7 @@ struct Alloc\n   { return pointer(std::allocator<T>().allocate(n)); }\n \n   void deallocate(pointer p, std::size_t n)\n-  { std::allocator<T>().deallocate(p.value, n); }\n+  { std::allocator<T>().deallocate(p.operator->(), n); }\n };\n \n template<typename T>"}, {"sha": "08b15c8d2dad11f56b8337c31408c6b4092cbb59", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/80893.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F80893.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F80893.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F80893.cc?ref=066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "patch": "@@ -59,7 +59,7 @@ struct Alloc\n   void deallocate(pointer p, std::size_t n)\n   {\n     if (n)\n-      std::allocator<T>().deallocate(p.value, n);\n+      std::allocator<T>().deallocate(p.operator->(), n);\n   }\n };\n "}, {"sha": "c87c8035c458f8784cb9f8050e08fe1c31cbd44f", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "patch": "@@ -24,6 +24,7 @@\n #include <string>\n #include <memory>\n #include <iostream>\n+#include \"../util/testsuite_allocator.h\" // NullablePointer\n \n typedef std::tuple<int, int> ExTuple;\n \n@@ -59,21 +60,6 @@ struct datum\n \n std::unique_ptr<datum> global;\n \n-struct Deleter\n-{\n-  // Deleter is not an empty class:\n-  int deleter_member = -1;\n-  // But pointer is an empty class:\n-  struct pointer\n-  {\n-    pointer(const void* = nullptr) { }\n-    explicit operator bool() const noexcept { return false; }\n-    friend bool operator==(pointer, pointer) noexcept { return true; }\n-    friend bool operator!=(pointer, pointer) noexcept { return false; }\n-  };\n-  void operator()(pointer) const noexcept { }\n-};\n-\n int\n main()\n {\n@@ -151,6 +137,15 @@ main()\n   std::unique_ptr<data>& rarrptr = arrptr;\n // { dg-final { regexp-test rarrptr {std::unique_ptr.datum \\[\\]. = {get\\(\\) = 0x.*}} } }\n \n+  struct Deleter\n+  {\n+    int deleter_member = -1;\n+    using pointer = __gnu_test::NullablePointer<void>;\n+    void operator()(pointer) const noexcept { }\n+  };\n+  static_assert( !std::is_empty<Deleter>(), \"Deleter is not empty\" );\n+  static_assert( std::is_empty<Deleter::pointer>(), \"but pointer is empty\" );\n+\n   std::unique_ptr<int, Deleter> empty_ptr;\n // { dg-final { note-test empty_ptr {std::unique_ptr<int> = {get() = {<No data fields>}}} } }\n   std::unique_ptr<int, Deleter>& rempty_ptr = empty_ptr;"}, {"sha": "428c0823395fbd361c11b4fbba63d4d5736c0810", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 82, "deletions": 38, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f9ea27960c21b73be820f2bcd62d0c2f3d6b8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=066f9ea27960c21b73be820f2bcd62d0c2f3d6b8", "patch": "@@ -589,9 +589,54 @@ namespace __gnu_test\n       { std::allocator<Tp>::deallocate(std::addressof(*p), n); }\n     };\n \n+  // A class type meeting *only* the Cpp17NullablePointer requirements.\n+  // Can be used as a base class for fancy pointers (like PointerBase, below)\n+  // or to wrap a built-in pointer type to remove operations not required\n+  // by the Cpp17NullablePointer requirements (dereference, increment etc.)\n+  template<typename Ptr>\n+    struct NullablePointer\n+    {\n+      // N.B. default constructor does not initialize value\n+      NullablePointer() = default;\n+      NullablePointer(std::nullptr_t) noexcept : value() { }\n+\n+      explicit operator bool() const noexcept { return value == nullptr; }\n+\n+      friend inline bool\n+      operator==(NullablePointer lhs, NullablePointer rhs) noexcept\n+      { return lhs.value == rhs.value; }\n+\n+      friend inline bool\n+      operator!=(NullablePointer lhs, NullablePointer rhs) noexcept\n+      { return lhs.value != rhs.value; }\n+\n+    protected:\n+      explicit NullablePointer(Ptr p) noexcept : value(p) { }\n+      Ptr value;\n+    };\n+\n+  // NullablePointer<void> is an empty type that models Cpp17NullablePointer.\n+  template<>\n+    struct NullablePointer<void>\n+    {\n+      NullablePointer() = default;\n+      NullablePointer(std::nullptr_t) noexcept { }\n+      explicit NullablePointer(const volatile void*) noexcept { }\n+\n+      explicit operator bool() const noexcept { return false; }\n+\n+      friend inline bool\n+      operator==(NullablePointer, NullablePointer) noexcept\n+      { return true; }\n+\n+      friend inline bool\n+      operator!=(NullablePointer, NullablePointer) noexcept\n+      { return false; }\n+    };\n+\n   // Utility for use as CRTP base class of custom pointer types\n   template<typename Derived, typename T>\n-    struct PointerBase\n+    struct PointerBase : NullablePointer<T*>\n     {\n       typedef T element_type;\n \n@@ -602,29 +647,38 @@ namespace __gnu_test\n       typedef Derived pointer;\n       typedef T& reference;\n \n-      T* value;\n+      using NullablePointer<T*>::NullablePointer;\n \n-      explicit PointerBase(T* p = nullptr) : value(p) { }\n-\n-      PointerBase(std::nullptr_t) : value(nullptr) { }\n+      // Public (but explicit) constructor from raw pointer:\n+      explicit PointerBase(T* p) noexcept : NullablePointer<T*>(p) { }\n \n       template<typename D, typename U,\n \t       typename = decltype(static_cast<T*>(std::declval<U*>()))>\n-\tPointerBase(const PointerBase<D, U>& p) : value(p.value) { }\n+\tPointerBase(const PointerBase<D, U>& p)\n+\t: NullablePointer<T*>(p.operator->()) { }\n+\n+      T& operator*() const { return *this->value; }\n+      T* operator->() const { return this->value; }\n+      T& operator[](difference_type n) const { return this->value[n]; }\n \n-      T& operator*() const { return *value; }\n-      T* operator->() const { return value; }\n-      T& operator[](difference_type n) const { return value[n]; }\n+      Derived& operator++() { ++this->value; return derived(); }\n+      Derived& operator--() { --this->value; return derived(); }\n \n-      Derived& operator++() { ++value; return derived(); }\n-      Derived operator++(int) { Derived tmp(derived()); ++value; return tmp; }\n-      Derived& operator--() { --value; return derived(); }\n-      Derived operator--(int) { Derived tmp(derived()); --value; return tmp; }\n+      Derived operator++(int) { return Derived(this->value++); }\n \n-      Derived& operator+=(difference_type n) { value += n; return derived(); }\n-      Derived& operator-=(difference_type n) { value -= n; return derived(); }\n+      Derived operator--(int) { return Derived(this->value--); }\n \n-      explicit operator bool() const { return value != nullptr; }\n+      Derived& operator+=(difference_type n)\n+      {\n+\tthis->value += n;\n+\treturn derived();\n+      }\n+\n+      Derived& operator-=(difference_type n)\n+      {\n+\tthis->value -= n;\n+\treturn derived();\n+      }\n \n       Derived\n       operator+(difference_type n) const\n@@ -641,28 +695,19 @@ namespace __gnu_test\n       }\n \n     private:\n+      friend std::ptrdiff_t operator-(PointerBase l, PointerBase r)\n+      { return l.value - r.value; }\n+\n       Derived&\n       derived() { return static_cast<Derived&>(*this); }\n \n       const Derived&\n       derived() const { return static_cast<const Derived&>(*this); }\n     };\n \n-    template<typename D, typename T>\n-    std::ptrdiff_t operator-(PointerBase<D, T> l, PointerBase<D, T> r)\n-    { return l.value - r.value; }\n-\n-    template<typename D, typename T>\n-    bool operator==(PointerBase<D, T> l, PointerBase<D, T> r)\n-    { return l.value == r.value; }\n-\n-    template<typename D, typename T>\n-    bool operator!=(PointerBase<D, T> l, PointerBase<D, T> r)\n-    { return l.value != r.value; }\n-\n-    // implementation for void specializations\n-    template<typename T>\n-    struct PointerBase_void\n+  // implementation for pointer-to-void specializations\n+  template<typename T>\n+    struct PointerBase_void : NullablePointer<T*>\n     {\n       typedef T element_type;\n \n@@ -671,25 +716,24 @@ namespace __gnu_test\n       typedef std::ptrdiff_t difference_type;\n       typedef std::random_access_iterator_tag iterator_category;\n \n-      T* value;\n+      using NullablePointer<T*>::NullablePointer;\n \n-      explicit PointerBase_void(T* p = nullptr) : value(p) { }\n+      T* operator->() const { return this->value; }\n \n       template<typename D, typename U,\n \t       typename = decltype(static_cast<T*>(std::declval<U*>()))>\n-\tPointerBase_void(const PointerBase<D, U>& p) : value(p.value) { }\n-\n-      explicit operator bool() const { return value != nullptr; }\n+\tPointerBase_void(const PointerBase<D, U>& p)\n+\t: NullablePointer<T*>(p.operator->()) { }\n     };\n \n-    template<typename Derived>\n+  template<typename Derived>\n     struct PointerBase<Derived, void> : PointerBase_void<void>\n     {\n       using PointerBase_void::PointerBase_void;\n       typedef Derived pointer;\n     };\n \n-    template<typename Derived>\n+  template<typename Derived>\n     struct PointerBase<Derived, const void> : PointerBase_void<const void>\n     {\n       using PointerBase_void::PointerBase_void;"}]}