{"sha": "27098b6b4165eff15e9c2b3328763b5e16c47f99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwOThiNmI0MTY1ZWZmMTVlOWMyYjMzMjg3NjNiNWUxNmM0N2Y5OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-19T19:36:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-19T19:36:42Z"}, "message": "mn10300: Add support in longlong.h.\n\nThis greatly helps out the DImode division, and to a lesser\nextent the DImode multiplication routines in libgcc2.c.\n\nFrom-SVN: r169018", "tree": {"sha": "c53e8bbe12cb11ce1f56b54ac5cef774f090c290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c53e8bbe12cb11ce1f56b54ac5cef774f090c290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27098b6b4165eff15e9c2b3328763b5e16c47f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27098b6b4165eff15e9c2b3328763b5e16c47f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27098b6b4165eff15e9c2b3328763b5e16c47f99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27098b6b4165eff15e9c2b3328763b5e16c47f99/comments", "author": null, "committer": null, "parents": [{"sha": "e0d1958fc33b635c29e522ec05d3a11fad642e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d1958fc33b635c29e522ec05d3a11fad642e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d1958fc33b635c29e522ec05d3a11fad642e46"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "00a9afe29def4c65128bcb56d89bddbceb505cb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27098b6b4165eff15e9c2b3328763b5e16c47f99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27098b6b4165eff15e9c2b3328763b5e16c47f99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27098b6b4165eff15e9c2b3328763b5e16c47f99", "patch": "@@ -3,6 +3,12 @@\n \t* config/mn10300/mn10300.md (mulsi3): Use reg_or_am33_const_operand.\n \t(*mulsi3): Likewise.\n \n+\t* longlong.h [__mn10300__] (count_leading_zeros): New.\n+\t[__mn10300__] (umul_ppmm, smul_ppmm): New.\n+\t[__mn10300__] (add_ssaaaa, subddmmss): New.\n+\t[__mn10300__] (udiv_qrnnd, sdiv_qrnnd): New.\n+\t[__mn10300__] (UMUL_TIME, UDIV_TIME): New.\n+\n 2011-01-19  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.h (MOVE_RATIO): Return 4 in the !speed case."}, {"sha": "5937a48554e64225d706999f38dd1cae60bc8b79", "filename": "gcc/longlong.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27098b6b4165eff15e9c2b3328763b5e16c47f99/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27098b6b4165eff15e9c2b3328763b5e16c47f99/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=27098b6b4165eff15e9c2b3328763b5e16c47f99", "patch": "@@ -718,6 +718,43 @@ UDItype __umulsidi3 (USItype, USItype);\n #endif /* __mc88110__ */\n #endif /* __m88000__ */\n \n+#if defined (__mn10300__)\n+# if defined (__AM33__)\n+#  define count_leading_zeros(COUNT,X)\t((COUNT) = __builtin_clz (X))\n+#  define umul_ppmm(w1, w0, u, v)\t\t\\\n+    asm(\"mulu %3,%2,%1,%0\" : \"=r\"(w0), \"=r\"(w1) : \"r\"(u), \"r\"(v))\n+#  define smul_ppmm(w1, w0, u, v)\t\t\\\n+    asm(\"mul %3,%2,%1,%0\" : \"=r\"(w0), \"=r\"(w1) : \"r\"(u), \"r\"(v))\n+# else\n+#  define umul_ppmm(w1, w0, u, v)\t\t\\\n+    asm(\"nop; nop; mulu %3,%0\" : \"=d\"(w0), \"=z\"(w1) : \"%0\"(u), \"d\"(v))\n+#  define smul_ppmm(w1, w0, u, v)\t\t\\\n+    asm(\"nop; nop; mul %3,%0\" : \"=d\"(w0), \"=z\"(w1) : \"%0\"(u), \"d\"(v))\n+# endif\n+# define add_ssaaaa(sh, sl, ah, al, bh, bl)\t\\\n+  do {\t\t\t\t\t\t\\\n+    DWunion __s, __a, __b;\t\t\t\\\n+    __a.s.low = (al); __a.s.high = (ah);\t\\\n+    __b.s.low = (bl); __b.s.high = (bh);\t\\\n+    __s.ll = __a.ll + __b.ll;\t\t\t\\\n+    (sl) = __s.s.low; (sh) = __s.s.high;\t\\\n+  } while (0)\n+# define sub_ddmmss(sh, sl, ah, al, bh, bl)\t\\\n+  do {\t\t\t\t\t\t\\\n+    DWunion __s, __a, __b;\t\t\t\\\n+    __a.s.low = (al); __a.s.high = (ah);\t\\\n+    __b.s.low = (bl); __b.s.high = (bh);\t\\\n+    __s.ll = __a.ll - __b.ll;\t\t\t\\\n+    (sl) = __s.s.low; (sh) = __s.s.high;\t\\\n+  } while (0)\n+# define udiv_qrnnd(q, r, nh, nl, d)\t\t\\\n+  asm(\"divu %2,%0\" : \"=D\"(q), \"=z\"(r) : \"D\"(d), \"0\"(nl), \"1\"(nh))\n+# define sdiv_qrnnd(q, r, nh, nl, d)\t\t\\\n+  asm(\"div %2,%0\" : \"=D\"(q), \"=z\"(r) : \"D\"(d), \"0\"(nl), \"1\"(nh))\n+# define UMUL_TIME 3\n+# define UDIV_TIME 38\n+#endif\n+\n #if defined (__mips__) && W_TYPE_SIZE == 32\n #define umul_ppmm(w1, w0, u, v)\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}]}