{"sha": "9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyZjhlMTZmNWM1MTRhMDIzMjY5OGUxMmU2ZTVmOGZmYjcyNjA1ZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-12-01T22:36:12Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-12-01T22:36:12Z"}, "message": "combine.c (is_parallel_of_n_reg_sets): New function.\n\n\t* combine.c (is_parallel_of_n_reg_sets): New function.\n\t(can_split_parallel_of_n_reg_sets): New function.\n\t(try_combine): If I2 is a PARALLEL of two SETs, split it into\n\ttwo insns if possible.\n\nFrom-SVN: r218248", "tree": {"sha": "00c031aeb8738912134e130d423b4a36ca3320ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c031aeb8738912134e130d423b4a36ca3320ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "797d88589e5ccb5bf5c1143aa728e517387fa87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/797d88589e5ccb5bf5c1143aa728e517387fa87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/797d88589e5ccb5bf5c1143aa728e517387fa87a"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "fc5e2db1eec6bb360d3be0ee87d0327fdd895701", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "patch": "@@ -1,3 +1,10 @@\n+2014-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* combine.c (is_parallel_of_n_reg_sets): New function.\n+\t(can_split_parallel_of_n_reg_sets): New function.\n+\t(try_combine): If I2 is a PARALLEL of two SETs, split it into\n+\ttwo insns if possible.\n+\n 2014-12-01  Tobias Burnus  <burnus@net-b.de>\n \t    Jack Howarth  <howarth@bromo.med.uc.edu>\n "}, {"sha": "b9319023c34150c61476d3d99cb92049b6ee0676", "filename": "gcc/combine.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "patch": "@@ -2461,6 +2461,59 @@ update_cfg_for_uncondjump (rtx_insn *insn)\n     }\n }\n \n+/* Return whether INSN is a PARALLEL of exactly N register SETs followed\n+   by an arbitrary number of CLOBBERs.  */\n+static bool\n+is_parallel_of_n_reg_sets (rtx_insn *insn, int n)\n+{\n+  rtx pat = PATTERN (insn);\n+\n+  if (GET_CODE (pat) != PARALLEL)\n+    return false;\n+\n+  int len = XVECLEN (pat, 0);\n+  if (len < n)\n+    return false;\n+\n+  int i;\n+  for (i = 0; i < n; i++)\n+    if (GET_CODE (XVECEXP (pat, 0, i)) != SET\n+\t|| !REG_P (SET_DEST (XVECEXP (pat, 0, i))))\n+      return false;\n+  for ( ; i < len; i++)\n+    if (GET_CODE (XVECEXP (pat, 0, i)) != CLOBBER)\n+      return false;\n+\n+  return true;\n+}\n+\n+/* Return whether INSN, a PARALLEL of N register SETs (and maybe some\n+   CLOBBERs), can be split into individual SETs in that order, without\n+   changing semantics.  */\n+static bool\n+can_split_parallel_of_n_reg_sets (rtx_insn *insn, int n)\n+{\n+  if (!insn_nothrow_p (insn))\n+    return false;\n+\n+  rtx pat = PATTERN (insn);\n+\n+  int i, j;\n+  for (i = 0; i < n; i++)\n+    {\n+      if (side_effects_p (SET_SRC (XVECEXP (pat, 0, i))))\n+\treturn false;\n+\n+      rtx reg = SET_DEST (XVECEXP (pat, 0, i));\n+\n+      for (j = i + 1; j < n; j++)\n+\tif (reg_referenced_p (reg, XVECEXP (pat, 0, j)))\n+\t  return false;\n+    }\n+\n+  return true;\n+}\n+\n /* Try to combine the insns I0, I1 and I2 into I3.\n    Here I0, I1 and I2 appear earlier than I3.\n    I0 and I1 can be zero; then we combine just I2 into I3, or I1 and I2 into\n@@ -2817,6 +2870,31 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t\t      alloc_insn_link (i1, regno, LOG_LINKS (i2)));\n \t}\n     }\n+\n+  /* If I2 is a PARALLEL of two SETs of REGs (and perhaps some CLOBBERs),\n+     make those two SETs separate I1 and I2 insns, and make an I0 that is\n+     the original I1.  */\n+  if (i0 == 0\n+      && is_parallel_of_n_reg_sets (i2, 2)\n+      && can_split_parallel_of_n_reg_sets (i2, 2)\n+      && !reg_used_between_p (SET_DEST (XVECEXP (PATTERN (i2), 0, 0)), i2, i3)\n+      && !reg_used_between_p (SET_DEST (XVECEXP (PATTERN (i2), 0, 1)), i2, i3))\n+    {\n+      /* If there is no I1, there is no I0 either.  */\n+      i0 = i1;\n+\n+      /* We make I1 with the same INSN_UID as I2.  This gives it\n+\t the same DF_INSN_LUID for value tracking.  Our fake I1 will\n+\t never appear in the insn stream so giving it the same INSN_UID\n+\t as I2 will not cause a problem.  */\n+\n+      i1 = gen_rtx_INSN (VOIDmode, NULL, i2, BLOCK_FOR_INSN (i2),\n+\t\t\t XVECEXP (PATTERN (i2), 0, 0), INSN_LOCATION (i2),\n+\t\t\t -1, NULL_RTX);\n+      INSN_UID (i1) = INSN_UID (i2);\n+\n+      SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 1));\n+    }\n #endif\n \n   /* Verify that I2 and I1 are valid for combining.  */"}]}