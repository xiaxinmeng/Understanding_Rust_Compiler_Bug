{"sha": "91b36d1c85ae3ad667d11c1ceeffc698126ab804", "node_id": "C_kwDOANBUbNoAKDkxYjM2ZDFjODVhZTNhZDY2N2QxMWMxY2VlZmZjNjk4MTI2YWI4MDQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-14T11:10:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-14T11:10:09Z"}, "message": "asan: Add --param=asan-kernel-mem-intrinsic-prefix= [PR108777]\n\nWhile in the -fsanitize=address case libasan overloads memcpy, memset,\nmemmove and many other builtins, such that they are always instrumented,\nLinux kernel for -fsanitize=kernel-address recently changed or is changing,\nsuch that memcpy, memset and memmove actually aren't instrumented because\nthey are often used also from no_sanitize (\"kernel-address\") functions\nand wants __{,hw,}asaN_{memcpy,memset,memmove} to be used instead\nfor the instrumented calls.  See e.g. the https://lkml.org/lkml/2023/2/9/1182\nthread.  Without appropriate support on the compiler side, that will mean\nany time a kernel-address instrumented function (most of them) calls\nmemcpy/memset/memmove, they will not be instrumented and thus won't catch\nkernel bugs.  Apparently clang 15 has a param for this.\n\nThe following patch implements the same (except it is a usual GCC --param,\nnot -mllvm argument) on the GCC side.  I know this isn't a regression\nbugfix, but given that -fsanitize=kernel-address has a single project that\nuses it which badly wants this I think it would be worthwhile to make an\nexception and get this into GCC 13 rather than waiting another year, it\nwon't affect non-kernel code, nor even the kernel unless the new parameter\nis used.\n\n2023-02-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/108777\n\t* params.opt (-param=asan-kernel-mem-intrinsic-prefix=): New param.\n\t* asan.h (asan_memfn_rtl): Declare.\n\t* asan.cc (asan_memfn_rtls): New variable.\n\t(asan_memfn_rtl): New function.\n\t* builtins.cc (expand_builtin): If\n\tparam_asan_kernel_mem_intrinsic_prefix and function is\n\tkernel-{,hw}address sanitized, emit calls to\n\t__{,hw}asan_{memcpy,memmove,memset} rather than\n\t{memcpy,memmove,memset}.  Use sanitize_flags_p (SANITIZE_ADDRESS)\n\tinstead of flag_sanitize & SANITIZE_ADDRESS to check if\n\tasan_intercepted_p functions shouldn't be expanded inline.\n\n\t* gcc.dg/asan/pr108777-1.c: New test.\n\t* gcc.dg/asan/pr108777-2.c: New test.\n\t* gcc.dg/asan/pr108777-3.c: New test.\n\t* gcc.dg/asan/pr108777-4.c: New test.\n\t* gcc.dg/asan/pr108777-5.c: New test.\n\t* gcc.dg/asan/pr108777-6.c: New test.\n\t* gcc.dg/completion-3.c: Adjust expected multiline output.", "tree": {"sha": "5b7eb70e23728a2b13fff9e3a48e43c4b614cb49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b7eb70e23728a2b13fff9e3a48e43c4b614cb49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91b36d1c85ae3ad667d11c1ceeffc698126ab804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b36d1c85ae3ad667d11c1ceeffc698126ab804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b36d1c85ae3ad667d11c1ceeffc698126ab804", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b36d1c85ae3ad667d11c1ceeffc698126ab804/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f4b055d97804666d6d144b2af9b9dee0854354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f4b055d97804666d6d144b2af9b9dee0854354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f4b055d97804666d6d144b2af9b9dee0854354"}], "stats": {"total": 221, "additions": 220, "deletions": 1}, "files": [{"sha": "f56d084bc7ab5c311fdfd837d83051e4213c3935", "filename": "gcc/asan.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fasan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fasan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.cc?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -391,6 +391,46 @@ asan_memintrin (void)\n }\n \n \n+/* Support for --param asan-kernel-mem-intrinsic-prefix=1.  */\n+static GTY(()) rtx asan_memfn_rtls[3];\n+\n+rtx\n+asan_memfn_rtl (tree fndecl)\n+{\n+  int i;\n+  const char *f, *p;\n+  char buf[sizeof (\"__hwasan_memmove\")];\n+\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    case BUILT_IN_MEMCPY: i = 0; f = \"memcpy\"; break;\n+    case BUILT_IN_MEMSET: i = 1; f = \"memset\"; break;\n+    case BUILT_IN_MEMMOVE: i = 2; f = \"memmove\"; break;\n+    default: gcc_unreachable ();\n+    }\n+  if (asan_memfn_rtls[i] == NULL_RTX)\n+    {\n+      tree save_name = DECL_NAME (fndecl);\n+      tree save_assembler_name = DECL_ASSEMBLER_NAME (fndecl);\n+      rtx save_rtl = DECL_RTL (fndecl);\n+      if (flag_sanitize & SANITIZE_KERNEL_HWADDRESS)\n+\tp = \"__hwasan_\";\n+      else\n+\tp = \"__asan_\";\n+      strcpy (buf, p);\n+      strcat (buf, f);\n+      DECL_NAME (fndecl) = get_identifier (buf);\n+      DECL_ASSEMBLER_NAME_RAW (fndecl) = NULL_TREE;\n+      SET_DECL_RTL (fndecl, NULL_RTX);\n+      asan_memfn_rtls[i] = DECL_RTL (fndecl);\n+      DECL_NAME (fndecl) = save_name;\n+      DECL_ASSEMBLER_NAME_RAW (fndecl) = save_assembler_name;\n+      SET_DECL_RTL (fndecl, save_rtl);\n+    }\n+  return asan_memfn_rtls[i];\n+}\n+\n+\n /* Checks whether section SEC should be sanitized.  */\n \n static bool"}, {"sha": "b049c8903a60cf59c042e1c075eac787ca4fb176", "filename": "gcc/asan.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -33,6 +33,7 @@ extern bool asan_expand_check_ifn (gimple_stmt_iterator *, bool);\n extern bool asan_expand_mark_ifn (gimple_stmt_iterator *);\n extern bool asan_expand_poison_ifn (gimple_stmt_iterator *, bool *,\n \t\t\t\t    hash_map<tree, tree> &);\n+extern rtx asan_memfn_rtl (tree);\n \n extern void hwasan_record_frame_init ();\n extern void hwasan_record_stack_var (rtx, rtx, poly_int64, poly_int64);"}, {"sha": "4d467c8c5c10a5f86875fd0a3dbca435ec4e63c9", "filename": "gcc/builtins.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -7326,7 +7326,24 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n      by ASan.  */\n \n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n-  if ((flag_sanitize & SANITIZE_ADDRESS) && asan_intercepted_p (fcode))\n+  if (param_asan_kernel_mem_intrinsic_prefix\n+      && sanitize_flags_p (SANITIZE_KERNEL_ADDRESS\n+\t\t\t   | SANITIZE_KERNEL_HWADDRESS))\n+    switch (fcode)\n+      {\n+\trtx save_decl_rtl, ret;\n+      case BUILT_IN_MEMCPY:\n+      case BUILT_IN_MEMMOVE:\n+      case BUILT_IN_MEMSET:\n+\tsave_decl_rtl = DECL_RTL (fndecl);\n+\tDECL_RTL (fndecl) = asan_memfn_rtl (fndecl);\n+\tret = expand_call (exp, target, ignore);\n+\tDECL_RTL (fndecl) = save_decl_rtl;\n+\treturn ret;\n+      default:\n+\tbreak;\n+      }\n+  if (sanitize_flags_p (SANITIZE_ADDRESS) && asan_intercepted_p (fcode))\n     return expand_call (exp, target, ignore);\n \n   /* When not optimizing, generate calls to library functions for a certain"}, {"sha": "41d8bef245ea358cde416be9e0a54d540f6f7660", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -50,6 +50,10 @@ Enable asan store operations protection.\n Common Joined UInteger Var(param_asan_instrumentation_with_call_threshold) Init(7000) Param Optimization\n Use callbacks instead of inline code if number of accesses in function becomes greater or equal to this number.\n \n+-param=asan-kernel-mem-intrinsic-prefix=\n+Common Joined UInteger Var(param_asan_kernel_mem_intrinsic_prefix) Init(0) IntegerRange(0, 1) Param Optimization\n+Prefix calls to memcpy, memset and memmove with __asan_ or __hwasan_ for -fsanitize=kernel-address or -fsanitize=kernel-hwaddress.\n+\n -param=asan-memintrin=\n Common Joined UInteger Var(param_asan_memintrin) Init(1) IntegerRange(0, 1) Param Optimization\n Enable asan builtin functions protection."}, {"sha": "2cf4c52a9eed749688ecd7719a1a5b21618aed2d", "filename": "gcc/testsuite/gcc.dg/asan/pr108777-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-1.c?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -0,0 +1,28 @@\n+/* PR sanitizer/108777 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-sanitize=all -fsanitize=kernel-address --param asan-kernel-mem-intrinsic-prefix=1\" } */\n+/* { dg-final { scan-assembler \"__asan_memcpy\" } } */\n+/* { dg-final { scan-assembler \"__asan_memset\" } } */\n+/* { dg-final { scan-assembler \"__asan_memmove\" } } */\n+\n+extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n+extern void *memmove (void *, const void *, __SIZE_TYPE__);\n+extern void *memset (void *, int, __SIZE_TYPE__);\n+\n+void\n+foo (void *p, void *q, int s)\n+{\n+  memcpy (p, q, s);\n+}\n+\n+void\n+bar (void *p, void *q, int s)\n+{\n+  memmove (p, q, s);\n+}\n+\n+void\n+baz (void *p, int c, int s)\n+{\n+  memset (p, c, s);\n+}"}, {"sha": "e944b63fc5018cd450378a6d4868fffff7dea49b", "filename": "gcc/testsuite/gcc.dg/asan/pr108777-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-2.c?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -0,0 +1,24 @@\n+/* PR sanitizer/108777 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-sanitize=all -fsanitize=kernel-address --param asan-kernel-mem-intrinsic-prefix=1\" } */\n+/* { dg-final { scan-assembler \"__asan_memcpy\" } } */\n+/* { dg-final { scan-assembler \"__asan_memset\" } } */\n+/* { dg-final { scan-assembler \"__asan_memmove\" } } */\n+\n+void\n+foo (void *p, void *q, int s)\n+{\n+  __builtin_memcpy (p, q, s);\n+}\n+\n+void\n+bar (void *p, void *q, int s)\n+{\n+  __builtin_memmove (p, q, s);\n+}\n+\n+void\n+baz (void *p, int c, int s)\n+{\n+  __builtin_memset (p, c, s);\n+}"}, {"sha": "11d3ef35f56cb1ce68004a9fe43dd8a7ac44df75", "filename": "gcc/testsuite/gcc.dg/asan/pr108777-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-3.c?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -0,0 +1,28 @@\n+/* PR sanitizer/108777 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-sanitize=all -fsanitize=kernel-address --param asan-kernel-mem-intrinsic-prefix=1\" } */\n+/* { dg-final { scan-assembler-not \"__asan_memcpy\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memset\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memmove\" } } */\n+\n+extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n+extern void *memmove (void *, const void *, __SIZE_TYPE__);\n+extern void *memset (void *, int, __SIZE_TYPE__);\n+\n+__attribute__((no_sanitize(\"kernel-address\"))) void\n+foo (void *p, void *q, int s)\n+{\n+  memcpy (p, q, s);\n+}\n+\n+__attribute__((no_sanitize(\"kernel-address\"))) void\n+bar (void *p, void *q, int s)\n+{\n+  memmove (p, q, s);\n+}\n+\n+__attribute__((no_sanitize(\"kernel-address\"))) void\n+baz (void *p, int c, int s)\n+{\n+  memset (p, c, s);\n+}"}, {"sha": "804924c9223a689584a314d516edce7f20625138", "filename": "gcc/testsuite/gcc.dg/asan/pr108777-4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-4.c?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -0,0 +1,24 @@\n+/* PR sanitizer/108777 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-sanitize=all -fsanitize=kernel-address --param asan-kernel-mem-intrinsic-prefix=1\" } */\n+/* { dg-final { scan-assembler-not \"__asan_memcpy\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memset\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memmove\" } } */\n+\n+__attribute__((no_sanitize(\"kernel-address\"))) void\n+foo (void *p, void *q, int s)\n+{\n+  __builtin_memcpy (p, q, s);\n+}\n+\n+__attribute__((no_sanitize(\"kernel-address\"))) void\n+bar (void *p, void *q, int s)\n+{\n+  __builtin_memmove (p, q, s);\n+}\n+\n+__attribute__((no_sanitize(\"kernel-address\"))) void\n+baz (void *p, int c, int s)\n+{\n+  __builtin_memset (p, c, s);\n+}"}, {"sha": "83d44a74001b03615624dcd31d6d5b4b55e14080", "filename": "gcc/testsuite/gcc.dg/asan/pr108777-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-5.c?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -0,0 +1,28 @@\n+/* PR sanitizer/108777 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-sanitize=all -fsanitize=kernel-address\" } */\n+/* { dg-final { scan-assembler-not \"__asan_memcpy\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memset\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memmove\" } } */\n+\n+extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n+extern void *memmove (void *, const void *, __SIZE_TYPE__);\n+extern void *memset (void *, int, __SIZE_TYPE__);\n+\n+void\n+foo (void *p, void *q, int s)\n+{\n+  memcpy (p, q, s);\n+}\n+\n+void\n+bar (void *p, void *q, int s)\n+{\n+  memmove (p, q, s);\n+}\n+\n+void\n+baz (void *p, int c, int s)\n+{\n+  memset (p, c, s);\n+}"}, {"sha": "dc07818641de48bbd120f0a927cbfae69ec063a1", "filename": "gcc/testsuite/gcc.dg/asan/pr108777-6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr108777-6.c?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -0,0 +1,24 @@\n+/* PR sanitizer/108777 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-sanitize=all -fsanitize=kernel-address\" } */\n+/* { dg-final { scan-assembler-not \"__asan_memcpy\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memset\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_memmove\" } } */\n+\n+void\n+foo (void *p, void *q, int s)\n+{\n+  __builtin_memcpy (p, q, s);\n+}\n+\n+void\n+bar (void *p, void *q, int s)\n+{\n+  __builtin_memmove (p, q, s);\n+}\n+\n+void\n+baz (void *p, int c, int s)\n+{\n+  __builtin_memset (p, c, s);\n+}"}, {"sha": "462d356250fb3bb98388e1385572563658e24088", "filename": "gcc/testsuite/gcc.dg/completion-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fcompletion-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b36d1c85ae3ad667d11c1ceeffc698126ab804/gcc%2Ftestsuite%2Fgcc.dg%2Fcompletion-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompletion-3.c?ref=91b36d1c85ae3ad667d11c1ceeffc698126ab804", "patch": "@@ -7,6 +7,7 @@\n --param=asan-instrument-reads=\n --param=asan-instrument-writes=\n --param=asan-instrumentation-with-call-threshold=\n+--param=asan-kernel-mem-intrinsic-prefix=\n --param=asan-memintrin=\n --param=asan-stack=\n --param=asan-use-after-return="}]}