{"sha": "157600d084f021125d99def7874bd7e6a01f2cd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3NjAwZDA4NGYwMjExMjVkOTlkZWY3ODc0YmQ3ZTZhMDFmMmNkMw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2007-01-09T07:48:38Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-01-09T07:48:38Z"}, "message": "Index: ChangeLog\n2007-01-08  Geoffrey Keating  <geoffk@apple.com>\n\n\t* target.h (struct gcc_target): New field library_rtti_comdat.\n\t* target-def.h (TARGET_CXX_LIBRARY_RTTI_COMDAT): New.\n\t(TARGET_CXX): Add TARGET_CXX_LIBRARY_RTTI_COMDAT.\n\t* doc/tm.texi (C++ ABI): Document TARGET_CXX_LIBRARY_RTTI_COMDAT.\n\t* config/darwin.h (TARGET_CXX_LIBRARY_RTTI_COMDAT): Define.\n\nIndex: testsuite/ChangeLog\n2007-01-08  Geoffrey Keating  <geoffk@apple.com>\n\n\t* g++.dg/rtti/darwin-builtin-linkage.C: New.\n\nIndex: cp/ChangeLog\n2007-01-08  Geoffrey Keating  <geoffk@apple.com>\n\n\t* rtti.c: Include target.h.\n\t(emit_support_tinfos): If ! targetm.cxx.library_rtti_comdat (),\n\tdon't emit typeinfo for fundamental types as weak.\n\t* Make-lang.in (cp/rtti.o): Update and correct dependencies.\n\nFrom-SVN: r120611", "tree": {"sha": "d0caf2e0b46a9b90f225815564ffe0a37d2140fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0caf2e0b46a9b90f225815564ffe0a37d2140fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157600d084f021125d99def7874bd7e6a01f2cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157600d084f021125d99def7874bd7e6a01f2cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157600d084f021125d99def7874bd7e6a01f2cd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157600d084f021125d99def7874bd7e6a01f2cd3/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95af8923f19ed9bddc89caa02103d48b44641c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95af8923f19ed9bddc89caa02103d48b44641c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95af8923f19ed9bddc89caa02103d48b44641c7e"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "caeff6bf0766e6d1252f266770f027011d268d8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -1,3 +1,11 @@\n+2007-01-08  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* target.h (struct gcc_target): New field library_rtti_comdat.\n+\t* target-def.h (TARGET_CXX_LIBRARY_RTTI_COMDAT): New.\n+\t(TARGET_CXX): Add TARGET_CXX_LIBRARY_RTTI_COMDAT.\n+\t* doc/tm.texi (C++ ABI): Document TARGET_CXX_LIBRARY_RTTI_COMDAT.\n+\t* config/darwin.h (TARGET_CXX_LIBRARY_RTTI_COMDAT): Define.\n+\n 2007-01-08  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/invoke.texi (Optimize Options): Correct description of -O0."}, {"sha": "926197c027f3491e957da965ec89cb1ca6ad353e", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -482,6 +482,10 @@ extern GTY(()) int darwin_ms_struct;\n    with names, so it's safe to make the class data not comdat.  */\n #define TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT hook_bool_void_false\n \n+/* For efficiency, on Darwin the RTTI information that is always\n+   emitted in the standard C++ library should not be COMDAT.  */\n+#define TARGET_CXX_LIBRARY_RTTI_COMDAT hook_bool_void_false\n+\n /* We make exception information linkonce. */\n #undef TARGET_USES_WEAK_UNWIND_INFO\n #define TARGET_USES_WEAK_UNWIND_INFO 1"}, {"sha": "f97f7d981e694898aa2e714933231e0f68231516", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -1,3 +1,10 @@\n+2007-01-08  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* rtti.c: Include target.h.\n+\t(emit_support_tinfos): If ! targetm.cxx.library_rtti_comdat (),\n+\tdon't emit typeinfo for fundamental types as weak.\n+\t* Make-lang.in (cp/rtti.o): Update and correct dependencies.\n+\n 2007-01-08  Richard Guenther  <rguenther@suse.de>\n \n \t* cvt.c (cp_convert_to_pointer): Use build_int_cst_type."}, {"sha": "b16bcc1849cebd1c90aa9b4af81b596f718596ce", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -265,7 +265,7 @@ cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n   $(TARGET_H) debug.h\n cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(TM_H)\n cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h convert.h \\\n-  gt-cp-rtti.h\n+  $(TARGET_H) gt-cp-rtti.h\n cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) except.h \\\n   toplev.h cp/cfns.h $(EXPR_H) libfuncs.h $(TREE_INLINE_H) $(TARGET_H)\n cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(RTL_H) $(FLAGS_H) $(EXPR_H) \\"}, {"sha": "8549ec07f11700b12b9779ee5e41cbf20fca1eb8", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"assert.h\"\n #include \"toplev.h\"\n #include \"convert.h\"\n+#include \"target.h\"\n \n /* C++ returns type information to the user in struct type_info\n    objects. We also use type information to implement dynamic_cast and\n@@ -1429,8 +1430,11 @@ emit_support_tinfos (void)\n \t     comdat_linkage for details.)  Since we want these objects\n \t     to have external linkage so that copies do not have to be\n \t     emitted in code outside the runtime library, we make them\n-\t     non-COMDAT here.  */\n-\t  if (!flag_weak)\n+\t     non-COMDAT here.  \n+\n+\t     It might also not be necessary to follow this detail of the\n+\t     ABI.  */\n+\t  if (!flag_weak || ! targetm.cxx.library_rtti_comdat ())\n \t    {\n \t      gcc_assert (TREE_PUBLIC (tinfo) && !DECL_COMDAT (tinfo));\n \t      DECL_INTERFACE_KNOWN (tinfo) = 1;"}, {"sha": "9e8ad0e99dfd9fe45bed315bdc2379666287021d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -9080,6 +9080,12 @@ classes whose virtual table will be emitted in only one translation\n unit will not be COMDAT.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CXX_LIBRARY_RTTI_COMDAT (void)\n+This hook returns true (the default) if the RTTI information for\n+the basic types which is defined in the C++ runtime should always\n+be COMDAT, false if it should not be COMDAT.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_CXX_USE_AEABI_ATEXIT (void)\n This hook returns true if @code{__aeabi_atexit} (as defined by the ARM EABI)\n should be used to register static destructors when @option{-fuse-cxa-atexit}"}, {"sha": "8f7abd8a2963fbd3e3e21b06f9def90088f8182f", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -596,6 +596,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT hook_bool_void_true\n #endif\n \n+#ifndef TARGET_CXX_LIBRARY_RTTI_COMDAT\n+#define TARGET_CXX_LIBRARY_RTTI_COMDAT hook_bool_void_true\n+#endif\n+\n #ifndef TARGET_CXX_USE_AEABI_ATEXIT\n #define TARGET_CXX_USE_AEABI_ATEXIT hook_bool_void_false\n #endif\n@@ -619,6 +623,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n     TARGET_CXX_KEY_METHOD_MAY_BE_INLINE,\t\\\n     TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY,\t\\\n     TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT,        \\\n+    TARGET_CXX_LIBRARY_RTTI_COMDAT,\t        \\\n     TARGET_CXX_USE_AEABI_ATEXIT,\t\t\\\n     TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT,\t\\\n     TARGET_CXX_ADJUST_CLASS_AT_DEFINITION\t\\"}, {"sha": "e86ba2167e2e37bb965a8ef91303217fbda143ee", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -808,6 +808,10 @@ struct gcc_target\n        class data for classes whose virtual table will be emitted in\n        only one translation unit will not be COMDAT.  */\n     bool (*class_data_always_comdat) (void);\n+    /* Returns true (the default) if the RTTI for the basic types,\n+       which is always defined in the C++ runtime, should be COMDAT;\n+       false if it should not be COMDAT.  */\n+    bool (*library_rtti_comdat) (void);\n     /* Returns true if __aeabi_atexit should be used to register static\n        destructors.  */\n     bool (*use_aeabi_atexit) (void);"}, {"sha": "4d097ea1e01757e8bf75744d8bb068b0fa0ea316", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -1,3 +1,7 @@\n+2007-01-08  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* g++.dg/rtti/darwin-builtin-linkage.C: New.\n+\n 2007-01-08  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* gcc.target/spu/intrinsics-1.c: Remove xfail."}, {"sha": "6db161169d8fdf216da13823d2e293e8ed5d0af9", "filename": "gcc/testsuite/g++.dg/rtti/darwin-builtin-linkage.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdarwin-builtin-linkage.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157600d084f021125d99def7874bd7e6a01f2cd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdarwin-builtin-linkage.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdarwin-builtin-linkage.C?ref=157600d084f021125d99def7874bd7e6a01f2cd3", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-final { scan-assembler-not \"\\\\.weak_definition __ZTI\" } } */\n+\n+/* Verify that none of the type_info structures for the fundamental\n+   types are emitted as weak on Darwin.  */\n+\n+#include <cxxabi.h>\n+\n+namespace __cxxabiv1 {\n+\n+using namespace std;\n+\n+// This has special meaning to the compiler, and will cause it\n+// to emit the type_info structures for the fundamental types which are\n+// mandated to exist in the runtime.\n+__fundamental_type_info::\n+~__fundamental_type_info ()\n+{}\n+ \n+}"}]}