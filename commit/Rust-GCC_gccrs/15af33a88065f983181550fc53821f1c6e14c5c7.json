{"sha": "15af33a88065f983181550fc53821f1c6e14c5c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVhZjMzYTg4MDY1Zjk4MzE4MTU1MGZjNTM4MjFmMWM2ZTE0YzVjNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-05T00:20:32Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-05T00:20:32Z"}, "message": "analyzer: fix ICE with -fsanitize=undefined [PR98293]\n\n-fsanitize=undefined with calls to nonnull functions\ncreates struct __ubsan_nonnull_arg_data instances\nwith CONSTRUCTORs for RECORD_TYPEs with NULL index values.\nThe analyzer was mistakenly using INTEGER_CST for these\nfields, leading to ICEs.\n\nFix the issue by iterating through the fields in the type\nfor such cases, imitating similar logic in varasm.c's\noutput_constructor.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/98293\n\t* store.cc (binding_map::apply_ctor_to_region): When \"index\" is\n\tNULL, iterate through the fields for RECORD_TYPEs, rather than\n\tcreating an INTEGER_CST index.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/98293\n\t* gcc.dg/analyzer/pr98293.c: New test.", "tree": {"sha": "8dc2bf2647da05507089886acd6f04a41390e253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc2bf2647da05507089886acd6f04a41390e253"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15af33a88065f983181550fc53821f1c6e14c5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15af33a88065f983181550fc53821f1c6e14c5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15af33a88065f983181550fc53821f1c6e14c5c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15af33a88065f983181550fc53821f1c6e14c5c7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e73f511573b3656c57f33c079e9bd1d70aaa621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e73f511573b3656c57f33c079e9bd1d70aaa621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e73f511573b3656c57f33c079e9bd1d70aaa621"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b4a4d5f3bb2ae081c4e10da70162fcd478326cf9", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15af33a88065f983181550fc53821f1c6e14c5c7/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15af33a88065f983181550fc53821f1c6e14c5c7/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=15af33a88065f983181550fc53821f1c6e14c5c7", "patch": "@@ -524,10 +524,27 @@ binding_map::apply_ctor_to_region (const region *parent_reg, tree ctor,\n   unsigned ix;\n   tree index;\n   tree val;\n+  tree parent_type = parent_reg->get_type ();\n+  tree field;\n+  if (TREE_CODE (parent_type) == RECORD_TYPE)\n+    field = TYPE_FIELDS (parent_type);\n+  else\n+    field = NULL_TREE;\n   FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), ix, index, val)\n     {\n       if (!index)\n-\tindex = build_int_cst (integer_type_node, ix);\n+\t{\n+\t  /* If index is NULL, then iterate through the fields for\n+\t     a RECORD_TYPE, or use an INTEGER_CST otherwise.\n+\t     Compare with similar logic in output_constructor.  */\n+\t  if (field)\n+\t    {\n+\t      index = field;\n+\t      field = DECL_CHAIN (field);\n+\t    }\n+\t  else\n+\t    index = build_int_cst (integer_type_node, ix);\n+\t}\n       else if (TREE_CODE (index) == RANGE_EXPR)\n \t{\n \t  tree min_index = TREE_OPERAND (index, 0);"}, {"sha": "f750c90244072cdba3f812df13262d9c462fa491", "filename": "gcc/testsuite/gcc.dg/analyzer/pr98293.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15af33a88065f983181550fc53821f1c6e14c5c7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98293.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15af33a88065f983181550fc53821f1c6e14c5c7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98293.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98293.c?ref=15af33a88065f983181550fc53821f1c6e14c5c7", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-additional-options \"-fsanitize=undefined\" } */\n+#include \"../pr93399.c\""}]}