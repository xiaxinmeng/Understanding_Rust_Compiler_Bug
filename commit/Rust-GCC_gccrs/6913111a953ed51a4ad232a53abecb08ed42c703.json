{"sha": "6913111a953ed51a4ad232a53abecb08ed42c703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxMzExMWE5NTNlZDUxYTRhZDIzMmE1M2FiZWNiMDhlZDQyYzcwMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-04-02T11:06:30Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-04-02T11:06:30Z"}, "message": "S/390: arch13: vector load byte reversed element and replicate\n\ngcc/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t(\"*vec_splats_bswap_vec<mode>\", \"*vec_splats_bswap_elem<mode>\"):\n\tNew insn definition.\n\t* config/s390/vx-builtins.md (V_HW_HSD): Move to ...\n\t* config/s390/vector.md (V_HW_HSD): ... here.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/zvector/replicate-bswap-1.c: New test.\n\t* gcc.target/s390/zvector/replicate-bswap-2.c: New test.\n\nFrom-SVN: r270088", "tree": {"sha": "c40cbc2fc10d23881b371fbf6224938bf8359893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c40cbc2fc10d23881b371fbf6224938bf8359893"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6913111a953ed51a4ad232a53abecb08ed42c703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6913111a953ed51a4ad232a53abecb08ed42c703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6913111a953ed51a4ad232a53abecb08ed42c703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6913111a953ed51a4ad232a53abecb08ed42c703/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5e100c5e32c2b5cf034eeabff9d70b3d5d230cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e100c5e32c2b5cf034eeabff9d70b3d5d230cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e100c5e32c2b5cf034eeabff9d70b3d5d230cb"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "bf0b3276f914795ce04aadaa337d73c07e8038f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6913111a953ed51a4ad232a53abecb08ed42c703", "patch": "@@ -1,3 +1,10 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t(\"*vec_splats_bswap_vec<mode>\", \"*vec_splats_bswap_elem<mode>\"):\n+\tNew insn definition.\n+\t* config/s390/vx-builtins.md (V_HW_HSD): Move to ...\n+\t* config/s390/vector.md (V_HW_HSD): ... here.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/vecintrin.h: Map vec_vster low-level builtins to vec_vler."}, {"sha": "8f02af4d20f3ae9f576573b290ff8befdcca82a9", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=6913111a953ed51a4ad232a53abecb08ed42c703", "patch": "@@ -34,6 +34,7 @@\n \n (define_mode_iterator V_HW_64 [V2DI V2DF])\n (define_mode_iterator VT_HW_HSDT [V8HI V4SI V4SF V2DI V2DF V1TI V1TF TI TF])\n+(define_mode_iterator V_HW_HSD [V8HI V4SI (V4SF \"TARGET_VXE\") V2DI V2DF])\n \n ; Including TI for instructions that support it (va, vn, ...)\n (define_mode_iterator VT_HW [V16QI V8HI V4SI V2DI V2DF V1TI TI (V4SF \"TARGET_VXE\") (V1TF \"TARGET_VXE\")])\n@@ -548,6 +549,25 @@\n    #\"\n   [(set_attr \"op_type\" \"VRX,VRI,VRI,*\")])\n \n+; vlbrreph, vlbrrepf, vlbrrepg\n+(define_insn \"*vec_splats_bswap_vec<mode>\"\n+  [(set (match_operand:V_HW_HSD                           0 \"register_operand\" \"=v\")\n+\t(bswap:V_HW_HSD\n+\t (vec_duplicate:V_HW_HSD (match_operand:<non_vec> 1 \"memory_operand\"    \"R\"))))]\n+  \"TARGET_VXE2\"\n+  \"vlbrrep<bhfgq>\\t%v0,%1\"\n+  [(set_attr \"op_type\" \"VRX\")])\n+\n+; Why do we need both? Shouldn't there be a canonical form?\n+; vlbrreph, vlbrrepf, vlbrrepg\n+(define_insn \"*vec_splats_bswap_elem<mode>\"\n+  [(set (match_operand:V_HW_HSD                    0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:V_HW_HSD\n+\t (bswap:<non_vec> (match_operand:<non_vec> 1 \"memory_operand\"    \"R\"))))]\n+  \"TARGET_VXE2\"\n+  \"vlbrrep<bhfgq>\\t%v0,%1\"\n+  [(set_attr \"op_type\" \"VRX\")])\n+\n ; A TFmode operand resides in FPR register pairs while V1TF is in a\n ; single vector register.\n (define_insn \"*vec_tf_to_v1tf\""}, {"sha": "1595ffb369567da698c2d093fe42f79a2e56233b", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=6913111a953ed51a4ad232a53abecb08ed42c703", "patch": "@@ -22,7 +22,6 @@\n \n (define_mode_iterator V_HW_32_64 [V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])\n (define_mode_iterator VI_HW_SD [V4SI V2DI])\n-(define_mode_iterator V_HW_HSD [V8HI V4SI (V4SF \"TARGET_VXE\") V2DI V2DF])\n (define_mode_iterator V_HW_4 [V4SI V4SF])\n ; Full size vector modes with more than one element which are directly supported in vector registers by the hardware.\n (define_mode_iterator VEC_HW  [V16QI V8HI V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])"}, {"sha": "dfd5f16857a8fc386e9ee6d60c31b6700446dca3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6913111a953ed51a4ad232a53abecb08ed42c703", "patch": "@@ -1,3 +1,8 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/replicate-bswap-1.c: New test.\n+\t* gcc.target/s390/zvector/replicate-bswap-2.c: New test.\n+\n 2019-04-02  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR testsuite/89916"}, {"sha": "adecdb7f7d0ceb72117e979e37b0e6a00a2c8057", "filename": "gcc/testsuite/gcc.target/s390/zvector/replicate-bswap-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Freplicate-bswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Freplicate-bswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Freplicate-bswap-1.c?ref=6913111a953ed51a4ad232a53abecb08ed42c703", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed short\n+vlbrreph (const signed short *a)\n+{\n+  return vec_revb (vec_splats (*a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrreph.*\\n\\tvlbrreph.*vec_splats_bswap_vecv8hi\" 1 } } */\n+\n+vector signed int\n+vlbrrepf (const signed int *a)\n+{\n+  return vec_revb (vec_splats (*a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrrepf.*\\n\\tvlbrrepf.*vec_splats_bswap_vecv4si\" 1 } } */\n+\n+vector signed long long\n+vlbrrepg (const signed long long *a)\n+{\n+  return vec_revb (vec_splats (*a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrrepg.*\\n\\tvlbrrepg.*vec_splats_bswap_vecv2di\" 1 } } */"}, {"sha": "426dd5428916b65083faef072184a04f884d0b51", "filename": "gcc/testsuite/gcc.target/s390/zvector/replicate-bswap-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Freplicate-bswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913111a953ed51a4ad232a53abecb08ed42c703/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Freplicate-bswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Freplicate-bswap-2.c?ref=6913111a953ed51a4ad232a53abecb08ed42c703", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -fno-asynchronous-unwind-tables -dp\" } */\n+\n+#include <vecintrin.h>\n+\n+vector unsigned short\n+vlbrreph (const unsigned short *a)\n+{\n+  return vec_splats (__builtin_bswap16 (*a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrreph.*\\n\\tvlbrreph.*vec_splats_bswap_elemv8hi\" 1 } } */\n+\n+vector unsigned int\n+vlbrrepf (const unsigned int *a)\n+{\n+  return vec_splats (__builtin_bswap32 (*a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrrepf.*\\n\\tvlbrrepf.*vec_splats_bswap_elemv4si\" 1 } } */\n+\n+vector unsigned long long\n+vlbrrepg (const unsigned long long *a)\n+{\n+  return vec_splats ((unsigned long long)__builtin_bswap64 (*a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vlbrrepg.*\\n\\tvlbrrepg.*vec_splats_bswap_elemv2di\" 1 } } */"}]}