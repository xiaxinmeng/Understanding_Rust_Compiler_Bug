{"sha": "0b53f0396c95cef8c5246b01b4b756298511aa64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI1M2YwMzk2Yzk1Y2VmOGM1MjQ2YjAxYjRiNzU2Mjk4NTExYWE2NA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2001-02-03T01:55:58Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-02-03T01:55:58Z"}, "message": "c4x.h (IS_INT_CALL_SAVED_REG, [...]): Define.\n\n\t* c4x.h (IS_INT_CALL_SAVED_REG, IS_FLOAT_CALL_SAVED_REG): Define.\n\t(HARD_REGNO_CALL_PART_CLOBBERED): Use IS_FLOAT_CALL_SAVED_REG.\n\t(INITIAL_FRAME_POINTER_OFFSET, INITIAL_ELIMINATION_OFFSET): Likewise.\n\t* c4x.c (c4x_hard_regno_rename_ok): Use IS_XXX_CALL_SAVED_REG.\n\t(c4x_expand_prologue, c4x_expand_epilogue): Likewise.\n\nFrom-SVN: r39421", "tree": {"sha": "eaf06c644b229a9a14e56b4d0de574fdce8d4652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf06c644b229a9a14e56b4d0de574fdce8d4652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b53f0396c95cef8c5246b01b4b756298511aa64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b53f0396c95cef8c5246b01b4b756298511aa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b53f0396c95cef8c5246b01b4b756298511aa64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b53f0396c95cef8c5246b01b4b756298511aa64/comments", "author": null, "committer": null, "parents": [{"sha": "d001969e22eb6c544a35676b827524f218433c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d001969e22eb6c544a35676b827524f218433c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d001969e22eb6c544a35676b827524f218433c5f"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "f5ed372c71c8f2b08c860dd01c07fb6d87c3bc06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b53f0396c95cef8c5246b01b4b756298511aa64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b53f0396c95cef8c5246b01b4b756298511aa64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b53f0396c95cef8c5246b01b4b756298511aa64", "patch": "@@ -1,3 +1,11 @@\n+2001-02-03  Michael Hayes  <m.hayes@elec.canterbury.ac.nz)\n+\n+\t* c4x.h (IS_INT_CALL_SAVED_REG, IS_FLOAT_CALL_SAVED_REG): Define.\n+\t(HARD_REGNO_CALL_PART_CLOBBERED): Use IS_FLOAT_CALL_SAVED_REG.\n+\t(INITIAL_FRAME_POINTER_OFFSET, INITIAL_ELIMINATION_OFFSET): Likewise.\n+\t* c4x.c (c4x_hard_regno_rename_ok): Use IS_XXX_CALL_SAVED_REG.\n+\t(c4x_expand_prologue, c4x_expand_epilogue): Likewise.\n+\n 2001-02-03  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n \t* c4x.c (group1_reg_operand, group1_mem_operand, arx_reg_operand,"}, {"sha": "1f65ba60467b312a6ee314fcc84ff8a0c495cfdc", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b53f0396c95cef8c5246b01b4b756298511aa64/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b53f0396c95cef8c5246b01b4b756298511aa64/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=0b53f0396c95cef8c5246b01b4b756298511aa64", "patch": "@@ -437,11 +437,9 @@ c4x_hard_regno_rename_ok (regno1, regno2)\n {\n   /* We can not copy call saved registers from mode QI into QF or from\n      mode QF into QI.  */\n-  if ((regno1 == R6_REGNO || regno1 == R7_REGNO)\n-      && (regno2 == R4_REGNO || regno2 == R5_REGNO || regno2 == R8_REGNO))\n+  if (IS_FLOAT_CALL_SAVED_REGNO (regno1) && IS_INT_CALL_SAVED_REGNO (regno2))\n     return 0;\n-  if ((regno1 == R4_REGNO || regno1 == R5_REGNO || regno1 == R8_REGNO)\n-      && (regno2 == R6_REGNO || regno2 == R7_REGNO))\n+  if (IS_INT_CALL_SAVED_REGNO (regno1) && IS_FLOAT_CALL_SAVED_REGNO (regno2))\n     return 0;\n   /* We cannot copy from an extended (40 bit) register to a standard\n      (32 bit) register because we only set the condition codes for\n@@ -987,9 +985,8 @@ c4x_expand_prologue ()\n \t{\n \t  if (regs_ever_live[regno] && ! call_used_regs[regno])\n \t    {\n-\t      if ((regno == R6_REGNO) || (regno == R7_REGNO))\n+\t      if (IS_FLOAT_CALL_SAVED_REGNO (regno))\n \t\t{\n-\t\t  /* R6 and R7 are saved as floating point.  */\n \t\t  if (TARGET_PRESERVE_FLOAT)\n \t\t    {\n                       insn = emit_insn (gen_pushqi\n@@ -1119,8 +1116,7 @@ c4x_expand_epilogue()\n \t      if (regno == AR3_REGNO && dont_pop_ar3)\n \t\tcontinue;\n \t      \n-\t      /* R6 and R7 are saved as floating point.  */\n-\t      if ((regno == R6_REGNO) || (regno == R7_REGNO))\n+\t      if (IS_FLOAT_CALL_SAVED_REGNO (regno))\n \t\t{\n \t\t  insn = emit_insn (gen_popqf_unspec\n \t\t\t\t    (gen_rtx_REG (QFmode, regno)));"}, {"sha": "e5cba8f0d2f5e3a596a2e0a6fb784d5e967dd777", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b53f0396c95cef8c5246b01b4b756298511aa64/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b53f0396c95cef8c5246b01b4b756298511aa64/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=0b53f0396c95cef8c5246b01b4b756298511aa64", "patch": "@@ -492,6 +492,9 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n \t\t       \t\t   || IS_BK_REGNO(r))\n #define IS_INT_REGNO(r)           (IS_EXT_REGNO(r) || IS_STD_REGNO(r))\n #define IS_GROUP1_REGNO(r)        (IS_ADDR_OR_INDEX_REGNO(r) || IS_BK_REGNO(r))\n+#define IS_INT_CALL_SAVED_REGNO(r) (((r) == R4_REGNO) || ((r) == R5_REGNO) \\\n+                                    || ((r) == R8_REGNO))\n+#define IS_FLOAT_CALL_SAVED_REGNO(r) (((r) == R6_REGNO) || ((r) == R7_REGNO))\n \n #define IS_PSEUDO_REGNO(r)            ((r) >= FIRST_PSEUDO_REGISTER)\n #define IS_R0R1_OR_PSEUDO_REGNO(r)    (IS_R0R1_REGNO(r) || IS_PSEUDO_REGNO(r))\n@@ -639,8 +642,8 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n    registers.  */\n \n #define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE)\t\t              \\\n-     ((((REGNO) == R6_REGNO || (REGNO) == R7_REGNO) && ! ((MODE) == QFmode))  \\\n-      || (((REGNO) == R4_REGNO || (REGNO) == R5_REGNO || (REGNO == R8_REGNO)) \\\n+     ((IS_FLOAT_CALL_SAVED_REGNO (REGNO) && ! ((MODE) == QFmode))  \t      \\\n+      || (IS_INT_CALL_SAVED_REGNO (REGNO))\t\t\t\t      \\\n \t  && ! ((MODE) == QImode || (MODE) == HImode || (MODE) == Pmode)))\n \n /* Specify the modes required to caller save a given hard regno.  */\n@@ -1057,8 +1060,7 @@ enum reg_class\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n       offset += TARGET_PRESERVE_FLOAT\t\t\t\t\\\n-\t\t&& ((regno == R6_REGNO) || (regno == R7_REGNO)) \\\n-\t\t? 2 : 1;\t\t\t\t\t\\\n+\t\t&& IS_FLOAT_CALL_SAVED_REGNO (regno) ? 2 : 1;\t\\\n   (DEPTH) = -(offset + get_frame_size ());\t\t\t\\\n }\n \n@@ -1077,8 +1079,7 @@ enum reg_class\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n       offset += TARGET_PRESERVE_FLOAT\t\t\t\t\\\n-\t\t&& ((regno == R6_REGNO) || (regno == R7_REGNO)) \\\n-\t\t? 2 : 1;\t\t\t\t\t\\\n+\t\t&& IS_FLOAT_CALL_SAVED_REGNO (regno) ? 2 : 1;\t\\\n   (OFFSET) = -(offset + get_frame_size ());\t\t\t\\\n }\n "}]}