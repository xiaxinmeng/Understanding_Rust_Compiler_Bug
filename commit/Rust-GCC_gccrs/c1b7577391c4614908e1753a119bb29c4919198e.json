{"sha": "c1b7577391c4614908e1753a119bb29c4919198e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiNzU3NzM5MWM0NjE0OTA4ZTE3NTNhMTE5YmIyOWM0OTE5MTk4ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-19T18:56:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-19T18:56:16Z"}, "message": "i386.c (ix86_expand_builtin): Remove msk_mov variable...\n\n\t* config/i386/i386.c (ix86_expand_builtin): Remove msk_mov variable,\n\tdon't initialize it, don't use it for the case where it isn't\n\tprovable %{z} nor using the same argument, instead move merge\n\targument into a new pseudo and use that as target.  Formatting fixes.\n\nFrom-SVN: r242625", "tree": {"sha": "1a6ac06b78a3d9fb644c2a67201514957c3f000d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a6ac06b78a3d9fb644c2a67201514957c3f000d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b7577391c4614908e1753a119bb29c4919198e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b7577391c4614908e1753a119bb29c4919198e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b7577391c4614908e1753a119bb29c4919198e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b7577391c4614908e1753a119bb29c4919198e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddba26a41219bf9dfac0a7e4fcd727d3dd5f317e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddba26a41219bf9dfac0a7e4fcd727d3dd5f317e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddba26a41219bf9dfac0a7e4fcd727d3dd5f317e"}], "stats": {"total": 111, "additions": 55, "deletions": 56}, "files": [{"sha": "abec99d8d70f5057ea3c0e52afefd52a7db366a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b7577391c4614908e1753a119bb29c4919198e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b7577391c4614908e1753a119bb29c4919198e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1b7577391c4614908e1753a119bb29c4919198e", "patch": "@@ -1,3 +1,10 @@\n+2016-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_builtin): Remove msk_mov variable,\n+\tdon't initialize it, don't use it for the case where it isn't\n+\tprovable %{z} nor using the same argument, instead move merge\n+\targument into a new pseudo and use that as target.  Formatting fixes.\n+\n 2016-11-19  Jeff Law  <law@redhat.com>\n \n \tPR target/25111"}, {"sha": "5fd0d6a2cbb970495c535aa9422d962fec47a94d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 48, "deletions": 56, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b7577391c4614908e1753a119bb29c4919198e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b7577391c4614908e1753a119bb29c4919198e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c1b7577391c4614908e1753a119bb29c4919198e", "patch": "@@ -38220,14 +38220,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       rtx (*fcn) (rtx, rtx, rtx, rtx);\n       rtx (*fcn_mask) (rtx, rtx, rtx, rtx, rtx);\n       rtx (*fcn_maskz) (rtx, rtx, rtx, rtx, rtx, rtx);\n-      rtx (*msk_mov) (rtx, rtx, rtx, rtx);\n       int masked = 1;\n       machine_mode mode, wide_mode, nar_mode;\n \n       nar_mode  = V4SFmode;\n       mode      = V16SFmode;\n       wide_mode = V64SFmode;\n-      msk_mov   = gen_avx512f_loadv16sf_mask;\n       fcn_mask  = gen_avx5124fmaddps_4fmaddps_mask;\n       fcn_maskz = gen_avx5124fmaddps_4fmaddps_maskz;\n \n@@ -38270,7 +38268,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t  wide_mode = V64SImode;\n \t  fcn_mask  = gen_avx5124vnniw_vp4dpwssd_mask;\n \t  fcn_maskz = gen_avx5124vnniw_vp4dpwssd_maskz;\n-\t  msk_mov   = gen_avx512f_loadv16si_mask;\n \t  goto v4fma_expand;\n \n \tcase IX86_BUILTIN_4DPWSSDS_MASK:\n@@ -38279,7 +38276,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t  wide_mode = V64SImode;\n \t  fcn_mask  = gen_avx5124vnniw_vp4dpwssds_mask;\n \t  fcn_maskz = gen_avx5124vnniw_vp4dpwssds_maskz;\n-\t  msk_mov   = gen_avx512f_loadv16si_mask;\n \t  goto v4fma_expand;\n \n \tcase IX86_BUILTIN_4FMAPS_MASK:\n@@ -38295,11 +38291,11 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t    wide_reg = gen_reg_rtx (wide_mode);\n \t    for (i = 0; i < 4; i++)\n \t      {\n-\t        args[i] = CALL_EXPR_ARG (exp, i);\n+\t\targs[i] = CALL_EXPR_ARG (exp, i);\n \t\tops[i] = expand_normal (args[i]);\n \n-\t\temit_move_insn (gen_rtx_SUBREG (mode, wide_reg, (i) * 64),\n-\t\t\t\t  ops[i]);\n+\t\temit_move_insn (gen_rtx_SUBREG (mode, wide_reg, i * 64),\n+\t\t\t\tops[i]);\n \t      }\n \n \t    accum = expand_normal (CALL_EXPR_ARG (exp, 4));\n@@ -38318,7 +38314,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t      emit_insn (fcn (target, accum, wide_reg, mem));\n \t    else\n \t      {\n-\t        rtx merge, mask;\n+\t\trtx merge, mask;\n \t\tmerge = expand_normal (CALL_EXPR_ARG (exp, 6));\n \n \t\tmask = expand_normal (CALL_EXPR_ARG (exp, 7));\n@@ -38340,18 +38336,16 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t    merge = force_reg (mode, merge);\n \t\t    emit_insn (fcn_mask (target, wide_reg, mem, merge, mask));\n \t\t  }\n-\t        /* Merge with something unknown might happen if we z-mask w/ -O0.  */\n+\t\t/* Merge with something unknown might happen if we z-mask w/ -O0.  */\n \t\telse\n \t\t  {\n-\t\t    rtx tmp = target;\n-\t\t    emit_insn (fcn_mask (tmp, wide_reg, mem, tmp, mask));\n-\n-\t\t    target = force_reg (mode, merge);\n-\t\t    emit_insn (msk_mov (target, tmp, target, mask));\n+\t\t    target = gen_reg_rtx (mode);\n+\t\t    emit_move_insn (target, merge);\n+\t\t    emit_insn (fcn_mask (target, wide_reg, mem, target, mask));\n \t\t  }\n \t      }\n-\t      return target;\n-\t    }\n+\t    return target;\n+\t  }\n \n \tcase IX86_BUILTIN_4FNMASS:\n \t  fcn = gen_avx5124fmaddps_4fnmaddss;\n@@ -38366,7 +38360,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \tcase IX86_BUILTIN_4FNMASS_MASK:\n \t  fcn_mask = gen_avx5124fmaddps_4fnmaddss_mask;\n \t  fcn_maskz = gen_avx5124fmaddps_4fnmaddss_maskz;\n-\t  msk_mov   = gen_avx512vl_loadv4sf_mask;\n \t  goto s4fma_expand;\n \n \tcase IX86_BUILTIN_4FMASS_MASK:\n@@ -38380,22 +38373,21 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n \t    fcn_mask = gen_avx5124fmaddps_4fmaddss_mask;\n \t    fcn_maskz = gen_avx5124fmaddps_4fmaddss_maskz;\n-\t    msk_mov   = gen_avx512vl_loadv4sf_mask;\n \n s4fma_expand:\n \t    mode = V4SFmode;\n \t    wide_reg = gen_reg_rtx (V64SFmode);\n \t    for (i = 0; i < 4; i++)\n \t      {\n-\t\t rtx tmp;\n-\t\t args[i] = CALL_EXPR_ARG (exp, i);\n-\t\t ops[i] = expand_normal (args[i]);\n+\t\trtx tmp;\n+\t\targs[i] = CALL_EXPR_ARG (exp, i);\n+\t\tops[i] = expand_normal (args[i]);\n \n-\t\t tmp = gen_reg_rtx (SFmode);\n-\t\t emit_move_insn (tmp, gen_rtx_SUBREG (SFmode, ops[i], 0));\n+\t\ttmp = gen_reg_rtx (SFmode);\n+\t\temit_move_insn (tmp, gen_rtx_SUBREG (SFmode, ops[i], 0));\n \n-\t\t emit_move_insn (gen_rtx_SUBREG (V16SFmode, wide_reg, i * 64),\n-\t\t\t\t  gen_rtx_SUBREG (V16SFmode, tmp, 0));\n+\t\temit_move_insn (gen_rtx_SUBREG (V16SFmode, wide_reg, i * 64),\n+\t\t\t\tgen_rtx_SUBREG (V16SFmode, tmp, 0));\n \t      }\n \n \t    accum = expand_normal (CALL_EXPR_ARG (exp, 4));\n@@ -38414,37 +38406,37 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t      emit_insn (fcn (target, accum, wide_reg, mem));\n \t    else\n \t      {\n-\t\t rtx merge, mask;\n-\t\t merge = expand_normal (CALL_EXPR_ARG (exp, 6));\n-\n-\t\t mask = expand_normal (CALL_EXPR_ARG (exp, 7));\n-\n-\t\t if (CONST_INT_P (mask))\n-\t\t   mask = fixup_modeless_constant (mask, QImode);\n-\n-\t\t mask = force_reg (QImode, mask);\n-\n-\t\t if (GET_MODE (mask) != QImode)\n-\t\t   mask = gen_rtx_SUBREG (QImode, mask, 0);\n-\n-\t\t /* If merge is 0 then we're about to emit z-masked variant.  */\n-\t\t if (const0_operand (merge, mode))\n-\t\t   emit_insn (fcn_maskz (target, accum, wide_reg, mem, merge, mask));\n-\t\t /* If merge is the same as accum then emit merge-masked variant.  */\n-\t\t else if (CALL_EXPR_ARG (exp, 6) == CALL_EXPR_ARG (exp, 4))\n-\t\t   {\n-\t\t     merge = force_reg (mode, merge);\n-\t\t     emit_insn (fcn_mask (target, wide_reg, mem, merge, mask));\n-\t\t   }\n-\t\t /* Merge with something unknown might happen if we z-mask w/ -O0.  */\n-\t\t else\n-\t\t   {\n-\t\t     rtx tmp = target;\n-\t\t     emit_insn (fcn_mask (tmp, wide_reg, mem, tmp, mask));\n-\n-\t\t     target = force_reg (mode, merge);\n-\t\t     emit_insn (msk_mov (target, tmp, target, mask));\n-\t\t   }\n+\t\trtx merge, mask;\n+\t\tmerge = expand_normal (CALL_EXPR_ARG (exp, 6));\n+\n+\t\tmask = expand_normal (CALL_EXPR_ARG (exp, 7));\n+\n+\t\tif (CONST_INT_P (mask))\n+\t\t  mask = fixup_modeless_constant (mask, QImode);\n+\n+\t\tmask = force_reg (QImode, mask);\n+\n+\t\tif (GET_MODE (mask) != QImode)\n+\t\t  mask = gen_rtx_SUBREG (QImode, mask, 0);\n+\n+\t\t/* If merge is 0 then we're about to emit z-masked variant.  */\n+\t\tif (const0_operand (merge, mode))\n+\t\t  emit_insn (fcn_maskz (target, accum, wide_reg, mem, merge, mask));\n+\t\t/* If merge is the same as accum then emit merge-masked\n+\t\t   variant.  */\n+\t\telse if (CALL_EXPR_ARG (exp, 6) == CALL_EXPR_ARG (exp, 4))\n+\t\t  {\n+\t\t    merge = force_reg (mode, merge);\n+\t\t    emit_insn (fcn_mask (target, wide_reg, mem, merge, mask));\n+\t\t  }\n+\t\t/* Merge with something unknown might happen if we z-mask\n+\t\t   w/ -O0.  */\n+\t\telse\n+\t\t  {\n+\t\t    target = gen_reg_rtx (mode);\n+\t\t    emit_move_insn (target, merge);\n+\t\t    emit_insn (fcn_mask (target, wide_reg, mem, target, mask));\n+\t\t  }\n \t\t}\n \t      return target;\n \t    }"}]}