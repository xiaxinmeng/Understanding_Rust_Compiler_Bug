{"sha": "603aec6775d5191fafd57412364578db68432f74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzYWVjNjc3NWQ1MTkxZmFmZDU3NDEyMzY0NTc4ZGI2ODQzMmY3NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-23T16:14:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-23T16:14:28Z"}, "message": "Adjust extension types to use allocator_traits\n\nThis makes these extensions work with types meeting the Cpp17Allocator\nrequirements as well as the C++98 Allocator requirements.\n\n\t* include/backward/hash_set (hash_set): Use __alloc_traits.\n\t* include/backward/hashtable.h (_Hashtable): Likewise.\n\t* include/ext/alloc_traits.h (__alloc_traits::allocate): Add overload\n\ttaking a hint.\n\t* include/ext/extptr_allocator.h (_ExtPtr_allocator::allocate): Ignore\n\thint.\n\t* include/ext/slist (_Slist_base): Use __alloc_traits.\n\t* include/tr1/hashtable.h (_Hashtable): Likewise.\n\t* include/tr1/regex (match_results): Use vector::const_reference\n\tinstead of assuming the allocator defines it.\n\t* testsuite/backward/hash_map/23528.cc: Use allocator_traits in C++11.\n\t* testsuite/tr1/6_containers/unordered_map/capacity/29134-map.cc: Use\n\t__gnu_test::max_size.\n\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n\t29134-multimap.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_multiset/capacity/\n\t29134-multiset.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_set/capacity/29134-set.cc:\n\tLikewise.\n\nFrom-SVN: r277335", "tree": {"sha": "eecdf7326f959268b1d3a3dc997d14369a6b8f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eecdf7326f959268b1d3a3dc997d14369a6b8f5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603aec6775d5191fafd57412364578db68432f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603aec6775d5191fafd57412364578db68432f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603aec6775d5191fafd57412364578db68432f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603aec6775d5191fafd57412364578db68432f74/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccbd21ded6eae4e099ccb1b5952dd3337875087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ccbd21ded6eae4e099ccb1b5952dd3337875087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ccbd21ded6eae4e099ccb1b5952dd3337875087"}], "stats": {"total": 134, "additions": 97, "deletions": 37}, "files": [{"sha": "9f19e4f83196dd2b8d4e0b9b08d29ba4bc86d2df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -1,3 +1,25 @@\n+2019-10-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/backward/hash_set (hash_set): Use __alloc_traits.\n+\t* include/backward/hashtable.h (_Hashtable): Likewise.\n+\t* include/ext/alloc_traits.h (__alloc_traits::allocate): Add overload\n+\ttaking a hint.\n+\t* include/ext/extptr_allocator.h (_ExtPtr_allocator::allocate): Ignore\n+\thint.\n+\t* include/ext/slist (_Slist_base): Use __alloc_traits.\n+\t* include/tr1/hashtable.h (_Hashtable): Likewise.\n+\t* include/tr1/regex (match_results): Use vector::const_reference\n+\tinstead of assuming the allocator defines it.\n+\t* testsuite/backward/hash_map/23528.cc: Use allocator_traits in C++11.\n+\t* testsuite/tr1/6_containers/unordered_map/capacity/29134-map.cc: Use\n+\t__gnu_test::max_size.\n+\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n+\t29134-multimap.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered_multiset/capacity/\n+\t29134-multiset.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered_set/capacity/29134-set.cc:\n+\tLikewise.\n+\n 2019-10-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/util/testsuite_abi.h: Restore use of tr1/unordered_map"}, {"sha": "7f743fdf3afeb5ba79077d3bfa428fa2d5bbcd66", "filename": "libstdc++-v3/include/backward/hash_set", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -88,6 +88,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_class_requires3(_HashFcn, size_t, _Value, _UnaryFunctionConcept)\n       __glibcxx_class_requires3(_EqualKey, _Value, _Value, _BinaryPredicateConcept)\n \n+      typedef __alloc_traits<_Alloc> _Alloc_traits;\n+\n     private:\n       typedef hashtable<_Value, _Value, _HashFcn, _Identity<_Value>,\n \t\t\t_EqualKey, _Alloc> _Ht;\n@@ -101,10 +103,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       \n       typedef typename _Ht::size_type size_type;\n       typedef typename _Ht::difference_type difference_type;\n-      typedef typename _Alloc::pointer pointer;\n-      typedef typename _Alloc::const_pointer const_pointer;\n-      typedef typename _Alloc::reference reference;\n-      typedef typename _Alloc::const_reference const_reference;\n+      typedef typename _Alloc_traits::pointer pointer;\n+      typedef typename _Alloc_traits::const_pointer const_pointer;\n+      typedef typename _Alloc_traits::reference reference;\n+      typedef typename _Alloc_traits::const_reference const_reference;\n       \n       typedef typename _Ht::const_iterator iterator;\n       typedef typename _Ht::const_iterator const_iterator;"}, {"sha": "cfb9cf957d24c702d107698e6b46531ba7da4962", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -63,6 +63,7 @@\n #include <iterator>\n #include <algorithm>\n #include <bits/stl_function.h>\n+#include <ext/alloc_traits.h>\n #include <backward/hash_fun.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n@@ -280,14 +281,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Hashtable_node<_Val> _Node;\n \n     public:\n-      typedef typename _Alloc::template rebind<value_type>::other allocator_type;\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+\trebind<value_type>::other allocator_type;\n+\n       allocator_type\n       get_allocator() const\n       { return _M_node_allocator; }\n \n     private:\n-      typedef typename _Alloc::template rebind<_Node>::other _Node_Alloc;\n-      typedef typename _Alloc::template rebind<_Node*>::other _Nodeptr_Alloc;\n+      typedef __gnu_cxx::__alloc_traits<allocator_type> _Alloc_traits;\n+      typedef typename _Alloc_traits::template rebind<_Node>::other\n+\t_Node_Alloc;\n+      typedef typename _Alloc_traits::template rebind<_Node*>::other\n+\t_Nodeptr_Alloc;\n       typedef std::vector<_Node*, _Nodeptr_Alloc> _Vector_type;\n \n       _Node_Alloc _M_node_allocator;\n@@ -608,7 +614,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__n->_M_next = 0;\n \t__try\n \t  {\n-\t    this->get_allocator().construct(&__n->_M_val, __obj);\n+\t    allocator_type __a = this->get_allocator();\n+\t    _Alloc_traits::construct(__a, &__n->_M_val, __obj);\n \t    return __n;\n \t  }\n \t__catch(...)\n@@ -621,7 +628,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       _M_delete_node(_Node* __n)\n       {\n-\tthis->get_allocator().destroy(&__n->_M_val);\n+\tallocator_type __a = this->get_allocator();\n+\t_Alloc_traits::destroy(__a, &__n->_M_val);\n \t_M_put_node(__n);\n       }\n       "}, {"sha": "65340eb7acc33996904502e38dbf41dfeca41c56", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -132,6 +132,11 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n     allocate(_Alloc& __a, size_type __n)\n     { return __a.allocate(__n); }\n \n+    template<typename _Hint>\n+      _GLIBCXX_NODISCARD static pointer\n+      allocate(_Alloc& __a, size_type __n, _Hint __hint)\n+      { return __a.allocate(__n, __hint); }\n+\n     static void deallocate(_Alloc& __a, pointer __p, size_type __n)\n     { __a.deallocate(__p, __n); }\n "}, {"sha": "4e86fef81e4ad58ba4084721050664d16e612e81", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -92,8 +92,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_pointer address(const_reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n \n-      _GLIBCXX_NODISCARD pointer allocate(size_type __n, void* __hint = 0)\n-      { return _M_real_alloc.allocate(__n,__hint); }\n+      _GLIBCXX_NODISCARD pointer allocate(size_type __n, const void* = 0)\n+      { return _M_real_alloc.allocate(__n); }\n \n       void deallocate(pointer __p, size_type __n)\n       { _M_real_alloc.deallocate(__p.get(), __n); }"}, {"sha": "cbdfae0bd909915cfe1f37694669f8430c7a6dd3", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -49,6 +49,7 @@\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/concept_check.h>\n+#include <ext/alloc_traits.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -251,7 +252,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Slist_node<_Tp>* __next = (_Slist_node<_Tp>*) (__pos->_M_next);\n \t_Slist_node_base* __next_next = __next->_M_next;\n \t__pos->_M_next = __next_next;\n-\tget_allocator().destroy(&__next->_M_data);\n+\tallocator_type __a = get_allocator();\n+\t__alloc_traits<allocator_type>::destroy(__a, &__next->_M_data);\n \t_M_put_node(__next);\n \treturn __next_next;\n       }\n@@ -268,7 +270,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  _Slist_node<_Tp>* __tmp = __cur;\n \t  __cur = (_Slist_node<_Tp>*) __cur->_M_next;\n-\t  get_allocator().destroy(&__tmp->_M_data);\n+\t  allocator_type __a = get_allocator();\n+\t  __alloc_traits<allocator_type>::destroy(__a, &__tmp->_M_data);\n \t  _M_put_node(__tmp);\n \t}\n       __before_first->_M_next = __last_node;\n@@ -318,7 +321,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Node* __node = this->_M_get_node();\n \t__try\n \t  {\n-\t    get_allocator().construct(&__node->_M_data, __x);\n+\t    allocator_type __a = get_allocator();\n+\t    __alloc_traits<allocator_type>::construct(__a, &__node->_M_data,\n+\t\t\t\t\t\t      __x);\n \t    __node->_M_next = 0;\n \t  }\n \t__catch(...)\n@@ -335,7 +340,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Node* __node = this->_M_get_node();\n \t__try\n \t  {\n-\t    get_allocator().construct(&__node->_M_data, value_type());\n+\t    allocator_type __a = get_allocator();\n+\t    __alloc_traits<allocator_type>::construct(__a, &__node->_M_data,\n+\t\t\t\t\t\t      value_type());\n \t    __node->_M_next = 0;\n \t  }\n \t__catch(...)\n@@ -481,7 +488,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t_Node* __node = (_Node*) this->_M_head._M_next;\n \tthis->_M_head._M_next = __node->_M_next;\n-\tget_allocator().destroy(&__node->_M_data);\n+\tallocator_type __a = get_allocator();\n+\t__alloc_traits<allocator_type>::destroy(__a, &__node->_M_data);\n \tthis->_M_put_node(__node);\n       }\n "}, {"sha": "e6455ebc3f264e8850f6966b012dc01d0ba78a7c", "filename": "libstdc++-v3/include/tr1/hashtable.h", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -126,6 +126,8 @@ namespace tr1\n \t\t\t\t\t    __constant_iterators,\n \t\t\t\t\t    __unique_keys> >\n     {\n+      typedef __gnu_cxx::__alloc_traits<_Allocator> _Alloc_traits;\n+\n     public:\n       typedef _Allocator                                  allocator_type;\n       typedef _Value                                      value_type;\n@@ -135,10 +137,10 @@ namespace tr1\n       // hasher, if present, comes from _Hash_code_base.\n       typedef typename _Allocator::difference_type        difference_type;\n       typedef typename _Allocator::size_type              size_type;\n-      typedef typename _Allocator::pointer                pointer;\n-      typedef typename _Allocator::const_pointer          const_pointer;\n-      typedef typename _Allocator::reference              reference;\n-      typedef typename _Allocator::const_reference        const_reference;\n+      typedef typename _Alloc_traits::pointer             pointer;\n+      typedef typename _Alloc_traits::const_pointer       const_pointer;\n+      typedef typename _Alloc_traits::reference           reference;\n+      typedef typename _Alloc_traits::const_reference     const_reference;\n \n       typedef __detail::_Node_iterator<value_type, __constant_iterators,\n \t\t\t\t       __cache_hash_code>\n@@ -162,13 +164,13 @@ namespace tr1\n \n     private:\n       typedef __detail::_Hash_node<_Value, __cache_hash_code> _Node;\n-      typedef typename _Allocator::template rebind<_Node>::other\n-\t\t\t\t\t\t\t_Node_allocator_type;\n-      typedef typename _Allocator::template rebind<_Node*>::other\n-\t\t\t\t\t\t\t_Bucket_allocator_type;\n+      typedef typename _Alloc_traits::template rebind<_Node>::other\n+\t\t\t\t\t\t      _Node_allocator_type;\n+      typedef typename _Alloc_traits::template rebind<_Node*>::other\n+\t\t\t\t\t\t      _Bucket_allocator_type;\n \n-      typedef typename _Allocator::template rebind<_Value>::other\n-\t\t\t\t\t\t\t_Value_allocator_type;\n+      typedef typename _Alloc_traits::template rebind<_Value>::other\n+\t\t\t\t\t\t      _Value_allocator_type;\n \n       _Node_allocator_type   _M_node_allocator;\n       _Node**                _M_buckets;\n@@ -259,7 +261,10 @@ namespace tr1\n \n       size_type\n       max_size() const\n-      { return _M_node_allocator.max_size(); }\n+      {\n+\ttypedef __gnu_cxx::__alloc_traits<_Node_allocator_type> _Traits;\n+\treturn _Traits::max_size(_M_node_allocator);\n+      }\n \n       // Observers\n       key_equal"}, {"sha": "01c85e996239f3cc2346eeca1af47b1c28c05506", "filename": "libstdc++-v3/include/tr1/regex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -1789,7 +1789,7 @@ namespace regex_constants\n        */\n       //@{\n       typedef sub_match<_Bi_iter>                             value_type;\n-      typedef typename _Allocator::const_reference            const_reference;\n+      typedef typename _Base_type::const_reference            const_reference;\n       typedef const_reference                                 reference;\n       typedef typename _Base_type::const_iterator             const_iterator;\n       typedef const_iterator                                  iterator;"}, {"sha": "712a65d11b938b6e2db42231af8de640ad7c82bf", "filename": "libstdc++-v3/testsuite/backward/hash_map/23528.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F23528.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F23528.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F23528.cc?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -30,9 +30,13 @@ void test01()\n \n   __gnu_cxx::hash_map<int, int>::value_type *y = a.allocate(1);\n \n+#if __cplusplus >= 201103L\n+  std::allocator_traits<decltype(a)>::construct(a, y, *m.begin());\n+  std::allocator_traits<decltype(a)>::destroy(a, y);\n+#else\n   a.construct(y, *m.begin());\n-\n   a.destroy(y);\n+#endif\n   a.deallocate(y, 1);\n }\n "}, {"sha": "0e01c0411fb586642353b2ecc3b069a5864f7e5a", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_map/capacity/29134-map.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Fcapacity%2F29134-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Fcapacity%2F29134-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Fcapacity%2F29134-map.cc?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -19,14 +19,16 @@\n \n #include <tr1/unordered_map>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::tr1::unordered_map<int, int> um;\n \n-  VERIFY( (um.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n- \t   std::pair<const int, int>, false> >().max_size()));\n+  std::allocator<std::tr1::__detail::_Hash_node<std::pair<const int, int>,\n+\t\t\t\t\t\tfalse> > a;\n+  VERIFY( um.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "f38c8df5c26e5c787989ee44508f07b9cef14cb8", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multimap/capacity/29134-multimap.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Fcapacity%2F29134-multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Fcapacity%2F29134-multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Fcapacity%2F29134-multimap.cc?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -19,14 +19,16 @@\n \n #include <tr1/unordered_map>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::tr1::unordered_multimap<int, int> umm;\n \n-  VERIFY( (umm.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n- \t   std::pair<const int, int>, false> >().max_size()) );\n+  std::allocator<std::tr1::__detail::_Hash_node<std::pair<const int, int>,\n+\t\t\t\t\t\tfalse> > a;\n+  VERIFY( umm.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "01a2c00c18b466a316ace72f27b4cebccea398dd", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multiset/capacity/29134-multiset.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Fcapacity%2F29134-multiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Fcapacity%2F29134-multiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Fcapacity%2F29134-multiset.cc?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -19,14 +19,15 @@\n \n #include <tr1/unordered_set>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::tr1::unordered_multiset<int> ums;\n \n-  VERIFY( (ums.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n- \t   int, false> >().max_size()) );\n+  std::allocator<std::tr1::__detail::_Hash_node<int, false> > a;\n+  VERIFY( ums.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "5dd133265ea1dd88c095febd1a40463b16d43ad5", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_set/capacity/29134-set.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Fcapacity%2F29134-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aec6775d5191fafd57412364578db68432f74/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Fcapacity%2F29134-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Fcapacity%2F29134-set.cc?ref=603aec6775d5191fafd57412364578db68432f74", "patch": "@@ -19,14 +19,15 @@\n \n #include <tr1/unordered_set>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::tr1::unordered_set<int> us;\n \n-  VERIFY( (us.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n- \t   int, false> >().max_size()) );\n+  std::allocator<std::tr1::__detail::_Hash_node<int, false> > a;\n+  VERIFY( us.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}]}