{"sha": "c89524a8436cd95f5b505a1cdf2043173111bdb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5NTI0YTg0MzZjZDk1ZjViNTA1YTFjZGYyMDQzMTczMTExYmRiMw==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-02-18T03:02:04Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-02-18T03:02:04Z"}, "message": "clarify -fno-globals docs\n\nFrom-SVN: r25277", "tree": {"sha": "cf3a4d5559a8d88826fcd515bd75791ee6410cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf3a4d5559a8d88826fcd515bd75791ee6410cb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c89524a8436cd95f5b505a1cdf2043173111bdb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89524a8436cd95f5b505a1cdf2043173111bdb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89524a8436cd95f5b505a1cdf2043173111bdb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89524a8436cd95f5b505a1cdf2043173111bdb3/comments", "author": null, "committer": null, "parents": [{"sha": "3fab021b3488f15e655c0cb8bcf0f36f6b3de0f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fab021b3488f15e655c0cb8bcf0f36f6b3de0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fab021b3488f15e655c0cb8bcf0f36f6b3de0f2"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "160cb6711ea32143b0c52cb588d8e2b00da0aa7f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89524a8436cd95f5b505a1cdf2043173111bdb3/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89524a8436cd95f5b505a1cdf2043173111bdb3/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=c89524a8436cd95f5b505a1cdf2043173111bdb3", "patch": "@@ -1,3 +1,7 @@\n+1999-02-18  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* g77.texi: Clarify -fno-globals vs. -Wno-globals.\n+\n 1999-02-18  Craig Burley  <craig@jcb-sc.com>\n \n \t* intdoc.in (LOG10): Fix typo."}, {"sha": "8a3749fee28614d0a0a4afe659e82a2f75d479f0", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89524a8436cd95f5b505a1cdf2043173111bdb3/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89524a8436cd95f5b505a1cdf2043173111bdb3/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=c89524a8436cd95f5b505a1cdf2043173111bdb3", "patch": "@@ -3282,6 +3282,8 @@ arguments.\n @item -fno-globals\n @cindex global names, warning\n @cindex warnings, global names\n+@cindex in-line code\n+@cindex compilation, in-line\n Disable diagnostics about inter-procedural\n analysis problems, such as disagreements about the\n type of a function or a procedure's argument,\n@@ -3298,9 +3300,8 @@ code that would otherwise be diagnosed.\n \n As such, this option might be quite useful when\n compiling existing, ``working'' code that happens\n-to have a few bugs that do not generally show\n-themselves, but @code{g77} exposes via a\n-diagnostic.\n+to have a few bugs that do not generally show themselves,\n+but which @code{g77} diagnoses.\n \n Use of this option therefore has the effect of\n instructing @code{g77} to behave more like it did\n@@ -3314,7 +3315,11 @@ Without this option, @code{g77} defaults to performing\n the potentially inlining procedures as it started doing\n in version 0.5.20, but as of version 0.5.21, it also\n diagnoses disagreements that might cause such inlining\n-to crash the compiler.\n+to crash the compiler as (fatal) errors,\n+and warns about similar disagreements\n+that are currently believed to not\n+likely to result in the compiler later crashing\n+or producing incorrect code.\n @end table\n \n @xref{Code Gen Options,,Options for Code Generation Conventions,\n@@ -15208,29 +15213,54 @@ Argument #@var{n} of @var{name} is @dots{}\n @end smallexample\n \n These messages all identify disagreements about the\n-global procedure named @var{name} among different program\n-units (usually including @var{name} itself).\n-\n-These disagreements, if not diagnosed, could result in a\n-compiler crash if the compiler attempted to inline a reference\n-to @var{name} within a calling program unit that disagreed\n-with the @var{name} program unit regarding whether the\n-procedure is a subroutine or function, the type of the\n-return value of the procedure (if it is a function), the\n-number of arguments the procedure accepts, or the type\n-of each argument.\n-\n-Such disagreements @emph{should} be fixed in the Fortran\n-code itself.\n-However, if that is not immediately practical, and the code\n-has been working for some time, it is possible it will work\n-when compiled by @code{g77} with the @samp{-fno-globals} option.\n-\n-The @samp{-fno-globals} option disables these diagnostics, and\n-also disables all inlining of references to global procedures\n-to avoid compiler crashes.\n-The diagnostics are actually produced, but as warnings, unless\n-the @samp{-Wno-globals} option also is specified.\n+global procedure named @var{name} among different program units\n+(usually including @var{name} itself).\n+\n+Whether a particular disagreement is reported\n+as a warning or an error\n+can depend on the relative order\n+of the disagreeing portions of the source file.\n+\n+Disagreements between a procedure invocation\n+and the @emph{subsequent} procedure itself\n+are, usually, diagnosed as errors\n+when the procedure itself @emph{precedes} the invocation.\n+Other disagreements are diagnosed via warnings.\n+\n+@cindex forward references\n+@cindex in-line code\n+@cindex compilation, in-line\n+This distinction, between warnings and errors,\n+is due primarily to the present tendency of the @code{gcc} back end\n+to inline only those procedure invocations that are\n+@emph{preceded} by the corresponding procedure definitions.\n+If the @code{gcc} back end is changed\n+to inline ``forward references'',\n+in which invocations precede definitions,\n+the @code{g77} front end will be changed\n+to treat both orderings as errors, accordingly.\n+\n+The sorts of disagreements that are diagnosed by @code{g77} include\n+whether a procedure is a subroutine or function;\n+if it is a function, the type of the return value of the procedure;\n+the number of arguments the procedure accepts;\n+and the type of each argument.\n+\n+Disagreements regarding global names among program units\n+in a Fortran program @emph{should} be fixed in the code itself.\n+However, if that is not immediately practical,\n+and the code has been working for some time,\n+it is possible it will work\n+when compiled with the @samp{-fno-globals} option.\n+\n+The @samp{-fno-globals} option\n+causes these diagnostics to all be warnings\n+and disables all inlining of references to global procedures\n+(to avoid subsequent compiler crashes and bad-code generation).\n+Use of the @samp{-Wno-globals} option as well as @samp{-fno-globals}\n+suppresses all of these diagnostics.\n+(@samp{-Wno-globals} by itself disables only the warnings,\n+not the errors.)\n \n After using @samp{-fno-globals} to work around these problems,\n it is wise to stop using that option and address them by fixing"}]}