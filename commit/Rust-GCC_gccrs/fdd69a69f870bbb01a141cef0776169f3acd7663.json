{"sha": "fdd69a69f870bbb01a141cef0776169f3acd7663", "node_id": "C_kwDOANBUbNoAKGZkZDY5YTY5Zjg3MGJiYjAxYTE0MWNlZjA3NzYxNjlmM2FjZDc2NjM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T13:24:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T14:04:03Z"}, "message": "Update AttrInput with AttrInputType\n\nThis allows us to switch based on the type which can be used for more complex usage of attributes such as lang_item parsing.\n\nAddresses #742", "tree": {"sha": "0060d8c88da79843b8552f1c768c0dfaf6dd2bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0060d8c88da79843b8552f1c768c0dfaf6dd2bc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdd69a69f870bbb01a141cef0776169f3acd7663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd69a69f870bbb01a141cef0776169f3acd7663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd69a69f870bbb01a141cef0776169f3acd7663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd69a69f870bbb01a141cef0776169f3acd7663/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "766f989251a87673d80831521fac002e0263f122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766f989251a87673d80831521fac002e0263f122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766f989251a87673d80831521fac002e0263f122"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "05779e7be0ba640ebd41fae87e140dfb4585d448", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd69a69f870bbb01a141cef0776169f3acd7663/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd69a69f870bbb01a141cef0776169f3acd7663/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=fdd69a69f870bbb01a141cef0776169f3acd7663", "patch": "@@ -542,6 +542,13 @@ struct Attribute\n class AttrInput\n {\n public:\n+  enum AttrInputType\n+  {\n+    LITERAL,\n+    META_ITEM,\n+    TOKEN_TREE,\n+  };\n+\n   virtual ~AttrInput () {}\n \n   // Unique pointer custom clone function\n@@ -564,6 +571,8 @@ class AttrInput\n   // Returns whether attr input has been parsed to meta item syntax.\n   virtual bool is_meta_item () const = 0;\n \n+  virtual AttrInputType get_attr_input_type () const = 0;\n+\n protected:\n   // pure virtual clone implementation\n   virtual AttrInput *clone_attr_input_impl () const = 0;\n@@ -650,6 +659,11 @@ class AttrInputMetaItemContainer : public AttrInput\n \n   bool check_cfg_predicate (const Session &session) const override;\n \n+  AttrInputType get_attr_input_type () const final override\n+  {\n+    return AttrInput::AttrInputType::META_ITEM;\n+  }\n+\n   // Clones this object.\n   std::unique_ptr<AttrInputMetaItemContainer>\n   clone_attr_input_meta_item_container () const\n@@ -767,6 +781,11 @@ class DelimTokenTree : public TokenTree, public AttrInput\n   }\n \n   bool is_meta_item () const override { return false; }\n+\n+  AttrInputType get_attr_input_type () const final override\n+  {\n+    return AttrInput::AttrInputType::TOKEN_TREE;\n+  }\n };\n \n /* Forward decl - definition moved to rust-expr.h as it requires LiteralExpr to"}, {"sha": "3463f5a2f1cac2dabe5e27ff6d86adb518b11ce3", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd69a69f870bbb01a141cef0776169f3acd7663/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd69a69f870bbb01a141cef0776169f3acd7663/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=fdd69a69f870bbb01a141cef0776169f3acd7663", "patch": "@@ -102,13 +102,7 @@ class LiteralExpr : public ExprWithoutBlock\n // Literal expression attribute body (non-macro attribute)\n class AttrInputLiteral : public AttrInput\n {\n-  // Literal expression WITHOUT SUFFIX\n-  // std::unique_ptr<LiteralExpr> literal_expr;\n-  LiteralExpr\n-    literal_expr; // as not using polymorphic behaviour, doesn't require pointer\n-  // TODO: will require pointer if LiteralExpr is changed to have subclassing\n-\n-  // TODO: should this store location data?\n+  LiteralExpr literal_expr;\n \n public:\n   AttrInputLiteral (LiteralExpr lit_expr) : literal_expr (std::move (lit_expr))\n@@ -127,6 +121,13 @@ class AttrInputLiteral : public AttrInput\n \n   bool is_meta_item () const override { return false; }\n \n+  LiteralExpr &get_literal () { return literal_expr; }\n+\n+  AttrInputType get_attr_input_type () const final override\n+  {\n+    return AttrInput::AttrInputType::LITERAL;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}]}