{"sha": "0c179631b21d149074ed2606201fe0cede6bf412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxNzk2MzFiMjFkMTQ5MDc0ZWQyNjA2MjAxZmUwY2VkZTZiZjQxMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-06-10T16:09:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-06-10T16:09:23Z"}, "message": "override.m4: Remove obsolete (<2.64) definitions.\n\n2010-06-10  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* override.m4: Remove obsolete (<2.64) definitions.\n\nFrom-SVN: r160558", "tree": {"sha": "64b1a239b7c266b7b0218b7290a8329775bb253e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b1a239b7c266b7b0218b7290a8329775bb253e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c179631b21d149074ed2606201fe0cede6bf412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c179631b21d149074ed2606201fe0cede6bf412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c179631b21d149074ed2606201fe0cede6bf412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c179631b21d149074ed2606201fe0cede6bf412/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff534e89febd3c6f05ba46b56b4e5339b679702f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff534e89febd3c6f05ba46b56b4e5339b679702f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff534e89febd3c6f05ba46b56b4e5339b679702f"}], "stats": {"total": 237, "additions": 12, "deletions": 225}, "files": [{"sha": "78259e63597dde711537e38b9cec3499caa73cd7", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c179631b21d149074ed2606201fe0cede6bf412/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c179631b21d149074ed2606201fe0cede6bf412/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=0c179631b21d149074ed2606201fe0cede6bf412", "patch": "@@ -1,3 +1,7 @@\n+2010-06-10  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* override.m4: Remove obsolete (<2.64) definitions.\n+\n 2010-06-09  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR bootstrap/43170"}, {"sha": "fc2d5272d7498a15049d5e273388f98c42af7177", "filename": "config/override.m4", "status": "modified", "additions": 8, "deletions": 225, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c179631b21d149074ed2606201fe0cede6bf412/config%2Foverride.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c179631b21d149074ed2606201fe0cede6bf412/config%2Foverride.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Foverride.m4?ref=0c179631b21d149074ed2606201fe0cede6bf412", "patch": "@@ -1,9 +1,5 @@\n-dnl Fix Autoconf-2.59 bugs: by overriding broken internal\n-dnl Autoconf macros with backports of the 2.60+ fix.\n-dnl - AC_CONFIG_SUBDIRS whitespace mangling,\n-dnl - more lenient precious variable checks\n-dnl - better configure error message\n-dnl - reliance on non-Posix m4wrap (M4 1.6 or newer implement FIFO)\n+dnl Fix Autoconf bugs by overriding broken internal Autoconf\n+dnl macros with backports of fixes from newer releases.\n dnl\n dnl The override bits of this file should be a no-op for the newest\n dnl Autoconf version, which means they can be removed once the complete\n@@ -12,6 +8,9 @@ dnl\n dnl The _GCC_AUTOCONF_VERSION_TEST ensures that exactly the desired\n dnl Autoconf version is used.  It should be kept for consistency.\n \n+dnl Use ifdef/ifelse over m4_ifdef/m4_ifelse to be clean for 2.13.\n+ifdef([m4_PACKAGE_VERSION], [\n+\n dnl Provide m4_copy_force and m4_rename_force for old Autoconf versions.\n \n m4_ifndef([m4_copy_force],\n@@ -22,17 +21,7 @@ m4_ifndef([m4_rename_force],\n [m4_define([m4_rename_force],\n [m4_ifdef([$2], [m4_undefine([$2])])m4_rename($@)])])\n \n-dnl m4_PACKAGE_VERSION is an undocumented Autoconf macro.\n-dnl We use it because this fix is intended for 2.59 only.\n-dnl A feature test for the broken AC_CONFIG_SUBDIRS instead\n-dnl would be better but is tricky.\n-dnl\n-dnl Use ifdef/ifelse over m4_ifdef/m4_ifelse to be clean for 2.13.\n-dnl Redefine AC_CONFIG_SUBDIRS so aclocal pulls in this file\n-dnl when needed.\n-\n-ifdef([m4_PACKAGE_VERSION],\n-[dnl AC_DEFUN a commonly used macro so this file is picked up.\n+dnl AC_DEFUN a commonly used macro so this file is picked up.\n m4_copy([AC_PREREQ], [_AC_PREREQ])\n AC_DEFUN([AC_PREREQ], [frob])\n m4_copy_force([_AC_PREREQ], [AC_PREREQ])\n@@ -59,220 +48,12 @@ _GCC_AUTOCONF_VERSION_CHECK\n ])\n \n \n-dnl Turn AC_DISABLE_OPTION_CHECKING into a no-op if not defined.\n-m4_ifndef([AC_DISABLE_OPTION_CHECKING],\n-  [m4_define([AC_DISABLE_OPTION_CHECKING])])\n-\n-\n dnl Fix 2.64 cross compile detection for AVR and RTEMS\n dnl by not trying to compile fopen.\n m4_if(m4_defn([m4_PACKAGE_VERSION]), [2.64],\n   [m4_foreach([_GCC_LANG], [C, C++, Fortran, Fortran 77],\n      [m4_define([_AC_LANG_IO_PROGRAM(]_GCC_LANG[)], m4_defn([AC_LANG_PROGRAM(]_GCC_LANG[)]))])])\n \n-\n-m4_version_prereq([2.60],, [\n-dnl We use $ac_pwd in some of the overrides below; ensure its definition\n-m4_divert_push([PARSE_ARGS])dnl\n-ac_pwd=`pwd`\n-m4_divert_pop([PARSE_ARGS])dnl\n-])\n-\n-\n-m4_version_prereq([2.60],, [\n-\n-# _AC_OUTPUT_SUBDIRS\n-# ------------------\n-# This is a subroutine of AC_OUTPUT, but it does not go into\n-# config.status, rather, it is called after running config.status.\n-m4_define([_AC_OUTPUT_SUBDIRS],\n-[\n-#\n-# CONFIG_SUBDIRS section, as fixed in confsubdir.m4.\n-#\n-if test \"$no_recursion\" != yes; then\n-\n-  # Remove --cache-file and --srcdir arguments so they do not pile up.\n-  ac_sub_configure_args=\n-  ac_prev=\n-  eval \"set x $ac_configure_args\"\n-  shift\n-  for ac_arg\n-  do\n-    if test -n \"$ac_prev\"; then\n-      ac_prev=\n-      continue\n-    fi\n-    case $ac_arg in\n-    -cache-file | --cache-file | --cache-fil | --cache-fi \\\n-    | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)\n-      ac_prev=cache_file ;;\n-    -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \\\n-    | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* \\\n-    | --c=*)\n-      ;;\n-    --config-cache | -C)\n-      ;;\n-    -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)\n-      ac_prev=srcdir ;;\n-    -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)\n-      ;;\n-    -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)\n-      ac_prev=prefix ;;\n-    -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)\n-      ;;\n-    *)\n-      case $ac_arg in\n-      *\\'*) ac_arg=`echo \"$ac_arg\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n-      esac\n-      ac_sub_configure_args=\"$ac_sub_configure_args '$ac_arg'\" ;;\n-    esac\n-  done\n-\n-  # Always prepend --prefix to ensure using the same prefix\n-  # in subdir configurations.\n-  ac_arg=\"--prefix=$prefix\"\n-  case $ac_arg in\n-  *\\'*) ac_arg=`echo \"$ac_arg\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n-  esac\n-  ac_sub_configure_args=\"$ac_arg $ac_sub_configure_args\"\n-\n-  ac_popdir=`pwd`\n-  for ac_dir in : $subdirs; do test \"x$ac_dir\" = x: && continue\n-\n-    # Do not complain, so a configure script can configure whichever\n-    # parts of a large source tree are present.\n-    test -d \"$srcdir/$ac_dir\" || continue\n-\n-    AC_MSG_NOTICE([configuring in $ac_dir])\n-    AS_MKDIR_P([\"$ac_dir\"])\n-    _AC_SRCPATHS([\"$ac_dir\"])\n-\n-    cd \"$ac_dir\"\n-\n-    # Check for guested configure; otherwise get Cygnus style configure.\n-    if test -f \"$ac_srcdir/configure.gnu\"; then\n-      ac_sub_configure=$ac_srcdir/configure.gnu\n-    elif test -f \"$ac_srcdir/configure\"; then\n-      ac_sub_configure=$ac_srcdir/configure\n-    elif test -f \"$ac_srcdir/configure.in\"; then\n-      # This should be Cygnus configure.\n-      ac_sub_configure=$ac_aux_dir/configure\n-    else\n-      AC_MSG_WARN([no configuration information is in $ac_dir])\n-      ac_sub_configure=\n-    fi\n-\n-    # The recursion is here.\n-    if test -n \"$ac_sub_configure\"; then\n-      # Make the cache file name correct relative to the subdirectory.\n-      case $cache_file in\n-      [[\\\\/]]* | ?:[[\\\\/]]* ) ac_sub_cache_file=$cache_file ;;\n-      *) # Relative path.\n-\tac_sub_cache_file=$ac_top_builddir$cache_file ;;\n-      esac\n-\n-      AC_MSG_NOTICE([running $SHELL $ac_sub_configure $ac_sub_configure_args --cache-file=$ac_sub_cache_file --srcdir=$ac_srcdir])\n-      # The eval makes quoting arguments work.\n-      eval \"\\$SHELL \\\"\\$ac_sub_configure\\\" $ac_sub_configure_args \\\n-\t   --cache-file=\\\"\\$ac_sub_cache_file\\\" --srcdir=\\\"\\$ac_srcdir\\\"\" ||\n-\tAC_MSG_ERROR([$ac_sub_configure failed for $ac_dir])\n-    fi\n-\n-    cd \"$ac_popdir\"\n-  done\n-fi\n-])# _AC_OUTPUT_SUBDIRS\n-])\n-\n-m4_version_prereq([2.63],, [\n-\n-# _AC_ARG_VAR_VALIDATE\n-# --------------------\n-# The code is the same as autoconf 2.59, but with a more lenient check\n-# on precious variables and an output of pwd that have been added in\n-# autoconf 2.62.\n-m4_define([_AC_ARG_VAR_VALIDATE],\n-[m4_divert_text([INIT_PREPARE],\n-[# Check that the precious variables saved in the cache have kept the same\n-# value.\n-ac_cache_corrupted=false\n-for ac_var in `(set) 2>&1 |\n-\t       sed -n 's/^ac_env_\\([[a-zA-Z_0-9]]*\\)_set=.*/\\1/p'`; do\n-  eval ac_old_set=\\$ac_cv_env_${ac_var}_set\n-  eval ac_new_set=\\$ac_env_${ac_var}_set\n-  eval ac_old_val=\"\\$ac_cv_env_${ac_var}_value\"\n-  eval ac_new_val=\"\\$ac_env_${ac_var}_value\"\n-  case $ac_old_set,$ac_new_set in\n-    set,)\n-      AS_MESSAGE([error: `$ac_var' was set to `$ac_old_val' in the previous run], 2)\n-      ac_cache_corrupted=: ;;\n-    ,set)\n-      AS_MESSAGE([error: `$ac_var' was not set in the previous run], 2)\n-      ac_cache_corrupted=: ;;\n-    ,);;\n-    *)\n-      if test \"x$ac_old_val\" != \"x$ac_new_val\"; then\n-        # differences in whitespace do not lead to failure.\n-        ac_old_val_w=`echo x $ac_old_val`\n-        ac_new_val_w=`echo x $ac_new_val`\n-        if test \"$ac_old_val_w\" != \"$ac_new_val_w\"; then\n-          AS_MESSAGE([error: `$ac_var' has changed since the previous run:], 2)\n-          ac_cache_corrupted=:\n-        else\n-          AS_MESSAGE([warning: ignoring whitespace changes in `$ac_var' since the previous run:], 2)\n-          eval $ac_var=\\$ac_old_val\n-        fi\n-        AS_MESSAGE([  former value:  `$ac_old_val'], 2)\n-        AS_MESSAGE([  current value: `$ac_new_val'], 2)\n-      fi;;\n-  esac\n-  # Pass precious variables to config.status.\n-  if test \"$ac_new_set\" = set; then\n-    case $ac_new_val in\n-dnl If you change this globbing pattern, test it on an old shell --\n-dnl it's sensitive.  Putting any kind of quote in it causes syntax errors.\n-[    *\" \"*|*\"\t\"*|*[\\[\\]\\~\\#\\$\\^\\&\\*\\(\\)\\{\\}\\\\\\|\\;\\<\\>\\?\\\"\\']*)]\n-      ac_arg=$ac_var=`echo \"$ac_new_val\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n-    *) ac_arg=$ac_var=$ac_new_val ;;\n-    esac\n-    case \" $ac_configure_args \" in\n-      *\" '$ac_arg' \"*) ;; # Avoid dups.  Use of quotes ensures accuracy.\n-      *) ac_configure_args=\"$ac_configure_args '$ac_arg'\" ;;\n-    esac\n-  fi\n-done\n-if $ac_cache_corrupted; then\n-  AS_MESSAGE([error: in `$ac_pwd':], 2)\n-  AS_MESSAGE([error: changes in the environment can compromise the build], 2)\n-  AS_ERROR([run `make distclean' and/or `rm $cache_file' and start over])\n-fi])dnl\n-])# _AC_ARG_VAR_VALIDATE\n-])\n-\n-m4_version_prereq([2.63],, [\n-\n-# AC_MSG_FAILURE(ERROR, [EXIT-STATUS = 1])\n-# ----------------------------------------\n-# This is the same code as in 2.59 and 2.61, except it also outputs pwd.\n-m4_define([AC_MSG_FAILURE],\n-[{ AS_MESSAGE([error: in `$ac_pwd':], 2)\n-AC_MSG_ERROR([$1\n-See `config.log' for more details.], [$2]); }])\n-])\n-])\n-\n-m4_version_prereq([2.60],, [\n-dnl M4 1.6 and newer implement m4wrap using FIFO semantics, as required\n-dnl by Posix; earlier versions used LIFO semantics.  Unfortunately,\n-dnl Autoconf versions before 2.60 require those LIFO semantics, so\n-dnl make sure to give it to them.\n-m4_define([m4_wrap], [m4_ifdef([_$0_text],\n-  [m4_define([_$0_text], [$1]m4_defn([_$0_text]))],\n-  [m4_define([_$0_text], [$1])m4_builtin([m4wrap],\n-    [m4_default(m4_defn([_$0_text])m4_undefine([_$0_text]))])])])\n-])\n-\n m4_version_prereq([2.66],, [\n dnl We need AC_CHECK_DECL which works for overloaded C++ functions.\n \n@@ -313,3 +94,5 @@ m4_define([_AC_CHECK_DECLS],\n [m4_ifvaln([$2$3], [AS_IF([test $ac_have_decl = 1], [$2], [$3])])])\n \n ])\n+\n+])"}]}