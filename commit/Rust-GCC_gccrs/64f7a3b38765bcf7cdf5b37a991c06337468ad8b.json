{"sha": "64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "node_id": "C_kwDOANBUbNoAKDY0ZjdhM2IzODc2NWJjZjdjZGY1YjM3YTk5MWMwNjMzNzQ2OGFkOGI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-19T20:35:51Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-19T20:35:51Z"}, "message": "c++: modules and std::source_location::current() def arg [PR100881]\n\nWe currently declare __builtin_source_location with a const void* return\ntype instead of the actual type const std::source_location::__impl*, and\nlater when folding this builtin we obtain the actual type via name lookup.\n\nBut the below testcase demonstrates this approach seems to interact\npoorly with modules, since we may import an entity that uses\nstd::source_location::current() in its default argument (or DMI) without\nnecessarily importing <source_location>, and thus the name lookup for\nstd::source_location will fail at the call site (when using the default\nargument) unless we also import <source_location>.\n\nThis patch fixes this by instead initially declaring the builtin with an\nauto return type and updating it appropriately upon its first use (in\nstandard code the first/only use would be in the definition of\nstd::source_location).  Thus when folding calls to this builtin we can\nget at its return type through the type of the CALL_EXPR and avoid\nneeding to do a name lookup.\n\n\tPR c++/100881\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_builtin_function_call): Adjust calls\n\tto fold_builtin_source_location.\n\t* cp-gimplify.cc (cp_gimplify_expr): Likewise.\n\t(cp_fold): Likewise.\n\t(get_source_location_impl_type): Remove location_t parameter and\n\tadjust accordingly.  No longer static.\n\t(fold_builtin_source_location): Take a CALL_EXPR tree instead of a\n\tlocation and obtain the impl type from its return type.\n\t* cp-tree.h (enum cp_tree_index): Remove CPTI_SOURCE_LOCATION_IMPL\n\tenumerator.\n\t(source_location_impl): Remove.\n\t(fold_builtin_source_location): Adjust parameter type.\n\t(get_source_location_impl_type): Declare.\n\t* decl.cc (cxx_init_decl_processing): Declare\n\t__builtin_source_location with auto return type instead of\n\tconst void*.\n\t(require_deduced_type): Update the return type of\n\t__builtin_source_location.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/srcloc3.C: Adjust expected note s/evaluating/using.\n\t* g++.dg/cpp2a/srcloc4.C: Likewise.\n\t* g++.dg/cpp2a/srcloc5.C: Likewise.\n\t* g++.dg/cpp2a/srcloc6.C: Likewise.\n\t* g++.dg/cpp2a/srcloc7.C: Likewise.\n\t* g++.dg/cpp2a/srcloc8.C: Likewise.\n\t* g++.dg/cpp2a/srcloc9.C: Likewise.\n\t* g++.dg/cpp2a/srcloc10.C: Likewise.\n\t* g++.dg/cpp2a/srcloc11.C: Likewise.\n\t* g++.dg/cpp2a/srcloc12.C: Likewise.\n\t* g++.dg/cpp2a/srcloc13.C: Likewise.\n\t* g++.dg/modules/pr100881_a.C: New test.\n\t* g++.dg/modules/pr100881_b.C: New test.", "tree": {"sha": "72bade88174709211f90a619218822629b53cf63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72bade88174709211f90a619218822629b53cf63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/comments", "author": null, "committer": null, "parents": [{"sha": "a7c8036b26082d8da001e05596777c5f911590e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c8036b26082d8da001e05596777c5f911590e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c8036b26082d8da001e05596777c5f911590e1"}], "stats": {"total": 156, "additions": 106, "deletions": 50}, "files": [{"sha": "d99c49bdbe2829a8914f11b9b7d13629a633585b", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -1492,7 +1492,7 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n       temp_override<tree> ovr (current_function_decl);\n       if (ctx->call && ctx->call->fundef)\n \tcurrent_function_decl = ctx->call->fundef->decl;\n-      return fold_builtin_source_location (EXPR_LOCATION (t));\n+      return fold_builtin_source_location (t);\n     }\n \n   int strops = 0;"}, {"sha": "1e0b4f8c1cf5b0ff528a759bd9faf2bd8d8c7d9f", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -722,7 +722,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\tbreak;\n \t      case CP_BUILT_IN_SOURCE_LOCATION:\n \t\t*expr_p\n-\t\t  = fold_builtin_source_location (EXPR_LOCATION (*expr_p));\n+\t\t  = fold_builtin_source_location (*expr_p);\n \t\tbreak;\n \t      case CP_BUILT_IN_IS_CORRESPONDING_MEMBER:\n \t\t*expr_p\n@@ -2850,7 +2850,7 @@ cp_fold (tree x)\n \t      case CP_BUILT_IN_IS_CONSTANT_EVALUATED:\n \t\tbreak;\n \t      case CP_BUILT_IN_SOURCE_LOCATION:\n-\t\tx = fold_builtin_source_location (EXPR_LOCATION (x));\n+\t\tx = fold_builtin_source_location (x);\n \t\tbreak;\n \t      case CP_BUILT_IN_IS_CORRESPONDING_MEMBER:\n \t        x = fold_builtin_is_corresponding_member\n@@ -2872,7 +2872,7 @@ cp_fold (tree x)\n \t    && fndecl_built_in_p (callee, CP_BUILT_IN_SOURCE_LOCATION,\n \t\t\t\t  BUILT_IN_FRONTEND))\n \t  {\n-\t    x = fold_builtin_source_location (EXPR_LOCATION (x));\n+\t    x = fold_builtin_source_location (x);\n \t    break;\n \t  }\n \n@@ -3171,22 +3171,21 @@ process_stmt_assume_attribute (tree std_attrs, tree statement,\n   return remove_attribute (\"gnu\", \"assume\", std_attrs);\n }\n \n-/* Helper of fold_builtin_source_location, return the\n-   std::source_location::__impl type after performing verification\n-   on it.  LOC is used for reporting any errors.  */\n+/* Return the type std::source_location::__impl after performing\n+   verification on it.  */\n \n-static tree\n-get_source_location_impl_type (location_t loc)\n+tree\n+get_source_location_impl_type ()\n {\n   tree name = get_identifier (\"source_location\");\n   tree decl = lookup_qualified_name (std_node, name);\n   if (TREE_CODE (decl) != TYPE_DECL)\n     {\n       auto_diagnostic_group d;\n       if (decl == error_mark_node || TREE_CODE (decl) == TREE_LIST)\n-\tqualified_name_lookup_error (std_node, name, decl, loc);\n+\tqualified_name_lookup_error (std_node, name, decl, input_location);\n       else\n-\terror_at (loc, \"%qD is not a type\", decl);\n+\terror (\"%qD is not a type\", decl);\n       return error_mark_node;\n     }\n   name = get_identifier (\"__impl\");\n@@ -3196,15 +3195,15 @@ get_source_location_impl_type (location_t loc)\n     {\n       auto_diagnostic_group d;\n       if (decl == error_mark_node || TREE_CODE (decl) == TREE_LIST)\n-\tqualified_name_lookup_error (type, name, decl, loc);\n+\tqualified_name_lookup_error (type, name, decl, input_location);\n       else\n-\terror_at (loc, \"%qD is not a type\", decl);\n+\terror (\"%qD is not a type\", decl);\n       return error_mark_node;\n     }\n   type = TREE_TYPE (decl);\n   if (TREE_CODE (type) != RECORD_TYPE)\n     {\n-      error_at (loc, \"%qD is not a class type\", decl);\n+      error (\"%qD is not a class type\", decl);\n       return error_mark_node;\n     }\n \n@@ -3221,8 +3220,7 @@ get_source_location_impl_type (location_t loc)\n \t    {\n \t      if (TREE_TYPE (field) != const_string_type_node)\n \t\t{\n-\t\t  error_at (loc, \"%qD does not have %<const char *%> type\",\n-\t\t\t    field);\n+\t\t  error (\"%qD does not have %<const char *%> type\", field);\n \t\t  return error_mark_node;\n \t\t}\n \t      cnt++;\n@@ -3232,7 +3230,7 @@ get_source_location_impl_type (location_t loc)\n \t    {\n \t      if (TREE_CODE (TREE_TYPE (field)) != INTEGER_TYPE)\n \t\t{\n-\t\t  error_at (loc, \"%qD does not have integral type\", field);\n+\t\t  error (\"%qD does not have integral type\", field);\n \t\t  return error_mark_node;\n \t\t}\n \t      cnt++;\n@@ -3244,9 +3242,9 @@ get_source_location_impl_type (location_t loc)\n     }\n   if (cnt != 4)\n     {\n-      error_at (loc, \"%<std::source_location::__impl%> does not contain only \"\n-\t\t     \"non-static data members %<_M_file_name%>, \"\n-\t\t     \"%<_M_function_name%>, %<_M_line%> and %<_M_column%>\");\n+      error (\"%<std::source_location::__impl%> does not contain only \"\n+\t     \"non-static data members %<_M_file_name%>, \"\n+\t     \"%<_M_function_name%>, %<_M_line%> and %<_M_column%>\");\n       return error_mark_node;\n     }\n   return build_qualified_type (type, TYPE_QUAL_CONST);\n@@ -3337,21 +3335,20 @@ static GTY(()) hash_table <source_location_table_entry_hash>\n   *source_location_table;\n static GTY(()) unsigned int source_location_id;\n \n-/* Fold __builtin_source_location () call.  LOC is the location\n-   of the call.  */\n+/* Fold the __builtin_source_location () call T.  */\n \n tree\n-fold_builtin_source_location (location_t loc)\n+fold_builtin_source_location (const_tree t)\n {\n-  if (source_location_impl == NULL_TREE)\n-    {\n-      auto_diagnostic_group d;\n-      source_location_impl = get_source_location_impl_type (loc);\n-      if (source_location_impl == error_mark_node)\n-\tinform (loc, \"evaluating %qs\", \"__builtin_source_location\");\n-    }\n+  gcc_assert (TREE_CODE (t) == CALL_EXPR);\n+  /* TREE_TYPE (t) is const std::source_location::__impl*  */\n+  tree source_location_impl = TREE_TYPE (TREE_TYPE (t));\n   if (source_location_impl == error_mark_node)\n     return build_zero_cst (const_ptr_type_node);\n+  gcc_assert (CLASS_TYPE_P (source_location_impl)\n+\t      && id_equal (TYPE_IDENTIFIER (source_location_impl), \"__impl\"));\n+\n+  location_t loc = EXPR_LOCATION (t);\n   if (source_location_table == NULL)\n     source_location_table\n       = hash_table <source_location_table_entry_hash>::create_ggc (64);\n@@ -3427,7 +3424,7 @@ fold_builtin_source_location (location_t loc)\n       entryp->var = var;\n     }\n \n-  return build_fold_addr_expr_with_type_loc (loc, var, const_ptr_type_node);\n+  return build_fold_addr_expr_with_type_loc (loc, var, TREE_TYPE (t));\n }\n \n #include \"gt-cp-cp-gimplify.h\""}, {"sha": "541d760492d08355f27cb0f8994802504f4344f9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -235,8 +235,6 @@ enum cp_tree_index\n \n     CPTI_PSEUDO_CONTRACT_VIOLATION,\n \n-    CPTI_SOURCE_LOCATION_IMPL,\n-\n     CPTI_FALLBACK_DFLOAT32_TYPE,\n     CPTI_FALLBACK_DFLOAT64_TYPE,\n     CPTI_FALLBACK_DFLOAT128_TYPE,\n@@ -395,9 +393,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n /* A node which matches any template argument.  */\n #define any_targ_node\t\t\tcp_global_trees[CPTI_ANY_TARG]\n \n-/* std::source_location::__impl class.  */\n-#define source_location_impl\t\tcp_global_trees[CPTI_SOURCE_LOCATION_IMPL]\n-\n /* Node to indicate default access. This must be distinct from the\n    access nodes in tree.h.  */\n \n@@ -8296,7 +8291,8 @@ extern tree process_stmt_hotness_attribute\t(tree, location_t);\n extern tree build_assume_call\t\t\t(location_t, tree);\n extern tree process_stmt_assume_attribute\t(tree, tree, location_t);\n extern bool simple_empty_class_p\t\t(tree, tree, tree_code);\n-extern tree fold_builtin_source_location\t(location_t);\n+extern tree fold_builtin_source_location\t(const_tree);\n+extern tree get_source_location_impl_type\t();\n \n /* in name-lookup.cc */\n extern tree strip_using_decl                    (tree);"}, {"sha": "df74d886b281df136db322cfef6c4b55f1e4e63b", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -4670,9 +4670,13 @@ cxx_init_decl_processing (void)\n \t\t\t    BUILT_IN_FRONTEND, NULL, NULL_TREE);\n   set_call_expr_flags (decl, ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n \n-  tree cptr_ftype = build_function_type_list (const_ptr_type_node, NULL_TREE);\n+  /* The concrete return type of __builtin_source_location is\n+     const std::source_location::__impl*, but we can't form the type\n+     at this point.  So we initially declare it with an auto return\n+     type which we then \"deduce\" from require_deduced_type upon first use.  */\n+  tree auto_ftype = build_function_type_list (make_auto (), NULL_TREE);\n   decl = add_builtin_function (\"__builtin_source_location\",\n-\t\t\t       cptr_ftype, CP_BUILT_IN_SOURCE_LOCATION,\n+\t\t\t       auto_ftype, CP_BUILT_IN_SOURCE_LOCATION,\n \t\t\t       BUILT_IN_FRONTEND, NULL, NULL_TREE);\n   set_call_expr_flags (decl, ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n \n@@ -18752,6 +18756,23 @@ require_deduced_type (tree decl, tsubst_flags_t complain)\n {\n   if (undeduced_auto_decl (decl))\n     {\n+      if (TREE_CODE (decl) == FUNCTION_DECL\n+\t  && fndecl_built_in_p (decl, BUILT_IN_FRONTEND)\n+\t  && DECL_FE_FUNCTION_CODE (decl) == CP_BUILT_IN_SOURCE_LOCATION)\n+\t{\n+\t  /* Set the return type of __builtin_source_location.  */\n+\t  tree type = get_source_location_impl_type ();\n+\t  if (type == error_mark_node)\n+\t    {\n+\t      inform (input_location, \"using %qs\", \"__builtin_source_location\");\n+\t      return false;\n+\t    }\n+\t  type = cp_build_qualified_type (type, TYPE_QUAL_CONST);\n+\t  type = build_pointer_type (type);\n+\t  apply_deduced_return_type (decl, type);\n+\t  return true;\n+\t}\n+\n       if (warning_suppressed_p (decl) && seen_error ())\n \t/* We probably already complained about deduction failure.  */;\n       else if (complain & tf_error)"}, {"sha": "aa8cf98880c0ba70b283a402616413f9ad2af34f", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc10.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -10,4 +10,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl' does not contain only non-static data members '_M_file_name', '_M_function_name', '_M_line' and '_M_column'\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "07281ca0ad0c29f794e5c4ac306a4056e79969e5", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc11.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -10,4 +10,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl' does not contain only non-static data members '_M_file_name', '_M_function_name', '_M_line' and '_M_column'\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "445c4a1337400deba0d71fd3aff37743d250a487", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc12.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -11,4 +11,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl::_M_file_name' does not have 'const char \\\\*' type\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "d63f6c7d932471c033003dcbeb3a55861a5140f9", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc13.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -12,4 +12,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl::_M_line' does not have integral type\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "324e03cd5480c5deec3f48f6df7dc9858d163946", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc3.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -2,4 +2,4 @@\n \n auto x = __builtin_source_location ();\t// { dg-error \"'source_location' is not a member of 'std'\" }\n // { dg-message \"std::source_location' is defined in header '<source_location>'; did you forget to '#include <source_location>'\" \"\" { target *-*-* } .-1 }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-2 }"}, {"sha": "9e92c449fc34713523cf109f3aad6f5a8763bcb5", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc4.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -5,4 +5,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'void std::source_location\\\\(\\\\)' is not a type\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "ed4b9351f74c7db33843d2eb380cca078853ba46", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc5.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -6,4 +6,4 @@ namespace std {\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location'\\[^\\n\\r]*is not a class type\" }\n // { dg-error \"'__impl' is not a member of 'std::source_location'\" \"\" { target *-*-* } .-1 }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-2 }"}, {"sha": "bec51e290b2dedd2e13d2fc2776336cbd7f217f8", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc6.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -6,4 +6,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'__impl' is not a member of 'std::source_location'\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "c81fa63f4189b940c182715e22a5dd94370b66fe", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc7.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -7,4 +7,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl\\\\(\\\\)' is not a type\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "158cc3f93d16cc645458d9588d5e8b955fd790d5", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc8.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -7,4 +7,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl()' is not a class type\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "618e09356326d81d76ff32908c0e79de78316dea", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc9.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -8,4 +8,4 @@ namespace std {\n }\n \n auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl' does not contain only non-static data members '_M_file_name', '_M_function_name', '_M_line' and '_M_column'\" }\n-// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"using '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "95546932dcaac48d93244398cd70ebc4a4331973", "filename": "gcc/testsuite/g++.dg/modules/pr100881_a.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr100881_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr100881_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr100881_a.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/100881\n+// { dg-additional-options \"-std=c++20 -fmodules-ts\" }\n+// { dg-module-cmi pr100881 }\n+module;\n+#include <source_location>\n+export module pr100881;\n+\n+export\n+consteval int\n+current_line_fn(const std::source_location& loc = std::source_location::current())\n+{\n+  return loc.line();\n+}\n+\n+export\n+struct current_line_cls\n+{\n+  int line = std::source_location::current().line();\n+};\n+\n+export\n+template<class T>\n+consteval int\n+current_line_fn_tmpl(const std::source_location& loc = std::source_location::current())\n+{\n+  return loc.line();\n+}\n+\n+export\n+template<class T>\n+struct current_line_cls_tmpl\n+{\n+  int line = std::source_location::current().line();\n+};"}, {"sha": "7f25b21b354d5aa4ea51309bf349dfa7f3423177", "filename": "gcc/testsuite/g++.dg/modules/pr100881_b.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr100881_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f7a3b38765bcf7cdf5b37a991c06337468ad8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr100881_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr100881_b.C?ref=64f7a3b38765bcf7cdf5b37a991c06337468ad8b", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/100881\n+// { dg-additional-options \"-std=c++20 -fmodules-ts\" }\n+import pr100881;\n+\n+static_assert(current_line_fn() == 5);\n+static_assert(current_line_cls{}.line == 6);\n+static_assert(current_line_fn_tmpl<int>() == 7);\n+static_assert(current_line_cls_tmpl<int>{}.line == 8);"}]}