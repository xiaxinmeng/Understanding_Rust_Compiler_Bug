{"sha": "097f29642281e0efba439b0cd88a507b7c67a88f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3ZjI5NjQyMjgxZTBlZmJhNDM5YjBjZDg4YTUwN2I3YzY3YTg4Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-29T16:33:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-29T16:33:36Z"}, "message": "i386-protos.h (ix86_expand_round): Declare.\n\n2006-10-29  Richard Guenther  <rguenther@suse.de>\n\n\t* config/i386/i386-protos.h (ix86_expand_round): Declare.\n\t(ix86_expand_rounddf_32): Likewise.\n\t* config/i386/i386.c (ix86_expand_round): New function expanding\n\tround inline for SSE math and -fno-trapping-math and if not\n\toptimizing for size.\n\t(ix86_expand_rounddf_32): Same for DFmode on 32bit archs.\n\t* config/i386/i386.md (rounddf2, roundsf2): New pattern expanding\n\tround via ix86_expand_round.\n\n\t* gcc.target/i386/math-torture/round.c: New testcase.\n\nFrom-SVN: r118146", "tree": {"sha": "deaf8102921ac3c5c17504b62a9945375fdef8cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deaf8102921ac3c5c17504b62a9945375fdef8cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/097f29642281e0efba439b0cd88a507b7c67a88f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097f29642281e0efba439b0cd88a507b7c67a88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097f29642281e0efba439b0cd88a507b7c67a88f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097f29642281e0efba439b0cd88a507b7c67a88f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d096ecdd9643db67bf3c17aa3345a15d62a103a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d096ecdd9643db67bf3c17aa3345a15d62a103a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d096ecdd9643db67bf3c17aa3345a15d62a103a6"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "833286329617e291d60822e1b79938a77067c2f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=097f29642281e0efba439b0cd88a507b7c67a88f", "patch": "@@ -1,3 +1,14 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_round): Declare.\n+\t(ix86_expand_rounddf_32): Likewise.\n+\t* config/i386/i386.c (ix86_expand_round): New function expanding\n+\tround inline for SSE math and -fno-trapping-math and if not\n+\toptimizing for size.\n+\t(ix86_expand_rounddf_32): Same for DFmode on 32bit archs.\n+\t* config/i386/i386.md (rounddf2, roundsf2): New pattern expanding\n+\tround via ix86_expand_round.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* config/i386/i386-protos.h (ix86_expand_floorceil): Declare."}, {"sha": "6393f94a703bf8bef25fb2e8d15445ddcafff7a0", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=097f29642281e0efba439b0cd88a507b7c67a88f", "patch": "@@ -162,6 +162,8 @@ extern void ix86_expand_lfloorceil (rtx, rtx, bool);\n extern void ix86_expand_rint (rtx, rtx);\n extern void ix86_expand_floorceil (rtx, rtx, bool);\n extern void ix86_expand_floorceildf_32 (rtx, rtx, bool);\n+extern void ix86_expand_round (rtx, rtx);\n+extern void ix86_expand_rounddf_32 (rtx, rtx);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "0a36e6026611fda17d3a31f30d3a2608a6052f16", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=097f29642281e0efba439b0cd88a507b7c67a88f", "patch": "@@ -19563,4 +19563,129 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n   emit_move_insn (operand0, res);\n }\n \n+/* Expand SSE sequence for computing round from OPERAND1 storing\n+   into OPERAND0.  Sequence that works without relying on DImode truncation\n+   via cvttsd2siq that is only available on 64bit targets.  */\n+void\n+ix86_expand_rounddf_32 (rtx operand0, rtx operand1)\n+{\n+  /* C code for the stuff we expand below.\n+        double xa = fabs (x), xa2, x2;\n+        if (!isless (xa, TWO52))\n+          return x;\n+     Using the absolute value and copying back sign makes\n+     -0.0 -> -0.0 correct.\n+        xa2 = xa + TWO52 - TWO52;\n+     Compensate.\n+\tdxa = xa2 - xa;\n+        if (dxa <= -0.5)\n+          xa2 += 1;\n+        else if (dxa > 0.5)\n+          xa2 -= 1;\n+        x2 = copysign (xa2, x);\n+        return x2;\n+   */\n+  enum machine_mode mode = GET_MODE (operand0);\n+  rtx xa, xa2, dxa, TWO52, tmp, label, half, mhalf, one, res, mask;\n+\n+  TWO52 = ix86_gen_TWO52 (mode);\n+\n+  /* Temporary for holding the result, initialized to the input\n+     operand to ease control flow.  */\n+  res = gen_reg_rtx (mode);\n+  emit_move_insn (res, operand1);\n+\n+  /* xa = abs (operand1) */\n+  xa = ix86_expand_sse_fabs (res, &mask);\n+\n+  /* if (!isless (xa, TWO52)) goto label; */\n+  label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n+\n+  /* xa2 = xa + TWO52 - TWO52; */\n+  xa2 = gen_reg_rtx (mode);\n+  expand_simple_binop (mode, PLUS, xa, TWO52, xa2, 0, OPTAB_DIRECT);\n+  expand_simple_binop (mode, MINUS, xa2, TWO52, xa2, 0, OPTAB_DIRECT);\n+\n+  /* dxa = xa2 - xa; */\n+  dxa = gen_reg_rtx (mode);\n+  expand_simple_binop (mode, MINUS, xa2, xa, dxa, 0, OPTAB_DIRECT);\n+\n+  /* generate 0.5, 1.0 and -0.5 */\n+  half = force_reg (mode, const_double_from_real_value (dconsthalf, mode));\n+  one = gen_reg_rtx (mode);\n+  expand_simple_binop (mode, PLUS, half, half, one, 0, OPTAB_DIRECT);\n+  mhalf = gen_reg_rtx (mode);\n+  expand_simple_binop (mode, MINUS, half, one, mhalf, 0, OPTAB_DIRECT);\n+\n+  /* Compensate.  */\n+  tmp = gen_reg_rtx (mode);\n+  /* xa2 = xa2 - (dxa > 0.5 ? 1 : 0) */\n+  tmp = ix86_expand_sse_compare_mask (UNGT, dxa, half, false);\n+  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n+                          gen_rtx_AND (mode, one, tmp)));\n+  expand_simple_binop (mode, MINUS, xa2, tmp, xa2, 0, OPTAB_DIRECT);\n+  /* xa2 = xa2 + (dxa <= -0.5 ? 1 : 0) */\n+  tmp = ix86_expand_sse_compare_mask (UNGE, mhalf, dxa, false);\n+  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n+                          gen_rtx_AND (mode, one, tmp)));\n+  expand_simple_binop (mode, PLUS, xa2, tmp, xa2, 0, OPTAB_DIRECT);\n+\n+  /* res = copysign (xa2, operand1) */\n+  ix86_sse_copysign_to_positive (res, xa2, force_reg (mode, operand1), mask);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (operand0, res);\n+}\n+\n+/* Expand SSE sequence for computing round from OPERAND1 storing\n+   into OPERAND0.  */\n+void\n+ix86_expand_round (rtx operand0, rtx operand1)\n+{\n+  /* C code for the stuff we're doing below:\n+        double xa = fabs (x);\n+        if (!isless (xa, TWO52))\n+          return x;\n+        xa = (double)(long)(xa + nextafter (0.5, 0.0));\n+        return copysign (xa, x);\n+   */\n+  enum machine_mode mode = GET_MODE (operand0);\n+  rtx res, TWO52, xa, label, xi, half, mask;\n+  const struct real_format *fmt;\n+  REAL_VALUE_TYPE pred_half, half_minus_pred_half;\n+\n+  /* Temporary for holding the result, initialized to the input\n+     operand to ease control flow.  */\n+  res = gen_reg_rtx (mode);\n+  emit_move_insn (res, operand1);\n+\n+  TWO52 = ix86_gen_TWO52 (mode);\n+  xa = ix86_expand_sse_fabs (res, &mask);\n+  label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n+\n+  /* load nextafter (0.5, 0.0) */\n+  fmt = REAL_MODE_FORMAT (mode);\n+  real_2expN (&half_minus_pred_half, -(fmt->p) - 1);\n+  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+\n+  /* xa = xa + 0.5 */\n+  half = force_reg (mode, const_double_from_real_value (pred_half, mode));\n+  expand_simple_binop (mode, PLUS, xa, half, xa, 0, OPTAB_DIRECT);\n+\n+  /* xa = (double)(int64_t)xa */\n+  xi = gen_reg_rtx (mode == DFmode ? DImode : SImode);\n+  expand_fix (xi, xa, 0);\n+  expand_float (xa, xi, 0);\n+\n+  /* res = copysign (xa, operand1) */\n+  ix86_sse_copysign_to_positive (res, xa, force_reg (mode, operand1), mask);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (operand0, res);\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "a274597b96c72c18228e74d2b06d1e78fe2fb75d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=097f29642281e0efba439b0cd88a507b7c67a88f", "patch": "@@ -17217,6 +17217,31 @@\n   DONE;\n })\n \n+(define_expand \"roundsf2\"\n+  [(match_operand:SF 0 \"register_operand\" \"\")\n+   (match_operand:SF 1 \"nonimmediate_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+   && !flag_trapping_math && !flag_rounding_math\n+   && !optimize_size\"\n+{\n+  ix86_expand_round (operand0, operand1);\n+  DONE;\n+})\n+\n+(define_expand \"rounddf2\"\n+  [(match_operand:DF 0 \"register_operand\" \"\")\n+   (match_operand:DF 1 \"nonimmediate_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+   && !flag_trapping_math && !flag_rounding_math\n+   && !optimize_size\"\n+{\n+  if (TARGET_64BIT)\n+    ix86_expand_round (operand0, operand1);\n+  else\n+    ix86_expand_rounddf_32 (operand0, operand1);\n+  DONE;\n+})\n+\n (define_insn_and_split \"*fistdi2_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"f,f\")]"}, {"sha": "6231f078fb270ad42d96798cadab26ae5f9b9481", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=097f29642281e0efba439b0cd88a507b7c67a88f", "patch": "@@ -1,3 +1,7 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/math-torture/round.c: New testcase.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.target/i386/math-torture/ceil.c: New testcase."}, {"sha": "fddac7abbe52f1bc07828903b9ad265625386e53", "filename": "gcc/testsuite/gcc.target/i386/math-torture/round.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fround.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097f29642281e0efba439b0cd88a507b7c67a88f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fround.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fround.c?ref=097f29642281e0efba439b0cd88a507b7c67a88f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+\n+float testlf (float x)\n+{\n+  return __builtin_roundf (x);\n+}\n+double testl (double x)\n+{\n+  return __builtin_round (x);\n+}\n+long double testll (long double x)\n+{\n+  return __builtin_roundl (x);\n+}\n+"}]}