{"sha": "fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmYzgzNjNhMzc4YTY3NmQ1YWI3MWZjNDRlZGYwYjhmNjgxZmZhMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-13T05:04:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-13T05:04:14Z"}, "message": "cp-tree.h (UNKNOWN_TYPE): Remove.\n\n\t* cp-tree.h (UNKNOWN_TYPE): Remove.\n\t* decl.c (cxx_init_decl_processing): Use LANG_TYPE instead.\n\t* error.c (dumy_type, dump_type_prefix, dump_type_suffix): Likewise.\n\t* typeck2.c (cxx_incomplete_type_diagnostic): Likewise.\n\t* class.c (instantiate_type): Check unknown_type_node rather than\n\tUNKNOWN_TYPE.\n\t* name-lookup.c (maybe_push_decl): Likewise.\n\t* rtti.c (get_tinfo_decl_dynamic): Likewise.\n\t(get_typeid): Likewise.\n\t* semantics.c (finish_offsetof): Likewise.\n\nFrom-SVN: r159349", "tree": {"sha": "6e2bf1018c014867d845d936d25929da98f58eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e2bf1018c014867d845d936d25929da98f58eb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07eea34ee659da5c9960ad524dcf291b60003557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07eea34ee659da5c9960ad524dcf291b60003557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07eea34ee659da5c9960ad524dcf291b60003557"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "a1b055093645b5759d1459820534827335f631a2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -1,5 +1,16 @@\n 2010-05-12  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-tree.h (UNKNOWN_TYPE): Remove.\n+\t* decl.c (cxx_init_decl_processing): Use LANG_TYPE instead.\n+\t* error.c (dumy_type, dump_type_prefix, dump_type_suffix): Likewise.\n+\t* typeck2.c (cxx_incomplete_type_diagnostic): Likewise.\n+\t* class.c (instantiate_type): Check unknown_type_node rather than\n+\tUNKNOWN_TYPE.\n+\t* name-lookup.c (maybe_push_decl): Likewise.\n+\t* rtti.c (get_tinfo_decl_dynamic): Likewise.\n+\t(get_typeid): Likewise.\n+\t* semantics.c (finish_offsetof): Likewise.\n+\n \tPR c++/20669\n \t* call.c (add_template_candidate_real): If deduction fails, still\n \tadd the template as a non-viable candidate."}, {"sha": "88db80faae8a4790d23e4c67350dfd048810d981", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -6398,7 +6398,7 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n \n   flags &= ~tf_ptrmem_ok;\n \n-  if (TREE_CODE (lhstype) == UNKNOWN_TYPE)\n+  if (lhstype == unknown_type_node)\n     {\n       if (flags & tf_error)\n \terror (\"not enough type information\");"}, {"sha": "a28a2e30fdab83f73249363c942dfae234b6c9f1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -3344,8 +3344,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define ANON_UNION_TYPE_P(NODE) \\\n   (TREE_CODE (NODE) == UNION_TYPE && ANON_AGGR_TYPE_P (NODE))\n \n-#define UNKNOWN_TYPE LANG_TYPE\n-\n /* Define fields and accessors for nodes representing declared names.  */\n \n #define TYPE_WAS_ANONYMOUS(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->was_anonymous)"}, {"sha": "5f280ce2cc72de5a1b800b353c15b4fb60476e72", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -3452,7 +3452,7 @@ cxx_init_decl_processing (void)\n \n   /* C++ extensions */\n \n-  unknown_type_node = make_node (UNKNOWN_TYPE);\n+  unknown_type_node = make_node (LANG_TYPE);\n   record_unknown_type (unknown_type_node, \"unknown type\");\n \n   /* Indirecting an UNKNOWN_TYPE node yields an UNKNOWN_TYPE node.  */\n@@ -3463,7 +3463,7 @@ cxx_init_decl_processing (void)\n   TYPE_POINTER_TO (unknown_type_node) = unknown_type_node;\n   TYPE_REFERENCE_TO (unknown_type_node) = unknown_type_node;\n \n-  init_list_type_node = make_node (UNKNOWN_TYPE);\n+  init_list_type_node = make_node (LANG_TYPE);\n   record_unknown_type (init_list_type_node, \"init list\");\n \n   {"}, {"sha": "8595719651a9c6e342b5e4b2a0d9da23ce7ec517", "filename": "gcc/cp/error.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -333,11 +333,13 @@ dump_type (tree t, int flags)\n \n   switch (TREE_CODE (t))\n     {\n-    case UNKNOWN_TYPE:\n+    case LANG_TYPE:\n       if (t == init_list_type_node)\n \tpp_string (cxx_pp, M_(\"<brace-enclosed initializer list>\"));\n-      else\n+      else if (t == unknown_type_node)\n \tpp_string (cxx_pp, M_(\"<unresolved overloaded function type>\"));\n+      else\n+\tgcc_unreachable ();\n       break;\n \n     case TREE_LIST:\n@@ -698,7 +700,7 @@ dump_type_prefix (tree t, int flags)\n     case TYPE_DECL:\n     case TREE_VEC:\n     case UNION_TYPE:\n-    case UNKNOWN_TYPE:\n+    case LANG_TYPE:\n     case VOID_TYPE:\n     case TYPENAME_TYPE:\n     case COMPLEX_TYPE:\n@@ -801,7 +803,7 @@ dump_type_suffix (tree t, int flags)\n     case TYPE_DECL:\n     case TREE_VEC:\n     case UNION_TYPE:\n-    case UNKNOWN_TYPE:\n+    case LANG_TYPE:\n     case VOID_TYPE:\n     case TYPENAME_TYPE:\n     case COMPLEX_TYPE:"}, {"sha": "845faf37462a0f877db4f35b5fe4730dcda0c412", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -1133,7 +1133,7 @@ maybe_push_decl (tree decl)\n \t     possible.  */\n \t  && TREE_CODE (DECL_CONTEXT (decl)) != NAMESPACE_DECL)\n       || (TREE_CODE (decl) == TEMPLATE_DECL && !namespace_bindings_p ())\n-      || TREE_CODE (type) == UNKNOWN_TYPE\n+      || type == unknown_type_node\n       /* The declaration of a template specialization does not affect\n \t the functions available for overload resolution, so we do not\n \t call pushdecl.  */"}, {"sha": "a36851ddd885cc08d856af12f21bff74a4ff5e69", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -255,7 +255,8 @@ get_tinfo_decl_dynamic (tree exp)\n   type = TYPE_MAIN_VARIANT (type);\n \n   /* For UNKNOWN_TYPEs call complete_type_or_else to get diagnostics.  */\n-  if (CLASS_TYPE_P (type) || TREE_CODE (type) == UNKNOWN_TYPE)\n+  if (CLASS_TYPE_P (type) || type == unknown_type_node\n+      || type == init_list_type_node)\n     type = complete_type_or_else (type, exp);\n \n   if (!type)\n@@ -482,7 +483,8 @@ get_typeid (tree type)\n   type = TYPE_MAIN_VARIANT (type);\n \n   /* For UNKNOWN_TYPEs call complete_type_or_else to get diagnostics.  */\n-  if (CLASS_TYPE_P (type) || TREE_CODE (type) == UNKNOWN_TYPE)\n+  if (CLASS_TYPE_P (type) || type == unknown_type_node\n+      || type == init_list_type_node)\n     type = complete_type_or_else (type, NULL_TREE);\n \n   if (!type)"}, {"sha": "47f3897c8d1351d6e66278dddc8052c807c9f714", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -3210,7 +3210,7 @@ finish_offsetof (tree expr)\n     }\n   if (TREE_CODE (TREE_TYPE (expr)) == FUNCTION_TYPE\n       || TREE_CODE (TREE_TYPE (expr)) == METHOD_TYPE\n-      || TREE_CODE (TREE_TYPE (expr)) == UNKNOWN_TYPE)\n+      || TREE_TYPE (expr) == unknown_type_node)\n     {\n       if (TREE_CODE (expr) == COMPONENT_REF\n \t  || TREE_CODE (expr) == COMPOUND_EXPR)"}, {"sha": "d61ec0a6fad53c2bba4be0bef5f6e7ca7cd683b2", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "patch": "@@ -515,7 +515,8 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \t\t       \"invalid use of dependent type %qT\", type);\n       break;\n \n-    case UNKNOWN_TYPE:\n+    case LANG_TYPE:\n+      gcc_assert (type == unknown_type_node);\n       if (value && TREE_CODE (value) == COMPONENT_REF)\n \tgoto bad_member;\n       else if (value && TREE_CODE (value) == ADDR_EXPR)"}]}