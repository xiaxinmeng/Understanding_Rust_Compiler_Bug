{"sha": "3ab216a4d2f14be1f37350260142c91fabce834a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiMjE2YTRkMmYxNGJlMWYzNzM1MDI2MDE0MmM5MWZhYmNlODM0YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-04-02T16:27:09Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-04-02T16:27:09Z"}, "message": "[Fortran] Resolve formal args before checking DTIO\n\n        * gfortran.h (gfc_resolve_formal_arglist): Add prototype.\n        * interface.c (check_dtio_interface1): Call it.\n        * resolve.c (gfc_resolve_formal_arglist): Renamed from\n        resolve_formal_arglist, removed static.\n        (find_arglists, resolve_types): Update calls.\n\n        * gfortran.dg/dtio_35.f90: New.", "tree": {"sha": "a6a5e77601a0f9a6252e865003a91f7f9002a071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a5e77601a0f9a6252e865003a91f7f9002a071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ab216a4d2f14be1f37350260142c91fabce834a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab216a4d2f14be1f37350260142c91fabce834a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab216a4d2f14be1f37350260142c91fabce834a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab216a4d2f14be1f37350260142c91fabce834a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90061c6ec090c6b41a44987c646c828e5165298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90061c6ec090c6b41a44987c646c828e5165298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90061c6ec090c6b41a44987c646c828e5165298"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "8c4ace7cdfabd8b5ff244ccc3297490cb8d1d5a9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3ab216a4d2f14be1f37350260142c91fabce834a", "patch": "@@ -1,3 +1,11 @@\n+2020-04-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (gfc_resolve_formal_arglist): Add prototype.\n+\t* interface.c (check_dtio_interface1): Call it.\n+\t* resolve.c (gfc_resolve_formal_arglist): Renamed from\n+\tresolve_formal_arglist, removed static.\n+\t(find_arglists, resolve_types): Update calls.\n+\n 2020-04-02  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/93522"}, {"sha": "88e4d9236f3c2430d6adbfe1ab9d6453e0e6f6d9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3ab216a4d2f14be1f37350260142c91fabce834a", "patch": "@@ -3369,6 +3369,7 @@ bool gfc_resolve_expr (gfc_expr *);\n void gfc_resolve (gfc_namespace *);\n void gfc_resolve_code (gfc_code *, gfc_namespace *);\n void gfc_resolve_blocks (gfc_code *, gfc_namespace *);\n+void gfc_resolve_formal_arglist (gfc_symbol *);\n int gfc_impure_variable (gfc_symbol *);\n int gfc_pure (gfc_symbol *);\n int gfc_implicit_pure (gfc_symbol *);"}, {"sha": "75a50c999b7d76a813110cdba8e4d81a18e2f4cc", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=3ab216a4d2f14be1f37350260142c91fabce834a", "patch": "@@ -5007,6 +5007,9 @@ check_dtio_interface1 (gfc_symbol *derived, gfc_symtree *tb_io_st,\n     gfc_error (\"DTIO procedure %qs at %L must be a subroutine\",\n \t       dtio_sub->name, &dtio_sub->declared_at);\n \n+  if (!dtio_sub->resolved)\n+    gfc_resolve_formal_arglist (dtio_sub);\n+\n   arg_num = 0;\n   for (formal = dtio_sub->formal; formal; formal = formal->next)\n     arg_num++;\n@@ -5025,7 +5028,6 @@ check_dtio_interface1 (gfc_symbol *derived, gfc_symtree *tb_io_st,\n       return;\n     }\n \n-\n   /* Now go through the formal arglist.  */\n   arg_num = 1;\n   for (formal = dtio_sub->formal; formal; formal = formal->next, arg_num++)"}, {"sha": "97de6ddce84450afdc194e3f2f4e03ea0439a9fd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3ab216a4d2f14be1f37350260142c91fabce834a", "patch": "@@ -264,8 +264,8 @@ resolve_procedure_interface (gfc_symbol *sym)\n    Since a dummy argument cannot be a non-dummy procedure, the only\n    resort left for untyped names are the IMPLICIT types.  */\n \n-static void\n-resolve_formal_arglist (gfc_symbol *proc)\n+void\n+gfc_resolve_formal_arglist (gfc_symbol *proc)\n {\n   gfc_formal_arglist *f;\n   gfc_symbol *sym;\n@@ -319,7 +319,7 @@ resolve_formal_arglist (gfc_symbol *proc)\n         }\n \n       if (sym->attr.if_source != IFSRC_UNKNOWN)\n-\tresolve_formal_arglist (sym);\n+\tgfc_resolve_formal_arglist (sym);\n \n       if (sym->attr.subroutine || sym->attr.external)\n \t{\n@@ -547,7 +547,7 @@ find_arglists (gfc_symbol *sym)\n       || gfc_fl_struct (sym->attr.flavor) || sym->attr.intrinsic)\n     return;\n \n-  resolve_formal_arglist (sym);\n+  gfc_resolve_formal_arglist (sym);\n }\n \n \n@@ -17159,7 +17159,7 @@ resolve_types (gfc_namespace *ns)\n \n   if (ns->proc_name && ns->proc_name->attr.flavor == FL_PROCEDURE\n       && ns->proc_name->attr.if_source == IFSRC_IFBODY)\n-    resolve_formal_arglist (ns->proc_name);\n+    gfc_resolve_formal_arglist (ns->proc_name);\n \n   gfc_traverse_ns (ns, resolve_bind_c_derived_types);\n "}, {"sha": "c28b0018c37bc79f8a19d2e30f7f30cc1a2ccd27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ab216a4d2f14be1f37350260142c91fabce834a", "patch": "@@ -1,3 +1,7 @@\n+2020-04-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/dtio_35.f90: New.\n+\n 2020-04-02  Richard Biener  <rguenther@suse.de>\n \n \tPR c/94392"}, {"sha": "d7211df87aceacb39bb5e5861fc657382a1ff2a4", "filename": "gcc/testsuite/gfortran.dg/dtio_35.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab216a4d2f14be1f37350260142c91fabce834a/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90?ref=3ab216a4d2f14be1f37350260142c91fabce834a", "patch": "@@ -0,0 +1,50 @@\n+! { dg-compile }\n+!\n+! Reported by Vladimir Nikishkin\n+! at https://stackoverflow.com/questions/60972134/whats-wrong-with-the-following-fortran-code-gfortran-dtio-dummy-argument-at#\n+!\n+\n+module scheme\n+\n+  type, abstract :: scheme_object\n+   contains\n+     procedure, pass :: generic_scheme_print => print_scheme_object\n+     generic, public :: write (formatted) => generic_scheme_print\n+  end type scheme_object\n+\n+  abstract interface\n+     subroutine packageable_procedure(  )\n+       import scheme_object\n+     end subroutine packageable_procedure\n+  end interface\n+contains\n+\n+  subroutine print_scheme_object(this, unit, iotype, v_list, iostat, iomsg)\n+    class(scheme_object), intent(in) :: this\n+    integer, intent(in)         :: unit\n+    character(*), intent(in)    :: iotype\n+    integer, intent(in)         :: v_list (:)\n+    integer, intent(out)        :: iostat\n+    character(*), intent(inout) :: iomsg\n+    iostat = 1\n+  end subroutine print_scheme_object\n+\n+  subroutine packaged_cons( )\n+  end subroutine packaged_cons\n+\n+  function make_primitive_procedure_object( proc1 ) result( retval )\n+    class(scheme_object), pointer :: retval\n+    procedure(packageable_procedure), pointer :: proc1\n+  end function make_primitive_procedure_object\n+\n+  subroutine ll_setup_global_environment()\n+    procedure(packageable_procedure), pointer :: proc1\n+    class(scheme_object), pointer :: proc_obj_to_pack\n+    proc1 => packaged_cons\n+    proc_obj_to_pack => make_primitive_procedure_object( proc1 )\n+  end subroutine ll_setup_global_environment\n+\n+end module scheme\n+\n+program main\n+end program main"}]}