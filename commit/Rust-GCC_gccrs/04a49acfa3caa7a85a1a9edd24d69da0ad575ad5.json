{"sha": "04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "node_id": "C_kwDOANBUbNoAKDA0YTQ5YWNmYTNjYWE3YTg1YTFhOWVkZDI0ZDY5ZGEwYWQ1NzVhZDU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-15T18:13:32Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T15:09:53Z"}, "message": "Add negation operator overload support\n\nUnary operator expressions can be treated as simply having a nullptr\nrvalue. This patch updates the shared operator overloading code to allow\nfor a nullptr rhs to canonicalize the code path for all operator overloads.\n\nFixes #249", "tree": {"sha": "d6bf4186cb815ff8b0bdf691c9659cf14bca8efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6bf4186cb815ff8b0bdf691c9659cf14bca8efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f74fe23c6d602c257ba94b2522bd9d6a594609e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f74fe23c6d602c257ba94b2522bd9d6a594609e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f74fe23c6d602c257ba94b2522bd9d6a594609e"}], "stats": {"total": 173, "additions": 147, "deletions": 26}, "files": [{"sha": "594cfffb4982e394d845da6bd44daaf1ce77e08a", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "patch": "@@ -92,6 +92,31 @@ CompileExpr::visit (HIR::CompoundAssignmentExpr &expr)\n   ctx->add_statement (assignment);\n }\n \n+void\n+CompileExpr::visit (HIR::NegationExpr &expr)\n+{\n+  auto op = expr.get_expr_type ();\n+  auto negated_expr = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n+  auto location = expr.get_locus ();\n+\n+  // this might be an operator overload situation lets check\n+  TyTy::FnType *fntype;\n+  bool is_op_overload = ctx->get_tyctx ()->lookup_operator_overload (\n+    expr.get_mappings ().get_hirid (), &fntype);\n+  if (is_op_overload)\n+    {\n+      auto lang_item_type\n+\t= Analysis::RustLangItem::NegationOperatorToLangItem (op);\n+      translated\n+\t= resolve_operator_overload (lang_item_type, expr, negated_expr,\n+\t\t\t\t     nullptr, expr.get_expr ().get (), nullptr);\n+      return;\n+    }\n+\n+  translated\n+    = ctx->get_backend ()->negation_expression (op, negated_expr, location);\n+}\n+\n Bexpression *\n CompileExpr::compile_dyn_dispatch_call (const TyTy::DynamicObjectType *dyn,\n \t\t\t\t\tTyTy::BaseType *receiver,\n@@ -311,7 +336,8 @@ CompileExpr::resolve_operator_overload (\n \t= static_cast<const TyTy::DynamicObjectType *> (receiver->get_root ());\n \n       std::vector<HIR::Expr *> arguments;\n-      arguments.push_back (rhs_expr);\n+      if (rhs_expr != nullptr) // can be null for negation_expr (unary ones)\n+\targuments.push_back (rhs_expr);\n \n       return compile_dyn_dispatch_call (dyn, receiver, fntype, lhs, arguments,\n \t\t\t\t\texpr.get_locus ());\n@@ -356,7 +382,8 @@ CompileExpr::resolve_operator_overload (\n \n   std::vector<Bexpression *> args;\n   args.push_back (self); // adjusted self\n-  args.push_back (rhs);\n+  if (rhs != nullptr)\t // can be null for negation_expr (unary ones)\n+    args.push_back (rhs);\n \n   auto fncontext = ctx->peek_fn ();\n   return ctx->get_backend ()->call_expression (fncontext.fndecl, fn_expr, args,"}, {"sha": "b4079f7e4acd4cd89835a734cf6b36c34cb2d9bc", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "patch": "@@ -474,15 +474,7 @@ class CompileExpr : public HIRCompileBase\n       = ctx->get_backend ()->lazy_boolean_expression (op, lhs, rhs, location);\n   }\n \n-  void visit (HIR::NegationExpr &expr) override\n-  {\n-    auto op = expr.get_expr_type ();\n-    auto negated_expr = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n-    auto location = expr.get_locus ();\n-\n-    translated\n-      = ctx->get_backend ()->negation_expression (op, negated_expr, location);\n-  }\n+  void visit (HIR::NegationExpr &expr) override;\n \n   void visit (HIR::TypeCastExpr &expr) override\n   {"}, {"sha": "642bde241d845daee959b5362f28cdc038120e8f", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "patch": "@@ -792,6 +792,15 @@ class TypeCheckExpr : public TypeCheckBase\n     auto negated_expr_ty\n       = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n \n+    // check for operator overload\n+    auto lang_item_type = Analysis::RustLangItem::NegationOperatorToLangItem (\n+      expr.get_expr_type ());\n+    bool operator_overloaded\n+      = resolve_operator_overload (lang_item_type, expr, negated_expr_ty,\n+\t\t\t\t   nullptr);\n+    if (operator_overloaded)\n+      return;\n+\n     // https://doc.rust-lang.org/reference/expressions/operator-expr.html#negation-operators\n     switch (expr.get_expr_type ())\n       {\n@@ -1380,11 +1389,18 @@ class TypeCheckExpr : public TypeCheckBase\n \t  }\n       }\n \n-    // type check the arguments\n+    // type check the arguments if required\n     TyTy::FnType *type = static_cast<TyTy::FnType *> (lookup);\n-    rust_assert (type->num_params () == 2);\n-    auto fnparam = type->param_at (1);\n-    fnparam.second->unify (rhs); // typecheck the rhs\n+    if (rhs == nullptr)\n+      {\n+\trust_assert (type->num_params () == 1);\n+      }\n+    else\n+      {\n+\trust_assert (type->num_params () == 2);\n+\tauto fnparam = type->param_at (1);\n+\tfnparam.second->unify (rhs); // typecheck the rhs\n+      }\n \n     // get the return type\n     TyTy::BaseType *function_ret_tyty = fn->get_return_type ()->clone ();\n@@ -1481,7 +1497,7 @@ class TypeCheckExpr : public TypeCheckBase\n   Location root_array_expr_locus;\n \n   bool inside_loop;\n-};\n+}; // namespace Resolver\n \n } // namespace Resolver\n } // namespace Rust"}, {"sha": "4f8c3899a338e0ee75ae6674fec4b305d67e5005", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "patch": "@@ -43,6 +43,7 @@ class RustLangItem\n     REMAINDER,\n \n     NEGATION,\n+    NOT,\n \n     ADD_ASSIGN,\n     SUB_ASSIGN,\n@@ -79,6 +80,10 @@ class RustLangItem\n       {\n \treturn ItemType::NEGATION;\n       }\n+    else if (item.compare (\"not\") == 0)\n+      {\n+\treturn ItemType::NOT;\n+      }\n     else if (item.compare (\"add_assign\") == 0)\n       {\n \treturn ItemType::ADD_ASSIGN;\n@@ -119,6 +124,8 @@ class RustLangItem\n \treturn \"rem\";\n       case NEGATION:\n \treturn \"neg\";\n+      case NOT:\n+\treturn \"not\";\n       case ADD_ASSIGN:\n \treturn \"add_assign\";\n       case SUB_ASSIGN:\n@@ -151,11 +158,7 @@ class RustLangItem\n       case ArithmeticOrLogicalOperator::MODULUS:\n \treturn ItemType::REMAINDER;\n \n-      case ArithmeticOrLogicalOperator::BITWISE_AND:\n-      case ArithmeticOrLogicalOperator::BITWISE_OR:\n-      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n-      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n-      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+      default:\n \treturn ItemType::UNKNOWN;\n       }\n     return ItemType::UNKNOWN;\n@@ -177,11 +180,22 @@ class RustLangItem\n       case ArithmeticOrLogicalOperator::MODULUS:\n \treturn ItemType::REM_ASSIGN;\n \n-      case ArithmeticOrLogicalOperator::BITWISE_AND:\n-      case ArithmeticOrLogicalOperator::BITWISE_OR:\n-      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n-      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n-      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+      default:\n+\treturn ItemType::UNKNOWN;\n+      }\n+    return ItemType::UNKNOWN;\n+  }\n+\n+  static ItemType NegationOperatorToLangItem (NegationOperator op)\n+  {\n+    switch (op)\n+      {\n+      case NegationOperator::NEGATE:\n+\treturn ItemType::NEGATION;\n+      case NegationOperator::NOT:\n+\treturn ItemType::NOT;\n+\n+      default:\n \treturn ItemType::UNKNOWN;\n       }\n     return ItemType::UNKNOWN;"}, {"sha": "eca19de309ad139fdf48daa11cd6d9dd94299203", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_4.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs?ref=04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-output \"neg\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"neg\"]\n+pub trait Neg {\n+    type Output;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    fn neg(self) -> Self::Output;\n+    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name .Neg::neg.\" \"\" { target *-*-* } .-2 }\n+}\n+\n+impl Neg for i32 {\n+    type Output = i32;\n+\n+    fn neg(self) -> i32 {\n+        unsafe {\n+            let a = \"neg\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+        -self\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a: i32 = 1;\n+    let _b = -a;\n+\n+    0\n+}"}, {"sha": "ffdc8c23280429b160ced272373dd93136ee75ea", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_5.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a49acfa3caa7a85a1a9edd24d69da0ad575ad5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs?ref=04a49acfa3caa7a85a1a9edd24d69da0ad575ad5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-output \"not\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"not\"]\n+pub trait Not {\n+    type Output;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    fn not(self) -> Self::Output;\n+    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name .Not::not.\" \"\" { target *-*-* } .-2 }\n+}\n+\n+impl Not for i32 {\n+    type Output = i32;\n+\n+    fn not(self) -> i32 {\n+        unsafe {\n+            let a = \"not\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+        !self\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a: i32 = 1;\n+    let _b = !a;\n+\n+    0\n+}"}]}