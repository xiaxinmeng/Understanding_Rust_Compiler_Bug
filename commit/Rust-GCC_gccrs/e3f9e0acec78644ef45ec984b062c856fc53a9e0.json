{"sha": "e3f9e0acec78644ef45ec984b062c856fc53a9e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmOWUwYWNlYzc4NjQ0ZWY0NWVjOTg0YjA2MmM4NTZmYzUzYTllMA==", "commit": {"author": {"name": "Wei Mi", "email": "wmi@google.com", "date": "2013-06-19T21:57:42Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2013-06-19T21:57:42Z"}, "message": "re PR rtl-optimization/57518 (Redundant insn generated in LRA)\n\n2013-06-19  Wei Mi  <wmi@google.com>\n\n\tPR rtl-optimization/57518\n\t* ira.c (set_paradoxical_subreg): Set pdx_subregs[regno]\n\tif regno is used in paradoxical subreg.\n\t(update_equiv_regs): Check pdx_subregs[regno] before\n\tset a reg to be equivalent with a mem.\n\nFrom-SVN: r200224", "tree": {"sha": "5e61831109bc7fa0d8c637f01c06a7fb313e24cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e61831109bc7fa0d8c637f01c06a7fb313e24cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f9e0acec78644ef45ec984b062c856fc53a9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f9e0acec78644ef45ec984b062c856fc53a9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f9e0acec78644ef45ec984b062c856fc53a9e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f9e0acec78644ef45ec984b062c856fc53a9e0/comments", "author": {"login": "wmi-11", "id": 59629650, "node_id": "MDQ6VXNlcjU5NjI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/59629650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmi-11", "html_url": "https://github.com/wmi-11", "followers_url": "https://api.github.com/users/wmi-11/followers", "following_url": "https://api.github.com/users/wmi-11/following{/other_user}", "gists_url": "https://api.github.com/users/wmi-11/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmi-11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmi-11/subscriptions", "organizations_url": "https://api.github.com/users/wmi-11/orgs", "repos_url": "https://api.github.com/users/wmi-11/repos", "events_url": "https://api.github.com/users/wmi-11/events{/privacy}", "received_events_url": "https://api.github.com/users/wmi-11/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8259d36468b77548cec3e35406201d8fb384eafb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8259d36468b77548cec3e35406201d8fb384eafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8259d36468b77548cec3e35406201d8fb384eafb"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "8973cb9e2fcbfa7665380f15ecc02e62a5dff7a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3f9e0acec78644ef45ec984b062c856fc53a9e0", "patch": "@@ -1,3 +1,11 @@\n+2013-06-19  Wei Mi  <wmi@google.com>\n+\n+\tPR rtl-optimization/57518\n+\t* ira.c (set_paradoxical_subreg): Set pdx_subregs[regno]\n+\tif regno is used in paradoxical subreg.\n+\t(update_equiv_regs): Check pdx_subregs[regno] before\n+\tset a reg to be equivalent with a mem.\n+\n 2013-06-19  Matthias Klose  <doko@ubuntu.com>\n \n \tPR driver/57651"}, {"sha": "ee0c5e80d9919e25045367137a178e6351dcb9d5", "filename": "gcc/ira.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=e3f9e0acec78644ef45ec984b062c856fc53a9e0", "patch": "@@ -2863,6 +2863,28 @@ no_equiv (rtx reg, const_rtx store ATTRIBUTE_UNUSED,\n     }\n }\n \n+/* Check whether the SUBREG is a paradoxical subreg and set the result\n+   in PDX_SUBREGS.  */\n+\n+static int\n+set_paradoxical_subreg (rtx *subreg, void *pdx_subregs)\n+{\n+  rtx reg;\n+\n+  if ((*subreg) == NULL_RTX)\n+    return 1;\n+  if (GET_CODE (*subreg) != SUBREG)\n+    return 0;\n+  reg = SUBREG_REG (*subreg);\n+  if (!REG_P (reg))\n+    return 0;\n+\n+  if (paradoxical_subreg_p (*subreg))\n+    ((bool *)pdx_subregs)[REGNO (reg)] = true;\n+\n+  return 0;\n+}\n+\n /* In DEBUG_INSN location adjust REGs from CLEARED_REGS bitmap to the\n    equivalent replacement.  */\n \n@@ -2901,16 +2923,33 @@ update_equiv_regs (void)\n   basic_block bb;\n   int loop_depth;\n   bitmap cleared_regs;\n+  bool *pdx_subregs;\n \n   /* We need to keep track of whether or not we recorded a LABEL_REF so\n      that we know if the jump optimizer needs to be rerun.  */\n   recorded_label_ref = 0;\n \n+  /* Use pdx_subregs to show whether a reg is used in a paradoxical\n+     subreg.  */\n+  pdx_subregs = XCNEWVEC (bool, max_regno);\n+\n   reg_equiv = XCNEWVEC (struct equivalence, max_regno);\n   grow_reg_equivs ();\n \n   init_alias_analysis ();\n \n+  /* Scan insns and set pdx_subregs[regno] if the reg is used in a\n+     paradoxical subreg. Don't set such reg sequivalent to a mem,\n+     because lra will not substitute such equiv memory in order to\n+     prevent access beyond allocated memory for paradoxical memory subreg.  */\n+  FOR_EACH_BB (bb)\n+    FOR_BB_INSNS (bb, insn)\n+      {\n+\tif (! INSN_P (insn))\n+\t  continue;\n+\tfor_each_rtx (&insn, set_paradoxical_subreg, (void *)pdx_subregs);\n+      }\n+\n   /* Scan the insns and find which registers have equivalences.  Do this\n      in a separate scan of the insns because (due to -fcse-follow-jumps)\n      a register can be set below its use.  */\n@@ -3012,6 +3051,13 @@ update_equiv_regs (void)\n \t      continue;\n \t    }\n \n+\t  /* Don't set reg (if pdx_subregs[regno] == true) equivalent to a mem.  */\n+\t  if (MEM_P (src) && pdx_subregs[regno])\n+\t    {\n+\t      note_stores (set, no_equiv, NULL);\n+\t      continue;\n+\t    }\n+\n \t  note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n \n \t  /* cse sometimes generates function invariants, but doesn't put a\n@@ -3170,7 +3216,8 @@ update_equiv_regs (void)\n \t  && reg_equiv[regno].init_insns != const0_rtx\n \t  && ! find_reg_note (XEXP (reg_equiv[regno].init_insns, 0),\n \t\t\t      REG_EQUIV, NULL_RTX)\n-\t  && ! contains_replace_regs (XEXP (dest, 0)))\n+\t  && ! contains_replace_regs (XEXP (dest, 0))\n+\t  && ! pdx_subregs[regno])\n \t{\n \t  rtx init_insn = XEXP (reg_equiv[regno].init_insns, 0);\n \t  if (validate_equiv_mem (init_insn, src, dest)\n@@ -3361,6 +3408,7 @@ update_equiv_regs (void)\n \n   end_alias_analysis ();\n   free (reg_equiv);\n+  free (pdx_subregs);\n   return recorded_label_ref;\n }\n "}, {"sha": "79300717687043b5a5aaea37e7c6ed33465f4ec1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3f9e0acec78644ef45ec984b062c856fc53a9e0", "patch": "@@ -1,3 +1,8 @@\n+2013-06-19  Wei Mi  <wmi@google.com>\n+\n+\tPR rtl-optimization/57518\n+\t* testsuite/gcc.dg/pr57518.c: New test.\n+\n 2013-06-19  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \t* gcc.dg/tree-ssa/loop-19.c: Add -fno-common."}, {"sha": "4c84a856b5d5b372bfa3bdf55465bcb5a2ceac80", "filename": "gcc/testsuite/gcc.dg/pr57518.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57518.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f9e0acec78644ef45ec984b062c856fc53a9e0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57518.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57518.c?ref=e3f9e0acec78644ef45ec984b062c856fc53a9e0", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/57130 */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-ira\" } */\n+/* { dg-final { scan-rtl-dump-not \"REG_EQUIV.*mem.*\\\"ip\\\"\" \"ira\" } } */\n+\n+char ip[10];\n+int total;\n+\n+void foo() {\n+  int t;\n+\n+  t = ip[2];\n+  total = t & 0x3;\n+}"}]}