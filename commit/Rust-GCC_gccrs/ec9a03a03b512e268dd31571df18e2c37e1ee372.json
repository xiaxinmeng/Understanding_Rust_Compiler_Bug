{"sha": "ec9a03a03b512e268dd31571df18e2c37e1ee372", "node_id": "C_kwDOANBUbNoAKGVjOWEwM2EwM2I1MTJlMjY4ZGQzMTU3MWRmMThlMmMzN2UxZWUzNzI", "commit": {"author": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-05-12T11:32:53Z"}, "committer": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-05-24T11:32:31Z"}, "message": "type check", "tree": {"sha": "86563ae98127dda67871c0af9c0bd7ceb05f6fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86563ae98127dda67871c0af9c0bd7ceb05f6fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec9a03a03b512e268dd31571df18e2c37e1ee372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9a03a03b512e268dd31571df18e2c37e1ee372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9a03a03b512e268dd31571df18e2c37e1ee372", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9a03a03b512e268dd31571df18e2c37e1ee372/comments", "author": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6d540b1043bb944450dfe9da4c91124cdf31d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6d540b1043bb944450dfe9da4c91124cdf31d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6d540b1043bb944450dfe9da4c91124cdf31d3"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "789ad78ffa248e589279cd5473abe06b6cf8994f", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9a03a03b512e268dd31571df18e2c37e1ee372/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9a03a03b512e268dd31571df18e2c37e1ee372/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=ec9a03a03b512e268dd31571df18e2c37e1ee372", "patch": "@@ -3477,6 +3477,19 @@ class IfLetExpr : public ExprWithBlock\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRExpressionVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_scrutinee_expr ()\n+  {\n+    rust_assert (value != nullptr);\n+    return value;\n+  }\n+\n+  std::vector<std::unique_ptr<Pattern> > &get_patterns ()\n+  {\n+    return match_arm_patterns;\n+  }\n+\n+  BlockExpr *get_if_block () { return if_block.get (); }\n+\n   ExprType get_expression_type () const final override\n   {\n     return ExprType::IfLet;"}, {"sha": "411d45de41feb0f2e22a250f9e3210d053b0b787", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9a03a03b512e268dd31571df18e2c37e1ee372/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9a03a03b512e268dd31571df18e2c37e1ee372/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=ec9a03a03b512e268dd31571df18e2c37e1ee372", "patch": "@@ -703,6 +703,29 @@ class TypeCheckExpr : public TypeCheckBase\n       infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n+  void visit (HIR::IfLetExpr &expr) override\n+  {\n+    // this needs to perform a least upper bound coercion on the blocks and then\n+    // unify the scruintee and arms\n+    TyTy::BaseType *scrutinee_tyty\n+      = TypeCheckExpr::Resolve (expr.get_scrutinee_expr ().get (), false);\n+\n+    for (auto &pattern : expr.get_patterns ())\n+      {\n+\tTyTy::BaseType *kase_arm_ty\n+\t  = TypeCheckPattern::Resolve (pattern.get (), scrutinee_tyty);\n+\n+\tTyTy::BaseType *checked_kase = scrutinee_tyty->unify (kase_arm_ty);\n+\tif (checked_kase->get_kind () == TyTy::TypeKind::ERROR)\n+\t  return;\n+      }\n+\n+    TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n+\n+    infered\n+      = TyTy::TupleType::get_unit_type (expr.get_mappings ().get_hirid ());\n+  }\n+\n   void visit (HIR::BlockExpr &expr) override;\n \n   void visit (HIR::UnsafeBlockExpr &expr) override"}]}