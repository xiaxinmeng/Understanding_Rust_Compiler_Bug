{"sha": "6d876e0b31aab2bf03e93b1d4705330f20f2c656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4NzZlMGIzMWFhYjJiZjAzZTkzYjFkNDcwNTMzMGYyMGYyYzY1Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-20T06:29:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-20T06:29:13Z"}, "message": "re PR c++/54026 (template const struct with mutable members erroneously emitted to .rodata)\n\n\tPR c++/54026\n\t* typeck.c (cp_apply_type_quals_to_decl): Check COMPLETE_TYPE_P.\n\nFrom-SVN: r189701", "tree": {"sha": "baef4220044fb92168ef5b16a7e69b0d9aa7c9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baef4220044fb92168ef5b16a7e69b0d9aa7c9bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d876e0b31aab2bf03e93b1d4705330f20f2c656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d876e0b31aab2bf03e93b1d4705330f20f2c656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d876e0b31aab2bf03e93b1d4705330f20f2c656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d876e0b31aab2bf03e93b1d4705330f20f2c656/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c62c6622bcf2906969975f5741072d842c667851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62c6622bcf2906969975f5741072d842c667851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62c6622bcf2906969975f5741072d842c667851"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "647b719c734ec857af4676bc1e91be04270c89b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d876e0b31aab2bf03e93b1d4705330f20f2c656", "patch": "@@ -1,5 +1,8 @@\n 2012-07-19  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/54026\n+\t* typeck.c (cp_apply_type_quals_to_decl): Check COMPLETE_TYPE_P.\n+\n \tPR c++/54021\n \t* call.c (build_cxx_call): Set optimize when folding\n \t__builtin_constant_p in a constexpr function."}, {"sha": "d7a719fcf44be5a874326324f4d056b8afd81d1e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6d876e0b31aab2bf03e93b1d4705330f20f2c656", "patch": "@@ -8453,9 +8453,9 @@ cp_apply_type_quals_to_decl (int type_quals, tree decl)\n      constructor can produce constant init, so rely on cp_finish_decl to\n      clear TREE_READONLY if the variable has non-constant init.  */\n \n-  /* If the type has a mutable component, that component might be\n-     modified.  */\n-  if (TYPE_HAS_MUTABLE_P (type))\n+  /* If the type has (or might have) a mutable component, that component\n+     might be modified.  */\n+  if (TYPE_HAS_MUTABLE_P (type) || !COMPLETE_TYPE_P (type))\n     type_quals &= ~TYPE_QUAL_CONST;\n \n   c_apply_type_quals_to_decl (type_quals, decl);"}, {"sha": "8ae7ff8f3c9f6c13cad4318a6ece568e2ea45b71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d876e0b31aab2bf03e93b1d4705330f20f2c656", "patch": "@@ -1,3 +1,8 @@\n+2012-07-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54026\n+\t* g++.dg/init/mutable1.C: New.\n+\n 2012-07-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48820"}, {"sha": "af99ee0bf8607797fced141654856c99d1a07e9e", "filename": "gcc/testsuite/g++.dg/init/mutable1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmutable1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d876e0b31aab2bf03e93b1d4705330f20f2c656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmutable1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmutable1.C?ref=6d876e0b31aab2bf03e93b1d4705330f20f2c656", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/54026\n+// { dg-final { scan-assembler-not \"rodata\" } }\n+\n+void non_const(int *);\n+\n+template <typename T>\n+struct Foo {\n+  T x;\n+  mutable int y;\n+  void func() const { non_const(&y); }\n+};\n+\n+struct Bar {\n+  int x;\n+  mutable int y;\n+  void func() const { non_const(&y); }\n+};\n+\n+const Foo<int> foo = { 1, 2 };\n+const Bar bar = { 3, 4 };"}]}