{"sha": "6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "node_id": "C_kwDOANBUbNoAKDZmZDQ4NWQxNWMxYTJjNDI3YzM5YmNkNDVlMDNiZWQ4Y2RlNjg5ZTY", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-11-03T01:37:49Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-11-03T16:46:03Z"}, "message": "Update range query cache when a statement is updated.\n\nAdd an update_stmt interface to range query, and hook into it with the\nssa statement update call.\n\n\tgcc/\n\t* gimple-range.cc (gimple_ranger::update_stmt): New.\n\t* gimple-range.h (gimple_ranger::update_stmt): New prototype.\n\t* tree-ssa-operands.cc (update_stmt_operands): Notify range\n\tquery that stmt has changed.\n\t* value-query.h (range_query::update_stmt): New.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/vrp-update.c: New.", "tree": {"sha": "3856fbe882fca42a03b7cebcc2b3b1dd2f9f582e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3856fbe882fca42a03b7cebcc2b3b1dd2f9f582e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/comments", "author": null, "committer": null, "parents": [{"sha": "00d7c8ff16e6838273cea808ffbe22e98104f9d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d7c8ff16e6838273cea808ffbe22e98104f9d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d7c8ff16e6838273cea808ffbe22e98104f9d5"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "806386918bd20252c820e8f47662358ae9cb8694", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "patch": "@@ -482,6 +482,40 @@ gimple_ranger::register_inferred_ranges (gimple *s)\n   m_cache.apply_inferred_ranges (s);\n }\n \n+// When a statement S has changed since the result was cached, re-evaluate\n+// and update the global cache.\n+\n+void\n+gimple_ranger::update_stmt (gimple *s)\n+{\n+  tree lhs = gimple_get_lhs (s);\n+  if (!lhs || !gimple_range_ssa_p (lhs))\n+    return;\n+  Value_Range r (TREE_TYPE (lhs));\n+  // Only update if it already had a value.\n+  if (m_cache.get_global_range (r, lhs))\n+    {\n+      // Re-calculate a new value using just cache values.\n+      Value_Range tmp (TREE_TYPE (lhs));\n+      fold_using_range f;\n+      fur_depend src (s, &(gori ()), &m_cache);\n+      f.fold_stmt (tmp, s, src, lhs);\n+\n+      // Combine the new value with the old value to check for a change.\n+      if (r.intersect (tmp))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      print_generic_expr (dump_file, lhs, TDF_SLIM);\n+\t      fprintf (dump_file, \" : global value re-evaluated to \");\n+\t      r.dump (dump_file);\n+\t      fputc ('\\n', dump_file);\n+\t    }\n+\t  m_cache.set_global_range (lhs, r);\n+\t}\n+    }\n+}\n+\n // This routine will export whatever global ranges are known to GCC\n // SSA_RANGE_NAME_INFO and SSA_NAME_PTR_INFO fields.\n "}, {"sha": "22e05f645f81d03e9ad4bf31ba532c479e403cdf", "filename": "gcc/gimple-range.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Fgimple-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Fgimple-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.h?ref=6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "patch": "@@ -51,6 +51,7 @@ class gimple_ranger : public range_query\n   virtual bool range_of_stmt (vrange &r, gimple *, tree name = NULL) override;\n   virtual bool range_of_expr (vrange &r, tree name, gimple * = NULL) override;\n   virtual bool range_on_edge (vrange &r, edge e, tree name) override;\n+  virtual void update_stmt (gimple *) override;\n   void range_on_entry (vrange &r, basic_block bb, tree name);\n   void range_on_exit (vrange &r, basic_block bb, tree name);\n   void export_global_ranges ();"}, {"sha": "9e5da8890c4ec6ce427ba9932e4e2399ce55355c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp-update.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-update.c?ref=6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -fdump-tree-vrp1 \" } */\n+\n+/* Tests that calls to update_stmt by the folder will also update ranger's\n+   cache value and produce the correct result for the builtin_constant_p\n+   function.  */\n+\n+void dead ();\n+\n+void foo( void *_thrdescr, int _result)\n+{\n+  const char *lossage = _result ? \"constant string\" : 0;\n+\n+  if (__builtin_expect (lossage != ((void *)0) , 0))\n+    {\n+    unsigned __message_length = __builtin_strlen (lossage);\n+    if (! __builtin_constant_p (__message_length))\n+      dead ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"dead\" \"vrp1\" } } */"}, {"sha": "9e85998b75e978f8bde894ddb2beaa7bca03a70b", "filename": "gcc/tree-ssa-operands.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Ftree-ssa-operands.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Ftree-ssa-operands.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.cc?ref=6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stmt.h\"\n #include \"print-tree.h\"\n #include \"dumpfile.h\"\n+#include \"value-query.h\"\n \n \n /* This file contains the code required to manage the operands cache of the\n@@ -1146,6 +1147,8 @@ update_stmt_operands (struct function *fn, gimple *stmt)\n   gcc_assert (gimple_modified_p (stmt));\n   operands_scanner (fn, stmt).build_ssa_operands ();\n   gimple_set_modified (stmt, false);\n+  // Inform the active range query an update has happened.\n+  get_range_query (fn)->update_stmt (stmt);\n \n   timevar_pop (TV_TREE_OPS);\n }"}, {"sha": "b8e6fedfb2866077affdb3c8432dc33a84bbda51", "filename": "gcc/value-query.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Fvalue-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd485d15c1a2c427c39bcd45e03bed8cde689e6/gcc%2Fvalue-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.h?ref=6fd485d15c1a2c427c39bcd45e03bed8cde689e6", "patch": "@@ -93,6 +93,9 @@ class range_query : public value_query\n   virtual bool range_on_edge (vrange &r, edge, tree expr);\n   virtual bool range_of_stmt (vrange &r, gimple *, tree name = NULL);\n \n+  // When the IL in a stmt is changed, call this for better results.\n+  virtual void update_stmt (gimple *) { }\n+\n   // Query if there is any relation between SSA1 and SSA2.\n   relation_kind query_relation (gimple *s, tree ssa1, tree ssa2,\n \t\t\t\tbool get_range = true);"}]}