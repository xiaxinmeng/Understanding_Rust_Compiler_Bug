{"sha": "985b3a6837dee7001e6b618f073ed74f0edf5787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1YjNhNjgzN2RlZTcwMDFlNmI2MThmMDczZWQ3NGYwZWRmNTc4Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2019-06-10T16:57:15Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-04-29T11:45:20Z"}, "message": "Generate offset adjusted operation for op_by_pieces operations\n\nAdd an overlap_op_by_pieces_p target hook for op_by_pieces operations\nbetween two areas of memory to generate one offset adjusted operation\nin the smallest integer mode for the remaining bytes on the last piece\noperation of a memory region to avoid doing more than one smaller\noperations.\n\nPass the RTL information from the previous iteration to m_constfn in\nop_by_pieces operation so that builtin_memset_[read|gen]_str can\ngenerate the new RTL from the previous RTL.\n\nTested on Linux/x86-64.\n\ngcc/\n\n\tPR middle-end/90773\n\t* builtins.c (builtin_memcpy_read_str): Add a dummy argument.\n\t(builtin_strncpy_read_str): Likewise.\n\t(builtin_memset_read_str): Add an argument for the previous RTL\n\tinformation and generate the new RTL from the previous RTL info.\n\t(builtin_memset_gen_str): Likewise.\n\t* builtins.h (builtin_strncpy_read_str): Update the prototype.\n\t(builtin_memset_read_str): Likewise.\n\t* expr.c (by_pieces_ninsns): If targetm.overlap_op_by_pieces_p()\n\treturns true, round up size and alignment to the widest integer\n\tmode for maximum size.\n\t(pieces_addr::adjust): Add a pointer to by_pieces_prev argument\n\tand pass it to m_constfn.\n\t(op_by_pieces_d): Add m_push and m_overlap_op_by_pieces.\n\t(op_by_pieces_d::op_by_pieces_d): Add a bool argument to\n\tinitialize m_push.  Initialize m_overlap_op_by_pieces with\n\ttargetm.overlap_op_by_pieces_p ().\n\t(op_by_pieces_d::run): Pass the previous RTL information to\n\tpieces_addr::adjust and generate overlapping operations if\n\tm_overlap_op_by_pieces is true.\n\t(PUSHG_P): New.\n\t(move_by_pieces_d::move_by_pieces_d): Updated for op_by_pieces_d\n\tchange.\n\t(store_by_pieces_d::store_by_pieces_d): Updated for op_by_pieces_d\n\tchange.\n\t(can_store_by_pieces): Use by_pieces_constfn on constfun.\n\t(store_by_pieces): Use by_pieces_constfn on constfun.  Updated\n\tfor op_by_pieces_d change.\n\t(clear_by_pieces_1): Add a dummy argument.\n\t(clear_by_pieces): Updated for op_by_pieces_d change.\n\t(compare_by_pieces_d::compare_by_pieces_d): Likewise.\n\t(string_cst_read_str): Add a dummy argument.\n\t* expr.h (by_pieces_constfn): Add a dummy argument.\n\t(by_pieces_prev): New.\n\t* target.def (overlap_op_by_pieces_p): New target hook.\n\t* config/i386/i386.c (TARGET_OVERLAP_OP_BY_PIECES_P): New.\n\t* doc/tm.texi.in: Add TARGET_OVERLAP_OP_BY_PIECES_P.\n\t* doc/tm.texi: Regenerated.\n\ngcc/testsuite/\n\n\tPR middle-end/90773\n\t* g++.dg/pr90773-1.h: New test.\n\t* g++.dg/pr90773-1a.C: Likewise.\n\t* g++.dg/pr90773-1b.C: Likewise.\n\t* g++.dg/pr90773-1c.C: Likewise.\n\t* g++.dg/pr90773-1d.C: Likewise.\n\t* gcc.target/i386/pr90773-1.c: Likewise.\n\t* gcc.target/i386/pr90773-2.c: Likewise.\n\t* gcc.target/i386/pr90773-3.c: Likewise.\n\t* gcc.target/i386/pr90773-4.c: Likewise.\n\t* gcc.target/i386/pr90773-5.c: Likewise.\n\t* gcc.target/i386/pr90773-6.c: Likewise.\n\t* gcc.target/i386/pr90773-7.c: Likewise.\n\t* gcc.target/i386/pr90773-8.c: Likewise.\n\t* gcc.target/i386/pr90773-9.c: Likewise.\n\t* gcc.target/i386/pr90773-10.c: Likewise.\n\t* gcc.target/i386/pr90773-11.c: Likewise.\n\t* gcc.target/i386/pr90773-12.c: Likewise.\n\t* gcc.target/i386/pr90773-13.c: Likewise.\n\t* gcc.target/i386/pr90773-14.c: Likewise.", "tree": {"sha": "3607db433c496736c6a9cc22a90714994db0ca24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3607db433c496736c6a9cc22a90714994db0ca24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985b3a6837dee7001e6b618f073ed74f0edf5787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985b3a6837dee7001e6b618f073ed74f0edf5787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985b3a6837dee7001e6b618f073ed74f0edf5787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985b3a6837dee7001e6b618f073ed74f0edf5787/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af4ccaa7515b8e72449448c509916575831e6292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4ccaa7515b8e72449448c509916575831e6292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4ccaa7515b8e72449448c509916575831e6292"}], "stats": {"total": 429, "additions": 398, "deletions": 31}, "files": [{"sha": "2d6bf4a65b4da53780eaaa0b798a3a67bcf819b0", "filename": "gcc/builtins.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -128,7 +128,6 @@ static rtx expand_builtin_va_copy (tree);\n static rtx inline_expand_builtin_bytecmp (tree, rtx);\n static rtx expand_builtin_strcmp (tree, rtx);\n static rtx expand_builtin_strncmp (tree, rtx, machine_mode);\n-static rtx builtin_memcpy_read_str (void *, HOST_WIDE_INT, scalar_int_mode);\n static rtx expand_builtin_memchr (tree, rtx);\n static rtx expand_builtin_memcpy (tree, rtx);\n static rtx expand_builtin_memory_copy_args (tree dest, tree src, tree len,\n@@ -145,7 +144,6 @@ static rtx expand_builtin_stpcpy (tree, rtx, machine_mode);\n static rtx expand_builtin_stpncpy (tree, rtx);\n static rtx expand_builtin_strncat (tree, rtx);\n static rtx expand_builtin_strncpy (tree, rtx);\n-static rtx builtin_memset_gen_str (void *, HOST_WIDE_INT, scalar_int_mode);\n static rtx expand_builtin_memset (tree, rtx, machine_mode);\n static rtx expand_builtin_memset_args (tree, tree, tree, rtx, machine_mode, tree);\n static rtx expand_builtin_bzero (tree);\n@@ -3860,7 +3858,7 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n    a target constant.  */\n \n static rtx\n-builtin_memcpy_read_str (void *data, HOST_WIDE_INT offset,\n+builtin_memcpy_read_str (void *data, void *, HOST_WIDE_INT offset,\n \t\t\t scalar_int_mode mode)\n {\n   /* The REPresentation pointed to by DATA need not be a nul-terminated\n@@ -6373,7 +6371,7 @@ expand_builtin_stpncpy (tree exp, rtx)\n    constant.  */\n \n rtx\n-builtin_strncpy_read_str (void *data, HOST_WIDE_INT offset,\n+builtin_strncpy_read_str (void *data, void *, HOST_WIDE_INT offset,\n \t\t\t  scalar_int_mode mode)\n {\n   const char *str = (const char *) data;\n@@ -6584,12 +6582,22 @@ expand_builtin_strncpy (tree exp, rtx target)\n \n /* Callback routine for store_by_pieces.  Read GET_MODE_BITSIZE (MODE)\n    bytes from constant string DATA + OFFSET and return it as target\n-   constant.  */\n+   constant.  If PREV isn't nullptr, it has the RTL info from the\n+   previous iteration.  */\n \n rtx\n-builtin_memset_read_str (void *data, HOST_WIDE_INT offset ATTRIBUTE_UNUSED,\n+builtin_memset_read_str (void *data, void *prevp,\n+\t\t\t HOST_WIDE_INT offset ATTRIBUTE_UNUSED,\n \t\t\t scalar_int_mode mode)\n {\n+  by_pieces_prev *prev = (by_pieces_prev *) prevp;\n+  if (prev != nullptr && prev->data != nullptr)\n+    {\n+      /* Use the previous data in the same mode.  */\n+      if (prev->mode == mode)\n+\treturn prev->data;\n+    }\n+\n   const char *c = (const char *) data;\n   char *p = XALLOCAVEC (char, GET_MODE_SIZE (mode));\n \n@@ -6601,16 +6609,28 @@ builtin_memset_read_str (void *data, HOST_WIDE_INT offset ATTRIBUTE_UNUSED,\n /* Callback routine for store_by_pieces.  Return the RTL of a register\n    containing GET_MODE_SIZE (MODE) consecutive copies of the unsigned\n    char value given in the RTL register data.  For example, if mode is\n-   4 bytes wide, return the RTL for 0x01010101*data.  */\n+   4 bytes wide, return the RTL for 0x01010101*data.  If PREV isn't\n+   nullptr, it has the RTL info from the previous iteration.  */\n \n static rtx\n-builtin_memset_gen_str (void *data, HOST_WIDE_INT offset ATTRIBUTE_UNUSED,\n+builtin_memset_gen_str (void *data, void *prevp,\n+\t\t\tHOST_WIDE_INT offset ATTRIBUTE_UNUSED,\n \t\t\tscalar_int_mode mode)\n {\n   rtx target, coeff;\n   size_t size;\n   char *p;\n \n+  by_pieces_prev *prev = (by_pieces_prev *) prevp;\n+  if (prev != nullptr && prev->data != nullptr)\n+    {\n+      /* Use the previous data in the same mode.  */\n+      if (prev->mode == mode)\n+\treturn prev->data;\n+\n+      return simplify_gen_subreg (mode, prev->data, prev->mode, 0);\n+    }\n+\n   size = GET_MODE_SIZE (mode);\n   if (size == 1)\n     return (rtx) data;"}, {"sha": "e71f40c300a1e244b61409cda7dcdf893f79a2ee", "filename": "gcc/builtins.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -110,8 +110,10 @@ extern void expand_builtin_update_setjmp_buf (rtx);\n extern tree mathfn_built_in (tree, enum built_in_function fn);\n extern tree mathfn_built_in (tree, combined_fn);\n extern tree mathfn_built_in_type (combined_fn);\n-extern rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, scalar_int_mode);\n-extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, scalar_int_mode);\n+extern rtx builtin_strncpy_read_str (void *, void *, HOST_WIDE_INT,\n+\t\t\t\t     scalar_int_mode);\n+extern rtx builtin_memset_read_str (void *, void *, HOST_WIDE_INT,\n+\t\t\t\t    scalar_int_mode);\n extern rtx expand_builtin_saveregs (void);\n extern tree std_build_builtin_va_list (void);\n extern tree std_fn_abi_va_list (tree);"}, {"sha": "68f33f96f5aa72745a0c531782273acd44272377", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -23538,6 +23538,9 @@ ix86_run_selftests (void)\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST ix86_address_cost\n \n+#undef TARGET_OVERLAP_OP_BY_PIECES_P\n+#define TARGET_OVERLAP_OP_BY_PIECES_P hook_bool_void_true\n+\n #undef TARGET_FLAGS_REGNUM\n #define TARGET_FLAGS_REGNUM FLAGS_REG\n #undef TARGET_FIXED_CONDITION_CODE_REGS"}, {"sha": "7e8fb8b6ee8b181d54216b86b3260faff3755c47", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -6767,6 +6767,13 @@ in code size, for example where the number of insns emitted to perform a\n move would be greater than that of a library call.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_OVERLAP_OP_BY_PIECES_P (void)\n+This target hook should return true if when the @code{by_pieces}\n+infrastructure is used, an offset adjusted unaligned memory operation\n+in the smallest integer mode for the last piece operation of a memory\n+region can be generated to avoid doing more than one smaller operations.\n+@end deftypefn\n+\n @deftypefn {Target Hook} int TARGET_COMPARE_BY_PIECES_BRANCH_RATIO (machine_mode @var{mode})\n When expanding a block comparison in MODE, gcc can try to reduce the\n number of branches at the expense of more memory operations.  This hook"}, {"sha": "20acf363ed961112040c23de24689081671e36bd", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -4588,6 +4588,8 @@ If you don't define this, a reasonable default is used.\n \n @hook TARGET_USE_BY_PIECES_INFRASTRUCTURE_P\n \n+@hook TARGET_OVERLAP_OP_BY_PIECES_P\n+\n @hook TARGET_COMPARE_BY_PIECES_BRANCH_RATIO\n \n @defmac MOVE_MAX_PIECES"}, {"sha": "e0167b77410588df875011978eb974b52b0cae0b", "filename": "gcc/expr.c", "status": "modified", "additions": 85, "deletions": 20, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -815,12 +815,27 @@ by_pieces_ninsns (unsigned HOST_WIDE_INT l, unsigned int align,\n \t\t  unsigned int max_size, by_pieces_operation op)\n {\n   unsigned HOST_WIDE_INT n_insns = 0;\n+  scalar_int_mode mode;\n+\n+  if (targetm.overlap_op_by_pieces_p () && op != COMPARE_BY_PIECES)\n+    {\n+      /* NB: Round up L and ALIGN to the widest integer mode for\n+\t MAX_SIZE.  */\n+      mode = widest_int_mode_for_size (max_size);\n+      if (optab_handler (mov_optab, mode) != CODE_FOR_nothing)\n+\t{\n+\t  unsigned HOST_WIDE_INT up = ROUND_UP (l, GET_MODE_SIZE (mode));\n+\t  if (up > l)\n+\t    l = up;\n+\t  align = GET_MODE_ALIGNMENT (mode);\n+\t}\n+    }\n \n   align = alignment_for_piecewise_move (MOVE_MAX_PIECES, align);\n \n   while (max_size > 1 && l > 0)\n     {\n-      scalar_int_mode mode = widest_int_mode_for_size (max_size);\n+      mode = widest_int_mode_for_size (max_size);\n       enum insn_code icode;\n \n       unsigned int modesize = GET_MODE_SIZE (mode);\n@@ -888,7 +903,8 @@ class pieces_addr\n   void *m_cfndata;\n public:\n   pieces_addr (rtx, bool, by_pieces_constfn, void *);\n-  rtx adjust (scalar_int_mode, HOST_WIDE_INT);\n+  rtx adjust (scalar_int_mode, HOST_WIDE_INT,\n+\t      by_pieces_prev * = nullptr);\n   void increment_address (HOST_WIDE_INT);\n   void maybe_predec (HOST_WIDE_INT);\n   void maybe_postinc (HOST_WIDE_INT);\n@@ -990,10 +1006,12 @@ pieces_addr::decide_autoinc (machine_mode ARG_UNUSED (mode), bool reverse,\n    but we still modify the MEM's properties.  */\n \n rtx\n-pieces_addr::adjust (scalar_int_mode mode, HOST_WIDE_INT offset)\n+pieces_addr::adjust (scalar_int_mode mode, HOST_WIDE_INT offset,\n+\t\t     by_pieces_prev *prev)\n {\n   if (m_constfn)\n-    return m_constfn (m_cfndata, offset, mode);\n+    /* Pass the previous data to m_constfn.  */\n+    return m_constfn (m_cfndata, prev, offset, mode);\n   if (m_obj == NULL_RTX)\n     return NULL_RTX;\n   if (m_auto)\n@@ -1051,6 +1069,10 @@ class op_by_pieces_d\n   unsigned int m_align;\n   unsigned int m_max_size;\n   bool m_reverse;\n+  /* True if this is a stack push.  */\n+  bool m_push;\n+  /* True if targetm.overlap_op_by_pieces_p () returns true.  */\n+  bool m_overlap_op_by_pieces;\n \n   /* Virtual functions, overriden by derived classes for the specific\n      operation.  */\n@@ -1062,7 +1084,7 @@ class op_by_pieces_d\n \n  public:\n   op_by_pieces_d (rtx, bool, rtx, bool, by_pieces_constfn, void *,\n-\t\t  unsigned HOST_WIDE_INT, unsigned int);\n+\t\t  unsigned HOST_WIDE_INT, unsigned int, bool);\n   void run ();\n };\n \n@@ -1077,10 +1099,11 @@ op_by_pieces_d::op_by_pieces_d (rtx to, bool to_load,\n \t\t\t\tby_pieces_constfn from_cfn,\n \t\t\t\tvoid *from_cfn_data,\n \t\t\t\tunsigned HOST_WIDE_INT len,\n-\t\t\t\tunsigned int align)\n+\t\t\t\tunsigned int align, bool push)\n   : m_to (to, to_load, NULL, NULL),\n     m_from (from, from_load, from_cfn, from_cfn_data),\n-    m_len (len), m_max_size (MOVE_MAX_PIECES + 1)\n+    m_len (len), m_max_size (MOVE_MAX_PIECES + 1),\n+    m_push (push)\n {\n   int toi = m_to.get_addr_inc ();\n   int fromi = m_from.get_addr_inc ();\n@@ -1109,6 +1132,8 @@ op_by_pieces_d::op_by_pieces_d (rtx to, bool to_load,\n \n   align = alignment_for_piecewise_move (MOVE_MAX_PIECES, align);\n   m_align = align;\n+\n+  m_overlap_op_by_pieces = targetm.overlap_op_by_pieces_p ();\n }\n \n /* This function returns the largest usable integer mode for LEN bytes\n@@ -1145,6 +1170,9 @@ op_by_pieces_d::run ()\n   scalar_int_mode mode = widest_int_mode_for_size (m_max_size);\n   mode = get_usable_mode (mode, m_len);\n \n+  by_pieces_prev to_prev = { nullptr, mode };\n+  by_pieces_prev from_prev = { nullptr, mode };\n+\n   do\n     {\n       unsigned int size = GET_MODE_SIZE (mode);\n@@ -1155,8 +1183,12 @@ op_by_pieces_d::run ()\n \t  if (m_reverse)\n \t    m_offset -= size;\n \n-\t  to1 = m_to.adjust (mode, m_offset);\n-\t  from1 = m_from.adjust (mode, m_offset);\n+\t  to1 = m_to.adjust (mode, m_offset, &to_prev);\n+\t  to_prev.data = to1;\n+\t  to_prev.mode = mode;\n+\t  from1 = m_from.adjust (mode, m_offset, &from_prev);\n+\t  from_prev.data = from1;\n+\t  from_prev.mode = mode;\n \n \t  m_to.maybe_predec (-(HOST_WIDE_INT)size);\n \t  m_from.maybe_predec (-(HOST_WIDE_INT)size);\n@@ -1177,9 +1209,32 @@ op_by_pieces_d::run ()\n       if (m_len == 0)\n \treturn;\n \n-      /* NB: widest_int_mode_for_size checks SIZE > 1.  */\n-      mode = widest_int_mode_for_size (size);\n-      mode = get_usable_mode (mode, m_len);\n+      if (!m_push && m_overlap_op_by_pieces)\n+\t{\n+\t  /* NB: Generate overlapping operations if it is not a stack\n+\t     push since stack push must not overlap.  Get the smallest\n+\t     integer mode for M_LEN bytes.  */\n+\t  mode = smallest_int_mode_for_size (m_len * BITS_PER_UNIT);\n+\t  mode = get_usable_mode (mode, GET_MODE_SIZE (mode));\n+\t  int gap = GET_MODE_SIZE (mode) - m_len;\n+\t  if (gap > 0)\n+\t    {\n+\t      /* If size of MODE > M_LEN, generate the last operation\n+\t\t in MODE for the remaining bytes with ovelapping memory\n+\t\t from the previois operation.  */\n+\t      if (m_reverse)\n+\t\tm_offset += gap;\n+\t      else\n+\t\tm_offset -= gap;\n+\t      m_len += gap;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* NB: widest_int_mode_for_size checks SIZE > 1.  */\n+\t  mode = widest_int_mode_for_size (size);\n+\t  mode = get_usable_mode (mode, m_len);\n+\t}\n     }\n   while (1);\n \n@@ -1190,6 +1245,12 @@ op_by_pieces_d::run ()\n /* Derived class from op_by_pieces_d, providing support for block move\n    operations.  */\n \n+#ifdef PUSH_ROUNDING\n+#define PUSHG_P(to)  ((to) == nullptr)\n+#else\n+#define PUSHG_P(to)  false\n+#endif\n+\n class move_by_pieces_d : public op_by_pieces_d\n {\n   insn_gen_fn m_gen_fun;\n@@ -1199,7 +1260,8 @@ class move_by_pieces_d : public op_by_pieces_d\n  public:\n   move_by_pieces_d (rtx to, rtx from, unsigned HOST_WIDE_INT len,\n \t\t    unsigned int align)\n-    : op_by_pieces_d (to, false, from, true, NULL, NULL, len, align)\n+    : op_by_pieces_d (to, false, from, true, NULL, NULL, len, align,\n+\t\t      PUSHG_P (to))\n   {\n   }\n   rtx finish_retmode (memop_ret);\n@@ -1294,7 +1356,8 @@ class store_by_pieces_d : public op_by_pieces_d\n  public:\n   store_by_pieces_d (rtx to, by_pieces_constfn cfn, void *cfn_data,\n \t\t     unsigned HOST_WIDE_INT len, unsigned int align)\n-    : op_by_pieces_d (to, false, NULL_RTX, true, cfn, cfn_data, len, align)\n+    : op_by_pieces_d (to, false, NULL_RTX, true, cfn, cfn_data, len,\n+\t\t      align, false)\n   {\n   }\n   rtx finish_retmode (memop_ret);\n@@ -1349,7 +1412,7 @@ store_by_pieces_d::finish_retmode (memop_ret retmode)\n \n int\n can_store_by_pieces (unsigned HOST_WIDE_INT len,\n-\t\t     rtx (*constfun) (void *, HOST_WIDE_INT, scalar_int_mode),\n+\t\t     by_pieces_constfn constfun,\n \t\t     void *constfundata, unsigned int align, bool memsetp)\n {\n   unsigned HOST_WIDE_INT l;\n@@ -1396,7 +1459,7 @@ can_store_by_pieces (unsigned HOST_WIDE_INT len,\n \t\t  if (reverse)\n \t\t    offset -= size;\n \n-\t\t  cst = (*constfun) (constfundata, offset, mode);\n+\t\t  cst = (*constfun) (constfundata, nullptr, offset, mode);\n \t\t  if (!targetm.legitimate_constant_p (mode, cst))\n \t\t    return 0;\n \n@@ -1426,7 +1489,7 @@ can_store_by_pieces (unsigned HOST_WIDE_INT len,\n \n rtx\n store_by_pieces (rtx to, unsigned HOST_WIDE_INT len,\n-\t\t rtx (*constfun) (void *, HOST_WIDE_INT, scalar_int_mode),\n+\t\t by_pieces_constfn constfun,\n \t\t void *constfundata, unsigned int align, bool memsetp,\n \t\t memop_ret retmode)\n {\n@@ -1454,7 +1517,7 @@ store_by_pieces (rtx to, unsigned HOST_WIDE_INT len,\n    Return const0_rtx unconditionally.  */\n \n static rtx\n-clear_by_pieces_1 (void *, HOST_WIDE_INT, scalar_int_mode)\n+clear_by_pieces_1 (void *, void *, HOST_WIDE_INT, scalar_int_mode)\n {\n   return const0_rtx;\n }\n@@ -1490,7 +1553,8 @@ class compare_by_pieces_d : public op_by_pieces_d\n   compare_by_pieces_d (rtx op0, rtx op1, by_pieces_constfn op1_cfn,\n \t\t       void *op1_cfn_data, HOST_WIDE_INT len, int align,\n \t\t       rtx_code_label *fail_label)\n-    : op_by_pieces_d (op0, true, op1, true, op1_cfn, op1_cfn_data, len, align)\n+    : op_by_pieces_d (op0, true, op1, true, op1_cfn, op1_cfn_data, len,\n+\t\t      align, false)\n   {\n     m_fail_label = fail_label;\n   }\n@@ -5676,7 +5740,8 @@ emit_storent_insn (rtx to, rtx from)\n /* Helper function for store_expr storing of STRING_CST.  */\n \n static rtx\n-string_cst_read_str (void *data, HOST_WIDE_INT offset, scalar_int_mode mode)\n+string_cst_read_str (void *data, void *, HOST_WIDE_INT offset,\n+\t\t     scalar_int_mode mode)\n {\n   tree str = (tree) data;\n "}, {"sha": "9a2736f69fa5897f86afc7c29ad2a584b51ae269", "filename": "gcc/expr.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -107,7 +107,15 @@ enum block_op_methods\n   BLOCK_OP_NO_LIBCALL_RET\n };\n \n-typedef rtx (*by_pieces_constfn) (void *, HOST_WIDE_INT, scalar_int_mode);\n+typedef rtx (*by_pieces_constfn) (void *, void *, HOST_WIDE_INT,\n+\t\t\t\t  scalar_int_mode);\n+\n+/* The second pointer passed to by_pieces_constfn.  */\n+struct by_pieces_prev\n+{\n+  rtx data;\n+  scalar_int_mode mode;\n+};\n \n extern rtx emit_block_move (rtx, rtx, rtx, enum block_op_methods);\n extern rtx emit_block_move_hints (rtx, rtx, rtx, enum block_op_methods,"}, {"sha": "c3a4280b6555046dbc6126bdc4653f79e5d53fa5", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -3642,6 +3642,15 @@ move would be greater than that of a library call.\",\n         enum by_pieces_operation op, bool speed_p),\n  default_use_by_pieces_infrastructure_p)\n \n+DEFHOOK\n+(overlap_op_by_pieces_p,\n+ \"This target hook should return true if when the @code{by_pieces}\\n\\\n+infrastructure is used, an offset adjusted unaligned memory operation\\n\\\n+in the smallest integer mode for the last piece operation of a memory\\n\\\n+region can be generated to avoid doing more than one smaller operations.\",\n+ bool, (void),\n+ hook_bool_void_false)\n+\n DEFHOOK\n (compare_by_pieces_branch_ratio,\n  \"When expanding a block comparison in MODE, gcc can try to reduce the\\n\\"}, {"sha": "abdb78b078b206ee5f847f70f556d582b38e8518", "filename": "gcc/testsuite/g++.dg/pr90773-1.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1.h?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,14 @@\n+class fixed_wide_int_storage {\n+public:\n+  long val[10];\n+  int len;\n+  fixed_wide_int_storage ()\n+    {\n+      len = sizeof (val) / sizeof (val[0]);\n+      for (int i = 0; i < len; i++)\n+\tval[i] = i;\n+    }\n+};\n+\n+extern void foo (fixed_wide_int_storage);\n+extern int record_increment(void);"}, {"sha": "3ab8d929f74881cf00cd06d74cbb46ef19065f5e", "filename": "gcc/testsuite/g++.dg/pr90773-1a.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1a.C?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-mno-avx -msse2 -mtune=skylake\" { target { i?86-*-* x86_64-*-* } } }\n+\n+#include \"pr90773-1.h\"\n+\n+int\n+record_increment(void)\n+{\n+  fixed_wide_int_storage x;\n+  foo (x);\n+  return 0;\n+}"}, {"sha": "9713b2dd61207c1e6b31c6c07c7f30130a06fe5b", "filename": "gcc/testsuite/g++.dg/pr90773-1b.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1b.C?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-mno-avx512f -march=skylake\" { target { i?86-*-* x86_64-*-* } } }\n+\n+#include \"pr90773-1a.C\""}, {"sha": "699357a88dcc0b6c4cdc271ed8930fbf2f53d029", "filename": "gcc/testsuite/g++.dg/pr90773-1c.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1c.C?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-march=skylake-avx512\" { target { i?86-*-* x86_64-*-* } } }\n+\n+#include \"pr90773-1a.C\""}, {"sha": "bf9d8543c1b39c76c0319837e47bf7f5808d9032", "filename": "gcc/testsuite/g++.dg/pr90773-1d.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90773-1d.C?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-march=native\" { target { i?86-*-* x86_64-*-* } } }\n+// { dg-additional-sources \"pr90773-1a.C\" }\n+\n+#include \"pr90773-1.h\"\n+\n+void\n+foo (fixed_wide_int_storage x)\n+{\n+  for (int i = 0; i < x.len; i++)\n+    if (x.val[i] != i)\n+      __builtin_abort ();\n+}\n+\n+int main ()\n+{\n+  return record_increment ();\n+}"}, {"sha": "1d9f282dc0d9f43511823beb61948eecc125eb12", "filename": "gcc/testsuite/gcc.target/i386/pr90773-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-1.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 15);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]+7\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+4\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+8\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+11\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */"}, {"sha": "9ad725e4880a49e6dbe3e4ba89ab69e559aeb392", "filename": "gcc/testsuite/gcc.target/i386/pr90773-10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-10.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (int c)\n+{\n+  __builtin_memset (dst, c, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+.+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movb\\[\\\\t \\]+.+, 4\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "1734c03a2ebcc5649f6770df0fc1a43204726c42", "filename": "gcc/testsuite/gcc.target/i386/pr90773-11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-11.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (int c)\n+{\n+  __builtin_memset (dst, c, 6);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+.+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movw\\[\\\\t \\]+.+, 4\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "e45840a5b8d0e5d3e5284286b9a42b58912d7077", "filename": "gcc/testsuite/gcc.target/i386/pr90773-12.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-12.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=skylake\" } */\n+\n+void\n+foo (char *dst, char *src)\n+{\n+  __builtin_memcpy (dst, src, 255);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+\\[0-9\\]*\\\\(%\\[\\^,\\]+\\\\),\" 16 } } */\n+/* { dg-final { scan-assembler-not \"mov\\[bwlq\\]\" } } */"}, {"sha": "4d5ae8d1086a0603934853971cc01fc77ffb70d7", "filename": "gcc/testsuite/gcc.target/i386/pr90773-13.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-13.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=skylake\" } */\n+\n+void\n+foo (char *dst)\n+{\n+  __builtin_memset (dst, 0, 255);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]+%xmm\\[0-9\\]+, \\[0-9\\]*\\\\(%\\[\\^,\\]+\\\\)\" 16 } } */\n+/* { dg-final { scan-assembler-not \"mov\\[bwlq\\]\" } } */"}, {"sha": "6364916ecaccf7a554379fcf0649b27f3a7671a9", "filename": "gcc/testsuite/gcc.target/i386/pr90773-14.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-14.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 1, 20);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]+%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\\\$16843009, 16\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "64495751b46406daf1c23bdd910d0b9a0bfb79d9", "filename": "gcc/testsuite/gcc.target/i386/pr90773-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-2.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+/* { dg-additional-options \"-mno-avx -msse2\" { target { ! ia32 } } } */\n+/* { dg-additional-options \"-mno-sse\" { target ia32 } } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 19);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+15\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+4\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+8\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+12\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+15\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */"}, {"sha": "84747c94652563c5cd2bcb0930a82ad5a16761ef", "filename": "gcc/testsuite/gcc.target/i386/pr90773-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-3.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+/* { dg-additional-options \"-mno-avx -msse2\" { target { ! ia32 } } } */\n+/* { dg-additional-options \"-mno-sse\" { target ia32 } } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 31);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+15\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+4\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+8\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+12\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+16\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+20\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+24\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+27\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */"}, {"sha": "ec0bc0100aefc8885656a9088c50abc16af7adb9", "filename": "gcc/testsuite/gcc.target/i386/pr90773-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-4.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 0, 31);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]+%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]+%xmm\\[0-9\\]+, 15\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "49d03ef2403863f0447d65c54e1aa741fee5e036", "filename": "gcc/testsuite/gcc.target/i386/pr90773-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-5.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 0, 21);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]+%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]+\\\\\\$0+, 13\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "46498f6f50c257342a100ddff213d3536596e5ba", "filename": "gcc/testsuite/gcc.target/i386/pr90773-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-6.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+void\n+foo (char *dst, char *src)\n+{\n+  __builtin_memcpy (dst, src, 255);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqu\\[\\\\t \\]+\\[0-9\\]*\\\\(%\\[\\^,\\]+\\\\),\" 16 } } */\n+/* { dg-final { scan-assembler-not \"mov\\[bwlq\\]\" } } */"}, {"sha": "4d5ae8d1086a0603934853971cc01fc77ffb70d7", "filename": "gcc/testsuite/gcc.target/i386/pr90773-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-7.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=skylake\" } */\n+\n+void\n+foo (char *dst)\n+{\n+  __builtin_memset (dst, 0, 255);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]+%xmm\\[0-9\\]+, \\[0-9\\]*\\\\(%\\[\\^,\\]+\\\\)\" 16 } } */\n+/* { dg-final { scan-assembler-not \"mov\\[bwlq\\]\" } } */"}, {"sha": "0d47845d56088792e893c4e8af701070781bc703", "filename": "gcc/testsuite/gcc.target/i386/pr90773-8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-8.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 0, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+.+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movb\\[\\\\t \\]+.+, 4\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "ab5ea451f30df12f06a5ecaee5be208cee3ecb08", "filename": "gcc/testsuite/gcc.target/i386/pr90773-9.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3a6837dee7001e6b618f073ed74f0edf5787/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-9.c?ref=985b3a6837dee7001e6b618f073ed74f0edf5787", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 0, 6);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+.+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movw\\[\\\\t \\]+.+, 4\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}]}