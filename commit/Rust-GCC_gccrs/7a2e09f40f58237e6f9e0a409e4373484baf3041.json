{"sha": "7a2e09f40f58237e6f9e0a409e4373484baf3041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyZTA5ZjQwZjU4MjM3ZTZmOWUwYTQwOWU0MzczNDg0YmFmMzA0MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-06-23T17:41:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-06-23T17:41:33Z"}, "message": "i386-protos.h (emit_i387_cw_initialization): Declare.\n\n\t* i386-protos.h (emit_i387_cw_initialization): Declare.\n\t* i386.md (movsi_insv_1): Remove '*'.\n\t(fix_trunc?f?i2): Revamp to use control word parameters.\n\t(fix_trunc?i_1): Likewise; update splitters.\n\t(fix splitter): Remove.\n\t* i386.c (MAX_386_STACK_LOCALS): set to 3.\n\t(emit_i387_cw_initialization): New function.\n\t(output_fix_trunc): Do not initialize control word;\n\tkill dead code; simplify.\n\nFrom-SVN: r43530", "tree": {"sha": "ce07592220760efeedb04f65661a8c2d92758942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce07592220760efeedb04f65661a8c2d92758942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a2e09f40f58237e6f9e0a409e4373484baf3041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2e09f40f58237e6f9e0a409e4373484baf3041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2e09f40f58237e6f9e0a409e4373484baf3041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2e09f40f58237e6f9e0a409e4373484baf3041/comments", "author": null, "committer": null, "parents": [{"sha": "561a03652d94cfdd5ca81faed6b7b0cf84508edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561a03652d94cfdd5ca81faed6b7b0cf84508edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561a03652d94cfdd5ca81faed6b7b0cf84508edf"}], "stats": {"total": 303, "additions": 158, "deletions": 145}, "files": [{"sha": "eaadef074171f6749be0f5802089d249c9d1992c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a2e09f40f58237e6f9e0a409e4373484baf3041", "patch": "@@ -1,3 +1,15 @@\n+Sat Jun 23 19:40:05 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386-protos.h (emit_i387_cw_initialization): Declare.\n+\t* i386.md (movsi_insv_1): Remove '*'.\n+\t(fix_trunc?f?i2): Revamp to use control word parameters.\n+\t(fix_trunc?i_1): Likewise; update splitters.\n+\t(fix splitter): Remove.\n+\t* i386.c (MAX_386_STACK_LOCALS): set to 3.\n+\t(emit_i387_cw_initialization): New function.\n+\t(output_fix_trunc): Do not initialize control word;\n+\tkill dead code; simplify.\n+\n 2001-06-23  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n \n \t* cppmacro.c (make_string_token): Avoid warning."}, {"sha": "58d231336792353c27533db356aacaa5bd97a1be", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7a2e09f40f58237e6f9e0a409e4373484baf3041", "patch": "@@ -154,6 +154,7 @@ extern enum reg_class ix86_preferred_reload_class PARAMS ((rtx,\n extern int ix86_memory_move_cost PARAMS ((enum machine_mode, enum reg_class,\n \t\t\t\t\t  int));\n extern void ix86_set_move_mem_attrs PARAMS ((rtx, rtx, rtx, rtx, rtx));\n+extern void emit_i387_cw_initialization PARAMS ((rtx, rtx));\n \n \n #ifdef TREE_CODE"}, {"sha": "42cc2f7a1cf5ad99a60b12a36b7ed359e62a902f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7a2e09f40f58237e6f9e0a409e4373484baf3041", "patch": "@@ -445,7 +445,7 @@ int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER] =\n struct rtx_def *ix86_compare_op0 = NULL_RTX;\n struct rtx_def *ix86_compare_op1 = NULL_RTX;\n \n-#define MAX_386_STACK_LOCALS 2\n+#define MAX_386_STACK_LOCALS 3\n /* Size of the register save area.  */\n #define X86_64_VARARGS_SIZE (REGPARM_MAX * UNITS_PER_WORD + SSE_REGPARM_MAX * 16)\n \n@@ -4639,6 +4639,25 @@ output_387_binary_op (insn, operands)\n   return buf;\n }\n \n+/* Output code to initialize control word copies used by \n+   trunc?f?i patterns.  NORMAL is set to current control word, while ROUND_DOWN\n+   is set to control word rounding downwards.  */\n+void\n+emit_i387_cw_initialization (normal, round_down)\n+     rtx normal, round_down;\n+{\n+  rtx reg = gen_reg_rtx (HImode);\n+\n+  emit_insn (gen_x86_fnstcw_1 (normal));\n+  emit_move_insn (reg, normal);\n+  if (!TARGET_PARTIAL_REG_STALL && !optimize_size\n+      && !TARGET_64BIT)\n+    emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0xc)));\n+  else\n+    emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0xc00)));\n+  emit_move_insn (round_down, reg);\n+}\n+\n /* Output code for INSN to convert a float to a signed int.  OPERANDS\n    are the insn operands.  The output may be [HSD]Imode and the input\n    operand may be [SDX]Fmode.  */\n@@ -4658,45 +4677,19 @@ output_fix_trunc (insn, operands)\n   if (dimode_p && !stack_top_dies)\n     output_asm_insn (\"fld\\t%y1\", operands);\n \n-  if (! STACK_TOP_P (operands[1]))\n+  if (!STACK_TOP_P (operands[1]))\n     abort ();\n \n-  xops[0] = GEN_INT (12);\n-  xops[1] = adj_offsettable_operand (operands[2], 1);\n-  xops[1] = change_address (xops[1], QImode, NULL_RTX);\n-\n-  xops[2] = operands[0];\n   if (GET_CODE (operands[0]) != MEM)\n-    xops[2] = operands[3];\n-\n-  output_asm_insn (\"fnstcw\\t%2\", operands);\n-  output_asm_insn (\"mov{l}\\t{%2, %4|%4, %2}\", operands);\n-  output_asm_insn (\"mov{b}\\t{%0, %1|%1, %0}\", xops);\n-  output_asm_insn (\"fldcw\\t%2\", operands);\n-  output_asm_insn (\"mov{l}\\t{%4, %2|%2, %4}\", operands);\n+    abort ();\n \n+  output_asm_insn (\"fldcw\\t%3\", operands);\n   if (stack_top_dies || dimode_p)\n-    output_asm_insn (\"fistp%z2\\t%2\", xops);\n+    output_asm_insn (\"fistp%z0\\t%0\", operands);\n   else\n-    output_asm_insn (\"fist%z2\\t%2\", xops);\n-\n+    output_asm_insn (\"fist%z0\\t%0\", operands);\n   output_asm_insn (\"fldcw\\t%2\", operands);\n \n-  if (GET_CODE (operands[0]) != MEM)\n-    {\n-      if (dimode_p)\n-\t{\n-\t  split_di (operands+0, 1, xops+0, xops+1);\n-\t  split_di (operands+3, 1, xops+2, xops+3);\n-\t  output_asm_insn (\"mov{l}\\t{%2, %0|%0, %2}\", xops);\n-\t  output_asm_insn (\"mov{l}\\t{%3, %1|%1, %3}\", xops);\n-\t}\n-      else if (GET_MODE (operands[0]) == SImode)\n-\toutput_asm_insn (\"mov{l}\\t{%3, %0|%0, %3}\", operands);\n-      else\n-\toutput_asm_insn (\"mov{w}\\t{%3, %0|%0, %3}\", operands);\n-    }\n-\n   return \"\";\n }\n "}, {"sha": "fe341a3d45683639d4174bd7bdfcacad8cbd5a44", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 120, "deletions": 113, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2e09f40f58237e6f9e0a409e4373484baf3041/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7a2e09f40f58237e6f9e0a409e4373484baf3041", "patch": "@@ -2313,7 +2313,7 @@\n \t(const_string \"SI\")\n \t(const_string \"QI\")))])\n \n-(define_insn \"*movsi_insv_1\"\n+(define_insn \"movsi_insv_1\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n@@ -4692,32 +4692,36 @@\n (define_expand \"fix_truncxfdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:DI (match_operand:XF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))\n \t      (clobber (match_scratch:XF 5 \"\"))])]\n   \"TARGET_80387 && !TARGET_64BIT\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (DImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (DImode, 0);\")\n \n (define_expand \"fix_trunctfdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:DI (match_operand:TF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (match_scratch:TF 5 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:XF 5 \"\"))])]\n   \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (DImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (DImode, 0);\")\n \n (define_expand \"fix_truncdfdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:DI (match_operand:DF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (match_scratch:DF 5 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:XF 5 \"\"))])]\n   \"TARGET_80387 || (TARGET_SSE2 && TARGET_64BIT)\"\n   \"\n {\n@@ -4731,18 +4735,20 @@\n    }\n   else\n    {\n-     operands[2] = assign_386_stack_local (SImode, 0);\n-     operands[3] = assign_386_stack_local (DImode, 1);\n+     operands[2] = assign_386_stack_local (HImode, 1);\n+     operands[3] = assign_386_stack_local (HImode, 2);\n+     emit_i387_cw_initialization (operands[2], operands[3]);\n+     operands[4] = assign_386_stack_local (DImode, 0);\n    }\n }\")\n \n (define_expand \"fix_truncsfdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:DI (match_operand:SF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (match_scratch:SF 5 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:XF 5 \"\"))])]\n   \"TARGET_80387 || (TARGET_SSE && TARGET_64BIT)\"\n   \"\n {\n@@ -4756,18 +4762,20 @@\n    }\n   else\n    {\n-     operands[2] = assign_386_stack_local (SImode, 0);\n-     operands[3] = assign_386_stack_local (DImode, 1);\n+     operands[2] = assign_386_stack_local (HImode, 1);\n+     operands[3] = assign_386_stack_local (HImode, 2);\n+     emit_i387_cw_initialization (operands[2], operands[3]);\n+     operands[4] = assign_386_stack_local (DImode, 0);\n    }\n }\")\n \n (define_insn \"*fix_truncdi_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n \t(fix:DI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"=o,o\"))\n-   (clobber (match_operand:DI 3 \"memory_operand\" \"=m,m\"))\n-   (clobber (match_scratch:SI 4 \"=&r,&r\"))\n-   (clobber (match_scratch 5 \"=&f,&f\"))]\n+   (use (match_operand:HI 2 \"memory_operand\" \"m,m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m,m\"))\n+   (clobber (match_operand:DI 4 \"memory_operand\" \"=m,m\"))\n+   (clobber (match_scratch 5 \"=&1f,&1f\"))]\n   \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n    && (!TARGET_SSE2 || !TARGET_64BIT\n        || !SSE_FLOAT_MODE_P (GET_MODE (operands[1])))\"\n@@ -4777,17 +4785,17 @@\n (define_split \n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(fix:DI (match_operand 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"memory_operand\" \"\"))\n-   (clobber (match_scratch:SI 4 \"\"))\n+   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n+   (clobber (match_operand:DI 4 \"memory_operand\" \"\"))\n    (clobber (match_scratch 5 \"\"))]\n-  \"reload_completed && !reg_overlap_mentioned_p (operands[4], operands[3])\"\n-  [(parallel [(set (match_dup 3) (fix:DI (match_dup 1)))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 4) (fix:DI (match_dup 1)))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])\n-   (set (match_dup 0) (match_dup 3))]\n+   (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n ;; When SSE available, it is always faster to use it!\n@@ -4810,29 +4818,33 @@\n (define_expand \"fix_truncxfsi2\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:SI (match_operand:XF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387 && !TARGET_64BIT\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (SImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (SImode, 0);\")\n \n (define_expand \"fix_trunctfsi2\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:SI (match_operand:TF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (SImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (SImode, 0);\")\n \n (define_expand \"fix_truncdfsi2\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:SI (match_operand:DF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387 || TARGET_SSE2\"\n   \"\n {\n@@ -4846,17 +4858,19 @@\n    }\n   else\n    {\n-     operands[2] = assign_386_stack_local (SImode, 0);\n-     operands[3] = assign_386_stack_local (SImode, 1);\n+     operands[2] = assign_386_stack_local (HImode, 1);\n+     operands[3] = assign_386_stack_local (HImode, 2);\n+     emit_i387_cw_initialization (operands[2], operands[3]);\n+     operands[4] = assign_386_stack_local (SImode, 0);\n    }\n }\")\n \n (define_expand \"fix_truncsfsi2\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:SI (match_operand:SF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387 || TARGET_SSE\"\n   \"\n {\n@@ -4870,17 +4884,19 @@\n    }\n   else\n    {\n-     operands[2] = assign_386_stack_local (SImode, 0);\n-     operands[3] = assign_386_stack_local (SImode, 1);\n+     operands[2] = assign_386_stack_local (HImode, 1);\n+     operands[3] = assign_386_stack_local (HImode, 2);\n+     emit_i387_cw_initialization (operands[2], operands[3]);\n+     operands[4] = assign_386_stack_local (SImode, 0);\n    }\n }\")\n \n (define_insn \"*fix_truncsi_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=m,?r\")\n \t(fix:SI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"=o,o\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"=m,m\"))\n-   (clobber (match_scratch:SI 4 \"=&r,r\"))]\n+   (use (match_operand:HI 2 \"memory_operand\" \"m,m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m,m\"))\n+   (clobber (match_operand:SI 4 \"memory_operand\" \"=m,m\"))]\n   \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n    && (!TARGET_SSE2 || !SSE_FLOAT_MODE_P (GET_MODE (operands[1])))\"\n   \"* return output_fix_trunc (insn, operands);\"\n@@ -4904,65 +4920,73 @@\n (define_split \n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(fix:SI (match_operand 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"\"))\n-   (clobber (match_scratch:SI 4 \"\"))]\n+   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n+   (clobber (match_operand:SI 4 \"memory_operand\" \"\"))]\n   \"reload_completed\"\n-  [(parallel [(set (match_dup 3) (fix:SI (match_dup 1)))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n+  [(parallel [(set (match_dup 4) (fix:SI (match_dup 1)))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n \t      (clobber (match_dup 4))])\n-   (set (match_dup 0) (match_dup 3))]\n+   (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n ;; Signed conversion to HImode.\n \n (define_expand \"fix_truncxfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:HI (match_operand:XF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387 && !TARGET_64BIT\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (HImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (HImode, 0);\")\n \n (define_expand \"fix_trunctfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:HI (match_operand:TF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (HImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (HImode, 0);\")\n \n (define_expand \"fix_truncdfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:HI (match_operand:DF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387 && !TARGET_SSE2\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (HImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (HImode, 0);\")\n \n (define_expand \"fix_truncsfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t\t   (fix:HI (match_operand:SF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 4 \"\"))])]\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_80387 && !TARGET_SSE\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (HImode, 1);\")\n+  \"operands[2] = assign_386_stack_local (HImode, 1);\n+   operands[3] = assign_386_stack_local (HImode, 2);\n+   emit_i387_cw_initialization (operands[2], operands[3]);\n+   operands[4] = assign_386_stack_local (HImode, 0);\")\n \n (define_insn \"*fix_trunchi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=m,?r\")\n \t(fix:HI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"=o,o\"))\n-   (clobber (match_operand:HI 3 \"memory_operand\" \"=m,m\"))\n-   (clobber (match_scratch:SI 4 \"=&r,r\"))]\n+   (use (match_operand:HI 2 \"memory_operand\" \"m,m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m,m\"))\n+   (clobber (match_operand:HI 4 \"memory_operand\" \"=m,m\"))]\n   \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n    && (TARGET_SSE2 || !SSE_FLOAT_MODE_P (GET_MODE (operands[1])))\"\n   \"* return output_fix_trunc (insn, operands);\"\n@@ -4971,34 +4995,17 @@\n (define_split \n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(fix:HI (match_operand 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))\n-   (clobber (match_operand:HI 3 \"memory_operand\" \"\"))\n-   (clobber (match_scratch:SI 4 \"\"))]\n+   (use (match_operand:HI 2 \"memory_operand\" \"\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"\"))\n+   (clobber (match_operand:HI 4 \"memory_operand\" \"\"))]\n   \"reload_completed\"\n-  [(parallel [(set (match_dup 3) (fix:HI (match_dup 1)))\n-\t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n+  [(parallel [(set (match_dup 4) (fix:HI (match_dup 1)))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n \t      (clobber (match_dup 4))])\n-   (set (match_dup 0) (match_dup 3))]\n+   (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-;; %%% Kill these when reload knows how to do it.\n-(define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(fix (match_operand 1 \"register_operand\" \"\")))]\n-  \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && FP_REG_P (operands[1])\"\n-  [(const_int 0)]\n-  \"\n-{\n-  operands[2] = ix86_force_to_memory (GET_MODE (operands[0]), operands[0]);\n-  operands[2] = gen_rtx_FIX (GET_MODE (operands[2]), operands[1]);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[2], operands[1]));\n-  emit_move_insn (operands[0], operands[2]);\n-  ix86_free_from_memory (GET_MODE (operands[0]));\n-  DONE;\n-}\")\n-\n ;; %% Not used yet.\n (define_insn \"x86_fnstcw_1\"\n   [(set (match_operand:HI 0 \"memory_operand\" \"=m\")"}]}