{"sha": "635aeaa20ffdf6e794f180cc8e053e8dc46db760", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1YWVhYTIwZmZkZjZlNzk0ZjE4MGNjOGUwNTNlOGRjNDZkYjc2MA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-10-31T11:27:46Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-10-31T11:27:46Z"}, "message": "[ARC] Handle store cacheline hazard.\n\nHandle store cacheline hazard for A700 cpus by inserting two NOP_S\nbetween ST ST LD or their logical equivalent (like ST ST NOP_S NOP_S\nJ_L.D LD)\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/arc-arch.h (ARC_TUNE_ARC7XX): New tune value.\n        * config/arc/arc.c (arc_active_insn): New function.\n        (check_store_cacheline_hazard): Likewise.\n        (workaround_arc_anomaly): Use check_store_cacheline_hazard.\n        (arc_override_options): Disable delay slot scheduler for older\n        A7.\n        (arc_store_addr_hazard_p): New implementation, old one renamed to\n        ...\n        (arc_store_addr_hazard_internal_p): Renamed.\n        (arc_reorg): Don't combine into brcc instructions which are part\n        of hardware hazard solution.\n        * config/arc/arc.md (attr tune): Consider new arc7xx tune value.\n        (tune_arc700): Likewise.\n        * config/arc/arc.opt (arc7xx): New tune value.\n        * config/arc/arc700.md: Improve A7 scheduler.\n\nFrom-SVN: r265676", "tree": {"sha": "ca53d051f9bcfe311d00dfe37c8bae70900042e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca53d051f9bcfe311d00dfe37c8bae70900042e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/635aeaa20ffdf6e794f180cc8e053e8dc46db760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635aeaa20ffdf6e794f180cc8e053e8dc46db760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635aeaa20ffdf6e794f180cc8e053e8dc46db760", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635aeaa20ffdf6e794f180cc8e053e8dc46db760/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f"}], "stats": {"total": 191, "additions": 151, "deletions": 40}, "files": [{"sha": "289bb5a922263b1342ab7fc64b5245357d094d26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=635aeaa20ffdf6e794f180cc8e053e8dc46db760", "patch": "@@ -1,3 +1,21 @@\n+2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-arch.h (ARC_TUNE_ARC7XX): New tune value.\n+\t* config/arc/arc.c (arc_active_insn): New function.\n+\t(check_store_cacheline_hazard): Likewise.\n+\t(workaround_arc_anomaly): Use check_store_cacheline_hazard.\n+\t(arc_override_options): Disable delay slot scheduler for older\n+\tA7.\n+\t(arc_store_addr_hazard_p): New implementation, old one renamed to\n+\t...\n+\t(arc_store_addr_hazard_internal_p): Renamed.\n+\t(arc_reorg): Don't combine into brcc instructions which are part\n+\tof hardware hazard solution.\n+\t* config/arc/arc.md (attr tune): Consider new arc7xx tune value.\n+\t(tune_arc700): Likewise.\n+\t* config/arc/arc.opt (arc7xx): New tune value.\n+\t* config/arc/arc700.md: Improve A7 scheduler.\n+\n 2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_override_options): Remove"}, {"sha": "ad540607e55120ea24f8361acb7a1273eb472d71", "filename": "gcc/config/arc/arc-arch.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arch.h?ref=635aeaa20ffdf6e794f180cc8e053e8dc46db760", "patch": "@@ -71,6 +71,7 @@ enum arc_tune_attr\n   {\n     ARC_TUNE_NONE,\n     ARC_TUNE_ARC600,\n+    ARC_TUNE_ARC7XX,\n     ARC_TUNE_ARC700_4_2_STD,\n     ARC_TUNE_ARC700_4_2_XMAC,\n     ARC_TUNE_CORE_3,"}, {"sha": "277b546d3d39881cb4d23ce5ef6816bfe5883ff0", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 122, "deletions": 21, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=635aeaa20ffdf6e794f180cc8e053e8dc46db760", "patch": "@@ -1303,6 +1303,10 @@ arc_override_options (void)\n   if (!global_options_set.x_g_switch_value && !TARGET_NO_SDATA_SET)\n     g_switch_value = TARGET_LL64 ? 8 : 4;\n \n+  /* A7 has an issue with delay slots.  */\n+  if (TARGET_ARC700 && (arc_tune != ARC_TUNE_ARC7XX))\n+    flag_delayed_branch = 0;\n+\n   /* These need to be done at start up.  It's convenient to do them here.  */\n   arc_init ();\n }\n@@ -7137,11 +7141,90 @@ arc_invalid_within_doloop (const rtx_insn *insn)\n   return NULL;\n }\n \n+/* Return the next active insn, skiping the inline assembly code.  */\n+\n+static rtx_insn *\n+arc_active_insn (rtx_insn *insn)\n+{\n+  rtx_insn *nxt = next_active_insn (insn);\n+\n+  if (nxt && GET_CODE (PATTERN (nxt)) == ASM_INPUT)\n+    nxt = next_active_insn (nxt);\n+  return nxt;\n+}\n+\n+/* Search for a sequence made out of two stores and a given number of\n+   loads, insert a nop if required.  */\n+\n+static void\n+check_store_cacheline_hazard (void)\n+{\n+  rtx_insn *insn, *succ0, *insn1;\n+  bool found = false;\n+\n+  for (insn = get_insns (); insn; insn = arc_active_insn (insn))\n+    {\n+      succ0 = arc_active_insn (insn);\n+\n+      if (!succ0)\n+\treturn;\n+\n+      if (!single_set (insn) || !single_set (succ0))\n+\tcontinue;\n+\n+      if ((get_attr_type (insn) != TYPE_STORE)\n+\t  || (get_attr_type (succ0) != TYPE_STORE))\n+\tcontinue;\n+\n+      /* Found at least two consecutive stores.  Goto the end of the\n+\t store sequence.  */\n+      for (insn1 = succ0; insn1; insn1 = arc_active_insn (insn1))\n+\tif (!single_set (insn1) || get_attr_type (insn1) != TYPE_STORE)\n+\t  break;\n+\n+      /* Now, check the next two instructions for the following cases:\n+         1. next instruction is a LD => insert 2 nops between store\n+\t    sequence and load.\n+\t 2. next-next instruction is a LD => inset 1 nop after the store\n+\t    sequence.  */\n+      if (insn1 && single_set (insn1)\n+\t  && (get_attr_type (insn1) == TYPE_LOAD))\n+\t{\n+\t  found = true;\n+\t  emit_insn_before (gen_nopv (), insn1);\n+\t  emit_insn_before (gen_nopv (), insn1);\n+\t}\n+      else\n+\t{\n+\t  if (insn1 && (get_attr_type (insn1) == TYPE_COMPARE))\n+\t    {\n+\t      /* REG_SAVE_NOTE is used by Haifa scheduler, we are in\n+\t\t reorg, so it is safe to reuse it for avoiding the\n+\t\t current compare insn to be part of a BRcc\n+\t\t optimization.  */\n+\t      add_reg_note (insn1, REG_SAVE_NOTE, GEN_INT (3));\n+\t    }\n+\t  insn1 = arc_active_insn (insn1);\n+\t  if (insn1 && single_set (insn1)\n+\t      && (get_attr_type (insn1) == TYPE_LOAD))\n+\t    {\n+\t      found = true;\n+\t      emit_insn_before (gen_nopv (), insn1);\n+\t    }\n+\t}\n+\n+      insn = insn1;\n+      if (found)\n+\tfound = false;\n+    }\n+}\n+\n /* Return true if a load instruction (CONSUMER) uses the same address as a\n    store instruction (PRODUCER).  This function is used to avoid st/ld\n    address hazard in ARC700 cores.  */\n-bool\n-arc_store_addr_hazard_p (rtx_insn* producer, rtx_insn* consumer)\n+\n+static bool\n+arc_store_addr_hazard_internal_p (rtx_insn* producer, rtx_insn* consumer)\n {\n   rtx in_set, out_set;\n   rtx out_addr, in_addr;\n@@ -7189,6 +7272,16 @@ arc_store_addr_hazard_p (rtx_insn* producer, rtx_insn* consumer)\n   return false;\n }\n \n+/* Return TRUE is we have an store address hazard.  */\n+\n+bool\n+arc_store_addr_hazard_p (rtx_insn* producer, rtx_insn* consumer)\n+{\n+  if (TARGET_ARC700 && (arc_tune != ARC_TUNE_ARC7XX))\n+    return true;\n+  return arc_store_addr_hazard_internal_p (producer, consumer);\n+}\n+\n /* The same functionality as arc_hazard.  It is called in machine\n    reorg before any other optimization.  Hence, the NOP size is taken\n    into account when doing branch shortening.  */\n@@ -7197,6 +7290,7 @@ static void\n workaround_arc_anomaly (void)\n {\n   rtx_insn *insn, *succ0;\n+  rtx_insn *succ1;\n \n   /* For any architecture: call arc_hazard here.  */\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n@@ -7208,27 +7302,30 @@ workaround_arc_anomaly (void)\n \t}\n     }\n \n-  if (TARGET_ARC700)\n-    {\n-      rtx_insn *succ1;\n+  if (!TARGET_ARC700)\n+    return;\n \n-      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\t{\n-\t  succ0 = next_real_insn (insn);\n-\t  if (arc_store_addr_hazard_p (insn, succ0))\n-\t    {\n-\t      emit_insn_after (gen_nopv (), insn);\n-\t      emit_insn_after (gen_nopv (), insn);\n-\t      continue;\n-\t    }\n+  /* Old A7 are suffering of a cache hazard, and we need to insert two\n+     nops between any sequence of stores and a load.  */\n+  if (arc_tune != ARC_TUNE_ARC7XX)\n+    check_store_cacheline_hazard ();\n \n-\t  /* Avoid adding nops if the instruction between the ST and LD is\n-\t     a call or jump.  */\n-\t  succ1 = next_real_insn (succ0);\n-\t  if (succ0 && !JUMP_P (succ0) && !CALL_P (succ0)\n-\t      && arc_store_addr_hazard_p (insn, succ1))\n-\t    emit_insn_after (gen_nopv (), insn);\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    {\n+      succ0 = next_real_insn (insn);\n+      if (arc_store_addr_hazard_internal_p (insn, succ0))\n+\t{\n+\t  emit_insn_after (gen_nopv (), insn);\n+\t  emit_insn_after (gen_nopv (), insn);\n+\t  continue;\n \t}\n+\n+      /* Avoid adding nops if the instruction between the ST and LD is\n+\t a call or jump.  */\n+      succ1 = next_real_insn (succ0);\n+      if (succ0 && !JUMP_P (succ0) && !CALL_P (succ0)\n+\t  && arc_store_addr_hazard_internal_p (insn, succ1))\n+\temit_insn_after (gen_nopv (), insn);\n     }\n }\n \n@@ -7866,11 +7963,15 @@ arc_reorg (void)\n \t      if (!link_insn)\n \t\tcontinue;\n \t      else\n-\t\t/* Check if this is a data dependency.  */\n \t\t{\n+\t\t  /* Check if this is a data dependency.  */\n \t\t  rtx op, cc_clob_rtx, op0, op1, brcc_insn, note;\n \t\t  rtx cmp0, cmp1;\n \n+\t\t  /* Make sure we can use it for brcc insns.  */\n+\t\t  if (find_reg_note (link_insn, REG_SAVE_NOTE, GEN_INT (3)))\n+\t\t    continue;\n+\n \t\t  /* Ok this is the set cc. copy args here.  */\n \t\t  op = XEXP (pc_target, 0);\n "}, {"sha": "2c9de8d4fd6d412df2cd9d87d033cb93f883b5c3", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=635aeaa20ffdf6e794f180cc8e053e8dc46db760", "patch": "@@ -600,11 +600,13 @@\n ;;   somehow modify them to become inelegible for delay slots if a decision\n ;;   is made that makes conditional execution required.\n \n-(define_attr \"tune\" \"none,arc600,arc700_4_2_std,arc700_4_2_xmac, core_3, \\\n-archs4x, archs4xd, archs4xd_slow\"\n+(define_attr \"tune\" \"none,arc600,arc7xx,arc700_4_2_std,arc700_4_2_xmac, \\\n+core_3, archs4x, archs4xd, archs4xd_slow\"\n   (const\n    (cond [(symbol_ref \"arc_tune == TUNE_ARC600\")\n \t  (const_string \"arc600\")\n+\t  (symbol_ref \"arc_tune == ARC_TUNE_ARC7XX\")\n+\t  (const_string \"arc7xx\")\n \t  (symbol_ref \"arc_tune == TUNE_ARC700_4_2_STD\")\n \t  (const_string \"arc700_4_2_std\")\n \t  (symbol_ref \"arc_tune == TUNE_ARC700_4_2_XMAC\")\n@@ -619,7 +621,7 @@ archs4x, archs4xd, archs4xd_slow\"\n \t (const_string \"none\"))))\n \n (define_attr \"tune_arc700\" \"false,true\"\n-  (if_then_else (eq_attr \"tune\" \"arc700_4_2_std, arc700_4_2_xmac\")\n+  (if_then_else (eq_attr \"tune\" \"arc7xx, arc700_4_2_std, arc700_4_2_xmac\")\n \t\t(const_string \"true\")\n \t\t(const_string \"false\")))\n "}, {"sha": "d3c283e7c071763c4f2cf70458e52e7cc6ebbc31", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=635aeaa20ffdf6e794f180cc8e053e8dc46db760", "patch": "@@ -262,6 +262,9 @@ Enum(arc_tune_attr) String(arc600) Value(ARC_TUNE_ARC600)\n EnumValue\n Enum(arc_tune_attr) String(arc601) Value(ARC_TUNE_ARC600)\n \n+EnumValue\n+Enum(arc_tune_attr) String(arc7xx) Value(ARC_TUNE_ARC7XX)\n+\n EnumValue\n Enum(arc_tune_attr) String(arc700) Value(ARC_TUNE_ARC700_4_2_STD)\n "}, {"sha": "cbb868d8dcd38187ef38b402121d6d5c0ee6041e", "filename": "gcc/config/arc/arc700.md", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc700.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635aeaa20ffdf6e794f180cc8e053e8dc46db760/gcc%2Fconfig%2Farc%2Farc700.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc700.md?ref=635aeaa20ffdf6e794f180cc8e053e8dc46db760", "patch": "@@ -145,28 +145,14 @@\n ; no functional unit runs when blockage is reserved\n (exclusion_set \"blockage\" \"core, multiplier\")\n \n-(define_insn_reservation \"data_load_DI\" 4\n-  (and (eq_attr \"tune_arc700\" \"true\")\n-       (eq_attr \"type\" \"load\")\n-       (match_operand:DI 0 \"\" \"\"))\n-  \"issue+dmp, issue+dmp, dmp_write_port, dmp_write_port\")\n-\n (define_insn_reservation \"data_load\" 3\n   (and (eq_attr \"tune_arc700\" \"true\")\n-       (eq_attr \"type\" \"load\")\n-       (not (match_operand:DI 0 \"\" \"\")))\n+       (eq_attr \"type\" \"load\"))\n   \"issue+dmp, nothing, dmp_write_port\")\n \n-(define_insn_reservation \"data_store_DI\" 2\n-  (and (eq_attr \"tune_arc700\" \"true\")\n-       (eq_attr \"type\" \"store\")\n-       (match_operand:DI 0 \"\" \"\"))\n-  \"issue+dmp_write_port, issue+dmp_write_port\")\n-\n (define_insn_reservation \"data_store\" 1\n   (and (eq_attr \"tune_arc700\" \"true\")\n-       (eq_attr \"type\" \"store\")\n-       (not (match_operand:DI 0 \"\" \"\")))\n+       (eq_attr \"type\" \"store\"))\n   \"issue+dmp_write_port\")\n \n (define_bypass 3 \"data_store\" \"data_load\" \"arc_store_addr_hazard_p\")"}]}