{"sha": "f3ce64372c973b713e8508fe0a65c3bbe1c8759d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjZTY0MzcyYzk3M2I3MTNlODUwOGZlMGE2NWMzYmJlMWM4NzU5ZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-12-28T22:00:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-12-28T22:00:14Z"}, "message": "Tweak the documentation of libiberty's xcrc32 function\n\nlibiberty/ChangeLog;\n\n\t* crc32.c: In the documentation, don't refer to GDB's\n\tnow-nonexistent crc32 implementation.  In the table-generation\n\tprogram embedded within the documentation, change the type of\n\tthe induction variables i and j from int to unsigned int, to\n\tavoid undefined behavior.\n\nFrom-SVN: r231983", "tree": {"sha": "d75501a7451aff30e3000c21a3090d0181bdc2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d75501a7451aff30e3000c21a3090d0181bdc2d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ce64372c973b713e8508fe0a65c3bbe1c8759d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce64372c973b713e8508fe0a65c3bbe1c8759d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ce64372c973b713e8508fe0a65c3bbe1c8759d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce64372c973b713e8508fe0a65c3bbe1c8759d/comments", "author": null, "committer": null, "parents": [{"sha": "96d4e7be88ace8866561736a32f31c8ab072494b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d4e7be88ace8866561736a32f31c8ab072494b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d4e7be88ace8866561736a32f31c8ab072494b"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "6073c5bfed268b5d543b7f7bb20d5fce1f3a1200", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ce64372c973b713e8508fe0a65c3bbe1c8759d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ce64372c973b713e8508fe0a65c3bbe1c8759d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f3ce64372c973b713e8508fe0a65c3bbe1c8759d", "patch": "@@ -1,3 +1,11 @@\n+2015-12-28  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* crc32.c: In the documentation, don't refer to GDB's\n+\tnow-nonexistent crc32 implementation.  In the table-generation\n+\tprogram embedded within the documentation, change the type of\n+\tthe induction variables i and j from int to unsigned int, to\n+\tavoid undefined behavior.\n+\n 2015-12-21  Nick Clifton  <nickc@redhat.com>\n \n \tPR 66827"}, {"sha": "52c982fb58327c0a7b2970d1126684da04dd71ba", "filename": "libiberty/crc32.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ce64372c973b713e8508fe0a65c3bbe1c8759d/libiberty%2Fcrc32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ce64372c973b713e8508fe0a65c3bbe1c8759d/libiberty%2Fcrc32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcrc32.c?ref=f3ce64372c973b713e8508fe0a65c3bbe1c8759d", "patch": "@@ -33,15 +33,14 @@\n \n #include \"libiberty.h\"\n \n-/* This table was generated by the following program.  This matches\n-   what gdb does.\n+/* This table was generated by the following program.\n \n    #include <stdio.h>\n \n    int\n    main ()\n    {\n-     int i, j;\n+     unsigned int i, j;\n      unsigned int c;\n      int table[256];\n \n@@ -146,10 +145,9 @@ starting value is @var{init}; this may be used to compute the CRC of\n data split across multiple buffers by passing the return value of each\n call as the @var{init} parameter of the next.\n \n-This is intended to match the CRC used by the @command{gdb} remote\n-protocol for the @samp{qCRC} command.  In order to get the same\n-results as gdb for a block of data, you must pass the first CRC\n-parameter as @code{0xffffffff}.\n+This is used by the @command{gdb} remote protocol for the @samp{qCRC}\n+command.  In order to get the same results as gdb for a block of data,\n+you must pass the first CRC parameter as @code{0xffffffff}.\n \n This CRC can be specified as:\n "}]}