{"sha": "7a0ca710c81d249cf8346eb243120dd6f727b354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EwY2E3MTBjODFkMjQ5Y2Y4MzQ2ZWIyNDMxMjBkZDZmNzI3YjM1NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-10-07T04:18:19Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-10-07T04:18:19Z"}, "message": "c-convert.c (convert): Use error_operand_p.\n\n\t* c-convert.c (convert): Use error_operand_p.\n\t* c-typeck.c (require_complete_type): Likewise.\n\t(really_atomic_lvalue): Likewise.\n\t(digest_init): Likewise.\n\t(handle_omp_array_sections_1): Likewise.\n\nFrom-SVN: r215964", "tree": {"sha": "bbe94e24f2eb7ab516cd5aa3d345aa21894c9678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe94e24f2eb7ab516cd5aa3d345aa21894c9678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a0ca710c81d249cf8346eb243120dd6f727b354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0ca710c81d249cf8346eb243120dd6f727b354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0ca710c81d249cf8346eb243120dd6f727b354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0ca710c81d249cf8346eb243120dd6f727b354/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a7501658c43bba75e8130f250ae6445eab0ea9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7501658c43bba75e8130f250ae6445eab0ea9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7501658c43bba75e8130f250ae6445eab0ea9f"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "ec75d9807e9118461f787f9d33737659dbf147ae", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0ca710c81d249cf8346eb243120dd6f727b354/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0ca710c81d249cf8346eb243120dd6f727b354/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7a0ca710c81d249cf8346eb243120dd6f727b354", "patch": "@@ -1,3 +1,11 @@\n+2014-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-convert.c (convert): Use error_operand_p.\n+\t* c-typeck.c (require_complete_type): Likewise.\n+\t(really_atomic_lvalue): Likewise.\n+\t(digest_init): Likewise.\n+\t(handle_omp_array_sections_1): Likewise.\n+\n 2014-10-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63453"}, {"sha": "95be453fa3fc619253d9f78d9e501cace0a4a2b2", "filename": "gcc/c/c-convert.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0ca710c81d249cf8346eb243120dd6f727b354/gcc%2Fc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0ca710c81d249cf8346eb243120dd6f727b354/gcc%2Fc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.c?ref=7a0ca710c81d249cf8346eb243120dd6f727b354", "patch": "@@ -72,8 +72,7 @@ convert (tree type, tree expr)\n   location_t loc = EXPR_LOCATION (expr);\n \n   if (type == error_mark_node\n-      || expr == error_mark_node\n-      || TREE_TYPE (expr) == error_mark_node)\n+      || error_operand_p (expr))\n     return error_mark_node;\n \n   if ((invalid_conv_diag"}, {"sha": "b3b82bba2cc4fdd48b300f2a54fa1545894b577a", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0ca710c81d249cf8346eb243120dd6f727b354/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0ca710c81d249cf8346eb243120dd6f727b354/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=7a0ca710c81d249cf8346eb243120dd6f727b354", "patch": "@@ -192,7 +192,7 @@ require_complete_type (tree value)\n {\n   tree type = TREE_TYPE (value);\n \n-  if (value == error_mark_node || type == error_mark_node)\n+  if (error_operand_p (value))\n     return error_mark_node;\n \n   /* First, detect a valid value with a complete type.  */\n@@ -1950,7 +1950,7 @@ default_function_array_read_conversion (location_t loc, struct c_expr exp)\n static bool\n really_atomic_lvalue (tree expr)\n {\n-  if (expr == error_mark_node || TREE_TYPE (expr) == error_mark_node)\n+  if (error_operand_p (expr))\n     return false;\n   if (!TYPE_ATOMIC (TREE_TYPE (expr)))\n     return false;\n@@ -6492,8 +6492,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \n   if (type == error_mark_node\n       || !init\n-      || init == error_mark_node\n-      || TREE_TYPE (init) == error_mark_node)\n+      || error_operand_p (init))\n     return error_mark_node;\n \n   STRIP_TYPE_NOPS (inside_init);\n@@ -11365,7 +11364,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n   tree ret, low_bound, length, type;\n   if (TREE_CODE (t) != TREE_LIST)\n     {\n-      if (t == error_mark_node || TREE_TYPE (t) == error_mark_node)\n+      if (error_operand_p (t))\n \treturn error_mark_node;\n       if (TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != PARM_DECL)\n \t{"}]}