{"sha": "240c7f7f570ea8b125fa764daedccd7ce1c147c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwYzdmN2Y1NzBlYThiMTI1ZmE3NjRkYWVkY2NkN2NlMWMxNDdjNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-07T18:36:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-07T18:36:48Z"}, "message": "re PR libstdc++/16896 (Use of non-reserved names in stl_list.h)\n\n2010-02-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/16896\n\t* include/bits/stl_list.h (_List_node_base::transfer): Rename\n\tto _M_transfer.\n\t(_List_node_base::reverse): Rename to _M_reverse.\n\t(_List_node_base::hook): Rename to _M_hook.\n\t(_List_node_base::unhook): Rename to _M_unhook; adjust callers.\n\t* include/bits/list.tcc: Adjust callers.\n\t* src/list.cc: Adjust.\n\t* src/compatibility.cc: Likewise.\n\t* src/compatibility-list.cc: New.\n\t* src/compatibility-debug_list.cc: Likewise.\n\t* src/compatibility-parallel_list.cc: Likewise.\n\t* src/Makefile.am: Add.\n\t* src/Makefile.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Export _M_* symbols.\n\n\t* src/hash.cc: Rename to hash-aux.cc.\n\t* src/compatibility-ldbl.cc: Adjust.\n\t* src/compatibility-c++0x.cc: Likewise.\n\t* src/hash_tr1.cc: Likewise.\n\n\t* src/hashtable.cc: Rename to hashtable-aux.cc.\n\t* src/hashtable_c++0x.cc: Adjust.\n\t* src/hashtable_tr1.cc: Likewise.\n\n\t* src/limits_c++0x.cc: Fold...\n\t* src/limits.cc... here.\n\nFrom-SVN: r156578", "tree": {"sha": "6213b8ceab23028a746ed1b0dd8c40841c9dd800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6213b8ceab23028a746ed1b0dd8c40841c9dd800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/240c7f7f570ea8b125fa764daedccd7ce1c147c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240c7f7f570ea8b125fa764daedccd7ce1c147c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240c7f7f570ea8b125fa764daedccd7ce1c147c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240c7f7f570ea8b125fa764daedccd7ce1c147c7/comments", "author": null, "committer": null, "parents": [{"sha": "0e7e3cb8362764bdabd4c9a23ea09f9a04fc3e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7e3cb8362764bdabd4c9a23ea09f9a04fc3e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7e3cb8362764bdabd4c9a23ea09f9a04fc3e9a"}], "stats": {"total": 447, "additions": 315, "deletions": 132}, "files": [{"sha": "fe4f03914e67912a7e785b8169304738a6e4ef97", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,3 +1,33 @@\n+2010-02-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/16896\n+\t* include/bits/stl_list.h (_List_node_base::transfer): Rename\n+\tto _M_transfer.\n+\t(_List_node_base::reverse): Rename to _M_reverse.\n+\t(_List_node_base::hook): Rename to _M_hook.\n+\t(_List_node_base::unhook): Rename to _M_unhook; adjust callers.\n+\t* include/bits/list.tcc: Adjust callers.\n+\t* src/list.cc: Adjust.\n+\t* src/compatibility.cc: Likewise.\n+\t* src/compatibility-list.cc: New.\n+\t* src/compatibility-debug_list.cc: Likewise.\n+\t* src/compatibility-parallel_list.cc: Likewise.\n+\t* src/Makefile.am: Add.\n+\t* src/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Export _M_* symbols.\n+\n+\t* src/hash.cc: Rename to hash-aux.cc.\n+\t* src/compatibility-ldbl.cc: Adjust.\n+\t* src/compatibility-c++0x.cc: Likewise.\n+\t* src/hash_tr1.cc: Likewise.\n+\n+\t* src/hashtable.cc: Rename to hashtable-aux.cc.\n+\t* src/hashtable_c++0x.cc: Adjust.\n+\t* src/hashtable_tr1.cc: Likewise.\n+\n+\t* src/limits_c++0x.cc: Fold...\n+\t* src/limits.cc... here.\n+\n 2010-02-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_pair.h (pair<>::pair(_U1&&, const _T2&),"}, {"sha": "9d3ff4715e83eb4630071f224c3f98e8bf95326c", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1113,6 +1113,21 @@ GLIBCXX_3.4.14 {\n     # std::time_get::_M_extract_wday_or_month\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE24_M_extract_wday_or_month*;\n \n+    # libstdc++/16896\n+    _ZNSt15_List_node_base7_M_hook*;\n+    _ZNSt15_List_node_base9_M_unhookEv;\n+    _ZNSt15_List_node_base10_M_reverseEv;\n+    _ZNSt15_List_node_base11_M_transfer*;\n+\n+    _ZNSt6__norm15_List_node_base7_M_hook*;\n+    _ZNSt6__norm15_List_node_base9_M_unhookEv;\n+    _ZNSt6__norm15_List_node_base10_M_reverseEv;\n+    _ZNSt6__norm15_List_node_base11_M_transfer*;\n+\n+    _ZNSt9__cxx199815_List_node_base7_M_hook*;\n+    _ZNSt9__cxx199815_List_node_base9_M_unhookEv;\n+    _ZNSt9__cxx199815_List_node_base10_M_reverseEv;\n+    _ZNSt9__cxx199815_List_node_base11_M_transfer*;\n } GLIBCXX_3.4.13;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "535923981a5f0cf24c71413f5d47640d45b81d6b", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // List implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       emplace(iterator __position, _Args&&... __args)\n       {\n \t_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\n-\t__tmp->hook(__position._M_node);\n+\t__tmp->_M_hook(__position._M_node);\n \treturn iterator(__tmp);\n       }\n #endif\n@@ -98,7 +98,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     insert(iterator __position, const value_type& __x)\n     {\n       _Node* __tmp = _M_create_node(__x);\n-      __tmp->hook(__position._M_node);\n+      __tmp->_M_hook(__position._M_node);\n       return iterator(__tmp);\n     }\n "}, {"sha": "5fcbc4f347037b186be1cf88149b8f2c294da381", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -77,17 +77,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(_List_node_base& __x, _List_node_base& __y) throw ();\n \n     void\n-    transfer(_List_node_base * const __first,\n-\t     _List_node_base * const __last) throw ();\n+    _M_transfer(_List_node_base * const __first,\n+\t\t_List_node_base * const __last) throw ();\n \n     void\n-    reverse() throw ();\n+    _M_reverse() throw ();\n \n     void\n-    hook(_List_node_base * const __position) throw ();\n+    _M_hook(_List_node_base * const __position) throw ();\n \n     void\n-    unhook() throw ();\n+    _M_unhook() throw ();\n   };\n \n   /// An actual node in the %list.\n@@ -1345,7 +1345,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       void\n       reverse()\n-      { this->_M_impl._M_node.reverse(); }\n+      { this->_M_impl._M_node._M_reverse(); }\n \n       /**\n        *  @brief  Sort the elements.\n@@ -1424,31 +1424,31 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       // Moves the elements from [first,last) before position.\n       void\n       _M_transfer(iterator __position, iterator __first, iterator __last)\n-      { __position._M_node->transfer(__first._M_node, __last._M_node); }\n+      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }\n \n       // Inserts new element at position given and with value given.\n #ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       _M_insert(iterator __position, const value_type& __x)\n       {\n         _Node* __tmp = _M_create_node(__x);\n-        __tmp->hook(__position._M_node);\n+        __tmp->_M_hook(__position._M_node);\n       }\n #else\n      template<typename... _Args>\n        void\n        _M_insert(iterator __position, _Args&&... __args)\n        {\n \t _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\n-\t __tmp->hook(__position._M_node);\n+\t __tmp->_M_hook(__position._M_node);\n        }\n #endif\n \n       // Erases element at position given.\n       void\n       _M_erase(iterator __position)\n       {\n-        __position._M_node->unhook();\n+        __position._M_node->_M_unhook();\n         _Node* __n = static_cast<_Node*>(__position._M_node);\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n         _M_get_Node_allocator().destroy(__n);"}, {"sha": "38b79a819e6f0887d2a57819f6069ce823e721b2", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,7 +1,7 @@\n ## Makefile for the src subdirectory of the GNU C++ Standard library.\n ##\n ## Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-## 2006, 2007, 2008, 2009\n+## 2006, 2007, 2008, 2009, 2010\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n@@ -121,7 +121,8 @@ basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n if ENABLE_PARALLEL\n-parallel_sources = parallel_list.cc parallel_settings.cc\n+parallel_sources = parallel_list.cc parallel_settings.cc \\\n+\t           compatibility-parallel_list.cc\n else\n parallel_sources =\n endif\n@@ -141,6 +142,8 @@ sources = \\\n \tcodecvt.cc \\\n \tcompatibility.cc \\\n \tcompatibility-c++0x.cc \\\n+\tcompatibility-debug_list.cc \\\n+\tcompatibility-list.cc \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n@@ -154,7 +157,6 @@ sources = \\\n \tios_init.cc \\\n \tios_locale.cc \\\n \tlimits.cc \\\n-\tlimits_c++0x.cc \\\n \tlist.cc \\\n \tdebug_list.cc \\\n \tlocale.cc \\\n@@ -239,6 +241,11 @@ parallel_settings.lo: parallel_settings.cc\n parallel_settings.o: parallel_settings.cc\n \t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n+compatibility-parallel_list.lo: compatibility-parallel_list.cc\n+\t$(LTCXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n+compatibility-parallel_list.o: compatibility-parallel_list.cc\n+\t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n+\n # Use special rules for the C++0x sources so that the proper flags are passed.\n functexcept.lo: functexcept.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n@@ -270,9 +277,9 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n-limits_c++0x.lo: limits_c++0x.cc\n+limits.lo: limits.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n-limits_c++0x.o: limits_c++0x.cc\n+limits.o: limits.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n atomic.lo: atomic.cc"}, {"sha": "e48eca459177a7fcc2124ed425216e02b08f3004", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -87,11 +87,12 @@ LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tpool_allocator.cc mt_allocator.cc codecvt.cc compatibility.cc \\\n-\tcompatibility-c++0x.cc complex_io.cc ctype.cc debug.cc \\\n+\tcompatibility-c++0x.cc compatibility-debug_list.cc \\\n+\tcompatibility-list.cc complex_io.cc ctype.cc debug.cc \\\n \tfunctexcept.cc hash_tr1.cc globals_io.cc hashtable_tr1.cc \\\n \thashtable_c++0x.cc ios.cc ios_failure.cc ios_init.cc \\\n-\tios_locale.cc limits.cc limits_c++0x.cc list.cc debug_list.cc \\\n-\tlocale.cc locale_init.cc locale_facets.cc localename.cc \\\n+\tios_locale.cc limits.cc list.cc debug_list.cc locale.cc \\\n+\tlocale_init.cc locale_facets.cc localename.cc \\\n \tmath_stubs_float.cc math_stubs_long_double.cc stdexcept.cc \\\n \tstrstream.cc system_error.cc tree.cc allocator-inst.cc \\\n \tconcept-inst.cc fstream-inst.cc ext-inst.cc ios-inst.cc \\\n@@ -103,22 +104,25 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tcollate_members.cc ctype_members.cc messages_members.cc \\\n \tmonetary_members.cc numeric_members.cc time_members.cc \\\n \tbasic_file.cc c++locale.cc compatibility-ldbl.cc \\\n-\tparallel_list.cc parallel_settings.cc\n+\tparallel_list.cc parallel_settings.cc \\\n+\tcompatibility-parallel_list.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n @GLIBCXX_LDBL_COMPAT_TRUE@am__objects_2 = compatibility-ldbl.lo\n @ENABLE_PARALLEL_TRUE@am__objects_3 = parallel_list.lo \\\n-@ENABLE_PARALLEL_TRUE@\tparallel_settings.lo\n+@ENABLE_PARALLEL_TRUE@\tparallel_settings.lo \\\n+@ENABLE_PARALLEL_TRUE@\tcompatibility-parallel_list.lo\n am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n \t$(am__objects_3)\n am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tmt_allocator.lo codecvt.lo compatibility.lo \\\n-\tcompatibility-c++0x.lo complex_io.lo ctype.lo debug.lo \\\n+\tcompatibility-c++0x.lo compatibility-debug_list.lo \\\n+\tcompatibility-list.lo complex_io.lo ctype.lo debug.lo \\\n \tfunctexcept.lo hash_tr1.lo globals_io.lo hashtable_tr1.lo \\\n \thashtable_c++0x.lo ios.lo ios_failure.lo ios_init.lo \\\n-\tios_locale.lo limits.lo limits_c++0x.lo list.lo debug_list.lo \\\n-\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n+\tios_locale.lo limits.lo list.lo debug_list.lo locale.lo \\\n+\tlocale_init.lo locale_facets.lo localename.lo \\\n \tmath_stubs_float.lo math_stubs_long_double.lo stdexcept.lo \\\n \tstrstream.lo system_error.lo tree.lo allocator-inst.lo \\\n \tconcept-inst.lo fstream-inst.lo ext-inst.lo ios-inst.lo \\\n@@ -369,7 +373,9 @@ host_sources_extra = \\\n \tbasic_file.cc c++locale.cc ${ldbl_compat_sources} ${parallel_sources}\n \n @ENABLE_PARALLEL_FALSE@parallel_sources = \n-@ENABLE_PARALLEL_TRUE@parallel_sources = parallel_list.cc parallel_settings.cc\n+@ENABLE_PARALLEL_TRUE@parallel_sources = parallel_list.cc parallel_settings.cc \\\n+@ENABLE_PARALLEL_TRUE@\t           compatibility-parallel_list.cc\n+\n @GLIBCXX_LDBL_COMPAT_FALSE@ldbl_compat_sources = \n @GLIBCXX_LDBL_COMPAT_TRUE@ldbl_compat_sources = compatibility-ldbl.cc\n \n@@ -382,6 +388,8 @@ sources = \\\n \tcodecvt.cc \\\n \tcompatibility.cc \\\n \tcompatibility-c++0x.cc \\\n+\tcompatibility-debug_list.cc \\\n+\tcompatibility-list.cc \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n@@ -395,7 +403,6 @@ sources = \\\n \tios_init.cc \\\n \tios_locale.cc \\\n \tlimits.cc \\\n-\tlimits_c++0x.cc \\\n \tlist.cc \\\n \tdebug_list.cc \\\n \tlocale.cc \\\n@@ -869,6 +876,11 @@ parallel_settings.lo: parallel_settings.cc\n parallel_settings.o: parallel_settings.cc\n \t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n+compatibility-parallel_list.lo: compatibility-parallel_list.cc\n+\t$(LTCXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n+compatibility-parallel_list.o: compatibility-parallel_list.cc\n+\t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n+\n # Use special rules for the C++0x sources so that the proper flags are passed.\n functexcept.lo: functexcept.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n@@ -900,9 +912,9 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n-limits_c++0x.lo: limits_c++0x.cc\n+limits.lo: limits.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n-limits_c++0x.o: limits_c++0x.cc\n+limits.o: limits.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n atomic.lo: atomic.cc"}, {"sha": "c075a9b39778c435bed60ed8f43e873e59947eb7", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions, C++0x bits -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -104,7 +104,7 @@ namespace std\n       }\n     };\n \n-#include \"hash.cc\"\n+#include \"hash-aux.cc\"\n \n   template<>\n     size_t"}, {"sha": "3f14a534250a5977381cdb0eb9f41f903eac9126", "filename": "libstdc++-v3/src/compatibility-debug_list.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-debug_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-debug_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-debug_list.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -0,0 +1,27 @@\n+// Compatibility symbols for previous versions, debug list -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define _GLIBCXX_DEBUG\n+\n+#include \"compatibility-list.cc\""}, {"sha": "d73be4afea63b52136fddfe2dbcef7b7f7f8fdaa", "filename": "libstdc++-v3/src/compatibility-ldbl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for -mlong-double-64 compatibility -*- C++ -*-\n \n-// Copyright (C) 2006, 2008, 2009\n+// Copyright (C) 2006, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -74,7 +74,7 @@ namespace std\n {\n   namespace tr1 \n   {\n-#include \"hash.cc\"\n+#include \"hash-aux.cc\"\n   }\n }\n "}, {"sha": "57a2df97b7ee6800fa57c39b17252bbc4b6f0307", "filename": "libstdc++-v3/src/compatibility-list.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-list.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -0,0 +1,99 @@\n+// Compatibility symbols for previous versions, list bits -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/move.h>\n+\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+\n+  struct _List_node_base\n+  {\n+    _List_node_base* _M_next;\n+    _List_node_base* _M_prev;\n+\n+    void\n+    transfer(_List_node_base * const __first,\n+\t     _List_node_base * const __last) throw ();\n+\n+    void\n+    reverse() throw ();\n+\n+    void\n+    hook(_List_node_base * const __position) throw ();\n+\n+    void\n+    unhook() throw ();\n+  };\n+\n+  void\n+  _List_node_base::transfer(_List_node_base * const __first,\n+                            _List_node_base * const __last) throw ()\n+  {\n+    if (this != __last)\n+    {\n+      // Remove [first, last) from its old position.\n+      __last->_M_prev->_M_next  = this;\n+      __first->_M_prev->_M_next = __last;\n+      this->_M_prev->_M_next    = __first;\n+  \n+      // Splice [first, last) into its new position.\n+      _List_node_base* const __tmp = this->_M_prev;\n+      this->_M_prev                = __last->_M_prev;\n+      __last->_M_prev              = __first->_M_prev;\n+      __first->_M_prev             = __tmp;\n+    }\n+  }\n+\n+  void\n+  _List_node_base::reverse() throw ()\n+  {\n+    _List_node_base* __tmp = this;\n+    do\n+    {\n+      std::swap(__tmp->_M_next, __tmp->_M_prev);\n+\n+      // Old next node is now prev.\n+      __tmp = __tmp->_M_prev;     \n+    } \n+    while (__tmp != this);\n+  }\n+\n+  void\n+  _List_node_base::hook(_List_node_base* const __position) throw ()\n+  {\n+    this->_M_next = __position;\n+    this->_M_prev = __position->_M_prev;\n+    __position->_M_prev->_M_next = this;\n+    __position->_M_prev = this;\n+  }\n+\n+  void\n+  _List_node_base::unhook() throw ()\n+  {\n+    _List_node_base* const __next_node = this->_M_next;\n+    _List_node_base* const __prev_node = this->_M_prev;\n+    __prev_node->_M_next = __next_node;\n+    __next_node->_M_prev = __prev_node;\n+  }\n+\n+_GLIBCXX_END_NESTED_NAMESPACE"}, {"sha": "d9d7b60fd34bd7ab5beadcdce45d10e7e7d8a0c5", "filename": "libstdc++-v3/src/compatibility-parallel_list.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-parallel_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-parallel_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-parallel_list.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -0,0 +1,25 @@\n+// Compatibility symbols for previous versions, parallel list -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"compatibility-list.cc\""}, {"sha": "dceebe1174ca540cfbb79824b98bf790db9378c5", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -386,23 +386,23 @@ _ZN10__gnu_norm15_List_node_base7reverseEv;\n _ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n */\n #include \"list.cc\"\n-_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX4hookEPS_, \\\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX7_M_hookEPS_, \\\n _ZN10__gnu_norm15_List_node_base4hookEPS0_, \\\n GLIBCXX_3.4)\n \n _GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX4swapERS_S0_, \\\n _ZN10__gnu_norm15_List_node_base4swapERS0_S1_, \\\n GLIBCXX_3.4)\n \n-_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX6unhookEv, \\\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX9_M_unhookEv, \\\n _ZN10__gnu_norm15_List_node_base6unhookEv, \\\n GLIBCXX_3.4)\n \n-_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX7reverseEv, \\\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX10_M_reverseEv, \\\n _ZN10__gnu_norm15_List_node_base7reverseEv, \\\n GLIBCXX_3.4)\n \n-_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX8transferEPS_S0_, \\\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX11_M_transferEPS_S0_, \\\n _ZN10__gnu_norm15_List_node_base8transferEPS0_S1_, \\\n GLIBCXX_3.4)\n #undef _List_node_base"}, {"sha": "cc2385875ebe201dcc04c3d464d35838c08325f4", "filename": "libstdc++-v3/src/hash-aux.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhash-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhash-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-aux.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "previous_filename": "libstdc++-v3/src/hash.cc"}, {"sha": "10ba64b9f3c61ef5eb2364d59eff8e89fcf52d4e", "filename": "libstdc++-v3/src/hash_tr1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // std::hash definitions -*- C++ -*-\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,6 +31,6 @@ namespace std\n {\n   namespace tr1 \n   {\n-#include \"hash.cc\"\n+#include \"hash-aux.cc\"\n   }\n }"}, {"sha": "8bd3afb09038f9fcb949a3a3b198a017b73483cf", "filename": "libstdc++-v3/src/hashtable-aux.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhashtable-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhashtable-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhashtable-aux.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "previous_filename": "libstdc++-v3/src/hashtable.cc"}, {"sha": "c99a094c046020007c7bc826b85244e31f34d989", "filename": "libstdc++-v3/src/hashtable_c++0x.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_c%2B%2B0x.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // std::__detail definitions -*- C++ -*-\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,5 +28,5 @@\n \n namespace std\n {\n-#include \"hashtable.cc\"\n+#include \"hashtable-aux.cc\"\n }"}, {"sha": "70de1bdf310d042c27c31f9a30af0f05a1a6129a", "filename": "libstdc++-v3/src/hashtable_tr1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhashtable_tr1.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // std::__detail definitions -*- C++ -*-\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,6 +26,6 @@ namespace std\n {\n   namespace tr1 \n   {\n-#include \"hashtable.cc\"\n+#include \"hashtable-aux.cc\"\n   }\n }"}, {"sha": "09a5dae8656460971ed9aef026a25d5cf79cbe0b", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // Static data members of -*- C++ -*- numeric_limits classes\n \n-// Copyright (C) 1999, 2001, 2002, 2005, 2006, 2009\n+// Copyright (C) 1999, 2001, 2002, 2005, 2006, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -443,6 +443,54 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const bool numeric_limits<long double>::tinyness_before;\n   const float_round_style numeric_limits<long double>::round_style;\n \n+  // char16_t\n+  const bool numeric_limits<char16_t>::is_specialized;\n+  const int  numeric_limits<char16_t>::digits;\n+  const int  numeric_limits<char16_t>::digits10;\n+  const bool numeric_limits<char16_t>::is_signed;\n+  const bool numeric_limits<char16_t>::is_integer;\n+  const bool numeric_limits<char16_t>::is_exact;\n+  const int  numeric_limits<char16_t>::radix;\n+  const int  numeric_limits<char16_t>::min_exponent;\n+  const int  numeric_limits<char16_t>::min_exponent10;\n+  const int  numeric_limits<char16_t>::max_exponent;\n+  const int  numeric_limits<char16_t>::max_exponent10;\n+  const bool numeric_limits<char16_t>::has_infinity;\n+  const bool numeric_limits<char16_t>::has_quiet_NaN;\n+  const bool numeric_limits<char16_t>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<char16_t>::has_denorm;\n+  const bool numeric_limits<char16_t>::has_denorm_loss;\n+  const bool numeric_limits<char16_t>::is_iec559;\n+  const bool numeric_limits<char16_t>::is_bounded;\n+  const bool numeric_limits<char16_t>::is_modulo;\n+  const bool numeric_limits<char16_t>::traps;\n+  const bool numeric_limits<char16_t>::tinyness_before;\n+  const float_round_style numeric_limits<char16_t>::round_style;\n+\n+  // char32_t\n+  const bool numeric_limits<char32_t>::is_specialized;\n+  const int  numeric_limits<char32_t>::digits;\n+  const int  numeric_limits<char32_t>::digits10;\n+  const bool numeric_limits<char32_t>::is_signed;\n+  const bool numeric_limits<char32_t>::is_integer;\n+  const bool numeric_limits<char32_t>::is_exact;\n+  const int  numeric_limits<char32_t>::radix;\n+  const int  numeric_limits<char32_t>::min_exponent;\n+  const int  numeric_limits<char32_t>::min_exponent10;\n+  const int  numeric_limits<char32_t>::max_exponent;\n+  const int  numeric_limits<char32_t>::max_exponent10;\n+  const bool numeric_limits<char32_t>::has_infinity;\n+  const bool numeric_limits<char32_t>::has_quiet_NaN;\n+  const bool numeric_limits<char32_t>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<char32_t>::has_denorm;\n+  const bool numeric_limits<char32_t>::has_denorm_loss;\n+  const bool numeric_limits<char32_t>::is_iec559;\n+  const bool numeric_limits<char32_t>::is_bounded;\n+  const bool numeric_limits<char32_t>::is_modulo;\n+  const bool numeric_limits<char32_t>::traps;\n+  const bool numeric_limits<char32_t>::tinyness_before;\n+  const float_round_style numeric_limits<char32_t>::round_style;\n+\n _GLIBCXX_END_NAMESPACE\n \n // XXX GLIBCXX_ABI Deprecated"}, {"sha": "b911bd4c78e846f7ddb2bf1ab11cc96c1a821bfa", "filename": "libstdc++-v3/src/limits_c++0x.cc", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e3cb8362764bdabd4c9a23ea09f9a04fc3e9a/libstdc%2B%2B-v3%2Fsrc%2Flimits_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e3cb8362764bdabd4c9a23ea09f9a04fc3e9a/libstdc%2B%2B-v3%2Fsrc%2Flimits_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits_c%2B%2B0x.cc?ref=0e7e3cb8362764bdabd4c9a23ea09f9a04fc3e9a", "patch": "@@ -1,80 +0,0 @@\n-// std::limits definitions -*- C++ -*-\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <limits>\n-\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n-# error \"limits_c++0x.cc must be compiled with -std=gnu++0x\"\n-#endif\n-\n-namespace std\n-{\n-  // char16_t\n-  const bool numeric_limits<char16_t>::is_specialized;\n-  const int  numeric_limits<char16_t>::digits;\n-  const int  numeric_limits<char16_t>::digits10;\n-  const bool numeric_limits<char16_t>::is_signed;\n-  const bool numeric_limits<char16_t>::is_integer;\n-  const bool numeric_limits<char16_t>::is_exact;\n-  const int  numeric_limits<char16_t>::radix;\n-  const int  numeric_limits<char16_t>::min_exponent;\n-  const int  numeric_limits<char16_t>::min_exponent10;\n-  const int  numeric_limits<char16_t>::max_exponent;\n-  const int  numeric_limits<char16_t>::max_exponent10;\n-  const bool numeric_limits<char16_t>::has_infinity;\n-  const bool numeric_limits<char16_t>::has_quiet_NaN;\n-  const bool numeric_limits<char16_t>::has_signaling_NaN;\n-  const float_denorm_style numeric_limits<char16_t>::has_denorm;\n-  const bool numeric_limits<char16_t>::has_denorm_loss;\n-  const bool numeric_limits<char16_t>::is_iec559;\n-  const bool numeric_limits<char16_t>::is_bounded;\n-  const bool numeric_limits<char16_t>::is_modulo;\n-  const bool numeric_limits<char16_t>::traps;\n-  const bool numeric_limits<char16_t>::tinyness_before;\n-  const float_round_style numeric_limits<char16_t>::round_style;\n-\n-  // char32_t\n-  const bool numeric_limits<char32_t>::is_specialized;\n-  const int  numeric_limits<char32_t>::digits;\n-  const int  numeric_limits<char32_t>::digits10;\n-  const bool numeric_limits<char32_t>::is_signed;\n-  const bool numeric_limits<char32_t>::is_integer;\n-  const bool numeric_limits<char32_t>::is_exact;\n-  const int  numeric_limits<char32_t>::radix;\n-  const int  numeric_limits<char32_t>::min_exponent;\n-  const int  numeric_limits<char32_t>::min_exponent10;\n-  const int  numeric_limits<char32_t>::max_exponent;\n-  const int  numeric_limits<char32_t>::max_exponent10;\n-  const bool numeric_limits<char32_t>::has_infinity;\n-  const bool numeric_limits<char32_t>::has_quiet_NaN;\n-  const bool numeric_limits<char32_t>::has_signaling_NaN;\n-  const float_denorm_style numeric_limits<char32_t>::has_denorm;\n-  const bool numeric_limits<char32_t>::has_denorm_loss;\n-  const bool numeric_limits<char32_t>::is_iec559;\n-  const bool numeric_limits<char32_t>::is_bounded;\n-  const bool numeric_limits<char32_t>::is_modulo;\n-  const bool numeric_limits<char32_t>::traps;\n-  const bool numeric_limits<char32_t>::tinyness_before;\n-  const float_round_style numeric_limits<char32_t>::round_style;\n-}"}, {"sha": "f35feec3d4891f6903d4ddb88153e5b752ca64b3", "filename": "libstdc++-v3/src/list.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240c7f7f570ea8b125fa764daedccd7ce1c147c7/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flist.cc?ref=240c7f7f570ea8b125fa764daedccd7ce1c147c7", "patch": "@@ -1,6 +1,6 @@\n // std::list utilities implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -85,8 +85,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   }\n \n   void\n-  _List_node_base::transfer(_List_node_base * const __first,\n-                            _List_node_base * const __last)\n+  _List_node_base::_M_transfer(_List_node_base * const __first,\n+\t\t\t       _List_node_base * const __last)\n   {\n     if (this != __last)\n     {\n@@ -104,7 +104,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   }\n \n   void\n-  _List_node_base::reverse()\n+  _List_node_base::_M_reverse()\n   {\n     _List_node_base* __tmp = this;\n     do\n@@ -118,7 +118,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   }\n \n   void\n-  _List_node_base::hook(_List_node_base* const __position)\n+  _List_node_base::_M_hook(_List_node_base* const __position)\n   {\n     this->_M_next = __position;\n     this->_M_prev = __position->_M_prev;\n@@ -127,7 +127,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   }\n \n   void\n-  _List_node_base::unhook()\n+  _List_node_base::_M_unhook()\n   {\n     _List_node_base* const __next_node = this->_M_next;\n     _List_node_base* const __prev_node = this->_M_prev;"}]}