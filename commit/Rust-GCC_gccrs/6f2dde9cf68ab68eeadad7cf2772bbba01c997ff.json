{"sha": "6f2dde9cf68ab68eeadad7cf2772bbba01c997ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYyZGRlOWNmNjhhYjY4ZWVhZGFkN2NmMjc3MmJiYmEwMWM5OTdmZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-09-10T19:13:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-10T19:13:49Z"}, "message": "i386.md (<sincos>xf2): Rename from *<sincos>xf2_i387.\n\n\t* config/i386/i386.md (<sincos>xf2): Rename from *<sincos>xf2_i387.\n\t(*<sincos>_extend<mode>xf2_i387): Remove insn pattern.\n\t(<sincos>mode2): New expander.\n\t(sincos_extend<mode>xf3_i387): Remove insn pattern.\n\t(sincos -> sin, cos splitters): Remove splitter patterns.\n\t(sincos<mode>3): Change operand 2 predicate to general_operand.\n\tExtend operand 2 to XFmode and generate sincosxf3 insn.\n\t(fptanxf4_i387): Change mode of operands 0 and 3 to SFmode.\n\tChange operand 3 predicate to const1_operand.\n\t(fptan_extend<mode>xf4_i387): Remove insn pattern.\n\t(tanxf2): Update operands in the call to fptanxf4_i387.\n\t(tan<mode>2): Change operand 1 predicate to general_operand.\n\tExtend operand 1 to XFmode and generate tanxf3 insn.\n\t(atan2xf3): Rename from *fpatanxf3_i387.\n\t(fpatan_extend<mode>xf3_i387): Remove insn pattern.\n\t(atan2xf3): Remove expander.\n\t(atan2<mode<3):  Change operand 1 and 2 predicates to general_operand.\n\tExtend operands 1 and 2 to XFmode and generate atan2xf3 insn.\n\t(atan<mode>2): Change operand 1 predicate to general_operand.\n\tExtend operand 1 to XFmode and generate atanxf3 insn.\n\nFrom-SVN: r264195", "tree": {"sha": "1fe0fc00df2c8c234237c7e192b6910c8f59c7d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fe0fc00df2c8c234237c7e192b6910c8f59c7d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfc741557ea2720247835a7e8b47e0c4d47b5d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc741557ea2720247835a7e8b47e0c4d47b5d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc741557ea2720247835a7e8b47e0c4d47b5d77"}], "stats": {"total": 215, "additions": 66, "deletions": 149}, "files": [{"sha": "80991766b652925aa9d82791a1151253f31bec6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f2dde9cf68ab68eeadad7cf2772bbba01c997ff", "patch": "@@ -1,3 +1,26 @@\n+2018-09-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (<sincos>xf2): Rename from *<sincos>xf2_i387.\n+\t(*<sincos>_extend<mode>xf2_i387): Remove insn pattern.\n+\t(<sincos>mode2): New expander.\n+\t(sincos_extend<mode>xf3_i387): Remove insn pattern.\n+\t(sincos -> sin, cos splitters): Remove splitter patterns.\n+\t(sincos<mode>3): Change operand 2 predicate to general_operand.\n+\tExtend operand 2 to XFmode and generate sincosxf3 insn.\n+\t(fptanxf4_i387): Change mode of operands 0 and 3 to SFmode.\n+\tChange operand 3 predicate to const1_operand.\n+\t(fptan_extend<mode>xf4_i387): Remove insn pattern.\n+\t(tanxf2): Update operands in the call to fptanxf4_i387.\n+\t(tan<mode>2): Change operand 1 predicate to general_operand.\n+\tExtend operand 1 to XFmode and generate tanxf3 insn.\n+\t(atan2xf3): Rename from *fpatanxf3_i387.\n+\t(fpatan_extend<mode>xf3_i387): Remove insn pattern.\n+\t(atan2xf3): Remove expander.\n+\t(atan2<mode<3):  Change operand 1 and 2 predicates to general_operand.\n+\tExtend operands 1 and 2 to XFmode and generate atan2xf3 insn.\n+\t(atan<mode>2): Change operand 1 predicate to general_operand.\n+\tExtend operand 1 to XFmode and generate atanxf3 insn.\n+\n 2018-09-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (x87/SSE constant load splitter): Use"}, {"sha": "4a0a508e2b5052a683e70842568794fb759cc9eb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 149, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f2dde9cf68ab68eeadad7cf2772bbba01c997ff/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6f2dde9cf68ab68eeadad7cf2772bbba01c997ff", "patch": "@@ -15375,7 +15375,7 @@\n \t[(UNSPEC_SIN \"sin\")\n \t (UNSPEC_COS \"cos\")])\n \n-(define_insn \"*<sincos>xf2_i387\"\n+(define_insn \"<sincos>xf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n \t\t   SINCOS))]\n@@ -15386,25 +15386,23 @@\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*<sincos>_extend<mode>xf2_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(float_extend:XF\n-\t\t      (match_operand:MODEF 1 \"register_operand\" \"0\"))]\n-\t\t   SINCOS))]\n+(define_expand \"<sincos><mode>2\"\n+  [(set (match_operand:MODEF 0 \"register_operand\")\n+\t(unspec:MODEF [(match_operand:MODEF 1 \"general_operand\")]\n+\t\t      SINCOS))]\n   \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n-  \"f<sincos>\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"znver1_decode\" \"vector\")\n-   (set_attr \"mode\" \"XF\")])\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n \n-;; When sincos pattern is defined, sin and cos builtin functions will be\n-;; expanded to sincos pattern with one of its outputs left unused.\n-;; CSE pass will figure out if two sincos patterns can be combined,\n-;; otherwise sincos pattern will be split back to sin or cos pattern,\n-;; depending on the unused output.\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_<sincos>xf2 (op0, op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  DONE;\n+})\n \n (define_insn \"sincosxf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n@@ -15419,110 +15417,34 @@\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_split\n-  [(set (match_operand:XF 0 \"register_operand\")\n-\t(unspec:XF [(match_operand:XF 2 \"register_operand\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:XF 1 \"register_operand\")\n-\t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n-   && can_create_pseudo_p ()\"\n-  [(set (match_dup 1) (unspec:XF [(match_dup 2)] UNSPEC_SIN))])\n-\n-(define_split\n-  [(set (match_operand:XF 0 \"register_operand\")\n-\t(unspec:XF [(match_operand:XF 2 \"register_operand\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:XF 1 \"register_operand\")\n-\t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n-   && can_create_pseudo_p ()\"\n-  [(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_COS))])\n-\n-(define_insn \"sincos_extend<mode>xf3_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(float_extend:XF\n-\t\t      (match_operand:MODEF 2 \"register_operand\" \"0\"))]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n-        (unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-       || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fsincos\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"znver1_decode\" \"vector\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_split\n-  [(set (match_operand:XF 0 \"register_operand\")\n-\t(unspec:XF [(float_extend:XF\n-\t\t      (match_operand:MODEF 2 \"register_operand\"))]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:XF 1 \"register_operand\")\n-\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n-   && can_create_pseudo_p ()\"\n-  [(set (match_dup 1)\n-\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SIN))])\n-\n-(define_split\n-  [(set (match_operand:XF 0 \"register_operand\")\n-\t(unspec:XF [(float_extend:XF\n-\t\t      (match_operand:MODEF 2 \"register_operand\"))]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:XF 1 \"register_operand\")\n-\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n-   && can_create_pseudo_p ()\"\n-  [(set (match_dup 0)\n-\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_COS))])\n-\n (define_expand \"sincos<mode>3\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"register_operand\"))\n-   (use (match_operand:MODEF 2 \"register_operand\"))]\n+   (use (match_operand:MODEF 2 \"general_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n {\n   rtx op0 = gen_reg_rtx (XFmode);\n   rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_sincos_extend<mode>xf3_i387 (op0, op1, operands[2]));\n+  emit_insn (gen_extend<mode>xf2 (op2, operands[2]));\n+  emit_insn (gen_sincosxf3 (op0, op1, op2));\n   emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   emit_insn (gen_truncxf<mode>2 (operands[1], op1));\n   DONE;\n })\n \n (define_insn \"fptanxf4_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(match_operand:XF 3 \"const_double_operand\" \"F\"))\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(match_operand:SF 3 \"const1_operand\"))\n    (set (match_operand:XF 1 \"register_operand\" \"=u\")\n         (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")]\n \t\t   UNSPEC_TAN))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\n-   && standard_80387_constant_p (operands[3]) == 2\"\n-  \"fptan\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"znver1_decode\" \"vector\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"fptan_extend<mode>xf4_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n-\t(match_operand:MODEF 3 \"const_double_operand\" \"F\"))\n-   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n-        (unspec:XF [(float_extend:XF\n-\t\t      (match_operand:MODEF 2 \"register_operand\" \"0\"))]\n-\t\t   UNSPEC_TAN))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-       || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\n-   && standard_80387_constant_p (operands[3]) == 2\"\n+   && flag_unsafe_math_optimizations\"\n   \"fptan\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"znver1_decode\" \"vector\")\n@@ -15534,33 +15456,30 @@\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n {\n-  rtx one = gen_reg_rtx (XFmode);\n-  rtx op2 = CONST1_RTX (XFmode); /* fld1 */\n-\n-  emit_insn (gen_fptanxf4_i387 (one, operands[0], operands[1], op2));\n+  rtx one = gen_reg_rtx (SFmode);\n+  emit_insn (gen_fptanxf4_i387 (one, operands[0], operands[1],\n+\t\t\t\tCONST1_RTX (SFmode)));\n   DONE;\n })\n \n (define_expand \"tan<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"register_operand\"))]\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n {\n   rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n \n-  rtx one = gen_reg_rtx (<MODE>mode);\n-  rtx op2 = CONST1_RTX (<MODE>mode); /* fld1 */\n-\n-  emit_insn (gen_fptan_extend<mode>xf4_i387 (one, op0,\n-\t\t\t\t\t     operands[1], op2));\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_tanxf2 (op0, op1));\n   emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n-(define_insn \"*fpatanxf3_i387\"\n+(define_insn \"atan2xf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n         (unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")\n \t            (match_operand:XF 2 \"register_operand\" \"u\")]\n@@ -15573,44 +15492,23 @@\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"fpatan_extend<mode>xf3_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-        (unspec:XF [(float_extend:XF\n-\t\t      (match_operand:MODEF 1 \"register_operand\" \"0\"))\n-\t\t    (float_extend:XF\n-\t\t      (match_operand:MODEF 2 \"register_operand\" \"u\"))]\n-\t           UNSPEC_FPATAN))\n-   (clobber (match_scratch:XF 3 \"=2\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-       || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fpatan\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"znver1_decode\" \"vector\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_expand \"atan2xf3\"\n-  [(parallel [(set (match_operand:XF 0 \"register_operand\")\n-\t\t   (unspec:XF [(match_operand:XF 2 \"register_operand\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\")]\n-\t\t\t      UNSPEC_FPATAN))\n-\t      (clobber (match_scratch:XF 3))])]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\")\n-\n (define_expand \"atan2<mode>3\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"register_operand\"))\n-   (use (match_operand:MODEF 2 \"register_operand\"))]\n+   (use (match_operand:MODEF 1 \"general_operand\"))\n+   (use (match_operand:MODEF 2 \"general_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n {\n   rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_fpatan_extend<mode>xf3_i387 (op0, operands[2], operands[1]));\n+  emit_insn (gen_extend<mode>xf2 (op2, operands[2]));\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+\n+  emit_insn (gen_atan2xf3 (op0, op2, op1));\n   emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n@@ -15623,25 +15521,21 @@\n \t      (clobber (match_scratch:XF 3))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n-{\n-  operands[2] = gen_reg_rtx (XFmode);\n-  emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n-})\n+  \"operands[2] = force_reg (XFmode, CONST1_RTX (XFmode));\")\n \n (define_expand \"atan<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"register_operand\"))]\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n {\n   rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n \n-  rtx op2 = gen_reg_rtx (<MODE>mode);\n-  emit_move_insn (op2, CONST1_RTX (<MODE>mode));  /* fld1 */\n-\n-  emit_insn (gen_fpatan_extend<mode>xf3_i387 (op0, op2, operands[1]));\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_atanxf2 (op0, op1));\n   emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n@@ -15664,7 +15558,7 @@\n   for (i = 2; i < 6; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n \n-  emit_move_insn (operands[3], CONST1_RTX (XFmode));  /* fld1 */\n+  operands[3] = force_reg (XFmode, CONST1_RTX (XFmode));\n })\n \n (define_expand \"asin<mode>2\"\n@@ -15702,7 +15596,7 @@\n   for (i = 2; i < 6; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n \n-  emit_move_insn (operands[3], CONST1_RTX (XFmode));  /* fld1 */\n+  operands[3] = force_reg (XFmode, CONST1_RTX (XFmode));\n })\n \n (define_expand \"acos<mode>2\""}]}