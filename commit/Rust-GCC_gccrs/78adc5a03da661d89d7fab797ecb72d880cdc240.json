{"sha": "78adc5a03da661d89d7fab797ecb72d880cdc240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhZGM1YTAzZGE2NjFkODlkN2ZhYjc5N2VjYjcyZDg4MGNkYzI0MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-02-17T23:07:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-02-17T23:07:06Z"}, "message": "reload1.c (reload_cse_simplify_set): Respect LOAD_EXTEND_OP when replacing a memory load with a register.\n\n        * reload1.c (reload_cse_simplify_set): Respect LOAD_EXTEND_OP\n        when replacing a memory load with a register.\n\nFrom-SVN: r39805", "tree": {"sha": "30fb07f9fa9e335b62b5baa21d4c7b1be4d7ada1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30fb07f9fa9e335b62b5baa21d4c7b1be4d7ada1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78adc5a03da661d89d7fab797ecb72d880cdc240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78adc5a03da661d89d7fab797ecb72d880cdc240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78adc5a03da661d89d7fab797ecb72d880cdc240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78adc5a03da661d89d7fab797ecb72d880cdc240/comments", "author": null, "committer": null, "parents": [{"sha": "e2373f955520efba33f41b51e37be57899700422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2373f955520efba33f41b51e37be57899700422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2373f955520efba33f41b51e37be57899700422"}], "stats": {"total": 99, "additions": 84, "deletions": 15}, "files": [{"sha": "d24594be9b0c0abdcae56531d6627e0dcf7fbdf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78adc5a03da661d89d7fab797ecb72d880cdc240/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78adc5a03da661d89d7fab797ecb72d880cdc240/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78adc5a03da661d89d7fab797ecb72d880cdc240", "patch": "@@ -1,3 +1,8 @@\n+2001-02-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* reload1.c (reload_cse_simplify_set): Respect LOAD_EXTEND_OP\n+\twhen replacing a memory load with a register.\n+\n Sat Feb 17 14:48:30 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t\t\t  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "a10a12a9fbf63e68f69b072841fef3acc1a91295", "filename": "gcc/reload1.c", "status": "modified", "additions": 79, "deletions": 15, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78adc5a03da661d89d7fab797ecb72d880cdc240/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78adc5a03da661d89d7fab797ecb72d880cdc240/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=78adc5a03da661d89d7fab797ecb72d880cdc240", "patch": "@@ -6665,7 +6665,7 @@ emit_output_reload_insns (chain, rl, j)\n \n \t\t  /* Copy primary reload reg to secondary reload reg.\n \t\t     (Note that these have been swapped above, then\n-\t\t     secondary reload reg to OLD using our insn.  */\n+\t\t     secondary reload reg to OLD using our insn.)  */\n \n \t\t  /* If REAL_OLD is a paradoxical SUBREG, remove it\n \t\t     and try to put the opposite SUBREG on\n@@ -8172,6 +8172,9 @@ reload_cse_simplify_set (set, insn)\n   int old_cost;\n   cselib_val *val;\n   struct elt_loc_list *l;\n+#ifdef LOAD_EXTEND_OP\n+  enum rtx_code extend_op = NIL;\n+#endif\n \n   dreg = true_regnum (SET_DEST (set));\n   if (dreg < 0)\n@@ -8183,6 +8186,18 @@ reload_cse_simplify_set (set, insn)\n \n   dclass = REGNO_REG_CLASS (dreg);\n \n+#ifdef LOAD_EXTEND_OP\n+  /* When replacing a memory with a register, we need to honor assumptions\n+     that combine made wrt the contents of sign bits.  We'll do this by\n+     generating an extend instruction instead of a reg->reg copy.  Thus \n+     the destination must be a register that we can widen.  */\n+  if (GET_CODE (src) == MEM\n+      && GET_MODE_BITSIZE (GET_MODE (src)) < BITS_PER_WORD\n+      && (extend_op = LOAD_EXTEND_OP (GET_MODE (src))) != NIL\n+      && GET_CODE (SET_DEST (set)) != REG)\n+    return 0;\n+#endif\n+\n   /* If memory loads are cheaper than register copies, don't change them.  */\n   if (GET_CODE (src) == MEM)\n     old_cost = MEMORY_MOVE_COST (GET_MODE (src), dclass, 1);\n@@ -8200,23 +8215,72 @@ reload_cse_simplify_set (set, insn)\n     return 0;\n   for (l = val->locs; l; l = l->next)\n     {\n+      rtx this_rtx = l->loc;\n       int this_cost;\n-      if (CONSTANT_P (l->loc) && ! references_value_p (l->loc, 0))\n-\tthis_cost = rtx_cost (l->loc, SET);\n-      else if (GET_CODE (l->loc) == REG)\n-\tthis_cost = REGISTER_MOVE_COST (GET_MODE (l->loc),\n-\t\t\t\t\tREGNO_REG_CLASS (REGNO (l->loc)),\n-\t\t\t\t\tdclass);\n+\n+      if (CONSTANT_P (this_rtx) && ! references_value_p (this_rtx, 0))\n+\t{\n+#ifdef LOAD_EXTEND_OP\n+\t  if (extend_op != NIL)\n+\t    {\n+\t      HOST_WIDE_INT this_val;\n+\n+\t      /* ??? I'm lazy and don't wish to handle CONST_DOUBLE.  Other\n+\t\t constants, such as SYMBOL_REF, cannot be extended.  */\n+\t      if (GET_CODE (this_rtx) != CONST_INT)\n+\t\tcontinue;\n+\n+\t      this_val = INTVAL (this_rtx);\n+\t      switch (extend_op)\n+\t\t{\n+\t\tcase ZERO_EXTEND:\n+\t\t  this_val &= GET_MODE_MASK (GET_MODE (src));\n+\t\t  break;\n+\t\tcase SIGN_EXTEND:\n+\t\t  /* ??? In theory we're already extended.  */\n+\t\t  if (this_val == trunc_int_for_mode (this_val, GET_MODE (src)))\n+\t\t    break;\n+\t\tdefault:\n+\t\t  abort ();\n+\t\t}\n+\t      this_val = GEN_INT (this_val);\n+\t    }\n+#endif\n+\t  this_cost = rtx_cost (this_rtx, SET);\n+\t}\n+      else if (GET_CODE (this_rtx) == REG)\n+\t{\n+#ifdef LOAD_EXTEND_OP\n+\t  if (extend_op != NIL)\n+\t    {\n+\t      this_rtx = gen_rtx_fmt_e (extend_op, word_mode, this_rtx);\n+\t      this_cost = rtx_cost (this_rtx, SET);\n+\t    }\n+\t  else\n+#endif\n+\t    this_cost = REGISTER_MOVE_COST (GET_MODE (this_rtx),\n+\t\t\t\t\t    REGNO_REG_CLASS (REGNO (this_rtx)),\n+\t\t\t\t\t    dclass);\n+\t}\n       else\n \tcontinue;\n-      /* If equal costs, prefer registers over anything else.  That tends to\n-\t lead to smaller instructions on some machines.  */\n-      if ((this_cost < old_cost\n-\t   || (this_cost == old_cost\n-\t       && GET_CODE (l->loc) == REG\n-\t       && GET_CODE (SET_SRC (set)) != REG))\n-\t  && validate_change (insn, &SET_SRC (set), copy_rtx (l->loc), 1))\n-\told_cost = this_cost, did_change = 1;\n+\n+      /* If equal costs, prefer registers over anything else.  That\n+\t tends to lead to smaller instructions on some machines.  */\n+      if (this_cost < old_cost\n+\t  || (this_cost == old_cost\n+\t      && GET_CODE (this_rtx) == REG\n+\t      && GET_CODE (SET_SRC (set)) != REG))\n+\t{\n+#ifdef LOAD_EXTEND_OP\n+\t  rtx wide_dest = gen_rtx_REG (word_mode, REGNO (SET_DEST (set)));\n+\t  ORIGINAL_REGNO (wide_dest) = ORIGINAL_REGNO (SET_DEST (set));\n+\t  validate_change (insn, &SET_DEST (set), wide_dest, 1);\n+#endif\n+\n+\t  validate_change (insn, &SET_SRC (set), copy_rtx (this_rtx), 1);\n+\t  old_cost = this_cost, did_change = 1;\n+\t}\n     }\n \n   return did_change;"}]}