{"sha": "fcae219ac449243231ebbe73eefddde824d7354b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhZTIxOWFjNDQ5MjQzMjMxZWJiZTczZWVmZGRkZTgyNGQ3MzU0Yg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-04-24T23:52:16Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-04-24T23:52:16Z"}, "message": "loop.c (load_mems): Don't change the interface of called functions.\n\n\t* loop.c (load_mems): Don't change the interface of called functions.\n\n\t* calls.c (expand_call): Take current_function_pretend_args_size\n\tinto account when setting argblock for sibcalls.\n\nFrom-SVN: r52745", "tree": {"sha": "1fd83762c98ea87999142b9608c409960384d4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fd83762c98ea87999142b9608c409960384d4f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcae219ac449243231ebbe73eefddde824d7354b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcae219ac449243231ebbe73eefddde824d7354b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcae219ac449243231ebbe73eefddde824d7354b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcae219ac449243231ebbe73eefddde824d7354b/comments", "author": null, "committer": null, "parents": [{"sha": "0df9cfc799b0ff8a62f076bac4725a961f88ada2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df9cfc799b0ff8a62f076bac4725a961f88ada2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df9cfc799b0ff8a62f076bac4725a961f88ada2"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "37e68d759c5a0580b3df369a61b731008246bb14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcae219ac449243231ebbe73eefddde824d7354b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcae219ac449243231ebbe73eefddde824d7354b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcae219ac449243231ebbe73eefddde824d7354b", "patch": "@@ -1,3 +1,10 @@\n+Wed Apr 24 23:45:37 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* loop.c (load_mems): Don't change the interface of called functions.\n+\n+\t* calls.c (expand_call): Take current_function_pretend_args_size\n+\tinto account when setting argblock for sibcalls.\n+\n 2002-04-24  Matt Hiller  <hiller@redhat.com>\n \n \t* cpplex.c: Remove conditional #undef of MULTIBYTE_CHARS."}, {"sha": "6a956860dd18a4e30e0dcc0538c6201c44f5c23c", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcae219ac449243231ebbe73eefddde824d7354b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcae219ac449243231ebbe73eefddde824d7354b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=fcae219ac449243231ebbe73eefddde824d7354b", "patch": "@@ -2709,6 +2709,12 @@ expand_call (exp, target, ignore)\n       if (pass == 0)\n \t{\n \t  argblock = virtual_incoming_args_rtx;\n+\t  argblock\n+#ifdef STACK_GROWS_DOWNWARD\n+\t    = plus_constant (argblock, current_function_pretend_args_size);\n+#else\n+\t    = plus_constant (argblock, -current_function_pretend_args_size);\n+#endif\n \t  stored_args_map = sbitmap_alloc (args_size.constant);\n \t  sbitmap_zero (stored_args_map);\n \t}"}, {"sha": "5f187736c4b69489357672e88a7c5405ff4dff88", "filename": "gcc/loop.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcae219ac449243231ebbe73eefddde824d7354b/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcae219ac449243231ebbe73eefddde824d7354b/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=fcae219ac449243231ebbe73eefddde824d7354b", "patch": "@@ -9784,17 +9784,30 @@ load_mems (loop)\n \t\t  && rtx_equal_p (SET_DEST (set), mem))\n \t\tSET_REGNO_REG_SET (&store_copies, REGNO (SET_SRC (set)));\n \n-\t      /* Replace the memory reference with the shadow register.  */\n-\t      replace_loop_mems (p, loop_info->mems[i].mem,\n-\t\t\t\t loop_info->mems[i].reg);\n+\t      /* If this is a call which uses / clobbers this memory\n+\t\t location, we must not change the interface here.  */\n+\t      if (GET_CODE (p) == CALL_INSN\n+\t\t  && reg_mentioned_p (loop_info->mems[i].mem,\n+\t\t\t\t      CALL_INSN_FUNCTION_USAGE (p)))\n+\t\t{\n+\t\t  cancel_changes (0);\n+\t\t  loop_info->mems[i].optimize = 0;\n+\t\t  break;\n+\t\t}\n+\t      else\n+\t        /* Replace the memory reference with the shadow register.  */\n+\t\treplace_loop_mems (p, loop_info->mems[i].mem,\n+\t\t\t\t   loop_info->mems[i].reg);\n \t    }\n \n \t  if (GET_CODE (p) == CODE_LABEL\n \t      || GET_CODE (p) == JUMP_INSN)\n \t    maybe_never = 1;\n \t}\n \n-      if (! apply_change_group ())\n+      if (! loop_info->mems[i].optimize)\n+\t; /* We found we couldn't do the replacement, so do nothing.  */\n+      else if (! apply_change_group ())\n \t/* We couldn't replace all occurrences of the MEM.  */\n \tloop_info->mems[i].optimize = 0;\n       else"}]}