{"sha": "a0a2a39912679f761df40e4b88fed9326398e63b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhMmEzOTkxMjY3OWY3NjFkZjQwZTRiODhmZWQ5MzI2Mzk4ZTYzYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-11T22:32:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-11T22:32:01Z"}, "message": "[multiple changes]\n\n2010-10-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* testsuite/23_containers/bitset/cons/2.cc: Tweak.\n\n2010-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/bitset (bitset<>::bitset(const _CharT*,\n\ttypename std::basic_string<>::size_type, _CharT, _CharT)):\n\tImplement new proposed resolution for DR 1325.\n\t* include/debug/bitset: Likewise.\n\t* include/profile/bitset: Likewise.\n\t* testsuite/23_containers/bitset/cons/dr1325-1.cc: New.\n\t* testsuite/23_containers/bitset/cons/dr1325-2.cc: Likewise.\n\nFrom-SVN: r165338", "tree": {"sha": "18bf2f094ffa4469352b648b932b7f456d33a389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18bf2f094ffa4469352b648b932b7f456d33a389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0a2a39912679f761df40e4b88fed9326398e63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a2a39912679f761df40e4b88fed9326398e63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a2a39912679f761df40e4b88fed9326398e63b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a2a39912679f761df40e4b88fed9326398e63b/comments", "author": null, "committer": null, "parents": [{"sha": "2c8865f1c135dd460121a6fcb87e1d18bda72ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8865f1c135dd460121a6fcb87e1d18bda72ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c8865f1c135dd460121a6fcb87e1d18bda72ada"}], "stats": {"total": 179, "additions": 159, "deletions": 20}, "files": [{"sha": "14d834e4a58a2e0014100039b79afbde06046ed0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a0a2a39912679f761df40e4b88fed9326398e63b", "patch": "@@ -1,3 +1,17 @@\n+2010-10-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* testsuite/23_containers/bitset/cons/2.cc: Tweak.\n+\n+2010-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/bitset (bitset<>::bitset(const _CharT*,\n+\ttypename std::basic_string<>::size_type, _CharT, _CharT)):\n+\tImplement new proposed resolution for DR 1325.\n+\t* include/debug/bitset: Likewise.\n+\t* include/profile/bitset: Likewise.\n+\t* testsuite/23_containers/bitset/cons/dr1325-1.cc: New.\n+\t* testsuite/23_containers/bitset/cons/dr1325-2.cc: Likewise.\n+\n 2010-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/api.xml: Add link to 4.5 generated docs."}, {"sha": "739dcfd38f179d6f526ccd31c848b6fa6e7be653", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=a0a2a39912679f761df40e4b88fed9326398e63b", "patch": "@@ -150,8 +150,13 @@ namespace __debug\n       bitset(const _Base& __x) : _Base(__x), _Safe_base() { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      explicit\n-      bitset(const char* __str) : _Base(__str) { }\n+      template<typename _CharT>\n+        explicit\n+        bitset(const _CharT* __str,\n+\t       typename std::basic_string<_CharT>::size_type __n\n+\t       = std::basic_string<_CharT>::npos,\n+\t       _CharT __zero = _CharT('0'), _CharT __one = _CharT('1'))\n+\t: _Base(__str, __n, __zero, __one) { }\n #endif\n \n       // 23.3.5.2 bitset operations:"}, {"sha": "b8b1e65f9e55d3fa37a07c300ca392be64d536b3", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=a0a2a39912679f761df40e4b88fed9326398e63b", "patch": "@@ -127,8 +127,13 @@ namespace __profile\n       bitset(const _Base& __x) : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      explicit\n-      bitset(const char* __str) : _Base(__str) { }\n+      template<typename _CharT>\n+        explicit\n+        bitset(const _CharT* __str,\n+\t       typename std::basic_string<_CharT>::size_type __n\n+\t       = std::basic_string<_CharT>::npos,\n+\t       _CharT __zero = _CharT('0'), _CharT __one = _CharT('1'))\n+\t: _Base(__str, __n, __zero, __one) { }\n #endif\n \n       // 23.3.5.2 bitset operations:"}, {"sha": "1c71c4fb96940c6ea75ec01eb49bd29849573068", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=a0a2a39912679f761df40e4b88fed9326398e63b", "patch": "@@ -870,22 +870,31 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**\n-       *  @brief  Construct from a string.\n-       *  @param  str  A string of @a 0 and @a 1 characters.\n+       *  @brief  Construct from a character %array.\n+       *  @param  str  An %array of characters @a zero and @a one.\n+       *  @param  n    The number of characters to use.\n+       *  @param  zero The character corresponding to the value 0.\n+       *  @param  one  The character corresponding to the value 1.\n        *  @throw  std::invalid_argument  If a character appears in the string\n-       *                                 which is neither @a 0 nor @a 1.\n+       *                                 which is neither @a zero nor @a one.\n        */\n-      explicit\n-      bitset(const char* __str)\n-      : _Base()\n-      {\n-\tif (!__str)\n-\t  __throw_logic_error(__N(\"bitset::bitset(const char*)\"));\n-\n-\tconst size_t __len = __builtin_strlen(__str);\n-\t_M_copy_from_ptr<char, std::char_traits<char>>(__str, __len, 0,\n-\t\t\t\t\t\t       __len, '0', '1');\n-      }\n+      template<typename _CharT>\n+        explicit\n+        bitset(const _CharT* __str,\n+\t       typename std::basic_string<_CharT>::size_type __n\n+\t       = std::basic_string<_CharT>::npos,\n+\t       _CharT __zero = _CharT('0'), _CharT __one = _CharT('1'))\n+        : _Base()\n+        {\n+\t  if (!__str)\n+\t    __throw_logic_error(__N(\"bitset::bitset(const _CharT*, ...)\"));\n+\n+\t  if (__n == std::basic_string<_CharT>::npos)\n+\t    __n = std::char_traits<_CharT>::length(__str);\n+\t  _M_copy_from_ptr<_CharT, std::char_traits<_CharT>>(__str, __n, 0,\n+\t\t\t\t\t\t\t     __n, __zero,\n+\t\t\t\t\t\t\t     __one);\n+\t}\n #endif\n \n       // 23.3.5.2 bitset operations:"}, {"sha": "4a394473f98b6e7fc46fb2168c259b596a8afcf6", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F2.cc?ref=a0a2a39912679f761df40e4b88fed9326398e63b", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,7 +33,7 @@ test01()\n \n   X x;\n   std::string s(x);\n-  std::bitset<32> b1(x);\n+  std::bitset<32> b1(static_cast<const char*>(x));\n   std::bitset<32> b2(s);\n   VERIFY( b1 == b2 );\n }"}, {"sha": "c79727e0426f968e9c3a892ded55f32783b4d18f", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/dr1325-1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-1.cc?ref=a0a2a39912679f761df40e4b88fed9326398e63b", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bitset>\n+\n+// DR 1325.\n+std::bitset<10> b(0);"}, {"sha": "e58565136da7cf9f3cf779bc90cff13819aa502d", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/dr1325-2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a2a39912679f761df40e4b88fed9326398e63b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-2.cc?ref=a0a2a39912679f761df40e4b88fed9326398e63b", "patch": "@@ -0,0 +1,80 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+template<std::size_t Nb, typename CharT>\n+  std::bitset<Nb>\n+  test01_ref(const CharT* str,\n+\t     typename std::basic_string<CharT>::size_type n\n+\t     = std::basic_string<CharT>::npos,\n+\t     CharT zero = CharT('0'), CharT one = CharT('1'))\n+  {\n+    return std::bitset<Nb>(n == std::basic_string<CharT>::npos\n+\t\t\t   ? std::basic_string<CharT>(str)\n+\t\t\t   : std::basic_string<CharT>(str, n),\n+\t\t\t   0, n, zero, one);\n+  }\n+\n+// DR 1325.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  const char s1[4] = { '0', '1', '0', '1' };\n+  VERIFY( bitset<4>(s1, 4) == test01_ref<4>(s1, 4) );\n+\n+  const char s2[3] = { '1', '1', '0' };\n+  VERIFY( bitset<6>(s1, 3) == test01_ref<6>(s1, 3) );\n+\n+  const char* s3 = \"1110110\";\n+  VERIFY( bitset<7>(s3) == test01_ref<7>(s3) );\n+\n+  const char* s4 = \"0011\";\n+  VERIFY( bitset<10>(s4) == test01_ref<10>(s4) );\n+\n+  const char* s5 = \"011110000111001\";\n+  VERIFY( bitset<5>(s5) == test01_ref<5>(s5) );\n+\n+  const char* s6 = \"1cc1c1\";\n+  VERIFY( bitset<6>(s6, basic_string<char>::npos, 'c')\n+\t  == test01_ref<6>(s6, basic_string<char>::npos, 'c') );\n+\n+  const char* s7 = \"001011101\";\n+  VERIFY( bitset<9>(s7, basic_string<char>::npos, '0', '1')\n+\t  == test01_ref<9>(s7, basic_string<char>::npos, '0', '1') );\n+\n+  const char* s8 = \"babb\";\n+  VERIFY( bitset<4>(s8, basic_string<char>::npos, 'a', 'b')\n+\t  == test01_ref<4>(s8, basic_string<char>::npos, 'a', 'b') );\n+\n+  const char* s9 = \"bbabbbaaa\";\n+  VERIFY( bitset<100>(s9, basic_string<char>::npos, 'a', 'b')\n+\t  == test01_ref<100>(s9, basic_string<char>::npos, 'a', 'b') );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}