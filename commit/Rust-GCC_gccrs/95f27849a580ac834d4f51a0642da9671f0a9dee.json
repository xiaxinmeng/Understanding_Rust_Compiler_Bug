{"sha": "95f27849a580ac834d4f51a0642da9671f0a9dee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmMjc4NDlhNTgwYWM4MzRkNGY1MWEwNjQyZGE5NjcxZjBhOWRlZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-19T09:07:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-19T09:35:24Z"}, "message": "tree-optimization/97466 - remove spurious assert\n\nThis removes an assertion that was supposed to be only for temporary\ndebugging.  I've also re-indented the code which I missed as well.\n\n2020-10-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97466\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Remove\n\tspurious assert, re-indent.", "tree": {"sha": "592512b1016847afc364d80d9216702d4a2ad90c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/592512b1016847afc364d80d9216702d4a2ad90c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95f27849a580ac834d4f51a0642da9671f0a9dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f27849a580ac834d4f51a0642da9671f0a9dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f27849a580ac834d4f51a0642da9671f0a9dee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f27849a580ac834d4f51a0642da9671f0a9dee/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222f312a773157f53396ba4cb287deb07f84cc34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222f312a773157f53396ba4cb287deb07f84cc34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222f312a773157f53396ba4cb287deb07f84cc34"}], "stats": {"total": 128, "additions": 62, "deletions": 66}, "files": [{"sha": "a2fbbc56bcc2c5cd8e5ce36ad9e3a1ea0657c03f", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 62, "deletions": 66, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f27849a580ac834d4f51a0642da9671f0a9dee/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f27849a580ac834d4f51a0642da9671f0a9dee/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=95f27849a580ac834d4f51a0642da9671f0a9dee", "patch": "@@ -531,78 +531,74 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n       oprnd = oprnd_info->ops[stmt_num];\n       tree type = TREE_TYPE (oprnd);\n \n-\t  if (!types_compatible_p (oprnd_info->first_op_type, type))\n+      if (!types_compatible_p (oprnd_info->first_op_type, type))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"Build SLP failed: different operand types\\n\");\n+\t  return 1;\n+\t}\n+\n+      /* Not first stmt of the group, check that the def-stmt/s match\n+\t the def-stmt/s of the first stmt.  Allow different definition\n+\t types for reduction chains: the first stmt must be a\n+\t vect_reduction_def (a phi node), and the rest\n+\t end in the reduction chain.  */\n+      if ((!vect_def_types_match (oprnd_info->first_dt, dt)\n+\t   && !(oprnd_info->first_dt == vect_reduction_def\n+\t\t&& !STMT_VINFO_DATA_REF (stmt_info)\n+\t\t&& REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t\t&& def_stmt_info\n+\t\t&& !STMT_VINFO_DATA_REF (def_stmt_info)\n+\t\t&& (REDUC_GROUP_FIRST_ELEMENT (def_stmt_info)\n+\t\t    == REDUC_GROUP_FIRST_ELEMENT (stmt_info))))\n+\t  || (!STMT_VINFO_DATA_REF (stmt_info)\n+\t      && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t      && ((!def_stmt_info\n+\t\t   || STMT_VINFO_DATA_REF (def_stmt_info)\n+\t\t   || (REDUC_GROUP_FIRST_ELEMENT (def_stmt_info)\n+\t\t       != REDUC_GROUP_FIRST_ELEMENT (stmt_info)))\n+\t\t  != (oprnd_info->first_dt != vect_reduction_def))))\n+\t{\n+\t  /* Try swapping operands if we got a mismatch.  For BB\n+\t     vectorization only in case it will clearly improve things.  */\n+\t  if (i == commutative_op && !swapped\n+\t      && (!is_a <bb_vec_info> (vinfo)\n+\t\t  || (!vect_def_types_match ((*oprnds_info)[i+1]->first_dt,\n+\t\t\t\t\t     dts[i+1])\n+\t\t      && (vect_def_types_match (oprnd_info->first_dt, dts[i+1])\n+\t\t\t  || vect_def_types_match\n+\t\t\t       ((*oprnds_info)[i+1]->first_dt, dts[i])))))\n \t    {\n-\t      gcc_assert ((i != commutative_op\n-\t\t\t   && (commutative_op == -1U\n-\t\t\t       || i != commutative_op + 1)));\n \t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"Build SLP failed: different operand types\\n\");\n-\t      return 1;\n+\t\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t \"trying swapped operands\\n\");\n+\t      std::swap (dts[i], dts[i+1]);\n+\t      std::swap ((*oprnds_info)[i]->def_stmts[stmt_num],\n+\t\t\t (*oprnds_info)[i+1]->def_stmts[stmt_num]);\n+\t      std::swap ((*oprnds_info)[i]->ops[stmt_num],\n+\t\t\t (*oprnds_info)[i+1]->ops[stmt_num]);\n+\t      swapped = true;\n+\t      continue;\n \t    }\n \n-\t  /* Not first stmt of the group, check that the def-stmt/s match\n-\t     the def-stmt/s of the first stmt.  Allow different definition\n-\t     types for reduction chains: the first stmt must be a\n-\t     vect_reduction_def (a phi node), and the rest\n-\t     end in the reduction chain.  */\n-\t  if ((!vect_def_types_match (oprnd_info->first_dt, dt)\n-\t       && !(oprnd_info->first_dt == vect_reduction_def\n-\t\t    && !STMT_VINFO_DATA_REF (stmt_info)\n-\t\t    && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n-\t\t    && def_stmt_info\n-\t\t    && !STMT_VINFO_DATA_REF (def_stmt_info)\n-\t\t    && (REDUC_GROUP_FIRST_ELEMENT (def_stmt_info)\n-\t\t\t== REDUC_GROUP_FIRST_ELEMENT (stmt_info))))\n-\t      || (!STMT_VINFO_DATA_REF (stmt_info)\n-\t\t  && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n-\t\t  && ((!def_stmt_info\n-\t\t       || STMT_VINFO_DATA_REF (def_stmt_info)\n-\t\t       || (REDUC_GROUP_FIRST_ELEMENT (def_stmt_info)\n-\t\t\t   != REDUC_GROUP_FIRST_ELEMENT (stmt_info)))\n-\t\t      != (oprnd_info->first_dt != vect_reduction_def))))\n+\t  if (is_a <bb_vec_info> (vinfo))\n \t    {\n-\t      /* Try swapping operands if we got a mismatch.  For BB\n-\t\t vectorization only in case it will clearly improve things.  */\n-\t      if (i == commutative_op && !swapped\n-\t\t  && (!is_a <bb_vec_info> (vinfo)\n-\t\t      || (!vect_def_types_match ((*oprnds_info)[i+1]->first_dt,\n-\t\t\t\t\t\t dts[i+1])\n-\t\t\t  && (vect_def_types_match (oprnd_info->first_dt,\n-\t\t\t\t\t\t    dts[i+1])\n-\t\t\t      || vect_def_types_match\n-\t\t\t\t   ((*oprnds_info)[i+1]->first_dt, dts[i])))))\n-\t\t{\n-\t\t  if (dump_enabled_p ())\n-\t\t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t\t     \"trying swapped operands\\n\");\n-\t\t  std::swap (dts[i], dts[i+1]);\n-\t\t  std::swap ((*oprnds_info)[i]->def_stmts[stmt_num],\n-\t\t\t     (*oprnds_info)[i+1]->def_stmts[stmt_num]);\n-\t\t  std::swap ((*oprnds_info)[i]->ops[stmt_num],\n-\t\t\t     (*oprnds_info)[i+1]->ops[stmt_num]);\n-\t\t  swapped = true;\n-\t\t  continue;\n-\t\t}\n-\n-\t      if (is_a <bb_vec_info> (vinfo))\n-\t\t{\n-\t\t  /* Now for commutative ops we should see whether we can\n-\t\t     make the other operand matching.  */\n-\t\t  if (dump_enabled_p ())\n-\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t     \"treating operand as external\\n\");\n-\t\t  oprnd_info->first_dt = dt = vect_external_def;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (dump_enabled_p ())\n-\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t     \"Build SLP failed: different types\\n\");\n-\t\t  return 1;\n-\t\t}\n+\t      /* Now for commutative ops we should see whether we can\n+\t\t make the other operand matching.  */\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"treating operand as external\\n\");\n+\t      oprnd_info->first_dt = dt = vect_external_def;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"Build SLP failed: different types\\n\");\n+\t      return 1;\n \t    }\n+\t}\n \n       /* Make sure to demote the overall operand to external.  */\n       if (dt == vect_external_def)"}]}