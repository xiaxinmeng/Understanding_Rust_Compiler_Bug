{"sha": "886c8de1939d8028f3568d7f586468d6f796153c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2YzhkZTE5MzlkODAyOGYzNTY4ZDdmNTg2NDY4ZDZmNzk2MTUzYw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2007-03-19T08:13:30Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-03-19T08:13:30Z"}, "message": "re PR fortran/31203 ([4.1/4.2 only] Character length should never be negative)\n\n\tPR fortran/31203\n\n\t* trans-expr.c (gfc_trans_init_string_length): Length should\n\tnever be negative.\n\t(gfc_conv_function_call): Likewise.\n\n\t* gfortran.dg/string_length_1.f90: New test.\n\nFrom-SVN: r123051", "tree": {"sha": "203824e06002e0907a7765058ac5465595c78f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/203824e06002e0907a7765058ac5465595c78f58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886c8de1939d8028f3568d7f586468d6f796153c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886c8de1939d8028f3568d7f586468d6f796153c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886c8de1939d8028f3568d7f586468d6f796153c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886c8de1939d8028f3568d7f586468d6f796153c/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd975604c284f72025d34d35e97fa157b1bd451b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd975604c284f72025d34d35e97fa157b1bd451b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd975604c284f72025d34d35e97fa157b1bd451b"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "3f4ab3c9fa4712a5bdb275d9bf2e255b11015a2d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=886c8de1939d8028f3568d7f586468d6f796153c", "patch": "@@ -1,3 +1,10 @@\n+2007-03-19  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/31203\n+\t* trans-expr.c (gfc_trans_init_string_length): Length should\n+\tnever be negative.\n+\t(gfc_conv_function_call): Likewise.\n+\n 2007-03-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30531"}, {"sha": "a6920db500e4fb8095d7ad10a528fde60d8f7d60", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=886c8de1939d8028f3568d7f586468d6f796153c", "patch": "@@ -227,6 +227,8 @@ gfc_trans_init_string_length (gfc_charlen * cl, stmtblock_t * pblock)\n \n   gfc_init_se (&se, NULL);\n   gfc_conv_expr_type (&se, cl->length, gfc_charlen_type_node);\n+  se.expr = fold_build2 (MAX_EXPR, gfc_charlen_type_node, se.expr,\n+\t\t\t build_int_cst (gfc_charlen_type_node, 0));\n   gfc_add_block_to_block (pblock, &se.pre);\n \n   tmp = cl->backend_decl;\n@@ -2256,6 +2258,8 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n         }\n         else\n         {\n+\t  tree tmp;\n+\n \t  /* Calculate the length of the returned string.  */\n \t  gfc_init_se (&parmse, NULL);\n \t  if (need_interface_mapping)\n@@ -2264,7 +2268,11 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t    gfc_conv_expr (&parmse, sym->ts.cl->length);\n \t  gfc_add_block_to_block (&se->pre, &parmse.pre);\n \t  gfc_add_block_to_block (&se->post, &parmse.post);\n-\t  cl.backend_decl = fold_convert (gfc_charlen_type_node, parmse.expr);\n+\t  \n+\t  tmp = fold_convert (gfc_charlen_type_node, parmse.expr);\n+\t  tmp = fold_build2 (MAX_EXPR, gfc_charlen_type_node, tmp,\n+\t\t\t     build_int_cst (gfc_charlen_type_node, 0));\n+\t  cl.backend_decl = tmp;\n \t}\n \n       /* Set up a charlen structure for it.  */"}, {"sha": "d58871fbd6bca0c84015c79b9302dd11d35492b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=886c8de1939d8028f3568d7f586468d6f796153c", "patch": "@@ -1,3 +1,8 @@\n+2007-03-19  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/31203\n+\t* gfortran.dg/string_length_1.f90: New test.\n+\n 2007-03-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR testsuite/30395"}, {"sha": "50883f0106ce3d3a11e0a99320aef7eaaabbfd7b", "filename": "gcc/testsuite/gfortran.dg/string_length_1.f90", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_length_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c8de1939d8028f3568d7f586468d6f796153c/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_length_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_length_1.f90?ref=886c8de1939d8028f3568d7f586468d6f796153c", "patch": "@@ -0,0 +1,74 @@\n+! { dg-do run }\n+! Testcase for PR 31203\n+! We used to create strings with negative length\n+subroutine foo(i)\n+  integer :: i\n+  character(len=i) :: s(2)\n+  if (len(s) < 0) call abort\n+  if (len(s) /= max(i,0)) call abort\n+end\n+\n+function gee(i)\n+  integer, intent(in) :: i\n+  character(len=i) :: gee\n+\n+  gee = \"\"\n+end function gee\n+\n+subroutine s1(i,j)\n+  character(len=i-j) :: a\n+  if (len(a) < 0) call abort()\n+end subroutine\n+\n+program test\n+  interface\n+    function gee(i)\n+      integer, intent(in) :: i\n+      character(len=i) :: gee\n+    end function gee\n+  end interface\n+\n+  call foo(2)\n+  call foo(-1)\n+  call s1(1,2)\n+  call s1(-1,-8)\n+  call s1(-8,-1)\n+\n+  if (len(gee(2)) /= 2) call abort\n+  if (len(gee(-5)) /= 0) call abort\n+  if (len(gee(intfunc(3))) /= max(intfunc(3),0)) call abort\n+  if (len(gee(intfunc(2))) /= max(intfunc(2),0)) call abort\n+\n+  if (len(bar(2)) /= 2) call abort\n+  if (len(bar(-5)) /= 0) call abort\n+  if (len(bar(intfunc(3))) /= max(intfunc(3),0)) call abort\n+  if (len(bar(intfunc(2))) /= max(intfunc(2),0)) call abort\n+\n+  if (cow(bar(2)) /= 2) call abort\n+  if (cow(bar(-5)) /= 0) call abort\n+  if (cow(bar(intfunc(3))) /= max(intfunc(3),0)) call abort\n+  if (cow(bar(intfunc(2))) /= max(intfunc(2),0)) call abort\n+\n+contains\n+\n+  function bar(i)\n+    integer, intent(in) :: i\n+    character(len=i) :: bar\n+  \n+    bar = \"\"\n+  end function bar\n+\n+  function cow(c)\n+    character(len=*), intent(in) :: c\n+    integer :: cow\n+    cow = len(c)\n+  end function cow\n+\n+  pure function intfunc(i)\n+    integer, intent(in) :: i\n+    integer :: intfunc\n+\n+    intfunc = 2*i-5\n+  end function intfunc\n+\n+end program test"}]}