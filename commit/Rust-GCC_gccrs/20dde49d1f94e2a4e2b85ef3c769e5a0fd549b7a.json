{"sha": "20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkZGU0OWQxZjk0ZTJhNGUyYjg1ZWYzYzc2OWU1YTBmZDU0OWI3YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-07-31T08:56:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-07-31T08:56:09Z"}, "message": "re PR c++/3631 (another linking problem with virtual derivation)\n\ncp:\n\tPR c++/3631\n\t* class.c (update_vtable_entry_for_fn): The fixed adjustment\n\tof a virtual thunk should be from declaring base.\ntestsuite:\n\t* g++.dg/abi/vthunk1.C: New test.\n\nFrom-SVN: r44509", "tree": {"sha": "215ce6e1f9ac1c01540385407fd0b161c86eb523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/215ce6e1f9ac1c01540385407fd0b161c86eb523"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/comments", "author": null, "committer": null, "parents": [{"sha": "b7ad2f8bacf1036f5b01bebb45088567da987b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ad2f8bacf1036f5b01bebb45088567da987b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ad2f8bacf1036f5b01bebb45088567da987b4d"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "ed4039538b742ccfee72e89d77b7f447c90bfb2b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "patch": "@@ -1,3 +1,9 @@\n+2001-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/3631\n+\t* class.c (update_vtable_entry_for_fn): The fixed adjustment\n+\tof a virtual thunk should be from declaring base.\n+\n 2001-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (dfs_ctor_vtable_bases_queue_p): Always walk into"}, {"sha": "42c0371302119ec1773bfd4b24bdf145cc856b5a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "patch": "@@ -2563,10 +2563,10 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n      (or one of its primary bases, which are at the same offset).  */\n \n   if (virtual_base)\n-    /* The `this' pointer needs to be adjusted to the nearest virtual\n-       base.  */\n+    /* The `this' pointer needs to be adjusted from the declaration to\n+       the nearest virtual base.  */\n     delta = size_diffop (BINFO_OFFSET (virtual_base),\n-\t\t\t BINFO_OFFSET (binfo));\n+\t\t\t BINFO_OFFSET (first_defn));\n   else\n     {\n       /* The `this' pointer needs to be adjusted from pointing to\n@@ -2580,7 +2580,7 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n \t  /* We'll need a thunk.  But if we have a (perhaps formerly)\n \t     primary virtual base, we have a vcall slot for this function,\n \t     so we can use it rather than create a non-virtual thunk.  */\n-\n+\t  \n \t  b = get_primary_binfo (first_defn);\n \t  for (; b; b = get_primary_binfo (b))\n \t    {"}, {"sha": "67650f0f84e6f01abf6ff13cf3477955a249d6e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "patch": "@@ -1,3 +1,7 @@\n+2001-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/abi/vthunk1.C: New test.\n+\n 2001-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/abi/vbase8-22.C: New test."}, {"sha": "73a0b13f68c26c066df4dcc531a3b926880ecdc2", "filename": "gcc/testsuite/g++.dg/abi/vthunk1.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvthunk1.C?ref=20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do link }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 29 Jul 2001 <nathan@codesourcery.com>\n+\n+// Origin snyder@fnal.gov\n+// Bug 3631. We mis-calculated the non-virtual part of a virtual\n+// thunk. Leading to a link failure, in this case.\n+\n+struct A { virtual ~A () {} };\n+\n+struct B : virtual public A\n+{\n+  virtual void destroy() {}\n+};\n+\n+class C : virtual public B {};\n+class D : virtual public C {};\n+class E : public virtual A {};\n+\n+struct F : virtual public B, virtual public E\n+{\n+  virtual void destroy() = 0;\n+};\n+\n+struct G : public virtual F\n+{\n+  virtual void destroy() {}\n+};\n+\n+class H : virtual public C, virtual public F {};\n+class I : virtual public D, virtual public H {};\n+class J : public virtual G, public virtual H {};\n+\n+class K : public virtual I, public virtual J\n+{\n+  public:\n+  virtual ~K();\n+};\n+K::~K() {}\n+\n+int main ()\n+{\n+  return 0;\n+}"}]}