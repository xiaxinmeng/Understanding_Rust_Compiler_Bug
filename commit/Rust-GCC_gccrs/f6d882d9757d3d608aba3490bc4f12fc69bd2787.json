{"sha": "f6d882d9757d3d608aba3490bc4f12fc69bd2787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkODgyZDk3NTdkM2Q2MDhhYmEzNDkwYmM0ZjEyZmM2OWJkMjc4Nw==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-10-17T04:55:30Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-10-17T04:55:30Z"}, "message": "gc_pthread_redirects.h: Generalize test to use GC_PTHREADS.\n\n\t* include/gc_pthread_redirects.h: Generalize test to use GC_PTHREADS.\n\t* linux_threads.c (WRAP_FUNC(pthread_join)): Conditionalized on\n\tGC_FREEBSD_THREADS, handle strange interaction between system\n\tpthread implementation and boehm-gc signal-handler architecture.\n\t* tests/test.c (main): Conditionalized on GC_FREEBSD_THREADS,\n\tset stack.\n\t* include/private/gcconfig.h (configuration keyed off FREEBSD):\n\tDefine SIG_SUSPEND, SIG_THR_RESTART.  Do not define\n\tMPROTECT_VDB when GC_FREEBSD_THREADS is defined.\n\nFrom-SVN: r46307", "tree": {"sha": "352d5ed2d7dd52515d3eb3a77cba91882a2f5400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/352d5ed2d7dd52515d3eb3a77cba91882a2f5400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d882d9757d3d608aba3490bc4f12fc69bd2787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d882d9757d3d608aba3490bc4f12fc69bd2787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d882d9757d3d608aba3490bc4f12fc69bd2787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d882d9757d3d608aba3490bc4f12fc69bd2787/comments", "author": null, "committer": null, "parents": [{"sha": "808dbdd51bc9c5e8393f00610a464b2e7898639e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808dbdd51bc9c5e8393f00610a464b2e7898639e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808dbdd51bc9c5e8393f00610a464b2e7898639e"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "58c5f39071ec7615706c928874efe3100357dc5b", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=f6d882d9757d3d608aba3490bc4f12fc69bd2787", "patch": "@@ -1,3 +1,15 @@\n+2001-10-16  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* include/gc_pthread_redirects.h: Generalize test to use GC_PTHREADS.\n+\t* linux_threads.c (WRAP_FUNC(pthread_join)): Conditionalized on\n+\tGC_FREEBSD_THREADS, handle strange interaction between system\n+\tpthread implementation and boehm-gc signal-handler architecture.\n+\t* tests/test.c (main): Conditionalized on GC_FREEBSD_THREADS,\n+\tset stack.\n+\t* include/private/gcconfig.h (configuration keyed off FREEBSD):\n+\tDefine SIG_SUSPEND, SIG_THR_RESTART.  Do not define\n+\tMPROTECT_VDB when GC_FREEBSD_THREADS is defined.\n+\n 2001-10-16  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* Makefile.am (test.o): Find tests/test.c in $(srcdir)."}, {"sha": "47284fbc97a65673c5818e652b6fab81bad65f23", "filename": "boehm-gc/include/gc_pthread_redirects.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Finclude%2Fgc_pthread_redirects.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Finclude%2Fgc_pthread_redirects.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_pthread_redirects.h?ref=f6d882d9757d3d608aba3490bc4f12fc69bd2787", "patch": "@@ -44,9 +44,7 @@\n #endif /* SOLARIS_THREADS || SOLARIS_PTHREADS */\n \n \n-#if !defined(GC_USE_LD_WRAP) && \\\n-    (defined(GC_IRIX_THREADS) || defined(GC_LINUX_THREADS) \\\n-     || defined(GC_HPUX_THREADS) || defined(GC_OSF1_THREADS))\n+#if !defined(GC_USE_LD_WRAP) && defined(GC_PTHREADS) && !defined(GC_SOLARIS_PTHREADS)\n /* We treat these similarly. */\n # include <pthread.h>\n # include <signal.h>"}, {"sha": "4334dbd29e466a03b91a9f350c9feba9f2c84047", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=f6d882d9757d3d608aba3490bc4f12fc69bd2787", "patch": "@@ -1017,7 +1017,11 @@\n #   endif\n #   ifdef FREEBSD\n #\tdefine OS_TYPE \"FREEBSD\"\n-#\tdefine MPROTECT_VDB\n+#\tifndef GC_FREEBSD_THREADS\n+#\t    define MPROTECT_VDB\n+#\tendif\n+#\tdefine SIG_SUSPEND SIGUSR1\n+#\tdefine SIG_THR_RESTART SIGUSR2\n #\tdefine FREEBSD_STACKBOTTOM\n #\tifdef __ELF__\n #\t    define DYNAMIC_LOADING"}, {"sha": "ccd7dc65a743fa8919672cf3e9d54b9a50fd728e", "filename": "boehm-gc/linux_threads.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Flinux_threads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Flinux_threads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Flinux_threads.c?ref=f6d882d9757d3d608aba3490bc4f12fc69bd2787", "patch": "@@ -1272,6 +1272,17 @@ int WRAP_FUNC(pthread_join)(pthread_t thread, void **retval)\n     /* cant have been recycled by pthreads.\t\t\t\t*/\n     UNLOCK();\n     result = REAL_FUNC(pthread_join)(thread, retval);\n+# if defined (GC_FREEBSD_THREADS)\n+    /* On FreeBSD, the wrapped pthread_join() sometimes returns (what\n+       appears to be) a spurious EINTR which caused the test and real code\n+       to gratuitously fail.  Having looked at system pthread library source\n+       code, I see how this return code may be generated.  In one path of\n+       code, pthread_join() just returns the errno setting of the thread\n+       being joined.  This does not match the POSIX specification or the\n+       local man pages thus I have taken the liberty to catch this one\n+       spurious return value properly conditionalized on GC_FREEBSD_THREADS. */\n+    if (result == EINTR) result = 0;\n+# endif\n     if (result == 0) {\n         LOCK();\n         /* Here the pthread thread id may have been recycled. */"}, {"sha": "e8cc9763f44231db1d5238e922636d67958d5a7e", "filename": "boehm-gc/tests/test.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Ftests%2Ftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d882d9757d3d608aba3490bc4f12fc69bd2787/boehm-gc%2Ftests%2Ftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Ftests%2Ftest.c?ref=f6d882d9757d3d608aba3490bc4f12fc69bd2787", "patch": "@@ -1624,7 +1624,7 @@ main()\n \t}\n #   endif\t/* GC_HPUX_THREADS */\n     pthread_attr_init(&attr);\n-#   if defined(GC_IRIX_THREADS)\n+#   if defined(GC_IRIX_THREADS) || defined(GC_FREEBSD_THREADS)\n     \tpthread_attr_setstacksize(&attr, 1000000);\n #   endif\n     n_tests = 0;"}]}