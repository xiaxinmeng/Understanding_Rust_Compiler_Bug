{"sha": "436103a09831b2924d3262c13a17da530f90da92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2MTAzYTA5ODMxYjI5MjRkMzI2MmMxM2ExN2RhNTMwZjkwZGE5Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-10-11T19:18:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-11T19:18:13Z"}, "message": "typeck.c (cp_build_binary_op): Do not handle RROTATE_EXPR and LROTATE_EXPR.\n\n2019-10-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_build_binary_op): Do not handle RROTATE_EXPR and\n\tLROTATE_EXPR.\n\t* constexpr.c (cxx_eval_constant_expression): Likewise.\n\t(potential_constant_expression_1): Likewise.\n\t* cp-gimplify.c (cp_fold): Likewise.\n\t* pt.c (tsubst_copy): Likewise.\n\nFrom-SVN: r276903", "tree": {"sha": "3822df6c171320b873c424d26b71dfd5f44d7839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3822df6c171320b873c424d26b71dfd5f44d7839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/436103a09831b2924d3262c13a17da530f90da92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436103a09831b2924d3262c13a17da530f90da92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436103a09831b2924d3262c13a17da530f90da92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436103a09831b2924d3262c13a17da530f90da92/comments", "author": null, "committer": null, "parents": [{"sha": "e0365bd388bac7641e1767222b9ddc683dbf057a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0365bd388bac7641e1767222b9ddc683dbf057a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0365bd388bac7641e1767222b9ddc683dbf057a"}], "stats": {"total": 45, "additions": 8, "deletions": 37}, "files": [{"sha": "49fb50db2d28c153840eba36a3dc9f7d9dee3257", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=436103a09831b2924d3262c13a17da530f90da92", "patch": "@@ -1,3 +1,11 @@\n+2019-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_build_binary_op): Do not handle RROTATE_EXPR and\n+\tLROTATE_EXPR.\n+\t* constexpr.c (cxx_eval_constant_expression): Likewise.\n+\t(potential_constant_expression_1): Likewise.\n+\t* pt.c (tsubst_copy): Likewise.\n+\n 2019-10-11  Jason Merrill  <jason@redhat.com>\n \n \t* decl2.c (mark_used): Don't clobber DECL_SOURCE_LOCATION on"}, {"sha": "46d41ecb984cfc894879277b039d4e1a667c95b6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=436103a09831b2924d3262c13a17da530f90da92", "patch": "@@ -5115,8 +5115,6 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n     case MAX_EXPR:\n     case LSHIFT_EXPR:\n     case RSHIFT_EXPR:\n-    case LROTATE_EXPR:\n-    case RROTATE_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:\n@@ -7103,8 +7101,6 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case MAX_EXPR:\n     case LSHIFT_EXPR:\n     case RSHIFT_EXPR:\n-    case LROTATE_EXPR:\n-    case RROTATE_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:"}, {"sha": "7fecc03f6cc3aff1a7e582f06207693c73952006", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=436103a09831b2924d3262c13a17da530f90da92", "patch": "@@ -16308,8 +16308,6 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case TRUTH_OR_EXPR:\n     case RSHIFT_EXPR:\n     case LSHIFT_EXPR:\n-    case RROTATE_EXPR:\n-    case LROTATE_EXPR:\n     case EQ_EXPR:\n     case NE_EXPR:\n     case MAX_EXPR:\n@@ -18913,8 +18911,6 @@ tsubst_copy_and_build (tree t,\n     case TRUTH_OR_EXPR:\n     case RSHIFT_EXPR:\n     case LSHIFT_EXPR:\n-    case RROTATE_EXPR:\n-    case LROTATE_EXPR:\n     case EQ_EXPR:\n     case NE_EXPR:\n     case MAX_EXPR:"}, {"sha": "141d86f50c963bc5d467145e764f724261fdaeb2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436103a09831b2924d3262c13a17da530f90da92/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=436103a09831b2924d3262c13a17da530f90da92", "patch": "@@ -4899,35 +4899,6 @@ cp_build_binary_op (const op_location_t &location,\n \t}\n       break;\n \n-    case RROTATE_EXPR:\n-    case LROTATE_EXPR:\n-      if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n-\t{\n-\t  result_type = type0;\n-\t  if (TREE_CODE (op1) == INTEGER_CST)\n-\t    {\n-\t      if (tree_int_cst_lt (op1, integer_zero_node))\n-\t\t{\n-\t\t  if (complain & tf_warning)\n-\t\t    warning (0, (code == LROTATE_EXPR)\n-\t\t\t          ? G_(\"left rotate count is negative\")\n-   \t\t\t          : G_(\"right rotate count is negative\"));\n-\t\t}\n-\t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n-\t\t{\n-\t\t  if (complain & tf_warning)\n-\t\t    warning (0, (code == LROTATE_EXPR) \n-                                  ? G_(\"left rotate count >= width of type\")\n-                                  : G_(\"right rotate count >= width of type\"));\n-\t\t}\n-\t    }\n-\t  /* Convert the shift-count to an integer, regardless of\n-\t     size of value being shifted.  */\n-\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t    op1 = cp_convert (integer_type_node, op1, complain);\n-\t}\n-      break;\n-\n     case EQ_EXPR:\n     case NE_EXPR:\n       if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)"}]}