{"sha": "0107dca2adf82db79c54d6da9707035533d474d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwN2RjYTJhZGY4MmRiNzljNTRkNmRhOTcwNzAzNTUzM2Q0NzRkNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-06T11:27:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-06T11:27:29Z"}, "message": "re PR middle-end/57147 (setjmp call and if body wrongly elided (function runs off early end))\n\n2013-05-06  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57147\n\t* tree-cfg.c (gimple_purge_dead_abnormal_call_edges): If\n\tthe edge is also fallthru, preserve it and just clear the\n\tabnormal flag.\n\t* tree-cfgcleanup.c (remove_fallthru_edge): If the edge is\n\talso complex, preserve that and just clear the fallthru flag.\n\t* tree-inline.c (update_ssa_across_abnormal_edges): Also\n\tupdate virtual operands.\n\n\t* gcc.dg/torture/pr57147-1.c: New testcase.\n\t* gcc.dg/torture/pr57147-2.c: Likewise.\n\t* gcc.dg/torture/pr57147-3.c: Likewise.\n\nFrom-SVN: r198625", "tree": {"sha": "08393bb2ffe3daf1347d560e6951600839f91db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08393bb2ffe3daf1347d560e6951600839f91db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0107dca2adf82db79c54d6da9707035533d474d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0107dca2adf82db79c54d6da9707035533d474d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0107dca2adf82db79c54d6da9707035533d474d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0107dca2adf82db79c54d6da9707035533d474d6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5123d087ed24066c03c97c92a15d255c8d318dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5123d087ed24066c03c97c92a15d255c8d318dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5123d087ed24066c03c97c92a15d255c8d318dd"}], "stats": {"total": 99, "additions": 90, "deletions": 9}, "files": [{"sha": "ddcdb19fbf03d77c9f3df2ae82af2d5417fd41f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -1,3 +1,14 @@\n+2013-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57147\n+\t* tree-cfg.c (gimple_purge_dead_abnormal_call_edges): If\n+\tthe edge is also fallthru, preserve it and just clear the\n+\tabnormal flag.\n+\t* tree-cfgcleanup.c (remove_fallthru_edge): If the edge is\n+\talso complex, preserve that and just clear the fallthru flag.\n+\t* tree-inline.c (update_ssa_across_abnormal_edges): Also\n+\tupdate virtual operands.\n+\n 2013-05-06  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/linux.h (DEFAULT_ASM_ENDIAN): Define."}, {"sha": "b4e04799c9d4d27d8759a12729b66575fb4bbdb5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -1,3 +1,10 @@\n+2013-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57147\n+\t* gcc.dg/torture/pr57147-1.c: New testcase.\n+\t* gcc.dg/torture/pr57147-2.c: Likewise.\n+\t* gcc.dg/torture/pr57147-3.c: Likewise.\n+\n 2013-05-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/55303"}, {"sha": "e5ad5449989f52daba18c2832f6afc40dd9c2651", "filename": "gcc/testsuite/gcc.dg/torture/pr57147-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-1.c?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+struct __jmp_buf_tag {};\n+typedef struct __jmp_buf_tag jmp_buf[1];\n+extern int _setjmp (struct __jmp_buf_tag __env[1]);\n+\n+jmp_buf g_return_jmp_buf;\n+\n+void SetNaClSwitchExpectations (void)\n+{\n+}\n+void TestSyscall(void)\n+{\n+  SetNaClSwitchExpectations();\n+  _setjmp (g_return_jmp_buf);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"builtin_unreachable\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "521d126e3c70399dc9d8d1c7748e2b89d6b5a648", "filename": "gcc/testsuite/gcc.dg/torture/pr57147-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-2.c?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+struct __jmp_buf_tag {};\n+typedef struct __jmp_buf_tag jmp_buf[1];\n+extern int _setjmp (struct __jmp_buf_tag __env[1]);\n+\n+jmp_buf g_return_jmp_buf;\n+\n+void SetNaClSwitchExpectations (void)\n+{\n+  __builtin_longjmp (g_return_jmp_buf, 1);\n+}\n+void TestSyscall(void)\n+{\n+  SetNaClSwitchExpectations();\n+  _setjmp (g_return_jmp_buf);\n+}\n+\n+/* { dg-final { scan-tree-dump \"setjmp\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c64e5adb0309f0ac1bd5d782d27c15a88e64c537", "filename": "gcc/testsuite/gcc.dg/torture/pr57147-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57147-3.c?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+typedef char * ptr_t;\n+struct __jmp_buf_tag   {\n+};\n+typedef struct __jmp_buf_tag sigjmp_buf[1];\n+sigjmp_buf GC_jmp_buf;\n+void GC_fault_handler(int sig)\n+{\n+}\n+void GC_setup_temporary_fault_handler()     {\n+    GC_set_and_save_fault_handler(GC_fault_handler);\n+}\n+ptr_t GC_find_limit(ptr_t p)\n+{\n+  GC_setup_temporary_fault_handler();\n+  if (__sigsetjmp (GC_jmp_buf, 1) == 0)\n+    for (;;)\n+      ;\n+}"}, {"sha": "a08a737a0c0a95602ddfd1ccbaccb32334240bf8", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -7628,7 +7628,10 @@ gimple_purge_dead_abnormal_call_edges (basic_block bb)\n     {\n       if (e->flags & EDGE_ABNORMAL)\n \t{\n-\t  remove_edge_and_dominated_blocks (e);\n+\t  if (e->flags & EDGE_FALLTHRU)\n+\t    e->flags &= ~EDGE_ABNORMAL;\n+\t  else\n+\t    remove_edge_and_dominated_blocks (e);\n \t  changed = true;\n \t}\n       else"}, {"sha": "9b314f73ea62bbd006059d063e3d908a9499f4c3", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -57,7 +57,10 @@ remove_fallthru_edge (vec<edge, va_gc> *ev)\n   FOR_EACH_EDGE (e, ei, ev)\n     if ((e->flags & EDGE_FALLTHRU) != 0)\n       {\n-\tremove_edge_and_dominated_blocks (e);\n+\tif (e->flags & EDGE_COMPLEX)\n+\t  e->flags &= ~EDGE_FALLTHRU;\n+\telse\n+\t  remove_edge_and_dominated_blocks (e);\n \treturn true;\n       }\n   return false;"}, {"sha": "83b41b1ef2c48bb6bcbb6a551fa8722d98568fb0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0107dca2adf82db79c54d6da9707035533d474d6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0107dca2adf82db79c54d6da9707035533d474d6", "patch": "@@ -1841,14 +1841,8 @@ update_ssa_across_abnormal_edges (basic_block bb, basic_block ret_bb,\n \t    gcc_assert ((e->flags & EDGE_EH)\n \t\t\t|| SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (phi)));\n \n-\t    if (virtual_operand_p (PHI_RESULT (phi)))\n-\t      {\n-\t\tmark_virtual_operands_for_renaming (cfun);\n-\t\tcontinue;\n-\t      }\n-\n \t    re = find_edge (ret_bb, e->dest);\n-\t    gcc_assert (re);\n+\t    gcc_checking_assert (re);\n \t    gcc_assert ((re->flags & (EDGE_EH | EDGE_ABNORMAL))\n \t\t\t== (e->flags & (EDGE_EH | EDGE_ABNORMAL)));\n "}]}