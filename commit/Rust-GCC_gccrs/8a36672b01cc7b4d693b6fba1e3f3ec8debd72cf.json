{"sha": "8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEzNjY3MmIwMWNjN2I0ZDY5M2I2ZmJhMWUzZjNlYzhkZWJkNzJjZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-05T01:36:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-05T01:36:57Z"}, "message": "c-tree.texi, [...]: Correct end-of-sentence markup and markup of \"etc.\", \"e.g.\" and \"i.e.\".\n\n\t* doc/c-tree.texi, doc/cfg.texi, doc/contrib.texi, doc/cpp.texi,\n\tdoc/cppopts.texi, doc/extend.texi, doc/fragments.texi,\n\tdoc/frontends.texi, doc/gcov.texi, doc/hostconfig.texi,\n\tdoc/implement-c.texi, doc/install.texi, doc/invoke.texi,\n\tdoc/libgcc.texi, doc/md.texi, doc/passes.texi,\n\tdoc/portability.texi, doc/rtl.texi, doc/sourcebuild.texi,\n\tdoc/standards.texi, doc/tm.texi, doc/tree-ssa.texi,\n\tdoc/trouble.texi: Correct end-of-sentence markup and markup of\n\t\"etc.\", \"e.g.\" and \"i.e.\".  Use @code in various places where\n\tappropriate.\n\nFrom-SVN: r90101", "tree": {"sha": "a9c9ed7762521a6520eab46209e136ee537e932b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c9ed7762521a6520eab46209e136ee537e932b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0eb93a806a875b7e89f5a2f5217063c0daa0db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0eb93a806a875b7e89f5a2f5217063c0daa0db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0eb93a806a875b7e89f5a2f5217063c0daa0db8"}], "stats": {"total": 717, "additions": 365, "deletions": 352}, "files": [{"sha": "6c3aa16affdff85d413de007574d7715d69757dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -1,3 +1,16 @@\n+2004-11-05  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* doc/c-tree.texi, doc/cfg.texi, doc/contrib.texi, doc/cpp.texi,\n+\tdoc/cppopts.texi, doc/extend.texi, doc/fragments.texi,\n+\tdoc/frontends.texi, doc/gcov.texi, doc/hostconfig.texi,\n+\tdoc/implement-c.texi, doc/install.texi, doc/invoke.texi,\n+\tdoc/libgcc.texi, doc/md.texi, doc/passes.texi,\n+\tdoc/portability.texi, doc/rtl.texi, doc/sourcebuild.texi,\n+\tdoc/standards.texi, doc/tm.texi, doc/tree-ssa.texi,\n+\tdoc/trouble.texi: Correct end-of-sentence markup and markup of\n+\t\"etc.\", \"e.g.\" and \"i.e.\".  Use @code in various places where\n+\tappropriate.\n+\n 2004-11-05  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* doc/c-tree.texi, doc/cfg.texi, doc/extend.texi, doc/gty.texi,"}, {"sha": "514b98cc8c425894a299036a4380e49071b9293e", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -776,7 +776,7 @@ The following macros can be used on a tree node representing a class-type.\n \n @ftable @code\n @item LOCAL_CLASS_P\n-This predicate holds if the class is local class @emph{i.e.} declared\n+This predicate holds if the class is local class @emph{i.e.}@: declared\n inside a function body.\n \n @item TYPE_POLYMORPHIC_P\n@@ -2062,7 +2062,7 @@ These nodes represent integer division operations that return an integer\n result.  @code{TRUNC_DIV_EXPR} rounds towards zero, @code{FLOOR_DIV_EXPR}\n rounds towards negative infinity, @code{CEIL_DIV_EXPR} rounds towards\n positive infinity and @code{ROUND_DIV_EXPR} rounds to the closest integer.\n-Integer division in C and C++ is truncating, i.e@. @code{TRUNC_DIV_EXPR}.\n+Integer division in C and C++ is truncating, i.e.@: @code{TRUNC_DIV_EXPR}.\n \n The behavior of these operations on signed arithmetic overflow, when\n dividing the minimum signed integer by minus one, is controlled by the\n@@ -2076,9 +2076,9 @@ These nodes represent the integer remainder or modulus operation.\n The integer modulus of two operands @code{a} and @code{b} is\n defined as @code{a - (a/b)*b} where the division calculated using\n the corresponding division operator.  Hence for @code{TRUNC_MOD_EXPR}\n-this definition assumes division using truncation towards zero, i.e@.\n+this definition assumes division using truncation towards zero, i.e.@:\n @code{TRUNC_DIV_EXPR}.  Integer remainder in C and C++ uses truncating\n-division, i.e@. @code{TRUNC_MOD_EXPR}.\n+division, i.e.@: @code{TRUNC_MOD_EXPR}.\n \n @item EXACT_DIV_EXPR\n The @code{EXACT_DIV_EXPR} code is used to represent integer divisions where"}, {"sha": "1818109c002a47ac9c80dc90e1752b45a3421ad3", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -44,11 +44,11 @@ Two pointer members of the @code{basic_block} structure are the\n pointers @code{next_bb} and @code{prev_bb}.  These are used to keep\n doubly linked chain of basic blocks in the same order as the\n underlying instruction stream.  The chain of basic blocks is updated\n-transparently by the provided API for manipulating the CFG.  The macro\n+transparently by the provided API for manipulating the CFG@.  The macro\n @code{FOR_EACH_BB} can be used to visit all the basic blocks in\n lexicographical order.  Dominator traversals are also possible using\n @code{walk_dominator_tree}.  Given two basic blocks A and B, block A\n-dominates block B if A is @emph{always} executed before B.\n+dominates block B if A is @emph{always} executed before B@.\n \n @findex BASIC_BLOCK\n The @code{BASIC_BLOCK} array contains all basic blocks in an\n@@ -140,8 +140,8 @@ FOR_EACH_BB (bb)\n @cindex edge in the flow graph\n @findex edge\n Edges represent possible control flow transfers from the end of some\n-basic block A to the head of another basic block B.  We say that A is\n-a predecessor of B, and B is a successor of A.  Edges are represented\n+basic block A to the head of another basic block B@.  We say that A is\n+a predecessor of B, and B is a successor of A@.  Edges are represented\n in GCC with the @code{edge} data type.  Each @code{edge} acts as a\n link between two basic blocks: the @code{src} member of an edge\n points to the predecessor basic block of the @code{dest} basic block.\n@@ -173,7 +173,7 @@ may be freely redirected when the flow graph is not in SSA form.\n @findex EDGE_FALLTHRU, force_nonfallthru\n Fall-thru edges are present in case where the basic block may continue\n execution to the following one without branching.  These edges have\n-the @code{EDGE_FALLTHRU} flag set. Unlike other types of edges, these\n+the @code{EDGE_FALLTHRU} flag set.  Unlike other types of edges, these\n edges must come into the basic block immediately following in the\n instruction stream.  The function @code{force_nonfallthru} is\n available to insert an unconditional jump in the case that redirection\n@@ -193,7 +193,7 @@ edges have the @code{EDGE_ABNORMAL} and @code{EDGE_EH} flags set.\n @findex purge_dead_edges\n When updating the instruction stream it is easy to change possibly\n trapping instruction to non-trapping, by simply removing the exception\n-edge. The opposite conversion is difficult, but should not happen\n+edge.  The opposite conversion is difficult, but should not happen\n anyway.  The edges can be eliminated via @code{purge_dead_edges} call.\n \n @findex REG_EH_REGION, EDGE_ABNORMAL_CALL\n@@ -366,7 +366,7 @@ range from 0 to @code{REG_BR_PROB_BASE}.  It represents probability of\n passing control from the end of the @code{src} basic block to the\n @code{dest} basic block, i.e.@: the probability that control will flow\n along this edge.   The @code{EDGE_FREQUENCY} macro is available to\n-compute how frequently a given edge is taken. There is a @code{count}\n+compute how frequently a given edge is taken.  There is a @code{count}\n field for each edge as well, representing same information as for a\n basic block.\n \n@@ -384,15 +384,15 @@ of basic blocks.\n \n @findex redirect_edge_and_branch\n Updating profile information is a delicate task that can unfortunately\n-not be easily integrated with the CFG manipulation API.  Many of the\n+not be easily integrated with the CFG manipulation API@.  Many of the\n functions and hooks to modify the CFG, such as\n @code{redirect_edge_and_branch}, do not have enough information to\n easily update the profile, so updating it is in the majority of cases\n left up to the caller.  It is difficult to uncover bugs in the profile\n updating code, because they manifest themselves only by producing\n worse code, and checking profile consistency is not possible because\n of numeric error accumulation.  Hence special attention needs to be\n-given to this issue in each pass that modifies the CFG.\n+given to this issue in each pass that modifies the CFG@.\n \n @findex REG_BR_PROB_BASE, BB_FREQ_BASE, count\n It is important to point out that @code{REG_BR_PROB_BASE} and\n@@ -527,7 +527,7 @@ this is best modeled as redirection of edges in the control flow graph\n and thus use of @code{redirect_edge_and_branch} is preferred over more\n low level functions, such as @code{redirect_jump} that operate on RTL\n chain only.  The CFG hooks defined in @file{cfghooks.h} should provide\n-the complete API required for manipulating and maintaining the CFG.\n+the complete API required for manipulating and maintaining the CFG@.\n \n @findex find_sub_basic_blocks, split_block\n It is also possible that a pass has to insert control flow instruction\n@@ -561,7 +561,7 @@ function may be useful to find bugs in the control flow graph updating\n code.\n \n Note that at present, the representation of control flow in the\n-@code{tree} representation is discarded before expanding to RTL.\n+@code{tree} representation is discarded before expanding to RTL@.\n Long term the CFG should be maintained and ``expanded'' to the\n RTL representation along with the function @code{tree} itself.\n "}, {"sha": "fd7e48720a44c3885a45f0b63322315f56490e85", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -94,7 +94,7 @@ Per Bothner for his direction via the steering committee and various\n improvements to the infrastructure for supporting new languages.  Chill\n front end implementation.  Initial implementations of\n cpplib, fix-header, config.guess, libio, and past C++ library (libg++)\n-maintainer.  Dreaming up, designing and implementing much of GCJ.\n+maintainer.  Dreaming up, designing and implementing much of GCJ@.\n \n @item\n Devon Bowen helped port GCC to the Tahoe.\n@@ -118,7 +118,7 @@ Christian Bruel for improvements to local store elimination.\n Herman A.J. ten Brugge for various fixes.\n \n @item\n-Joerg Brunsmann for Java compiler hacking and help with the GCJ FAQ.\n+Joerg Brunsmann for Java compiler hacking and help with the GCJ FAQ@.\n \n @item\n Joe Buck for his direction via the steering committee.\n@@ -146,7 +146,7 @@ Steve Chamberlain for support for the Renesas SH and H8 processors\n and the PicoJava processor, and for GCJ config fixes.\n \n @item\n-Glenn Chambers for help with the GCJ FAQ.\n+Glenn Chambers for help with the GCJ FAQ@.\n \n @item\n John-Marc Chandonia for various libgcj patches.\n@@ -236,7 +236,7 @@ Richard Earnshaw for his ongoing work with the ARM@.\n David Edelsohn for his direction via the steering committee, ongoing work\n with the RS6000/PowerPC port, help cleaning up Haifa loop changes,\n doing the entire AIX port of libstdc++ with his bare hands, and for\n-ensuring GCC properly keeps working on AIX.\n+ensuring GCC properly keeps working on AIX@.\n \n @item\n Kevin Ediger for the floating point formatting of num_put::do_put in\n@@ -279,7 +279,7 @@ feeding the gcc.gnu.org box and saving its users tons of spam.\n Fred Fish for BeOS support and Ada fixes.\n \n @item\n-Ivan Fontes Garcia for the Portugese translation of the GCJ FAQ.\n+Ivan Fontes Garcia for the Portugese translation of the GCJ FAQ@.\n \n @item\n Peter Gerwinski for various bug fixes and the Pascal front end.\n@@ -490,7 +490,7 @@ Warren Levy for tremendous work on libgcj (Java Runtime Library) and\n random work on the Java front end.\n \n @item\n-Alain Lichnewsky ported GCC to the MIPS CPU.\n+Alain Lichnewsky ported GCC to the MIPS CPU@.\n \n @item\n Oskar Liljeblad for hacking on AWT and his many Java bug reports and\n@@ -544,7 +544,7 @@ for Java test code.\n Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.\n \n @item\n-Adam Megacz for his work on the Microsoft Windows port of GCJ.\n+Adam Megacz for his work on the Microsoft Windows port of GCJ@.\n \n @item\n Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,\n@@ -685,14 +685,14 @@ Ovidiu Predescu for his work on the Objective-C front end and runtime\n libraries.\n \n @item\n-Jerry Quinn for major performance improvements in C++ formatted I/O.\n+Jerry Quinn for major performance improvements in C++ formatted I/O@.\n \n @item\n Ken Raeburn for various improvements to checker, MIPS ports and various\n cleanups in the compiler.\n \n @item\n-Rolf W. Rasmussen for hacking on AWT.\n+Rolf W. Rasmussen for hacking on AWT@.\n \n @item\n David Reese of Sun Microsystems contributed to the Solaris on PowerPC\n@@ -750,7 +750,7 @@ Roger Sayle for improvements to constant folding and GCC's RTL optimizers\n as well as for fixing numerous bugs.\n \n @item\n-Bradley Schatz for his work on the GCJ FAQ.\n+Bradley Schatz for his work on the GCJ FAQ@.\n \n @item\n Peter Schauer wrote the code to allow debugging to work on the Alpha.\n@@ -794,7 +794,7 @@ folding and help with the original VAX & m68k ports.\n \n @item\n Kenny Simpson for prompting libstdc++ fixes due to defect reports from\n-the LWG (thereby keeping GCC in line with updates from the ISO).\n+the LWG (thereby keeping GCC in line with updates from the ISO)@.\n \n @item\n Franz Sirl for his ongoing work with making the PPC port stable\n@@ -855,7 +855,7 @@ Ian Lance Taylor for his mips16 work, general configury hacking,\n fixincludes, etc.\n \n @item\n-Holger Teutsch provided the support for the Clipper CPU.\n+Holger Teutsch provided the support for the Clipper CPU@.\n \n @item\n Gary Thomas for his ongoing work to make the PPC work for GNU/Linux.\n@@ -864,7 +864,7 @@ Gary Thomas for his ongoing work to make the PPC work for GNU/Linux.\n Philipp Thomas for random bug fixes throughout the compiler\n \n @item\n-Jason Thorpe for thread support in libstdc++ on NetBSD.\n+Jason Thorpe for thread support in libstdc++ on NetBSD@.\n \n @item\n Kresten Krab Thorup wrote the run time support for the Objective-C\n@@ -938,7 +938,7 @@ Ulrich Weigand for work on the s390 port.\n Zack Weinberg for major work on cpplib and various other bug fixes.\n \n @item\n-Matt Welsh for help with Linux Threads support in GCJ.\n+Matt Welsh for help with Linux Threads support in GCJ@.\n \n @item\n Urban Widmark for help fixing java.io."}, {"sha": "66f92818e8deb8b440416915063419a50135ee16", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -230,7 +230,7 @@ differences that do exist are detailed in the section @ref{Traditional\n Mode}.\n \n For clarity, unless noted otherwise, references to @samp{CPP} in this\n-manual refer to GNU CPP.\n+manual refer to GNU CPP@.\n @c man end\n \n @menu\n@@ -596,7 +596,7 @@ Punctuator:      @{   @}   [   ]   #    ##\n @end smallexample\n \n @cindex other tokens\n-Any other single character is considered ``other''. It is passed on to\n+Any other single character is considered ``other''.  It is passed on to\n the preprocessor's output unmolested.  The C compiler will almost\n certainly reject source code containing ``other'' tokens.  In ASCII, the\n only other characters are @samp{@@}, @samp{$}, @samp{`}, and control\n@@ -2091,7 +2091,7 @@ handling.\n \n @item __NEXT_RUNTIME__\n This macro is defined, with value 1, if (and only if) the NeXT runtime\n-(as in @option{-fnext-runtime}) is in use for Objective-C.  If the GNU\n+(as in @option{-fnext-runtime}) is in use for Objective-C@.  If the GNU\n runtime is used, this macro is not defined, so that you can use this\n macro to determine which runtime (NeXT or GNU) is being used.\n \n@@ -3559,7 +3559,7 @@ replacement text before storing it, but preserves the form of internal\n whitespace.\n \n One consequence is that it is legitimate for the replacement text to\n-contain an unmatched quote (@pxref{Traditional lexical analysis}). An\n+contain an unmatched quote (@pxref{Traditional lexical analysis}).  An\n unclosed string or character constant continues into the text\n following the macro call.  Similarly, the text at the end of a macro's\n expansion can run together with the text after the macro invocation to\n@@ -3802,7 +3802,7 @@ target character, and then or-ing in the bit-pattern of the new\n character truncated to the width of a target character.  The final\n bit-pattern is given type @code{int}, and is therefore signed,\n regardless of whether single characters are signed or not (a slight\n-change from versions 3.1 and earlier of GCC).  If there are more\n+change from versions 3.1 and earlier of GCC)@.  If there are more\n characters in the constant than would fit in the target @code{int} the\n compiler issues a warning, and the excess leading characters are\n ignored."}, {"sha": "edd446a9fddcd7dc7aa7bf93ec78c58d9c9de29f", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -333,10 +333,10 @@ Headers}) together with @option{-E}.  It inserts a special @code{#pragma},\n @code{#pragma GCC pch_preprocess \"<filename>\"} in the output to mark\n the place where the precompiled header was found, and its filename.  When\n @option{-fpreprocessed} is in use, GCC recognizes this @code{#pragma} and\n-loads the PCH.\n+loads the PCH@.\n \n This option is off by default, because the resulting preprocessed output\n-is only really suitable as input to GCC.  It is switched on by\n+is only really suitable as input to GCC@.  It is switched on by\n @option{-save-temps}.\n \n You should not write this @code{#pragma} in your own code, but it is\n@@ -546,11 +546,11 @@ problems with encodings that do not fit exactly in @code{wchar_t}.\n @item -finput-charset=@var{charset}\n @opindex finput-charset\n Set the input character set, used for translation from the character\n-set of the input file to the source character set used by GCC. If the\n+set of the input file to the source character set used by GCC@.  If the\n locale does not specify, or GCC cannot get this information from the\n-locale, the default is UTF-8. This can be overridden by either the locale\n-or this command line option. Currently the command line option takes\n-precedence if there's a conflict. @var{charset} can be any encoding\n+locale, the default is UTF-8.  This can be overridden by either the locale\n+or this command line option.  Currently the command line option takes\n+precedence if there's a conflict.  @var{charset} can be any encoding\n supported by the system's @code{iconv} library routine.\n \n @item -fworking-directory"}, {"sha": "ef725b1aebe306c81a5dcf12b59b3976aadcc6ee", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -142,7 +142,7 @@ must use @code{typeof} (@pxref{Typeof}).\n \n In G++, the result value of a statement expression undergoes array and\n function pointer decay, and is returned by value to the enclosing\n-expression. For instance, if @code{A} is a class, then\n+expression.  For instance, if @code{A} is a class, then\n \n @smallexample\n         A a;\n@@ -193,7 +193,7 @@ bug.)\n @cindex macros, local labels\n \n GCC allows you to declare @dfn{local labels} in any nested block\n-scope. A local label is just like an ordinary label, but you can\n+scope.  A local label is just like an ordinary label, but you can\n only reference it (with a @code{goto} statement, or by taking its\n address) within the block in which it was declared.\n \n@@ -1514,7 +1514,7 @@ you may use @code{__noreturn__} instead of @code{noreturn}.\n attributes.\n \n @table @code\n-@c Keep this table alphabetized by attribute name. Treat _ as space.\n+@c Keep this table alphabetized by attribute name.  Treat _ as space.\n \n @item alias (\"@var{target}\")\n @cindex @code{alias} attribute\n@@ -1631,8 +1631,8 @@ Currently, the @code{dllexport} attribute is ignored for inlined\n functions, unless the @option{-fkeep-inline-functions} flag has been\n used.  The attribute is also ignored for undefined symbols.\n \n-When applied to C++ classes. the attribute marks defined non-inlined\n-member functions and static data members as exports. Static consts\n+When applied to C++ classes, the attribute marks defined non-inlined\n+member functions and static data members as exports.  Static consts\n initialized in-class are not marked unless they are also defined\n out-of-class.\n \n@@ -1646,15 +1646,15 @@ the @option{--export-all} linker flag.\n On Microsoft Windows and Symbian OS targets, the @code{dllimport}\n attribute causes the compiler to reference a function or variable via\n a global pointer to a pointer that is set up by the DLL exporting the\n-symbol. The attribute implies @code{extern} storage.  On Microsoft\n+symbol.  The attribute implies @code{extern} storage.  On Microsoft\n Windows targets, the pointer name is formed by combining @code{_imp__}\n and the function or variable name.\n \n You can use @code{__declspec(dllimport)} as a synonym for\n @code{__attribute__ ((dllimport))} for compatibility with other\n compilers.\n \n-Currently, the attribute is ignored for inlined functions. If the\n+Currently, the attribute is ignored for inlined functions.  If the\n attribute is applied to a symbol @emph{definition}, an error is reported.\n If a symbol previously declared @code{dllimport} is later defined, the\n attribute is ignored in subsequent references, and a warning is emitted.\n@@ -1676,12 +1676,12 @@ the current translation unit.\n \n For Microsoft Windows based targets the use of the @code{dllimport}\n attribute on functions is not necessary, but provides a small\n-performance benefit by eliminating a thunk in the DLL. The use of the\n+performance benefit by eliminating a thunk in the DLL@.  The use of the\n @code{dllimport} attribute on imported variables was required on older\n versions of the GNU linker, but can now be avoided by passing the\n-@option{--enable-auto-import} switch to the GNU linker. As with\n+@option{--enable-auto-import} switch to the GNU linker.  As with\n functions, using the attribute for a variable eliminates a thunk in\n-the DLL.\n+the DLL@.\n \n One drawback to using this attribute is that a pointer to a function\n or variable marked as @code{dllimport} cannot be used as a constant\n@@ -1711,17 +1711,17 @@ to call and return from a function.\n \n On 68HC11 the compiler will generate a sequence of instructions\n to invoke a board-specific routine to switch the memory bank and call the\n-real function. The board-specific routine simulates a @code{call}.\n+real function.  The board-specific routine simulates a @code{call}.\n At the end of a function, it will jump to a board-specific routine\n-instead of using @code{rts}. The board-specific return routine simulates\n+instead of using @code{rts}.  The board-specific return routine simulates\n the @code{rtc}.\n \n @item fastcall\n @cindex functions that pop the argument stack on the 386\n On the Intel 386, the @code{fastcall} attribute causes the compiler to\n-pass the first two arguments in the registers ECX and EDX. Subsequent\n-arguments are passed on the stack. The called function will pop the\n-arguments off the stack. If the number of arguments is variable all\n+pass the first two arguments in the registers ECX and EDX@.  Subsequent\n+arguments are passed on the stack.  The called function will pop the\n+arguments off the stack.  If the number of arguments is variable all\n arguments are pushed on the stack.\n \n @item format (@var{archetype}, @var{string-index}, @var{first-to-check})\n@@ -2214,7 +2214,7 @@ See the ELF gABI for complete details, but the short story is:\n @c keep this list of visibilities in alphabetical order.\n \n @item default\n-Default visibility is the normal case for ELF.  This value is\n+Default visibility is the normal case for ELF@.  This value is\n available for the visibility attribute to override other options\n that may change the assumed visibility of symbols.\n \n@@ -2374,10 +2374,10 @@ feature is intended for code generated by programs which contains labels\n that may be unused but which is compiled with @option{-Wall}.  It would\n not normally be appropriate to use in it human-written code, though it\n could be useful in cases where the code that jumps to the label is\n-contained within an @code{#ifdef} conditional. GNU C++ does not permit\n+contained within an @code{#ifdef} conditional.  GNU C++ does not permit\n such placement of attribute lists, as it is permissible for a\n declaration, which could begin with an attribute list, to be labelled in\n-C++. Declarations cannot be labelled in C90 or C99, so the ambiguity\n+C++.  Declarations cannot be labelled in C90 or C99, so the ambiguity\n does not arise there.\n \n An attribute specifier list may appear as part of a @code{struct},\n@@ -2976,7 +2976,7 @@ The @code{dllexport} attribute is described in @xref{Function Attributes}.\n \n @subsection M32R/D Variable Attributes\n \n-One attribute is currently defined for the M32R/D.\n+One attribute is currently defined for the M32R/D@.\n \n @table @code\n @item model (@var{model-name})\n@@ -3147,7 +3147,7 @@ alignment.  See your linker documentation for further information.\n @item packed\n This attribute, attached to @code{struct} or @code{union} type\n definition, specifies that each member of the structure or union is\n-placed to minimize the memory required. When attached to an @code{enum}\n+placed to minimize the memory required.  When attached to an @code{enum}\n definition, it indicates that the smallest integral type should be used.\n \n @opindex fshort-enums\n@@ -3312,7 +3312,7 @@ above in recent GCC versions.\n On those ARM targets that support @code{dllimport} (such as Symbian\n OS), you can use the @code{notshared} attribute to indicate that the\n virtual table and other similar data for a class should not be\n-exported from a DLL.  For example:\n+exported from a DLL@.  For example:\n \n @smallexample\n class __declspec(notshared) C @{\n@@ -3502,7 +3502,7 @@ template from the first output operand and another separates the last\n output operand from the first input, if any.  Commas separate the\n operands within each group.  The total number of operands is currently\n limited to 30; this limitation may be lifted in some future version of\n-GCC.\n+GCC@.\n \n If there are no output operands but there are input operands, you must\n place two consecutive colons surrounding the place where the output\n@@ -4344,7 +4344,7 @@ This function returns the return address of the current function, or of\n one of its callers.  The @var{level} argument is number of frames to\n scan up the call stack.  A value of @code{0} yields the return address\n of the current function, a value of @code{1} yields the return address\n-of the caller of the current function, and so forth. When inlining\n+of the caller of the current function, and so forth.  When inlining\n the expected behavior is that the function will return the address of\n the function that will be returned to.  To work around this behavior use\n the @code{noinline} function attribute.\n@@ -4354,7 +4354,7 @@ The @var{level} argument must be a constant integer.\n On some machines it may be impossible to determine the return address of\n any function other than the current one; in such cases, or when the top\n of the stack has been reached, this function will return @code{0} or a\n-random value. In addition, @code{__builtin_frame_address} may be used\n+random value.  In addition, @code{__builtin_frame_address} may be used\n to determine if the top of the stack has been reached.\n \n This function should only be used with a nonzero argument for debugging\n@@ -4882,7 +4882,7 @@ The remaining functions are provided for optimization purposes.\n GCC includes built-in versions of many of the functions in the standard\n C library.  The versions prefixed with @code{__builtin_} will always be\n treated as having the same meaning as the C library function even if you\n-specify the @option{-fno-builtin} option. (@pxref{C Dialect Options})\n+specify the @option{-fno-builtin} option.  (@pxref{C Dialect Options})\n Many of these functions are only optimized in certain cases; if they are\n not optimized in a particular case, a call to the library function will\n be emitted.\n@@ -5053,7 +5053,7 @@ depending on the arguments' types.  For example:\n   @})\n @end smallexample\n \n-@emph{Note:} This construct is only available for C.\n+@emph{Note:} This construct is only available for C@.\n \n @end deftypefn\n \n@@ -5093,7 +5093,7 @@ Example:\n       (void)0))\n @end smallexample\n \n-@emph{Note:} This construct is only available for C.  Furthermore, the\n+@emph{Note:} This construct is only available for C@.  Furthermore, the\n unused expression (@var{exp1} or @var{exp2} depending on the value of\n @var{const_exp}) may still generate syntax errors.  This may change in\n future revisions.\n@@ -5266,7 +5266,7 @@ leading @samp{0} or @samp{0x} prefixes.  The number parsed is placed\n in the significand such that the least significant bit of the number\n is at the least significant bit of the significand.  The number is\n truncated to fit the significand field provided.  The significand is\n-forced to be a quiet NaN.\n+forced to be a quiet NaN@.\n \n This function, if given a string literal, is evaluated early enough\n that it is considered a compile-time constant.\n@@ -5282,7 +5282,7 @@ Similar to @code{__builtin_nan}, except the return type is @code{long double}.\n \n @deftypefn {Built-in Function} double __builtin_nans (const char *str)\n Similar to @code{__builtin_nan}, except the significand is forced\n-to be a signaling NaN.  The @code{nans} function is proposed by\n+to be a signaling NaN@.  The @code{nans} function is proposed by\n @uref{http://www.open-std.org/jtc1/sc22/wg14/www/docs/n965.htm,,WG14 N965}.\n @end deftypefn\n \n@@ -5314,7 +5314,7 @@ Returns the number of 1-bits in @var{x}.\n @end deftypefn\n \n @deftypefn {Built-in Function} int __builtin_parity (unsigned int x)\n-Returns the parity of @var{x}, i.@:e. the number of 1-bits in @var{x}\n+Returns the parity of @var{x}, i.e.@: the number of 1-bits in @var{x}\n modulo 2.\n @end deftypefn\n \n@@ -8648,7 +8648,7 @@ declarations to have @var{string} prepended to their assembly symbols.\n This effect may be terminated with another @code{extern_prefix} pragma\n whose argument is an empty string.  The preprocessor macro\n @code{__PRAGMA_EXTERN_PREFIX} will be defined if this pragma is\n-available (currently only on Tru64 UNIX).\n+available (currently only on Tru64 UNIX)@.\n @end table\n \n These pragmas and the asm labels extension interact in a complicated"}, {"sha": "597c85ef4073ddf36880051a0ed4c84272943dee", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -186,7 +186,7 @@ Variables provided for host fragments to set include:\n @itemx X_CPPFLAGS\n These are extra flags to pass to the C compiler and preprocessor,\n respectively.  They are used both when building GCC, and when compiling\n-things with the just-built GCC.\n+things with the just-built GCC@.\n \n @item XCFLAGS\n These are extra flags to use when building the compiler.  They are not"}, {"sha": "68d3ba0b5a92415c5f313e163877160eb3078682", "filename": "gcc/doc/frontends.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ffrontends.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ffrontends.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffrontends.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -39,7 +39,7 @@ The part of a compiler that is specific to a particular language is\n called the ``front end''.  In addition to the front ends that are\n integrated components of GCC, there are several other front ends that\n are maintained separately.  These support languages such as Pascal,\n-Mercury, and COBOL.  To use these, they must be built together with\n+Mercury, and COBOL@.  To use these, they must be built together with\n GCC proper.\n \n @cindex C++"}, {"sha": "351c65d7ca1c22a6c662d80a83c621dbc312091c", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -149,16 +149,16 @@ and exit without doing any further processing.\n \n @item -a\n @itemx --all-blocks\n-Write individual execution counts for every basic block. Normally gcov\n-outputs execution counts only for the main blocks of a line. With this\n+Write individual execution counts for every basic block.  Normally gcov\n+outputs execution counts only for the main blocks of a line.  With this\n option you can determine if blocks within a single line are not being\n executed.\n \n @item -b\n @itemx --branch-probabilities\n Write branch frequencies to the output file, and write branch summary\n info to the standard output.  This option allows you to see how often\n-each branch in your program was taken. Unconditional branches will not\n+each branch in your program was taken.  Unconditional branches will not\n be shown, unless the @option{-u} option is given.\n \n @item -c\n@@ -177,18 +177,18 @@ header file @file{x.h} contains code, and was included in the file\n @file{a.c}, then running @command{gcov} on the file @file{a.c} will produce\n an output file called @file{a.c##x.h.gcov} instead of @file{x.h.gcov}.\n This can be useful if @file{x.h} is included in multiple source\n-files. If you uses the @samp{-p} option, both the including and\n+files.  If you uses the @samp{-p} option, both the including and\n included file names will be complete path names.\n \n @item -p\n @itemx --preserve-paths\n Preserve complete path information in the names of generated\n-@file{.gcov} files. Without this option, just the filename component is\n-used. With this option, all directories are used, with @samp{/} characters\n+@file{.gcov} files.  Without this option, just the filename component is\n+used.  With this option, all directories are used, with @samp{/} characters\n translated to @samp{#} characters, @file{.} directory components\n removed and @file{..}\n-components renamed to @samp{^}. This is useful if sourcefiles are in several\n-different directories. It also affects the @samp{-l} option.\n+components renamed to @samp{^}.  This is useful if sourcefiles are in several\n+different directories.  It also affects the @samp{-l} option.\n \n @item -f\n @itemx --function-summaries\n@@ -198,11 +198,11 @@ Output summaries for each function in addition to the file level summary.\n @itemx --object-directory @var{directory}\n @itemx --object-file @var{file}\n Specify either the directory containing the gcov data files, or the\n-object path name. The @file{.gcno}, and\n-@file{.gcda} data files are searched for using this option. If a directory\n+object path name.  The @file{.gcno}, and\n+@file{.gcda} data files are searched for using this option.  If a directory\n is specified, the data files are in that directory and named after the\n-source file name, without its extension. If a file is specified here,\n-the data files are named after that file, without its extension. If this\n+source file name, without its extension.  If a file is specified here,\n+the data files are named after that file, without its extension.  If this\n option is not supplied, it defaults to the current directory.\n \n @item -u\n@@ -213,31 +213,31 @@ Unconditional branches are normally not interesting.\n @end table\n \n @command{gcov} should be run with the current directory the same as that\n-when you invoked the compiler. Otherwise it will not be able to locate\n-the source files. @command{gcov} produces files called\n-@file{@var{mangledname}.gcov} in the current directory. These contain\n+when you invoked the compiler.  Otherwise it will not be able to locate\n+the source files.  @command{gcov} produces files called\n+@file{@var{mangledname}.gcov} in the current directory.  These contain\n the coverage information of the source file they correspond to.\n One @file{.gcov} file is produced for each source file containing code,\n-which was compiled to produce the data files. The @var{mangledname} part\n+which was compiled to produce the data files.  The @var{mangledname} part\n of the output file name is usually simply the source file name, but can\n be something more complicated if the @samp{-l} or @samp{-p} options are\n-given. Refer to those options for details.\n+given.  Refer to those options for details.\n \n The @file{.gcov} files contain the @samp{:} separated fields along with\n-program source code. The format is\n+program source code.  The format is\n \n @smallexample\n @var{execution_count}:@var{line_number}:@var{source line text}\n @end smallexample\n \n Additional block information may succeed each line, when requested by\n-command line option. The @var{execution_count} is @samp{-} for lines\n+command line option.  The @var{execution_count} is @samp{-} for lines\n containing no code and @samp{#####} for lines which were never\n-executed. Some lines of information at the start have @var{line_number}\n+executed.  Some lines of information at the start have @var{line_number}\n of zero.\n \n When printing percentages, 0% and 100% are only printed when the values\n-are @emph{exactly} 0% and 100% respectively. Other values which would\n+are @emph{exactly} 0% and 100% respectively.  Other values which would\n conventionally be rounded to 0% or 100% are instead printed as the\n nearest non-boundary value.\n \n@@ -332,11 +332,11 @@ function main called 1 returned 1 blocks executed 75%\n @end smallexample\n \n In this mode, each basic block is only shown on one line -- the last\n-line of the block. A multi-line block will only contribute to the\n+line of the block.  A multi-line block will only contribute to the\n execution count of that last line, and other lines will not be shown\n to contain code, unless previous blocks end on those lines.\n The total execution count of a line is shown and subsequent lines show\n-the execution counts for individual blocks that end on that line. After each\n+the execution counts for individual blocks that end on that line.  After each\n block, the branch and call counts of the block will be shown, if the\n @option{-b} option is given.\n \n@@ -505,7 +505,7 @@ blocks.\n The @file{.gcda} file is generated when a program containing object files\n built with the GCC @option{-fprofile-arcs} option is executed.  A\n separate @file{.gcda} file is created for each object file compiled with\n-this option. It contains arc transition counts, and some summary\n+this option.  It contains arc transition counts, and some summary\n information.\n \n The full details of the file format is specified in @file{gcov-io.h},"}, {"sha": "7f6dc244ff3078434300238864c68f1498832d7a", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -73,7 +73,7 @@ and such a PCH file won't work.\n \n @deftypefn {Host Hook} size_t HOST_HOOKS_GT_PCH_ALLOC_GRANULARITY (void);\n This host hook returns the alignment required for allocating virtual\n-memory. Usually this is the same as getpagesize, but on some hosts the\n+memory.  Usually this is the same as getpagesize, but on some hosts the\n alignment for reserving memory differs from the pagesize for committing\n memory.\n @end deftypefn\n@@ -159,7 +159,7 @@ define this macro if using the default will create an invalid file name.\n Define this macro to be a C statement (sans semicolon) that performs\n host-dependent removal of ordinary temp files in the compilation driver.\n \n-If you do not define this macro, GCC will use the default version. You\n+If you do not define this macro, GCC will use the default version.  You\n should define this macro if the default version does not reliably remove\n the temp file as, for example, on VMS which allows multiple versions\n of a file."}, {"sha": "9631233fa7a8c50698e0c7439c737586f111fdba", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -49,7 +49,7 @@ a freestanding environment); refer to their documentation for details.\n @item\n @cite{How a diagnostic is identified (C90 3.7, C99 3.10, C90 and C99 5.1.1.3).}\n \n-Diagnostics consist of all the output sent to stderr by GCC.\n+Diagnostics consist of all the output sent to stderr by GCC@.\n \n @item\n @cite{Whether each nonempty sequence of white-space characters other than"}, {"sha": "84fae154bb36fac2503689f3fb2612cc1eb478c1", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -261,7 +261,7 @@ environment to your ``good'' shell prior to running\n @command{configure}/@command{make}.\n \n @command{zsh} is not a fully compliant POSIX shell and will not\n-work when configuring GCC.\n+work when configuring GCC@.\n \n @item GNU binutils\n \n@@ -277,7 +277,7 @@ obtained via FTP mirror sites.\n \n @item GNU make version 3.79.1 (or later)\n \n-You must have GNU make installed to build GCC.\n+You must have GNU make installed to build GCC@.\n \n @item GNU tar version 1.12 (or later)\n \n@@ -287,7 +287,7 @@ systems' @command{tar} programs will also work, only try GNU\n \n @item GNU Multiple Precision Library (GMP) version 4.0 (or later)\n \n-Necessary to build the Fortran frontend. If you don't have it\n+Necessary to build the Fortran frontend.  If you don't have it\n installed in your library search path, you will have to configure with\n the @option{--with-gmp} or @option{--with-gmp-dir} configure option.\n \n@@ -391,7 +391,7 @@ Necessary for running @command{texi2dvi}, used when running\n @itemx ssh (any version)\n \n Necessary to access the CVS repository.  Public releases and weekly\n-snapshots of the development sources are also available via FTP.\n+snapshots of the development sources are also available via FTP@.\n \n @item perl version 5.6.1 (or later)\n \n@@ -635,22 +635,22 @@ the installation directory for G++ header files.  The default is\n \n @item --program-prefix=@var{prefix}\n GCC supports some transformations of the names of its programs when\n-installing them. This option prepends @var{prefix} to the names of\n-programs to install in @var{bindir} (see above). For example, specifying\n+installing them.  This option prepends @var{prefix} to the names of\n+programs to install in @var{bindir} (see above).  For example, specifying\n @option{--program-prefix=foo-} would result in @samp{gcc}\n being installed as @file{/usr/local/bin/foo-gcc}.\n \n @item --program-suffix=@var{suffix}\n Appends @var{suffix} to the names of programs to install in @var{bindir}\n-(see above). For example, specifying @option{--program-suffix=-3.1}\n+(see above).  For example, specifying @option{--program-suffix=-3.1}\n would result in @samp{gcc} being installed as\n @file{/usr/local/bin/gcc-3.1}.\n \n @item --program-transform-name=@var{pattern}\n Applies the @samp{sed} script @var{pattern} to be applied to the names\n-of programs to install in @var{bindir} (see above). @var{pattern} has to\n+of programs to install in @var{bindir} (see above).  @var{pattern} has to\n consist of one or more basic @samp{sed} editing commands, separated by\n-semicolons. For example, if you want the @samp{gcc} program name to be\n+semicolons.  For example, if you want the @samp{gcc} program name to be\n transformed to the installed program @file{/usr/local/bin/myowngcc} and\n the @samp{g++} program name to be transformed to\n @file{/usr/local/bin/gspecial++} without changing other program names,\n@@ -659,7 +659,7 @@ you could use the pattern\n to achieve this effect.\n \n All three options can be combined and used together, resulting in more\n-complex conversion patterns. As a basic rule, @var{prefix} (and\n+complex conversion patterns.  As a basic rule, @var{prefix} (and\n @var{suffix}) are prepended (appended) before further transformations\n can happen with a special transformation script @var{pattern}.\n \n@@ -669,7 +669,7 @@ transformation is explicitly asked for by one of these options.\n \n For native builds, some of the installed programs are also installed\n with the target alias in front of their name, as in\n-@samp{i686-pc-linux-gnu-gcc}. All of the above transformations happen\n+@samp{i686-pc-linux-gnu-gcc}.  All of the above transformations happen\n before the target alias is prepended to the name---so, specifying\n @option{--program-prefix=foo-} and @option{program-suffix=-3.1}, the\n resulting binary would be installed as\n@@ -809,7 +809,7 @@ directory, where @var{libexec} defaults to\n @file{@var{exec-prefix}/libexec} and @var{exec-prefix} defaults to\n @var{prefix} which defaults to @file{/usr/local} unless overridden by\n the @option{--prefix=@var{pathname}} switch described\n-above. @var{target} is the target system triple, such as\n+above.  @var{target} is the target system triple, such as\n @samp{sparc-sun-solaris2.7}, and @var{version} denotes the GCC\n version, such as 3.0.\n @item\n@@ -915,7 +915,7 @@ AIX thread support.\n DCE thread support.\n @item gnat\n Ada tasking support.  For non-Ada programs, this setting is equivalent\n-to @samp{single}. When used in conjunction with the Ada run time, it\n+to @samp{single}.  When used in conjunction with the Ada run time, it\n causes GCC to use the same thread primitives as Ada uses.  This option\n is necessary when using both Ada and the back end exception handling,\n which is the default for most Ada targets.\n@@ -981,8 +981,8 @@ PowerPC systems.\n Define if you want to use __cxa_atexit, rather than atexit, to\n register C++ destructors for local statics and global objects.\n This is essential for fully standards-compliant handling of\n-destructors, but requires __cxa_atexit in libc. This option is currently\n-only available on systems with GNU libc. When enabled, this will cause\n+destructors, but requires __cxa_atexit in libc.  This option is currently\n+only available on systems with GNU libc.  When enabled, this will cause\n @option{-fuse-cxa-exit} to be passed by default.\n \n @item --enable-target-optspace\n@@ -1036,7 +1036,7 @@ addition, @samp{libstdc++}'s include files will be installed into\n @file{@var{libdir}} unless you overruled it by using\n @option{--with-gxx-include-dir=@var{dirname}}.  Using this option is\n particularly useful if you intend to use several versions of GCC in\n-parallel. This is currently supported by @samp{libgfortran},\n+parallel.  This is currently supported by @samp{libgfortran},\n @samp{libjava}, @samp{libmudflap}, @samp{libstdc++}, and @samp{libobjc}.\n \n \n@@ -1078,7 +1078,7 @@ to look up installations paths in the registry using the following key:\n @end smallexample\n \n @var{key} defaults to GCC version number, and can be overridden by the\n-@option{--enable-win32-registry=@var{key}} option. Vendors and distributors\n+@option{--enable-win32-registry=@var{key}} option.  Vendors and distributors\n who use custom installers are encouraged to provide a different key,\n perhaps one comprised of vendor name and GCC version number, to\n avoid conflict with existing installations.  This feature is enabled\n@@ -1130,12 +1130,12 @@ errors causing wrong code to be generated.\n @item --enable-coverage\n @itemx --enable-coverage=@var{level}\n With this option, the compiler is built to collect self coverage\n-information, every time it is run. This is for internal development\n-purposes, and only works when the compiler is being built with gcc. The\n+information, every time it is run.  This is for internal development\n+purposes, and only works when the compiler is being built with gcc.  The\n @var{level} argument controls whether the compiler is built optimized or\n-not, values are @samp{opt} and @samp{noopt}. For coverage analysis you\n+not, values are @samp{opt} and @samp{noopt}.  For coverage analysis you\n want to disable optimization, for performance analysis you want to\n-enable optimization. When coverage is enabled, the default level is\n+enable optimization.  When coverage is enabled, the default level is\n without optimization.\n \n @item --enable-gather-detailed-mem-stats\n@@ -1202,7 +1202,7 @@ directory.  @emph{This option with the @var{dir} argument is required} when\n building a cross compiler, if @file{@var{prefix}/@var{target}/sys-include}\n doesn't pre-exist.  If @file{@var{prefix}/@var{target}/sys-include} does\n pre-exist, the @var{dir} argument may be omitted.  @command{fixincludes}\n-will be run on these files to make them compatible with GCC.\n+will be run on these files to make them compatible with GCC@.\n \n @item --without-headers\n Tells GCC not use any target headers from a libc when building a cross\n@@ -1272,19 +1272,19 @@ The following options apply to building @samp{libgcj}.\n Don't set system properties from @env{GCJ_PROPERTIES}.\n \n @item --enable-hash-synchronization\n-Use a global hash table for monitor locks. Ordinarily,\n+Use a global hash table for monitor locks.  Ordinarily,\n @samp{libgcj}'s @samp{configure} script automatically makes\n-the correct choice for this option for your platform. Only use\n+the correct choice for this option for your platform.  Only use\n this if you know you need the library to be configured differently.\n \n @item --enable-interpreter\n-Enable the Java interpreter. The interpreter is automatically\n-enabled by default on all platforms that support it. This option\n+Enable the Java interpreter.  The interpreter is automatically\n+enabled by default on all platforms that support it.  This option\n is really only useful if you want to disable the interpreter\n (using @option{--disable-interpreter}).\n \n @item --disable-java-net\n-Disable java.net. This disables the native part of java.net only,\n+Disable java.net.  This disables the native part of java.net only,\n using non-functional stubs for native method implementations.\n \n @item --disable-jvmpi\n@@ -1294,7 +1294,7 @@ Disable JVMPI support.\n Enable runtime eCos target support.\n \n @item --without-libffi\n-Don't use @samp{libffi}. This will disable the interpreter and JNI\n+Don't use @samp{libffi}.  This will disable the interpreter and JNI\n support as well, as these require @samp{libffi} to work.\n \n @item --enable-libgcj-debug\n@@ -1303,43 +1303,43 @@ Enable runtime debugging code.\n @item --enable-libgcj-multifile\n If specified, causes all @file{.java} source files to be\n compiled into @file{.class} files in one invocation of\n-@samp{gcj}. This can speed up build time, but is more\n-resource-intensive. If this option is unspecified or\n+@samp{gcj}.  This can speed up build time, but is more\n+resource-intensive.  If this option is unspecified or\n disabled, @samp{gcj} is invoked once for each @file{.java}\n file to compile into a @file{.class} file.\n \n @item --with-libiconv-prefix=DIR\n Search for libiconv in @file{DIR/include} and @file{DIR/lib}.\n \n @item --enable-sjlj-exceptions\n-Force use of @code{builtin_setjmp} for exceptions. @samp{configure}\n-ordinarily picks the correct value based on the platform. Only use\n+Force use of @code{builtin_setjmp} for exceptions.  @samp{configure}\n+ordinarily picks the correct value based on the platform.  Only use\n this option if you are sure you need a different setting.\n \n @item --with-system-zlib\n Use installed @samp{zlib} rather than that included with GCC@.\n \n @item --with-win32-nlsapi=ansi, unicows or unicode\n Indicates how MinGW @samp{libgcj} translates between UNICODE\n-characters and the Win32 API.\n+characters and the Win32 API@.\n @table @code\n @item ansi\n Use the single-byte @code{char} and the Win32 A functions natively,\n-translating to and from UNICODE when using these functions. If\n+translating to and from UNICODE when using these functions.  If\n unspecified, this is the default.\n \n @item unicows\n-Use the @code{WCHAR} and Win32 W functions natively. Adds\n+Use the @code{WCHAR} and Win32 W functions natively.  Adds\n @code{-lunicows} to @file{libgcj.spec} to link with @samp{libunicows}.\n @file{unicows.dll} needs to be deployed on Microsoft Windows 9X machines\n-running built executables. @file{libunicows.a}, an open-source\n+running built executables.  @file{libunicows.a}, an open-source\n import library around Microsoft's @code{unicows.dll}, is obtained from\n @uref{http://libunicows.sourceforge.net/}, which also gives details\n on getting @file{unicows.dll} from Microsoft.\n \n @item unicode\n-Use the @code{WCHAR} and Win32 W functions natively. Does @emph{not}\n-add @code{-lunicows} to @file{libgcj.spec}. The built executables will\n+Use the @code{WCHAR} and Win32 W functions natively.  Does @emph{not}\n+add @code{-lunicows} to @file{libgcj.spec}.  The built executables will\n only run on Microsoft Windows NT and above.\n @end table\n @end table\n@@ -1352,16 +1352,16 @@ Use the X Window System.\n \n @item --enable-java-awt=PEER(S)\n Specifies the AWT peer library or libraries to build alongside\n-@samp{libgcj}. If this option is unspecified or disabled, AWT\n-will be non-functional. Current valid values are @option{gtk} and\n-@option{xlib}. Multiple libraries should be separated by a\n+@samp{libgcj}.  If this option is unspecified or disabled, AWT\n+will be non-functional.  Current valid values are @option{gtk} and\n+@option{xlib}.  Multiple libraries should be separated by a\n comma (i.e.@: @option{--enable-java-awt=gtk,xlib}).\n \n @item --enable-gtk-cairo\n-Build the cairo Graphics2D implementation on GTK.\n+Build the cairo Graphics2D implementation on GTK@.\n \n @item --enable-java-gc=TYPE\n-Choose garbage collector. Defaults to @option{boehm} if unspecified.\n+Choose garbage collector.  Defaults to @option{boehm} if unspecified.\n \n @item --disable-gtktest\n Do not try to compile and run a test GTK+ program.\n@@ -1672,7 +1672,7 @@ at @uref{http://gcc.gnu.org/buildstat.html}, although not everyone who\n reports a successful build runs the testsuites and submits the results.\n This step is optional and may require you to download additional software,\n but it can give you confidence in your new GCC installation or point out\n-problems before you install and start using your new GCC.\n+problems before you install and start using your new GCC@.\n \n First, you must have @uref{download.html,,downloaded the testsuites}.\n These are part of the full distribution, but if you downloaded the\n@@ -1948,7 +1948,7 @@ quickly review the build status page for your release, available from\n If your system is not listed for the version of GCC that you built,\n send a note to\n @email{gcc@@gcc.gnu.org} indicating\n-that you successfully built and installed GCC.\n+that you successfully built and installed GCC@.\n Include the following information:\n \n @itemize @bullet\n@@ -2567,7 +2567,7 @@ and includes all the necessary compilation tools and libraries.\n @heading @anchor{*-*-freebsd*}*-*-freebsd*\n \n The version of binutils installed in @file{/usr/bin} probably works with\n-this release of GCC.  However, on FreeBSD 4, bootstrapping against the\n+this release of GCC@.  However, on FreeBSD 4, bootstrapping against the\n latest FSF binutils is known to improve overall testsuite results; and,\n on FreeBSD/alpha, using binutils 2.14 or later is required to build libjava.\n \n@@ -2587,7 +2587,7 @@ FreeBSD/alpha since its inception.  You may use @option{-gstabs} instead\n of @option{-g}, if you really want the old debugging format.  There are\n no known issues with mixing object files and libraries with different\n debugging formats.  Otherwise, this release of GCC should now match more\n-of the configuration used in the stock FreeBSD configuration of GCC.  In\n+of the configuration used in the stock FreeBSD configuration of GCC@.  In\n particular, @option{--enable-threads} is now configured by default.\n However, as a general user, do not attempt to replace the system\n compiler with this release.  Known to bootstrap and check with good\n@@ -2633,9 +2633,9 @@ you may encounter a variety of problems when using the HP assembler.\n \n Specifically, @option{-g} does not work on HP-UX (since that system\n uses a peculiar debugging format which GCC does not know about), unless\n-you use GAS and GDB.  It may be helpful to configure GCC with the\n+you use GAS and GDB@.  It may be helpful to configure GCC with the\n @uref{./configure.html#with-gnu-as,,@option{--with-gnu-as}} and\n-@option{--with-as=@dots{}} options to ensure that GCC can find GAS.\n+@option{--with-as=@dots{}} options to ensure that GCC can find GAS@.\n \n If you wish to use the pa-risc 2.0 architecture support with a 32-bit\n runtime, you must use either the HP assembler, or gas/binutils 2.11\n@@ -2711,8 +2711,8 @@ GCC 3.0 and up support HP-UX 11.  GCC 2.95.x is not supported and cannot\n be used to compile GCC 3.0 and up.\n \n Refer to @uref{binaries.html,,binaries} for information about obtaining\n-precompiled GCC binaries for HP-UX.  Precompiled binaries must be obtained\n-to build the Ada language as it can't be bootstrapped using C.  Ada is\n+precompiled GCC binaries for HP-UX@.  Precompiled binaries must be obtained\n+to build the Ada language as it can't be bootstrapped using C@.  Ada is\n only available for the 32-bit PA-RISC runtime.  The libffi and libjava\n haven't been ported to HP-UX and don't build.\n \n@@ -2731,7 +2731,7 @@ unbundled compiler, or a binary distribution of GCC@.\n There are several possible approaches to building the distribution.\n Binutils can be built first using the HP tools.  Then, the GCC\n distribution can be built.  The second approach is to build GCC\n-first using the HP tools, then build binutils, then rebuild GCC.\n+first using the HP tools, then build binutils, then rebuild GCC@.\n There have been problems with various binary distributions, so it\n is best not to start from a binary distribution.\n \n@@ -2767,7 +2767,7 @@ search for ld.  The two linkers supported on this target require different\n commands.  The default linker is determined during configuration.  As a\n result, it's not possible to switch linkers in the middle of a GCC build.\n This has been been reported to sometimes occur in unified builds of\n-binutils and GCC.\n+binutils and GCC@.\n \n GCC 3.0 through 3.2 require binutils 2.11 or above.  GCC 3.3 through\n GCC 3.5 require binutils 2.14 or later.\n@@ -2966,13 +2966,13 @@ more major ABI changes are expected.\n <hr />\n @end html\n @heading @anchor{ia64-*-hpux*}ia64-*-hpux*\n-Building GCC on this target requires the GNU Assembler. The bundled HP\n-assembler will not work. To prevent GCC from using the wrong assembler,\n+Building GCC on this target requires the GNU Assembler.  The bundled HP\n+assembler will not work.  To prevent GCC from using the wrong assembler,\n the option @option{--with-gnu-as} may be necessary.\n \n-The GCC libunwind library has not been ported to HPUX. This means that for\n+The GCC libunwind library has not been ported to HPUX@.  This means that for\n GCC versions 3.2.3 and earlier, @option{--enable-libunwind-exceptions}\n-is required to build GCC. For GCC 3.3 and later, this is the default.\n+is required to build GCC@.  For GCC 3.3 and later, this is the default.\n For gcc 3.4.3 and later, @option{--enable-libunwind-exceptions} is\n removed and the system libunwind library will always be used.\n \n@@ -3010,10 +3010,10 @@ If this error occurs during stage2 or later, then the problem most likely\n is the version of Make (see above).\n \n The native @command{as} and @command{ld} are recommended for bootstrapping\n-on AIX 4 and required for bootstrapping on AIX 5L.  The GNU Assembler\n+on AIX 4 and required for bootstrapping on AIX 5L@.  The GNU Assembler\n reports that it supports WEAK symbols on AIX 4, which causes GCC to try to\n utilize weak symbol functionality although it is not supported.  The GNU\n-Assembler and Linker do not support AIX 5L sufficiently to bootstrap GCC.\n+Assembler and Linker do not support AIX 5L sufficiently to bootstrap GCC@.\n The native AIX tools do interoperate with GCC@.\n \n Building @file{libstdc++.a} requires a fix for an AIX Assembler bug\n@@ -3218,9 +3218,9 @@ MIPS systems check for division by zero (unless\n generating either a conditional trap or a break instruction.  Using\n trap results in smaller code, but is only supported on MIPS II and\n later.  Also, some versions of the Linux kernel have a bug that\n-prevents trap from generating the proper signal (SIGFPE).  To enable\n+prevents trap from generating the proper signal (@code{SIGFPE}).  To enable\n the use of break, use the @option{--with-divide=breaks}\n-@command{configure} option when configuring GCC.  The default is to\n+@command{configure} option when configuring GCC@.  The default is to\n use traps on systems that support them.\n \n Cross-compilers for the Mips as target using the Mips assembler\n@@ -3436,7 +3436,7 @@ zSeries system (64-bit) running GNU/Linux for zSeries@.\n <hr />\n @end html\n @heading @anchor{s390x-ibm-tpf*}s390x-ibm-tpf*\n-zSeries system (64-bit) running TPF.  This platform is\n+zSeries system (64-bit) running TPF@.  This platform is\n supported as cross-compilation target only.\n \n @html\n@@ -3632,7 +3632,7 @@ the Solaris 7 Recommended Patch Cluster.\n \n GCC 3.3 triggers a bug in version 5.0 Alpha 03/27/98 of the Sun assembler,\n which causes a bootstrap failure when linking the 64-bit shared version of\n-libgcc. A typical error message is:\n+libgcc.  A typical error message is:\n \n @smallexample\n ld: fatal: relocation error: R_SPARC_32: file libgcc/sparcv9/_muldi3.o:\n@@ -3719,7 +3719,7 @@ in some cases (for example, when @code{alloca} is used).\n @end html\n @heading @anchor{*-*-vxworks*}*-*-vxworks*\n Support for VxWorks is in flux.  At present GCC supports @emph{only} the\n-very recent VxWorks 5.5 (aka Tornado 2.2) release, and only on PowerPC.\n+very recent VxWorks 5.5 (aka Tornado 2.2) release, and only on PowerPC@.\n We welcome patches for other architectures supported by VxWorks 5.5.\n Support for VxWorks AE would also be welcome; we believe this is merely\n a matter of writing an appropriate ``configlette'' (see below).  We are\n@@ -3731,7 +3731,7 @@ VxWorks comes with an older version of GCC installed in\n Choose an installation @var{prefix} entirely outside @var{$WIND_BASE}.\n Before running @command{configure}, create the directories @file{@var{prefix}}\n and @file{@var{prefix}/bin}.  Link or copy the appropriate assembler,\n-linker, etc. into @file{@var{prefix}/bin}, and set your @var{PATH} to\n+linker, etc.@: into @file{@var{prefix}/bin}, and set your @var{PATH} to\n include that directory while running both @command{configure} and\n @command{make}.\n \n@@ -3755,7 +3755,7 @@ VxWorks will incorporate this module.)\n @heading @anchor{x86_64-*-*}x86_64-*-*, amd64-*-*\n \n GCC supports the x86-64 architecture implemented by the AMD64 processor\n-(amd64-*-* is an alias for x86_64-*-*) on GNU/Linux, FreeBSD and NetBSD.\n+(amd64-*-* is an alias for x86_64-*-*) on GNU/Linux, FreeBSD and NetBSD@.\n On GNU/Linux the default is a bi-arch compiler which is able to generate\n both 64-bit x86-64 and 32-bit x86 code (via the @option{-m32} switch).\n "}, {"sha": "eac209e233ae29c42ce7a7f908258dd078a1737c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 95, "deletions": 95, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -989,7 +989,7 @@ line options for each tool.\n \n @item --version\n @opindex version\n-Display the version number and copyrights of the invoked GCC.\n+Display the version number and copyrights of the invoked GCC@.\n @end table\n \n @node Invoking G++\n@@ -1239,9 +1239,9 @@ options for strict ISO C conformance) implies @option{-trigraphs}.\n @opindex no-integrated-cpp\n Performs a compilation in two passes: preprocessing and compiling.  This\n option allows a user supplied \"cc1\", \"cc1plus\", or \"cc1obj\" via the\n-@option{-B} option. The user supplied compilation step can then add in\n+@option{-B} option.  The user supplied compilation step can then add in\n an additional preprocessing step after normal preprocessing but before\n-compiling. The default is to use the integrated cpp (internal cpp)\n+compiling.  The default is to use the integrated cpp (internal cpp)\n \n The semantics of this option will change if \"cc1\", \"cc1plus\", and\n \"cc1obj\" are merged.\n@@ -1330,7 +1330,7 @@ Here is a list of options that are @emph{only} for compiling C++ programs:\n \n @item -fabi-version=@var{n}\n @opindex fabi-version\n-Use version @var{n} of the C++ ABI.  Version 2 is the version of the\n+Use version @var{n} of the C++ ABI@.  Version 2 is the version of the\n C++ ABI that first appeared in G++ 3.4.  Version 1 is the version of\n the C++ ABI that first appeared in G++ 3.2.  Version 0 will always be\n the version that conforms most closely to the C++ ABI specification.\n@@ -1509,13 +1509,13 @@ destructors, but will only work if your C library supports\n Causes all inlined methods to be marked with\n @code{__attribute__ ((visibility (\"hidden\")))} so that they do not\n appear in the export table of a DSO and do not require a PLT indirection\n-when used within the DSO. Enabling this option can have a dramatic effect\n+when used within the DSO@.  Enabling this option can have a dramatic effect\n on load and link times of a DSO as it massively reduces the size of the\n-dynamic export table when the library makes heavy use of templates. While\n+dynamic export table when the library makes heavy use of templates.  While\n it can cause bloating through duplication of code within each DSO where\n it is used, often the wastage is less than the considerable space occupied\n by a long symbol name in the export table which is typical when using\n-templates and namespaces. For even more savings, combine with the\n+templates and namespaces.  For even more savings, combine with the\n @option{-fvisibility=hidden} switch.\n \n @item -fno-weak\n@@ -1547,7 +1547,7 @@ inlined by default.\n @item -Wabi @r{(C++ only)}\n @opindex Wabi\n Warn when G++ generates code that is probably not compatible with the\n-vendor-neutral C++ ABI.  Although an effort has been made to warn about\n+vendor-neutral C++ ABI@.  Although an effort has been made to warn about\n all such cases, there are probably some cases that are not warned about,\n even though G++ is generating incompatible code.  There may also be\n cases where warnings are emitted even though the code that is generated\n@@ -2592,8 +2592,8 @@ the warnings were only enabled by the @option{-Wall} command line option.\n @opindex Wstrict-aliasing\n This option is only active when @option{-fstrict-aliasing} is active.\n It warns about code which might break the strict aliasing rules that the\n-compiler is using for optimization. The warning does not catch all\n-cases, but does attempt to catch the more common pitfalls. It is\n+compiler is using for optimization.  The warning does not catch all\n+cases, but does attempt to catch the more common pitfalls.  It is\n included in @option{-Wall}.\n \n @item -Wstrict-aliasing=2\n@@ -3301,21 +3301,21 @@ Add code so that program flow @dfn{arcs} are instrumented.  During\n execution the program records how many times each branch and call is\n executed and how many times it is taken or returns.  When the compiled\n program exits it saves this data to a file called\n-@file{@var{auxname}.gcda} for each source file. The data may be used for\n+@file{@var{auxname}.gcda} for each source file.  The data may be used for\n profile-directed optimizations (@option{-fbranch-probabilities}), or for\n-test coverage analysis (@option{-ftest-coverage}). Each object file's\n+test coverage analysis (@option{-ftest-coverage}).  Each object file's\n @var{auxname} is generated from the name of the output file, if\n explicitly specified and it is not the final executable, otherwise it is\n-the basename of the source file. In both cases any suffix is removed\n+the basename of the source file.  In both cases any suffix is removed\n (e.g.@: @file{foo.gcda} for input file @file{dir/foo.c}, or\n @file{dir/foo.gcda} for output file specified as @option{-o dir/foo.o}).\n \n @itemize\n \n @item\n Compile the source files with @option{-fprofile-arcs} plus optimization\n-and code generation options. For test coverage analysis, use the\n-additional @option{-ftest-coverage} option. You do not need to profile\n+and code generation options.  For test coverage analysis, use the\n+additional @option{-ftest-coverage} option.  You do not need to profile\n every source file in a program.\n \n @item\n@@ -3324,9 +3324,9 @@ Link your object files with @option{-lgcov} or @option{-fprofile-arcs}\n \n @item\n Run the program on a representative workload to generate the arc profile\n-information. This may be repeated any number of times. You can run\n+information.  This may be repeated any number of times.  You can run\n concurrent instances of your program, and provided that the file system\n-supports locking, the data files will be correctly updated. Also\n+supports locking, the data files will be correctly updated.  Also\n @code{fork} calls are detected and correctly handled (double counting\n will not happen).\n \n@@ -3338,7 +3338,7 @@ Control Optimization}).\n \n @item\n For test coverage analysis, use @command{gcov} to produce human readable\n-information from the @file{.gcno} and @file{.gcda} files. Refer to the\n+information from the @file{.gcno} and @file{.gcda} files.  Refer to the\n @command{gcov} documentation for further information.\n \n @end itemize\n@@ -3367,10 +3367,10 @@ working on improving it.\n @opindex ftest-coverage\n Produce a notes file that the @command{gcov} code-coverage utility\n (@pxref{Gcov,, @command{gcov}---a Test Coverage Program}) can use to\n-show program coverage. Each source file's note file is called\n-@file{@var{auxname}.gcno}. Refer to the @option{-fprofile-arcs} option\n+show program coverage.  Each source file's note file is called\n+@file{@var{auxname}.gcno}.  Refer to the @option{-fprofile-arcs} option\n above for a description of @var{auxname} and instructions on how to\n-generate test coverage data. Coverage data will match the source files\n+generate test coverage data.  Coverage data will match the source files\n more closely, if you do not optimize.\n \n @item -d@var{letters}\n@@ -3681,7 +3681,7 @@ to the source file name.  If the @samp{-@var{options}} form is used,\n @opindex fdump-ipa\n Control the dumping at various stages of inter-procedural analysis\n language tree to a file.  The file name is generated by appending a switch\n-specific suffix to the source file name. The following dumps are possible:\n+specific suffix to the source file name.  The following dumps are possible:\n \n @table @samp\n @item all\n@@ -3700,14 +3700,14 @@ Control the dumping at various stages of processing the intermediate\n language tree to a file.  The file name is generated by appending a switch\n specific suffix to the source file name.  If the @samp{-@var{options}}\n form is used, @var{options} is a list of @samp{-} separated options that\n-control the details of the dump. Not all options are applicable to all\n-dumps, those which are not meaningful will be ignored. The following\n+control the details of the dump.  Not all options are applicable to all\n+dumps, those which are not meaningful will be ignored.  The following\n options are available\n \n @table @samp\n @item address\n Print the address of each node.  Usually this is not meaningful as it\n-changes according to the environment and source file. Its primary use\n+changes according to the environment and source file.  Its primary use\n is for tying up a dump file with a debug environment.\n @item slim\n Inhibit dumping of members of a scope or body of a function merely\n@@ -3761,7 +3761,7 @@ made by appending @file{.cfg} to the source file name.\n Dump the control flow graph of each function to a file in VCG format.  The\n file name is made by appending @file{.vcg} to the source file name.  Note\n that if the file contains more than one function, the generated file cannot\n-be used directly by VCG.  You will need to cut and paste each function's\n+be used directly by VCG@.  You will need to cut and paste each function's\n graph into its own separate file first.\n \n @item ch\n@@ -3781,7 +3781,7 @@ appending @file{.alias} to the source file name.\n \n @item ccp\n @opindex fdump-tree-ccp\n-Dump each function after CCP.  The file name is made by appending\n+Dump each function after CCP@.  The file name is made by appending\n @file{.ccp} to the source file name.\n \n @item pre\n@@ -3854,9 +3854,9 @@ Enable all the available tree dumps with the flags provided in this option.\n @opindex frandom-string\n This option provides a seed that GCC uses when it would otherwise use\n random numbers.  It is used to generate certain symbol names\n-that have to be different in every compiled file. It is also used to\n+that have to be different in every compiled file.  It is also used to\n place unique stamps in coverage data files and the object files that\n-produce them. You can use the @option{-frandom-seed} option to produce\n+produce them.  You can use the @option{-frandom-seed} option to produce\n reproducibly identical object files.\n \n The @var{string} should be different for every file you compile.\n@@ -3905,8 +3905,8 @@ Both numbers are in seconds.\n \n @item -fvar-tracking\n @opindex fvar-tracking\n-Run variable tracking pass. It computes where variables are stored at each\n-position in code. Better debugging information is then generated\n+Run variable tracking pass.  It computes where variables are stored at each\n+position in code.  Better debugging information is then generated\n (if the debugging information format supports this information).\n \n It is enabled by default when compiling with optimization (@option{-Os},\n@@ -4234,7 +4234,7 @@ release to an another.\n In C, emit @code{static} functions that are declared @code{inline}\n into the object file, even if the function has been inlined into all\n of its callers.  This switch does not affect functions using the\n-@code{extern inline} extension in GNU C.  In C++, emit any and all\n+@code{extern inline} extension in GNU C@.  In C++, emit any and all\n inline functions into the object file.\n \n @item -fkeep-static-consts\n@@ -4438,7 +4438,7 @@ Enabled by default when gcse is enabled.\n @item -fgcse-after-reload\n @opindex fgcse-after-reload\n When @option{-fgcse-after-reload} is enabled, a redundant load elimination\n-pass is performed after reload. The purpose of this pass is to cleanup\n+pass is performed after reload.  The purpose of this pass is to cleanup\n redundant spilling.\n \n @item -floop-optimize\n@@ -4456,7 +4456,7 @@ by separate flags.\n \n @item -fcrossjumping\n @opindex crossjumping\n-Perform cross-jumping transformation. This transformation unifies equivalent code and save code size. The\n+Perform cross-jumping transformation.  This transformation unifies equivalent code and save code size.  The\n resulting code may or may not perform better than without cross-jumping.\n \n Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n@@ -4650,7 +4650,7 @@ Perform loop optimizations on trees.  This flag is enabled by default\n at @option{-O} and higher.\n \n @item -ftree-loop-linear\n-Perform linear loop transformations on tree. This flag can improve cache\n+Perform linear loop transformations on tree.  This flag can improve cache\n performance and allow further loop optimizations to take place.\n \n @item -ftree-lim\n@@ -4699,7 +4699,7 @@ Perform loop vectorization on trees.\n \n @item -ftracer\n @opindex ftracer\n-Perform tail duplication to enlarge superblock size. This transformation\n+Perform tail duplication to enlarge superblock size.  This transformation\n simplifies the control flow of the function allowing other optimizations to do\n better job.\n \n@@ -4725,7 +4725,7 @@ long dependency chains, thus improving efficiency of the scheduling passes\n (for best results, @option{-fweb} should be used as well).\n \n Combination of @option{-fweb} and CSE is often sufficient to obtain the\n-same effect. However in cases the loop body is more complicated than\n+same effect.  However in cases the loop body is more complicated than\n a single basic block, this is not reliable.  It also does not work at all\n on some of the architectures due to restrictions in the CSE pass.\n \n@@ -4797,7 +4797,7 @@ sections.\n @item -freorder-functions\n @opindex freorder-functions\n Reorder basic blocks in the compiled function in order to reduce number of\n-taken branches and improve code locality. This is implemented by using special\n+taken branches and improve code locality.  This is implemented by using special\n subsections @code{.text.hot} for most frequently executed functions and\n @code{.text.unlikely} for unlikely executed functions.  Reordering is done by\n the linker so object file format must support named sections and linker must\n@@ -4948,12 +4948,12 @@ shall be used on the declaration.\n \n @item\n Static functions now can use non-standard passing conventions that\n-may break @code{asm} statements calling functions directly. Again,\n+may break @code{asm} statements calling functions directly.  Again,\n attribute @code{used} will prevent this behavior.\n @end itemize\n \n As a temporary workaround, @option{-fno-unit-at-a-time} can be used,\n-but this scheme may not be supported by future releases of GCC.\n+but this scheme may not be supported by future releases of GCC@.\n \n Enabled at levels @option{-O2}, @option{-O3}.\n \n@@ -5211,7 +5211,7 @@ for testing, so we are interested to hear about miscompilations with\n \n @item -ftracer\n @opindex ftracer\n-Perform tail duplication to enlarge superblock size. This transformation\n+Perform tail duplication to enlarge superblock size.  This transformation\n simplifies the control flow of the function allowing other optimizations to do\n better job.\n \n@@ -5531,12 +5531,12 @@ Maximum number of basic blocks on path that cse considers.  The default is 10.\n \n @item global-var-threshold\n \n-Counts the number of function calls (N) and the number of\n-call-clobbered variables (V).  If NxV is larger than this limit, a\n+Counts the number of function calls (@var{n}) and the number of\n+call-clobbered variables (@var{v}).  If @var{n}x@var{v} is larger than this limit, a\n single artificial variable will be created to represent all the\n call-clobbered variables at function call sites.  This artificial\n variable will then be made to alias every call-clobbered variable.\n-(done as int * size_t on the host machine; beware overflow).\n+(done as @code{int * size_t} on the host machine; beware overflow).\n \n @item max-aliased-vops\n \n@@ -5554,8 +5554,8 @@ Tuning this may improve compilation speed; it has no effect on code\n generation.\n \n The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when\n-RAM >= 1GB.  If @code{getrlimit} is available, the notion of \"RAM\" is\n-the smallest of actual RAM and RLIMIT_DATA or RLIMIT_AS.  If\n+RAM >= 1GB@.  If @code{getrlimit} is available, the notion of \"RAM\" is\n+the smallest of actual RAM and @code{RLIMIT_DATA} or @code{RLIMIT_AS}.  If\n GCC is not able to calculate RAM on a particular platform, the lower\n bound of 30% is used.  Setting this parameter and\n @option{ggc-min-heapsize} to zero causes a full collection to occur at\n@@ -6671,7 +6671,7 @@ architectures:\n @table @gcctabopt\n @item -mabi=@var{name}\n @opindex mabi\n-Generate code for the specified ABI.  Permissible values are: @samp{apcs-gnu},\n+Generate code for the specified ABI@.  Permissible values are: @samp{apcs-gnu},\n @samp{atpcs}, @samp{aapcs} and @samp{iwmmxt}.\n \n @item -mapcs-frame\n@@ -7029,9 +7029,9 @@ Change only the low 8 bits of the stack pointer.\n \n @item -mint8\n @opindex mint8\n-Assume int to be 8 bit integer. This affects the sizes of all types: A\n+Assume int to be 8 bit integer.  This affects the sizes of all types: A\n char will be 1 byte, an int will be 1 byte, an long will be 2 bytes\n-and long long will be 4 bytes. Please note that this option does not\n+and long long will be 4 bytes.  Please note that this option does not\n comply to the C standards, but it will provide you with smaller code\n size.\n @end table\n@@ -7049,7 +7049,7 @@ These options are defined specifically for the CRIS ports.\n @opindex mcpu\n Generate code for the specified architecture.  The choices for\n @var{architecture-type} are @samp{v3}, @samp{v8} and @samp{v10} for\n-respectively ETRAX@w{ }4, ETRAX@w{ }100, and ETRAX@w{ }100@w{ }LX.\n+respectively ETRAX@w{ }4, ETRAX@w{ }100, and ETRAX@w{ }100@w{ }LX@.\n Default is @samp{v0} except for cris-axis-linux-gnu, where the default is\n @samp{v10}.\n \n@@ -7147,7 +7147,7 @@ or storage for local variable needs to be allocated.\n With @option{-fpic} and @option{-fPIC}, don't generate (do generate)\n instruction sequences that load addresses for functions from the PLT part\n of the GOT rather than (traditional on other architectures) calls to the\n-PLT.  The default is @option{-mgotplt}.\n+PLT@.  The default is @option{-mgotplt}.\n \n @item -maout\n @opindex maout\n@@ -7241,9 +7241,9 @@ the name of the framework and header.h is found in the\n \n @item -gused\n @opindex -gused\n-Emit debugging information for symbols that are used. For STABS\n+Emit debugging information for symbols that are used.  For STABS\n debugging format, this enables @option{-feliminate-unused-debug-symbols}.\n-This is by default ON.\n+This is by default ON@.\n \n @item -gfull\n @opindex -gfull\n@@ -7296,7 +7296,7 @@ See man ld(1) for more information.\n @item -bundle_loader @var{executable}\n @opindex bundle_loader\n This option specifies the @var{executable} that will be loading the build\n-output file being linked. See man ld(1) for more information.\n+output file being linked.  See man ld(1) for more information.\n \n @item -dynamiclib\n @opindex -dynamiclib\n@@ -7654,7 +7654,7 @@ size of the small data area to 64KB, but allows the variables to be\n directly accessed via a single instruction.\n \n The default is @option{-mlarge-data}.  With this option the data area\n-is limited to just below 2GB.  Programs that require more than 2GB of\n+is limited to just below 2GB@.  Programs that require more than 2GB of\n data must use @code{malloc} or @code{mmap} to allocate the data in the\n heap instead of in the program's data segment.\n \n@@ -8206,10 +8206,10 @@ this to work.\n \n @item -msio\n @opindex msio\n-Generate the predefine, @code{_SIO}, for server IO.  The default is\n+Generate the predefine, @code{_SIO}, for server IO@.  The default is\n @option{-mwsio}.  This generates the predefines, @code{__hp9000s700},\n-@code{__hp9000s700__} and @code{_WSIO}, for workstation IO.  These\n-options are available under HP-UX and HI-UX.\n+@code{__hp9000s700__} and @code{_WSIO}, for workstation IO@.  These\n+options are available under HP-UX and HI-UX@.\n \n @item -mgnu-ld\n @opindex gnu-ld\n@@ -8309,7 +8309,7 @@ adding these link options.\n @item -threads\n @opindex threads\n Add support for multithreading with the @dfn{dce thread} library\n-under HP-UX.  This option sets flags for both the preprocessor and\n+under HP-UX@.  This option sets flags for both the preprocessor and\n linker.\n @end table\n \n@@ -8331,15 +8331,15 @@ for the ABI and the set of available instructions.  The choices for\n @var{cpu-type} are:\n @table @emph\n @item i386\n-Original Intel's i386 CPU.\n+Original Intel's i386 CPU@.\n @item i486\n-Intel's i486 CPU.  (No scheduling is implemented for this chip.)\n+Intel's i486 CPU@.  (No scheduling is implemented for this chip.)\n @item i586, pentium\n Intel Pentium CPU with no MMX support.\n @item pentium-mmx\n Intel PentiumMMX CPU based on Pentium core with MMX instruction set support.\n @item i686, pentiumpro\n-Intel PentiumPro CPU.\n+Intel PentiumPro CPU@.\n @item pentium2\n Intel Pentium2 CPU based on PentiumPro core with MMX instruction set support.\n @item pentium3, pentium3m\n@@ -8376,7 +8376,7 @@ set support.\n IDT Winchip2 CPU, dealt in same way as i486 with additional MMX and 3dNOW!\n instruction set support.\n @item c3\n-Via C3 CPU with MMX and 3dNOW!  instruction set support.  (No scheduling is\n+Via C3 CPU with MMX and 3dNOW! instruction set support.  (No scheduling is\n implemented for this chip.)\n @item c3-2\n Via C3-2 CPU with MMX and SSE instruction set support.  (No scheduling is\n@@ -8421,7 +8421,7 @@ Use the standard 387 floating point coprocessor present majority of chips and\n emulated otherwise.  Code compiled with this option will run almost everywhere.\n The temporary results are computed in 80bit precision instead of precision\n specified by the type resulting in slightly different results compared to most\n-of other chips. See @option{-ffloat-store} for more detailed description.\n+of other chips.  See @option{-ffloat-store} for more detailed description.\n \n This is the default choice for i386 compiler.\n \n@@ -8454,7 +8454,7 @@ functional units well resulting in instable performance.\n \n @item -masm=@var{dialect}\n @opindex masm=@var{dialect}\n-Output asm instructions using selected @var{dialect}. Supported choices are\n+Output asm instructions using selected @var{dialect}.  Supported choices are\n @samp{intel} or @samp{att} (the default one).\n \n @item -mieee-fp\n@@ -8521,7 +8521,7 @@ without that switch.\n @itemx -m128bit-long-double\n @opindex m96bit-long-double\n @opindex m128bit-long-double\n-These switches control the size of @code{long double} type. The i386\n+These switches control the size of @code{long double} type.  The i386\n application binary interface specifies the size to be 96 bits,\n so @option{-m96bit-long-double} is the default in 32 bit mode.\n \n@@ -9416,7 +9416,7 @@ Equivalent to @samp{-march=mips64}.\n @itemx -mno-mips16\n @opindex mips16\n @opindex mno-mips16\n-Use (do not use) the MIPS16 ISA.\n+Use (do not use) the MIPS16 ISA@.\n \n @item -mabi=32\n @itemx -mabi=o64\n@@ -9451,7 +9451,7 @@ Generate (do not generate) SVR4-style position-independent code.\n Lift (do not lift) the usual restrictions on the size of the global\n offset table.\n \n-GCC normally uses a single instruction to load values from the GOT.\n+GCC normally uses a single instruction to load values from the GOT@.\n While this is relatively efficient, it will only work if the GOT\n is smaller than about 64k.  Anything larger will cause the linker\n to report an error such as:\n@@ -9521,7 +9521,7 @@ support to be enabled.\n @itemx -mno-mips3d\n @opindex mips3d\n @opindex mno-mips3d\n-Use (do not use) the MIPS-3D ASE.  @xref{MIPS-3D Built-in Functions}.\n+Use (do not use) the MIPS-3D ASE@.  @xref{MIPS-3D Built-in Functions}.\n The option @option{-mips3d} implies @option{-mpaired-single}.\n \n @item -mint64\n@@ -9607,7 +9607,7 @@ MIPS systems check for division by zero by generating either a\n conditional trap or a break instruction.  Using traps results in\n smaller code, but is only supported on MIPS II and later.  Also, some\n versions of the Linux kernel have a bug that prevents trap from\n-generating the proper signal (SIGFPE).  Use @option{-mdivide-traps} to\n+generating the proper signal (@code{SIGFPE}).  Use @option{-mdivide-traps} to\n allow conditional traps on architectures that support them and\n @option{-mdivide-breaks} to force the use of breaks.\n \n@@ -9640,7 +9640,7 @@ This option has no effect on abicalls code.  The default is\n @opindex mmad\n @opindex mno-mad\n Enable (disable) use of the @code{mad}, @code{madu} and @code{mul}\n-instructions, as provided by the R4650 ISA.\n+instructions, as provided by the R4650 ISA@.\n \n @item -mfused-madd\n @itemx -mno-fused-madd\n@@ -10115,11 +10115,11 @@ Do not pretend that branches are expensive.  This is the default.\n \n @item -msplit\n @opindex msplit\n-Generate code for a system with split I&D.\n+Generate code for a system with split I&D@.\n \n @item -mno-split\n @opindex mno-split\n-Generate code for a system without split I&D.  This is the default.\n+Generate code for a system without split I&D@.  This is the default.\n \n @item -munix-asm\n @opindex munix-asm\n@@ -10307,7 +10307,7 @@ ABI@.\n \n @item -mabi=no-spe\n @opindex mabi=no-spe\n-Disable Booke SPE ABI extensions for the current ABI.\n+Disable Booke SPE ABI extensions for the current ABI@.\n \n @item -misel=@var{yes/no}\n @itemx -misel\n@@ -10426,7 +10426,7 @@ On AIX, Darwin, and 64-bit PowerPC GNU/Linux, the option\n @option{-malign-natural} overrides the ABI-defined alignment of larger\n types, such as floating-point doubles, on their natural size-based boundary.\n The option @option{-malign-power} instructs GCC to follow the ABI-specified\n-alignment rules.  GCC defaults to the standard alignment defined in the ABI.\n+alignment rules.  GCC defaults to the standard alignment defined in the ABI@.\n \n @item -msoft-float\n @itemx -mhard-float\n@@ -10574,7 +10574,7 @@ by the target during instruction scheduling.  The argument\n @item -minsert-sched-nops=@var{scheme}\n @opindex minsert-sched-nops\n This option controls which nop insertion scheme will be used during\n-the second scheduling pass. The argument @var{scheme} takes one of the\n+the second scheduling pass.  The argument @var{scheme} takes one of the\n following values:\n @var{no}: Don't insert nops.\n @var{pad}: Pad with nops any dispatch group which has vacant issue slots,\n@@ -10637,7 +10637,7 @@ the current ABI@.\n \n @item -mabi=no-altivec\n @opindex mabi=no-altivec\n-Disable AltiVec ABI extensions for the current ABI.\n+Disable AltiVec ABI extensions for the current ABI@.\n \n @item -mprototype\n @itemx -mno-prototype\n@@ -10843,11 +10843,11 @@ If one of the other options is present the backchain pointer is placed either\n on top of the stack frame  (@option{-mkernel-backchain}) or on\n the bottom (@option{-mbackchain}).\n Beside the different backchain location @option{-mkernel-backchain}\n-also changes stack frame layout breaking the ABI. This option\n+also changes stack frame layout breaking the ABI@.  This option\n is intended to be used for code which internally needs a backchain but has\n to get by with a limited stack size e.g.@: the linux kernel.\n Internal unwinding code not using DWARF-2 info has to be able to locate the\n-return address of a function. That will be eased be the fact that\n+return address of a function.  That will be eased be the fact that\n the return address of a function is placed two words below the backchain\n pointer.\n \n@@ -10879,7 +10879,7 @@ targets default to @option{-m64}.\n When @option{-mzarch} is specified, generate code using the\n instructions available on z/Architecture.\n When @option{-mesa} is specified, generate code using the\n-instructions available on ESA/390. Note that @option{-mesa} is\n+instructions available on ESA/390.  Note that @option{-mesa} is\n not possible with @option{-m64}.\n When generating code compliant to the GNU/Linux for S/390 ABI,\n the default is @option{-mesa}.  When generating code compliant\n@@ -10903,7 +10903,7 @@ The default is to not print debug information.\n @item -march=@var{cpu-type}\n @opindex march\n Generate code that will run on @var{cpu-type}, which is the name of a system\n-representing a certain processor type. Possible values for\n+representing a certain processor type.  Possible values for\n @var{cpu-type} are @samp{g5}, @samp{g6}, @samp{z900}, and @samp{z990}.\n When generating code using the instructions available on z/Architecture,\n the default is @option{-march=z900}.  Otherwise, the default is\n@@ -10922,7 +10922,7 @@ The default is the value used for @option{-march}.\n @opindex mno-tpf-trace\n Generate code that adds (does not add) in TPF OS specific branches to trace\n routines in the operating system.  This option is off by default, even\n-when compiling for the TPF OS.\n+when compiling for the TPF OS@.\n \n @item -mfused-madd\n @itemx -mno-fused-madd\n@@ -11251,9 +11251,9 @@ With @option{-mcpu=sparclite}, GCC generates code for the SPARClite variant of\n the SPARC architecture.  This adds the integer multiply, integer divide step\n and scan (@code{ffs}) instructions which exist in SPARClite but not in SPARC-V7.\n With @option{-mcpu=f930}, the compiler additionally optimizes it for the\n-Fujitsu MB86930 chip, which is the original SPARClite, with no FPU.  With\n+Fujitsu MB86930 chip, which is the original SPARClite, with no FPU@.  With\n @option{-mcpu=f934}, the compiler additionally optimizes it for the Fujitsu\n-MB86934 chip, which is the more recent SPARClite with FPU.\n+MB86934 chip, which is the more recent SPARClite with FPU@.\n \n With @option{-mcpu=sparclet}, GCC generates code for the SPARClet variant of\n the SPARC architecture.  This adds the integer multiply, multiply/accumulate,\n@@ -11286,7 +11286,7 @@ that select a particular cpu implementation.  Those are @samp{cypress},\n @itemx -mno-v8plus\n @opindex mv8plus\n @opindex mno-v8plus\n-With @option{-mv8plus}, GCC generates code for the SPARC-V8+ ABI.  The\n+With @option{-mv8plus}, GCC generates code for the SPARC-V8+ ABI@.  The\n difference from the V8 ABI is that the global and out registers are\n considered 64-bit wide.  This is enabled by default on Solaris in 32-bit\n mode for all SPARC-V9 processors.\n@@ -11305,7 +11305,7 @@ on SPARC-V9 processors in 64-bit environments:\n @table @gcctabopt\n @item -mlittle-endian\n @opindex mlittle-endian\n-Generate code for a processor running in little-endian mode. It is only\n+Generate code for a processor running in little-endian mode.  It is only\n available for a few configurations and most notably not on Solaris.\n \n @item -m32\n@@ -11643,7 +11643,7 @@ this option is used.\n \n @item -mv850e\n @opindex mv850e\n-Specify that the target processor is the V850E.  The preprocessor\n+Specify that the target processor is the V850E@.  The preprocessor\n constant @samp{__v850e__} will be defined if this option is used.\n \n If neither @option{-mv850} nor @option{-mv850e} nor @option{-mv850e1}\n@@ -11993,7 +11993,7 @@ position-independent.\n If supported for the target machine, emit position-independent code,\n suitable for dynamic linking and avoiding any limit on the size of the\n global offset table.  This option makes a difference on the m68k\n-and the SPARC.\n+and the SPARC@.\n \n Position-independent code requires special support, and therefore works\n only on certain machines.\n@@ -12054,7 +12054,7 @@ three-way choice.\n @item -fpack-struct[=@var{n}]\n @opindex fpack-struct\n Without a value specified, pack all structure members together without\n-holes. When a value is specified (which must be a small power of two), pack\n+holes.  When a value is specified (which must be a small power of two), pack\n structure members according to this value, representing the maximum\n alignment (that is, objects with default alignment requirements larger than\n this will be output potentially unaligned at the next fitting location.\n@@ -12189,26 +12189,26 @@ usage so the only other commonly used option will be @code{hidden}.\n The default if @option{-fvisibility} isn't specified is\n @code{default}, i.e., make every\n symbol public---this causes the same behavior as previous versions of\n-GCC.\n+GCC@.\n \n A good explanation of the benefits offered by ensuring ELF\n symbols have the correct visibility is given by ``How To Write\n Shared Libraries'' by Ulrich Drepper (which can be found at\n @w{@uref{http://people.redhat.com/~drepper/}})---however a superior\n solution made possible by this option to marking things hidden when\n the default is public is to make the default hidden and mark things\n-public. This is the norm with DLL's on Windows and with @option{-fvisibility=hidden}\n+public.  This is the norm with DLL's on Windows and with @option{-fvisibility=hidden}\n and @code{__attribute__ ((visibility(\"default\")))} instead of\n @code{__declspec(dllexport)} you get almost identical semantics with\n-identical syntax. This is a great boon to those working with\n+identical syntax.  This is a great boon to those working with\n cross-platform projects.\n \n For those adding visibility support to existing code, you may find\n-@samp{#pragma GCC visibility} of use. This works by you enclosing\n+@samp{#pragma GCC visibility} of use.  This works by you enclosing\n the declarations you wish to set visibility for with (for example)\n @samp{#pragma GCC visibility push(hidden)} and\n-@samp{#pragma GCC visibility pop}. These can be nested up to sixteen\n-times. Bear in mind that symbol visibility should be viewed @strong{as\n+@samp{#pragma GCC visibility pop}.  These can be nested up to sixteen\n+times.  Bear in mind that symbol visibility should be viewed @strong{as\n part of the API interface contract} and thus all new code should\n always specify visibility when it is not the default ie; declarations\n only for use within the local DSO should @strong{always} be marked explicitly"}, {"sha": "8d71f957d7dd95f418b73c0dace1f422aaec069a", "filename": "gcc/doc/libgcc.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Flibgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Flibgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flibgcc.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -17,7 +17,7 @@ integer multiply and divide on some machines, and all floating-point\n operations on other machines.  @code{libgcc} also includes routines\n for exception handling, and a handful of miscellaneous operations.\n \n-Some of these routines can be defined in mostly machine-independent C.\n+Some of these routines can be defined in mostly machine-independent C@.\n Others must be hand-written in assembly language for each processor\n that needs them.\n \n@@ -267,7 +267,7 @@ These functions return the quotient of @var{a} and @var{b}; that is,\n @deftypefnx {Runtime Function} {long double} __negtf2 (long double @var{a})\n @deftypefnx {Runtime Function} {long double} __negxf2 (long double @var{a})\n These functions return the negation of @var{a}.  They simply flip the\n-sign bit, so they can produce negative zero and negative NaN.\n+sign bit, so they can produce negative zero and negative NaN@.\n @end deftypefn\n \n @subsection Conversion functions\n@@ -391,7 +391,7 @@ Under the hood, all of these routines are implemented as\n \n @noindent\n where @var{E} is a constant chosen to give the proper behavior for\n-NaN.  Thus, the meaning of the return value is different for each set.\n+NaN@.  Thus, the meaning of the return value is different for each set.\n Do not rely on this implementation; only the semantics documented\n below are guaranteed.\n "}, {"sha": "6f3d8f3e41b02e4b6aa2528103fe7febedb7d92c", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -786,7 +786,7 @@ means exactly what\n would mean, if the machine-description reader accepted @samp{:P}\n mode suffixes.  Unfortunately, it cannot, because @code{Pmode} is an\n alias for some other mode, and might vary with machine-specific\n-options. @xref{Misc}.\n+options.  @xref{Misc}.\n @end defun\n \n @defun scratch_operand\n@@ -1826,12 +1826,12 @@ System V Release 4 small data area reference\n @table @code\n @item q\n @samp{a}, @code{b}, @code{c}, or @code{d} register for the i386.\n-For x86-64 it is equivalent to @samp{r} class. (for 8-bit instructions that\n-do not use upper halves)\n+For x86-64 it is equivalent to @samp{r} class (for 8-bit instructions that\n+do not use upper halves).\n \n @item Q\n-@samp{a}, @code{b}, @code{c}, or @code{d} register. (for 8-bit instructions,\n-that do use upper halves)\n+@samp{a}, @code{b}, @code{c}, or @code{d} register (for 8-bit instructions,\n+that do use upper halves).\n \n @item R\n Legacy register---equivalent to @code{r} class in i386 mode.\n@@ -2297,19 +2297,19 @@ Floating-point register on the SPARC-V8 architecture and\n lower floating-point register on the SPARC-V9 architecture.\n \n @item e\n-Floating-point register. It is equivalent to @samp{f} on the\n+Floating-point register.  It is equivalent to @samp{f} on the\n SPARC-V8 architecture and contains both lower and upper\n floating-point registers on the SPARC-V9 architecture.\n \n @item c\n Floating-point condition code register.\n \n @item d\n-Lower floating-point register. It is only valid on the SPARC-V9\n+Lower floating-point register.  It is only valid on the SPARC-V9\n architecture when the Visual Instruction Set is available.\n \n @item b\n-Floating-point register. It is only valid on the SPARC-V9 architecture\n+Floating-point register.  It is only valid on the SPARC-V9 architecture\n when the Visual Instruction Set is available.\n \n @item h\n@@ -3061,7 +3061,7 @@ generating the instruction.\n \n @cindex @code{parity@var{m}2} instruction pattern\n @item @samp{parity@var{m}2}\n-Store into operand 0 the parity of @var{x}, i.@:e. the number of 1-bits\n+Store into operand 0 the parity of @var{x}, i.e.@: the number of 1-bits\n in @var{x} modulo 2.  @var{m} is the mode of operand 0; operand 1's mode\n is specified by the instruction pattern, and the compiler will convert\n the operand to that mode before generating the instruction.\n@@ -4764,7 +4764,7 @@ having to ensure the two patterns' templates match.\n @findex include\n The @code{include} pattern tells the compiler tools where to\n look for patterns that are in files other than in the file\n-@file{.md}. This is used only at build time and there is no preprocessing allowed.\n+@file{.md}.  This is used only at build time and there is no preprocessing allowed.\n \n It looks like:\n \n@@ -4783,7 +4783,7 @@ For example:\n @end smallexample\n \n Where @var{pathname} is a string that specifies the location of the file,\n-specifies the include file to be in @file{gcc/config/target/filestuff}. The\n+specifies the include file to be in @file{gcc/config/target/filestuff}.  The\n directory @file{gcc/config/target} is regarded as the default directory.\n \n "}, {"sha": "5ddb42f9faf1696be1731b00082bd02f3fa8420c", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -68,7 +68,7 @@ invoked when (1) it is certain that the function is used, (2)\n warning flags specified by the user require some amount of\n compilation in order to honor, (3) the language indicates that\n semantic analysis is not complete until gimplification occurs.\n-Hum... this sounds overly complicated.  Perhaps we should just\n+Hum@dots{} this sounds overly complicated.  Perhaps we should just\n have the front end gimplify always; in most cases it's only one\n function call.\n \n@@ -135,7 +135,7 @@ The callback should examine the expression in question and return\n @code{GS_UNHANDLED} if the expression is not a language specific\n construct that requires attention.  Otherwise it should alter the\n expression in some way to such that forward progress is made toward\n-producing valid GIMPLE.  If the callback is certain that the\n+producing valid GIMPLE@.  If the callback is certain that the\n transformation is complete and the expression is valid GIMPLE, it\n should return @code{GS_ALL_DONE}.  Otherwise it should return\n @code{GS_OK}, which will cause the expression to be processed again.\n@@ -293,7 +293,7 @@ seeing if the result can be simplified.  It is located in\n @item Copy Renaming\n \n This pass attempts to change the name of compiler temporaries involved in\n-copy operations such that SSA->normal can coalesce the copy away. When compiler\n+copy operations such that SSA->normal can coalesce the copy away.  When compiler\n temporaries are copies of user variables, it also renames the compiler\n temporary to the user variable resulting in better use of user symbols.  It is\n located in @file{tree-ssa-copyrename.c} and is described by\n@@ -396,10 +396,10 @@ The optimizations also use various utility functions contained in\n \n This pass applies if-conversion to simple loops to help vectorizer.\n We identify if convertable loops, if-convert statements and merge\n-basic blocks in one big block. The idea is to present loop in such\n+basic blocks in one big block.  The idea is to present loop in such\n form so that vectorizer can have one to one mapping between statements\n-and available vector operations. This patch re-introduces COND_EXPR\n-at GIMPLE level. This pass is located in @file{tree-if-conv.c}.\n+and available vector operations.  This patch re-introduces COND_EXPR\n+at GIMPLE level.  This pass is located in @file{tree-if-conv.c}.\n \n @item Conditional constant propagation\n \n@@ -437,7 +437,7 @@ in @file{tree-ssa-dce.c} and is described by @code{pass_cd_dce}.\n This pass identifies function calls that may be rewritten into\n jumps.  No code transformation is actually applied here, but the\n data and control flow problem is solved.  The code transformation\n-requires target support, and so is delayed until RTL.  In the\n+requires target support, and so is delayed until RTL@.  In the\n meantime @code{CALL_EXPR_TAILCALL} is set indicating the possibility.\n The pass is located in @file{tree-tailcall.c} and is described by\n @code{pass_tail_calls}.  The RTL transformation is handled by\n@@ -468,7 +468,7 @@ is described by @code{pass_mudflap_2}.\n \n This pass rewrites the function such that it is in normal form.  At\n the same time, we eliminate as many single-use temporaries as possible,\n-so the intermediate language is no longer GIMPLE, but GENERIC.  The\n+so the intermediate language is no longer GIMPLE, but GENERIC@.  The\n pass is located in @file{tree-ssa.c} and is described by @code{pass_del_ssa}.\n @end itemize\n \n@@ -555,7 +555,7 @@ This pass is seriously out-of-date and is supposed to be replaced by\n a new one described below in near future.\n \n A second loop optimization pass takes care of basic block level\n-optimizations---unrolling, peeling and unswitching loops. The source\n+optimizations---unrolling, peeling and unswitching loops.  The source\n files are @file{cfgloopanal.c} and @file{cfgloopmanip.c} containing\n generic loop analysis and manipulation code, @file{loop-init.c} with\n initialization and finalization code, @file{loop-unswitch.c} for loop"}, {"sha": "c5f8048fabeba9c118128511068b18d53ba224ad", "filename": "gcc/doc/portability.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fportability.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fportability.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fportability.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -11,7 +11,7 @@\n GCC itself aims to be portable to any machine where @code{int} is at least\n a 32-bit type.  It aims to target machines with a flat (non-segmented) byte\n addressed data address space (the code address space can be separate).\n-Target ABIs may have 8, 16, 32 or 64-bit @code{int} type. @code{char}\n+Target ABIs may have 8, 16, 32 or 64-bit @code{int} type.  @code{char}\n can be wider than 8 bits.\n \n GCC gets most of the information about the target machine from a machine"}, {"sha": "287d9f4ad94a518e9dead2b0c314d3c0fda775ab", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -72,9 +72,9 @@ commonly found inside @code{symbol_ref} expressions, but they appear in\n other contexts in the RTL expressions that make up machine descriptions.\n \n In a machine description, strings are normally written with double\n-quotes, as you would in C.  However, strings in machine descriptions may\n+quotes, as you would in C@.  However, strings in machine descriptions may\n extend over many lines, which is invalid C, and adjacent string\n-constants are not concatenated as they are in C.  Any string constant\n+constants are not concatenated as they are in C@.  Any string constant\n may be surrounded with a single set of parentheses.  Sometimes this\n makes the machine description easier to read.\n \n@@ -534,7 +534,7 @@ Stored in the @code{unchanging} field and printed as @samp{/u}.\n @item INSN_ANNULLED_BRANCH_P (@var{x})\n In a @code{jump_insn}, @code{call_insn}, or @code{insn} indicates\n that the branch is an annulling one.  See the discussion under\n-@code{sequence} below. Stored in the @code{unchanging} field and\n+@code{sequence} below.  Stored in the @code{unchanging} field and\n printed as @samp{/u}.\n \n @findex INSN_DEAD_CODE_P\n@@ -808,7 +808,7 @@ the value.  Use @code{SUBREG_PROMOTED_UNSIGNED_SET} to change the value.\n Set the @code{unchanging} and @code{volatil} fields in a @code{subreg}\n to reflect zero, sign, or other extension.  If @code{volatil} is\n zero, then @code{unchanging} as nonzero means zero extension and as\n-zero means sign extension. If @code{volatil} is nonzero then some\n+zero means sign extension.  If @code{volatil} is nonzero then some\n other type of extension was done via the @code{ptr_extend} instruction.\n \n @findex SUBREG_PROMOTED_VAR_P"}, {"sha": "0ab5c52bea02f8717e38d1e18bae9c1f91e3074d", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -128,7 +128,7 @@ Subdirectories for various languages.  Directories containing a file\n the subdirectories @file{cp} (for C++), @file{objc} (for Objective-C)\n and @file{objcp} (for Objective-C++) are documented in this manual\n (@pxref{Passes, , Passes and Files of the Compiler}); those for other\n-languages are not. @xref{Front End, , Anatomy of a Language Front End},\n+languages are not.  @xref{Front End, , Anatomy of a Language Front End},\n for details of the files in these directories.\n \n @item config\n@@ -631,7 +631,7 @@ anything.\n @itemx distclean\n @itemx maintainer-clean\n The language parts of the standard GNU\n-@samp{*clean} targets. @xref{Standard Targets, , Standard Targets for\n+@samp{*clean} targets.  @xref{Standard Targets, , Standard Targets for\n Users, standards, GNU Coding Standards}, for details of the standard\n targets.  For GCC, @code{maintainer-clean} should delete\n all generated files in the source directory that are not checked into\n@@ -713,7 +713,7 @@ everything from the single @file{gcc/Makefile} is preferred.\n If defined, a space-separated list of files that should be scanned by\n gengtype.c to generate the garbage collection tables and routines for\n this language.  This excludes the files that are common to all front\n-ends. @xref{Type Information}.\n+ends.  @xref{Type Information}.\n @item need_gmp\n If defined  to @samp{yes}, this frontend requires the GMP library.\n Enables configure tests for GMP, which set @code{GMPLIBS} and\n@@ -911,18 +911,18 @@ testsuite, publicly available at\n These tests are integrated in the GCC testsuite in the\n @file{gcc/testsuite/ada/acats} directory, and\n enabled automatically when running @code{make check}, assuming\n-the Ada language has been enabled when configuring GCC.\n+the Ada language has been enabled when configuring GCC@.\n \n You can also run the Ada testsuite independently, using\n @code{make check-ada}, or run a subset of the tests by specifying which\n-chapter to run, e.g:\n+chapter to run, e.g.:\n \n @smallexample\n $ make check-ada CHAPTERS=\"c3 c9\"\n @end smallexample\n \n The tests are organized by directory, each directory corresponding to\n-a chapter of the Ada Reference Manual. So for example, c9 corresponds\n+a chapter of the Ada Reference Manual.  So for example, c9 corresponds\n to chapter 9, which deals with tasking features of the language.\n \n There is also an extra chapter called @file{gcc} containing a template for"}, {"sha": "8d22d850e3ac8b0427bced255e591b9b888dfd12", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -179,8 +179,8 @@ have additional useful information.\n \n @cindex treelang\n There is no standard for treelang, which is a sample language front end\n-for GCC. Its only purpose is as a sample for people wishing to write a\n-new language for GCC. The language is documented in\n+for GCC@.  Its only purpose is as a sample for people wishing to write a\n+new language for GCC@.  The language is documented in\n @file{gcc/treelang/treelang.texi} which can be turned into info or\n HTML format.\n "}, {"sha": "5f745bf231fa7cd7bbe1536230b143cb25a2818a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -781,7 +781,7 @@ for that option, but it will not count as an undocumented option.  The\n actual option name is made by appending @samp{-m} to the specified name.\n Non-empty description strings should be marked with @code{N_(@dots{})} for\n @command{xgettext}.  Please do not mark empty strings because the empty\n-string is reserved by GNU gettext. @code{gettext(\"\")} returns the header entry\n+string is reserved by GNU gettext.  @code{gettext(\"\")} returns the header entry\n of the message catalog with meta information, not the empty string.\n \n In addition to the description for @option{--help},\n@@ -814,7 +814,7 @@ Each subgrouping contains a string constant, that defines the option\n name, the address of a variable, a description string, and a value.\n Non-empty description strings should be marked with @code{N_(@dots{})}\n for @command{xgettext}.  Please do not mark empty strings because the\n-empty string is reserved by GNU gettext. @code{gettext(\"\")} returns the\n+empty string is reserved by GNU gettext.  @code{gettext(\"\")} returns the\n header entry of the message catalog with meta information, not the empty\n string.\n \n@@ -980,7 +980,7 @@ target to perform any target specific initialization of the\n @code{struct function} structure.  It is intended that this would be\n used to initialize the @code{machine} of that structure.\n \n-@code{struct machine_function} structures are expected to be freed by GC.\n+@code{struct machine_function} structures are expected to be freed by GC@.\n Generally, any memory that they reference must be allocated by using\n @code{ggc_alloc}, including the structure itself.\n @end deftypevar\n@@ -1538,12 +1538,12 @@ When a bit-field is inserted into a packed record, the whole size\n of the underlying type is used by one or more same-size adjacent\n bit-fields (that is, if its long:3, 32 bits is used in the record,\n and any additional adjacent long bit-fields are packed into the same\n-chunk of 32 bits. However, if the size changes, a new field of that\n-size is allocated). In an unpacked record, this is the same as using\n+chunk of 32 bits.  However, if the size changes, a new field of that\n+size is allocated).  In an unpacked record, this is the same as using\n alignment, but not equivalent when packing.\n \n If both MS bit-fields and @samp{__attribute__((packed))} are used,\n-the latter will take precedence. If @samp{__attribute__((packed))} is\n+the latter will take precedence.  If @samp{__attribute__((packed))} is\n used on a single field when MS bit-fields are in use, it will take\n precedence for that field, but the alignment of the rest of the structure\n may affect its placement.\n@@ -1604,7 +1604,7 @@ target machine.  If you don't define this, the default is one word.\n \n @defmac ADA_LONG_TYPE_SIZE\n On some machines, the size used for the Ada equivalent of the type\n-@code{long} by a native Ada compiler differs from that used by C.  In\n+@code{long} by a native Ada compiler differs from that used by C@.  In\n that situation, define this macro to be a C expression to be used for\n the size of that type.  If you don't define this, the default is the\n value of @code{LONG_TYPE_SIZE}.\n@@ -5560,7 +5560,7 @@ necessary.  Traditionally, the default costs are @code{COSTS_N_INSNS (5)}\n for multiplications, @code{COSTS_N_INSNS (7)} for division and modulus\n operations, and @code{COSTS_N_INSNS (1)} for all other operations.\n \n-When optimizing for code size, i.e@. when @code{optimize_size} is\n+When optimizing for code size, i.e.@: when @code{optimize_size} is\n nonzero, this target hook should be used to estimate the relative\n size cost of an expression, again relative to @code{COSTS_N_INSNS}.\n \n@@ -5728,7 +5728,7 @@ This hook is executed by the scheduler after function level initializations.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_FINISH_GLOBAL (FILE *@var{file}, int @var{verbose})\n-This is the cleanup hook corresponding to TARGET_SCHED_INIT_GLOBAL.\n+This is the cleanup hook corresponding to @code{TARGET_SCHED_INIT_GLOBAL}.\n @var{file} is either a null pointer, or a stdio stream to write any debug output to.\n @var{verbose} is the verbose level provided by @option{-fsched-verbose-@var{n}}.\n @end deftypefn\n@@ -6911,7 +6911,7 @@ should be excluded; on many systems, the letter @samp{L} at the\n beginning of a label has this effect.  You should find out what\n convention your system uses, and follow it.\n \n-The default version of this function utilizes ASM_GENERATE_INTERNAL_LABEL.\n+The default version of this function utilizes @code{ASM_GENERATE_INTERNAL_LABEL}.\n @end deftypefn\n \n @defmac ASM_OUTPUT_DEBUG_LABEL (@var{stream}, @var{prefix}, @var{num})\n@@ -7571,13 +7571,13 @@ the jump-table.\n @end defmac\n \n @deftypefn {Target Hook} void TARGET_ASM_EMIT_UNWIND_LABEL (@var{stream}, @var{decl}, @var{for_eh}, @var{empty})\n-This target hook emits a label at the beginning of each FDE.  It\n+This target hook emits a label at the beginning of each FDE@.  It\n should be defined on targets where FDEs need special labels, and it\n should write the appropriate label, for the FDE associated with the\n function declaration @var{decl}, to the stdio stream @var{stream}.\n The third argument, @var{for_eh}, is a boolean: true if this is for an\n exception table.  The fourth argument, @var{empty}, is a boolean:\n-true if this is a placeholder label for an omitted FDE.\n+true if this is a placeholder label for an omitted FDE@.\n \n The default is that FDEs are not given nonlocal labels.\n @end deftypefn\n@@ -8031,7 +8031,7 @@ output an @code{N_FUN} entry for the function @var{decl}.\n @defmac DBX_OUTPUT_SOURCE_LINE (@var{stream}, @var{line}, @var{counter})\n A C statement to output DBX debugging information before code for line\n number @var{line} of the current source file to the stdio stream\n-@var{stream}. @var{counter} is the number of time the macro was\n+@var{stream}.  @var{counter} is the number of time the macro was\n invoked, including the current invocation; it is intended to generate\n unique labels in the assembly output.\n \n@@ -8372,21 +8372,21 @@ be switched into prior to the execution of @var{insn}.\n \n @defmac MODE_AFTER (@var{mode}, @var{insn})\n If this macro is defined, it is evaluated for every @var{insn} during\n-mode switching. It determines the mode that an insn results in (if\n+mode switching.  It determines the mode that an insn results in (if\n different from the incoming mode).\n @end defmac\n \n @defmac MODE_ENTRY (@var{entity})\n If this macro is defined, it is evaluated for every @var{entity} that needs\n-mode switching. It should evaluate to an integer, which is a mode that\n-@var{entity} is assumed to be switched to at function entry. If @code{MODE_ENTRY}\n+mode switching.  It should evaluate to an integer, which is a mode that\n+@var{entity} is assumed to be switched to at function entry.  If @code{MODE_ENTRY}\n is defined then @code{MODE_EXIT} must be defined.\n @end defmac\n \n @defmac MODE_EXIT (@var{entity})\n If this macro is defined, it is evaluated for every @var{entity} that needs\n-mode switching. It should evaluate to an integer, which is a mode that\n-@var{entity} is assumed to be switched to at function exit. If @code{MODE_EXIT}\n+mode switching.  It should evaluate to an integer, which is a mode that\n+@var{entity} is assumed to be switched to at function exit.  If @code{MODE_EXIT}\n is defined then @code{MODE_ENTRY} must be defined.\n @end defmac\n \n@@ -8522,7 +8522,7 @@ be preserved even if it does not appear that the register is used again\n later in the function.\n \n Another note: according to the MIPS spec, coprocessor 1 (if present) is\n-the FPU.  One accesses COP1 registers through standard mips\n+the FPU@.  One accesses COP1 registers through standard mips\n floating-point support; they are not included in this mechanism.\n \n There is one macro used in defining the MIPS coprocessor interface which\n@@ -8582,7 +8582,7 @@ This hook returns the size of the cookie to use when allocating an array\n whose elements have the indicated @var{type}.  Assumes that it is already\n known that a cookie is needed.  The default is\n @code{max(sizeof (size_t), alignof(type))}, as defined in section 2.7 of the\n-IA64/Generic C++ ABI.\n+IA64/Generic C++ ABI@.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_CXX_COOKIE_HAS_SIZE (void)\n@@ -9000,7 +9000,7 @@ Note that regardless of this macro the ``definedness'' of @code{clz}\n and @code{ctz} at zero do @emph{not} extend to the builtin functions\n visible to the user.  Thus one may be free to adjust the value at will\n to match the target expansion of these operations without fear of\n-breaking the API.\n+breaking the API@.\n @end defmac\n \n @defmac Pmode\n@@ -9113,11 +9113,11 @@ When a bit-field is inserted into a packed record, the whole size\n of the underlying type is used by one or more same-size adjacent\n bit-fields (that is, if its long:3, 32 bits is used in the record,\n and any additional adjacent long bit-fields are packed into the same\n-chunk of 32 bits. However, if the size changes, a new field of that\n+chunk of 32 bits.  However, if the size changes, a new field of that\n size is allocated).\n \n If both MS bit-fields and @samp{__attribute__((packed))} are used,\n-the latter will take precedence. If @samp{__attribute__((packed))} is\n+the latter will take precedence.  If @samp{__attribute__((packed))} is\n used on a single field when MS bit-fields are in use, it will take\n precedence for that field, but the alignment of the rest of the structure\n may affect its placement.\n@@ -9477,7 +9477,7 @@ that are different from @option{-I}.\n @deftypefn {Target Hook} bool TARGET_USE_LOCAL_THUNK_ALIAS_P (tree @var{fndecl})\n This target hook returns @code{true} if it is safe to use a local alias\n for a virtual function @var{fndecl} when constructing thunks,\n-@code{false} otherwise. By default, the hook returns @code{true} for all\n+@code{false} otherwise.  By default, the hook returns @code{true} for all\n functions, if a target supports aliases (i.e.@: defines\n @code{ASM_OUTPUT_DEF}), @code{false} otherwise,\n @end deftypefn"}, {"sha": "be391c29936dcbc660fddb76f233088c4a3c06c3", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -23,7 +23,7 @@ GIMPLE and RTL are used to optimize the program.  GIMPLE is used for\n target and language independent optimizations (e.g., inlining,\n constant propagation, tail call elimination, redundancy elimination,\n etc).  Much like GENERIC, GIMPLE is a language independent, tree based\n-representation. However, it differs from GENERIC in that the GIMPLE\n+representation.  However, it differs from GENERIC in that the GIMPLE\n grammar is more restrictive: expressions contain no more than 3\n operands (except function calls), it has no control flow structures\n and expressions with side-effects are only allowed on the right hand\n@@ -53,10 +53,10 @@ The purpose of GENERIC is simply to provide a language-independent way of\n representing an entire function in trees.  To this end, it was necessary to\n add a few new tree codes to the back end, but most everything was already\n there.  If you can express it with the codes in @code{gcc/tree.def}, it's\n-GENERIC.\n+GENERIC@.\n \n Early on, there was a great deal of debate about how to think about\n-statements in a tree IL.  In GENERIC, a statement is defined as any\n+statements in a tree IL@.  In GENERIC, a statement is defined as any\n expression whose value, if any, is ignored.  A statement will always\n have @code{TREE_SIDE_EFFECTS} set (or it will be discarded), but a\n non-statement expression may also have side effects.  A\n@@ -72,10 +72,10 @@ off to @code{tree_rest_of_compilation}, but this seems inelegant.\n If necessary, a front end can use some language-dependent tree codes\n in its GENERIC representation, so long as it provides a hook for\n converting them to GIMPLE and doesn't expect them to work with any\n-(hypothetical) optimizers that run before the conversion to GIMPLE.\n+(hypothetical) optimizers that run before the conversion to GIMPLE@.\n The intermediate representation used while parsing C and C++ looks\n very little like GENERIC, but the C and C++ gimplifier hooks are\n-perfectly happy to take it as input and spit out GIMPLE.\n+perfectly happy to take it as input and spit out GIMPLE@.\n \n @node GIMPLE\n @section GIMPLE\n@@ -129,22 +129,22 @@ The tree representation of a function is stored in\n If a front end wants to include language-specific tree codes in the tree\n representation which it provides to the back end, it must provide a\n definition of @code{LANG_HOOKS_GIMPLIFY_EXPR} which knows how to\n-convert the front end trees to GIMPLE.  Usually such a hook will involve\n-much of the same code for expanding front end trees to RTL.  This function\n+convert the front end trees to GIMPLE@.  Usually such a hook will involve\n+much of the same code for expanding front end trees to RTL@.  This function\n can return fully lowered GIMPLE, or it can return GENERIC trees and let the\n main gimplifier lower them the rest of the way; this is often simpler.\n \n The C and C++ front ends currently convert directly from front end\n trees to GIMPLE, and hand that off to the back end rather than first\n-converting to GENERIC.  Their gimplifier hooks know about all the\n+converting to GENERIC@.  Their gimplifier hooks know about all the\n @code{_STMT} nodes and how to convert them to GENERIC forms.  There\n was some work done on a genericization pass which would run first, but\n the existence of @code{STMT_EXPR} meant that in order to convert all\n of the C statements into GENERIC equivalents would involve walking the\n entire tree anyway, so it was simpler to lower all the way.  This\n might change in the future if someone writes an optimization pass\n which would work better with higher-level trees, but currently the\n-optimizers all expect GIMPLE.\n+optimizers all expect GIMPLE@.\n \n A front end which wants to use the tree optimizers (and already has\n some sort of whole-function tree representation) only needs to provide\n@@ -293,8 +293,8 @@ Most statements will be assignment statements, represented by\n @code{MODIFY_EXPR}.  A @code{CALL_EXPR} whose value is ignored can\n also be a statement.  No other C expressions can appear at statement level;\n a reference to a volatile object is converted into a @code{MODIFY_EXPR}.\n-In GIMPLE form, type of @code{MODIFY_EXPR} is not meaningful. Instead, use type\n-of LHS or RHS.\n+In GIMPLE form, type of @code{MODIFY_EXPR} is not meaningful.  Instead, use type\n+of LHS or RHS@.\n \n There are also several varieties of complex statements.\n \n@@ -337,7 +337,7 @@ syntactic blocks in the source code, since several C++ constructs have\n implicit scopes associated with them.  On the other hand, although the C++\n front end uses pseudo-scopes to handle cleanups for objects with\n destructors, these don't translate into the GIMPLE form; multiple\n-declarations at the same level use the same BIND_EXPR.\n+declarations at the same level use the same @code{BIND_EXPR}.\n \n @node Statement Sequences\n @subsubsection Statement Sequences\n@@ -752,12 +752,12 @@ variable @code{a}.  Real definition are also known as @dfn{killing\n definitions}.  Similarly, the use of @code{a} reads all its bits.\n \n In contrast, virtual operands are used with variables that can have\n-a partial or ambiguous reference. This includes structures, arrays,\n-globals, and aliased variables. In these cases, we have two types of\n-definitions. For globals, structures, and arrays, we can determine from\n+a partial or ambiguous reference.  This includes structures, arrays,\n+globals, and aliased variables.  In these cases, we have two types of\n+definitions.  For globals, structures, and arrays, we can determine from\n a statement whether a variable of these types has a killing definition.\n If the variable does, then the statement is marked as having a\n-@dfn{must definition} of that variable. However, if a statement is only\n+@dfn{must definition} of that variable.  However, if a statement is only\n defining a part of the variable (i.e.@: a field in a structure), or if we\n know that a statement might define the variable but we cannot say for sure,\n then we mark that statement as having a @dfn{may definition}.  For\n@@ -815,7 +815,7 @@ incorrect assumptions about them.\n Operands are collected by @file{tree-ssa-operands.c}.  They are stored\n inside each statement's annotation and can be accessed with\n @code{DEF_OPS}, @code{USE_OPS}, @code{V_MAY_DEF_OPS},\n-@code{V_MUST_DEF_OPS} and @code{VUSE_OPS}. The following are all the\n+@code{V_MUST_DEF_OPS} and @code{VUSE_OPS}.  The following are all the\n accessor macros available to access USE operands.  To access all the\n other operand arrays, just change the name accordingly:\n \n@@ -964,7 +964,7 @@ So if you want to look at the use pointers for all the @code{USE} and\n \n The @code{_TREE_} macro is basically the same as the @code{USE} and\n @code{DEF} macros, only with the use or def dereferenced via\n-@code{USE_FROM_PTR (use_p)} and @code{DEF_FROM_PTR (def_p)}. Since we\n+@code{USE_FROM_PTR (use_p)} and @code{DEF_FROM_PTR (def_p)}.  Since we\n aren't using operand pointers, use and defs flags can be mixed.\n \n @smallexample\n@@ -979,10 +979,10 @@ aren't using operand pointers, use and defs flags can be mixed.\n \n Note that @code{V_MAY_DEFS} are broken into 2 flags, one for the\n @code{DEF} portion (@code{SSA_OP_VMAYDEF}) and one for the USE portion\n-(@code{SSA_OP_VMAYUSE}). If all you want to look at are the\n+(@code{SSA_OP_VMAYUSE}).  If all you want to look at are the\n @code{V_MAY_DEFS} together, there is a fourth iterator macro for this,\n which returns both a def_operand_p and a use_operand_p for each\n-@code{V_MAY_DEF} in the statement. Note that you don't need any flags for\n+@code{V_MAY_DEF} in the statement.  Note that you don't need any flags for\n this one.\n \n @smallexample\n@@ -1009,8 +1009,8 @@ documentation in @file{tree-ssa-operands.h}.\n Most of the tree optimizers rely on the data flow information provided\n by the Static Single Assignment (SSA) form.  We implement the SSA form\n as described in @cite{R. Cytron, J. Ferrante, B. Rosen, M. Wegman, and\n-K. Zadeck. Efficiently Computing Static Single Assignment Form and the\n-Control Dependence Graph. ACM Transactions on Programming Languages\n+K. Zadeck.  Efficiently Computing Static Single Assignment Form and the\n+Control Dependence Graph.  ACM Transactions on Programming Languages\n and Systems, 13(4):451-490, October 1991}.\n \n The SSA form is based on the premise that program variables are\n@@ -1063,7 +1063,7 @@ The following macros can be used to examine PHI nodes\n \n @defmac\tPHI_RESULT (@var{phi})\n Returns the @code{SSA_NAME} created by PHI node @var{phi} (i.e.,\n-@var{phi}'s LHS).\n+@var{phi}'s LHS)@.\n @end defmac\n \n @defmac\tPHI_NUM_ARGS (@var{phi})\n@@ -1218,8 +1218,8 @@ the variables pointed-to by P_i (and its memory tag) also escape.\n \n We have two classes of memory tags.  Memory tags associated with\n the pointed-to data type of the pointers in the program.  These\n-tags are called ``type memory tag'' (TMT).  The other class are\n-those associated with SSA_NAMEs, called ``name memory tag'' (NMT).\n+tags are called ``type memory tag'' (TMT)@.  The other class are\n+those associated with SSA_NAMEs, called ``name memory tag'' (NMT)@.\n The basic idea is that when adding operands for an INDIRECT_REF\n *P_i, we will first check whether P_i has a name tag, if it does\n we use it, because that will have more precise aliasing"}, {"sha": "58a46f990d1744d237909d518d6b4b6dd0ddc028", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=8a36672b01cc7b4d693b6fba1e3f3ec8debd72cf", "patch": "@@ -205,15 +205,15 @@ the application linked with @file{libstdc++.a} must include the\n @option{-Wl,-brtl} flag on the link line.  G++ cannot impose this\n because this option may interfere with the semantics of the user\n program and users may not always use @samp{g++} to link his or her\n-application. Applications are not required to use the\n+application.  Applications are not required to use the\n @option{-Wl,-brtl} flag on the link line---the rest of the\n @file{libstdc++.a} library which is not dependent on the symbol\n merging semantics will continue to function correctly.\n \n @item\n An application can interpose its own definition of functions for\n functions invoked by @file{libstdc++.a} with ``runtime-linking''\n-enabled on AIX.  To accomplish this the application must be linked\n+enabled on AIX@.  To accomplish this the application must be linked\n with ``runtime-linking'' option and the functions explicitly must be\n exported by the application (@option{-Wl,-brtl,-bE:exportfile}).\n \n@@ -222,9 +222,9 @@ AIX on the RS/6000 provides support (NLS) for environments outside of\n the United States.  Compilers and assemblers use NLS to support\n locale-specific representations of various objects including\n floating-point numbers (@samp{.} vs @samp{,} for separating decimal\n-fractions). There have been problems reported where the library linked\n+fractions).  There have been problems reported where the library linked\n with GCC does not produce the same floating-point formats that the\n-assembler accepts. If you have this problem, set the @env{LANG}\n+assembler accepts.  If you have this problem, set the @env{LANG}\n environment variable to @samp{C} or @samp{En_US}.\n \n @item\n@@ -770,7 +770,7 @@ called two-stage (or dependent) name lookup.  G++ implements it\n since version 3.4.\n \n Two-stage name lookup sometimes leads to situations with behavior\n-different from non-template codes. The most common is probably this:\n+different from non-template codes.  The most common is probably this:\n \n @smallexample\n   template <typename T> struct Base @{\n@@ -795,7 +795,7 @@ you need to defer lookup until instantiation time, at which the base\n class is known.  For this, you need to access @code{i} in a dependent\n context, by either using @code{this->i} (remember that @code{this} is of\n type @code{Derived<T>*}, so is obviously dependent), or using\n-@code{Base<T>::i}. Alternatively, @code{Base<T>::i} might be brought\n+@code{Base<T>::i}.  Alternatively, @code{Base<T>::i} might be brought\n into scope by a @code{using}-declaration.\n \n Another, similar example involves calling member functions of a base"}]}