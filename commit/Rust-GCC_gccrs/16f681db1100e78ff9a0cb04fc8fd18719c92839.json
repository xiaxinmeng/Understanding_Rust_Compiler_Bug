{"sha": "16f681db1100e78ff9a0cb04fc8fd18719c92839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZmNjgxZGIxMTAwZTc4ZmY5YTBjYjA0ZmM4ZmQxODcxOWM5MjgzOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-06T09:54:09Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-06T09:54:09Z"}, "message": "[multiple changes]\n\n 2017-11-06  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69739\n\t* trans-expr.c (gfc_map_intrinsic_function): Return false for\n\tbounds without the DIM argument instead of ICEing.\n\n2017-11-06  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69739\n\t* gfortran.dg/pr69739.f90: New test.\n\nFrom-SVN: r254441", "tree": {"sha": "5e5da5aa203a1cdf313384711279f98b8ccb70a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e5da5aa203a1cdf313384711279f98b8ccb70a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16f681db1100e78ff9a0cb04fc8fd18719c92839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f681db1100e78ff9a0cb04fc8fd18719c92839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f681db1100e78ff9a0cb04fc8fd18719c92839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f681db1100e78ff9a0cb04fc8fd18719c92839/comments", "author": null, "committer": null, "parents": [{"sha": "19520957ad27c591e888a82d8dd30cb5fccb3896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19520957ad27c591e888a82d8dd30cb5fccb3896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19520957ad27c591e888a82d8dd30cb5fccb3896"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "00448aa98b9b3bf231a1dc8deb167bc4f2dfc10e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=16f681db1100e78ff9a0cb04fc8fd18719c92839", "patch": "@@ -1,3 +1,9 @@\n+ 2017-11-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69739\n+\t* trans-expr.c (gfc_map_intrinsic_function): Return false for\n+\tbounds without the DIM argument instead of ICEing.\n+\n 2017-11-06  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/82404"}, {"sha": "e4d45ac8d1d8469edf311f1f2b7ddee74f7d1c81", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=16f681db1100e78ff9a0cb04fc8fd18719c92839", "patch": "@@ -4178,9 +4178,7 @@ gfc_map_intrinsic_function (gfc_expr *expr, gfc_interface_mapping *mapping)\n       if (arg2 && arg2->expr_type == EXPR_CONSTANT)\n \td = mpz_get_si (arg2->value.integer) - 1;\n       else\n-\t/* TODO: If the need arises, this could produce an array of\n-\t   ubound/lbounds.  */\n-\tgcc_unreachable ();\n+\treturn false;\n \n       if (expr->value.function.isym->id == GFC_ISYM_LBOUND)\n \t{"}, {"sha": "8232b4a4add0b4f2e67fec7e61e867e8d617120d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16f681db1100e78ff9a0cb04fc8fd18719c92839", "patch": "@@ -1,3 +1,8 @@\n+2017-11-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69739\n+\t* gfortran.dg/pr69739.f90: New test.\n+\n 2017-11-06  Martin Liska  <mliska@suse.cz>\n \n \t* c-c++-common/Wimplicit-fallthrough-8.c: Return a value for"}, {"sha": "f5e2359878ee53045bf0c74344c5c65246f20052", "filename": "gcc/testsuite/gfortran.dg/pr69739.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69739.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f681db1100e78ff9a0cb04fc8fd18719c92839/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69739.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69739.f90?ref=16f681db1100e78ff9a0cb04fc8fd18719c92839", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR69739 in which the statement\n+! R = operate(A, X) caused an ICE.\n+!\n+! Contributed by John  <jwmwalrus@gmail.com>\n+!\n+module test\n+\n+  implicit none\n+  type, public :: sometype\n+    real :: a    =  0.\n+  end type\n+contains\n+\n+  function dosomething(A) result(r)\n+    type(sometype), intent(IN) :: A(:,:,:)\n+    integer :: N\n+    real, allocatable ::   R(:), X(:)\n+\n+    N = PRODUCT(UBOUND(A))\n+    allocate (R(N),X(N))\n+    X = [(real(N), N = 1, size(X, 1))]\n+    R = operate(A, X)\n+  end function\n+\n+  function operate(A, X)\n+    type(sometype), intent(IN) :: A(:,:,:)\n+    real, intent(IN) :: X(:)\n+    real :: operate(1:PRODUCT(UBOUND(A)))\n+\n+    operate = x\n+  end function\n+end module test\n+\n+  use test\n+  type(sometype) :: a(2, 2, 2)\n+  if (any(int (dosomething(a)) .ne. [1,2,3,4,5,6])) call abort\n+end"}]}