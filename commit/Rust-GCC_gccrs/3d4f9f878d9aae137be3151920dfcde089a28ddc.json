{"sha": "3d4f9f878d9aae137be3151920dfcde089a28ddc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q0ZjlmODc4ZDlhYWUxMzdiZTMxNTE5MjBkZmNkZTA4OWEyOGRkYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-31T18:54:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-31T18:54:55Z"}, "message": "diagnostic-show-locus.c: handle fixits on lines outside the regular ranges\n\nThe diagnostic_show_locus implementation determines the set\nof line spans that need printing based on the ranges within the\nrich_location (in layout::calculate_line_spans).\n\nCurrently this doesn't take into account fix-it hints, and hence\nwe fail to print fix-it hints that are on lines outside of\nthose ranges.\n\nThis patch updates the implementation to take fix-it hints into\naccount when calculating the pertinent line spans, so that such fix-it\nhints do get printed.  It also adds some validation, to ensure that\nwe don't attempt to print fix-its hints affecting a different source\nfile.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (class layout): Add field m_fixit_hints.\n\t(layout_range::intersects_line_p): New method.\n\t(test_range_contains_point_for_single_point): Rename to...\n\t(test_layout_range_for_single_point): ...this, and add testing\n\tfor layout_range::intersects_line_p.\n\t(test_range_contains_point_for_single_line): Rename to...\n\t(test_layout_range_for_single_line): ...this,  and add testing\n\tfor layout_range::intersects_line_p.\n\t(test_range_contains_point_for_multiple_lines): Rename to...\n\t(test_layout_range_for_multiple_lines): ...this,  and add testing\n\tfor layout_range::intersects_line_p.\n\t(layout::layout): Populate m_fixit_hints.\n\t(layout::get_expanded_location): Handle the case of a line-span\n\tfor a fix-it hint.\n\t(layout::validate_fixit_hint_p): New method.\n\t(get_line_span_for_fixit_hint): New function.\n\t(layout::calculate_line_spans): Add spans for fixit-hints.\n\t(layout::should_print_annotation_line_p): New method.\n\t(layout::print_any_fixits): Drop param \"richloc\", instead using\n\tvalidated fixits in m_fixit_hints.  Add \"const\" to hint pointers.\n\t(diagnostic_show_locus): Avoid printing blank annotation lines.\n\t(selftest::test_diagnostic_context::test_diagnostic_context):\n\tInitialize show_column and start_span.\n\t(selftest::test_diagnostic_context::start_span_cb): New static\n\tfunction.\n\t(selftest::test_diagnostic_show_locus_fixit_lines): New function.\n\t(selftest::diagnostic_show_locus_c_tests): Update for function\n\trenamings.  Call test_diagnostic_show_locus_fixit_lines.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (class fixit_remove): Remove stray decl.\n\t(fixit_hint::affects_line_p): Make const.\n\t(fixit_insert::affects_line_p): Likewise.\n\t(fixit_replace::affects_line_p): Likewise.\n\t* line-map.c (fixit_insert::affects_line_p): Likewise.\n\t(fixit_replace::affects_line_p): Likewise.\n\nFrom-SVN: r239906", "tree": {"sha": "e25a9f55c0d092448ebe2741c5ba533d8a45a34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e25a9f55c0d092448ebe2741c5ba533d8a45a34e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d4f9f878d9aae137be3151920dfcde089a28ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4f9f878d9aae137be3151920dfcde089a28ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4f9f878d9aae137be3151920dfcde089a28ddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4f9f878d9aae137be3151920dfcde089a28ddc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d12a0b5aabfc329077c4222755c5e6f78e7fd07e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12a0b5aabfc329077c4222755c5e6f78e7fd07e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12a0b5aabfc329077c4222755c5e6f78e7fd07e"}], "stats": {"total": 343, "additions": 315, "deletions": 28}, "files": [{"sha": "29506594b8bd1638a36c7642c800d1645c07cedf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4f9f878d9aae137be3151920dfcde089a28ddc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4f9f878d9aae137be3151920dfcde089a28ddc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d4f9f878d9aae137be3151920dfcde089a28ddc", "patch": "@@ -1,3 +1,34 @@\n+2016-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (class layout): Add field m_fixit_hints.\n+\t(layout_range::intersects_line_p): New method.\n+\t(test_range_contains_point_for_single_point): Rename to...\n+\t(test_layout_range_for_single_point): ...this, and add testing\n+\tfor layout_range::intersects_line_p.\n+\t(test_range_contains_point_for_single_line): Rename to...\n+\t(test_layout_range_for_single_line): ...this,  and add testing\n+\tfor layout_range::intersects_line_p.\n+\t(test_range_contains_point_for_multiple_lines): Rename to...\n+\t(test_layout_range_for_multiple_lines): ...this,  and add testing\n+\tfor layout_range::intersects_line_p.\n+\t(layout::layout): Populate m_fixit_hints.\n+\t(layout::get_expanded_location): Handle the case of a line-span\n+\tfor a fix-it hint.\n+\t(layout::validate_fixit_hint_p): New method.\n+\t(get_line_span_for_fixit_hint): New function.\n+\t(layout::calculate_line_spans): Add spans for fixit-hints.\n+\t(layout::should_print_annotation_line_p): New method.\n+\t(layout::print_any_fixits): Drop param \"richloc\", instead using\n+\tvalidated fixits in m_fixit_hints.  Add \"const\" to hint pointers.\n+\t(diagnostic_show_locus): Avoid printing blank annotation lines.\n+\t(selftest::test_diagnostic_context::test_diagnostic_context):\n+\tInitialize show_column and start_span.\n+\t(selftest::test_diagnostic_context::start_span_cb): New static\n+\tfunction.\n+\t(selftest::test_diagnostic_show_locus_fixit_lines): New function.\n+\t(selftest::diagnostic_show_locus_c_tests): Update for function\n+\trenamings.  Call test_diagnostic_show_locus_fixit_lines.\n+\n 2016-08-31  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/73714"}, {"sha": "00a95a19cc012af51a131f4390518ac90532dcf3", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 270, "deletions": 22, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4f9f878d9aae137be3151920dfcde089a28ddc/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4f9f878d9aae137be3151920dfcde089a28ddc/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=3d4f9f878d9aae137be3151920dfcde089a28ddc", "patch": "@@ -129,6 +129,7 @@ class layout_range\n \t\tconst expanded_location *caret_exploc);\n \n   bool contains_point (int row, int column) const;\n+  bool intersects_line_p (int row) const;\n \n   layout_point m_start;\n   layout_point m_finish;\n@@ -203,14 +204,17 @@ class layout\n   expanded_location get_expanded_location (const line_span *) const;\n \n   bool print_source_line (int row, line_bounds *lbounds_out);\n+  bool should_print_annotation_line_p (int row) const;\n   void print_annotation_line (int row, const line_bounds lbounds);\n   bool annotation_line_showed_range_p (int line, int start_column,\n \t\t\t\t       int finish_column) const;\n-  void print_any_fixits (int row, const rich_location *richloc);\n+  void print_any_fixits (int row);\n \n   void show_ruler (int max_column) const;\n \n  private:\n+  bool validate_fixit_hint_p (const fixit_hint *hint);\n+\n   void calculate_line_spans ();\n \n   void print_newline ();\n@@ -237,6 +241,7 @@ class layout\n   colorizer m_colorizer;\n   bool m_colorize_source_p;\n   auto_vec <layout_range> m_layout_ranges;\n+  auto_vec <const fixit_hint *> m_fixit_hints;\n   auto_vec <line_span> m_line_spans;\n   int m_x_offset;\n };\n@@ -460,9 +465,22 @@ layout_range::contains_point (int row, int column) const\n   return column <= m_finish.m_column;\n }\n \n+/* Does this layout_range contain any part of line ROW?  */\n+\n+bool\n+layout_range::intersects_line_p (int row) const\n+{\n+  gcc_assert (m_start.m_line <= m_finish.m_line);\n+  if (row < m_start.m_line)\n+    return false;\n+  if (row > m_finish.m_line)\n+    return false;\n+  return true;\n+}\n+\n #if CHECKING_P\n \n-/* A helper function for testing layout_range::contains_point.  */\n+/* A helper function for testing layout_range.  */\n \n static layout_range\n make_range (int start_line, int start_col, int end_line, int end_col)\n@@ -475,16 +493,19 @@ make_range (int start_line, int start_col, int end_line, int end_col)\n \t\t       &start_exploc);\n }\n \n-/* Selftests for layout_range::contains_point.  */\n+/* Selftests for layout_range::contains_point and\n+   layout_range::intersects_line_p.  */\n \n-/* Selftest for layout_range::contains_point where the layout_range\n+/* Selftest for layout_range, where the layout_range\n    is a range with start==end i.e. a single point.  */\n \n static void\n-test_range_contains_point_for_single_point ()\n+test_layout_range_for_single_point ()\n {\n   layout_range point = make_range (7, 10, 7, 10);\n \n+  /* Tests for layout_range::contains_point.  */\n+\n   /* Before the line. */\n   ASSERT_FALSE (point.contains_point (6, 1));\n \n@@ -499,16 +520,23 @@ test_range_contains_point_for_single_point ()\n \n   /* After the line.  */\n   ASSERT_FALSE (point.contains_point (8, 1));\n+\n+  /* Tests for layout_range::intersects_line_p.  */\n+  ASSERT_FALSE (point.intersects_line_p (6));\n+  ASSERT_TRUE (point.intersects_line_p (7));\n+  ASSERT_FALSE (point.intersects_line_p (8));\n }\n \n-/* Selftest for layout_range::contains_point where the layout_range\n+/* Selftest for layout_range, where the layout_range\n    is the single-line range shown as \"Example A\" above.  */\n \n static void\n-test_range_contains_point_for_single_line ()\n+test_layout_range_for_single_line ()\n {\n   layout_range example_a = make_range (2, 22, 2, 38);\n \n+  /* Tests for layout_range::contains_point.  */\n+\n   /* Before the line. */\n   ASSERT_FALSE (example_a.contains_point (1, 1));\n \n@@ -529,16 +557,23 @@ test_range_contains_point_for_single_line ()\n \n   /* After the line.  */\n   ASSERT_FALSE (example_a.contains_point (2, 39));\n+\n+  /* Tests for layout_range::intersects_line_p.  */\n+  ASSERT_FALSE (example_a.intersects_line_p (1));\n+  ASSERT_TRUE (example_a.intersects_line_p (2));\n+  ASSERT_FALSE (example_a.intersects_line_p (3));\n }\n \n-/* Selftest for layout_range::contains_point where the layout_range\n+/* Selftest for layout_range, where the layout_range\n    is the multi-line range shown as \"Example B\" above.  */\n \n static void\n-test_range_contains_point_for_multiple_lines ()\n+test_layout_range_for_multiple_lines ()\n {\n   layout_range example_b = make_range (3, 14, 5, 8);\n \n+  /* Tests for layout_range::contains_point.  */\n+\n   /* Before first line. */\n   ASSERT_FALSE (example_b.contains_point (1, 1));\n \n@@ -573,6 +608,13 @@ test_range_contains_point_for_multiple_lines ()\n \n   /* After the line.  */\n   ASSERT_FALSE (example_b.contains_point (6, 1));\n+\n+  /* Tests for layout_range::intersects_line_p.  */\n+  ASSERT_FALSE (example_b.intersects_line_p (2));\n+  ASSERT_TRUE (example_b.intersects_line_p (3));\n+  ASSERT_TRUE (example_b.intersects_line_p (4));\n+  ASSERT_TRUE (example_b.intersects_line_p (5));\n+  ASSERT_FALSE (example_b.intersects_line_p (6));\n }\n \n #endif /* #if CHECKING_P */\n@@ -709,7 +751,7 @@ compatible_locations_p (location_t loc_a, location_t loc_b)\n /* Constructor for class layout.\n \n    Filter the ranges from the rich_location to those that we can\n-   sanely print, populating m_layout_ranges.\n+   sanely print, populating m_layout_ranges and m_fixit_hints.\n    Determine the range of lines that we will print, splitting them\n    up into an ordered list of disjoint spans of contiguous line numbers.\n    Determine m_x_offset, to ensure that the primary caret\n@@ -725,6 +767,7 @@ layout::layout (diagnostic_context * context,\n   m_colorizer (context, diagnostic_kind),\n   m_colorize_source_p (context->colorize_source_p),\n   m_layout_ranges (richloc->get_num_locations ()),\n+  m_fixit_hints (richloc->get_num_fixit_hints ()),\n   m_line_spans (1 + richloc->get_num_locations ()),\n   m_x_offset (0)\n {\n@@ -798,6 +841,15 @@ layout::layout (diagnostic_context * context,\n       m_layout_ranges.safe_push (ri);\n     }\n \n+  /* Populate m_fixit_hints, filtering to only those that are in the\n+     same file.  */\n+  for (unsigned int i = 0; i < richloc->get_num_fixit_hints (); i++)\n+    {\n+      const fixit_hint *hint = richloc->get_fixit_hint (i);\n+      if (validate_fixit_hint_p (hint))\n+\tm_fixit_hints.safe_push (hint);\n+    }\n+\n   /* Populate m_line_spans.  */\n   calculate_line_spans ();\n \n@@ -867,12 +919,92 @@ layout::get_expanded_location (const line_span *line_span) const\n \t}\n     }\n \n+  /* Otherwise, use the location of the first fixit-hint present within\n+     the line_span.  */\n+  for (unsigned int i = 0; i < m_fixit_hints.length (); i++)\n+    {\n+      const fixit_hint *hint = m_fixit_hints[i];\n+      location_t loc = hint->get_start_loc ();\n+      expanded_location exploc = expand_location (loc);\n+      if (line_span->contains_line_p (exploc.line))\n+\treturn exploc;\n+    }\n+\n   /* It should not be possible to have a line span that didn't\n-     contain any of the layout_range instances.  */\n+     contain any of the layout_range or fixit_hint instances.  */\n   gcc_unreachable ();\n   return m_exploc;\n }\n \n+/* Determine if HINT is meaningful to print within this layout.  */\n+\n+bool\n+layout::validate_fixit_hint_p (const fixit_hint *hint)\n+{\n+  switch (hint->get_kind ())\n+    {\n+    case fixit_hint::INSERT:\n+      {\n+\tconst fixit_insert *insert = static_cast <const fixit_insert *> (hint);\n+\tlocation_t loc = insert->get_location ();\n+\tif (LOCATION_FILE (loc) != m_exploc.file)\n+\t  return false;\n+      }\n+      break;\n+\n+    case fixit_hint::REPLACE:\n+      {\n+\tconst fixit_replace *replace\n+\t  = static_cast <const fixit_replace *> (hint);\n+\tsource_range src_range = replace->get_range ();\n+\tif (LOCATION_FILE (src_range.m_start) != m_exploc.file)\n+\t  return false;\n+\tif (LOCATION_FILE (src_range.m_finish) != m_exploc.file)\n+\t  return false;\n+      }\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return true;\n+}\n+\n+/* Determine the range of lines affected by HINT.\n+   This assumes that HINT has already been filtered by\n+   validate_fixit_hint_p, and so affects the correct source file.  */\n+\n+static line_span\n+get_line_span_for_fixit_hint (const fixit_hint *hint)\n+{\n+  gcc_assert (hint);\n+  switch (hint->get_kind ())\n+    {\n+    case fixit_hint::INSERT:\n+      {\n+\tconst fixit_insert *insert = static_cast <const fixit_insert *> (hint);\n+\tlocation_t loc = insert->get_location ();\n+\tint line = LOCATION_LINE (loc);\n+\treturn line_span (line, line);\n+      }\n+      break;\n+\n+    case fixit_hint::REPLACE:\n+      {\n+\tconst fixit_replace *replace\n+\t  = static_cast <const fixit_replace *> (hint);\n+\tsource_range src_range = replace->get_range ();\n+\treturn line_span (LOCATION_LINE (src_range.m_start),\n+\t\t\t  LOCATION_LINE (src_range.m_finish));\n+      }\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* We want to print the pertinent source code at a diagnostic.  The\n    rich_location can contain multiple locations.  This will have been\n    filtered into m_exploc (the caret for the primary location) and\n@@ -918,6 +1050,14 @@ layout::calculate_line_spans ()\n \t\t\t\t      lr->m_finish.m_line));\n     }\n \n+  /* Also add spans for any fix-it hints, in case they cover other lines.  */\n+  for (unsigned int i = 0; i < m_fixit_hints.length (); i++)\n+    {\n+      const fixit_hint *hint = m_fixit_hints[i];\n+      gcc_assert (hint);\n+      tmp_spans.safe_push (get_line_span_for_fixit_hint (hint));\n+    }\n+\n   /* Sort them.  */\n   tmp_spans.qsort(line_span::comparator);\n \n@@ -1031,6 +1171,20 @@ layout::print_source_line (int row, line_bounds *lbounds_out)\n   return true;\n }\n \n+/* Determine if we should print an annotation line for ROW.\n+   i.e. if any of m_layout_ranges contains ROW.  */\n+\n+bool\n+layout::should_print_annotation_line_p (int row) const\n+{\n+  layout_range *range;\n+  int i;\n+  FOR_EACH_VEC_ELT (m_layout_ranges, i, range)\n+    if (range->intersects_line_p (row))\n+      return true;\n+  return false;\n+}\n+\n /* Print a line consisting of the caret/underlines for the given\n    source line.  */\n \n@@ -1096,25 +1250,26 @@ layout::annotation_line_showed_range_p (int line, int start_column,\n   return false;\n }\n \n-/* If there are any fixit hints on source line ROW within RICHLOC, print them.\n+/* If there are any fixit hints on source line ROW, print them.\n    They are printed in order, attempting to combine them onto lines, but\n    starting new lines if necessary.  */\n \n void\n-layout::print_any_fixits (int row, const rich_location *richloc)\n+layout::print_any_fixits (int row)\n {\n   int column = 0;\n-  for (unsigned int i = 0; i < richloc->get_num_fixit_hints (); i++)\n+  for (unsigned int i = 0; i < m_fixit_hints.length (); i++)\n     {\n-      fixit_hint *hint = richloc->get_fixit_hint (i);\n+      const fixit_hint *hint = m_fixit_hints[i];\n       if (hint->affects_line_p (m_exploc.file, row))\n \t{\n \t  /* For now we assume each fixit hint can only touch one line.  */\n \t  switch (hint->get_kind ())\n \t    {\n \t    case fixit_hint::INSERT:\n \t      {\n-\t\tfixit_insert *insert = static_cast <fixit_insert *> (hint);\n+\t\tconst fixit_insert *insert\n+\t\t  = static_cast <const fixit_insert *> (hint);\n \t\t/* This assumes the insertion just affects one line.  */\n \t\tint start_column\n \t\t  = LOCATION_COLUMN (insert->get_location ());\n@@ -1128,7 +1283,8 @@ layout::print_any_fixits (int row, const rich_location *richloc)\n \n \t    case fixit_hint::REPLACE:\n \t      {\n-\t\tfixit_replace *replace = static_cast <fixit_replace *> (hint);\n+\t\tconst fixit_replace *replace\n+\t\t  = static_cast <const fixit_replace *> (hint);\n \t\tsource_range src_range = replace->get_range ();\n \t\tint line = LOCATION_LINE (src_range.m_start);\n \t\tint start_column = LOCATION_COLUMN (src_range.m_start);\n@@ -1370,8 +1526,9 @@ diagnostic_show_locus (diagnostic_context * context,\n \t  line_bounds lbounds;\n \t  if (layout.print_source_line (row, &lbounds))\n \t    {\n-\t      layout.print_annotation_line (row, lbounds);\n-\t      layout.print_any_fixits (row, richloc);\n+\t      if (layout.should_print_annotation_line_p (row))\n+\t\tlayout.print_annotation_line (row, lbounds);\n+\t      layout.print_any_fixits (row);\n \t    }\n \t}\n     }\n@@ -1395,11 +1552,22 @@ class test_diagnostic_context : public diagnostic_context\n   {\n     diagnostic_initialize (this, 0);\n     show_caret = true;\n+    show_column = true;\n+    start_span = start_span_cb;\n   }\n   ~test_diagnostic_context ()\n   {\n     diagnostic_finish (this);\n   }\n+\n+  /* Implementation of diagnostic_start_span_fn, hiding the\n+     real filename (to avoid printing the names of tempfiles).  */\n+  static void\n+  start_span_cb (diagnostic_context *context, expanded_location exploc)\n+  {\n+    exploc.file = \"FILENAME\";\n+    default_diagnostic_start_span_fn (context, exploc);\n+  }\n };\n \n /* Verify that diagnostic_show_locus works sanely on UNKNOWN_LOCATION.  */\n@@ -1739,6 +1907,85 @@ test_diagnostic_show_locus_one_liner (const line_table_case &case_)\n   test_one_liner_many_fixits ();\n }\n \n+/* Verify that we print fixits even if they only affect lines\n+   outside those covered by the ranges in the rich_location.  */\n+\n+static void\n+test_diagnostic_show_locus_fixit_lines (const line_table_case &case_)\n+{\n+  /* Create a tempfile and write some text to it.\n+     ...000000000111111111122222222223333333333.\n+     ...123456789012345678901234567890123456789.  */\n+  const char *content\n+    = (\"struct point { double x; double y; };\\n\" /* line 1.  */\n+       \"struct point origin = {x: 0.0,\\n\"        /* line 2.  */\n+       \"                       y\\n\"              /* line 3.  */\n+       \"\\n\"                                      /* line 4.  */\n+       \"\\n\"                                      /* line 5.  */\n+       \"                        : 0.0};\\n\");     /* line 6.  */\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", content);\n+  line_table_test ltt (case_);\n+\n+  const line_map_ordinary *ord_map\n+    = linemap_check_ordinary (linemap_add (line_table, LC_ENTER, false,\n+\t\t\t\t\t   tmp.get_filename (), 0));\n+\n+  linemap_line_start (line_table, 1, 100);\n+\n+  const location_t final_line_end\n+    = linemap_position_for_line_and_column (line_table, ord_map, 6, 36);\n+\n+  /* Don't attempt to run the tests if column data might be unavailable.  */\n+  if (final_line_end > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  /* A pair of tests for modernizing the initializers to C99-style.  */\n+\n+  /* The one-liner case (line 2).  */\n+  {\n+    test_diagnostic_context dc;\n+    const location_t x\n+      = linemap_position_for_line_and_column (line_table, ord_map, 2, 24);\n+    const location_t colon\n+      = linemap_position_for_line_and_column (line_table, ord_map, 2, 25);\n+    rich_location richloc (line_table, colon);\n+    richloc.add_fixit_insert (x, \".\");\n+    richloc.add_fixit_replace (colon, \"=\");\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" struct point origin = {x: 0.0,\\n\"\n+\t\t  \"                         ^\\n\"\n+\t\t  \"                        .=\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* The multiline case.  The caret for the rich_location is on line 6;\n+     verify that insertion fixit on line 3 is still printed (and that\n+     span starts are printed due to the gap between the span at line 3\n+     and that at line 6).  */\n+  {\n+    test_diagnostic_context dc;\n+    const location_t y\n+      = linemap_position_for_line_and_column (line_table, ord_map, 3, 24);\n+    const location_t colon\n+      = linemap_position_for_line_and_column (line_table, ord_map, 6, 25);\n+    rich_location richloc (line_table, colon);\n+    richloc.add_fixit_insert (y, \".\");\n+    richloc.add_fixit_replace (colon, \"=\");\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \"FILENAME:3:24:\\n\"\n+\t\t  \"                        y\\n\"\n+\t\t  \"                        .\\n\"\n+\t\t  \"FILENAME:6:25:\\n\"\n+\t\t  \"                         : 0.0};\\n\"\n+\t\t  \"                         ^\\n\"\n+\t\t  \"                         =\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+}\n+\n+\n /* Verify that fix-it hints are appropriately consolidated.\n \n    If any fix-it hints in a rich_location involve locations beyond\n@@ -1898,15 +2145,16 @@ test_fixit_consolidation (const line_table_case &case_)\n void\n diagnostic_show_locus_c_tests ()\n {\n-  test_range_contains_point_for_single_point ();\n-  test_range_contains_point_for_single_line ();\n-  test_range_contains_point_for_multiple_lines ();\n+  test_layout_range_for_single_point ();\n+  test_layout_range_for_single_line ();\n+  test_layout_range_for_multiple_lines ();\n \n   test_get_line_width_without_trailing_whitespace ();\n \n   test_diagnostic_show_locus_unknown_location ();\n \n   for_each_line_table_case (test_diagnostic_show_locus_one_liner);\n+  for_each_line_table_case (test_diagnostic_show_locus_fixit_lines);\n   for_each_line_table_case (test_fixit_consolidation);\n }\n "}, {"sha": "69abc6802bf6ea0081c005e59b287d3bfd59573e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4f9f878d9aae137be3151920dfcde089a28ddc/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4f9f878d9aae137be3151920dfcde089a28ddc/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=3d4f9f878d9aae137be3151920dfcde089a28ddc", "patch": "@@ -1,3 +1,12 @@\n+2016-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (class fixit_remove): Remove stray decl.\n+\t(fixit_hint::affects_line_p): Make const.\n+\t(fixit_insert::affects_line_p): Likewise.\n+\t(fixit_replace::affects_line_p): Likewise.\n+\t* line-map.c (fixit_insert::affects_line_p): Likewise.\n+\t(fixit_replace::affects_line_p): Likewise.\n+\n 2016-08-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (class semi_embedded_vec): New class."}, {"sha": "bef77957ffefaa58a08775794b2b684ccd52a0d0", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4f9f878d9aae137be3151920dfcde089a28ddc/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4f9f878d9aae137be3151920dfcde089a28ddc/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=3d4f9f878d9aae137be3151920dfcde089a28ddc", "patch": "@@ -1412,7 +1412,6 @@ semi_embedded_vec<T, NUM_EMBEDDED>::truncate (int len)\n \n class fixit_hint;\n   class fixit_insert;\n-  class fixit_remove;\n   class fixit_replace;\n \n /* A \"rich\" source code location, for use when printing diagnostics.\n@@ -1599,7 +1598,7 @@ class fixit_hint\n   virtual ~fixit_hint () {}\n \n   virtual enum kind get_kind () const = 0;\n-  virtual bool affects_line_p (const char *file, int line) = 0;\n+  virtual bool affects_line_p (const char *file, int line) const = 0;\n   virtual source_location get_start_loc () const = 0;\n   virtual bool maybe_get_end_loc (source_location *out) const = 0;\n   /* Vfunc for consolidating successor fixits.  */\n@@ -1615,7 +1614,7 @@ class fixit_insert : public fixit_hint\n \t\tconst char *new_content);\n   ~fixit_insert ();\n   enum kind get_kind () const { return INSERT; }\n-  bool affects_line_p (const char *file, int line);\n+  bool affects_line_p (const char *file, int line) const;\n   source_location get_start_loc () const { return m_where; }\n   bool maybe_get_end_loc (source_location *) const { return false; }\n   bool maybe_append_replace (line_maps *set,\n@@ -1640,7 +1639,7 @@ class fixit_replace : public fixit_hint\n   ~fixit_replace ();\n \n   enum kind get_kind () const { return REPLACE; }\n-  bool affects_line_p (const char *file, int line);\n+  bool affects_line_p (const char *file, int line) const;\n   source_location get_start_loc () const { return m_src_range.m_start; }\n   bool maybe_get_end_loc (source_location *out) const\n   {"}, {"sha": "f69c60c78377bb8ba28d9dc80e039de8a266dfb9", "filename": "libcpp/line-map.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4f9f878d9aae137be3151920dfcde089a28ddc/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4f9f878d9aae137be3151920dfcde089a28ddc/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=3d4f9f878d9aae137be3151920dfcde089a28ddc", "patch": "@@ -2314,7 +2314,7 @@ fixit_insert::~fixit_insert ()\n /* Implementation of fixit_hint::affects_line_p for fixit_insert.  */\n \n bool\n-fixit_insert::affects_line_p (const char *file, int line)\n+fixit_insert::affects_line_p (const char *file, int line) const\n {\n   expanded_location exploc\n     = linemap_client_expand_location_to_spelling_point (m_where);\n@@ -2351,7 +2351,7 @@ fixit_replace::~fixit_replace ()\n /* Implementation of fixit_hint::affects_line_p for fixit_replace.  */\n \n bool\n-fixit_replace::affects_line_p (const char *file, int line)\n+fixit_replace::affects_line_p (const char *file, int line) const\n {\n   return m_src_range.intersects_line_p (file, line);\n }"}]}