{"sha": "628078425bbdfc487c569bf949ad5a334c13a006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4MDc4NDI1YmJkZmM0ODdjNTY5YmY5NDlhZDVhMzM0YzEzYTAwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:25:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:25:06Z"}, "message": "[multiple changes]\n\n2017-04-25  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Pragma_Check): Remove\n\tbogus circuitry for the case where Name is Predicate.\n\n2017-04-25  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb(Traverse_Declarations_Or_Statements.Traverse_Aspects):\n\tCreate SCOs for Predicate aspects in disabled\n\tstate initially, to be enabled later on by...\n\t* sem_ch13.adb (Build_Predicate_Functions.Add_Predicates): Mark\n\tSCO for predicate as enabled.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* comperr.adb (Compiler_Abort): Remove now obsolete pair of\n\tpragmas Warnings Off / On.\n\t* namet.adb (Finalize): Remove now obsolete pair of pragmas\n\tWarnings Off / On.\n\t* output.adb: Remove now obsolete pair of pragmas Warnings Off / On.\n\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Do not\n\tconsider comparisons between static expressions because their\n\tvalues cannot be invalidated.\n\t* urealp.adb (Tree_Read): Remove now obsolete pair of pragmas\n\tWarnings Off / On.\n\t(Tree_Write): Remove now obsolete pair of pragmas Warnings Off / On.\n\t* usage.adb Remove now obsolete pair of pragmas Warnings Off / On.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* sem_elab.adb (In_Task_Activation): Trace internal calls in\n\ttask bodies.\n\nFrom-SVN: r247227", "tree": {"sha": "1d950e330796613f55d665d41115455a1425692f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d950e330796613f55d665d41115455a1425692f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628078425bbdfc487c569bf949ad5a334c13a006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628078425bbdfc487c569bf949ad5a334c13a006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628078425bbdfc487c569bf949ad5a334c13a006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628078425bbdfc487c569bf949ad5a334c13a006/comments", "author": null, "committer": null, "parents": [{"sha": "c66cda60fe7d35c2dfb2397d754461e9b1698c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66cda60fe7d35c2dfb2397d754461e9b1698c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c66cda60fe7d35c2dfb2397d754461e9b1698c08"}], "stats": {"total": 270, "additions": 135, "deletions": 135}, "files": [{"sha": "49eeadba19601300250e79fb85c5dd9bd2a637cd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -1,3 +1,36 @@\n+2017-04-25  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Pragma_Check): Remove\n+\tbogus circuitry for the case where Name is Predicate.\n+\n+2017-04-25  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb(Traverse_Declarations_Or_Statements.Traverse_Aspects):\n+\tCreate SCOs for Predicate aspects in disabled\n+\tstate initially, to be enabled later on by...\n+\t* sem_ch13.adb (Build_Predicate_Functions.Add_Predicates): Mark\n+\tSCO for predicate as enabled.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* comperr.adb (Compiler_Abort): Remove now obsolete pair of\n+\tpragmas Warnings Off / On.\n+\t* namet.adb (Finalize): Remove now obsolete pair of pragmas\n+\tWarnings Off / On.\n+\t* output.adb: Remove now obsolete pair of pragmas Warnings Off / On.\n+\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Do not\n+\tconsider comparisons between static expressions because their\n+\tvalues cannot be invalidated.\n+\t* urealp.adb (Tree_Read): Remove now obsolete pair of pragmas\n+\tWarnings Off / On.\n+\t(Tree_Write): Remove now obsolete pair of pragmas Warnings Off / On.\n+\t* usage.adb Remove now obsolete pair of pragmas Warnings Off / On.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_elab.adb (In_Task_Activation): Trace internal calls in\n+\ttask bodies.\n+\n 2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_prag.adb, sem_warn.adb, sem_eval.adb: Minor reformatting and"}, {"sha": "040352418308a4ef20d9cfaeb1b32807f8e419f6", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -98,18 +98,9 @@ package body Comperr is\n          Write_Eol;\n       end End_Line;\n \n-      --  Disable the warnings emitted by -gnatwc because the following two\n-      --  constants are initialized by means of conditional compilation.\n-\n-      pragma Warnings\n-        (Off, \"condition can only be * if invalid values present\");\n-\n       Is_GPL_Version : constant Boolean := Gnatvsn.Build_Type = GPL;\n       Is_FSF_Version : constant Boolean := Gnatvsn.Build_Type = FSF;\n \n-      pragma Warnings\n-        (On, \"condition can only be * if invalid values present\");\n-\n    --  Start of processing for Compiler_Abort\n \n    begin"}, {"sha": "6b9f61d8aa2067cc48cfbfee280596de0a504a2f", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -672,12 +672,6 @@ package body Namet is\n                   Max_Chain_Length := C;\n                end if;\n \n-               --  Disable the warnings emitted by -gnatwc because the tests\n-               --  involving Verbosity involve conditional compilation.\n-\n-               pragma Warnings\n-                 (Off, \"condition can only be * if invalid values present\");\n-\n                if Verbosity >= 2 then\n                   Write_Str (\"Hash_Table (\");\n                   Write_Int (J);\n@@ -709,9 +703,6 @@ package body Namet is\n                      N := Name_Entries.Table (N).Hash_Link;\n                   end loop;\n                end if;\n-\n-               pragma Warnings\n-                 (On, \"condition can only be * if invalid values present\");\n             end;\n          end if;\n       end loop;"}, {"sha": "33a08055db5dba9ab5c9613feeb769439bd4b1cd", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -55,12 +55,7 @@ package body Output is\n    Indentation_Limit : constant Positive := 40;\n    --  Indentation beyond this number of spaces wraps around\n \n-   --  Disable the warnings emitted by -gnatwc because the comparison within\n-   --  the assertion depends on conditional compilation.\n-\n-   pragma Warnings (Off, \"condition can only be * if invalid values present\");\n    pragma Assert (Indentation_Limit < Buffer_Max / 2);\n-   pragma Warnings (On,  \"condition can only be * if invalid values present\");\n    --  Make sure this is substantially shorter than the line length\n \n    Cur_Indentation : Natural := 0;"}, {"sha": "e5bb42a5c825c70796eff1e848547b684b031870", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2009-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1678,32 +1678,27 @@ package body Par_SCO is\n                --  Aspects rewritten into pragmas controlled by a Check_Policy:\n                --  Current_Pragma_Sloc must be set to the sloc of the aspect\n                --  specification. The corresponding pragma will have the same\n-               --  sloc.\n+               --  sloc. Note that Invariant, Pre, and Post will be enabled if\n+               --  the policy is Check; on the other hand, predicate aspects\n+               --  will be enabled for Check and Ignore (when Add_Predicate\n+               --  is called) because the actual checks occur in client units.\n+               --  When the assertion policy for Predicate is Disable, the\n+               --  SCO remains disabled, because Add_Predicate is never called.\n+\n+               --  Pre/post can have checks in client units too because of\n+               --  inheritance, so should they receive the same treatment???\n \n                when Aspect_Invariant\n                   | Aspect_Post\n                   | Aspect_Postcondition\n                   | Aspect_Pre\n                   | Aspect_Precondition\n                   | Aspect_Type_Invariant\n-               =>\n-                  C1 := 'a';\n-\n-               --  Aspects whose checks are generated in client units,\n-               --  regardless of whether or not the check is activated in the\n-               --  unit which contains the declaration: create decision as\n-               --  unconditionally enabled aspect (but still make a pragma\n-               --  entry since Set_SCO_Pragma_Enabled will be called when\n-               --  analyzing actual checks, possibly in other units).\n-\n-               --  Pre/post can have checks in client units too because of\n-               --  inheritance, so should they be moved here???\n-\n-               when Aspect_Dynamic_Predicate\n+                  | Aspect_Dynamic_Predicate\n                   | Aspect_Predicate\n                   | Aspect_Static_Predicate\n                =>\n-                  C1 := 'A';\n+                  C1 := 'a';\n \n                --  Other aspects: just process any decision nested in the\n                --  aspect expression."}, {"sha": "482eab4dffa52cac8f545b4af19f06aef76f9f80", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -42,6 +42,7 @@ with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n+with Par_SCO;  use Par_SCO;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n@@ -8419,6 +8420,10 @@ package body Sem_Ch13 is\n          --  Start of processing for Add_Predicate\n \n          begin\n+            --  Mark corresponding SCO as enabled\n+\n+            Set_SCO_Pragma_Enabled (Sloc (Prag));\n+\n             --  Extract the arguments of the pragma. The expression itself\n             --  is copied for use in the predicate function, to preserve the\n             --  original version for ASIS use."}, {"sha": "45241c3e5298ed13ffdf08fa6095b5c03a3b430a", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 57, "deletions": 50, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -70,26 +70,26 @@ package body Sem_Elab is\n       Ent  : Entity_Id;\n    end record;\n \n-   package Elab_Call is new Table.Table (\n-     Table_Component_Type => Elab_Call_Entry,\n-     Table_Index_Type     => Int,\n-     Table_Low_Bound      => 1,\n-     Table_Initial        => 50,\n-     Table_Increment      => 100,\n-     Table_Name           => \"Elab_Call\");\n+   package Elab_Call is new Table.Table\n+     (Table_Component_Type => Elab_Call_Entry,\n+      Table_Index_Type     => Int,\n+      Table_Low_Bound      => 1,\n+      Table_Initial        => 50,\n+      Table_Increment      => 100,\n+      Table_Name           => \"Elab_Call\");\n \n    --  This table is initialized at the start of each outer level call. It\n    --  holds the entities for all subprograms that have been examined for this\n    --  particular outer level call, and is used to prevent both infinite\n    --  recursion, and useless reanalysis of bodies already seen\n \n-   package Elab_Visited is new Table.Table (\n-     Table_Component_Type => Entity_Id,\n-     Table_Index_Type     => Int,\n-     Table_Low_Bound      => 1,\n-     Table_Initial        => 200,\n-     Table_Increment      => 100,\n-     Table_Name           => \"Elab_Visited\");\n+   package Elab_Visited is new Table.Table\n+     (Table_Component_Type => Entity_Id,\n+      Table_Index_Type     => Int,\n+      Table_Low_Bound      => 1,\n+      Table_Initial        => 200,\n+      Table_Increment      => 100,\n+      Table_Name           => \"Elab_Visited\");\n \n    --  This table stores calls to Check_Internal_Call that are delayed until\n    --  all generics are instantiated and in particular until after all generic\n@@ -112,23 +112,29 @@ package body Sem_Elab is\n       --  The current scope of the call. This is restored when we complete the\n       --  delayed call, so that we do this in the right scope.\n \n-      From_SPARK_Code : Boolean;\n-      --  Save indication of whether this call is under SPARK_Mode => On\n+      Outer_Scope : Entity_Id;\n+      --  Save scope of outer level call\n \n       From_Elab_Code : Boolean;\n       --  Save indication of whether this call is from elaboration code\n \n-      Outer_Scope : Entity_Id;\n-      --  Save scope of outer level call\n+      In_Task_Activation : Boolean;\n+      --  Save indication of whether this call is from a task body. Tasks are\n+      --  activated at the \"begin\", which is after all local procedure bodies,\n+      --  so calls to those procedures can't fail, even if they occur after the\n+      --  task body.\n+\n+      From_SPARK_Code : Boolean;\n+      --  Save indication of whether this call is under SPARK_Mode => On\n    end record;\n \n-   package Delay_Check is new Table.Table (\n-     Table_Component_Type => Delay_Element,\n-     Table_Index_Type     => Int,\n-     Table_Low_Bound      => 1,\n-     Table_Initial        => 1000,\n-     Table_Increment      => 100,\n-     Table_Name           => \"Delay_Check\");\n+   package Delay_Check is new Table.Table\n+     (Table_Component_Type => Delay_Element,\n+      Table_Index_Type     => Int,\n+      Table_Low_Bound      => 1,\n+      Table_Initial        => 1000,\n+      Table_Increment      => 100,\n+      Table_Name           => \"Delay_Check\");\n \n    C_Scope : Entity_Id;\n    --  Top-level scope of current scope. Compute this only once at the outer\n@@ -145,10 +151,12 @@ package body Sem_Elab is\n    --  routines in other units if this flag is True.\n \n    In_Task_Activation : Boolean := False;\n-   --  This flag indicates whether we are performing elaboration checks on\n-   --  task procedures, at the point of activation. If true, we do not trace\n-   --  internal calls in these procedures, because all local bodies are known\n-   --  to be elaborated.\n+   --  This flag indicates whether we are performing elaboration checks on task\n+   --  bodies, at the point of activation. If true, we do not raise\n+   --  Program_Error for calls to local procedures, because all local bodies\n+   --  are known to be elaborated. However, we still need to trace such calls,\n+   --  because a local procedure could call a procedure in another package,\n+   --  so we might need an implicit Elaborate_All.\n \n    Delaying_Elab_Checks : Boolean := True;\n    --  This is set True till the compilation is complete, including the\n@@ -242,7 +250,7 @@ package body Sem_Elab is\n       Orig_Ent    : Entity_Id);\n    --  The processing for Check_Internal_Call is divided up into two phases,\n    --  and this represents the second phase. The second phase is delayed if\n-   --  Delaying_Elab_Calls is set to True. In this delayed case, the first\n+   --  Delaying_Elab_Checks is set to True. In this delayed case, the first\n    --  phase makes an entry in the Delay_Check table, which is processed when\n    --  Check_Elab_Calls is called. N, E and Orig_Ent are as for the call to\n    --  Check_Internal_Call. Outer_Scope is the outer level scope for the\n@@ -1956,6 +1964,7 @@ package body Sem_Elab is\n          for J in Delay_Check.First .. Delay_Check.Last loop\n             Push_Scope (Delay_Check.Table (J).Curscop);\n             From_Elab_Code := Delay_Check.Table (J).From_Elab_Code;\n+            In_Task_Activation := Delay_Check.Table (J).In_Task_Activation;\n \n             --  Set appropriate value of SPARK_Mode\n \n@@ -1965,11 +1974,11 @@ package body Sem_Elab is\n                SPARK_Mode := On;\n             end if;\n \n-            Check_Internal_Call_Continue (\n-              N           => Delay_Check.Table (J).N,\n-              E           => Delay_Check.Table (J).E,\n-              Outer_Scope => Delay_Check.Table (J).Outer_Scope,\n-              Orig_Ent    => Delay_Check.Table (J).Orig_Ent);\n+            Check_Internal_Call_Continue\n+              (N           => Delay_Check.Table (J).N,\n+               E           => Delay_Check.Table (J).E,\n+               Outer_Scope => Delay_Check.Table (J).Outer_Scope,\n+               Orig_Ent    => Delay_Check.Table (J).Orig_Ent);\n \n             SPARK_Mode := Save_SPARK_Mode;\n             Pop_Scope;\n@@ -2201,12 +2210,6 @@ package body Sem_Elab is\n       elsif Is_Intrinsic_Subprogram (E) then\n          return;\n \n-      --  No need to trace local calls if checking task activation, because\n-      --  other local bodies are elaborated already.\n-\n-      elsif In_Task_Activation then\n-         return;\n-\n       --  Nothing to do if call is within a generic unit\n \n       elsif Inside_A_Generic then\n@@ -2224,14 +2227,15 @@ package body Sem_Elab is\n       --  Delay this call if we are still delaying calls\n \n       if Delaying_Elab_Checks then\n-         Delay_Check.Append (\n-           (N               => N,\n-            E               => E,\n-            Orig_Ent        => Orig_Ent,\n-            Curscop         => Current_Scope,\n-            Outer_Scope     => Outer_Scope,\n-            From_Elab_Code  => From_Elab_Code,\n-            From_SPARK_Code => SPARK_Mode = On));\n+         Delay_Check.Append\n+           ((N                  => N,\n+             E                  => E,\n+             Orig_Ent           => Orig_Ent,\n+             Curscop            => Current_Scope,\n+             Outer_Scope        => Outer_Scope,\n+             From_Elab_Code     => From_Elab_Code,\n+             In_Task_Activation => In_Task_Activation,\n+             From_SPARK_Code    => SPARK_Mode = On));\n          return;\n \n       --  Otherwise, call phase 2 continuation right now\n@@ -2520,7 +2524,10 @@ package body Sem_Elab is\n             --  inserted.\n \n          begin\n-            if Inst_Case then\n+            if In_Task_Activation then\n+               Insert_Check := False;\n+\n+            elsif Inst_Case then\n                Error_Msg_NE\n                  (\"cannot instantiate& before body seen<<\", N, Orig_Ent);\n "}, {"sha": "3db19da680543931ef29e92d86bd3facc363ef13", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -132,7 +132,7 @@ package Sem_Elab is\n    --  N_Function_Call or N_Procedure_Call_Statement node or an access\n    --  attribute reference whose prefix is a subprogram.\n    --\n-   --  If SPARK_Mode is On, then N can also be a variablr reference, since\n+   --  If SPARK_Mode is On, then N can also be a variable reference, since\n    --  SPARK requires the use of Elaborate_All for references to variables\n    --  in other packages.\n "}, {"sha": "133662503c622c9584de05fad43aee4765f7d7a7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -12756,22 +12756,9 @@ package body Sem_Prag is\n \n             --  Deal with SCO generation\n \n-            case Cname is\n-\n-               --  Nothing to do for predicates as the checks occur in the\n-               --  client units. The SCO for the aspect in the declaration\n-               --  unit is conservatively always enabled.\n-\n-               when Name_Predicate =>\n-                  null;\n-\n-               --  Otherwise mark aspect/pragma SCO as enabled\n-\n-               when others =>\n-                  if Is_Checked (N) and then not Split_PPC (N) then\n-                     Set_SCO_Pragma_Enabled (Loc);\n-                  end if;\n-            end case;\n+            if Is_Checked (N) and then not Split_PPC (N) then\n+               Set_SCO_Pragma_Enabled (Loc);\n+            end if;\n \n             --  Deal with analyzing the string argument\n "}, {"sha": "52fc372b250957cbb43c7ec2b52842117f3a781f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -3267,22 +3267,39 @@ package body Sem_Warn is\n    --------------------------------------\n \n    procedure Warn_On_Constant_Valid_Condition (Op : Node_Id) is\n+      Left  : constant Node_Id := Left_Opnd  (Op);\n+      Right : constant Node_Id := Right_Opnd (Op);\n+\n       True_Result  : Boolean;\n       False_Result : Boolean;\n \n    begin\n       --  Determine the potential outcome of the comparison assuming that the\n-      --  operands are valid. Do not consider instances because the check was\n-      --  already performed in the generic. Do not consider comparison between\n-      --  an attribute reference and a compile-time known value since this is\n-      --  most likely a conditional compilation. Do not consider internal files\n-      --  in order to allow for various assertions and safeguards within our\n-      --  runtime.\n+      --  operands are valid.\n \n       if Constant_Condition_Warnings\n         and then Comes_From_Source (Original_Node (Op))\n+\n+        --  Do not consider instances because the check was already performed\n+        --  in the generic.\n+\n         and then not In_Instance\n+\n+        --  Do not consider comparisons between two static expressions such as\n+        --  constants or literals because those values cannot be invalidated.\n+\n+        and then not (Is_Static_Expression (Left)\n+                       and then Is_Static_Expression (Right))\n+\n+        --  Do not consider comparison between an attribute reference and a\n+        --  compile-time known value since this is most likely a conditional\n+        --  compilation.\n+\n         and then not Is_Attribute_And_Known_Value_Comparison (Op)\n+\n+        --  Do not consider internal files to allow for various assertions and\n+        --  safeguards within our runtime.\n+\n         and then not Is_Internal_File_Name\n                        (Unit_File_Name (Get_Source_Unit (Op)))\n       then"}, {"sha": "b408d013bac04d4e5891d2a44d1a4b8489513463", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -493,14 +493,7 @@ package body Urealp is\n \n    procedure Tree_Read is\n    begin\n-      --  Disable the warnings emitted by -gnatwc because the following check\n-      --  acts as a signal in case Num_Ureal_Constants is changed.\n-\n-      pragma Warnings\n-        (Off, \"condition can only be * if invalid values present\");\n       pragma Assert (Num_Ureal_Constants = 10);\n-      pragma Warnings\n-        (On,  \"condition can only be * if invalid values present\");\n \n       Ureals.Tree_Read;\n       Tree_Read_Int (Int (UR_0));\n@@ -525,14 +518,7 @@ package body Urealp is\n \n    procedure Tree_Write is\n    begin\n-      --  Disable the warnings emitted by -gnatwc because the following check\n-      --  acts as a signal in case Num_Ureal_Constants is changed.\n-\n-      pragma Warnings\n-        (Off, \"condition can only be * if invalid values present\");\n       pragma Assert (Num_Ureal_Constants = 10);\n-      pragma Warnings\n-        (On,  \"condition can only be * if invalid values present\");\n \n       Ureals.Tree_Write;\n       Tree_Write_Int (Int (UR_0));"}, {"sha": "8eb362f63b5f06dfb87cbfa6571adca78ded3d55", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628078425bbdfc487c569bf949ad5a334c13a006/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=628078425bbdfc487c569bf949ad5a334c13a006", "patch": "@@ -671,11 +671,6 @@ begin\n    Write_Switch_Char (\"zr\");\n    Write_Line (\"Distribution stub generation for receiver stubs\");\n \n-   --  Disable the warnings emitted by -gnatwc because Ada_Version_Default may\n-   --  be changed to denote a different default value.\n-\n-   pragma Warnings (Off, \"condition can only be * if invalid values present\");\n-\n    if not Latest_Ada_Only then\n \n       --  Line for -gnat83 switch\n@@ -714,8 +709,6 @@ begin\n       Write_Line (\"Ada 2012 mode\");\n    end if;\n \n-   pragma Warnings (On, \"condition can only be * if invalid values present\");\n-\n    --  Line for -gnat-p switch\n \n    Write_Switch_Char (\"-p\");"}]}