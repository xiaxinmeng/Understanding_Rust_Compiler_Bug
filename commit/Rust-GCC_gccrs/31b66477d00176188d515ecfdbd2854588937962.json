{"sha": "31b66477d00176188d515ecfdbd2854588937962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiNjY0NzdkMDAxNzYxODhkNTE1ZWNmZGJkMjg1NDU4ODkzNzk2Mg==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-07-10T02:06:36Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-07-10T02:06:36Z"}, "message": "flags.h: Delete redundant prototypes that are being generated in options.h from common.opt.\n\n\n2004-07-10  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* flags.h: Delete redundant prototypes that are being generated\n\tin options.h from common.opt.\n\t* common.opt: Add in the expository comments formerly in flags.h.\n\nFrom-SVN: r84432", "tree": {"sha": "443af6a64fb6d4e0134941366d13f920b812bdc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/443af6a64fb6d4e0134941366d13f920b812bdc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b66477d00176188d515ecfdbd2854588937962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b66477d00176188d515ecfdbd2854588937962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b66477d00176188d515ecfdbd2854588937962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b66477d00176188d515ecfdbd2854588937962/comments", "author": null, "committer": null, "parents": [{"sha": "78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e"}], "stats": {"total": 602, "additions": 92, "deletions": 510}, "files": [{"sha": "bac8a76c7a255789dcc2321f769047c1652feb5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b66477d00176188d515ecfdbd2854588937962/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b66477d00176188d515ecfdbd2854588937962/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31b66477d00176188d515ecfdbd2854588937962", "patch": "@@ -1,3 +1,9 @@\n+2004-07-10  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* flags.h: Delete redundant prototypes that are being generated\n+\tin options.h from common.opt.\n+\t* common.opt: Add in the expository comments formerly in flags.h.\n+\n 2004-07-09  Jan Beulich  <jbeulich@novell.com>\n \n \t* config/i386/i386.c (init_cumulative_args): Set mmx/sse registers"}, {"sha": "cd32081af8c32c79cda5b10f18fada1d482bef5f", "filename": "gcc/common.opt", "status": "modified", "additions": 86, "deletions": 9, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b66477d00176188d515ecfdbd2854588937962/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b66477d00176188d515ecfdbd2854588937962/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=31b66477d00176188d515ecfdbd2854588937962", "patch": "@@ -182,12 +182,17 @@ dumpbase\n Common Separate\n -dumpbase <file>\tSet the file basename to be used for dumps\n \n-fPIC\n-Common Report Var(flag_pic,2)\n-\n-fPIE\n-Common Report Var(flag_pie,2)\n-\n+; The version of the C++ ABI in use.  The following values are allowed:\n+;\n+; 0: The version of the ABI believed most conformant with the C++ ABI\n+;    specification.  This ABI may change as bugs are discovered and fixed.\n+;    Therefore, 0 will not necessarily indicate the same ABI in different\n+;    versions of G++.\n+;\n+; 1: The version of the ABI first used in G++ 3.2.\n+;\n+; Additional positive integers will be assigned as new versions of\n+; the ABI become the default version of the ABI.\n fabi-version=\n Common Joined UInteger Var(flag_abi_version) Init(2)\n \n@@ -219,6 +224,13 @@ Align the start of loops\n falign-loops=\n Common RejectNegative Joined UInteger\n \n+; This flag is only tested if alias checking is enabled.\n+; 0 if pointer arguments may alias each other.  True in C.\n+; 1 if pointer arguments may not alias each other but may alias\n+;   global variables.\n+; 2 if pointer arguments may not alias each other and may not\n+;   alias global variables.  True in Fortran.\n+;   The value is ignored if flag_alias_check is 0.\n fargument-alias\n Common Report Var(flag_argument_noalias,0)\n Specify that arguments may alias each other and globals\n@@ -235,6 +247,10 @@ fasynchronous-unwind-tables\n Common Report Var(flag_asynchronous_unwind_tables)\n Generate unwind tables that are exact at each instruction boundary\n \n+; -fcheck-bounds causes gcc to generate array bounds checks.\n+; For C, C++ and ObjC: defaults off.\n+; For Java: defaults to on.\n+; For Fortran: defaults to off.\n fbounds-check\n Common Report Var(flag_bounds_check)\n Generate code to check bounds before indexing arrays\n@@ -267,6 +283,9 @@ fcall-used-\n Common Joined RejectNegative\n -fcall-used-<register>\tMark <register> as being corrupted by function calls\n \n+; Nonzero for -fcaller-saves: allocate values in regs that need to\n+; be saved across function calls, if that produces overall better code.\n+; Optional now, so people can test it.\n fcaller-saves\n Common Report Var(flag_caller_saves)\n Save registers around function calls\n@@ -295,6 +314,8 @@ fdata-sections\n Common Report Var(flag_data_sections)\n Place data items into their own section\n \n+; Nonzero for -fdefer-pop: don't pop args after each function call\n+; instead save them up to pop many calls' args with one insns.\n fdefer-pop\n Common Report Var(flag_defer_pop)\n Defer popping functions args from stack until later\n@@ -352,16 +373,23 @@ Common Joined RejectNegative\n \n ffloat-store\n Common Report Var(flag_float_store)\n-Do not store floats in registers\n+Don't allocate floats and doubles in extended-precision registers\n \n+; Nonzero for -fforce-addr: load memory address into a register before\n+; reference to memory.  This makes better cse but slower compilation.\n fforce-addr\n Common Report Var(flag_force_addr)\n Copy memory address constants into registers before use\n \n+; Nonzero for -fforce-mem: load memory value into a register\n+; before arithmetic on it.  This makes better cse but slower compilation.\n fforce-mem\n Common Report Var(flag_force_mem)\n Copy memory operands into registers before use\n \n+; Nonzero means don't put addresses of constant functions in registers.\n+; Used for compiling the Unix kernel, where strange substitutions are\n+; done on the assembly output.\n ffunction-cse\n Common Report Var(flag_no_function_cse,0)\n Allow function addresses to be held in registers\n@@ -396,6 +424,10 @@ fguess-branch-probability\n Common Report Var(flag_guess_branch_prob)\n Enable guessing of branch probabilities\n \n+; Nonzero means ignore `#ident' directives.  0 means handle them.\n+; Generate position-independent code for executables if possible\n+; On SVR4 targets, it also controls whether or not to emit a\n+; string identifying the compiler.\n fident\n Common Report Var(flag_no_ident,0)\n Process #ident directives\n@@ -408,10 +440,19 @@ fif-conversion2\n Common Report Var(flag_if_conversion2)\n Perform conversion of conditional jumps to conditional execution\n \n+; -finhibit-size-directive inhibits output of .size for ELF.\n+; This is used only for compiling crtstuff.c,\n+; and it may be extended to other effects\n+; needed for crtstuff.c on other systems.\n finhibit-size-directive\n Common Report Var(flag_inhibit_size_directive)\n Do not generate .size directives\n \n+; Nonzero means that functions declared `inline' will be treated\n+; as `static'.  Prevents generation of zillions of copies of unused\n+; static inline functions; instead, `inlines' are written out\n+; only when actually used.  Used in conjunction with -g.  Also\n+; does the right thing with #pragma interface.\n finline\n Common Report Var(flag_no_inline,0) Init(2)\n Pay attention to the \\\"inline\\\" keyword\n@@ -459,6 +500,9 @@ fmem-report\n Common Report Var(mem_report)\n Report on permanent memory allocation\n \n+; This will attempt to merge constant section constants, if 1 only\n+; string constants and constants from constant pool, if 2 also constant\n+; variables.\n fmerge-all-constants\n Common Report Var(flag_merge_constants,2) Init(1)\n Attempt to merge identical constants and constant variables\n@@ -543,13 +587,21 @@ fpeephole2\n Common Report Var(flag_peephole2)\n Enable an RTL peephole pass before sched2\n \n+fPIC\n+Common Report Var(flag_pic,2)\n+Generate position-independent code if possible (large mode)\n+\n+fPIE\n+Common Report Var(flag_pie,2)\n+Generate position-independent code for executables if possible (large mode)\n+\n fpic\n Common Report Var(flag_pic,1) VarExists\n-Generate position-independent code if possible\n+Generate position-independent code if possible (small mode)\n \n fpie\n Common Report Var(flag_pie,1) VarExists\n-Generate position-independent code for executables if possible\n+Generate position-independent code for executables if possible (small mode)\n \n fprefetch-loop-arrays\n Common Report Var(flag_prefetch_loop_arrays)\n@@ -658,6 +710,8 @@ fschedule-insns2\n Common Report Var(flag_schedule_insns_after_reload)\n Reschedule instructions after register allocation\n \n+; sched_stalled_insns means that insns can be moved prematurely from the queue\n+; of stalled insns into the ready list.\n fsched-stalled-insns\n Common Report Var(flag_sched_stalled_insns)\n Allow premature scheduling of queued insns\n@@ -666,6 +720,10 @@ fsched-stalled-insns=\n Common RejectNegative Joined UInteger \n -fsched-stalled-insns=<number>       Set number of queued insns that can be prematurely scheduled\n \n+; sched_stalled_insns_dep controls how many recently scheduled cycles will\n+; be examined for a dependency on a stalled insn that is candidate for\n+; premature removal from the queue of stalled insns into the ready list (has\n+; an effect only if the flag 'sched_stalled_insns' is set).\n fsched-stalled-insns-dep\n Common Report Var(flag_sched_stalled_insns_dep,1) Init(1)\n Set dependence distance checking in premature scheduling of queued insns\n@@ -686,6 +744,8 @@ fsingle-precision-constant\n Common Report Var(flag_single_precision_constant)\n Convert floating point constants to single precision constants\n \n+; Emit code to probe the stack, to help detect stack overflow; also\n+; may cause large objects to be allocated dynamically.\n fstack-check\n Common Report Var(flag_stack_check)\n Insert stack checking code into the program\n@@ -705,6 +765,10 @@ fstrength-reduce\n Common Report Var(flag_strength_reduce)\n Perform strength reduction optimizations\n \n+; Nonzero if we should do (language-dependent) alias analysis.\n+; Typically, this analysis will assume that expressions of certain\n+; types do not alias expressions of certain other types.  Only used\n+; if alias analysis (in general) is enabled.\n fstrict-aliasing\n Common Report Var(flag_strict_aliasing)\n Assume strict aliasing rules apply\n@@ -733,6 +797,9 @@ ftracer\n Common Report Var(flag_tracer)\n Perform superblock formation via tail duplication\n \n+; Zero means that floating-point math operations cannot generate a\n+; (user-visible) trap.  This is the case, for example, in nonstop\n+; IEEE 754 arithmetic.\n ftrapping-math\n Common Report Var(flag_trapping_math)\n Assume floating-point operations can trap\n@@ -812,6 +879,10 @@ funroll-all-loops\n Common Report Var(flag_unroll_all_loops)\n Perform loop unrolling for all loops\n \n+; Nonzero means that unsafe floating-point math optimizations are allowed\n+; for the sake of speed.  IEEE compliance is not guaranteed, and operations\n+; are allowed to assume that their arguments and results are \"normal\"\n+; (e.g., nonnegative for SQRT).\n funsafe-math-optimizations\n Common Report Var(flag_unsafe_math_optimizations)\n Allow math optimizations that may violate IEEE or ISO standards\n@@ -828,6 +899,12 @@ fvar-tracking\n Common Report Var(flag_var_tracking) VarExists\n Perform variable tracking\n \n+; -fverbose-asm causes extra commentary information to be produced in\n+; the generated assembly code (to make it more readable).  This option\n+; is generally only of use to those who actually need to read the\n+; generated assembly code (perhaps while debugging the compiler itself).\n+; -fno-verbose-asm, the default, causes the extra information\n+; to not be added and is useful when comparing two assembler files.\n fverbose-asm\n Common Report Var(flag_verbose_asm)\n Add extra commentary to assembler output"}, {"sha": "1b4a10a7346091fa1537adaf16af45221c2fa943", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 501, "changes": 501, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b66477d00176188d515ecfdbd2854588937962/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b66477d00176188d515ecfdbd2854588937962/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=31b66477d00176188d515ecfdbd2854588937962", "patch": "@@ -59,9 +59,6 @@ extern enum debug_info_level debug_info_level;\n    debugging information.  */\n extern bool use_gnu_debug_info_extensions;\n \n-/* Nonzero means emit debugging information only for symbols which are used.  */\n-extern int flag_debug_only_used_symbols;\n-\n /* Nonzero means do optimizations.  -opt.  */\n \n extern int optimize;\n@@ -70,16 +67,6 @@ extern int optimize;\n \n extern int optimize_size;\n \n-/* Don't print functions as they are compiled and don't print\n-   times taken by the various passes.  -quiet.  */\n-\n-extern int quiet_flag;\n-\n-/* Print memory still in use at end of compilation (which may have little\n-   to do with peak memory consumption).  -fmem-report.  */\n-\n-extern int mem_report;\n-\n /* Do print extra warnings (such as for uninitialized variables).\n    -W/-Wextra.  */\n \n@@ -91,10 +78,6 @@ extern bool extra_warnings;\n \n extern void set_Wunused (int setting);\n \n-/* Nonzero to warn about variables used before they are initialized.  */\n-\n-extern int warn_uninitialized;\n-\n /* Nonzero means warn about function definitions that default the return type\n    or that use a null return and have a return-type other than void.  */\n \n@@ -112,48 +95,6 @@ extern HOST_WIDE_INT larger_than_size;\n \n extern int warn_strict_aliasing;\n \n-/* Nonzero if generating code to do profiling.  */\n-\n-extern int profile_flag;\n-\n-/* Nonzero if generating code to profile program flow graph arcs.  */\n-\n-extern int profile_arc_flag;\n-\n-/* Nonzero if value profile should be measured.  */\n-\n-extern int flag_profile_values;\n-\n-/* Nonzero if generating info for gcov to calculate line test coverage.  */\n-\n-extern int flag_test_coverage;\n-\n-/* Nonzero indicates that branch taken probabilities should be calculated.  */\n-\n-extern int flag_branch_probabilities;\n-\n-/* Nonzero if basic blocks should be reordered.  */\n-\n-extern int flag_reorder_blocks;\n-\n-/* Nonzero if basic blocks should be partitioned into hot and cold\n-   sections of the .o file, in addition to being reordered.  */\n-\n-extern int flag_reorder_blocks_and_partition;\n-\n-/* Nonzero if functions should be reordered.  */\n-\n-extern int flag_reorder_functions;\n-\n-/* Nonzero if registers should be renamed.  */\n-\n-extern int flag_rename_registers;\n-\n-/* Nonzero for -pedantic switch: warn about anything\n-   that standard C forbids.  */\n-\n-extern int pedantic;\n-\n /* Temporarily suppress certain warnings.\n    This is set while reading code from a system header file.  */\n \n@@ -175,237 +116,29 @@ extern int flag_signed_char;\n \n extern int flag_short_enums;\n \n-/* Nonzero for -fcaller-saves: allocate values in regs that need to\n-   be saved across function calls, if that produces overall better code.\n-   Optional now, so people can test it.  */\n-\n-extern int flag_caller_saves;\n-\n /* Nonzero for -fpcc-struct-return: return values the same way PCC does.  */\n \n extern int flag_pcc_struct_return;\n \n-/* Nonzero for -fforce-mem: load memory value into a register\n-   before arithmetic on it.  This makes better cse but slower compilation.  */\n-\n-extern int flag_force_mem;\n-\n-/* Nonzero for -fforce-addr: load memory address into a register before\n-   reference to memory.  This makes better cse but slower compilation.  */\n-\n-extern int flag_force_addr;\n-\n-/* Nonzero for -fdefer-pop: don't pop args after each function call;\n-   instead save them up to pop many calls' args with one insns.  */\n-\n-extern int flag_defer_pop;\n-\n-/* Nonzero for -ffloat-store: don't allocate floats and doubles\n-   in extended-precision registers.  */\n-\n-extern int flag_float_store;\n-\n-/* Nonzero enables strength-reduction in loop.c.  */\n-\n-extern int flag_strength_reduce;\n-\n-/* Nonzero enables loop unrolling in unroll.c.  Only loops for which the\n-   number of iterations can be calculated at compile-time (UNROLL_COMPLETELY,\n-   UNROLL_MODULO) or at run-time (preconditioned to be UNROLL_MODULO) are\n-   unrolled.  */\n-\n-extern int flag_old_unroll_loops;\n-\n-/* Nonzero enables loop unrolling in unroll.c.  All loops are unrolled.\n-   This is generally not a win.  */\n-\n-extern int flag_old_unroll_all_loops;\n-\n-/* Nonzero forces all invariant computations in loops to be moved\n-   outside the loop.  */\n-\n-extern int flag_move_all_movables;\n-\n-/* Nonzero enables prefetch optimizations for arrays in loops.  */\n-\n-extern int flag_prefetch_loop_arrays;\n-\n-/* Nonzero forces all general induction variables in loops to be\n-   strength reduced.  */\n-\n-extern int flag_reduce_all_givs;\n-\n-/* Nonzero for -fcse-follow-jumps:\n-   have cse follow jumps to do a more extensive job.  */\n-\n-extern int flag_cse_follow_jumps;\n-\n-/* Nonzero for -fcse-skip-blocks:\n-   have cse follow a branch around a block.  */\n-\n-extern int flag_cse_skip_blocks;\n-\n-/* Nonzero for -fexpensive-optimizations:\n-   perform miscellaneous relatively-expensive optimizations.  */\n-extern int flag_expensive_optimizations;\n-\n-/* Nonzero means to use global dataflow analysis to eliminate\n-   useless null pointer tests.  */\n-extern int flag_delete_null_pointer_checks;\n-\n-/* Nonzero means don't put addresses of constant functions in registers.\n-   Used for compiling the Unix kernel, where strange substitutions are\n-   done on the assembly output.  */\n-\n-extern int flag_no_function_cse;\n-\n-/* Nonzero for -fomit-frame-pointer:\n-   don't make a frame pointer in simple functions that don't require one.  */\n-\n-extern int flag_omit_frame_pointer;\n-\n-/* Nonzero to inhibit use of define_optimization peephole opts.  */\n-\n-extern int flag_no_peephole;\n-\n-/* Nonzero allows GCC to optimize sibling and tail recursive calls.  */\n-\n-extern int flag_optimize_sibling_calls;\n-\n-/* Nonzero means the front end generally wants `errno' maintained by math\n-   operations, like built-in SQRT.  */\n-\n-extern int flag_errno_math;\n-\n-/* Nonzero means that unsafe floating-point math optimizations are allowed\n-   for the sake of speed.  IEEE compliance is not guaranteed, and operations\n-   are allowed to assume that their arguments and results are \"normal\"\n-   (e.g., nonnegative for SQRT).  */\n-\n-extern int flag_unsafe_math_optimizations;\n-\n-/* Nonzero means that no NaNs or +-Infs are expected.  */\n-\n-extern int flag_finite_math_only;\n-\n-/* Zero means that floating-point math operations cannot generate a\n-   (user-visible) trap.  This is the case, for example, in nonstop\n-   IEEE 754 arithmetic.  */\n-\n-extern int flag_trapping_math;\n-\n-/* Nonzero means disable transformations that assume default floating\n-   point rounding behavior.  */\n-\n-extern int flag_rounding_math;\n-\n /* 0 means straightforward implementation of complex divide acceptable.\n    1 means wide ranges of inputs must work for complex divide.\n    2 means C99-like requirements for complex divide (not yet implemented).  */\n \n extern int flag_complex_divide_method;\n \n-/* Nonzero means to run loop optimizations twice.  */\n-\n-extern int flag_rerun_loop_opt;\n-\n-/* Nonzero means make functions that look like good inline candidates\n-   go inline.  */\n-\n-extern int flag_inline_functions;\n-\n-/* Nonzero for -fkeep-inline-functions: even if we make a function\n-   go inline everywhere, keep its definition around for debugging\n-   purposes.  */\n-\n-extern int flag_keep_inline_functions;\n-\n-/* Nonzero means that functions declared `inline' will be treated\n-   as `static'.  Prevents generation of zillions of copies of unused\n-   static inline functions; instead, `inlines' are written out\n-   only when actually used.  Used in conjunction with -g.  Also\n-   does the right thing with #pragma interface.  */\n-\n-extern int flag_no_inline;\n-\n /* Nonzero means that we don't want inlining by virtue of -fno-inline,\n    not just because the tree inliner turned us off.  */\n \n extern int flag_really_no_inline;\n \n /* Nonzero if we are only using compiler to check syntax errors.  */\n \n-extern int flag_syntax_only;\n extern int rtl_dump_and_exit;\n \n-/* Nonzero if we are exiting on the first error occurred.  */\n-\n-extern int flag_fatal_errors;\n-\n /* Nonzero means we should save auxiliary info into a .X file.  */\n \n extern int flag_gen_aux_info;\n \n-/* Nonzero means make the text shared if supported.  */\n-\n-extern int flag_shared_data;\n-\n-/* Controls the activation of SMS modulo scheduling.  */\n-extern int flag_modulo_sched;\n-\n-/* flag_schedule_insns means schedule insns within basic blocks (before\n-   local_alloc).\n-   flag_schedule_insns_after_reload means schedule insns after\n-   global_alloc.  */\n-\n-extern int flag_schedule_insns;\n-extern int flag_schedule_insns_after_reload;\n-extern int flag_sched2_use_superblocks;\n-extern int flag_sched2_use_traces;\n-\n-/* The following flags have effect only for scheduling before register\n-   allocation:\n-\n-   flag_schedule_interblock means schedule insns across basic blocks.\n-   flag_schedule_speculative means allow speculative motion of non-load insns.\n-   flag_schedule_speculative_load means allow speculative motion of some\n-   load insns.\n-   flag_schedule_speculative_load_dangerous allows speculative motion of more\n-   load insns.  */\n-\n-extern int flag_schedule_interblock;\n-extern int flag_schedule_speculative;\n-extern int flag_schedule_speculative_load;\n-extern int flag_schedule_speculative_load_dangerous;\n-\n-/* The following flags have an effect during scheduling after register\n-   allocation:   \n-\n-   sched_stalled_insns means that insns can be moved prematurely from the queue\n-   of stalled insns into the ready list.\n-\n-   sched_stalled_insns_dep controls how many recently scheduled cycles will \n-   be examined for a dependency on a stalled insn that is candidate for\n-   premature removal from the queue of stalled insns into the ready list (has \n-   an effect only if the flag 'sched_stalled_insns' is set).  */\n-\n-extern int flag_sched_stalled_insns;\n-extern int flag_sched_stalled_insns_dep;\n-\n-/* flag_branch_on_count_reg means try to replace add-1,compare,branch tupple\n-   by a cheaper branch, on a count register.  */\n-extern int flag_branch_on_count_reg;\n-\n-/* This option is set to 1 on -fsingle-precision-constant option which is\n-   used to convert the floating point constants to single precision \n-   constants.  */\n-\n-extern int flag_single_precision_constant;\n-\n-/* Nonzero means put things in delayed-branch slots if supported.  */\n-\n-extern int flag_delayed_branch;\n-\n /* Nonzero means suppress output of instruction numbers and line number\n    notes in debugging dumps.  */\n \n@@ -416,63 +149,11 @@ extern int flag_dump_unnumbered;\n \n extern int flag_pedantic_errors;\n \n-/* Nonzero means generate position-independent code.  1 vs 2 for a \n-   target-dependent \"small\" or \"large\" mode.  */\n-\n-extern int flag_pic;\n-\n-/* Nonzero if we are compiling position independent code for executable.\n-   1 vs 2 for a target-dependent \"small\" or \"large\" mode.  */\n-      \n-extern int flag_pie;\n-      \n /* Nonzero if we are compiling code for a shared library, zero for\n    executable.  */\n \n extern int flag_shlib;\n \n-/* Nonzero means generate extra code for exception handling and enable\n-   exception handling.  */\n-\n-extern int flag_exceptions;\n-\n-/* Nonzero means generate frame unwind info table when supported.  */\n-\n-extern int flag_unwind_tables;\n-\n-/* Nonzero means generate frame unwind info table exact at each insn boundary.  */\n-\n-extern int flag_asynchronous_unwind_tables;\n-\n-/* Nonzero means don't place uninitialized global data in common storage\n-   by default.  */\n-\n-extern int flag_no_common;\n-\n-/* -finhibit-size-directive inhibits output of .size for ELF.\n-   This is used only for compiling crtstuff.c,\n-   and it may be extended to other effects\n-   needed for crtstuff.c on other systems.  */\n-extern int flag_inhibit_size_directive;\n-\n-/* Nonzero means place each function into its own section on those platforms\n-   which support arbitrary section names and unlimited numbers of sections.  */\n-\n-extern int flag_function_sections;\n-\n-/* ... and similar for data.  */\n- \n-extern int flag_data_sections;\n-\n-/* -fverbose-asm causes extra commentary information to be produced in\n-   the generated assembly code (to make it more readable).  This option\n-   is generally only of use to those who actually need to read the\n-   generated assembly code (perhaps while debugging the compiler itself).\n-   -fno-verbose-asm, the default, causes the extra information\n-   to not be added and is useful when comparing two assembler files.  */\n-\n-extern int flag_verbose_asm;\n-\n /* -dA causes debug information to be produced in\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the\n@@ -484,55 +165,6 @@ extern int flag_debug_asm;\n \n extern int flag_dump_rtl_in_asm;\n \n-/* Greater than zero if user symbols are prepended by a leading underscore\n-   in generated assembly code.  */\n-extern int flag_leading_underscore;\n-\n-/* Tag all structures with __attribute__(packed) */\n-extern int flag_pack_struct;\n-\n-/* This flag is only tested if alias checking is enabled.\n-   0 if pointer arguments may alias each other.  True in C.\n-   1 if pointer arguments may not alias each other but may alias\n-   global variables.\n-   2 if pointer arguments may not alias each other and may not\n-   alias global variables.  True in Fortran.\n-   The value is ignored if flag_alias_check is 0.  */\n-extern int flag_argument_noalias;\n-\n-/* Nonzero if we should do (language-dependent) alias analysis.\n-   Typically, this analysis will assume that expressions of certain\n-   types do not alias expressions of certain other types.  Only used\n-   if alias analysis (in general) is enabled.  */\n-extern int flag_strict_aliasing;\n-\n-/* Emit code to probe the stack, to help detect stack overflow; also\n-   may cause large objects to be allocated dynamically.  */\n-extern int flag_stack_check;\n-\n-/* Do the full regmove optimization pass.  */\n-extern int flag_regmove;\n-\n-/* Instrument functions with calls at entry and exit, for profiling.  */\n-extern int flag_instrument_function_entry_exit;\n-\n-/* Perform a peephole pass before sched2.  */\n-extern int flag_peephole2;\n-\n-/* Try to guess branch probabilities.  */\n-extern int flag_guess_branch_prob;\n-\n-/* -fcheck-bounds causes gcc to generate array bounds checks.\n-   For C, C++ and ObjC: defaults off.\n-   For Java: defaults to on.\n-   For Fortran: defaults to off.  */\n-extern int flag_bounds_check;\n-\n-/* This will attempt to merge constant section constants, if 1 only\n-   string constants and constants from constant pool, if 2 also constant\n-   variables.  */\n-extern int flag_merge_constants;\n-\n /* If one, renumber instruction UIDs to reduce the number of\n    unused UIDs if there are a lot of instructions.  If greater than\n    one, unconditionally renumber instruction UIDs.  */\n@@ -546,13 +178,6 @@ extern int flag_renumber_insns;\n \n extern int frame_pointer_needed;\n \n-/* Nonzero if the generated code should trap on signed overflow\n-   for PLUS / SUB / MULT.  */\n-extern int flag_trapv;\n-\n-/* Nonzero if the signed arithmetic overflow should wrap around.  */\n-extern int flag_wrapv;\n-\n /* Nonzero if subexpressions must be evaluated from left-to-right.  */\n extern int flag_evaluation_order;\n \n@@ -565,16 +190,12 @@ extern bool g_switch_set;\n    For each variable, there is an _log variant which is the power\n    of two not less than the variable, for .align output.  */\n \n-extern int align_loops;\n extern int align_loops_log;\n extern int align_loops_max_skip;\n-extern int align_jumps;\n extern int align_jumps_log;\n extern int align_jumps_max_skip;\n-extern int align_labels;\n extern int align_labels_log;\n extern int align_labels_max_skip;\n-extern int align_functions;\n extern int align_functions_log;\n \n /* Like align_functions_log above, but used by front-ends to force the\n@@ -592,106 +213,10 @@ enum graph_dump_types\n };\n extern enum graph_dump_types graph_dump_format;\n \n-/* Nonzero means ignore `#ident' directives.  0 means handle them.\n-   On SVR4 targets, it also controls whether or not to emit a\n-   string identifying the compiler.  */\n-\n-extern int flag_no_ident;\n-\n-/* Nonzero means perform global CSE.  */\n-\n-extern int flag_gcse;\n-\n-/* Nonzero if we want to perform enhanced load motion during gcse.  */\n-\n-extern int flag_gcse_lm;\n-\n-/* Nonzero if we want to perform store motion after gcse.  */\n-\n-extern int flag_gcse_sm;\n-\n-/* Nonzero if we want to perform redundant load-after-store elimination\n-   in gcse.  */\n-\n-extern int flag_gcse_las;\n-\n-/* Nonzero if we want to perform global redundancy elimination after\n-   register allocation.  */\n-\n-extern int flag_gcse_after_reload;\n-\n-/* Nonzero if value histograms should be used to optimize code.  */\n-extern int flag_value_profile_transformations;\n-\n-/* Perform branch target register optimization before prologue / epilogue\n-   threading.  */\n-\n-extern int flag_branch_target_load_optimize;\n-\n-/* Perform branch target register optimization after prologue / epilogue\n-   threading and jump2.  */\n-\n-extern int flag_branch_target_load_optimize2;\n-\n-/* For the bt-load pass, nonzero means don't re-use branch target registers \n-   in any basic block.  */\n-extern int flag_btr_bb_exclusive;\n-\n-\n-/* Nonzero means we should do dwarf2 duplicate elimination.  */\n-\n-extern int flag_eliminate_dwarf2_dups;\n-\n-/* Nonzero means we should do unused type elimination.  */\n-\n-extern int flag_eliminate_unused_debug_types;\n-\n /* Nonzero means to collect statistics which might be expensive\n    and to print them when we are done.  */\n extern int flag_detailed_statistics;\n \n-/* Nonzero means enable synchronous exceptions for non-call instructions.  */\n-extern int flag_non_call_exceptions;\n-\n-/* Nonzero means enable mudflap bounds-checking transforms;\n-   >1 means also to include multithreading locks.  */\n-extern int flag_mudflap;\n-extern int flag_mudflap_threads;\n-extern int flag_mudflap_ignore_reads;\n-\n-/* Enable SSA-PRE on trees.  */\n-extern int flag_tree_pre;\n-\n-/* Enable SSA-CCP on trees.  */\n-extern int flag_tree_ccp;\n-\n-/* Enable SSA-DCE on trees.  */\n-extern int flag_tree_dce;\n-\n-/* Enable SSA->normal pass memory location coalescing.  */\n-extern int flag_tree_combine_temps;\n-\n-/* Enable SSA->normal pass expression replacement.  */\n-extern int flag_tree_ter;\n-\n-/* Enable SSA_>normal live range splitting.  */\n-extern int flag_tree_live_range_split;\n-\n-/* Enable dominator optimizations.  */\n-extern int flag_tree_dom;\n-\n-/* Enable loop header copying on tree-ssa.  */\n-extern int flag_tree_ch;\n-\n-/* Enable dead store and redundant load elimination */\n-extern int flag_tree_dse;\n-\n-/* Enable scalar replacement of aggregates.  */\n-extern int flag_tree_sra;\n-\n-/* Enable copy rename optimization.  */\n-extern int flag_tree_copyrename;\n-\n /* Enable points-to analysis on trees.  */\n enum pta_type\n   {\n@@ -700,17 +225,6 @@ enum pta_type\n   };\n extern enum pta_type flag_tree_points_to;\n \n-/* Enable FRE (Full Redundancy Elimination) on trees.  */\n-extern int flag_tree_fre;\n-\n-/* Nonzero means put zero initialized data in the bss section.  */\n-extern int flag_zero_initialized_in_bss;\n-\n-/* Nonzero means disable transformations observable by signaling NaNs.  */\n-extern int flag_signaling_nans;\n-\n-extern int flag_unit_at_a_time;\n-\n extern int flag_web;\n \n /* Nonzero means that we defer emitting functions until they are actually\n@@ -725,21 +239,6 @@ extern int flag_var_tracking;\n \n extern const char *flag_random_seed;\n \n-/*  The version of the C++ ABI in use.  The following values are\n-    allowed:\n-\n-    0: The version of the ABI believed most conformant with the \n-       C++ ABI specification.  This ABI may change as bugs are\n-       discovered and fixed.  Therefore, 0 will not necessarily\n-       indicate the same ABI in different versions of G++.\n-\n-    1: The version of the ABI first used in G++ 3.2.\n-\n-    Additional positive integers will be assigned as new versions of\n-    the ABI become the default version of the ABI.  */\n-\n-extern int flag_abi_version;\n-\n /* Returns TRUE if generated code should match ABI version N or\n    greater is in use.  */\n "}]}