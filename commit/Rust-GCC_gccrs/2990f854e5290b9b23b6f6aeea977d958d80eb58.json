{"sha": "2990f854e5290b9b23b6f6aeea977d958d80eb58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5MGY4NTRlNTI5MGI5YjIzYjZmNmFlZWE5NzdkOTU4ZDgwZWI1OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-01-29T06:08:07Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-01-29T06:08:07Z"}, "message": "[multiple changes]\n\n2006-01-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/17911\n\t* expr.c (gfc_check_assign, gfc_check_pointer_assign): Emit error if\n\tthe lvalue is a use associated procedure.\n\n\tPR fortran/20895\n\tPR fortran/25030\n\t* expr.c (gfc_check_pointer_assign): Emit error if lvalue and rvalue\n\tcharacter lengths are not the same.  Use gfc_dep_compare_expr for the\n\tcomparison.\n\t* gfortran.h: Add prototype for gfc_dep_compare_expr.\n\t* dependency.h: Remove prototype for gfc_dep_compare_expr.\n\n2006-01-29  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/17911\n\t* gfortran.dg/procedure_lvalue.f90: New test.\n\n\tPR fortran/20895\n\tPR fortran/25030\n\t* gfortran.dg/char_pointer_assign_2.f90: New test.\n\t* gfortran.dg/char_result_1.f90: Correct unequal charlen pointer\n\tassignment to be consistent with standard.\n\t* gfortran.dg/char_result_2.f90: The same.\n\t* gfortran.dg/char_result_8.f90: The same.\n\nFrom-SVN: r110365", "tree": {"sha": "c493858c5802a7c1b40e9a3197f20794ee88cc60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c493858c5802a7c1b40e9a3197f20794ee88cc60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2990f854e5290b9b23b6f6aeea977d958d80eb58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2990f854e5290b9b23b6f6aeea977d958d80eb58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2990f854e5290b9b23b6f6aeea977d958d80eb58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2990f854e5290b9b23b6f6aeea977d958d80eb58/comments", "author": null, "committer": null, "parents": [{"sha": "21c4a6a73277ef6fec1ad1940109aaa1144a0fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c4a6a73277ef6fec1ad1940109aaa1144a0fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c4a6a73277ef6fec1ad1940109aaa1144a0fee"}], "stats": {"total": 100, "additions": 94, "deletions": 6}, "files": [{"sha": "b5220e1f927a4d28010349af5ce6784c25f2d7fc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -1,3 +1,17 @@\n+2006-01-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/17911\n+\t* expr.c (gfc_check_assign, gfc_check_pointer_assign): Emit error if\n+\tthe lvalue is a use associated procedure.\n+\n+\tPR fortran/20895\n+\tPR fortran/25030\n+\t* expr.c (gfc_check_pointer_assign): Emit error if lvalue and rvalue\n+\tcharacter lengths are not the same.  Use gfc_dep_compare_expr for the\n+\tcomparison.\n+\t* gfortran.h: Add prototype for gfc_dep_compare_expr.\n+\t* dependency.h: Remove prototype for gfc_dep_compare_expr.\n+\n 2005-01-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25964"}, {"sha": "719f444a8caa1c57fced2bb0ab0085a1e3da271c", "filename": "gcc/fortran/dependency.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2Fdependency.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2Fdependency.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.h?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -27,7 +27,6 @@ int gfc_check_fncall_dependency (gfc_expr *, sym_intent, gfc_symbol *,\n \t\t\t\t gfc_actual_arglist *);\n int gfc_check_dependency (gfc_expr *, gfc_expr *, gfc_expr **, int);\n int gfc_is_same_range (gfc_array_ref *, gfc_array_ref *, int, int);\n-int gfc_dep_compare_expr (gfc_expr *, gfc_expr *);\n int gfc_expr_is_one (gfc_expr *, int);\n \n int gfc_dep_resolver(gfc_ref *, gfc_ref *);"}, {"sha": "0e699c26de7af2c580ad5dc9afa4bd8fd6f4822b", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -1859,6 +1859,14 @@ gfc_check_assign (gfc_expr * lvalue, gfc_expr * rvalue, int conform)\n       return FAILURE;\n     }\n \n+  if (sym->attr.flavor == FL_PROCEDURE && sym->attr.use_assoc)\n+    {\n+      gfc_error (\"'%s' in the assignment at %L cannot be an l-value \"\n+\t\t \"since it is a procedure\", sym->name, &lvalue->where);\n+      return FAILURE;\n+    }\n+\n+\n   if (rvalue->rank != 0 && lvalue->rank != rvalue->rank)\n     {\n       gfc_error (\"Incompatible ranks %d and %d in assignment at %L\",\n@@ -1944,6 +1952,15 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n       return FAILURE;\n     }\n \n+  if (lvalue->symtree->n.sym->attr.flavor == FL_PROCEDURE\n+\t&& lvalue->symtree->n.sym->attr.use_assoc)\n+    {\n+      gfc_error (\"'%s' in the pointer assignment at %L cannot be an \"\n+\t\t \"l-value since it is a procedure\",\n+\t\t lvalue->symtree->n.sym->name, &lvalue->where);\n+      return FAILURE;\n+    }\n+\n   attr = gfc_variable_attr (lvalue, NULL);\n   if (!attr.pointer)\n     {\n@@ -1980,6 +1997,16 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n       return FAILURE;\n     }\n \n+  if (lvalue->ts.type == BT_CHARACTER\n+\t&& lvalue->ts.cl->length && rvalue->ts.cl->length\n+\t&& abs (gfc_dep_compare_expr (lvalue->ts.cl->length,\n+\t\t\t\t      rvalue->ts.cl->length)) == 1)\n+    {\n+      gfc_error (\"Different character lengths in pointer \"\n+\t\t \"assignment at %L\", &lvalue->where);\n+      return FAILURE;\n+    }\n+\n   attr = gfc_expr_attr (rvalue);\n   if (!attr.target && !attr.pointer)\n     {"}, {"sha": "a1aaaf09967e0b44848e696969fc237ff9389570", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -1967,4 +1967,7 @@ void gfc_show_namespace (gfc_namespace *);\n try gfc_parse_file (void);\n void global_used (gfc_gsymbol *, locus *);\n \n+/* dependency.c */\n+int gfc_dep_compare_expr (gfc_expr *, gfc_expr *);\n+\n #endif /* GCC_GFORTRAN_H  */"}, {"sha": "3c19025366961af9d3d1bfd1114d9f5407edc31c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -1,3 +1,16 @@\n+2006-01-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/17911\n+\t* gfortran.dg/procedure_lvalue.f90: New test.\n+\n+\tPR fortran/20895\n+\tPR fortran/25030\n+\t* gfortran.dg/char_pointer_assign_2.f90: New test.\n+\t* gfortran.dg/char_result_1.f90: Correct unequal charlen pointer\n+\tassignment to be consistent with standard.\n+\t* gfortran.dg/char_result_2.f90: The same.\n+\t* gfortran.dg/char_result_8.f90: The same.\n+\n 2006-01-28  Zack Weinberg  <zackw@panix.com>\n \n \t* gcc.dg/Woverlength-strings.c"}, {"sha": "f99b20f14b8a22fe1e48fa273006fd53c5e6c0f7", "filename": "gcc/testsuite/gfortran.dg/char_pointer_assign_2.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_2.f90?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! Tests the fix for PRs20895 and 25030, where pointer assignments\n+! of different length characters were accepted.\n+  character(4), target :: ch1(2)\n+  character(4), pointer :: ch2(:)\n+  character(5), pointer :: ch3(:)\n+\n+  ch2 => ch1  ! Check correct is OK\n+  ch3 => ch1  ! { dg-error \"Different character lengths\" }\n+\n+end\n\\ No newline at end of file"}, {"sha": "2e0b4ef1426fadc06428b84ec89bce5cc2ce444d", "filename": "gcc/testsuite/gfortran.dg/char_result_1.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_1.f90?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -40,11 +40,12 @@ end function f2\n   end interface\n \n   integer :: a\n-  character (len = 80), target :: text\n+  character (len = 80)  :: text\n+  character (len = 70), target :: textt\n   character (len = 70), pointer :: textp\n \n   a = 42\n-  textp => text\n+  textp => textt\n \n   call test (f1 (text), 80)\n   call test (f2 (text, text), 110)"}, {"sha": "b7ecb6669c66762549be911254de425b914ffa1f", "filename": "gcc/testsuite/gfortran.dg/char_result_2.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_2.f90?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -39,11 +39,12 @@ end function f2\n   end interface\n \n   integer :: a\n-  character (len = 80), target :: text\n+  character (len = 80) :: text\n+  character (len = 70), target :: textt\n   character (len = 70), pointer :: textp\n \n   a = 42\n-  textp => text\n+  textp => textt\n \n   call test (f1 (textp), 70)\n   call test (f2 (textp, textp), 95)"}, {"sha": "69b119647c4ade178be6cf08a36bf3f23c8d8c92", "filename": "gcc/testsuite/gfortran.dg/char_result_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_8.f90?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -4,7 +4,7 @@\n program main\n   implicit none\n \n-  character (len = 100), target :: string\n+  character (len = 30), target :: string\n \n   call test (f1 (), 30)\n   call test (f2 (50), 50)"}, {"sha": "575c2ca91a55972a861da624e082327412264987", "filename": "gcc/testsuite/gfortran.dg/procedure_lvalue.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2990f854e5290b9b23b6f6aeea977d958d80eb58/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprocedure_lvalue.f90?ref=2990f854e5290b9b23b6f6aeea977d958d80eb58", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! Tests the fix for PR17911, where a USE associated l-value\n+! would cause an ICE in gfc_conv_variable.\n+! Test contributed by Tobias Schlueter  <tobi@gcc.gnu.org>\n+module t\n+  interface a\n+     module procedure b\n+  end interface\n+contains\n+  integer function b(x)\n+    b = x\n+  end function b\n+end module t\n+\n+subroutine r\n+  use t\n+  b = 1.       ! { dg-error \"l-value since it is a procedure\" }\n+  y = a(1.)\n+end subroutine r\n\\ No newline at end of file"}]}