{"sha": "80fd8eba8ed7cc70a89e4f31931a5da28464357a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmZDhlYmE4ZWQ3Y2M3MGE4OWU0ZjMxOTMxYTVkYTI4NDY0MzU3YQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2011-12-13T17:49:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2011-12-13T17:49:55Z"}, "message": "trans-mem.c (struct diagnose_tm): Remove saw_unsafe.\n\n        PR/51443\n        * trans-mem.c (struct diagnose_tm): Remove saw_unsafe.\n        (diagnose_tm_1): Same.\n        (ipa_tm_execute): Do not test tm_may_enter_irr before we set it.\n        (ipa_tm_scan_irr_function): Return gracefully when no\n        DECL_STRUCT_FUNCTION.\n        (ipa_tm_scan_irr_block): Believe the user on TM attributes.\n\nFrom-SVN: r182290", "tree": {"sha": "89273e22c9ce249019e6e3514fc2903fb218f70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89273e22c9ce249019e6e3514fc2903fb218f70a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80fd8eba8ed7cc70a89e4f31931a5da28464357a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fd8eba8ed7cc70a89e4f31931a5da28464357a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80fd8eba8ed7cc70a89e4f31931a5da28464357a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fd8eba8ed7cc70a89e4f31931a5da28464357a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d370518679f55fa676afe6010301945b9ccc7053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d370518679f55fa676afe6010301945b9ccc7053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d370518679f55fa676afe6010301945b9ccc7053"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "60435516e7f183613d8f8aeee962ecf1b1172065", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80fd8eba8ed7cc70a89e4f31931a5da28464357a", "patch": "@@ -1,3 +1,13 @@\n+2011-12-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR/51443\n+\t* trans-mem.c (struct diagnose_tm): Remove saw_unsafe.\n+\t(diagnose_tm_1): Same.\n+\t(ipa_tm_execute): Do not test tm_may_enter_irr before we set it.\n+\t(ipa_tm_scan_irr_function): Return gracefully when no\n+\tDECL_STRUCT_FUNCTION.\n+\t(ipa_tm_scan_irr_block): Believe the user on TM attributes.\n+\n 2011-12-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/50628"}, {"sha": "3c8ebd2f6943f10d101b7c2a4751a48cd826ad5b", "filename": "gcc/testsuite/g++.dg/tm/asm-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fasm-1.c?ref=80fd8eba8ed7cc70a89e4f31931a5da28464357a", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+// { dg-options \"-fgnu-tm -O1\" }\n+\n+template<class T> class shared_ptr {\n+public:\n+    shared_ptr()  {\n+      __asm__ (\"\");\n+    }\n+};\n+template<typename _Tp> class deque {\n+public:\n+    void push_back() {\n+      ::new _Tp();\n+    }\n+};\n+class Bar {\n+  __attribute__((transaction_callable)) void push();\n+  deque<shared_ptr<int> > events;\n+};\n+void Bar::push() {\n+  events.push_back();\n+}"}, {"sha": "a3826e2a78e5deb79a873f7d3099c0b383f73a04", "filename": "gcc/testsuite/gcc.dg/tm/asm-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fasm-1.c?ref=80fd8eba8ed7cc70a89e4f31931a5da28464357a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-tm -O1\" } */\n+\n+static inline void asmfunc()\n+{\n+__asm__(\"\");\n+}\n+\n+__attribute__((transaction_callable))\n+void push()\n+{\n+        asmfunc();\n+}"}, {"sha": "9506e793abd020aedf03b1b69b83e5b921de902c", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fd8eba8ed7cc70a89e4f31931a5da28464357a/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=80fd8eba8ed7cc70a89e4f31931a5da28464357a", "patch": "@@ -544,7 +544,6 @@ struct diagnose_tm\n   unsigned int summary_flags : 8;\n   unsigned int block_flags : 8;\n   unsigned int func_flags : 8;\n-  unsigned int saw_unsafe : 1;\n   unsigned int saw_volatile : 1;\n   gimple stmt;\n };\n@@ -695,8 +694,6 @@ diagnose_tm_1 (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n       else if (d->func_flags & DIAG_TM_SAFE)\n \terror_at (gimple_location (stmt),\n \t\t  \"asm not allowed in %<transaction_safe%> function\");\n-      else\n-\td->saw_unsafe = true;\n       break;\n \n     case GIMPLE_TRANSACTION:\n@@ -711,8 +708,6 @@ diagnose_tm_1 (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \t    else if (d->func_flags & DIAG_TM_SAFE)\n \t      error_at (gimple_location (stmt),\n \t\t\t\"relaxed transaction in %<transaction_safe%> function\");\n-\t    else\n-\t      d->saw_unsafe = true;\n \t    inner_flags = DIAG_TM_RELAXED;\n \t  }\n \telse if (gimple_transaction_subcode (stmt) & GTMA_IS_OUTER)\n@@ -727,8 +722,6 @@ diagnose_tm_1 (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \t    else if (d->func_flags & DIAG_TM_SAFE)\n \t      error_at (gimple_location (stmt),\n \t\t\t\"outer transaction in %<transaction_safe%> function\");\n-\t    else\n-\t      d->saw_unsafe = true;\n \t    inner_flags |= DIAG_TM_OUTER;\n \t  }\n \n@@ -748,8 +741,6 @@ diagnose_tm_1 (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \n \t    walk_gimple_seq (gimple_transaction_body (stmt),\n \t\t\t     diagnose_tm_1, diagnose_tm_1_op, &wi_inner);\n-\n-\t    d->saw_unsafe |= d_inner.saw_unsafe;\n \t  }\n       }\n       break;\n@@ -780,11 +771,6 @@ diagnose_tm_blocks (void)\n   walk_gimple_seq (gimple_body (current_function_decl),\n \t\t   diagnose_tm_1, diagnose_tm_1_op, &wi);\n \n-  /* If we saw something other than a call that makes this function\n-     unsafe, remember it so that the IPA pass only needs to scan calls.  */\n-  if (d.saw_unsafe && !is_tm_safe_or_pure (current_function_decl))\n-    cgraph_local_info (current_function_decl)->tm_may_enter_irr = 1;\n-\n   return 0;\n }\n \n@@ -3696,7 +3682,11 @@ ipa_tm_scan_irr_block (basic_block bb)\n \t\tbreak;\n \n \t      d = get_cg_data (cgraph_get_node (fn));\n-\t      if (d->is_irrevocable)\n+\n+\t      /* Return true if irrevocable, but above all, believe\n+\t\t the user.  */\n+\t      if (d->is_irrevocable\n+\t\t  && !is_tm_safe_or_pure (fn))\n \t\treturn true;\n \t    }\n \t  break;\n@@ -3880,6 +3870,11 @@ ipa_tm_scan_irr_function (struct cgraph_node *node, bool for_clone)\n   VEC (basic_block, heap) *queue;\n   bool ret = false;\n \n+  /* Builtin operators (operator new, and such).  */\n+  if (DECL_STRUCT_FUNCTION (node->decl) == NULL\n+      || DECL_STRUCT_FUNCTION (node->decl)->cfg == NULL)\n+    return false;\n+\n   current_function_decl = node->decl;\n   push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n   calculate_dominance_info (CDI_DOMINATORS);\n@@ -4689,14 +4684,11 @@ ipa_tm_execute (void)\n \t    /* Scan for calls that are in each transaction.  */\n \t    ipa_tm_scan_calls_transaction (d, &tm_callees);\n \n-\t    /* If we saw something that will make us go irrevocable, put it\n-\t       in the worklist so we can scan the function later\n-\t       (ipa_tm_scan_irr_function) and mark the irrevocable blocks.  */\n-\t    if (node->local.tm_may_enter_irr)\n-\t      {\n-\t\tmaybe_push_queue (node, &irr_worklist, &d->in_worklist);\n-\t\td->want_irr_scan_normal = true;\n-\t      }\n+\t    /* Put it in the worklist so we can scan the function\n+\t       later (ipa_tm_scan_irr_function) and mark the\n+\t       irrevocable blocks.  */\n+\t    maybe_push_queue (node, &irr_worklist, &d->in_worklist);\n+\t    d->want_irr_scan_normal = true;\n \t  }\n \n \tpop_cfun ();\n@@ -4712,11 +4704,10 @@ ipa_tm_execute (void)\n       a = cgraph_function_body_availability (node);\n       d = get_cg_data (node);\n \n-      /* If we saw something that will make us go irrevocable, put it\n-\t in the worklist so we can scan the function later\n-\t (ipa_tm_scan_irr_function) and mark the irrevocable blocks.  */\n-      if (node->local.tm_may_enter_irr)\n-\tmaybe_push_queue (node, &irr_worklist, &d->in_worklist);\n+      /* Put it in the worklist so we can scan the function later\n+\t (ipa_tm_scan_irr_function) and mark the irrevocable\n+\t blocks.  */\n+      maybe_push_queue (node, &irr_worklist, &d->in_worklist);\n \n       /* Some callees cannot be arbitrarily cloned.  These will always be\n \t irrevocable.  Mark these now, so that we need not scan them.  */"}]}