{"sha": "ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY2YjY2NDE1MDZhOWFlYWI1ZGJiMDFhMmViZDIxNGZmM2E5NDJiYQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-11-24T02:02:26Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-11-24T02:02:26Z"}, "message": "re PR c++/21667 (misleading warning about array subscription)\n\n2005-11-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        PR c++/21667\n        * c-typeck.c (build_array_ref): Avoid code duplicate.  Use\n        common\n        C/C++ diagnostic function warn_array_subscript_with_type_char.\n        * c-common.h (warn_array_subscript_with_type_char): Declare.\n        * c-common.c (warn_array_subscript_with_type_char): Define.\n\ncp/\n2005-11-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        PR c++/21667\n        * typeck.c (build_array_ref): Avoid code duplicate.  Use\n        common\n        C/C++ diagnostic function warn_array_subscript_with_type_char.\n\ntestsuite/\n2005-11-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        PR c++/21667\n        * gcc.dg/Wchar-subscripts.c: New.\n        * g++.dg/warn/Wchar-subscripts.C: Likewise.\n\nFrom-SVN: r107448", "tree": {"sha": "e7e85e47eb726ead6275d3e7b3b82823305a9fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e85e47eb726ead6275d3e7b3b82823305a9fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fdc03073c4c0f664a6d5f1a5951b07c6e37fa44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fdc03073c4c0f664a6d5f1a5951b07c6e37fa44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fdc03073c4c0f664a6d5f1a5951b07c6e37fa44"}], "stats": {"total": 72, "additions": 53, "deletions": 19}, "files": [{"sha": "b843df2593537c3c2d56ce605e8fd339039dde35", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "patch": "@@ -6284,4 +6284,20 @@ check_missing_format_attribute (tree ltype, tree rtype)\n     return false;\n }\n \n+/* Subscripting with type char is likely to lose on a machine where\n+   chars are signed.  So warn on any machine, but optionally.  Don't\n+   warn for unsigned char since that type is safe.  Don't warn for\n+   signed char because anyone who uses that must have done so\n+   deliberately. Furthermore, we reduce the false positive load by\n+   warning only for non-constant value of type char.  */\n+\n+void\n+warn_array_subscript_with_type_char (tree index)\n+{\n+  if (TYPE_MAIN_VARIANT (TREE_TYPE (index)) == char_type_node\n+      && TREE_CODE (index) != INTEGER_CST)\n+    warning (OPT_Wchar_subscripts, \"array subscript has type %<char%>\");\n+}\n+\n+\n #include \"gt-c-common.h\""}, {"sha": "96905af107f8f32e430e99d80fa2fef9dcc8a907", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "patch": "@@ -836,6 +836,8 @@ extern int complete_array_type (tree *, tree, bool);\n \n extern tree builtin_type_for_size (int, bool);\n \n+extern void warn_array_subscript_with_type_char (tree);\n+\n /* In c-gimplify.c  */\n extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, tree *, tree *);"}, {"sha": "2150238ec6e1abc5c445b5c28d520eb15a2fafa4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "patch": "@@ -1859,16 +1859,10 @@ build_array_ref (tree array, tree index)\n       return error_mark_node;\n     }\n \n-  /* Subscripting with type char is likely to lose on a machine where\n-     chars are signed.  So warn on any machine, but optionally.  Don't\n-     warn for unsigned char since that type is safe.  Don't warn for\n-     signed char because anyone who uses that must have done so\n-     deliberately.  ??? Existing practice has also been to warn only\n-     when the char index is syntactically the index, not for\n-     char[array].  */\n-  if (!swapped\n-      && TYPE_MAIN_VARIANT (TREE_TYPE (index)) == char_type_node)\n-    warning (OPT_Wchar_subscripts, \"array subscript has type %<char%>\");\n+  /* ??? Existing practice has been to warn only when the char\n+     index is syntactically the index, not for char[array].  */\n+  if (!swapped)\n+     warn_array_subscript_with_type_char (index);\n \n   /* Apply default promotions *after* noticing character types.  */\n   index = default_conversion (index);"}, {"sha": "54362869f2f33798110e6652e93d667035e3c28c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "patch": "@@ -1,3 +1,9 @@\n+2005-11-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tPR c++/21667\n+\t* typeck.c (build_array_ref): Avoid code duplicate.  Use common\n+\tC/C++ diagnostic function warn_array_subscript_with_type_char. \n+\n 2005-11-21  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tPR c++/22238"}, {"sha": "b3c155a13c0e23b82be6f1fb331f528128c7d6bf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "patch": "@@ -2253,15 +2253,7 @@ build_array_ref (tree array, tree idx)\n     {\n       tree rval, type;\n \n-      /* Subscripting with type char is likely to lose\n-\t on a machine where chars are signed.\n-\t So warn on any machine, but optionally.\n-\t Don't warn for unsigned char since that type is safe.\n-\t Don't warn for signed char because anyone who uses that\n-\t must have done so deliberately.  */\n-      if (warn_char_subscripts\n-\t  && TYPE_MAIN_VARIANT (TREE_TYPE (idx)) == char_type_node)\n-\twarning (0, \"array subscript has type %<char%>\");\n+      warn_array_subscript_with_type_char (idx);\n \n       if (!INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (idx)))\n \t{"}, {"sha": "bc38585d72e40e44fc330d3a1da1084af68a7bb7", "filename": "gcc/testsuite/g++.dg/warn/Wchar-subscripts.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWchar-subscripts.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWchar-subscripts.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWchar-subscripts.C?ref=ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "patch": "@@ -0,0 +1,12 @@\n+/* Copyright (C) 2005  Free Software Foundation.\n+\n+   by Gabriel Dos Reis  <gdr@integrable-solutions.net>  */\n+\n+// { dg-do compile }\n+// { dg-options \"-Wchar-subscripts\" }\n+\n+int main()\n+{\n+  int ary[256] = { 0 };\n+  return ary['a'];\n+}"}, {"sha": "acc6d23578e1f92d48d5e65460c8ad41fcb28311", "filename": "gcc/testsuite/gcc.dg/Wchar-subscripts.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts.c?ref=ff6b6641506a9aeab5dbb01a2ebd214ff3a942ba", "patch": "@@ -0,0 +1,12 @@\n+/* Copyright (C) 2005  Free Software Foundation.\n+\n+   by Gabriel Dos Reis  <gdr@integrable-solutions.net>  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-Wchar-subscripts\" } */\n+\n+int main(void)\n+{\n+  int ary[256] = { 0 };\n+  return ary['a'];\n+}"}]}