{"sha": "aea329432b8e405668861bbe0cd2662a80508c45", "node_id": "C_kwDOANBUbNoAKGFlYTMyOTQzMmI4ZTQwNTY2ODg2MWJiZTBjZDI2NjJhODA1MDhjNDU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-29T12:55:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-30T08:39:09Z"}, "message": "Avoid computing RPO for update_ssa\n\nAt some point when domwalk got the ability to use RPO for ordering\ndominator children we carefully avoided update_ssa eating the cost\nof RPO compute.  Unfortunately some later consolidation of CTORs\nlost this again so the following makes this explicit via a special\nvalue to the bb_index_to_rpo argument of domwalk, speeding up\nupdate_ssa again.\n\n\t* domwalk.h (dom_walker::dom_walker): Update comment to\n\treflect reality and new special argument value for\n\tbb_index_to_rpo.\n\t* domwalk.cc (dom_walker::dom_walker): Recognize -1\n\tbb_index_to_rpo.\n\t* tree-into-ssa.cc\n\t(rewrite_update_dom_walker::rewrite_update_dom_walker): Tell\n\tdom_walker to not use RPO.", "tree": {"sha": "19a869a65d1062f7bab9be2fbd2efbc45d501ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a869a65d1062f7bab9be2fbd2efbc45d501ef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea329432b8e405668861bbe0cd2662a80508c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea329432b8e405668861bbe0cd2662a80508c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea329432b8e405668861bbe0cd2662a80508c45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea329432b8e405668861bbe0cd2662a80508c45/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "721aa2cc44d143e49a704bc8238b3d0d5f750a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721aa2cc44d143e49a704bc8238b3d0d5f750a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/721aa2cc44d143e49a704bc8238b3d0d5f750a49"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "e36e9eb8b552a358f05a66dbb96f5b454206d3b5", "filename": "gcc/domwalk.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea329432b8e405668861bbe0cd2662a80508c45/gcc%2Fdomwalk.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea329432b8e405668861bbe0cd2662a80508c45/gcc%2Fdomwalk.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.cc?ref=aea329432b8e405668861bbe0cd2662a80508c45", "patch": "@@ -191,7 +191,8 @@ dom_walker::dom_walker (cdi_direction direction,\n     m_reachability (reachability),\n     m_user_bb_to_rpo (bb_index_to_rpo != NULL),\n     m_unreachable_dom (NULL),\n-    m_bb_to_rpo (bb_index_to_rpo)\n+    m_bb_to_rpo (bb_index_to_rpo == (int *)(uintptr_t)-1\n+\t\t ? NULL : bb_index_to_rpo)\n {\n }\n \n@@ -272,7 +273,8 @@ void\n dom_walker::walk (basic_block bb)\n {\n   /* Compute the basic-block index to RPO mapping lazily.  */\n-  if (!m_bb_to_rpo\n+  if (!m_user_bb_to_rpo\n+      && !m_bb_to_rpo\n       && m_dom_direction == CDI_DOMINATORS)\n     {\n       int *postorder = XNEWVEC (int, n_basic_blocks_for_fn (cfun));"}, {"sha": "b71d29400ad60718c42eb2a34960cd3fd9f74a90", "filename": "gcc/domwalk.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea329432b8e405668861bbe0cd2662a80508c45/gcc%2Fdomwalk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea329432b8e405668861bbe0cd2662a80508c45/gcc%2Fdomwalk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.h?ref=aea329432b8e405668861bbe0cd2662a80508c45", "patch": "@@ -62,8 +62,9 @@ class dom_walker\n \n   /* You can provide a mapping of basic-block index to RPO if you\n      have that readily available or you do multiple walks.  If you\n-     specify NULL as BB_INDEX_TO_RPO dominator children will not be\n-     walked in RPO order.  */\n+     specify NULL as BB_INDEX_TO_RPO this mapping will be computed\n+     lazily at walk time.  If you specify -1 dominator children will\n+     not be walked in RPO order.  */\n   dom_walker (cdi_direction direction, enum reachability = ALL_BLOCKS,\n \t      int *bb_index_to_rpo = NULL);\n "}, {"sha": "c4e40e8fb0801111d2e0d41886a85b26ed85ca77", "filename": "gcc/tree-into-ssa.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea329432b8e405668861bbe0cd2662a80508c45/gcc%2Ftree-into-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea329432b8e405668861bbe0cd2662a80508c45/gcc%2Ftree-into-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.cc?ref=aea329432b8e405668861bbe0cd2662a80508c45", "patch": "@@ -2146,7 +2146,7 @@ class rewrite_update_dom_walker : public dom_walker\n {\n public:\n   rewrite_update_dom_walker (cdi_direction direction)\n-    : dom_walker (direction, ALL_BLOCKS, NULL) {}\n+    : dom_walker (direction, ALL_BLOCKS, (int *)(uintptr_t)-1) {}\n \n   edge before_dom_children (basic_block) final override;\n   void after_dom_children (basic_block) final override;"}]}