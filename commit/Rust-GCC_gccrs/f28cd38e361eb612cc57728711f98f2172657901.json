{"sha": "f28cd38e361eb612cc57728711f98f2172657901", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4Y2QzOGUzNjFlYjYxMmNjNTc3Mjg3MTFmOThmMjE3MjY1NzkwMQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T22:45:41Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T22:45:41Z"}, "message": "trans-array.c (gfc_trans_create_temp_array): Move invariant condition out of the containing loop.\n\n\t* trans-array.c (gfc_trans_create_temp_array): Move invariant condition\n\tout of the containing loop.\n\nFrom-SVN: r180882", "tree": {"sha": "d7da4fd05809fc375471a0d449fd4958ef6df660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7da4fd05809fc375471a0d449fd4958ef6df660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f28cd38e361eb612cc57728711f98f2172657901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28cd38e361eb612cc57728711f98f2172657901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28cd38e361eb612cc57728711f98f2172657901", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28cd38e361eb612cc57728711f98f2172657901/comments", "author": null, "committer": null, "parents": [{"sha": "b2028d0b943dff90a98b9c095298ea6413238a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2028d0b943dff90a98b9c095298ea6413238a88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2028d0b943dff90a98b9c095298ea6413238a88"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "9b07f76723ffb1eb82513ffd749472baf176e9d2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28cd38e361eb612cc57728711f98f2172657901/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28cd38e361eb612cc57728711f98f2172657901/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f28cd38e361eb612cc57728711f98f2172657901", "patch": "@@ -1,3 +1,8 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_trans_create_temp_array): Move invariant condition\n+\tout of the containing loop. \n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_conv_loop_setup, gfc_trans_create_temp_array):"}, {"sha": "663d12e6e6925b0d458ccbb1558204b46249f482", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28cd38e361eb612cc57728711f98f2172657901/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28cd38e361eb612cc57728711f98f2172657901/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=f28cd38e361eb612cc57728711f98f2172657901", "patch": "@@ -961,52 +961,55 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \tbreak;\n       }\n \n-  for (n = 0; n < loop->dimen; n++)\n+  if (size == NULL_TREE)\n     {\n-      dim = ss->dim[n];\n-\n-      if (size == NULL_TREE)\n+      for (n = 0; n < loop->dimen; n++)\n \t{\n+\t  dim = ss->dim[n];\n+\n \t  /* For a callee allocated array express the loop bounds in terms\n \t     of the descriptor fields.  */\n \t  tmp = fold_build2_loc (input_location,\n \t\tMINUS_EXPR, gfc_array_index_type,\n \t\tgfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[dim]),\n \t\tgfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[dim]));\n \t  loop->to[n] = tmp;\n-\t  continue;\n \t}\n-\t\n-      /* Store the stride and bound components in the descriptor.  */\n-      gfc_conv_descriptor_stride_set (pre, desc, gfc_rank_cst[n], size);\n+    }\n+  else\n+    {\n+      for (n = 0; n < loop->dimen; n++)\n+\t{\n+\t  /* Store the stride and bound components in the descriptor.  */\n+\t  gfc_conv_descriptor_stride_set (pre, desc, gfc_rank_cst[n], size);\n \n-      gfc_conv_descriptor_lbound_set (pre, desc, gfc_rank_cst[n],\n-\t\t\t\t      gfc_index_zero_node);\n+\t  gfc_conv_descriptor_lbound_set (pre, desc, gfc_rank_cst[n],\n+\t\t\t\t\t  gfc_index_zero_node);\n \n-      gfc_conv_descriptor_ubound_set (pre, desc, gfc_rank_cst[n],\n-\t\t\t\t      to[n]);\n+\t  gfc_conv_descriptor_ubound_set (pre, desc, gfc_rank_cst[n], to[n]);\n \n-      tmp = fold_build2_loc (input_location, PLUS_EXPR, gfc_array_index_type,\n-\t\t\t     to[n], gfc_index_one_node);\n+\t  tmp = fold_build2_loc (input_location, PLUS_EXPR,\n+\t\t\t\t gfc_array_index_type,\n+\t\t\t\t to[n], gfc_index_one_node);\n \n-      /* Check whether the size for this dimension is negative.  */\n-      cond = fold_build2_loc (input_location, LE_EXPR, boolean_type_node, tmp,\n-\t\t\t      gfc_index_zero_node);\n-      cond = gfc_evaluate_now (cond, pre);\n+\t  /* Check whether the size for this dimension is negative.  */\n+\t  cond = fold_build2_loc (input_location, LE_EXPR, boolean_type_node,\n+\t\t\t\t  tmp, gfc_index_zero_node);\n+\t  cond = gfc_evaluate_now (cond, pre);\n \n-      if (n == 0)\n-\tor_expr = cond;\n-      else\n-\tor_expr = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n-\t\t\t\t   boolean_type_node, or_expr, cond);\n+\t  if (n == 0)\n+\t    or_expr = cond;\n+\t  else\n+\t    or_expr = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n+\t\t\t\t       boolean_type_node, or_expr, cond);\n \n-      size = fold_build2_loc (input_location, MULT_EXPR, gfc_array_index_type,\n-\t\t\t      size, tmp);\n-      size = gfc_evaluate_now (size, pre);\n+\t  size = fold_build2_loc (input_location, MULT_EXPR,\n+\t\t\t\t  gfc_array_index_type, size, tmp);\n+\t  size = gfc_evaluate_now (size, pre);\n+\t}\n     }\n \n   /* Get the size of the array.  */\n-\n   if (size && !callee_alloc)\n     {\n       /* If or_expr is true, then the extent in at least one"}]}