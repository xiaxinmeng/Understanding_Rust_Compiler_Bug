{"sha": "999cc24c0866f08a09bc3608fcac95a2dee681d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5Y2MyNGMwODY2ZjA4YTA5YmMzNjA4ZmNhYzk1YTJkZWU2ODFkMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-03-11T20:34:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-03-11T20:34:51Z"}, "message": "Revert 2000-12-01 Nathan Sidwell <nathan@codesourcery.com>, It is incorrect.\n\ncp:\n\tRevert 2000-12-01  Nathan Sidwell  <nathan@codesourcery.com>,\n\tIt is incorrect.\n\t* typeck.c (build_static_cast): Compare non-qualified types\n\twith pointer to member conversions.\ntestsuite:\n\t* testsuite/g++.dg/overload/pmf1.C: New test.\n\nFrom-SVN: r50591", "tree": {"sha": "dc0fb0bf893653820d07bb3aa7aa71c77e01177d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc0fb0bf893653820d07bb3aa7aa71c77e01177d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/999cc24c0866f08a09bc3608fcac95a2dee681d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999cc24c0866f08a09bc3608fcac95a2dee681d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999cc24c0866f08a09bc3608fcac95a2dee681d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999cc24c0866f08a09bc3608fcac95a2dee681d3/comments", "author": null, "committer": null, "parents": [{"sha": "61eece67a6b6c97edec67b6ecb8c1144149ff228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61eece67a6b6c97edec67b6ecb8c1144149ff228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61eece67a6b6c97edec67b6ecb8c1144149ff228"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "513dd00cb5b72e565c0fea31cd5c10a289a0af3b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=999cc24c0866f08a09bc3608fcac95a2dee681d3", "patch": "@@ -1,3 +1,10 @@\n+2002-03-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tRevert 2000-12-01  Nathan Sidwell  <nathan@codesourcery.com>,\n+\tIt is incorrect.\n+\t* typeck.c (build_static_cast): Compare non-qualified types\n+\twith pointer to member conversions.\n+\n 2002-03-11  Dan Nicolaescu  <dann@ics.uci.edu>\n \t    Daniel Berlin  <dan@dberlin.org>\n "}, {"sha": "31b5baaf3fe9d4207b54971c6fb3f220aa2b9176", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=999cc24c0866f08a09bc3608fcac95a2dee681d3", "patch": "@@ -795,9 +795,8 @@ standard_conversion (to, from, expr)\n \t{\n \t  tree fbase = TYPE_OFFSET_BASETYPE (TREE_TYPE (from));\n \t  tree tbase = TYPE_OFFSET_BASETYPE (TREE_TYPE (to));\n-\t  tree binfo = lookup_base (tbase, fbase, ba_check, NULL);\n \n-\t  if (binfo && !binfo_from_vbase (binfo)\n+\t  if (DERIVED_FROM_P (fbase, tbase)\n \t      && (same_type_ignoring_top_level_qualifiers_p\n \t\t  (TREE_TYPE (TREE_TYPE (from)),\n \t\t   TREE_TYPE (TREE_TYPE (to)))))\n@@ -843,9 +842,8 @@ standard_conversion (to, from, expr)\n       tree tofn = TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (to));\n       tree fbase = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fromfn)));\n       tree tbase = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (tofn)));\n-      tree binfo = lookup_base (tbase, fbase, ba_check, NULL);\n \n-      if (!binfo || binfo_from_vbase (binfo)\n+      if (!DERIVED_FROM_P (fbase, tbase)\n \t  || !same_type_p (TREE_TYPE (fromfn), TREE_TYPE (tofn))\n \t  || !compparms (TREE_CHAIN (TYPE_ARG_TYPES (fromfn)),\n \t\t\t TREE_CHAIN (TYPE_ARG_TYPES (tofn)))"}, {"sha": "b14687b5027b686a7ba889d32f71d810d5c71bca", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=999cc24c0866f08a09bc3608fcac95a2dee681d3", "patch": "@@ -5078,6 +5078,22 @@ build_static_cast (type, expr)\n \t  && kind != bk_via_virtual)\n \tok = 1;\n     }\n+  else if (TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (intype))\n+    {\n+      /* They're pointers to members. The pointed to objects must be\n+\t the same (ignoring CV qualifiers), and the containing classes\n+\t must be related non-virtually. */\n+      base_kind kind;\n+      \n+      if (same_type_p\n+\t  (strip_all_pointer_quals (TREE_TYPE (TREE_TYPE (type))),\n+\t   strip_all_pointer_quals (TREE_TYPE (TREE_TYPE (intype))))\n+ \t  && (lookup_base (TYPE_OFFSET_BASETYPE (TREE_TYPE (intype)),\n+\t\t\t   TYPE_OFFSET_BASETYPE (TREE_TYPE (type)),\n+\t\t\t   ba_ignore | ba_quiet, &kind))\n+ \t  && kind != bk_via_virtual)\n+  \tok = 1;\n+    }\n   else if (TREE_CODE (intype) != BOOLEAN_TYPE\n \t   && TREE_CODE (type) != ARRAY_TYPE\n \t   && TREE_CODE (type) != FUNCTION_TYPE"}, {"sha": "354e9616129ce2bb311f4fa379ad2953541af79d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=999cc24c0866f08a09bc3608fcac95a2dee681d3", "patch": "@@ -1,3 +1,7 @@\n+2002-03-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/g++.dg/overload/pmf1.C: New test.\n+\n 2002-03-11  Kazu Hirata  <kazu@hxi.com>\n \n \t* gcc.c-torture/execute/20020307-1.c: Use long."}, {"sha": "772cb5305299ef7bedef0a12902327d07b9d7031", "filename": "gcc/testsuite/g++.dg/overload/pmf1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fpmf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999cc24c0866f08a09bc3608fcac95a2dee681d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fpmf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fpmf1.C?ref=999cc24c0866f08a09bc3608fcac95a2dee681d3", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 04 Mar 2002 <nathan@codesourcery.com>\n+//\t\t  Jason Merrill <jason@redhat.com>\n+\n+struct A { int i; };\n+struct B: private A {};\n+struct C {\n+  C (int A::*);\n+};\n+\n+int A::*aip = &A::i;\n+\n+void f (int B::*) {}  // should choose this, even though it's ill-formed\n+void f (C) {}         // even though this would be well-formed\n+\n+int main ()\n+{\n+  f (aip);  // { dg-error \"`A' is an inaccessible base of `B'\" \"\" }\n+}"}]}