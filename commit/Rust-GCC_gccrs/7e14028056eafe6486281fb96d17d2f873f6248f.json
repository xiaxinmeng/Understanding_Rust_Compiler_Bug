{"sha": "7e14028056eafe6486281fb96d17d2f873f6248f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxNDAyODA1NmVhZmU2NDg2MjgxZmI5NmQxN2QyZjg3M2Y2MjQ4Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-05-20T17:37:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-05-20T17:37:02Z"}, "message": "re PR tree-optimization/15454 (tree-ccp generates wrong code for nested functions)\n\n        PR 15454\n        * tree-nested.c (get_chain_decl): Create a PARM_DECL by hand.\n        * function.c (expand_function_start): Expand static_chain_decl by hand.\n        * gimplify.c (create_tmp_var_name): Export.\n        * tree-gimple.h (create_tmp_var_name): Declare.\n\t* gcc.c-torture/execute/20040520-1.c: New.\n\nFrom-SVN: r82064", "tree": {"sha": "26093e305b2beac279f6e5071f666f80884039c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26093e305b2beac279f6e5071f666f80884039c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e14028056eafe6486281fb96d17d2f873f6248f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e14028056eafe6486281fb96d17d2f873f6248f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e14028056eafe6486281fb96d17d2f873f6248f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e14028056eafe6486281fb96d17d2f873f6248f/comments", "author": null, "committer": null, "parents": [{"sha": "5ce7d75d89b0da57124c2461364c32f1e7f7910b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce7d75d89b0da57124c2461364c32f1e7f7910b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce7d75d89b0da57124c2461364c32f1e7f7910b"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "8d00704e86f0ed4dc37f29ea72ff9278acbbfb8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e14028056eafe6486281fb96d17d2f873f6248f", "patch": "@@ -1,3 +1,11 @@\n+2004-05-20  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 15454\n+\t* tree-nested.c (get_chain_decl): Create a PARM_DECL by hand.\n+\t* function.c (expand_function_start): Expand static_chain_decl by hand.\n+\t* gimplify.c (create_tmp_var_name): Export.\n+\t* tree-gimple.h (create_tmp_var_name): Declare.\n+\n 2004-05-20  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* rs6000.c (print_operand) <case 'z'>: Call"}, {"sha": "c34c191062d310ddd3c15f8d48f9aa9aa28b0a7f", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7e14028056eafe6486281fb96d17d2f873f6248f", "patch": "@@ -6565,12 +6565,15 @@ expand_function_start (tree subr, int parms_have_cleanups)\n   /* If function gets a static chain arg, store it.  */\n   if (cfun->static_chain_decl)\n     {\n-      rtx x;\n+      tree parm = cfun->static_chain_decl;\n+      rtx local = gen_reg_rtx (Pmode);\n+\n+      set_decl_incoming_rtl (parm, static_chain_incoming_rtx);\n+      SET_DECL_RTL (parm, local);\n+      maybe_set_unchanging (local, parm);\n+      mark_reg_pointer (local, TYPE_ALIGN (TREE_TYPE (TREE_TYPE (parm))));\n \n-      expand_var (cfun->static_chain_decl);\n-      x = expand_expr (cfun->static_chain_decl, NULL_RTX,\n-\t\t       VOIDmode, EXPAND_WRITE);\n-      emit_move_insn (x, static_chain_incoming_rtx);\n+      emit_move_insn (local, static_chain_incoming_rtx);\n     }\n \n   /* If the function receives a non-local goto, then store the"}, {"sha": "21cf0141d5048dbc479e885b9b1a0272e55aff0b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7e14028056eafe6486281fb96d17d2f873f6248f", "patch": "@@ -286,7 +286,7 @@ create_artificial_label (void)\n \n static GTY(()) unsigned int tmp_var_id_num;\n \n-static tree\n+tree\n create_tmp_var_name (const char *prefix)\n {\n   char *tmp_name;"}, {"sha": "b42483714375887a1877da0322b54ee0e062dc06", "filename": "gcc/testsuite/gcc.c-torture/execute/20040520-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040520-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040520-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040520-1.c?ref=7e14028056eafe6486281fb96d17d2f873f6248f", "patch": "@@ -0,0 +1,17 @@\n+/* PR 15454 */\n+\n+void abort ();\n+int main () {\n+        int foo;\n+        int bar (void)\n+        {\n+                int baz = 0;\n+                if (foo!=45)\n+                        baz = foo;\n+                return baz;\n+        }\n+        foo = 1;\n+        if (!bar ())\n+                abort ();\n+        return 0;\n+}"}, {"sha": "59cb3b365ac2f2ad9c79c9b2f6c10155a87f00b1", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=7e14028056eafe6486281fb96d17d2f873f6248f", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree-iterator.h\"\n \n extern tree create_tmp_var_raw (tree, const char *);\n+extern tree create_tmp_var_name (const char *);\n extern tree create_tmp_var (tree, const char *);\n extern bool is_gimple_tmp_var (tree);\n extern tree get_initialized_tmp_var (tree, tree *, tree *);"}, {"sha": "14d2c3cb9ff5f77ff5c13d83d6cd314de66924df", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e14028056eafe6486281fb96d17d2f873f6248f/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=7e14028056eafe6486281fb96d17d2f873f6248f", "patch": "@@ -306,15 +306,16 @@ get_chain_decl (struct nesting_info *info)\n \n       /* Note that this variable is *not* entered into any BIND_EXPR;\n \t the construction of this variable is handled specially in\n-\t expand_function_start and initialize_inlined_parameters.  */\n-      decl = create_tmp_var_raw (type, \"CHAIN\");\n+\t expand_function_start and initialize_inlined_parameters.\n+\t Note also that it's represented as a parameter.  This is more\n+\t close to the truth, since the initial value does come from \n+\t the caller.  */\n+      decl = build_decl (PARM_DECL, create_tmp_var_name (\"CHAIN\"), type);\n+      DECL_ARTIFICIAL (decl) = 1;\n+      DECL_IGNORED_P (decl) = 1;\n+      TREE_USED (decl) = 1;\n       DECL_CONTEXT (decl) = info->context;\n-      decl->decl.seen_in_bind_expr = 1;\n-\n-      /* The initialization of CHAIN is not visible to the tree-ssa\n-\t analyzers and optimizers.  Thus we do not want to issue\n-\t warnings for CHAIN.  */\n-      TREE_NO_WARNING (decl) = 1;\n+      DECL_ARG_TYPE (decl) = type;\n \n       /* Tell tree-inline.c that we never write to this variable, so\n \t it can copy-prop the replacement value immediately.  */"}]}