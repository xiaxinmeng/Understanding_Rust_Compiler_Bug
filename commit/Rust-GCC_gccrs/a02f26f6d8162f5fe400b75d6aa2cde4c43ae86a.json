{"sha": "a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyZjI2ZjZkODE2MmY1ZmU0MDBiNzVkNmFhMmNkZTRjNDNhZTg2YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-02-09T19:15:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-02-09T19:15:55Z"}, "message": "re PR c++/64899 (Illegal dynamic initialization)\n\n\tPR c++/64899\n\t* init.c (build_vec_init): Handle default-initialized array with\n\tconstexpr default constructor.\n\nFrom-SVN: r220544", "tree": {"sha": "b8a9314cd7479a79c90e0c94d9a35788a1f6ac1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8a9314cd7479a79c90e0c94d9a35788a1f6ac1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c0137a8af4ea11e48c8509799ebcbb1eb374bf"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "37ce9098c109a4e2eeffc99e0c9a7110167264b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a", "patch": "@@ -1,3 +1,9 @@\n+2015-02-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/64899\n+\t* init.c (build_vec_init): Handle default-initialized array with\n+\tconstexpr default constructor.\n+\n 2015-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/64824"}, {"sha": "0274663c8f47813c0096165dbdb458bd916a6b9e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a", "patch": "@@ -3539,7 +3539,9 @@ build_vec_init (tree base, tree maxindex, tree init,\n   /* Should we try to create a constant initializer?  */\n   bool try_const = (TREE_CODE (atype) == ARRAY_TYPE\n \t\t    && TREE_CONSTANT (maxindex)\n-\t\t    && init && TREE_CODE (init) == CONSTRUCTOR\n+\t\t    && (init ? TREE_CODE (init) == CONSTRUCTOR\n+\t\t\t: (type_has_constexpr_default_constructor\n+\t\t\t   (inner_elt_type)))\n \t\t    && (literal_type_p (inner_elt_type)\n \t\t\t|| TYPE_HAS_CONSTEXPR_CTOR (inner_elt_type)));\n   vec<constructor_elt, va_gc> *const_vec = NULL;\n@@ -3677,6 +3679,12 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n      We do need to keep going if we're copying an array.  */\n \n+  if (try_const && !init)\n+    /* With a constexpr default constructor, which we checked for when\n+       setting try_const above, default-initialization is equivalent to\n+       value-initialization, and build_value_init gives us something more\n+       friendly to maybe_constant_init.  */\n+    explicit_value_init_p = true;\n   if (from_array\n       || ((type_build_ctor_call (type) || init || explicit_value_init_p)\n \t  && ! (tree_fits_shwi_p (maxindex)\n@@ -3781,6 +3789,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n       if (try_const)\n \t{\n+\t  /* FIXME refs to earlier elts */\n \t  tree e = maybe_constant_init (elt_init);\n \t  if (reduced_constant_expression_p (e))\n \t    {\n@@ -3795,6 +3804,8 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t      saw_non_const = true;\n \t      if (do_static_init)\n \t\te = build_zero_init (TREE_TYPE (e), NULL_TREE, true);\n+\t      else\n+\t\te = NULL_TREE;\n \t    }\n \n \t  if (e)"}, {"sha": "f7aaa4b943e2f037c95269b4126e8f75a31035d8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array10.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array10.C?ref=a02f26f6d8162f5fe400b75d6aa2cde4c43ae86a", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/64899\n+// { dg-do compile { target c++11 } }\n+\n+struct S\n+{\n+  int i;\n+  constexpr S (): i(42) {}\n+};\n+\n+constexpr S sa[2];\n+#define SA(X) static_assert((X),#X)\n+SA(sa[1].i == 42);"}]}