{"sha": "6b9b6b150929c20219227d06a968579480447c6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5YjZiMTUwOTI5YzIwMjE5MjI3ZDA2YTk2ODU3OTQ4MDQ0N2M2Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-18T13:32:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-18T13:32:57Z"}, "message": "tree.c (copy_template_template_parm): Use permanent_obstack.\n\n\t* tree.c (copy_template_template_parm): Use permanent_obstack.\n        * pt.c (unify): Remove restrictions on deduction of argument\n        of template template parameters.\n\t* rtti.c (build_dynamic_cast_1): Resolve OFFSET_REF exprs.\n\t* class.c (resolve_address_of_overloaded_function): Show list of\n\tall candidates, when none of them match.\n\nFrom-SVN: r24749", "tree": {"sha": "caed3e0e0187aeb4acee92101e0ae17ac5d85192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caed3e0e0187aeb4acee92101e0ae17ac5d85192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b9b6b150929c20219227d06a968579480447c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9b6b150929c20219227d06a968579480447c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9b6b150929c20219227d06a968579480447c6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9b6b150929c20219227d06a968579480447c6b/comments", "author": null, "committer": null, "parents": [{"sha": "ddaed37e0437fb5d5c9446139d4938d3e51532cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaed37e0437fb5d5c9446139d4938d3e51532cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddaed37e0437fb5d5c9446139d4938d3e51532cb"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "9e1a1d8b2f1cb26a258038ac44112259a5c46e44", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b9b6b150929c20219227d06a968579480447c6b", "patch": "@@ -1,3 +1,19 @@\n+1999-01-18  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (copy_template_template_parm): Use permanent_obstack.\n+\n+1999-01-18  Kriang Lerdsuwanakij <lerdsuwa@scf-fs.usc.edu>\n+\n+        * pt.c (unify): Remove restrictions on deduction of argument\n+        of template template parameters.\n+\n+1999-01-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* rtti.c (build_dynamic_cast_1): Resolve OFFSET_REF exprs.\n+\n+\t* class.c (resolve_address_of_overloaded_function): Show list of\n+\tall candidates, when none of them match.\n+\n 1999-01-18  Chip Salzenberg  <chip@perlsupport.com>\n \n \t* typeck.c (comp_ptr_ttypes_reinterpret): Per ANSI, tighten up"}, {"sha": "622f079219aac48e75b26395d73283c09dc2e343", "filename": "gcc/cp/class.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6b9b6b150929c20219227d06a968579480447c6b", "patch": "@@ -1,5 +1,5 @@\n /* Functions related to building classes and their related objects.\n-   Copyright (C) 1987, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 92-97, 1998, 1999 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -5188,10 +5188,18 @@ resolve_address_of_overloaded_function (target_type,\n       /* There were *no* matches.  */\n       if (complain)\n \t{\n- \t  cp_error (\"cannot convert overloaded function `%D' to type `%#T'\", \n+ \t  cp_error (\"no matches converting function `%D' to type `%#T'\", \n \t\t    DECL_NAME (OVL_FUNCTION (overload)),\n \t\t    target_type);\n-\t  cp_error (\"because no suitable overload exists\");\n+\n+\t  /* print_candidates expects a chain with the functions in\n+             TREE_VALUE slots, so we cons one up here (we're losing anyway,\n+             so why be clever?).  */\n+          for (; overload; overload = OVL_NEXT (overload))\n+            matches = scratch_tree_cons (NULL_TREE, OVL_CURRENT (overload),\n+                                         matches);\n+          \n+\t  print_candidates (matches);\n \t}\n       return error_mark_node;\n     }"}, {"sha": "ad0acaec2a1c13debd513967073e6cddf9df82aa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6b9b6b150929c20219227d06a968579480447c6b", "patch": "@@ -7461,16 +7461,14 @@ unify (tparms, targs, parm, arg, strict, explicit_mask)\n \t\t    == error_mark_node)\n \t\t  return 1;\n \t  \n-\t\t/* Deduce arguments T, i from TT<T> or TT<i>.  */\n+\t\t/* Deduce arguments T, i from TT<T> or TT<i>.  \n+\t\t   We check each element of PARMVEC and ARGVEC individually\n+\t\t   rather than the whole TREE_VEC since they can have\n+\t\t   different number of elements.  */\n+\n \t\tfor (i = 0; i < TREE_VEC_LENGTH (parmvec); ++i)\n \t\t  {\n \t\t    tree t = TREE_VEC_ELT (parmvec, i);\n-\t\t    if (TREE_CODE (t) != TEMPLATE_TYPE_PARM\n-\t\t\t&& TREE_CODE (t) != TEMPLATE_TEMPLATE_PARM\n-\t\t\t&& TREE_CODE (t) != TEMPLATE_PARM_INDEX)\n-\t\t      continue;\n-\n-\t\t    /* This argument can be deduced.  */\n \n \t\t    if (unify (tparms, targs, t, \n \t\t\t       TREE_VEC_ELT (argvec, i), "}, {"sha": "fff923063bd08e456cb6d0e97a1f5587592cf45e", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=6b9b6b150929c20219227d06a968579480447c6b", "patch": "@@ -456,11 +456,15 @@ build_dynamic_cast_1 (type, expr)\n      tree type, expr;\n {\n   enum tree_code tc = TREE_CODE (type);\n-  tree exprtype = TREE_TYPE (expr);\n+  tree exprtype;\n   enum tree_code ec;\n   tree dcast_fn;\n   tree old_expr = expr;\n \n+  if (TREE_CODE (expr) == OFFSET_REF)\n+    expr = resolve_offset_ref (expr);\n+  \n+  exprtype = TREE_TYPE (expr);\n   assert (exprtype != NULL_TREE);\n   ec = TREE_CODE (exprtype);\n "}, {"sha": "85cd96827fbc20e397da23e37c9767207a91e189", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9b6b150929c20219227d06a968579480447c6b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=6b9b6b150929c20219227d06a968579480447c6b", "patch": "@@ -1519,9 +1519,18 @@ copy_template_template_parm (t)\n      tree t;\n {\n   tree template = TYPE_NAME (t);\n-  tree t2 = make_lang_type (TEMPLATE_TEMPLATE_PARM);\n+  tree t2;\n+\n+  /* Make sure these end up on the permanent_obstack.  */\n+  push_obstacks_nochange ();\n+  end_temporary_allocation ();\n+  \n+  t2 = make_lang_type (TEMPLATE_TEMPLATE_PARM);\n   template = copy_node (template);\n   copy_lang_decl (template);\n+\n+  pop_obstacks ();\n+\n   TREE_TYPE (template) = t2;\n   TYPE_NAME (t2) = template;\n   TYPE_STUB_DECL (t2) = template;"}]}