{"sha": "11b8962251b584202478b1d3d0d2413f6d335dd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiODk2MjI1MWI1ODQyMDI0NzhiMWQzZDBkMjQxM2Y2ZDMzNWRkNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1998-12-14T15:32:49Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1998-12-14T15:32:49Z"}, "message": "gjavah.c (print_field_info): If value to print is the smallest value of its size...\n\n\t* gjavah.c (print_field_info): If value to print is the smallest\n\tvalue of its size, then print as hex to avoid later warnings from\n\tC++ compiler.\n\nFrom-SVN: r24313", "tree": {"sha": "ee6a2b7b903b6955eef8a2fd68d8055738db2dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee6a2b7b903b6955eef8a2fd68d8055738db2dd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b8962251b584202478b1d3d0d2413f6d335dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8962251b584202478b1d3d0d2413f6d335dd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b8962251b584202478b1d3d0d2413f6d335dd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8962251b584202478b1d3d0d2413f6d335dd4/comments", "author": null, "committer": null, "parents": [{"sha": "a5c23b031d6ace01a4a6e9557e7746918ed04bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c23b031d6ace01a4a6e9557e7746918ed04bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c23b031d6ace01a4a6e9557e7746918ed04bed"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "a289309910473b642bea889c32156b1e85277c83", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8962251b584202478b1d3d0d2413f6d335dd4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8962251b584202478b1d3d0d2413f6d335dd4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=11b8962251b584202478b1d3d0d2413f6d335dd4", "patch": "@@ -1,3 +1,9 @@\n+1998-12-14  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gjavah.c (print_field_info): If value to print is the smallest\n+\tvalue of its size, then print as hex to avoid later warnings from\n+\tC++ compiler.\n+\n 1998-12-14  Tom Tromey  <tromey@cygnus.com>\n \n \t* gjavah.c (decompile_method): Decompile `return null'."}, {"sha": "af9a6c78646d7afb49058fe4368d8eedf43784c4", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8962251b584202478b1d3d0d2413f6d335dd4/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8962251b584202478b1d3d0d2413f6d335dd4/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=11b8962251b584202478b1d3d0d2413f6d335dd4", "patch": "@@ -299,27 +299,48 @@ DEFUN(print_field_info, (stream, jcf, name_index, sig_index, flags),\n     {\n       if (current_field_value > 0)\n \t{\n-\t  jlong num;\n \t  char buffer[25];\n \n \t  generate_access (stream, flags);\n \t  switch (JPOOL_TAG (jcf, current_field_value))\n \t    {\n \t    case CONSTANT_Integer:\n-\t      fputs (\"  static const jint \", out);\n-\t      print_name (out, jcf, name_index);\n-\t      fputs (\" = \", out);\n-\t      num = JPOOL_INT (jcf, current_field_value);\n-\t      format_int (buffer, num, 10);\n-\t      fprintf (out, \"%sL;\\n\", buffer);\n+\t      {\n+\t\tjint num;\n+\t\tfputs (\"  static const jint \", out);\n+\t\tprint_name (out, jcf, name_index);\n+\t\tfputs (\" = \", out);\n+\t\tnum = JPOOL_INT (jcf, current_field_value);\n+\t\t/* We single out the most negative number to print in\n+\t\t   hex.  That avoids later warnings from g++.  */\n+\t\tif (num == 0x80000000)\n+\t\t  {\n+\t\t    strcpy (buffer, \"0x\");\n+\t\t    format_uint (buffer + 2, (jlong) (uint32) num, 16);\n+\t\t  }\n+\t\telse\n+\t\t  format_int (buffer, (jlong) num, 10);\n+\t\tfprintf (out, \"%sL;\\n\", buffer);\n+\t      }\n \t      break;\n \t    case CONSTANT_Long:\n-\t      fputs (\"  static const jlong \", out);\n-\t      print_name (out, jcf, name_index);\n-\t      fputs (\" = \", out);\n-\t      num = JPOOL_LONG (jcf, current_field_value);\n-\t      format_int (buffer, num, 10);\n-\t      fprintf (out, \"%sLL;\\n\", buffer);\n+\t      {\n+\t\tjlong num;\n+\t\tfputs (\"  static const jlong \", out);\n+\t\tprint_name (out, jcf, name_index);\n+\t\tfputs (\" = \", out);\n+\t\tnum = JPOOL_LONG (jcf, current_field_value);\n+\t\t/* We single out the most negative number to print in\n+\t\t   hex.  That avoids later warnings from g++.  */\n+\t\tif (num == 0x8000000000000000LL)\n+\t\t  {\n+\t\t    strcpy (buffer, \"0x\");\n+\t\t    format_uint (buffer + 2, num, 16);\n+\t\t  }\n+\t\telse\n+\t\t  format_int (buffer, num, 10);\n+\t\tfprintf (out, \"%sLL;\\n\", buffer);\n+\t      }\n \t      break;\n \t    case CONSTANT_Float:\n \t      {"}]}