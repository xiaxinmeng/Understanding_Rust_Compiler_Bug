{"sha": "f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "node_id": "C_kwDOANBUbNoAKGYzZmZlYTkzZWYzMWMwM2FkOGNkY2I1NGU3MWVjODY4YjU3YjI2NGY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-02-06T20:47:20Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-02-09T21:13:53Z"}, "message": "Fortran: try simplifications during reductions of array constructors\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/66193\n\t* arith.cc (reduce_binary_ac): When reducing binary expressions,\n\ttry simplification.  Handle case of empty constructor.\n\t(reduce_binary_ca): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/66193\n\t* gfortran.dg/array_constructor_55.f90: New test.", "tree": {"sha": "b54428211044161b14105f4c07a0fba1f472bfc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b54428211044161b14105f4c07a0fba1f472bfc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ff6738fa25fb012ed208e01de5a84d8668d538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ff6738fa25fb012ed208e01de5a84d8668d538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ff6738fa25fb012ed208e01de5a84d8668d538"}], "stats": {"total": 91, "additions": 85, "deletions": 6}, "files": [{"sha": "06e032e22db67f4c2bc63c0e17600e986f90f3a6", "filename": "gcc/fortran/arith.cc", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f/gcc%2Ffortran%2Farith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f/gcc%2Ffortran%2Farith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.cc?ref=f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "patch": "@@ -1305,6 +1305,8 @@ reduce_binary_ac (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   head = gfc_constructor_copy (op1->value.constructor);\n   for (c = gfc_constructor_first (head); c; c = gfc_constructor_next (c))\n     {\n+      gfc_simplify_expr (c->expr, 0);\n+\n       if (c->expr->expr_type == EXPR_CONSTANT)\n         rc = eval (c->expr, op2, &r);\n       else\n@@ -1321,9 +1323,19 @@ reduce_binary_ac (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   else\n     {\n       gfc_constructor *c = gfc_constructor_first (head);\n-      r = gfc_get_array_expr (c->expr->ts.type, c->expr->ts.kind,\n-\t\t\t      &op1->where);\n-      r->shape = gfc_copy_shape (op1->shape, op1->rank);\n+      if (c)\n+\t{\n+\t  r = gfc_get_array_expr (c->expr->ts.type, c->expr->ts.kind,\n+\t\t\t\t  &op1->where);\n+\t  r->shape = gfc_copy_shape (op1->shape, op1->rank);\n+\t}\n+      else\n+\t{\n+\t  gcc_assert (op1->ts.type != BT_UNKNOWN);\n+\t  r = gfc_get_array_expr (op1->ts.type, op1->ts.kind,\n+\t\t\t\t  &op1->where);\n+\t  r->shape = gfc_get_shape (op1->rank);\n+\t}\n       r->rank = op1->rank;\n       r->value.constructor = head;\n       *result = r;\n@@ -1345,6 +1357,8 @@ reduce_binary_ca (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   head = gfc_constructor_copy (op2->value.constructor);\n   for (c = gfc_constructor_first (head); c; c = gfc_constructor_next (c))\n     {\n+      gfc_simplify_expr (c->expr, 0);\n+\n       if (c->expr->expr_type == EXPR_CONSTANT)\n \trc = eval (op1, c->expr, &r);\n       else\n@@ -1361,9 +1375,19 @@ reduce_binary_ca (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   else\n     {\n       gfc_constructor *c = gfc_constructor_first (head);\n-      r = gfc_get_array_expr (c->expr->ts.type, c->expr->ts.kind,\n-\t\t\t      &op2->where);\n-      r->shape = gfc_copy_shape (op2->shape, op2->rank);\n+      if (c)\n+\t{\n+\t  r = gfc_get_array_expr (c->expr->ts.type, c->expr->ts.kind,\n+\t\t\t\t  &op2->where);\n+\t  r->shape = gfc_copy_shape (op2->shape, op2->rank);\n+\t}\n+      else\n+\t{\n+\t  gcc_assert (op2->ts.type != BT_UNKNOWN);\n+\t  r = gfc_get_array_expr (op2->ts.type, op2->ts.kind,\n+\t\t\t\t  &op2->where);\n+\t  r->shape = gfc_get_shape (op2->rank);\n+\t}\n       r->rank = op2->rank;\n       r->value.constructor = head;\n       *result = r;"}, {"sha": "52142cb10c091e15276bc026536a5ee314a3cc0d", "filename": "gcc/testsuite/gfortran.dg/array_constructor_55.f90", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_55.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_55.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_55.f90?ref=f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "patch": "@@ -0,0 +1,55 @@\n+! { dg-do run }\n+! PR fortran/66193 - ICE for initialisation of some non-zero-sized arrays\n+! Testcase by G.Steinmetz\n+\n+program p\n+  implicit none\n+  call s1\n+  call s2\n+  call s3\n+  call s4\n+contains\n+  subroutine s1\n+    integer(8), parameter :: z1(2) = 10 + [ integer(8) :: [ integer(4) ::],1,2]\n+    integer(8)            :: z2(2) = 10 + [ integer(8) :: [ integer(4) ::],1,2]\n+    integer(8)            :: z3(2)\n+    z3 = 10 + [ integer(8) :: [ integer(4) :: ], 1, 2 ]\n+    if ( z1(1) /= 11 .or. z1(2) /= 12 ) stop 1\n+    if ( z2(1) /= 11 .or. z2(2) /= 12 ) stop 2\n+    if ( z3(1) /= 11 .or. z3(2) /= 12 ) stop 3\n+  end subroutine s1\n+\n+  subroutine s2\n+    logical(8), parameter :: z1(3) = .true. .or. &\n+         [ logical(8) :: [ logical(4) :: ], .false., .false., .true. ]\n+    logical(8)            :: z2(3) = .true. .or. &\n+         [ logical(8) :: [ logical(4) :: ], .false., .false., .true. ]\n+    logical(8)            :: z3(3)\n+    z3 = .true. .or. &\n+         [ logical(8) :: [ logical(4) :: ], .false., .false., .true. ]\n+    if ( .not. all(z1) ) stop 11\n+    if ( .not. all(z2) ) stop 12\n+    if ( .not. all(z3) ) stop 13\n+  end subroutine s2\n+\n+  subroutine s3\n+    real(8), parameter :: eps = 4.0_8 * epsilon(1.0_8)\n+    real(8), parameter :: z1(2) = 10. + [ real(8) :: [ real(4) :: ], 1., 2. ]\n+    real(8)            :: z2(2) = 10. + [ real(8) :: [ real(4) :: ], 1., 2. ]\n+    real(8)            :: z3(2)\n+    z3 = 10.0 + [ real(8) :: [ real(4) :: ], 1.0, 2.0 ]\n+\n+    if ( abs(1-z1(1)/11) > eps ) stop 21\n+    if ( abs(1-z1(2)/12) > eps ) stop 22\n+    if ( abs(1-z2(1)/11) > eps ) stop 23\n+    if ( abs(1-z2(2)/12) > eps ) stop 24\n+    if ( abs(1-z3(1)/11) > eps ) stop 25\n+    if ( abs(1-z3(2)/12) > eps ) stop 26\n+  end subroutine s3\n+\n+  subroutine s4\n+    real, parameter :: x(3) = 2.0 * [real :: 1, (2), 3]\n+    real, parameter :: y(2) =       [real :: 1, (2)] + 10.0\n+    real, parameter :: z(2) =       [real ::(1),(2)] + 10.0\n+  end subroutine s4\n+end program p"}]}