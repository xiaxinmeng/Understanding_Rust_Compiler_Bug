{"sha": "e6f93f450deb17ced884afd5216b759ff67d4ba9", "node_id": "C_kwDOANBUbNoAKGU2ZjkzZjQ1MGRlYjE3Y2VkODg0YWZkNTIxNmI3NTlmZjY3ZDRiYTk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-06T00:17:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-06T00:17:36Z"}, "message": "Daily bump.", "tree": {"sha": "042883f5f1d537bb6c76e5331b9251d5b586ab54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/042883f5f1d537bb6c76e5331b9251d5b586ab54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f93f450deb17ced884afd5216b759ff67d4ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f93f450deb17ced884afd5216b759ff67d4ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f93f450deb17ced884afd5216b759ff67d4ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f93f450deb17ced884afd5216b759ff67d4ba9/comments", "author": null, "committer": null, "parents": [{"sha": "0d14720f93a8139a7f234b2762c361e8e5da99cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d14720f93a8139a7f234b2762c361e8e5da99cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d14720f93a8139a7f234b2762c361e8e5da99cc"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "77a72e4be7f8001ef02fa572997e325aad411b48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6f93f450deb17ced884afd5216b759ff67d4ba9", "patch": "@@ -1,3 +1,71 @@\n+2022-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/40635\n+\t* tree-into-ssa.cc (rewrite_update_phi_arguments): Only\n+\tupdate the argument when the reaching definition is different\n+\tfrom the current argument.  Keep an existing argument\n+\tlocation.\n+\n+2022-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106868\n+\t* gimple-ssa-warn-access.cc (pass_waccess::gimple_call_return_arg_ref):\n+\tInline into single user ...\n+\t(pass_waccess::check_dangling_uses): ... here and adjust the\n+\tcall and the PHI case to require that ref.aref is the address\n+\tof the decl.\n+\n+2022-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/106805\n+\t* match.pd (cmp\u00a0@0\u00a0REAL_CST@1): Don't optimize x cmp NaN\n+\tor NaN cmp x to false/true for cmp >/>=/</<= if -ftrapping-math.\n+\n+2022-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107879\n+\t* range-op-float.cc (foperator_mult::op1_range): If both\n+\tlhs and op2 ranges contain zero or both ranges contain\n+\tsome infinity, set r range to zero_to_inf_range depending on\n+\tsignbit_known_p.\n+\t(foperator_div::op2_range): Similarly for lhs and op1 ranges.\n+\t(foperator_div::op1_range): If lhs range contains zero and op2\n+\trange contains some infinity or vice versa, set r range to\n+\tzero_to_inf_range depending on signbit_known_p.\n+\t(foperator_div::rv_fold): Fix up condition for returning known NAN.\n+\n+2022-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107833\n+\tPR tree-optimization/107839\n+\t* cfghooks.cc: Include tree.h.\n+\t* tree-ssa-loop-im.cc (movement_possibility): Wrap and\n+\tmake stmts using any ssa_name_maybe_undef_p operand\n+\tto preserve execution.\n+\t(loop_invariant_motion_in_fun): Call mark_ssa_maybe_undefs\n+\tto init maybe-undefined status.\n+\t* tree-ssa-loop-ivopts.cc (ssa_name_maybe_undef_p,\n+\tssa_name_set_maybe_undef, ssa_name_any_use_dominates_bb_p,\n+\tmark_ssa_maybe_undefs): Move ...\n+\t* tree-ssa.cc: ... here.\n+\t* tree-ssa.h (ssa_name_any_use_dominates_bb_p,\n+\tmark_ssa_maybe_undefs): Declare.\n+\t(ssa_name_maybe_undef_p, ssa_name_set_maybe_undef): Define.\n+\n+2022-12-05  Andrew Pinski  <pinskia@gmail.com>\n+\n+\tPR tree-optimization/107956\n+\t* tree-vect-patterns.cc (vect_recog_mask_conversion_pattern):\n+\tCheck for NULL LHS on masked loads.\n+\n+2022-12-05  Kewen Lin  <linkw@linux.ibm.com>\n+\t    Richard Sandiford   <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/107412\n+\t* gimple-fold.cc (gimple_fold_partial_load_store_mem_ref): Use\n+\tuntruncated type for the length, and avoid to_constant and tree\n+\tarithmetic for subtraction.\n+\n 2022-12-02  Bernhard Reutner-Fischer  <rep.dot.nop@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "b55757e1766f635a2691d4fadfb22989d9f2d6c5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e6f93f450deb17ced884afd5216b759ff67d4ba9", "patch": "@@ -1 +1 @@\n-20221205\n+20221206"}, {"sha": "55b290e357a0f3facc4851122732be7c04874a52", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6f93f450deb17ced884afd5216b759ff67d4ba9", "patch": "@@ -1,3 +1,8 @@\n+2022-12-05  Scott Snyder  <sss@li-snyder.org>\n+\n+\tPR plugins/107964\n+\t* Make-lang.in (CP_PLUGIN_HEADERS): Install contracts.h\n+\n 2022-12-04  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/107417"}, {"sha": "1ba793d4dbb2bc4306ab4ba49f2d805fc370f9bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f93f450deb17ced884afd5216b759ff67d4ba9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6f93f450deb17ced884afd5216b759ff67d4ba9", "patch": "@@ -1,3 +1,34 @@\n+2022-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/40635\n+\t* gcc.dg/uninit-pr40635.c: New testcase.\n+\n+2022-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106868\n+\t* gcc.dg/Wdangling-pointer-pr106868.c: New testcase.\n+\n+2022-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/106805\n+\t* c-c++-common/pr57371-4.c: Revert 2021-09-19 changes.\n+\t* c-c++-common/pr57371-5.c: New test.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-6.x: Add -fno-trapping-math.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-9.c: New test.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-9.x: New file.\n+\n+2022-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107879\n+\t* gcc.c-torture/execute/pr107879.c: New file.\n+\n+2022-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107833\n+\tPR tree-optimization/107839\n+\t* gcc.dg/torture/pr107833.c: New testcase.\n+\t* gcc.dg/uninit-pr107839.c: Likewise.\n+\n 2022-12-04  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/107922"}]}