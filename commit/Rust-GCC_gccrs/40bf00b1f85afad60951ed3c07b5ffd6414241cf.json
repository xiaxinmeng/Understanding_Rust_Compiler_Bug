{"sha": "40bf00b1f85afad60951ed3c07b5ffd6414241cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiZjAwYjFmODVhZmFkNjA5NTFlZDNjMDdiNWZmZDY0MTQyNDFjZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:42:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:42:31Z"}, "message": "[multiple changes]\n\n2017-01-19  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Expression_Of_Expression_Function): New\n\tsubprogram.\n\t(Is_Inlinable_Expression_Function): New subprogram.\n\t* exp_ch6.ads, exp_ch6.adb (Expression_Of_Expression_Function): Moved\n\tto Sem_Util.\n\t(Is_Inlinable_Expression_Function): Moved to Sem_Util.\n\n2017-01-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Diagnose_Call): Improve error message when a\n\tselected component has a prefix that might be interpreted\n\tas a parameterless function call, but none of the candidate\n\tinterpretations is parameterless, and there is a hidden homonym\n\tof the prefix that is a package.\n\t* sem_ch8.adb (Find_Selected_Component): If the prefix might be\n\tinterpreted as a parameterless function call and its analysis\n\tfails, do not call Analyze_Selected_Component.\n\nFrom-SVN: r244618", "tree": {"sha": "0db4a8c2e18b979f5ec6847eeb229585ed48dafb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db4a8c2e18b979f5ec6847eeb229585ed48dafb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40bf00b1f85afad60951ed3c07b5ffd6414241cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf00b1f85afad60951ed3c07b5ffd6414241cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bf00b1f85afad60951ed3c07b5ffd6414241cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf00b1f85afad60951ed3c07b5ffd6414241cf/comments", "author": null, "committer": null, "parents": [{"sha": "42e2600a7aab688b6399d278ee552f3703fb3b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e2600a7aab688b6399d278ee552f3703fb3b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e2600a7aab688b6399d278ee552f3703fb3b3d"}], "stats": {"total": 231, "additions": 147, "deletions": 84}, "files": [{"sha": "64d929b09d0cb65411a026e80d059f4edd04cb22", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=40bf00b1f85afad60951ed3c07b5ffd6414241cf", "patch": "@@ -1,3 +1,23 @@\n+2017-01-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Expression_Of_Expression_Function): New\n+\tsubprogram.\n+\t(Is_Inlinable_Expression_Function): New subprogram.\n+\t* exp_ch6.ads, exp_ch6.adb (Expression_Of_Expression_Function): Moved\n+\tto Sem_Util.\n+\t(Is_Inlinable_Expression_Function): Moved to Sem_Util.\n+\n+2017-01-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Diagnose_Call): Improve error message when a\n+\tselected component has a prefix that might be interpreted\n+\tas a parameterless function call, but none of the candidate\n+\tinterpretations is parameterless, and there is a hidden homonym\n+\tof the prefix that is a package.\n+\t* sem_ch8.adb (Find_Selected_Component): If the prefix might be\n+\tinterpreted as a parameterless function call and its analysis\n+\tfails, do not call Analyze_Selected_Component.\n+\n 2017-01-19  Steve Baird  <baird@adacore.com>\n \n \t* sem_util.ads: Add new Use_Full_View Boolean parameter to"}, {"sha": "22caddd659029d141e4d531ef38a93c4d4beae46", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=40bf00b1f85afad60951ed3c07b5ffd6414241cf", "patch": "@@ -223,10 +223,6 @@ package body Exp_Ch6 is\n    --  Expand simple return from function. In the case where we are returning\n    --  from a function body this is called by Expand_N_Simple_Return_Statement.\n \n-   function Expression_Of_Expression_Function\n-     (Subp : Entity_Id) return Node_Id;\n-   --  Return the expression of expression function Subp\n-\n    function Has_Unconstrained_Access_Discriminants\n      (Subtyp : Entity_Id) return Boolean;\n    --  Returns True if the given subtype is unconstrained and has one or more\n@@ -6964,36 +6960,6 @@ package body Exp_Ch6 is\n       end if;\n    end Expand_Simple_Function_Return;\n \n-   ---------------------------------------\n-   -- Expression_Of_Expression_Function --\n-   ---------------------------------------\n-\n-   function Expression_Of_Expression_Function\n-     (Subp : Entity_Id) return Node_Id\n-   is\n-      Expr_Func : Node_Id;\n-\n-   begin\n-      pragma Assert (Is_Expression_Function_Or_Completion (Subp));\n-\n-      if Nkind (Original_Node (Subprogram_Spec (Subp))) =\n-           N_Expression_Function\n-      then\n-         Expr_Func := Original_Node (Subprogram_Spec (Subp));\n-\n-      elsif Nkind (Original_Node (Subprogram_Body (Subp))) =\n-              N_Expression_Function\n-      then\n-         Expr_Func := Original_Node (Subprogram_Body (Subp));\n-\n-      else\n-         pragma Assert (False);\n-         null;\n-      end if;\n-\n-      return Original_Node (Expression (Expr_Func));\n-   end Expression_Of_Expression_Function;\n-\n    --------------------------------------------\n    -- Has_Unconstrained_Access_Discriminants --\n    --------------------------------------------\n@@ -7323,41 +7289,6 @@ package body Exp_Ch6 is\n       end if;\n    end Freeze_Subprogram;\n \n-   --------------------------------------\n-   -- Is_Inlinable_Expression_Function --\n-   --------------------------------------\n-\n-   function Is_Inlinable_Expression_Function\n-     (Subp : Entity_Id) return Boolean\n-   is\n-      Return_Expr : Node_Id;\n-\n-   begin\n-      if Is_Expression_Function_Or_Completion (Subp)\n-        and then Has_Pragma_Inline_Always (Subp)\n-        and then Needs_No_Actuals (Subp)\n-        and then No (Contract (Subp))\n-        and then not Is_Dispatching_Operation (Subp)\n-        and then Needs_Finalization (Etype (Subp))\n-        and then not Is_Class_Wide_Type (Etype (Subp))\n-        and then not (Has_Invariants (Etype (Subp)))\n-        and then Present (Subprogram_Body (Subp))\n-        and then Was_Expression_Function (Subprogram_Body (Subp))\n-      then\n-         Return_Expr := Expression_Of_Expression_Function (Subp);\n-\n-         --  The returned object must not have a qualified expression and its\n-         --  nominal subtype must be statically compatible with the result\n-         --  subtype of the expression function.\n-\n-         return\n-           Nkind (Return_Expr) = N_Identifier\n-             and then Etype (Return_Expr) = Etype (Subp);\n-      end if;\n-\n-      return False;\n-   end Is_Inlinable_Expression_Function;\n-\n    -----------------------\n    -- Is_Null_Procedure --\n    -----------------------"}, {"sha": "249bf14a10b5c007c3626803361f79ccb008a773", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=40bf00b1f85afad60951ed3c07b5ffd6414241cf", "patch": "@@ -137,20 +137,6 @@ package Exp_Ch6 is\n    --  that requires handling as a build-in-place call or is a qualified\n    --  expression applied to such a call; otherwise returns False.\n \n-   function Is_Inlinable_Expression_Function (Subp : Entity_Id) return Boolean;\n-   --  Return True if Subp is an expression function that fulfills all the\n-   --  following requirements for inlining:\n-   --     1. pragma/aspect Inline_Always\n-   --     2. No formals\n-   --     3. No contracts\n-   --     4. No dispatching primitive\n-   --     5. Result subtype controlled (or with controlled components)\n-   --     6. Result subtype not subject to type-invariant checks\n-   --     7. Result subtype not a class-wide type\n-   --     8. Return expression naming an object global to the function\n-   --     9. Nominal subtype of the returned object statically compatible\n-   --        with the result subtype of the expression function.\n-\n    function Is_Null_Procedure (Subp : Entity_Id) return Boolean;\n    --  Predicate to recognize stubbed procedures and null procedures, which\n    --  can be inlined unconditionally in all cases."}, {"sha": "8fd886fdb7e81f4927a4d722ff386e4e52e706fe", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=40bf00b1f85afad60951ed3c07b5ffd6414241cf", "patch": "@@ -5881,6 +5881,38 @@ package body Sem_Ch4 is\n          end loop;\n       end if;\n \n+      --  Before listing the possible candidates, check whether this\n+      --  a prefix of a selected component that has been rewritten as\n+      --  a parameterless function call because there is a callable\n+      --  candidate interpretation. If there is a hidden package in\n+      --  the list of homonyms of the function name (bad programming\n+      --  style in any case) suggest that this is the intended entity.\n+\n+      if No (Parameter_Associations (N))\n+        and then Nkind (Parent (N)) = N_Selected_Component\n+        and then Nkind (Parent (Parent (N))) in N_Declaration\n+        and then Is_Overloaded (Nam)\n+      then\n+         declare\n+            Ent : Entity_Id;\n+\n+         begin\n+            Ent := Current_Entity (Nam);\n+            while Present (Ent) loop\n+               if Ekind (Ent) = E_Package then\n+                  Error_Msg_N\n+                    (\"no legal interpretations as function call,!\", Nam);\n+                  Error_Msg_NE (\"\\package& is not visible\", N, Ent);\n+                  Rewrite (Parent (N),\n+                    New_Occurrence_Of (Any_Type, Sloc (N)));\n+                  return;\n+               end if;\n+\n+               Ent := Homonym (Ent);\n+            end loop;\n+         end;\n+      end if;\n+\n       --   Analyze each candidate call again, with full error reporting\n       --   for each.\n "}, {"sha": "abe5bea3709fa32d9ff1aee51a794162f43bc844", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=40bf00b1f85afad60951ed3c07b5ffd6414241cf", "patch": "@@ -7048,7 +7048,18 @@ package body Sem_Ch8 is\n                   --  Now analyze the reformatted node\n \n                   Analyze_Call (P);\n-                  Analyze_Selected_Component (N);\n+\n+                  --  If the prefix is illegal after this transformation,\n+                  --  there may be visibility errors on the prefix. The\n+                  --  safest is to treat the selected component as an error.\n+\n+                  if Error_Posted (P) then\n+                     Set_Etype (N, Any_Type);\n+                     return;\n+\n+                  else\n+                     Analyze_Selected_Component (N);\n+                  end if;\n                end if;\n             end if;\n "}, {"sha": "f83d9ee3fea01159e34f4013de0d565a7a66a801", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=40bf00b1f85afad60951ed3c07b5ffd6414241cf", "patch": "@@ -6691,6 +6691,36 @@ package body Sem_Util is\n       end if;\n    end Explain_Limited_Type;\n \n+   ---------------------------------------\n+   -- Expression_Of_Expression_Function --\n+   ---------------------------------------\n+\n+   function Expression_Of_Expression_Function\n+     (Subp : Entity_Id) return Node_Id\n+   is\n+      Expr_Func : Node_Id;\n+\n+   begin\n+      pragma Assert (Is_Expression_Function_Or_Completion (Subp));\n+\n+      if Nkind (Original_Node (Subprogram_Spec (Subp))) =\n+           N_Expression_Function\n+      then\n+         Expr_Func := Original_Node (Subprogram_Spec (Subp));\n+\n+      elsif Nkind (Original_Node (Subprogram_Body (Subp))) =\n+              N_Expression_Function\n+      then\n+         Expr_Func := Original_Node (Subprogram_Body (Subp));\n+\n+      else\n+         pragma Assert (False);\n+         null;\n+      end if;\n+\n+      return Original_Node (Expression (Expr_Func));\n+   end Expression_Of_Expression_Function;\n+\n    -------------------------------\n    -- Extensions_Visible_Status --\n    -------------------------------\n@@ -13073,6 +13103,41 @@ package body Sem_Util is\n         and then Defining_Identifier (Parent (E)) = Typ;\n    end Is_Inherited_Operation_For_Type;\n \n+   --------------------------------------\n+   -- Is_Inlinable_Expression_Function --\n+   --------------------------------------\n+\n+   function Is_Inlinable_Expression_Function\n+     (Subp : Entity_Id) return Boolean\n+   is\n+      Return_Expr : Node_Id;\n+\n+   begin\n+      if Is_Expression_Function_Or_Completion (Subp)\n+        and then Has_Pragma_Inline_Always (Subp)\n+        and then Needs_No_Actuals (Subp)\n+        and then No (Contract (Subp))\n+        and then not Is_Dispatching_Operation (Subp)\n+        and then Needs_Finalization (Etype (Subp))\n+        and then not Is_Class_Wide_Type (Etype (Subp))\n+        and then not (Has_Invariants (Etype (Subp)))\n+        and then Present (Subprogram_Body (Subp))\n+        and then Was_Expression_Function (Subprogram_Body (Subp))\n+      then\n+         Return_Expr := Expression_Of_Expression_Function (Subp);\n+\n+         --  The returned object must not have a qualified expression and its\n+         --  nominal subtype must be statically compatible with the result\n+         --  subtype of the expression function.\n+\n+         return\n+           Nkind (Return_Expr) = N_Identifier\n+             and then Etype (Return_Expr) = Etype (Subp);\n+      end if;\n+\n+      return False;\n+   end Is_Inlinable_Expression_Function;\n+\n    -----------------\n    -- Is_Iterator --\n    -----------------"}, {"sha": "826334042a4803543f553e6a61c4cf322553f6ed", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bf00b1f85afad60951ed3c07b5ffd6414241cf/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=40bf00b1f85afad60951ed3c07b5ffd6414241cf", "patch": "@@ -615,6 +615,10 @@ package Sem_Util is\n    --  continuation lines to the message explaining why type T is limited.\n    --  Messages are placed at node N.\n \n+   function Expression_Of_Expression_Function\n+     (Subp : Entity_Id) return Node_Id;\n+   --  Return the expression of expression function Subp\n+\n    type Extensions_Visible_Mode is\n      (Extensions_Visible_None,\n       --  Extensions_Visible does not yield a mode when SPARK_Mode is off. This\n@@ -1489,6 +1493,20 @@ package Sem_Util is\n    --  E is a subprogram. Return True is E is an implicit operation inherited\n    --  by the derived type declaration for type Typ.\n \n+   function Is_Inlinable_Expression_Function (Subp : Entity_Id) return Boolean;\n+   --  Return True if Subp is an expression function that fulfills all the\n+   --  following requirements for inlining:\n+   --     1. pragma/aspect Inline_Always\n+   --     2. No formals\n+   --     3. No contracts\n+   --     4. No dispatching primitive\n+   --     5. Result subtype controlled (or with controlled components)\n+   --     6. Result subtype not subject to type-invariant checks\n+   --     7. Result subtype not a class-wide type\n+   --     8. Return expression naming an object global to the function\n+   --     9. Nominal subtype of the returned object statically compatible\n+   --        with the result subtype of the expression function.\n+\n    function Is_Iterator (Typ : Entity_Id) return Boolean;\n    --  AI05-0139-2: Check whether Typ is one of the predefined interfaces in\n    --  Ada.Iterator_Interfaces, or it is derived from one."}]}