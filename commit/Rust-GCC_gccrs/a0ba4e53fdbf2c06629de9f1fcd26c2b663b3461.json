{"sha": "a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiYTRlNTNmZGJmMmMwNjYyOWRlOWYxZmNkMjZjMmI2NjNiMzQ2MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-20T12:34:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-20T12:34:44Z"}, "message": "functional_hash.h (hash<long double>::operator()(long double)): Only declare.\n\n2007-11-20  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1_impl/functional_hash.h\n\t(hash<long double>::operator()(long double)): Only declare.\n\t* src/hash.cc: Define here.\n\t* config/abi/pre/gnu.ver: Adjust exports.\n\t* include/tr1/functional: Do not include <cmath>.\n\t* include/std/functional: Likewise.\n\n\t* include/std/functional: Include <new>.\n\nFrom-SVN: r130312", "tree": {"sha": "cbe06512d6ef5d5b47b3daedafa8e07deabca0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe06512d6ef5d5b47b3daedafa8e07deabca0ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/comments", "author": null, "committer": null, "parents": [{"sha": "7ef249e59f5763183e110ad98531645f3030a82c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef249e59f5763183e110ad98531645f3030a82c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef249e59f5763183e110ad98531645f3030a82c"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "4de61c7167059b2611ad908c47a0c97b46409e1a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "patch": "@@ -1,3 +1,14 @@\n+2007-11-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1_impl/functional_hash.h\n+\t(hash<long double>::operator()(long double)): Only declare.\n+\t* src/hash.cc: Define here.\n+\t* config/abi/pre/gnu.ver: Adjust exports.\n+\t* include/tr1/functional: Do not include <cmath>.\n+\t* include/std/functional: Likewise.\n+\n+\t* include/std/functional: Include <new>.\n+\n 2007-11-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits (_DEFINE_SPEC_BODY): Remove."}, {"sha": "3a5bcb5e244fd4676267170aa8fc9806ed273cce", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "patch": "@@ -770,12 +770,14 @@ GLIBCXX_3.4.10 {\n     _ZNKSt3tr14hashIRKSsEclES2_;\n     _ZNKSt3tr14hashISbIwSt11char_traitsIwESaIwEEEclES4_;\n     _ZNKSt3tr14hashISsEclESs;\n+    _ZNKSt3tr14hashIeEclEe;\n \n     _ZNKSt4hashIRKSbIwSt11char_traitsIwESaIwEEEclES5_;\n     _ZNKSt4hashIRKSsEclES1_;\n     _ZNKSt4hashISbIwSt11char_traitsIwESaIwEEEclES3_;\n     _ZNKSt4hashISsEclESs;\n     _ZNKSt4hashISt10error_codeEclES0_;\n+    _ZNKSt4hashIeEclEe;\n \n     # for parallel mode\n     _ZNSt9__cxx199815_List_node_base4hook*;"}, {"sha": "6b0ca04bece025dc9e5c30e0fafedf1bf1838bf7", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "patch": "@@ -58,8 +58,8 @@\n #  if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #    error C++0x header cannot be included from TR1 header\n #  endif\n-#  include <cmath>\n #  include <typeinfo>\n+#  include <new>\n #  include <tuple>\n #  include <type_traits>\n #  include <bits/stringfwd.h>"}, {"sha": "fa3dc6537c2cf209ac7770b5accb4c1f35b4aca1", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "patch": "@@ -43,7 +43,6 @@\n #include <bits/c++config.h>\n #include <bits/stl_function.h>\n \n-#include <cmath>\n #include <typeinfo>\n #include <new>\n #include <tr1/tuple>"}, {"sha": "0dfff38e7b9f6d0f1de9623749cd17f199a00ff2", "filename": "libstdc++-v3/include/tr1_impl/functional_hash.h", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h?ref=a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "patch": "@@ -155,34 +155,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \treturn __result;\n     };\n \n-  // For long double, careful with random padding bits (e.g., on x86,\n-  // 10 bytes -> 12 bytes) and resort to frexp.\n   template<>\n-    inline size_t\n-    hash<long double>::operator()(long double __val) const\n-    {\n-      size_t __result = 0;\n-\n-      int __exponent;\n-      __val = std::frexp(__val, &__exponent);\n-      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n-      \n-      const long double __mult =\n-      __gnu_cxx::__numeric_traits<size_t>::__max + 1.0l;\n-      __val *= __mult;\n-      \n-\t// Try to use all the bits of the mantissa (really necessary only\n-\t// on 32-bit targets, at least for 80-bit floating point formats).\n-      const size_t __hibits = (size_t)__val;\n-      __val = (__val - (long double)__hibits) * __mult;\n-      \n-      const size_t __coeff =\n-\t__gnu_cxx::__numeric_traits<size_t>::__max / __LDBL_MAX_EXP__;\n-      \n-      __result = __hibits + (size_t)__val + __coeff * __exponent;\n-      \n-      return __result;\n-    };\n+    size_t\n+    hash<long double>::operator()(long double __val) const;\n \n   // Explicit specialization of member operator for types that are not builtin.\n   template<>"}, {"sha": "c2b3b0508cada98664cd718ade99e067e2fca97a", "filename": "libstdc++-v3/src/hash.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc?ref=a0ba4e53fdbf2c06629de9f1fcd26c2b663b3461", "patch": "@@ -29,6 +29,7 @@\n \n #include <cstddef>\n #include <string>\n+#include <cmath>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n #include <functional>\n@@ -45,6 +46,35 @@ namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n+  // For long double, careful with random padding bits (e.g., on x86,\n+  // 10 bytes -> 12 bytes) and resort to frexp.\n+  template<>\n+    size_t\n+    hash<long double>::operator()(long double __val) const\n+    {\n+      size_t __result = 0;\n+\n+      int __exponent;\n+      __val = std::frexp(__val, &__exponent);\n+      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+\n+      const long double __mult =\n+      __gnu_cxx::__numeric_traits<size_t>::__max + 1.0l;\n+      __val *= __mult;\n+\n+      // Try to use all the bits of the mantissa (really necessary only\n+      // on 32-bit targets, at least for 80-bit floating point formats).\n+      const size_t __hibits = (size_t)__val;\n+      __val = (__val - (long double)__hibits) * __mult;\n+\n+      const size_t __coeff =\n+\t__gnu_cxx::__numeric_traits<size_t>::__max / __LDBL_MAX_EXP__;\n+\n+      __result = __hibits + (size_t)__val + __coeff * __exponent;\n+\n+      return __result;\n+    };\n+\n   template<>\n     size_t\n     hash<string>::operator()(string __s) const"}]}