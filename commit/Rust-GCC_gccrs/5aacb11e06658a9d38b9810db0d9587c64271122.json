{"sha": "5aacb11e06658a9d38b9810db0d9587c64271122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFhY2IxMWUwNjY1OGE5ZDM4Yjk4MTBkYjBkOTU4N2M2NDI3MTEyMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-27T21:29:19Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-27T21:29:19Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2011-05-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * check.c (gfc_check_associated, gfc_check_null): Add coindexed\n        * check.\n        * match.c (gfc_match_nullify): Ditto.\n        * resolve.c (resolve_deallocate_expr): Ditto.\n        * trans-types.c (gfc_get_nodesc_array_type): Don't set\n        * restricted\n        for nonpointers.\n\n2011-05-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/coarray_22.f90: New.\n\nFrom-SVN: r174364", "tree": {"sha": "22ef55bff748e9924fba15d6b5baabb76acb616d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ef55bff748e9924fba15d6b5baabb76acb616d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aacb11e06658a9d38b9810db0d9587c64271122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aacb11e06658a9d38b9810db0d9587c64271122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aacb11e06658a9d38b9810db0d9587c64271122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aacb11e06658a9d38b9810db0d9587c64271122/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc64b4481d6085c4f4fd260b5801d0785c8a7a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc64b4481d6085c4f4fd260b5801d0785c8a7a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc64b4481d6085c4f4fd260b5801d0785c8a7a02"}], "stats": {"total": 97, "additions": 92, "deletions": 5}, "files": [{"sha": "10ec0b0a102f68c6d227b976f8031287e7cc09e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5aacb11e06658a9d38b9810db0d9587c64271122", "patch": "@@ -1,3 +1,12 @@\n+2011-05-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* check.c (gfc_check_associated, gfc_check_null): Add coindexed check.\n+\t* match.c (gfc_match_nullify): Ditto.\n+\t* resolve.c (resolve_deallocate_expr): Ditto.\n+\t* trans-types.c (gfc_get_nodesc_array_type): Don't set restricted\n+\tfor nonpointers.\n+\n 2011-05-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48820"}, {"sha": "70c23e663e1faa029f62a9649ff22a8cbbaaa5e3", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=5aacb11e06658a9d38b9810db0d9587c64271122", "patch": "@@ -875,6 +875,15 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n       return FAILURE;\n     }\n \n+  /* F2008, C1242.  */\n+  if (attr1.pointer && gfc_is_coindexed (pointer))\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be \"\n+\t\t \"conindexed\", gfc_current_intrinsic_arg[0]->name,\n+\t\t gfc_current_intrinsic, &pointer->where);\n+      return FAILURE;\n+    }\n+\n   /* Target argument is optional.  */\n   if (target == NULL)\n     return SUCCESS;\n@@ -902,6 +911,15 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n       return FAILURE;\n     }\n \n+  /* F2008, C1242.  */\n+  if (attr1.pointer && gfc_is_coindexed (target))\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be \"\n+\t\t \"conindexed\", gfc_current_intrinsic_arg[1]->name,\n+\t\t gfc_current_intrinsic, &target->where);\n+      return FAILURE;\n+    }\n+\n   t = SUCCESS;\n   if (same_type_check (pointer, 0, target, 1) == FAILURE)\n     t = FAILURE;\n@@ -2651,6 +2669,15 @@ gfc_check_null (gfc_expr *mold)\n       return FAILURE;\n     }\n \n+  /* F2008, C1242.  */\n+  if (gfc_is_coindexed (mold))\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L shall not be \"\n+\t\t \"conindexed\", gfc_current_intrinsic_arg[0]->name,\n+\t\t gfc_current_intrinsic, &mold->where);\n+      return FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "f275239bfe5bc1ab536365d73d79875fe5087bf9", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=5aacb11e06658a9d38b9810db0d9587c64271122", "patch": "@@ -3194,6 +3194,13 @@ gfc_match_nullify (void)\n       if (gfc_check_do_variable (p->symtree))\n \tgoto cleanup;\n \n+      /* F2008, C1242.  */\n+      if (gfc_is_coindexed (p))\n+\t{\n+\t  gfc_error (\"Pointer object at %C shall not be conindexed\");\n+\t  goto cleanup;\n+\t}\n+\n       /* build ' => NULL() '.  */\n       e = gfc_get_null_expr (&gfc_current_locus);\n "}, {"sha": "4b1852939f2d7b881b08c0282c0796af51291fb6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5aacb11e06658a9d38b9810db0d9587c64271122", "patch": "@@ -6494,6 +6494,13 @@ resolve_deallocate_expr (gfc_expr *e)\n       return FAILURE;\n     }\n \n+  /* F2008, C644.  */\n+  if (gfc_is_coindexed (e))\n+    {\n+      gfc_error (\"Coindexed allocatable object at %L\", &e->where);\n+      return FAILURE;\n+    }\n+\n   if (pointer\n       && gfc_check_vardef_context (e, true, _(\"DEALLOCATE object\")) == FAILURE)\n     return FAILURE;"}, {"sha": "94b9a591c10d316aa3f6d2429956c19853d56aeb", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=5aacb11e06658a9d38b9810db0d9587c64271122", "patch": "@@ -1543,13 +1543,12 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, gfc_packed packed,\n   if (as->rank == 0)\n     {\n       if (packed != PACKED_STATIC  || gfc_option.coarray == GFC_FCOARRAY_LIB)\n-\ttype = build_pointer_type (type);\n+\t{\n+\t  type = build_pointer_type (type);\n \n-      if (restricted)\n-        type = build_qualified_type (type, TYPE_QUAL_RESTRICT);\t\n+\t  if (restricted)\n+\t    type = build_qualified_type (type, TYPE_QUAL_RESTRICT);\t\n \n-      if (packed != PACKED_STATIC  || gfc_option.coarray == GFC_FCOARRAY_LIB)\n-\t{\n \t  GFC_ARRAY_TYPE_P (type) = 1;\n \t  TYPE_LANG_SPECIFIC (type) = TYPE_LANG_SPECIFIC (TREE_TYPE (type)); \n \t}"}, {"sha": "915cd906aaa122330bd1e87dfcd8c7ebaf73cf81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5aacb11e06658a9d38b9810db0d9587c64271122", "patch": "@@ -1,3 +1,8 @@\n+2011-05-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/coarray_22.f90: New.\n+\n 2011-05-27  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/46728"}, {"sha": "b09dfe382873271bedb4bd12349db1d2d5e7c518", "filename": "gcc/testsuite/gfortran.dg/coarray_22.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aacb11e06658a9d38b9810db0d9587c64271122/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_22.f90?ref=5aacb11e06658a9d38b9810db0d9587c64271122", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! Constraint checks for invalid access of remote pointers\n+! (Accessing the value is ok, checking/changing association\n+!  status is invalid)\n+!\n+! PR fortran/18918\n+!\n+type t\n+  integer, pointer :: ptr => null()\n+end type t\n+type(t) :: x[*], y[*]\n+\n+if (associated(x%ptr)) stop 0\n+if (associated(x%ptr,y%ptr)) stop 0\n+\n+if (associated(x[1]%ptr)) stop 0  ! { dg-error \"shall not be conindexed\" }\n+if (associated(x%ptr,y[1]%ptr)) stop 0  ! { dg-error \"shall not be conindexed\" }\n+\n+nullify (x%ptr)\n+nullify (x[1]%ptr)  ! { dg-error \"shall not be conindexed\" }\n+\n+x%ptr => null(x%ptr)\n+x%ptr => null(x[1]%ptr)  ! { dg-error \"shall not be conindexed\" }\n+x[1]%ptr => null(x%ptr)  ! { dg-error \"shall not have a coindex\" }\n+\n+allocate(x%ptr)\n+deallocate(x%ptr)\n+\n+allocate(x[1]%ptr)  ! { dg-error \"Coindexed allocatable object\" }\n+deallocate(x[1]%ptr)  ! { dg-error \"Coindexed allocatable object\" }\n+end"}]}