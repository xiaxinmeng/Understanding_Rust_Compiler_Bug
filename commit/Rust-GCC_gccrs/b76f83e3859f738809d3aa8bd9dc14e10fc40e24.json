{"sha": "b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2ZjgzZTM4NTlmNzM4ODA5ZDNhYThiZDlkYzE0ZTEwZmM0MGUyNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-12-01T22:10:30Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-12-01T22:11:23Z"}, "message": "PR middle-end/97595 - bogus -Wstringop-overflow due to DECL_SIZE_UNIT underreporting field size\n\ngcc/ChangeLog:\n\n\tPR middle-end/97595\n\t* tree.c (component_ref_size): Fail when DECL_SIZE != TYPE_SIZE.\n\t* tree.h (DECL_SIZE, TYPE_SIZE): Update comment.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/97595\n\t* g++.dg/warn/Warray-bounds-14.C: New test.\n\t* g++.dg/warn/Wstringop-overflow-6.C: New test.", "tree": {"sha": "cea67a727e59839591dffa2a523f0e4552f2eea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cea67a727e59839591dffa2a523f0e4552f2eea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e2ef13149791be24bc563428fcb864e770d843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e2ef13149791be24bc563428fcb864e770d843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e2ef13149791be24bc563428fcb864e770d843"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "0812f833d748e9befb273b4b412838351df818f5", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-14.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-14.C?ref=b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/97595 - bogus -Wstringop-overflow due to DECL_SIZE_UNIT\n+   underreporting field size\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+struct A { char a[32]; };\n+struct B: virtual A { };\n+struct C: B { };\n+\n+struct D\n+{\n+  B &b;\n+  D (B&);\n+};\n+\n+D::D (B &b): b (b) { }        // { dg-bogus \"-Warray-bounds\" }\n+\n+void f (void*);\n+\n+void g ()\n+{\n+  C c;\n+  D d (c);\n+  f (&d);\n+}"}, {"sha": "8173e601d4b265b23d1c1707c88571e4edb0b8fe", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-overflow-6.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-6.C?ref=b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "patch": "@@ -0,0 +1,8 @@\n+/* PR middle-end/97595 - bogus -Wstringop-overflow due to DECL_SIZE_UNIT\n+   underreporting field size\n+   { dg-do compile { target c++11 } }\n+   { dg-options \"-O2 -Wall -Wsystem-headers\" } */\n+\n+#include <iostream>\n+\n+template void std::basic_iostream<char>::swap (basic_iostream&);"}, {"sha": "52a145dd01819e4263c76de7b6c5b6e95d4c7273", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "patch": "@@ -13740,9 +13740,9 @@ component_ref_size (tree ref, special_array_member *sam /* = NULL */)\n {\n   gcc_assert (TREE_CODE (ref) == COMPONENT_REF);\n \n-  special_array_member arkbuf;\n+  special_array_member sambuf;\n   if (!sam)\n-    sam = &arkbuf;\n+    sam = &sambuf;\n   *sam = special_array_member::none;\n \n   /* The object/argument referenced by the COMPONENT_REF and its type.  */\n@@ -13756,7 +13756,13 @@ component_ref_size (tree ref, special_array_member *sam /* = NULL */)\n     {\n       tree memtype = TREE_TYPE (member);\n       if (TREE_CODE (memtype) != ARRAY_TYPE)\n-\treturn memsize;\n+\t/* DECL_SIZE may be less than TYPE_SIZE in C++ when referring\n+\t   to the type of a class with a virtual base which doesn't\n+\t   reflect the size of the virtual's members (see pr97595).\n+\t   If that's the case fail for now and implement something\n+\t   more robust in the future.  */\n+\treturn (tree_int_cst_equal (memsize, TYPE_SIZE_UNIT (memtype))\n+\t\t? memsize : NULL_TREE);\n \n       bool trailing = array_at_struct_end_p (ref);\n       bool zero_length = integer_zerop (memsize);"}, {"sha": "ecdb11efcd1d6fcefb4a43dc2e2c234a3afa53f1", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76f83e3859f738809d3aa8bd9dc14e10fc40e24/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b76f83e3859f738809d3aa8bd9dc14e10fc40e24", "patch": "@@ -1987,8 +1987,10 @@ class auto_suppress_location_wrappers\n    so they must be checked as well.  */\n \n #define TYPE_UID(NODE) (TYPE_CHECK (NODE)->type_common.uid)\n-/* Type size in bits as a tree expression.  Need not be constant\n-   and may be null.  */\n+/* Type size in bits as a tree expression.  Need not be constant and may\n+   be greater than TYPE_SIZE for a C++ FIELD_DECL representing a base\n+   class subobject with its own virtual base classes (which are laid out\n+   separately).  */\n #define TYPE_SIZE(NODE) (TYPE_CHECK (NODE)->type_common.size)\n /* Likewise, type size in bytes.  */\n #define TYPE_SIZE_UNIT(NODE) (TYPE_CHECK (NODE)->type_common.size_unit)\n@@ -2521,7 +2523,9 @@ extern tree vector_element_bits_tree (const_tree);\n #define DECL_INITIAL(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.initial)\n \n /* Holds the size of the datum, in bits, as a tree expression.\n-   Need not be constant and may be null.  */\n+   Need not be constant and may be null.  May be less than TYPE_SIZE\n+   for a C++ FIELD_DECL representing a base class subobject with its\n+   own virtual base classes (which are laid out separately).  */\n #define DECL_SIZE(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.size)\n /* Likewise for the size in bytes.  */\n #define DECL_SIZE_UNIT(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.size_unit)"}]}