{"sha": "6adb7308669b8f8927093ec4145ed47e9a832bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkYjczMDg2NjliOGY4OTI3MDkzZWM0MTQ1ZWQ0N2U5YTgzMmJiMA==", "commit": {"author": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2012-03-29T12:41:52Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2012-03-29T12:41:52Z"}, "message": "Restore trampled commits\n\nFrom-SVN: r185955", "tree": {"sha": "bc0c0412ca7f2f0db0fd298877e4cf77aee0ece4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc0c0412ca7f2f0db0fd298877e4cf77aee0ece4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6adb7308669b8f8927093ec4145ed47e9a832bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adb7308669b8f8927093ec4145ed47e9a832bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6adb7308669b8f8927093ec4145ed47e9a832bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adb7308669b8f8927093ec4145ed47e9a832bb0/comments", "author": null, "committer": null, "parents": [{"sha": "477fcae3e8156d1cdcf7978595c3cff7617610b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477fcae3e8156d1cdcf7978595c3cff7617610b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477fcae3e8156d1cdcf7978595c3cff7617610b8"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "6df2662df8005aea3f061b28e538fd0bf756352c", "filename": "libffi/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=6adb7308669b8f8927093ec4145ed47e9a832bb0", "patch": "@@ -32,11 +32,28 @@\n \twindows-like hosts.\n \t* configure: Rebuilt.\n \n+2012-02-27  Mikael Pettersson  <mikpe@it.uu.se>\n+\n+\tPR libffi/52223\n+\t* Makefile.am (FLAGS_TO_PASS): Define.\n+\t* Makefile.in: Regenerate.\n+\n 2012-02-23  Anthony Green  <green@moxielogic.com>\n \n \t* src/*/ffitarget.h: Ensure that users never include ffitarget.h\n \tdirectly.\n \n+2012-02-23  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR libffi/52221\n+\t* src/x86/ffi.c (ffi_closure_raw_THISCALL): New\n+\tprototype.\n+\t(ffi_prep_raw_closure_loc): Use ffi_closure_raw_THISCALL for\n+\tthiscall-convention.\n+\t(ffi_raw_call): Use ffi_prep_args_raw.\n+\t* src/x86/win32.S (ffi_closure_raw_THISCALL): Add\n+\timplementation for stub.\n+\n 2012-02-10  Kai Tietz  <ktietz@redhat.com>\n \n \t* configure.ac (AM_LTLDFLAGS): Add -no-undefine for x64\n@@ -262,6 +279,10 @@\n \t* src/sparc/ffi.c (ffi_prep_closure_loc): Don't ASSERT ABI test,\n \tjust return FFI_BAD_ABI when things are wrong.\n \n+2012-02-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* src/sparc/v9.S (STACKFRAME): Bump to 176.\n+\n 2011-02-09  Stuart Shelton  <srcshelton@gmail.com>\n \n \thttp://bugs.gentoo.org/show_bug.cgi?id=286911\n@@ -790,6 +811,13 @@\n \t* src/pa/ffi.c (ffi_closure_inner_pa32): Handle FFI_TYPE_LONGDOUBLE\n \ttype on HP-UX.\n \n+2012-02-13  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR libffi/52221\n+\t* src/x86/ffi.c (ffi_prep_raw_closure_loc): Add thiscall\n+\tsupport for X86_WIN32.\n+\t(FFI_INIT_TRAMPOLINE_THISCALL): Fix displacement.\n+\n 2009-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* src/sparc/ffi.c (ffi_closure_sparc_inner_v9): Properly align 'long"}, {"sha": "bf31a2b5110c518429614951a3054c1818af419a", "filename": "libffi/src/sparc/v9.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2Fsrc%2Fsparc%2Fv9.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2Fsrc%2Fsparc%2Fv9.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fv9.S?ref=6adb7308669b8f8927093ec4145ed47e9a832bb0", "patch": "@@ -32,7 +32,7 @@\n /* Only compile this in for 64bit builds, because otherwise the object file\n    will have inproper architecture due to used instructions.  */\n \n-#define STACKFRAME 128\t\t/* Minimum stack framesize for SPARC */\n+#define STACKFRAME 176\t\t/* Minimum stack framesize for SPARC 64-bit */\n #define STACK_BIAS 2047\n #define ARGS (128)\t\t/* Offset of register area in frame */\n "}, {"sha": "f643b345cba89196fbaa95fa8fb6787d4f1bd419", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=6adb7308669b8f8927093ec4145ed47e9a832bb0", "patch": "@@ -426,6 +426,8 @@ unsigned int FFI_HIDDEN ffi_closure_SYSV_inner (ffi_closure *, void **, void *)\n void FFI_HIDDEN ffi_closure_raw_SYSV (ffi_raw_closure *)\n      __attribute__ ((regparm(1)));\n #ifdef X86_WIN32\n+void FFI_HIDDEN ffi_closure_raw_THISCALL (ffi_raw_closure *)\n+     __attribute__ ((regparm(1)));\n void FFI_HIDDEN ffi_closure_STDCALL (ffi_closure *)\n      __attribute__ ((regparm(1)));\n void FFI_HIDDEN ffi_closure_THISCALL (ffi_closure *)\n@@ -593,7 +595,7 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue, void **avalue,\n { unsigned char *__tramp = (unsigned char*)(TRAMP); \\\n    unsigned int  __fun = (unsigned int)(FUN); \\\n    unsigned int  __ctx = (unsigned int)(CTX); \\\n-   unsigned int  __dis = __fun - (__ctx + 22);  \\\n+   unsigned int  __dis = __fun - (__ctx + 49);  \\\n    unsigned short __size = (unsigned short)(SIZE); \\\n    *(unsigned int *) &__tramp[0] = 0x8324048b;\t/* mov (%esp), %eax */ \\\n    *(unsigned int *) &__tramp[4] = 0x4c890cec;\t/* sub $12, %esp */ \\\n@@ -699,6 +701,9 @@ ffi_prep_raw_closure_loc (ffi_raw_closure* closure,\n   int i;\n \n   if (cif->abi != FFI_SYSV) {\n+#ifdef X86_WIN32\n+    if (cif->abi != FFI_THISCALL)\n+#endif\n     return FFI_BAD_ABI;\n   }\n \n@@ -713,10 +718,20 @@ ffi_prep_raw_closure_loc (ffi_raw_closure* closure,\n       FFI_ASSERT (cif->arg_types[i]->type != FFI_TYPE_LONGDOUBLE);\n     }\n   \n-\n+#ifdef X86_WIN32\n+  if (cif->abi == FFI_SYSV)\n+    {\n+#endif\n   FFI_INIT_TRAMPOLINE (&closure->tramp[0], &ffi_closure_raw_SYSV,\n                        codeloc);\n-    \n+#ifdef X86_WIN32\n+    }\n+  else if (cif->abi == FFI_THISCALL)\n+    {\n+      FFI_INIT_TRAMPOLINE_THISCALL (&closure->tramp[0], &ffi_closure_raw_THISCALL,\n+\t\t\t\t    codeloc, cif->bytes);\n+    }\n+#endif\n   closure->cif  = cif;\n   closure->user_data = user_data;\n   closure->fun  = fun;\n@@ -761,7 +776,7 @@ ffi_raw_call(ffi_cif *cif, void (*fn)(void), void *rvalue, ffi_raw *fake_avalue)\n #ifdef X86_WIN32\n     case FFI_SYSV:\n     case FFI_STDCALL:\n-      ffi_call_win32(ffi_prep_args, &ecif, cif->abi, cif->bytes, cif->flags,\n+      ffi_call_win32(ffi_prep_args_raw, &ecif, cif->abi, cif->bytes, cif->flags,\n \t\t     ecif.rvalue, fn);\n       break;\n     case FFI_THISCALL:\n@@ -789,7 +804,7 @@ ffi_raw_call(ffi_cif *cif, void (*fn)(void), void *rvalue, ffi_raw *fake_avalue)\n \t  cif->abi = abi = FFI_THISCALL;\n \tif (passed_regs < 1 && abi == FFI_THISCALL)\n \t  cif->abi = abi = FFI_STDCALL;\n-        ffi_call_win32(ffi_prep_args, &ecif, abi, cif->bytes, cif->flags,\n+        ffi_call_win32(ffi_prep_args_raw, &ecif, abi, cif->bytes, cif->flags,\n                        ecif.rvalue, fn);\n       }\n       break;"}, {"sha": "deb4a0394d866246f87af6e9bd78f9eee0163d4d", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adb7308669b8f8927093ec4145ed47e9a832bb0/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=6adb7308669b8f8927093ec4145ed47e9a832bb0", "patch": "@@ -264,6 +264,18 @@ ffi_closure_SYSV ENDP\n #define RAW_CLOSURE_USER_DATA_OFFSET (RAW_CLOSURE_FUN_OFFSET + 4)\n #define CIF_FLAGS_OFFSET 20\n \n+ffi_closure_raw_THISCALL PROC NEAR\n+\tpush ebp\n+\tmov  ebp, esp\n+\tpush esi\n+\tsub esp, 36\n+\tmov  esi, [eax + RAW_CLOSURE_CIF_OFFSET]        ;; closure->cif\n+\tmov  edx, [eax + RAW_CLOSURE_USER_DATA_OFFSET]  ;; closure->user_data\n+\tmov [esp + 12], edx\n+\tlea edx, [ebp + 12], edx\n+\tjmp stubraw\n+ffi_closure_raw_SYSV ENDP\n+\n ffi_closure_raw_SYSV PROC NEAR USES esi\n     ;; the ffi_closure ctx is passed in eax by the trampoline.\n \n@@ -272,6 +284,7 @@ ffi_closure_raw_SYSV PROC NEAR USES esi\n         mov  edx, [eax + RAW_CLOSURE_USER_DATA_OFFSET]  ;; closure->user_data\n         mov  [esp + 12], edx                            ;; user_data\n         lea  edx, [ebp + 8]\n+stubraw:\n         mov  [esp + 8], edx                             ;; raw_args\n         lea  edx, [ebp - 24]\n         mov  [esp + 4], edx                             ;; &res\n@@ -722,7 +735,21 @@ _ffi_closure_SYSV:\n #define RAW_CLOSURE_FUN_OFFSET (RAW_CLOSURE_CIF_OFFSET + 4)\n #define RAW_CLOSURE_USER_DATA_OFFSET (RAW_CLOSURE_FUN_OFFSET + 4)\n #define CIF_FLAGS_OFFSET 20\n-\n+        .balign 16\n+\t.globl\t_ffi_closure_raw_THISCALL\n+#ifndef __OS2__\n+\t.def\t_ffi_closure_raw_THISCALL;\t.scl\t2;\t.type\t32;\t.endef\n+#endif\n+_ffi_closure_raw_THISCALL:\n+\tpushl\t%ebp\n+\tmovl\t%esp, %ebp\n+\tpushl\t%esi\n+\tsubl\t$36, %esp\n+\tmovl\tRAW_CLOSURE_CIF_OFFSET(%eax), %esi\t /* closure->cif */\n+\tmovl\tRAW_CLOSURE_USER_DATA_OFFSET(%eax), %edx /* closure->user_data */\n+\tmovl\t%edx, 12(%esp)\t/* user_data */\n+\tleal\t12(%ebp), %edx\t/* __builtin_dwarf_cfa () */\n+\tjmp\t.stubraw\n         # This assumes we are using gas.\n         .balign 16\n \t.globl\t_ffi_closure_raw_SYSV\n@@ -742,6 +769,7 @@ _ffi_closure_raw_SYSV:\n \tmovl\tRAW_CLOSURE_USER_DATA_OFFSET(%eax), %edx /* closure->user_data */\n \tmovl\t%edx, 12(%esp)\t/* user_data */\n \tleal\t8(%ebp), %edx\t/* __builtin_dwarf_cfa () */\n+.stubraw:\n \tmovl\t%edx, 8(%esp)\t/* raw_args */\n \tleal\t-24(%ebp), %edx\n \tmovl\t%edx, 4(%esp)\t/* &res */"}]}