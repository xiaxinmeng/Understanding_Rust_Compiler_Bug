{"sha": "01ea66a6c56e53163d9430f4d87615d570848aa8", "node_id": "C_kwDOANBUbNoAKDAxZWE2NmE2YzU2ZTUzMTYzZDk0MzBmNGQ4NzYxNWQ1NzA4NDhhYTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-09T22:41:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-09T22:41:20Z"}, "message": "c++: Only do maybe_init_list_as_range optimization if !processing_template_decl [PR108047]\n\nThe last testcase in this patch ICEs, because\nmaybe_init_list_as_range -> maybe_init_list_as_array\ncalls maybe_constant_init in:\n  /* Don't do this if the conversion would be constant.  */\n  first = maybe_constant_init (first);\n  if (TREE_CONSTANT (first))\n    return NULL_TREE;\nbut maybe_constant_init shouldn't be called when processing_template_decl.\nWhile we could replace that call with fold_non_dependent_init, my limited\nunderstanding is that this is an optimization and even if we don't optimize\nit when processing_template_decl, build_user_type_conversion_1 will be\ncalled again during instantiation with !processing_template_decl if it is\nevery instantiated and we can do the optimization only then.\n\n2023-01-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105838\n\tPR c++/108047\n\tPR c++/108266\n\t* call.cc (maybe_init_list_as_range): Always return NULL_TREE if\n\tprocessing_template_decl.\n\n\t* g++.dg/tree-ssa/initlist-opt2.C: New test.\n\t* g++.dg/tree-ssa/initlist-opt3.C: New test.", "tree": {"sha": "70ce38fd433a7df19cbc46482b8dcea158ea5443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ce38fd433a7df19cbc46482b8dcea158ea5443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ea66a6c56e53163d9430f4d87615d570848aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ea66a6c56e53163d9430f4d87615d570848aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ea66a6c56e53163d9430f4d87615d570848aa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ea66a6c56e53163d9430f4d87615d570848aa8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799e2e7f023784b9cdcebfe5751d183d125b2bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799e2e7f023784b9cdcebfe5751d183d125b2bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799e2e7f023784b9cdcebfe5751d183d125b2bd8"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "bd174b8d655191812aad6c1ab55ec0c8e75e1f9e", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ea66a6c56e53163d9430f4d87615d570848aa8/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ea66a6c56e53163d9430f4d87615d570848aa8/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=01ea66a6c56e53163d9430f4d87615d570848aa8", "patch": "@@ -4285,7 +4285,8 @@ maybe_init_list_as_array (tree elttype, tree init)\n static tree\n maybe_init_list_as_range (tree fn, tree expr)\n {\n-  if (BRACE_ENCLOSED_INITIALIZER_P (expr)\n+  if (!processing_template_decl\n+      && BRACE_ENCLOSED_INITIALIZER_P (expr)\n       && is_list_ctor (fn)\n       && decl_in_std_namespace_p (fn))\n     {"}, {"sha": "c20713afc6a74f88993069ff9e98d80ea24679ad", "filename": "gcc/testsuite/g++.dg/tree-ssa/initlist-opt2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ea66a6c56e53163d9430f4d87615d570848aa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finitlist-opt2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ea66a6c56e53163d9430f4d87615d570848aa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finitlist-opt2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finitlist-opt2.C?ref=01ea66a6c56e53163d9430f4d87615d570848aa8", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/105838\n+// { dg-additional-options -fdump-tree-gimple }\n+// { dg-do compile { target c++11 } }\n+\n+// Test that we do range-initialization from const char *.\n+// { dg-final { scan-tree-dump {_M_range_initialize<const char\\* const\\*>} \"gimple\" } }\n+\n+#include <string>\n+#include <vector>\n+\n+void g (const void *);\n+\n+template <int N>\n+void f (const char *p)\n+{\n+  std::vector<std::string> lst = {\n+  \"aahing\", \"aaliis\", \"aarrgh\", \"abacas\", \"abacus\", \"abakas\", \"abamps\", \"abands\", \"abased\", \"abaser\", \"abases\", \"abasia\",\n+  \"abated\", \"abater\", \"abates\", \"abatis\", \"abator\", \"abattu\", \"abayas\", \"abbacy\", \"abbess\", \"abbeys\", \"abbots\", \"abcees\",\n+  \"abdabs\", \"abduce\", \"abduct\", \"abears\", \"abeigh\", \"abeles\", \"abelia\", \"abends\", \"abhors\", \"abided\", \"abider\", \"abides\",\n+  \"abject\", \"abjure\", \"ablate\", \"ablaut\", \"ablaze\", \"ablest\", \"ablets\", \"abling\", \"ablins\", \"abloom\", \"ablush\", \"abmhos\",\n+  \"aboard\", \"aboded\", \"abodes\", \"abohms\", \"abolla\", \"abomas\", \"aboral\", \"abords\", \"aborne\", \"aborts\", \"abound\", \"abouts\",\n+  \"aboves\", \"abrade\", \"abraid\", \"abrash\", \"abrays\", \"abrazo\", \"abrege\", \"abrins\", \"abroad\", \"abrupt\", \"abseil\", \"absent\",\n+  };\n+\n+  g(&lst);\n+}\n+\n+void h (const char *p)\n+{\n+  f<0> (p);\n+}"}, {"sha": "c750b99eeca3bb4f7897d47b1098bd0037e19f1c", "filename": "gcc/testsuite/g++.dg/tree-ssa/initlist-opt3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ea66a6c56e53163d9430f4d87615d570848aa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finitlist-opt3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ea66a6c56e53163d9430f4d87615d570848aa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finitlist-opt3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finitlist-opt3.C?ref=01ea66a6c56e53163d9430f4d87615d570848aa8", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/108266\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+#include <vector>\n+\n+struct S { S (const char *); };\n+void bar (std::vector<S>);\n+\n+template <int N>\n+void\n+foo ()\n+{\n+  bar ({\"\", \"\"});\n+}\n+\n+void\n+baz ()\n+{\n+  foo<0> ();\n+}"}]}