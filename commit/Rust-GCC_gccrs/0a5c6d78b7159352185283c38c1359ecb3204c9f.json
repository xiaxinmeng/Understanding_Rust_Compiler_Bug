{"sha": "0a5c6d78b7159352185283c38c1359ecb3204c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1YzZkNzhiNzE1OTM1MjE4NTI4M2MzOGMxMzU5ZWNiMzIwNGM5Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-28T19:16:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-28T19:16:50Z"}, "message": "re PR target/85095 (worse code generated)\n\n\tPR target/85095\n\t* config/i386/i386.md (*add<mode>3_carry_0, *addsi3_carry_zext_0,\n\t*sub<mode>3_carry_0, *subsi3_carry_zext_0): New patterns.\n\n\t* gcc.target/i386/pr85095-1.c: New test.\n\t* gcc.target/i386/pr85095-2.c: New test.\n\t* gcc.c-torture/execute/pr85095.c: New test.\n\nFrom-SVN: r258931", "tree": {"sha": "f97adb2bc8d5dc3da5a7c12b1506ca6c8ad462c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f97adb2bc8d5dc3da5a7c12b1506ca6c8ad462c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a5c6d78b7159352185283c38c1359ecb3204c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a5c6d78b7159352185283c38c1359ecb3204c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a5c6d78b7159352185283c38c1359ecb3204c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a5c6d78b7159352185283c38c1359ecb3204c9f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30a2c10eb639f1855fe7e060552f09c706efa532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a2c10eb639f1855fe7e060552f09c706efa532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a2c10eb639f1855fe7e060552f09c706efa532"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "8da14418a397ea812ce07bc0f6d2e9bf120470f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a5c6d78b7159352185283c38c1359ecb3204c9f", "patch": "@@ -1,5 +1,9 @@\n 2018-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85095\n+\t* config/i386/i386.md (*add<mode>3_carry_0, *addsi3_carry_zext_0,\n+\t*sub<mode>3_carry_0, *subsi3_carry_zext_0): New patterns.\n+\n \tPR tree-optimization/82004\n \t* gimple-match-head.c (optimize_pow_to_exp): New function.\n \t* match.pd (pow(C,x) -> exp(log(C)*x)): Wrap with #if GIMPLE."}, {"sha": "b28e783103088bba9496440944b50db76cec37c7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0a5c6d78b7159352185283c38c1359ecb3204c9f", "patch": "@@ -6854,6 +6854,20 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*add<mode>3_carry_0\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(plus:SWI\n+\t  (match_operator:SWI 3 \"ix86_carry_flag_operator\"\n+\t    [(match_operand 2 \"flags_reg_operand\") (const_int 0)])\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_unary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"adc{<imodesuffix>}\\t{$0, %0|%0, 0}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*addsi3_carry_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n@@ -6870,6 +6884,20 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*addsi3_carry_zext_0\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI (match_operator:SI 2 \"ix86_carry_flag_operator\"\n+\t\t    [(reg FLAGS_REG) (const_int 0)])\n+\t\t   (match_operand:SI 1 \"register_operand\" \"0\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+  \"adc{l}\\t{$0, %k0|%k0, 0}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n ;; There is no point to generate ADCX instruction. ADC is shorter and faster.\n \n (define_insn \"addcarry<mode>\"\n@@ -6926,6 +6954,20 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*sub<mode>3_carry_0\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(minus:SWI\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operator:SWI 3 \"ix86_carry_flag_operator\"\n+\t    [(match_operand 2 \"flags_reg_operand\") (const_int 0)])))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_unary_operator_ok (MINUS, <MODE>mode, operands)\"\n+  \"sbb{<imodesuffix>}\\t{$0, %0|%0, 0}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*subsi3_carry_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n@@ -6943,6 +6985,21 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*subsi3_carry_zext_0\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (minus:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"0\")\n+\t    (match_operator:SI 2 \"ix86_carry_flag_operator\"\n+\t      [(reg FLAGS_REG) (const_int 0)]))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+  \"sbb{l}\\t{$0, %k0|%k0, 0}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"sub<mode>3_carry_ccc\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC"}, {"sha": "62111d459d3a015ce262b1fca5d03fea58a200cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a5c6d78b7159352185283c38c1359ecb3204c9f", "patch": "@@ -1,5 +1,10 @@\n 2018-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85095\n+\t* gcc.target/i386/pr85095-1.c: New test.\n+\t* gcc.target/i386/pr85095-2.c: New test.\n+\t* gcc.c-torture/execute/pr85095.c: New test.\n+\n \tPR tree-optimization/82004\n \t* gcc.dg/pr82004.c: New test.\n "}, {"sha": "8b78b58423f209e7b23ea8398094338b8e4f94a2", "filename": "gcc/testsuite/gcc.c-torture/execute/pr85095.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr85095.c?ref=0a5c6d78b7159352185283c38c1359ecb3204c9f", "patch": "@@ -0,0 +1,52 @@\n+/* PR target/85095 */\n+\n+__attribute__((noipa)) unsigned long\n+f1 (unsigned long a, unsigned long b)\n+{\n+  unsigned long i = __builtin_add_overflow (a, b, &a);\n+  return a + i;\n+}\n+\n+__attribute__((noipa)) unsigned long\n+f2 (unsigned long a, unsigned long b)\n+{\n+  unsigned long i = __builtin_add_overflow (a, b, &a);\n+  return a - i;\n+}\n+\n+__attribute__((noipa)) unsigned long\n+f3 (unsigned int a, unsigned int b)\n+{\n+  unsigned int i = __builtin_add_overflow (a, b, &a);\n+  return a + i;\n+}\n+\n+__attribute__((noipa)) unsigned long\n+f4 (unsigned int a, unsigned int b)\n+{\n+  unsigned int i = __builtin_add_overflow (a, b, &a);\n+  return a - i;\n+}\n+\n+int\n+main ()\n+{\n+  if (f1 (16UL, -18UL) != -2UL\n+      || f1 (16UL, -17UL) != -1UL\n+      || f1 (16UL, -16UL) != 1UL\n+      || f1 (16UL, -15UL) != 2UL\n+      || f2 (24UL, -26UL) != -2UL\n+      || f2 (24UL, -25UL) != -1UL\n+      || f2 (24UL, -24UL) != -1UL\n+      || f2 (24UL, -23UL) != 0UL\n+      || f3 (32U, -34U) != -2U\n+      || f3 (32U, -33U) != -1U\n+      || f3 (32U, -32U) != 1U\n+      || f3 (32U, -31U) != 2U\n+      || f4 (35U, -37U) != -2U\n+      || f4 (35U, -36U) != -1U\n+      || f4 (35U, -35U) != -1U\n+      || f4 (35U, -34U) != 0U)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "4c882e0ed9d7fd15cc4ff8d7111f110a39bebe1a", "filename": "gcc/testsuite/gcc.target/i386/pr85095-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85095-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85095-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85095-1.c?ref=0a5c6d78b7159352185283c38c1359ecb3204c9f", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/85095 *\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+unsigned int\n+foo (unsigned int a, unsigned int b)\n+{\n+  a += b;\n+  if (a < b) a++;\n+  return a;\n+}\n+\n+#ifdef __x86_64__\n+unsigned long long\n+bar (unsigned long long a, unsigned long long b)\n+{\n+  a += b;\n+  if (a < b) a++;\n+  return a;\n+}\n+\n+unsigned long long\n+baz (unsigned int a, unsigned int b)\n+{\n+  a += b;\n+  if (a < b) a++;\n+  return a;\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"adcl\\t\\\\\\$0,\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"adcl\\t\\\\\\$0,\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"adcq\\t\\\\\\$0,\" 1 { target { ! ia32 } } } } */"}, {"sha": "fbd7992bf4fb9fd143c93f64431a6439afbffc79", "filename": "gcc/testsuite/gcc.target/i386/pr85095-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85095-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a5c6d78b7159352185283c38c1359ecb3204c9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85095-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85095-2.c?ref=0a5c6d78b7159352185283c38c1359ecb3204c9f", "patch": "@@ -0,0 +1,54 @@\n+/* PR target/85095 *\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+unsigned int\n+f1 (unsigned int a, unsigned int b)\n+{\n+  unsigned int i = __builtin_add_overflow (a, b, &a);\n+  return a + i;\n+}\n+\n+unsigned int\n+f2 (unsigned int a, unsigned int b)\n+{\n+  unsigned int i = __builtin_add_overflow (a, b, &a);\n+  return a - i;\n+}\n+\n+#ifdef __x86_64__\n+unsigned long long\n+f3 (unsigned long long a, unsigned long long b)\n+{\n+  unsigned long long i = __builtin_add_overflow (a, b, &a);\n+  return a + i;\n+}\n+\n+unsigned long long\n+f4 (unsigned long long a, unsigned long long b)\n+{\n+  unsigned long long i = __builtin_add_overflow (a, b, &a);\n+  return a - i;\n+}\n+\n+unsigned long long\n+f5 (unsigned int a, unsigned int b)\n+{\n+  unsigned int i = __builtin_add_overflow (a, b, &a);\n+  return a + i;\n+}\n+\n+unsigned long long\n+f6 (unsigned int a, unsigned int b)\n+{\n+  unsigned int i = __builtin_add_overflow (a, b, &a);\n+  return a - i;\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"adcl\\t\\\\\\$0,\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"sbbl\\t\\\\\\$0,\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"adcl\\t\\\\\\$0,\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"sbbl\\t\\\\\\$0,\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"adcq\\t\\\\\\$0,\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"sbbq\\t\\\\\\$0,\" 1 { target { ! ia32 } } } } */"}]}