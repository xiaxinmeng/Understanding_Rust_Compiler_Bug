{"sha": "d24bacfe4c4a70da9105a37b5005fa6c11d0c7af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0YmFjZmU0YzRhNzBkYTkxMDVhMzdiNTAwNWZhNmMxMWQwYzdhZg==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-22T15:57:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "More AST conversion to GIMPLE", "tree": {"sha": "024599794286ac987fd42601a195cc7f8a00ef5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/024599794286ac987fd42601a195cc7f8a00ef5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24bacfe4c4a70da9105a37b5005fa6c11d0c7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24bacfe4c4a70da9105a37b5005fa6c11d0c7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24bacfe4c4a70da9105a37b5005fa6c11d0c7af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24bacfe4c4a70da9105a37b5005fa6c11d0c7af/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcfe32f59d624ab90990c2c00bfef0fc85f62430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfe32f59d624ab90990c2c00bfef0fc85f62430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfe32f59d624ab90990c2c00bfef0fc85f62430"}], "stats": {"total": 102, "additions": 94, "deletions": 8}, "files": [{"sha": "04f33e9fd61b7bc324621716c75f53c6e7acf574", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 94, "deletions": 8, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24bacfe4c4a70da9105a37b5005fa6c11d0c7af/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24bacfe4c4a70da9105a37b5005fa6c11d0c7af/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=d24bacfe4c4a70da9105a37b5005fa6c11d0c7af", "patch": "@@ -146,6 +146,7 @@ Compilation::visit (AST::AttrInputMetaItemContainer &input)\n void\n Compilation::visit (AST::IdentifierExpr &ident_expr)\n {\n+  printf (\"IdentifierExpr: %s\\n\", ident_expr.as_string ().c_str ());\n   Bvariable *var = NULL;\n   if (!scope.LookupVar (ident_expr.as_string (), &var))\n     {\n@@ -170,7 +171,17 @@ Compilation::visit (AST::MacroInvocationSemi &macro)\n // rust-path.h\n void\n Compilation::visit (AST::PathInExpression &path)\n-{}\n+{\n+  Bfunction *fn = NULL;\n+  if (scope.LookupFunction (path.as_string (), &fn))\n+    {\n+      auto expr\n+\t= backend->function_code_expression (fn, path.get_locus_slow ());\n+      exprs.push_back (expr);\n+      return;\n+    }\n+}\n+\n void\n Compilation::visit (AST::TypePathSegment &segment)\n {}\n@@ -260,8 +271,6 @@ Compilation::visit (AST::NegationExpr &expr)\n void\n Compilation::visit (AST::ArithmeticOrLogicalExpr &expr)\n {\n-  printf (\"ArithmeticOrLogicalExpr %s\\n\", expr.as_string ().c_str ());\n-\n   Bexpression *lhs = NULL;\n   VISIT_POP (expr.get_lhs ()->get_locus_slow (), expr.get_lhs (), lhs, exprs);\n   if (lhs == NULL)\n@@ -306,9 +315,31 @@ Compilation::visit (AST::LazyBooleanExpr &expr)\n void\n Compilation::visit (AST::TypeCastExpr &expr)\n {}\n+\n void\n Compilation::visit (AST::AssignmentExpr &expr)\n-{}\n+{\n+  Bexpression *lhs = NULL;\n+  VISIT_POP (expr.get_lhs ()->get_locus_slow (), expr.get_lhs (), lhs, exprs);\n+  if (lhs == NULL)\n+    {\n+      rust_error_at (expr.get_lhs ()->get_locus_slow (), \"failed to compile\");\n+      return;\n+    }\n+\n+  Bexpression *rhs = NULL;\n+  VISIT_POP (expr.right_expr->get_locus_slow (), expr.right_expr, rhs, exprs);\n+  if (rhs == NULL)\n+    {\n+      rust_error_at (expr.right_expr->get_locus_slow (), \"failed to compile\");\n+      return;\n+    }\n+\n+  auto s = backend->assignment_statement (scope.GetCurrentFndecl (), lhs, rhs,\n+\t\t\t\t\t  expr.get_locus_slow ());\n+  scope.AddStatement (s);\n+}\n+\n void\n Compilation::visit (AST::CompoundAssignmentExpr &expr)\n {}\n@@ -378,9 +409,39 @@ Compilation::visit (AST::EnumExprTuple &expr)\n void\n Compilation::visit (AST::EnumExprFieldless &expr)\n {}\n+\n void\n Compilation::visit (AST::CallExpr &expr)\n-{}\n+{\n+  Bexpression *fn = NULL;\n+  VISIT_POP (expr.function->get_locus_slow (), expr.function, fn, exprs);\n+  if (fn == NULL)\n+    {\n+      printf (\"expr.function = %s\\n\", expr.function->as_string ().c_str ());\n+      rust_error_at (expr.function->get_locus_slow (), \"failed to resolve\");\n+      return;\n+    }\n+\n+  std::vector<Bexpression *> args;\n+  for (auto &param : expr.params)\n+    {\n+      Bexpression *arg = NULL;\n+      VISIT_POP (param->get_locus_slow (), param, arg, exprs);\n+      if (arg == NULL)\n+\t{\n+\t  rust_error_at (param->get_locus_slow (),\n+\t\t\t \"failed to compile argument\");\n+\t  return;\n+\t}\n+\n+      args.push_back (arg);\n+    }\n+\n+  auto call = backend->call_expression (scope.GetCurrentFndecl (), fn, args,\n+\t\t\t\t\tNULL, expr.locus);\n+  exprs.push_back (call);\n+}\n+\n void\n Compilation::visit (AST::MethodCallExpr &expr)\n {}\n@@ -420,9 +481,27 @@ Compilation::visit (AST::RangeFromToInclExpr &expr)\n void\n Compilation::visit (AST::RangeToInclExpr &expr)\n {}\n+\n void\n Compilation::visit (AST::ReturnExpr &expr)\n-{}\n+{\n+  printf (\"ReturnExpr: %s\\n\", expr.as_string ().c_str ());\n+\n+  Bexpression *ret = NULL;\n+  VISIT_POP (expr.return_expr->get_locus_slow (), expr.return_expr, ret, exprs);\n+  if (ret == NULL)\n+    {\n+      rust_error_at (expr.return_expr->get_locus_slow (), \"failed to compile\");\n+      return;\n+    }\n+\n+  std::vector<Bexpression *> retstmts;\n+  retstmts.push_back (ret);\n+  auto s = backend->return_statement (scope.GetCurrentFndecl (), retstmts,\n+\t\t\t\t      expr.locus);\n+  scope.AddStatement (s);\n+}\n+\n void\n Compilation::visit (AST::UnsafeBlockExpr &expr)\n {}\n@@ -632,6 +711,8 @@ Compilation::visit (AST::Function &function)\n \n   scope.Pop ();\n   scope.PopCurrentFunction ();\n+\n+  func_decls.push_back (fndecl);\n }\n \n void\n@@ -845,10 +926,15 @@ Compilation::visit (AST::LetStmt &stmt)\n \n void\n Compilation::visit (AST::ExprStmtWithoutBlock &stmt)\n-{}\n+{\n+  stmt.expr->accept_vis (*this);\n+}\n+\n void\n Compilation::visit (AST::ExprStmtWithBlock &stmt)\n-{}\n+{\n+  rust_fatal_error (stmt.get_locus_slow (), \"need new block to continue\");\n+}\n \n // rust-type.h\n void"}]}