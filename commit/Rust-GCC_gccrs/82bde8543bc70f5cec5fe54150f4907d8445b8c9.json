{"sha": "82bde8543bc70f5cec5fe54150f4907d8445b8c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiZGU4NTQzYmM3MGY1Y2VjNWZlNTQxNTBmNDkwN2Q4NDQ1YjhjOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-01-25T03:40:07Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-01-25T03:40:07Z"}, "message": "Do not give a warning for a plain 0 used in a pointer context.\n\nFrom-SVN: r3322", "tree": {"sha": "590dc583870707060c0197b1ad2619268921b078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590dc583870707060c0197b1ad2619268921b078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82bde8543bc70f5cec5fe54150f4907d8445b8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bde8543bc70f5cec5fe54150f4907d8445b8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82bde8543bc70f5cec5fe54150f4907d8445b8c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bde8543bc70f5cec5fe54150f4907d8445b8c9/comments", "author": null, "committer": null, "parents": [{"sha": "21cd4ffcadaa122bbd82c734f250b16c8946ce62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cd4ffcadaa122bbd82c734f250b16c8946ce62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21cd4ffcadaa122bbd82c734f250b16c8946ce62"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "98a3c9ec9672d2e2e38657e1c442087bce1b9de2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bde8543bc70f5cec5fe54150f4907d8445b8c9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bde8543bc70f5cec5fe54150f4907d8445b8c9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=82bde8543bc70f5cec5fe54150f4907d8445b8c9", "patch": "@@ -56,6 +56,8 @@ static void pedantic_lvalue_warning ();\n tree truthvalue_conversion ();\n void incomplete_type_error ();\n void readonly_warning ();\n+static tree internal_build_compound_expr ();\n+\n \f\n /* Do `exp = require_complete_type (exp);' to make sure exp\n    does not have an incomplete type.  (That includes void types.)  */\n@@ -3632,6 +3634,14 @@ build_conditional_expr (ifexp, op1, op2)\n tree\n build_compound_expr (list)\n      tree list;\n+{\n+  internal_build_compound_expr (list, TRUE);\n+}\n+\n+static tree\n+internal_build_compound_expr (list, first_p)\n+     tree list;\n+     int first_p;\n {\n   register tree rest;\n \n@@ -3646,7 +3656,7 @@ build_compound_expr (list)\n #endif\n \n       /* Don't let (0, 0) be null pointer constant.  */\n-      if (integer_zerop (TREE_VALUE (list)))\n+      if (!first_p && integer_zerop (TREE_VALUE (list)))\n \treturn non_lvalue (TREE_VALUE (list));\n       return TREE_VALUE (list);\n     }\n@@ -3659,7 +3669,7 @@ build_compound_expr (list)\n \t  = default_conversion (TREE_VALUE (TREE_CHAIN (list)));\n     }\n \n-  rest = build_compound_expr (TREE_CHAIN (list));\n+  rest = internal_build_compound_expr (TREE_CHAIN (list), FALSE);\n \n   if (! TREE_SIDE_EFFECTS (TREE_VALUE (list)))\n     return rest;"}]}