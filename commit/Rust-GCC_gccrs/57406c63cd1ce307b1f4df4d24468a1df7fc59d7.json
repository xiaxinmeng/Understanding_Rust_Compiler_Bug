{"sha": "57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0MDZjNjNjZDFjZTMwN2IxZjRkZjRkMjQ0NjhhMWRmN2ZjNTlkNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-27T10:12:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-27T10:12:51Z"}, "message": "rtl.h (read_rtx): Change prototype.\n\n\t* rtl.h (read_rtx): Change prototype.\n\t* read-rtl.c (read_rtx): Provide the caller with both an rtx and a\n\tline number.  Return true on success.\n\t* gensupport.c (process_include, init_md_reader_args_cb): Adjust\n\tcallers accordingly.\n\nFrom-SVN: r86657", "tree": {"sha": "19986beafca6533f327d3eb48031c4616e3a888d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19986beafca6533f327d3eb48031c4616e3a888d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/comments", "author": null, "committer": null, "parents": [{"sha": "6a6bfc8e70897234a262527a07d80b6036282b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6bfc8e70897234a262527a07d80b6036282b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a6bfc8e70897234a262527a07d80b6036282b8e"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "62936b89e3591139d855a892b38f566abf49a6ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "patch": "@@ -1,3 +1,11 @@\n+2004-08-26  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* rtl.h (read_rtx): Change prototype.\n+\t* read-rtl.c (read_rtx): Provide the caller with both an rtx and a\n+\tline number.  Return true on success.\n+\t* gensupport.c (process_include, init_md_reader_args_cb): Adjust\n+\tcallers accordingly.\n+\n 2004-08-26  Richard Henderson  <rth@redhat.com>\n \n \t* c-typeck.c (build_offsetof): Remove."}, {"sha": "8767068f223616b240568b97247514bbf3f68c8e", "filename": "gcc/gensupport.c", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "patch": "@@ -246,20 +246,8 @@ process_include (rtx desc, int lineno)\n   read_rtx_lineno = 1;\n \n   /* Read the entire file.  */\n-  while (1)\n-    {\n-      rtx desc;\n-      int c;\n-\n-      c = read_skip_spaces (input_file);\n-      if (c == EOF)\n-\tbreak;\n-\n-      ungetc (c, input_file);\n-      lineno = read_rtx_lineno;\n-      desc = read_rtx (input_file);\n-      process_rtx (desc, lineno);\n-    }\n+  while (read_rtx (input_file, &desc, &lineno))\n+    process_rtx (desc, lineno);\n \n   /* Do not free pathname.  It is attached to the various rtx queue\n      elements.  */\n@@ -911,9 +899,10 @@ int\n init_md_reader_args_cb (int argc, char **argv, bool (*parse_opt)(const char *))\n {\n   FILE *input_file;\n-  int i;\n+  int i, lineno;\n   size_t ix;\n   char *lastsl;\n+  rtx desc;\n \n   for (i = 1; i < argc; i++)\n     {\n@@ -991,19 +980,8 @@ init_md_reader_args_cb (int argc, char **argv, bool (*parse_opt)(const char *))\n   sequence_num = 0;\n \n   /* Read the entire file.  */\n-  while (1)\n-    {\n-      rtx desc;\n-      int lineno;\n-      int c = read_skip_spaces (input_file);\n-      if (c == EOF)\n-        break;\n-\n-      ungetc (c, input_file);\n-      lineno = read_rtx_lineno;\n-      desc = read_rtx (input_file);\n-      process_rtx (desc, lineno);\n-    }\n+  while (read_rtx (input_file, &desc, &lineno))\n+    process_rtx (desc, lineno);\n   fclose (input_file);\n \n   /* Process define_cond_exec patterns.  */"}, {"sha": "db0b3d7d3fb66ebdf4bfee03dac5111bff3928fe", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "patch": "@@ -1066,16 +1066,20 @@ check_code_macro (struct mapping *macro, FILE *infile)\n   bellwether_codes[macro->index] = bellwether;\n }\n \n-/* Read an rtx in printed representation from INFILE\n-   and return an actual rtx in core constructed accordingly.\n+/* Read an rtx in printed representation from INFILE and store its\n+   core representation in *X.  Also store the line number of the\n+   opening '(' in *LINENO.  Return true on success or false if the\n+   end of file has been reached.\n+\n    read_rtx is not used in the compiler proper, but rather in\n    the utilities gen*.c that construct C code from machine descriptions.  */\n \n-rtx\n-read_rtx (FILE *infile)\n+bool\n+read_rtx (FILE *infile, rtx *x, int *lineno)\n {\n   static rtx queue_head, queue_next;\n-  rtx return_rtx;\n+  static int queue_lineno;\n+  int c;\n \n   /* Do one-time initialization.  */\n   if (queue_head == 0)\n@@ -1087,19 +1091,25 @@ read_rtx (FILE *infile)\n \n   if (queue_next == 0)\n     {\n-      queue_next = queue_head;\n+      c = read_skip_spaces (infile);\n+      if (c == EOF)\n+\treturn false;\n+      ungetc (c, infile);\n \n+      queue_next = queue_head;\n+      queue_lineno = read_rtx_lineno;\n       XEXP (queue_next, 0) = read_rtx_1 (infile);\n       XEXP (queue_next, 1) = 0;\n \n       htab_traverse (modes.macros, apply_macro_traverse, queue_next);\n       htab_traverse (codes.macros, apply_macro_traverse, queue_next);\n     }\n \n-  return_rtx = XEXP (queue_next, 0);\n+  *x = XEXP (queue_next, 0);\n+  *lineno = queue_lineno;\n   queue_next = XEXP (queue_next, 1);\n \n-  return return_rtx;\n+  return true;\n }\n \n /* Subroutine of read_rtx that reads one construct from INFILE but"}, {"sha": "f8095192ec9f9ffe7963d02989716f86bc0955b5", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57406c63cd1ce307b1f4df4d24468a1df7fc59d7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=57406c63cd1ce307b1f4df4d24468a1df7fc59d7", "patch": "@@ -2147,7 +2147,7 @@ struct md_constant { char *name, *value; };\n \n /* In read-rtl.c */\n extern int read_skip_spaces (FILE *);\n-extern rtx read_rtx (FILE *);\n+extern bool read_rtx (FILE *, rtx *, int *);\n extern const char *read_rtx_filename;\n extern int read_rtx_lineno;\n "}]}