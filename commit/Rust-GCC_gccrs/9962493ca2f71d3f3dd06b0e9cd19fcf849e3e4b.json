{"sha": "9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2MjQ5M2NhMmY3MWQzZjNkZDA2YjBlOWNkMTlmY2Y4NDllM2U0Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-04T12:59:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-04T13:02:37Z"}, "message": "libstdc++: Fix regressions in unique_ptr::swap (PR 93562)\n\nThe requirements for this function are only that the deleter is\nswappable, but we incorrectly require that the element type is complete\nand that the deleter can be swapped using std::swap (which requires it\nto be move cosntructible and move assignable).\n\nThe fix is to add __uniq_ptr_impl::swap which swaps the pointer and\ndeleter individually, instead of using the generic std::swap on the\ntuple containing them.\n\n\tPR libstdc++/93562\n\t* include/bits/unique_ptr.h (__uniq_ptr_impl::swap): Define.\n\t(unique_ptr::swap, unique_ptr<T[], D>::swap): Call it.\n\t* testsuite/20_util/unique_ptr/modifiers/93562.cc: New test.", "tree": {"sha": "2bcdd7d3ee397e99f0bd462b8bba0cf6e1f7d9f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bcdd7d3ee397e99f0bd462b8bba0cf6e1f7d9f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59afd6ad83665ad93d3c87af238a21a9c1c38079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59afd6ad83665ad93d3c87af238a21a9c1c38079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59afd6ad83665ad93d3c87af238a21a9c1c38079"}], "stats": {"total": 121, "additions": 117, "deletions": 4}, "files": [{"sha": "bb1c3ab17458731d052940513a08db1ee10888ea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b", "patch": "@@ -1,3 +1,10 @@\n+2020-02-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93562\n+\t* include/bits/unique_ptr.h (__uniq_ptr_impl::swap): Define.\n+\t(unique_ptr::swap, unique_ptr<T[], D>::swap): Call it.\n+\t* testsuite/20_util/unique_ptr/modifiers/93562.cc: New test.\n+\n 2020-02-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* configure: Regenerate."}, {"sha": "d03266c18785a35aeba4a61a0796ed2a38ed62c5", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b", "patch": "@@ -185,6 +185,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __p;\n       }\n \n+      void\n+      swap(__uniq_ptr_impl& __rhs) noexcept\n+      {\n+\tusing std::swap;\n+\tswap(this->_M_ptr(), __rhs._M_ptr());\n+\tswap(this->_M_deleter(), __rhs._M_deleter());\n+      }\n+\n     private:\n       tuple<pointer, _Dp> _M_t;\n     };\n@@ -448,8 +456,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       swap(unique_ptr& __u) noexcept\n       {\n-\tusing std::swap;\n-\tswap(_M_t, __u._M_t);\n+\tstatic_assert(__is_swappable<_Dp>::value, \"deleter must be swappable\");\n+\t_M_t.swap(__u._M_t);\n       }\n \n       // Disable copy from lvalue.\n@@ -703,8 +711,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       swap(unique_ptr& __u) noexcept\n       {\n-\tusing std::swap;\n-\tswap(_M_t, __u._M_t);\n+\tstatic_assert(__is_swappable<_Dp>::value, \"deleter must be swappable\");\n+\t_M_t.swap(__u._M_t);\n       }\n \n       // Disable copy from lvalue."}, {"sha": "8ed236333acd0ce907ad754078ef372e67f49fe2", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/93562.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2F93562.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2F93562.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2F93562.cc?ref=9962493ca2f71d3f3dd06b0e9cd19fcf849e3e4b", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct incomplete;\n+\n+// This function isn't called, we just need to check it compiles.\n+void\n+test01(std::unique_ptr<incomplete>& p1, std::unique_ptr<incomplete>& p2)\n+{\n+  // PR libstdc++/93562\n+  p1.swap(p2);\n+  swap(p1, p2);\n+}\n+\n+// This function isn't called, we just need to check it compiles.\n+void\n+test02(std::unique_ptr<incomplete[]>& p1, std::unique_ptr<incomplete[]>& p2)\n+{\n+  // PR libstdc++/93562\n+  p1.swap(p2);\n+  swap(p1, p2);\n+}\n+\n+namespace A\n+{\n+  struct Deleter\n+  {\n+    Deleter& operator=(const Deleter&) = delete;\n+\n+    void operator()(int* p) const noexcept { delete p; }\n+\n+    // found by ADL\n+    friend void swap(Deleter& lhs, Deleter& rhs) noexcept\n+    { std::swap(lhs.id, rhs.id); }\n+\n+    int id;\n+  };\n+\n+  static_assert(!std::is_move_assignable<Deleter>::value, \"not assignable\");\n+#if __cplusplus >= 201703L\n+  static_assert(std::is_swappable_v<Deleter>, \"but swappable\");\n+#endif\n+} // namespace A\n+\n+void\n+test03()\n+{\n+  std::unique_ptr<int, A::Deleter> p1(new int(1), { -1 });\n+  std::unique_ptr<int, A::Deleter> p2(new int(2), { -2 });\n+  int* const pi1 = p1.get();\n+  int* const pi2 = p2.get();\n+  // This type must swappable even though the deleter is not move-assignable:\n+  swap(p1, p2);\n+  VERIFY(p1.get() == pi2);\n+  VERIFY(p1.get_deleter().id == -2);\n+  VERIFY(p2.get() == pi1);\n+  VERIFY(p2.get_deleter().id == -1);\n+}\n+\n+void\n+test04()\n+{\n+  std::unique_ptr<int[], A::Deleter> p1(new int[1]{1}, { -1 });\n+  std::unique_ptr<int[], A::Deleter> p2(new int[2]{2, 2}, { -2 });\n+  int* const pi1 = p1.get();\n+  int* const pi2 = p2.get();\n+  // This type must swappable even though the deleter is not move-assignable:\n+  swap(p1, p2);\n+  VERIFY(p1.get() == pi2);\n+  VERIFY(p1.get_deleter().id == -2);\n+  VERIFY(p2.get() == pi1);\n+  VERIFY(p2.get_deleter().id == -1);\n+}\n+\n+int main()\n+{\n+  test03();\n+  test04();\n+}"}]}