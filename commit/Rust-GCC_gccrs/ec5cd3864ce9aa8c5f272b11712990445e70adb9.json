{"sha": "ec5cd3864ce9aa8c5f272b11712990445e70adb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1Y2QzODY0Y2U5YWE4YzVmMjcyYjExNzEyOTkwNDQ1ZTcwYWRiOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-28T20:02:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-28T20:02:59Z"}, "message": "Delete redundant forward decls.\n\n(expand_anon_union_decl): Correctly call expand_decl.\n\nFrom-SVN: r10069", "tree": {"sha": "2e0cc3342121d4c5287c77e436388abd2b90c5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e0cc3342121d4c5287c77e436388abd2b90c5bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec5cd3864ce9aa8c5f272b11712990445e70adb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5cd3864ce9aa8c5f272b11712990445e70adb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5cd3864ce9aa8c5f272b11712990445e70adb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5cd3864ce9aa8c5f272b11712990445e70adb9/comments", "author": null, "committer": null, "parents": [{"sha": "c62bdc79b57139c736f1e854c3a26ba86f1573b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62bdc79b57139c736f1e854c3a26ba86f1573b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62bdc79b57139c736f1e854c3a26ba86f1573b9"}], "stats": {"total": 32, "additions": 4, "deletions": 28}, "files": [{"sha": "bfc10483760de179623d8d5203d6b0a6a470e4b3", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5cd3864ce9aa8c5f272b11712990445e70adb9/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5cd3864ce9aa8c5f272b11712990445e70adb9/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ec5cd3864ce9aa8c5f272b11712990445e70adb9", "patch": "@@ -467,16 +467,6 @@ static int node_is_bounded\t\tPROTO((case_node_ptr, tree));\n static void emit_jump_if_reachable\tPROTO((rtx));\n static void emit_case_nodes\t\tPROTO((rtx, case_node_ptr, rtx, tree));\n \n-int bc_expand_exit_loop_if_false ();\n-void bc_expand_start_cond ();\n-void bc_expand_end_cond ();\n-void bc_expand_start_else ();\n-void bc_expand_end_bindings ();\n-void bc_expand_start_case ();\n-void bc_check_for_full_enumeration_handling ();\n-void bc_expand_end_case ();\n-void bc_expand_decl ();\n-\n extern rtx bc_allocate_local ();\n extern rtx bc_allocate_variable_array ();\n \f\n@@ -3318,22 +3308,7 @@ bc_expand_end_bindings (vars, mark_ends, dont_jump_in)\n }\n \f\n /* Generate RTL for the automatic variable declaration DECL.\n-   (Other kinds of declarations are simply ignored if seen here.)\n-   CLEANUP is an expression to be executed at exit from this binding contour;\n-   for example, in C++, it might call the destructor for this variable.\n-\n-   If CLEANUP contains any SAVE_EXPRs, then you must preevaluate them\n-   either before or after calling `expand_decl' but before compiling\n-   any subsequent expressions.  This is because CLEANUP may be expanded\n-   more than once, on different branches of execution.\n-   For the same reason, CLEANUP may not contain a CALL_EXPR\n-   except as its topmost node--else `preexpand_calls' would get confused.\n-\n-   If CLEANUP is nonzero and DECL is zero, we record a cleanup\n-   that is not associated with any particular variable.\n-\n-   There is no special support here for C++ constructors.\n-   They should be handled by the proper code in DECL_INITIAL.  */\n+   (Other kinds of declarations are simply ignored if seen here.)  */\n \n void\n expand_decl (decl)\n@@ -3706,7 +3681,7 @@ bc_expand_decl_init (decl)\n    for example, in C++, it might call the destructor for this variable.\n \n    If CLEANUP contains any SAVE_EXPRs, then you must preevaluate them\n-   either before or after calling `expand_decl' but before compiling\n+   either before or after calling `expand_decl_cleanup' but before compiling\n    any subsequent expressions.  This is because CLEANUP may be expanded\n    more than once, on different branches of execution.\n    For the same reason, CLEANUP may not contain a CALL_EXPR\n@@ -3749,7 +3724,8 @@ expand_anon_union_decl (decl, cleanup, decl_elts)\n   struct nesting *thisblock = block_stack;\n   rtx x;\n \n-  expand_decl (decl, cleanup);\n+  expand_decl (decl);\n+  expand_decl_cleanup (decl, cleanup);\n   x = DECL_RTL (decl);\n \n   while (decl_elts)"}]}