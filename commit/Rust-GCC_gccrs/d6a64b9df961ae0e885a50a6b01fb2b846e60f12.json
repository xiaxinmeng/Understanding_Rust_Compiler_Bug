{"sha": "d6a64b9df961ae0e885a50a6b01fb2b846e60f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZhNjRiOWRmOTYxYWUwZTg4NWE1MGE2YjAxZmIyYjg0NmU2MGYxMg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-11-01T16:34:48Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-11-01T16:34:48Z"}, "message": "invoke.texi (Optimize Options): Under -fcse-follow-jumps, show that CSE means common subexpression elimination.\n\n\t* doc/invoke.texi (Optimize Options): Under -fcse-follow-jumps,\n\tshow that CSE means common subexpression elimination.  Change wording\n\tfor -fsee and define LCM.  Remove capitalization of optimizations\n\tfor -ftree-reassoc, -ftree-pre, and -ftree-fre.\n\nFrom-SVN: r129824", "tree": {"sha": "d605b3933ec62f86f88dfcf370532453edb2d759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d605b3933ec62f86f88dfcf370532453edb2d759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6a64b9df961ae0e885a50a6b01fb2b846e60f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a64b9df961ae0e885a50a6b01fb2b846e60f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a64b9df961ae0e885a50a6b01fb2b846e60f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a64b9df961ae0e885a50a6b01fb2b846e60f12/comments", "author": null, "committer": null, "parents": [{"sha": "fdaea7e2865fc020c80fcd8093175b5a20ed0507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdaea7e2865fc020c80fcd8093175b5a20ed0507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdaea7e2865fc020c80fcd8093175b5a20ed0507"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "829201beb218d417d53a0ed2cdb6eac05e66863c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a64b9df961ae0e885a50a6b01fb2b846e60f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a64b9df961ae0e885a50a6b01fb2b846e60f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6a64b9df961ae0e885a50a6b01fb2b846e60f12", "patch": "@@ -1,3 +1,10 @@\n+2007-11-01  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/invoke.texi (Optimize Options): Under -fcse-follow-jumps,\n+\tshow that CSE means common subexpression elimination.  Change wording\n+\tfor -fsee and define LCM.  Remove capitalization of optimizations\n+\tfor -ftree-reassoc, -ftree-pre, and -ftree-fre.\n+\n 2007-11-01  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/25352"}, {"sha": "4de20b668724fe4ebf3876622bc11c82a3bb3a3d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a64b9df961ae0e885a50a6b01fb2b846e60f12/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a64b9df961ae0e885a50a6b01fb2b846e60f12/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d6a64b9df961ae0e885a50a6b01fb2b846e60f12", "patch": "@@ -5399,7 +5399,7 @@ Enabled at levels @option{-O}, @option{-O2}, @option{-O3},\n \n @item -fcse-follow-jumps\n @opindex fcse-follow-jumps\n-In common subexpression elimination, scan through jump instructions\n+In common subexpression elimination (CSE), scan through jump instructions\n when the target of the jump is not reached by any other path.  For\n example, when CSE encounters an @code{if} statement with an\n @code{else} clause, CSE will follow the jump when the condition\n@@ -5644,8 +5644,8 @@ sense when scheduling after register allocation, i.e.@: with\n \n @item -fsee\n @opindex fsee\n-Eliminates redundant extension instructions and move the non redundant\n-ones to optimal placement using LCM.\n+Eliminate redundant sign extension instructions and move the non-redundant\n+ones to optimal placement using lazy code motion (LCM).\n \n @item -freschedule-modulo-scheduled-loops\n @opindex freschedule-modulo-scheduled-loops\n@@ -5667,17 +5667,17 @@ Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -ftree-reassoc\n @opindex ftree-reassoc\n-Perform Reassociation on trees  This flag is enabled by default\n+Perform reassociation on trees.  This flag is enabled by default\n at @option{-O} and higher.\n \n @item -ftree-pre\n @opindex ftree-pre\n-Perform Partial Redundancy Elimination (PRE) on trees.  This flag is\n+Perform partial redundancy elimination (PRE) on trees.  This flag is\n enabled by default at @option{-O2} and @option{-O3}.\n \n @item -ftree-fre\n @opindex ftree-fre\n-Perform Full Redundancy Elimination (FRE) on trees.  The difference\n+Perform full redundancy elimination (FRE) on trees.  The difference\n between FRE and PRE is that FRE only considers expressions\n that are computed on all paths leading to the redundant computation.\n This analysis is faster than PRE, though it exposes fewer redundancies."}]}