{"sha": "eb5da24bed4710f5c1fa9be221d22ddbeb44f583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1ZGEyNGJlZDQ3MTBmNWMxZmE5YmUyMjFkMjJkZGJlYjQ0ZjU4Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-07-24T22:20:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-24T22:20:34Z"}, "message": "* gcc.c-torture/execute/loop-2e.c: Rewrite for 64 bit and no mmap.\n\nFrom-SVN: r55724", "tree": {"sha": "eeb8468322e3c5daca7dd94e7ca8d8081c4f03f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeb8468322e3c5daca7dd94e7ca8d8081c4f03f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb5da24bed4710f5c1fa9be221d22ddbeb44f583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5da24bed4710f5c1fa9be221d22ddbeb44f583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb5da24bed4710f5c1fa9be221d22ddbeb44f583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5da24bed4710f5c1fa9be221d22ddbeb44f583/comments", "author": null, "committer": null, "parents": [{"sha": "8ad8135aa470596753f2c8ea82468418dc349cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad8135aa470596753f2c8ea82468418dc349cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad8135aa470596753f2c8ea82468418dc349cad"}], "stats": {"total": 77, "additions": 30, "deletions": 47}, "files": [{"sha": "2ee83e8006acb4a161ddeaead139789b8ac26fed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5da24bed4710f5c1fa9be221d22ddbeb44f583/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5da24bed4710f5c1fa9be221d22ddbeb44f583/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb5da24bed4710f5c1fa9be221d22ddbeb44f583", "patch": "@@ -1,3 +1,7 @@\n+2002-07-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/loop-2e.c: Rewrite for 64 bit and no mmap.\n+\t\n 2002-07-24  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* g++.dg/ext/alignof1.C (main): Return 0 for success."}, {"sha": "71c7a4d1d87b57e78c2651b9c224e4bbe0729e7d", "filename": "gcc/testsuite/gcc.c-torture/execute/loop-2e.c", "status": "modified", "additions": 26, "deletions": 47, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5da24bed4710f5c1fa9be221d22ddbeb44f583/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5da24bed4710f5c1fa9be221d22ddbeb44f583/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-2e.c?ref=eb5da24bed4710f5c1fa9be221d22ddbeb44f583", "patch": "@@ -1,31 +1,4 @@\n-#include <limits.h>\n-\n-#ifdef __unix__ /* ??? Is that good enough? */\n-#include <sys/types.h>\n-#include <sys/mman.h>\n-#include <sys/stat.h>\n-#include <fcntl.h>\n-#ifndef MAP_ANON\n-#ifdef MAP_ANONYMOUS\n-#define MAP_ANON MAP_ANONYMOUS\n-#else\n-#define MAP_ANON MAP_FILE\n-#endif\n-#endif\n-#ifndef MAP_FILE\n-#define MAP_FILE 0\n-#endif\n-#ifndef MAP_FIXED\n-#define MAP_FIXED 0\n-#endif\n-#endif\n-\n-#define MAP_START (void *)0x7fff8000\n-#define MAP_LEN 0x10000\n-\n-#define OFFSET (MAP_LEN/2 - 2 * sizeof (int));\n-\n-f (int *p, int **q)\n+void f (int *p, int **q)\n {\n   int i;\n   for (i = 0; i < 40; i++)\n@@ -34,27 +7,33 @@ f (int *p, int **q)\n     }\n }\n \n-main ()\n+int main ()\n {\n-#ifdef MAP_ANON\n   void *p;\n   int *q[40];\n-  int dev_zero;\n+  __SIZE_TYPE__ start;\n \n-  dev_zero = open (\"/dev/zero\", O_RDONLY);\n-  /* -1 is OK when we have MAP_ANON; else mmap will flag an error.  */\n-  if (INT_MAX != 0x7fffffffL || sizeof (char *) != sizeof (int))\n-    exit (0);\n-  p = mmap (MAP_START, MAP_LEN, PROT_READ|PROT_WRITE,\n-\t    MAP_ANON|MAP_FIXED|MAP_PRIVATE, dev_zero, 0);\n-  if (p != (void *)-1)\n-    {\n-      p = (char *)p + OFFSET;\n-      q[39] = 0;\n-      f (p, q);\n-      if (q[39] != (int *)p + 39)\n-\tabort ();\n-    }\n-#endif\n-  exit (0);\n+  /* Find the signed middle of the address space.  */\n+  if (sizeof(start) == sizeof(int))\n+    start = (__SIZE_TYPE__) __INT_MAX__;\n+  else if (sizeof(start) == sizeof(long))\n+    start = (__SIZE_TYPE__) __LONG_MAX__;\n+  else if (sizeof(start) == sizeof(long long))\n+    start = (__SIZE_TYPE__) __LONG_LONG_MAX__;\n+  else\n+    return 0;\n+\n+  /* Arbitrarily align the pointer.  */\n+  start &= -32;\n+\n+  /* Pretend that's good enough to start address arithmetic.  */\n+  p = (void *)start;\n+\n+  /* Verify that GIV replacement computes the correct results.  */\n+  q[39] = 0;\n+  f (p, q);\n+  if (q[39] != (int *)p + 39)\n+    abort ();\n+\n+  return 0;\n }"}]}