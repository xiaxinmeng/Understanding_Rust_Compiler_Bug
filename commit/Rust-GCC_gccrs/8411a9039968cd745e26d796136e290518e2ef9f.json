{"sha": "8411a9039968cd745e26d796136e290518e2ef9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxMWE5MDM5OTY4Y2Q3NDVlMjZkNzk2MTM2ZTI5MDUxOGUyZWY5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-14T23:30:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-14T23:30:44Z"}, "message": "stdarg.h, varargs.h: Implement in terms of builtin functions and types.\n\n        * ginclude/stdarg.h, ginclude/varargs.h: Implement in\n        terms of builtin functions and types.\n\nFrom-SVN: r29416", "tree": {"sha": "095dcd39546d8ddf937eca575a6997e497aa0209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095dcd39546d8ddf937eca575a6997e497aa0209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8411a9039968cd745e26d796136e290518e2ef9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8411a9039968cd745e26d796136e290518e2ef9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8411a9039968cd745e26d796136e290518e2ef9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8411a9039968cd745e26d796136e290518e2ef9f/comments", "author": null, "committer": null, "parents": [{"sha": "514066a13349f79b36d4e46eb634d13307ae2f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514066a13349f79b36d4e46eb634d13307ae2f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/514066a13349f79b36d4e46eb634d13307ae2f81"}], "stats": {"total": 279, "additions": 34, "deletions": 245}, "files": [{"sha": "12ee80a389f839faf0e8b3b8d34f8e226f6de665", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8411a9039968cd745e26d796136e290518e2ef9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8411a9039968cd745e26d796136e290518e2ef9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8411a9039968cd745e26d796136e290518e2ef9f", "patch": "@@ -1,3 +1,18 @@\n+Tue Sep 14 16:30:16 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* ginclude/stdarg.h, ginclude/varargs.h: Implement in\n+\tterms of builtin functions and types.\n+\n+\t* mips.c (mips_build_va_list): New.\n+\t(mips_va_start, mips_va_arg): New.\n+\t* mips.h (BUILD_VA_LIST_TYPE): New.\n+\t(EXPAND_BUILTIN_VA_START, EXPAND_BUILTIN_VA_ARG): New.\n+\n+\t* sh.c (sh_builtin_saveregs): Use get_varargs_alias_set.\n+\t(sh_build_va_list, sh_va_start, sh_va_arg): New.\n+\t* sh.h (BUILD_VA_LIST_TYPE): New.\n+\t(EXPAND_BUILTIN_VA_START, EXPAND_BUILTIN_VA_ARG): New.\n+\n Tue Sep 14 16:20:24 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* recog.h (struct recog_data): Make dup_num, operand_address_p,"}, {"sha": "5e7e757ee88ca1402665d3418ed275554fafd9fd", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 6, "deletions": 117, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8411a9039968cd745e26d796136e290518e2ef9f/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8411a9039968cd745e26d796136e290518e2ef9f/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=8411a9039968cd745e26d796136e290518e2ef9f", "patch": "@@ -1,4 +1,5 @@\n /* stdarg.h for GNU.\n+\n    Note that the type used in va_arg is supposed to match the\n    actual type **after default promotions**.\n    Thus, va_arg (..., short) is not valid.  */\n@@ -11,135 +12,23 @@\n #endif /* not __need___va_list */\n #undef __need___va_list\n \n-#ifdef __clipper__\n-#include \"va-clipper.h\"\n-#else\n-#ifdef __m88k__\n-#include \"va-m88k.h\"\n-#else\n-#ifdef __i860__\n-#include \"va-i860.h\"\n-#else\n-#ifdef __hppa__\n-#include \"va-pa.h\"\n-#else\n-#ifdef __mips__\n-#include \"va-mips.h\"\n-#else\n-#ifdef __sparc__\n-#include \"va-sparc.h\"\n-#else\n-#ifdef __i960__\n-#include \"va-i960.h\"\n-#else\n-#ifdef __alpha__\n-#include \"va-alpha.h\"\n-#else\n-#if defined (__H8300__) || defined (__H8300H__) || defined (__H8300S__)\n-#include \"va-h8300.h\"\n-#else\n-#if defined (__PPC__) && (defined (_CALL_SYSV) || defined (_WIN32))\n-#include \"va-ppc.h\"\n-#else\n-#ifdef __arc__\n-#include \"va-arc.h\"\n-#else\n-#ifdef __M32R__\n-#include \"va-m32r.h\"\n-#else\n-#ifdef __sh__\n-#include \"va-sh.h\"\n-#else\n-#ifdef __mn10300__\n-#include \"va-mn10300.h\"\n-#else\n-#ifdef __mn10200__\n-#include \"va-mn10200.h\"\n-#else\n-#ifdef __v850__\n-#include \"va-v850.h\"\n-#else\n-#if defined (_TMS320C4x) || defined (_TMS320C3x)\n-#include <va-c4x.h>\n-#else\n-\n /* Define __gnuc_va_list.  */\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n-#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__NetBSD__)\n-typedef char *__gnuc_va_list;\n-#else\n-typedef void *__gnuc_va_list;\n-#endif\n+typedef __builtin_va_list __gnuc_va_list;\n #endif\n \n /* Define the standard macros for the user,\n    if this invocation was from the user program.  */\n #ifdef _STDARG_H\n \n-/* Amount of space required in an argument list for an arg of type TYPE.\n-   TYPE may alternatively be an expression whose type is used.  */\n-\n-#if defined(sysV68)\n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (short) - 1) / sizeof (short)) * sizeof (short))\n-#elif defined(_AIX)\n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (long) - 1) / sizeof (long)) * sizeof (long))\n-#else\n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n-#endif\n+#define va_start(v,l)\t__builtin_stdarg_start(&(v),l)\n+#define va_end\t\t__builtin_va_end\n+#define va_arg\t\t__builtin_va_arg\n+#define va_copy(d,s)\t__builtin_va_copy(&(d),(s))\n \n-#define va_start(AP, LASTARG) \t\t\t\t\t\t\\\n- (AP = ((__gnuc_va_list) __builtin_next_arg (LASTARG)))\n-\n-#undef va_end\n-void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n-#define va_end(AP)\t((void)0)\n-\n-/* We cast to void * and then to TYPE * because this avoids\n-   a warning about increasing the alignment requirement.  */\n-\n-#if (defined (__arm__) && ! defined (__ARMEB__)) || defined (__i386__) || defined (__i860__) || defined (__ns32000__) || defined (__vax__)\n-/* This is for little-endian machines; small args are padded upward.  */\n-#define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n- (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),\t\\\n-  *((TYPE *) (void *) ((char *) (AP) - __va_rounded_size (TYPE))))\n-#else /* big-endian */\n-/* This is for big-endian machines; small args are padded downward.  */\n-#define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n- (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),\t\\\n-  *((TYPE *) (void *) ((char *) (AP)\t\t\t\t\t\\\n-\t\t       - ((sizeof (TYPE) < __va_rounded_size (char)\t\\\n-\t\t\t   ? sizeof (TYPE) : __va_rounded_size (TYPE))))))\n-#endif /* big-endian */\n-\n-/* Copy __gnuc_va_list into another variable of this type.  */\n-#define __va_copy(dest, src) (dest) = (src)\n \n-#endif /* _STDARG_H */\n-\n-#endif /* not TMS320C3x or TMS320C4x */\n-#endif /* not v850 */\n-#endif /* not mn10200 */\n-#endif /* not mn10300 */\n-#endif /* not sh */\n-#endif /* not m32r */\n-#endif /* not arc */\n-#endif /* not powerpc with V.4 calling sequence */\n-#endif /* not h8300 */\n-#endif /* not alpha */\n-#endif /* not i960 */\n-#endif /* not sparc */\n-#endif /* not mips */\n-#endif /* not hppa */\n-#endif /* not i860 */\n-#endif /* not m88k */\n-#endif /* not clipper */\n-\n-#ifdef _STDARG_H\n /* Define va_list, if desired, from __gnuc_va_list. */\n /* We deliberately do not define va_list when called from\n    stdio.h, because ANSI C says that stdio.h is not supposed to define"}, {"sha": "151139b486f6b36fc9b22d542c5e753fbe4cfe29", "filename": "gcc/ginclude/varargs.h", "status": "modified", "additions": 13, "deletions": 128, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8411a9039968cd745e26d796136e290518e2ef9f/gcc%2Fginclude%2Fvarargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8411a9039968cd745e26d796136e290518e2ef9f/gcc%2Fginclude%2Fvarargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fvarargs.h?ref=8411a9039968cd745e26d796136e290518e2ef9f", "patch": "@@ -3,64 +3,6 @@\n #ifndef _VARARGS_H\n #define _VARARGS_H\n \n-#ifdef __sparc__\n-#include \"va-sparc.h\"\n-#else\n-#ifdef __spur__\n-#include \"va-spur.h\"\n-#else\n-#ifdef __mips__\n-#include \"va-mips.h\"\n-#else\n-#ifdef __i860__\n-#include \"va-i860.h\"\n-#else\n-#ifdef __pyr__\n-#include \"va-pyr.h\"\n-#else\n-#ifdef __clipper__\n-#include \"va-clipper.h\"\n-#else\n-#ifdef __m88k__\n-#include \"va-m88k.h\"\n-#else\n-#if defined(__hppa__) || defined(hp800)\n-#include \"va-pa.h\"\n-#else\n-#ifdef __i960__\n-#include \"va-i960.h\"\n-#else\n-#ifdef __alpha__\n-#include \"va-alpha.h\"\n-#else\n-#if defined (__H8300__) || defined (__H8300H__) || defined (__H8300S__)\n-#include \"va-h8300.h\"\n-#else\n-#if defined (__PPC__) && (defined (_CALL_SYSV) || defined (_WIN32))\n-#include \"va-ppc.h\"\n-#else\n-#ifdef __arc__\n-#include \"va-arc.h\"\n-#else\n-#ifdef __M32R__\n-#include \"va-m32r.h\"\n-#else\n-#ifdef __sh__\n-#include \"va-sh.h\"\n-#else\n-#ifdef __mn10300__\n-#include \"va-mn10300.h\"\n-#else\n-#ifdef __mn10200__\n-#include \"va-mn10200.h\"\n-#else\n-#ifdef __v850__\n-#include \"va-v850.h\"\n-#else\n-#if defined (_TMS320C4x) || defined (_TMS320C3x)\n-#include <va-c4x.h>\n-#else\n-\n #ifdef __NeXT__\n \n /* On Next, erase any vestiges of stdarg.h.  */\n@@ -75,91 +17,32 @@\n #undef va_list\n #undef va_start\n #undef va_end\n-#undef __va_rounded_size\n #undef va_arg\n #endif  /* __NeXT__ */\n \n-/* In GCC version 2, we want an ellipsis at the end of the declaration\n-   of the argument list.  GCC version 1 can't parse it.  */\n-\n-#if __GNUC__ > 1\n-#define __va_ellipsis ...\n-#else\n-#define __va_ellipsis\n-#endif\n-\n /* These macros implement traditional (non-ANSI) varargs\n    for GNU C.  */\n \n #define va_alist  __builtin_va_alist\n-/* The ... causes current_function_varargs to be set in cc1.  */\n+\n /* ??? We don't process attributes correctly in K&R argument context.  */\n typedef int __builtin_va_alist_t __attribute__((__mode__(__word__)));\n-#define va_dcl\t__builtin_va_alist_t __builtin_va_alist; __va_ellipsis\n \n-/* Define __gnuc_va_list, just as in gstdarg.h.  */\n+/* ??? It would be nice to get rid of the ellipsis here.  It causes\n+   current_function_varargs to be set in cc1.  */\n+#define va_dcl\t\t__builtin_va_alist_t __builtin_va_alist; ...\n+\n+/* Define __gnuc_va_list, just as in stdarg.h.  */\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n-#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX)\n-typedef char *__gnuc_va_list;\n-#else\n-typedef void *__gnuc_va_list;\n+typedef __builtin_va_list __gnuc_va_list;\n #endif\n-#endif\n-\n-#define va_start(AP)  AP=(char *) &__builtin_va_alist\n-\n-#define va_end(AP)\t((void)0)\n \n-#if defined(sysV68)\n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (short) - 1) / sizeof (short)) * sizeof (short))\n-#elif defined(_AIX)\n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (long) - 1) / sizeof (long)) * sizeof (long))\n-#else\n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n-#endif\n-\n-#if (defined (__arm__) && ! defined (__ARMEB__)) || defined (__i386__) || defined (__i860__) || defined (__ns32000__) || defined (__vax__)\n-/* This is for little-endian machines; small args are padded upward.  */\n-#define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n- (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),\t\\\n-  *((TYPE *) (void *) ((char *) (AP) - __va_rounded_size (TYPE))))\n-#else /* big-endian */\n-/* This is for big-endian machines; small args are padded downward.  */\n-#define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n- (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),\t\\\n-  *((TYPE *) (void *) ((char *) (AP)\t\t\t\t\t\\\n-\t\t       - ((sizeof (TYPE) < __va_rounded_size (char)\t\\\n-\t\t\t   ? sizeof (TYPE) : __va_rounded_size (TYPE))))))\n-#endif /* big-endian */\n-\n-/* Copy __gnuc_va_list into another variable of this type.  */\n-#define __va_copy(dest, src) (dest) = (src)\n-\n-#endif /* not TMS320C3x or TMS320C4x */\n-#endif /* not v850 */\n-#endif /* not mn10200 */\n-#endif /* not mn10300 */\n-#endif /* not sh */\n-#endif /* not m32r */\n-#endif /* not arc */\n-#endif /* not powerpc with V.4 calling sequence */\n-#endif /* not h8300 */\n-#endif /* not alpha */\n-#endif /* not i960 */\n-#endif /* not hppa */\n-#endif /* not m88k */\n-#endif /* not clipper */\n-#endif /* not pyr */\n-#endif /* not i860 */\n-#endif /* not mips */\n-#endif /* not spur */\n-#endif /* not sparc */\n-#endif /* not _VARARGS_H */\n+#define va_start(v)\t__builtin_varargs_start(&(v))\n+#define va_end\t\t__builtin_va_end\n+#define va_arg\t\t__builtin_va_arg\n+#define __va_copy(d,s)\t__builtin_va_copy(&(d),(s))\n \n /* Define va_list from __gnuc_va_list.  */\n \n@@ -227,3 +110,5 @@ typedef __gnuc_va_list va_list;\n #ifdef _BSD_VA_LIST\n #undef _BSD_VA_LIST\n #endif\n+\n+#endif /* _VARARGS_H */"}]}