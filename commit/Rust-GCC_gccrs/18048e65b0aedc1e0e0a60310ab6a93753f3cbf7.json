{"sha": "18048e65b0aedc1e0e0a60310ab6a93753f3cbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwNDhlNjViMGFlZGMxZTBlMGE2MDMxMGFiNmE5Mzc1M2YzY2JmNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-09-30T16:54:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-09-30T16:54:54Z"}, "message": "re PR libstdc++/24064 (tr1::unordered_map seems to seg-fault when caching hash values)\n\n2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/24064\n\t* include/tr1/hashtable (hash_code_base<>::store_code): Add.\n\t(hashtable<>::insert(const value_type&)): Use it.\n\t* testsuite/tr1/6_containers/unordered/hashtable/24064.cc: New.\n\nFrom-SVN: r104823", "tree": {"sha": "2afd02faea4c25b8ce5c56a9f37319cfdc94457f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2afd02faea4c25b8ce5c56a9f37319cfdc94457f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7/comments", "author": null, "committer": null, "parents": [{"sha": "72a7ab824e757618b7720c617a47710d9905d082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a7ab824e757618b7720c617a47710d9905d082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a7ab824e757618b7720c617a47710d9905d082"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "b9db59ea5881aaf6e4a2abe0129bac7cfe11f36b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=18048e65b0aedc1e0e0a60310ab6a93753f3cbf7", "patch": "@@ -1,3 +1,10 @@\n+2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/24064\n+\t* include/tr1/hashtable (hash_code_base<>::store_code): Add.\n+\t(hashtable<>::insert(const value_type&)): Use it.\n+\t* testsuite/tr1/6_containers/unordered/hashtable/24064.cc: New.\n+\n 2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/23953"}, {"sha": "619709433d0548c7d1b5a3f30cb309a9e04e591c", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=18048e65b0aedc1e0e0a60310ab6a93753f3cbf7", "patch": "@@ -626,6 +626,10 @@ namespace Internal\n       compare(const Key& k, hash_code_t, hash_node<Value, false>* n) const\n       { return m_eq (k, m_extract(n->m_v)); }\n \n+      void\n+      store_code(hash_node<Value, false>*, hash_code_t) const\n+      { }\n+\n       void\n       copy_code(hash_node<Value, false>*, const hash_node<Value, false>*) const\n       { }\n@@ -698,6 +702,10 @@ namespace Internal\n       compare(const Key& k, hash_code_t, hash_node<Value, false>* n) const\n       { return m_eq (k, m_extract(n->m_v)); }\n \n+      void\n+      store_code(hash_node<Value, false>*, hash_code_t) const\n+      { }\n+\n       void\n       copy_code(hash_node<Value, false>*, const hash_node<Value, false>*) const\n       { }\n@@ -756,6 +764,10 @@ namespace Internal\n       compare(const Key& k, hash_code_t c, hash_node<Value, true>* n) const\n       { return c == n->hash_code && m_eq(k, m_extract(n->m_v)); }\n \n+      void\n+      store_code(hash_node<Value, true>* n, hash_code_t c) const\n+      { n->hash_code = c; }\n+\n       void\n       copy_code(hash_node<Value, true>* to,\n \t\tconst hash_node<Value, true>* from) const\n@@ -1508,6 +1520,7 @@ namespace tr1\n \t    }\n \n \t  new_node->m_next = m_buckets[n];\n+\t  this->store_code(new_node, code);\n \t  m_buckets[n] = new_node;\n \t  ++m_element_count;\n \t  return std::make_pair(iterator(new_node, m_buckets + n), true);\n@@ -1549,6 +1562,7 @@ namespace tr1\n \t  new_node->m_next = m_buckets[n];\n \t  m_buckets[n] = new_node;\n \t}\n+      this->store_code(new_node, code);\n \n       ++m_element_count;\n       return iterator(new_node, m_buckets + n);"}, {"sha": "74eabbf53f9b6b7d981d02c667f3ca6d170da996", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/hashtable/24064.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F24064.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18048e65b0aedc1e0e0a60310ab6a93753f3cbf7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F24064.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F24064.cc?ref=18048e65b0aedc1e0e0a60310ab6a93753f3cbf7", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3 Unordered associative containers\n+\n+#include <tr1/unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/24064\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+  using namespace tr1;\n+\n+  unordered_map<int, char, hash<int>, equal_to<int>,\n+    allocator<pair<const int, char> >, true> m;\n+ \n+  for (int i = 0; i < 1000; ++i)\n+    m[i] = '0' + i % 9;\n+\t\t\n+  for (int i = 0; i < 1000; ++i)\n+    VERIFY( ++m.find(i)->second == '1' + i % 9 );\n+}\n+  \n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}