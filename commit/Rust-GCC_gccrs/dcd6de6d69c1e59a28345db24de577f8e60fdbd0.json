{"sha": "dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkNmRlNmQ2OWMxZTU5YTI4MzQ1ZGIyNGRlNTc3ZjhlNjBmZGJkMA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-03-14T16:21:16Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-03-14T16:21:16Z"}, "message": "builtin-attrs.def (ATTR_NOVOPS, [...]): New.\n\n\t* builtin-attrs.def (ATTR_NOVOPS, ATTR_NOVOPS_LIST,\n\tATTR_PURE_NOTHROW_NOVOPS_LIST): New.\n\t* builtins.def (ATTR_MATHFN_FPROUNDING): Use NOVOPS.\n\t(BUILT_IN_PREFETCH): Set the NOVOPS attribute.\n\t* c-common.c (handle_novops_attribute): New function.\n\t(c_common_attribute_table): Add \"no vops\" entry.\n\t* c-decl.c (merge_decls): Copy DECL_IS_NOVOPS.\n\t* calls.c (flags_from_decl_or_type): Set ECF_NOVOPS.\n\t* tree-ssa-operands.c (get_call_expr_operands): Do not\n\tcreate virtual operands for calls with ECF_NOVOPS flag.\n\t* tree.h (DECL_IS_NOVOPS): New macro.\n\t(struct tree_decl): Add novops_flag.\n\t(ECF_NOVOPS): New constant.\n\nFrom-SVN: r96438", "tree": {"sha": "5260f74234c5264de982dff0fa79d5c8f864f9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5260f74234c5264de982dff0fa79d5c8f864f9e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/comments", "author": null, "committer": null, "parents": [{"sha": "0e8c2b0d432304242caaf3d6415bdb887431cee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c2b0d432304242caaf3d6415bdb887431cee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8c2b0d432304242caaf3d6415bdb887431cee5"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "0d01767f7dd265a473da18ed7d3d73ed61cfdf37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -1,3 +1,19 @@\n+2005-03-14  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* builtin-attrs.def (ATTR_NOVOPS, ATTR_NOVOPS_LIST,\n+\tATTR_PURE_NOTHROW_NOVOPS_LIST): New.\n+\t* builtins.def (ATTR_MATHFN_FPROUNDING): Use NOVOPS.\n+\t(BUILT_IN_PREFETCH): Set the NOVOPS attribute.\n+\t* c-common.c (handle_novops_attribute): New function.\n+\t(c_common_attribute_table): Add \"no vops\" entry.\n+\t* c-decl.c (merge_decls): Copy DECL_IS_NOVOPS.\n+\t* calls.c (flags_from_decl_or_type): Set ECF_NOVOPS.\n+\t* tree-ssa-operands.c (get_call_expr_operands): Do not\n+\tcreate virtual operands for calls with ECF_NOVOPS flag.\n+\t* tree.h (DECL_IS_NOVOPS): New macro.\n+\t(struct tree_decl): Add novops_flag.\n+\t(ECF_NOVOPS): New constant.\n+\n 2005-03-14  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR target/17688"}, {"sha": "971723de695f56ec58d8cfd7e52604010aa6ac3f", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -83,17 +83,22 @@ DEF_ATTR_IDENT (ATTR_GCC_DIAG, \"gcc_diag\")\n DEF_ATTR_IDENT (ATTR_GCC_CDIAG, \"gcc_cdiag\")\n DEF_ATTR_IDENT (ATTR_GCC_CXXDIAG, \"gcc_cxxdiag\")\n DEF_ATTR_IDENT (ATTR_PURE, \"pure\")\n+DEF_ATTR_IDENT (ATTR_NOVOPS, \"no vops\")\n DEF_ATTR_IDENT (ATTR_SCANF, \"scanf\")\n DEF_ATTR_IDENT (ATTR_SENTINEL, \"sentinel\")\n DEF_ATTR_IDENT (ATTR_STRFMON, \"strfmon\")\n DEF_ATTR_IDENT (ATTR_STRFTIME, \"strftime\")\n \n+DEF_ATTR_TREE_LIST (ATTR_NOVOPS_LIST, ATTR_NOVOPS, ATTR_NULL, ATTR_NULL)\n+\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_LIST, ATTR_NOTHROW, ATTR_NULL, ATTR_NULL)\n \n DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_LIST, ATTR_CONST,\t\\\n \t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_PURE_NOTHROW_LIST, ATTR_PURE,\t\t\\\n \t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_PURE_NOTHROW_NOVOPS_LIST, ATTR_NOVOPS,\t\\\n+\t\t\tATTR_NULL, ATTR_PURE_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_NORETURN_NOTHROW_LIST, ATTR_NORETURN,\t\\\n \t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_LIST, ATTR_MALLOC,\t\\"}, {"sha": "d324e01a584a02c13a8e47461fe4240e75f8d69c", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -134,7 +134,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    global memory.  In \"unsafe\" mode we can be less careful.  */\n #undef ATTR_MATHFN_FPROUNDING\n #define ATTR_MATHFN_FPROUNDING (flag_unsafe_math_optimizations ? \\\n-\tATTR_CONST_NOTHROW_LIST : ATTR_PURE_NOTHROW_LIST)\n+\tATTR_CONST_NOTHROW_LIST : ATTR_PURE_NOTHROW_NOVOPS_LIST)\n \n /* Define an attribute list for math functions that are normally\n    \"impure\" because some of them may write into global memory for\n@@ -612,7 +612,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNT, \"popcount\", BT_FN_INT_UINT, ATTR_CONS\n DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTIMAX, \"popcountimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTL, \"popcountl\", BT_FN_INT_ULONG, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTLL, \"popcountll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_PREFETCH, \"prefetch\", BT_FN_VOID_CONST_PTR_VAR, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_PREFETCH, \"prefetch\", BT_FN_VOID_CONST_PTR_VAR, ATTR_NOVOPS_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN, \"return\", BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN_ADDRESS, \"return_address\", BT_FN_PTR_UINT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_SAVEREGS, \"saveregs\", BT_FN_PTR_VAR, ATTR_NULL)"}, {"sha": "313b554249de2d2bac83a1250a32ebf28f51d821", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -541,6 +541,7 @@ static tree handle_returns_twice_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_limit_stack_attribute (tree *, tree, tree, int,\n \t\t\t\t\t     bool *);\n static tree handle_pure_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_novops_attribute (tree *, tree, tree, int, bool *);\n static tree handle_deprecated_attribute (tree *, tree, tree, int,\n \t\t\t\t\t bool *);\n static tree handle_vector_size_attribute (tree *, tree, tree, int,\n@@ -614,6 +615,10 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_no_limit_stack_attribute },\n   { \"pure\",                   0, 0, true,  false, false,\n \t\t\t      handle_pure_attribute },\n+  /* For internal use (marking of builtins) only.  The name contains space\n+     to prevent its usage in source code.  */\n+  { \"no vops\",                0, 0, true,  false, false,\n+\t\t\t      handle_novops_attribute },\n   { \"deprecated\",             0, 0, false, false, false,\n \t\t\t      handle_deprecated_attribute },\n   { \"vector_size\",\t      1, 1, false, true, false,\n@@ -4854,6 +4859,19 @@ handle_pure_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"no vops\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_novops_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\t tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n+\t\t\t bool *ARG_UNUSED (no_add_attrs))\n+{\n+  gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n+  DECL_IS_NOVOPS (*node) = 1;\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"deprecated\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "eee7b66a7b5a29b3eb51684fa7f61a1c95cc6122", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -1689,6 +1689,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n       TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n       DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n       DECL_IS_PURE (newdecl) |= DECL_IS_PURE (olddecl);\n+      DECL_IS_NOVOPS (newdecl) |= DECL_IS_NOVOPS (olddecl);\n     }\n \n   /* Merge the storage class information.  */"}, {"sha": "4b9e051298dc8716adbdb1f9598639dcfe13a642", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -593,6 +593,9 @@ flags_from_decl_or_type (tree exp)\n       if (DECL_IS_PURE (exp))\n \tflags |= ECF_PURE | ECF_LIBCALL_BLOCK;\n \n+      if (DECL_IS_NOVOPS (exp))\n+\tflags |= ECF_NOVOPS;\n+\n       if (TREE_NOTHROW (exp))\n \tflags |= ECF_NOTHROW;\n "}, {"sha": "24dc38a4accf83ac80a4a7c2d8dfcec49e863247", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -1,3 +1,7 @@\n+2005-03-14  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/20050314-1.c: New test.\n+\n 2005-03-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/4403"}, {"sha": "3f8cfb3f662eb4fdb025bc0485429aeedbbf8fd9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20050314-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-lim-details\" } */\n+\n+float a[100];\n+\n+int foo(void);\n+float sinf (float);\n+\n+void xxx (void)\n+{\n+  int i, k = foo ();\n+\n+  for (i = 0; i < 100; i++)\n+    a[k] += sinf (i);\n+}\n+\n+/* Store motion may be applied to the assignment to a[k], since sinf\n+   cannot read nor write the memory.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Moving statement\" 1 \"lim\" } } */\n+"}, {"sha": "2a63d0874a67322c81382070a8376c5386c980b5", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -1529,7 +1529,9 @@ get_call_expr_operands (tree stmt, tree expr)\n      computed.  By not bothering with virtual operands for CALL_EXPRs\n      we avoid adding superfluous virtual operands, which can be a\n      significant compile time sink (See PR 15855).  */\n-  if (aliases_computed_p && !bitmap_empty_p (call_clobbered_vars))\n+  if (aliases_computed_p\n+      && !bitmap_empty_p (call_clobbered_vars)\n+      && !(call_flags & ECF_NOVOPS))\n     {\n       /* A 'pure' or a 'const' functions never call clobber anything. \n \t A 'noreturn' function might, but since we don't return anyway "}, {"sha": "8854b7df8fdff3b38bb92dfc03a80ae921c2bbd5", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd6de6d69c1e59a28345db24de577f8e60fdbd0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dcd6de6d69c1e59a28345db24de577f8e60fdbd0", "patch": "@@ -2185,6 +2185,11 @@ struct tree_binfo GTY (())\n    as \"pure\" function (like const function, but may read global memory).  */\n #define DECL_IS_PURE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.pure_flag)\n \n+/* Nonzero in a FUNCTION_DECL means this function should be treated\n+   as \"novops\" function (function that does not read global memory,\n+   but may have arbitrary side effects).  */\n+#define DECL_IS_NOVOPS(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.novops_flag)\n+     \n /* Nonzero in a FIELD_DECL means it is a bit field, and must be accessed\n    specially.  */\n #define DECL_BIT_FIELD(NODE) (FIELD_DECL_CHECK (NODE)->decl.bit_field_flag)\n@@ -2365,7 +2370,6 @@ struct tree_decl GTY(())\n   unsigned uninlinable : 1;\n   unsigned thread_local_flag : 1;\n   unsigned declared_inline_flag : 1;\n-  unsigned seen_in_bind_expr : 1;\n   ENUM_BITFIELD(symbol_visibility) visibility : 2;\n   unsigned visibility_specified : 1;\n \n@@ -2383,7 +2387,9 @@ struct tree_decl GTY(())\n   unsigned gimple_formal_temp : 1;\n   unsigned debug_expr_is_from : 1;\n   unsigned returns_twice_flag : 1;\n-  /* 11 unused bits.  */\n+  unsigned seen_in_bind_expr : 1;\n+  unsigned novops_flag : 1;\n+  /* 9 unused bits.  */\n \n   union tree_decl_u1 {\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is\n@@ -3688,6 +3694,9 @@ extern rtx emit_line_note (location_t);\n #define ECF_SP_DEPRESSED\t256\n /* Create libcall block around the call.  */\n #define ECF_LIBCALL_BLOCK\t512\n+/* Function does not read or write memory (but may have side effects, so\n+   it does not necessarily fit ECF_CONST).  */\n+#define ECF_NOVOPS\t\t1024\n \n extern int flags_from_decl_or_type (tree);\n extern int call_expr_flags (tree);"}]}