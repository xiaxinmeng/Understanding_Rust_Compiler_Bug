{"sha": "73b2ad9e646a0fd610eaad04faca02f8b34eb143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNiMmFkOWU2NDZhMGZkNjEwZWFhZDA0ZmFjYTAyZjhiMzRlYjE0Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-08T23:36:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-08T23:36:17Z"}, "message": "(emit_reload_insns): Always clear new_spill_reg_store.\n\nFrom-SVN: r7876", "tree": {"sha": "e128c6ff662e5b4872467c29cbd2587ae315cc63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e128c6ff662e5b4872467c29cbd2587ae315cc63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73b2ad9e646a0fd610eaad04faca02f8b34eb143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b2ad9e646a0fd610eaad04faca02f8b34eb143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73b2ad9e646a0fd610eaad04faca02f8b34eb143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b2ad9e646a0fd610eaad04faca02f8b34eb143/comments", "author": null, "committer": null, "parents": [{"sha": "beb5a9b86e2cae18089a05b77b818e6649ccc770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb5a9b86e2cae18089a05b77b818e6649ccc770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb5a9b86e2cae18089a05b77b818e6649ccc770"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "1ae411618e96457fc9822ee206f6888443c8437c", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b2ad9e646a0fd610eaad04faca02f8b34eb143/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b2ad9e646a0fd610eaad04faca02f8b34eb143/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=73b2ad9e646a0fd610eaad04faca02f8b34eb143", "patch": "@@ -5638,7 +5638,9 @@ emit_reload_insns (insn)\n     {\n       register rtx old;\n       rtx oldequiv_reg = 0;\n-      rtx store_insn = 0;\n+\n+      if (reload_spill_index[j] >= 0)\n+\tnew_spill_reg_store[reload_spill_index[j]] = 0;\n \n       old = reload_in[j];\n       if (old != 0 && ! reload_inherited[j]\n@@ -6418,17 +6420,14 @@ emit_reload_insns (insn)\n \t\t   reg_has_output_reload will make this do nothing.  */\n \t\tnote_stores (PATTERN (p), forget_old_reloads_1);\n \n-\t\tif (reg_mentioned_p (reload_reg_rtx[j], PATTERN (p)))\n-\t\t  store_insn = p;\n+\t\tif (reg_mentioned_p (reload_reg_rtx[j], PATTERN (p))\n+\t\t    && reload_spill_index[j] >= 0)\n+\t\t  new_spill_reg_store[reload_spill_index[j]] = p;\n \t      }\n \n \t  output_reload_insns[reload_opnum[j]] = get_insns ();\n \t  end_sequence ();\n-\n \t}\n-\n-      if (reload_spill_index[j] >= 0)\n-\tnew_spill_reg_store[reload_spill_index[j]] = store_insn;\n     }\n \n   /* Now write all the insns we made for reloads in the order expected by"}]}