{"sha": "442aa4ec8411c645aa325f3f369ae626e40b7da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQyYWE0ZWM4NDExYzY0NWFhMzI1ZjNmMzY5YWU2MjZlNDBiN2RhNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-07-31T06:09:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-07-31T06:09:13Z"}, "message": "call.c (build_conditional_expr): Call convert_from_reference to avoid reference/non-reference type confusion.\n\n\t* call.c (build_conditional_expr): Call convert_from_reference to\n\tavoid reference/non-reference type confusion.  Fix typo.\n\nFrom-SVN: r28353", "tree": {"sha": "f5ee02c6a08ae507a7e93e43abe2ea485cd32942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5ee02c6a08ae507a7e93e43abe2ea485cd32942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/442aa4ec8411c645aa325f3f369ae626e40b7da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442aa4ec8411c645aa325f3f369ae626e40b7da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442aa4ec8411c645aa325f3f369ae626e40b7da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442aa4ec8411c645aa325f3f369ae626e40b7da6/comments", "author": null, "committer": null, "parents": [{"sha": "278a994d001ace7a4229c5be0daf75f85c873d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278a994d001ace7a4229c5be0daf75f85c873d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278a994d001ace7a4229c5be0daf75f85c873d45"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "7c7714a50401d56d820833e30d5ec8cd401b3009", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442aa4ec8411c645aa325f3f369ae626e40b7da6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442aa4ec8411c645aa325f3f369ae626e40b7da6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=442aa4ec8411c645aa325f3f369ae626e40b7da6", "patch": "@@ -1,3 +1,8 @@\n+1999-07-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* call.c (build_conditional_expr): Call convert_from_reference to\n+\tavoid reference/non-reference type confusion.  Fix typo.\n+\n 1999-07-30  Richard Henderson  <rth@cygnus.com>\n \n \t* typeck2.c (initializer_constant_valid_p): Moved to c-common.c."}, {"sha": "6f17fba6d41128872b8ec4a2d2427b475cf2055b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442aa4ec8411c645aa325f3f369ae626e40b7da6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442aa4ec8411c645aa325f3f369ae626e40b7da6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=442aa4ec8411c645aa325f3f369ae626e40b7da6", "patch": "@@ -2734,10 +2734,9 @@ conditional_conversion (e1, e2)\n }\n \n /* Implement [expr.cond].  ARG1, ARG2, and ARG3 are the three\n-   arguments to the conditional expression.  As an extension, g++\n-   allows users to overload the ?: operator.  By the time this\n-   function is called, any suitable candidate functions are included\n-   in CANDIDATES.  */\n+   arguments to the conditional expression.  By the time this function\n+   is called, any suitable candidate functions are included in\n+   CANDIDATES.  */\n \n tree\n build_conditional_expr (arg1, arg2, arg3)\n@@ -2780,6 +2779,11 @@ build_conditional_expr (arg1, arg2, arg3)\n      _conv_).  */\n   arg1 = cp_convert (boolean_type_node, arg1);\n \n+  /* Convert from reference types to ordinary types; no expressions\n+     really have reference type in C++.  */\n+  arg2 = convert_from_reference (arg2);\n+  arg3 = convert_from_reference (arg3);\n+     \n   /* [expr.cond]\n \n      If either the second or the third operand has type (possibly\n@@ -2867,6 +2871,7 @@ build_conditional_expr (arg1, arg2, arg3)\n       else if (conv2 && !ICS_BAD_FLAG (conv2))\n \t{\n \t  arg2 = convert_like (conv2, arg2);\n+\t  arg2 = convert_from_reference (arg2);\n \t  /* That may not quite have done the trick.  If the two types\n \t     are cv-qualified variants of one another, we will have\n \t     just used an IDENTITY_CONV.  (There's no conversion from\n@@ -2881,8 +2886,9 @@ build_conditional_expr (arg1, arg2, arg3)\n       else if (conv3 && !ICS_BAD_FLAG (conv3))\n \t{\n \t  arg3 = convert_like (conv3, arg3);\n+\t  arg3 = convert_from_reference (arg3);\n \t  if (!same_type_p (TREE_TYPE (arg3), arg2_type))\n-\t    arg2 = build1 (NOP_EXPR, arg2_type, arg3);\n+\t    arg3 = build1 (NOP_EXPR, arg2_type, arg3);\n \t  arg3_type = TREE_TYPE (arg3);\n \t}\n     }\n@@ -2891,8 +2897,6 @@ build_conditional_expr (arg1, arg2, arg3)\n \n      If the second and third operands are lvalues and have the same\n      type, the result is of that type and is an lvalue.  */\n-  arg2_type = non_reference (arg2_type);\n-  arg3_type = non_reference (arg3_type);\n   if (real_lvalue_p (arg2) && real_lvalue_p (arg3) && \n       same_type_p (arg2_type, arg3_type))\n     {"}, {"sha": "e5563a6a48e666dfed770eaf2bf4a981eb10ea6c", "filename": "gcc/testsuite/g++.old-deja/g++.other/cond3.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442aa4ec8411c645aa325f3f369ae626e40b7da6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442aa4ec8411c645aa325f3f369ae626e40b7da6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond3.C?ref=442aa4ec8411c645aa325f3f369ae626e40b7da6", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link:\n+// Origin: Loring Holden <lsh@cs.brown.edu>\n+\n+class Wtransf {};\n+\n+const Wtransf Identity2k;\n+\n+class HELPER {\n+   public:\n+      int  current() const  { return 0; }\n+};\n+\n+void\n+problem_function()\n+{\n+   HELPER tm;\n+   Wtransf delta  = (tm.current()) ? Identity2 : Wtransf();\n+}"}]}