{"sha": "21a7b5e1dbb59c6ff055aa3240e52916790ec305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhN2I1ZTFkYmI1OWM2ZmYwNTVhYTMyNDBlNTI5MTY3OTBlYzMwNQ==", "commit": {"author": {"name": "Marcus Shawcroft", "email": "marcus.shawcroft@arm.com", "date": "2014-06-30T07:54:59Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-06-30T07:54:59Z"}, "message": "[AArch64] Fix register clobber in, aarch64_ashr_sisd_or_int_<mode>3 split.\n\nPR target/61633\n\nThe two split patterns associated with\naarch64_ashr_sisd_or_int_<mode>3 split the instruction into a NEG\nfollowed by an SHL.  The split uses one of the input operands as a\nscratch register to hold the output of the NEG resulting in register\ncorruption.\n\nThis patch adjusts the splits to use the output operand as the scratch\nregister.\n\n2014-06-30  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n\n       PR target/61633\n       * config/aarch64/aarch64.md (*aarch64_ashr_sisd_or_int_<mode>3):\n       Add alternative; make early clobber.  Adjust both split patterns\n       to use operand 0 as the working register.\n\nFrom-SVN: r212137", "tree": {"sha": "7fa66772c1b413d0a1c56cfa5ab2674e9a947586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fa66772c1b413d0a1c56cfa5ab2674e9a947586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21a7b5e1dbb59c6ff055aa3240e52916790ec305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a7b5e1dbb59c6ff055aa3240e52916790ec305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a7b5e1dbb59c6ff055aa3240e52916790ec305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a7b5e1dbb59c6ff055aa3240e52916790ec305/comments", "author": {"login": "mshawcroft", "id": 6357566, "node_id": "MDQ6VXNlcjYzNTc1NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6357566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mshawcroft", "html_url": "https://github.com/mshawcroft", "followers_url": "https://api.github.com/users/mshawcroft/followers", "following_url": "https://api.github.com/users/mshawcroft/following{/other_user}", "gists_url": "https://api.github.com/users/mshawcroft/gists{/gist_id}", "starred_url": "https://api.github.com/users/mshawcroft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mshawcroft/subscriptions", "organizations_url": "https://api.github.com/users/mshawcroft/orgs", "repos_url": "https://api.github.com/users/mshawcroft/repos", "events_url": "https://api.github.com/users/mshawcroft/events{/privacy}", "received_events_url": "https://api.github.com/users/mshawcroft/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85c00e0b91c40959852cbd7a0cacc85f2663ceee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c00e0b91c40959852cbd7a0cacc85f2663ceee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c00e0b91c40959852cbd7a0cacc85f2663ceee"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "894cae80af177763f46d3d8fbc4e2b580d5fab08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a7b5e1dbb59c6ff055aa3240e52916790ec305/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a7b5e1dbb59c6ff055aa3240e52916790ec305/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21a7b5e1dbb59c6ff055aa3240e52916790ec305", "patch": "@@ -1,3 +1,10 @@\n+2014-06-30  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\n+\tPR target/61633\n+\t* config/aarch64/aarch64.md (*aarch64_ashr_sisd_or_int_<mode>3):\n+\tAdd alternative; make early clobber.  Adjust both split patterns\n+\tto use operand 0 as the working register.\n+\n 2014-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* ira-build.c (sort_conflict_id_map): Don't call"}, {"sha": "3eb783c3681b16e1a5f780ec656bd261b9cb4954", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a7b5e1dbb59c6ff055aa3240e52916790ec305/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a7b5e1dbb59c6ff055aa3240e52916790ec305/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=21a7b5e1dbb59c6ff055aa3240e52916790ec305", "patch": "@@ -3057,17 +3057,18 @@\n \n ;; Arithmetic right shift using SISD or Integer instruction\n (define_insn \"*aarch64_ashr_sisd_or_int_<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=w,w,r\")\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=w,&w,&w,r\")\n         (ashiftrt:GPI\n-          (match_operand:GPI 1 \"register_operand\" \"w,w,r\")\n-          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"Us<cmode>,w,rUs<cmode>\")))]\n+          (match_operand:GPI 1 \"register_operand\" \"w,w,w,r\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"Us<cmode>,w,0,rUs<cmode>\")))]\n   \"\"\n   \"@\n    sshr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    #\n+   #\n    asr\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"simd\" \"yes,yes,no\")\n-   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,shift_reg\")]\n+  [(set_attr \"simd\" \"yes,yes,yes,no\")\n+   (set_attr \"type\" \"neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>,shift_reg\")]\n )\n \n (define_split\n@@ -3076,11 +3077,13 @@\n            (match_operand:DI 1 \"aarch64_simd_register\")\n            (match_operand:QI 2 \"aarch64_simd_register\")))]\n   \"TARGET_SIMD && reload_completed\"\n-  [(set (match_dup 2)\n+  [(set (match_dup 3)\n         (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n    (set (match_dup 0)\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SISD_SSHL))]\n-  \"\"\n+        (unspec:DI [(match_dup 1) (match_dup 3)] UNSPEC_SISD_SSHL))]\n+{\n+  operands[3] = gen_lowpart (QImode, operands[0]);\n+}\n )\n \n (define_split\n@@ -3089,11 +3092,13 @@\n            (match_operand:SI 1 \"aarch64_simd_register\")\n            (match_operand:QI 2 \"aarch64_simd_register\")))]\n   \"TARGET_SIMD && reload_completed\"\n-  [(set (match_dup 2)\n+  [(set (match_dup 3)\n         (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n    (set (match_dup 0)\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_SSHL_2S))]\n-  \"\"\n+        (unspec:SI [(match_dup 1) (match_dup 3)] UNSPEC_SSHL_2S))]\n+{\n+  operands[3] = gen_lowpart (QImode, operands[0]);\n+}\n )\n \n (define_insn \"*aarch64_sisd_ushl\""}]}