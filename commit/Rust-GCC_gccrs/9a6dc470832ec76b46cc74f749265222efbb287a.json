{"sha": "9a6dc470832ec76b46cc74f749265222efbb287a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2ZGM0NzA4MzJlYzc2YjQ2Y2M3NGY3NDkyNjUyMjJlZmJiMjg3YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2012-10-02T08:22:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:22:53Z"}, "message": "exp_ch7.adb, [...]: Minor reformatting.\n\n2012-10-02  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb, sem_dim.adb, sem_dim.ads, prj-part.adb, checks.adb,\n\tfreeze.adb, sem_ch4.adb, sem_ch13.adb: Minor reformatting.\n\n2012-10-02  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Overflow_Checks): Fix\n\ttypo preventing proper processing of Overflow_Checks pragmas\n\tfor general case.\n\n2012-10-02  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Mod): Fix crash in ELIMINATED overflow\n\tchecks mode when bignum mode is used.\n\n2012-10-02  Robert Dewar  <dewar@adacore.com>\n\n\t* stylesw.ads, gnat_ugn.texi: Document new style rule for NOT IN.\n\t* par-ch4.adb (P_Relational_Operator): Add style check for NOT IN.\n\t* style.ads, styleg.adb, styleg.ads (Check_Not_In): New procedure.\n\nFrom-SVN: r191962", "tree": {"sha": "e4c85d3b2de31fddee8db6bc6b8d7ffa292131aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4c85d3b2de31fddee8db6bc6b8d7ffa292131aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a6dc470832ec76b46cc74f749265222efbb287a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6dc470832ec76b46cc74f749265222efbb287a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6dc470832ec76b46cc74f749265222efbb287a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6dc470832ec76b46cc74f749265222efbb287a/comments", "author": null, "committer": null, "parents": [{"sha": "07ef182e37382f49a97e8da1ce3508acdf3e3493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ef182e37382f49a97e8da1ce3508acdf3e3493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ef182e37382f49a97e8da1ce3508acdf3e3493"}], "stats": {"total": 248, "additions": 159, "deletions": 89}, "files": [{"sha": "973833bd736ca868146c1ee2a1e0647c5e0094ab", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -1,3 +1,25 @@\n+2012-10-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.adb, sem_dim.adb, sem_dim.ads, prj-part.adb, checks.adb,\n+\tfreeze.adb, sem_ch4.adb, sem_ch13.adb: Minor reformatting.\n+\n+2012-10-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Overflow_Checks): Fix\n+\ttypo preventing proper processing of Overflow_Checks pragmas\n+\tfor general case.\n+\n+2012-10-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Mod): Fix crash in ELIMINATED overflow\n+\tchecks mode when bignum mode is used.\n+\n+2012-10-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* stylesw.ads, gnat_ugn.texi: Document new style rule for NOT IN.\n+\t* par-ch4.adb (P_Relational_Operator): Add style check for NOT IN.\n+\t* style.ads, styleg.adb, styleg.ads (Check_Not_In): New procedure.\n+\n 2012-10-02  Vincent Pucci  <pucci@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute): Check dimension for attribute"}, {"sha": "f7be38350155350ab767da0ebe57246d79b56b2f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -2075,7 +2075,8 @@ package body Checks is\n          --     IN          IN\n \n          if Ekind (Formal_1) = E_In_Parameter\n-           and then Ekind (Formal_2) = E_In_Parameter\n+              and then\n+            Ekind (Formal_2) = E_In_Parameter\n          then\n             return False;\n \n@@ -2342,9 +2343,11 @@ package body Checks is\n       --  Extract the subprogram specification and declaration nodes\n \n       Subp_Spec := Parent (Subp);\n+\n       if Nkind (Subp_Spec) = N_Defining_Program_Unit_Name then\n          Subp_Spec := Parent (Subp_Spec);\n       end if;\n+\n       Subp_Decl := Parent (Subp_Spec);\n \n       if not Comes_From_Source (Subp)\n@@ -2354,28 +2357,28 @@ package body Checks is\n \n         or else Is_Formal_Subprogram (Subp)\n \n-         --  Do not process imported subprograms since pre and post conditions\n-         --  are never verified on routines coming from a different language.\n+        --  Do not process imported subprograms since pre and post conditions\n+        --  are never verified on routines coming from a different language.\n \n         or else Is_Imported (Subp)\n         or else Is_Intrinsic_Subprogram (Subp)\n \n-         --  The PPC pragmas generated by this routine do not correspond to\n-         --  source aspects, therefore they cannot be applied to abstract\n-         --  subprograms.\n+        --  The PPC pragmas generated by this routine do not correspond to\n+        --  source aspects, therefore they cannot be applied to abstract\n+        --  subprograms.\n \n         or else Nkind (Subp_Decl) = N_Abstract_Subprogram_Declaration\n \n-         --  Do not consider subprogram renaminds because the renamed entity\n-         --  already has the proper PPC pragmas.\n+        --  Do not consider subprogram renaminds because the renamed entity\n+        --  already has the proper PPC pragmas.\n \n         or else Nkind (Subp_Decl) = N_Subprogram_Renaming_Declaration\n \n-         --  Do not process null procedures because there is no benefit of\n-         --  adding the checks to a no action routine.\n+        --  Do not process null procedures because there is no benefit of\n+        --  adding the checks to a no action routine.\n \n         or else (Nkind (Subp_Spec) = N_Procedure_Specification\n-                   and then Null_Present (Subp_Spec))\n+                  and then Null_Present (Subp_Spec))\n       then\n          return;\n       end if;\n@@ -2406,14 +2409,11 @@ package body Checks is\n          Next_Formal (Formal);\n       end loop;\n \n-      --  Generate the following scalar initialization check for a function\n-      --  result:\n+      --  Generate following scalar initialization check for function result:\n \n       --    Post => Subp'Result'Valid[_Scalars]\n \n-      if Check_Validity_Of_Parameters\n-        and then Ekind (Subp) = E_Function\n-      then\n+      if Check_Validity_Of_Parameters and then Ekind (Subp) = E_Function then\n          Add_Validity_Check (Subp, Name_Postcondition, True);\n       end if;\n    end Apply_Parameter_Validity_Checks;\n@@ -2465,8 +2465,8 @@ package body Checks is\n \n             if Is_OK_Static_Expression (N) then\n                if Present (Static_Predicate (Typ)) then\n-                  if Operating_Mode < Generate_Code or else\n-                    Eval_Static_Predicate_Check (N, Typ)\n+                  if Operating_Mode < Generate_Code\n+                    or else Eval_Static_Predicate_Check (N, Typ)\n                   then\n                      return;\n                   else"}, {"sha": "c4f662446e171d15943c530b2418555e4181100a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -7808,6 +7808,10 @@ package body Exp_Ch4 is\n    begin\n       Binary_Op_Validity_Checks (N);\n \n+      if Is_Integer_Type (Etype (N)) then\n+         Apply_Divide_Checks (N);\n+      end if;\n+\n       Determine_Range (Right, ROK, Rlo, Rhi, Assume_Valid => True);\n       Determine_Range (Left,  LOK, Llo, Lhi, Assume_Valid => True);\n \n@@ -7839,10 +7843,6 @@ package body Exp_Ch4 is\n       --  Otherwise, normal mod processing\n \n       else\n-         if Is_Integer_Type (Etype (N)) then\n-            Apply_Divide_Checks (N);\n-         end if;\n-\n          --  Apply optimization x mod 1 = 0. We don't really need that with\n          --  gcc, but it is useful with other back ends (e.g. AAMP), and is\n          --  certainly harmless.\n@@ -7870,32 +7870,39 @@ package body Exp_Ch4 is\n          --  the mod value is always 0, and we can just ignore the left operand\n          --  completely in this case.\n \n-         --  The operand type may be private (e.g. in the expansion of an\n-         --  intrinsic operation) so we must use the underlying type to get the\n-         --  bounds, and convert the literals explicitly.\n+         --  This only applies if we still have a mod operator. Skip if we\n+         --  have already rewritten this (e.g. in the case of eliminated\n+         --  overflow checks which have driven us into bignum mode).\n \n-         LLB :=\n-           Expr_Value\n-             (Type_Low_Bound (Base_Type (Underlying_Type (Etype (Left)))));\n+         if Nkind (N) = N_Op_Mod then\n \n-         if ((not ROK) or else (Rlo <= (-1) and then (-1) <= Rhi))\n-           and then\n-            ((not LOK) or else (Llo = LLB))\n-         then\n-            Rewrite (N,\n-              Make_Conditional_Expression (Loc,\n-                Expressions => New_List (\n-                  Make_Op_Eq (Loc,\n-                    Left_Opnd => Duplicate_Subexpr (Right),\n-                    Right_Opnd =>\n-                      Unchecked_Convert_To (Typ,\n-                        Make_Integer_Literal (Loc, -1))),\n-                  Unchecked_Convert_To (Typ,\n-                    Make_Integer_Literal (Loc, Uint_0)),\n-                  Relocate_Node (N))));\n+            --  The operand type may be private (e.g. in the expansion of an\n+            --  intrinsic operation) so we must use the underlying type to get\n+            --  the bounds, and convert the literals explicitly.\n \n-            Set_Analyzed (Next (Next (First (Expressions (N)))));\n-            Analyze_And_Resolve (N, Typ);\n+            LLB :=\n+              Expr_Value\n+                (Type_Low_Bound (Base_Type (Underlying_Type (Etype (Left)))));\n+\n+            if ((not ROK) or else (Rlo <= (-1) and then (-1) <= Rhi))\n+              and then\n+                ((not LOK) or else (Llo = LLB))\n+            then\n+               Rewrite (N,\n+                 Make_Conditional_Expression (Loc,\n+                   Expressions => New_List (\n+                     Make_Op_Eq (Loc,\n+                       Left_Opnd => Duplicate_Subexpr (Right),\n+                       Right_Opnd =>\n+                         Unchecked_Convert_To (Typ,\n+                           Make_Integer_Literal (Loc, -1))),\n+                     Unchecked_Convert_To (Typ,\n+                       Make_Integer_Literal (Loc, Uint_0)),\n+                     Relocate_Node (N))));\n+\n+               Set_Analyzed (Next (Next (First (Expressions (N)))));\n+               Analyze_And_Resolve (N, Typ);\n+            end if;\n          end if;\n       end if;\n    end Expand_N_Op_Mod;"}, {"sha": "72a98d221af5e77db2420bbe1c2351554767e003", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -3643,8 +3643,8 @@ package body Exp_Ch7 is\n       --  iterator specification, where a block is created for the expression\n       --  that build the container.\n \n-      elsif Nkind (Wrap_Node) = N_Iteration_Scheme\n-        or else Nkind (Wrap_Node) = N_Iterator_Specification\n+      elsif Nkind_In (Wrap_Node, N_Iteration_Scheme,\n+                                 N_Iterator_Specification)\n       then\n          null;\n "}, {"sha": "98b8eadfe88d4333db3f999f9369c868e32de8bf", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -2665,12 +2665,11 @@ package body Freeze is\n          Apply_Parameter_Validity_Checks (E);\n       end if;\n \n-      --  Deal with delayed aspect specifications. The analysis of the\n-      --  aspect is required to be delayed to the freeze point, thus we\n-      --  analyze the pragma or attribute definition clause in the tree at\n-      --  this point. We also analyze the aspect specification node at the\n-      --  freeze point when the aspect doesn't correspond to\n-      --  pragma/attribute definition clause.\n+      --  Deal with delayed aspect specifications. The analysis of the aspect\n+      --  is required to be delayed to the freeze point, thus we analyze the\n+      --  pragma or attribute definition clause in the tree at this point. We\n+      --  also analyze the aspect specification node at the freeze point when\n+      --  the aspect doesn't correspond to pragma/attribute definition clause.\n \n       if Has_Delayed_Aspects (E) then\n          Analyze_Aspects_At_Freeze_Point (E);"}, {"sha": "766f7efd50c8af0f04620bda1ac063d491385821", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -6730,6 +6730,10 @@ A unary plus or minus may not be followed by a space.\n A vertical bar must be surrounded by spaces.\n @end itemize\n \n+@item\n+Exactly one blank (and no other white space) must appear between\n+a @code{not} token and a following @code{in} token.\n+\n @item ^u^UNNECESSARY_BLANK_LINES^\n @emph{Check unnecessary blank lines.}\n Unnecessary blank lines are not allowed. A blank line is considered"}, {"sha": "5116c69820f86647ab15865b3628acd2072591a2", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -2706,7 +2706,16 @@ package body Ch4 is\n \n       Scan; -- past operator token\n \n+      --  Deal with NOT IN, if previous token was NOT, we must have IN now\n+\n       if Prev_Token = Tok_Not then\n+\n+         --  Style check, for NOT IN, we require one space between NOT and IN\n+\n+         if Style_Check and then Token = Tok_In then\n+            Style.Check_Not_In;\n+         end if;\n+\n          T_In;\n       end if;\n "}, {"sha": "f1166afbb7301de5913a31e5a5664760fe42f130", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -228,10 +228,12 @@ package body Prj.Part is\n       Env               : in out Environment);\n    --  Parse the imported projects that have been stored in table Withs, if\n    --  any. From_Extended is used for the call to Parse_Single_Project below.\n+   --\n    --  When In_Limited is True, the importing path includes at least one\n    --  \"limited with\". When Limited_Withs is False, only non limited withed\n    --  projects are parsed. When Limited_Withs is True, only limited withed\n    --  projects are parsed.\n+   --\n    --  Is_Config_File should be set to True if the project represents a config\n    --  file (.cgpr) since some specific checks apply.\n \n@@ -943,8 +945,8 @@ package body Prj.Part is\n                   --  If we have one, get the project id of the limited\n                   --  imported project file, and do not parse it.\n \n-                  if (In_Limited or else Limited_Withs) and then\n-                     Project_Stack.Last > 1\n+                  if (In_Limited or Limited_Withs)\n+                    and then Project_Stack.Last > 1\n                   then\n                      declare\n                         Canonical_Path_Name : Path_Name_Type;\n@@ -969,7 +971,7 @@ package body Prj.Part is\n                      end;\n                   end if;\n \n-                  --  Parse the imported project, if its project id is unknown\n+                  --  Parse the imported project if its project id is unknown\n \n                   if No (Withed_Project) then\n                      Parse_Single_Project\n@@ -979,7 +981,7 @@ package body Prj.Part is\n                         Path_Name_Id      => Imported_Path_Name_Id,\n                         Extended          => False,\n                         From_Extended     => From_Extended,\n-                        In_Limited        => In_Limited or else Limited_Withs,\n+                        In_Limited        => In_Limited or Limited_Withs,\n                         Packages_To_Check => Packages_To_Check,\n                         Depth             => Depth,\n                         Current_Dir       => Current_Dir,"}, {"sha": "87a456ad5e157838fc15f6d6fad308e4c52b5a16", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -2073,7 +2073,8 @@ package body Sem_Ch13 is\n          Indexing_Found : Boolean;\n \n          procedure Check_One_Function (Subp : Entity_Id);\n-         --  Check one possible interpretation\n+         --  Check one possible interpretation. Sets Indexing_Found True if an\n+         --  indexing function is found.\n \n          ------------------------\n          -- Check_One_Function --\n@@ -2096,10 +2097,11 @@ package body Sem_Ch13 is\n \n             --  An indexing function must return either the default element of\n             --  the container, or a reference type. For variable indexing it\n-            --  must be latter.\n+            --  must be the latter.\n \n             if Present (Default_Element) then\n                Analyze (Default_Element);\n+\n                if Is_Entity_Name (Default_Element)\n                  and then Covers (Entity (Default_Element), Etype (Subp))\n                then\n@@ -2108,7 +2110,7 @@ package body Sem_Ch13 is\n                end if;\n             end if;\n \n-            --  For variable_indexing the return type must be a reference type.\n+            --  For variable_indexing the return type must be a reference type\n \n             if Attr = Name_Variable_Indexing\n               and then not Has_Implicit_Dereference (Etype (Subp))\n@@ -2153,10 +2155,11 @@ package body Sem_Ch13 is\n \n                   Get_Next_Interp (I, It);\n                end loop;\n+\n                if not Indexing_Found then\n-                  Error_Msg_NE (\n-                   \"aspect Indexing requires a function that applies to type&\",\n-                     Expr, Ent);\n+                  Error_Msg_NE\n+                    (\"aspect Indexing requires a function that \"\n+                     & \"applies to type&\", Expr, Ent);\n                end if;\n             end;\n          end if;"}, {"sha": "7f3bd6000e23a197e7fe317303e28ff43aa5a711", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -3422,8 +3422,8 @@ package body Sem_Ch4 is\n          if Is_Array_Type (Typ)\n            and then Compile_Time_Known_Bounds (Typ)\n            and then\n-             (Expr_Value (Type_Low_Bound (Etype (First_Index (Typ))))\n-               > Expr_Value (Type_High_Bound (Etype (First_Index (Typ)))))\n+             (Expr_Value (Type_Low_Bound  (Etype (First_Index (Typ)))) >\n+              Expr_Value (Type_High_Bound (Etype (First_Index (Typ)))))\n          then\n             Preanalyze_And_Resolve (Condition (N), Standard_Boolean);\n "}, {"sha": "c350433e2bcd398a8c6be35acdf88a65d88bad51", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -1519,6 +1519,7 @@ package body Sem_Dim is\n       --  Check the dimensions of the actuals, if any\n \n       if not Is_Empty_List (Actuals) then\n+\n          --  Special processing for elementary functions\n \n          --  For Sqrt call, the resulting dimensions equal to half the\n@@ -1532,9 +1533,9 @@ package body Sem_Dim is\n \n                function Is_Elementary_Function_Entity\n                  (Sub_Id : Entity_Id) return Boolean;\n-               --  Given Sub_Id, the original subprogram entity, return True if\n-               --  call is to an elementary function\n-               --  (see Ada.Numerics.Generic_Elementary_Functions).\n+               --  Given Sub_Id, the original subprogram entity, return True\n+               --  if call is to an elementary function (see Ada.Numerics.\n+               --  Generic_Elementary_Functions).\n \n                -----------------------------------\n                -- Is_Elementary_Function_Entity --\n@@ -1546,8 +1547,7 @@ package body Sem_Dim is\n                   Loc : constant Source_Ptr := Sloc (Sub_Id);\n \n                begin\n-                  --  Is function entity in\n-                  --  Ada.Numerics.Generic_Elementary_Functions?\n+                  --  Is entity in Ada.Numerics.Generic_Elementary_Functions?\n \n                   return\n                     Loc > No_Location\n@@ -1560,8 +1560,7 @@ package body Sem_Dim is\n             --  Start of processing for Elementary_Function_Calls\n \n             begin\n-               --  Get the original subprogram entity following the renaming\n-               --  chain.\n+               --  Get original subprogram entity following the renaming chain\n \n                if Present (Alias (Ent)) then\n                   Ent := Alias (Ent);\n@@ -1570,6 +1569,7 @@ package body Sem_Dim is\n                --  Check the call is an Elementary function call\n \n                if Is_Elementary_Function_Entity (Ent) then\n+\n                   --  Sqrt function call case\n \n                   if Chars (Ent) = Name_Sqrt then\n@@ -1582,8 +1582,7 @@ package body Sem_Dim is\n                         for Position in Dims_Of_Call'Range loop\n                            Dims_Of_Call (Position) :=\n                              Dims_Of_Call (Position) *\n-                               Rational'(Numerator   => 1,\n-                                         Denominator => 2);\n+                               Rational'(Numerator => 1, Denominator => 2);\n                         end loop;\n \n                         Set_Dimensions (N, Dims_Of_Call);\n@@ -1597,8 +1596,7 @@ package body Sem_Dim is\n                      while Present (Actual) loop\n                         if Exists (Dimensions_Of (Actual)) then\n \n-                           --  Check if error has already been encountered so\n-                           --  far.\n+                           --  Check if error has already been encountered\n \n                            if not Error_Detected then\n                               Error_Msg_NE (\"dimensions mismatch in call of&\",\n@@ -1645,10 +1643,9 @@ package body Sem_Dim is\n                   Error_Detected := True;\n                end if;\n \n-               Error_Msg_N (\"\\expected dimension \" &\n-                            Dimensions_Msg_Of (Formal_Typ) & \", found \" &\n-                            Dimensions_Msg_Of (Actual),\n-                            Actual);\n+               Error_Msg_N\n+                 (\"\\expected dimension \" & Dimensions_Msg_Of (Formal_Typ)\n+                  & \", found \" & Dimensions_Msg_Of (Actual), Actual);\n             end if;\n \n             Next_Actual (Actual);\n@@ -1916,7 +1913,7 @@ package body Sem_Dim is\n \n    procedure Analyze_Dimension_Has_Etype (N : Node_Id) is\n       Etyp         : constant Entity_Id := Etype (N);\n-      Dims_Of_Etyp : Dimension_Type := Dimensions_Of (Etyp);\n+      Dims_Of_Etyp : Dimension_Type     := Dimensions_Of (Etyp);\n \n    begin\n       --  General case. Propagation of the dimensions from the type\n@@ -1955,7 +1952,6 @@ package body Sem_Dim is\n       --  Removal of dimensions in expression\n \n       case Nkind (N) is\n-\n          when N_Attribute_Reference |\n               N_Indexed_Component   =>\n             declare\n@@ -1981,7 +1977,6 @@ package body Sem_Dim is\n             Remove_Dimensions (Selector_Name (N));\n \n          when others => null;\n-\n       end case;\n    end Analyze_Dimension_Has_Etype;\n "}, {"sha": "2fdfd30ee6ce10303c8851282e985592cf10c2f6", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -164,7 +164,7 @@ package Sem_Dim is\n \n    procedure Copy_Dimensions (From, To : Node_Id);\n    --  Copy dimension vector of node From to node To. Note that To must be a\n-   --  node that is allowed to contain a dimension. (See OK_For_Dimension in\n+   --  node that is allowed to contain a dimension (see OK_For_Dimension in\n    --  body of Sem_Dim).\n \n    procedure Eval_Op_Expon_For_Dimensioned_Type"}, {"sha": "7346e02df6134dc93632ca7a928c900c1eab5df1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -11817,7 +11817,7 @@ package body Sem_Prag is\n \n             --  Process first argument\n \n-            Suppress_Options.Overflow_Checks_General :=\n+            Scope_Suppress.Overflow_Checks_General :=\n               Get_Check_Mode (Name_General, Arg1);\n \n             --  Case of only one argument"}, {"sha": "d425494eefa9b05335cfabf25c1c4fc56e3d9175", "filename": "gcc/ada/style.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstyle.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstyle.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.ads?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -155,6 +155,11 @@ package Style is\n    --  check the line length (Len is the length of the current line). Note that\n    --  the terminator may be the EOF character.\n \n+   procedure Check_Not_In\n+     renames Style_Inst.Check_Not_In;\n+   --  Called with Scan_Ptr pointing to an IN token, and Prev_Token_Ptr\n+   --  pointing to a NOT token. Used to check proper layout of NOT IN.\n+\n    procedure Check_Pragma_Name\n      renames Style_Inst.Check_Pragma_Name;\n    --  The current token is a pragma identifier. Check that it is spelled"}, {"sha": "c6743942a752ea237b50c949a9beed635a253609", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -764,6 +764,24 @@ package body Styleg is\n       end if;\n    end Check_Line_Terminator;\n \n+   ------------------\n+   -- Check_Not_In --\n+   ------------------\n+\n+   --  In check tokens mode, only one space between NOT and IN\n+\n+   procedure Check_Not_In is\n+   begin\n+      if Style_Check_Tokens then\n+         if Source (Token_Ptr - 1) /= ' '\n+           or else Token_Ptr - Prev_Token_Ptr /= 4\n+         then -- CODEFIX?\n+            Error_Msg\n+              (\"(style) single space must separate NOT and IN\", Token_Ptr - 1);\n+         end if;\n+      end if;\n+   end Check_Not_In;\n+\n    --------------------------\n    -- Check_No_Space_After --\n    --------------------------"}, {"sha": "7aabac441dfc6560976bf7d328508048e7bf20ac", "filename": "gcc/ada/styleg.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstyleg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstyleg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.ads?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -117,6 +117,10 @@ package Styleg is\n    --  the current line, used to check for appropriate line terminator usage.\n    --  The parameter Len is the length of the current line.\n \n+   procedure Check_Not_In;\n+   --  Called with Scan_Ptr pointing to an IN token, and Prev_Token_Ptr\n+   --  pointing to a NOT token. Used to check proper layout of NOT IN.\n+\n    procedure Check_Pragma_Name;\n    --  The current token is a pragma identifier. Check that it is spelled\n    --  properly (i.e. with an appropriate casing convention)."}, {"sha": "b64e68650bc71331822cb725e8f1a1944dd2f059", "filename": "gcc/ada/stylesw.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstylesw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dc470832ec76b46cc74f749265222efbb287a/gcc%2Fada%2Fstylesw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.ads?ref=9a6dc470832ec76b46cc74f749265222efbb287a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -255,6 +255,8 @@ package Stylesw is\n    --\n    --    A unary plus or minus may not be followed by a space\n    --\n+   --    There must be one blank (and no other white space) between NOT and IN\n+   --\n    --    A vertical bar must be surrounded by spaces\n    --\n    --  Note that a requirement that a token be preceded by a space is met by"}]}