{"sha": "2cda2bfa3fd0f2a0122433d2d870843633e2a312", "node_id": "C_kwDOANBUbNoAKDJjZGEyYmZhM2ZkMGYyYTAxMjI0MzNkMmQ4NzA4NDM2MzNlMmEzMTI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-20T14:22:27Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-20T14:22:27Z"}, "message": "c++: consistently diagnose bare CTAD placeholder in fn return type\n\nRelax slightly the existing check for diagnosing a bare CTAD placeholder\nas the return type of a function declarator to also handle the abstract\ndeclarator case.\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (grokdeclarator): Diagnose a CTAD placeholder as\n\tfunction return type even when !funcdecl_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/other/pr88187.C: Adjust expected C++17 diagnostic.", "tree": {"sha": "261021dca91ceb2741f4aff2ab3e50271a7ceb8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/261021dca91ceb2741f4aff2ab3e50271a7ceb8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cda2bfa3fd0f2a0122433d2d870843633e2a312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cda2bfa3fd0f2a0122433d2d870843633e2a312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cda2bfa3fd0f2a0122433d2d870843633e2a312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cda2bfa3fd0f2a0122433d2d870843633e2a312/comments", "author": null, "committer": null, "parents": [{"sha": "d63d9c3dd160dce24f0209f193b8e7388b19f712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63d9c3dd160dce24f0209f193b8e7388b19f712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63d9c3dd160dce24f0209f193b8e7388b19f712"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "1cbe9a34be0cb1b8d719277924e01a2e796fa8a9", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cda2bfa3fd0f2a0122433d2d870843633e2a312/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cda2bfa3fd0f2a0122433d2d870843633e2a312/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=2cda2bfa3fd0f2a0122433d2d870843633e2a312", "patch": "@@ -12647,11 +12647,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tif (!tmpl)\n \t\t  if (tree late_auto = type_uses_auto (late_return_type))\n \t\t    tmpl = CLASS_PLACEHOLDER_TEMPLATE (late_auto);\n-\t\tif (tmpl && funcdecl_p)\n+\t\tif (tmpl)\n \t\t  {\n-\t\t    if (!dguide_name_p (unqualified_id))\n+\t\t    if (!funcdecl_p || !dguide_name_p (unqualified_id))\n \t\t      {\n-\t\t\terror_at (declarator->id_loc, \"deduced class \"\n+\t\t\terror_at (typespec_loc, \"deduced class \"\n \t\t\t\t  \"type %qD in function return type\",\n \t\t\t\t  DECL_NAME (tmpl));\n \t\t\tinform (DECL_SOURCE_LOCATION (tmpl),"}, {"sha": "7812e3fd5b340ac3fd7d7368fcaec4e9ef910d1e", "filename": "gcc/testsuite/g++.dg/other/pr88187.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cda2bfa3fd0f2a0122433d2d870843633e2a312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr88187.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cda2bfa3fd0f2a0122433d2d870843633e2a312/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr88187.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr88187.C?ref=2cda2bfa3fd0f2a0122433d2d870843633e2a312", "patch": "@@ -4,4 +4,4 @@\n template <int> struct A;\n void f (A ());\t// { dg-error \"6:variable or field 'f' declared void\" \"\" { target c++14_down } }\n \t\t// { dg-error \"missing template arguments before '\\\\(' token\" \"\" { target c++14_down } .-1 }\n-\t\t// { dg-error \"placeholder .A. not permitted in this context\" \"\" { target c++17 } .-2 }\n+\t\t// { dg-error \"deduced class type 'A' in function return type\" \"\" { target c++17 } .-2 }"}]}