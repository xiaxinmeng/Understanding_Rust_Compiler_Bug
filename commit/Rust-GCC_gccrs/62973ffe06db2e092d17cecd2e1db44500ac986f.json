{"sha": "62973ffe06db2e092d17cecd2e1db44500ac986f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI5NzNmZmUwNmRiMmUwOTJkMTdjZWNkMmUxZGI0NDUwMGFjOTg2Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-01-25T21:27:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-01-25T21:27:37Z"}, "message": "mips.c (mips_offset_within_object_p): New function.\n\n\t* config/mips/mips.c (mips_offset_within_object_p): New function.\n\t(mips_symbolic_constant_p): Use it in the SYMBOL_SMALL_DATA and\n\tSYMBOL_CONSTANT_POOL cases.  Also use it for SYMBOL_GENERAL if the\n\tABI has 64-bit pointers and the object file only allows 32-bit symbols.\n\nFrom-SVN: r76586", "tree": {"sha": "013d98ff4c4b1fc8222ad86d9776d57120d7e799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/013d98ff4c4b1fc8222ad86d9776d57120d7e799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62973ffe06db2e092d17cecd2e1db44500ac986f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62973ffe06db2e092d17cecd2e1db44500ac986f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62973ffe06db2e092d17cecd2e1db44500ac986f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62973ffe06db2e092d17cecd2e1db44500ac986f/comments", "author": null, "committer": null, "parents": [{"sha": "8e67da213d262d9636501e9e96ec9894ed33f8ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e67da213d262d9636501e9e96ec9894ed33f8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e67da213d262d9636501e9e96ec9894ed33f8ae"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "ccad5da79dc29e0c61c2c2bfd16c06527d1301a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62973ffe06db2e092d17cecd2e1db44500ac986f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62973ffe06db2e092d17cecd2e1db44500ac986f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62973ffe06db2e092d17cecd2e1db44500ac986f", "patch": "@@ -1,3 +1,10 @@\n+2004-01-25  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_offset_within_object_p): New function.\n+\t(mips_symbolic_constant_p): Use it in the SYMBOL_SMALL_DATA and\n+\tSYMBOL_CONSTANT_POOL cases.  Also use it for SYMBOL_GENERAL if the\n+\tABI has 64-bit pointers and the object file only allows 32-bit symbols.\n+\n 2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/sh/sh.h (PROMOTE_FUNCTION_ARGS): Remove."}, {"sha": "df338f71c228e202c28799b9ae9879fcd2817a44", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62973ffe06db2e092d17cecd2e1db44500ac986f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62973ffe06db2e092d17cecd2e1db44500ac986f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=62973ffe06db2e092d17cecd2e1db44500ac986f", "patch": "@@ -191,6 +191,7 @@ struct mips_integer_op;\n \n static enum mips_symbol_type mips_classify_symbol (rtx);\n static void mips_split_const (rtx, rtx *, HOST_WIDE_INT *);\n+static bool mips_offset_within_object_p (rtx, HOST_WIDE_INT);\n static bool mips_symbolic_constant_p (rtx, enum mips_symbol_type *);\n static bool mips_valid_base_register_p (rtx, enum machine_mode, int);\n static bool mips_symbolic_address_p (enum mips_symbol_type, enum machine_mode);\n@@ -914,6 +915,29 @@ mips_split_const (rtx x, rtx *base, HOST_WIDE_INT *offset)\n }\n \n \n+/* Return true if SYMBOL is a SYMBOL_REF and OFFSET + SYMBOL points\n+   to the same object as SYMBOL.  */\n+\n+static bool\n+mips_offset_within_object_p (rtx symbol, HOST_WIDE_INT offset)\n+{\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    return false;\n+\n+  if (CONSTANT_POOL_ADDRESS_P (symbol)\n+      && offset >= 0\n+      && offset < (int) GET_MODE_SIZE (get_pool_mode (symbol)))\n+    return true;\n+\n+  if (SYMBOL_REF_DECL (symbol) != 0\n+      && offset >= 0\n+      && offset < int_size_in_bytes (TREE_TYPE (SYMBOL_REF_DECL (symbol))))\n+    return true;\n+\n+  return false;\n+}\n+\n+\n /* Return true if X is a symbolic constant that can be calculated in\n    the same way as a bare symbol.  If it is, store the type of the\n    symbol in *SYMBOL_TYPE.  */\n@@ -939,21 +963,22 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n   switch (*symbol_type)\n     {\n     case SYMBOL_GENERAL:\n-      /* %hi() and %lo() can handle anything.  */\n+      /* If the target has 64-bit pointers and the object file only\n+\t supports 32-bit symbols, the values of those symbols will be\n+\t sign-extended.  In this case we can't allow an arbitrary offset\n+\t in case the 32-bit value X + OFFSET has a different sign from X.  */\n+      if (Pmode == DImode && !ABI_HAS_64BIT_SYMBOLS)\n+\treturn mips_offset_within_object_p (x, offset);\n+\n+      /* In other cases the relocations can handle any offset.  */\n       return true;\n \n     case SYMBOL_SMALL_DATA:\n-      /* Make sure that the offset refers to something within the\n-\t -G limit.  If the offset is allowed to grow too much,\n-\t it could overflow the range of %gp_rel().  */\n-      return (offset > 0 && offset < mips_section_threshold);\n-\n     case SYMBOL_CONSTANT_POOL:\n-      /* Similarly check the range of offsets for mips16 constant\n-\t pool entries.  */\n-      return (CONSTANT_POOL_ADDRESS_P (x)\n-\t      && offset > 0\n-\t      && offset < (int) GET_MODE_SIZE (get_pool_mode (x)));\n+      /* Make sure that the offset refers to something within the\n+\t underlying object.  This should guarantee that the final\n+\t PC- or GP-relative offset is within the 16-bit limit.  */\n+      return mips_offset_within_object_p (x, offset);\n \n     case SYMBOL_GOT_LOCAL:\n     case SYMBOL_GOTOFF_PAGE:"}]}