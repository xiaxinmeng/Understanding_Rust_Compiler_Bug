{"sha": "b0c0d878a8b5bf39dbea4c192fed26d340524439", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjMGQ4NzhhOGI1YmYzOWRiZWE0YzE5MmZlZDI2ZDM0MDUyNDQzOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-29T14:45:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-29T14:45:35Z"}, "message": "PR libstdc++/85494 use rdseed and rand_s in std::random_device\n\nAdd support for additional sources of randomness to std::random_device,\nto allow using RDSEED for Intel CPUs and rand_s for Windows. When\nsupported these can be selected using the tokens \"rdseed\" and \"rand_s\".\nFor *-w64-mingw32 targets the \"default\" token will now use rand_s, and\nfor other i?86-*-* and x86_64-*-* targets it will try to use \"rdseed\"\nfirst, then \"rdrand\", and finally \"/dev/urandom\".\n\nTo simplify the declaration of std::random_device in <bits/random.h> the\nconstructors now unconditionally call _M_init instead of _M_init_pretr1,\nand the function call operator now unconditionally calls _M_getval. The\nlibrary code now decides whether _M_init and _M_getval should use a real\nsource of randomness or the mt19937 engine.\n\nExisting code compiled against old libstdc++ headers will still call\n_M_init_pretr1 and _M_getval_pretr1, but those functions now forward to\n_M_init and _M_getval if a real source of randomness is available. This\nmeans existing code compiled for mingw-w64 will start to use rand_s just\nby linking to a new libstdc++.dll.\n\n\t* acinclude.m4 (GLIBCXX_CHECK_X86_RDSEED): Define macro to check if\n\tthe assembler supports rdseed.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Use GLIBCXX_CHECK_X86_RDSEED.\n\t* config/os/mingw32-w64/os_defines.h (_GLIBCXX_USE_CRT_RAND_S): Define.\n\t* doc/html/*: Regenerate.\n\t* doc/xml/manual/status_cxx2011.xml: Document new tokens.\n\t* include/bits/random.h (random_device::random_device()): Always call\n\t_M_init rather than _M_init_pretr1.\n\t(random_device::random_device(const string&)): Likewise.\n\t(random_device::operator()()): Always call _M_getval().\n\t(random_device::_M_file): Replace first member of union with an\n\tanonymous struct, with _M_file as its first member.\n\t* src/c++11/random.cc [_GLIBCXX_X86_RDRAND] (USE_RDRAND): Define.\n\t[_GLIBCXX_X86_RDSEED] (USE_RDSEED): Define.\n\t(USE_MT19937): Define if none of the above are defined.\n\t(USE_POSIX_FILE_IO): Define.\n\t(_M_strtoul): Remove.\n\t[USE_RDSEED] (__x86_rdseed): Define new function.\n\t[_GLIBCXX_USE_CRT_RAND_S] (__winxp_rand_s): Define new function.\n\t(random_device::_M_init(const string&)): Initialize new union members.\n\tAdd support for \"rdseed\" and \"rand_s\" tokens. Decide what the\n\t\"default\" token does according to which USE_* macros are defined.\n\t[USE_POSIX_FILE_IO]: Store a file descriptor.\n\t[USE_MT19937]: Forward to _M_init_pretr1 instead.\n\t(random_device::_M_init_pretr1(const string&)) [USE_MT19937]: Inline\n\tcode from _M_strtoul.\n\t[!USE_MT19937]: Call _M_init, transforming the old default token or\n\tnumeric tokens to \"default\".\n\t(random_device::_M_fini()) [USE_POSIX_FILE_IO]: Use close not fclose.\n\t(random_device::_M_getval()): Use new union members to obtain a\n\trandom number from the stored function pointer or file descriptor.\n\t[USE_MT19937]: Obtain a value from the mt19937 engine.\n\t(random_device::_M_getval_pretr1()): Call _M_getval().\n\t(random_device::_M_getentropy()) [USE_POSIX_FILE_IO]: Use _M_fd\n\tinstead of fileno.\n\t[!USE_MT19937] (mersenne_twister): Do not instantiate when not needed.\n\t* testsuite/26_numerics/random/random_device/85494.cc: New test.\n\nFrom-SVN: r271740", "tree": {"sha": "0fe0e765cf8c296b2c62be34aa53081dbb7e80a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fe0e765cf8c296b2c62be34aa53081dbb7e80a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c0d878a8b5bf39dbea4c192fed26d340524439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c0d878a8b5bf39dbea4c192fed26d340524439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c0d878a8b5bf39dbea4c192fed26d340524439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c0d878a8b5bf39dbea4c192fed26d340524439/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0617e23c9531373d3b232152c0d81a2c707858d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0617e23c9531373d3b232152c0d81a2c707858d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0617e23c9531373d3b232152c0d81a2c707858d9"}], "stats": {"total": 585, "additions": 490, "deletions": 95}, "files": [{"sha": "a01b54e8b63b774c820cb519bafabf9cf8c2d696", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -1,3 +1,46 @@\n+2019-05-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85494 use rdseed and rand_s in std::random_device\n+\t* acinclude.m4 (GLIBCXX_CHECK_X86_RDSEED): Define macro to check if\n+\tthe assembler supports rdseed.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Use GLIBCXX_CHECK_X86_RDSEED.\n+\t* config/os/mingw32-w64/os_defines.h (_GLIBCXX_USE_CRT_RAND_S): Define.\n+\t* doc/html/*: Regenerate.\n+\t* doc/xml/manual/status_cxx2011.xml: Document new tokens.\n+\t* include/bits/random.h (random_device::random_device()): Always call\n+\t_M_init rather than _M_init_pretr1.\n+\t(random_device::random_device(const string&)): Likewise.\n+\t(random_device::operator()()): Always call _M_getval().\n+\t(random_device::_M_file): Replace first member of union with an\n+\tanonymous struct, with _M_file as its first member.\n+\t* src/c++11/random.cc [_GLIBCXX_X86_RDRAND] (USE_RDRAND): Define.\n+\t[_GLIBCXX_X86_RDSEED] (USE_RDSEED): Define.\n+\t(USE_MT19937): Define if none of the above are defined.\n+\t(USE_POSIX_FILE_IO): Define.\n+\t(_M_strtoul): Remove.\n+\t[USE_RDSEED] (__x86_rdseed): Define new function.\n+\t[_GLIBCXX_USE_CRT_RAND_S] (__winxp_rand_s): Define new function.\n+\t(random_device::_M_init(const string&)): Initialize new union members.\n+\tAdd support for \"rdseed\" and \"rand_s\" tokens. Decide what the\n+\t\"default\" token does according to which USE_* macros are defined.\n+\t[USE_POSIX_FILE_IO]: Store a file descriptor.\n+\t[USE_MT19937]: Forward to _M_init_pretr1 instead.\n+\t(random_device::_M_init_pretr1(const string&)) [USE_MT19937]: Inline\n+\tcode from _M_strtoul.\n+\t[!USE_MT19937]: Call _M_init, transforming the old default token or\n+\tnumeric tokens to \"default\".\n+\t(random_device::_M_fini()) [USE_POSIX_FILE_IO]: Use close not fclose.\n+\t(random_device::_M_getval()): Use new union members to obtain a\n+\trandom number from the stored function pointer or file descriptor.\n+\t[USE_MT19937]: Obtain a value from the mt19937 engine.\n+\t(random_device::_M_getval_pretr1()): Call _M_getval().\n+\t(random_device::_M_getentropy()) [USE_POSIX_FILE_IO]: Use _M_fd\n+\tinstead of fileno.\n+\t[!USE_MT19937] (mersenne_twister): Do not instantiate when not needed.\n+\t* testsuite/26_numerics/random/random_device/85494.cc: New test.\n+\n 2019-05-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90634"}, {"sha": "19e9f14b0f5112d342fdf6a869f9adccbfacd344", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -4053,6 +4053,26 @@ AC_DEFUN([GLIBCXX_CHECK_X86_RDRAND], [\n   AC_MSG_RESULT($ac_cv_x86_rdrand)\n ])\n \n+dnl\n+dnl Check whether rdseed is supported in the assembler.\n+AC_DEFUN([GLIBCXX_CHECK_X86_RDSEED], [\n+  AC_MSG_CHECKING([for rdseed support in assembler])\n+  AC_CACHE_VAL(ac_cv_x86_rdseed, [\n+  ac_cv_x86_rdseed=no\n+  case \"$target\" in\n+    i?86-*-* | \\\n+    x86_64-*-*)\n+    AC_TRY_COMPILE(, [asm(\"rdseed %eax\");],\n+\t\t[ac_cv_x86_rdseed=yes], [ac_cv_x86_rdseed=no])\n+  esac\n+  ])\n+  if test $ac_cv_x86_rdseed = yes; then\n+    AC_DEFINE(_GLIBCXX_X86_RDSEED, 1,\n+\t\t[ Defined if as can handle rdseed. ])\n+  fi\n+  AC_MSG_RESULT($ac_cv_x86_rdseed)\n+])\n+\n dnl\n dnl Check whether get_nprocs is available in <sys/sysinfo.h>, and define _GLIBCXX_USE_GET_NPROCS.\n dnl"}, {"sha": "99286e67a271ae9d6bd6f69d49aa8abc4a59b956", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -1038,6 +1038,9 @@\n /* Defined if as can handle rdrand. */\n #undef _GLIBCXX_X86_RDRAND\n \n+/* Defined if as can handle rdseed. */\n+#undef _GLIBCXX_X86_RDSEED\n+\n /* Define to 1 if mutex_timedlock is available. */\n #undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n "}, {"sha": "418c6f569df257b6c8a296a82e3d1e930dc48b27", "filename": "libstdc++-v3/config/os/mingw32-w64/os_defines.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fos_defines.h?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -88,4 +88,6 @@\n // See libstdc++/59807\n #define _GTHREAD_USE_MUTEX_INIT_FUNC 1\n \n+#define _GLIBCXX_USE_CRT_RAND_S 1\n+\n #endif"}, {"sha": "7c45c340677cafe0c12c9244948b425f3e4a0904", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -79870,6 +79870,47 @@ $as_echo \"#define _GLIBCXX_X86_RDRAND 1\" >>confdefs.h\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_x86_rdrand\" >&5\n $as_echo \"$ac_cv_x86_rdrand\" >&6; }\n \n+# Check if assembler supports rdseed opcode.\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for rdseed support in assembler\" >&5\n+$as_echo_n \"checking for rdseed support in assembler... \" >&6; }\n+  if test \"${ac_cv_x86_rdseed+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+  ac_cv_x86_rdseed=no\n+  case \"$target\" in\n+    i?86-*-* | \\\n+    x86_64-*-*)\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm(\"rdseed %eax\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_x86_rdseed=yes\n+else\n+  ac_cv_x86_rdseed=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  esac\n+\n+fi\n+\n+  if test $ac_cv_x86_rdseed = yes; then\n+\n+$as_echo \"#define _GLIBCXX_X86_RDSEED 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_x86_rdseed\" >&5\n+$as_echo \"$ac_cv_x86_rdseed\" >&6; }\n+\n \n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n "}, {"sha": "2e3a1a98f338361ed9a2934a5fe61e60d6852322", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -417,6 +417,8 @@ GCC_CHECK_ASSEMBLER_HWCAP\n \n # Check if assembler supports rdrand opcode.\n GLIBCXX_CHECK_X86_RDRAND\n+# Check if assembler supports rdseed opcode.\n+GLIBCXX_CHECK_X86_RDSEED\n \n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n GLIBCXX_CONFIGURE_TESTSUITE"}, {"sha": "7c7bd5a25938ee449fd4ce4d81091b5b4a13147f", "filename": "libstdc++-v3/doc/html/manual/appendix_contributing.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_contributing.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_contributing.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_contributing.html?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -26,7 +26,7 @@\n \t  organization. In the USA, this national standards\n \t  organization is\n \t  <a class=\"link\" href=\"https://www.ansi.org\" target=\"_top\">ANSI</a>.\n-\t  (And if you've already registered with them you can <a class=\"link\" href=\"https://webstore.ansi.org/RecordDetail.aspx?sku=ISO%2fIEC+14882%3a2014\" target=\"_top\">buy\n+\t  (And if you've already registered with them you can <a class=\"link\" href=\"https://webstore.ansi.org/Standards/ISO/ISOIEC148822014\" target=\"_top\">buy\n \t  the standard on-line</a>.)\n \t</p></li><li class=\"listitem\"><p>\n \t  The library working group bugs, and known defects, can"}, {"sha": "398a9490a1859543512a25e99b4ccb768dca6c58", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -303,18 +303,38 @@\n       <code class=\"classname\">minstd_rand0</code>.\n    </p><p>\n       <span class=\"emphasis\"><em> 26.5.6 [rand.device] </em></span>\n-      The default <code class=\"code\">token</code> argument to the\n-      <code class=\"classname\">random_device</code> constructor is\n-      <code class=\"literal\">\"default\"</code>. Other valid arguments are\n-      <code class=\"literal\">\"/dev/random\"</code> and <code class=\"literal\">\"/dev/urandom\"</code>,\n-      which determine the character special file to read random bytes from.\n-      The <code class=\"literal\">\"default\"</code> token will read bytes from a hardware\n-      RNG if available (currently this only supports the IA-32 RDRAND\n-      instruction) otherwise it is equivalent to\n-      <code class=\"literal\">\"/dev/urandom\"</code>.\n+      The <code class=\"code\">token</code> parameter of the\n+      <code class=\"classname\">random_device</code> constructor can be used to select\n+      a specific source of random bytes. The valid token values are shown\n+      in the list below.\n+      The default constructor uses the token <code class=\"literal\">\"default\"</code>.\n+      </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><code class=\"literal\">\"default\"</code></span></dt><dd>\n+          Select the first available source from the other entries below.\n+          This is the only token that is always valid.\n+        </dd><dt><span class=\"term\"><code class=\"literal\">\"rand_s\"</code></span></dt><dd>\n+          Use the MSVCRT <code class=\"function\">rand_s</code> function.\n+          This token is only valid for mingw-w64 targets.\n+        </dd><dt><span class=\"term\"><code class=\"literal\">\"rdseed\"</code>, </span><span class=\"term\"><code class=\"literal\">\"rdrand\"</code> or <code class=\"literal\">\"rdrnd\"</code></span></dt><dd>\n+          Use the IA-32 <code class=\"literal\">RDSEED</code> or <code class=\"literal\">RDRAND</code>\n+          instruction to read from an on-chip hardware random number generator.\n+          These tokens are only valid for x86 and x86_64 targets when both\n+          the assembler and CPU support the corresponding instruction.\n+        </dd><dt><span class=\"term\"><code class=\"literal\">\"/dev/urandom\"</code>, </span><span class=\"term\"><code class=\"literal\">\"/dev/random\"</code></span></dt><dd>\n+          Use the named character special file to read random bytes from.\n+          These tokens are only valid when the device files are present\n+          and readable by the current user.\n+        </dd><dt><span class=\"term\"><code class=\"literal\">\"mt19937\"</code>, </span><span class=\"term\">seed value</span></dt><dd>\n+          When no source of nondeterministic random numbers is available a\n+          <code class=\"classname\">mersenne_twister_engine</code> will be used.\n+          An integer seed value can be used as the token and will be converted\n+          to an <code class=\"code\">unsigned long</code> using <code class=\"function\">strtoul</code>.\n+          These tokens are only valid when no other source of random bytes\n+          is available.\n+        </dd></dl></div><p>\n       An exception of type <code class=\"classname\">runtime_error</code> will be\n-      thrown if a <code class=\"classname\">random_device</code> object cannot open\n-      or read from the source of random bytes.\n+      thrown if a <code class=\"classname\">random_device</code> object is constructed\n+      with an invalid token, or if it cannot open or read from the source\n+      of random bytes.\n    </p><p>\n       <span class=\"emphasis\"><em>26.5.8.1 [rand.dist.general]</em></span>\n       The algorithms used by the distributions should be documented here."}, {"sha": "9c25b8fd81f5d60ee2d9c8f1f1eea97c06bae9d2", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -2682,18 +2682,62 @@ particular release.\n \n    <para>\n       <emphasis> 26.5.6 [rand.device] </emphasis>\n-      The default <code>token</code> argument to the\n-      <classname>random_device</classname> constructor is\n-      <literal>\"default\"</literal>. Other valid arguments are\n-      <literal>\"/dev/random\"</literal> and <literal>\"/dev/urandom\"</literal>,\n-      which determine the character special file to read random bytes from.\n-      The <literal>\"default\"</literal> token will read bytes from a hardware\n-      RNG if available (currently this only supports the IA-32 RDRAND\n-      instruction) otherwise it is equivalent to\n-      <literal>\"/dev/urandom\"</literal>.\n+      The <code>token</code> parameter of the\n+      <classname>random_device</classname> constructor can be used to select\n+      a specific source of random bytes. The valid token values are shown\n+      in the list below.\n+      The default constructor uses the token <literal>\"default\"</literal>.\n+      <variablelist>\n+      <varlistentry>\n+        <term><literal>\"default\"</literal></term>\n+        <listitem>\n+          Select the first available source from the other entries below.\n+          This is the only token that is always valid.\n+        </listitem>\n+      </varlistentry>\n+      <varlistentry>\n+        <term><literal>\"rand_s\"</literal></term>\n+        <listitem>\n+          Use the MSVCRT <function>rand_s</function> function.\n+          This token is only valid for mingw-w64 targets.\n+        </listitem>\n+      </varlistentry>\n+      <varlistentry>\n+        <term><literal>\"rdseed\"</literal></term>\n+        <term><literal>\"rdrand\"</literal> or <literal>\"rdrnd\"</literal></term>\n+        <listitem>\n+          Use the IA-32 <literal>RDSEED</literal> or <literal>RDRAND</literal>\n+          instruction to read from an on-chip hardware random number generator.\n+          These tokens are only valid for x86 and x86_64 targets when both\n+          the assembler and CPU support the corresponding instruction.\n+        </listitem>\n+      </varlistentry>\n+      <varlistentry>\n+        <term><literal>\"/dev/urandom\"</literal></term>\n+        <term><literal>\"/dev/random\"</literal></term>\n+        <listitem>\n+          Use the named character special file to read random bytes from.\n+          These tokens are only valid when the device files are present\n+          and readable by the current user.\n+        </listitem>\n+      </varlistentry>\n+      <varlistentry>\n+        <term><literal>\"mt19937\"</literal></term>\n+        <term>seed value</term>\n+        <listitem>\n+          When no source of nondeterministic random numbers is available a\n+          <classname>mersenne_twister_engine</classname> will be used.\n+          An integer seed value can be used as the token and will be converted\n+          to an <code>unsigned long</code> using <function>strtoul</function>.\n+          These tokens are only valid when no other source of random bytes\n+          is available.\n+        </listitem>\n+      </varlistentry>\n+      </variablelist>\n       An exception of type <classname>runtime_error</classname> will be\n-      thrown if a <classname>random_device</classname> object cannot open\n-      or read from the source of random bytes.\n+      thrown if a <classname>random_device</classname> object is constructed\n+      with an invalid token, or if it cannot open or read from the source\n+      of random bytes.\n    </para>\n \n    <para>"}, {"sha": "9c959d6dc84a7da7d57fcb2eb00e4af60cc79f45", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -1602,20 +1602,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // constructors, destructors and member functions\n \n-#ifdef _GLIBCXX_USE_DEV_RANDOM\n     random_device() { _M_init(\"default\"); }\n \n     explicit\n     random_device(const std::string& __token) { _M_init(__token); }\n \n+#if defined _GLIBCXX_USE_DEV_RANDOM\n     ~random_device()\n     { _M_fini(); }\n-#else\n-    random_device() { _M_init_pretr1(\"mt19937\"); }\n-\n-    explicit\n-    random_device(const std::string& __token)\n-    { _M_init_pretr1(__token); }\n #endif\n \n     static constexpr result_type\n@@ -1638,13 +1632,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     result_type\n     operator()()\n-    {\n-#ifdef _GLIBCXX_USE_DEV_RANDOM\n-      return this->_M_getval();\n-#else\n-      return this->_M_getval_pretr1();\n-#endif\n-    }\n+    { return this->_M_getval(); }\n \n     // No copy functions.\n     random_device(const random_device&) = delete;\n@@ -1662,7 +1650,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     union\n     {\n-      void*      _M_file;\n+      struct\n+      {\n+\tvoid*      _M_file;\n+\tresult_type (*_M_func)(void*);\n+\tint _M_fd;\n+      };\n       mt19937    _M_mt;\n     };\n   };"}, {"sha": "85cb2df4287a1ec7c28545487871d6ab430aad5f", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 244, "deletions": 57, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -23,19 +23,30 @@\n // <http://www.gnu.org/licenses/>.\n \n #define _GLIBCXX_USE_CXX11_ABI 1\n+#define _CRT_RAND_S // define this before including <stdlib.h> to get rand_s\n+\n #include <random>\n \n #ifdef  _GLIBCXX_USE_C99_STDINT_TR1\n \n #if defined __i386__ || defined __x86_64__\n # include <cpuid.h>\n+# ifdef _GLIBCXX_X86_RDRAND\n+#  define USE_RDRAND 1\n+# endif\n+# ifdef _GLIBCXX_X86_RDSEED\n+#  define USE_RDSEED 1\n+# endif\n #endif\n \n #include <cerrno>\n #include <cstdio>\n \n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#if defined _GLIBCXX_HAVE_UNISTD_H && defined _GLIBCXX_HAVE_FCNTL_H\n # include <unistd.h>\n+# include <fcntl.h>\n+// Use POSIX open, close, read etc. instead of ISO fopen, fclose, fread\n+# define USE_POSIX_FILE_IO\n #endif\n \n #ifdef _GLIBCXX_HAVE_SYS_IOCTL_H\n@@ -50,105 +61,273 @@\n # include <linux/random.h>\n #endif\n \n+#ifdef _GLIBCXX_USE_CRT_RAND_S\n+# include <stdlib.h>\n+#endif\n+\n+#if defined USE_RDRAND || defined USE_RDSEED \\\n+  || defined _GLIBCXX_USE_CRT_RAND_S || defined _GLIBCXX_USE_DEV_RANDOM\n+# pragma GCC poison _M_mt\n+#else\n+// Use the mt19937 member of the union, as in previous GCC releases.\n+# define USE_MT19937 1\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n   namespace\n   {\n-    static unsigned long\n-    _M_strtoul(const std::string& __str)\n-    {\n-      unsigned long __ret = 5489UL;\n-      if (__str != \"mt19937\")\n-\t{\n-\t  const char* __nptr = __str.c_str();\n-\t  char* __endptr;\n-\t  __ret = std::strtoul(__nptr, &__endptr, 0);\n-\t  if (*__nptr == '\\0' || *__endptr != '\\0')\n-\t    std::__throw_runtime_error(__N(\"random_device::_M_strtoul\"\n-\t\t\t\t\t   \"(const std::string&)\"));\n-\t}\n-      return __ret;\n-    }\n-\n-#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n+#if USE_RDRAND\n     unsigned int\n     __attribute__ ((target(\"rdrnd\")))\n-    __x86_rdrand(void)\n+    __x86_rdrand(void*)\n     {\n       unsigned int retries = 100;\n       unsigned int val;\n \n       while (__builtin_ia32_rdrand32_step(&val) == 0)\n \tif (--retries == 0)\n-\t  std::__throw_runtime_error(__N(\"random_device::__x86_rdrand(void)\"));\n+\t  std::__throw_runtime_error(__N(\"random_device: rdrand failed\"));\n \n       return val;\n     }\n #endif\n+\n+#if USE_RDSEED\n+    unsigned int\n+    __attribute__ ((target(\"rdseed\")))\n+    __x86_rdseed(void*)\n+    {\n+      unsigned int retries = 100;\n+      unsigned int val;\n+\n+      while (__builtin_ia32_rdseed_si_step(&val) == 0)\n+\t{\n+\t  if (--retries == 0)\n+\t    std::__throw_runtime_error(__N(\"random_device: rdseed failed\"));\n+\t  __builtin_ia32_pause();\n+\t}\n+\n+      return val;\n+    }\n+#endif\n+\n+#ifdef _GLIBCXX_USE_CRT_RAND_S\n+    unsigned int\n+    __winxp_rand_s(void*)\n+    {\n+      unsigned int val;\n+      if (::rand_s(&val) != 0)\n+\tstd::__throw_runtime_error(__N(\"random_device: rand_s failed\"));\n+      return val;\n+    }\n+#endif\n   }\n \n   void\n   random_device::_M_init(const std::string& token)\n   {\n-    const char *fname = token.c_str();\n+#ifdef USE_MT19937\n+    // If no real random device is supported then use the mt19937 engine.\n+    _M_init_pretr1(token);\n+    return;\n+#else\n+\n+    _M_file = nullptr;\n+    _M_func = nullptr;\n+    _M_fd = -1;\n+\n+    const char* fname [[gnu::unused]] = nullptr;\n+    bool default_token [[gnu::unused]] = false;\n+\n+    enum { rand_s, rdseed, rdrand, device_file } which;\n \n     if (token == \"default\")\n       {\n-#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n+\tdefault_token = true;\n+\tfname = \"/dev/urandom\";\n+#if defined _GLIBCXX_USE_CRT_RAND_S\n+\twhich = rand_s;\n+#elif defined USE_RDSEED\n+\twhich = rdseed;\n+#elif defined USE_RDRAND\n+\twhich = rdrand;\n+#elif defined _GLIBCXX_USE_DEV_RANDOM\n+\twhich = device_file;\n+#else\n+# error \"either define USE_MT19937 above or set the default device here\"\n+#endif\n+      }\n+#ifdef USE_RDSEED\n+    else if (token == \"rdseed\")\n+      which = rdseed;\n+#endif // USE_RDSEED\n+#ifdef USE_RDRAND\n+    else if (token == \"rdrand\" || token == \"rdrnd\")\n+      which = rdrand;\n+#endif // USE_RDRAND\n+#ifdef _GLIBCXX_USE_CRT_RAND_S\n+    else if (token == \"rand_s\")\n+      which = rand_s;\n+#endif // _GLIBCXX_USE_CRT_RAND_S\n+#ifdef _GLIBCXX_USE_DEV_RANDOM\n+    else if (token == \"/dev/urandom\" || token == \"/dev/random\")\n+      {\n+\tfname = token.c_str();\n+\twhich = device_file;\n+      }\n+#endif // _GLIBCXX_USE_DEV_RANDOM\n+    else\n+      std::__throw_runtime_error(\n+\t  __N(\"random_device::random_device(const std::string&):\"\n+\t      \" unsupported token\"));\n+\n+    switch (which)\n+    {\n+#ifdef _GLIBCXX_USE_CRT_RAND_S\n+      case rand_s:\n+      {\n+\t_M_func = &__winxp_rand_s;\n+\treturn;\n+      }\n+#endif // _GLIBCXX_USE_CRT_RAND_S\n+#ifdef USE_RDSEED\n+      case rdseed:\n+      {\n+\tunsigned int eax, ebx, ecx, edx;\n+\t// Check availability of cpuid and, for now at least, also the\n+\t// CPU signature for Intel and AMD.\n+\tif (__get_cpuid_max(0, &ebx) > 0\n+\t    && (ebx == signature_INTEL_ebx || ebx == signature_AMD_ebx))\n+\t  {\n+\t    // CPUID.(EAX=07H, ECX=0H):EBX.RDSEED[bit 18]\n+\t    __cpuid_count(7, 0, eax, ebx, ecx, edx);\n+\t    if (ebx & bit_RDSEED)\n+\t      {\n+\t\t_M_func = &__x86_rdseed;\n+\t\treturn;\n+\t      }\n+\t  }\n+\t// If rdseed was explicitly requested then we're done here.\n+\tif (!default_token)\n+\t  break;\n+\t// Otherwise fall through to try the next available option.\n+\t[[gnu::fallthrough]];\n+      }\n+#endif // USE_RDSEED\n+#ifdef USE_RDRAND\n+      case rdrand:\n+      {\n \tunsigned int eax, ebx, ecx, edx;\n \t// Check availability of cpuid and, for now at least, also the\n-\t// CPU signature for Intel's\n-\tif (__get_cpuid_max(0, &ebx) > 0 && ebx == signature_INTEL_ebx)\n+\t// CPU signature for Intel and AMD.\n+\tif (__get_cpuid_max(0, &ebx) > 0\n+\t    && (ebx == signature_INTEL_ebx || ebx == signature_AMD_ebx))\n \t  {\n+\t    // CPUID.01H:ECX.RDRAND[bit 30]\n \t    __cpuid(1, eax, ebx, ecx, edx);\n \t    if (ecx & bit_RDRND)\n \t      {\n-\t\t_M_file = nullptr;\n+\t\t_M_func = &__x86_rdrand;\n \t\treturn;\n \t      }\n \t  }\n-#endif\n-\n-\tfname = \"/dev/urandom\";\n+\t// If rdrand was explicitly requested then we're done here.\n+\tif (!default_token)\n+\t  break;\n+\t// Otherwise fall through to try the next available option.\n+\t[[gnu::fallthrough]];\n       }\n-    else if (token != \"/dev/urandom\" && token != \"/dev/random\")\n-    fail:\n-      std::__throw_runtime_error(__N(\"random_device::\"\n-\t\t\t\t     \"random_device(const std::string&)\"));\n-\n-    _M_file = static_cast<void*>(std::fopen(fname, \"rb\"));\n-    if (!_M_file)\n-      goto fail;\n+#endif // USE_RDRAND\n+#ifdef _GLIBCXX_USE_DEV_RANDOM\n+      case device_file:\n+      {\n+#ifdef USE_POSIX_FILE_IO\n+\t_M_fd = ::open(fname, O_RDONLY);\n+\tif (_M_fd != -1)\n+\t  {\n+\t    // Set _M_file to non-null so that _M_fini() will do clean up.\n+\t    _M_file = &_M_fd;\n+\t    return;\n+\t  }\n+#else // USE_POSIX_FILE_IO\n+\t_M_file = static_cast<void*>(std::fopen(fname, \"rb\"));\n+\tif (_M_file)\n+\t  return;\n+#endif // USE_POSIX_FILE_IO\n+\t[[gnu::fallthrough]];\n+      }\n+#endif // _GLIBCXX_USE_DEV_RANDOM\n+      default:\n+      { }\n+    }\n+    std::__throw_runtime_error(\n+\t__N(\"random_device::random_device(const std::string&):\"\n+\t    \" device not available\"));\n+#endif // USE_MT19937\n   }\n \n+  // This function is called by _M_init for targets that use mt19937 for\n+  // randomness, and by code compiled against old releases of libstdc++.\n   void\n   random_device::_M_init_pretr1(const std::string& token)\n   {\n-    _M_mt.seed(_M_strtoul(token));\n+#ifdef USE_MT19937\n+    unsigned long seed = 5489UL;\n+    if (token != \"default\" && token != \"mt19937\")\n+      {\n+\tconst char* nptr = token.c_str();\n+\tchar* endptr;\n+\tseed = std::strtoul(nptr, &endptr, 0);\n+\tif (*nptr == '\\0' || *endptr != '\\0')\n+\t  std::__throw_runtime_error(__N(\"random_device::_M_init_pretr1\"\n+\t\t\t\t\t \"(const std::string&)\"));\n+      }\n+    _M_mt.seed(seed);\n+#else\n+    // Convert old default token \"mt19937\" or numeric seed tokens to \"default\".\n+    if (token == \"mt19937\" || isdigit((unsigned char)token[0]))\n+      _M_init(\"default\");\n+    else\n+      _M_init(token);\n+#endif\n   }\n \n   void\n   random_device::_M_fini()\n   {\n-    if (_M_file)\n-      std::fclose(static_cast<FILE*>(_M_file));\n+    // _M_file == nullptr means no resources to free.\n+    if (!_M_file)\n+      return;\n+\n+#ifdef USE_POSIX_FILE_IO\n+    ::close(_M_fd);\n+    _M_fd = -1;\n+#else\n+    std::fclose(static_cast<FILE*>(_M_file));\n+#endif\n+    _M_file = nullptr;\n   }\n \n   random_device::result_type\n   random_device::_M_getval()\n   {\n-#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n-    if (!_M_file)\n-      return __x86_rdrand();\n+#ifdef USE_MT19937\n+    return _M_mt();\n+#else\n+\n+#if defined USE_RDRAND || defined USE_RDSEED || defined _GLIBCXX_USE_CRT_RAND_S\n+    if (_M_func)\n+      return _M_func(nullptr);\n #endif\n \n-    result_type __ret;\n-    void* p = &__ret;\n+    result_type ret;\n+    void* p = &ret;\n     size_t n = sizeof(result_type);\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#ifdef USE_POSIX_FILE_IO\n     do\n       {\n-\tconst int e = read(fileno(static_cast<FILE*>(_M_file)), p, n);\n+\tconst int e = ::read(_M_fd, p, n);\n \tif (e > 0)\n \t  {\n \t    n -= e;\n@@ -158,34 +337,40 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \t  __throw_runtime_error(__N(\"random_device could not be read\"));\n       }\n     while (n > 0);\n-#else\n+#else // USE_POSIX_FILE_IO\n     const size_t e = std::fread(p, n, 1, static_cast<FILE*>(_M_file));\n     if (e != 1)\n       __throw_runtime_error(__N(\"random_device could not be read\"));\n-#endif\n+#endif // USE_POSIX_FILE_IO\n \n-    return __ret;\n+    return ret;\n+#endif // USE_MT19937\n   }\n \n+  // Only called by code compiled against old releases of libstdc++.\n+  // Forward the call to _M_getval() and let it decide what to do.\n   random_device::result_type\n   random_device::_M_getval_pretr1()\n-  {\n-    return _M_mt();\n-  }\n+  { return _M_getval(); }\n \n   double\n   random_device::_M_getentropy() const noexcept\n   {\n-#if defined _GLIBCXX_HAVE_SYS_IOCTL_H && defined RNDGETENTCNT\n+#if defined _GLIBCXX_USE_DEV_RANDOM \\\n+    && defined _GLIBCXX_HAVE_SYS_IOCTL_H && defined RNDGETENTCNT\n     if (!_M_file)\n       return 0.0;\n \n-    const int fd = fileno(static_cast<FILE*>(_M_file));\n+#ifdef USE_POSIX_FILE_IO\n+    const int fd = _M_fd;\n+#else\n+    const int fd = ::fileno(static_cast<FILE*>(_M_file));\n+#endif\n     if (fd < 0)\n       return 0.0;\n \n     int ent;\n-    if (ioctl(fd, RNDGETENTCNT, &ent) < 0)\n+    if (::ioctl(fd, RNDGETENTCNT, &ent) < 0)\n       return 0.0;\n \n     if (ent < 0)\n@@ -198,15 +383,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     return static_cast<double>(ent);\n #else\n     return 0.0;\n-#endif\n+#endif // _GLIBCXX_USE_DEV_RANDOM && _GLIBCXX_HAVE_SYS_IOCTL_H && RNDGETENTCNT\n   }\n \n+#ifdef USE_MT19937\n   template class mersenne_twister_engine<\n     uint_fast32_t,\n     32, 624, 397, 31,\n     0x9908b0dfUL, 11,\n     0xffffffffUL, 7,\n     0x9d2c5680UL, 15,\n     0xefc60000UL, 18, 1812433253UL>;\n+#endif // USE_MT19937\n }\n-#endif\n+#endif // _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "2670ad7225a9edc3e9b133eb4ebacf5776b981a2", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/85494.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2F85494.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c0d878a8b5bf39dbea4c192fed26d340524439/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2F85494.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2F85494.cc?ref=b0c0d878a8b5bf39dbea4c192fed26d340524439", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-effective-target random_device }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned v1[3], v2[3];\n+  std::random_device d1, d2;\n+  for (auto& v : v1)\n+    v = d1();\n+  for (auto& v : v2)\n+    v = d2();\n+  VERIFY (v1[0] != v2[0] || v1[1] != v2[1] || v1[2] != v2[2] );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}