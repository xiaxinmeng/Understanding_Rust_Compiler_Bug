{"sha": "b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhMWNiYWViMTkwNzZmY2E5YjBkZWIwMDEzOGZlZGYwYzhjMzZmZg==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2000-08-24T20:31:35Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2000-08-24T20:31:35Z"}, "message": "optabs.c (init_optabs): Initialize fixtab...\n\n\t* optabs.c (init_optabs): Initialize fixtab, fixtrunctab, floattab,\n\tand extendtab within their proper array boundaries.\n\t* emit-rtl.c (init_emit_once): Pass `const_tiny_rtx' with bounds\n\tfor the entire array.\n\n\t* config/arm/arm.c (arm_override_options): Use ARRAY_SIZE.\n\t* config/alpha/alpha.c (alpha_lookup_xfloating_lib_func): Likewise.\n\t* config/avr/avr.c (order_regs_for_local_alloc): Likewise.\n\t* config/fr30/fr30.c (fr30_print_operand): Likewise.\n\t* config/i386/dgux.c (output_options): Likewise.\n\t* config/i386/dgux.h (ASM_FILE_START): Likewise.\n\t* config/m88k/m88k.c (output_options): Likewise.\n\t* config/m88k/m88k.h (ASM_FILE_START): Likewise.\n\t* config/mcore/mcore.c (mcore_output_inline_const_forced,\n\tlayout_mcore_frame, handle_structs_in_regs): Likewise.\n\t* config/mips/mips.c (output_block_move): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_override_options,\n\trs6000_file_start): Likewise.\n\t* config/sparc/sparc.c (sparc_add_gc_roots): Likewise.\n\t* fixinc/fixfixes.c (FIX_TABLE_CT): Likewise.\n\t* fixinc/fixtests.c (TEST_TABLE_CT): Likewise.\n\t* builtins.c (expand_builtin_setjmp): Likewise.\n\t* expr.c (safe_from_p): Likewise.\n\t* flow.c (life_analysis): Likewise.\n\t* fold-const.c (size_int_type_wide): Likewise.\n\t* gcc.c (translate_options, init_spec, set_spec, main): Likewise.\n\t* genattrtab.c (make_length_attrs): Likewise.\n\t* genopinit.c (gen_insn): Likewise.\n\t* genrecog.c (NUM_KNOWN_PREDS, NUM_SPECIAL_MODE_PREDS): Likewise.\n\t* global.c (global_alloc): Likewise.\n\t* local-alloc.c (find_free_reg): Likewise.\n\t* mips-tdump.c (print_symbol): Likewise.\n\t* mips-tfile.c (parse_def, parse_input): Likewise.\n\t* reload1.c (NUM_ELIMINABLE_REGS): Likewise.\n\t* stmt.c (expand_nl_goto_receiver): Likewise.\n\t* stor-layout.c (set_sizetype): Likewise.\n\t* varasm.c (decode_reg_name): Likewise.\n\t* toplev.c (decode_f_option, decode_W_option,\n\tset_target_switch, print_switch_values): Likewise.\n\t(NUM_ELEM): Remove macro.\n\t(display_help, main): s/NUM_ELEM/ARRAY_SIZE/\n\nFrom-SVN: r35949", "tree": {"sha": "598c21af74eb9deec6a463196f439a03d7a53b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/598c21af74eb9deec6a463196f439a03d7a53b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/comments", "author": null, "committer": null, "parents": [{"sha": "2f26c11dbb2d0f1e37f16120c455147a00dff716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f26c11dbb2d0f1e37f16120c455147a00dff716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f26c11dbb2d0f1e37f16120c455147a00dff716"}], "stats": {"total": 246, "additions": 137, "deletions": 109}, "files": [{"sha": "650bb3613608011f96132e9fb031fd836d7c25d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1,3 +1,47 @@\n+2000-08-24  Greg McGary  <greg@mcgary.org>\n+\n+\t* optabs.c (init_optabs): Initialize fixtab, fixtrunctab, floattab,\n+\tand extendtab within their proper array boundaries.\n+\t* emit-rtl.c (init_emit_once): Pass `const_tiny_rtx' with bounds\n+\tfor the entire array.\n+\n+\t* config/arm/arm.c (arm_override_options): Use ARRAY_SIZE.\n+\t* config/alpha/alpha.c (alpha_lookup_xfloating_lib_func): Likewise.\n+\t* config/avr/avr.c (order_regs_for_local_alloc): Likewise.\n+\t* config/fr30/fr30.c (fr30_print_operand): Likewise.\n+\t* config/i386/dgux.c (output_options): Likewise.\n+\t* config/i386/dgux.h (ASM_FILE_START): Likewise.\n+\t* config/m88k/m88k.c (output_options): Likewise.\n+\t* config/m88k/m88k.h (ASM_FILE_START): Likewise.\n+\t* config/mcore/mcore.c (mcore_output_inline_const_forced,\n+\tlayout_mcore_frame, handle_structs_in_regs): Likewise.\n+\t* config/mips/mips.c (output_block_move): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_override_options,\n+\trs6000_file_start): Likewise.\n+\t* config/sparc/sparc.c (sparc_add_gc_roots): Likewise.\n+\t* fixinc/fixfixes.c (FIX_TABLE_CT): Likewise.\n+\t* fixinc/fixtests.c (TEST_TABLE_CT): Likewise.\n+\t* builtins.c (expand_builtin_setjmp): Likewise.\n+\t* expr.c (safe_from_p): Likewise.\n+\t* flow.c (life_analysis): Likewise.\n+\t* fold-const.c (size_int_type_wide): Likewise.\n+\t* gcc.c (translate_options, init_spec, set_spec, main): Likewise.\n+\t* genattrtab.c (make_length_attrs): Likewise.\n+\t* genopinit.c (gen_insn): Likewise.\n+\t* genrecog.c (NUM_KNOWN_PREDS, NUM_SPECIAL_MODE_PREDS): Likewise.\n+\t* global.c (global_alloc): Likewise.\n+\t* local-alloc.c (find_free_reg): Likewise.\n+\t* mips-tdump.c (print_symbol): Likewise.\n+\t* mips-tfile.c (parse_def, parse_input): Likewise.\n+\t* reload1.c (NUM_ELIMINABLE_REGS): Likewise.\n+\t* stmt.c (expand_nl_goto_receiver): Likewise.\n+\t* stor-layout.c (set_sizetype): Likewise.\n+\t* varasm.c (decode_reg_name): Likewise.\n+\t* toplev.c (decode_f_option, decode_W_option,\n+\tset_target_switch, print_switch_values): Likewise.\n+\t(NUM_ELEM): Remove macro.\n+\t(display_help, main): s/NUM_ELEM/ARRAY_SIZE/\n+\n 2000-08-24  Greg McGary  <greg@mcgary.org>\n \n \t* tree.h (enum tree_index): New member `TI_MAIN_IDENTIFIER'."}, {"sha": "4f3f7a9fd24dab168cf21401a9f06a2c286fe696", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -417,12 +417,12 @@ expand_builtin_setjmp (buf_addr, target, first_label, next_label)\n       size_t i;\n       static struct elims {int from, to;} elim_regs[] = ELIMINABLE_REGS;\n \n-      for (i = 0; i < sizeof elim_regs / sizeof elim_regs[0]; i++)\n+      for (i = 0; i < ARRAY_SIZE (elim_regs); i++)\n \tif (elim_regs[i].from == ARG_POINTER_REGNUM\n \t    && elim_regs[i].to == HARD_FRAME_POINTER_REGNUM)\n \t  break;\n \n-      if (i == sizeof elim_regs / sizeof elim_regs [0])\n+      if (i == ARRAY_SIZE (elim_regs))\n #endif\n \t{\n \t  /* Now restore our arg pointer from the address at which it"}, {"sha": "ef6845b4f77d3b0e55d9dde787dc9919647c5021", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1988,7 +1988,7 @@ alpha_lookup_xfloating_lib_func (code)\n     };\n \n   const struct xfloating_op *ops;\n-  const long n = sizeof(osf_xfloating_ops) / sizeof(osf_xfloating_ops[0]);\n+  const long n = ARRAY_SIZE (osf_xfloating_ops);\n   long i;\n \n   /* How irritating.  Nothing to key off for the table.  Hardcode"}, {"sha": "6abe7321ab17ba1ac14a38cd61e09d55b18cbe36", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -317,7 +317,7 @@ arm_override_options ()\n   unsigned i;\n   \n   /* Set up the flags based on the cpu/architecture selected by the user.  */\n-  for (i = sizeof (arm_select) / sizeof (arm_select[0]); i--;)\n+  for (i = ARRAY_SIZE (arm_select); i--;)\n     {\n       struct arm_cpu_select * ptr = arm_select + i;\n       "}, {"sha": "c2ee0055b82253969327cebf290653d6716c2603", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -575,7 +575,7 @@ fr30_print_operand (file, x, code)\n       switch (GET_CODE (x0))\n \t{\n \tcase REG:\n-\t  if ((unsigned) REGNO (x0) >= (sizeof (reg_names) / sizeof (reg_names[0])))\n+\t  if ((unsigned) REGNO (x0) >= ARRAY_SIZE (reg_names))\n \t    abort ();\n \t  fprintf (file, \"@%s\", reg_names [REGNO (x0)]);\n \t  break;"}, {"sha": "069a7acceb3ad7718716076be240a5f412b72147", "filename": "gcc/config/i386/dgux.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fi386%2Fdgux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fi386%2Fdgux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for GNU compiler for Intel 80x86 running DG/ux\n-   Copyright (C) 1993, 1995, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1997, 1999, 2000 Free Software Foundation, Inc.\n    Currently maintained by (gcc@dg-rtp.dg.com)\n \n This file is part of GNU CC.\n@@ -90,7 +90,7 @@ output_options (file, f_options, f_len, W_options, W_len,\n       pos = output_option (file, sep, \"-W\", W_options[j].string,\n \t\t\t   indent, pos, max);\n \n-  for (j = 0; j < sizeof m_options / sizeof m_options[0]; j++)\n+  for (j = 0; j < ARRAY_SIZE (m_options); j++)\n     if (m_options[j].name[0] != '\\0'\n \t&& m_options[j].value > 0\n \t&& ((m_options[j].value & target_flags)"}, {"sha": "10982c505cd116a42259d30d6921e15a3e685d5d", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"i386/sysv4.h\"\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.9 $\"\n+#define VERSION_INFO2   \"$Revision: 1.10 $\"\n #endif\n \n #ifndef VERSION_STRING\n@@ -85,8 +85,8 @@ Boston, MA 02111-1307, USA.  */\n /* Override svr[34].h.  */\n #undef\tASM_FILE_START\n #define ASM_FILE_START(FILE) \\\n-  output_file_start (FILE, f_options, sizeof f_options / sizeof f_options[0], \\\n-\t\t     W_options, sizeof W_options / sizeof W_options[0])\n+  output_file_start (FILE, f_options, ARRAY_SIZE (f_options), \\\n+\t\t     W_options, ARRAY_SIZE (W_options))\n \n /* ix86 abi specified type for wchar_t */\n "}, {"sha": "86c92e754476cd08e2729153fbdb672b7c9f6cac", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1544,7 +1544,7 @@ output_options (file, f_options, f_len, W_options, W_len,\n       pos = output_option (file, sep, \"-W\", W_options[j].string,\n \t\t\t   indent, pos, max);\n \n-  for (j = 0; j < (long) (sizeof m_options / sizeof m_options[0]); j++)\n+  for (j = 0; j < (long) ARRAY_SIZE (m_options); j++)\n     if (m_options[j].name[0] != '\\0'\n \t&& m_options[j].value > 0\n \t&& ((m_options[j].value & target_flags)"}, {"sha": "1412ff2f08ac5fdea12ddf3e5748d9dc6d183563", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1818,9 +1818,9 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define ASM_FILE_START(FILE) \\\n   output_file_start (FILE, \\\n \t(struct m88k_lang_independent_options *) f_options, \\\n-\tsizeof f_options / sizeof f_options[0], \\\n+\tARRAY_SIZE (f_options), \\\n \t(struct m88k_lang_independent_options *) W_options, \\\n-\tsizeof W_options / sizeof W_options[0])\n+\tARRAY_SIZE (W_options))\n \n #undef\tASM_FILE_END\n "}, {"sha": "8dbcb2bac7a27f43af779d302c4017170f60f5e4", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1158,7 +1158,7 @@ mcore_output_inline_const_forced (insn, operands, mode)\n   if (mcore_const_ok_for_inline (value))\n     return output_inline_const (SImode, operands);\n \n-  for (i = 0; (unsigned) i < sizeof (part) / sizeof (part[0]); i++)\n+  for (i = 0; (unsigned) i < ARRAY_SIZE (part); i++)\n     {\n       part[i].shift = 0;\n       part[i].low = (value & 0x1F);\n@@ -1990,7 +1990,7 @@ layout_mcore_frame (infp)\n      (1) run fast,\n      (2) reduce instruction space, or\n      (3) reduce stack space.  */\n-  for (i = 0; i < sizeof (infp->growth) / sizeof (infp->growth[0]); i++)\n+  for (i = 0; i < ARRAY_SIZE (infp->growth); i++)\n     infp->growth[i] = 0;\n \n   regarg      = infp->reg_size + infp->arg_size;\n@@ -3139,7 +3139,7 @@ handle_structs_in_regs (mode, type, reg)\n         }\n \n       /* We assume here that NPARM_REGS == 6.  The assert checks this.  */\n-      assert (sizeof (arg_regs) / sizeof (arg_regs[0]) == 6);\n+      assert (ARRAY_SIZE (arg_regs) == 6);\n       rtvec = gen_rtvec (nregs, arg_regs[0], arg_regs[1], arg_regs[2],\n \t\t\t  arg_regs[3], arg_regs[4], arg_regs[5]);\n       "}, {"sha": "f059dddd61652eda97bf8bddcba16c8b2d8636df", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -3417,10 +3417,7 @@ output_block_move (insn, operands, num_regs, move_type)\n   /* ??? Detect a bug in GCC, where it can give us a register\n      the same as one of the addressing registers and reduce\n      the number of registers available.  */\n-  for (i = 4;\n-       i < last_operand\n-       && safe_regs < (int)(sizeof(xoperands) / sizeof(xoperands[0]));\n-       i++)\n+  for (i = 4; i < last_operand && safe_regs < (int) ARRAY_SIZE (xoperands); i++)\n     if (! reg_mentioned_p (operands[i], operands[0])\n \t&& ! reg_mentioned_p (operands[i], operands[1]))\n       xoperands[safe_regs++] = operands[i];\n@@ -3515,8 +3512,8 @@ output_block_move (insn, operands, num_regs, move_type)\n \t}\n     }\n \n-  if (num_regs > (int)(sizeof (load_store) / sizeof (load_store[0])))\n-    num_regs = sizeof (load_store) / sizeof (load_store[0]);\n+  if (num_regs > (int) ARRAY_SIZE (load_store))\n+    num_regs = ARRAY_SIZE (load_store);\n \n   else if (num_regs < 1)\n     abort_with_insn (insn,"}, {"sha": "18106cb0c7a33f84a7b51061ac6b1f05889a532a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -293,7 +293,7 @@ rs6000_override_options (default_cpu)\n   rs6000_select[0].string = default_cpu;\n   rs6000_cpu = TARGET_POWERPC64 ? PROCESSOR_DEFAULT64 : PROCESSOR_DEFAULT;\n \n-  for (i = 0; i < sizeof (rs6000_select) / sizeof (rs6000_select[0]); i++)\n+  for (i = 0; i < ARRAY_SIZE (rs6000_select); i++)\n     {\n       ptr = &rs6000_select[i];\n       if (ptr->string != (char *)0 && ptr->string[0] != '\\0')\n@@ -433,7 +433,7 @@ rs6000_file_start (file, default_cpu)\n       sprintf (buffer, \"\\n%s rs6000/powerpc options:\", ASM_COMMENT_START);\n       rs6000_select[0].string = default_cpu;\n \n-      for (i = 0; i < sizeof (rs6000_select) / sizeof (rs6000_select[0]); i++)\n+      for (i = 0; i < ARRAY_SIZE (rs6000_select); i++)\n \t{\n \t  ptr = &rs6000_select[i];\n \t  if (ptr->string != (char *)0 && ptr->string[0] != '\\0')"}, {"sha": "82e9a742222a799cf54eed89832bc03dd5aa004a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -8569,8 +8569,6 @@ sparc_add_gc_roots ()\n   ggc_add_rtx_root (&get_pc_symbol, 1);\n   ggc_add_rtx_root (&sparc_addr_diff_list, 1);\n   ggc_add_rtx_root (&sparc_addr_list, 1);\n-  ggc_add_root (ultra_pipe_hist, \n-\t\tsizeof (ultra_pipe_hist) / sizeof (ultra_pipe_hist[0]),\n-\t\tsizeof (ultra_pipe_hist[0]),\n-\t\t&mark_ultrasparc_pipeline_state);\n+  ggc_add_root (ultra_pipe_hist, ARRAY_SIZE (ultra_pipe_hist),\n+\t\tsizeof (ultra_pipe_hist[0]), &mark_ultrasparc_pipeline_state);\n }"}, {"sha": "632c4e24e254ee3bd51f33730cc923b6c8563f9e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -4180,7 +4180,10 @@ init_emit_once (line_numbers)\n     if (GET_MODE_CLASS (mode) == MODE_CC)\n       const_tiny_rtx[0][(int) mode] = const0_rtx;\n \n-  ggc_add_rtx_root (&const_tiny_rtx[0][0], sizeof(const_tiny_rtx)/sizeof(rtx));\n+  /* For bounded pointers, `&const_tiny_rtx[0][0]' is not the same as\n+     `(rtx *) const_tiny_rtx'.  The former has bounds that only cover\n+     `const_tiny_rtx[0]', whereas the latter has bounds that cover all.  */\n+  ggc_add_rtx_root ((rtx *) const_tiny_rtx, sizeof const_tiny_rtx / sizeof (rtx));\n   ggc_add_rtx_root (&const_true_rtx, 1);\n \n #ifdef RETURN_ADDRESS_POINTER_REGNUM"}, {"sha": "a5c306fd3a5389e6cc505cd72b80fb686bb77243", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -5404,7 +5404,7 @@ safe_from_p (x, exp, top_p)\n       int rtn;\n \n       save_expr_count = 0;\n-      save_expr_size = sizeof (save_expr_trees) / sizeof (save_expr_trees[0]);\n+      save_expr_size = ARRAY_SIZE (save_expr_trees);\n       save_expr_rewritten = &save_expr_trees[0];\n \n       rtn = safe_from_p (x, exp, 1);"}, {"sha": "e419126944c81a03fbd97471969a1c8871df358e", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -706,7 +706,7 @@ apply_fix( p_fixd, filname )\n #define _FT_(n,p) { n, p },\n   static fix_entry_t fix_table[] = { FIXUP_TABLE { NULL, NULL }};\n #undef _FT_\n-#define FIX_TABLE_CT ((sizeof(fix_table)/sizeof(fix_table[0]))-1)\n+#define FIX_TABLE_CT (ARRAY_SIZE (fix_table)-1)\n \n   tCC* fixname = p_fixd->patch_args[0];\n   char* buf;"}, {"sha": "3b0c79833dfd0fd8adaad47aa2769a8275b69721", "filename": "gcc/fixinc/fixtests.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ffixinc%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ffixinc%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixtests.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -129,7 +129,7 @@ run_test( tname, fname, text )\n #define _FT_(n,p) { n, p },\n   static test_entry_t test_table[] = { FIX_TEST_TABLE { NULL, NULL }};\n #undef _FT_\n-#define TEST_TABLE_CT ((sizeof(test_table)/sizeof(test_table[0]))-1)\n+#define TEST_TABLE_CT (ARRAY_SIZE (test_table)-1)\n \n   int ct = TEST_TABLE_CT;\n   test_entry_t* pte = test_table;"}, {"sha": "c242490557c0641b46de97ecd0f11492615dacd7", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -2624,7 +2624,7 @@ life_analysis (f, file, flags)\n   CLEAR_HARD_REG_SET (elim_reg_set);\n \n #ifdef ELIMINABLE_REGS\n-  for (i = 0; i < (int) (sizeof eliminables / sizeof eliminables[0]); i++)\n+  for (i = 0; i < (int) ARRAY_SIZE (eliminables); i++)\n     SET_HARD_REG_BIT (elim_reg_set, eliminables[i].from);\n #else\n   SET_HARD_REG_BIT (elim_reg_set, FRAME_POINTER_REGNUM);"}, {"sha": "ecc7c3200aad19a6b1f5037bc42ac047ba710dc7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1870,7 +1870,7 @@ size_int_type_wide (number, type)\n   /* If this is a positive number that fits in the table we use to hold\n      cached entries, see if it is already in the table and put it there\n      if not.  */\n-  if (number >= 0 && number < (int) (sizeof size_table / sizeof size_table[0]))\n+  if (number >= 0 && number < (int) ARRAY_SIZE (size_table))\n     {\n       if (size_table[number] != 0)\n \tfor (t = size_table[number]; t != 0; t = TREE_CHAIN (t))"}, {"sha": "4aa4f9488cf0e7fce1a98b7e9fdb8de5e4792a05", "filename": "gcc/gcc.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -880,7 +880,7 @@ translate_options (argcp, argvp)\n \t{\n \t  size_t j;\n \t  /* Find a mapping that applies to this option.  */\n-\t  for (j = 0; j < sizeof (option_map) / sizeof (option_map[0]); j++)\n+\t  for (j = 0; j < ARRAY_SIZE (option_map); j++)\n \t    {\n \t      size_t optlen = strlen (option_map[j].name);\n \t      size_t arglen = strlen (argv[i]);\n@@ -897,17 +897,15 @@ translate_options (argcp, argvp)\n \t\t  if (arglen < optlen)\n \t\t    {\n \t\t      size_t k;\n-\t\t      for (k = j + 1;\n-\t\t\t   k < sizeof (option_map) / sizeof (option_map[0]);\n-\t\t\t   k++)\n+\t\t      for (k = j + 1; k < ARRAY_SIZE (option_map); k++)\n \t\t\tif (strlen (option_map[k].name) >= arglen\n \t\t\t    && !strncmp (argv[i], option_map[k].name, arglen))\n \t\t\t  {\n \t\t\t    error (\"Ambiguous abbreviation %s\", argv[i]);\n \t\t\t    break;\n \t\t\t  }\n \n-\t\t      if (k != sizeof (option_map) / sizeof (option_map[0]))\n+\t\t      if (k != ARRAY_SIZE (option_map))\n \t\t\tbreak;\n \t\t    }\n \n@@ -1130,10 +1128,9 @@ init_spec ()\n \n #ifdef EXTRA_SPECS\n   extra_specs = (struct spec_list *)\n-    xcalloc (sizeof(struct spec_list),\n-\t     (sizeof(extra_specs_1)/sizeof(extra_specs_1[0])));\n+    xcalloc (sizeof (struct spec_list), ARRAY_SIZE (extra_specs_1));\n   \n-  for (i = (sizeof(extra_specs_1) / sizeof(extra_specs_1[0])) - 1; i >= 0; i--)\n+  for (i = ARRAY_SIZE (extra_specs_1) - 1; i >= 0; i--)\n     {\n       sl = &extra_specs[i];\n       sl->name = extra_specs_1[i].name;\n@@ -1145,7 +1142,7 @@ init_spec ()\n     }\n #endif\n \n-  for (i = (sizeof (static_specs) / sizeof (static_specs[0])) - 1; i >= 0; i--)\n+  for (i = ARRAY_SIZE (static_specs) - 1; i >= 0; i--)\n     {\n       sl = &static_specs[i];\n       sl->next = next;\n@@ -1174,8 +1171,7 @@ set_spec (name, spec)\n   if (!specs)\n     {\n       struct spec_list *next = (struct spec_list *)0;\n-      for (i = (sizeof (static_specs) / sizeof (static_specs[0])) - 1;\n-\t   i >= 0; i--)\n+      for (i = ARRAY_SIZE (static_specs) - 1; i >= 0; i--)\n \t{\n \t  sl = &static_specs[i];\n \t  sl->next = next;\n@@ -5170,9 +5166,7 @@ main (argc, argv)\n     multilib_exclusions = obstack_finish (&multilib_obstack);\n     \n     need_space = FALSE;\n-    for (i = 0;\n-\t i < sizeof (multilib_defaults_raw) / sizeof (multilib_defaults_raw[0]);\n-\t i++)\n+    for (i = 0; i < ARRAY_SIZE (multilib_defaults_raw); i++)\n       {\n \tif (need_space)\n \t  obstack_1grow (&multilib_obstack, ' ');"}, {"sha": "a6a9a9010ea88d1d5544cc0496069f4f340e8877", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -2491,7 +2491,7 @@ make_length_attrs ()\n   length_attr->is_special = 1;\n \n   /* Make each new attribute, in turn.  */\n-  for (i = 0; i < sizeof new_names / sizeof new_names[0]; i++)\n+  for (i = 0; i < ARRAY_SIZE (new_names); i++)\n     {\n       make_internal_attr (new_names[i],\n \t\t\t  substitute_address (length_attr->default_val->value,"}, {"sha": "993c347a1b0e637622bb23e63f79e1a0656b63a8", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -134,7 +134,7 @@ gen_insn (insn)\n   /* See if NAME matches one of the patterns we have for the optabs we know\n      about.  */\n \n-  for (pindex = 0; pindex < sizeof optabs / sizeof optabs[0]; pindex++)\n+  for (pindex = 0; pindex < ARRAY_SIZE (optabs); pindex++)\n     {\n       int force_float = 0, force_int = 0;\n       int force_consec = 0;\n@@ -221,7 +221,7 @@ gen_insn (insn)\n \tbreak;\n     }\n \n-  if (pindex == sizeof optabs / sizeof optabs[0])\n+  if (pindex == ARRAY_SIZE (optabs))\n     return;\n \n   /* We found a match.  If this pattern is only conditionally present,"}, {"sha": "e506f8d85b6742e98cea79f2b0ccacbfb9ef29c2", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -213,7 +213,7 @@ static struct pred_table\n \t\t\t\tLABEL_REF, SUBREG, REG, MEM}}\n };\n \n-#define NUM_KNOWN_PREDS (sizeof preds / sizeof preds[0])\n+#define NUM_KNOWN_PREDS ARRAY_SIZE (preds)\n \n static const char * special_mode_pred_table[] = {\n #ifdef SPECIAL_MODE_PREDICATES\n@@ -222,8 +222,7 @@ static const char * special_mode_pred_table[] = {\n   \"pmode_register_operand\"\n };\n \n-#define NUM_SPECIAL_MODE_PREDS \\\n-  (sizeof (special_mode_pred_table) / sizeof (special_mode_pred_table[0]))\n+#define NUM_SPECIAL_MODE_PREDS ARRAY_SIZE (special_mode_pred_table)\n \n static struct decision *new_decision\n   PARAMS ((const char *, struct decision_head *));"}, {"sha": "7f426df38f6269ca07d594d2b63c22ee3bfbd8a7", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -342,7 +342,7 @@ global_alloc (file)\n   /* Build the regset of all eliminable registers and show we can't use those\n      that we already know won't be eliminated.  */\n #ifdef ELIMINABLE_REGS\n-  for (i = 0; i < sizeof eliminables / sizeof eliminables[0]; i++)\n+  for (i = 0; i < ARRAY_SIZE (eliminables); i++)\n     {\n       SET_HARD_REG_BIT (eliminable_regset, eliminables[i].from);\n "}, {"sha": "f1ac07cebe78d5bf813def692fe36ac1c25a909b", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1981,7 +1981,7 @@ find_free_reg (class, mode, qtyno, accept_call_clobbered, just_try_suggested,\n \n      This is true of any register that can be eliminated.  */\n #ifdef ELIMINABLE_REGS\n-  for (i = 0; i < (int) (sizeof eliminables / sizeof eliminables[0]); i++)\n+  for (i = 0; i < (int) ARRAY_SIZE (eliminables); i++)\n     SET_HARD_REG_BIT (used, eliminables[i].from);\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n   /* If FRAME_POINTER_REGNUM is not a real register, then protect the one"}, {"sha": "68359aeb235fa6fb395f8a3770f9dae8105e08e4", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1033,7 +1033,7 @@ print_symbol (sym_ptr, number, strbase, aux_base, ifd, fdp)\n \n   if (MIPS_IS_STAB(sym_ptr))\n     {\n-      register int i = sizeof(stab_names) / sizeof(stab_names[0]);\n+      register int i = ARRAY_SIZE (stab_names);\n       const char *stab_name = \"stab\";\n       short code = MIPS_UNMARK_STAB(sym_ptr->index);\n       while (--i >= 0)"}, {"sha": "ff24ce8e9af5ac401073f5fc106e65b13ea3e936", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -3283,7 +3283,7 @@ parse_def (name_start)\n \n       if (diff)\n \t{\n-\t  for (j = (sizeof (t.sizes) / sizeof (t.sizes[0])) - 1; j >= 0; j--)\n+\t  for (j = ARRAY_SIZE (t.sizes) - 1; j >= 0; j--)\n \t    t.sizes[ j ] = ((j-diff) >= 0) ? t.sizes[ j-diff ] : 0;\n \n \t  t.num_sizes = i + 1;\n@@ -3882,7 +3882,7 @@ parse_input __proto((void))\n \tp++;\n \n       /* See if it's a directive we handle.  If so, dispatch handler.  */\n-      for (i = 0; i < sizeof (pseudo_ops) / sizeof (pseudo_ops[0]); i++)\n+      for (i = 0; i < ARRAY_SIZE (pseudo_ops); i++)\n \tif (memcmp (p, pseudo_ops[i].name, pseudo_ops[i].len) == 0\n \t    && ISSPACE ((unsigned char)(p[pseudo_ops[i].len])))\n \t  {"}, {"sha": "0a64fad74993be0c0eda65bcacc9a33731eec401", "filename": "gcc/optabs.c", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -4484,34 +4484,29 @@ mark_optab (arg)\n void\n init_optabs ()\n {\n-  int i;\n-#ifdef FIXUNS_TRUNC_LIKE_FIX_TRUNC\n-  int j;\n-#endif\n-\n-  enum insn_code *p;\n+  unsigned int i, j, k;\n \n   /* Start by initializing all tables to contain CODE_FOR_nothing.  */\n \n-  for (p = fixtab[0][0];\n-       p < fixtab[0][0] + sizeof fixtab / sizeof (fixtab[0][0][0]); \n-       p++)\n-    *p = CODE_FOR_nothing;\n-\n-  for (p = fixtrunctab[0][0];\n-       p < fixtrunctab[0][0] + sizeof fixtrunctab / sizeof (fixtrunctab[0][0][0]); \n-       p++)\n-    *p = CODE_FOR_nothing;\n-\n-  for (p = floattab[0][0];\n-       p < floattab[0][0] + sizeof floattab / sizeof (floattab[0][0][0]); \n-       p++)\n-    *p = CODE_FOR_nothing;\n-\n-  for (p = extendtab[0][0];\n-       p < extendtab[0][0] + sizeof extendtab / sizeof extendtab[0][0][0];\n-       p++)\n-    *p = CODE_FOR_nothing;\n+  for (i = 0; i < ARRAY_SIZE (fixtab); i++)\n+    for (j = 0; j < ARRAY_SIZE (fixtab[0]); j++)\n+      for (k = 0; k < ARRAY_SIZE (fixtab[0][0]); k++)\n+\tfixtab[i][j][k] = CODE_FOR_nothing;\n+\n+  for (i = 0; i < ARRAY_SIZE (fixtrunctab); i++)\n+    for (j = 0; j < ARRAY_SIZE (fixtrunctab[0]); j++)\n+      for (k = 0; k < ARRAY_SIZE (fixtrunctab[0][0]); k++)\n+\tfixtrunctab[i][j][k] = CODE_FOR_nothing;\n+\n+  for (i = 0; i < ARRAY_SIZE (floattab); i++)\n+    for (j = 0; j < ARRAY_SIZE (floattab[0]); j++)\n+      for (k = 0; k < ARRAY_SIZE (floattab[0][0]); k++)\n+\tfloattab[i][j][k] = CODE_FOR_nothing;\n+\n+  for (i = 0; i < ARRAY_SIZE (extendtab); i++)\n+    for (j = 0; j < ARRAY_SIZE (extendtab[0]); j++)\n+      for (k = 0; k < ARRAY_SIZE (extendtab[0][0]); k++)\n+\textendtab[i][j][k] = CODE_FOR_nothing;\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n     setcc_gen_code[i] = CODE_FOR_nothing;"}, {"sha": "8d7caffbf9153db05186456fec5b76e1319b468f", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -343,7 +343,7 @@ static struct elim_table_1\n   {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}};\n #endif\n \n-#define NUM_ELIMINABLE_REGS (sizeof reg_eliminate_1/sizeof reg_eliminate_1[0])\n+#define NUM_ELIMINABLE_REGS ARRAY_SIZE (reg_eliminate_1)\n \n /* Record the number of pending eliminations that have an offset not equal\n    to their initial offset.  If non-zero, we use a new copy of each"}, {"sha": "2d7566ef4ca67ffd612414301b24955762959789", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -3395,12 +3395,12 @@ expand_nl_goto_receiver ()\n       static struct elims {int from, to;} elim_regs[] = ELIMINABLE_REGS;\n       size_t i;\n \n-      for (i = 0; i < sizeof elim_regs / sizeof elim_regs[0]; i++)\n+      for (i = 0; i < ARRAY_SIZE (elim_regs); i++)\n \tif (elim_regs[i].from == ARG_POINTER_REGNUM\n \t    && elim_regs[i].to == HARD_FRAME_POINTER_REGNUM)\n \t  break;\n \n-      if (i == sizeof elim_regs / sizeof elim_regs [0])\n+      if (i == ARRAY_SIZE (elim_regs))\n #endif\n \t{\n \t  /* Now restore our arg pointer from the address at which it"}, {"sha": "43ae6f2cf472278016cebefebc189960154e4235", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1657,7 +1657,7 @@ set_sizetype (type)\n   TYPE_NAME (bitsizetype) = get_identifier (\"bit_size_type\");\n \n   /* Show is a sizetype, is a main type, and has no pointers to it.  */\n-  for (i = 0; i < sizeof sizetype_tab / sizeof sizetype_tab[0]; i++)\n+  for (i = 0; i < ARRAY_SIZE (sizetype_tab); i++)\n     {\n       TYPE_IS_SIZETYPE (sizetype_tab[i]) = 1;\n       TYPE_MAIN_VARIANT (sizetype_tab[i]) = sizetype_tab[i];"}, {"sha": "2a1b5a7976866e8a624e87933fd7bc8748719557", "filename": "gcc/toplev.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -1119,8 +1119,6 @@ lang_independent_options f_options[] =\n   \"Convert floating point constant to single precision constant\"}\n };\n \n-#define NUM_ELEM(a)  (sizeof (a) / sizeof ((a)[0]))\n-\n /* Table of language-specific options.  */\n \n static struct lang_opt\n@@ -3730,7 +3728,7 @@ display_help ()\n   printf (_(\"  -fmessage-length=<number> Limits diagnostics messages lengths to <number> characters per line.  0 suppresses line-wrapping\\n\"));\n   printf (_(\"  -fdiagnostics-show-location=[once | never] Indicates how often source location information should be emitted, as prefix, at the beginning of diagnostics when line-wrapping\\n\"));\n \n-  for (i = NUM_ELEM (f_options); i--;)\n+  for (i = ARRAY_SIZE (f_options); i--;)\n     {\n       const char *description = f_options[i].description;\n \n@@ -3746,7 +3744,7 @@ display_help ()\n   printf (_(\"  -w                      Suppress warnings\\n\"));\n   printf (_(\"  -W                      Enable extra warnings\\n\"));\n \n-  for (i = NUM_ELEM (W_options); i--;)\n+  for (i = ARRAY_SIZE (W_options); i--;)\n     {\n       const char *description = W_options[i].description;\n \n@@ -3770,7 +3768,7 @@ display_help ()\n   -G <number>             Put global and static data smaller than <number>\\n\\\n                           bytes into a special section (on some targets)\\n\"));\n \n-  for (i = NUM_ELEM (debug_args); i--;)\n+  for (i = ARRAY_SIZE (debug_args); i--;)\n     {\n       if (debug_args[i].description != NULL)\n \tprintf (\"  -g%-21s %s\\n\",\n@@ -3798,11 +3796,11 @@ display_help ()\n      that the description string is in fact the name of a language, whose\n      language specific options are to follow.  */\n \n-  if (NUM_ELEM (documented_lang_options) > 1)\n+  if (ARRAY_SIZE (documented_lang_options) > 1)\n     {\n       printf (_(\"\\nLanguage specific options:\\n\"));\n \n-      for (i = 0; i < NUM_ELEM (documented_lang_options); i++)\n+      for (i = 0; i < ARRAY_SIZE (documented_lang_options); i++)\n \t{\n \t  const char *description = documented_lang_options[i].description;\n \t  const char *option      = documented_lang_options[i].option;\n@@ -3837,9 +3835,9 @@ display_help ()\n     printf (_(\"\\nThere are undocumented %s specific options as well.\\n\"),\n \t    lang);\n \n-  if (NUM_ELEM (target_switches) > 1\n+  if (ARRAY_SIZE (target_switches) > 1\n #ifdef TARGET_OPTIONS\n-      || NUM_ELEM (target_options) > 1\n+      || ARRAY_SIZE (target_options) > 1\n #endif\n       )\n     {\n@@ -3849,7 +3847,7 @@ display_help ()\n \n       printf (_(\"\\nTarget specific options:\\n\"));\n \n-      for (i = NUM_ELEM (target_switches); i--;)\n+      for (i = ARRAY_SIZE (target_switches); i--;)\n \t{\n \t  const char *option      = target_switches[i].name;\n \t  const char *description = target_switches[i].description;\n@@ -3868,7 +3866,7 @@ display_help ()\n \t}\n \n #ifdef TARGET_OPTIONS\n-      for (i = NUM_ELEM (target_options); i--;)\n+      for (i = ARRAY_SIZE (target_options); i--;)\n \t{\n \t  const char *option      = target_options[i].prefix;\n \t  const char *description = target_options[i].description;\n@@ -3960,7 +3958,7 @@ decode_f_option (arg)\n   const char *option_value = NULL;\n \n   /* Search for the option in the table of binary f options.  */\n-  for (j = sizeof (f_options) / sizeof (f_options[0]); j--;)\n+  for (j = ARRAY_SIZE (f_options); j--;)\n     {\n       if (!strcmp (arg, f_options[j].string))\n \t{\n@@ -4059,7 +4057,7 @@ decode_W_option (arg)\n \n   /* Search for the option in the table of binary W options.  */\n \n-  for (j = sizeof (W_options) / sizeof (W_options[0]); j--;)\n+  for (j = ARRAY_SIZE (W_options); j--;)\n     {\n       if (!strcmp (arg, W_options[j].string))\n \t{\n@@ -4622,7 +4620,7 @@ main (argc, argv)\n \t     possibility here.  If we do find a match, then if extra_warnings\n \t     is set we generate a warning message, otherwise we will just\n \t     ignore the option.  */\n-\t  for (j = 0; j < NUM_ELEM (documented_lang_options); j++)\n+\t  for (j = 0; j < ARRAY_SIZE (documented_lang_options); j++)\n \t    {\n \t      option = documented_lang_options[j].option;\n \n@@ -4632,7 +4630,7 @@ main (argc, argv)\n \t\tbreak;\n \t    }\n \n-\t  if (j != NUM_ELEM (documented_lang_options))\n+\t  if (j != ARRAY_SIZE (documented_lang_options))\n \t    {\n \t      if (extra_warnings)\n \t\t{\n@@ -4798,7 +4796,7 @@ set_target_switch (name)\n   register size_t j;\n   int valid_target_option = 0;\n \n-  for (j = 0; j < sizeof target_switches / sizeof target_switches[0]; j++)\n+  for (j = 0; j < ARRAY_SIZE (target_switches); j++)\n     if (!strcmp (target_switches[j].name, name))\n       {\n \tif (target_switches[j].value < 0)\n@@ -4810,7 +4808,7 @@ set_target_switch (name)\n \n #ifdef TARGET_OPTIONS\n   if (!valid_target_option)\n-    for (j = 0; j < sizeof target_options / sizeof target_options[0]; j++)\n+    for (j = 0; j < ARRAY_SIZE (target_options); j++)\n       {\n \tint len = strlen (target_options[j].prefix);\n \tif (!strncmp (target_options[j].prefix, name, len))\n@@ -4925,14 +4923,14 @@ print_switch_values (file, pos, max, indent, sep, term)\n   pos = print_single_switch (file, 0, max, indent, *indent ? \" \" : \"\", term,\n \t\t\t     _(\"options enabled: \"), \"\");\n \n-  for (j = 0; j < sizeof f_options / sizeof f_options[0]; j++)\n+  for (j = 0; j < ARRAY_SIZE (f_options); j++)\n     if (*f_options[j].variable == f_options[j].on_value)\n       pos = print_single_switch (file, pos, max, indent, sep, term,\n \t\t\t\t \"-f\", f_options[j].string);\n \n   /* Print target specific options.  */\n \n-  for (j = 0; j < sizeof target_switches / sizeof target_switches[0]; j++)\n+  for (j = 0; j < ARRAY_SIZE (target_switches); j++)\n     if (target_switches[j].name[0] != '\\0'\n \t&& target_switches[j].value > 0\n \t&& ((target_switches[j].value & target_flags)\n@@ -4943,7 +4941,7 @@ print_switch_values (file, pos, max, indent, sep, term)\n       }\n \n #ifdef TARGET_OPTIONS\n-  for (j = 0; j < sizeof target_options / sizeof target_options[0]; j++)\n+  for (j = 0; j < ARRAY_SIZE (target_options); j++)\n     if (*target_options[j].variable != NULL)\n       {\n \tchar prefix[256];"}, {"sha": "b30d08901c3f88f2c160d29e35612880bbc8effb", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b6a1cbaeb19076fca9b0deb00138fedf0c8c36ff", "patch": "@@ -641,7 +641,7 @@ decode_reg_name (asmspec)\n \tstatic struct { const char *name; int number; } table[]\n \t  = ADDITIONAL_REGISTER_NAMES;\n \n-\tfor (i = 0; i < (int)(sizeof (table) / sizeof (table[0])); i++)\n+\tfor (i = 0; i < (int) ARRAY_SIZE (table); i++)\n \t  if (! strcmp (asmspec, table[i].name))\n \t    return table[i].number;\n       }"}]}