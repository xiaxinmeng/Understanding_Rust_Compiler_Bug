{"sha": "6673f90bc62ce2d5b8e59a987310b0bd621f797d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY3M2Y5MGJjNjJjZTJkNWI4ZTU5YTk4NzMxMGIwYmQ2MjFmNzk3ZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2006-10-26T19:31:09Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2006-10-26T19:31:09Z"}, "message": "unwind-dw2.h: Move cfa-related variables into struct frame_state_reg_info to ensure that the...\n\n\t* gcc/unwind-dw2.h: Move cfa-related variables into\n\tstruct frame_state_reg_info to ensure that the CFA is properly\n\thandled when executing DW_CFA_{remember,restore}_state.\n\t* gcc/unwind-dw2.c, gcc/config/alpha/linux-unwind.h,\n\tgcc/config/alpha/vms-unwind.h, gcc/config/s390/tpf-unwind.h\n\tgcc/config/s390/linux-unwind.h, gcc/config/sparc/linux-unwind.h\n\tgcc/config/i386/linux-unwind.h, gcc/config/sh/linux-unwind.h\n\tgcc/config/rs6000/linux-unwind.h,\n\tgcc/config/rs6000/darwin-fallback.c, gcc/config/pa/linux-unwind.h,\n\tgcc/config/pa/hpux-unwind.h, gcc/config/mips/linux-unwind.h:\n\tModify to use new cfa_* fields.\n\nFrom-SVN: r118068", "tree": {"sha": "8ed7134cd00f1eff920b22fc52f01f1b88f67c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed7134cd00f1eff920b22fc52f01f1b88f67c3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6673f90bc62ce2d5b8e59a987310b0bd621f797d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6673f90bc62ce2d5b8e59a987310b0bd621f797d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6673f90bc62ce2d5b8e59a987310b0bd621f797d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6673f90bc62ce2d5b8e59a987310b0bd621f797d/comments", "author": null, "committer": null, "parents": [{"sha": "4bab2b2301d6fd898ab09a02f6f2cada3638cb18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bab2b2301d6fd898ab09a02f6f2cada3638cb18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bab2b2301d6fd898ab09a02f6f2cada3638cb18"}], "stats": {"total": 198, "additions": 106, "deletions": 92}, "files": [{"sha": "e6897b48969a52626ee31a88cc4a35fd272e2f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -1,3 +1,17 @@\n+2006-10-26  Nathan Froyd <froydnj@codesourcery.com>\n+\n+\t* gcc/unwind-dw2.h: Move cfa-related variables into\n+\tstruct frame_state_reg_info to ensure that the CFA is properly\n+\thandled when executing DW_CFA_{remember,restore}_state.\n+\t* gcc/unwind-dw2.c, gcc/config/alpha/linux-unwind.h,\n+\tgcc/config/alpha/vms-unwind.h, gcc/config/s390/tpf-unwind.h\n+\tgcc/config/s390/linux-unwind.h, gcc/config/sparc/linux-unwind.h\n+\tgcc/config/i386/linux-unwind.h, gcc/config/sh/linux-unwind.h\n+\tgcc/config/rs6000/linux-unwind.h,\n+\tgcc/config/rs6000/darwin-fallback.c, gcc/config/pa/linux-unwind.h,\n+\tgcc/config/pa/hpux-unwind.h, gcc/config/mips/linux-unwind.h:\n+\tModify to use new cfa_* fields.\n+\n 2006-10-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_init_frame_layout): Check positive"}, {"sha": "23151ad30afd1146ef9e6105d32a122450a15fc6", "filename": "gcc/config/alpha/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Falpha%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Falpha%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -60,9 +60,9 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n   else\n     return _URC_END_OF_STACK;\n   new_cfa = sc->sc_regs[30];\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 30;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 30;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n   for (i = 0; i < 30; ++i)\n     {\n       fs->regs.reg[i].how = REG_SAVED_OFFSET;"}, {"sha": "1ecad039098bedabba016f417291385969f59b48", "filename": "gcc/config/alpha/vms-unwind.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Falpha%2Fvms-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Falpha%2Fvms-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -35,10 +35,10 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n     {\n       int i, j;\n \n-      fs->cfa_offset = pv->pdsc$l_size;\n-      fs->cfa_reg = pv->pdsc$w_flags & PDSC$M_BASE_REG_IS_FP ? 29 : 30;\n+      fs->regs.cfa_offset = pv->pdsc$l_size;\n+      fs->regs.cfa_reg = pv->pdsc$w_flags & PDSC$M_BASE_REG_IS_FP ? 29 : 30;\n       fs->retaddr_column = 26;\n-      fs->cfa_how = CFA_REG_OFFSET;\n+      fs->regs.cfa_how = CFA_REG_OFFSET;\n       fs->regs.reg[27].loc.offset = -pv->pdsc$l_size;\n       fs->regs.reg[27].how = REG_SAVED_OFFSET;\n       fs->regs.reg[26].loc.offset\n@@ -57,10 +57,10 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n     }\n   else if (pv && ((pv->pdsc$w_flags & 0xf) == PDSC$K_KIND_FP_REGISTER))\n     {\n-      fs->cfa_offset = pv->pdsc$l_size;\n-      fs->cfa_reg = pv->pdsc$w_flags & PDSC$M_BASE_REG_IS_FP ? 29 : 30;\n+      fs->regs.cfa_offset = pv->pdsc$l_size;\n+      fs->regs.cfa_reg = pv->pdsc$w_flags & PDSC$M_BASE_REG_IS_FP ? 29 : 30;\n       fs->retaddr_column = 26;\n-      fs->cfa_how = CFA_REG_OFFSET;\n+      fs->regs.cfa_how = CFA_REG_OFFSET;\n       fs->regs.reg[26].loc.reg = pv->pdsc$b_save_ra;\n       fs->regs.reg[26].how = REG_SAVED_REG;\n       fs->regs.reg[29].loc.reg = pv->pdsc$b_save_fp;"}, {"sha": "58eb73330651ce3d15b65b9b12e2b3c95df1738a", "filename": "gcc/config/i386/linux-unwind.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fi386%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fi386%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -61,10 +61,10 @@ x86_64_fallback_frame_state (struct _Unwind_Context *context,\n     return _URC_END_OF_STACK;\n \n   new_cfa = sc->rsp;\n-  fs->cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n   /* Register 7 is rsp  */\n-  fs->cfa_reg = 7;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_reg = 7;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n   fs->regs.reg[0].how = REG_SAVED_OFFSET;\n@@ -151,9 +151,9 @@ x86_fallback_frame_state (struct _Unwind_Context *context,\n     return _URC_END_OF_STACK;\n \n   new_cfa = sc->REG_NAME(esp);\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 4;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 4;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n   fs->regs.reg[0].how = REG_SAVED_OFFSET;"}, {"sha": "bbb2445b539491259f1dbabb8d90289c263228fa", "filename": "gcc/config/mips/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fmips%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fmips%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -86,9 +86,9 @@ mips_fallback_frame_state (struct _Unwind_Context *context,\n     return _URC_END_OF_STACK;\n \n   new_cfa = (_Unwind_Ptr)sc;\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = STACK_POINTER_REGNUM;\n-  fs->cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n \n #if _MIPS_SIM == _ABIO32 && defined __MIPSEB__\n   /* On o32 Linux, the register save slots in the sigcontext are"}, {"sha": "1082a34070d683bb711afcc697bcfb81a2ce9ea3", "filename": "gcc/config/pa/hpux-unwind.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fhpux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -147,9 +147,9 @@ pa_fallback_frame_state (struct _Unwind_Context *context,\n        && *(pc + 0) == 0x4bc23fd1\t\t/* ldw -18(sp),rp */\n        && *(pc + 1) == 0xe840d002))\t\t/* bve,n (rp) */\n     {\n-      fs->cfa_how    = CFA_REG_OFFSET;\n-      fs->cfa_reg    = 30;\n-      fs->cfa_offset = 0;\n+      fs->regs.cfa_how    = CFA_REG_OFFSET;\n+      fs->regs.cfa_reg    = 30;\n+      fs->regs.cfa_offset = 0;\n \n       fs->retaddr_column = 0;\n       fs->regs.reg[0].how = REG_SAVED_OFFSET;\n@@ -167,9 +167,9 @@ pa_fallback_frame_state (struct _Unwind_Context *context,\n \t   && (*(pc + 1) == 0xe840c002\t\t/* bv,n r0(rp) */\n \t       || *(pc + 1) == 0xe840d002))\t/* bve,n (rp) */\n     {\n-      fs->cfa_how    = CFA_REG_OFFSET;\n-      fs->cfa_reg    = 30;\n-      fs->cfa_offset = 0;\n+      fs->regs.cfa_how    = CFA_REG_OFFSET;\n+      fs->regs.cfa_reg    = 30;\n+      fs->regs.cfa_offset = 0;\n \n       fs->retaddr_column = 0;\n       fs->regs.reg[0].how = REG_SAVED_OFFSET;\n@@ -239,9 +239,9 @@ pa_fallback_frame_state (struct _Unwind_Context *context,\n \n       long new_cfa = GetSSReg (mc, ss_sp);\n \n-      fs->cfa_how = CFA_REG_OFFSET;\n-      fs->cfa_reg = 30;\n-      fs->cfa_offset = new_cfa - (long) context->cfa;\n+      fs->regs.cfa_how = CFA_REG_OFFSET;\n+      fs->regs.cfa_reg = 30;\n+      fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n       UPDATE_FS_FOR_GR (fs, 1, 1);\n       UPDATE_FS_FOR_GR (fs, 2, 2);"}, {"sha": "467d952efc04c3d468cf9de21091ac590ffb73d9", "filename": "gcc/config/pa/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fpa%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fpa%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -111,9 +111,9 @@ pa32_fallback_frame_state (struct _Unwind_Context *context,\n   sc = &frame->uc.uc_mcontext;\n \n   new_cfa = sc->sc_gr[30];\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 30;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 30;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n   for (i = 1; i <= 31; i++)\n     {\n       fs->regs.reg[i].how = REG_SAVED_OFFSET;"}, {"sha": "c3a59c3ff5a7ddaf199e768351df62b9ef94d0dc", "filename": "gcc/config/rs6000/darwin-fallback.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -421,9 +421,9 @@ handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n \treturn_addr = m->srr0;\n     }\n \n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = STACK_POINTER_REGNUM;\n-  fs->cfa_offset = new_cfa - old_cfa;;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_offset = new_cfa - old_cfa;;\n   \n   /* The choice of column for the return address is somewhat tricky.\n      Fortunately, the actual choice is private to this file, and"}, {"sha": "2758cbcac721e1b8526341ddc64641a770dddf5b", "filename": "gcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -232,9 +232,9 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n     return _URC_END_OF_STACK;\n \n   new_cfa = regs->gpr[STACK_POINTER_REGNUM];\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = STACK_POINTER_REGNUM;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   for (i = 0; i < 32; i++)\n     if (i != STACK_POINTER_REGNUM)"}, {"sha": "5ff880efbd051e1cb2948536c9d1d7cb130115e1", "filename": "gcc/config/s390/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fs390%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fs390%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -101,9 +101,9 @@ s390_fallback_frame_state (struct _Unwind_Context *context,\n     }\n \n   new_cfa = regs->gprs[15] + 16*sizeof(long) + 32;\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 15;\n-  fs->cfa_offset =\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 15;\n+  fs->regs.cfa_offset =\n     new_cfa - (long) context->cfa + 16*sizeof(long) + 32;\n \n   for (i = 0; i < 16; i++)"}, {"sha": "eabd51e8a552107ce6407fa7c18b39e4522bbf2f", "filename": "gcc/config/s390/tpf-unwind.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fs390%2Ftpf-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fs390%2Ftpf-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -76,9 +76,9 @@ s390_fallback_frame_state (struct _Unwind_Context *context,\n          return _URC_END_OF_STACK;\n \n       /* No stack frame.  */\n-      fs->cfa_how = CFA_REG_OFFSET;\n-      fs->cfa_reg = 15;\n-      fs->cfa_offset = STACK_POINTER_OFFSET;\n+      fs->regs.cfa_how = CFA_REG_OFFSET;\n+      fs->regs.cfa_reg = 15;\n+      fs->regs.cfa_offset = STACK_POINTER_OFFSET;\n \n       /* All registers remain unchanged ...  */\n       for (i = 0; i < 32; i++)\n@@ -100,9 +100,9 @@ s390_fallback_frame_state (struct _Unwind_Context *context,\n         (((unsigned long int) context->cfa) - STACK_POINTER_OFFSET));\n   new_cfa = regs + STACK_POINTER_OFFSET;\n \n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 15;\n-  fs->cfa_offset = new_cfa -\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 15;\n+  fs->regs.cfa_offset = new_cfa -\n         (unsigned long int) context->cfa + STACK_POINTER_OFFSET;\n \n   for (i = 0; i < 16; i++)"}, {"sha": "5374f8a61f9b4cc3c204631b3719440911aa0906", "filename": "gcc/config/sh/linux-unwind.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fsh%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fsh%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -94,9 +94,9 @@ shmedia_fallback_frame_state (struct _Unwind_Context *context,\n     return _URC_END_OF_STACK;\n \n   new_cfa = sc->sc_regs[15];\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 15;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 15;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   for (i = 0; i < 63; i++)\n     {\n@@ -191,9 +191,9 @@ sh_fallback_frame_state (struct _Unwind_Context *context,\n     return _URC_END_OF_STACK;\n \n   new_cfa = sc->sc_regs[15];\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 15;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 15;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   for (i = 0; i < 15; i++)\n     {"}, {"sha": "f8a381910c899df38a0df12bfdf4deb3282f0fec", "filename": "gcc/config/sparc/linux-unwind.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fsparc%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Fconfig%2Fsparc%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-unwind.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -53,9 +53,9 @@ sparc64_fallback_frame_state (struct _Unwind_Context *context,\n   new_cfa = *(long *)((context->cfa) + (regs_off + (14 * 8)));\n   new_cfa += 2047; /* Stack bias */\n   fpu_save = *(long *)((this_cfa) + (fpu_save_off));\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 14;\n-  fs->cfa_offset = new_cfa - (long) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 14;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n   for (i = 1; i < 16; ++i)\n     {\n       fs->regs.reg[i].how = REG_SAVED_OFFSET;\n@@ -122,9 +122,9 @@ sparc_fallback_frame_state (struct _Unwind_Context *context,\n   this_cfa = (int) context->cfa;\n   new_cfa = *(int *)((context->cfa) + (regs_off+(4*4)+(14 * 4)));\n   fpu_save = *(int *)((this_cfa) + (fpu_save_off));\n-  fs->cfa_how = CFA_REG_OFFSET;\n-  fs->cfa_reg = 14;\n-  fs->cfa_offset = new_cfa - (int) context->cfa;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 14;\n+  fs->regs.cfa_offset = new_cfa - (int) context->cfa;\n   for (i = 1; i < 16; ++i)\n     {\n       if (i == 14)"}, {"sha": "a3fd9e0f9f30f81ffaffcd0dac4c3e6da7f291ad", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -932,26 +932,26 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_def_cfa:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &fs->cfa_reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &fs->regs.cfa_reg);\n \t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->cfa_offset = utmp;\n-\t  fs->cfa_how = CFA_REG_OFFSET;\n+\t  fs->regs.cfa_offset = utmp;\n+\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n \t  break;\n \n \tcase DW_CFA_def_cfa_register:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &fs->cfa_reg);\n-\t  fs->cfa_how = CFA_REG_OFFSET;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &fs->regs.cfa_reg);\n+\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n \t  break;\n \n \tcase DW_CFA_def_cfa_offset:\n \t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->cfa_offset = utmp;\n+\t  fs->regs.cfa_offset = utmp;\n \t  /* cfa_how deliberately not set.  */\n \t  break;\n \n \tcase DW_CFA_def_cfa_expression:\n-\t  fs->cfa_exp = insn_ptr;\n-\t  fs->cfa_how = CFA_EXP;\n+\t  fs->regs.cfa_exp = insn_ptr;\n+\t  fs->regs.cfa_how = CFA_EXP;\n \t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n \t  insn_ptr += utmp;\n \t  break;\n@@ -975,15 +975,15 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_def_cfa_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &fs->cfa_reg);\n-\t  insn_ptr = read_sleb128 (insn_ptr, &fs->cfa_offset);\n-\t  fs->cfa_how = CFA_REG_OFFSET;\n-\t  fs->cfa_offset *= fs->data_align;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &fs->regs.cfa_reg);\n+\t  insn_ptr = read_sleb128 (insn_ptr, &fs->regs.cfa_offset);\n+\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n+\t  fs->regs.cfa_offset *= fs->data_align;\n \t  break;\n \n \tcase DW_CFA_def_cfa_offset_sf:\n-\t  insn_ptr = read_sleb128 (insn_ptr, &fs->cfa_offset);\n-\t  fs->cfa_offset *= fs->data_align;\n+\t  insn_ptr = read_sleb128 (insn_ptr, &fs->regs.cfa_offset);\n+\t  fs->regs.cfa_offset *= fs->data_align;\n \t  /* cfa_how deliberately not set.  */\n \t  break;\n \n@@ -1149,7 +1149,7 @@ __frame_state_for (void *pc_target, struct frame_state *state_in)\n \n   /* We have no way to pass a location expression for the CFA to our\n      caller.  It wouldn't understand it anyway.  */\n-  if (fs.cfa_how == CFA_EXP)\n+  if (fs.regs.cfa_how == CFA_EXP)\n     return 0;\n \n   for (reg = 0; reg < PRE_GCC3_DWARF_FRAME_REGISTERS + 1; reg++)\n@@ -1169,8 +1169,8 @@ __frame_state_for (void *pc_target, struct frame_state *state_in)\n \t}\n     }\n \n-  state_in->cfa_offset = fs.cfa_offset;\n-  state_in->cfa_reg = fs.cfa_reg;\n+  state_in->cfa_offset = fs.regs.cfa_offset;\n+  state_in->cfa_reg = fs.regs.cfa_reg;\n   state_in->retaddr_column = fs.retaddr_column;\n   state_in->args_size = context.args_size;\n   state_in->eh_ptr = fs.eh_ptr;\n@@ -1227,16 +1227,16 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n #endif\n \n   /* Compute this frame's CFA.  */\n-  switch (fs->cfa_how)\n+  switch (fs->regs.cfa_how)\n     {\n     case CFA_REG_OFFSET:\n-      cfa = _Unwind_GetPtr (&orig_context, fs->cfa_reg);\n-      cfa += fs->cfa_offset;\n+      cfa = _Unwind_GetPtr (&orig_context, fs->regs.cfa_reg);\n+      cfa += fs->regs.cfa_offset;\n       break;\n \n     case CFA_EXP:\n       {\n-\tconst unsigned char *exp = fs->cfa_exp;\n+\tconst unsigned char *exp = fs->regs.cfa_exp;\n \t_Unwind_Word len;\n \n \texp = read_uleb128 (exp, &len);\n@@ -1384,9 +1384,9 @@ uw_init_context_1 (struct _Unwind_Context *context,\n \n   /* Force the frame state to use the known cfa value.  */\n   _Unwind_SetSpColumn (context, outer_cfa, &sp_slot);\n-  fs.cfa_how = CFA_REG_OFFSET;\n-  fs.cfa_reg = __builtin_dwarf_sp_column ();\n-  fs.cfa_offset = 0;\n+  fs.regs.cfa_how = CFA_REG_OFFSET;\n+  fs.regs.cfa_reg = __builtin_dwarf_sp_column ();\n+  fs.regs.cfa_offset = 0;\n \n   uw_update_context_1 (context, &fs);\n "}, {"sha": "db3a1ab222ca14c47b102b627e120f009f14b151", "filename": "gcc/unwind-dw2.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Funwind-dw2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673f90bc62ce2d5b8e59a987310b0bd621f797d/gcc%2Funwind-dw2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.h?ref=6673f90bc62ce2d5b8e59a987310b0bd621f797d", "patch": "@@ -61,18 +61,18 @@ typedef struct\n \n     /* Used to implement DW_CFA_remember_state.  */\n     struct frame_state_reg_info *prev;\n-  } regs;\n \n-  /* The CFA can be described in terms of a reg+offset or a\n-     location expression.  */\n-  _Unwind_Sword cfa_offset;\n-  _Unwind_Word cfa_reg;\n-  const unsigned char *cfa_exp;\n-  enum {\n-    CFA_UNSET,\n-    CFA_REG_OFFSET,\n-    CFA_EXP\n-  } cfa_how;\n+    /* The CFA can be described in terms of a reg+offset or a\n+       location expression.  */\n+    _Unwind_Sword cfa_offset;\n+    _Unwind_Word cfa_reg;\n+    const unsigned char *cfa_exp;\n+    enum {\n+      CFA_UNSET,\n+      CFA_REG_OFFSET,\n+      CFA_EXP\n+    } cfa_how;\n+  } regs;\n \n   /* The PC described by the current frame state.  */\n   void *pc;"}]}