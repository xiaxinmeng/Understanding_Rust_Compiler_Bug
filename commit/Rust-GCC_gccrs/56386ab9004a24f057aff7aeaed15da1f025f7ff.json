{"sha": "56386ab9004a24f057aff7aeaed15da1f025f7ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzODZhYjkwMDRhMjRmMDU3YWZmN2FlYWVkMTVkYTFmMDI1ZjdmZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-07-29T11:40:47Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2014-07-29T11:40:47Z"}, "message": "tree-sra.c (sra_modify_constructor_assign): Change type of stmt parameter to gimple.\n\n2014-07-29  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-sra.c (sra_modify_constructor_assign): Change type of stmt\n\tparameter to gimple.\n\t(sra_modify_assign): Likewise.\n\nFrom-SVN: r213154", "tree": {"sha": "530c7d6dfbcc4b1b5a1beef557941e3f9b03ebf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/530c7d6dfbcc4b1b5a1beef557941e3f9b03ebf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56386ab9004a24f057aff7aeaed15da1f025f7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56386ab9004a24f057aff7aeaed15da1f025f7ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56386ab9004a24f057aff7aeaed15da1f025f7ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56386ab9004a24f057aff7aeaed15da1f025f7ff/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e05531efb7fb5ef03d1e62c95c73c87d71e91d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05531efb7fb5ef03d1e62c95c73c87d71e91d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05531efb7fb5ef03d1e62c95c73c87d71e91d49"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "b2f654070b0bb6455787194d2172057610c2b38e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56386ab9004a24f057aff7aeaed15da1f025f7ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56386ab9004a24f057aff7aeaed15da1f025f7ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56386ab9004a24f057aff7aeaed15da1f025f7ff", "patch": "@@ -1,3 +1,9 @@\n+2014-07-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-sra.c (sra_modify_constructor_assign): Change type of stmt\n+\tparameter to gimple.\n+\t(sra_modify_assign): Likewise.\n+\n 2014-07-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/52478"}, {"sha": "d90f00a0d5af9529494d8dd0a05694c1b6b2d11c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56386ab9004a24f057aff7aeaed15da1f025f7ff/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56386ab9004a24f057aff7aeaed15da1f025f7ff/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=56386ab9004a24f057aff7aeaed15da1f025f7ff", "patch": "@@ -3043,33 +3043,33 @@ enum assignment_mod_result { SRA_AM_NONE,       /* nothing done for the stmt */\n    the same values as sra_modify_assign.  */\n \n static enum assignment_mod_result\n-sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n+sra_modify_constructor_assign (gimple stmt, gimple_stmt_iterator *gsi)\n {\n-  tree lhs = gimple_assign_lhs (*stmt);\n+  tree lhs = gimple_assign_lhs (stmt);\n   struct access *acc;\n   location_t loc;\n \n   acc = get_access_for_expr (lhs);\n   if (!acc)\n     return SRA_AM_NONE;\n \n-  if (gimple_clobber_p (*stmt))\n+  if (gimple_clobber_p (stmt))\n     {\n       /* Remove clobbers of fully scalarized variables, otherwise\n \t do nothing.  */\n       if (acc->grp_covered)\n \t{\n-\t  unlink_stmt_vdef (*stmt);\n+\t  unlink_stmt_vdef (stmt);\n \t  gsi_remove (gsi, true);\n-\t  release_defs (*stmt);\n+\t  release_defs (stmt);\n \t  return SRA_AM_REMOVED;\n \t}\n       else\n \treturn SRA_AM_NONE;\n     }\n \n-  loc = gimple_location (*stmt);\n-  if (vec_safe_length (CONSTRUCTOR_ELTS (gimple_assign_rhs1 (*stmt))) > 0)\n+  loc = gimple_location (stmt);\n+  if (vec_safe_length (CONSTRUCTOR_ELTS (gimple_assign_rhs1 (stmt))) > 0)\n     {\n       /* I have never seen this code path trigger but if it can happen the\n \t following should handle it gracefully.  */\n@@ -3082,9 +3082,9 @@ sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n   if (acc->grp_covered)\n     {\n       init_subtree_with_zero (acc, gsi, false, loc);\n-      unlink_stmt_vdef (*stmt);\n+      unlink_stmt_vdef (stmt);\n       gsi_remove (gsi, true);\n-      release_defs (*stmt);\n+      release_defs (stmt);\n       return SRA_AM_REMOVED;\n     }\n   else\n@@ -3133,7 +3133,7 @@ contains_vce_or_bfcref_p (const_tree ref)\n    copying.  */\n \n static enum assignment_mod_result\n-sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n+sra_modify_assign (gimple stmt, gimple_stmt_iterator *gsi)\n {\n   struct access *lacc, *racc;\n   tree lhs, rhs;\n@@ -3142,10 +3142,10 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n   location_t loc;\n   gimple_stmt_iterator orig_gsi = *gsi;\n \n-  if (!gimple_assign_single_p (*stmt))\n+  if (!gimple_assign_single_p (stmt))\n     return SRA_AM_NONE;\n-  lhs = gimple_assign_lhs (*stmt);\n-  rhs = gimple_assign_rhs1 (*stmt);\n+  lhs = gimple_assign_lhs (stmt);\n+  rhs = gimple_assign_rhs1 (stmt);\n \n   if (TREE_CODE (rhs) == CONSTRUCTOR)\n     return sra_modify_constructor_assign (stmt, gsi);\n@@ -3154,9 +3154,9 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n       || TREE_CODE (rhs) == IMAGPART_EXPR || TREE_CODE (lhs) == IMAGPART_EXPR\n       || TREE_CODE (rhs) == BIT_FIELD_REF || TREE_CODE (lhs) == BIT_FIELD_REF)\n     {\n-      modify_this_stmt = sra_modify_expr (gimple_assign_rhs1_ptr (*stmt),\n+      modify_this_stmt = sra_modify_expr (gimple_assign_rhs1_ptr (stmt),\n \t\t\t\t\t  gsi, false);\n-      modify_this_stmt |= sra_modify_expr (gimple_assign_lhs_ptr (*stmt),\n+      modify_this_stmt |= sra_modify_expr (gimple_assign_lhs_ptr (stmt),\n \t\t\t\t\t   gsi, true);\n       return modify_this_stmt ? SRA_AM_MODIFIED : SRA_AM_NONE;\n     }\n@@ -3166,11 +3166,11 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n   if (!lacc && !racc)\n     return SRA_AM_NONE;\n \n-  loc = gimple_location (*stmt);\n+  loc = gimple_location (stmt);\n   if (lacc && lacc->grp_to_be_replaced)\n     {\n       lhs = get_access_replacement (lacc);\n-      gimple_assign_set_lhs (*stmt, lhs);\n+      gimple_assign_set_lhs (stmt, lhs);\n       modify_this_stmt = true;\n       if (lacc->grp_partial_lhs)\n \tforce_gimple_rhs = true;\n@@ -3206,7 +3206,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t      && !contains_bitfld_component_ref_p (lhs))\n \t    {\n \t      lhs = build_ref_for_model (loc, lhs, 0, racc, gsi, false);\n-\t      gimple_assign_set_lhs (*stmt, lhs);\n+\t      gimple_assign_set_lhs (stmt, lhs);\n \t    }\n \t  else if (AGGREGATE_TYPE_P (TREE_TYPE (rhs))\n \t\t   && !contains_vce_or_bfcref_p (rhs))\n@@ -3238,7 +3238,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t    drhs = fold_build1_loc (loc, VIEW_CONVERT_EXPR,\n \t\t\t\t    TREE_TYPE (dlhs), drhs);\n \t}\n-      gimple ds = gimple_build_debug_bind (dlhs, drhs, *stmt);\n+      gimple ds = gimple_build_debug_bind (dlhs, drhs, stmt);\n       gsi_insert_before (gsi, ds, GSI_SAME_STMT);\n     }\n \n@@ -3276,18 +3276,18 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n      This is what the first branch does.  */\n \n   if (modify_this_stmt\n-      || gimple_has_volatile_ops (*stmt)\n+      || gimple_has_volatile_ops (stmt)\n       || contains_vce_or_bfcref_p (rhs)\n       || contains_vce_or_bfcref_p (lhs)\n-      || stmt_ends_bb_p (*stmt))\n+      || stmt_ends_bb_p (stmt))\n     {\n       if (access_has_children_p (racc))\n \tgenerate_subtree_copies (racc->first_child, rhs, racc->offset, 0, 0,\n \t\t\t\t gsi, false, false, loc);\n       if (access_has_children_p (lacc))\n \t{\n \t  gimple_stmt_iterator alt_gsi = gsi_none ();\n-\t  if (stmt_ends_bb_p (*stmt))\n+\t  if (stmt_ends_bb_p (stmt))\n \t    {\n \t      alt_gsi = gsi_start_edge (single_non_eh_succ (gsi_bb (*gsi)));\n \t      gsi = &alt_gsi;\n@@ -3303,11 +3303,11 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n       if (force_gimple_rhs)\n \trhs = force_gimple_operand_gsi (&orig_gsi, rhs, true, NULL_TREE,\n \t\t\t\t\ttrue, GSI_SAME_STMT);\n-      if (gimple_assign_rhs1 (*stmt) != rhs)\n+      if (gimple_assign_rhs1 (stmt) != rhs)\n \t{\n \t  modify_this_stmt = true;\n \t  gimple_assign_set_rhs_from_tree (&orig_gsi, rhs);\n-\t  gcc_assert (*stmt == gsi_stmt (orig_gsi));\n+\t  gcc_assert (stmt == gsi_stmt (orig_gsi));\n \t}\n \n       return modify_this_stmt ? SRA_AM_MODIFIED : SRA_AM_NONE;\n@@ -3330,7 +3330,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t  sad.top_racc = racc;\n \t  sad.old_gsi = *gsi;\n \t  sad.new_gsi = gsi;\n-\t  sad.loc = gimple_location (*stmt);\n+\t  sad.loc = gimple_location (stmt);\n \t  sad.refreshed = SRA_UDH_NONE;\n \n \t  if (lacc->grp_read && !lacc->grp_covered)\n@@ -3340,9 +3340,9 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t  if (sad.refreshed != SRA_UDH_RIGHT)\n \t    {\n \t      gsi_next (gsi);\n-\t      unlink_stmt_vdef (*stmt);\n+\t      unlink_stmt_vdef (stmt);\n \t      gsi_remove (&sad.old_gsi, true);\n-\t      release_defs (*stmt);\n+\t      release_defs (stmt);\n \t      sra_stats.deleted++;\n \t      return SRA_AM_REMOVED;\n \t    }\n@@ -3355,15 +3355,15 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"Removing load: \");\n-\t\t  print_gimple_stmt (dump_file, *stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n \t\t}\n \t      generate_subtree_copies (racc->first_child, lhs,\n \t\t\t\t       racc->offset, 0, 0, gsi,\n \t\t\t\t       false, false, loc);\n-\t      gcc_assert (*stmt == gsi_stmt (*gsi));\n-\t      unlink_stmt_vdef (*stmt);\n+\t      gcc_assert (stmt == gsi_stmt (*gsi));\n+\t      unlink_stmt_vdef (stmt);\n \t      gsi_remove (gsi, true);\n-\t      release_defs (*stmt);\n+\t      release_defs (stmt);\n \t      sra_stats.deleted++;\n \t      return SRA_AM_REMOVED;\n \t    }\n@@ -3414,7 +3414,7 @@ sra_modify_function_body (void)\n \t      break;\n \n \t    case GIMPLE_ASSIGN:\n-\t      assign_result = sra_modify_assign (&stmt, &gsi);\n+\t      assign_result = sra_modify_assign (stmt, &gsi);\n \t      modified |= assign_result == SRA_AM_MODIFIED;\n \t      deleted = assign_result == SRA_AM_REMOVED;\n \t      break;"}]}