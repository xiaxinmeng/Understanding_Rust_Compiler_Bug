{"sha": "47dfdc53cd48e4b8dee671785a08ee664ffa1f41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkZmRjNTNjZDQ4ZTRiOGRlZTY3MTc4NWEwOGVlNjY0ZmZhMWY0MQ==", "commit": {"author": {"name": "Paul E. Murphy", "email": "murphyp@linux.vnet.ibm.com", "date": "2016-02-26T19:20:54Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-02-26T19:20:54Z"}, "message": "sfp-machine.h (_FP_DECL_EX): Declare _fpsr as a union of u64 and double.\n\n2016-02-26  Paul E. Murphy  <murphyp@linux.vnet.ibm.com>\n\t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/sfp-machine.h (_FP_DECL_EX): Declare _fpsr as a\n\tunion of u64 and double.\n\t(FP_TRAPPING_EXCEPTIONS): Return a bitmask of trapping exceptions.\n\t(FP_INIT_ROUNDMODE): Read the fpscr instead of writing a mystery\n\tvalue.\n\t(FP_ROUNDMODE): Update the usage of _fpscr.\n\n\nCo-Authored-By: Bill Schmidt <wschmidt@linux.vnet.ibm.com>\n\nFrom-SVN: r233756", "tree": {"sha": "b520e9e8378645bb1a8b1ca2aae14a40d523241c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b520e9e8378645bb1a8b1ca2aae14a40d523241c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47dfdc53cd48e4b8dee671785a08ee664ffa1f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47dfdc53cd48e4b8dee671785a08ee664ffa1f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47dfdc53cd48e4b8dee671785a08ee664ffa1f41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47dfdc53cd48e4b8dee671785a08ee664ffa1f41/comments", "author": null, "committer": null, "parents": [{"sha": "d1f2bea53f8990253f655cfa22815046efb2ed87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f2bea53f8990253f655cfa22815046efb2ed87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f2bea53f8990253f655cfa22815046efb2ed87"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "7587434fa3168ca8c8fbf34b087888d57ade74c8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47dfdc53cd48e4b8dee671785a08ee664ffa1f41/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47dfdc53cd48e4b8dee671785a08ee664ffa1f41/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=47dfdc53cd48e4b8dee671785a08ee664ffa1f41", "patch": "@@ -1,3 +1,13 @@\n+2016-02-26  Paul E. Murphy  <murphyp@linux.vnet.ibm.com>\n+\t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/sfp-machine.h (_FP_DECL_EX): Declare _fpsr as a\n+\tunion of u64 and double.\n+\t(FP_TRAPPING_EXCEPTIONS): Return a bitmask of trapping exceptions.\n+\t(FP_INIT_ROUNDMODE): Read the fpscr instead of writing a mystery\n+\tvalue.\n+\t(FP_ROUNDMODE): Update the usage of _fpscr.\n+\n 2016-02-25  Ilya Verbin  <ilya.verbin@intel.com>\n \n \tPR driver/68463"}, {"sha": "ab028fe4211b10449362bf46415058dfbbd36b65", "filename": "libgcc/config/rs6000/sfp-machine.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47dfdc53cd48e4b8dee671785a08ee664ffa1f41/libgcc%2Fconfig%2Frs6000%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47dfdc53cd48e4b8dee671785a08ee664ffa1f41/libgcc%2Fconfig%2Frs6000%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fsfp-machine.h?ref=47dfdc53cd48e4b8dee671785a08ee664ffa1f41", "patch": "@@ -130,27 +130,31 @@ void __sfp_handle_exceptions (int);\n     if (__builtin_expect (_fex, 0))\t\t\\\n       __sfp_handle_exceptions (_fex);\t\t\\\n   } while (0);\n-/* A set bit indicates an exception is masked and a clear bit indicates it is\n-   trapping.  */\n-# define FP_TRAPPING_EXCEPTIONS (~_fpscr & (FP_EX_ALL >> 22))\n \n+/* The FP_EX_* bits track whether the exception has occurred.  This macro\n+   must set the FP_EX_* bits of those exceptions which are configured to\n+   trap.  The FPSCR bit which indicates this is 22 ISA bits above the\n+   respective FP_EX_* bit.  Note, the ISA labels bits from msb to lsb,\n+   so 22 ISA bits above is 22 bits below when counted from the lsb.  */\n+# define FP_TRAPPING_EXCEPTIONS ((_fpscr.i << 22) & FP_EX_ALL)\n+  \n # define FP_RND_NEAREST\t0x0\n # define FP_RND_ZERO\t0x1\n # define FP_RND_PINF\t0x2\n # define FP_RND_MINF\t0x3\n # define FP_RND_MASK\t0x3\n \n # define _FP_DECL_EX \\\n-  unsigned long long _fpscr __attribute__ ((unused)) = FP_RND_NEAREST\n-\n+  union { unsigned long long i; double d; } _fpscr __attribute__ ((unused)) = \\\n+        { .i = FP_RND_NEAREST }\n+  \n #define FP_INIT_ROUNDMODE\t\t\t\\\n   do {\t\t\t\t\t\t\\\n-    __asm__ __volatile__ (\"mtfsf 255, %0\"\t\\\n-\t\t\t  :\t\t\t\\\n-\t\t\t  : \"f\" (_fpscr));\t\\\n+    __asm__ __volatile__ (\"mffs %0\"\t\t\\\n+\t\t\t  : \"=f\" (_fpscr.d));\t\\\n   } while (0)\n \n-# define FP_ROUNDMODE\t(_fpscr & FP_RND_MASK)\n+# define FP_ROUNDMODE\t(_fpscr.i & FP_RND_MASK)\n #endif\t/* !__FLOAT128__ */\n \n /* Define ALIASNAME as a strong alias for NAME.  */"}]}