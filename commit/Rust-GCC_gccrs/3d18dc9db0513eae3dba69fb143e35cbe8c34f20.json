{"sha": "3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QxOGRjOWRiMDUxM2VhZTNkYmE2OWZiMTQzZTM1Y2JlOGMzNGYyMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-11T05:17:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-11T05:17:03Z"}, "message": "Implement P0318R1 unwrap_ref_decay and unwrap_reference\n\n\tImplement P0318R1 unwrap_ref_decay and unwrap_reference\n\t* include/std/type_traits (unwrap_reference, unwrap_reference_t)\n\t(unwrap_ref_decay, unwrap_ref_decay_t): New traits and aliases.\n\t* testsuite/20_util/unwrap_reference/1.cc: New test.\n\t* testsuite/20_util/unwrap_reference/2.cc: New test.\n\nFrom-SVN: r266010", "tree": {"sha": "96c97abb9d4643a91f2ccfcbecca87eef472f85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96c97abb9d4643a91f2ccfcbecca87eef472f85e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b736f6bd78d9238b8557ade7d6bbdabec51d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b736f6bd78d9238b8557ade7d6bbdabec51d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b736f6bd78d9238b8557ade7d6bbdabec51d97"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "ceaac2db195d2466834ce5ae12c09ae5f89cedea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "patch": "@@ -1,5 +1,11 @@\n 2018-11-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tImplement P0318R1 unwrap_ref_decay and unwrap_reference\n+\t* include/std/type_traits (unwrap_reference, unwrap_reference_t)\n+\t(unwrap_ref_decay, unwrap_ref_decay_t): New traits and aliases.\n+\t* testsuite/20_util/unwrap_reference/1.cc: New test.\n+\t* testsuite/20_util/unwrap_reference/2.cc: New test.\n+\n \tImplement P1007R3 std::assume_aligned\n \t* include/std/memory (assume_aligned): Implement for C++17.\n \t* testsuite/20_util/assume_aligned/1.cc: New test."}, {"sha": "60094f9897b5b2b8265847037bec2b77c9a51d18", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "patch": "@@ -3015,6 +3015,20 @@ template <typename _From, typename _To>\n   template<typename _Tp>\n     using type_identity_t = typename type_identity<_Tp>::type;\n \n+  /// Unwrap a reference_wrapper\n+  template<typename _Tp>\n+    struct unwrap_reference { using type = _Tp; };\n+\n+  template<typename _Tp>\n+    struct unwrap_reference<reference_wrapper<_Tp>> { using type = _Tp&; };\n+\n+  /// Decay type and if it's a reference_wrapper, unwrap it\n+  template<typename _Tp>\n+    struct unwrap_ref_decay : unwrap_reference<decay_t<_Tp>> { };\n+\n+  template<typename _Tp>\n+    using unwrap_ref_decay_t = typename unwrap_ref_decay<_Tp>::type;\n+\n #endif // C++2a\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "d259db91418c0ced7db6daf2520c852f2887771f", "filename": "libstdc++-v3/testsuite/20_util/unwrap_reference/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funwrap_reference%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funwrap_reference%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funwrap_reference%2F1.cc?ref=3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+\n+template<typename T, typename U> struct expect_same;\n+template<typename T> struct expect_same<T, T> : std::true_type { };\n+\n+template<typename T, typename U = T>\n+  constexpr bool check()\n+  {\n+    using std::unwrap_reference;\n+    using T2 = typename unwrap_reference<T>::type;\n+    static_assert(expect_same<T2, typename unwrap_reference<T2>::type>::value);\n+    return expect_same<T2, U>::value;\n+  }\n+\n+void\n+test01()\n+{\n+  static_assert( check<int>() );\n+  static_assert( check<const int>() );\n+  static_assert( check<const int&>() );\n+  static_assert( check<const int*>() );\n+  static_assert( check<const int*&>() );\n+\n+  // reference_wrapper types should get unwrapped:\n+  static_assert( check<std::reference_wrapper<int>, int&>() );\n+  static_assert( check<std::reference_wrapper<const int>, const int&>() );\n+  static_assert( check<std::reference_wrapper<long>, long&>() );\n+\n+  // But not cv-qualified reference_wrapper types:\n+  static_assert( check<const std::reference_wrapper<int>>() );\n+  static_assert( check<volatile std::reference_wrapper<int>>() );\n+  static_assert( check<const volatile std::reference_wrapper<int>>() );\n+\n+  // Or references to reference_wrapper types:\n+  static_assert( check<std::reference_wrapper<int>&>() );\n+  static_assert( check<std::reference_wrapper<int>&&>() );\n+  static_assert( check<const std::reference_wrapper<int>&>() );\n+}"}, {"sha": "47bfa71975ef1515e1e1b75a25727443b4d1e8ee", "filename": "libstdc++-v3/testsuite/20_util/unwrap_reference/2.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funwrap_reference%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d18dc9db0513eae3dba69fb143e35cbe8c34f20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funwrap_reference%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funwrap_reference%2F2.cc?ref=3d18dc9db0513eae3dba69fb143e35cbe8c34f20", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+\n+template<typename T, typename U> struct expect_same;\n+template<typename T> struct expect_same<T, T> : std::true_type { };\n+\n+template<typename T, typename U = std::decay_t<T>>\n+  constexpr bool check()\n+  {\n+    using T2 = typename std::unwrap_ref_decay<T>::type;\n+    static_assert(expect_same<T2, std::unwrap_ref_decay_t<T>>::value);\n+    return expect_same<T2, U>::value;\n+  }\n+\n+void\n+test01()\n+{\n+  static_assert( check<int>() );\n+  static_assert( check<const int>() );\n+  static_assert( check<const int&>() );\n+  static_assert( check<const int*>() );\n+  static_assert( check<const int*&>() );\n+\n+  // reference_wrapper types (including cv and references) get unwrapped:\n+  static_assert( check<std::reference_wrapper<int>, int&>() );\n+  static_assert( check<std::reference_wrapper<int>&, int&>() );\n+  static_assert( check<const std::reference_wrapper<int>, int&>() );\n+  static_assert( check<const std::reference_wrapper<int>&, int&>() );\n+  static_assert( check<std::reference_wrapper<const int>, const int&>() );\n+  static_assert( check<std::reference_wrapper<const int>&, const int&>() );\n+  static_assert( check<std::reference_wrapper<long>, long&>() );\n+}"}]}