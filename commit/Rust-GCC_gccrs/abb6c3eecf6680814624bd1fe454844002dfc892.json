{"sha": "abb6c3eecf6680814624bd1fe454844002dfc892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJiNmMzZWVjZjY2ODA4MTQ2MjRiZDFmZTQ1NDg0NDAwMmRmYzg5Mg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2019-12-30T21:42:26Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-12-30T21:42:26Z"}, "message": "Introduce an internal API for VxWorks version checks\n\nThis changes introduces an internal API for VxWorks version checks\nwithin runtime files, a prerequisite to a few fixes coming up for libstdc++\nbuilds on more recent versions of the OS.\n\n2019-12-30  Olivier Hainque  <hainque@adacore.com>\n\n\tgcc/\n\t* config/vxworks/_vxworks-versions.h: New file.\n\t* config.gcc (*-*-vxworks*): Add it to extra_headers.\n\n\tlibgcc/\n\t* config/gthr-vxworks.h: Use _vxworks-versions.h.\n\t* config/gthr-vxworks-tls.c: Likewise.\n\nFrom-SVN: r279783", "tree": {"sha": "a612594b95661ae744ec614c6c14e93bf6723fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a612594b95661ae744ec614c6c14e93bf6723fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abb6c3eecf6680814624bd1fe454844002dfc892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb6c3eecf6680814624bd1fe454844002dfc892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb6c3eecf6680814624bd1fe454844002dfc892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb6c3eecf6680814624bd1fe454844002dfc892/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c62f986a37898b5ebd36bd8f184d9e8d969d7ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62f986a37898b5ebd36bd8f184d9e8d969d7ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62f986a37898b5ebd36bd8f184d9e8d969d7ab4"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "ee7346a2a60a0a94b464f9269b944433713e6e52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb6c3eecf6680814624bd1fe454844002dfc892/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb6c3eecf6680814624bd1fe454844002dfc892/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abb6c3eecf6680814624bd1fe454844002dfc892", "patch": "@@ -1,3 +1,8 @@\n+2019-12-30  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks/_vxworks-versions.h: New file.\n+\t* config.gcc (*-*-vxworks*): Add it to extra_headers.\n+\n 2019-12-30  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/t-vxworks: Rework the vxworks.o compilation"}, {"sha": "f4f58d2b185d4afd600313d27cc0f5de3a04233a", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb6c3eecf6680814624bd1fe454844002dfc892/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb6c3eecf6680814624bd1fe454844002dfc892/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=abb6c3eecf6680814624bd1fe454844002dfc892", "patch": "@@ -961,6 +961,13 @@ case ${target} in\n   target_has_targetcm=\"yes\"\n   use_gcc_stdint=provide\n   tm_file=\"${tm_file} vxworks-stdint.h\"\n+\n+  # This private header exposes a consistent interface for checks on\n+  # the VxWorks version our runtime header files need to perform, based on\n+  # what the system headers adverstise:\n+\n+  extra_headers=\"${extra_headers} ../vxworks/_vxworks-versions.h\"\n+\n   case ${enable_threads} in\n     no) ;;\n     \"\" | yes | vxworks) thread_file='vxworks' ;;"}, {"sha": "3b7c4b00a7c7161ec84a0f93f2cd1b6d8c999511", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb6c3eecf6680814624bd1fe454844002dfc892/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb6c3eecf6680814624bd1fe454844002dfc892/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=abb6c3eecf6680814624bd1fe454844002dfc892", "patch": "@@ -1,3 +1,8 @@\n+2019-12-30  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/gthr-vxworks.h: Use _vxworks-versions.h.\n+\t* config/gthr-vxworks-tls.c: Likewise.\n+\n 2019-12-30  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/gthr-vxworks.h (GTHREAD_ONCE_INIT): Use"}, {"sha": "63715e65eb82a031897a0ae030c43607e699cde7", "filename": "libgcc/config/gthr-vxworks-tls.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb6c3eecf6680814624bd1fe454844002dfc892/libgcc%2Fconfig%2Fgthr-vxworks-tls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb6c3eecf6680814624bd1fe454844002dfc892/libgcc%2Fconfig%2Fgthr-vxworks-tls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-vxworks-tls.c?ref=abb6c3eecf6680814624bd1fe454844002dfc892", "patch": "@@ -45,6 +45,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <errno.h>\n #endif\n \n+#include <_vxworks-versions.h>\n+\n /* Thread-local storage.\n \n    A gthread TLS key is simply an offset in an array, the address of which\n@@ -91,10 +93,10 @@ static int self_owner;\n    it is only removed when unloading this module.  */\n static volatile int delete_hook_installed;\n \n-/* TLS data access internal API.  A straight __thread variable on VxWorks 7,\n-   a pointer returned by kernel provided routines otherwise.  */\n+/* TLS data access internal API.  A straight __thread variable starting with\n+   VxWorks 7, a pointer returned by kernel provided routines otherwise.  */\n \n-#ifdef __VXWORKS7__\n+#if _VXWORKS_MAJOR_GE(7)\n \n static __thread struct tls_data *__gthread_tls_data;\n \n@@ -118,7 +120,7 @@ extern void __gthread_leave_tls_dtor_context (void);\n #define VX_ENTER_TLS_DTOR() __gthread_enter_tls_dtor_context ()\n #define VX_LEAVE_TLS_DTOR() __gthread_leave_tls_dtor_context ()\n \n-#endif /* __VXWORKS7__ */\n+#endif\n \n /* This is a global structure which records all of the active keys.\n "}, {"sha": "65c5096b50bac8f61fb5cede06be6338680f905e", "filename": "libgcc/config/gthr-vxworks.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb6c3eecf6680814624bd1fe454844002dfc892/libgcc%2Fconfig%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb6c3eecf6680814624bd1fe454844002dfc892/libgcc%2Fconfig%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-vxworks.h?ref=abb6c3eecf6680814624bd1fe454844002dfc892", "patch": "@@ -35,13 +35,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #else\n \n #include <vxWorks.h>\n-#include <version.h>\n-\n-/* Conditional compilation directives are easier to read when they fit on a\n-   single line, which is helped by macros with shorter names.  */\n-#define _VXW_MAJOR _WRS_VXWORKS_MAJOR\n-#define _VXW_MINOR _WRS_VXWORKS_MINOR\n-#define _VXW_PRE_69 (_VXW_MAJOR  < 6 || (_VXW_MAJOR == 6 && _VXW_MINOR < 9))\n+#include <_vxworks-versions.h>\n \n /* Some VxWorks headers profusely use typedefs of a pointer to a function with\n    undefined number of arguments.  */\n@@ -62,7 +56,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* RTP, pre 6.9.  */\n \n-#if defined(__RTP__) && _VXW_PRE_69\n+#if defined(__RTP__) && _VXWORKS_PRE(6,9)\n \n #define __TAS(x) vxCas ((x), 0, 1)\n typedef volatile unsigned char __vx_tas_t;\n@@ -71,7 +65,7 @@ typedef volatile unsigned char __vx_tas_t;\n \n /* RTP, 6.9 and beyond.  */\n \n-#if defined(__RTP__) && !_VXW_PRE_69\n+#if defined(__RTP__) && !_VXWORKS_PRE(6,9)\n \n #define __TAS(x) vxAtomicCas ((x), 0, 1)\n typedef atomic_t __vx_tas_t;"}]}