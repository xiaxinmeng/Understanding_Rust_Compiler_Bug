{"sha": "7cb6668a1f251a35f26875398992eb4b1ae78f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiNjY2OGExZjI1MWEzNWYyNjg3NTM5ODk5MmViNGIxYWU3OGYzMA==", "commit": {"author": {"name": "Meador Inge", "email": "meadori@codesourcery.com", "date": "2012-05-18T09:04:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-05-18T09:04:38Z"}, "message": "re PR rtl-optimization/53352 (Incorrect CSE optimization on RTL expressions with a paradoxical subreg)\n\ngcc/\n2012-05-15  Meador Inge  <meadori@codesourcery.com>\n\n\tPR rtl-optimization/53352\n\t* cse.c (equiv_constant): Ignore paradoxical subregs.\n\ngcc/testsuite/\n2012-05-15  Meador Inge  <meadori@codesourcery.com>\n\n\tPR rtl-optimization/53352\n\t* gcc.dg/pr53352.c: New test.\n\nFrom-SVN: r187648", "tree": {"sha": "91ed913d04c3205957d44e36e2b7751a0fd287dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ed913d04c3205957d44e36e2b7751a0fd287dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cb6668a1f251a35f26875398992eb4b1ae78f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb6668a1f251a35f26875398992eb4b1ae78f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb6668a1f251a35f26875398992eb4b1ae78f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb6668a1f251a35f26875398992eb4b1ae78f30/comments", "author": {"login": "meadori", "id": 296965, "node_id": "MDQ6VXNlcjI5Njk2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/296965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meadori", "html_url": "https://github.com/meadori", "followers_url": "https://api.github.com/users/meadori/followers", "following_url": "https://api.github.com/users/meadori/following{/other_user}", "gists_url": "https://api.github.com/users/meadori/gists{/gist_id}", "starred_url": "https://api.github.com/users/meadori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meadori/subscriptions", "organizations_url": "https://api.github.com/users/meadori/orgs", "repos_url": "https://api.github.com/users/meadori/repos", "events_url": "https://api.github.com/users/meadori/events{/privacy}", "received_events_url": "https://api.github.com/users/meadori/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a3afb1a3d9959742fc9279ffba9f9acd994d8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3afb1a3d9959742fc9279ffba9f9acd994d8f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3afb1a3d9959742fc9279ffba9f9acd994d8f2"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "ea1941e17b9003c7d507c6fd94bbe754b20b6994", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cb6668a1f251a35f26875398992eb4b1ae78f30", "patch": "@@ -1,3 +1,8 @@\n+2012-05-18  Meador Inge  <meadori@codesourcery.com>\n+\n+\tPR rtl-optimization/53352\n+\t* cse.c (equiv_constant): Ignore paradoxical subregs.\n+\n 2012-05-17  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR rtl-optimization/53125"}, {"sha": "9f4e97932eda5511565b19e2d3f06476ac2a7e17", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7cb6668a1f251a35f26875398992eb4b1ae78f30", "patch": "@@ -3786,8 +3786,12 @@ equiv_constant (rtx x)\n \t    }\n \t}\n \n-      /* Otherwise see if we already have a constant for the inner REG.  */\n+      /* Otherwise see if we already have a constant for the inner REG,\n+\t and if that is enough to calculate an equivalent constant for\n+\t the subreg.  Note that the upper bits of paradoxical subregs\n+\t are undefined, so they cannot be said to equal anything.  */\n       if (REG_P (SUBREG_REG (x))\n+\t  && GET_MODE_SIZE (mode) <= GET_MODE_SIZE (imode)\n \t  && (new_rtx = equiv_constant (SUBREG_REG (x))) != 0)\n         return simplify_subreg (mode, new_rtx, imode, SUBREG_BYTE (x));\n "}, {"sha": "64a011c0e8765e022cc0d208a5cee1e64335502c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7cb6668a1f251a35f26875398992eb4b1ae78f30", "patch": "@@ -1,3 +1,8 @@\n+2012-05-18  Meador Inge  <meadori@codesourcery.com>\n+\n+\tPR rtl-optimization/53352\n+\t* gcc.dg/pr53352.c: New test.\n+\n 2012-05-17  David S. Miller  <davem@davemloft.net>\n \n \t* gfortran.dg/bessel_7.f90: Bump allowed precision to avoid"}, {"sha": "1d2edf8bb8c87acff05a5c20c02f59fd8628860a", "filename": "gcc/testsuite/gcc.dg/pr53352.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb6668a1f251a35f26875398992eb4b1ae78f30/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53352.c?ref=7cb6668a1f251a35f26875398992eb4b1ae78f30", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+#include <stdlib.h>\n+\n+typedef union\n+{\n+  struct\n+  {\n+    unsigned char a;\n+    unsigned char b;\n+    unsigned char c;\n+    unsigned char d;\n+  } parts;\n+  unsigned long whole;\n+} T;\n+\n+T *g_t;\n+\n+void bar (unsigned long x)\n+{\n+  if (x != 0)\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  T one;\n+  T two;\n+  T tmp1, tmp2;\n+\n+  one.whole = 0xFFE0E0E0UL;\n+  two.whole = 0xFF000000UL;\n+  tmp1.parts = two.parts;\n+  tmp2.parts = one.parts;\n+  tmp2.parts.c = tmp1.parts.c;\n+  one.parts = tmp2.parts;\n+\n+  g_t = &one;\n+  bar (0);\n+}"}]}