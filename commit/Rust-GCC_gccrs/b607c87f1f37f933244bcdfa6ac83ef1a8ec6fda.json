{"sha": "b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwN2M4N2YxZjM3ZjkzMzI0NGJjZGZhNmFjODNlZjFhOGVjNmZkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-04-15T05:53:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-15T05:53:55Z"}, "message": "parse.y (after_type_declarator_intern): New nonterminal.\n\n\t* parse.y (after_type_declarator_intern): New nonterminal.\n\t(after_type_declarator): Use it.\n\t(direct_after_type_declarator): Likewise.  Move above\n\tnonnested_type to fix reduce/reduce conflict resolution.\n\t(declmods): Reducing from just 'attributes' has EMPTY precedence.\n\t* Makefile.in (CONFLICTS): Update.\n\t* decl.c (define_label): Downgrade error for jumping over a\n\tnon-POD decl to pedwarn.\n\nFrom-SVN: r26472", "tree": {"sha": "6bf1dd88d90acc0178c9beb53c6fae9b141e0427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bf1dd88d90acc0178c9beb53c6fae9b141e0427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/comments", "author": null, "committer": null, "parents": [{"sha": "8856c2d20438edc7427350d5293c35a80e513526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8856c2d20438edc7427350d5293c35a80e513526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8856c2d20438edc7427350d5293c35a80e513526"}], "stats": {"total": 7812, "additions": 3982, "deletions": 3830}, "files": [{"sha": "b4adb084143e2ab34c51a9488a9bcb0e53b7c538", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "patch": "@@ -1,3 +1,15 @@\n+1999-04-15  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (after_type_declarator_intern): New nonterminal.\n+\t(after_type_declarator): Use it.\n+\t(direct_after_type_declarator): Likewise.  Move above \n+\tnonnested_type to fix reduce/reduce conflict resolution.\n+\t(declmods): Reducing from just 'attributes' has EMPTY precedence.\n+\t* Makefile.in (CONFLICTS): Update.\n+\n+\t* decl.c (define_label): Downgrade error for jumping over a\n+\tnon-POD decl to pedwarn.\n+\n 1999-04-14  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (popclass): Change declaration."}, {"sha": "d806506e2c52d05570bf7e0fa3530c15d6356a07", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "patch": "@@ -225,7 +225,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 36 shift/reduce conflicts and 42 reduce/reduce conflicts.\n+CONFLICTS = expect 30 shift/reduce conflicts and 42 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "e1e63aefdaac3ba92ee020f1003876ab512d2cc4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "patch": "@@ -4762,20 +4762,38 @@ define_label (filename, line, name)\n \t\t\t&& !(DECL_INITIAL (new_decls) == NULL_TREE\n \t\t\t     && pod_type_p (TREE_TYPE (new_decls))))\n \t\t      {\n-\t\t\tif (! identified) \n+\t\t\t/* This is really only important if we're crossing\n+\t\t\t   an initialization.  The POD stuff is just\n+\t\t\t   pedantry; why should it matter if the class\n+\t\t\t   contains a field of pointer to member type?  */\n+\t\t\tint problem = (DECL_INITIAL (new_decls)\n+\t\t\t\t       || (TYPE_NEEDS_CONSTRUCTING\n+\t\t\t\t\t   (TREE_TYPE (new_decls))));\n+\n+\t\t\tif (! identified)\n \t\t\t  {\n-\t\t\t    cp_error (\"jump to label `%D'\", decl);\n-\t\t\t    error_with_file_and_line (uses->filename_o_goto,\n-\t\t\t\t\t\t      uses->lineno_o_goto,\n-\t\t\t\t\t\t      \"  from here\");\n+\t\t\t    if (problem)\n+\t\t\t      {\n+\t\t\t\tcp_error (\"jump to label `%D'\", decl);\n+\t\t\t\terror_with_file_and_line\n+\t\t\t\t  (uses->filename_o_goto,\n+\t\t\t\t   uses->lineno_o_goto, \"  from here\");\n+\t\t\t      }\n+\t\t\t    else\n+\t\t\t      {\n+\t\t\t\tcp_pedwarn (\"jump to label `%D'\", decl);\n+\t\t\t\tpedwarn_with_file_and_line\n+\t\t\t\t  (uses->filename_o_goto,\n+\t\t\t\t   uses->lineno_o_goto, \"  from here\");\n+\t\t\t      }\n \t\t\t    identified = 1;\n \t\t\t}\n-\t\t\tif (DECL_INITIAL (new_decls)\n-\t\t\t    || TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (new_decls)))\n+\n+\t\t\tif (problem)\n \t\t\t  cp_error_at (\"  crosses initialization of `%#D'\",\n \t\t\t\t       new_decls);\n \t\t\telse\n-\t\t\t  cp_error_at (\"  enters scope of non-POD `%#D'\",\n+\t\t\t  cp_pedwarn_at (\"  enters scope of non-POD `%#D'\",\n \t\t\t\t\t new_decls);\n \t\t      }\n \t\t    new_decls = TREE_CHAIN (new_decls);"}, {"sha": "fda5e449d16eb03b2ee18b38f055a55942fc004b", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 3909, "deletions": 3799, "changes": 7708, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda"}, {"sha": "b35885b3e3c941d8a771c0f05c732b84aa571e5a", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=b607c87f1f37f933244bcdfa6ac83ef1a8ec6fda", "patch": "@@ -205,6 +205,7 @@ empty_parms ()\n \n %type <ttype> declarator notype_declarator after_type_declarator\n %type <ttype> notype_declarator_intern absdcl_intern\n+%type <ttype> after_type_declarator_intern\n %type <ttype> direct_notype_declarator direct_after_type_declarator\n %type <itype> components notype_components\n %type <ttype> component_decl component_decl_1 \n@@ -1778,7 +1779,7 @@ declmods:\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n \t| declmods attributes\n \t\t{ $$ = hash_tree_cons ($2, NULL_TREE, $1); }\n-\t| attributes\n+\t| attributes  %prec EMPTY\n \t\t{ $$ = hash_tree_cons ($1, NULL_TREE, NULL_TREE); }\n \t;\n \n@@ -2731,23 +2732,50 @@ maybe_parmlist:\n \t;\n \n /* A declarator that is allowed only after an explicit typespec.  */\n+\n+after_type_declarator_intern:\n+\t  after_type_declarator\n+\t| attributes after_type_declarator\n+                {\n+\t\t  /* Provide support for '(' attributes '*' declarator ')'\n+\t\t     etc */\n+\t\t  $$ = decl_tree_cons ($1, $2, NULL_TREE);\n+\t\t}\n+\t;\n+\n /* may all be followed by prec '.' */\n after_type_declarator:\n-\t  '*' nonempty_cv_qualifiers after_type_declarator  %prec UNARY\n+\t  '*' nonempty_cv_qualifiers after_type_declarator_intern  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2.t, $3); }\n-\t| '&' nonempty_cv_qualifiers after_type_declarator  %prec UNARY\n+\t| '&' nonempty_cv_qualifiers after_type_declarator_intern  %prec UNARY\n \t\t{ $$ = make_reference_declarator ($2.t, $3); }\n-\t| '*' after_type_declarator  %prec UNARY\n+\t| '*' after_type_declarator_intern  %prec UNARY\n \t\t{ $$ = make_pointer_declarator (NULL_TREE, $2); }\n-\t| '&' after_type_declarator  %prec UNARY\n+\t| '&' after_type_declarator_intern  %prec UNARY\n \t\t{ $$ = make_reference_declarator (NULL_TREE, $2); }\n-\t| ptr_to_mem cv_qualifiers after_type_declarator\n+\t| ptr_to_mem cv_qualifiers after_type_declarator_intern\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n \t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n \t\t}\n \t| direct_after_type_declarator\n \t;\n \n+direct_after_type_declarator:\n+\t  direct_after_type_declarator maybe_parmlist cv_qualifiers exception_specification_opt  %prec '.'\n+\t\t{ $$ = make_call_declarator ($$, $2, $3, $4); }\n+\t| direct_after_type_declarator '[' nonmomentary_expr ']'\n+\t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }\n+\t| direct_after_type_declarator '[' ']'\n+\t\t{ $$ = build_parse_node (ARRAY_REF, $$, NULL_TREE); }\n+\t| '(' after_type_declarator_intern ')'\n+\t\t{ $$ = $2; }\n+\t| nested_name_specifier type_name  %prec EMPTY\n+\t\t{ push_nested_class ($1, 3);\n+\t\t  $$ = build_parse_node (SCOPE_REF, $$, $2);\n+\t\t  TREE_COMPLEXITY ($$) = current_class_depth; }\n+\t| type_name  %prec EMPTY\n+\t;\n+\n nonnested_type:\n \t  type_name  %prec EMPTY\n \t\t{\n@@ -2781,22 +2809,6 @@ nested_type:\n \t\t{ $$ = get_type_decl ($2); }\n \t;\n \n-direct_after_type_declarator:\n-\t  direct_after_type_declarator maybe_parmlist cv_qualifiers exception_specification_opt  %prec '.'\n-\t\t{ $$ = make_call_declarator ($$, $2, $3, $4); }\n-\t| direct_after_type_declarator '[' nonmomentary_expr ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }\n-\t| direct_after_type_declarator '[' ']'\n-\t\t{ $$ = build_parse_node (ARRAY_REF, $$, NULL_TREE); }\n-\t| '(' after_type_declarator ')'\n-\t\t{ $$ = $2; }\n-\t| nested_name_specifier type_name  %prec EMPTY\n-\t\t{ push_nested_class ($1, 3);\n-\t\t  $$ = build_parse_node (SCOPE_REF, $$, $2);\n-\t\t  TREE_COMPLEXITY ($$) = current_class_depth; }\n-\t| type_name  %prec EMPTY\n-\t;\n-\n /* A declarator allowed whether or not there has been\n    an explicit typespec.  These cannot redeclare a typedef-name.  */\n "}]}