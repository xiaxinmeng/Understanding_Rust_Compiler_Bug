{"sha": "9753d4e4b1bc8b024114f36907840023c346ef57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1M2Q0ZTRiMWJjOGIwMjQxMTRmMzY5MDc4NDAwMjNjMzQ2ZWY1Nw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:36:16Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:36:16Z"}, "message": "(mips_select_rtx_section, mips_select_section): New functions.\n\n(mips_select_rtx_section, mips_select_section): New\nfunctions.  Prefer rdata when TARGET_EMBEDDED_DATA, and prefer\nsdata otherwise.\n\nFrom-SVN: r7031", "tree": {"sha": "6525d27120bf73a87c432d222972ceab82443ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6525d27120bf73a87c432d222972ceab82443ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9753d4e4b1bc8b024114f36907840023c346ef57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9753d4e4b1bc8b024114f36907840023c346ef57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9753d4e4b1bc8b024114f36907840023c346ef57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9753d4e4b1bc8b024114f36907840023c346ef57/comments", "author": null, "committer": null, "parents": [{"sha": "365c6a0bb8fcaf03a90766cc5865a7d6b651bf81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365c6a0bb8fcaf03a90766cc5865a7d6b651bf81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/365c6a0bb8fcaf03a90766cc5865a7d6b651bf81"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "562a1e98a6d27007586612e4efe672bf8e136621", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9753d4e4b1bc8b024114f36907840023c346ef57/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9753d4e4b1bc8b024114f36907840023c346ef57/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9753d4e4b1bc8b024114f36907840023c346ef57", "patch": "@@ -5185,3 +5185,80 @@ simple_epilogue_p ()\n \n   return (compute_frame_size (get_frame_size ())) == 0;\n }\n+\f\n+/* Choose the section to use for the constant rtx expression X that has\n+   mode MODE.  */\n+\n+mips_select_rtx_section (mode, x)\n+     enum machine_mode mode;\n+     rtx x;\n+{\n+  if (TARGET_EMBEDDED_DATA)\n+    {\n+      /* For embedded applications, always put constants in read-only data,\n+\t in order to reduce RAM usage.  */\n+      rdata_section ();\n+    }\n+  else\n+    {\n+      /* For hosted applications, always put constants in small data if\n+\t possible, as this gives the best performance.  */\n+     \n+      if (GET_MODE_SIZE (mode) <= mips_section_threshold\n+\t  && mips_section_threshold > 0)\n+\tsdata_section ();\n+      else\n+\trdata_section ();\n+    }\n+}\n+\n+/* Choose the section to use for DECL.  RELOC is true if its value contains\n+   any relocatable expression.  */\n+\n+mips_select_section (decl, reloc)\n+     tree decl;\n+     int reloc;\n+{\n+  int size = int_size_in_bytes (TREE_TYPE (decl));\n+\n+  if (TARGET_EMBEDDED_DATA)\n+    {\n+      /* For embedded applications, always put an object in read-only data\n+\t if possible, in order to reduce RAM usage.  */\n+\n+      if (((TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n+\t    && DECL_INITIAL (decl)\n+\t    && (DECL_INITIAL (decl) == error_mark_node\n+\t\t|| TREE_CONSTANT (DECL_INITIAL (decl))))\n+\t   /* Deal with calls from output_constant_def_contents.  */\n+\t   || (TREE_CODE (decl) != VAR_DECL\n+\t       && (TREE_CODE (decl) != STRING_CST\n+\t\t   || !flag_writable_strings)))\n+\t  && ! (flag_pic && reloc))\n+\trdata_section ();\n+      else if (size > 0 && size <= mips_section_threshold)\n+\tsdata_section ();\n+      else\n+\tdata_section ();\n+    }\n+  else\n+    {\n+      /* For hosted applications, always put an object in small data if\n+\t possible, as this gives the best performance.  */\n+\n+      if (size > 0 && size <= mips_section_threshold)\n+\tsdata_section ();\n+      else if (((TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n+\t\t && DECL_INITIAL (decl)\n+\t\t && (DECL_INITIAL (decl) == error_mark_node\n+\t\t     || TREE_CONSTANT (DECL_INITIAL (decl))))\n+\t\t/* Deal with calls from output_constant_def_contents.  */\n+\t\t|| (TREE_CODE (decl) != VAR_DECL\n+\t\t    && (TREE_CODE (decl) != STRING_CST\n+\t\t\t|| !flag_writable_strings)))\n+\t       && ! (flag_pic && reloc))\n+\trdata_section ();\n+      else\n+\tdata_section ();\n+    }\n+}"}]}