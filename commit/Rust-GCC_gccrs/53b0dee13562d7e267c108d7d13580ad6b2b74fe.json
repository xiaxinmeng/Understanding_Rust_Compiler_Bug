{"sha": "53b0dee13562d7e267c108d7d13580ad6b2b74fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiMGRlZTEzNTYyZDdlMjY3YzEwOGQ3ZDEzNTgwYWQ2YjJiNzRmZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2012-12-27T17:53:17Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2012-12-27T17:53:17Z"}, "message": "rs6000.c (rs6000_deligitimze_address): Do not delegitimize TLS addresses on AIX.\n\n        * config/rs6000/rs6000.c (rs6000_deligitimze_address): Do not\n        delegitimize TLS addresses on AIX.\n        (rs6000_legitimize_tls_address_aix): Append TLS symbol qualifier.\n        Set SYMBOL_FLAG_LOCAL on module symbol.\n        (output_toc): Do not append TLS symbol qualifier here.\n        * config/rs6000/rs6000.md (tls_get_addr_internal): Add GPR 4 to\n        clobbers.\n\nFrom-SVN: r194732", "tree": {"sha": "7e1f0af05f3bbeeb9a7aad33f6094003215fbca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1f0af05f3bbeeb9a7aad33f6094003215fbca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b0dee13562d7e267c108d7d13580ad6b2b74fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b0dee13562d7e267c108d7d13580ad6b2b74fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b0dee13562d7e267c108d7d13580ad6b2b74fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b0dee13562d7e267c108d7d13580ad6b2b74fe/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e1883a2da28dc1fcc20783fbb318b9e64059a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1883a2da28dc1fcc20783fbb318b9e64059a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1883a2da28dc1fcc20783fbb318b9e64059a2e"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "7feee1c7bcc5be0faa7309cca78d8cde71795c46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b0dee13562d7e267c108d7d13580ad6b2b74fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b0dee13562d7e267c108d7d13580ad6b2b74fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53b0dee13562d7e267c108d7d13580ad6b2b74fe", "patch": "@@ -1,3 +1,13 @@\n+2012-12-27  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_deligitimze_address): Do not\n+\tdelegitimize TLS addresses on AIX.\n+\t(rs6000_legitimize_tls_address_aix): Append TLS symbol qualifier.\n+\tSet SYMBOL_FLAG_LOCAL on module symbol.\n+\t(output_toc): Do not append TLS symbol qualifier here.\n+\t* config/rs6000/rs6000.md (tls_get_addr_internal): Add GPR 4 to\n+\tclobbers.\n+\n 2012-12-27  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* target.def (supports_function_versions): Fix typo."}, {"sha": "bc663eabcc08c06b9f893e20ba86163bba44717b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b0dee13562d7e267c108d7d13580ad6b2b74fe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b0dee13562d7e267c108d7d13580ad6b2b74fe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=53b0dee13562d7e267c108d7d13580ad6b2b74fe", "patch": "@@ -5826,6 +5826,15 @@ rs6000_delegitimize_address (rtx orig_x)\n \t}\n #endif\n       y = XVECEXP (y, 0, 0);\n+\n+#ifdef HAVE_AS_TLS\n+      /* Do not associate thread-local symbols with the original\n+\t constant pool symbol.  */\n+      if (TARGET_XCOFF\n+\t  && SYMBOL_REF_TLS_MODEL (get_pool_constant (y)) >= TLS_MODEL_REAL)\n+\treturn orig_x;\n+#endif\n+\n       if (offset != NULL_RTX)\n \ty = gen_rtx_PLUS (Pmode, y, offset);\n       if (!MEM_P (orig_x))\n@@ -5899,10 +5908,29 @@ rs6000_got_sym (void)\n static rtx\n rs6000_legitimize_tls_address_aix (rtx addr, enum tls_model model)\n {\n-  rtx sym, mem, tocref, tlsreg, tmpreg, dest;\n+  rtx sym, mem, tocref, tlsreg, tmpreg, dest, tlsaddr;\n+  const char *name;\n+  char *tlsname;\n+\n+  name = XSTR (addr, 0);\n+  /* Append TLS CSECT qualifier, unless the symbol already is qualified\n+     or the symbol will be in TLS private data section.  */\n+  if (name[strlen (name) - 1] != ']'\n+      && (TREE_PUBLIC (SYMBOL_REF_DECL (addr))\n+\t  || bss_initializer_p (SYMBOL_REF_DECL (addr))))\n+    {\n+      tlsname = XALLOCAVEC (char, strlen (name) + 4);\n+      strcpy (tlsname, name);\n+      strcat (tlsname,\n+\t      bss_initializer_p (SYMBOL_REF_DECL (addr)) ? \"[UL]\" : \"[TL]\");\n+      tlsaddr = copy_rtx (addr);\n+      XSTR (tlsaddr, 0) = ggc_strdup (tlsname);\n+    }\n+  else\n+    tlsaddr = addr;\n \n   /* Place addr into TOC constant pool.  */\n-  sym = force_const_mem (GET_MODE (addr), addr);\n+  sym = force_const_mem (GET_MODE (tlsaddr), tlsaddr);\n \n   /* Output the TOC entry and create the MEM referencing the value.  */\n   if (constant_pool_expr_p (XEXP (sym, 0))\n@@ -5919,27 +5947,28 @@ rs6000_legitimize_tls_address_aix (rtx addr, enum tls_model model)\n   if (model == TLS_MODEL_GLOBAL_DYNAMIC\n       || model == TLS_MODEL_LOCAL_DYNAMIC)\n     {\n-      rtx module = gen_reg_rtx (Pmode);\n       /* Create new TOC reference for @m symbol.  */\n-      const char *name = XSTR (XVECEXP (XEXP (mem, 0), 0, 0), 0);\n-      char *name2 = XALLOCAVEC (char, strlen (name) + 1);\n-      strcpy (name2, \"*LCM\");\n-      strcat (name2, name + 3);\n-      tocref = create_TOC_reference (gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t\t ggc_alloc_string (name2,\n-\t\t\t\t\t\t\t\t\t   strlen (name2))),\n-\t\t\t\t     NULL_RTX);\n-      rtx mem2 = gen_const_mem (Pmode, tocref);\n-      set_mem_alias_set (mem2, get_TOC_alias_set ());\n+      name = XSTR (XVECEXP (XEXP (mem, 0), 0, 0), 0);\n+      tlsname = XALLOCAVEC (char, strlen (name) + 1);\n+      strcpy (tlsname, \"*LCM\");\n+      strcat (tlsname, name + 3);\n+      rtx modaddr = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (tlsname));\n+      SYMBOL_REF_FLAGS (modaddr) |= SYMBOL_FLAG_LOCAL;\n+      tocref = create_TOC_reference (modaddr, NULL_RTX);\n+      rtx modmem = gen_const_mem (Pmode, tocref);\n+      set_mem_alias_set (modmem, get_TOC_alias_set ());\n       \n-      dest = gen_reg_rtx (Pmode);\n+      rtx modreg = gen_reg_rtx (Pmode);\n+      emit_insn (gen_rtx_SET (VOIDmode, modreg, modmem));\n+\n       tmpreg = gen_reg_rtx (Pmode);\n       emit_insn (gen_rtx_SET (VOIDmode, tmpreg, mem));\n-      emit_insn (gen_rtx_SET (VOIDmode, module, mem2));\n+\n+      dest = gen_reg_rtx (Pmode);\n       if (TARGET_32BIT)\n-\temit_insn (gen_tls_get_addrsi (dest, module, tmpreg));\n+\temit_insn (gen_tls_get_addrsi (dest, modreg, tmpreg));\n       else\n-\temit_insn (gen_tls_get_addrdi (dest, module, tmpreg));\n+\temit_insn (gen_tls_get_addrdi (dest, modreg, tmpreg));\n       return dest;\n     }\n   /* Obtain TLS pointer: 32 bit call or 64 bit GPR 13.  */\n@@ -22320,12 +22349,6 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n   if (TARGET_XCOFF && GET_CODE (base) == SYMBOL_REF\n       && SYMBOL_REF_TLS_MODEL (base) != 0)\n     {\n-      tree decl = SYMBOL_REF_DECL (base);\n-      if (bss_initializer_p (decl))\n-\tfputs (\"[UL]\", file);\n-      else\n-\tfputs (\"[TL]\", file);\n-\n       if (SYMBOL_REF_TLS_MODEL (base) == TLS_MODEL_LOCAL_EXEC)\n \tfputs (\"@le\", file);\n       else if (SYMBOL_REF_TLS_MODEL (base) == TLS_MODEL_INITIAL_EXEC)\n@@ -22340,10 +22363,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \t  RS6000_OUTPUT_BASENAME (file, name);\n \t  fputs (\"[TC],\", file);\n \t  output_addr_const (file, x);\n-\t  if (TREE_PUBLIC (SYMBOL_REF_DECL (base)))\n-\t    fputs (\"[TL]@m\", file);\n-\t  else\n-\t    fputs (\"[UL]@m\", file);\n+\t  fputs (\"@m\", file);\n \t}\n     }\n #endif"}, {"sha": "0fa3d88c15b898b295b6d292560b0265c8ef02fd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b0dee13562d7e267c108d7d13580ad6b2b74fe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b0dee13562d7e267c108d7d13580ad6b2b74fe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=53b0dee13562d7e267c108d7d13580ad6b2b74fe", "patch": "@@ -10022,6 +10022,7 @@\n   [(set (reg:P 3)\n \t(unspec:P [(reg:P 3) (reg:P 4)] UNSPEC_TLSTLS))\n    (clobber (reg:P 0))\n+   (clobber (reg:P 4))\n    (clobber (reg:P 5))\n    (clobber (reg:P 11))\n    (clobber (reg:CC CR0_REGNO))"}]}