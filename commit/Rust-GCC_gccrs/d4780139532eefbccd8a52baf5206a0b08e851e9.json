{"sha": "d4780139532eefbccd8a52baf5206a0b08e851e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ3ODAxMzk1MzJlZWZiY2NkOGE1MmJhZjUyMDZhMGIwOGU4NTFlOQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-01-08T01:12:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-05T08:18:58Z"}, "message": "[Ada] Ongoing work for AI12-0212: container aggregates\n\ngcc/ada/\n\n\t* sem_aggr.adb (Resolve_Indexed_Aggregate): For indexed\n\taggregates with component associations verify that if there is\n\tmore than one component association then all the choices are\n\tstatic, that the set of choices define a continuous sequence of\n\tvalues, and that if loop specfications appear, they do not\n\tinclude iterator filters or key expressions.", "tree": {"sha": "bc51778b21fd74573e51a6d47eae559181c056b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc51778b21fd74573e51a6d47eae559181c056b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4780139532eefbccd8a52baf5206a0b08e851e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4780139532eefbccd8a52baf5206a0b08e851e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4780139532eefbccd8a52baf5206a0b08e851e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4780139532eefbccd8a52baf5206a0b08e851e9/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec80b416554d3f41b5fd23cc86287af9b9a7d2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec80b416554d3f41b5fd23cc86287af9b9a7d2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec80b416554d3f41b5fd23cc86287af9b9a7d2d2"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "ef9566713fe48f58b65a74f5658faa929d54860e", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 104, "deletions": 3, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4780139532eefbccd8a52baf5206a0b08e851e9/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4780139532eefbccd8a52baf5206a0b08e851e9/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=d4780139532eefbccd8a52baf5206a0b08e851e9", "patch": "@@ -2980,9 +2980,12 @@ package body Sem_Aggr is\n             Index_Type : constant Entity_Id := Etype (Next_Formal (Container));\n             Comp_Type  : constant Entity_Id :=\n                                  Etype (Next_Formal (Next_Formal (Container)));\n-            Comp   : Node_Id;\n-            Choice : Node_Id;\n+            Comp        : Node_Id;\n+            Choice      : Node_Id;\n+            Num_Choices : Nat := 0;\n \n+            Hi_Val : Uint;\n+            Lo_Val : Uint;\n          begin\n             if Present (Expressions (N)) then\n                Comp := First (Expressions (N));\n@@ -2999,14 +3002,15 @@ package body Sem_Aggr is\n                   return;\n                end if;\n \n-               Comp := First (Expressions (N));\n+               Comp := First (Component_Associations (N));\n \n                while Present (Comp) loop\n                   if Nkind (Comp) = N_Component_Association then\n                      Choice := First (Choices (Comp));\n \n                      while Present (Choice) loop\n                         Analyze_And_Resolve (Choice, Index_Type);\n+                        Num_Choices := Num_Choices + 1;\n                         Next (Choice);\n                      end loop;\n \n@@ -3018,10 +3022,107 @@ package body Sem_Aggr is\n                   then\n                      Resolve_Iterated_Association\n                        (Comp, Index_Type, Comp_Type);\n+                     Num_Choices := Num_Choices + 1;\n                   end if;\n \n                   Next (Comp);\n                end loop;\n+\n+               --  The component associations in an indexed aggregate\n+               --  must denote a contiguous set of static values. We\n+               --  build a table of values/ranges and sort it, as is done\n+               --  elsewhere for case statements and array aggregates.\n+               --  If the aggregate has a single iterated association it\n+               --  is allowed to be nonstatic and there is nothing to check.\n+\n+               if Num_Choices > 1 then\n+                  declare\n+                     Table     : Case_Table_Type (1 .. Num_Choices);\n+                     No_Choice : Pos := 1;\n+                     Lo, Hi    : Node_Id;\n+\n+                  --  Traverse aggregate to determine size of needed table.\n+                  --  Verify that bounds are static and that loops have no\n+                  --  filters or key expressions.\n+\n+                  begin\n+                     Comp := First (Component_Associations (N));\n+                     while Present (Comp) loop\n+                        if Nkind (Comp) = N_Iterated_Element_Association then\n+                           if Present\n+                             (Loop_Parameter_Specification (Comp))\n+                           then\n+                              if Present (Iterator_Filter\n+                                (Loop_Parameter_Specification (Comp)))\n+                              then\n+                                 Error_Msg_N\n+                                   (\"iterator filter not allowed \" &\n+                                     \"in indexed aggregate\", Comp);\n+                                 return;\n+\n+                              elsif Present (Key_Expression\n+                                (Loop_Parameter_Specification (Comp)))\n+                              then\n+                                 Error_Msg_N\n+                                   (\"key expression not allowed \" &\n+                                     \"in indexed aggregate\", Comp);\n+                                 return;\n+                              end if;\n+                           end if;\n+                        else\n+                           Choice := First (Choices (Comp));\n+\n+                           while Present (Choice) loop\n+                              Get_Index_Bounds (Choice, Lo, Hi);\n+                              Table (No_Choice).Choice := Choice;\n+                              Table (No_Choice).Lo := Lo;\n+                              Table (No_Choice).Hi := Hi;\n+\n+                              --  Verify staticness of value or range\n+\n+                              if not Is_Static_Expression (Lo)\n+                                or else not Is_Static_Expression (Hi)\n+                              then\n+                                 Error_Msg_N\n+                                   (\"nonstatic expression for index \" &\n+                                     \"for indexed aggregate\", Choice);\n+                                 return;\n+                              end if;\n+\n+                              No_Choice := No_Choice + 1;\n+                              Next (Choice);\n+                           end loop;\n+                        end if;\n+\n+                        Next (Comp);\n+                     end loop;\n+\n+                     Sort_Case_Table (Table);\n+\n+                     for J in 1 .. Num_Choices - 1 loop\n+                        Hi_Val := Expr_Value (Table (J).Hi);\n+                        Lo_Val := Expr_Value (Table (J + 1).Lo);\n+\n+                        if Lo_Val = Hi_Val then\n+                           Error_Msg_N\n+                             (\"duplicate index in indexed aggregate\",\n+                               Table (J + 1).Choice);\n+                           exit;\n+\n+                        elsif Lo_Val < Hi_Val then\n+                           Error_Msg_N\n+                             (\"overlapping indices in indexed aggregate\",\n+                               Table (J + 1).Choice);\n+                           exit;\n+\n+                        elsif Lo_Val > Hi_Val + 1 then\n+                           Error_Msg_N\n+                             (\"missing index values\", Table (J + 1).Choice);\n+                           exit;\n+                        end if;\n+                     end loop;\n+                  end;\n+               end if;\n             end if;\n          end;\n       end if;"}]}