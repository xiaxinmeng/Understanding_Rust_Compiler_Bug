{"sha": "1dad57e65d9539eccc652dbb42b5574db72bb3fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhZDU3ZTY1ZDk1MzllY2NjNjUyZGJiNDJiNTU3NGRiNzJiYjNmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-08-26T04:35:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-26T04:35:26Z"}, "message": "call.c (build_builtin_candidate): Don't set LOOKUP_ONLYCONVERTING if we're contextually converting to bool.\n\n\t* call.c (build_builtin_candidate): Don't set LOOKUP_ONLYCONVERTING\n\tif we're contextually converting to bool.\n\t(build_conditional_expr): Likewise.\n\t* typeck.c (condition_conversion): Likewise.\n\nFrom-SVN: r151114", "tree": {"sha": "221363f432b4f3bce972f15059e31d770a04f532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221363f432b4f3bce972f15059e31d770a04f532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dad57e65d9539eccc652dbb42b5574db72bb3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dad57e65d9539eccc652dbb42b5574db72bb3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dad57e65d9539eccc652dbb42b5574db72bb3fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dad57e65d9539eccc652dbb42b5574db72bb3fc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7919d7b4422cefaa7768d576a73bcf96a6efd6cb"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "1bd31857e3bf4609879abfaebfe82fe6db5de70d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1dad57e65d9539eccc652dbb42b5574db72bb3fc", "patch": "@@ -1,5 +1,10 @@\n 2009-08-26  Jason Merrill  <jason@redhat.com>\n \n+\t* call.c (build_builtin_candidate): Don't set LOOKUP_ONLYCONVERTING\n+\tif we're contextually converting to bool.\n+\t(build_conditional_expr): Likewise.\n+\t* typeck.c (condition_conversion): Likewise.\n+\n \t* call.c (build_conditional_expr): Fix logic errors.\n \t(build_new_op): Remove dead COND_EXPR handling.\n "}, {"sha": "f4b0497b7f95c61fc01fe0cc67f14d6dce2adc3d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1dad57e65d9539eccc652dbb42b5574db72bb3fc", "patch": "@@ -1778,7 +1778,14 @@ build_builtin_candidate (struct z_candidate **candidates, tree fnname,\n \n   num_convs =  args[2] ? 3 : (args[1] ? 2 : 1);\n   convs = alloc_conversions (num_convs);\n-  flags |= LOOKUP_ONLYCONVERTING;\n+\n+  /* TRUTH_*_EXPR do \"contextual conversion to bool\", which means explicit\n+     conversion ops are allowed.  We handle that here by just checking for\n+     boolean_type_node because other operators don't ask for it.  COND_EXPR\n+     also does contextual conversion to bool for the first operand, but we\n+     handle that in build_conditional_expr, and type1 here is operand 2.  */\n+  if (type1 != boolean_type_node)\n+    flags |= LOOKUP_ONLYCONVERTING;\n \n   for (i = 0; i < 2; ++i)\n     {\n@@ -3593,7 +3600,8 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n \n      The first expression is implicitly converted to bool (clause\n      _conv_).  */\n-  arg1 = perform_implicit_conversion (boolean_type_node, arg1, complain);\n+  arg1 = perform_implicit_conversion_flags (boolean_type_node, arg1, complain,\n+\t\t\t\t\t    LOOKUP_NORMAL);\n \n   /* If something has already gone wrong, just pass that fact up the\n      tree.  */"}, {"sha": "53165b38dc30aa77e8813e086870a872eacaaf1d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1dad57e65d9539eccc652dbb42b5574db72bb3fc", "patch": "@@ -4270,8 +4270,8 @@ condition_conversion (tree expr)\n   tree t;\n   if (processing_template_decl)\n     return expr;\n-  t = perform_implicit_conversion (boolean_type_node, expr, \n-\t\t\t\t   tf_warning_or_error);\n+  t = perform_implicit_conversion_flags (boolean_type_node, expr,\n+\t\t\t\t\t tf_warning_or_error, LOOKUP_NORMAL);\n   t = fold_build_cleanup_point_expr (boolean_type_node, t);\n   return t;\n }"}, {"sha": "c2236d54f19cdca5f3ce695a10a0fa943f8bfd3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dad57e65d9539eccc652dbb42b5574db72bb3fc", "patch": "@@ -1,5 +1,6 @@\n 2009-08-26  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/explicit3.C: New.\n \t* g++.dg/overload/cond2.C: New.\n \n 2009-08-25  Kaz Kojima  <kkojima@gcc.gnu.org>"}, {"sha": "cd37a155eed6b58d7c847874568f20331b67887c", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit3.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dad57e65d9539eccc652dbb42b5574db72bb3fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit3.C?ref=1dad57e65d9539eccc652dbb42b5574db72bb3fc", "patch": "@@ -0,0 +1,50 @@\n+// Test for \"contextually converted to bool\"\n+// { dg-options \"-std=c++0x\" }\n+\n+struct A\n+{\n+  explicit operator bool();\n+};\n+\n+void f (bool);\n+\n+struct B\n+{\n+  bool b;\n+};\n+\n+struct C\n+{\n+  operator int();\n+};\n+\n+struct D\n+{\n+  operator int();\n+};\n+\n+int main()\n+{\n+  A a; C c; D d;\n+  // These contexts use an explicit bool conversion.\n+  if (a) {}\n+  for (; a; ) {}\n+  do {} while (a);\n+  while (a) {}\n+  a ? 1 : 0;\n+  a || true;\n+  a && true;\n+  !a;\n+\n+  a ? c : 1;\n+  a ? c : d;\n+\n+  // These do not.\n+  switch (a); \t\t\t// { dg-error \"\" }\n+  bool b = a;\t\t\t// { dg-error \"\" }\n+  f(a);\t\t\t\t// { dg-error \"\" }\n+  B b2 = { a };\t\t\t// { dg-error \"\" }\n+  a + true;\t\t\t// { dg-message \"\" }\n+  b ? a : true;\t\t\t// { dg-message \"\" }\n+  a ? a : true;\t\t\t// { dg-message \"\" }\n+}"}]}