{"sha": "0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5N2JmNGMyYzRlNTk5YmVlZTE3YzNhOTlmNmRmZGQ4ODg0ZDA5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-06-18T16:15:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-06-18T16:15:12Z"}, "message": "Implement the Named Return Value optimization.\n\n        * c-common.h (RETURN_NULLIFIED_P): New macro.\n        * c-semantics.c (genrtl_return_stmt): Check it.\n        * cp-tree.h (struct cp_language_function): Add x_return_value.\n        (current_function_return_value): Now a macro.\n        * decl.c: Don't define it.\n        (define_label, finish_case_label): Don't clear it.\n        (init_decl_processing): Don't register it with GC.\n        * semantics.c (genrtl_finish_function): Don't check it for\n        no_return_label.  Copy the RTL from the return value to\n        current_function_return_value and walk, calling...\n        (nullify_returns_r): ...this new fn.\n        * typeck.c (check_return_expr): Set current_function_return_value.\n\n        * expr.c (clear_storage): Set TREE_NOTHROW on the decl for memset.\n        (emit_block_move): Likewise.\n\nFrom-SVN: r43445", "tree": {"sha": "70263e15f7a28d4f44a057ee1783e8a0095c5f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70263e15f7a28d4f44a057ee1783e8a0095c5f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "923cbdc322ee080c02b94a95eece0618a2a78b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923cbdc322ee080c02b94a95eece0618a2a78b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/923cbdc322ee080c02b94a95eece0618a2a78b47"}], "stats": {"total": 126, "additions": 109, "deletions": 17}, "files": [{"sha": "d8d0683abcc3639dd5d30ef72018b35a4aa8f9fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -1,3 +1,11 @@\n+2001-06-18  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* c-common.h (RETURN_NULLIFIED_P): New macro.\n+\t* c-semantics.c (genrtl_return_stmt): Check it.\n+\n+\t* expr.c (clear_storage): Set TREE_NOTHROW on the decl for memset.\n+\t(emit_block_move): Likewise.\n+\n Mon Jun 18 17:27:24 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* unroll.c: Include predict.h."}, {"sha": "05350c12fa2a40d4605f5602920a57e7d52d916f", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n       SCOPE_BEGIN_P (in SCOPE_STMT)\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n       NEW_FOR_SCOPE_P (in FOR_STMT)\n+      RETURN_NULLIFIED_P (in RETURN_STMT)\n       ASM_INPUT_P (in ASM_STMT)\n    1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       STMT_IS_FULL_EXPR_P (in _STMT)\n@@ -561,9 +562,11 @@ extern tree strip_array_types                   PARAMS ((tree));\n #define DO_COND(NODE)           TREE_OPERAND (DO_STMT_CHECK (NODE), 0)\n #define DO_BODY(NODE)           TREE_OPERAND (DO_STMT_CHECK (NODE), 1)\n \n-/* RETURN_STMT accessor. This gives the expression associated with a\n-   return statement. */\n+/* RETURN_STMT accessors. These give the expression associated with a\n+   return statement, and whether it should be ignored when expanding\n+   (as opposed to inlining).  */\n #define RETURN_EXPR(NODE)       TREE_OPERAND (RETURN_STMT_CHECK (NODE), 0)\n+#define RETURN_NULLIFIED_P(NODE) TREE_LANG_FLAG_0 (RETURN_STMT_CHECK (NODE))\n \n /* EXPR_STMT accessor. This gives the expression associated with an\n    expression statement. */"}, {"sha": "eca64babe8d18b5f1fad708028d15b021877b762", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -460,7 +460,15 @@ void\n genrtl_return_stmt (stmt)\n      tree stmt;\n {\n-  tree expr = RETURN_EXPR (stmt);\n+  tree expr;\n+\n+  /* If RETURN_NULLIFIED_P is set, the frontend has arranged to set up\n+     the return value separately, so just return the return value\n+     itself.  This is used for the C++ named return value optimization.  */\n+  if (RETURN_NULLIFIED_P (stmt))\n+    expr = DECL_RESULT (current_function_decl);\n+  else\n+    expr = RETURN_EXPR (stmt);\n \n   emit_line_note (input_filename, lineno);\n   if (!expr)"}, {"sha": "99643259c5115e526ea0082a0d5c842de6c43416", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -1,3 +1,17 @@\n+2001-06-18  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\tImplement the Named Return Value optimization.\n+\t* cp-tree.h (struct cp_language_function): Add x_return_value.\n+\t(current_function_return_value): Now a macro.\n+\t* decl.c: Don't define it.\n+\t(define_label, finish_case_label): Don't clear it.\n+\t(init_decl_processing): Don't register it with GC.\n+\t* semantics.c (genrtl_finish_function): Don't check it for\n+\tno_return_label.  Copy the RTL from the return value to\n+\tcurrent_function_return_value and walk, calling...\n+\t(nullify_returns_r): ...this new fn.\n+\t* typeck.c (check_return_expr): Set current_function_return_value.\n+\n 2001-06-15  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* class.c (dfs_accumulate_vtbl_inits): Just point to the base we're"}, {"sha": "99106248b07a4defb79e2a8a93aec5a7ce7a8a50", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -863,6 +863,7 @@ struct cp_language_function\n   tree x_eh_spec_block;\n   tree x_in_charge_parm;\n   tree x_vtt_parm;\n+  tree x_return_value;\n \n   tree *x_vcalls_possible_p;\n \n@@ -953,7 +954,12 @@ struct cp_language_function\n \n #define in_function_try_handler cp_function_chain->in_function_try_handler\n \n-extern tree current_function_return_value;\n+/* Expression always returned from function, or error_mark_node\n+   otherwise, for use by the automatic named return value optimization.  */\n+\n+#define current_function_return_value \\\n+  (cp_function_chain->x_return_value)\n+\n extern tree global_namespace;\n \n #define ansi_opname(CODE) \\"}, {"sha": "0968220b2fd0812ece312d60caa99944065a3487", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -285,13 +285,6 @@ struct named_label_list\n \n #define named_labels cp_function_chain->x_named_labels\n \n-/* Set to 0 at beginning of a function definition, and whenever\n-   a label (case or named) is defined.  Set to value of expression\n-   returned from function when that value can be transformed into\n-   a named return value.  */\n-\n-tree current_function_return_value;\n-\n /* Nonzero means use the ISO C94 dialect of C.  */\n \n int flag_isoc94;\n@@ -5153,7 +5146,6 @@ define_label (filename, line, name)\n \t  ent->binding_level = current_binding_level;\n \t}\n       check_previous_gotos (decl);\n-      current_function_return_value = NULL_TREE;\n       return decl;\n     }\n }\n@@ -5255,7 +5247,6 @@ finish_case_label (low_value, high_value)\n      own new (temporary) binding contour.  */\n   for (p = current_binding_level; !(p->parm_flag); p = p->level_chain)\n     p->more_cleanups_ok = 0;\n-  current_function_return_value = NULL_TREE;\n \n   return r;\n }\n@@ -6624,7 +6615,6 @@ init_decl_processing ()\n   ggc_add_tree_root (&lastiddecl, 1);\n \n   ggc_add_tree_root (&last_function_parm_tags, 1);\n-  ggc_add_tree_root (&current_function_return_value, 1);\n   ggc_add_tree_root (&current_function_parm_tags, 1);\n   ggc_add_tree_root (&last_function_parms, 1);\n   ggc_add_tree_root (&error_mark_list, 1);"}, {"sha": "0dc392a9a894274cd4c889c4bf0dd32036922060", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -49,6 +49,7 @@\n \n static tree maybe_convert_cond PARAMS ((tree));\n static tree simplify_aggr_init_exprs_r PARAMS ((tree *, int *, void *));\n+static tree nullify_returns_r PARAMS ((tree *, int *, void *));\n static void deferred_type_access_control PARAMS ((void));\n static void emit_associated_thunks PARAMS ((tree));\n static void genrtl_try_block PARAMS ((tree));\n@@ -2464,6 +2465,25 @@ expand_body (fn)\n   timevar_pop (TV_EXPAND);\n }\n \n+/* Helper function for walk_tree, used by genrtl_start_function to override\n+   all the RETURN_STMTs for the named return value optimization.  */\n+\n+static tree\n+nullify_returns_r (tp, walk_subtrees, data)\n+     tree *tp;\n+     int *walk_subtrees;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  /* No need to walk into types.  */\n+  if (TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+  else if (TREE_CODE (*tp) == RETURN_STMT)\n+    RETURN_NULLIFIED_P (*tp) = 1;\n+\n+  /* Keep iterating.  */\n+  return NULL_TREE;\n+}\n+\n /* Start generating the RTL for FN.  */\n \n static void\n@@ -2541,6 +2561,22 @@ genrtl_start_function (fn)\n   /* Create a binding contour which can be used to catch\n      cleanup-generated temporaries.  */\n   expand_start_bindings (2);\n+\n+  /* Set up the named return value optimization, if we can.  */\n+  if (current_function_return_value\n+      && current_function_return_value != error_mark_node)\n+    {\n+      tree r = current_function_return_value;\n+      /* This is only worth doing for fns that return in memory--and\n+\t simpler, since we don't have to worry about promoted modes.  */\n+      if (aggregate_value_p (TREE_TYPE (TREE_TYPE (fn))))\n+\t{\n+\t  COPY_DECL_RTL (DECL_RESULT (fn), r);\n+\t  DECL_ALIGN (r) = DECL_ALIGN (DECL_RESULT (fn));\n+\t  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n+\t\t\t\t\tnullify_returns_r, NULL_TREE);\n+\t}\n+    }\n }\n \n /* Finish generating the RTL for FN.  */\n@@ -2579,7 +2615,6 @@ genrtl_finish_function (fn)\n \n   if (!dtor_label && !DECL_CONSTRUCTOR_P (fn)\n       && return_label != NULL_RTX\n-      && current_function_return_value == NULL_TREE\n       && ! DECL_NAME (DECL_RESULT (current_function_decl)))\n     no_return_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n "}, {"sha": "1256b6d1ca138ce150cd8c777e73619c44793ba2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -6679,6 +6679,32 @@ check_return_expr (retval)\n       && retval != current_class_ref)\n     cp_warning (\"`operator=' should return a reference to `*this'\");\n \n+  /* The fabled Named Return Value optimization: If this is a\n+     value-returning function that always returns the same local\n+     variable, remember it.\n+\n+     It might be nice to be more flexible, and choose the first suitable\n+     variable even if the function sometimes returns something else, but\n+     then we run the risk of clobbering the variable we chose if the other\n+     returned expression uses the chosen variable somehow.  And people expect\n+     this restriction, anyway.  (jason 2000-11-19) */\n+\n+  if (fn_returns_value_p && optimize)\n+    {\n+      if (retval != NULL_TREE\n+\t  && (current_function_return_value == NULL_TREE\n+\t      || current_function_return_value == retval)\n+\t  && TREE_CODE (retval) == VAR_DECL\n+\t  && DECL_CONTEXT (retval) == current_function_decl\n+\t  && ! TREE_STATIC (retval)\n+\t  && ! DECL_USER_ALIGN (retval)\n+\t  && same_type_p (TREE_TYPE (retval),\n+\t\t\t  TREE_TYPE (TREE_TYPE (current_function_decl))))\n+\tcurrent_function_return_value = retval;\n+      else\n+\tcurrent_function_return_value = error_mark_node;\n+    }\n+\n   /* We don't need to do any conversions when there's nothing being\n      returned.  */\n   if (!retval || retval == error_mark_node)"}, {"sha": "9b81988521bf70a2aa4e21ed906f8618ddcbe0d6", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "patch": "@@ -1773,6 +1773,7 @@ emit_block_move (x, y, size, align)\n \t  DECL_EXTERNAL (fn) = 1;\n \t  TREE_PUBLIC (fn) = 1;\n \t  DECL_ARTIFICIAL (fn) = 1;\n+\t  TREE_NOTHROW (fn) = 1;\n \t  make_decl_rtl (fn, NULL);\n \t  assemble_external (fn);\n \t}\n@@ -2659,7 +2660,7 @@ clear_storage (object, size, align)\n \n \t     For targets where libcalls and normal calls have different\n \t     conventions for returning pointers, we could end up generating\n-\t      incorrect code.\n+\t     incorrect code.\n \n \t     So instead of using a libcall sequence we build up a suitable\n \t     CALL_EXPR and expand the call in the normal fashion.  */\n@@ -2677,6 +2678,7 @@ clear_storage (object, size, align)\n \t      DECL_EXTERNAL (fn) = 1;\n \t      TREE_PUBLIC (fn) = 1;\n \t      DECL_ARTIFICIAL (fn) = 1;\n+\t      TREE_NOTHROW (fn) = 1;\n \t      make_decl_rtl (fn, NULL);\n \t      assemble_external (fn);\n \t    }\n@@ -4547,7 +4549,7 @@ store_constructor (exp, target, align, cleared, size)\n \n       /* If the constructor has fewer fields than the structure\n \t or if we are initializing the structure to mostly zeros,\n-\t clear the whole structure first.  Don't do this is TARGET is\n+\t clear the whole structure first.  Don't do this if TARGET is a\n \t register whose mode size isn't equal to SIZE since clear_storage\n \t can't handle this case.  */\n       else if (size > 0"}]}