{"sha": "41e34bab133b719c014844f0d74248aa14d82394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlMzRiYWIxMzNiNzE5YzAxNDg0NGYwZDc0MjQ4YWExNGQ4MjM5NA==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-09-05T20:41:11Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-09-05T20:41:11Z"}, "message": "In reload, retain only those clobbers added for variable-array handling.\n\nFrom-SVN: r56863", "tree": {"sha": "938f0913c28143dde7571a87afe922d2145e69fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/938f0913c28143dde7571a87afe922d2145e69fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e34bab133b719c014844f0d74248aa14d82394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e34bab133b719c014844f0d74248aa14d82394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e34bab133b719c014844f0d74248aa14d82394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e34bab133b719c014844f0d74248aa14d82394/comments", "author": null, "committer": null, "parents": [{"sha": "dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0ba55a5b813f1f91ca6d472d70de3021e8be9e"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "e2dd16a7741336727edfee8af428fd21161c5fcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e34bab133b719c014844f0d74248aa14d82394/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e34bab133b719c014844f0d74248aa14d82394/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41e34bab133b719c014844f0d74248aa14d82394", "patch": "@@ -1,3 +1,8 @@\n+2002-09-05  Dale Johannesen  <dalej@apple.com>\n+\n+\t* reload1.c (reload):  Retain only those memory clobbers\n+\tadded for variable-array handling.\n+\n 2002-09-05  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/arm/arm.c (arm_return_in_memory): Implement ATPCS"}, {"sha": "a85d2507126133952934c1441ffef228d6d3b993", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e34bab133b719c014844f0d74248aa14d82394/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e34bab133b719c014844f0d74248aa14d82394/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=41e34bab133b719c014844f0d74248aa14d82394", "patch": "@@ -1180,9 +1180,9 @@ reload (first, global)\n \n   /* Make a pass over all the insns and delete all USEs which we inserted\n      only to tag a REG_EQUAL note on them.  Remove all REG_DEAD and REG_UNUSED\n-     notes.  Delete all CLOBBER insns that don't refer to the return value\n-     or to memory (mem:BLK CLOBBERs must be retained to prevent the scheduler\n-     from misarranging variable-array code) and simplify (subreg (reg))\n+     notes.  Delete all CLOBBER insns, except those that refer to the return\n+     value and the special mem:BLK CLOBBERs added to prevent the scheduler\n+     from misarranging variable-array code, and simplify (subreg (reg))\n      operands.  Also remove all REG_RETVAL and REG_LIBCALL notes since they\n      are no longer useful or accurate.  Strip and regenerate REG_INC notes\n      that may have been moved around.  */\n@@ -1203,7 +1203,10 @@ reload (first, global)\n \t\t || find_reg_note (insn, REG_EQUAL, NULL_RTX)))\n \t    || (GET_CODE (PATTERN (insn)) == CLOBBER\n \t\t&& (GET_CODE (XEXP (PATTERN (insn), 0)) != MEM\n-\t\t    || GET_MODE (XEXP (PATTERN (insn), 0)) != BLKmode)\n+\t\t    || GET_MODE (XEXP (PATTERN (insn), 0)) != BLKmode\n+\t\t    || (GET_CODE (XEXP (XEXP (PATTERN (insn), 0), 0)) != SCRATCH\n+\t\t\t&& XEXP (XEXP (PATTERN (insn), 0), 0) \n+\t\t\t\t!= stack_pointer_rtx))\n \t\t&& (GET_CODE (XEXP (PATTERN (insn), 0)) != REG\n \t\t    || ! REG_FUNCTION_VALUE_P (XEXP (PATTERN (insn), 0)))))\n \t  {"}]}