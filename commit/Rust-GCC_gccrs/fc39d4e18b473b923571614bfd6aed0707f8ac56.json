{"sha": "fc39d4e18b473b923571614bfd6aed0707f8ac56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMzOWQ0ZTE4YjQ3M2I5MjM1NzE2MTRiZmQ2YWVkMDcwN2Y4YWM1Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-06-21T20:32:06Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-06-21T20:32:06Z"}, "message": "PR c++/60223 - ICE with T{} in non-deduced context.\n\n\t* pt.c (unify): Allow COMPOUND_LITERAL_P in a non-deduced context.\n\n\t* g++.dg/cpp0x/nondeduced1.C: New test.\n\t* g++.dg/cpp0x/nondeduced2.C: New test.\n\t* g++.dg/cpp0x/nondeduced3.C: New test.\n\t* g++.dg/cpp0x/nondeduced4.C: New test.\n\nFrom-SVN: r272571", "tree": {"sha": "454dffc76ac7d5c20f6f24ad908ed3280e2a3379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/454dffc76ac7d5c20f6f24ad908ed3280e2a3379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc39d4e18b473b923571614bfd6aed0707f8ac56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc39d4e18b473b923571614bfd6aed0707f8ac56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc39d4e18b473b923571614bfd6aed0707f8ac56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc39d4e18b473b923571614bfd6aed0707f8ac56/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4789c23be4e240285c12aecba22fdc6dfd100d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4789c23be4e240285c12aecba22fdc6dfd100d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4789c23be4e240285c12aecba22fdc6dfd100d11"}], "stats": {"total": 88, "additions": 81, "deletions": 7}, "files": [{"sha": "12da65ee955b5ac75c2c0559f0e19c73152a03e3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc39d4e18b473b923571614bfd6aed0707f8ac56", "patch": "@@ -1,5 +1,8 @@\n 2019-06-21  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/60223 - ICE with T{} in non-deduced context.\n+\t* pt.c (unify): Allow COMPOUND_LITERAL_P in a non-deduced context.\n+\n \tPR c++/64235 - missing syntax error with invalid alignas.\n \t* parser.c (cp_parser_std_attribute_spec): Commit to tentative parse\n \tif there's a missing close paren."}, {"sha": "69de55369dd081bfc48eb6c1f0c648b22e1f9415", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fc39d4e18b473b923571614bfd6aed0707f8ac56", "patch": "@@ -22786,23 +22786,29 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n       /* An unresolved overload is a nondeduced context.  */\n       if (is_overloaded_fn (parm) || type_unknown_p (parm))\n \treturn unify_success (explain_p);\n-      gcc_assert (EXPR_P (parm) || TREE_CODE (parm) == TRAIT_EXPR);\n+      gcc_assert (EXPR_P (parm)\n+\t\t  || COMPOUND_LITERAL_P (parm)\n+\t\t  || TREE_CODE (parm) == TRAIT_EXPR);\n     expr:\n       /* We must be looking at an expression.  This can happen with\n \t something like:\n \n \t   template <int I>\n \t   void foo(S<I>, S<I + 2>);\n \n-\t This is a \"nondeduced context\":\n+\t or\n+\n+\t   template<typename T>\n+\t   void foo(A<T, T{}>);\n+\n+\t This is a \"non-deduced context\":\n \n \t   [deduct.type]\n \n-\t   The nondeduced contexts are:\n+\t   The non-deduced contexts are:\n \n-\t   --A type that is a template-id in which one or more of\n-\t     the template-arguments is an expression that references\n-\t     a template-parameter.\n+\t   --A non-type template argument or an array bound in which\n+\t     a subexpression references a template parameter.\n \n \t In these cases, we assume deduction succeeded, but don't\n \t actually infer any unifications.  */"}, {"sha": "e80c4228031cc560618179866383feb52571bd70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc39d4e18b473b923571614bfd6aed0707f8ac56", "patch": "@@ -1,4 +1,10 @@\n-2019-06-19  Marek Polacek  <polacek@redhat.com>\n+2019-06-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60223 - ICE with T{} in non-deduced context.\n+\t* g++.dg/cpp0x/nondeduced1.C: New test.\n+\t* g++.dg/cpp0x/nondeduced2.C: New test.\n+\t* g++.dg/cpp0x/nondeduced3.C: New test.\n+\t* g++.dg/cpp0x/nondeduced4.C: New test.\n \n \tPR c++/64235 - missing syntax error with invalid alignas.\n \t* g++.dg/parse/alignas1.C: New test."}, {"sha": "067079e50df385e241ccdfc11643c344d473e904", "filename": "gcc/testsuite/g++.dg/cpp0x/nondeduced1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced1.C?ref=fc39d4e18b473b923571614bfd6aed0707f8ac56", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/60223\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T, T = T{}>\n+struct A { };\n+\n+template<typename T>\n+void foo(A<T> a);\n+\n+void bar()\n+{\n+  foo(A<char, char{}>());\n+  foo(A<char>());\n+  foo<>(A<char>());\n+  foo<>(A<char, char{}>());\n+}"}, {"sha": "3f96fe4e8588efadd4edaa5b3ae66187730ffe44", "filename": "gcc/testsuite/g++.dg/cpp0x/nondeduced2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced2.C?ref=fc39d4e18b473b923571614bfd6aed0707f8ac56", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/60223\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T, T>\n+struct A { };\n+\n+template<typename T>\n+void foo(A<T, T{}>);\n+\n+void bar()\n+{\n+  foo(A<char, char{}>());\n+  foo<>(A<char, char{}>());\n+}"}, {"sha": "d943dceea4b0e4f5bb65f9e20b43216ed4660066", "filename": "gcc/testsuite/g++.dg/cpp0x/nondeduced3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced3.C?ref=fc39d4e18b473b923571614bfd6aed0707f8ac56", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/60223\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T, T = T{1}>\n+struct A { };\n+\n+template<typename T>\n+void foo(A<T> a);\n+\n+void bar()\n+{\n+  foo(A<char>());\n+  foo(A<char, char{1}>());\n+  foo<>(A<char>());\n+  foo<>(A<char, char{1}>());\n+}"}, {"sha": "818034c857c94f2a76c40c20032f7fc18ef63e2a", "filename": "gcc/testsuite/g++.dg/cpp0x/nondeduced4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc39d4e18b473b923571614bfd6aed0707f8ac56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced4.C?ref=fc39d4e18b473b923571614bfd6aed0707f8ac56", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/60223\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+struct A { };\n+\n+template<typename T>\n+void foo(A<T>, T = T{});\n+\n+void bar()\n+{\n+  foo(A<int>());\n+}"}]}