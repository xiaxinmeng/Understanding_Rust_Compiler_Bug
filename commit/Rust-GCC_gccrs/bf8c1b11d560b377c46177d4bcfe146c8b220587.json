{"sha": "bf8c1b11d560b377c46177d4bcfe146c8b220587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4YzFiMTFkNTYwYjM3N2M0NjE3N2Q0YmNmZTE0NmM4YjIyMDU4Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-03-25T16:38:48Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-03-25T16:38:48Z"}, "message": "PR c++/89214 - ICE when initializing aggregates with bases.\n\n\t* typeck2.c (digest_init_r): Warn about object slicing instead of\n\tcrashing.\n\n\t* g++.dg/cpp1z/aggr-base8.C: New test.\n\t* g++.dg/cpp1z/aggr-base9.C: New test.\n\nFrom-SVN: r269919", "tree": {"sha": "5c45e44201be32398ac31f7e6f8d373145b17cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c45e44201be32398ac31f7e6f8d373145b17cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8c1b11d560b377c46177d4bcfe146c8b220587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8c1b11d560b377c46177d4bcfe146c8b220587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8c1b11d560b377c46177d4bcfe146c8b220587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8c1b11d560b377c46177d4bcfe146c8b220587/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a55f758221cfd574cc341f969c27f8ecdac087a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55f758221cfd574cc341f969c27f8ecdac087a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55f758221cfd574cc341f969c27f8ecdac087a4"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "04f5639b96a4fa5a90cde21228e836076914a7d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf8c1b11d560b377c46177d4bcfe146c8b220587", "patch": "@@ -1,5 +1,9 @@\n 2019-03-25  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/89214 - ICE when initializing aggregates with bases.\n+\t* typeck2.c (digest_init_r): Warn about object slicing instead of\n+\tcrashing.\n+\n \tPR c++/89705 - ICE with reference binding with conversion function.\n \t* call.c (reference_binding): If the result of the conversion function\n \tis a prvalue of non-class type, use the cv-unqualified type."}, {"sha": "7f242ba93daa3f236ef91d57442c46d766f9ebec", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=bf8c1b11d560b377c46177d4bcfe146c8b220587", "patch": "@@ -1209,8 +1209,29 @@ digest_init_r (tree type, tree init, int nested, int flags,\n     {\n       tree elt = CONSTRUCTOR_ELT (stripped_init, 0)->value;\n       if (reference_related_p (type, TREE_TYPE (elt)))\n-\t/* We should have fixed this in reshape_init.  */\n-\tgcc_unreachable ();\n+\t{\n+\t  /* In C++17, aggregates can have bases, thus participate in\n+\t     aggregate initialization.  In the following case:\n+\n+\t       struct B { int c; };\n+\t       struct D : B { };\n+\t       D d{{D{{42}}}};\n+\n+\t    there's an extra set of braces, so the D temporary initializes\n+\t    the first element of d, which is the B base subobject.  The base\n+\t    of type B is copy-initialized from the D temporary, causing\n+\t    object slicing.  */\n+\t  tree field = next_initializable_field (TYPE_FIELDS (type));\n+\t  if (field && DECL_FIELD_IS_BASE (field))\n+\t    {\n+\t      if (warning_at (loc, 0, \"initializing a base class of type %qT \"\n+\t\t\t      \"results in object slicing\", TREE_TYPE (field)))\n+\t\tinform (loc, \"remove %<{ }%> around initializer\");\n+\t    }\n+\t  else\n+\t    /* We should have fixed this in reshape_init.  */\n+\t    gcc_unreachable ();\n+\t}\n     }\n \n   if (BRACE_ENCLOSED_INITIALIZER_P (stripped_init)"}, {"sha": "82981ad2a4c3e7927b43ed9b7ddf488eee6cfc02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf8c1b11d560b377c46177d4bcfe146c8b220587", "patch": "@@ -1,5 +1,9 @@\n 2019-03-25  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/89214 - ICE when initializing aggregates with bases.\n+\t* g++.dg/cpp1z/aggr-base8.C: New test.\n+\t* g++.dg/cpp1z/aggr-base9.C: New test.\n+\n \tPR c++/89705 - ICE with reference binding with conversion function.\n \t* g++.dg/cpp0x/rv-conv2.C: New test.\n "}, {"sha": "8b495a80cb317d59fb23d74fd727198301711a82", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base8.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base8.C?ref=bf8c1b11d560b377c46177d4bcfe146c8b220587", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/89214\n+// { dg-do compile { target c++17 } }\n+\n+struct A\n+{\n+  A (int);\n+};\n+\n+struct BB\n+{\n+  A a;\n+};\n+\n+struct B : BB\n+{\n+};\n+\n+void\n+foo ()\n+{\n+  B b1 = {42};\n+  B b2 = {{42}};\n+  B b3 = {{{42}}};\n+\n+  B b4 = B{42};\n+  B b5 = B{{42}};\n+  B b6 = B{{{42}}};\n+\n+  B b7 = {B{42}};\n+  B b8 = {B{{42}}};\n+  B b9 = {B{{{42}}}};\n+\n+  B b10 = {{B{42}}}; // { dg-warning \"initializing a base class of type .BB. results in object slicing\" }\n+  B b11 = {{B{{42}}}}; // { dg-warning \"initializing a base class of type .BB. results in object slicing\" }\n+  B b12 = {{B{{{42}}}}}; // { dg-warning \"initializing a base class of type .BB. results in object slicing\" }\n+\n+  B bb1{42};\n+  B bb2{{42}};\n+  B bb3{{{42}}};\n+\n+  B bb7{B{42}};\n+  B bb8{B{{42}}};\n+  B bb9{B{{{42}}}};\n+\n+  B bb10{{B{42}}}; // { dg-warning \"initializing a base class of type .BB. results in object slicing\" }\n+  B bb11{{B{{42}}}}; // { dg-warning \"initializing a base class of type .BB. results in object slicing\" }\n+  B bb12{{B{{{42}}}}}; // { dg-warning \"initializing a base class of type .BB. results in object slicing\" }\n+}"}, {"sha": "56aa59cb64a48c05778d29765b0c299658377a4a", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base9.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8c1b11d560b377c46177d4bcfe146c8b220587/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base9.C?ref=bf8c1b11d560b377c46177d4bcfe146c8b220587", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/89214\n+// { dg-do compile { target c++17 } }\n+\n+struct B {\n+  int c;\n+};\n+\n+struct D : B { };\n+\n+void\n+foo ()\n+{\n+  D d1 = {42};\n+  D d2 = {{42}};\n+  \n+  D d4 = D{42};\n+  D d5 = D{{42}};\n+ \n+  D d7 = {D{42}};\n+  D d8 = {D{{42}}};\n+\n+  D d10 = {{D{42}}}; // { dg-warning \"initializing a base class of type .B. results in object slicing\" }\n+  D d11 = {{D{{42}}}}; // { dg-warning \"initializing a base class of type .B. results in object slicing\" }\n+\n+  D dd1{42};\n+  D dd2{{42}};\n+  \n+  D dd7{D{42}};\n+  D dd8{D{{42}}};\n+\n+  D dd10{{D{42}}}; // { dg-warning \"initializing a base class of type .B. results in object slicing\" }\n+  D dd11{{D{{42}}}}; // { dg-warning \"initializing a base class of type .B. results in object slicing\" }\n+}"}]}