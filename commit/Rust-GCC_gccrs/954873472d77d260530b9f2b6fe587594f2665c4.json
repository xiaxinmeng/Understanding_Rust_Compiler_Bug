{"sha": "954873472d77d260530b9f2b6fe587594f2665c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0ODczNDcyZDc3ZDI2MDUzMGI5ZjJiNmZlNTg3NTk0ZjI2NjVjNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-04-10T16:20:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-04-10T16:20:35Z"}, "message": "[ARM] PR 65694: Properly sign-extend large numbers before passing to GEN_INT in arm_canonicalize_comparison\n\n\tPR target/65694\n\t* config/arm/arm.c (arm_canonicalize_comparison): Use ARM_SIGN_EXTEND\n\twhen creating +1 values for SImode.\n\n\tPR target/65694\n\t* g++.dg/torture/pr65694.C: New test.\n\nFrom-SVN: r221976", "tree": {"sha": "dcb9c93697a06ecd4ad382cef56d202d65a7460a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcb9c93697a06ecd4ad382cef56d202d65a7460a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/954873472d77d260530b9f2b6fe587594f2665c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954873472d77d260530b9f2b6fe587594f2665c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954873472d77d260530b9f2b6fe587594f2665c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954873472d77d260530b9f2b6fe587594f2665c4/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a65cb99fd5874b0639315b042b0bce5f9b2d29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a65cb99fd5874b0639315b042b0bce5f9b2d29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a65cb99fd5874b0639315b042b0bce5f9b2d29a"}], "stats": {"total": 159, "additions": 157, "deletions": 2}, "files": [{"sha": "b001ee5c8494636821830c872b3ed2c808567627", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=954873472d77d260530b9f2b6fe587594f2665c4", "patch": "@@ -1,3 +1,9 @@\n+2015-04-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/65694\n+\t* config/arm/arm.c (arm_canonicalize_comparison): Use ARM_SIGN_EXTEND\n+\twhen creating +1 values for SImode.\n+\n 2015-04-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/65729"}, {"sha": "04663999224c8c8eb8e2d10b0ec634db6ce5027e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=954873472d77d260530b9f2b6fe587594f2665c4", "patch": "@@ -4814,7 +4814,7 @@ arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n       if (i != maxval\n \t  && (const_ok_for_arm (i + 1) || const_ok_for_arm (-(i + 1))))\n \t{\n-\t  *op1 = GEN_INT (i + 1);\n+\t  *op1 = GEN_INT (ARM_SIGN_EXTEND (i + 1));\n \t  *code = *code == GT ? GE : LT;\n \t  return;\n \t}\n@@ -4836,7 +4836,7 @@ arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n       if (i != ~((unsigned HOST_WIDE_INT) 0)\n \t  && (const_ok_for_arm (i + 1) || const_ok_for_arm (-(i + 1))))\n \t{\n-\t  *op1 = GEN_INT (i + 1);\n+\t  *op1 = GEN_INT (ARM_SIGN_EXTEND (i + 1));\n \t  *code = *code == GTU ? GEU : LTU;\n \t  return;\n \t}"}, {"sha": "f2ee96dacdaa5443c1a563a93734c0feeea8b67f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=954873472d77d260530b9f2b6fe587594f2665c4", "patch": "@@ -1,3 +1,8 @@\n+2015-04-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/65694\n+\t* g++.dg/torture/pr65694.C: New test.\n+\n 2015-04-10  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray_lock_6.f90: New."}, {"sha": "55e009a3167b95737b3cdcf96912713650c3bc71", "filename": "gcc/testsuite/g++.dg/torture/pr65694.C", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65694.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954873472d77d260530b9f2b6fe587594f2665c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65694.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65694.C?ref=954873472d77d260530b9f2b6fe587594f2665c4", "patch": "@@ -0,0 +1,144 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-sign-compare -Wno-return-type -Wno-overflow\" } */\n+/* { dg-additional-options \"-mthumb\" { target arm_thumb2_ok } } */\n+\n+struct A {\n+  enum { __value };\n+};\n+template <class _T1> struct B { _T1 first; };\n+template <typename _Iterator, bool> struct C {\n+  typedef typename _Iterator::iterator_type iterator_type;\n+  static iterator_type _S_base(_Iterator p1) { return p1.base(); }\n+};\n+template <typename _RandomAccessIterator>\n+typename _RandomAccessIterator::difference_type\n+__distance(_RandomAccessIterator p1, _RandomAccessIterator p2, int) {\n+  return p2 - p1;\n+}\n+\n+template <typename _InputIterator>\n+typename _InputIterator::difference_type distance(_InputIterator p1,\n+                                                  _InputIterator p2) {\n+  return __distance(p1, p2, 0);\n+}\n+\n+template <typename _Iterator, typename> class D {\n+  _Iterator _M_current;\n+\n+public:\n+  typedef _Iterator iterator_type;\n+  typedef int difference_type;\n+  _Iterator base() { return _M_current; }\n+};\n+\n+template <typename _Iterator, typename _Container>\n+typename D<_Iterator, _Container>::difference_type\n+operator-(D<_Iterator, _Container> p1, D<_Iterator, _Container> p2) {\n+  return p1.base() - p2.base();\n+}\n+\n+struct F {\n+  static unsigned short *__copy_m(unsigned short *p1, unsigned short *p2,\n+                                  unsigned short *p3) {\n+    int a = p2 - p1;\n+    if (a)\n+      __builtin_memmove(p3, p1, a);\n+    return p3 + a;\n+  }\n+};\n+class G {\n+public:\n+  void allocate(int p1) {\n+    if (p1 > max_size())\n+      operator new(sizeof(short));\n+  }\n+  unsigned max_size() { return -1 / sizeof(short); }\n+};\n+\n+template <typename> class L : public G {};\n+\n+struct H {\n+  static unsigned short *allocate(int p1) {\n+    L<short> d;\n+    d.allocate(p1);\n+  }\n+};\n+struct I {\n+  template <typename _InputIterator, typename _ForwardIterator>\n+  static _ForwardIterator __uninit_copy(_InputIterator p1, _InputIterator p2,\n+                                        _ForwardIterator p3) {\n+    return copy(p1, p2, p3);\n+  }\n+};\n+struct J {\n+  typedef unsigned short *pointer;\n+  struct K {\n+    unsigned short *_M_start;\n+    unsigned short *_M_finish;\n+  };\n+  J();\n+  J(int p1, int) { _M_create_storage(p1); }\n+  K _M_impl;\n+  pointer _M_allocate(unsigned p1) { p1 ? H::allocate(p1) : pointer(); }\n+  void _M_create_storage(int p1) { _M_allocate(p1); }\n+};\n+\n+C<D<unsigned short *, int>, 1>::iterator_type\n+__miter_base(D<unsigned short *, int> p1) {\n+  return C<D<unsigned short *, int>, 1>::_S_base(p1);\n+}\n+\n+template <bool, typename _II, typename _OI>\n+_OI __copy_move_a(_II p1, _II p2, _OI p3) {\n+  return F::__copy_m(p1, p2, p3);\n+}\n+\n+template <bool _IsMove, typename _II, typename _OI>\n+_OI __copy_move_a2(_II p1, _II p2, _OI p3) {\n+  return __copy_move_a<_IsMove>(p1, p2, p3);\n+}\n+\n+template <typename _II, typename _OI> _OI copy(_II p1, _II p2, _OI p3) {\n+  C<D<unsigned short *, int>, 1>::iterator_type b, c = __miter_base(p1);\n+  b = __miter_base(p2);\n+  return __copy_move_a2<A::__value>(c, b, p3);\n+}\n+\n+template <typename _InputIterator, typename _ForwardIterator>\n+_ForwardIterator uninitialized_copy(_InputIterator p1, _InputIterator p2,\n+                                    _ForwardIterator p3) {\n+  return I::__uninit_copy(p1, p2, p3);\n+}\n+\n+template <typename _InputIterator, typename _ForwardIterator, typename _Tp>\n+_ForwardIterator __uninitialized_copy_a(_InputIterator p1, _InputIterator p2,\n+                                        _ForwardIterator p3, L<_Tp>) {\n+  return uninitialized_copy(p1, p2, p3);\n+}\n+\n+class M : J {\n+  J _Base;\n+\n+public:\n+  M();\n+  M(int p1, int p2 = int()) : _Base(p1, p2) {}\n+  M(D<unsigned short *, int> p1, D<unsigned short *, int> p2) {\n+    _M_initialize_dispatch(p1, p2, int());\n+  }\n+  D<pointer, int> begin();\n+  D<pointer, int> end();\n+  int size() { return _M_impl._M_finish - _M_impl._M_start; }\n+  void _M_initialize_dispatch(D<unsigned short *, int> p1,\n+                              D<unsigned short *, int> p2, int) {\n+    L<short> e;\n+    int f = distance(p1, p2);\n+    _M_impl._M_start = _M_allocate(f);\n+    _M_impl._M_finish = __uninitialized_copy_a(p1, p2, _M_impl._M_start, e);\n+  }\n+};\n+\n+B<M> g, h;\n+void twoMeans() {\n+  M i(g.first.begin(), h.first.end());\n+  M(i.size());\n+}"}]}