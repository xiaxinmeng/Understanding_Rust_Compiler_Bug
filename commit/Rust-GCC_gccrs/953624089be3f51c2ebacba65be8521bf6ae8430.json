{"sha": "953624089be3f51c2ebacba65be8521bf6ae8430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzNjI0MDg5YmUzZjUxYzJlYmFjYmE2NWJlODUyMWJmNmFlODQzMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-30T16:15:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-30T16:15:32Z"}, "message": "c++: Fix ICE on PTRMEM_CST in lambda in inline var initializer [PR99790]\n\nThe following testcase ICEs (since the addition of inline var support),\nbecause the lambda contains PTRMEM_CST but finish_function is called for the\nlambda quite early during parsing it (from finish_lambda_function) when\nthe containing class is still incomplete.  That means that during\ngenericization cplus_expand_constant keeps the PTRMEM_CST unmodified, but\nlater nothing lowers it when the class is finalized.\nUsing sizeof etc. on the class in such contexts is rejected by both g++ and\nclang++, and when the PTRMEM_CST appears e.g. in static var initializers\nrather than in functions, we handle it correctly because c_parse_final_cleanups\n-> lower_var_init will handle those cplus_expand_constant when all classes\nare already finalized.\n\nThe following patch fixes it by calling cplus_expand_constant again during\ngimplification, as we are now unconditionally unit at a time, I'd think\neverything that could be completed will be before we start gimplification.\n\n2021-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99790\n\t* cp-gimplify.c (cp_gimplify_expr): Handle PTRMEM_CST.\n\n\t* g++.dg/cpp1z/pr99790.C: New test.", "tree": {"sha": "ad0a64921cac5f6e96db8199a1e60fdaa2759b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad0a64921cac5f6e96db8199a1e60fdaa2759b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/953624089be3f51c2ebacba65be8521bf6ae8430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953624089be3f51c2ebacba65be8521bf6ae8430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953624089be3f51c2ebacba65be8521bf6ae8430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953624089be3f51c2ebacba65be8521bf6ae8430/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c277abd9cd3d10db59f9965d7d6356868da42a9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c277abd9cd3d10db59f9965d7d6356868da42a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c277abd9cd3d10db59f9965d7d6356868da42a9f"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "9079a5b90ca0610143735cd9f76c39a5cd1e423a", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953624089be3f51c2ebacba65be8521bf6ae8430/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953624089be3f51c2ebacba65be8521bf6ae8430/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=953624089be3f51c2ebacba65be8521bf6ae8430", "patch": "@@ -660,6 +660,14 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       ret = GS_UNHANDLED;\n       break;\n \n+    case PTRMEM_CST:\n+      *expr_p = cplus_expand_constant (*expr_p);\n+      if (TREE_CODE (*expr_p) == PTRMEM_CST)\n+\tret = GS_ERROR;\n+      else\n+\tret = GS_OK;\n+      break;\n+\n     case RETURN_EXPR:\n       if (TREE_OPERAND (*expr_p, 0)\n \t  && (TREE_CODE (TREE_OPERAND (*expr_p, 0)) == INIT_EXPR"}, {"sha": "99961f5a4ee408bd771820c524ac15449f64e75d", "filename": "gcc/testsuite/g++.dg/cpp1z/pr99790.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953624089be3f51c2ebacba65be8521bf6ae8430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr99790.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953624089be3f51c2ebacba65be8521bf6ae8430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr99790.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr99790.C?ref=953624089be3f51c2ebacba65be8521bf6ae8430", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/99790\n+// { dg-do compile { target c++17 } }\n+\n+struct A;\n+struct B { void (*fn) (A *); };\n+template <typename T>\n+int foo (const T &);\n+struct A { int a; static constexpr B b{[] (A *n) { n->*&A::a = 2; }}; };\n+int a = foo (A::b);"}]}