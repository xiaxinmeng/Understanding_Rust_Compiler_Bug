{"sha": "114bf2605dcfede47ab18e44c28751b221de4bb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0YmYyNjA1ZGNmZWRlNDdhYjE4ZTQ0YzI4NzUxYjIyMWRlNGJiNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-24T16:47:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-24T16:47:54Z"}, "message": "re PR c++/59886 (C++ array init optimization results in RANGE_EXPRs in assignments)\n\n\tPR c++/59886\n\tPR c++/59659\n\t* typeck2.c (process_init_constructor_array): Don't create\n\tRANGE_EXPR yet.\n\nFrom-SVN: r207051", "tree": {"sha": "a2b31f389d0c4d5298d361cf9f0f4e021634cfcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b31f389d0c4d5298d361cf9f0f4e021634cfcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/114bf2605dcfede47ab18e44c28751b221de4bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114bf2605dcfede47ab18e44c28751b221de4bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114bf2605dcfede47ab18e44c28751b221de4bb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114bf2605dcfede47ab18e44c28751b221de4bb5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cbf3dd796900d4e1af4678842d9347da1766176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cbf3dd796900d4e1af4678842d9347da1766176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cbf3dd796900d4e1af4678842d9347da1766176"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "4485108ac08ea898465bef26102a4b7bff95a65f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114bf2605dcfede47ab18e44c28751b221de4bb5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114bf2605dcfede47ab18e44c28751b221de4bb5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=114bf2605dcfede47ab18e44c28751b221de4bb5", "patch": "@@ -1,3 +1,10 @@\n+2014-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/59886\n+\tPR c++/59659\n+\t* typeck2.c (process_init_constructor_array): Don't create\n+\tRANGE_EXPR yet.\n+\n 2014-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* typeck2.c (split_nonconstant_init_1): Fix num_split_elts"}, {"sha": "a3fe2e39820697c0cf46b9670fce24d6b3fc14bc", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114bf2605dcfede47ab18e44c28751b221de4bb5/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114bf2605dcfede47ab18e44c28751b221de4bb5/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=114bf2605dcfede47ab18e44c28751b221de4bb5", "patch": "@@ -1201,42 +1201,40 @@ process_init_constructor_array (tree type, tree init,\n       flags |= picflag_from_initializer (ce->value);\n     }\n \n-  /* No more initializers. If the array is unbounded, or we've initialized\n-     all the elements, we are done. Otherwise, we must add initializers\n-     ourselves.  */\n-  if (!unbounded && i < len)\n-    {\n-      tree next;\n-\n-      if (type_build_ctor_call (TREE_TYPE (type)))\n-\t{\n-\t  /* If this type needs constructors run for default-initialization,\n-\t     we can't rely on the back end to do it for us, so make the\n-\t     initialization explicit by list-initializing from {}.  */\n-\t  next = build_constructor (init_list_type_node, NULL);\n-\t  next = massage_init_elt (TREE_TYPE (type), next, complain);\n-\t  if (initializer_zerop (next))\n-\t    /* The default zero-initialization is fine for us; don't\n-\t       add anything to the CONSTRUCTOR.  */\n-\t    next = NULL_TREE;\n-\t}\n-      else if (!zero_init_p (TREE_TYPE (type)))\n-\tnext = build_zero_init (TREE_TYPE (type),\n-\t\t\t\t/*nelts=*/NULL_TREE,\n-\t\t\t\t/*static_storage_p=*/false);\n-      else\n-\t/* The default zero-initialization is fine for us; don't\n-\t   add anything to the CONSTRUCTOR.  */\n-\tnext = NULL_TREE;\n-\n-      if (next)\n-\t{\n-\t  flags |= picflag_from_initializer (next);\n-\t  tree index = build2 (RANGE_EXPR, sizetype, size_int (i),\n-\t\t\t       size_int (len - 1));\n-\t  CONSTRUCTOR_APPEND_ELT (v, index, next);\n-\t}\n-    }\n+  /* No more initializers. If the array is unbounded, we are done. Otherwise,\n+     we must add initializers ourselves.  */\n+  if (!unbounded)\n+    for (; i < len; ++i)\n+      {\n+\ttree next;\n+\n+\tif (type_build_ctor_call (TREE_TYPE (type)))\n+\t  {\n+\t    /* If this type needs constructors run for default-initialization,\n+\t       we can't rely on the back end to do it for us, so make the\n+\t       initialization explicit by list-initializing from {}.  */\n+\t    next = build_constructor (init_list_type_node, NULL);\n+\t    next = massage_init_elt (TREE_TYPE (type), next, complain);\n+\t    if (initializer_zerop (next))\n+\t      /* The default zero-initialization is fine for us; don't\n+\t\t add anything to the CONSTRUCTOR.  */\n+\t      next = NULL_TREE;\n+\t  }\n+\telse if (!zero_init_p (TREE_TYPE (type)))\n+\t  next = build_zero_init (TREE_TYPE (type),\n+\t\t\t\t  /*nelts=*/NULL_TREE,\n+\t\t\t\t  /*static_storage_p=*/false);\n+\telse\n+\t  /* The default zero-initialization is fine for us; don't\n+\t     add anything to the CONSTRUCTOR.  */\n+\t  next = NULL_TREE;\n+\n+\tif (next)\n+\t  {\n+\t    flags |= picflag_from_initializer (next);\n+\t    CONSTRUCTOR_APPEND_ELT (v, size_int (i), next);\n+\t  }\n+      }\n \n   CONSTRUCTOR_ELTS (init) = v;\n   return flags;"}, {"sha": "e494e20a3bf116c647c9d3044208c110b7aa0738", "filename": "gcc/testsuite/g++.dg/init/aggr10.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114bf2605dcfede47ab18e44c28751b221de4bb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114bf2605dcfede47ab18e44c28751b221de4bb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr10.C?ref=114bf2605dcfede47ab18e44c28751b221de4bb5", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/59886\n+\n+struct A { A (); ~A (); };\n+struct B { A b[4]; };\n+struct C { B c[5]; };\n+const C e = {};"}]}