{"sha": "25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViMWY3ZmMzNWQwNDlkZGQ5MjIzYTk2OWMxNDFmNDVkYTlmZDhkNA==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2005-06-07T00:57:03Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2005-06-07T00:57:03Z"}, "message": "* gnu/classpath/jdwp/util/Signature.java: New file.\n\nFrom-SVN: r100687", "tree": {"sha": "250b9eea4e1a9c8e38c13e724f88198d5fee03dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250b9eea4e1a9c8e38c13e724f88198d5fee03dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b1f7fc35d049ddd9223a969c141f45da9fd8d4/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41996a974c7e7531e5b85edd6c10c2dd53aaac91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41996a974c7e7531e5b85edd6c10c2dd53aaac91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41996a974c7e7531e5b85edd6c10c2dd53aaac91"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "ed23aa4a4674cbb12535efb8f462c36952c0e20a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b1f7fc35d049ddd9223a969c141f45da9fd8d4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b1f7fc35d049ddd9223a969c141f45da9fd8d4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "patch": "@@ -1,3 +1,7 @@\n+2005-06-06  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/util/Signature.java: New file.\n+\n 2005-06-05  Anthony Green  <green@redhat.com>\n \n \t* gnu/java/net/natPlainSocketImplPosix.cc (setOption): Fix case"}, {"sha": "648a8404da854f3a11b98a31c6baa393468dad69", "filename": "libjava/gnu/classpath/jdwp/util/Signature.java", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b1f7fc35d049ddd9223a969c141f45da9fd8d4/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FSignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b1f7fc35d049ddd9223a969c141f45da9fd8d4/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FSignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FSignature.java?ref=25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "patch": "@@ -0,0 +1,135 @@\n+/* Signature.java -- utility class to compute class and method signatures\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.util;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * A class to compute class and method signatures.\n+ *\n+ * @author Tom Tromey  (tromey@redhat.com)\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class Signature\n+{\n+  /**\n+   * Computes the class signature, i.e., java.lang.String.class\n+   * returns \"Ljava/lang/String;\".\n+   *\n+   * @param theClass  the class for which to compute the signature\n+   * @return          the class's type signature\n+   */\n+  public static String computeClassSignature (Class theClass)\n+  {\n+    StringBuffer sb = new StringBuffer ();\n+    _addToSignature (sb, theClass);\n+    return sb.toString ();\n+  }\n+\n+  /**\n+   * Computes the method signature, i.e., java.lang.String.split (String, int)\n+   * returns \"(Ljava/lang/String;I)[Ljava/lang/String;\"\n+   *\n+   * @param method  the method for which to compute the signature\n+   * @return        the method's type signature\n+   */\n+  public static String computeMethodSignature (Method method)\n+  {\n+    return _computeSignature (method.getReturnType (),\n+\t\t\t      method.getParameterTypes ());\n+  }\n+\n+  private static String _computeSignature (Class returnType,\n+\t\t\t\t\t   Class[] paramTypes)\n+  {\n+    StringBuffer sb = new StringBuffer (\"(\");\n+    if (paramTypes != null)\n+      {\n+\tfor (int i = 0; i < paramTypes.length; ++i)\n+\t  _addToSignature (sb, paramTypes[i]);\n+      }\n+    sb.append (\")\");\n+    _addToSignature (sb, returnType);\n+    return sb.toString();\n+  }\n+\n+  private static void _addToSignature (StringBuffer sb, Class k)\n+  {\n+    // For some reason there's no easy way to get the signature of a\n+    // class.\n+    if (k.isPrimitive ())\n+      {\n+        if (k == void.class)\n+          sb.append('V');\n+        else if (k == boolean.class)\n+          sb.append('Z');\n+        else if (k == byte.class)\n+          sb.append('B');\n+        else if (k == char.class)\n+          sb.append('C');\n+        else if (k == short.class)\n+          sb.append('S');\n+        else if (k == int.class)\n+          sb.append('I');\n+        else if (k == float.class)\n+          sb.append('F');\n+        else if (k == double.class)\n+          sb.append('D');\n+        else if (k == long.class)\n+          sb.append('J');\n+        return;\n+      }\n+    \n+    String name = k.getName ();\n+    int len = name.length ();\n+    sb.ensureCapacity (len);\n+    if (! k.isArray ())\n+      sb.append('L');\n+    for (int i = 0; i < len; ++i)\n+      {\n+\tchar c = name.charAt (i);\n+\tif (c == '.')\n+\t  c = '/';\n+\tsb.append (c);\n+      }\n+    if (! k.isArray ())\n+      sb.append(';');\n+  }\n+}"}]}