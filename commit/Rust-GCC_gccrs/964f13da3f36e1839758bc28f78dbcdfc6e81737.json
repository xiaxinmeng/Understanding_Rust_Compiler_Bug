{"sha": "964f13da3f36e1839758bc28f78dbcdfc6e81737", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0ZjEzZGEzZjM2ZTE4Mzk3NThiYzI4Zjc4ZGJjZGZjNmU4MTczNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-06-22T08:18:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T08:18:40Z"}, "message": "sem_ch8.adb: Update comment.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch8.adb: Update comment.\n\t* sem_res.adb: Minor code reorganization (use Ekind_In).\n\nFrom-SVN: r161143", "tree": {"sha": "117db2a49b4862855dd987c71d30d56699a9be8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/117db2a49b4862855dd987c71d30d56699a9be8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/964f13da3f36e1839758bc28f78dbcdfc6e81737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964f13da3f36e1839758bc28f78dbcdfc6e81737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964f13da3f36e1839758bc28f78dbcdfc6e81737", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964f13da3f36e1839758bc28f78dbcdfc6e81737/comments", "author": null, "committer": null, "parents": [{"sha": "719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "f8f8317b19a8646e0f812b407182f985c28c8d4a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964f13da3f36e1839758bc28f78dbcdfc6e81737/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964f13da3f36e1839758bc28f78dbcdfc6e81737/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=964f13da3f36e1839758bc28f78dbcdfc6e81737", "patch": "@@ -1,3 +1,8 @@\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch8.adb: Update comment.\n+\t* sem_res.adb: Minor code reorganization (use Ekind_In).\n+\n 2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch8.adb (Add_Implicit_Operator): If the context of the expanded"}, {"sha": "51ae114d4e1d063f3b89bad4904ad6733799fa10", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964f13da3f36e1839758bc28f78dbcdfc6e81737/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964f13da3f36e1839758bc28f78dbcdfc6e81737/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=964f13da3f36e1839758bc28f78dbcdfc6e81737", "patch": "@@ -4377,8 +4377,13 @@ package body Sem_Ch8 is\n             return;\n          end if;\n \n+         --  Set the entity. Note that the reason we call Set_Entity here, as\n+         --  opposed to Set_Entity_With_Style_Check is that in the overloaded\n+         --  case, the initial call can set the wrong homonym. The call that\n+         --  sets the right homonym is in Sem_Res and that call does use\n+         --  Set_Entity_With_Style_Check, so we don't miss a style check.\n+\n          Set_Entity (N, E);\n-         --  Why no Style_Check here???\n \n          if Is_Type (E) then\n             Set_Etype (N, E);\n@@ -6034,10 +6039,12 @@ package body Sem_Ch8 is\n \n          if Nkind (Parent (N)) = N_Indexed_Component then\n             declare\n-               Is_Binary_Call : constant Boolean\n-                 := Present (Next (First (Expressions (Parent (N)))));\n-               Is_Binary_Op   : constant Boolean\n-                 := First_Entity (Predef_Op) /= Last_Entity (Predef_Op);\n+               Is_Binary_Call : constant Boolean :=\n+                                  Present\n+                                    (Next (First (Expressions (Parent (N)))));\n+               Is_Binary_Op   : constant Boolean :=\n+                                  First_Entity\n+                                    (Predef_Op) /= Last_Entity (Predef_Op);\n                Predef_Op2     : constant Entity_Id := Homonym (Predef_Op);\n \n             begin"}, {"sha": "5f7666adffb33799bc84ed8409268a79a1195d58", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 27, "deletions": 39, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964f13da3f36e1839758bc28f78dbcdfc6e81737/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964f13da3f36e1839758bc28f78dbcdfc6e81737/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=964f13da3f36e1839758bc28f78dbcdfc6e81737", "patch": "@@ -1042,7 +1042,7 @@ package body Sem_Res is\n       if (Is_Entity_Name (N)\n             and then Is_Overloadable (Entity (N))\n             and then (Ekind (Entity (N)) /= E_Enumeration_Literal\n-                        or else Is_Overloaded (N)))\n+                       or else Is_Overloaded (N)))\n \n       --  Rewrite as call if it is an explicit dereference of an expression of\n       --  a subprogram access type, and the subprogram type is not that of a\n@@ -1058,11 +1058,10 @@ package body Sem_Res is\n       or else\n         (Nkind (N) = N_Selected_Component\n           and then (Ekind (Entity (Selector_Name (N))) = E_Function\n-                      or else\n-                        ((Ekind (Entity (Selector_Name (N))) = E_Entry\n-                            or else\n-                          Ekind (Entity (Selector_Name (N))) = E_Procedure)\n-                            and then Is_Overloaded (Selector_Name (N)))))\n+                     or else\n+                       (Ekind_In (Entity (Selector_Name (N)), E_Entry,\n+                                                              E_Procedure)\n+                         and then Is_Overloaded (Selector_Name (N)))))\n \n       --  If one of the above three conditions is met, rewrite as call.\n       --  Apply the rewriting only once.\n@@ -5400,9 +5399,7 @@ package body Sem_Res is\n             F := First_Formal (Nam);\n             A := First_Actual (N);\n             while Present (F) and then Present (A) loop\n-               if (Ekind (F) = E_Out_Parameter\n-                     or else\n-                   Ekind (F) = E_In_Out_Parameter)\n+               if Ekind_In (F, E_Out_Parameter, E_In_Out_Parameter)\n                  and then Warn_On_Modified_As_Out_Parameter (F)\n                  and then Is_Entity_Name (A)\n                  and then Present (Entity (A))\n@@ -6365,8 +6362,7 @@ package body Sem_Res is\n             return;\n \n          elsif T = Any_Access\n-           or else Ekind (T) = E_Allocator_Type\n-           or else Ekind (T) = E_Access_Attribute_Type\n+           or else Ekind_In (T, E_Allocator_Type, E_Access_Attribute_Type)\n          then\n             T := Find_Unique_Access_Type;\n \n@@ -6434,8 +6430,8 @@ package body Sem_Res is\n \n          if Expander_Active\n            and then\n-             (Ekind (T) =  E_Anonymous_Access_Type\n-               or else Ekind (T) = E_Anonymous_Access_Subprogram_Type\n+             (Ekind_In (T, E_Anonymous_Access_Type,\n+                           E_Anonymous_Access_Subprogram_Type)\n                or else Is_Private_Type (T))\n          then\n             if Etype (L) /= T then\n@@ -7820,9 +7816,7 @@ package body Sem_Res is\n       end if;\n \n       if Has_Discriminants (T)\n-        and then (Ekind (Entity (S)) = E_Component\n-                   or else\n-                  Ekind (Entity (S)) = E_Discriminant)\n+        and then Ekind_In (Entity (S), E_Component, E_Discriminant)\n         and then Present (Original_Record_Component (Entity (S)))\n         and then Ekind (Original_Record_Component (Entity (S))) = E_Component\n         and then Present (Discriminant_Checking_Func\n@@ -8572,7 +8566,7 @@ package body Sem_Res is\n              (Etype (Entity (Orig_N)) = Orig_T\n                 or else\n                   (Ekind (Entity (Orig_N)) = E_Loop_Parameter\n-                     and then Covers (Orig_T, Etype (Entity (Orig_N)))))\n+                    and then Covers (Orig_T, Etype (Entity (Orig_N)))))\n          then\n             --  One more check, do not give warning if the analyzed conversion\n             --  has an expression with non-static bounds, and the bounds of the\n@@ -8958,9 +8952,7 @@ package body Sem_Res is\n       --  Exclude user-defined intrinsic operations of the same name, which are\n       --  treated separately and rewritten as calls.\n \n-      if Ekind (Op) /= E_Function\n-        or else Chars (N) /= Nam\n-      then\n+      if Ekind (Op) /= E_Function or else Chars (N) /= Nam then\n          Op_Node := New_Node (Operator_Kind (Nam, Is_Binary), Sloc (N));\n          Set_Chars      (Op_Node, Nam);\n          Set_Etype      (Op_Node, Etype (N));\n@@ -8999,9 +8991,8 @@ package body Sem_Res is\n             end case;\n          end if;\n \n-      elsif Ekind (Op) = E_Function\n-        and then Is_Intrinsic_Subprogram (Op)\n-      then\n+      elsif Ekind (Op) = E_Function and then Is_Intrinsic_Subprogram (Op) then\n+\n          --  Operator renames a user-defined operator of the same name. Use\n          --  the original operator in the node, which is the one that Gigi\n          --  knows about.\n@@ -9441,9 +9432,8 @@ package body Sem_Res is\n                --  out-of-scope references.\n \n             elsif\n-              (Ekind (Target_Comp_Base) = E_Anonymous_Access_Type\n-                 or else\n-               Ekind (Target_Comp_Base) = E_Anonymous_Access_Subprogram_Type)\n+              Ekind_In (Target_Comp_Base, E_Anonymous_Access_Type,\n+                                          E_Anonymous_Access_Subprogram_Type)\n               and then Ekind (Opnd_Comp_Base) = Ekind (Target_Comp_Base)\n               and then\n                 Subtypes_Statically_Match (Target_Comp_Type, Opnd_Comp_Type)\n@@ -9714,9 +9704,8 @@ package body Sem_Res is\n       --  Ada 2005 (AI-251): Anonymous access types where target references an\n       --  interface type.\n \n-      elsif (Ekind (Target_Type) = E_General_Access_Type\n-              or else\n-             Ekind (Target_Type) = E_Anonymous_Access_Type)\n+      elsif Ekind_In (Target_Type, E_General_Access_Type,\n+                                   E_Anonymous_Access_Type)\n         and then Is_Interface (Directly_Designated_Type (Target_Type))\n       then\n          --  Check the static accessibility rule of 4.6(17). Note that the\n@@ -9785,8 +9774,8 @@ package body Sem_Res is\n \n                if Is_Entity_Name (Operand)\n                  and then not Is_Local_Anonymous_Access (Opnd_Type)\n-                 and then (Ekind (Entity (Operand)) = E_In_Parameter\n-                            or else Ekind (Entity (Operand)) = E_Constant)\n+                 and then\n+                   Ekind_In (Entity (Operand), E_In_Parameter, E_Constant)\n                  and then Present (Discriminal_Link (Entity (Operand)))\n                then\n                   Error_Msg_N\n@@ -9801,15 +9790,14 @@ package body Sem_Res is\n \n       --  General and anonymous access types\n \n-      elsif (Ekind (Target_Type) = E_General_Access_Type\n-        or else Ekind (Target_Type) = E_Anonymous_Access_Type)\n+      elsif Ekind_In (Target_Type, E_General_Access_Type,\n+                                   E_Anonymous_Access_Type)\n           and then\n             Conversion_Check\n               (Is_Access_Type (Opnd_Type)\n-                 and then Ekind (Opnd_Type) /=\n-                   E_Access_Subprogram_Type\n-                 and then Ekind (Opnd_Type) /=\n-                   E_Access_Protected_Subprogram_Type,\n+                and then not\n+                  Ekind_In (Opnd_Type, E_Access_Subprogram_Type,\n+                                       E_Access_Protected_Subprogram_Type),\n                \"must be an access-to-object type\")\n       then\n          if Is_Access_Constant (Opnd_Type)\n@@ -9895,8 +9883,8 @@ package body Sem_Res is\n                --  access type.\n \n                if Is_Entity_Name (Operand)\n-                 and then (Ekind (Entity (Operand)) = E_In_Parameter\n-                            or else Ekind (Entity (Operand)) = E_Constant)\n+                 and then\n+                   Ekind_In (Entity (Operand), E_In_Parameter, E_Constant)\n                  and then Present (Discriminal_Link (Entity (Operand)))\n                then\n                   Error_Msg_N"}]}