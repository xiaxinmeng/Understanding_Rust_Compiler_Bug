{"sha": "25979b6761516b9039004385e08141e0925e1a17", "node_id": "C_kwDOANBUbNoAKDI1OTc5YjY3NjE1MTZiOTAzOTAwNDM4NWUwODE0MWUwOTI1ZTFhMTc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-23T14:50:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-23T15:35:12Z"}, "message": "tree-optimization/109262 - ICE with non-call EH and forwprop\n\nThe recent combining of complex part loads to a complex load missed\nto account for non-call EH.\n\n\tPR tree-optimization/109262\n\t* tree-ssa-forwprop.cc (pass_forwprop::execute): When\n\tcombining a piecewise complex load avoid touching loads\n\tthat throw internally.  Use fun, not cfun throughout.\n\n\t* g++.dg/torture/pr109262.C: New testcase.", "tree": {"sha": "9e8c72b75c05bab9eeaceccd3012b28f7f6be87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8c72b75c05bab9eeaceccd3012b28f7f6be87a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25979b6761516b9039004385e08141e0925e1a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25979b6761516b9039004385e08141e0925e1a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25979b6761516b9039004385e08141e0925e1a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25979b6761516b9039004385e08141e0925e1a17/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46b5b0a2c10139379a25b0071aa8997af41220d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46b5b0a2c10139379a25b0071aa8997af41220d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46b5b0a2c10139379a25b0071aa8997af41220d"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "54323b91bf749f9f38a61af9c793953596e73dc4", "filename": "gcc/testsuite/g++.dg/torture/pr109262.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25979b6761516b9039004385e08141e0925e1a17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr109262.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25979b6761516b9039004385e08141e0925e1a17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr109262.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr109262.C?ref=25979b6761516b9039004385e08141e0925e1a17", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fnon-call-exceptions\" }\n+\n+template < typename > struct au;\n+template < typename b > au< b > operator*(au< b >, au< b > &p2) {\n+  au< b > ax;\n+  ax *= p2;\n+  return p2;\n+}\n+template <> struct au< double > {\n+  double p() { return __real__ az; }\n+  double q() { return __imag__ az; }\n+  void operator*=(au &o) {\n+    _Complex bd = o.p();\n+    __imag__ bd = o.q();\n+    az *= bd;\n+  }\n+  _Complex az;\n+};\n+long bm, m;\n+au< double > h;\n+void bn() {\n+  for (long k; ;) {\n+    au< double > br;\n+    for (long j = 0; 0 < bm; ++j)\n+      au n = br * h;\n+  }\n+}"}, {"sha": "6df0b8f22151a433b89c40b9940bd9dd5669f1d8", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25979b6761516b9039004385e08141e0925e1a17/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25979b6761516b9039004385e08141e0925e1a17/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=25979b6761516b9039004385e08141e0925e1a17", "patch": "@@ -3460,7 +3460,7 @@ pass_forwprop::execute (function *fun)\n   lattice.create (num_ssa_names);\n   lattice.quick_grow_cleared (num_ssa_names);\n   int *postorder = XNEWVEC (int, n_basic_blocks_for_fn (fun));\n-  int postorder_num = pre_and_rev_post_order_compute_fn (cfun, NULL,\n+  int postorder_num = pre_and_rev_post_order_compute_fn (fun, NULL,\n \t\t\t\t\t\t\t postorder, false);\n   auto_vec<gimple *, 4> to_fixup;\n   auto_vec<gimple *, 32> to_remove;\n@@ -3594,7 +3594,7 @@ pass_forwprop::execute (function *fun)\n \t\t   && !gimple_has_volatile_ops (stmt)\n \t\t   && (TREE_CODE (gimple_assign_rhs1 (stmt))\n \t\t       != TARGET_MEM_REF)\n-\t\t   && !stmt_can_throw_internal (cfun, stmt))\n+\t\t   && !stmt_can_throw_internal (fun, stmt))\n \t    {\n \t      /* Rewrite loads used only in real/imagpart extractions to\n \t         component-wise loads.  */\n@@ -3660,7 +3660,7 @@ pass_forwprop::execute (function *fun)\n \t\t       || (fun->curr_properties & PROP_gimple_lvec))\n \t\t   && gimple_assign_load_p (stmt)\n \t\t   && !gimple_has_volatile_ops (stmt)\n-\t\t   && !stmt_can_throw_internal (cfun, stmt)\n+\t\t   && !stmt_can_throw_internal (fun, stmt)\n \t\t   && (!VAR_P (rhs) || !DECL_HARD_REGISTER (rhs)))\n \t    optimize_vector_load (&gsi);\n \n@@ -3688,7 +3688,7 @@ pass_forwprop::execute (function *fun)\n \t\t  location_t loc = gimple_location (use_stmt);\n \t\t  gimple_set_location (new_stmt, loc);\n \t\t  gimple_set_vuse (new_stmt, gimple_vuse (use_stmt));\n-\t\t  gimple_set_vdef (new_stmt, make_ssa_name (gimple_vop (cfun)));\n+\t\t  gimple_set_vdef (new_stmt, make_ssa_name (gimple_vop (fun)));\n \t\t  SSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n \t\t  gimple_set_vuse (use_stmt, gimple_vdef (new_stmt));\n \t\t  gimple_stmt_iterator gsi2 = gsi_for_stmt (use_stmt);\n@@ -3718,6 +3718,8 @@ pass_forwprop::execute (function *fun)\n \t\t       && (gimple_vuse (def1) == gimple_vuse (def2))\n \t\t       && !gimple_has_volatile_ops (def1)\n \t\t       && !gimple_has_volatile_ops (def2)\n+\t\t       && !stmt_can_throw_internal (fun, def1)\n+\t\t       && !stmt_can_throw_internal (fun, def2)\n \t\t       && gimple_assign_rhs_code (def1) == REALPART_EXPR\n \t\t       && gimple_assign_rhs_code (def2) == IMAGPART_EXPR\n \t\t       && operand_equal_p (TREE_OPERAND (gimple_assign_rhs1\n@@ -3752,7 +3754,7 @@ pass_forwprop::execute (function *fun)\n \t      if (single_imm_use (lhs, &use_p, &use_stmt)\n \t\t  && gimple_store_p (use_stmt)\n \t\t  && !gimple_has_volatile_ops (use_stmt)\n-\t\t  && !stmt_can_throw_internal (cfun, use_stmt)\n+\t\t  && !stmt_can_throw_internal (fun, use_stmt)\n \t\t  && is_gimple_assign (use_stmt)\n \t\t  && (TREE_CODE (gimple_assign_lhs (use_stmt))\n \t\t      != TARGET_MEM_REF))\n@@ -3783,7 +3785,7 @@ pass_forwprop::execute (function *fun)\n \t\t      gimple_set_location (new_stmt, loc);\n \t\t      gimple_set_vuse (new_stmt, gimple_vuse (use_stmt));\n \t\t      gimple_set_vdef (new_stmt,\n-\t\t\t\t       make_ssa_name (gimple_vop (cfun)));\n+\t\t\t\t       make_ssa_name (gimple_vop (fun)));\n \t\t      SSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n \t\t      gimple_set_vuse (use_stmt, gimple_vdef (new_stmt));\n \t\t      gimple_stmt_iterator gsi2 = gsi_for_stmt (use_stmt);\n@@ -4042,8 +4044,8 @@ pass_forwprop::execute (function *fun)\n   BITMAP_FREE (to_purge);\n   BITMAP_FREE (need_ab_cleanup);\n \n-  if (get_range_query (cfun) != get_global_range_query ())\n-    disable_ranger (cfun);\n+  if (get_range_query (fun) != get_global_range_query ())\n+    disable_ranger (fun);\n \n   if (cfg_changed)\n     todoflags |= TODO_cleanup_cfg;"}]}