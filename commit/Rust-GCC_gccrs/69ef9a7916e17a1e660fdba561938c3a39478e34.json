{"sha": "69ef9a7916e17a1e660fdba561938c3a39478e34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjllZjlhNzkxNmUxN2ExZTY2MGZkYmE1NjE5MzhjM2EzOTQ3OGUzNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-03-01T14:13:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-03-01T14:13:06Z"}, "message": "re PR tree-optimization/52445 (conditional store replacement causes segfault in generated code)\n\n\tPR tree-optimization/52445\n\t* tree-ssa-phiopt.c (struct name_to_bb): Remove ssa_name field,\n\tadd ssa_name_ver, offset and size fields and change store field\n\tto bool.\n\t(name_to_bb_hash, name_to_bb_eq): Adjust for the above changes.\n\t(add_or_mark_expr): Likewise.  Only consider previous stores\n\twith the same size and offset.\n\t(nt_init_block): Only look at gimple_assign_single_p stmts,\n\tdoesn't look at rhs2.\n\n\t* gcc.dg/pr52445.c: New test.\n\nFrom-SVN: r184743", "tree": {"sha": "f2a61c95f68d4591b10daf828209028095211184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a61c95f68d4591b10daf828209028095211184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ef9a7916e17a1e660fdba561938c3a39478e34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ef9a7916e17a1e660fdba561938c3a39478e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ef9a7916e17a1e660fdba561938c3a39478e34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ef9a7916e17a1e660fdba561938c3a39478e34/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1d9cb022bb143ff62a667ce8a504d326eda42a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d9cb022bb143ff62a667ce8a504d326eda42a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d9cb022bb143ff62a667ce8a504d326eda42a6"}], "stats": {"total": 74, "additions": 58, "deletions": 16}, "files": [{"sha": "8cedbf526c0d67e2b14ac84db23604452e3629a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69ef9a7916e17a1e660fdba561938c3a39478e34", "patch": "@@ -1,3 +1,15 @@\n+2012-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/52445\n+\t* tree-ssa-phiopt.c (struct name_to_bb): Remove ssa_name field,\n+\tadd ssa_name_ver, offset and size fields and change store field\n+\tto bool.\n+\t(name_to_bb_hash, name_to_bb_eq): Adjust for the above changes.\n+\t(add_or_mark_expr): Likewise.  Only consider previous stores\n+\twith the same size and offset.\n+\t(nt_init_block): Only look at gimple_assign_single_p stmts,\n+\tdoesn't look at rhs2.\n+\n 2012-03-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52443"}, {"sha": "7e898d7aef94cf9863455e710549462a815ba4c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69ef9a7916e17a1e660fdba561938c3a39478e34", "patch": "@@ -1,3 +1,8 @@\n+2012-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/52445\n+\t* gcc.dg/pr52445.c: New test.\n+\n 2012-02-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/52437"}, {"sha": "0977821a8292e5ae6d27b776746ca0ca0cb3bad6", "filename": "gcc/testsuite/gcc.dg/pr52445.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52445.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52445.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52445.c?ref=69ef9a7916e17a1e660fdba561938c3a39478e34", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/52445 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-cselim -fdump-tree-cselim\" } */\n+\n+void\n+foo (char *buf, unsigned long len)\n+{\n+  buf[0] = '\\n';\n+  if (len > 1)\n+    buf[1] = '\\0';\t/* We can't cselim \"optimize\" this, while\n+\t\t\t   buf[0] doesn't trap, buf[1] could.  */\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"cstore\\.\" \"cselim\" } } */\n+/* { dg-final { cleanup-tree-dump \"cselim\" } } */"}, {"sha": "0cef8ee39af11d9673cb99ed19fcff31c581742c", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ef9a7916e17a1e660fdba561938c3a39478e34/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=69ef9a7916e17a1e660fdba561938c3a39478e34", "patch": "@@ -1,5 +1,5 @@\n /* Optimization of PHI nodes by converting them into straightline code.\n-   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1122,9 +1122,10 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n    same accesses.  */\n struct name_to_bb\n {\n-  tree ssa_name;\n+  unsigned int ssa_name_ver;\n+  bool store;\n+  HOST_WIDE_INT offset, size;\n   basic_block bb;\n-  unsigned store : 1;\n };\n \n /* The hash table for remembering what we've seen.  */\n@@ -1133,23 +1134,26 @@ static htab_t seen_ssa_names;\n /* The set of MEM_REFs which can't trap.  */\n static struct pointer_set_t *nontrap_set;\n \n-/* The hash function, based on the pointer to the pointer SSA_NAME.  */\n+/* The hash function.  */\n static hashval_t\n name_to_bb_hash (const void *p)\n {\n-  const_tree n = ((const struct name_to_bb *)p)->ssa_name;\n-  return htab_hash_pointer (n) ^ ((const struct name_to_bb *)p)->store;\n+  const struct name_to_bb *n = (const struct name_to_bb *) p;\n+  return n->ssa_name_ver ^ (((hashval_t) n->store) << 31)\n+         ^ (n->offset << 6) ^ (n->size << 3);\n }\n \n-/* The equality function of *P1 and *P2.  SSA_NAMEs are shared, so\n-   it's enough to simply compare them for equality.  */\n+/* The equality function of *P1 and *P2.  */\n static int\n name_to_bb_eq (const void *p1, const void *p2)\n {\n   const struct name_to_bb *n1 = (const struct name_to_bb *)p1;\n   const struct name_to_bb *n2 = (const struct name_to_bb *)p2;\n \n-  return n1->ssa_name == n2->ssa_name && n1->store == n2->store;\n+  return n1->ssa_name_ver == n2->ssa_name_ver\n+         && n1->store == n2->store\n+         && n1->offset == n2->offset\n+         && n1->size == n2->size;\n }\n \n /* We see the expression EXP in basic block BB.  If it's an interesting\n@@ -1161,8 +1165,12 @@ static void\n add_or_mark_expr (basic_block bb, tree exp,\n \t\t  struct pointer_set_t *nontrap, bool store)\n {\n+  HOST_WIDE_INT size;\n+\n   if (TREE_CODE (exp) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (exp, 0)) == SSA_NAME)\n+      && TREE_CODE (TREE_OPERAND (exp, 0)) == SSA_NAME\n+      && host_integerp (TREE_OPERAND (exp, 1), 0)\n+      && (size = int_size_in_bytes (TREE_TYPE (exp))) > 0)\n     {\n       tree name = TREE_OPERAND (exp, 0);\n       struct name_to_bb map;\n@@ -1172,9 +1180,12 @@ add_or_mark_expr (basic_block bb, tree exp,\n \n       /* Try to find the last seen MEM_REF through the same\n          SSA_NAME, which can trap.  */\n-      map.ssa_name = name;\n+      map.ssa_name_ver = SSA_NAME_VERSION (name);\n       map.bb = 0;\n       map.store = store;\n+      map.offset = tree_low_cst (TREE_OPERAND (exp, 1), 0);\n+      map.size = size;\n+\n       slot = htab_find_slot (seen_ssa_names, &map, INSERT);\n       n2bb = (struct name_to_bb *) *slot;\n       if (n2bb)\n@@ -1197,9 +1208,11 @@ add_or_mark_expr (basic_block bb, tree exp,\n \t  else\n \t    {\n \t      n2bb = XNEW (struct name_to_bb);\n-\t      n2bb->ssa_name = name;\n+\t      n2bb->ssa_name_ver = SSA_NAME_VERSION (name);\n \t      n2bb->bb = bb;\n \t      n2bb->store = store;\n+\t      n2bb->offset = map.offset;\n+\t      n2bb->size = size;\n \t      *slot = n2bb;\n \t    }\n \t}\n@@ -1219,13 +1232,10 @@ nt_init_block (struct dom_walk_data *data ATTRIBUTE_UNUSED, basic_block bb)\n     {\n       gimple stmt = gsi_stmt (gsi);\n \n-      if (is_gimple_assign (stmt))\n+      if (gimple_assign_single_p (stmt))\n \t{\n \t  add_or_mark_expr (bb, gimple_assign_lhs (stmt), nontrap_set, true);\n \t  add_or_mark_expr (bb, gimple_assign_rhs1 (stmt), nontrap_set, false);\n-\t  if (get_gimple_rhs_num_ops (gimple_assign_rhs_code (stmt)) > 1)\n-\t    add_or_mark_expr (bb, gimple_assign_rhs2 (stmt), nontrap_set,\n-\t\t\t      false);\n \t}\n     }\n }"}]}