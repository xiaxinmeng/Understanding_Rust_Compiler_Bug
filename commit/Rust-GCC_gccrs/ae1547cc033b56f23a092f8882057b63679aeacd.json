{"sha": "ae1547cc033b56f23a092f8882057b63679aeacd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUxNTQ3Y2MwMzNiNTZmMjNhMDkyZjg4ODIwNTdiNjM2NzlhZWFjZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-27T15:36:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-27T15:36:34Z"}, "message": "re PR target/52698 (-maddress-mode=long doesn't work)\n\n\tPR target/52698\n\t* config/i386/i386-protos.h (ix86_legitimize_reload_address):\n\tNew prototype.\n\t* config/i386/i386.h (LEGITIMIZE_RELOAD_ADDRESS): New define.\n\t* config/i386/i386.c: Include reload.h.\n\t(ix86_legitimize_reload_address): New function.\n\ntestsuite/ChangeLog:\n\n\tPR target/52698\n\t* gcc.target/i386/pr52698.c: New test.\n\nFrom-SVN: r185883", "tree": {"sha": "d6b2f08f8cbd8de64ac0e14cc96f0b52233699f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b2f08f8cbd8de64ac0e14cc96f0b52233699f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae1547cc033b56f23a092f8882057b63679aeacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae1547cc033b56f23a092f8882057b63679aeacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae1547cc033b56f23a092f8882057b63679aeacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae1547cc033b56f23a092f8882057b63679aeacd/comments", "author": null, "committer": null, "parents": [{"sha": "1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad36b7eaa2303e141c3f020a90b9c68a49963eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad36b7eaa2303e141c3f020a90b9c68a49963eb"}], "stats": {"total": 109, "additions": 106, "deletions": 3}, "files": [{"sha": "6cc16537d0bdb1908a1b0f5d38e457f150709fe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae1547cc033b56f23a092f8882057b63679aeacd", "patch": "@@ -1,9 +1,17 @@\n+2012-03-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52698\n+\t* config/i386/i386-protos.h (ix86_legitimize_reload_address):\n+\tNew prototype.\n+\t* config/i386/i386.h (LEGITIMIZE_RELOAD_ADDRESS): New define.\n+\t* config/i386/i386.c: Include reload.h.\n+\t(ix86_legitimize_reload_address): New function.\n+\n 2012-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* opth-gen.awk: Allocated a bit for Mask and InverseMask if it\n \thasn't been allocated.  Define a target macro for Mask and\n-\tInverseMask if it hasn't been defined.  Remove MaskExists\n-\thandling.\n+\tInverseMask if it hasn't been defined.  Remove MaskExists handling.\n \n \t* doc/options.texi: Remove MaskNeeded.\n "}, {"sha": "f300a56834d853c33c91c0e3fea2419a8776ce72", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=ae1547cc033b56f23a092f8882057b63679aeacd", "patch": "@@ -65,7 +65,8 @@ extern bool ix86_expand_strlen (rtx, rtx, rtx, rtx);\n extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);\n extern bool legitimate_pic_address_disp_p (rtx);\n-\n+extern bool ix86_legitimize_reload_address (rtx, enum machine_mode,\n+\t\t\t\t\t    int, int, int);\n extern void print_reg (rtx, int, FILE*);\n extern void ix86_print_operand (FILE *, rtx, int);\n "}, {"sha": "18172a10825f4d55869b649347e8f9bb6d9c0ecf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ae1547cc033b56f23a092f8882057b63679aeacd", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"common/common-target.h\"\n #include \"langhooks.h\"\n+#include \"reload.h\"\n #include \"cgraph.h\"\n #include \"gimple.h\"\n #include \"dwarf2.h\"\n@@ -12010,6 +12011,64 @@ legitimate_pic_address_disp_p (rtx disp)\n   return false;\n }\n \n+/* Our implementation of LEGITIMIZE_RELOAD_ADDRESS.  Returns a value to\n+   replace the input X, or the original X if no replacement is called for.\n+   The output parameter *WIN is 1 if the calling macro should goto WIN,\n+   0 if it should not.  */\n+\n+bool\n+ix86_legitimize_reload_address (rtx x,\n+\t\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t\tint opnum, int type,\n+\t\t\t\tint ind_levels ATTRIBUTE_UNUSED)\n+{\n+  /* Reload can generate:\n+\n+     (plus:DI (plus:DI (unspec:DI [(const_int 0 [0])] UNSPEC_TP)\n+\t\t       (reg:DI 97))\n+\t      (reg:DI 2 cx))\n+\n+     This RTX is rejected from ix86_legitimate_address_p due to\n+     non-strictness of base register 97.  Following this rejection, \n+     reload pushes all three components into separate registers,\n+     creating invalid memory address RTX.\n+\n+     Following code reloads only the invalid part of the\n+     memory address RTX.  */\n+\n+  if (GET_CODE (x) == PLUS\n+      && REG_P (XEXP (x, 1))\n+      && GET_CODE (XEXP (x, 0)) == PLUS\n+      && REG_P (XEXP (XEXP (x, 0), 1)))\n+    {\n+      rtx base, index;\n+      bool something_reloaded = false;\n+\n+      base = XEXP (XEXP (x, 0), 1);      \n+      if (!REG_OK_FOR_BASE_STRICT_P (base))\n+\t{\n+\t  push_reload (base, NULL_RTX, &XEXP (XEXP (x, 0), 1), NULL,\n+\t\t       BASE_REG_CLASS, GET_MODE (x), VOIDmode, 0, 0,\n+\t\t       opnum, (enum reload_type) type);\n+\t  something_reloaded = true;\n+\t}\n+\n+      index = XEXP (x, 1);\n+      if (!REG_OK_FOR_INDEX_STRICT_P (index))\n+\t{\n+\t  push_reload (index, NULL_RTX, &XEXP (x, 1), NULL,\n+\t\t       INDEX_REG_CLASS, GET_MODE (x), VOIDmode, 0, 0,\n+\t\t       opnum, (enum reload_type) type);\n+\t  something_reloaded = true;\n+\t}\n+\n+      gcc_assert (something_reloaded);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Recognizes RTL expressions that are valid memory addresses for an\n    instruction.  The MODE argument is the machine mode for the MEM\n    expression that wants to use this address."}, {"sha": "a53c70a31dc2dff3ac9dff5a722b3faf914abec9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ae1547cc033b56f23a092f8882057b63679aeacd", "patch": "@@ -1630,6 +1630,17 @@ typedef struct ix86_args {\n \n #define CONSTANT_ADDRESS_P(X)  constant_address_p (X)\n \n+/* Try a machine-dependent way of reloading an illegitimate address\n+   operand.  If we find one, push the reload and jump to WIN.  This\n+   macro is used in only one place: `find_reloads_address' in reload.c.  */\n+\n+#define LEGITIMIZE_RELOAD_ADDRESS(X, MODE, OPNUM, TYPE, INDL, WIN)\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (ix86_legitimize_reload_address ((X), (MODE), (OPNUM),\t\t\\\n+\t\t\t\t      (int)(TYPE), (INDL)))\t\t\\\n+    goto WIN;\t\t\t\t\t\t\t\t\\\n+} while (0)\n+\n /* If defined, a C expression to determine the base term of address X.\n    This macro is used in only one place: `find_base_term' in alias.c.\n "}, {"sha": "a9f0bc8c0695139fc40133ce8ac08d7ce152c4f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae1547cc033b56f23a092f8882057b63679aeacd", "patch": "@@ -1,3 +1,9 @@\n+2012-03-27  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/52698\n+\t* gcc.target/i386/pr52698.c: New test.\n+\n 2012-03-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52720"}, {"sha": "d84685cb3b7530df1664e99afeaee43f42d6a692", "filename": "gcc/testsuite/gcc.target/i386/pr52698.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52698.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1547cc033b56f23a092f8882057b63679aeacd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52698.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52698.c?ref=ae1547cc033b56f23a092f8882057b63679aeacd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mx32 -maddress-mode=long\" } */\n+\n+extern void abort (void);\n+static __thread unsigned char foo [32]\n+__attribute__ ((tls_model (\"initial-exec\"), aligned (sizeof (void *))));\n+\n+void\n+test2 (void)\n+{\n+  unsigned int s;\n+  for (s = 0; s < sizeof (foo); ++s)\n+    {\n+      if (foo [s] != s)\n+\tabort ();\n+      foo [s] = sizeof (foo) - s;\n+    }\n+}"}]}