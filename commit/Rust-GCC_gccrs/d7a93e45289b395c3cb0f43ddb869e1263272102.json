{"sha": "d7a93e45289b395c3cb0f43ddb869e1263272102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhOTNlNDUyODliMzk1YzNjYjBmNDNkZGI4NjllMTI2MzI3MjEwMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T13:11:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T13:11:44Z"}, "message": "[multiple changes]\n\n2014-07-31  Javier Miranda  <miranda@adacore.com>\n\n\t* gnat1drv.adb (Back_End_Inlining): Set to false if\n\tSuppress_All_Inlining is set.\n\t* debug.adb: Adding documentation for -gnatd.z.\n\t* inline.adb (Add_Inlined_Body): Extend the -gnatn2\n\tprocessing to -gnatn1 for calls to Inline_Always routines.\n\t(Add_Inlined_Subprogram): Remove previous patch.\n\n2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Check_One_Function): Apply properly the static\n\tsemantic rules for indexing aspects and the functions they denote.\n\nFrom-SVN: r213361", "tree": {"sha": "cbc96cf6bd225a3e3af9885304a81b99aea166f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc96cf6bd225a3e3af9885304a81b99aea166f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7a93e45289b395c3cb0f43ddb869e1263272102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a93e45289b395c3cb0f43ddb869e1263272102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a93e45289b395c3cb0f43ddb869e1263272102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a93e45289b395c3cb0f43ddb869e1263272102/comments", "author": null, "committer": null, "parents": [{"sha": "16a569d2f4278bcb777d58bb0cdd0a20361c4518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a569d2f4278bcb777d58bb0cdd0a20361c4518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a569d2f4278bcb777d58bb0cdd0a20361c4518"}], "stats": {"total": 119, "additions": 90, "deletions": 29}, "files": [{"sha": "1c684825746bdf4821de2232b7375885fdafc54c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d7a93e45289b395c3cb0f43ddb869e1263272102", "patch": "@@ -1,3 +1,17 @@\n+2014-07-31  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat1drv.adb (Back_End_Inlining): Set to false if\n+\tSuppress_All_Inlining is set.\n+\t* debug.adb: Adding documentation for -gnatd.z.\n+\t* inline.adb (Add_Inlined_Body): Extend the -gnatn2\n+\tprocessing to -gnatn1 for calls to Inline_Always routines.\n+\t(Add_Inlined_Subprogram): Remove previous patch.\n+\n+2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_One_Function): Apply properly the static\n+\tsemantic rules for indexing aspects and the functions they denote.\n+\n 2014-07-31  Javier Miranda  <miranda@adacore.com>\n \n \t* debug.adb: Complete documentation of -gnatd.z."}, {"sha": "02f8d1fd5edde057d2818e5120a05bdbc0bc5f3b", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=d7a93e45289b395c3cb0f43ddb869e1263272102", "patch": "@@ -598,8 +598,12 @@ package body Debug is\n    --       all targets except AAMP, .NET and JVM). This switch has no effect\n    --       under GNATprove to avoid confusing the formal verification output,\n    --       and it has no effect if the sources are compiled with frontend\n-   --       inlining (ie. -gnatN). This switch is currently used to evaluate\n-   --       the impact of back end inlining.\n+   --       inlining (ie. -gnatN). This switch is used to evaluate the impact\n+   --       of back end inlining since the GCC backend has now more support for\n+   --       inlining than before, and hence most of the inlinings that are\n+   --       currently handled by the frontend can be done by the backend with\n+   --       the extra benefit of supporting cases which are currently rejected\n+   --       by GNAT.\n \n    --  d.A  There seems to be a problem with ASIS if we activate the circuit\n    --       for reading and writing the aspect specification hash table, so"}, {"sha": "960f75de9830be741fae3e3fdc109c0ffd958884", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d7a93e45289b395c3cb0f43ddb869e1263272102", "patch": "@@ -598,9 +598,13 @@ procedure Gnat1drv is\n \n       Back_End_Inlining :=\n \n+        --  No back end inlining if inlining is suppressed\n+\n+        not Suppress_All_Inlining\n+\n         --  No back end inlining available for VM targets\n \n-        VM_Target = No_VM\n+        and then VM_Target = No_VM\n \n         --  No back end inlining available on AAMP\n "}, {"sha": "c8fdc32ea975269f8c24d25752fadc274669fb0f", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d7a93e45289b395c3cb0f43ddb869e1263272102", "patch": "@@ -377,10 +377,14 @@ package body Inline is\n                   Inlined_Bodies.Increment_Last;\n                   Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n \n-               --  If the backend takes care of inlining the call then we must\n-               --  ensure that it has available the body of the subprogram.\n+               --  Extend the -gnatn2 processing to -gnatn1 for Inline_Always\n+               --  calls if the back-end takes care of inlining the call.\n \n-               elsif Level = Inline_Call and then Back_End_Inlining then\n+               elsif Level = Inline_Call\n+                 and then Has_Pragma_Inline_Always (E)\n+                 and then Back_End_Inlining\n+               then\n+                  Set_Is_Inlined (Pack);\n                   Inlined_Bodies.Increment_Last;\n                   Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n                end if;\n@@ -465,16 +469,11 @@ package body Inline is\n       --  subprogram has been generated by the compiler, and if it is declared\n       --  at the library level not in the main unit, and if it can be inlined\n       --  by the back-end, then insert it in the list of inlined subprograms.\n-      --  We also add it when its unit is not inlined but we are compiling with\n-      --  Back_End_Inlining since at this stage we know that Add_Inlined_Body\n-      --  forced loading its unit to allow the backend to inline single calls\n-      --  at -gnatn1\n \n       if Is_Inlined (E)\n         and then (Is_Inlined (Pack)\n                    or else Is_Generic_Instance (Pack)\n-                   or else Is_Internal (E)\n-                   or else Back_End_Inlining)\n+                   or else Is_Internal (E))\n         and then not In_Main_Unit_Or_Subunit (E)\n         and then not Is_Nested (E)\n         and then not Has_Initialized_Type (E)"}, {"sha": "4610fe0143291aa218275c3f4b5fd7dd7ccc4271", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 57, "deletions": 17, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a93e45289b395c3cb0f43ddb869e1263272102/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d7a93e45289b395c3cb0f43ddb869e1263272102", "patch": "@@ -3470,8 +3470,8 @@ package body Sem_Ch13 is\n          Indexing_Found : Boolean;\n \n          procedure Check_One_Function (Subp : Entity_Id);\n-         --  Check one possible interpretation. Sets Indexing_Found True if an\n-         --  indexing function is found.\n+         --  Check one possible interpretation. Sets Indexing_Found True if a\n+         --  legal indexing function is found.\n \n          procedure Illegal_Indexing (Msg : String);\n          --  Diagnose illegal indexing function if not overloaded. In the\n@@ -3490,9 +3490,15 @@ package body Sem_Ch13 is\n                Illegal_Indexing (\"illegal indexing function for type&\");\n                return;\n \n-            elsif Scope (Subp) /= Current_Scope then\n-               Illegal_Indexing\n-                 (\"indexing function must be declared in scope of type&\");\n+            elsif Scope (Subp) /= Scope (Ent) then\n+               if Nkind (Expr) = N_Expanded_Name then\n+\n+                  --  Indexing function can't be declared elsewhere\n+\n+                  Illegal_Indexing\n+                    (\"indexing function must be declared in scope of type&\");\n+               end if;\n+\n                return;\n \n             elsif No (First_Formal (Subp)) then\n@@ -3521,20 +3527,54 @@ package body Sem_Ch13 is\n                      Illegal_Indexing\n                         (\"indexing function already inherited \"\n                           & \"from parent type\");\n+                     return;\n                   end if;\n-\n-                  return;\n                end if;\n             end if;\n \n             if not Check_Primitive_Function (Subp)\n-              and then not Is_Overloaded (Expr)\n             then\n                Illegal_Indexing\n                  (\"Indexing aspect requires a function that applies to type&\");\n                return;\n             end if;\n \n+            --  If partial declaration exists, verify that it is not tagged.\n+\n+            if Ekind (Current_Scope) = E_Package\n+              and then Has_Private_Declaration (Ent)\n+              and then From_Aspect_Specification (N)\n+              and then List_Containing (Parent (Ent))\n+                 = Private_Declarations\n+                    (Specification (Unit_Declaration_Node (Current_Scope)))\n+              and then Nkind (N) = N_Attribute_Definition_Clause\n+            then\n+               declare\n+                  Decl : Node_Id;\n+\n+               begin\n+                  Decl :=\n+                     First (Visible_Declarations\n+                      (Specification\n+                        (Unit_Declaration_Node (Current_Scope))));\n+\n+                  while Present (Decl) loop\n+                     if Nkind (Decl) = N_Private_Type_Declaration\n+                       and then Ent = Full_View (Defining_Identifier (Decl))\n+                       and then Tagged_Present (Decl)\n+                       and then No (Aspect_Specifications (Decl))\n+                     then\n+                        Illegal_Indexing\n+                          (\"Indexing aspect cannot be specified on full view \"\n+                             & \"if partial view is tagged\");\n+                        return;\n+                     end if;\n+\n+                     Next (Decl);\n+                  end loop;\n+               end;\n+            end if;\n+\n             --  An indexing function must return either the default element of\n             --  the container, or a reference type. For variable indexing it\n             --  must be the latter.\n@@ -3600,9 +3640,7 @@ package body Sem_Ch13 is\n \n          procedure Illegal_Indexing (Msg : String) is\n          begin\n-            if not Is_Overloaded (Expr) then\n-               Error_Msg_NE (Msg, N, Ent);\n-            end if;\n+            Error_Msg_NE (Msg, N, Ent);\n          end Illegal_Indexing;\n \n       --  Start of processing for Check_Indexing_Functions\n@@ -3637,14 +3675,16 @@ package body Sem_Ch13 is\n \n                   Get_Next_Interp (I, It);\n                end loop;\n-\n-               if not Indexing_Found then\n-                  Error_Msg_NE\n-                    (\"aspect Indexing requires a function that \"\n-                     & \"applies to type&\", Expr, Ent);\n-               end if;\n             end;\n          end if;\n+\n+         if not Indexing_Found\n+           and then not Error_Posted (N)\n+         then\n+            Error_Msg_NE\n+              (\"aspect Indexing requires a local function that \"\n+               & \"applies to type&\", Expr, Ent);\n+         end if;\n       end Check_Indexing_Functions;\n \n       ------------------------------"}]}