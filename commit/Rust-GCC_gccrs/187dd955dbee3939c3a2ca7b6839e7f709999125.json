{"sha": "187dd955dbee3939c3a2ca7b6839e7f709999125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3ZGQ5NTVkYmVlMzkzOWMzYTJjYTdiNjgzOWU3ZjcwOTk5OTEyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-15T11:53:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-15T11:53:44Z"}, "message": "match.pd: Disallow side-effects in GENERIC for non-COND_EXPR to COND_EXPR simplifications [PR93744]\n\nAs the following testcases show (the first one reported, last two\nfound by code inspection), we need to disallow side-effects\nin simplifications that turn some unconditional expression into conditional\none.  From my little understanding of genmatch.c, it is able to\nautomatically disallow side effects if the same operand is used multiple\ntimes in the match pattern, maybe if it is used multiple times in the\nreplacement pattern, and if it is used in conditional contexts in the match\npattern, could it be taught to handle this case too?  If yes, perhaps\njust the first hunk could be usable for 8/9 backports (+ the testcases).\n\n2020-02-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/93744\n\t* match.pd (((m1 >/</>=/<= m2) * d -> (m1 >/</>=/<= m2) ? d : 0,\n\tA - ((A - B) & -(C cmp D)) -> (C cmp D) ? B : A,\n\tA + ((B - A) & -(C cmp D)) -> (C cmp D) ? B : A): For GENERIC, make\n\tsure @2 in the first and @1 in the other patterns has no side-effects.\n\n\t* gcc.c-torture/execute/pr93744-1.c: New test.\n\t* gcc.c-torture/execute/pr93744-2.c: New test.\n\t* gcc.c-torture/execute/pr93744-3.c: New test.", "tree": {"sha": "02a3d390dc575f8d7179eabef999a485306e9544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a3d390dc575f8d7179eabef999a485306e9544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/187dd955dbee3939c3a2ca7b6839e7f709999125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187dd955dbee3939c3a2ca7b6839e7f709999125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187dd955dbee3939c3a2ca7b6839e7f709999125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187dd955dbee3939c3a2ca7b6839e7f709999125/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55b00d14f4daf671b865550c119dafdeb3139672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b00d14f4daf671b865550c119dafdeb3139672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b00d14f4daf671b865550c119dafdeb3139672"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "3ef5b4d68f74bd077d3cf3efe500b98ee02954fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=187dd955dbee3939c3a2ca7b6839e7f709999125", "patch": "@@ -1,3 +1,11 @@\n+2020-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93744\n+\t* match.pd (((m1 >/</>=/<= m2) * d -> (m1 >/</>=/<= m2) ? d : 0,\n+\tA - ((A - B) & -(C cmp D)) -> (C cmp D) ? B : A,\n+\tA + ((B - A) & -(C cmp D)) -> (C cmp D) ? B : A): For GENERIC, make\n+\tsure @2 in the first and @1 in the other patterns has no side-effects.\n+\n 2020-02-15  David Malcolm  <dmalcolm@redhat.com>\n \t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n "}, {"sha": "19df0c404a47242b6b5af332fc4d6528722f0fe8", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=187dd955dbee3939c3a2ca7b6839e7f709999125", "patch": "@@ -1472,7 +1472,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (for cmp (gt lt ge le)\n (simplify\n  (mult (convert (cmp @0 @1)) @2)\n-  (cond (cmp @0 @1) @2 { build_zero_cst (type); })))\n+  (if (GIMPLE || !TREE_SIDE_EFFECTS (@2))\n+   (cond (cmp @0 @1) @2 { build_zero_cst (type); }))))\n \n /* For integral types with undefined overflow and C != 0 fold\n    x * C EQ/NE y * C into x EQ/NE y.  */\n@@ -2709,7 +2710,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && TREE_CODE (TREE_TYPE (@4)) != BOOLEAN_TYPE\n        && INTEGRAL_TYPE_P (TREE_TYPE (@5))\n        && (TYPE_PRECISION (TREE_TYPE (@4)) >= TYPE_PRECISION (type)\n-\t   || !TYPE_UNSIGNED (TREE_TYPE (@4))))\n+\t   || !TYPE_UNSIGNED (TREE_TYPE (@4)))\n+       && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n    (cond (cmp @2 @3) @1 @0)))\n  (simplify\n   (plus:c @0 (bit_and:c (minus @1 @0)\n@@ -2719,7 +2721,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && TREE_CODE (TREE_TYPE (@4)) != BOOLEAN_TYPE\n        && INTEGRAL_TYPE_P (TREE_TYPE (@5))\n        && (TYPE_PRECISION (TREE_TYPE (@4)) >= TYPE_PRECISION (type)\n-\t   || !TYPE_UNSIGNED (TREE_TYPE (@4))))\n+\t   || !TYPE_UNSIGNED (TREE_TYPE (@4)))\n+       && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n    (cond (cmp @2 @3) @1 @0))))\n \n /* Simplifications of shift and rotates.  */"}, {"sha": "77c781a40e8b609de10e988da99c4db7ae987954", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=187dd955dbee3939c3a2ca7b6839e7f709999125", "patch": "@@ -1,3 +1,10 @@\n+2020-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93744\n+\t* gcc.c-torture/execute/pr93744-1.c: New test.\n+\t* gcc.c-torture/execute/pr93744-2.c: New test.\n+\t* gcc.c-torture/execute/pr93744-3.c: New test.\n+\n 2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/61414"}, {"sha": "3229c9b2bd6752eb4ad6bcccc482455daf366dce", "filename": "gcc/testsuite/gcc.c-torture/execute/pr93744-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-1.c?ref=187dd955dbee3939c3a2ca7b6839e7f709999125", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/93744 */\n+\n+typedef int I;\n+\n+int\n+main ()\n+{\n+  int a = 0;\n+  I b = 0;\n+  (a > 0) * (b |= 2);\n+  if (b != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0c1baaac77b3e10af52fdc4165d89a14c7f8900d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr93744-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-2.c?ref=187dd955dbee3939c3a2ca7b6839e7f709999125", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/93744 */\n+\n+int w;\n+\n+int\n+foo (int x, int y, int z)\n+{\n+  int r = z - ((z - w++) & -(x < y));\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  w = 4;\n+  if (foo (5, 7, 12) != 4 || w != 5)\n+    __builtin_abort ();\n+  if (foo (7, 5, 12) != 12 || w != 6)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8542c7c53ba08d6b0150a3fea0072ca5ac22caba", "filename": "gcc/testsuite/gcc.c-torture/execute/pr93744-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187dd955dbee3939c3a2ca7b6839e7f709999125/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93744-3.c?ref=187dd955dbee3939c3a2ca7b6839e7f709999125", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/93744 */\n+\n+int w;\n+\n+int\n+foo (int x, int y, int z)\n+{\n+  int r = z + ((w++ - z) & -(x < y));\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  w = 4;\n+  if (foo (5, 7, 12) != 4 || w != 5)\n+    __builtin_abort ();\n+  if (foo (7, 5, 12) != 12 || w != 6)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}