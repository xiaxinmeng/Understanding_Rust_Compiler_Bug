{"sha": "2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZkMTZkMGY5MDA3ZjJlOWE5OTFiODBjNmFlMmU0YzVmODUyNzJiNg==", "commit": {"author": {"name": "Momchil Velikov", "email": "momchil.velikov@gmail.com", "date": "2015-04-14T15:29:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-04-14T15:29:21Z"}, "message": "re PR c++/60994 (gcc does not recognize hidden/shadowed enumeration as valid nested-name-specifier)\n\n\tPR c++/60994\n\t* parser.c (cp_parser_class_name): Add enum_ok parameter.\n\t(cp_parser_qualifying_entity): Use it instead of cp_parser_type_name.\n\t(cp_parser_diagnose_invalid_type_name): Don't assume a template is\n\ta class template.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r222094", "tree": {"sha": "9c81b516ff7b99da9d474e39696137390b743930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c81b516ff7b99da9d474e39696137390b743930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/comments", "author": {"login": "momchil-velikov", "id": 5541560, "node_id": "MDQ6VXNlcjU1NDE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5541560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/momchil-velikov", "html_url": "https://github.com/momchil-velikov", "followers_url": "https://api.github.com/users/momchil-velikov/followers", "following_url": "https://api.github.com/users/momchil-velikov/following{/other_user}", "gists_url": "https://api.github.com/users/momchil-velikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/momchil-velikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/momchil-velikov/subscriptions", "organizations_url": "https://api.github.com/users/momchil-velikov/orgs", "repos_url": "https://api.github.com/users/momchil-velikov/repos", "events_url": "https://api.github.com/users/momchil-velikov/events{/privacy}", "received_events_url": "https://api.github.com/users/momchil-velikov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b42e7064553ea0deb7081e6ee7cf2aa898f6de78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42e7064553ea0deb7081e6ee7cf2aa898f6de78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42e7064553ea0deb7081e6ee7cf2aa898f6de78"}], "stats": {"total": 103, "additions": 66, "deletions": 37}, "files": [{"sha": "2e43e4d100ef52acf154b9317904022f3b3acc49", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "patch": "@@ -1,3 +1,12 @@\n+2015-04-14  Momchil Velikov  <momchil.velikov@gmail.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60994\n+\t* parser.c (cp_parser_class_name): Add enum_ok parameter.\n+\t(cp_parser_qualifying_entity): Use it instead of cp_parser_type_name.\n+\t(cp_parser_diagnose_invalid_type_name): Don't assume a template is\n+\ta class template.\n+\n 2015-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/65736"}, {"sha": "c457a299fb9b7946c18f6d96c2d6bc0cf6c34642", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "patch": "@@ -2193,7 +2193,7 @@ static tree finish_fully_implicit_template\n /* Classes [gram.class] */\n \n static tree cp_parser_class_name\n-  (cp_parser *, bool, bool, enum tag_types, bool, bool, bool);\n+  (cp_parser *, bool, bool, enum tag_types, bool, bool, bool, bool = false);\n static tree cp_parser_class_specifier\n   (cp_parser *);\n static tree cp_parser_class_head\n@@ -2957,10 +2957,13 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n     return;\n   /* If the lookup found a template-name, it means that the user forgot\n   to specify an argument list. Emit a useful error message.  */\n-  if (TREE_CODE (decl) == TEMPLATE_DECL)\n-    error_at (location,\n-\t      \"invalid use of template-name %qE without an argument list\",\n-\t      decl);\n+  if (DECL_TYPE_TEMPLATE_P (decl))\n+    {\n+      error_at (location,\n+\t\t\"invalid use of template-name %qE without an argument list\",\n+\t\tdecl);\n+      inform (DECL_SOURCE_LOCATION (decl), \"%qD declared here\", decl);\n+    }\n   else if (TREE_CODE (id) == BIT_NOT_EXPR)\n     error_at (location, \"invalid use of destructor %qD as a type\", id);\n   else if (TREE_CODE (decl) == TYPE_DECL)\n@@ -3037,6 +3040,8 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t    error_at (location_of (id),\n \t\t      \"%qE in namespace %qE does not name a type\",\n \t\t      id, parser->scope);\n+\t  if (DECL_P (decl))\n+\t    inform (DECL_SOURCE_LOCATION (decl), \"%qD declared here\", decl);\n \t}\n       else if (CLASS_TYPE_P (parser->scope)\n \t       && constructor_name_p (id, parser->scope))\n@@ -3063,6 +3068,8 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t    error_at (location_of (id),\n \t\t      \"%qE in %q#T does not name a type\",\n \t\t      id, parser->scope);\n+\t  if (DECL_P (decl))\n+\t    inform (DECL_SOURCE_LOCATION (decl), \"%qD declared here\", decl);\n \t}\n       else\n \tgcc_unreachable ();\n@@ -5710,35 +5717,9 @@ cp_parser_qualifying_entity (cp_parser *parser,\n \t\t\t\ttype_p ? class_type : none_type,\n \t\t\t\tcheck_dependency_p,\n \t\t\t\t/*class_head_p=*/false,\n-\t\t\t\tis_declaration);\n+\t\t\t\tis_declaration,\n+\t\t\t\t/*enum_ok=*/cxx_dialect > cxx98);\n   successful_parse_p = only_class_p || cp_parser_parse_definitely (parser);\n-  /* If that didn't work and we're in C++0x mode, try for a type-name.  */\n-  if (!only_class_p \n-      && cxx_dialect != cxx98\n-      && !successful_parse_p)\n-    {\n-      /* Restore the saved scope.  */\n-      parser->scope = saved_scope;\n-      parser->qualifying_scope = saved_qualifying_scope;\n-      parser->object_scope = saved_object_scope;\n-\n-      /* Parse tentatively.  */\n-      cp_parser_parse_tentatively (parser);\n-     \n-      /* Parse a type-name  */\n-      scope = cp_parser_type_name (parser);\n-\n-      /* \"If the name found does not designate a namespace or a class,\n-\t enumeration, or dependent type, the program is ill-formed.\"\n-\n-         We cover classes and dependent types above and namespaces below,\n-         so this code is only looking for enums.  */\n-      if (!scope || TREE_CODE (scope) != TYPE_DECL\n-\t  || TREE_CODE (TREE_TYPE (scope)) != ENUMERAL_TYPE)\n-\tcp_parser_simulate_error (parser);\n-\n-      successful_parse_p = cp_parser_parse_definitely (parser);\n-    }\n   /* If that didn't work, try for a namespace-name.  */\n   if (!only_class_p && !successful_parse_p)\n     {\n@@ -19608,7 +19589,8 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n    is a template.  TAG_TYPE indicates the explicit tag given before\n    the type name, if any.  If CHECK_DEPENDENCY_P is FALSE, names are\n    looked up in dependent scopes.  If CLASS_HEAD_P is TRUE, this class\n-   is the class being defined in a class-head.\n+   is the class being defined in a class-head.  If ENUM_OK is TRUE,\n+   enum-names are also accepted.\n \n    Returns the TYPE_DECL representing the class.  */\n \n@@ -19619,7 +19601,8 @@ cp_parser_class_name (cp_parser *parser,\n \t\t      enum tag_types tag_type,\n \t\t      bool check_dependency_p,\n \t\t      bool class_head_p,\n-\t\t      bool is_declaration)\n+\t\t      bool is_declaration,\n+\t\t      bool enum_ok)\n {\n   tree decl;\n   tree scope;\n@@ -19747,7 +19730,8 @@ cp_parser_class_name (cp_parser *parser,\n     }\n   else if (TREE_CODE (decl) != TYPE_DECL\n \t   || TREE_TYPE (decl) == error_mark_node\n-\t   || !MAYBE_CLASS_TYPE_P (TREE_TYPE (decl))\n+\t   || !(MAYBE_CLASS_TYPE_P (TREE_TYPE (decl))\n+\t\t|| (enum_ok && TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE))\n \t   /* In Objective-C 2.0, a classname followed by '.' starts a\n \t      dot-syntax expression, and it's not a type-name.  */\n \t   || (c_dialect_objc ()"}, {"sha": "67a3d1763d08b3127ca1f0a6125b6c66d9c3511f", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum3.C?ref=2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/60994\n+// { dg-do compile { target c++11 } }\n+\n+enum struct A\n+{\n+  n = 3\n+};\n+\n+A\n+foo()\n+{\n+  int A;\n+  return A::n;\n+}"}, {"sha": "80798eff4612b19ef7dbcd49a1ae61addd995cd4", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum4.C?ref=2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/60994\n+// { dg-do compile { target c++11 } }\n+\n+struct B {\n+  enum struct A\n+  {\n+    n = 3\n+  };\n+};\n+\n+struct C: B\n+{\n+  using B::A;\n+\n+  A foo()\n+  {\n+    int A;\n+    return A::n;\n+  }\n+};"}, {"sha": "80d82176570b5909eb3ca2952b7dd51f45b9091f", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ23.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ23.C?ref=2fd16d0f9007f2e9a991b80c6ae2e4c5f85272b6", "patch": "@@ -3,5 +3,7 @@\n \n namespace std {\n   template <typename T> int declval;\n-  typename std::declval<> d;\t// { dg-error \"not a type\" }\n+  typename std::declval<> d;\t// { dg-error \"type\" }\n }\n+\n+// { dg-prune-output \"expected\" }"}]}