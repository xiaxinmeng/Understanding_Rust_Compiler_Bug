{"sha": "a024740df47c300e9797ba4ac61f9ec671fa1fd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyNDc0MGRmNDdjMzAwZTk3OTdiYTRhYzYxZjllYzY3MWZhMWZkMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-02-20T18:15:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-02-20T18:15:01Z"}, "message": "[multiple changes]\n\n 2007-02-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tRevamp library API testing.\n\tAdded:\n\t* 17_intro/headers\n\t* 17_intro/headers/all_assert_neg.cc\n\t* 17_intro/headers/all_c++200x_compatibility.cc\n\t* 17_intro/headers/all.cc\n\t* 17_intro/headers/c++1998\n\t* 17_intro/headers/c++1998/all.cc\n\t* 17_intro/headers/c++1998/all_multiple_inclusion.cc\n\t* 17_intro/headers/c++1998/c++_for_c.tar\n\t* 17_intro/headers/c++1998/c++.tar\n\t* 17_intro/using_namespace_std.cc\n\t* 18_support/headers\n\t* 18_support/headers/cfloat\n\t* 18_support/headers/cfloat/values.cc\n\t* 18_support/headers/climits\n\t* 18_support/headers/climits/values.cc\n\t* 18_support/headers/csetjmp\n\t* 18_support/headers/csetjmp/functions_std.cc\n\t* 18_support/headers/csetjmp/macros.cc\n\t* 18_support/headers/csetjmp/types_std.cc\n\t* 18_support/headers/csignal\n\t* 18_support/headers/csignal/functions_std.cc\n\t* 18_support/headers/csignal/macros.cc\n\t* 18_support/headers/csignal/types_std.cc\n\t* 18_support/headers/cstdarg\n\t* 18_support/headers/cstdarg/macros.cc\n\t* 18_support/headers/cstdarg/types_std.cc\n\t* 18_support/headers/cstddef\n\t* 18_support/headers/cstddef/macros.cc\n\t* 18_support/headers/cstddef/types_std.cc\n\t* 18_support/headers/cstdlib\n\t* 18_support/headers/cstdlib/functions_std.cc\n\t* 18_support/headers/cstdlib/macros.cc\n\t* 18_support/headers/ctime\n\t* 18_support/headers/ctime/functions_std.cc\n\t* 18_support/headers/ctime/macros.cc\n\t* 18_support/headers/ctime/types_std.cc\n\t* 18_support/headers/exception\n\t* 18_support/headers/exception/synopsis.cc\n\t* 18_support/headers/exception/types_std.cc\n\t* 18_support/headers/limits\n\t* 18_support/headers/limits/synopsis.cc\n\t* 18_support/headers/new\n\t* 18_support/headers/new/synopsis.cc\n\t* 18_support/headers/new/types_std.cc\n\t* 18_support/headers/typeinfo\n\t* 18_support/headers/typeinfo/synopsis.cc\n\t* 18_support/headers/typeinfo/types_std.cc\n\t* 18_support/numeric_limits/is_signed.cc\n\t* 18_support/numeric_limits/requirements\n\t* 18_support/numeric_limits/requirements/explicit_instantiation\n\t* 18_support/numeric_limits/requirements/explicit_instantiation/1.cc\n\t* 18_support/numeric_limits/specialization_default_values.cc\n\t* 19_diagnostics/headers\n\t* 19_diagnostics/headers/cassert\n\t* 19_diagnostics/headers/cassert/macros.cc\n\t* 19_diagnostics/headers/cerrno\n\t* 19_diagnostics/headers/cerrno/macros.cc\n\t* 19_diagnostics/headers/stdexcept\n\t* 19_diagnostics/headers/stdexcept/synopsis.cc\n\t* 19_diagnostics/headers/stdexcept/types_std.cc\n\t* 20_util/headers\n\t* 20_util/headers/cstdlib\n\t* 20_util/headers/cstdlib/functions_std.cc\n\t* 20_util/headers/cstring\n\t* 20_util/headers/cstring/functions_std.cc\n\t* 20_util/headers/cstring/macros.cc\n\t* 20_util/headers/cstring/types_std.cc\n\t* 20_util/headers/ctime\n\t* 20_util/headers/ctime/functions_std.cc\n\t* 20_util/headers/ctime/macros.cc\n\t* 20_util/headers/ctime/types_std.cc\n\t* 20_util/headers/functional\n\t* 20_util/headers/functional/synopsis.cc\n\t* 20_util/headers/memory\n\t* 20_util/headers/memory/synopsis.cc\n\t* 20_util/headers/utility\n\t* 20_util/headers/utility/synopsis.cc\n\t* 20_util/headers/utility/using_namespace_std_rel_ops.cc\n\t* 20_util/memory/allocator/requirements\n\t* 20_util/memory/allocator/requirements/explicit_instantiation\n\t* 20_util/memory/allocator/requirements/explicit_instantiation/1.cc\n\t* 20_util/memory/auto_ptr/requirements\n\t* 20_util/memory/auto_ptr/requirements/explicit_instantiation\n\t* 20_util/memory/auto_ptr/requirements/explicit_instantiation/1.cc\n\t* 20_util/memory/raw_storage_iterator\n\t* 20_util/memory/raw_storage_iterator/requirements\n\t* 20_util/memory/raw_storage_iterator/requirements/base_classes.cc\n\t* 20_util/memory/raw_storage_iterator/requirements/\n\texplicit_instantiation\n\t* 20_util/memory/raw_storage_iterator/requirements/\n\texplicit_instantiation/1.cc\n\t* 20_util/memory/raw_storage_iterator/requirements/typedefs.cc\n\t* 20_util/utility/pair/requirements\n\t* 20_util/utility/pair/requirements/explicit_instantiation\n\t* 20_util/utility/pair/requirements/explicit_instantiation/1.cc\n\t* 21_strings/basic_string/requirements\n\t* 21_strings/basic_string/requirements/explicit_instantiation\n\t* 21_strings/basic_string/requirements/explicit_instantiation/1.cc\n\t* 21_strings/basic_string/requirements/explicit_instantiation/debug.cc\n\t* 21_strings/headers\n\t* 21_strings/headers/cctype\n\t* 21_strings/headers/cctype/functions_std.cc\n\t* 21_strings/headers/cstdlib\n\t* 21_strings/headers/cstdlib/functions_std.cc\n\t* 21_strings/headers/cstdlib/macros.cc\n\t* 21_strings/headers/cstring\n\t* 21_strings/headers/cstring/functions_std.cc\n\t* 21_strings/headers/cstring/macros.cc\n\t* 21_strings/headers/cstring/types_std.cc\n\t* 21_strings/headers/cwchar\n\t* 21_strings/headers/cwchar/functions_std.cc\n\t* 21_strings/headers/cwchar/macros.cc\n\t* 21_strings/headers/cwchar/types_std.cc\n\t* 21_strings/headers/cwctype\n\t* 21_strings/headers/cwctype/functions_std.cc\n\t* 21_strings/headers/cwctype/macros.cc\n\t* 21_strings/headers/cwctype/types_std.cc\n\t* 21_strings/headers/string\n\t* 21_strings/headers/string/synopsis.cc\n\t* 21_strings/headers/string/types_std.cc\n\t* 22_locale/codecvt_byname/requirements\n\t* 22_locale/codecvt_byname/requirements/base_classes.cc\n\t* 22_locale/codecvt_byname/requirements/explicit_instantiation.cc\n\t* 22_locale/codecvt_byname/requirements/typedefs.cc\n\t* 22_locale/codecvt/requirements\n\t* 22_locale/codecvt/requirements/base_classes.cc\n\t* 22_locale/codecvt/requirements/explicit_instantiation.cc\n\t* 22_locale/codecvt/requirements/typedefs.cc\n\t* 22_locale/collate_byname/requirements\n\t* 22_locale/collate_byname/requirements/base_classes.cc\n\t* 22_locale/collate_byname/requirements/explicit_instantiation.cc\n\t* 22_locale/collate_byname/requirements/typedefs.cc\n\t* 22_locale/collate/requirements\n\t* 22_locale/collate/requirements/base_classes.cc\n\t* 22_locale/collate/requirements/explicit_instantiation.cc\n\t* 22_locale/collate/requirements/typedefs.cc\n\t* 22_locale/ctype_base/mask.cc\n\t* 22_locale/ctype/requirements\n\t* 22_locale/ctype/requirements/base_classes.cc\n\t* 22_locale/ctype/requirements/explicit_instantiation.cc\n\t* 22_locale/ctype/requirements/typedefs.cc\n\t* 22_locale/headers\n\t* 22_locale/headers/clocale\n\t* 22_locale/headers/clocale/functions_std.cc\n\t* 22_locale/headers/clocale/macros.cc\n\t* 22_locale/headers/clocale/types_std.cc\n\t* 22_locale/headers/locale\n\t* 22_locale/headers/locale/synopsis.cc\n\t* 22_locale/headers/locale/types_std.cc\n\t* 22_locale/messages_byname/requirements\n\t* 22_locale/messages_byname/requirements/base_classes.cc\n\t* 22_locale/messages_byname/requirements/explicit_instantiation.cc\n\t* 22_locale/messages_byname/requirements/typedefs.cc\n\t* 22_locale/messages/requirements\n\t* 22_locale/messages/requirements/base_classes.cc\n\t* 22_locale/messages/requirements/explicit_instantiation.cc\n\t* 22_locale/messages/requirements/typedefs.cc\n\t* 22_locale/money_get/cons\n\t* 22_locale/money_get/cons/3.cc\n\t* 22_locale/money_get/requirements\n\t* 22_locale/money_get/requirements/base_classes.cc\n\t* 22_locale/money_get/requirements/explicit_instantiations.cc\n\t* 22_locale/money_get/requirements/typedefs.cc\n\t* 22_locale/moneypunct_byname/requirements\n\t* 22_locale/moneypunct_byname/requirements/base_classes.cc\n\t* 22_locale/moneypunct_byname/requirements/explicit_instantiation.cc\n\t* 22_locale/moneypunct_byname/requirements/typedefs.cc\n\t* 22_locale/moneypunct/requirements\n\t* 22_locale/moneypunct/requirements/false\n\t* 22_locale/moneypunct/requirements/false/base_classes.cc\n\t* 22_locale/moneypunct/requirements/false/explicit_instantiation.cc\n\t* 22_locale/moneypunct/requirements/false/intl.cc\n\t* 22_locale/moneypunct/requirements/false/typedefs.cc\n\t* 22_locale/moneypunct/requirements/true\n\t* 22_locale/moneypunct/requirements/true/base_classes.cc\n\t* 22_locale/moneypunct/requirements/true/explicit_instantiation.cc\n\t* 22_locale/moneypunct/requirements/true/intl.cc\n\t* 22_locale/moneypunct/requirements/true/typedefs.cc\n\t* 22_locale/money_put/cons\n\t* 22_locale/money_put/cons/3.cc\n\t* 22_locale/money_put/requirements\n\t* 22_locale/money_put/requirements/base_classes.cc\n\t* 22_locale/money_put/requirements/explicit_instantiation.cc\n\t* 22_locale/money_put/requirements/typedefs.cc\n\t* 22_locale/num_get/cons\n\t* 22_locale/num_get/cons/3.cc\n\t* 22_locale/num_get/requirements\n\t* 22_locale/num_get/requirements/base_classes.cc\n\t* 22_locale/num_get/requirements/explicit_instantiation.cc\n\t* 22_locale/num_get/requirements/typedefs.cc\n\t* 22_locale/numpunct_byname/requirements\n\t* 22_locale/numpunct_byname/requirements/base_classes.cc\n\t* 22_locale/numpunct_byname/requirements/explicit_instantiations.cc\n\t* 22_locale/numpunct_byname/requirements/typedefs.cc\n\t* 22_locale/numpunct/requirements\n\t* 22_locale/numpunct/requirements/base_classes.cc\n\t* 22_locale/numpunct/requirements/explicit_instantiations.cc\n\t* 22_locale/numpunct/requirements/typedefs.cc\n\t* 22_locale/num_put/cons\n\t* 22_locale/num_put/cons/3.cc\n\t* 22_locale/num_put/requirements\n\t* 22_locale/num_put/requirements/base_classes.cc\n\t* 22_locale/num_put/requirements/explicit_instantiations.cc\n\t* 22_locale/num_put/requirements/typedefs.cc\n\t* 22_locale/time_get/requirements\n\t* 22_locale/time_get/requirements/base_classes.cc\n\t* 22_locale/time_get/requirements/explicit_instantiations.cc\n\t* 22_locale/time_get/requirements/typedefs.cc\n\t* 22_locale/time_put/requirements\n\t* 22_locale/time_put/requirements/base_classes.cc\n\t* 22_locale/time_put/requirements/explicit_instantiations.cc\n\t* 22_locale/time_put/requirements/typedefs.cc\n\t* 23_containers/bitset/requirements\n\t* 23_containers/bitset/requirements/explicit_instantiation\n\t* 23_containers/bitset/requirements/explicit_instantiation/1.cc\n\t* 23_containers/deque/requirements\n\t* 23_containers/deque/requirements/explicit_instantiation\n\t* 23_containers/deque/requirements/partial_specialization\n\t* 23_containers/deque/requirements/partial_specialization/1.cc\n\t* 23_containers/headers\n\t* 23_containers/headers/bitset\n\t* 23_containers/headers/bitset/synopsis.cc\n\t* 23_containers/headers/deque\n\t* 23_containers/headers/deque/synopsis.cc\n\t* 23_containers/headers/list\n\t* 23_containers/headers/list/synopsis.cc\n\t* 23_containers/headers/map\n\t* 23_containers/headers/map/synopsis.cc\n\t* 23_containers/headers/queue\n\t* 23_containers/headers/queue/synopsis.cc\n\t* 23_containers/headers/set\n\t* 23_containers/headers/set/synopsis.cc\n\t* 23_containers/headers/stack\n\t* 23_containers/headers/stack/synopsis.cc\n\t* 23_containers/headers/vector\n\t* 23_containers/headers/vector/synopsis.cc\n\t* 23_containers/list/requirements\n\t* 23_containers/list/requirements/explicit_instantiation\n\t* 23_containers/list/requirements/partial_specialization\n\t* 23_containers/list/requirements/partial_specialization/1.cc\n\t* 23_containers/map/requirements\n\t* 23_containers/map/requirements/explicit_instantiation\n\t* 23_containers/map/requirements/partial_specialization\n\t* 23_containers/map/requirements/partial_specialization/1.cc\n\t* 23_containers/multimap/requirements\n\t* 23_containers/multimap/requirements/explicit_instantiation\n\t* 23_containers/multimap/requirements/partial_specialization\n\t* 23_containers/multimap/requirements/partial_specialization/1.cc\n\t* 23_containers/multiset/requirements\n\t* 23_containers/multiset/requirements/explicit_instantiation\n\t* 23_containers/multiset/requirements/partial_specialization\n\t* 23_containers/multiset/requirements/partial_specialization/1.cc\n\t* 23_containers/priority_queue/requirements\n\t* 23_containers/priority_queue/requirements/explicit_instantiation\n\t* 23_containers/priority_queue/requirements/explicit_instantiation/1.cc\n\t* 23_containers/queue/requirements\n\t* 23_containers/queue/requirements/explicit_instantiation\n\t* 23_containers/queue/requirements/explicit_instantiation/1.cc\n\t* 23_containers/set/requirements\n\t* 23_containers/set/requirements/explicit_instantiation\n\t* 23_containers/set/requirements/partial_specialization\n\t* 23_containers/set/requirements/partial_specialization/1.cc\n\t* 23_containers/stack/requirements\n\t* 23_containers/stack/requirements/explicit_instantiation\n\t* 23_containers/stack/requirements/explicit_instantiation/1.cc\n\t* 23_containers/vector/requirements\n\t* 23_containers/vector/requirements/explicit_instantiation\n\t* 23_containers/vector/requirements/partial_specialization\n\t* 23_containers/vector/requirements/partial_specialization/1.cc\n\t* 24_iterators/back_insert_iterator\n\t* 24_iterators/back_insert_iterator/2.cc\n\t* 24_iterators/back_insert_iterator/requirements\n\t* 24_iterators/back_insert_iterator/requirements/base_classes.cc\n\t* 24_iterators/back_insert_iterator/requirements/container.cc\n\t* 24_iterators/back_insert_iterator/requirements/\n\texplicit_instantiation.cc\n\t* 24_iterators/back_insert_iterator/requirements/typedefs.cc\n\t* 24_iterators/front_insert_iterator\n\t* 24_iterators/front_insert_iterator/2.cc\n\t* 24_iterators/front_insert_iterator/requirements\n\t* 24_iterators/front_insert_iterator/requirements/base_classes.cc\n\t* 24_iterators/front_insert_iterator/requirements/container.cc\n\t* 24_iterators/front_insert_iterator/requirements/\n\texplicit_instantiation.cc\n\t* 24_iterators/front_insert_iterator/requirements/typedefs.cc\n\t* 24_iterators/headers\n\t* 24_iterators/headers/iterator\n\t* 24_iterators/headers/iterator/synopsis.cc\n\t* 24_iterators/headers/iterator/types_std.cc\n\t* 24_iterators/insert_iterator\n\t* 24_iterators/insert_iterator/2.cc\n\t* 24_iterators/insert_iterator/requirements\n\t* 24_iterators/insert_iterator/requirements/base_classes.cc\n\t* 24_iterators/insert_iterator/requirements/container.cc\n\t* 24_iterators/insert_iterator/requirements/explicit_instantiation.cc\n\t* 24_iterators/insert_iterator/requirements/typedefs.cc\n\t* 24_iterators/istreambuf_iterator/requirements\n\t* 24_iterators/istreambuf_iterator/requirements/base_classes.cc\n\t* 24_iterators/istreambuf_iterator/requirements/\n\texplicit_instantiation.cc\n\t* 24_iterators/istreambuf_iterator/requirements/typedefs.cc\n\t* 24_iterators/istream_iterator\n\t* 24_iterators/istream_iterator/2.cc\n\t* 24_iterators/istream_iterator/requirements\n\t* 24_iterators/istream_iterator/requirements/base_classes.cc\n\t* 24_iterators/istream_iterator/requirements/explicit_instantiation.cc\n\t* 24_iterators/istream_iterator/requirements/typedefs.cc\n\t* 24_iterators/ostreambuf_iterator/requirements\n\t* 24_iterators/ostreambuf_iterator/requirements/base_classes.cc\n\t* 24_iterators/ostreambuf_iterator/requirements/\n\texplicit_instantiation.cc\n\t* 24_iterators/ostreambuf_iterator/requirements/typedefs.cc\n\t* 24_iterators/ostream_iterator\n\t* 24_iterators/ostream_iterator/requirements\n\t* 24_iterators/ostream_iterator/requirements/base_classes.cc\n\t* 24_iterators/ostream_iterator/requirements/explicit_instantiation.cc\n\t* 24_iterators/ostream_iterator/requirements/typedefs.cc\n\t* 24_iterators/random_access_iterator\n\t* 24_iterators/random_access_iterator/26020.cc\n\t* 24_iterators/random_access_iterator/string_vector_iterators.cc\n\t* 24_iterators/reverse_iterator/requirements\n\t* 24_iterators/reverse_iterator/requirements/base_classes.cc\n\t* 24_iterators/reverse_iterator/requirements/current.cc\n\t* 24_iterators/reverse_iterator/requirements/explicit_instantiation.cc\n\t* 24_iterators/reverse_iterator/requirements/typedefs.cc\n\t* 25_algorithms/headers\n\t* 25_algorithms/headers/algorithm\n\t* 25_algorithms/headers/algorithm/synopsis.cc\n\t* 25_algorithms/headers/cstdlib\n\t* 25_algorithms/headers/cstdlib/functions_std.cc\n\t* 26_numerics/headers\n\t* 26_numerics/headers/cmath\n\t* 26_numerics/headers/cmath/19322.cc\n\t* 26_numerics/headers/cmath/c99_classification_macros_c.cc\n\t* 26_numerics/headers/cmath/c99_classification_macros_c++.cc\n\t* 26_numerics/headers/cmath/c_math.cc\n\t* 26_numerics/headers/cmath/c_math_dynamic.cc\n\t* 26_numerics/headers/cmath/fabs_inline.cc\n\t* 26_numerics/headers/cmath/functions_std.cc\n\t* 26_numerics/headers/cmath/macros.cc\n\t* 26_numerics/headers/cmath/overloads.cc\n\t* 26_numerics/headers/cmath/powi.cc\n\t* 26_numerics/headers/complex\n\t* 26_numerics/headers/complex/synopsis.cc\n\t* 26_numerics/headers/cstdlib\n\t* 26_numerics/headers/cstdlib/13943.cc\n\t* 26_numerics/headers/cstdlib/2190.cc\n\t* 26_numerics/headers/cstdlib/functions_std.cc\n\t* 26_numerics/headers/cstdlib/macros.cc\n\t* 26_numerics/headers/cstdlib/types_std.cc\n\t* 26_numerics/headers/numeric\n\t* 26_numerics/headers/numeric/synopsis.cc\n\t* 26_numerics/headers/valarray\n\t* 26_numerics/headers/valarray/synopsis.cc\n\t* 26_numerics/headers/valarray/types_std.cc\n\t* 26_numerics/numeric_arrays\n\t* 26_numerics/numeric_operations\n\t* 27_io/basic_filebuf/cons/2020.cc\n\t* 27_io/basic_filebuf/requirements\n\t* 27_io/basic_filebuf/requirements/base_classes.cc\n\t* 27_io/basic_filebuf/requirements/explicit_instantiation.cc\n\t* 27_io/basic_filebuf/requirements/typedefs.cc\n\t* 27_io/basic_fstream/cons\n\t* 27_io/basic_fstream/cons/3.cc\n\t* 27_io/basic_fstream/requirements\n\t* 27_io/basic_fstream/requirements/base_classes.cc\n\t* 27_io/basic_fstream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_fstream/requirements/typedefs.cc\n\t* 27_io/basic_ifstream/cons/2020.cc\n\t* 27_io/basic_ifstream/requirements\n\t* 27_io/basic_ifstream/requirements/base_classes.cc\n\t* 27_io/basic_ifstream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_ifstream/requirements/typedefs.cc\n\t* 27_io/basic_ios/cons/2020.cc\n\t* 27_io/basic_ios/requirements\n\t* 27_io/basic_ios/requirements/base_classes.cc\n\t* 27_io/basic_ios/requirements/explicit_instantiation.cc\n\t* 27_io/basic_ios/requirements/typedefs.cc\n\t* 27_io/basic_iostream/cons\n\t* 27_io/basic_iostream/cons/2020.cc\n\t* 27_io/basic_iostream/requirements\n\t* 27_io/basic_iostream/requirements/base_classes.cc\n\t* 27_io/basic_iostream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_iostream/requirements/typedefs.cc\n\t* 27_io/basic_istream/cons\n\t* 27_io/basic_istream/cons/3.cc\n\t* 27_io/basic_istream/requirements\n\t* 27_io/basic_istream/requirements/base_classes.cc\n\t* 27_io/basic_istream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_istream/requirements/typedefs.cc\n\t* 27_io/basic_istringstream/cons\n\t* 27_io/basic_istringstream/cons/2020.cc\n\t* 27_io/basic_istringstream/requirements\n\t* 27_io/basic_istringstream/requirements/base_classes.cc\n\t* 27_io/basic_istringstream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_istringstream/requirements/typedefs.cc\n\t* 27_io/basic_ofstream/cons/2020.cc\n\t* 27_io/basic_ofstream/requirements\n\t* 27_io/basic_ofstream/requirements/base_classes.cc\n\t* 27_io/basic_ofstream/requirements/explicit_instantiations.cc\n\t* 27_io/basic_ofstream/requirements/typedefs.cc\n\t* 27_io/basic_ostream/cons/2020.cc\n\t* 27_io/basic_ostream/requirements\n\t* 27_io/basic_ostream/requirements/base_classes.cc\n\t* 27_io/basic_ostream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_ostream/requirements/typedefs.cc\n\t* 27_io/basic_ostringstream/cons/2020.cc\n\t* 27_io/basic_ostringstream/requirements\n\t* 27_io/basic_ostringstream/requirements/base_classes.cc\n\t* 27_io/basic_ostringstream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_ostringstream/requirements/typedefs.cc\n\t* 27_io/basic_streambuf/cons/2020.cc\n\t* 27_io/basic_streambuf/requirements\n\t* 27_io/basic_streambuf/requirements/base_classes.cc\n\t* 27_io/basic_streambuf/requirements/typedefs.cc\n\t* 27_io/basic_stringbuf/cons/2020.cc\n\t* 27_io/basic_stringbuf/requirements\n\t* 27_io/basic_stringbuf/requirements/base_classes.cc\n\t* 27_io/basic_stringbuf/requirements/explicit_instantiation\n\t* 27_io/basic_stringbuf/requirements/explicit_instantiation/2.cc\n\t* 27_io/basic_stringbuf/requirements/explicit_instantiation/4.cc\n\t* 27_io/basic_stringbuf/requirements/typedefs.cc\n\t* 27_io/basic_stringstream/cons\n\t* 27_io/basic_stringstream/cons/2020.cc\n\t* 27_io/basic_stringstream/requirements\n\t* 27_io/basic_stringstream/requirements/base_classes.cc\n\t* 27_io/basic_stringstream/requirements/explicit_instantiation.cc\n\t* 27_io/basic_stringstream/requirements/typedefs.cc\n\t* 27_io/fpos/requirements\n\t* 27_io/fpos/requirements/explicit_instantiation.cc\n\t* 27_io/headers\n\t* 27_io/headers/cstdio\n\t* 27_io/headers/cstdio/functions_std.cc\n\t* 27_io/headers/cstdio/macros.cc\n\t* 27_io/headers/cstdio/types_std.cc\n\t* 27_io/headers/cstdlib\n\t* 27_io/headers/fstream\n\t* 27_io/headers/fstream/synopsis.cc\n\t* 27_io/headers/fstream/types_std.cc\n\t* 27_io/headers/iomanip\n\t* 27_io/headers/iomanip/synopsis.cc\n\t* 27_io/headers/ios\n\t* 27_io/headers/ios/synopsis.cc\n\t* 27_io/headers/iostream\n\t* 27_io/headers/iostream/synopsis.cc\n\t* 27_io/headers/iostream/types_std.cc\n\t* 27_io/headers/ios/types_std.cc\n\t* 27_io/headers/istream\n\t* 27_io/headers/istream/synopsis.cc\n\t* 27_io/headers/istream/types_std.cc\n\t* 27_io/headers/ostream\n\t* 27_io/headers/ostream/synopsis.cc\n\t* 27_io/headers/ostream/types_std.cc\n\t* 27_io/headers/sstream\n\t* 27_io/headers/sstream/synopsis.cc\n\t* 27_io/headers/sstream/types_std.cc\n\t* 27_io/headers/streambuf\n\t* 27_io/headers/streambuf/synopsis.cc\n\t* 27_io/headers/streambuf/types_std.cc\n\t* ext/debug_allocator/explicit_instantiation.cc\n\t* ext/hash_map/requirements\n\t* ext/hash_map/requirements/explicit_instantiation.cc\n\t* ext/hash_set/requirements\n\t* ext/hash_set/requirements/explicit_instantiation.cc\n\t* ext/malloc_allocator/explicit_instantiation.cc\n\t* ext/mt_allocator/explicit_instantiation.cc\n\t* ext/pool_allocator/explicit_instantiation.cc\n\t* ext/slist/requirements\n\t* ext/slist/requirements/explicit_instantiation.cc\n\t* ext/stdio_filebuf/requirements\n\t* ext/stdio_filebuf/requirements/explicit_instantiation.cc\n\t* ext/vstring/requirements\n\t* ext/vstring/requirements/explicit_instantiation\n\t* tr1/2_general_utilities/headers\n\t* tr1/2_general_utilities/headers/functional\n\t* tr1/2_general_utilities/headers/functional/synopsis.cc\n\t* tr1/2_general_utilities/headers/memory\n\t* tr1/2_general_utilities/headers/memory/synopsis.cc\n\t* tr1/2_general_utilities/headers/memory/types_std_tr1.cc\n\t* tr1/2_general_utilities/memory/enable_shared_from_this/requirements\n\t* tr1/2_general_utilities/memory/enable_shared_from_this/\n\trequirements/explicit_instantiation\n\t* tr1/2_general_utilities/memory/shared_ptr/requirements\n\t* tr1/2_general_utilities/memory/shared_ptr/requirements/\n\texplicit_instantiation\n\t* tr1/2_general_utilities/memory/weak_ptr/requirements\n\t* tr1/2_general_utilities/memory/weak_ptr/requirements/\n\texplicit_instantiation\n\t* tr1/3_function_objects/headers\n\t* tr1/3_function_objects/headers/functional\n\t* tr1/3_function_objects/headers/functional/synopsis.cc\n\t* tr1/3_function_objects/headers/functional/types_std_tr1.cc\n\t* tr1/3_function_objects/headers/functional/\n\tusing_namespace_std_tr1_placeholders.cc\n\t* tr1/4_metaprogramming/headers\n\t* tr1/4_metaprogramming/headers/type_traits\n\t* tr1/4_metaprogramming/headers/type_traits/synopsis.cc\n\t* tr1/4_metaprogramming/headers/type_traits/types_std_tr1.cc\n\t* tr1/5_numerical_facilities/headers\n\t* tr1/5_numerical_facilities/headers/random\n\t* tr1/5_numerical_facilities/headers/random/synopsis.cc\n\t* tr1/5_numerical_facilities/headers/random/types_std_tr1.cc\n\t* tr1/5_numerical_facilities/random/discard_block/\n\trequirements/typedefs.cc\n\t* tr1/6_containers/array/requirements/explicit_instantiation.cc\n\t* tr1/6_containers/hash\n\t* tr1/6_containers/hash/requirements\n\t* tr1/6_containers/hash/requirements/base_classes.cc\n\t* tr1/6_containers/hash/requirements/explicit_instantiation.cc\n\t* tr1/6_containers/headers\n\t* tr1/6_containers/headers/array\n\t* tr1/6_containers/headers/array/synopsis.cc\n\t* tr1/6_containers/headers/functional\n\t* tr1/6_containers/headers/functional/synopsis.cc\n\t* tr1/6_containers/headers/tuple\n\t* tr1/6_containers/headers/tuple/synopsis.cc\n\t* tr1/6_containers/headers/tuple/types_std_tr1.cc\n\t* tr1/6_containers/headers/unordered_map\n\t* tr1/6_containers/headers/unordered_map/synopsis.cc\n\t* tr1/6_containers/headers/unordered_set\n\t* tr1/6_containers/headers/unordered_set/synopsis.cc\n\t* tr1/6_containers/tuple/requirements\n\t* tr1/6_containers/tuple/requirements/explicit_instantiation.cc\n\t* tr1/6_containers/unordered_map\n\t* tr1/6_containers/unordered_map/24064.cc\n\t* tr1/6_containers/unordered_map/capacity\n\t* tr1/6_containers/unordered_map/capacity/29134-map.cc\n\t* tr1/6_containers/unordered_map/erase\n\t* tr1/6_containers/unordered_map/erase/24061-map.cc\n\t* tr1/6_containers/unordered_map/find\n\t* tr1/6_containers/unordered_map/find/map1.cc\n\t* tr1/6_containers/unordered_map/insert\n\t* tr1/6_containers/unordered_map/insert/24061-map.cc\n\t* tr1/6_containers/unordered_map/insert/array_syntax.cc\n\t* tr1/6_containers/unordered_map/insert/map_range.cc\n\t* tr1/6_containers/unordered_map/insert/map_single.cc\n\t* tr1/6_containers/unordered_map/requirements\n\t* tr1/6_containers/unordered_map/requirements/explicit_instantiation.cc\n\t* tr1/6_containers/unordered_map/requirements/iterator_neg.cc\n\t* tr1/6_containers/unordered_map/requirements/iterator_null_neg.cc\n\t* tr1/6_containers/unordered_map/swap\n\t* tr1/6_containers/unordered_map/swap/1.cc\n\t* tr1/6_containers/unordered_map/swap/2.cc\n\t* tr1/6_containers/unordered_multimap\n\t* tr1/6_containers/unordered_multimap/capacity\n\t* tr1/6_containers/unordered_multimap/capacity/29134-multimap.cc\n\t* tr1/6_containers/unordered_multimap/erase\n\t* tr1/6_containers/unordered_multimap/erase/24061-multimap.cc\n\t* tr1/6_containers/unordered_multimap/find\n\t* tr1/6_containers/unordered_multimap/find/multimap1.cc\n\t* tr1/6_containers/unordered_multimap/insert\n\t* tr1/6_containers/unordered_multimap/insert/24061-multimap.cc\n\t* tr1/6_containers/unordered_multimap/insert/multimap_range.cc\n\t* tr1/6_containers/unordered_multimap/insert/multimap_single.cc\n\t* tr1/6_containers/unordered_multimap/requirements\n\t* tr1/6_containers/unordered_multimap/requirements/\n\texplicit_instantiation.cc\n\t* tr1/6_containers/unordered_multimap/requirements/iterator_neg.cc\n\t* tr1/6_containers/unordered_multimap/requirements/iterator_null_neg.cc\n\t* tr1/6_containers/unordered_multimap/swap\n\t* tr1/6_containers/unordered_multimap/swap/1.cc\n\t* tr1/6_containers/unordered_multimap/swap/2.cc\n\t* tr1/6_containers/unordered_multiset\n\t* tr1/6_containers/unordered_multiset/24054.cc\n\t* tr1/6_containers/unordered_multiset/capacity\n\t* tr1/6_containers/unordered_multiset/capacity/29134-multiset.cc\n\t* tr1/6_containers/unordered_multiset/erase\n\t* tr1/6_containers/unordered_multiset/erase/24061-multiset.cc\n\t* tr1/6_containers/unordered_multiset/find\n\t* tr1/6_containers/unordered_multiset/find/multiset1.cc\n\t* tr1/6_containers/unordered_multiset/insert\n\t* tr1/6_containers/unordered_multiset/insert/24061-multiset.cc\n\t* tr1/6_containers/unordered_multiset/insert/multiset_range.cc\n\t* tr1/6_containers/unordered_multiset/insert/multiset_single.cc\n\t* tr1/6_containers/unordered_multiset/requirements\n\t* tr1/6_containers/unordered_multiset/requirements/\n\texplicit_instantiation.cc\n\t* tr1/6_containers/unordered_multiset/requirements/iterator_neg.cc\n\t* tr1/6_containers/unordered_multiset/requirements/iterator_null_neg.cc\n\t* tr1/6_containers/unordered_multiset/swap\n\t* tr1/6_containers/unordered_multiset/swap/1.cc\n\t* tr1/6_containers/unordered_multiset/swap/2.cc\n\t* tr1/6_containers/unordered_set\n\t* tr1/6_containers/unordered_set/23053.cc\n\t* tr1/6_containers/unordered_set/23465.cc\n\t* tr1/6_containers/unordered_set/26127.cc\n\t* tr1/6_containers/unordered_set/26132.cc\n\t* tr1/6_containers/unordered_set/capacity\n\t* tr1/6_containers/unordered_set/capacity/29134-set.cc\n\t* tr1/6_containers/unordered_set/erase\n\t* tr1/6_containers/unordered_set/erase/24061-set.cc\n\t* tr1/6_containers/unordered_set/find\n\t* tr1/6_containers/unordered_set/find/set1.cc\n\t* tr1/6_containers/unordered_set/insert\n\t* tr1/6_containers/unordered_set/insert/24061-set.cc\n\t* tr1/6_containers/unordered_set/insert/set_range.cc\n\t* tr1/6_containers/unordered_set/insert/set_single.cc\n\t* tr1/6_containers/unordered_set/requirements\n\t* tr1/6_containers/unordered_set/requirements/explicit_instantiation.cc\n\t* tr1/6_containers/unordered_set/requirements/iterator_neg.cc\n\t* tr1/6_containers/unordered_set/requirements/iterator_null_neg.cc\n\t* tr1/6_containers/unordered_set/requirements/\n\titerators_default_constructor.cc\n\t* tr1/6_containers/unordered_set/swap\n\t* tr1/6_containers/unordered_set/swap/1.cc\n\t* tr1/6_containers/unordered_set/swap/2.cc\n\t* tr1/using_namespace_std_tr1.cc\n\n\tDeleted:\n\t* 17_intro/header_cassert.cc\n\t* 17_intro/header_cerrno.cc\n\t* 17_intro/header_csetjmp.cc\n\t* 17_intro/header_cstdarg.cc\n\t* 17_intro/header_cstddef.cc\n\t* 17_intro/header_cstdio.cc\n\t* 17_intro/header_cstdlib.cc\n\t* 17_intro/header_cstring.cc\n\t* 17_intro/header_ctime.cc\n\t* 17_intro/header_cwchar.cc\n\t* 17_intro/header_cwctype.cc\n\t* 17_intro/header_fstream.cc\n\t* 17_intro/header_iomanip.cc\n\t* 17_intro/header_ios.cc\n\t* 17_intro/header_iosfwd.cc\n\t* 17_intro/header_iostream.cc\n\t* 17_intro/header_istream.cc\n\t* 17_intro/header_ostream.cc\n\t* 17_intro/headers.cc\n\t* 17_intro/headers_c++_c++0x_compat.cc\n\t* 17_intro/headers_c.cc\n\t* 17_intro/headers_c++.cc\n\t* 17_intro/header_sstream.cc\n\t* 17_intro/header_streambuf.cc\n\t* 17_intro/no_assert_neg.cc\n\t* 18_support/numeric_limits/sign.cc\n\t* 18_support/numeric_limits/specialization.cc\n\t* 20_util/memory/raw_storage_iterator.cc\n\t* 21_strings/basic_string/1.cc\n\t* 21_strings/basic_string/2.cc\n\t* 22_locale/codecvt/1.cc\n\t* 22_locale/codecvt/2.cc\n\t* 22_locale/codecvt_byname/1.cc\n\t* 22_locale/collate/1.cc\n\t* 22_locale/collate/2.cc\n\t* 22_locale/collate_byname/1.cc\n\t* 22_locale/ctype/1.cc\n\t* 22_locale/ctype_base/1.cc\n\t* 22_locale/messages/1.cc\n\t* 22_locale/messages/2.cc\n\t* 22_locale/messages_byname/1.cc\n\t* 22_locale/money_get/1.cc\n\t* 22_locale/money_get/2.cc\n\t* 22_locale/money_get/3.cc\n\t* 22_locale/moneypunct/1.cc\n\t* 22_locale/moneypunct/2.cc\n\t* 22_locale/moneypunct/3.cc\n\t* 22_locale/moneypunct_byname/1.cc\n\t* 22_locale/money_put/1.cc\n\t* 22_locale/money_put/2.cc\n\t* 22_locale/money_put/3.cc\n\t* 22_locale/num_get/1.cc\n\t* 22_locale/num_get/2.cc\n\t* 22_locale/num_get/3.cc\n\t* 22_locale/numpunct/1.cc\n\t* 22_locale/numpunct/2.cc\n\t* 22_locale/numpunct_byname/1.cc\n\t* 22_locale/num_put/1.cc\n\t* 22_locale/num_put/2.cc\n\t* 22_locale/num_put/3.cc\n\t* 22_locale/time_get/1.cc\n\t* 22_locale/time_get/2.cc\n\t* 22_locale/time_put/1.cc\n\t* 22_locale/time_put/2.cc\n\t* 23_containers/deque/1.cc\n\t* 23_containers/deque/explicit_instantiation\n\t* 23_containers/deque/explicit_instantiation/1.cc\n\t* 23_containers/deque/explicit_instantiation/2.cc\n\t* 23_containers/deque/explicit_instantiation/3.cc\n\t* 23_containers/list/1.cc\n\t* 23_containers/list/explicit_instantiation\n\t* 23_containers/list/explicit_instantiation/1.cc\n\t* 23_containers/list/explicit_instantiation/2.cc\n\t* 23_containers/list/explicit_instantiation/3.cc\n\t* 23_containers/map/1.cc\n\t* 23_containers/map/explicit_instantiation\n\t* 23_containers/map/explicit_instantiation/1.cc\n\t* 23_containers/map/explicit_instantiation/2.cc\n\t* 23_containers/map/explicit_instantiation/3.cc\n\t* 23_containers/multimap/1.cc\n\t* 23_containers/multimap/explicit_instantiation\n\t* 23_containers/multimap/explicit_instantiation/1.cc\n\t* 23_containers/multimap/explicit_instantiation/2.cc\n\t* 23_containers/multimap/explicit_instantiation/3.cc\n\t* 23_containers/multiset/1.cc\n\t* 23_containers/multiset/explicit_instantiation\n\t* 23_containers/multiset/explicit_instantiation/1.cc\n\t* 23_containers/multiset/explicit_instantiation/2.cc\n\t* 23_containers/multiset/explicit_instantiation/3.cc\n\t* 23_containers/set/1.cc\n\t* 23_containers/set/explicit_instantiation\n\t* 23_containers/set/explicit_instantiation/1.cc\n\t* 23_containers/set/explicit_instantiation/2.cc\n\t* 23_containers/set/explicit_instantiation/3.cc\n\t* 23_containers/vector/1.cc\n\t* 23_containers/vector/explicit_instantiation\n\t* 23_containers/vector/explicit_instantiation/1.cc\n\t* 23_containers/vector/explicit_instantiation/2.cc\n\t* 23_containers/vector/explicit_instantiation/3.cc\n\t* 24_iterators/26020.cc\n\t* 24_iterators/back_insert_iterator.cc\n\t* 24_iterators/front_insert_iterator.cc\n\t* 24_iterators/insert_iterator.cc\n\t* 24_iterators/istreambuf_iterator/1.cc\n\t* 24_iterators/istream_iterator.cc\n\t* 24_iterators/iterator.cc\n\t* 24_iterators/ostreambuf_iterator/1.cc\n\t* 24_iterators/ostream_iterator.cc\n\t* 24_iterators/reverse_iterator/1.cc\n\t* 26_numerics/cmath\n\t* 26_numerics/cmath/19322.cc\n\t* 26_numerics/cmath/c99_classification_macros_c.cc\n\t* 26_numerics/cmath/c99_classification_macros_c++.cc\n\t* 26_numerics/cmath/c_math.cc\n\t* 26_numerics/cmath/c_math_dynamic.cc\n\t* 26_numerics/cmath/fabs_inline.cc\n\t* 26_numerics/cmath/overloads.cc\n\t* 26_numerics/cmath/powi.cc\n\t* 26_numerics/cstdlib\n\t* 26_numerics/cstdlib/13943.cc\n\t* 26_numerics/numeric\n\t* 26_numerics/numeric/sum_diff.cc\n\t* 26_numerics/valarray\n\t* 26_numerics/valarray/27867.cc\n\t* 26_numerics/valarray/28277.cc\n\t* 26_numerics/valarray/30416.cc\n\t* 26_numerics/valarray/binary_closure.cc\n\t* 26_numerics/valarray/dr543.cc\n\t* 26_numerics/valarray/slice_array_assignment.cc\n\t* 26_numerics/valarray/slice.cc\n\t* 26_numerics/valarray/valarray.cc\n\t* 26_numerics/valarray/valarray_const_bracket.cc\n\t* 26_numerics/valarray/valarray_name_lookup.cc\n\t* 26_numerics/valarray/valarray_operators.cc\n\t* 26_numerics/valarray/valarray_subset_assignment.cc\n\t* 27_io/basic_filebuf/1.cc\n\t* 27_io/basic_filebuf/2.cc\n\t* 27_io/basic_filebuf/3.cc\n\t* 27_io/basic_filebuf/4.cc\n\t* 27_io/basic_fstream/1.cc\n\t* 27_io/basic_fstream/2.cc\n\t* 27_io/basic_fstream/3.cc\n\t* 27_io/basic_fstream/4.cc\n\t* 27_io/basic_ifstream/1.cc\n\t* 27_io/basic_ifstream/2.cc\n\t* 27_io/basic_ifstream/3.cc\n\t* 27_io/basic_ifstream/4.cc\n\t* 27_io/basic_ios/1.cc\n\t* 27_io/basic_ios/2.cc\n\t* 27_io/basic_ios/3.cc\n\t* 27_io/basic_ios/4.cc\n\t* 27_io/basic_iostream/1.cc\n\t* 27_io/basic_iostream/2.cc\n\t* 27_io/basic_iostream/3.cc\n\t* 27_io/basic_iostream/4.cc\n\t* 27_io/basic_istream/1.cc\n\t* 27_io/basic_istream/2.cc\n\t* 27_io/basic_istream/3.cc\n\t* 27_io/basic_istream/4.cc\n\t* 27_io/basic_istringstream/1.cc\n\t* 27_io/basic_istringstream/2.cc\n\t* 27_io/basic_istringstream/3.cc\n\t* 27_io/basic_istringstream/4.cc\n\t* 27_io/basic_ofstream/1.cc\n\t* 27_io/basic_ofstream/2.cc\n\t* 27_io/basic_ofstream/3.cc\n\t* 27_io/basic_ofstream/4.cc\n\t* 27_io/basic_ostream/1.cc\n\t* 27_io/basic_ostream/2.cc\n\t* 27_io/basic_ostream/3.cc\n\t* 27_io/basic_ostream/4.cc\n\t* 27_io/basic_ostringstream/1.cc\n\t* 27_io/basic_ostringstream/2.cc\n\t* 27_io/basic_ostringstream/3.cc\n\t* 27_io/basic_ostringstream/4.cc\n\t* 27_io/basic_streambuf/1.cc\n\t* 27_io/basic_streambuf/2.cc\n\t* 27_io/basic_streambuf/3.cc\n\t* 27_io/basic_stringbuf/1.cc\n\t* 27_io/basic_stringbuf/2.cc\n\t* 27_io/basic_stringbuf/3.cc\n\t* 27_io/basic_stringbuf/4.cc\n\t* 27_io/basic_stringbuf/5.cc\n\t* 27_io/basic_stringstream/1.cc\n\t* 27_io/basic_stringstream/2.cc\n\t* 27_io/basic_stringstream/3.cc\n\t* 27_io/basic_stringstream/4.cc\n\t* 27_io/fpos/1.cc\n\t* ext/debug_allocator/instantiate.cc\n\t* ext/hash_map/instantiate.cc\n\t* ext/hash_set/instantiate.cc\n\t* ext/malloc_allocator/instantiate.cc\n\t* ext/mt_allocator/instantiate.cc\n\t* ext/pool_allocator/instantiate.cc\n\t* ext/slist/instantiate.cc\n\t* ext/stdio_filebuf/char/1.cc\n\t* ext/vstring/explicit_instantiation\n\t* ext/vstring/explicit_instantiation/1.cc\n\t* ext/vstring/explicit_instantiation/2.cc\n\t* ext/vstring/explicit_instantiation/char\n\t* ext/vstring/explicit_instantiation/char/1.cc\n\t* ext/vstring/explicit_instantiation/wchar_t\n\t* ext/vstring/explicit_instantiation/wchar_t/1.cc\n\t* tr1/2_general_utilities/memory/enable_shared_from_this/\n\texplicit_instantiation\n\t* tr1/2_general_utilities/memory/enable_shared_from_this/\n\texplicit_instantiation/1.cc\n\t* tr1/2_general_utilities/memory/shared_ptr/explicit_instantiation\n\t* tr1/2_general_utilities/memory/shared_ptr/explicit_instantiation/1.cc\n\t* tr1/2_general_utilities/memory/weak_ptr/explicit_instantiation\n\t* tr1/2_general_utilities/memory/weak_ptr/explicit_instantiation/1.cc\n\t* tr1/5_numerical_facilities/random/discard_block/requirements/\n\trequirements.cc\n\t* tr1/6_containers/array/requirements/instantiate.cc\n\t* tr1/6_containers/unordered\n\t* tr1/6_containers/unordered/23781.cc\n\t* tr1/6_containers/unordered/capacity\n\t* tr1/6_containers/unordered/capacity/29134-map.cc\n\t* tr1/6_containers/unordered/capacity/29134-multimap.cc\n\t* tr1/6_containers/unordered/capacity/29134-multiset.cc\n\t* tr1/6_containers/unordered/capacity/29134-set.cc\n\t* tr1/6_containers/unordered/erase\n\t* tr1/6_containers/unordered/erase/24061-map.cc\n\t* tr1/6_containers/unordered/erase/24061-multimap.cc\n\t* tr1/6_containers/unordered/erase/24061-multiset.cc\n\t* tr1/6_containers/unordered/erase/24061-set.cc\n\t* tr1/6_containers/unordered/find\n\t* tr1/6_containers/unordered/find/map1.cc\n\t* tr1/6_containers/unordered/find/multimap1.cc\n\t* tr1/6_containers/unordered/find/multiset1.cc\n\t* tr1/6_containers/unordered/find/set1.cc\n\t* tr1/6_containers/unordered/hash\n\t* tr1/6_containers/unordered/hash/24799.cc\n\t* tr1/6_containers/unordered/hashtable\n\t* tr1/6_containers/unordered/hashtable/23053.cc\n\t* tr1/6_containers/unordered/hashtable/23465.cc\n\t* tr1/6_containers/unordered/hashtable/24054.cc\n\t* tr1/6_containers/unordered/hashtable/24064.cc\n\t* tr1/6_containers/unordered/hashtable/26127.cc\n\t* tr1/6_containers/unordered/hashtable/26132.cc\n\t* tr1/6_containers/unordered/hashtable/iterators_default_constructor.cc\n\t* tr1/6_containers/unordered/insert\n\t* tr1/6_containers/unordered/insert/24061-map.cc\n\t* tr1/6_containers/unordered/insert/24061-multimap.cc\n\t* tr1/6_containers/unordered/insert/24061-multiset.cc\n\t* tr1/6_containers/unordered/insert/24061-set.cc\n\t* tr1/6_containers/unordered/insert/array_syntax.cc\n\t* tr1/6_containers/unordered/insert/map_range.cc\n\t* tr1/6_containers/unordered/insert/map_single.cc\n\t* tr1/6_containers/unordered/insert/multimap_range.cc\n\t* tr1/6_containers/unordered/insert/multimap_single.cc\n\t* tr1/6_containers/unordered/insert/multiset_range.cc\n\t* tr1/6_containers/unordered/insert/multiset_single.cc\n\t* tr1/6_containers/unordered/insert/set_range.cc\n\t* tr1/6_containers/unordered/insert/set_single.cc\n\t* tr1/6_containers/unordered/instantiate\n\t* tr1/6_containers/unordered/instantiate/hash.cc\n\t* tr1/6_containers/unordered/instantiate/map.cc\n\t* tr1/6_containers/unordered/instantiate/multimap.cc\n\t* tr1/6_containers/unordered/instantiate/multiset.cc\n\t* tr1/6_containers/unordered/instantiate/set.cc\n\t* tr1/6_containers/unordered/swap\n\t* tr1/6_containers/unordered/swap/unordered_map\n\t* tr1/6_containers/unordered/swap/unordered_map/1.cc\n\t* tr1/6_containers/unordered/swap/unordered_map/2.cc\n\t* tr1/6_containers/unordered/swap/unordered_multimap\n\t* tr1/6_containers/unordered/swap/unordered_multimap/1.cc\n\t* tr1/6_containers/unordered/swap/unordered_multimap/2.cc\n\t* tr1/6_containers/unordered/swap/unordered_multiset\n\t* tr1/6_containers/unordered/swap/unordered_multiset/1.cc\n\t* tr1/6_containers/unordered/swap/unordered_multiset/2.cc\n\t* tr1/6_containers/unordered/swap/unordered_set\n\t* tr1/6_containers/unordered/swap/unordered_set/1.cc\n\t* tr1/6_containers/unordered/swap/unordered_set/2.cc\n\t* tr1/6_containers/unordered/types\n\t* tr1/6_containers/unordered/types/map_iterator.cc\n\t* tr1/6_containers/unordered/types/multimap_iterator.cc\n\t* tr1/6_containers/unordered/types/multiset_iterator.cc\n\t* tr1/6_containers/unordered/types/set_iterator.cc\n\n\t* 24_iterators/reverse_iterator/2.cc: To just one\n\tnon-requirements test.\n\t* ext/headers.cc: Add new includes.\n\t\n2007-02-18  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28080 (partial)\n\t* include/bits/stl_algobase.h: Do not include <climits>, use\n\tstd::numeric_limits.\n\t* include/bits/stl_bvector.h: Use __CHAR_BIT__.\n\t* config/locale/gnu/codecvt_members.cc: Include <climits>.\n\t* config/locale/generic/codecvt_members.cc: Likewise.\n\t* include/std/string: Do not include <algorithm>; do not include\n\t<memory>, include <bits/allocator.h> instead.\n\t* include/ext/vstring_fwd.h: Likewise.\n\t* include/ext/vstring_util.h: Do not include <algorithm>.\n\t* include/tr1/hashtable_policy.h: Include <algorithm>.\n\t* testsuite/21_strings/basic_string/replace/char/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string/replace/wchar_t/1.cc: Likewise.\n\t* testsuite/23_containers/bitset/cons/1.cc: Likewise.\n\t* testsuite/util/testsuite_character.h: Likewise.\n\n\t* config/locale/gnu/codecvt_members.cc: Also include <cstdlib>,\n\tfor MB_CUR_MAX.\n\t* config/locale/generic/codecvt_members.cc: Likewise.\n\nFrom-SVN: r122168", "tree": {"sha": "1d3253cfc7f815a8587de59e1608e83f9797f1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d3253cfc7f815a8587de59e1608e83f9797f1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a024740df47c300e9797ba4ac61f9ec671fa1fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a024740df47c300e9797ba4ac61f9ec671fa1fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a024740df47c300e9797ba4ac61f9ec671fa1fd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a024740df47c300e9797ba4ac61f9ec671fa1fd3/comments", "author": null, "committer": null, "parents": [{"sha": "32ec65429c2d4b176bccc495682b1b37b3d31b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ec65429c2d4b176bccc495682b1b37b3d31b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ec65429c2d4b176bccc495682b1b37b3d31b7c"}], "stats": {"total": 9755, "additions": 8574, "deletions": 1181}, "files": [{"sha": "937d3150cb5bc7cea538c0b971cef8b5777f0dc1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 897, "deletions": 0, "changes": 897, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,900 @@\n+2007-02-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tRevamp library API testing.\n+\tAdded:\n+\t* 17_intro/headers\n+\t* 17_intro/headers/all_assert_neg.cc\n+\t* 17_intro/headers/all_c++200x_compatibility.cc\n+\t* 17_intro/headers/all.cc\n+\t* 17_intro/headers/c++1998\n+\t* 17_intro/headers/c++1998/all.cc\n+\t* 17_intro/headers/c++1998/all_multiple_inclusion.cc\n+\t* 17_intro/headers/c++1998/c++_for_c.tar\n+\t* 17_intro/headers/c++1998/c++.tar\n+\t* 17_intro/using_namespace_std.cc\n+\t* 18_support/headers\n+\t* 18_support/headers/cfloat\n+\t* 18_support/headers/cfloat/values.cc\n+\t* 18_support/headers/climits\n+\t* 18_support/headers/climits/values.cc\n+\t* 18_support/headers/csetjmp\n+\t* 18_support/headers/csetjmp/functions_std.cc\n+\t* 18_support/headers/csetjmp/macros.cc\n+\t* 18_support/headers/csetjmp/types_std.cc\n+\t* 18_support/headers/csignal\n+\t* 18_support/headers/csignal/functions_std.cc\n+\t* 18_support/headers/csignal/macros.cc\n+\t* 18_support/headers/csignal/types_std.cc\n+\t* 18_support/headers/cstdarg\n+\t* 18_support/headers/cstdarg/macros.cc\n+\t* 18_support/headers/cstdarg/types_std.cc\n+\t* 18_support/headers/cstddef\n+\t* 18_support/headers/cstddef/macros.cc\n+\t* 18_support/headers/cstddef/types_std.cc\n+\t* 18_support/headers/cstdlib\n+\t* 18_support/headers/cstdlib/functions_std.cc\n+\t* 18_support/headers/cstdlib/macros.cc\n+\t* 18_support/headers/ctime\n+\t* 18_support/headers/ctime/functions_std.cc\n+\t* 18_support/headers/ctime/macros.cc\n+\t* 18_support/headers/ctime/types_std.cc\n+\t* 18_support/headers/exception\n+\t* 18_support/headers/exception/synopsis.cc\n+\t* 18_support/headers/exception/types_std.cc\n+\t* 18_support/headers/limits\n+\t* 18_support/headers/limits/synopsis.cc\n+\t* 18_support/headers/new\n+\t* 18_support/headers/new/synopsis.cc\n+\t* 18_support/headers/new/types_std.cc\n+\t* 18_support/headers/typeinfo\n+\t* 18_support/headers/typeinfo/synopsis.cc\n+\t* 18_support/headers/typeinfo/types_std.cc\n+\t* 18_support/numeric_limits/is_signed.cc\n+\t* 18_support/numeric_limits/requirements\n+\t* 18_support/numeric_limits/requirements/explicit_instantiation\n+\t* 18_support/numeric_limits/requirements/explicit_instantiation/1.cc\n+\t* 18_support/numeric_limits/specialization_default_values.cc\n+\t* 19_diagnostics/headers\n+\t* 19_diagnostics/headers/cassert\n+\t* 19_diagnostics/headers/cassert/macros.cc\n+\t* 19_diagnostics/headers/cerrno\n+\t* 19_diagnostics/headers/cerrno/macros.cc\n+\t* 19_diagnostics/headers/stdexcept\n+\t* 19_diagnostics/headers/stdexcept/synopsis.cc\n+\t* 19_diagnostics/headers/stdexcept/types_std.cc\n+\t* 20_util/headers\n+\t* 20_util/headers/cstdlib\n+\t* 20_util/headers/cstdlib/functions_std.cc\n+\t* 20_util/headers/cstring\n+\t* 20_util/headers/cstring/functions_std.cc\n+\t* 20_util/headers/cstring/macros.cc\n+\t* 20_util/headers/cstring/types_std.cc\n+\t* 20_util/headers/ctime\n+\t* 20_util/headers/ctime/functions_std.cc\n+\t* 20_util/headers/ctime/macros.cc\n+\t* 20_util/headers/ctime/types_std.cc\n+\t* 20_util/headers/functional\n+\t* 20_util/headers/functional/synopsis.cc\n+\t* 20_util/headers/memory\n+\t* 20_util/headers/memory/synopsis.cc\n+\t* 20_util/headers/utility\n+\t* 20_util/headers/utility/synopsis.cc\n+\t* 20_util/headers/utility/using_namespace_std_rel_ops.cc\n+\t* 20_util/memory/allocator/requirements\n+\t* 20_util/memory/allocator/requirements/explicit_instantiation\n+\t* 20_util/memory/allocator/requirements/explicit_instantiation/1.cc\n+\t* 20_util/memory/auto_ptr/requirements\n+\t* 20_util/memory/auto_ptr/requirements/explicit_instantiation\n+\t* 20_util/memory/auto_ptr/requirements/explicit_instantiation/1.cc\n+\t* 20_util/memory/raw_storage_iterator\n+\t* 20_util/memory/raw_storage_iterator/requirements\n+\t* 20_util/memory/raw_storage_iterator/requirements/base_classes.cc\n+\t* 20_util/memory/raw_storage_iterator/requirements/\n+\texplicit_instantiation\n+\t* 20_util/memory/raw_storage_iterator/requirements/\n+\texplicit_instantiation/1.cc\n+\t* 20_util/memory/raw_storage_iterator/requirements/typedefs.cc\n+\t* 20_util/utility/pair/requirements\n+\t* 20_util/utility/pair/requirements/explicit_instantiation\n+\t* 20_util/utility/pair/requirements/explicit_instantiation/1.cc\n+\t* 21_strings/basic_string/requirements\n+\t* 21_strings/basic_string/requirements/explicit_instantiation\n+\t* 21_strings/basic_string/requirements/explicit_instantiation/1.cc\n+\t* 21_strings/basic_string/requirements/explicit_instantiation/debug.cc\n+\t* 21_strings/headers\n+\t* 21_strings/headers/cctype\n+\t* 21_strings/headers/cctype/functions_std.cc\n+\t* 21_strings/headers/cstdlib\n+\t* 21_strings/headers/cstdlib/functions_std.cc\n+\t* 21_strings/headers/cstdlib/macros.cc\n+\t* 21_strings/headers/cstring\n+\t* 21_strings/headers/cstring/functions_std.cc\n+\t* 21_strings/headers/cstring/macros.cc\n+\t* 21_strings/headers/cstring/types_std.cc\n+\t* 21_strings/headers/cwchar\n+\t* 21_strings/headers/cwchar/functions_std.cc\n+\t* 21_strings/headers/cwchar/macros.cc\n+\t* 21_strings/headers/cwchar/types_std.cc\n+\t* 21_strings/headers/cwctype\n+\t* 21_strings/headers/cwctype/functions_std.cc\n+\t* 21_strings/headers/cwctype/macros.cc\n+\t* 21_strings/headers/cwctype/types_std.cc\n+\t* 21_strings/headers/string\n+\t* 21_strings/headers/string/synopsis.cc\n+\t* 21_strings/headers/string/types_std.cc\n+\t* 22_locale/codecvt_byname/requirements\n+\t* 22_locale/codecvt_byname/requirements/base_classes.cc\n+\t* 22_locale/codecvt_byname/requirements/explicit_instantiation.cc\n+\t* 22_locale/codecvt_byname/requirements/typedefs.cc\n+\t* 22_locale/codecvt/requirements\n+\t* 22_locale/codecvt/requirements/base_classes.cc\n+\t* 22_locale/codecvt/requirements/explicit_instantiation.cc\n+\t* 22_locale/codecvt/requirements/typedefs.cc\n+\t* 22_locale/collate_byname/requirements\n+\t* 22_locale/collate_byname/requirements/base_classes.cc\n+\t* 22_locale/collate_byname/requirements/explicit_instantiation.cc\n+\t* 22_locale/collate_byname/requirements/typedefs.cc\n+\t* 22_locale/collate/requirements\n+\t* 22_locale/collate/requirements/base_classes.cc\n+\t* 22_locale/collate/requirements/explicit_instantiation.cc\n+\t* 22_locale/collate/requirements/typedefs.cc\n+\t* 22_locale/ctype_base/mask.cc\n+\t* 22_locale/ctype/requirements\n+\t* 22_locale/ctype/requirements/base_classes.cc\n+\t* 22_locale/ctype/requirements/explicit_instantiation.cc\n+\t* 22_locale/ctype/requirements/typedefs.cc\n+\t* 22_locale/headers\n+\t* 22_locale/headers/clocale\n+\t* 22_locale/headers/clocale/functions_std.cc\n+\t* 22_locale/headers/clocale/macros.cc\n+\t* 22_locale/headers/clocale/types_std.cc\n+\t* 22_locale/headers/locale\n+\t* 22_locale/headers/locale/synopsis.cc\n+\t* 22_locale/headers/locale/types_std.cc\n+\t* 22_locale/messages_byname/requirements\n+\t* 22_locale/messages_byname/requirements/base_classes.cc\n+\t* 22_locale/messages_byname/requirements/explicit_instantiation.cc\n+\t* 22_locale/messages_byname/requirements/typedefs.cc\n+\t* 22_locale/messages/requirements\n+\t* 22_locale/messages/requirements/base_classes.cc\n+\t* 22_locale/messages/requirements/explicit_instantiation.cc\n+\t* 22_locale/messages/requirements/typedefs.cc\n+\t* 22_locale/money_get/cons\n+\t* 22_locale/money_get/cons/3.cc\n+\t* 22_locale/money_get/requirements\n+\t* 22_locale/money_get/requirements/base_classes.cc\n+\t* 22_locale/money_get/requirements/explicit_instantiations.cc\n+\t* 22_locale/money_get/requirements/typedefs.cc\n+\t* 22_locale/moneypunct_byname/requirements\n+\t* 22_locale/moneypunct_byname/requirements/base_classes.cc\n+\t* 22_locale/moneypunct_byname/requirements/explicit_instantiation.cc\n+\t* 22_locale/moneypunct_byname/requirements/typedefs.cc\n+\t* 22_locale/moneypunct/requirements\n+\t* 22_locale/moneypunct/requirements/false\n+\t* 22_locale/moneypunct/requirements/false/base_classes.cc\n+\t* 22_locale/moneypunct/requirements/false/explicit_instantiation.cc\n+\t* 22_locale/moneypunct/requirements/false/intl.cc\n+\t* 22_locale/moneypunct/requirements/false/typedefs.cc\n+\t* 22_locale/moneypunct/requirements/true\n+\t* 22_locale/moneypunct/requirements/true/base_classes.cc\n+\t* 22_locale/moneypunct/requirements/true/explicit_instantiation.cc\n+\t* 22_locale/moneypunct/requirements/true/intl.cc\n+\t* 22_locale/moneypunct/requirements/true/typedefs.cc\n+\t* 22_locale/money_put/cons\n+\t* 22_locale/money_put/cons/3.cc\n+\t* 22_locale/money_put/requirements\n+\t* 22_locale/money_put/requirements/base_classes.cc\n+\t* 22_locale/money_put/requirements/explicit_instantiation.cc\n+\t* 22_locale/money_put/requirements/typedefs.cc\n+\t* 22_locale/num_get/cons\n+\t* 22_locale/num_get/cons/3.cc\n+\t* 22_locale/num_get/requirements\n+\t* 22_locale/num_get/requirements/base_classes.cc\n+\t* 22_locale/num_get/requirements/explicit_instantiation.cc\n+\t* 22_locale/num_get/requirements/typedefs.cc\n+\t* 22_locale/numpunct_byname/requirements\n+\t* 22_locale/numpunct_byname/requirements/base_classes.cc\n+\t* 22_locale/numpunct_byname/requirements/explicit_instantiations.cc\n+\t* 22_locale/numpunct_byname/requirements/typedefs.cc\n+\t* 22_locale/numpunct/requirements\n+\t* 22_locale/numpunct/requirements/base_classes.cc\n+\t* 22_locale/numpunct/requirements/explicit_instantiations.cc\n+\t* 22_locale/numpunct/requirements/typedefs.cc\n+\t* 22_locale/num_put/cons\n+\t* 22_locale/num_put/cons/3.cc\n+\t* 22_locale/num_put/requirements\n+\t* 22_locale/num_put/requirements/base_classes.cc\n+\t* 22_locale/num_put/requirements/explicit_instantiations.cc\n+\t* 22_locale/num_put/requirements/typedefs.cc\n+\t* 22_locale/time_get/requirements\n+\t* 22_locale/time_get/requirements/base_classes.cc\n+\t* 22_locale/time_get/requirements/explicit_instantiations.cc\n+\t* 22_locale/time_get/requirements/typedefs.cc\n+\t* 22_locale/time_put/requirements\n+\t* 22_locale/time_put/requirements/base_classes.cc\n+\t* 22_locale/time_put/requirements/explicit_instantiations.cc\n+\t* 22_locale/time_put/requirements/typedefs.cc\n+\t* 23_containers/bitset/requirements\n+\t* 23_containers/bitset/requirements/explicit_instantiation\n+\t* 23_containers/bitset/requirements/explicit_instantiation/1.cc\n+\t* 23_containers/deque/requirements\n+\t* 23_containers/deque/requirements/explicit_instantiation\n+\t* 23_containers/deque/requirements/partial_specialization\n+\t* 23_containers/deque/requirements/partial_specialization/1.cc\n+\t* 23_containers/headers\n+\t* 23_containers/headers/bitset\n+\t* 23_containers/headers/bitset/synopsis.cc\n+\t* 23_containers/headers/deque\n+\t* 23_containers/headers/deque/synopsis.cc\n+\t* 23_containers/headers/list\n+\t* 23_containers/headers/list/synopsis.cc\n+\t* 23_containers/headers/map\n+\t* 23_containers/headers/map/synopsis.cc\n+\t* 23_containers/headers/queue\n+\t* 23_containers/headers/queue/synopsis.cc\n+\t* 23_containers/headers/set\n+\t* 23_containers/headers/set/synopsis.cc\n+\t* 23_containers/headers/stack\n+\t* 23_containers/headers/stack/synopsis.cc\n+\t* 23_containers/headers/vector\n+\t* 23_containers/headers/vector/synopsis.cc\n+\t* 23_containers/list/requirements\n+\t* 23_containers/list/requirements/explicit_instantiation\n+\t* 23_containers/list/requirements/partial_specialization\n+\t* 23_containers/list/requirements/partial_specialization/1.cc\n+\t* 23_containers/map/requirements\n+\t* 23_containers/map/requirements/explicit_instantiation\n+\t* 23_containers/map/requirements/partial_specialization\n+\t* 23_containers/map/requirements/partial_specialization/1.cc\n+\t* 23_containers/multimap/requirements\n+\t* 23_containers/multimap/requirements/explicit_instantiation\n+\t* 23_containers/multimap/requirements/partial_specialization\n+\t* 23_containers/multimap/requirements/partial_specialization/1.cc\n+\t* 23_containers/multiset/requirements\n+\t* 23_containers/multiset/requirements/explicit_instantiation\n+\t* 23_containers/multiset/requirements/partial_specialization\n+\t* 23_containers/multiset/requirements/partial_specialization/1.cc\n+\t* 23_containers/priority_queue/requirements\n+\t* 23_containers/priority_queue/requirements/explicit_instantiation\n+\t* 23_containers/priority_queue/requirements/explicit_instantiation/1.cc\n+\t* 23_containers/queue/requirements\n+\t* 23_containers/queue/requirements/explicit_instantiation\n+\t* 23_containers/queue/requirements/explicit_instantiation/1.cc\n+\t* 23_containers/set/requirements\n+\t* 23_containers/set/requirements/explicit_instantiation\n+\t* 23_containers/set/requirements/partial_specialization\n+\t* 23_containers/set/requirements/partial_specialization/1.cc\n+\t* 23_containers/stack/requirements\n+\t* 23_containers/stack/requirements/explicit_instantiation\n+\t* 23_containers/stack/requirements/explicit_instantiation/1.cc\n+\t* 23_containers/vector/requirements\n+\t* 23_containers/vector/requirements/explicit_instantiation\n+\t* 23_containers/vector/requirements/partial_specialization\n+\t* 23_containers/vector/requirements/partial_specialization/1.cc\n+\t* 24_iterators/back_insert_iterator\n+\t* 24_iterators/back_insert_iterator/2.cc\n+\t* 24_iterators/back_insert_iterator/requirements\n+\t* 24_iterators/back_insert_iterator/requirements/base_classes.cc\n+\t* 24_iterators/back_insert_iterator/requirements/container.cc\n+\t* 24_iterators/back_insert_iterator/requirements/\n+\texplicit_instantiation.cc\n+\t* 24_iterators/back_insert_iterator/requirements/typedefs.cc\n+\t* 24_iterators/front_insert_iterator\n+\t* 24_iterators/front_insert_iterator/2.cc\n+\t* 24_iterators/front_insert_iterator/requirements\n+\t* 24_iterators/front_insert_iterator/requirements/base_classes.cc\n+\t* 24_iterators/front_insert_iterator/requirements/container.cc\n+\t* 24_iterators/front_insert_iterator/requirements/\n+\texplicit_instantiation.cc\n+\t* 24_iterators/front_insert_iterator/requirements/typedefs.cc\n+\t* 24_iterators/headers\n+\t* 24_iterators/headers/iterator\n+\t* 24_iterators/headers/iterator/synopsis.cc\n+\t* 24_iterators/headers/iterator/types_std.cc\n+\t* 24_iterators/insert_iterator\n+\t* 24_iterators/insert_iterator/2.cc\n+\t* 24_iterators/insert_iterator/requirements\n+\t* 24_iterators/insert_iterator/requirements/base_classes.cc\n+\t* 24_iterators/insert_iterator/requirements/container.cc\n+\t* 24_iterators/insert_iterator/requirements/explicit_instantiation.cc\n+\t* 24_iterators/insert_iterator/requirements/typedefs.cc\n+\t* 24_iterators/istreambuf_iterator/requirements\n+\t* 24_iterators/istreambuf_iterator/requirements/base_classes.cc\n+\t* 24_iterators/istreambuf_iterator/requirements/\n+\texplicit_instantiation.cc\n+\t* 24_iterators/istreambuf_iterator/requirements/typedefs.cc\n+\t* 24_iterators/istream_iterator\n+\t* 24_iterators/istream_iterator/2.cc\n+\t* 24_iterators/istream_iterator/requirements\n+\t* 24_iterators/istream_iterator/requirements/base_classes.cc\n+\t* 24_iterators/istream_iterator/requirements/explicit_instantiation.cc\n+\t* 24_iterators/istream_iterator/requirements/typedefs.cc\n+\t* 24_iterators/ostreambuf_iterator/requirements\n+\t* 24_iterators/ostreambuf_iterator/requirements/base_classes.cc\n+\t* 24_iterators/ostreambuf_iterator/requirements/\n+\texplicit_instantiation.cc\n+\t* 24_iterators/ostreambuf_iterator/requirements/typedefs.cc\n+\t* 24_iterators/ostream_iterator\n+\t* 24_iterators/ostream_iterator/requirements\n+\t* 24_iterators/ostream_iterator/requirements/base_classes.cc\n+\t* 24_iterators/ostream_iterator/requirements/explicit_instantiation.cc\n+\t* 24_iterators/ostream_iterator/requirements/typedefs.cc\n+\t* 24_iterators/random_access_iterator\n+\t* 24_iterators/random_access_iterator/26020.cc\n+\t* 24_iterators/random_access_iterator/string_vector_iterators.cc\n+\t* 24_iterators/reverse_iterator/requirements\n+\t* 24_iterators/reverse_iterator/requirements/base_classes.cc\n+\t* 24_iterators/reverse_iterator/requirements/current.cc\n+\t* 24_iterators/reverse_iterator/requirements/explicit_instantiation.cc\n+\t* 24_iterators/reverse_iterator/requirements/typedefs.cc\n+\t* 25_algorithms/headers\n+\t* 25_algorithms/headers/algorithm\n+\t* 25_algorithms/headers/algorithm/synopsis.cc\n+\t* 25_algorithms/headers/cstdlib\n+\t* 25_algorithms/headers/cstdlib/functions_std.cc\n+\t* 26_numerics/headers\n+\t* 26_numerics/headers/cmath\n+\t* 26_numerics/headers/cmath/19322.cc\n+\t* 26_numerics/headers/cmath/c99_classification_macros_c.cc\n+\t* 26_numerics/headers/cmath/c99_classification_macros_c++.cc\n+\t* 26_numerics/headers/cmath/c_math.cc\n+\t* 26_numerics/headers/cmath/c_math_dynamic.cc\n+\t* 26_numerics/headers/cmath/fabs_inline.cc\n+\t* 26_numerics/headers/cmath/functions_std.cc\n+\t* 26_numerics/headers/cmath/macros.cc\n+\t* 26_numerics/headers/cmath/overloads.cc\n+\t* 26_numerics/headers/cmath/powi.cc\n+\t* 26_numerics/headers/complex\n+\t* 26_numerics/headers/complex/synopsis.cc\n+\t* 26_numerics/headers/cstdlib\n+\t* 26_numerics/headers/cstdlib/13943.cc\n+\t* 26_numerics/headers/cstdlib/2190.cc\n+\t* 26_numerics/headers/cstdlib/functions_std.cc\n+\t* 26_numerics/headers/cstdlib/macros.cc\n+\t* 26_numerics/headers/cstdlib/types_std.cc\n+\t* 26_numerics/headers/numeric\n+\t* 26_numerics/headers/numeric/synopsis.cc\n+\t* 26_numerics/headers/valarray\n+\t* 26_numerics/headers/valarray/synopsis.cc\n+\t* 26_numerics/headers/valarray/types_std.cc\n+\t* 26_numerics/numeric_arrays\n+\t* 26_numerics/numeric_operations\n+\t* 27_io/basic_filebuf/cons/2020.cc\n+\t* 27_io/basic_filebuf/requirements\n+\t* 27_io/basic_filebuf/requirements/base_classes.cc\n+\t* 27_io/basic_filebuf/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_filebuf/requirements/typedefs.cc\n+\t* 27_io/basic_fstream/cons\n+\t* 27_io/basic_fstream/cons/3.cc\n+\t* 27_io/basic_fstream/requirements\n+\t* 27_io/basic_fstream/requirements/base_classes.cc\n+\t* 27_io/basic_fstream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_fstream/requirements/typedefs.cc\n+\t* 27_io/basic_ifstream/cons/2020.cc\n+\t* 27_io/basic_ifstream/requirements\n+\t* 27_io/basic_ifstream/requirements/base_classes.cc\n+\t* 27_io/basic_ifstream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_ifstream/requirements/typedefs.cc\n+\t* 27_io/basic_ios/cons/2020.cc\n+\t* 27_io/basic_ios/requirements\n+\t* 27_io/basic_ios/requirements/base_classes.cc\n+\t* 27_io/basic_ios/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_ios/requirements/typedefs.cc\n+\t* 27_io/basic_iostream/cons\n+\t* 27_io/basic_iostream/cons/2020.cc\n+\t* 27_io/basic_iostream/requirements\n+\t* 27_io/basic_iostream/requirements/base_classes.cc\n+\t* 27_io/basic_iostream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_iostream/requirements/typedefs.cc\n+\t* 27_io/basic_istream/cons\n+\t* 27_io/basic_istream/cons/3.cc\n+\t* 27_io/basic_istream/requirements\n+\t* 27_io/basic_istream/requirements/base_classes.cc\n+\t* 27_io/basic_istream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_istream/requirements/typedefs.cc\n+\t* 27_io/basic_istringstream/cons\n+\t* 27_io/basic_istringstream/cons/2020.cc\n+\t* 27_io/basic_istringstream/requirements\n+\t* 27_io/basic_istringstream/requirements/base_classes.cc\n+\t* 27_io/basic_istringstream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_istringstream/requirements/typedefs.cc\n+\t* 27_io/basic_ofstream/cons/2020.cc\n+\t* 27_io/basic_ofstream/requirements\n+\t* 27_io/basic_ofstream/requirements/base_classes.cc\n+\t* 27_io/basic_ofstream/requirements/explicit_instantiations.cc\n+\t* 27_io/basic_ofstream/requirements/typedefs.cc\n+\t* 27_io/basic_ostream/cons/2020.cc\n+\t* 27_io/basic_ostream/requirements\n+\t* 27_io/basic_ostream/requirements/base_classes.cc\n+\t* 27_io/basic_ostream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_ostream/requirements/typedefs.cc\n+\t* 27_io/basic_ostringstream/cons/2020.cc\n+\t* 27_io/basic_ostringstream/requirements\n+\t* 27_io/basic_ostringstream/requirements/base_classes.cc\n+\t* 27_io/basic_ostringstream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_ostringstream/requirements/typedefs.cc\n+\t* 27_io/basic_streambuf/cons/2020.cc\n+\t* 27_io/basic_streambuf/requirements\n+\t* 27_io/basic_streambuf/requirements/base_classes.cc\n+\t* 27_io/basic_streambuf/requirements/typedefs.cc\n+\t* 27_io/basic_stringbuf/cons/2020.cc\n+\t* 27_io/basic_stringbuf/requirements\n+\t* 27_io/basic_stringbuf/requirements/base_classes.cc\n+\t* 27_io/basic_stringbuf/requirements/explicit_instantiation\n+\t* 27_io/basic_stringbuf/requirements/explicit_instantiation/2.cc\n+\t* 27_io/basic_stringbuf/requirements/explicit_instantiation/4.cc\n+\t* 27_io/basic_stringbuf/requirements/typedefs.cc\n+\t* 27_io/basic_stringstream/cons\n+\t* 27_io/basic_stringstream/cons/2020.cc\n+\t* 27_io/basic_stringstream/requirements\n+\t* 27_io/basic_stringstream/requirements/base_classes.cc\n+\t* 27_io/basic_stringstream/requirements/explicit_instantiation.cc\n+\t* 27_io/basic_stringstream/requirements/typedefs.cc\n+\t* 27_io/fpos/requirements\n+\t* 27_io/fpos/requirements/explicit_instantiation.cc\n+\t* 27_io/headers\n+\t* 27_io/headers/cstdio\n+\t* 27_io/headers/cstdio/functions_std.cc\n+\t* 27_io/headers/cstdio/macros.cc\n+\t* 27_io/headers/cstdio/types_std.cc\n+\t* 27_io/headers/cstdlib\n+\t* 27_io/headers/fstream\n+\t* 27_io/headers/fstream/synopsis.cc\n+\t* 27_io/headers/fstream/types_std.cc\n+\t* 27_io/headers/iomanip\n+\t* 27_io/headers/iomanip/synopsis.cc\n+\t* 27_io/headers/ios\n+\t* 27_io/headers/ios/synopsis.cc\n+\t* 27_io/headers/iostream\n+\t* 27_io/headers/iostream/synopsis.cc\n+\t* 27_io/headers/iostream/types_std.cc\n+\t* 27_io/headers/ios/types_std.cc\n+\t* 27_io/headers/istream\n+\t* 27_io/headers/istream/synopsis.cc\n+\t* 27_io/headers/istream/types_std.cc\n+\t* 27_io/headers/ostream\n+\t* 27_io/headers/ostream/synopsis.cc\n+\t* 27_io/headers/ostream/types_std.cc\n+\t* 27_io/headers/sstream\n+\t* 27_io/headers/sstream/synopsis.cc\n+\t* 27_io/headers/sstream/types_std.cc\n+\t* 27_io/headers/streambuf\n+\t* 27_io/headers/streambuf/synopsis.cc\n+\t* 27_io/headers/streambuf/types_std.cc\n+\t* ext/debug_allocator/explicit_instantiation.cc\n+\t* ext/hash_map/requirements\n+\t* ext/hash_map/requirements/explicit_instantiation.cc\n+\t* ext/hash_set/requirements\n+\t* ext/hash_set/requirements/explicit_instantiation.cc\n+\t* ext/malloc_allocator/explicit_instantiation.cc\n+\t* ext/mt_allocator/explicit_instantiation.cc\n+\t* ext/pool_allocator/explicit_instantiation.cc\n+\t* ext/slist/requirements\n+\t* ext/slist/requirements/explicit_instantiation.cc\n+\t* ext/stdio_filebuf/requirements\n+\t* ext/stdio_filebuf/requirements/explicit_instantiation.cc\n+\t* ext/vstring/requirements\n+\t* ext/vstring/requirements/explicit_instantiation\n+\t* tr1/2_general_utilities/headers\n+\t* tr1/2_general_utilities/headers/functional\n+\t* tr1/2_general_utilities/headers/functional/synopsis.cc\n+\t* tr1/2_general_utilities/headers/memory\n+\t* tr1/2_general_utilities/headers/memory/synopsis.cc\n+\t* tr1/2_general_utilities/headers/memory/types_std_tr1.cc\n+\t* tr1/2_general_utilities/memory/enable_shared_from_this/requirements\n+\t* tr1/2_general_utilities/memory/enable_shared_from_this/\n+\trequirements/explicit_instantiation\n+\t* tr1/2_general_utilities/memory/shared_ptr/requirements\n+\t* tr1/2_general_utilities/memory/shared_ptr/requirements/\n+\texplicit_instantiation\n+\t* tr1/2_general_utilities/memory/weak_ptr/requirements\n+\t* tr1/2_general_utilities/memory/weak_ptr/requirements/\n+\texplicit_instantiation\n+\t* tr1/3_function_objects/headers\n+\t* tr1/3_function_objects/headers/functional\n+\t* tr1/3_function_objects/headers/functional/synopsis.cc\n+\t* tr1/3_function_objects/headers/functional/types_std_tr1.cc\n+\t* tr1/3_function_objects/headers/functional/\n+\tusing_namespace_std_tr1_placeholders.cc\n+\t* tr1/4_metaprogramming/headers\n+\t* tr1/4_metaprogramming/headers/type_traits\n+\t* tr1/4_metaprogramming/headers/type_traits/synopsis.cc\n+\t* tr1/4_metaprogramming/headers/type_traits/types_std_tr1.cc\n+\t* tr1/5_numerical_facilities/headers\n+\t* tr1/5_numerical_facilities/headers/random\n+\t* tr1/5_numerical_facilities/headers/random/synopsis.cc\n+\t* tr1/5_numerical_facilities/headers/random/types_std_tr1.cc\n+\t* tr1/5_numerical_facilities/random/discard_block/\n+\trequirements/typedefs.cc\n+\t* tr1/6_containers/array/requirements/explicit_instantiation.cc\n+\t* tr1/6_containers/hash\n+\t* tr1/6_containers/hash/requirements\n+\t* tr1/6_containers/hash/requirements/base_classes.cc\n+\t* tr1/6_containers/hash/requirements/explicit_instantiation.cc\n+\t* tr1/6_containers/headers\n+\t* tr1/6_containers/headers/array\n+\t* tr1/6_containers/headers/array/synopsis.cc\n+\t* tr1/6_containers/headers/functional\n+\t* tr1/6_containers/headers/functional/synopsis.cc\n+\t* tr1/6_containers/headers/tuple\n+\t* tr1/6_containers/headers/tuple/synopsis.cc\n+\t* tr1/6_containers/headers/tuple/types_std_tr1.cc\n+\t* tr1/6_containers/headers/unordered_map\n+\t* tr1/6_containers/headers/unordered_map/synopsis.cc\n+\t* tr1/6_containers/headers/unordered_set\n+\t* tr1/6_containers/headers/unordered_set/synopsis.cc\n+\t* tr1/6_containers/tuple/requirements\n+\t* tr1/6_containers/tuple/requirements/explicit_instantiation.cc\n+\t* tr1/6_containers/unordered_map\n+\t* tr1/6_containers/unordered_map/24064.cc\n+\t* tr1/6_containers/unordered_map/capacity\n+\t* tr1/6_containers/unordered_map/capacity/29134-map.cc\n+\t* tr1/6_containers/unordered_map/erase\n+\t* tr1/6_containers/unordered_map/erase/24061-map.cc\n+\t* tr1/6_containers/unordered_map/find\n+\t* tr1/6_containers/unordered_map/find/map1.cc\n+\t* tr1/6_containers/unordered_map/insert\n+\t* tr1/6_containers/unordered_map/insert/24061-map.cc\n+\t* tr1/6_containers/unordered_map/insert/array_syntax.cc\n+\t* tr1/6_containers/unordered_map/insert/map_range.cc\n+\t* tr1/6_containers/unordered_map/insert/map_single.cc\n+\t* tr1/6_containers/unordered_map/requirements\n+\t* tr1/6_containers/unordered_map/requirements/explicit_instantiation.cc\n+\t* tr1/6_containers/unordered_map/requirements/iterator_neg.cc\n+\t* tr1/6_containers/unordered_map/requirements/iterator_null_neg.cc\n+\t* tr1/6_containers/unordered_map/swap\n+\t* tr1/6_containers/unordered_map/swap/1.cc\n+\t* tr1/6_containers/unordered_map/swap/2.cc\n+\t* tr1/6_containers/unordered_multimap\n+\t* tr1/6_containers/unordered_multimap/capacity\n+\t* tr1/6_containers/unordered_multimap/capacity/29134-multimap.cc\n+\t* tr1/6_containers/unordered_multimap/erase\n+\t* tr1/6_containers/unordered_multimap/erase/24061-multimap.cc\n+\t* tr1/6_containers/unordered_multimap/find\n+\t* tr1/6_containers/unordered_multimap/find/multimap1.cc\n+\t* tr1/6_containers/unordered_multimap/insert\n+\t* tr1/6_containers/unordered_multimap/insert/24061-multimap.cc\n+\t* tr1/6_containers/unordered_multimap/insert/multimap_range.cc\n+\t* tr1/6_containers/unordered_multimap/insert/multimap_single.cc\n+\t* tr1/6_containers/unordered_multimap/requirements\n+\t* tr1/6_containers/unordered_multimap/requirements/\n+\texplicit_instantiation.cc\n+\t* tr1/6_containers/unordered_multimap/requirements/iterator_neg.cc\n+\t* tr1/6_containers/unordered_multimap/requirements/iterator_null_neg.cc\n+\t* tr1/6_containers/unordered_multimap/swap\n+\t* tr1/6_containers/unordered_multimap/swap/1.cc\n+\t* tr1/6_containers/unordered_multimap/swap/2.cc\n+\t* tr1/6_containers/unordered_multiset\n+\t* tr1/6_containers/unordered_multiset/24054.cc\n+\t* tr1/6_containers/unordered_multiset/capacity\n+\t* tr1/6_containers/unordered_multiset/capacity/29134-multiset.cc\n+\t* tr1/6_containers/unordered_multiset/erase\n+\t* tr1/6_containers/unordered_multiset/erase/24061-multiset.cc\n+\t* tr1/6_containers/unordered_multiset/find\n+\t* tr1/6_containers/unordered_multiset/find/multiset1.cc\n+\t* tr1/6_containers/unordered_multiset/insert\n+\t* tr1/6_containers/unordered_multiset/insert/24061-multiset.cc\n+\t* tr1/6_containers/unordered_multiset/insert/multiset_range.cc\n+\t* tr1/6_containers/unordered_multiset/insert/multiset_single.cc\n+\t* tr1/6_containers/unordered_multiset/requirements\n+\t* tr1/6_containers/unordered_multiset/requirements/\n+\texplicit_instantiation.cc\n+\t* tr1/6_containers/unordered_multiset/requirements/iterator_neg.cc\n+\t* tr1/6_containers/unordered_multiset/requirements/iterator_null_neg.cc\n+\t* tr1/6_containers/unordered_multiset/swap\n+\t* tr1/6_containers/unordered_multiset/swap/1.cc\n+\t* tr1/6_containers/unordered_multiset/swap/2.cc\n+\t* tr1/6_containers/unordered_set\n+\t* tr1/6_containers/unordered_set/23053.cc\n+\t* tr1/6_containers/unordered_set/23465.cc\n+\t* tr1/6_containers/unordered_set/26127.cc\n+\t* tr1/6_containers/unordered_set/26132.cc\n+\t* tr1/6_containers/unordered_set/capacity\n+\t* tr1/6_containers/unordered_set/capacity/29134-set.cc\n+\t* tr1/6_containers/unordered_set/erase\n+\t* tr1/6_containers/unordered_set/erase/24061-set.cc\n+\t* tr1/6_containers/unordered_set/find\n+\t* tr1/6_containers/unordered_set/find/set1.cc\n+\t* tr1/6_containers/unordered_set/insert\n+\t* tr1/6_containers/unordered_set/insert/24061-set.cc\n+\t* tr1/6_containers/unordered_set/insert/set_range.cc\n+\t* tr1/6_containers/unordered_set/insert/set_single.cc\n+\t* tr1/6_containers/unordered_set/requirements\n+\t* tr1/6_containers/unordered_set/requirements/explicit_instantiation.cc\n+\t* tr1/6_containers/unordered_set/requirements/iterator_neg.cc\n+\t* tr1/6_containers/unordered_set/requirements/iterator_null_neg.cc\n+\t* tr1/6_containers/unordered_set/requirements/\n+\titerators_default_constructor.cc\n+\t* tr1/6_containers/unordered_set/swap\n+\t* tr1/6_containers/unordered_set/swap/1.cc\n+\t* tr1/6_containers/unordered_set/swap/2.cc\n+\t* tr1/using_namespace_std_tr1.cc\n+\n+\tDeleted:\n+\t* 17_intro/header_cassert.cc\n+\t* 17_intro/header_cerrno.cc\n+\t* 17_intro/header_csetjmp.cc\n+\t* 17_intro/header_cstdarg.cc\n+\t* 17_intro/header_cstddef.cc\n+\t* 17_intro/header_cstdio.cc\n+\t* 17_intro/header_cstdlib.cc\n+\t* 17_intro/header_cstring.cc\n+\t* 17_intro/header_ctime.cc\n+\t* 17_intro/header_cwchar.cc\n+\t* 17_intro/header_cwctype.cc\n+\t* 17_intro/header_fstream.cc\n+\t* 17_intro/header_iomanip.cc\n+\t* 17_intro/header_ios.cc\n+\t* 17_intro/header_iosfwd.cc\n+\t* 17_intro/header_iostream.cc\n+\t* 17_intro/header_istream.cc\n+\t* 17_intro/header_ostream.cc\n+\t* 17_intro/headers.cc\n+\t* 17_intro/headers_c++_c++0x_compat.cc\n+\t* 17_intro/headers_c.cc\n+\t* 17_intro/headers_c++.cc\n+\t* 17_intro/header_sstream.cc\n+\t* 17_intro/header_streambuf.cc\n+\t* 17_intro/no_assert_neg.cc\n+\t* 18_support/numeric_limits/sign.cc\n+\t* 18_support/numeric_limits/specialization.cc\n+\t* 20_util/memory/raw_storage_iterator.cc\n+\t* 21_strings/basic_string/1.cc\n+\t* 21_strings/basic_string/2.cc\n+\t* 22_locale/codecvt/1.cc\n+\t* 22_locale/codecvt/2.cc\n+\t* 22_locale/codecvt_byname/1.cc\n+\t* 22_locale/collate/1.cc\n+\t* 22_locale/collate/2.cc\n+\t* 22_locale/collate_byname/1.cc\n+\t* 22_locale/ctype/1.cc\n+\t* 22_locale/ctype_base/1.cc\n+\t* 22_locale/messages/1.cc\n+\t* 22_locale/messages/2.cc\n+\t* 22_locale/messages_byname/1.cc\n+\t* 22_locale/money_get/1.cc\n+\t* 22_locale/money_get/2.cc\n+\t* 22_locale/money_get/3.cc\n+\t* 22_locale/moneypunct/1.cc\n+\t* 22_locale/moneypunct/2.cc\n+\t* 22_locale/moneypunct/3.cc\n+\t* 22_locale/moneypunct_byname/1.cc\n+\t* 22_locale/money_put/1.cc\n+\t* 22_locale/money_put/2.cc\n+\t* 22_locale/money_put/3.cc\n+\t* 22_locale/num_get/1.cc\n+\t* 22_locale/num_get/2.cc\n+\t* 22_locale/num_get/3.cc\n+\t* 22_locale/numpunct/1.cc\n+\t* 22_locale/numpunct/2.cc\n+\t* 22_locale/numpunct_byname/1.cc\n+\t* 22_locale/num_put/1.cc\n+\t* 22_locale/num_put/2.cc\n+\t* 22_locale/num_put/3.cc\n+\t* 22_locale/time_get/1.cc\n+\t* 22_locale/time_get/2.cc\n+\t* 22_locale/time_put/1.cc\n+\t* 22_locale/time_put/2.cc\n+\t* 23_containers/deque/1.cc\n+\t* 23_containers/deque/explicit_instantiation\n+\t* 23_containers/deque/explicit_instantiation/1.cc\n+\t* 23_containers/deque/explicit_instantiation/2.cc\n+\t* 23_containers/deque/explicit_instantiation/3.cc\n+\t* 23_containers/list/1.cc\n+\t* 23_containers/list/explicit_instantiation\n+\t* 23_containers/list/explicit_instantiation/1.cc\n+\t* 23_containers/list/explicit_instantiation/2.cc\n+\t* 23_containers/list/explicit_instantiation/3.cc\n+\t* 23_containers/map/1.cc\n+\t* 23_containers/map/explicit_instantiation\n+\t* 23_containers/map/explicit_instantiation/1.cc\n+\t* 23_containers/map/explicit_instantiation/2.cc\n+\t* 23_containers/map/explicit_instantiation/3.cc\n+\t* 23_containers/multimap/1.cc\n+\t* 23_containers/multimap/explicit_instantiation\n+\t* 23_containers/multimap/explicit_instantiation/1.cc\n+\t* 23_containers/multimap/explicit_instantiation/2.cc\n+\t* 23_containers/multimap/explicit_instantiation/3.cc\n+\t* 23_containers/multiset/1.cc\n+\t* 23_containers/multiset/explicit_instantiation\n+\t* 23_containers/multiset/explicit_instantiation/1.cc\n+\t* 23_containers/multiset/explicit_instantiation/2.cc\n+\t* 23_containers/multiset/explicit_instantiation/3.cc\n+\t* 23_containers/set/1.cc\n+\t* 23_containers/set/explicit_instantiation\n+\t* 23_containers/set/explicit_instantiation/1.cc\n+\t* 23_containers/set/explicit_instantiation/2.cc\n+\t* 23_containers/set/explicit_instantiation/3.cc\n+\t* 23_containers/vector/1.cc\n+\t* 23_containers/vector/explicit_instantiation\n+\t* 23_containers/vector/explicit_instantiation/1.cc\n+\t* 23_containers/vector/explicit_instantiation/2.cc\n+\t* 23_containers/vector/explicit_instantiation/3.cc\n+\t* 24_iterators/26020.cc\n+\t* 24_iterators/back_insert_iterator.cc\n+\t* 24_iterators/front_insert_iterator.cc\n+\t* 24_iterators/insert_iterator.cc\n+\t* 24_iterators/istreambuf_iterator/1.cc\n+\t* 24_iterators/istream_iterator.cc\n+\t* 24_iterators/iterator.cc\n+\t* 24_iterators/ostreambuf_iterator/1.cc\n+\t* 24_iterators/ostream_iterator.cc\n+\t* 24_iterators/reverse_iterator/1.cc\n+\t* 26_numerics/cmath\n+\t* 26_numerics/cmath/19322.cc\n+\t* 26_numerics/cmath/c99_classification_macros_c.cc\n+\t* 26_numerics/cmath/c99_classification_macros_c++.cc\n+\t* 26_numerics/cmath/c_math.cc\n+\t* 26_numerics/cmath/c_math_dynamic.cc\n+\t* 26_numerics/cmath/fabs_inline.cc\n+\t* 26_numerics/cmath/overloads.cc\n+\t* 26_numerics/cmath/powi.cc\n+\t* 26_numerics/cstdlib\n+\t* 26_numerics/cstdlib/13943.cc\n+\t* 26_numerics/numeric\n+\t* 26_numerics/numeric/sum_diff.cc\n+\t* 26_numerics/valarray\n+\t* 26_numerics/valarray/27867.cc\n+\t* 26_numerics/valarray/28277.cc\n+\t* 26_numerics/valarray/30416.cc\n+\t* 26_numerics/valarray/binary_closure.cc\n+\t* 26_numerics/valarray/dr543.cc\n+\t* 26_numerics/valarray/slice_array_assignment.cc\n+\t* 26_numerics/valarray/slice.cc\n+\t* 26_numerics/valarray/valarray.cc\n+\t* 26_numerics/valarray/valarray_const_bracket.cc\n+\t* 26_numerics/valarray/valarray_name_lookup.cc\n+\t* 26_numerics/valarray/valarray_operators.cc\n+\t* 26_numerics/valarray/valarray_subset_assignment.cc\n+\t* 27_io/basic_filebuf/1.cc\n+\t* 27_io/basic_filebuf/2.cc\n+\t* 27_io/basic_filebuf/3.cc\n+\t* 27_io/basic_filebuf/4.cc\n+\t* 27_io/basic_fstream/1.cc\n+\t* 27_io/basic_fstream/2.cc\n+\t* 27_io/basic_fstream/3.cc\n+\t* 27_io/basic_fstream/4.cc\n+\t* 27_io/basic_ifstream/1.cc\n+\t* 27_io/basic_ifstream/2.cc\n+\t* 27_io/basic_ifstream/3.cc\n+\t* 27_io/basic_ifstream/4.cc\n+\t* 27_io/basic_ios/1.cc\n+\t* 27_io/basic_ios/2.cc\n+\t* 27_io/basic_ios/3.cc\n+\t* 27_io/basic_ios/4.cc\n+\t* 27_io/basic_iostream/1.cc\n+\t* 27_io/basic_iostream/2.cc\n+\t* 27_io/basic_iostream/3.cc\n+\t* 27_io/basic_iostream/4.cc\n+\t* 27_io/basic_istream/1.cc\n+\t* 27_io/basic_istream/2.cc\n+\t* 27_io/basic_istream/3.cc\n+\t* 27_io/basic_istream/4.cc\n+\t* 27_io/basic_istringstream/1.cc\n+\t* 27_io/basic_istringstream/2.cc\n+\t* 27_io/basic_istringstream/3.cc\n+\t* 27_io/basic_istringstream/4.cc\n+\t* 27_io/basic_ofstream/1.cc\n+\t* 27_io/basic_ofstream/2.cc\n+\t* 27_io/basic_ofstream/3.cc\n+\t* 27_io/basic_ofstream/4.cc\n+\t* 27_io/basic_ostream/1.cc\n+\t* 27_io/basic_ostream/2.cc\n+\t* 27_io/basic_ostream/3.cc\n+\t* 27_io/basic_ostream/4.cc\n+\t* 27_io/basic_ostringstream/1.cc\n+\t* 27_io/basic_ostringstream/2.cc\n+\t* 27_io/basic_ostringstream/3.cc\n+\t* 27_io/basic_ostringstream/4.cc\n+\t* 27_io/basic_streambuf/1.cc\n+\t* 27_io/basic_streambuf/2.cc\n+\t* 27_io/basic_streambuf/3.cc\n+\t* 27_io/basic_stringbuf/1.cc\n+\t* 27_io/basic_stringbuf/2.cc\n+\t* 27_io/basic_stringbuf/3.cc\n+\t* 27_io/basic_stringbuf/4.cc\n+\t* 27_io/basic_stringbuf/5.cc\n+\t* 27_io/basic_stringstream/1.cc\n+\t* 27_io/basic_stringstream/2.cc\n+\t* 27_io/basic_stringstream/3.cc\n+\t* 27_io/basic_stringstream/4.cc\n+\t* 27_io/fpos/1.cc\n+\t* ext/debug_allocator/instantiate.cc\n+\t* ext/hash_map/instantiate.cc\n+\t* ext/hash_set/instantiate.cc\n+\t* ext/malloc_allocator/instantiate.cc\n+\t* ext/mt_allocator/instantiate.cc\n+\t* ext/pool_allocator/instantiate.cc\n+\t* ext/slist/instantiate.cc\n+\t* ext/stdio_filebuf/char/1.cc\n+\t* ext/vstring/explicit_instantiation\n+\t* ext/vstring/explicit_instantiation/1.cc\n+\t* ext/vstring/explicit_instantiation/2.cc\n+\t* ext/vstring/explicit_instantiation/char\n+\t* ext/vstring/explicit_instantiation/char/1.cc\n+\t* ext/vstring/explicit_instantiation/wchar_t\n+\t* ext/vstring/explicit_instantiation/wchar_t/1.cc\n+\t* tr1/2_general_utilities/memory/enable_shared_from_this/\n+\texplicit_instantiation\n+\t* tr1/2_general_utilities/memory/enable_shared_from_this/\n+\texplicit_instantiation/1.cc\n+\t* tr1/2_general_utilities/memory/shared_ptr/explicit_instantiation\n+\t* tr1/2_general_utilities/memory/shared_ptr/explicit_instantiation/1.cc\n+\t* tr1/2_general_utilities/memory/weak_ptr/explicit_instantiation\n+\t* tr1/2_general_utilities/memory/weak_ptr/explicit_instantiation/1.cc\n+\t* tr1/5_numerical_facilities/random/discard_block/requirements/\n+\trequirements.cc\n+\t* tr1/6_containers/array/requirements/instantiate.cc\n+\t* tr1/6_containers/unordered\n+\t* tr1/6_containers/unordered/23781.cc\n+\t* tr1/6_containers/unordered/capacity\n+\t* tr1/6_containers/unordered/capacity/29134-map.cc\n+\t* tr1/6_containers/unordered/capacity/29134-multimap.cc\n+\t* tr1/6_containers/unordered/capacity/29134-multiset.cc\n+\t* tr1/6_containers/unordered/capacity/29134-set.cc\n+\t* tr1/6_containers/unordered/erase\n+\t* tr1/6_containers/unordered/erase/24061-map.cc\n+\t* tr1/6_containers/unordered/erase/24061-multimap.cc\n+\t* tr1/6_containers/unordered/erase/24061-multiset.cc\n+\t* tr1/6_containers/unordered/erase/24061-set.cc\n+\t* tr1/6_containers/unordered/find\n+\t* tr1/6_containers/unordered/find/map1.cc\n+\t* tr1/6_containers/unordered/find/multimap1.cc\n+\t* tr1/6_containers/unordered/find/multiset1.cc\n+\t* tr1/6_containers/unordered/find/set1.cc\n+\t* tr1/6_containers/unordered/hash\n+\t* tr1/6_containers/unordered/hash/24799.cc\n+\t* tr1/6_containers/unordered/hashtable\n+\t* tr1/6_containers/unordered/hashtable/23053.cc\n+\t* tr1/6_containers/unordered/hashtable/23465.cc\n+\t* tr1/6_containers/unordered/hashtable/24054.cc\n+\t* tr1/6_containers/unordered/hashtable/24064.cc\n+\t* tr1/6_containers/unordered/hashtable/26127.cc\n+\t* tr1/6_containers/unordered/hashtable/26132.cc\n+\t* tr1/6_containers/unordered/hashtable/iterators_default_constructor.cc\n+\t* tr1/6_containers/unordered/insert\n+\t* tr1/6_containers/unordered/insert/24061-map.cc\n+\t* tr1/6_containers/unordered/insert/24061-multimap.cc\n+\t* tr1/6_containers/unordered/insert/24061-multiset.cc\n+\t* tr1/6_containers/unordered/insert/24061-set.cc\n+\t* tr1/6_containers/unordered/insert/array_syntax.cc\n+\t* tr1/6_containers/unordered/insert/map_range.cc\n+\t* tr1/6_containers/unordered/insert/map_single.cc\n+\t* tr1/6_containers/unordered/insert/multimap_range.cc\n+\t* tr1/6_containers/unordered/insert/multimap_single.cc\n+\t* tr1/6_containers/unordered/insert/multiset_range.cc\n+\t* tr1/6_containers/unordered/insert/multiset_single.cc\n+\t* tr1/6_containers/unordered/insert/set_range.cc\n+\t* tr1/6_containers/unordered/insert/set_single.cc\n+\t* tr1/6_containers/unordered/instantiate\n+\t* tr1/6_containers/unordered/instantiate/hash.cc\n+\t* tr1/6_containers/unordered/instantiate/map.cc\n+\t* tr1/6_containers/unordered/instantiate/multimap.cc\n+\t* tr1/6_containers/unordered/instantiate/multiset.cc\n+\t* tr1/6_containers/unordered/instantiate/set.cc\n+\t* tr1/6_containers/unordered/swap\n+\t* tr1/6_containers/unordered/swap/unordered_map\n+\t* tr1/6_containers/unordered/swap/unordered_map/1.cc\n+\t* tr1/6_containers/unordered/swap/unordered_map/2.cc\n+\t* tr1/6_containers/unordered/swap/unordered_multimap\n+\t* tr1/6_containers/unordered/swap/unordered_multimap/1.cc\n+\t* tr1/6_containers/unordered/swap/unordered_multimap/2.cc\n+\t* tr1/6_containers/unordered/swap/unordered_multiset\n+\t* tr1/6_containers/unordered/swap/unordered_multiset/1.cc\n+\t* tr1/6_containers/unordered/swap/unordered_multiset/2.cc\n+\t* tr1/6_containers/unordered/swap/unordered_set\n+\t* tr1/6_containers/unordered/swap/unordered_set/1.cc\n+\t* tr1/6_containers/unordered/swap/unordered_set/2.cc\n+\t* tr1/6_containers/unordered/types\n+\t* tr1/6_containers/unordered/types/map_iterator.cc\n+\t* tr1/6_containers/unordered/types/multimap_iterator.cc\n+\t* tr1/6_containers/unordered/types/multiset_iterator.cc\n+\t* tr1/6_containers/unordered/types/set_iterator.cc\n+\n+\t* 24_iterators/reverse_iterator/2.cc: To just one\n+\tnon-requirements test.\n+\t* ext/headers.cc: Add new includes.\n+\t\n 2007-02-18  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/28080 (partial)"}, {"sha": "850e58b2a4c1502ab6de7828071326b4347c948f", "filename": "libstdc++-v3/testsuite/17_intro/header_cwctype.cc", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc?ref=32ec65429c2d4b176bccc495682b1b37b3d31b7c", "patch": "@@ -1,54 +0,0 @@\n-// 2000-01-03 bkoz\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 17.4.1.2 Headers, cwctype\n-\n-#if _GLIBCXX_USE_WCHAR_T\n-#include <cwctype>\n-// Make sure wint_t is in namespace std\n-std::wint_t i = 5;\n-\n-// Make sure table 46 is in namespace std.\n-using std::wctype_t;\n-using std::wctrans_t;\n-using std::iswalpha;\n-using std::iswupper;\n-using std::iswlower;\n-using std::iswdigit;\n-using std::iswxdigit;\n-using std::iswalnum;\n-using std::iswspace;\n-using std::iswpunct;\n-using std::iswprint;\n-using std::iswgraph;\n-using std::iswcntrl;\n-using std::iswctype;\n-using std::towctrans;\n-using std::towlower;\n-using std::towupper;\n-using std::wctrans;\n-using std::wctype;\n-#endif\n-\n-int main(void)\n-{\n-  return 0;\n-}\n-"}, {"sha": "c0ef4bfa5f2a9d30c4b6767db6c1dd9cda433b17", "filename": "libstdc++-v3/testsuite/17_intro/headers/all.cc", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,145 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// Make sure all the includes can be compiled with -Wc++0x-compat\n+// libstdc++/30571\n+\n+// C\n+#include <cassert>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfloat>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstddef>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctime>\n+\n+// C++\n+#include <algorithm>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <typeinfo>\n+#include <utility>\n+#include <valarray>\n+#include <vector>\n+\n+// TR1\n+#include <tr1/array>\n+#include <tr1/cctype>\n+#include <tr1/cfenv>\n+#include <tr1/cfloat>\n+#include <tr1/cinttypes>\n+#include <tr1/climits>\n+#include <tr1/cmath>\n+#include <tr1/complex>\n+#include <tr1/cstdarg>\n+#include <tr1/cstdbool>\n+#include <tr1/cstdint>\n+#include <tr1/cstdio>\n+#include <tr1/cstdlib>\n+#include <tr1/ctgmath>\n+#include <tr1/ctime>\n+#include <tr1/cwchar>\n+#include <tr1/cwctype>\n+#include <tr1/functional>\n+#include <tr1/random>\n+#include <tr1/tuple>\n+#include <tr1/unordered_map>\n+#include <tr1/unordered_set>\n+#include <tr1/utility>\n+\n+// Extensions\n+#include <ext/algorithm>\n+#include <ext/array_allocator.h>\n+#include <ext/atomicity.h>\n+#include <ext/bitmap_allocator.h>\n+#include <ext/codecvt_specializations.h>\n+#include <ext/concurrence.h>\n+#include <ext/debug_allocator.h>\n+#include <ext/enc_filebuf.h>\n+#include <ext/functional>\n+#include <ext/hash_map>\n+#include <ext/hash_set>\n+#include <ext/iterator>\n+#include <ext/malloc_allocator.h>\n+#include <ext/memory>\n+#include <ext/mt_allocator.h>\n+#include <ext/new_allocator.h>\n+#include <ext/numeric>\n+#include <ext/pod_char_traits.h>\n+#include <ext/pool_allocator.h>\n+#include <ext/rb_tree>\n+#include <ext/rope>\n+#include <ext/slist>\n+#include <ext/stdio_filebuf.h>\n+#include <ext/stdio_sync_filebuf.h>\n+#include <ext/throw_allocator.h>\n+#include <ext/typelist.h>\n+#include <ext/type_traits.h>\n+#include <ext/vstring.h>\n+#include <ext/pb_ds/assoc_container.hpp>\n+#include <ext/pb_ds/priority_queue.hpp>\n+#include <ext/pb_ds/exception.hpp>\n+#include <ext/pb_ds/hash_policy.hpp>\n+#include <ext/pb_ds/list_update_policy.hpp>\n+#include <ext/pb_ds/tree_policy.hpp>\n+#include <ext/pb_ds/trie_policy.hpp>"}, {"sha": "d259c2c6ac15472c67c5de9f7d337146641c4465", "filename": "libstdc++-v3/testsuite/17_intro/headers/all_assert_neg.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_assert_neg.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/17_intro/no_assert_neg.cc"}, {"sha": "1052cd7cf26e43971193fb82b680a79a4a335c3e", "filename": "libstdc++-v3/testsuite/17_intro/headers/all_c++200x_compatibility.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_c%2B%2B200x_compatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_c%2B%2B200x_compatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_c%2B%2B200x_compatibility.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/17_intro/headers_c++_c++0x_compat.cc"}, {"sha": "2704e491f4d52ae6ab7ec4daf55df9adbf390814", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++1998/all.cc", "status": "renamed", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 1999-05-12 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,6 +24,45 @@\n \n // 17.4.1.2 Headers\n \n+// \"C\" headers\n+#include <cassert>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfloat>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstddef>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctime>\n+#include <cwchar>\n+#include <cwctype>\n+\n+// \"C\" compatibility headers\n+#include <assert.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <float.h>\n+#include <iso646.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdarg.h>\n+#include <stddef.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <wchar.h>\n+#include <wctype.h>\n \n // \"C++\" headers\n #include <algorithm>\n@@ -58,29 +98,3 @@\n #include <valarray>\n #include <vector>\n \n-// \"C\" headers\n-#include <cassert>\n-#include <cctype>\n-#include <cerrno>\n-#include <cfloat>\n-#include <ciso646>\n-#include <climits>\n-#include <clocale>\n-#include <cmath>\n-#include <csetjmp>\n-#include <csignal>\n-#include <cstdarg>\n-#include <cstddef>\n-#include <cstdio>\n-#include <cstdlib>\n-#include <cstring>\n-#include <ctime>\n-\n-// \"C\" headers that might not work if wchar_t support is disabled.\n-#include <bits/c++config.h>\n-#if _GLIBCXX_USE_WCHAR_T\n-  #include <cwchar>\n-  #include <cwctype>\n-#endif\n-\n-int main() { return 0; }", "previous_filename": "libstdc++-v3/testsuite/17_intro/headers.cc"}, {"sha": "a1cb289039a063e6516580d1c166cbeb981905f1", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++1998/all_multiple_inclusion.cc", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall_multiple_inclusion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall_multiple_inclusion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fall_multiple_inclusion.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,174 @@\n+// { dg-do compile }\n+// 1999-05-12 bkoz\n+\n+// Copyright (C) 1999, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// FreeBSD wants warning clean system headers:\n+// { dg-options \"-Wall -Wsystem-headers\" { target *-*-freebsd* } }\n+\n+// 17.4.1.2 Headers\n+\n+// \"C\" headers\n+#include <cassert>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfloat>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstddef>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctime>\n+#include <cwchar>\n+#include <cwctype>\n+\n+// \"C\" compatibility headers\n+#include <assert.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <float.h>\n+#include <iso646.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdarg.h>\n+#include <stddef.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <wchar.h>\n+#include <wctype.h>\n+\n+// \"C++\" headers\n+#include <algorithm>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <typeinfo>\n+#include <utility>\n+#include <valarray>\n+#include <vector>\n+\n+\n+// \"C\" headers\n+#include <cassert>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfloat>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstddef>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctime>\n+#include <cwchar>\n+#include <cwctype>\n+\n+// \"C\" compatibility headers\n+#include <assert.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <float.h>\n+#include <iso646.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdarg.h>\n+#include <stddef.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <wchar.h>\n+#include <wctype.h>\n+\n+// \"C++\" headers\n+#include <algorithm>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <typeinfo>\n+#include <utility>\n+#include <valarray>\n+#include <vector>"}, {"sha": "bbe7c5aac89f70f75bfefc263466a66d09a083c3", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++1998/c++.tar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fc%2B%2B.tar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fc%2B%2B.tar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fc%2B%2B.tar?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3"}, {"sha": "9f25ab9b2d083c0c06c56aee4c994a3fd9176af4", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++1998/c++_for_c.tar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fc%2B%2B_for_c.tar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fc%2B%2B_for_c.tar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fc%2B%2B_for_c.tar?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3"}, {"sha": "03c902a32171033e13bedd12ef3704cc13d28355", "filename": "libstdc++-v3/testsuite/17_intro/headers_c++.cc", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc?ref=32ec65429c2d4b176bccc495682b1b37b3d31b7c", "patch": "@@ -1,84 +0,0 @@\n-// 2001-01-01 bkoz\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 17.4.1.2 Headers\n-\n-// This file tests C++ inclusion then C inclusion.\n-\n-// C++ headers\n-#include <cassert>\n-#include <cctype>\n-#include <cerrno>\n-#include <cfloat>\n-#include <ciso646>\n-#include <climits>\n-#include <clocale>\n-#include <cmath>\n-#include <csetjmp>\n-#include <csignal>\n-#include <cstdarg>\n-#include <cstddef>\n-#include <cstdio>\n-#include <cstdlib>\n-#include <cstring>\n-#include <ctime>\n-\n-// \"C\" headers\n-#include <assert.h>\n-#include <ctype.h>\n-#include <errno.h>\n-#include <float.h>\n-#include <iso646.h>\n-#include <limits.h>\n-#include <locale.h>\n-#include <math.h>\n-#include <setjmp.h>\n-#include <signal.h>\n-#include <stdarg.h>\n-#include <stddef.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <time.h>\n-\n-// \"C++\" headers that might not work if wchar_t support is disabled.\n-#include <bits/c++config.h>\n-#if _GLIBCXX_USE_WCHAR_T\n-  #include <cwchar>\n-  #include <cwctype>\n-  #include <wchar.h>\n-  #include <wctype.h>\n-#endif\n-\n-// libstdc++/2992\n-namespace bar\n-{\n-  int foo(const char *x)\n-  { return strlen(x); }\n-};\n-\n-\n-int main() { return 0; }\n-\n-\n-\n-\n-\n-"}, {"sha": "369639c49cc009feec56e536671f5ccf808ff4ef", "filename": "libstdc++-v3/testsuite/17_intro/headers_c.cc", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc?ref=32ec65429c2d4b176bccc495682b1b37b3d31b7c", "patch": "@@ -1,78 +0,0 @@\n-// 2000-12-20 bkoz\n-\n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 17.4.1.2 Headers\n-\n-// This file tests C inclusion then C++ inclusion.\n-\n-// \"C\" headers\n-#include <assert.h>\n-#include <ctype.h>\n-#include <errno.h>\n-#include <float.h>\n-#include <iso646.h>\n-#include <limits.h>\n-#include <locale.h>\n-#include <math.h>\n-#include <setjmp.h>\n-#include <signal.h>\n-#include <stdarg.h>\n-#include <stddef.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <time.h>\n-\n-// C++ headers\n-#include <cassert>\n-#include <cctype>\n-#include <cerrno>\n-#include <cfloat>\n-#include <ciso646>\n-#include <climits>\n-#include <clocale>\n-#include <cmath>\n-#include <csetjmp>\n-#include <csignal>\n-#include <cstdarg>\n-#include <cstddef>\n-#include <cstdio>\n-#include <cstdlib>\n-#include <cstring>\n-#include <ctime>\n-\n-// \"C\" headers that might not work if wchar_t support is disabled.\n-#include <bits/c++config.h>\n-#if _GLIBCXX_USE_WCHAR_T\n-  #include <wchar.h>\n-  #include <wctype.h>\n-  #include <cwchar>\n-  #include <cwctype>\n-#endif\n-\n-// libstdc++/2992\n-namespace bar\n-{\n-  int foo(const char *x)\n-  { return strlen(x); }\n-};\n-\n-\n-int main() { return 0; }"}, {"sha": "26a2c6544e7a0927a52eeff91ecfb7366b63cfb3", "filename": "libstdc++-v3/testsuite/17_intro/using_namespace_std.cc", "status": "renamed", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 1999-07-01 bkoz\n+// { dg-do compile }\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,13 +18,9 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, ios\n+#include <new>\n \n-#include <ios>\n-#include <testsuite_hooks.h>\n-\n-\n-int main(void)\n+namespace gnu\n {\n-  return 0;\n+  using namespace std;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_ios.cc"}, {"sha": "7a06a68e71cd16f253f8142f74505592b35a8217", "filename": "libstdc++-v3/testsuite/18_support/headers/cfloat/values.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcfloat%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcfloat%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcfloat%2Fvalues.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cfloat>\n+\n+namespace gnu\n+{\n+  double d1 = DBL_DIG;\n+  double d2 = DBL_EPSILON;\n+  double d3 = DBL_MANT_DIG;\n+  double d4 = DBL_MAX;\n+  double d5 = DBL_MAX_10_EXP;\n+  double d6 = DBL_MAX_EXP;\n+  double d7 = DBL_MIN;\n+  double d8 = DBL_MIN_10_EXP;\n+  double d9 = DBL_MIN_EXP;\n+\n+  float f1 = FLT_DIG;\n+  float f2 = FLT_EPSILON;\n+  float f3 = FLT_MANT_DIG;\n+  float f4 = FLT_MAX;\n+  float f5 = FLT_MAX_10_EXP;\n+  float f6 = FLT_MAX_EXP;\n+  float f7 = FLT_MIN;\n+  float f8 = FLT_MIN_10_EXP;\n+  float f9 = FLT_MIN_EXP;\n+\n+  long double ld1 = LDBL_DIG;\n+  long double ld2 = LDBL_EPSILON;\n+  long double ld3 = LDBL_MANT_DIG;\n+  long double ld4 = LDBL_MAX;\n+  long double ld5 = LDBL_MAX_10_EXP;\n+  long double ld6 = LDBL_MAX_EXP;\n+  long double ld7 = LDBL_MIN;\n+  long double ld8 = LDBL_MIN_10_EXP;\n+  long double ld9 = LDBL_MIN_EXP;\n+}"}, {"sha": "2d15600c82bebdc21e85642c0e55095883281dce", "filename": "libstdc++-v3/testsuite/18_support/headers/climits/values.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fclimits%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fclimits%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fclimits%2Fvalues.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <climits>\n+\n+namespace gnu\n+{\n+  // char\n+  char c1 = CHAR_BIT;\n+  char c2 = CHAR_MAX;\n+  char c3 = CHAR_MIN;\n+\n+  // int\n+  int i2 = INT_MAX;\n+  int i3 = INT_MIN;\n+\n+  // short\n+  short s2 = SHRT_MAX;\n+  short s3 = SHRT_MIN;\n+\n+  // long\n+  long l2 = LONG_MAX;\n+  long l3 = LONG_MIN;\n+\n+  unsigned long mb = MB_LEN_MAX;\n+\n+  // signed char\n+  signed char sc1 = SCHAR_MIN;\n+  signed char sc2 = SCHAR_MAX;\n+\n+  // unsigned\n+  unsigned int ui = UINT_MAX;\n+  unsigned short us = USHRT_MAX;\n+  unsigned long ul = ULONG_MAX;\n+\n+}"}, {"sha": "d0a24948d742aa4b7e1291b6a69c2d7a74e0f561", "filename": "libstdc++-v3/testsuite/18_support/headers/csetjmp/functions_std.cc", "status": "renamed", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 1999-07-01 bkoz\n+// { dg-do compile }\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,13 +18,9 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, iomanip\n+#include <csetjmp>\n \n-#include <iomanip>\n-#include <testsuite_hooks.h>\n-\n-\n-int main(void)\n+namespace gnu\n {\n-  return 0;\n+  using std::longjmp;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_iomanip.cc"}, {"sha": "01a90130ced3eb4ecc085b7e3762a0b27d131f6d", "filename": "libstdc++-v3/testsuite/18_support/headers/csetjmp/macros.cc", "status": "renamed", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 1999-07-01 bkoz\n+// { dg-do compile }\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,13 +18,11 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, fstream\n+#include <csetjmp>\n \n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-\n-int main(void)\n+namespace gnu\n {\n-  return 0;\n+#ifndef setjmp\n+    #error \"setjmp_must_be_a_macro\"\n+#endif\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_fstream.cc"}, {"sha": "ecf7f6650f872dad168f6871deb84382a370100c", "filename": "libstdc++-v3/testsuite/18_support/headers/csetjmp/types_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsetjmp%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <csetjmp>\n+\n+namespace gnu\n+{\n+  std::jmp_buf j;\n+}"}, {"sha": "6823376de47d9e2a6f7d006798be31720e11d0f5", "filename": "libstdc++-v3/testsuite/18_support/headers/csignal/functions_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <csignal>\n+\n+namespace gnu\n+{\n+  using std::raise;\n+  using std::signal;\n+}"}, {"sha": "884261173a745e02695506e2146286dafcc47f5f", "filename": "libstdc++-v3/testsuite/18_support/headers/csignal/macros.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <csignal>\n+\n+namespace gnu\n+{\n+#ifndef SIGABRT\n+    #error \"SIGABRT_must_be_a_macro\"\n+#endif\n+\n+#ifndef SIGILL\n+    #error \"SIGILL_must_be_a_macro\"\n+#endif\n+\n+#ifndef SIGSEGV\n+    #error \"SIGSEGV_must_be_a_macro\"\n+#endif\n+\n+#ifndef SIG_DFL\n+    #error \"SIG_DFL_must_be_a_macro\"\n+#endif\n+\n+#ifndef SIGFPE\n+    #error \"SIGFPE_must_be_a_macro\"\n+#endif\n+\n+#ifndef SIGINT\n+    #error \"SIGINT_must_be_a_macro\"\n+#endif\n+\n+#ifndef SIGTERM\n+    #error \"SIGTERM_must_be_a_macro\"\n+#endif\n+\n+#ifndef SIG_ERR\n+    #error \"SIG_ERR_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "75627271a7398bda77e19011ce41f7a4640fb5b5", "filename": "libstdc++-v3/testsuite/18_support/headers/csignal/types_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcsignal%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <csignal>\n+\n+namespace gnu\n+{\n+  std::sig_atomic_t s;\n+}"}, {"sha": "add2f90191adb2747942adb4694b916145a64282", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdarg/macros.cc", "status": "renamed", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdarg%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdarg%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdarg%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,29 +18,19 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, cstdarg\n-\n #include <cstdarg>\n \n namespace gnu\n {\n-  void test01()\n-  { \n-    std::va_list __attribute__((unused)) list;\n #ifndef va_arg\n     #error \"va_arg_must_be_a_macro\"\n #endif\n-#ifndef va_end\n-    #error \"va_end_must_be_a_macro\"\n-#endif\n+\n #ifndef va_start\n     #error \"va_start_must_be_a_macro\"\n #endif\n-  }\n-}\n-  \n-int main()\n-{\n-  gnu::test01();\n-  return 0;\n+\n+#ifndef va_end\n+    #error \"va_end_must_be_a_macro\"\n+#endif\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cstdarg.cc"}, {"sha": "52151524d778507767d417f63282e2142c1862a7", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdarg/types_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdarg%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdarg%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdarg%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdarg>\n+\n+namespace gnu\n+{\n+  std::va_list v;\n+}"}, {"sha": "4751d161e8e9949f9c8e7ea9eacb110829f334fb", "filename": "libstdc++-v3/testsuite/18_support/headers/cstddef/macros.cc", "status": "renamed", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstddef%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstddef%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstddef%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,8 +19,6 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, cstddef\n-\n #include <cstddef>\n \n namespace gnu\n@@ -30,17 +29,23 @@ namespace gnu\n     int j;\n   };\n \n+  // offsetof\n   void test01()\n   { \n     std::size_t i __attribute__((unused)) = offsetof(struct test_type, i);\n #ifndef offsetof\n     #error \"offsetof_must_be_a_macro\"\n #endif\n   }\n-}\n-  \n-int main()\n-{\n-  gnu::test01();\n-  return 0;\n+\n+  // NULL\n+  void test02()\n+  {\n+    // Must not be (void*)0\n+    const int j = NULL;\n+\n+#ifndef NULL\n+    #error \"NULL_must_be_a_macro\"\n+#endif\n+  }\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cstddef.cc"}, {"sha": "a00dd1640e0867479fcf154555da577906471bf7", "filename": "libstdc++-v3/testsuite/18_support/headers/cstddef/types_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstddef%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstddef%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstddef%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstddef>\n+\n+namespace gnu\n+{\n+  std::size_t s;\n+  std::ptrdiff_t p;\n+}"}, {"sha": "9956158a9bf3c64bb56d3ad12d6020f693c37481", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdlib/functions_std.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+namespace gnu\n+{\n+  using std::abort;\n+  using std::atexit;\n+  using std::exit;\n+\n+  using std::getenv;\n+  using std::system;\n+}"}, {"sha": "419ee7451e4cda0628b4bc01b1e6804069890fb9", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdlib/macros.cc", "status": "renamed", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,23 +19,15 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, cassert\n-\n-#include <cassert>\n+#include <cstddef>\n \n namespace gnu\n {\n-  void test01()\n-  { \n-    assert (true);\n-#ifndef assert\n-    #error \"assert_must_be_a_macro\"\n+#ifndef EXIT_FAILURE\n+    #error \"EXIT_FAILURE_must_be_a_macro\"\n+#endif\n+\n+#ifndef EXIT_SUCCESS\n+    #error \"EXIT_SUCCESS_must_be_a_macro\"\n #endif\n-  }\n-}\n-  \n-int main()\n-{\n-  gnu::test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cassert.cc"}, {"sha": "5a7e56d679ef5273b9a8a796ef096965cc95c428", "filename": "libstdc++-v3/testsuite/18_support/headers/ctime/functions_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ctime>\n+\n+namespace gnu\n+{\n+  using std::clock;\n+}"}, {"sha": "de923816fd094d0666e61d03b79c3399ee37f431", "filename": "libstdc++-v3/testsuite/18_support/headers/ctime/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ctime>\n+\n+namespace gnu\n+{\n+#ifndef CLOCKS_PER_SEC\n+    #error \"CLOCKS_PER_SEC_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "c0168af19fb1c235c86054773a51c1d4b8fc23b0", "filename": "libstdc++-v3/testsuite/18_support/headers/ctime/types_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fctime%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ctime>\n+\n+namespace gnu\n+{\n+  std::clock_t c;\n+}"}, {"sha": "24585ee4d61c9c3a612673074a4758bb585a6e7d", "filename": "libstdc++-v3/testsuite/18_support/headers/exception/synopsis.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <exception>\n+\n+namespace std {\n+  class exception;\n+  class bad_exception;\n+\n+  typedef void (*unexpected_handler)();\n+  unexpected_handler set_unexpected(unexpected_handler  f ) throw();\n+  void unexpected();\n+\n+  typedef void (*terminate_handler)();\n+  terminate_handler set_terminate(terminate_handler  f ) throw();\n+  void terminate();\n+\n+  bool uncaught_exception() throw();\n+}"}, {"sha": "467f68a3ed1f103fcf18bf362efda1944f954b3e", "filename": "libstdc++-v3/testsuite/18_support/headers/exception/types_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <exception>\n+\n+namespace gnu\n+{\n+  typedef std::exception t1;\n+  typedef std::bad_exception t2;\n+}"}, {"sha": "a0db1d943620c71dd0eee4dfb374694c03c48645", "filename": "libstdc++-v3/testsuite/18_support/headers/limits/synopsis.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Flimits%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Flimits%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Flimits%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <limits>\n+\n+namespace std {\n+  template<class T> class numeric_limits;\n+\n+#if 0\n+  enum float_round_style;\n+  enum float_denorm_style;\n+#endif\n+\n+  template<> class numeric_limits<bool>;\n+\n+  template<> class numeric_limits<char>;\n+  template<> class numeric_limits<signed char>;\n+  template<> class numeric_limits<unsigned char>;\n+  template<> class numeric_limits<wchar_t>;\n+\n+  template<> class numeric_limits<short>;\n+  template<> class numeric_limits<int>;\n+  template<> class numeric_limits<long>;\n+  template<> class numeric_limits<unsigned short>;\n+  template<> class numeric_limits<unsigned int>;\n+  template<> class numeric_limits<unsigned long>;\n+\n+  template<> class numeric_limits<float>;\n+  template<> class numeric_limits<double>;\n+  template<> class numeric_limits<long double>;\n+}"}, {"sha": "6d05bb402db79ec1cdd5525d7a914be654ffa61e", "filename": "libstdc++-v3/testsuite/18_support/headers/new/synopsis.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <new>\n+\n+namespace std {\n+  class bad_alloc;\n+  struct nothrow_t;\n+  extern const nothrow_t nothrow;\n+  typedef void (*new_handler)();\n+  new_handler set_new_handler(new_handler new_p) throw();\n+}\n+\n+void* operator new(std::size_t size) throw(std::bad_alloc);\n+void* operator new(std::size_t size, const std::nothrow_t&) throw();\n+void  operator delete(void* ptr) throw();\n+void  operator delete(void* ptr, const std::nothrow_t&) throw();\n+void* operator new[](std::size_t size) throw(std::bad_alloc);\n+void* operator new[](std::size_t size, const std::nothrow_t&) throw();\n+void  operator delete[](void* ptr) throw();\n+void  operator delete[](void* ptr, const std::nothrow_t&) throw();\n+\n+void* operator new  (std::size_t size, void* ptr) throw();\n+void* operator new[](std::size_t size, void* ptr) throw();\n+void  operator delete  (void* ptr, void*) throw();\n+void  operator delete[](void* ptr, void*) throw();"}, {"sha": "a0d2c4e941a1777516a6c630a5afff7a750318aa", "filename": "libstdc++-v3/testsuite/18_support/headers/new/types_std.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <new>\n+\n+namespace gnu\n+{\n+  typedef std::bad_alloc t1;\n+  typedef std::nothrow_t t2;\n+\n+  typedef std::new_handler t3;\n+}"}, {"sha": "7e8705516f24a75e79ff73b7e33b54e9b210e4fb", "filename": "libstdc++-v3/testsuite/18_support/headers/typeinfo/synopsis.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Ftypeinfo%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Ftypeinfo%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Ftypeinfo%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <typeinfo>\n+\n+namespace std {\n+  class type_info;\n+  class bad_cast;\n+  class bad_typeid;\n+}"}, {"sha": "8db903e993f8a75227da419abd79e327846c14f8", "filename": "libstdc++-v3/testsuite/18_support/headers/typeinfo/types_std.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Ftypeinfo%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Ftypeinfo%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Ftypeinfo%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <typeinfo>\n+\n+namespace gnu\n+{\n+  typedef std::type_info t1;\n+  typedef std::bad_cast t2;\n+\n+  typedef std::bad_typeid t3;\n+}"}, {"sha": "e6c5f1d8aca4e93445f5f42b7422c171673fafc7", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/is_signed.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fis_signed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fis_signed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fis_signed.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/18_support/numeric_limits/sign.cc"}, {"sha": "77856e9080f377b7e34b3bda27957ba701f52a8d", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <limits>\n+\n+template<typename T>\n+  struct A \n+  {\n+    int key;\n+  public:\n+    A(int i = 0): key(i) { }\n+    bool\n+    operator==(int i) { return i == key; }\n+  };\n+\n+struct B \n+{\n+  B(int = 0) { }\n+};\n+\n+// XXX Should this work for POD types?\n+template class std::numeric_limits<A<B> >;"}, {"sha": "0a1c8fec353d21bc24edb9fcdb5eb933fb80bc47", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/specialization_default_values.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization_default_values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization_default_values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization_default_values.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/18_support/numeric_limits/specialization.cc"}, {"sha": "822414c7cf97bbada9fea2cd9d1543647e03c2df", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/cassert/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fcassert%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fcassert%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fcassert%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cassert>\n+\n+namespace gnu\n+{\n+#ifndef assert\n+    #error \"assert_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "468d4a18c329dbb0c27ce8437b57adef9eb76146", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/cerrno/macros.cc", "status": "renamed", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fcerrno%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fcerrno%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fcerrno%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,24 +18,19 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, cerrno\n-\n-#include <cerrno>\n+#include <cassert>\n \n namespace gnu\n {\n-  int test01()\n-  { \n-    int i = errno;\n+#ifndef EDOM\n+    #error \"EDOM_must_be_a_macro\"\n+#endif\n+\n+#ifndef ERANGE\n+    #error \"ERANGE_must_be_a_macro\"\n+#endif\n+\n #ifndef errno\n     #error \"errno_must_be_a_macro\"\n #endif\n-    return i;\n-  }\n-}\n-  \n-int main()\n-{\n-  gnu::test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cerrno.cc"}, {"sha": "6be26e0e158d4eac474df25f662c3dd6a29a2c93", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/stdexcept/synopsis.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fstdexcept%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fstdexcept%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fstdexcept%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <stdexcept>\n+\n+namespace std {\n+  class logic_error;\n+  class domain_error;\n+  class invalid_argument;\n+  class length_error;\n+  class out_of_range;\n+  class runtime_error;\n+  class range_error;\n+  class overflow_error;\n+  class underflow_error;\n+}\n+"}, {"sha": "160c6911514ecad7942a515847e61197a37a1244", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/stdexcept/types_std.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fstdexcept%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fstdexcept%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fstdexcept%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <stdexcept>\n+\n+namespace gnu\n+{\n+  typedef std::logic_error t1;\n+  typedef std::domain_error t2;\n+  typedef std::invalid_argument t3;\n+  typedef std::length_error t4;\n+  typedef std::out_of_range t5;\n+  typedef std::runtime_error t6;\n+  typedef std::range_error t7;\n+  typedef std::overflow_error t8;\n+  typedef std::underflow_error t9;\n+}"}, {"sha": "7ac51ed09b7a3c011c06211663074ede8dd4fef6", "filename": "libstdc++-v3/testsuite/20_util/headers/cstdlib/functions_std.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstdlib%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+namespace gnu\n+{\n+  using std::calloc;\n+  using std::malloc;\n+  using std::free;\n+  using std::realloc;\n+}"}, {"sha": "f521d724c1e68a30e745bfa5008b263593da9fef", "filename": "libstdc++-v3/testsuite/20_util/headers/cstring/functions_std.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+\n+namespace gnu\n+{\n+  using std::memchr;\n+  using std::memcmp;\n+  using std::memcpy;\n+  using std::memmove;\n+  using std::memset;\n+}"}, {"sha": "c714d1607d7507b47249c4d88e06bb13360a3ccb", "filename": "libstdc++-v3/testsuite/20_util/headers/cstring/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+\n+namespace gnu\n+{\n+#ifndef NULL\n+    #error \"NULL_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "f554d5a20c21ea70b915d0b8c51442e9d7ddee3c", "filename": "libstdc++-v3/testsuite/20_util/headers/cstring/types_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fcstring%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+\n+namespace gnu\n+{\n+  std::size_t s;\n+}"}, {"sha": "ce381b2a459a852032f1e744b442438d69f7ff8e", "filename": "libstdc++-v3/testsuite/20_util/headers/ctime/functions_std.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ctime>\n+\n+namespace gnu\n+{\n+  using std::asctime;\n+  using std::clock;\n+  using std::difftime;\n+  using std::localtime;\n+  using std::strftime;\n+  using std::ctime;\n+  using std::gmtime;\n+  using std::mktime;\n+  using std::time;\n+}"}, {"sha": "7c7e1345809fa213c67e259bf66fca8058d3b779", "filename": "libstdc++-v3/testsuite/20_util/headers/ctime/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ctime>\n+\n+namespace gnu\n+{\n+#ifndef NULL\n+    #error \"NULL_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "ef0cab628401161479401d026537e666925bc330", "filename": "libstdc++-v3/testsuite/20_util/headers/ctime/types_std.cc", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fctime%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 1999-07-01 bkoz\n+// { dg-do compile }\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,13 +18,13 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, iosfwd\n+#include <ctime>\n \n-#include <iosfwd> \n-#include <testsuite_hooks.h>\n-\n-\n-int main(void)\n+namespace gnu\n {\n-  return 0;\n+  std::size_t s;\n+  std::clock_t c;\n+  std::time_t t;\n+\n+  std::tm t2;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_iosfwd.cc"}, {"sha": "d4853b27af492257530c1adedbe80888096dd902", "filename": "libstdc++-v3/testsuite/20_util/headers/functional/synopsis.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,101 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <functional>\n+\n+namespace std {\n+  //  lib.base, base:\n+  template <class Arg, class Result> struct unary_function;\n+  template <class Arg1, class Arg2, class Result> struct binary_function;\n+\n+  //  lib.arithmetic.operations, arithmetic operations:\n+  template <class T> struct plus;\n+  template <class T> struct minus;\n+  template <class T> struct multiplies;\n+  template <class T> struct divides;\n+  template <class T> struct modulus;\n+  template <class T> struct negate;\n+\n+  //  lib.comparisons, comparisons:\n+  template <class T> struct equal_to;\n+  template <class T> struct not_equal_to;\n+  template <class T> struct greater;\n+  template <class T> struct less;\n+  template <class T> struct greater_equal;\n+  template <class T> struct less_equal;\n+\n+  //  lib.logical.operations, logical operations:\n+  template <class T> struct logical_and;\n+  template <class T> struct logical_or;\n+  template <class T> struct logical_not;\n+\n+  //  lib.negators, negators:\n+  template <class Predicate> struct unary_negate;\n+  template <class Predicate>\n+  unary_negate<Predicate>  not1(const Predicate&);\n+  template <class Predicate> struct binary_negate;\n+  template <class Predicate>\n+  binary_negate<Predicate> not2(const Predicate&);\n+\n+  //  lib.binders, binders:\n+  template <class Operation>  class binder1st;\n+  template <class Operation, class T>\n+  binder1st<Operation> bind1st(const Operation&, const T&);\n+  template <class Operation> class binder2nd;\n+  template <class Operation, class T>\n+  binder2nd<Operation> bind2nd(const Operation&, const T&);\n+\n+  //  lib.function.pointer.adaptors, adaptors:\n+  template <class Arg, class Result> class pointer_to_unary_function;\n+  template <class Arg, class Result>\n+  pointer_to_unary_function<Arg,Result> ptr_fun(Result (*)(Arg));\n+  template <class Arg1, class Arg2, class Result>\n+  class pointer_to_binary_function;\n+  template <class Arg1, class Arg2, class Result>\n+  pointer_to_binary_function<Arg1,Arg2,Result>\n+  ptr_fun(Result (*)(Arg1,Arg2));\n+\n+  //  lib.member.pointer.adaptors, adaptors:\n+  template<class S, class T> class mem_fun_t;\n+  template<class S, class T, class A> class mem_fun1_t;\n+  template<class S, class T>\n+  mem_fun_t<S,T> mem_fun(S (T::*f)());\n+  template<class S, class T, class A>\n+  mem_fun1_t<S,T,A> mem_fun(S (T::*f)(A));\n+  template<class S, class T> class mem_fun_ref_t;\n+  template<class S, class T, class A> class mem_fun1_ref_t;\n+  template<class S, class T>\n+  mem_fun_ref_t<S,T> mem_fun_ref(S (T::*f)());\n+  template<class S, class T, class A>\n+  mem_fun1_ref_t<S,T,A> mem_fun_ref(S (T::*f)(A));\n+\n+  template <class S, class T> class const_mem_fun_t;\n+  template <class S, class T, class A> class const_mem_fun1_t;\n+  template <class S, class T>\n+  const_mem_fun_t<S,T> mem_fun(S (T::*f)() const);\n+  template <class S, class T, class A>\n+  const_mem_fun1_t<S,T,A> mem_fun(S (T::*f)(A) const);\n+  template <class S, class T> class const_mem_fun_ref_t;\n+  template <class S, class T, class A> class const_mem_fun1_ref_t;\n+  template <class S, class T>\n+  const_mem_fun_ref_t<S,T> mem_fun_ref(S (T::*f)() const);\n+  template <class S, class T, class A>\n+  const_mem_fun1_ref_t<S,T,A> mem_fun_ref(S (T::*f)(A) const);\n+}"}, {"sha": "306a37e3312901c3a07f4e36b69bf654b76b1d12", "filename": "libstdc++-v3/testsuite/20_util/headers/memory/synopsis.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <memory>\n+\n+namespace std {\n+  //  lib.default.allocator, the default allocator:\n+  template <class T> class allocator;\n+  template <> class allocator<void>;\n+  template <class T, class U>\n+  bool operator==(const allocator<T>&, const allocator<U>&) throw();\n+  template <class T, class U>\n+  bool operator!=(const allocator<T>&, const allocator<U>&) throw();\n+\n+  //  lib.storage.iterator, raw storage iterator:\n+  template <class OutputIterator, class T> class raw_storage_iterator;\n+\n+  //  lib.temporary.buffer, temporary buffers:\n+  template <class T>\n+  pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n);\n+  template <class T>\n+  void return_temporary_buffer(T* p);\n+\n+  //  lib.specialized.algorithms, specialized algorithms:\n+  template <class InputIterator, class ForwardIterator>\n+  ForwardIterator\n+  uninitialized_copy(InputIterator first, InputIterator last,\n+\t\t     ForwardIterator result);\n+  template <class ForwardIterator, class T>\n+  void uninitialized_fill(ForwardIterator first, ForwardIterator last,\n+\t\t\t  const T& x);\n+  template <class ForwardIterator, class Size, class T>\n+  void uninitialized_fill_n(ForwardIterator first, Size n, const T& x);\n+\n+  //  lib.auto.ptr, pointers:\n+  template<class X> class auto_ptr;\n+}"}, {"sha": "bb96c32435e3875ad9a32b1b5d9248e7486d33df", "filename": "libstdc++-v3/testsuite/20_util/headers/utility/synopsis.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <utility>\n+\n+namespace std {\n+  //  lib.operators, operators:\n+  namespace rel_ops {\n+    template<class T> bool operator!=(const T&, const T&);\n+    template<class T> bool operator> (const T&, const T&);\n+    template<class T> bool operator<=(const T&, const T&);\n+    template<class T> bool operator>=(const T&, const T&);\n+  }\n+\n+  //  lib.pairs, pairs:\n+  template <class T1, class T2> struct pair;\n+  template <class T1, class T2>\n+  bool operator==(const pair<T1,T2>&, const pair<T1,T2>&);\n+  template <class T1, class T2>\n+  bool operator< (const pair<T1,T2>&, const pair<T1,T2>&);\n+  template <class T1, class T2>\n+  bool operator!=(const pair<T1,T2>&, const pair<T1,T2>&);\n+  template <class T1, class T2>\n+  bool operator> (const pair<T1,T2>&, const pair<T1,T2>&);\n+  template <class T1, class T2>\n+  bool operator>=(const pair<T1,T2>&, const pair<T1,T2>&);\n+  template <class T1, class T2>\n+  bool operator<=(const pair<T1,T2>&, const pair<T1,T2>&);\n+}"}, {"sha": "1e78aeb314521d7a64c99d78ff10344580b0a87a", "filename": "libstdc++-v3/testsuite/20_util/headers/utility/using_namespace_std_rel_ops.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fusing_namespace_std_rel_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fusing_namespace_std_rel_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fusing_namespace_std_rel_ops.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <utility>\n+\n+namespace gnu\n+{\n+  using namespace std::rel_ops;\n+}"}, {"sha": "ed88aefe6c6d98b21d3077fd3ae47710b1404aa5", "filename": "libstdc++-v3/testsuite/20_util/memory/allocator/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fallocator%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fallocator%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fallocator%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <memory>\n+\n+template class std::allocator<int>;"}, {"sha": "e6abacd13b601909ee2d0896180d204cb09c4958", "filename": "libstdc++-v3/testsuite/20_util/memory/auto_ptr/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <memory>\n+\n+template class std::auto_ptr<int>;"}, {"sha": "bc2793f3d9734cfc73891e941814b07cc552679c", "filename": "libstdc++-v3/testsuite/20_util/memory/raw_storage_iterator/requirements/base_classes.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+\n+// 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.4.2 raw storage iterator\n+\n+#include <memory>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  long l;\n+  typedef raw_storage_iterator<long*, long> test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator rs_it(&l);\n+  base_iterator* base __attribute__((unused)) = &rs_it;\n+}"}, {"sha": "41023b6bcd2582b7116284509935b7b694c9e3cb", "filename": "libstdc++-v3/testsuite/20_util/memory/raw_storage_iterator/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <memory>\n+\n+template class std::raw_storage_iterator<int*, int>;"}, {"sha": "4a51c4c6fd34de185119726d5015ccebbda12736", "filename": "libstdc++-v3/testsuite/20_util/memory/raw_storage_iterator/requirements/typedefs.cc", "status": "renamed", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fraw_storage_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,23 +27,12 @@ void test01()\n {\n   using namespace std;\n \n-  // Check for required base class.\n+  // Check for required typedefs\n   long l;\n   typedef raw_storage_iterator<long*, long> test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n-  test_iterator rs_it(&l);\n-  base_iterator* base __attribute__((unused)) = &rs_it;\n-\n-  // Check for required typedefs\n   typedef test_iterator::value_type value_type;\n   typedef test_iterator::difference_type difference_type;\n   typedef test_iterator::pointer pointer;\n   typedef test_iterator::reference reference;\n   typedef test_iterator::iterator_category iteratory_category;\n }\n-\n-int main() \n-{ \n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/20_util/memory/raw_storage_iterator.cc"}, {"sha": "3d55f629de254ef56d6540da25fc211fea2110df", "filename": "libstdc++-v3/testsuite/20_util/utility/pair/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Futility%2Fpair%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Futility%2Fpair%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Futility%2Fpair%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <utility>\n+\n+template class std::pair<int, long>;"}, {"sha": "ec839146a35194a43e264f89d3160f21af84aec9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/21_strings/basic_string/1.cc"}, {"sha": "8b021755786b734ccf39c51fb9f0a72621359d06", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/debug.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fdebug.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/21_strings/basic_string/2.cc"}, {"sha": "b0375f6f55dfbe19daf3456abf7835128a740542", "filename": "libstdc++-v3/testsuite/21_strings/headers/cctype/functions_std.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcctype%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcctype%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcctype%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cctype>\n+\n+namespace gnu\n+{\n+  using std::isalnum;\n+  using std::isdigit;\n+  using std::isprint;\n+  using std::isupper;\n+  using std::tolower;\n+  using std::isalpha;\n+  using std::isgraph;\n+  using std::ispunct;\n+  using std::isxdigit;\n+  using std::toupper;\n+  using std::iscntrl;\n+  using std::islower;\n+  using std::isspace;\n+}"}, {"sha": "4840dfdf78f32aa2a9410518edee7f0bae1df16d", "filename": "libstdc++-v3/testsuite/21_strings/headers/cstdlib/functions_std.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstdlib%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+namespace gnu\n+{\n+  using std::atol;\n+  using std::atof;\n+  using std::atoi;\n+  using std::mblen;\n+  using std::mbstowcs;\n+  using std::mbtowc;\n+  using std::strtod;\n+  using std::strtol;\n+  using std::strtoul;\n+  using std::wctomb;\n+  using std::wcstombs;\n+}"}, {"sha": "c714d1607d7507b47249c4d88e06bb13360a3ccb", "filename": "libstdc++-v3/testsuite/21_strings/headers/cstdlib/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstdlib%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstdlib%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstdlib%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+\n+namespace gnu\n+{\n+#ifndef NULL\n+    #error \"NULL_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "3b4662f7f6487f3220f2a682a742ee47981bef60", "filename": "libstdc++-v3/testsuite/21_strings/headers/cstring/functions_std.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+\n+namespace gnu\n+{\n+  using std::memchr;\n+  using std::memcmp;\n+  using std::memcpy;\n+  using std::memmove;\n+  using std::memset;\n+  using std::strcat;\n+  using std::strchr;\n+  using std::strcmp;\n+  using std::strcoll;\n+  using std::strcpy;\n+  using std::strcspn;\n+  using std::strerror;\n+  using std::strlen;\n+  using std::strncat;\n+  using std::strncmp;\n+  using std::strncpy;\n+  using std::strpbrk;\n+  using std::strrchr;\n+  using std::strspn;\n+  using std::strstr;\n+  using std::strtok;\n+  using std::strxfrm;\n+}"}, {"sha": "c714d1607d7507b47249c4d88e06bb13360a3ccb", "filename": "libstdc++-v3/testsuite/21_strings/headers/cstring/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+\n+namespace gnu\n+{\n+#ifndef NULL\n+    #error \"NULL_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "f554d5a20c21ea70b915d0b8c51442e9d7ddee3c", "filename": "libstdc++-v3/testsuite/21_strings/headers/cstring/types_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcstring%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+\n+namespace gnu\n+{\n+  std::size_t s;\n+}"}, {"sha": "377cbdcd6edc793a67baa9254a9f1061330b6022", "filename": "libstdc++-v3/testsuite/21_strings/headers/cwchar/functions_std.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,77 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cwchar>\n+\n+namespace gnu\n+{\n+  using std::btowc;\n+  using std::fgetwc;\n+  using std::fgetws;\n+  using std::fputwc;\n+  using std::fputws;\n+  using std::fwide;\n+  using std::fwprintf;\n+  using std::fwscanf;\n+  using std::getwc;\n+  using std::getwchar;\n+  using std::mbrlen;\n+  using std::mbrtowc;\n+  using std::mbsinit;\n+  using std::mbsrtowcs;\n+  using std::putwc;\n+  using std::putwchar;\n+  using std::swprintf;\n+  using std::swscanf;\n+  using std::ungetwc;\n+  using std::vfwprintf;\n+  using std::vswprintf;\n+  using std::vwprintf;\n+  using std::wcrtomb;\n+  using std::wcscat;\n+  using std::wcschr;\n+  using std::wcscmp;\n+  using std::wcscoll;\n+  using std::wcscpy;\n+  using std::wcscmp;\n+  using std::wcsftime;\n+  using std::wcslen;\n+  using std::wcsncat;\n+  using std::wcsncmp;\n+  using std::wcsncpy;\n+  using std::wcspbrk;\n+  using std::wcsrchr;\n+  using std::wcsrtombs;\n+  using std::wcsspn;\n+  using std::wcsstr;\n+  using std::wcstod;\n+  using std::wcstok;\n+  using std::wcstol;\n+  using std::wcstoul;\n+  using std::wcsxfrm;\n+  using std::wctob;\n+  using std::wmemchr;\n+  using std::wmemcmp;\n+  using std::wmemcpy;\n+  using std::wmemmove;\n+  using std::wmemset;\n+  using std::wprintf;\n+  using std::wscanf;\n+}"}, {"sha": "17d6129dd901957e6704a6983e0376b018ca2bd7", "filename": "libstdc++-v3/testsuite/21_strings/headers/cwchar/macros.cc", "status": "renamed", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,24 +18,23 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, csetjmp\n-\n-#include <csetjmp>\n+#include <cwchar>\n \n namespace gnu\n {\n-  void test01()\n-  { \n-    std::jmp_buf env;\n-    int i __attribute__((unused)) = setjmp(env);\n-#ifndef setjmp\n-    #error \"setjmp_must_be_a_macro\"\n+#ifndef NULL\n+    #error \"NULL_must_be_a_macro\"\n+#endif\n+\n+#ifndef WCHAR_MAX\n+    #error \"WCHAR_MAX_must_be_a_macro\"\n+#endif\n+\n+#ifndef WCHAR_MIN\n+    #error \"WCHAR_MIN_must_be_a_macro\"\n+#endif\n+\n+#ifndef WEOF\n+    #error \"WEOF_must_be_a_macro\"\n #endif\n-  }\n-}\n-  \n-int main()\n-{\n-  gnu::test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_csetjmp.cc"}, {"sha": "f7cd6a7608ebb3d27fffa9c0d2a3fadf8123254a", "filename": "libstdc++-v3/testsuite/21_strings/headers/cwchar/types_std.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwchar%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cwchar>\n+\n+namespace gnu\n+{\n+  std::mbstate_t mb;\n+  std::wint_t wt;\n+  std::size_t s;\n+}"}, {"sha": "88871fa07ce2fbc88e2da347a6b7a79cf501aadd", "filename": "libstdc++-v3/testsuite/21_strings/headers/cwctype/functions_std.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cwctype>\n+\n+namespace gnu\n+{\n+  using std::iswalnum;\n+  using std::iswdigit;\n+  using std::iswprint;\n+  using std::iswupper;\n+  using std::iswalpha;\n+  using std::iswgraph;\n+  using std::iswpunct;\n+  using std::iswxdigit;\n+  using std::iswspace;\n+  using std::iswcntrl;\n+  using std::towlower;\n+  using std::towupper;\n+  using std::towctrans;\n+  using std::wctrans;\n+  using std::wctype;\n+}"}, {"sha": "a1d78c75c00c34f994853f8a8d40141463030880", "filename": "libstdc++-v3/testsuite/21_strings/headers/cwctype/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cwctype>\n+\n+namespace gnu\n+{\n+#ifndef WEOF\n+    #error \"WEOF_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "f8a48cfa96f1978013dabc99abf62ee4b3b08d28", "filename": "libstdc++-v3/testsuite/21_strings/headers/cwctype/types_std.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fcwctype%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cwctype>\n+\n+namespace gnu\n+{\n+  std::wctrans_t wt;\n+  std::wctype_t wct;\n+  std::wint_t wint;\n+}"}, {"sha": "a482ec10cf2ceff00869c8686c4b78c949c32cd0", "filename": "libstdc++-v3/testsuite/21_strings/headers/string/synopsis.cc", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,135 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+\n+namespace std {\n+  //  lib.char.traits, character traits:\n+  template<class charT>\n+  struct char_traits;\n+  template <> struct char_traits<char>;\n+  template <> struct char_traits<wchar_t>;\n+\n+  //  lib.basic.string, basic_string:\n+  template<class charT, class traits, class Allocator >\n+  class basic_string;\n+\n+  template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+  operator+(const basic_string<charT,traits,Allocator>& lhs,\n+\t    const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+  operator+(const charT* lhs,\n+\t    const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+  operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+  operator+(const basic_string<charT,traits,Allocator>& lhs,\n+\t    const charT* rhs);\n+  template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+  operator+(const basic_string<charT,traits,Allocator>& lhs, charT rhs);\n+\n+  template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator==(const charT* lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const charT* rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator!=(const charT* lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const charT* rhs);\n+\n+  template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const charT* rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator< (const charT* lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const charT* rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator> (const charT* lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\n+  template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const charT* rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator<=(const charT* lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t  const charT* rhs);\n+  template<class charT, class traits, class Allocator>\n+  bool operator>=(const charT* lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\n+  //  lib.string.special:\n+  template<class charT, class traits, class Allocator>\n+  void swap(basic_string<charT,traits,Allocator>& lhs,\n+\t    basic_string<charT,traits,Allocator>& rhs);\n+\n+  template<class charT, class traits, class Allocator>\n+  basic_istream<charT,traits>&\n+  operator>>(basic_istream<charT,traits>& is,\n+\t     basic_string<charT,traits,Allocator>& str);\n+  template<class charT, class traits, class Allocator>\n+  basic_ostream<charT, traits>&\n+  operator<<(basic_ostream<charT, traits>& os,\n+\t     const basic_string<charT,traits,Allocator>& str);\n+  template<class charT, class traits, class Allocator>\n+  basic_istream<charT,traits>&\n+  getline(basic_istream<charT,traits>& is,\n+\t  basic_string<charT,traits,Allocator>& str,\n+\t  charT  delim);\n+  template<class charT, class traits, class Allocator>\n+  basic_istream<charT,traits>&\n+  getline(basic_istream<charT,traits>& is,\n+\t  basic_string<charT,traits,Allocator>& str);\n+\n+  typedef basic_string<char> string;\n+  typedef basic_string<wchar_t> wstring;\n+}"}, {"sha": "40731c40946c01f81ccf902423086863e1f35d17", "filename": "libstdc++-v3/testsuite/21_strings/headers/string/types_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+\n+namespace gnu\n+{\n+  typedef std::string t1;\n+  typedef std::wstring t2;\n+}"}, {"sha": "15f5d64fc1e65eddb4c1cf361154c4418dd56ae5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,15 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::intern_type intern_type;\n-  typedef test_type::extern_type extern_type;\n-  typedef test_type::state_type state_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt/1.cc"}, {"sha": "b73c8701bb44c44274206649269b15f483e7ba31", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_codecvt: public std::codecvt<unsigned char, unsigned long, char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_codecvt facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::codecvt<unsigned char, unsigned long, char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt/2.cc"}, {"sha": "45cfb2a21b15ec73dfcf0a00b4c0fa05a7f84b1a", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.1.5  Template class codecvt\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::codecvt<char, char, mbstate_t> test_type;\n+  typedef test_type::intern_type intern_type;\n+  typedef test_type::extern_type extern_type;\n+  typedef test_type::state_type state_type;\n+}"}, {"sha": "337bd1014367513926b8fb59c27717b6440d5447", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_byname/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,15 +30,4 @@ void test01()\n   typedef std::codecvt<char, char, mbstate_t> base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::intern_type intern_type;\n-  typedef test_type::extern_type extern_type;\n-  typedef test_type::state_type state_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_byname/1.cc"}, {"sha": "094b386ddec5d342ec806923c6044eb76ea07251", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_byname/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <locale>\n+\n+template class std::codecvt_byname<short, short, mbstate_t>;"}, {"sha": "1bb9059e8e400dab02222a99aff232518a59c481", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_byname/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.1.5  Template class codecvt\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::codecvt_byname<char, char, mbstate_t> test_type;\n+  typedef test_type::intern_type intern_type;\n+  typedef test_type::extern_type extern_type;\n+  typedef test_type::state_type state_type;\n+}"}, {"sha": "765980079db3683613491be356f4ce010abfff1c", "filename": "libstdc++-v3/testsuite/22_locale/collate/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-\n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/collate/1.cc"}, {"sha": "a9be3b1b0d29737dbda84caf163ca6187a7a9041", "filename": "libstdc++-v3/testsuite/22_locale/collate/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_collate: public std::collate<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_collate facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::collate<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/collate/2.cc"}, {"sha": "9baafacde05897c9c2872da0fae47b0686259a3c", "filename": "libstdc++-v3/testsuite/22_locale/collate/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.4 The collate category\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::collate<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "f3d6571d69b1dda1606b5a77203ef0139a805ef8", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::collate<char> base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n   const base_type* base __attribute__((unused)) = &obj;\n-\n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/collate_byname/1.cc"}, {"sha": "43eda6f72bc8888db158bc8799cda3eaaf59394d", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <locale>\n+\n+template class std::collate_byname<short>;"}, {"sha": "52ae527ce14eddade0752270c9ba47942b48c3b2", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.4 The collate category\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::collate_byname<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "0cf4c516ce782c16028f341e7da0ae6d8ae3b4a0", "filename": "libstdc++-v3/testsuite/22_locale/ctype/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -32,13 +32,4 @@ void test01()\n   const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n   const base_type1* base1 __attribute__((unused)) = &obj;\n   const base_type2* base2 __attribute__((unused)) = &obj;\n-\n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype/1.cc"}, {"sha": "85ebec3920f7be8adcac962b7e0822c2b992d27f", "filename": "libstdc++-v3/testsuite/22_locale/ctype/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <locale>\n+\n+template class std::ctype<short>;"}, {"sha": "f88fa34ed8dd070076cc0b29a738ed9f03554f80", "filename": "libstdc++-v3/testsuite/22_locale/ctype/requirements/typedefs.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.1.1 - Template class ctype\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::ctype<char> test_type;\n+  typedef test_type::char_type char_type;\n+}"}, {"sha": "260e1b0334ae1c520c9020ca0dd5e0e55f5c260d", "filename": "libstdc++-v3/testsuite/22_locale/ctype_base/mask.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2Fmask.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2Fmask.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_base%2Fmask.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_base/1.cc"}, {"sha": "39626e8ac62881fadffb26049ade2cb7c4e4cc9b", "filename": "libstdc++-v3/testsuite/22_locale/headers/clocale/functions_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <clocale>\n+\n+namespace gnu\n+{\n+  using std::localeconv;\n+  using std::setlocale;\n+}"}, {"sha": "575a33a60670f7f267fe3b591a5bd98fd89cc46f", "filename": "libstdc++-v3/testsuite/22_locale/headers/clocale/macros.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <clocale>\n+\n+namespace gnu\n+{\n+#ifndef NULL\n+    #error \"NULL_must_be_a_macro\"\n+#endif\n+\n+#ifndef LC_ALL\n+    #error \"LC_ALL_must_be_a_macro\"\n+#endif\n+\n+#ifndef LC_COLLATE\n+    #error \"LC_COLLATE_must_be_a_macro\"\n+#endif\n+\n+#ifndef LC_CTYPE\n+    #error \"LC_CTYPE_must_be_a_macro\"\n+#endif\n+\n+#ifndef LC_MONETARY\n+    #error \"LC_MONETARY_must_be_a_macro\"\n+#endif\n+\n+#ifndef LC_NUMERIC\n+    #error \"LC_NUMERIC_must_be_a_macro\"\n+#endif\n+\n+#ifndef LC_TIME\n+    #error \"LC_TIME_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "125aef99b6e951aacfa1a43af23985bc6657d14d", "filename": "libstdc++-v3/testsuite/22_locale/headers/clocale/types_std.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Fclocale%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <clocale>\n+\n+namespace gnu\n+{\n+  std::lconv l;\n+}"}, {"sha": "a26eab1a70fff27eb34fd707b0ed3a2656952444", "filename": "libstdc++-v3/testsuite/22_locale/headers/locale/synopsis.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,85 @@\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <locale>\n+\n+namespace std {\n+  //  lib.locale, locale:\n+  class locale;\n+  template <class Facet> const Facet& use_facet(const locale&);\n+  template <class Facet> bool         has_facet(const locale&) throw();\n+\n+  //  lib.locale.convenience, convenience interfaces:\n+  template <class charT> bool isspace (charT c, const locale& loc);\n+  template <class charT> bool isprint (charT c, const locale& loc);\n+  template <class charT> bool iscntrl (charT c, const locale& loc);\n+  template <class charT> bool isupper (charT c, const locale& loc);\n+  template <class charT> bool islower (charT c, const locale& loc);\n+  template <class charT> bool isalpha (charT c, const locale& loc);\n+  template <class charT> bool isdigit (charT c, const locale& loc);\n+  template <class charT> bool ispunct (charT c, const locale& loc);\n+  template <class charT> bool isxdigit(charT c, const locale& loc);\n+  template <class charT> bool isalnum (charT c, const locale& loc);\n+  template <class charT> bool isgraph (charT c, const locale& loc);\n+  template <class charT> charT toupper(charT c, const locale& loc);\n+  template <class charT> charT tolower(charT c, const locale& loc);\n+\n+  //  lib.category.ctype and lib.facet.ctype.special, ctype:\n+  class ctype_base;\n+  template <class charT> class ctype;\n+  template <>            class ctype<char>;             //  specialization\n+  template <class charT> class ctype_byname;\n+  template <>            class ctype_byname<char>;      //  specialization\n+  class codecvt_base;\n+  template <class internT, class externT, class stateT>\n+  class codecvt;\n+  template <class internT, class externT, class stateT>\n+  class codecvt_byname;\n+\n+  //  lib.category.numeric and lib.facet.numpunct, numeric:\n+  template <class charT, class InputIterator>  class num_get;\n+  template <class charT, class OutputIterator> class num_put;\n+  template <class charT> class numpunct;\n+  template <class charT> class numpunct_byname;\n+\n+  //  lib.category.collate, collation:\n+  template <class charT> class collate;\n+  template <class charT> class collate_byname;\n+\n+  //  lib.category.time, date and time:\n+  class time_base;\n+  template <class charT, class InputIterator>  class time_get;\n+  template <class charT, class InputIterator>  class time_get_byname;\n+  template <class charT, class OutputIterator> class time_put;\n+  template <class charT, class OutputIterator> class time_put_byname;\n+\n+  //  lib.category.monetary, money:\n+  class money_base;\n+  template <class charT, class InputIterator>  class money_get;\n+  template <class charT, class OutputIterator> class money_put;\n+  template <class charT, bool Intl> class moneypunct;\n+  template <class charT, bool Intl> class moneypunct_byname;\n+\n+  //  lib.category.messages, message retrieval:\n+  class messages_base;\n+  template <class charT> class messages;\n+  template <class charT> class messages_byname;\n+}"}, {"sha": "85e4b9d55bab162e732b92dabd5818d6999e0f96", "filename": "libstdc++-v3/testsuite/22_locale/headers/locale/types_std.cc", "status": "renamed", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,6 @@\n-// 2000-01-01 bkoz\n+// { dg-do compile }\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,16 +18,14 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, cwchar\n+#include <locale>\n \n-#include <cwchar>\n-\n-int main(void)\n+namespace gnu\n {\n-  // Make sure size_t is in namespace std\n-  std::size_t i __attribute__((unused)) = 5;\n-\n-  std::tm  __attribute__((unused)) mytime;\n-\n-  return 0;\n+  typedef std::locale t1;\n+  typedef std::ctype_base t2;\n+  typedef std::codecvt_base t3;\n+  typedef std::time_base t4;\n+  typedef std::money_base t5;\n+  typedef std::messages_base t6;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cwchar.cc"}, {"sha": "ea89f80ea165ee338a4219f92b73dfc11173956b", "filename": "libstdc++-v3/testsuite/22_locale/messages/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -32,14 +32,4 @@ void test01()\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type1* base1 __attribute__((unused)) = &obj;\n   const base_type2* base2 __attribute__((unused)) = &obj;\n-\n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/messages/1.cc"}, {"sha": "eaea10479066b0723460befa4f4ac2f2e9fad3e8", "filename": "libstdc++-v3/testsuite/22_locale/messages/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_messages: public std::messages<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_messages facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::messages<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/messages/2.cc"}, {"sha": "e8c5b9528d49508ca6e17567f765a3bdb6f0ec9f", "filename": "libstdc++-v3/testsuite/22_locale/messages/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.7 The message retrieval category\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::messages<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "4836c046d000405c396f85f85c16f2607e525522", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::messages<char> base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale::classic()); \n   const base_type* base __attribute__((unused)) = &obj;\n-\n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/messages_byname/1.cc"}, {"sha": "b108ff8fe1fb8ff272291563b70b2871a10d9a1f", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <locale>\n+\n+template class std::messages_byname<short>;"}, {"sha": "b74150e6cda0b62f951df08d73fb5a9e1c377ba7", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.7 The message retrieval category\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::messages_byname<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "61e2a1f813bd8f8b43b630d42f382a92070e04dd", "filename": "libstdc++-v3/testsuite/22_locale/money_get/cons/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fcons%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_get/3.cc"}, {"sha": "a0a936ee0a84b704bb2ce79a8c98e17a3e21e9e2", "filename": "libstdc++-v3/testsuite/22_locale/money_get/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,15 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-  typedef test_type::iter_type iter_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_get/1.cc"}, {"sha": "dc7f85968c8e5529bd3dbccd02a74c2262bcb197", "filename": "libstdc++-v3/testsuite/22_locale/money_get/requirements/explicit_instantiations.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Fexplicit_instantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Fexplicit_instantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Fexplicit_instantiations.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_money_get: public std::money_get<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_money_get facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::money_get<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_get/2.cc"}, {"sha": "ee3b04d9d265d72c0b8a3d2783196ef710b3d169", "filename": "libstdc++-v3/testsuite/22_locale/money_get/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// 2001-09-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.1  Template class money_get\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::money_get<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+  typedef test_type::iter_type iter_type;\n+}"}, {"sha": "535ca6e864442c06d80b1cea70cfd1c51c16627e", "filename": "libstdc++-v3/testsuite/22_locale/money_put/cons/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fcons%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_put/3.cc"}, {"sha": "b352a25bb98b962f1bf0254121767b5d061244bd", "filename": "libstdc++-v3/testsuite/22_locale/money_put/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,15 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-  typedef test_type::iter_type iter_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_put/1.cc"}, {"sha": "0afb18759e017ede295b5d09c91bbb2651b4bb96", "filename": "libstdc++-v3/testsuite/22_locale/money_put/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_money_put: public std::money_put<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_money_put facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::money_put<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_put/2.cc"}, {"sha": "1e5ded2cc56ca78b53ca40ec873cbbba309153e7", "filename": "libstdc++-v3/testsuite/22_locale/money_put/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.2  Template class money_put\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::money_put<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+  typedef test_type::iter_type iter_type;\n+}"}, {"sha": "a880d82fd1c38a1d6dde204bc69b0e170a45c9dd", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/false/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -31,14 +31,4 @@ void test02()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct/2.cc"}, {"sha": "9b24c0b3387573e95f2eab431041fd9712cfd81d", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/false/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <locale>\n+\n+template class std::moneypunct<short, false>;"}, {"sha": "9380ecbe76de3c87bfc4d78bdddf71b2787fca84", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/false/intl.cc", "status": "renamed", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fintl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fintl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Fintl.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -20,23 +20,17 @@\n \n // 22.2.6.3  Template class moneypunct\n \n-// { dg-do compile }\n-\n #include <locale>\n #include <testsuite_hooks.h>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_moneypunct_t: public std::moneypunct<unsigned char, true> \n-{ };\n-\n-class gnu_moneypunct_f: public std::moneypunct<unsigned char, false> \n+class gnu_moneypunct_f: public std::moneypunct<char, false> \n { };\n \n void test03()\n { \n-  gnu_moneypunct_t facet01;\n+  bool test __attribute__((unused)) = true;\n   gnu_moneypunct_f facet02;\n-  VERIFY (facet01.intl == true);\n   VERIFY (facet02.intl == false);\n }\n ", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct/3.cc"}, {"sha": "cd6b92b9c9de1a2c70ffcaeabb608a6ab68fb5dc", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/false/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ffalse%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  // Check for required typedefs\n+  typedef std::moneypunct<char, false> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "231172e86d74cf1d867bdf7f6182450da314b7c4", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/true/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -22,7 +22,6 @@\n // 22.2.6.3  Template class moneypunct\n \n #include <locale>\n-#include <testsuite_hooks.h>\n \n void test01()\n {\n@@ -31,14 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct/1.cc"}, {"sha": "20cac01cdab21408c6253384308c52921eb77bd2", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/true/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <locale>\n+\n+template class std::moneypunct<short, true>;"}, {"sha": "3448737214a93aa6750e197dfe0cad50cf9f3dab", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/true/intl.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fintl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fintl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Fintl.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_moneypunct_t: public std::moneypunct<char, true> \n+{ };\n+\n+void test03()\n+{ \n+  bool test __attribute__((unused)) = true;\n+  gnu_moneypunct_t facet01;\n+  VERIFY (facet01.intl == true);\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "f1ced4e9872a77af94b3d3147c961d663ece8ebb", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/requirements/true/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Frequirements%2Ftrue%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{  \n+  // Check for required typedefs\n+  typedef std::moneypunct<char, true> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "1180f2981755d5ded5809b81104c58ee7ba805da", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -31,14 +31,4 @@ void test01()\n   typedef std::moneypunct<char, true> base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/1.cc"}, {"sha": "43302856408ea933e48ba861e1ee4871473a614d", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <locale>\n+\n+template class std::moneypunct_byname<short, true>;"}, {"sha": "b4b3b51039b6c30fa665fa6bff4198ad7783955f", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::moneypunct_byname<char, true> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "92295c07120ed6afa2daec7db2071d7343d05b96", "filename": "libstdc++-v3/testsuite/22_locale/num_get/cons/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fcons%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_get/3.cc"}, {"sha": "363ad15faf436fd7b83d7c9bdad0ecc2228a18e9", "filename": "libstdc++-v3/testsuite/22_locale/num_get/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::iter_type iter_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_get/1.cc"}, {"sha": "87e126a7d06aead0c3752f5587abf007fcc7e1cb", "filename": "libstdc++-v3/testsuite/22_locale/num_get/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_num_get: public std::num_get<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_num_get facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::num_get<unsigned char> ;", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_get/2.cc"}, {"sha": "1229581e864876e8b920b050ec60c57ca9da66f3", "filename": "libstdc++-v3/testsuite/22_locale/num_get/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.1  Template class num_get\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::num_get<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::iter_type iter_type;\n+}"}, {"sha": "6ecad4f4790e8c9236d6d737b96cf3121819090b", "filename": "libstdc++-v3/testsuite/22_locale/num_put/cons/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fcons%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_put/3.cc"}, {"sha": "eb8432c5cb6911db7d2342c74e37a386fa00eac3", "filename": "libstdc++-v3/testsuite/22_locale/num_put/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::iter_type iter_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_put/1.cc"}, {"sha": "08008ee8c890e0668eb80c4f20d206d1a3518e09", "filename": "libstdc++-v3/testsuite/22_locale/num_put/requirements/explicit_instantiations.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Fexplicit_instantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Fexplicit_instantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Fexplicit_instantiations.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_num_put: public std::num_put<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_num_put facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::num_put<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_put/2.cc"}, {"sha": "2dfed978c0d16323279588fe6023f992a0ec61ba", "filename": "libstdc++-v3/testsuite/22_locale/num_put/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-11-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.2  Template class num_put\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::num_put<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::iter_type iter_type;\n+}"}, {"sha": "db5ce24202d9eb70eb27f28578fdb22d3669dc13", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-\n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct/1.cc"}, {"sha": "279633a3ea0a1490d00252286207144ac0dac47e", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/requirements/explicit_instantiations.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Fexplicit_instantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Fexplicit_instantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Fexplicit_instantiations.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_numpunct: public std::numpunct<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_numpunct facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::numpunct<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct/2.cc"}, {"sha": "e58fa1ec1ba0cc317c568389e2714ada907da295", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003  Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.3  The numeric punctuation facet\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::numpunct<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "9b79493cd7b7dae361ea1f6a67ac6ac3da1af716", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::numpunct<char> base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-\n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/1.cc"}, {"sha": "799541de6cbbbebd81bc838a5f7957858684d39b", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/requirements/explicit_instantiations.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Fexplicit_instantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Fexplicit_instantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Fexplicit_instantiations.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// 2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003  Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.3  The numeric punctuation facet\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+template class std::numpunct_byname<unsigned char>;"}, {"sha": "d269996a6743c082e12819a04b860237573de150", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003  Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.3  The numeric punctuation facet\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::numpunct_byname<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}"}, {"sha": "072db6dbd6d93338aec961941bfef26b34648e8c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -32,14 +32,4 @@ void test01()\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type1* base1 __attribute__((unused)) = &obj;\n   const base_type2* base2 __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::iter_type iter_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/time_get/1.cc"}, {"sha": "170e9e75472584853d3aa2eb4a5f718f39c8743c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/requirements/explicit_instantiations.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Fexplicit_instantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Fexplicit_instantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Fexplicit_instantiations.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_time_get: public std::time_get<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_time_get facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::time_get<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/time_get/2.cc"}, {"sha": "1d2afa6de3e84b3cd3f641395fcac7ddbbd06fdd", "filename": "libstdc++-v3/testsuite/22_locale/time_get/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-09-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1  Template class time_get\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::time_get<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::iter_type iter_type;\n+}"}, {"sha": "197fa6e6a64474ceae8314b8d3d6d3fe2fb58b94", "filename": "libstdc++-v3/testsuite/22_locale/time_put/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,14 +30,4 @@ void test01()\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n   const base_type* base __attribute__((unused)) = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::iter_type iter_type;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/time_put/1.cc"}, {"sha": "a1b365c597b2c7e9ba109d39b1129d02c0c5e011", "filename": "libstdc++-v3/testsuite/22_locale/time_put/requirements/explicit_instantiations.cc", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Fexplicit_instantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Fexplicit_instantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Fexplicit_instantiations.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,16 +24,4 @@\n #include <locale>\n \n // Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_time_put: public std::time_put<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_time_put facet01;\n-}\n-\n-int main()\n-{\n-  test02();\n-  return 0;\n-}\n+template class std::time_put<unsigned char>;", "previous_filename": "libstdc++-v3/testsuite/22_locale/time_put/2.cc"}, {"sha": "69e7c4ac88f1e3881a2b96d663d6527a6347e797", "filename": "libstdc++-v3/testsuite/22_locale/time_put/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-09-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.3  Template class time_put\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::time_put<char> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::iter_type iter_type;\n+}"}, {"sha": "bec170ea64fbac26d69ee2c6b7c9a51d1cda9131", "filename": "libstdc++-v3/testsuite/23_containers/bitset/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <bitset>\n+\n+template class std::bitset<10>;"}, {"sha": "c6aef037e180d0099946f19f5a0f0467b242b374", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/deque/explicit_instantiation/1.cc"}, {"sha": "6c1b9adb7867837208e7a491fa69d93a69d6eae0", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/deque/explicit_instantiation/2.cc"}, {"sha": "ca6cb6ad7f4ec67fe7e0cc64d8410357be2e5d22", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/deque/explicit_instantiation/3.cc"}, {"sha": "26882be0dc8ec211046a1a6e2568db3cbb0311bd", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/partial_specialization/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fpartial_specialization%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/deque/1.cc"}, {"sha": "e0ba4d45e07f823b29a0ef1f12649c321c2ee387", "filename": "libstdc++-v3/testsuite/23_containers/headers/bitset/synopsis.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <bitset>\n+\n+namespace std {\n+  template <size_t N> class bitset;\n+\n+  // 23.3.5.3 bitset operations:\n+  template <size_t N>\n+    bitset<N> operator&(const bitset<N>&, const bitset<N>&);\n+\n+  template <size_t N>\n+    bitset<N> operator|(const bitset<N>&, const bitset<N>&);\n+\n+  template <size_t N>\n+    bitset<N> operator^(const bitset<N>&, const bitset<N>&);\n+\n+  template <class charT, class traits, size_t N>\n+    basic_istream<charT, traits>&\n+    operator>>(basic_istream<charT, traits>& is, bitset<N>& x);\n+\n+  template <class charT, class traits, size_t N>\n+    basic_ostream<charT, traits>&\n+    operator<<(basic_ostream<charT, traits>& os, const bitset<N>& x);\n+}"}, {"sha": "832baf19737350f24f7d4a116ab3a6e119cbdd8e", "filename": "libstdc++-v3/testsuite/23_containers/headers/deque/synopsis.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <deque>\n+\n+namespace std {\n+  template <class T, class Allocator> class deque;\n+\n+  template <class T, class Allocator>\n+    bool operator== (const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator< (const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator!= (const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator> (const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator>= (const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator<= (const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    void swap(deque<T,Allocator>& x, deque<T,Allocator>& y);\n+}"}, {"sha": "1b3fb40d52d1b38028745327f83b3cfc6136f457", "filename": "libstdc++-v3/testsuite/23_containers/headers/list/synopsis.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <list>\n+\n+namespace std {\n+  template <class T, class Allocator> class list;\n+\n+  template <class T, class Allocator>\n+  bool operator==(const list<T,Allocator>& x, const list<T,Allocator>&);\n+\n+  template <class T, class Allocator>\n+  bool operator< (const list<T,Allocator>& x, const list<T,Allocator>&);\n+\n+  template <class T, class Allocator>\n+    bool operator!=(const list<T,Allocator>& x, const list<T,Allocator>&);\n+\n+  template <class T, class Allocator>\n+    bool operator> (const list<T,Allocator>& x, const list<T,Allocator>&);\n+\n+  template <class T, class Allocator>\n+    bool operator>=(const list<T,Allocator>& x, const list<T,Allocator>&);\n+\n+  template <class T, class Allocator>\n+    bool operator<=(const list<T,Allocator>& x, const list<T,Allocator>&);\n+\n+  template <class T, class Allocator>\n+    void swap(list<T,Allocator>& x, list<T,Allocator>& y);\n+}"}, {"sha": "a8129df6aec7ee83c869de724abe5a19416fb07c", "filename": "libstdc++-v3/testsuite/23_containers/headers/map/synopsis.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,71 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <map>\n+\n+namespace std {\n+  template <class Key, class T, class Compare, class Allocator>\n+    class map;\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator==(const map<Key,T,Compare,Allocator>& x,\n+                    const map<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator< (const map<Key,T,Compare,Allocator>& x,\n+                    const map<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator!=(const map<Key,T,Compare,Allocator>& x,\n+                    const map<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator> (const map<Key,T,Compare,Allocator>& x,\n+                    const map<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator>=(const map<Key,T,Compare,Allocator>& x,\n+                    const map<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator<=(const map<Key,T,Compare,Allocator>& x,\n+                    const map<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    void swap(map<Key,T,Compare,Allocator>& x,\n+              map<Key,T,Compare,Allocator>& y);\n+\n+  template <class Key, class T, class Compare, class Allocator>\n+    class multimap;\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator==(const multimap<Key,T,Compare,Allocator>& x,\n+                    const multimap<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator< (const multimap<Key,T,Compare,Allocator>& x,\n+                    const multimap<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator!=(const multimap<Key,T,Compare,Allocator>& x,\n+                    const multimap<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator> (const multimap<Key,T,Compare,Allocator>& x,\n+                    const multimap<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator>=(const multimap<Key,T,Compare,Allocator>& x,\n+                    const multimap<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    bool operator<=(const multimap<Key,T,Compare,Allocator>& x,\n+                    const multimap<Key,T,Compare,Allocator>& y);\n+  template <class Key, class T, class Compare, class Allocator>\n+    void swap(multimap<Key,T,Compare,Allocator>& x,\n+              multimap<Key,T,Compare,Allocator>& y);\n+}"}, {"sha": "67a99d21acb44f466bea0b14260d3a1adf0891ed", "filename": "libstdc++-v3/testsuite/23_containers/headers/queue/synopsis.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <queue>\n+\n+namespace std {\n+  template <class T, class Container> class queue;\n+  template <class T, class Container>\n+    bool operator==(const queue<T, Container>& x,\n+                    const queue<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator< (const queue<T, Container>& x,\n+                    const queue<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator!=(const queue<T, Container>& x,\n+                    const queue<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator> (const queue<T, Container>& x,\n+                    const queue<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator>=(const queue<T, Container>& x,\n+                    const queue<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator<=(const queue<T, Container>& x,\n+                    const queue<T, Container>& y);\n+\n+  template <class T, class Container, class Compare>\n+  class priority_queue;\n+}"}, {"sha": "e517bf479a7e43a1ac967204e70463bf31fac48e", "filename": "libstdc++-v3/testsuite/23_containers/headers/set/synopsis.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,85 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <set>\n+\n+namespace std {\n+  template <class Key, class Compare, class Allocator>\n+    class set;\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator==(const set<Key,Compare,Allocator>& x,\n+                    const set<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator< (const set<Key,Compare,Allocator>& x,\n+                    const set<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator!=(const set<Key,Compare,Allocator>& x,\n+                    const set<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator> (const set<Key,Compare,Allocator>& x,\n+                    const set<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator>=(const set<Key,Compare,Allocator>& x,\n+                    const set<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator<=(const set<Key,Compare,Allocator>& x,\n+                    const set<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    void swap(set<Key,Compare,Allocator>& x,\n+              set<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    class multiset;\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator==(const multiset<Key,Compare,Allocator>& x,\n+                    const multiset<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator< (const multiset<Key,Compare,Allocator>& x,\n+                    const multiset<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator!=(const multiset<Key,Compare,Allocator>& x,\n+                    const multiset<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator> (const multiset<Key,Compare,Allocator>& x,\n+                    const multiset<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator>=(const multiset<Key,Compare,Allocator>& x,\n+                    const multiset<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    bool operator<=(const multiset<Key,Compare,Allocator>& x,\n+                    const multiset<Key,Compare,Allocator>& y);\n+\n+  template <class Key, class Compare, class Allocator>\n+    void swap(multiset<Key,Compare,Allocator>& x,\n+              multiset<Key,Compare,Allocator>& y);\n+}"}, {"sha": "b6bea1eff46a623769f3c470dc232482304ca853", "filename": "libstdc++-v3/testsuite/23_containers/headers/stack/synopsis.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fstack%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fstack%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fstack%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <stack>\n+\n+namespace std {\n+  template <class T, class Container> class stack;\n+\n+  template <class T, class Container>\n+    bool operator==(const stack<T, Container>& x,\n+                    const stack<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator< (const stack<T, Container>& x,\n+                    const stack<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator!=(const stack<T, Container>& x,\n+                    const stack<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator> (const stack<T, Container>& x,\n+                    const stack<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator>=(const stack<T, Container>& x,\n+                    const stack<T, Container>& y);\n+\n+  template <class T, class Container>\n+    bool operator<=(const stack<T, Container>& x,\n+                    const stack<T, Container>& y);\n+}"}, {"sha": "713fb79ce556d4d2b40e0cb55ab9fb156b009775", "filename": "libstdc++-v3/testsuite/23_containers/headers/vector/synopsis.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,81 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <vector>\n+\n+namespace std {\n+  template <class T, class Allocator> class vector;\n+\n+  template <class T, class Allocator>\n+    bool operator==(const vector<T,Allocator>& x,\n+                    const vector<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator< (const vector<T,Allocator>& x,\n+                    const vector<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator!=(const vector<T,Allocator>& x,\n+                    const vector<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator> (const vector<T,Allocator>& x,\n+                    const vector<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator>=(const vector<T,Allocator>& x,\n+                    const vector<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    bool operator<=(const vector<T,Allocator>& x,\n+                    const vector<T,Allocator>& y);\n+\n+  template <class T, class Allocator>\n+    void swap(vector<T,Allocator>& x, vector<T,Allocator>& y);\n+\n+  template <class Allocator> class vector<bool,Allocator>;\n+\n+  template <class Allocator>\n+    bool operator==(const vector<bool,Allocator>& x,\n+                    const vector<bool,Allocator>& y);\n+\n+  template <class Allocator>\n+    bool operator< (const vector<bool,Allocator>& x,\n+                    const vector<bool,Allocator>& y);\n+\n+  template <class Allocator>\n+    bool operator!=(const vector<bool,Allocator>& x,\n+                    const vector<bool,Allocator>& y);\n+\n+  template <class Allocator>\n+    bool operator> (const vector<bool,Allocator>& x,\n+                    const vector<bool,Allocator>& y);\n+\n+  template <class Allocator>\n+    bool operator>=(const vector<bool,Allocator>& x,\n+                    const vector<bool,Allocator>& y);\n+\n+  template <class Allocator>\n+    bool operator<=(const vector<bool,Allocator>& x,\n+                    const vector<bool,Allocator>& y);\n+\n+  template <class Allocator>\n+    void swap(vector<bool,Allocator>& x, vector<bool,Allocator>& y);\n+}"}, {"sha": "1bbc639d6e0617a4474ec9bb727aa528282431ca", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/list/explicit_instantiation/1.cc"}, {"sha": "8b27d10251bd10b2b20350e3d460437c6790881e", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/list/explicit_instantiation/2.cc"}, {"sha": "cdbec31dec36435ef728ae54425e80705c6df522", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/list/explicit_instantiation/3.cc"}, {"sha": "57b950b432e8ad6980cd9261873a52ac15079142", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/partial_specialization/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fpartial_specialization%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/list/1.cc"}, {"sha": "b898b4b77e8c49a8c464262d6637ae2182ed9ad4", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/map/explicit_instantiation/1.cc"}, {"sha": "433349434c10f652140189249d01ce97d00ae700", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/map/explicit_instantiation/2.cc"}, {"sha": "0a8866d64b2edf04530d566575028495f4f01411", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/map/explicit_instantiation/3.cc"}, {"sha": "3d20c1fdcd25d9e9cf5042f55b7a4495fab82e02", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/partial_specialization/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fpartial_specialization%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/map/1.cc"}, {"sha": "05db935721baa21cb14400b7a70458d4225c33d7", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multimap/explicit_instantiation/1.cc"}, {"sha": "86527fd1fb868d5adb0643b39f1ea2285690ae83", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multimap/explicit_instantiation/2.cc"}, {"sha": "cdb7e96e00af3c7e187b48ea3eb7f87c582ddcd2", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multimap/explicit_instantiation/3.cc"}, {"sha": "2b04d68287ba93e865e56f187fdc7eb1a81bed96", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/partial_specialization/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fpartial_specialization%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multimap/1.cc"}, {"sha": "3ed6701ac6bf77f1d69873f0ddefbefc2ba3219c", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset/explicit_instantiation/1.cc"}, {"sha": "c1e69b76832ec2dd7a82b28c0182017fd8715421", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset/explicit_instantiation/2.cc"}, {"sha": "947809773690ed692d33cb3fd82cf8a9277709a9", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset/explicit_instantiation/3.cc"}, {"sha": "2df195f4fd88200e7735b3d7ae351ab698985dc7", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/partial_specialization/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fpartial_specialization%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset/1.cc"}, {"sha": "648040d7e2604c6f88783a1f3b5d192da7189f4f", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <queue>\n+\n+template class std::priority_queue<int>;"}, {"sha": "081f73ac7f35fdd765a79d6fc617320bde038efe", "filename": "libstdc++-v3/testsuite/23_containers/queue/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <queue>\n+\n+template class std::queue<int>;"}, {"sha": "7eb7248e150c53add2534ea7704aa80d290f3028", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/set/explicit_instantiation/1.cc"}, {"sha": "44bc5debb515202bde3a03e6509a3080bd30d0f6", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/set/explicit_instantiation/2.cc"}, {"sha": "1f2c69bb992f17b307035608ea429635013b1a80", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/set/explicit_instantiation/3.cc"}, {"sha": "9a9a78168d4b1ac389f88e72d7df6383b1af442d", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/partial_specialization/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fpartial_specialization%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/set/1.cc"}, {"sha": "ee0a2446333d8d4ad9e1dfadea8da839c9cff7ef", "filename": "libstdc++-v3/testsuite/23_containers/stack/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <stack>\n+\n+template class std::stack<int>;"}, {"sha": "58de322b1513512d1c2c347a86bfe6ca33d05c75", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/explicit_instantiation/1.cc"}, {"sha": "0a48971380e75ccc21bf8d161112279077e309b2", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/explicit_instantiation/2.cc"}, {"sha": "263a7c875fc6b5bcd4cf3488eedc1f19e92b368c", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/explicit_instantiation/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/explicit_instantiation/3.cc"}, {"sha": "074912db7e57bece3f8c3e8c822e275c1f845d50", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/partial_specialization/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fpartial_specialization%2F1.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/1.cc"}, {"sha": "ce2f1ff41defdb2b9071c41d3be5ba24ad09831f", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/2.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,37 @@\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.1 Template class back_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test02()\n+{\n+  typedef std::back_insert_iterator<std::list<int> > iterator_type;\n+  std::list<int> li;\n+  iterator_type it = std::back_inserter(li);\n+}\n+\n+int main() \n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "527301af6f2eae26bc7244a5236a6a5c132af4b0", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/requirements/base_classes.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.1 Template class back_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  list<int> l;\n+  typedef back_insert_iterator<list<int> > test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator  r_it(l);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+}"}, {"sha": "1d2d4e0b15d9416718069ef0f0f7d1ee90fd17ff", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/requirements/container.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fcontainer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fcontainer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fcontainer.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.1 Template class back_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+// Check data member 'container' accessible.\n+class test_dm : public std::back_insert_iterator<std::list<int> >\n+{\n+  container_type l;\n+  container_type* p;\n+public:\n+  test_dm():  std::back_insert_iterator<std::list<int> >(l), p(container) { }\n+};"}, {"sha": "dedcefb9b168edc6fd565222eab8a7cc48d46444", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/requirements/explicit_instantiation.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.1 Template class back_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+// Make sure iterator can be instantiated.\n+template class std::back_insert_iterator<std::list<int> >;"}, {"sha": "3253d44a946ebff85c7097497d44b199919dd754", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/requirements/typedefs.cc", "status": "renamed", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n@@ -27,45 +28,12 @@ void test01()\n {\n   using namespace std;\n \n-  // Check for required base class.\n-  list<int> l;\n-  typedef back_insert_iterator<list<int> > test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n-  test_iterator  r_it(l);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n   // Check for required typedefs\n+  typedef back_insert_iterator<list<int> > test_iterator;\n   typedef test_iterator::value_type value_type;\n   typedef test_iterator::difference_type difference_type;\n   typedef test_iterator::pointer pointer;\n   typedef test_iterator::reference reference;\n   typedef test_iterator::iterator_category iteratory_category;\n   typedef test_iterator::container_type container_type;\n }\n-\n-\n-// Make sure iterator can be instantiated.\n-template class std::back_insert_iterator<std::list<int> >;\n-\n-void test02()\n-{\n-  typedef std::back_insert_iterator<std::list<int> > iterator_type;\n-  std::list<int> li;\n-  iterator_type it = std::back_inserter(li);\n-}\n-\n-// Check data member 'container' accessible.\n-class test_dm : public std::back_insert_iterator<std::list<int> >\n-{\n-  container_type l;\n-  container_type* p;\n-public:\n-  test_dm():  std::back_insert_iterator<std::list<int> >(l), p(container) { }\n-};\n-\n-int main() \n-{ \n-  test01();\n-  test02();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator.cc"}, {"sha": "fee624b5172a1c2782c516b7480a49e3797cd9ee", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/2.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,37 @@\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.3 Template class front_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test02()\n+{\n+  typedef std::front_insert_iterator<std::list<int> > iterator_type;\n+  std::list<int> li;\n+  iterator_type it = std::front_inserter(li);\n+}\n+\n+int main() \n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "f037f76a64a18b03c746c0bacfd96d332d1f837d", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/requirements/base_classes.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.3 Template class front_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  list<int> l;\n+  typedef front_insert_iterator<list<int> > test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator  r_it(l);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+}"}, {"sha": "696292d2575780f00b29f97e3dbf5fed5851df32", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/requirements/container.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fcontainer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fcontainer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fcontainer.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.3 Template class front_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+// Check data member 'container' accessible.\n+class test_dm : public std::front_insert_iterator<std::list<int> >\n+{\n+  container_type l;\n+  container_type* p;\n+public:\n+  test_dm(): std::front_insert_iterator<std::list<int> >(l), p(container) { }\n+};"}, {"sha": "b6f13b197ca7819889f4187a9888859e8bd88096", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/requirements/explicit_instantiation.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.3 Template class front_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+// Make sure iterator can be instantiated.\n+template class std::front_insert_iterator<std::list<int> >;"}, {"sha": "a3ce57e5fda8aa58235231364eb2f9d8359e2c09", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/requirements/typedefs.cc", "status": "renamed", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n@@ -27,44 +28,12 @@ void test01()\n {\n   using namespace std;\n \n-  // Check for required base class.\n-  list<int> l;\n-  typedef front_insert_iterator<list<int> > test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n-  test_iterator  r_it(l);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n   // Check for required typedefs\n+  typedef front_insert_iterator<list<int> > test_iterator;\n   typedef test_iterator::value_type value_type;\n   typedef test_iterator::difference_type difference_type;\n   typedef test_iterator::pointer pointer;\n   typedef test_iterator::reference reference;\n   typedef test_iterator::iterator_category iteratory_category;\n   typedef test_iterator::container_type container_type;\n }\n-\n-// Make sure iterator can be instantiated.\n-template class std::front_insert_iterator<std::list<int> >;\n-\n-void test02()\n-{\n-  typedef std::front_insert_iterator<std::list<int> > iterator_type;\n-  std::list<int> li;\n-  iterator_type it = std::front_inserter(li);\n-}\n-\n-// Check data member 'container' accessible.\n-class test_dm : public std::front_insert_iterator<std::list<int> >\n-{\n-  container_type l;\n-  container_type* p;\n-public:\n-  test_dm(): std::front_insert_iterator<std::list<int> >(l), p(container) { }\n-};\n-\n-int main() \n-{ \n-  test01();\n-  test02();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator.cc"}, {"sha": "fdb22f05239dd270e4e1d2905fb3f162e1a78c2f", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis.cc", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,128 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+\n+namespace std {\n+\n+  // 24.3, primitives:\n+  template<class Iterator> struct iterator_traits;\n+  template<class T> struct iterator_traits<T*>;\n+\n+  template<class Category, class T, class Distance,\n+\t   class Pointer, class Reference> struct iterator;\n+\n+  struct input_iterator_tag;\n+  struct output_iterator_tag;\n+  struct forward_iterator_tag;\n+  struct bidirectional_iterator_tag;\n+  struct random_access_iterator_tag;\n+\n+  // 24.3.4, iterator operations:\n+  template <class InputIterator, class Distance>\n+  void \n+  advance(InputIterator& i, Distance n);\n+\n+  template <class InputIterator>\n+  typename iterator_traits<InputIterator>::difference_type\n+  distance(InputIterator first, InputIterator last);\n+\n+  // 24.4, predefined iterators:\n+  template <class Iterator> class reverse_iterator;\n+\n+  template <class Iterator>\n+  bool operator==(const reverse_iterator<Iterator>& x,\n+\t\t  const reverse_iterator<Iterator>& y);\n+\n+  template <class Iterator>\n+  bool operator<(const reverse_iterator<Iterator>& x,\n+\t\t const reverse_iterator<Iterator>& y);\n+\n+  template <class Iterator>\n+  bool operator!=(const reverse_iterator<Iterator>& x,\n+\t\t  const reverse_iterator<Iterator>& y);\n+\n+  template <class Iterator>\n+  bool operator>(const reverse_iterator<Iterator>& x,\n+\t\t const reverse_iterator<Iterator>& y);\n+\n+  template <class Iterator>\n+  bool operator>=(const reverse_iterator<Iterator>& x,\n+\t\t  const reverse_iterator<Iterator>& y);\n+\n+  template <class Iterator>\n+  bool operator<=(const reverse_iterator<Iterator>& x,\n+\t\t  const reverse_iterator<Iterator>& y);\n+\n+  template <class Iterator>\n+  typename reverse_iterator<Iterator>::difference_type \n+  operator-(const reverse_iterator<Iterator>& x, \n+\t    const reverse_iterator<Iterator>& y);\n+\n+  template <class Iterator>\n+  reverse_iterator<Iterator>\n+  operator+(typename reverse_iterator<Iterator>::difference_type n,\n+\t    const reverse_iterator<Iterator>& x);\n+\n+  template <class Container> class back_insert_iterator;\n+ \n+  template <class Container>\n+  back_insert_iterator<Container> back_inserter(Container& x);\n+\n+  template <class Container> class front_insert_iterator;\n+\n+  template <class Container>\n+  front_insert_iterator<Container> front_inserter(Container& x);\n+\n+  template <class Container> class insert_iterator;\n+\n+  template <class Container, class Iterator>\n+  insert_iterator<Container> inserter(Container& x, Iterator i);\n+\n+  // 24.5, stream iterators:\n+  template <class T, class charT, class traits, class Distance>\n+  class istream_iterator;\n+\n+  template <class T, class charT, class traits, class Distance>\n+  bool operator==(const istream_iterator<T,charT,traits,Distance>& x,\n+\t\t  const istream_iterator<T,charT,traits,Distance>& y);\n+\n+  template <class T, class charT, class traits, class Distance>\n+  bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,\n+\t\t  const istream_iterator<T,charT,traits,Distance>& y);\n+\n+  template <class T, class charT, class traits>\n+  class ostream_iterator;\n+\n+  template<class charT, class traits>\n+  class istreambuf_iterator;\n+\n+  template <class charT, class traits>\n+  bool \n+  operator==(const istreambuf_iterator<charT,traits>&, \n+\t     const istreambuf_iterator<charT,traits>&);\n+\n+  template <class charT, class traits>\n+    bool operator!=(const istreambuf_iterator<charT,traits>&,\n+                    const istreambuf_iterator<charT,traits>&);\n+\n+  template <class charT, class traits>\n+    class ostreambuf_iterator;\n+}"}, {"sha": "0db2173a890f3460fcf6f90e7da0ff8424c15294", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/types_std.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+\n+namespace gnu\n+{\n+  typedef std::input_iterator_tag t1;\n+  typedef std::output_iterator_tag t2;\n+  typedef std::forward_iterator_tag t3;\n+  typedef std::bidirectional_iterator_tag t4;\n+  typedef std::random_access_iterator_tag t5;\n+}"}, {"sha": "951d32987d8760c11034d9dea402a760e1918fee", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator.cc", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ec65429c2d4b176bccc495682b1b37b3d31b7c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc?ref=32ec65429c2d4b176bccc495682b1b37b3d31b7c", "patch": "@@ -1,78 +0,0 @@\n-// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 24.4.2.5 Template class insert_iterator\n-\n-#include <iterator>\n-#include <list>\n-\n-void test01()\n-{\n-  using namespace std;\n-\n-  // Check for required base class.\n-  list<int> l;\n-  list<int>::iterator li = l.begin();\n-\n-  typedef insert_iterator<list<int> > test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n-  test_iterator  r_it(l, li);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n-  // Check for required typedefs\n-  typedef test_iterator::value_type value_type;\n-  typedef test_iterator::difference_type difference_type;\n-  typedef test_iterator::pointer pointer;\n-  typedef test_iterator::reference reference;\n-  typedef test_iterator::iterator_category iteratory_category;\n-  typedef test_iterator::container_type container_type;\n-}\n-\n-\n-\n-// Make sure iterator can be instantiated.\n-template class std::insert_iterator<std::list<int> >;\n-\n-void test02()\n-{\n-  typedef std::insert_iterator<std::list<int> > iterator_type;\n-\n-  std::list<int> li;\n-  std::list<int>::iterator liit = li.begin();\n-  iterator_type it01(li, liit);\n-  iterator_type it02 = std::inserter(li, liit);\n-}\n-\n-// Check data member 'container' accessible.\n-class test_dm : public std::insert_iterator<std::list<int> >\n-{\n-  container_type l;\n-  container_type::iterator i;\n-  container_type* p;\n-public:\n-  test_dm(): std::insert_iterator<std::list<int> >(l, i), p(container) { }\n-};\n-\n-int main() \n-{ \n-  test01();\n-  test02();\n-  return 0;\n-}"}, {"sha": "4a8222a7358c2bda45222392796e9a42a1d345db", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,40 @@\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.5 Template class insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test02()\n+{\n+  typedef std::insert_iterator<std::list<int> > iterator_type;\n+\n+  std::list<int> li;\n+  std::list<int>::iterator liit = li.begin();\n+  iterator_type it01(li, liit);\n+  iterator_type it02 = std::inserter(li, liit);\n+}\n+\n+int main() \n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "5becd2e8755ec07e3f1ae63ef8efd3efb6aa9129", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/requirements/base_classes.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.5 Template class insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  list<int> l;\n+  list<int>::iterator li = l.begin();\n+\n+  typedef insert_iterator<list<int> > test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator  r_it(l, li);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+}\n+"}, {"sha": "b4efd62e762aa6821a24322051dd752c143b23df", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/requirements/container.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fcontainer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fcontainer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fcontainer.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.5 Template class insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+// Check data member 'container' accessible.\n+class test_dm : public std::insert_iterator<std::list<int> >\n+{\n+  container_type l;\n+  container_type::iterator i;\n+  container_type* p;\n+public:\n+  test_dm(): std::insert_iterator<std::list<int> >(l, i), p(container) { }\n+};"}, {"sha": "d056073ca5a4c2e95e225da04477334f655b0882", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/requirements/explicit_instantiation.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.5 Template class insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+// Make sure iterator can be instantiated.\n+template class std::insert_iterator<std::list<int> >;"}, {"sha": "7ebed33a9e48a01bb8122de749bd29929a1c97ba", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/requirements/typedefs.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.2.5 Template class insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required typedefs\n+  typedef insert_iterator<list<int> > test_iterator;\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+  typedef test_iterator::container_type container_type;\n+}\n+"}, {"sha": "ea26105b43d2a93ffb78d5b4ac764c9631691161", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/2.cc", "status": "renamed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -24,32 +24,6 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  using namespace std;\n-\n-  // Check for required base class.\n-  typedef istream_iterator<long> test_iterator;\n-  typedef iterator<input_iterator_tag, long, ptrdiff_t, const long*, \n-    \t\t   const long&> base_iterator;\n-  test_iterator  r_it;\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n-  // Check for required typedefs\n-  typedef test_iterator::value_type value_type;\n-  typedef test_iterator::difference_type difference_type;\n-  typedef test_iterator::pointer pointer;\n-  typedef test_iterator::reference reference;\n-  typedef test_iterator::iterator_category iteratory_category;\n-\n-  typedef test_iterator::char_type char_type;\n-  typedef test_iterator::traits_type traits_type;\n-  typedef test_iterator::istream_type istream_type;\n-}\n-\n-// Instantiate\n-template class std::istream_iterator<char>;\n-\n void test02()\n {\n   using namespace std;\n@@ -86,7 +60,6 @@ void test02()\n \n int main() \n { \n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator.cc"}, {"sha": "c51013e3d50a9d1a01b4504817d900bfd497d3f9", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/requirements/base_classes.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.5.1 Template class istream_iterator\n+\n+#include <iterator>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef istream_iterator<long> test_iterator;\n+  typedef iterator<input_iterator_tag, long, ptrdiff_t, const long*, \n+    \t\t   const long&> base_iterator;\n+  test_iterator  r_it;\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+}"}, {"sha": "04f7bd9f4696a064005da087de7821461b9017ab", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,4 +1,5 @@\n-// 2000-01-01 bkoz\n+// { dg-do compile }\n+// 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n@@ -18,14 +19,11 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, cstring\n+// 24.5.1 Template class istream_iterator\n \n-#include <cstring>\n+#include <iterator>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n \n-\n-int main(void)\n-{\n-  // Make sure size_t is in namespace std\n-  std::size_t i __attribute__((unused)) = std::strlen(\"tibet shop/san francisco (415) 982-0326\");\n-  return 0;\n-}\n+// Instantiate\n+template class std::istream_iterator<char>;", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cstring.cc"}, {"sha": "17b540cb56e5ca45a87b1c5ef092c82d46a4c1f3", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/requirements/typedefs.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.5.1 Template class istream_iterator\n+\n+#include <iterator>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required typedefs\n+  typedef istream_iterator<long> test_iterator;\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+\n+  typedef test_iterator::char_type char_type;\n+  typedef test_iterator::traits_type traits_type;\n+  typedef test_iterator::istream_type istream_type;\n+}"}, {"sha": "c1ee75c767d6d9344335d2566a22b836a3f29dbe", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/requirements/base_classes.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// 1999-06-28 bkoz\n+\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.5.3 template class istreambuf_iterator\n+\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef istreambuf_iterator<char> test_iterator;\n+  typedef char_traits<char>::off_type off_type;\n+  typedef iterator<input_iterator_tag, char, off_type, char*, char&> base_iterator;\n+\n+  istringstream isstream(\"this tag\");\n+  test_iterator  r_it(isstream);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+}"}, {"sha": "a9560f011ef060266ac2cf63256e8abae23ca4f5", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,7 @@\n-// 1999-07-01 bkoz\n+// { dg-do compile }\n+// 1999-06-28 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,13 +19,10 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, sstream\n+// 24.5.3 template class istreambuf_iterator\n \n #include <sstream>\n+#include <iterator>\n #include <testsuite_hooks.h>\n \n-\n-int main(void)\n-{\n-  return 0;\n-}\n+template class std::istreambuf_iterator<char>;", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_sstream.cc"}, {"sha": "810163d2d4d7650f371d05c931b9c49db12351d3", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -29,16 +29,8 @@ void test01()\n {\n   using namespace std;\n \n-  // Check for required base class.\n-  typedef istreambuf_iterator<char> test_iterator;\n-  typedef char_traits<char>::off_type off_type;\n-  typedef iterator<input_iterator_tag, char, off_type, char*, char&> base_iterator;\n-\n-  istringstream isstream(\"this tag\");\n-  test_iterator  r_it(isstream);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n   // Check for required typedefs\n+  typedef istreambuf_iterator<char> test_iterator;\n   typedef test_iterator::value_type value_type;\n   typedef test_iterator::difference_type difference_type;\n   typedef test_iterator::pointer pointer;", "previous_filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/1.cc"}, {"sha": "f8980f34bf292448d1663d70434a64a2d97def7a", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/requirements/base_classes.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.5.4 Template class ostream_iterator\n+\n+#include <iterator>\n+#include <ostream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef ostream_iterator<long> test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  ostringstream osstream(\"this tag\");\n+  test_iterator  r_it(osstream);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+}"}, {"sha": "0c7644c7704e10f9e317bfd41662843732771d8e", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,6 +1,7 @@\n-// 2000-01-01 bkoz\n+// { dg-do compile }\n+// 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,13 +19,11 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 17.4.1.2 Headers, cstdio\n+// 24.5.4 Template class ostream_iterator\n \n-#include <cstdio>\n+#include <iterator>\n+#include <ostream>\n+#include <sstream>\n \n-int main(void)\n-{\n-  // Make sure size_t is in namespace std\n-  std::size_t i __attribute__((unused)) = 5;\n-  return 0;\n-}\n+// Instantiate\n+template class std::ostream_iterator<char>;", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cstdio.cc"}, {"sha": "d7a0835683dd9cbf2469bd2a5bf3e6df5cc27ab0", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/requirements/typedefs.cc", "status": "renamed", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n@@ -28,14 +29,8 @@ void test01()\n {\n   using namespace std;\n \n-  // Check for required base class.\n-  typedef ostream_iterator<long> test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n-  ostringstream osstream(\"this tag\");\n-  test_iterator  r_it(osstream);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n   // Check for required typedefs\n+  typedef ostream_iterator<long> test_iterator;\n   typedef test_iterator::value_type value_type;\n   typedef test_iterator::difference_type difference_type;\n   typedef test_iterator::pointer pointer;\n@@ -46,12 +41,3 @@ void test01()\n   typedef test_iterator::traits_type traits_type;\n   typedef test_iterator::ostream_type ostream_type;\n }\n-\n-// Instantiate\n-template class std::ostream_iterator<char>;\n-\n-int main() \n-{ \n-  test01();\n-  return 0;\n-}", "previous_filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator.cc"}, {"sha": "1fe0a8f50e3a8e9921d9a79b1a013657c5420d4f", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/requirements/base_classes.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// 2001-04-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.5.4 template class ostreambuf_iterator\n+\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef ostreambuf_iterator<char> test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  ostringstream osstream(\"this tag\");\n+  test_iterator  r_it(osstream);\n+  base_iterator* base __attribute__((unused)) = &r_it;\n+}"}, {"sha": "c46caae1fde64d2123724f48b1aec65b4c07be0a", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/requirements/explicit_instantiation.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <iterator>\n+#include <sstream>\n+\n+template class std::ostreambuf_iterator<char>;"}, {"sha": "bc0266b50ebd777f7f6f64710f5499b0a2fb3806", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -29,14 +29,8 @@ void test01()\n {\n   using namespace std;\n \n-  // Check for required base class.\n-  typedef ostreambuf_iterator<char> test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n-  ostringstream osstream(\"this tag\");\n-  test_iterator  r_it(osstream);\n-  base_iterator* base __attribute__((unused)) = &r_it;\n-\n   // Check for required typedefs\n+  typedef ostreambuf_iterator<char> test_iterator;\n   typedef test_iterator::value_type value_type;\n   typedef test_iterator::difference_type difference_type;\n   typedef test_iterator::pointer pointer;", "previous_filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/1.cc"}, {"sha": "80c4e715d1b76e94e299d5522fed163e83061378", "filename": "libstdc++-v3/testsuite/24_iterators/random_access_iterator/26020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2F26020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2F26020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2F26020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/24_iterators/26020.cc"}, {"sha": "fb61d8004db66de099d45b8e30b4afdd09b34fe3", "filename": "libstdc++-v3/testsuite/24_iterators/random_access_iterator/string_vector_iterators.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2Fstring_vector_iterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2Fstring_vector_iterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2Fstring_vector_iterators.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/24_iterators/iterator.cc"}, {"sha": "481c209adf07557bb472e64892087966d1906833", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/2.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -39,14 +39,6 @@ void test02()\n   5 + it02;\n }\n \n-// Check data member 'current' accessible.\n-class test_dm : public std::reverse_iterator<int*>\n-{\n-  int* p;\n-public:\n-  test_dm(): p(current) { }\n-};\n-\n int main() \n { \n   test02();"}, {"sha": "9029df0f699489aab0826c996bd617e12eefeaa9", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -38,14 +38,4 @@ void test01()\n     base_iterator;\n   test_iterator  r_it(&l);\n   base_iterator* base __attribute__((unused)) = &r_it;\n-\n-  // Check for required typedefs\n-  typedef test_iterator::value_type value_type;\n-  typedef test_iterator::difference_type difference_type;\n-  typedef test_iterator::pointer pointer;\n-  typedef test_iterator::reference reference;\n-  typedef test_iterator::iterator_category iteratory_category;\n }\n-\n-// Make sure iterator can be instantiated.\n-template class std::reverse_iterator<int*>;", "previous_filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/1.cc"}, {"sha": "0981dbfe884a96fc035e1ee07ae48c1101a114e5", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/requirements/current.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fcurrent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fcurrent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fcurrent.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.1.2 Reverse iterators\n+\n+#include <iterator>\n+\n+// Check data member 'current' accessible.\n+class test_dm : public std::reverse_iterator<int*>\n+{\n+  int* p;\n+public:\n+  test_dm(): p(current) { }\n+};"}, {"sha": "f0e2351fe062d5b68fe019851adfab9489bf27c1", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/requirements/explicit_instantiation.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.1.2 Reverse iterators\n+\n+#include <iterator>\n+\n+// Make sure iterator can be instantiated.\n+template class std::reverse_iterator<int*>;"}, {"sha": "d9870444456ceb3731e7e0d659e04ffdb861629f", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.1.2 Reverse iterators\n+\n+#include <iterator>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required typedefs\n+  typedef reverse_iterator<long*> test_iterator;\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+}"}, {"sha": "032fa31efecf87b429060f78c0f6b47891647c56", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "added", "additions": 404, "deletions": 0, "changes": 404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,404 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+\n+namespace std {\n+  // 25.1, non-modifying sequence operations:\n+  template<class InputIterator, class Function>\n+    Function for_each(InputIterator first, InputIterator last, Function f);\n+  template<class InputIterator, class T>\n+    InputIterator find(InputIterator first, InputIterator last,\n+                               const T& value);\n+  template<class InputIterator, class Predicate>\n+    InputIterator find_if(InputIterator first, InputIterator last,\n+                                   Predicate pred);\n+  template<class ForwardIterator1, class ForwardIterator2>\n+    ForwardIterator1\n+       find_end(ForwardIterator1 first1, ForwardIterator1 last1,\n+                    ForwardIterator2 first2, ForwardIterator2 last2);\n+  template<class ForwardIterator1, class ForwardIterator2,\n+               class BinaryPredicate>\n+    ForwardIterator1\n+       find_end(ForwardIterator1 first1, ForwardIterator1 last1,\n+                    ForwardIterator2 first2, ForwardIterator2 last2,\n+                    BinaryPredicate pred);\n+  template<class ForwardIterator1, class ForwardIterator2>\n+    ForwardIterator1\n+       find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,\n+                           ForwardIterator2 first2, ForwardIterator2 last2);\n+  template<class ForwardIterator1, class ForwardIterator2,\n+               class BinaryPredicate>\n+    ForwardIterator1\n+       find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,\n+                    ForwardIterator2 first2, ForwardIterator2 last2,\n+                    BinaryPredicate pred);\n+\n+template<class ForwardIterator>\n+  ForwardIterator adjacent_find(ForwardIterator first,\n+                                ForwardIterator last);\n+\n+template<class ForwardIterator, class BinaryPredicate>\n+  ForwardIterator adjacent_find(ForwardIterator first,\n+      ForwardIterator last, BinaryPredicate pred);\n+\n+template<class InputIterator, class T>\n+  typename iterator_traits<InputIterator>::difference_type\n+    count(InputIterator first, InputIterator last, const T& value);\n+\n+template<class InputIterator, class Predicate>\n+  typename iterator_traits<InputIterator>::difference_type\n+    count_if(InputIterator first, InputIterator last, Predicate pred);\n+template<class InputIterator1, class InputIterator2>\n+  pair<InputIterator1, InputIterator2>\n+    mismatch(InputIterator1 first1, InputIterator1 last1,\n+             InputIterator2 first2);\n+template\n+ <class InputIterator1, class InputIterator2, class BinaryPredicate>\n+  pair<InputIterator1, InputIterator2>\n+    mismatch(InputIterator1 first1, InputIterator1 last1,\n+      InputIterator2 first2, BinaryPredicate pred);\n+template<class InputIterator1, class InputIterator2>\n+  bool equal(InputIterator1 first1, InputIterator1 last1,\n+             InputIterator2 first2);\n+template\n+ <class InputIterator1, class InputIterator2, class BinaryPredicate>\n+  bool equal(InputIterator1 first1, InputIterator1 last1,\n+             InputIterator2 first2, BinaryPredicate pred);\n+\n+template<class ForwardIterator1, class ForwardIterator2>\n+  ForwardIterator1 search\n+    (ForwardIterator1 first1, ForwardIterator1 last1,\n+     ForwardIterator2 first2, ForwardIterator2 last2);\n+\n+template<class ForwardIterator1, class ForwardIterator2,\n+         class BinaryPredicate>\n+  ForwardIterator1 search\n+    (ForwardIterator1 first1, ForwardIterator1 last1,\n+     ForwardIterator2 first2, ForwardIterator2 last2,\n+                          BinaryPredicate pred);\n+\n+template<class ForwardIterator, class Size, class T>\n+  ForwardIterator search_n(ForwardIterator first, ForwardIterator last,\n+                          Size count, const T& value);\n+\n+template <class ForwardIterator, class Size, class T, class BinaryPredicate>\n+  ForwardIterator search_n(ForwardIterator first, ForwardIterator last,\n+                          Size count, const T& value,\n+                          BinaryPredicate pred);\n+\n+// 25.2, modifying sequence operations:\n+// 25.2.1, copy:\n+template<class InputIterator, class OutputIterator>\n+  OutputIterator copy(InputIterator first, InputIterator last,\n+                               OutputIterator result);\n+template<class BidirectionalIterator1, class BidirectionalIterator2>\n+  BidirectionalIterator2\n+     copy_backward\n+         (BidirectionalIterator1 first, BidirectionalIterator1 last,\n+          BidirectionalIterator2 result);\n+// 25.2.2, swap:\n+template<class T> void swap(T& a, T& b);\n+template<class ForwardIterator1, class ForwardIterator2>\n+  ForwardIterator2 swap_ranges(ForwardIterator1 first1,\n+         ForwardIterator1 last1, ForwardIterator2 first2);\n+template<class ForwardIterator1, class ForwardIterator2>\n+  void iter_swap(ForwardIterator1 a, ForwardIterator2 b);\n+template<class InputIterator, class OutputIterator, class UnaryOperation>\n+  OutputIterator transform(InputIterator first, InputIterator last,\n+                                      OutputIterator result, UnaryOperation op);\n+template<class InputIterator1, class InputIterator2, class OutputIterator,\n+             class BinaryOperation>\n+  OutputIterator transform(InputIterator1 first1, InputIterator1 last1,\n+                                      InputIterator2 first2, OutputIterator result,\n+                                      BinaryOperation binary_op);\n+template<class ForwardIterator, class T>\n+  void replace(ForwardIterator first, ForwardIterator last,\n+                     const T& old_value, const T& new_value);\n+template<class ForwardIterator, class Predicate, class T>\n+  void replace_if(ForwardIterator first, ForwardIterator last,\n+                         Predicate pred, const T& new_value);\n+template<class InputIterator, class OutputIterator, class T>\n+  OutputIterator replace_copy(InputIterator first, InputIterator last,\n+                                         OutputIterator result,\n+                                         const T& old_value, const T& new_value);\n+template<class Iterator, class OutputIterator, class Predicate, class T>\n+  OutputIterator replace_copy_if(Iterator first, Iterator last,\n+                                            OutputIterator result,\n+                                            Predicate pred, const T& new_value);\n+template<class ForwardIterator, class T>\n+  void fill(ForwardIterator first, ForwardIterator last, const T& value);\n+template<class OutputIterator, class Size, class T>\n+  void fill_n(OutputIterator first, Size n, const T& value);\n+template<class ForwardIterator, class Generator>\n+  void generate(ForwardIterator first, ForwardIterator last,\n+                       Generator gen);\n+template<class OutputIterator, class Size, class Generator>\n+  void generate_n(OutputIterator first, Size n, Generator gen);\n+\n+template<class ForwardIterator, class T>\n+  ForwardIterator remove(ForwardIterator first, ForwardIterator last,\n+                                const T& value);\n+template<class ForwardIterator, class Predicate>\n+  ForwardIterator remove_if(ForwardIterator first, ForwardIterator last,\n+                                   Predicate pred);\n+template<class InputIterator, class OutputIterator, class T>\n+  OutputIterator remove_copy(InputIterator first, InputIterator last,\n+                                    OutputIterator result, const T& value);\n+template<class InputIterator, class OutputIterator, class Predicate>\n+  OutputIterator remove_copy_if(InputIterator first, InputIterator last,\n+                                       OutputIterator result, Predicate pred);\n+template<class ForwardIterator>\n+  ForwardIterator unique(ForwardIterator first, ForwardIterator last);\n+template<class ForwardIterator, class BinaryPredicate>\n+  ForwardIterator unique(ForwardIterator first, ForwardIterator last,\n+                                BinaryPredicate pred);\n+template<class InputIterator, class OutputIterator>\n+  OutputIterator unique_copy(InputIterator first, InputIterator last,\n+                                    OutputIterator result);\n+template<class InputIterator, class OutputIterator, class BinaryPredicate>\n+  OutputIterator unique_copy(InputIterator first, InputIterator last,\n+                                    OutputIterator result, BinaryPredicate pred);\n+template<class BidirectionalIterator>\n+  void reverse(BidirectionalIterator first, BidirectionalIterator last);\n+template<class BidirectionalIterator, class OutputIterator>\n+  OutputIterator reverse_copy(BidirectionalIterator first,\n+                                     BidirectionalIterator last,\n+                                     OutputIterator result);\n+template<class ForwardIterator>\n+  void rotate(ForwardIterator first, ForwardIterator middle,\n+                     ForwardIterator last);\n+template<class ForwardIterator, class OutputIterator>\n+  OutputIterator rotate_copy\n+     (ForwardIterator first, ForwardIterator middle,\n+       ForwardIterator last, OutputIterator result);\n+template<class RandomAccessIterator>\n+  void random_shuffle(RandomAccessIterator first,\n+                             RandomAccessIterator last);\n+template<class RandomAccessIterator, class RandomNumberGenerator>\n+  void random_shuffle(RandomAccessIterator first,\n+                             RandomAccessIterator last,\n+                             RandomNumberGenerator& rand);\n+// 25.2.12, partitions:\n+template<class BidirectionalIterator, class Predicate>\n+  BidirectionalIterator partition(BidirectionalIterator first,\n+                                         BidirectionalIterator last,\n+                                         Predicate pred);\n+template<class BidirectionalIterator, class Predicate>\n+  BidirectionalIterator stable_partition(BidirectionalIterator first,\n+                                                 BidirectionalIterator last,\n+                                                Predicate pred);\n+// 25.3, sorting and related operations:\n+// 25.3.1, sorting:\n+template<class RandomAccessIterator>\n+  void sort(RandomAccessIterator first, RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void sort(RandomAccessIterator first, RandomAccessIterator last,\n+                  Compare comp);\n+template<class RandomAccessIterator>\n+  void stable_sort(RandomAccessIterator first, RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void stable_sort(RandomAccessIterator first, RandomAccessIterator last,\n+                            Compare comp);\n+template<class RandomAccessIterator>\n+  void partial_sort(RandomAccessIterator first,\n+                              RandomAccessIterator middle,\n+                              RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void partial_sort(RandomAccessIterator first,\n+                              RandomAccessIterator middle,\n+                              RandomAccessIterator last, Compare comp);\n+template<class InputIterator, class RandomAccessIterator>\n+  RandomAccessIterator\n+     partial_sort_copy(InputIterator first, InputIterator last,\n+                                RandomAccessIterator result_first,\n+                                RandomAccessIterator result_last);\n+template<class InputIterator, class RandomAccessIterator, class Compare>\n+  RandomAccessIterator\n+     partial_sort_copy(InputIterator first, InputIterator last,\n+                                RandomAccessIterator result_first,\n+                                RandomAccessIterator result_last,\n+                                Compare comp);\n+template<class RandomAccessIterator>\n+  void nth_element(RandomAccessIterator first, RandomAccessIterator nth,\n+                            RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void nth_element(RandomAccessIterator first, RandomAccessIterator nth,\n+                            RandomAccessIterator last, Compare comp);\n+// 25.3.3, binary search:\n+template<class ForwardIterator, class T>\n+  ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,\n+                                         const T& value);\n+template<class ForwardIterator, class T, class Compare>\n+  ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,\n+                                         const T& value, Compare comp);\n+template<class ForwardIterator, class T>\n+  ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,\n+                                         const T& value);\n+template<class ForwardIterator, class T, class Compare>\n+  ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,\n+                                         const T& value, Compare comp);\n+template<class ForwardIterator, class T>\n+  pair<ForwardIterator, ForwardIterator>\n+     equal_range(ForwardIterator first, ForwardIterator last,\n+                        const T& value);\n+template<class ForwardIterator, class T, class Compare>\n+  pair<ForwardIterator, ForwardIterator>\n+     equal_range(ForwardIterator first, ForwardIterator last,\n+                        const T& value, Compare comp);\n+template<class ForwardIterator, class T>\n+  bool binary_search(ForwardIterator first, ForwardIterator last,\n+                             const T& value);\n+template<class ForwardIterator, class T, class Compare>\n+  bool binary_search(ForwardIterator first, ForwardIterator last,\n+                             const T& value, Compare comp);\n+// 25.3.4, merge:\n+template<class InputIterator1, class InputIterator2, class OutputIterator>\n+  OutputIterator merge(InputIterator1 first1, InputIterator1 last1,\n+                               InputIterator2 first2, InputIterator2 last2,\n+                               OutputIterator result);\n+template<class InputIterator1, class InputIterator2, class OutputIterator,\n+             class Compare>\n+  OutputIterator merge(InputIterator1 first1, InputIterator1 last1,\n+                               InputIterator2 first2, InputIterator2 last2,\n+                               OutputIterator result, Compare comp);\n+template<class BidirectionalIterator>\n+  void inplace_merge(BidirectionalIterator first,\n+                             BidirectionalIterator middle,\n+                             BidirectionalIterator last);\n+template<class BidirectionalIterator, class Compare>\n+  void inplace_merge(BidirectionalIterator first,\n+                             BidirectionalIterator middle,\n+                             BidirectionalIterator last, Compare comp);\n+// 25.3.5, set operations:\n+template<class InputIterator1, class InputIterator2>\n+  bool includes(InputIterator1 first1, InputIterator1 last1,\n+                        InputIterator2 first2, InputIterator2 last2);\n+template<class InputIterator1, class InputIterator2, class Compare>\n+  bool includes\n+     (InputIterator1 first1, InputIterator1 last1,\n+       InputIterator2 first2, InputIterator2 last2, Compare comp);\n+template<class InputIterator1, class InputIterator2, class OutputIterator>\n+  OutputIterator set_union(InputIterator1 first1, InputIterator1 last1,\n+                                   InputIterator2 first2, InputIterator2 last2,\n+                                   OutputIterator result);\n+template<class InputIterator1, class InputIterator2, class OutputIterator,\n+             class Compare>\n+  OutputIterator set_union(InputIterator1 first1, InputIterator1 last1,\n+                                   InputIterator2 first2, InputIterator2 last2,\n+                                   OutputIterator result, Compare comp);\n+template<class InputIterator1, class InputIterator2, class OutputIterator>\n+  OutputIterator set_intersection\n+        (InputIterator1 first1, InputIterator1 last1,\n+          InputIterator2 first2, InputIterator2 last2,\n+          OutputIterator result);\n+template<class InputIterator1, class InputIterator2, class OutputIterator,\n+             class Compare>\n+  OutputIterator set_intersection\n+        (InputIterator1 first1, InputIterator1 last1,\n+          InputIterator2 first2, InputIterator2 last2,\n+          OutputIterator result, Compare comp);\n+template<class InputIterator1, class InputIterator2, class OutputIterator>\n+  OutputIterator set_difference\n+        (InputIterator1 first1, InputIterator1 last1,\n+          InputIterator2 first2, InputIterator2 last2,\n+          OutputIterator result);\n+template<class InputIterator1, class InputIterator2, class OutputIterator,\n+             class Compare>\n+  OutputIterator set_difference\n+        (InputIterator1 first1, InputIterator1 last1,\n+          InputIterator2 first2, InputIterator2 last2,\n+          OutputIterator result, Compare comp);\n+template<class InputIterator1, class InputIterator2, class OutputIterator>\n+  OutputIterator\n+     set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,\n+                                    InputIterator2 first2, InputIterator2 last2,\n+                                    OutputIterator result);\n+template<class InputIterator1, class InputIterator2, class OutputIterator,\n+              class Compare>\n+  OutputIterator\n+     set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,\n+                                    InputIterator2 first2, InputIterator2 last2,\n+                                    OutputIterator result, Compare comp);\n+// 25.3.6, heap operations:\n+template<class RandomAccessIterator>\n+  void push_heap(RandomAccessIterator first, RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void push_heap(RandomAccessIterator first, RandomAccessIterator last,\n+                        Compare comp);\n+template<class RandomAccessIterator>\n+  void pop_heap(RandomAccessIterator first, RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void pop_heap(RandomAccessIterator first, RandomAccessIterator last,\n+                       Compare comp);\n+template<class RandomAccessIterator>\n+  void make_heap(RandomAccessIterator first, RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void make_heap(RandomAccessIterator first, RandomAccessIterator last,\n+                        Compare comp);\n+template<class RandomAccessIterator>\n+  void sort_heap(RandomAccessIterator first, RandomAccessIterator last);\n+template<class RandomAccessIterator, class Compare>\n+  void sort_heap(RandomAccessIterator first, RandomAccessIterator last,\n+                        Compare comp);\n+\n+  // 25.3.7, minimum and maximum:\n+  template<class T> const T& min(const T& a, const T& b);\n+  template<class T, class Compare>\n+    const T& min(const T& a, const T& b, Compare comp);\n+  template<class T> const T& max(const T& a, const T& b);\n+  template<class T, class Compare>\n+    const T& max(const T& a, const T& b, Compare comp);\n+  template<class ForwardIterator>\n+    ForwardIterator min_element\n+       (ForwardIterator first, ForwardIterator last);\n+  template<class ForwardIterator, class Compare>\n+    ForwardIterator min_element(ForwardIterator first, ForwardIterator last,\n+                                     Compare comp);\n+  template<class ForwardIterator>\n+    ForwardIterator max_element\n+       (ForwardIterator first, ForwardIterator last);\n+  template<class ForwardIterator, class Compare>\n+    ForwardIterator max_element(ForwardIterator first, ForwardIterator last,\n+                                     Compare comp);\n+  template<class InputIterator1, class InputIterator2>\n+    bool lexicographical_compare\n+          (InputIterator1 first1, InputIterator1 last1,\n+            InputIterator2 first2, InputIterator2 last2);\n+  template<class InputIterator1, class InputIterator2, class Compare>\n+    bool lexicographical_compare\n+          (InputIterator1 first1, InputIterator1 last1,\n+            InputIterator2 first2, InputIterator2 last2,\n+            Compare comp);\n+\n+  // 25.3.9, permutations\n+  template<class BidirectionalIterator>\n+    bool next_permutation(BidirectionalIterator first,\n+                                 BidirectionalIterator last);\n+  template<class BidirectionalIterator, class Compare>\n+    bool next_permutation(BidirectionalIterator first,\n+                                 BidirectionalIterator last, Compare comp);\n+  template<class BidirectionalIterator>\n+    bool prev_permutation(BidirectionalIterator first,\n+                                 BidirectionalIterator last);\n+  template<class BidirectionalIterator, class Compare>\n+    bool prev_permutation(BidirectionalIterator first,\n+                                 BidirectionalIterator last, Compare comp);\n+}"}, {"sha": "fcbf50bce2f24df87ac08c9e2c912a8392830b97", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/cstdlib/functions_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Fcstdlib%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+namespace gnu\n+{\n+  using std::bsearch;\n+  using std::qsort;\n+}"}, {"sha": "f763b21bdf810afd0556cfd623b63da7d889de07", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/19322.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2F19322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2F19322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2F19322.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/19322.cc"}, {"sha": "5455008c42867bd20ff646fee65e714f5ac70bc1", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/c99_classification_macros_c++.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c%2B%2B.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c%2B%2B.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c%2B%2B.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/c99_classification_macros_c++.cc"}, {"sha": "a9cd0584a33fc4e57873d93c4e79b0317a0638ec", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc99_classification_macros_c.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/c99_classification_macros_c.cc"}, {"sha": "fd0f7c94cf1df5ac65bdf765b13892a855b90564", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/c_math.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc_math.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc_math.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc_math.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/c_math.cc"}, {"sha": "b8f2f921215d844ea62377ce9b586a36476158d7", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/c_math_dynamic.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc_math_dynamic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc_math_dynamic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fc_math_dynamic.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/c_math_dynamic.cc"}, {"sha": "742a3a9b221271d9a432daed9d9f32589e813805", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/fabs_inline.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffabs_inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffabs_inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffabs_inline.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/fabs_inline.cc"}, {"sha": "046b57fd4e940e47377fcce67a3bd528c5123a34", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/functions_std.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cmath>\n+\n+namespace gnu\n+{\n+  using std::acos;\n+  using std::asin;\n+  using std::atan;\n+  using std::atan2;\n+  using std::ceil;\n+  using std::cos;\n+  using std::cosh;\n+  using std::exp;\n+  using std::fabs;\n+  using std::floor;\n+  using std::fmod;\n+  using std::frexp;\n+  using std::ldexp;\n+  using std::log;\n+  using std::log10;\n+  using std::modf;\n+  using std::pow;\n+  using std::sin;\n+  using std::sinh;\n+  using std::sqrt;\n+  using std::tan;\n+  using std::tanh;\n+}"}, {"sha": "5b70b0e30d2bd63b05d541fbeaf6c7182159c933", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cmath>\n+\n+namespace gnu\n+{\n+#ifndef HUGE_VAL\n+    #error \"HUGE_VAL_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "4d41a9640b474c19dd77a056ff281ce374476b0f", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/overloads.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Foverloads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Foverloads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Foverloads.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/overloads.cc"}, {"sha": "8a56f2fddab40fcf0e9d4cfd1982ad09062c5340", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/powi.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fpowi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fpowi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fpowi.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/powi.cc"}, {"sha": "8fba3a3c21b5cccccf2bce351e1491bdfe9341ac", "filename": "libstdc++-v3/testsuite/26_numerics/headers/complex/synopsis.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcomplex%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcomplex%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcomplex%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <complex>\n+\n+namespace std {\n+  template<class T> class complex;\n+  template<> class complex<float>;\n+  template<> class complex<double>;\n+  template<> class complex<long double>;\n+\n+  // 26.2.6 operators:\n+  template<class T>\n+    complex<T> operator+(const complex<T>&, const complex<T>&);\n+  template<class T> complex<T> operator+(const complex<T>&, const T&);\n+  template<class T> complex<T> operator+(const T&, const complex<T>&);\n+  template<class T> complex<T> operator-\n+    (const complex<T>&, const complex<T>&);\n+  template<class T> complex<T> operator-(const complex<T>&, const T&);\n+  template<class T> complex<T> operator-(const T&, const complex<T>&);\n+  template<class T> complex<T> operator*\n+    (const complex<T>&, const complex<T>&);\n+  template<class T> complex<T> operator*(const complex<T>&, const T&);\n+  template<class T> complex<T> operator*(const T&, const complex<T>&);\n+  template<class T> complex<T> operator/\n+    (const complex<T>&, const complex<T>&);\n+  template<class T> complex<T> operator/(const complex<T>&, const T&);\n+  template<class T> complex<T> operator/(const T&, const complex<T>&);\n+  template<class T> complex<T> operator+(const complex<T>&);\n+  template<class T> complex<T> operator-(const complex<T>&);\n+  template<class T> bool operator==\n+    (const complex<T>&, const complex<T>&);\n+  template<class T> bool operator==(const complex<T>&, const T&);\n+  template<class T> bool operator==(const T&, const complex<T>&);\n+\n+\n+  template<class T> bool operator!=(const complex<T>&, const complex<T>&);\n+  template<class T> bool operator!=(const complex<T>&, const T&);\n+  template<class T> bool operator!=(const T&, const complex<T>&);\n+  template<class T, class charT, class traits>\n+  basic_istream<charT, traits>&\n+  operator>>(basic_istream<charT, traits>&, complex<T>&);\n+  template<class T, class charT, class traits>\n+  basic_ostream<charT, traits>&\n+  operator<<(basic_ostream<charT, traits>&, const complex<T>&);\n+\n+  // 26.2.7 values:\n+  template<class T> T real(const complex<T>&);\n+  template<class T> T imag(const complex<T>&);\n+  template<class T> T abs(const complex<T>&);\n+  template<class T> T arg(const complex<T>&);\n+  template<class T> T norm(const complex<T>&);\n+  template<class T> complex<T> conj(const complex<T>&);\n+  template<class T> complex<T> polar(const T& rho, const T& theta = 0);\n+\n+  // 26.2.8 transcendentals:\n+  template<class T> complex<T> cos(const  complex<T>&);\n+  template<class T> complex<T> cosh(const complex<T>&);\n+  template<class T> complex<T> exp(const  complex<T>&);\n+  template<class T> complex<T> log(const  complex<T>&);\n+  template<class T> complex<T> log10(const complex<T>&);\n+  template<class T> complex<T> pow(const complex<T>&, int);\n+  template<class T> complex<T> pow(const complex<T>&, const T&);\n+  template<class T> complex<T> pow(const complex<T>&, const complex<T>&);\n+  template<class T> complex<T> pow(const T&, const complex<T>&);\n+  template<class T> complex<T> sin (const complex<T>&);\n+  template<class T> complex<T> sinh(const complex<T>&);\n+  template<class T> complex<T> sqrt(const complex<T>&);\n+  template<class T> complex<T> tan(const complex<T>&);\n+  template<class T> complex<T> tanh(const complex<T>&);\n+}"}, {"sha": "08ab36e4e63b1d49d16d1c53335a141077a53daf", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/13943.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F13943.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F13943.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F13943.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cstdlib/13943.cc"}, {"sha": "badcecee8a1d5126c46753a4faefe4f7b7008ac7", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/2190.cc", "status": "renamed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F2190.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F2190.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2F2190.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -30,15 +30,8 @@ void test01()\n   std::ldiv_t b __attribute__((unused));\n }\n \n-void test02()\n-{\n-  // Make sure size_t is in namespace std.\n-  std::size_t i __attribute__((unused)) = 5;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/17_intro/header_cstdlib.cc"}, {"sha": "6b5d3082f41c0982be72e8294d86d7256c31b313", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/functions_std.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ffunctions_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+namespace gnu\n+{\n+  using std::abs;\n+  using std::div;\n+  using std::labs;\n+  using std::ldiv;\n+  using std::srand;\n+  using std::rand;\n+}"}, {"sha": "dc8231a9ca4af22ad98ca244a621b97a29ef93ec", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/macros.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fmacros.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+namespace gnu\n+{\n+#ifndef RAND_MAX\n+    #error \"RAND_MAX_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "6af857dc6dcbaff9356705d62babed2c862fe11c", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/types_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+namespace gnu\n+{\n+  std::div_t d;\n+  std::ldiv_t ld;\n+}"}, {"sha": "c322c610255b000f996b8fe00f81fc898f6acb15", "filename": "libstdc++-v3/testsuite/26_numerics/headers/numeric/synopsis.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <numeric>\n+\n+namespace std {\n+  template <class InputIterator, class T>\n+    T accumulate(InputIterator first, InputIterator last, T init);\n+\n+  template <class InputIterator, class T, class BinaryOperation>\n+    T accumulate(InputIterator first, InputIterator last, T init,\n+                 BinaryOperation binary_op);\n+\n+  template <class InputIterator1, class InputIterator2, class T>\n+    T inner_product(InputIterator1 first1, InputIterator1 last1,\n+                    InputIterator2 first2, T init);\n+\n+  template <class InputIterator1, class InputIterator2, class T,\n+            class BinaryOperation1, class BinaryOperation2>\n+    T inner_product(InputIterator1 first1, InputIterator1 last1,\n+                    InputIterator2 first2, T init,\n+                    BinaryOperation1 binary_op1,\n+                    BinaryOperation2 binary_op2);\n+\n+  template <class InputIterator, class OutputIterator>\n+    OutputIterator partial_sum(InputIterator first,\n+                               InputIterator last,\n+                               OutputIterator result);\n+\n+  template <class InputIterator, class OutputIterator,\n+            class BinaryOperation>\n+    OutputIterator partial_sum(InputIterator first,\n+                               InputIterator last,\n+                               OutputIterator result,\n+                               BinaryOperation binary_op);\n+\n+  template <class InputIterator, class OutputIterator>\n+    OutputIterator adjacent_difference(InputIterator first,\n+                                       InputIterator last,\n+                                       OutputIterator result);\n+\n+  template <class InputIterator, class OutputIterator,\n+            class BinaryOperation>\n+    OutputIterator adjacent_difference(InputIterator first,\n+                                       InputIterator last,\n+                                       OutputIterator result,\n+                                       BinaryOperation binary_op);\n+}"}, {"sha": "90a542b4066809ef6fa0b3c68cf6c94861357fca", "filename": "libstdc++-v3/testsuite/26_numerics/headers/valarray/synopsis.cc", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Fsynopsis.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,128 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <valarray>\n+\n+namespace std {\n+  template<class T> class valarray;\n+\n+  class slice;\n+  template<class T> class slice_array;\n+\n+  class gslice;\n+  template<class T> class gslice_array;\n+  template<class T> class mask_array;\n+  template<class T> class indirect_array;\n+  template<class T> valarray<T> operator*\n+    (const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<T> operator* (const valarray<T>&, const T&);\n+  template<class T> valarray<T> operator* (const T&, const valarray<T>&);\n+\n+template<class T> valarray<T> operator/\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator/ (const valarray<T>&, const T&);\n+template<class T> valarray<T> operator/ (const T&, const valarray<T>&);\n+template<class T> valarray<T> operator%\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator% (const valarray<T>&, const T&);\n+template<class T> valarray<T> operator% (const T&, const valarray<T>&);\n+template<class T> valarray<T> operator+\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator+ (const valarray<T>&, const T&);\n+template<class T> valarray<T> operator+ (const T&, const valarray<T>&);\n+template<class T> valarray<T> operator-\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator- (const valarray<T>&, const T&);\n+template<class T> valarray<T> operator- (const T&, const valarray<T>&);\n+template<class T> valarray<T> operator^\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator^ (const valarray<T>&, const T&);\n+template<class T> valarray<T> operator^ (const T&, const valarray<T>&);\n+template<class T> valarray<T> operator&\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator& (const valarray<T>&, const T&);\n+template<class T> valarray<T> operator& (const T&, const valarray<T>&);\n+template<class T> valarray<T> operator|\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator| (const valarray<T>&, const T&);\n+template<class T> valarray<T> operator| (const T&, const valarray<T>&);\n+template<class T> valarray<T> operator<<\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator<<(const valarray<T>&, const T&);\n+template<class T> valarray<T> operator<<(const T&, const valarray<T>&);\n+template<class T> valarray<T> operator>>\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<T> operator>>(const valarray<T>&, const T&);\n+template<class T> valarray<T> operator>>(const T&, const valarray<T>&);\n+template<class T> valarray<bool> operator&&\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<bool> operator&&(const valarray<T>&, const T&);\n+template<class T> valarray<bool> operator&&(const T&, const valarray<T>&);\n+template<class T> valarray<bool> operator||\n+  (const valarray<T>&, const valarray<T>&);\n+template<class T> valarray<bool> operator||(const valarray<T>&, const T&);\n+template<class T> valarray<bool> operator||(const T&, const valarray<T>&);\n+\n+  template<class T>\n+    valarray<bool> operator==(const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<bool> operator==(const valarray<T>&, const T&);\n+  template<class T> valarray<bool> operator==(const T&, const valarray<T>&);\n+  template<class T>\n+    valarray<bool> operator!=(const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<bool> operator!=(const valarray<T>&, const T&);\n+  template<class T> valarray<bool> operator!=(const T&, const valarray<T>&);\n+  template<class T>\n+    valarray<bool> operator< (const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<bool> operator< (const valarray<T>&, const T&);\n+  template<class T> valarray<bool> operator< (const T&, const valarray<T>&);\n+  template<class T>\n+    valarray<bool> operator> (const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<bool> operator> (const valarray<T>&, const T&);\n+  template<class T> valarray<bool> operator> (const T&, const valarray<T>&);\n+  template<class T>\n+    valarray<bool> operator<=(const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<bool> operator<=(const valarray<T>&, const T&);\n+  template<class T> valarray<bool> operator<=(const T&, const valarray<T>&);\n+  template<class T>\n+    valarray<bool> operator>=(const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<bool> operator>=(const valarray<T>&, const T&);\n+  template<class T> valarray<bool> operator>=(const T&, const valarray<T>&);\n+  template<class T> valarray<T> abs  (const valarray<T>&);\n+  template<class T> valarray<T> acos (const valarray<T>&);\n+  template<class T> valarray<T> asin (const valarray<T>&);\n+  template<class T> valarray<T> atan (const valarray<T>&);\n+  template<class T> valarray<T> atan2\n+    (const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<T> atan2(const valarray<T>&, const T&);\n+  template<class T> valarray<T> atan2(const T&, const valarray<T>&);\n+  template<class T> valarray<T> cos (const  valarray<T>&);\n+  template<class T> valarray<T> cosh (const valarray<T>&);\n+  template<class T> valarray<T> exp (const  valarray<T>&);\n+  template<class T> valarray<T> log (const  valarray<T>&);\n+  template<class T> valarray<T> log10(const valarray<T>&);\n+  template<class T> valarray<T> pow(const valarray<T>&, const valarray<T>&);\n+  template<class T> valarray<T> pow(const valarray<T>&, const T&);\n+  template<class T> valarray<T> pow(const T&, const valarray<T>&);\n+  template<class T> valarray<T> sin  (const valarray<T>&);\n+  template<class T> valarray<T> sinh (const valarray<T>&);\n+  template<class T> valarray<T> sqrt (const valarray<T>&);\n+  template<class T> valarray<T> tan  (const valarray<T>&);\n+  template<class T> valarray<T> tanh (const valarray<T>&);\n+}"}, {"sha": "38824dc24ddd7aba8d0997ea1991d3a724da809f", "filename": "libstdc++-v3/testsuite/26_numerics/headers/valarray/types_std.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Ftypes_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Ftypes_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Ftypes_std.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <valarray>\n+\n+namespace gnu\n+{\n+  typedef std::slice t1;\n+  typedef std::gslice t2;\n+}"}, {"sha": "7c208f4b100c9751f61f76349201944a515304fe", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/27867.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F27867.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F27867.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F27867.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/27867.cc"}, {"sha": "52f4c714085c0416e81ff4186399db636a8dddb0", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/28277.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F28277.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/28277.cc"}, {"sha": "c51329221d5fa62bc3d916f77002400cf921f78b", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/30416.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F30416.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F30416.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2F30416.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/30416.cc"}, {"sha": "7dbcfbd52287fc226f5c336721180d0b830af4f0", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/binary_closure.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fbinary_closure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fbinary_closure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fbinary_closure.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/binary_closure.cc"}, {"sha": "9afa93a4b834992934d88384a202a1fbe955ce1e", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/dr543.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fdr543.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fdr543.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fdr543.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/dr543.cc"}, {"sha": "d7ad877d9d7158a2d9899b709bd2d2c42f5da8dd", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/slice.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fslice.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fslice.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fslice.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/slice.cc"}, {"sha": "34888be44e90770c8e658c21b05c2175e02a970c", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/slice_array_assignment.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fslice_array_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fslice_array_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fslice_array_assignment.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/slice_array_assignment.cc"}, {"sha": "3c206e354f5a1d5b03e03c980ac146559eca5d91", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/valarray.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/valarray.cc"}, {"sha": "512cbafd3ce9222fe12213010ab3027b14f3b586", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/valarray_const_bracket.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_const_bracket.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_const_bracket.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_const_bracket.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/valarray_const_bracket.cc"}, {"sha": "735f65f5df75ea6367225ea002d61ee3141bf72e", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/valarray_name_lookup.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_name_lookup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_name_lookup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_name_lookup.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/valarray_name_lookup.cc"}, {"sha": "70ad0b0e7886a6ab40e41a15f664699cae8f149f", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/valarray_operators.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_operators.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/valarray_operators.cc"}, {"sha": "4ce22afb31aa99f1d10a0590cb75a55878a63fde", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_arrays/valarray_subset_assignment.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_subset_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_subset_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_arrays%2Fvalarray_subset_assignment.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/valarray/valarray_subset_assignment.cc"}, {"sha": "e5af462da01b5a282af1d6763e36c1347dd45752", "filename": "libstdc++-v3/testsuite/26_numerics/numeric_operations/sum_diff.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_operations%2Fsum_diff.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_operations%2Fsum_diff.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric_operations%2Fsum_diff.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/26_numerics/numeric/sum_diff.cc"}, {"sha": "8ead347dc696ea9cd36d5804058f88c76ca02e41", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/3.cc"}, {"sha": "9166a1adb2b6abf471445712ae34c37dc24b09b0", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -31,12 +32,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/4.cc"}, {"sha": "f6d3a1cc7e1e94fb0449d595ce50aa407669136b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n@@ -26,8 +27,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n-// { dg-do compile }\n-\n // test05\n // libstdc++/1886\n // should be able to instantiate basic_filebuf for non-standard types.", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/2.cc"}, {"sha": "45dcf59479cd85189db46d263054b46dfafff9fc", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n@@ -24,8 +25,6 @@\n \n #include <fstream>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/1.cc"}, {"sha": "4b01bd10ef4f1237420e8b2a35854f7cfb32bca8", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_fstream/3.cc"}, {"sha": "71089a311aad5f2c5df1b510ed91bc33a0804a9b", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/requirements/base_classes.cc", "status": "renamed", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,4 +1,5 @@\n-// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n+// 2003-03-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n //\n@@ -32,12 +33,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_fstream/4.cc"}, {"sha": "d3ddedc0ac9b428004993386ff2f290935b57493", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n@@ -34,8 +35,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   using __gnu_test::pod_char;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_fstream/2.cc"}, {"sha": "a858ae8bcae7f87d6764e00dafe5067779488294", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n@@ -33,8 +34,6 @@\n #include <fstream>\n #include <testsuite_hooks.h>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_fstream/1.cc"}, {"sha": "896e7028c23b569fb7e4e9ea6b756905218b9395", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/3.cc"}, {"sha": "444c85b87e9e1ddcf8c0e01c7fdbe6b7c60a2416", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -32,12 +33,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/4.cc"}, {"sha": "630f426c21829f8a7ad7ead6cdb6de87064740e2", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <fstream>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   typedef short type_t;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/2.cc"}, {"sha": "e0e32c3e040f1427a89c4a29f61346f86486b201", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <fstream>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/1.cc"}, {"sha": "6b3f7006f45fdc56a149a4cd49b85798ced92ca7", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ios/3.cc"}, {"sha": "f748ecef6e0413996d5b69a437b4e6579e39479d", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/requirements/base_classes.cc", "status": "renamed", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,4 +1,5 @@\n-// 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n+// { dg-do compile }\n+// 2003-03-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n //\n@@ -34,12 +35,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ios/4.cc"}, {"sha": "581bff6ffe13deaa8bf32d829241f6e9fc429085", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <ios>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   typedef short type_t;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ios/2.cc"}, {"sha": "818a159fb3d1bf1363703a0cdc9bd3185834972f", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <ios>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ios/1.cc"}, {"sha": "e0af3ebd3e67194e9d5af0c6e45bec0987b4b5dd", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_iostream/3.cc"}, {"sha": "63fffa58f4e55b9a662c934e108b19a905502cc5", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -36,12 +37,6 @@ void test01()\n   const base_type2* base2 __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_iostream/4.cc"}, {"sha": "6b8e0e0c4733f613ef743fb49ee66d818fc92d0b", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-01-08 bkoz\n \n // Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n@@ -30,8 +31,6 @@\n // 27.6.1.5 - Template class basic_iostream\n // NB: This file is for testing iostream with NO OTHER INCLUDES.\n \n-// { dg-do compile }\n-\n #include <istream>\n \n namespace std", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_iostream/2.cc"}, {"sha": "6ff836a61346ced02744246e77c465c61c21b55f", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-01-08 bkoz\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n@@ -30,8 +31,6 @@\n // 27.6.1.5 - Template class basic_iostream\n // NB: This file is for testing iostream with NO OTHER INCLUDES.\n \n-// { dg-do compile }\n-\n #include <istream>\n \n // libstdc++/7216", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_iostream/1.cc"}, {"sha": "a2cadef507cfa89a6109305301dcae2a6c91ede0", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/cons/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fcons%2F3.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istream/3.cc"}, {"sha": "b6372d7cfa9eb6e3da7706b4f9743bfa2a950327", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -34,12 +35,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istream/4.cc"}, {"sha": "9fb06d0e46a6768d018e64f22375a4a028e77030", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 1999-09-20 bkoz\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n@@ -35,8 +36,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   using __gnu_test::pod_char;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istream/2.cc"}, {"sha": "932c68e73f3d21d3845b54759a4d96c6c2587714", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 1999-09-20 bkoz\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n@@ -33,8 +34,6 @@\n #include <istream>\n #include <testsuite_hooks.h>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istream/1.cc"}, {"sha": "9f5285a7df17ea2396f25db0edb39445e1290d06", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/3.cc"}, {"sha": "38e50e4f9f41fe8858be594076f64ec91492dba5", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -32,12 +33,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/4.cc"}, {"sha": "9ad96d9b0a78436b7fe448782c10352406151365", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <sstream>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   typedef short type_t;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/2.cc"}, {"sha": "5999c59caff120f046feb23da1b01b70c19a8169", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <sstream>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/1.cc"}, {"sha": "8ef65088924ba8624e2efb3d613ddd1f8a5a95aa", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/3.cc"}, {"sha": "fe2282990d409943c03fabd911f7900f6b43d7cb", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -32,12 +33,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/4.cc"}, {"sha": "f1395e9a80b3fdc0e508c7c953a57888297f7e90", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/requirements/explicit_instantiations.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Fexplicit_instantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Fexplicit_instantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Fexplicit_instantiations.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <fstream>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   typedef short type_t;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/2.cc"}, {"sha": "3c8df7fef882144610b71ec0763841f0fc9619d7", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <fstream>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/1.cc"}, {"sha": "517176628f37ddb62bb59701c35004c28e8dc436", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostream/3.cc"}, {"sha": "a36699768ac608fc86542755e68c92e8f1328209", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -34,12 +35,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostream/4.cc"}, {"sha": "27e72a64f6def4c8c49e755f99be33af692c00d4", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 1999-09-20 bkoz\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n@@ -35,8 +36,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   using __gnu_test::pod_char;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostream/2.cc"}, {"sha": "5cac045029473124aede362042c67b027fd2aa3a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 1999-09-20 bkoz\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n@@ -33,8 +34,6 @@\n #include <ostream>\n #include <testsuite_hooks.h>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostream/1.cc"}, {"sha": "e68ea0eeacd0ff3b091ef15d5a9c5f03630e4ea5", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/3.cc"}, {"sha": "b4fbe040157cbbdfe080cae7f45664e05264ec20", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -32,12 +33,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/4.cc"}, {"sha": "dc509b818e74eec68d74383360be2099e84b57a9", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Fexplicit_instantiation.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <sstream>\n \n-// { dg-do compile }\n-\n namespace std\n {\n   typedef short type_t;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/2.cc"}, {"sha": "3fbaa4f1f1bb9fcac33f85f83e75a2ebc4311ec0", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/requirements/typedefs.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n@@ -32,8 +33,6 @@\n \n #include <sstream>\n \n-// { dg-do compile }\n-\n // libstdc++/7216\n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/1.cc"}, {"sha": "765ca167d3898500622c10d9555da18315e3e14f", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/3.cc"}, {"sha": "da7866c8cca5d011b6941bbc16c9803cbb9a2e91", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/requirements/base_classes.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/2.cc"}, {"sha": "cf16738dd5bc19a7085c0e1b55a8071f9753ba72", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/requirements/typedefs.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Frequirements%2Ftypedefs.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/1.cc"}, {"sha": "ced07b58fae7ec1f79d27b69b21ff91747299f35", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/2020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2F2020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2F2020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2F2020.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/3.cc"}, {"sha": "b1ab8f13ee995db23e043483b73ca9dcc6a69345", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/requirements/base_classes.cc", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Frequirements%2Fbase_classes.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2003-03-26 B enjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n@@ -31,12 +32,6 @@ void test01()\n   const base_type* base __attribute__((unused)) = &obj;\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n-\n // more surf!!!\n \n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/5.cc"}, {"sha": "696a4937baef70e04c7fa3f128919732cb6df44b", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/requirements/explicit_instantiation/2.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024740df47c300e9797ba4ac61f9ec671fa1fd3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a024740df47c300e9797ba4ac61f9ec671fa1fd3", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n@@ -26,8 +27,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n-// { dg-do compile }\n-\n // test05\n // libstdc++/1886\n // should be able to instantiate basic_stringbuf for non-standard types.", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/2.cc"}]}