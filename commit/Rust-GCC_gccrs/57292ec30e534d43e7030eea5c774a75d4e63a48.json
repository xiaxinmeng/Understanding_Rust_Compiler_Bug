{"sha": "57292ec30e534d43e7030eea5c774a75d4e63a48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcyOTJlYzMwZTUzNGQ0M2U3MDMwZWVhNWM3NzRhNzVkNGU2M2E0OA==", "commit": {"author": {"name": "Alan Lehotsky", "email": "apl@alum.mit.edu", "date": "2002-06-14T01:41:53Z"}, "committer": {"name": "Alan Lehotsky", "email": "alehotsky@gcc.gnu.org", "date": "2002-06-14T01:41:53Z"}, "message": "pass MEM reference to find_reloads_address\n\nFrom-SVN: r54604", "tree": {"sha": "c2bdcea93bb398d1eabce0d415547b367eef0fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2bdcea93bb398d1eabce0d415547b367eef0fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57292ec30e534d43e7030eea5c774a75d4e63a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57292ec30e534d43e7030eea5c774a75d4e63a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57292ec30e534d43e7030eea5c774a75d4e63a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57292ec30e534d43e7030eea5c774a75d4e63a48/comments", "author": {"login": "alehotsky", "id": 3465165, "node_id": "MDQ6VXNlcjM0NjUxNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3465165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alehotsky", "html_url": "https://github.com/alehotsky", "followers_url": "https://api.github.com/users/alehotsky/followers", "following_url": "https://api.github.com/users/alehotsky/following{/other_user}", "gists_url": "https://api.github.com/users/alehotsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/alehotsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alehotsky/subscriptions", "organizations_url": "https://api.github.com/users/alehotsky/orgs", "repos_url": "https://api.github.com/users/alehotsky/repos", "events_url": "https://api.github.com/users/alehotsky/events{/privacy}", "received_events_url": "https://api.github.com/users/alehotsky/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6f5e04831ee6d0aee3029d464a0929331e0c552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f5e04831ee6d0aee3029d464a0929331e0c552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f5e04831ee6d0aee3029d464a0929331e0c552"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "ba76060ae9ed32ae9ec49660a526dbe791bcf5e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57292ec30e534d43e7030eea5c774a75d4e63a48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57292ec30e534d43e7030eea5c774a75d4e63a48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57292ec30e534d43e7030eea5c774a75d4e63a48", "patch": "@@ -1,3 +1,9 @@\n+2002-06-13  Alan Lehotsky  <apl@alum.mit.edu>\n+\n+\t* reload.c (get_secondary_mem,find_reloads_address,\n+\tfind_reloads_address_1): Pass reference to MEM to find_reloads_address\n+\tso that LEGITIMIZE_RELOAD_ADDRESS will be called.\n+\t\n 2002-06-13  Jessica Han  <jessica@cup.hp.com>\n \n \t* defaults.h (TARGET_VTABLE_ENTRY_ALIGN): New."}, {"sha": "72e1674008fddf7c8609b8bd0befe87ef96897ba", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57292ec30e534d43e7030eea5c774a75d4e63a48/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57292ec30e534d43e7030eea5c774a75d4e63a48/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=57292ec30e534d43e7030eea5c774a75d4e63a48", "patch": "@@ -644,7 +644,7 @@ get_secondary_mem (x, mode, opnum, type)\n \t       : type == RELOAD_FOR_OUTPUT ? RELOAD_FOR_OUTPUT_ADDRESS\n \t       : RELOAD_OTHER);\n \n-      find_reloads_address (mode, (rtx*) 0, XEXP (loc, 0), &XEXP (loc, 0),\n+      find_reloads_address (mode, &loc, XEXP (loc, 0), &XEXP (loc, 0),\n \t\t\t    opnum, type, 0, 0);\n     }\n \n@@ -4594,9 +4594,9 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels, insn)\n \t      tem = make_memloc (ad, regno);\n \t      if (! strict_memory_address_p (GET_MODE (tem), XEXP (tem, 0)))\n \t\t{\n-\t\t  find_reloads_address (GET_MODE (tem), (rtx*) 0, XEXP (tem, 0),\n-\t\t\t\t\t&XEXP (tem, 0), opnum, ADDR_TYPE (type),\n-\t\t\t\t\tind_levels, insn);\n+\t\t  find_reloads_address (GET_MODE (tem), &tem, XEXP (tem, 0),\n+\t\t\t\t\t&XEXP (tem, 0), opnum,\n+\t\t\t\t\tADDR_TYPE (type), ind_levels, insn);\n \t\t}\n \t      /* We can avoid a reload if the register's equivalent memory\n \t\t expression is valid as an indirect memory address.\n@@ -5324,7 +5324,7 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels, insn)\n \t\t       We can't use ADDR_TYPE (type) here, because we need to\n \t\t       write back the value after reading it, hence we actually\n \t\t       need two registers.  */\n-\t\t    find_reloads_address (GET_MODE (tem), 0, XEXP (tem, 0),\n+\t\t    find_reloads_address (GET_MODE (tem), &tem, XEXP (tem, 0),\n \t\t\t\t\t  &XEXP (tem, 0), opnum,\n \t\t\t\t\t  RELOAD_OTHER,\n \t\t\t\t\t  ind_levels, insn);"}]}