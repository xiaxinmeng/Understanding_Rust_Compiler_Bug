{"sha": "36b7d827dbcae9727c83ca10424d657109caa12b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiN2Q4MjdkYmNhZTk3MjdjODNjYTEwNDI0ZDY1NzEwOWNhYTEyYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-07-24T19:03:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-24T19:03:45Z"}, "message": "i386.c (ix86_call_abi_override): Call ix86_function_abi.\n\n\t* config/i386/i386.c (ix86_call_abi_override): Call ix86_function_abi.\n\t(ix86_function_abi): Cleanup.\n\nFrom-SVN: r226187", "tree": {"sha": "206e3692017451bc51e4e95f727a232995b40546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206e3692017451bc51e4e95f727a232995b40546"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36b7d827dbcae9727c83ca10424d657109caa12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b7d827dbcae9727c83ca10424d657109caa12b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b7d827dbcae9727c83ca10424d657109caa12b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b7d827dbcae9727c83ca10424d657109caa12b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "484d5dde41d1db66e36999fe01e190adf688d417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484d5dde41d1db66e36999fe01e190adf688d417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484d5dde41d1db66e36999fe01e190adf688d417"}], "stats": {"total": 94, "additions": 43, "deletions": 51}, "files": [{"sha": "773babe6d3ccdf1cfb795e865ec20fb26df7f572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b7d827dbcae9727c83ca10424d657109caa12b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b7d827dbcae9727c83ca10424d657109caa12b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36b7d827dbcae9727c83ca10424d657109caa12b", "patch": "@@ -1,3 +1,8 @@\n+2015-07-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_call_abi_override): Call ix86_function_abi.\n+\t(ix86_function_abi): Cleanup.\n+\n 2015-07-24  Michael Darling  <darlingm@gmail.com>\n \n \tPR other/66259"}, {"sha": "468cb1921a9ae0acd9d634f0bdc7d6bd8e445d54", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 38, "deletions": 51, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b7d827dbcae9727c83ca10424d657109caa12b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b7d827dbcae9727c83ca10424d657109caa12b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=36b7d827dbcae9727c83ca10424d657109caa12b", "patch": "@@ -6316,43 +6316,51 @@ ix86_reg_parm_stack_space (const_tree fndecl)\n   return 0;\n }\n \n-/* Returns value SYSV_ABI, MS_ABI dependent on fntype, specifying the\n-   call abi used.  */\n+/* We add this as a workaround in order to use libc_has_function\n+   hook in i386.md.  */\n+bool\n+ix86_libc_has_function (enum function_class fn_class)\n+{\n+  return targetm.libc_has_function (fn_class);\n+}\n+\n+/* Returns value SYSV_ABI, MS_ABI dependent on fntype,\n+   specifying the call abi used.  */\n enum calling_abi\n ix86_function_type_abi (const_tree fntype)\n {\n-  if (fntype != NULL_TREE && TYPE_ATTRIBUTES (fntype) != NULL_TREE)\n+  enum calling_abi abi = ix86_abi;\n+\n+  if (fntype == NULL_TREE || TYPE_ATTRIBUTES (fntype) == NULL_TREE)\n+    return abi;\n+\n+  if (abi == SYSV_ABI\n+      && lookup_attribute (\"ms_abi\", TYPE_ATTRIBUTES (fntype)))\n     {\n-      enum calling_abi abi = ix86_abi;\n-      if (abi == SYSV_ABI)\n-\t{\n-\t  if (lookup_attribute (\"ms_abi\", TYPE_ATTRIBUTES (fntype)))\n-\t    {\n-\t      if (TARGET_X32)\n-\t\t{\n-\t\t  static bool warned = false;\n-\t\t  if (!warned)\n-\t\t    {\n-\t\t      error (\"X32 does not support ms_abi attribute\");\n-\t\t      warned = true;\n-\t\t    }\n-\t\t}\n-\t      abi = MS_ABI;\n-\t    }\n-\t}\n-      else if (lookup_attribute (\"sysv_abi\", TYPE_ATTRIBUTES (fntype)))\n-\tabi = SYSV_ABI;\n-      return abi;\n+      if (TARGET_X32)\n+\terror (\"X32 does not support ms_abi attribute\");\n+\n+      abi = MS_ABI;\n     }\n-  return ix86_abi;\n+  else if (abi == MS_ABI\n+\t   && lookup_attribute (\"sysv_abi\", TYPE_ATTRIBUTES (fntype)))\n+    abi = SYSV_ABI;\n+\n+  return abi;\n }\n \n-/* We add this as a workaround in order to use libc_has_function\n-   hook in i386.md.  */\n-bool\n-ix86_libc_has_function (enum function_class fn_class)\n+static enum calling_abi\n+ix86_function_abi (const_tree fndecl)\n {\n-  return targetm.libc_has_function (fn_class);\n+  return fndecl ? ix86_function_type_abi (TREE_TYPE (fndecl)) : ix86_abi;\n+}\n+\n+/* Returns value SYSV_ABI, MS_ABI dependent on cfun,\n+   specifying the call abi used.  */\n+enum calling_abi\n+ix86_cfun_abi (void)\n+{\n+  return cfun ? cfun->machine->call_abi : ix86_abi;\n }\n \n static bool\n@@ -6369,24 +6377,6 @@ ix86_function_ms_hook_prologue (const_tree fn)\n   return false;\n }\n \n-static enum calling_abi\n-ix86_function_abi (const_tree fndecl)\n-{\n-  if (! fndecl)\n-    return ix86_abi;\n-  return ix86_function_type_abi (TREE_TYPE (fndecl));\n-}\n-\n-/* Returns value SYSV_ABI, MS_ABI dependent on cfun, specifying the\n-   call abi used.  */\n-enum calling_abi\n-ix86_cfun_abi (void)\n-{\n-  if (! cfun)\n-    return ix86_abi;\n-  return cfun->machine->call_abi;\n-}\n-\n /* Write the extra assembler code needed to declare a function properly.  */\n \n void\n@@ -6439,10 +6429,7 @@ extern void init_regs (void);\n void\n ix86_call_abi_override (const_tree fndecl)\n {\n-  if (fndecl == NULL_TREE)\n-    cfun->machine->call_abi = ix86_abi;\n-  else\n-    cfun->machine->call_abi = ix86_function_type_abi (TREE_TYPE (fndecl));\n+  cfun->machine->call_abi = ix86_function_abi (fndecl);\n }\n \n /* 64-bit MS and SYSV ABI have different set of call used registers.  Avoid"}]}