{"sha": "7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkODdlZTJkYTNhNGJhNzc2Y2Q0MDlkNzA3MGJmNGI0MmY1NTNjNg==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-09T14:01:05Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:18Z"}, "message": "Added PDP-11 target hook (or provisional one at least)", "tree": {"sha": "e064bb800854606bd2e9128e1caf3d1ca6085a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e064bb800854606bd2e9128e1caf3d1ca6085a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b92289909d9367090a298d8af54c6f1de4c1a394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92289909d9367090a298d8af54c6f1de4c1a394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92289909d9367090a298d8af54c6f1de4c1a394"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "6a006ef4e06c201ec57ad0948318340c7dc30330", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "patch": "@@ -2855,6 +2855,7 @@ or1k*-*-*)\n pdp11-*-*)\n \ttm_file=\"${tm_file} newlib-stdint.h\"\n \tuse_gcc_stdint=wrap\n+\trust_target_objs=\"pdp11-rust.o\"\n \t;;\n # port not yet contributed\n #powerpc-*-openbsd*)"}, {"sha": "e94bdf6e4f9f3a776436da02237dd7c08418f573", "filename": "gcc/config/pdp11/pdp11-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h?ref=7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "patch": "@@ -55,3 +55,6 @@ extern void pdp11_gen_int_label (char *, const char *, int);\n extern void pdp11_output_labelref (FILE *, const char *);\n extern void pdp11_output_def (FILE *, const char *, const char *);\n extern void pdp11_output_addr_vec_elt (FILE *, int);\n+\n+/* Routines implemented in pdp11-rust.c  */\n+extern void pdp11_rust_target_cpu_info (void);"}, {"sha": "270fcc09110cb8cccdbfb1b169b61ca4c2cc88c6", "filename": "gcc/config/pdp11/pdp11-rust.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Fpdp11-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Fpdp11-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-rust.c?ref=7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "patch": "@@ -0,0 +1,59 @@\n+/* Subroutines for the Rust front end for the PDP-11 architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for PDP-11 targets.  */\n+\n+void pdp11_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"pdp11\");\n+\n+    // names made up by me (as no apparent current nor historical llvm support), based on gcc options\n+    /* TODO: figure out how to get data for linker-opt, nosnake - not defined in variable, apparently */\n+    if (TARGET_AC0) \n+        rust_add_target_info(\"target_feature\", \"ac0\");\n+    if (TARGET_DEC_ASM)\n+        rust_add_target_info(\"target_feature\", \"dec-asm\");\n+    if (TARGET_GNU_ASM)\n+        rust_add_target_info(\"target_feature\", \"gnu-asm\");\n+    if (TARGET_UNIX_ASM) \n+        rust_add_target_info(\"target_feature\", \"unix-asm\");\n+    if (TARGET_FPU)\n+        rust_add_target_info(\"target_feature\", \"fpu\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"soft-float\");\n+    if (TARGET_INT32)\n+        rust_add_target_info(\"target_feature\", \"int32\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"int16\");\n+    if (TARGET_SPLIT)\n+        rust_add_target_info(\"target_feature\", \"split\");\n+    if (TARGET_LRA)\n+        rust_add_target_info(\"target_feature\", \"lra\");\n+\n+    // defines for generating -40 and -45 code - TODO should -45 imply -40 as well? -10 seems implicit\n+    if (TARGET_40) \n+        rust_add_target_info(\"target_feature\", \"pa-risc-1-1\");\n+    if (TARGET_45) \n+        rust_add_target_info(\"target_feature\", \"pa-risc-2-0\");\n+}"}, {"sha": "ae2af37ff2cf56dad047161f893ddc209304da32", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_CPU_INFO pdp11_rust_target_cpu_info\n \n /* Generate DBX debugging information.  */\n "}, {"sha": "a507c5352ac3a03e0d336a82e756fd3a1217c5bc", "filename": "gcc/config/pdp11/t-pdp11", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd87ee2da3a4ba776cd409d7070bf4b42f553c6/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Ft-pdp11?ref=7cd87ee2da3a4ba776cd409d7070bf4b42f553c6", "patch": "@@ -29,3 +29,7 @@ CRTSTUFF_T_CFLAGS = -Os\n # We could say \"-Werror -Wno-error=type-limits\", alas, not all supported\n # gcc bootstrap compilers support the latter option.\n dwarf2out.o-warn = -Wno-error\n+\n+pdp11-rust.o: $(srcdir)/config/pdp11/pdp11-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}