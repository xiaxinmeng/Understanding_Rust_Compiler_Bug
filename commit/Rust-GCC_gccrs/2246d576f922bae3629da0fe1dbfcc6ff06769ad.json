{"sha": "2246d576f922bae3629da0fe1dbfcc6ff06769ad", "node_id": "C_kwDOANBUbNoAKDIyNDZkNTc2ZjkyMmJhZTM2MjlkYTBmZTFkYmZjYzZmZjA2NzY5YWQ", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-12T18:39:33Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-03-12T18:39:33Z"}, "message": "middle-end: Revert can_special_div_by_const changes [PR108583]\n\nThis reverts the changes for the CAN_SPECIAL_DIV_BY_CONST hook.\n\ngcc/ChangeLog:\n\n\tPR target/108583\n\t* doc/tm.texi (TARGET_VECTORIZE_CAN_SPECIAL_DIV_BY_CONST): Remove.\n\t* doc/tm.texi.in: Likewise.\n\t* explow.cc (round_push, align_dynamic_address): Revert previous patch.\n\t* expmed.cc (expand_divmod): Likewise.\n\t* expmed.h (expand_divmod): Likewise.\n\t* expr.cc (force_operand, expand_expr_divmod): Likewise.\n\t* optabs.cc (expand_doubleword_mod, expand_doubleword_divmod): Likewise.\n\t* target.def (can_special_div_by_const): Remove.\n\t* target.h: Remove tree-core.h include\n\t* targhooks.cc (default_can_special_div_by_const): Remove.\n\t* targhooks.h (default_can_special_div_by_const): Remove.\n\t* tree-vect-generic.cc (expand_vector_operation): Remove hook.\n\t* tree-vect-patterns.cc (vect_recog_divmod_pattern): Remove hook.\n\t* tree-vect-stmts.cc (vectorizable_operation): Remove hook.", "tree": {"sha": "6c560ab180f68a6da55cdcedafcfb2e3ca187d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c560ab180f68a6da55cdcedafcfb2e3ca187d75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2246d576f922bae3629da0fe1dbfcc6ff06769ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2246d576f922bae3629da0fe1dbfcc6ff06769ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2246d576f922bae3629da0fe1dbfcc6ff06769ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2246d576f922bae3629da0fe1dbfcc6ff06769ad/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8536c09108f429d8ab6ca850f3835668cc1c8929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8536c09108f429d8ab6ca850f3835668cc1c8929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8536c09108f429d8ab6ca850f3835668cc1c8929"}], "stats": {"total": 142, "additions": 26, "deletions": 116}, "files": [{"sha": "144862e00c4d6984d4aa93641b2c5d832379e94e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -6146,20 +6146,6 @@ instruction pattern.  There is no need for the hook to handle these two\n implementation approaches itself.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_VECTORIZE_CAN_SPECIAL_DIV_BY_CONST (enum @var{tree_code}, tree @var{vectype}, wide_int @var{constant}, rtx *@var{output}, rtx @var{in0}, rtx @var{in1})\n-This hook is used to test whether the target has a special method of\n-division of vectors of type @var{vectype} using the value @var{constant},\n-and producing a vector of type @var{vectype}.  The division\n-will then not be decomposed by the vectorizer and kept as a div.\n-\n-When the hook is being used to test whether the target supports a special\n-divide, @var{in0}, @var{in1}, and @var{output} are all null.  When the hook\n-is being used to emit a division, @var{in0} and @var{in1} are the source\n-vectors of type @var{vecttype} and @var{output} is the destination vector of\n-type @var{vectype}.\n-\n-Return true if the operation is possible, emitting instructions for it\n-if rtxes are provided and updating @var{output}.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (unsigned @var{code}, tree @var{vec_type_out}, tree @var{vec_type_in})"}, {"sha": "146f461ddad247906705d03bb389ac707e5f8cde", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -4175,7 +4175,6 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_VECTORIZE_VEC_PERM_CONST\n \n-@hook TARGET_VECTORIZE_CAN_SPECIAL_DIV_BY_CONST\n \n @hook TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n "}, {"sha": "6424c0802f07f05a2e6513044b92a02394488796", "filename": "gcc/explow.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexplow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexplow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -1042,7 +1042,7 @@ round_push (rtx size)\n      TRUNC_DIV_EXPR.  */\n   size = expand_binop (Pmode, add_optab, size, alignm1_rtx,\n \t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-  size = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, NULL, NULL, size, align_rtx,\n+  size = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, size, align_rtx,\n \t\t\tNULL_RTX, 1);\n   size = expand_mult (Pmode, size, align_rtx, NULL_RTX, 1);\n \n@@ -1208,7 +1208,7 @@ align_dynamic_address (rtx target, unsigned required_align)\n \t\t\t gen_int_mode (required_align / BITS_PER_UNIT - 1,\n \t\t\t\t       Pmode),\n \t\t\t NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-  target = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, NULL, NULL, target,\n+  target = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, target,\n \t\t\t  gen_int_mode (required_align / BITS_PER_UNIT,\n \t\t\t\t\tPmode),\n \t\t\t  NULL_RTX, 1);"}, {"sha": "1553ea8e31eb6433025ab18a3a59c169d3b7692f", "filename": "gcc/expmed.cc", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -4222,8 +4222,8 @@ expand_sdiv_pow2 (scalar_int_mode mode, rtx op0, HOST_WIDE_INT d)\n \n rtx\n expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n-\t       tree treeop0, tree treeop1, rtx op0, rtx op1, rtx target,\n-\t       int unsignedp, enum optab_methods methods)\n+\t       rtx op0, rtx op1, rtx target, int unsignedp,\n+\t       enum optab_methods methods)\n {\n   machine_mode compute_mode;\n   rtx tquotient;\n@@ -4375,17 +4375,6 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \n   last_div_const = ! rem_flag && op1_is_constant ? INTVAL (op1) : 0;\n \n-  /* Check if the target has specific expansions for the division.  */\n-  tree cst;\n-  if (treeop0\n-      && treeop1\n-      && (cst = uniform_integer_cst_p (treeop1))\n-      && targetm.vectorize.can_special_div_by_const (code, TREE_TYPE (treeop0),\n-\t\t\t\t\t\t     wi::to_wide (cst),\n-\t\t\t\t\t\t     &target, op0, op1))\n-    return target;\n-\n-\n   /* Now convert to the best mode to use.  */\n   if (compute_mode != mode)\n     {\n@@ -4629,8 +4618,8 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t    || (optab_handler (sdivmod_optab, int_mode)\n \t\t\t\t!= CODE_FOR_nothing)))\n \t\t      quotient = expand_divmod (0, TRUNC_DIV_EXPR,\n-\t\t\t\t\t\tint_mode, treeop0, treeop1,\n-\t\t\t\t\t\top0, gen_int_mode (abs_d,\n+\t\t\t\t\t\tint_mode, op0,\n+\t\t\t\t\t\tgen_int_mode (abs_d,\n \t\t\t\t\t\t\t      int_mode),\n \t\t\t\t\t\tNULL_RTX, 0);\n \t\t    else\n@@ -4819,8 +4808,8 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t\t      size - 1, NULL_RTX, 0);\n \t\tt3 = force_operand (gen_rtx_MINUS (int_mode, t1, nsign),\n \t\t\t\t    NULL_RTX);\n-\t\tt4 = expand_divmod (0, TRUNC_DIV_EXPR, int_mode, treeop0,\n-\t\t\t\t    treeop1, t3, op1, NULL_RTX, 0);\n+\t\tt4 = expand_divmod (0, TRUNC_DIV_EXPR, int_mode, t3, op1,\n+\t\t\t\t    NULL_RTX, 0);\n \t\tif (t4)\n \t\t  {\n \t\t    rtx t5;"}, {"sha": "c747a0da1637621bb69ee7058fefe873ec51977e", "filename": "gcc/expmed.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexpmed.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexpmed.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.h?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -710,9 +710,8 @@ extern rtx expand_shift (enum tree_code, machine_mode, rtx, poly_int64, rtx,\n extern rtx maybe_expand_shift (enum tree_code, machine_mode, rtx, int, rtx,\n \t\t\t       int);\n #ifdef GCC_OPTABS_H\n-extern rtx expand_divmod (int, enum tree_code, machine_mode, tree, tree,\n-\t\t\t  rtx, rtx, rtx, int,\n-\t\t\t  enum optab_methods = OPTAB_LIB_WIDEN);\n+extern rtx expand_divmod (int, enum tree_code, machine_mode, rtx, rtx,\n+\t\t\t  rtx, int, enum optab_methods = OPTAB_LIB_WIDEN);\n #endif\n #endif\n "}, {"sha": "78d35297e755216339078d5b2280c6e277f26d72", "filename": "gcc/expr.cc", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -8207,17 +8207,16 @@ force_operand (rtx value, rtx target)\n \t    return expand_divmod (0,\n \t\t\t\t  FLOAT_MODE_P (GET_MODE (value))\n \t\t\t\t  ? RDIV_EXPR : TRUNC_DIV_EXPR,\n-\t\t\t\t  GET_MODE (value), NULL, NULL, op1, op2,\n-\t\t\t\t  target, 0);\n+\t\t\t\t  GET_MODE (value), op1, op2, target, 0);\n \tcase MOD:\n-\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), NULL, NULL,\n-\t\t\t\top1, op2, target, 0);\n+\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), op1, op2,\n+\t\t\t\ttarget, 0);\n \tcase UDIV:\n-\t  return expand_divmod (0, TRUNC_DIV_EXPR, GET_MODE (value), NULL, NULL,\n-\t\t\t\top1, op2, target, 1);\n+\t  return expand_divmod (0, TRUNC_DIV_EXPR, GET_MODE (value), op1, op2,\n+\t\t\t\ttarget, 1);\n \tcase UMOD:\n-\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), NULL, NULL,\n-\t\t\t\top1, op2, target, 1);\n+\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), op1, op2,\n+\t\t\t\ttarget, 1);\n \tcase ASHIFTRT:\n \t  return expand_simple_binop (GET_MODE (value), code, op1, op2,\n \t\t\t\t      target, 0, OPTAB_LIB_WIDEN);\n@@ -9170,13 +9169,11 @@ expand_expr_divmod (tree_code code, machine_mode mode, tree treeop0,\n       bool speed_p = optimize_insn_for_speed_p ();\n       do_pending_stack_adjust ();\n       start_sequence ();\n-      rtx uns_ret = expand_divmod (mod_p, code, mode, treeop0, treeop1,\n-\t\t\t\t   op0, op1, target, 1);\n+      rtx uns_ret = expand_divmod (mod_p, code, mode, op0, op1, target, 1);\n       rtx_insn *uns_insns = get_insns ();\n       end_sequence ();\n       start_sequence ();\n-      rtx sgn_ret = expand_divmod (mod_p, code, mode, treeop0, treeop1,\n-\t\t\t\t   op0, op1, target, 0);\n+      rtx sgn_ret = expand_divmod (mod_p, code, mode, op0, op1, target, 0);\n       rtx_insn *sgn_insns = get_insns ();\n       end_sequence ();\n       unsigned uns_cost = seq_cost (uns_insns, speed_p);\n@@ -9198,8 +9195,7 @@ expand_expr_divmod (tree_code code, machine_mode mode, tree treeop0,\n       emit_insn (sgn_insns);\n       return sgn_ret;\n     }\n-  return expand_divmod (mod_p, code, mode, treeop0, treeop1,\n-\t\t\top0, op1, target, unsignedp);\n+  return expand_divmod (mod_p, code, mode, op0, op1, target, unsignedp);\n }\n \n rtx"}, {"sha": "c8e39c82d57a7d726e7da33d247b80f32ec9236c", "filename": "gcc/optabs.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Foptabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Foptabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -1106,9 +1106,8 @@ expand_doubleword_mod (machine_mode mode, rtx op0, rtx op1, bool unsignedp)\n \t\treturn NULL_RTX;\n \t    }\n \t}\n-      rtx remainder = expand_divmod (1, TRUNC_MOD_EXPR, word_mode, NULL, NULL,\n-\t\t\t\t     sum, gen_int_mode (INTVAL (op1),\n-\t\t\t\t\t\t\tword_mode),\n+      rtx remainder = expand_divmod (1, TRUNC_MOD_EXPR, word_mode, sum,\n+\t\t\t\t     gen_int_mode (INTVAL (op1), word_mode),\n \t\t\t\t     NULL_RTX, 1, OPTAB_DIRECT);\n       if (remainder == NULL_RTX)\n \treturn NULL_RTX;\n@@ -1211,8 +1210,8 @@ expand_doubleword_divmod (machine_mode mode, rtx op0, rtx op1, rtx *rem,\n \n   if (op11 != const1_rtx)\n     {\n-      rtx rem2 = expand_divmod (1, TRUNC_MOD_EXPR, mode, NULL, NULL, quot1,\n-\t\t\t\top11, NULL_RTX, unsignedp, OPTAB_DIRECT);\n+      rtx rem2 = expand_divmod (1, TRUNC_MOD_EXPR, mode, quot1, op11,\n+\t\t\t\tNULL_RTX, unsignedp, OPTAB_DIRECT);\n       if (rem2 == NULL_RTX)\n \treturn NULL_RTX;\n \n@@ -1226,8 +1225,8 @@ expand_doubleword_divmod (machine_mode mode, rtx op0, rtx op1, rtx *rem,\n       if (rem2 == NULL_RTX)\n \treturn NULL_RTX;\n \n-      rtx quot2 = expand_divmod (0, TRUNC_DIV_EXPR, mode, NULL, NULL, quot1,\n-\t\t\t\t op11, NULL_RTX, unsignedp, OPTAB_DIRECT);\n+      rtx quot2 = expand_divmod (0, TRUNC_DIV_EXPR, mode, quot1, op11,\n+\t\t\t\t NULL_RTX, unsignedp, OPTAB_DIRECT);\n       if (quot2 == NULL_RTX)\n \treturn NULL_RTX;\n "}, {"sha": "049dab64f683c67d1ea9d2ca8784b1efbb347c3d", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -1905,25 +1905,6 @@ implementation approaches itself.\",\n \tconst vec_perm_indices &sel),\n  NULL)\n \n-DEFHOOK\n-(can_special_div_by_const,\n- \"This hook is used to test whether the target has a special method of\\n\\\n-division of vectors of type @var{vectype} using the value @var{constant},\\n\\\n-and producing a vector of type @var{vectype}.  The division\\n\\\n-will then not be decomposed by the vectorizer and kept as a div.\\n\\\n-\\n\\\n-When the hook is being used to test whether the target supports a special\\n\\\n-divide, @var{in0}, @var{in1}, and @var{output} are all null.  When the hook\\n\\\n-is being used to emit a division, @var{in0} and @var{in1} are the source\\n\\\n-vectors of type @var{vecttype} and @var{output} is the destination vector of\\n\\\n-type @var{vectype}.\\n\\\n-\\n\\\n-Return true if the operation is possible, emitting instructions for it\\n\\\n-if rtxes are provided and updating @var{output}.\",\n- bool, (enum tree_code, tree vectype, wide_int constant, rtx *output,\n-\trtx in0, rtx in1),\n- default_can_special_div_by_const)\n-\n /* Return true if the target supports misaligned store/load of a\n    specific factor denoted in the third parameter.  The last parameter\n    is true if the access is defined in a packed struct.  */"}, {"sha": "cd448e4b7ab79196bb5fdf17bbc085db23f3875f", "filename": "gcc/target.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -51,7 +51,6 @@\n #include \"insn-codes.h\"\n #include \"tm.h\"\n #include \"hard-reg-set.h\"\n-#include \"tree-core.h\"\n \n #if CHECKING_P\n "}, {"sha": "8b7452ce3364d2a1a11e67b35b9327fa9b050308", "filename": "gcc/targhooks.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarghooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarghooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -1845,14 +1845,6 @@ default_have_conditional_execution (void)\n   return HAVE_conditional_execution;\n }\n \n-/* Default that no division by constant operations are special.  */\n-bool\n-default_can_special_div_by_const (enum tree_code, tree, wide_int, rtx *, rtx,\n-\t\t\t\t  rtx)\n-{\n-  return false;\n-}\n-\n /* By default we assume that c99 functions are present at the runtime,\n    but sincos is not.  */\n bool"}, {"sha": "555160da48abb0fbe426345c7baa5977bcf7972d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -211,8 +211,6 @@ extern void default_addr_space_diagnose_usage (addr_space_t, location_t);\n extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);\n-extern bool default_can_special_div_by_const (enum tree_code, tree, wide_int,\n-\t\t\t\t\t      rtx *, rtx, rtx);\n \n extern bool default_libc_has_function (enum function_class, tree);\n extern bool default_libc_has_fast_function (int fcode);"}, {"sha": "519a824ec727d4d4f28c14077dc3e970bed75ef6", "filename": "gcc/tree-vect-generic.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftree-vect-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftree-vect-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -1237,17 +1237,6 @@ expand_vector_operation (gimple_stmt_iterator *gsi, tree type, tree compute_type\n \t  tree rhs2 = gimple_assign_rhs2 (assign);\n \t  tree ret;\n \n-\t  /* Check if the target was going to handle it through the special\n-\t     division callback hook.  */\n-\t  tree cst = uniform_integer_cst_p (rhs2);\n-\t  if (cst &&\n-\t      targetm.vectorize.can_special_div_by_const (code, type,\n-\t\t\t\t\t\t\t  wi::to_wide (cst),\n-\t\t\t\t\t\t\t  NULL,\n-\t\t\t\t\t\t\t  NULL_RTX, NULL_RTX))\n-\t    return NULL_TREE;\n-\n-\n \t  if (!optimize\n \t      || !VECTOR_INTEGER_TYPE_P (type)\n \t      || TREE_CODE (rhs2) != VECTOR_CST"}, {"sha": "298fd295a738c111e81093d6c27eceb0d00c461b", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -3933,14 +3933,6 @@ vect_recog_divmod_pattern (vec_info *vinfo,\n \n       return pattern_stmt;\n     }\n-  else if ((cst = uniform_integer_cst_p (oprnd1))\n-\t   && targetm.vectorize.can_special_div_by_const (rhs_code, vectype,\n-\t\t\t\t\t\t\t  wi::to_wide (cst),\n-\t\t\t\t\t\t\t  NULL, NULL_RTX,\n-\t\t\t\t\t\t\t  NULL_RTX))\n-    {\n-      return NULL;\n-    }\n \n   if (prec > HOST_BITS_PER_WIDE_INT\n       || integer_zerop (oprnd1))"}, {"sha": "f5e7561d8c804169e7936fc4fff6bb5c4130e361", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2246d576f922bae3629da0fe1dbfcc6ff06769ad/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=2246d576f922bae3629da0fe1dbfcc6ff06769ad", "patch": "@@ -6380,15 +6380,6 @@ vectorizable_operation (vec_info *vinfo,\n \t}\n       target_support_p = (optab_handler (optab, vec_mode)\n \t\t\t  != CODE_FOR_nothing);\n-      tree cst;\n-      if (!target_support_p\n-\t  && op1\n-\t  && (cst = uniform_integer_cst_p (op1)))\n-\ttarget_support_p\n-\t  = targetm.vectorize.can_special_div_by_const (code, vectype,\n-\t\t\t\t\t\t\twi::to_wide (cst),\n-\t\t\t\t\t\t\tNULL, NULL_RTX,\n-\t\t\t\t\t\t\tNULL_RTX);\n     }\n \n   bool using_emulated_vectors_p = vect_emulated_vector_p (vectype);"}]}