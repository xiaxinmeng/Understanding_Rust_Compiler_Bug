{"sha": "688010bad0375a275466ac1adb98aff80c0e77ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4MDEwYmFkMDM3NWEyNzU0NjZhYzFhZGI5OGFmZjgwYzBlNzdhYw==", "commit": {"author": {"name": "Ond\u0159ej B\u00edlka", "email": "neleai@seznam.cz", "date": "2013-07-21T18:31:07Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T18:31:07Z"}, "message": "Fix typos.\n\n2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n\n\t* c-common.c: Fix typos.\n\t* c-common.h: Likewise.\n\nFrom-SVN: r201110", "tree": {"sha": "a89618804e203ad97b7210fd17da195393f4631f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a89618804e203ad97b7210fd17da195393f4631f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688010bad0375a275466ac1adb98aff80c0e77ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688010bad0375a275466ac1adb98aff80c0e77ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688010bad0375a275466ac1adb98aff80c0e77ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688010bad0375a275466ac1adb98aff80c0e77ac/comments", "author": {"login": "neleai", "id": 48067, "node_id": "MDQ6VXNlcjQ4MDY3", "avatar_url": "https://avatars.githubusercontent.com/u/48067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neleai", "html_url": "https://github.com/neleai", "followers_url": "https://api.github.com/users/neleai/followers", "following_url": "https://api.github.com/users/neleai/following{/other_user}", "gists_url": "https://api.github.com/users/neleai/gists{/gist_id}", "starred_url": "https://api.github.com/users/neleai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neleai/subscriptions", "organizations_url": "https://api.github.com/users/neleai/orgs", "repos_url": "https://api.github.com/users/neleai/repos", "events_url": "https://api.github.com/users/neleai/events{/privacy}", "received_events_url": "https://api.github.com/users/neleai/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aa95df74202a50ca17f06e738c8fae303450fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa95df74202a50ca17f06e738c8fae303450fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa95df74202a50ca17f06e738c8fae303450fdd"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "b12cf447cc5158f41ffd2a16c1cf0a65ff42d745", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -221,7 +221,7 @@ static GTY(()) tree shadow_ptr_types[2];\n /* This type represents a reference to a memory region.  */\n struct asan_mem_ref\n {\n-  /* The expression of the begining of the memory region.  */\n+  /* The expression of the beginning of the memory region.  */\n   tree start;\n \n   /* The size of the access (can be 1, 2, 4, 8, 16 for now).  */"}, {"sha": "2cbeb6ae9f3c027d44743fb335d28990dfdee694", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -594,7 +594,7 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n \n \t     After removing the best edge, the final result will be ABCD/ ACBD.\n \t     It does not add jump compared with the previous order.  But it\n-\t     reduces the possiblity of long jumps.  */\n+\t     reduces the possibility of long jumps.  */\n \t  if (best_edge && for_size\n \t      && (EDGE_COUNT (best_edge->dest->succs) > 1\n \t\t || EDGE_COUNT (best_edge->dest->preds) > 1))"}, {"sha": "66952066dae9227497f0b0fe2ef05256874b768a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -1,3 +1,8 @@\n+2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n+\n+\t* c-common.c: Fix typos.\n+\t* c-common.h: Likewise.\n+\n 2013-07-13  Lubos Lunak  <l.lunak@suse.cz>\n \n \tPR c++/55203"}, {"sha": "04d1bd50fa0cedd0a9cb1361cfd80a77b3643891", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -10163,7 +10163,7 @@ get_atomic_generic_size (location_t loc, tree function,\n     {\n       int size;\n       tree type = TREE_TYPE ((*params)[x]);\n-      /* __atomic_compare_exchange has a bool in the 4th postion, skip it.  */\n+      /* __atomic_compare_exchange has a bool in the 4th position, skip it.  */\n       if (n_param == 6 && x == 3)\n         continue;\n       if (!POINTER_TYPE_P (type))"}, {"sha": "915887cf327c7e22a04e5e2cacd9248dae9fd661", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -1127,7 +1127,7 @@ extern void convert_vector_to_pointer_for_subscript (location_t, tree*, tree);\n \n /* Possibe cases of scalar_to_vector conversion.  */\n enum stv_conv {\n-  stv_error,        /* Error occured.  */\n+  stv_error,        /* Error occurred.  */\n   stv_nothing,      /* Nothing happened.  */\n   stv_firstarg,     /* First argument must be expanded.  */\n   stv_secondarg     /* Second argument must be expanded.  */"}, {"sha": "3d6f3876f9cd6e5746935caaa80a60be7a1412ad", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -59,7 +59,7 @@ struct GTY(()) symtab_node_base\n   /* True when alias is a weakref.  */\n   unsigned weakref : 1;\n   /* C++ frontend produce same body aliases and extra name aliases for\n-     virutal functions and vtables that are obviously equivalent.\n+     virtual functions and vtables that are obviously equivalent.\n      Those aliases are bit special, especially because C++ frontend\n      visibility code is so ugly it can not get them right at first time\n      and their visibility needs to be copied from their \"masters\" at"}, {"sha": "b82c2e01b57e49962c8559e461fbcd6dd6fc3ca3", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -83,7 +83,7 @@ along with GCC; see the file COPYING3.  If not see\n \t   b) early small interprocedural passes.\n \n \t      Those are interprocedural passes executed only at compilation\n-\t      time.  These include, for exmaple, transational memory lowering,\n+\t      time.  These include, for example, transational memory lowering,\n \t      unreachable code removal and other simple transformations.\n \n \t   c) IP analysis stage.  All interprocedural passes do their"}, {"sha": "edb9c8c8477abd38d664606907da41b128521b0a", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -196,7 +196,7 @@ enum memmodel\n   MEMMODEL_LAST = 6\n };\n \n-/* Suppose that higher bits are target dependant. */\n+/* Suppose that higher bits are target dependent. */\n #define MEMMODEL_MASK ((1<<16)-1)\n \n /* Support for user-provided GGC and PCH markers.  The first parameter"}, {"sha": "0d9089fd470b726aa05bb853db2eca43eb290bed", "filename": "gcc/ddg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -417,7 +417,7 @@ walk_mems_1 (rtx *x, rtx *pat)\n {\n   if (MEM_P (*x))\n     {\n-      /* Visit all MEMs in *PAT and check indepedence.  */\n+      /* Visit all MEMs in *PAT and check independence.  */\n       if (for_each_rtx (pat, (rtx_function) walk_mems_2, *x))\n         /* Indicate that dependence was determined and stop traversal.  */\n         return 1;"}, {"sha": "d0e316c5c0f5f6db5e05adb7b9dddd389a3cd722", "filename": "gcc/df-core.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -961,7 +961,7 @@ df_worklist_propagate_backward (struct dataflow *dataflow,\n    DATAFLOW is problem we are solving, PENDING is worklist of basic blocks we\n    need to visit.\n    BLOCK_IN_POSTORDER is array of size N_BLOCKS specifying postorder in BBs and\n-   BBINDEX_TO_POSTORDER is array mapping back BB->index to postorder possition.\n+   BBINDEX_TO_POSTORDER is array mapping back BB->index to postorder position.\n    PENDING will be freed.\n \n    The worklists are bitmaps indexed by postorder positions.  "}, {"sha": "dad0ae7cd88cd87b5464178c12b83492ee808119", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -115,7 +115,7 @@ df_print_bb_index (basic_block bb, FILE *file)\n    block.  The id field in the ref is used to index into these sets.\n    See df.h for details.\n \n-   If the DF_RD_PRUNE_DEAD_DEFS changable flag is set, only DEFs reaching\n+   If the DF_RD_PRUNE_DEAD_DEFS changeable flag is set, only DEFs reaching\n    existing uses are included in the global reaching DEFs set, or in other\n    words only DEFs that are still live.  This is a kind of pruned version\n    of the traditional reaching definitions problem that is much less"}, {"sha": "650520ba052fe12c65d6ca5e54a8cabf9b0750c6", "filename": "gcc/double-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -190,7 +190,7 @@ struct double_int\n   bool operator == (double_int cst2) const;\n   bool operator != (double_int cst2) const;\n \n-  /* Please migrate away from using these member variables publically.  */\n+  /* Please migrate away from using these member variables publicly.  */\n \n   unsigned HOST_WIDE_INT low;\n   HOST_WIDE_INT high;"}, {"sha": "c3417636d2caaa709f89244e4988ea09edd9fd79", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -22703,7 +22703,7 @@ string_cst_pool_decl (tree t)\n    of exprloc or after DW_OP_{,bit_}piece, and val_addr can't be\n    resolved.  Replace it (both DW_OP_addr and DW_OP_stack_value)\n    with DW_OP_GNU_implicit_pointer if possible\n-   and return true, if unsuccesful, return false.  */\n+   and return true, if unsuccessful, return false.  */\n \n static bool\n optimize_one_addr_into_implicit_ptr (dw_loc_descr_ref loc)"}, {"sha": "ec80e8bde4782b3e9fa5d4465334d4f0920ae7ad", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -3323,7 +3323,7 @@ hoist_code (void)\n \t\t    }\n \t\t}\n \t      else\n-\t\t/* Punt, no point hoisting a single occurence.  */\n+\t\t/* Punt, no point hoisting a single occurrence.  */\n \t\toccrs_to_hoist.release ();\n \n \t      if (flag_ira_hoist_pressure"}, {"sha": "e16cad9c79aa6f34fee6ce5875dd6a5a8426fee2", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -335,7 +335,7 @@ main (int argc, char **argv)\n       printf (\"typedef void *state_t;\\n\\n\");\n     }\n \n-  /* Special-purpose atributes should be tested with if, not #ifdef.  */\n+  /* Special-purpose attributes should be tested with if, not #ifdef.  */\n   const char * const special_attrs[] = { \"length\", \"enabled\", 0 };\n   for (const char * const *p = special_attrs; *p; p++)\n     {"}, {"sha": "ba7948a1ff0c0a3ce69e3547317dadc601b87fca", "filename": "gcc/gengtype-state.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgengtype-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgengtype-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-state.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -244,7 +244,7 @@ s_expr_writer::write_any_indent (int leading_spaces)\n }\n \n /* Write the beginning of a new s-expresion e.g. \"(!foo \"\n-   The writer automatically adds whitespace to show the hierachical\n+   The writer automatically adds whitespace to show the hierarchical\n    structure of the expressions, so each one starts on a new line,\n    and any within it will be at an increased indentation level.  */\n void"}, {"sha": "62c71b6843e65b1440a9825dfb36ac204558466d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -2699,7 +2699,7 @@ get_base_constructor (tree base, HOST_WIDE_INT *bit_offset,\n       {\n \ttree init = ctor_for_folding (base);\n \n-\t/* Our semantic is exact oposite of ctor_for_folding;\n+\t/* Our semantic is exact opposite of ctor_for_folding;\n \t   NULL means unknown, while error_mark_node is 0.  */\n \tif (init == error_mark_node)\n \t  return NULL_TREE;"}, {"sha": "318f80c1e0dacf5461a93727302a23bc791be6a5", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -165,9 +165,9 @@ getTileMap(isl_ctx *ctx, int scheduleDimensions, int tileSize)\n       tileMap = isl_basic_map_add_constraint(tileMap, c);\n     }\n \n-  /* Project out auxilary dimensions.\n+  /* Project out auxiliary dimensions.\n \n-     The auxilary dimensions are transformed into existentially quantified ones.\n+     The auxiliary dimensions are transformed into existentially quantified ones.\n      This reduces the number of visible scattering dimensions and allows Cloog\n      to produces better code.  */\n   tileMap = isl_basic_map_project_out(tileMap, isl_dim_out,"}, {"sha": "b34cb526baded23504924438bc9cdae7d9a94a37", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -53,7 +53,7 @@ enum inline_hints_vals {\n      to do so because it enables loop optimizatoins.  */\n   INLINE_HINT_loop_iterations = 2,\n   INLINE_HINT_loop_stride = 4,\n-  /* Inlining withing same strongly connected component of callgraph is often\n+  /* Inlining within same strongly connected component of callgraph is often\n      a loss due to increased stack frame usage and prologue setup costs.  */\n   INLINE_HINT_same_scc = 8,\n   /* Inlining functions in strongly connected component is not such a great\n@@ -67,7 +67,7 @@ enum inline_hints_vals {\n    */\n   INLINE_HINT_cross_module = 64,\n   /* If array indexes of loads/stores become known there may be room for\n-     futher optimization.  */\n+     further optimization.  */\n   INLINE_HINT_array_index = 128\n };\n typedef int inline_hints;\n@@ -152,7 +152,7 @@ struct GTY(()) inline_summary\n      using up-to-date value in the badness metric mean a lot of extra\n      expenses.  */\n   int growth;\n-  /* Number of SCC on the beggining of inlining process.  */\n+  /* Number of SCC on the beginning of inlining process.  */\n   int scc_no;\n };\n "}, {"sha": "84aeb45157cba415b3f02a4a42613cdf675a80bc", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -682,7 +682,7 @@ mark_modified (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef ATTRIBUTE_UNUSED,\n   return true;\n }\n \n-/* Return true if a load from a formal parameter PARM_LOAD is known to retreive\n+/* Return true if a load from a formal parameter PARM_LOAD is known to retrieve\n    a value known not to be modified in this function before reaching the\n    statement STMT.  PARM_AINFO is a pointer to a structure containing temporary\n    information about the parameter.  */"}, {"sha": "e3836e0d09a3c7beadab7fb1da696b13ba016b90", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -143,7 +143,7 @@ struct GTY(()) ipa_ancestor_jf_data\n    the size of the type) is clobbered with an unknown value.  When\n    agg_preserved is false or the type of the containing jump function is\n    different, all unlisted parts are assumed to be unknown and all values must\n-   fullfill is_gimple_ip_invariant.  */\n+   fulfill is_gimple_ip_invariant.  */\n \n typedef struct GTY(()) ipa_agg_jf_item\n {\n@@ -192,7 +192,7 @@ typedef struct GTY (()) ipa_jump_func\n } ipa_jump_func_t;\n \n \n-/* Return the offset of the component that is decribed by a known type jump\n+/* Return the offset of the component that is described by a known type jump\n    function JFUNC.  */\n \n static inline HOST_WIDE_INT"}, {"sha": "5492349b4e1f3f603ea7ef91a2b378155faaee68", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688010bad0375a275466ac1adb98aff80c0e77ac/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=688010bad0375a275466ac1adb98aff80c0e77ac", "patch": "@@ -1080,7 +1080,7 @@ ignore_edge (struct cgraph_edge *e)\n \n /* Return true if NODE is self recursive function.\n    ??? self recursive and indirectly recursive funcions should\n-   be the same, so this function seems unnecesary.  */\n+   be the same, so this function seems unnecessary.  */\n \n static bool\n self_recursive_p (struct cgraph_node *node)"}]}