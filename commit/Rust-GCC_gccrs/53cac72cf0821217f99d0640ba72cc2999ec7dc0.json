{"sha": "53cac72cf0821217f99d0640ba72cc2999ec7dc0", "node_id": "C_kwDOANBUbNoAKDUzY2FjNzJjZjA4MjEyMTdmOTlkMDY0MGJhNzJjYzI5OTllYzdkYzA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-04T23:25:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-09T01:09:55Z"}, "message": "c++: cleanup constant-init'd members [PR96876]\n\nThis is a case missed by my recent fixes to aggregate initialization and\nexception cleanup for PR94041 et al: we also need to clean up members with\nconstant initialization if initialization of a later member throws.\n\nIt also occurs to me that we needn't bother building the cleanups if\n-fno-exceptions; build_vec_init already doesn't.\n\n\tPR c++/96876\n\ngcc/cp/ChangeLog:\n\n\t* typeck2.cc (split_nonconstant_init_1): Push cleanups for\n\tpreceding members with constant initialization.\n\t(maybe_push_temp_cleanup): Do nothing if -fno-exceptions.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/aggr-base11.C: New test.\n\t* g++.dg/eh/aggregate2.C: New test.", "tree": {"sha": "39afa87017a50078ed99e8bb01e7e247b317246f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39afa87017a50078ed99e8bb01e7e247b317246f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cac72cf0821217f99d0640ba72cc2999ec7dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cac72cf0821217f99d0640ba72cc2999ec7dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cac72cf0821217f99d0640ba72cc2999ec7dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cac72cf0821217f99d0640ba72cc2999ec7dc0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "39d03e4c3c43d0c4d15f724c367a5527964e027f", "filename": "gcc/cp/typeck2.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cac72cf0821217f99d0640ba72cc2999ec7dc0/gcc%2Fcp%2Ftypeck2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cac72cf0821217f99d0640ba72cc2999ec7dc0/gcc%2Fcp%2Ftypeck2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.cc?ref=53cac72cf0821217f99d0640ba72cc2999ec7dc0", "patch": "@@ -467,6 +467,8 @@ cxx_incomplete_type_error (location_t loc, const_tree value, const_tree type)\n static void\n maybe_push_temp_cleanup (tree sub, vec<tree,va_gc> **flags)\n {\n+  if (!flag_exceptions)\n+    return;\n   if (tree cleanup\n       = cxx_maybe_build_cleanup (sub, tf_warning_or_error))\n     {\n@@ -496,6 +498,7 @@ split_nonconstant_init_1 (tree dest, tree init, bool last,\n   bool array_type_p = false;\n   bool complete_p = true;\n   HOST_WIDE_INT num_split_elts = 0;\n+  tree last_split_elt = NULL_TREE;\n \n   switch (TREE_CODE (type))\n     {\n@@ -572,6 +575,7 @@ split_nonconstant_init_1 (tree dest, tree init, bool last,\n \t      else\n \t\t{\n \t\t  /* Mark element for removal.  */\n+\t\t  last_split_elt = field_index;\n \t\t  CONSTRUCTOR_ELT (init, idx)->index = NULL_TREE;\n \t\t  if (idx < tidx)\n \t\t    tidx = idx;\n@@ -584,6 +588,7 @@ split_nonconstant_init_1 (tree dest, tree init, bool last,\n \t\t\t\t\t      flags));\n \n \t      /* Mark element for removal.  */\n+\t      last_split_elt = field_index;\n \t      CONSTRUCTOR_ELT (init, idx)->index = NULL_TREE;\n \t      if (idx < tidx)\n \t\ttidx = idx;\n@@ -593,6 +598,26 @@ split_nonconstant_init_1 (tree dest, tree init, bool last,\n \t    {\n \t      tree code;\n \n+\t      /* Push cleanups for any preceding members with constant\n+\t\t initialization.  */\n+\t      if (CLASS_TYPE_P (type))\n+\t\tfor (tree prev = (last_split_elt ?\n+\t\t\t\t  DECL_CHAIN (last_split_elt)\n+\t\t\t\t  : TYPE_FIELDS (type));\n+\t\t     ; prev = DECL_CHAIN (prev))\n+\t\t  {\n+\t\t    prev = next_initializable_field (prev);\n+\t\t    if (prev == field_index)\n+\t\t      break;\n+\t\t    tree ptype = TREE_TYPE (prev);\n+\t\t    if (type_build_dtor_call (ptype))\n+\t\t      {\n+\t\t\ttree pcref = build3 (COMPONENT_REF, ptype, dest, prev,\n+\t\t\t\t\t     NULL_TREE);\n+\t\t\tmaybe_push_temp_cleanup (pcref, flags);\n+\t\t      }\n+\t\t  }\n+\n \t      /* Mark element for removal.  */\n \t      CONSTRUCTOR_ELT (init, idx)->index = NULL_TREE;\n \t      if (idx < tidx)\n@@ -645,6 +670,7 @@ split_nonconstant_init_1 (tree dest, tree init, bool last,\n \t\t    maybe_push_temp_cleanup (sub, flags);\n \t\t}\n \n+\t      last_split_elt = field_index;\n \t      num_split_elts++;\n \t    }\n \t}"}, {"sha": "88625dc95332e45287bd96105ede93dcfb21ba60", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base11.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cac72cf0821217f99d0640ba72cc2999ec7dc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cac72cf0821217f99d0640ba72cc2999ec7dc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base11.C?ref=53cac72cf0821217f99d0640ba72cc2999ec7dc0", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/96876\n+// { dg-do compile { target c++17 } }\n+\n+struct B {\n+protected:\n+    ~B() {}\t\t\t// { dg-message \"\" }\n+};\n+\n+struct A { };\n+struct C1: B { int n; };\n+struct C2: A, B { int n; };\n+\n+A af ();\n+int f();\n+\n+void g() {\n+  C1 c1{ {}, f()};\t\t// { dg-error \"protected\" }\n+  C2 c2{ af(), {}, f()};\t// { dg-error \"protected\" }\n+}"}, {"sha": "8424d63de2d2f663afa4a85fa18a4b75e75fe974", "filename": "gcc/testsuite/g++.dg/eh/aggregate2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cac72cf0821217f99d0640ba72cc2999ec7dc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cac72cf0821217f99d0640ba72cc2999ec7dc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate2.C?ref=53cac72cf0821217f99d0640ba72cc2999ec7dc0", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/96876\n+// { dg-do run { target c++11 } }\n+\n+int d;\n+struct B {\n+  ~B() { ++d; }\n+};\n+\n+struct C1 { B b; int n; };\n+struct C2 { int i; B b; int n; };\n+\n+int f() { throw 24; return 42; }\n+int dummy;\n+int g() { ++dummy; return 42; }\n+\n+int main() {\n+  try {\n+    C1 c{{}, f()};\n+  } catch (...) { }\n+\n+  try {\n+    C2 c{g(), {}, f()};\n+  } catch (...) { }\n+\n+  if (d != 2)\n+    __builtin_abort ();\n+}"}]}