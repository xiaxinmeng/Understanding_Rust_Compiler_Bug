{"sha": "1c2278974cfa5e22ffcde5c13f9cce92225bf812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyMjc4OTc0Y2ZhNWUyMmZmY2RlNWMxM2Y5Y2NlOTIyMjViZjgxMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-01-14T05:45:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-01-14T05:45:52Z"}, "message": "pt.c (tsubst_friend_function): Improve comment.\n\n\t* pt.c (tsubst_friend_function): Improve comment.\n\t(instantiate_decl): Avoid crashing when a \"nested\" function is\n\tinstantiated from the top level.\n\nFrom-SVN: r31403", "tree": {"sha": "0b0194b94c81e1efdd9a0299177a16c4566e7933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b0194b94c81e1efdd9a0299177a16c4566e7933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c2278974cfa5e22ffcde5c13f9cce92225bf812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2278974cfa5e22ffcde5c13f9cce92225bf812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2278974cfa5e22ffcde5c13f9cce92225bf812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2278974cfa5e22ffcde5c13f9cce92225bf812/comments", "author": null, "committer": null, "parents": [{"sha": "f1ebdfc52aed6f8e1f832bfd056b8be90b2009ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ebdfc52aed6f8e1f832bfd056b8be90b2009ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ebdfc52aed6f8e1f832bfd056b8be90b2009ed"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "d9cb4fe11af9af00e8e7a38c03fe9ce840caf346", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c2278974cfa5e22ffcde5c13f9cce92225bf812", "patch": "@@ -1,3 +1,12 @@\n+2000-01-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (tsubst_friend_function): Improve comment.\n+\t(instantiate_decl): Avoid crashing when a \"nested\" function is\n+\tinstantiated from the top level.\n+\t\n+\t* dump.c (dqeueue_and_dump): Dump\n+\tDECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION.\n+\n 2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* call.c: If GATHER_STATISTICS, declare `n_build_method_call'."}, {"sha": "379ad8314079a9634d30f512ea199d5ae704dd4a", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=1c2278974cfa5e22ffcde5c13f9cce92225bf812", "patch": "@@ -1,5 +1,5 @@\n /* Tree-dumping functionality for intermediate representation.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>\n \n This file is part of GNU CC.\n@@ -585,6 +585,8 @@ dequeue_and_dump (di)\n \t\tdump_string (di, \"global fini\");\n \t      dump_int (di, \"prio\", GLOBAL_INIT_PRIORITY (t));\n \t    }\n+\t  if (DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION (t))\n+\t    dump_string (di, \"pseudo tmpl\");\n \n \t  dump_child (\"body\", DECL_SAVED_TREE (t));\n \t}"}, {"sha": "67670fa6cb90b7d02b59d505be8e3775f815dc54", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1c2278974cfa5e22ffcde5c13f9cce92225bf812", "patch": "@@ -4465,9 +4465,9 @@ tsubst_friend_function (decl, args)\n \t  new_friend_result_template_info = NULL_TREE;\n \t}\n \n-      /* Inside pushdecl_namespace_level, we will push into the \n-\t current namespace. However, the friend function should \n-\t tyically go into the namespace of the template. */\n+      /* Inside pushdecl_namespace_level, we will push into the\n+\t current namespace. However, the friend function should go\n+\t into the namespace of the template. */\n       ns = decl_namespace_context (new_friend);\n       push_nested_namespace (ns);\n       old_decl = pushdecl_namespace_level (new_friend);\n@@ -9559,7 +9559,7 @@ instantiate_decl (d)\n       && ! DECL_NEEDED_P (d)\n       /* If the function that caused us to be instantiated is needed, we\n \t will be needed, too.  */\n-      && (! nested || ! DECL_NEEDED_P (old_fn)))\n+      && (! nested || (old_fn && ! DECL_NEEDED_P (old_fn))))\n     DECL_DEFER_OUTPUT (d) = 1;\n \n   /* We're now committed to instantiating this template.  Mark it as"}, {"sha": "da66d7543b3513f1804c0682b5d967c94174a7aa", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash54.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2278974cfa5e22ffcde5c13f9cce92225bf812/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash54.C?ref=1c2278974cfa5e22ffcde5c13f9cce92225bf812", "patch": "@@ -0,0 +1,29 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <class T>\n+int g (T);\n+\n+int j = g (3);\n+\n+template <class T>\n+inline T f (T)\n+{\n+  return 2;\n+}\n+\n+template <class T>\n+struct S\n+{\n+  static const int i;\n+};\n+\n+template <class T>\n+const int S<T>::i = f (3);\n+\n+template <class T>\n+int g (T)\n+{\n+  return S<double>::i;\n+}\n+"}]}