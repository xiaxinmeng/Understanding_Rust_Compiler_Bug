{"sha": "29b2fd371f18169141e20b90effa7205db68fb11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjliMmZkMzcxZjE4MTY5MTQxZTIwYjkwZWZmYTcyMDVkYjY4ZmIxMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-20T13:51:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-20T14:15:22Z"}, "message": "libstdc++: Skip filesystem tests that depend on permissions [PR90787]\n\nTests that depend on filesystem permissions FAIL if run on Windows or as\nroot. Add a helper function to detect those cases, so the tests can skip\nthose checks gracefully.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/90787\n\t* testsuite/27_io/filesystem/iterators/directory_iterator.cc:\n\tUse new __gnu_test::permissions_are_testable() function.\n\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/exists.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/is_empty.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/remove.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/remove_all.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/status.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/symlink_status.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/exists.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/is_empty.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/remove.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/remove_all.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n\tLikewise.\n\t* testsuite/util/testsuite_fs.h (__gnu_test::permissions_are_testable):\n\tNew function to guess whether testing permissions will work.", "tree": {"sha": "dca45d74011db75326d251aaf6aaecc4d986844a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca45d74011db75326d251aaf6aaecc4d986844a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29b2fd371f18169141e20b90effa7205db68fb11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b2fd371f18169141e20b90effa7205db68fb11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b2fd371f18169141e20b90effa7205db68fb11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b2fd371f18169141e20b90effa7205db68fb11/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b507b1e3c58c063b9cf803dff80c28d4626cb5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b507b1e3c58c063b9cf803dff80c28d4626cb5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b507b1e3c58c063b9cf803dff80c28d4626cb5d"}], "stats": {"total": 379, "additions": 197, "deletions": 182}, "files": [{"sha": "b432e8833bae151ad75b5ba81514e22514a30c76", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -56,24 +56,26 @@ test01()\n   ++iter;\n   VERIFY( iter == end(iter) );\n \n-#if !(defined(__MINGW32__) || defined(__MINGW64__))\n-  // Test inaccessible directory.\n-  ec = bad_ec;\n-  permissions(p, fs::perms::none, ec);\n-  VERIFY( !ec );\n-  iter = fs::directory_iterator(p, ec);\n-  VERIFY( ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible directory, skipping permission denied.\n-  const auto opts = fs::directory_options::skip_permission_denied;\n-  ec = bad_ec;\n-  iter = fs::directory_iterator(p, opts, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter == end(iter) );\n-#endif\n+  if (__gnu_test::permissions_are_testable())\n+  {\n+    // Test inaccessible directory.\n+    ec = bad_ec;\n+    permissions(p, fs::perms::none, ec);\n+    VERIFY( !ec );\n+    iter = fs::directory_iterator(p, ec);\n+    VERIFY( ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible directory, skipping permission denied.\n+    const auto opts = fs::directory_options::skip_permission_denied;\n+    ec = bad_ec;\n+    iter = fs::directory_iterator(p, opts, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter == end(iter) );\n+\n+    permissions(p, fs::perms::owner_all, ec);\n+  }\n \n-  permissions(p, fs::perms::owner_all, ec);\n   remove_all(p, ec);\n }\n "}, {"sha": "29a9f4806491f1e644ac11fe0cc4a4f91064cda8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 49, "deletions": 48, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -59,54 +59,55 @@ test01()\n   ++iter;\n   VERIFY( iter == end(iter) );\n \n-#if ! (defined (__MINGW32__) || defined(__MINGW64__))\n-  // Test inaccessible directory.\n-  ec = bad_ec;\n-  permissions(p, fs::perms::none, ec);\n-  VERIFY( !ec );\n-  iter = fs::recursive_directory_iterator(p, ec);\n-  VERIFY( ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible directory, skipping permission denied.\n-  const auto opts = fs::directory_options::skip_permission_denied;\n-  iter = fs::recursive_directory_iterator(p, opts, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible sub-directory.\n-  ec = bad_ec;\n-  permissions(p, fs::perms::owner_all, ec);\n-  VERIFY( !ec );\n-  ec = bad_ec;\n-  permissions(p/\"d1/d2\", fs::perms::none, ec);\n-  VERIFY( !ec );\n-  ec = bad_ec;\n-  iter = fs::recursive_directory_iterator(p, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter != end(iter) );\n-  VERIFY( iter->path() == p/\"d1\" );\n-  ++iter;              // should recurse into d1\n-  VERIFY( iter != end(iter) );\n-  VERIFY( iter->path() == p/\"d1/d2\" );\n-  iter.increment(ec);  // should fail to recurse into p/d1/d2\n-  VERIFY( ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible sub-directory, skipping permission denied.\n-  ec = bad_ec;\n-  iter = fs::recursive_directory_iterator(p, opts, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter != end(iter) );\n-  VERIFY( iter->path() == p/\"d1\" );\n-  ++iter;              // should recurse into d1\n-  VERIFY( iter != end(iter) );\n-  VERIFY( iter->path() == p/\"d1/d2\" );\n-  ec = bad_ec;\n-  iter.increment(ec);  // should fail to recurse into p/d1/d2, so skip it\n-  VERIFY( !ec );\n-  VERIFY( iter == end(iter) );\n-#endif\n+  if (__gnu_test::permissions_are_testable())\n+  {\n+    // Test inaccessible directory.\n+    ec = bad_ec;\n+    permissions(p, fs::perms::none, ec);\n+    VERIFY( !ec );\n+    iter = fs::recursive_directory_iterator(p, ec);\n+    VERIFY( ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible directory, skipping permission denied.\n+    const auto opts = fs::directory_options::skip_permission_denied;\n+    iter = fs::recursive_directory_iterator(p, opts, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible sub-directory.\n+    ec = bad_ec;\n+    permissions(p, fs::perms::owner_all, ec);\n+    VERIFY( !ec );\n+    ec = bad_ec;\n+    permissions(p/\"d1/d2\", fs::perms::none, ec);\n+    VERIFY( !ec );\n+    ec = bad_ec;\n+    iter = fs::recursive_directory_iterator(p, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter != end(iter) );\n+    VERIFY( iter->path() == p/\"d1\" );\n+    ++iter;              // should recurse into d1\n+    VERIFY( iter != end(iter) );\n+    VERIFY( iter->path() == p/\"d1/d2\" );\n+    iter.increment(ec);  // should fail to recurse into p/d1/d2\n+    VERIFY( ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible sub-directory, skipping permission denied.\n+    ec = bad_ec;\n+    iter = fs::recursive_directory_iterator(p, opts, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter != end(iter) );\n+    VERIFY( iter->path() == p/\"d1\" );\n+    ++iter;              // should recurse into d1\n+    VERIFY( iter != end(iter) );\n+    VERIFY( iter->path() == p/\"d1/d2\" );\n+    ec = bad_ec;\n+    iter.increment(ec);  // should fail to recurse into p/d1/d2, so skip it\n+    VERIFY( !ec );\n+    VERIFY( iter == end(iter) );\n+  }\n \n   permissions(p/\"d1/d2\", fs::perms::owner_all, ec);\n   remove_all(p, ec);"}, {"sha": "f99a3346ed04f07d8aa1000f6871f0dce2481043", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/exists.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -79,10 +79,8 @@ test03()\n void\n test04()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // filesystem permissions not supported\n-  return;\n-#endif\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n \n   using std::filesystem::perms;\n   using std::filesystem::perm_options;"}, {"sha": "116057485010d78bf4c85564d9e99bb766dae432", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/is_empty.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -27,10 +27,8 @@ namespace fs = std::filesystem;\n void\n test01()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // filesystem permissions not supported\n-  return;\n-#endif\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n \n   auto p = __gnu_test::nonexistent_path();\n   create_directory(p);"}, {"sha": "70f3cf0eaf4645e152c9f4072e1c569b21a9c09f", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove.cc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -76,19 +76,18 @@ test01()\n   VERIFY( !n );\n   VERIFY( exists(dir/\"a/b\") );\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No permissions support\n-#else\n-  permissions(dir, fs::perms::none, ec);\n-  if (!ec)\n+  if (__gnu_test::permissions_are_testable())\n   {\n-    ec.clear();\n-    n = remove(dir/\"a/b\", ec);\n-    VERIFY( ec );\n-    VERIFY( !n );\n-    permissions(dir, fs::perms::owner_all, ec);\n+    permissions(dir, fs::perms::none, ec);\n+    if (!ec)\n+    {\n+      ec.clear();\n+      n = remove(dir/\"a/b\", ec);\n+      VERIFY( ec );\n+      VERIFY( !n );\n+      permissions(dir, fs::perms::owner_all, ec);\n+    }\n   }\n-#endif\n \n   ec = bad_ec;\n   n = remove(dir/\"a/b\", ec);"}, {"sha": "c02e8c3c57568ce918002ba423819e3a3d99db75", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove_all.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -142,9 +142,9 @@ test03()\n void\n test04()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // no permissions\n-#else\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n+\n   // PR libstdc++/93201\n   std::error_code ec;\n   std::uintmax_t n;\n@@ -172,7 +172,6 @@ test04()\n   fs::permissions(dir, fs::perms::owner_write, fs::perm_options::add);\n   fs::remove_all(dir, ec);\n   f.path.clear();\n-#endif\n }\n \n int"}, {"sha": "4cabdcbe7f7d98df5273064d9875600a4a93cba5", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/status.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -55,10 +55,8 @@ test02()\n void\n test03()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No permissions support\n-  return;\n-#endif\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n \n   fs::path dir = __gnu_test::nonexistent_path();\n   fs::create_directory(dir);"}, {"sha": "bb4c185dd33fad21421febac528a2c2addcf13ab", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/symlink_status.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -68,6 +68,9 @@ test02()\n void\n test03()\n {\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n+\n   fs::path dir = __gnu_test::nonexistent_path();\n   fs::create_directory(dir);\n   __gnu_test::scoped_file d(dir, __gnu_test::scoped_file::adopt_file);"}, {"sha": "1cfda583be397c361d4881689a16f0122003954e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -101,10 +101,8 @@ test02()\n void\n test03()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No permissions support\n-  return;\n-#endif\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n \n   clean_env();\n "}, {"sha": "abc705d7696db39deda81e63c5d5d49e39e6bed1", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -53,22 +53,24 @@ test01()\n   ++iter;\n   VERIFY( iter == end(iter) );\n \n-#if !(defined(__MINGW32__) || defined(__MINGW64__))\n-  // Test inaccessible directory.\n-  permissions(p, fs::perms::none, ec);\n-  VERIFY( !ec );\n-  iter = fs::directory_iterator(p, ec);\n-  VERIFY( ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible directory, skipping permission denied.\n-  const auto opts = fs::directory_options::skip_permission_denied;\n-  iter = fs::directory_iterator(p, opts, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter == end(iter) );\n-#endif\n+  if (__gnu_test::permissions_are_testable())\n+  {\n+    // Test inaccessible directory.\n+    permissions(p, fs::perms::none, ec);\n+    VERIFY( !ec );\n+    iter = fs::directory_iterator(p, ec);\n+    VERIFY( ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible directory, skipping permission denied.\n+    const auto opts = fs::directory_options::skip_permission_denied;\n+    iter = fs::directory_iterator(p, opts, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter == end(iter) );\n+\n+    permissions(p, fs::perms::owner_all, ec);\n+  }\n \n-  permissions(p, fs::perms::owner_all, ec);\n   remove_all(p, ec);\n }\n "}, {"sha": "a9a81c8c4cbcf14aef8a8c145ec042a3ab31977e", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 51, "deletions": 47, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -61,54 +61,58 @@ test01()\n   ++iter;\n   VERIFY( iter == end(iter) );\n \n-  // Test inaccessible directory.\n-  ec = bad_ec;\n-  permissions(p, fs::perms::none, ec);\n-  VERIFY( !ec );\n-  iter = fs::recursive_directory_iterator(p, ec);\n-  VERIFY( ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible directory, skipping permission denied.\n-  const auto opts = fs::directory_options::skip_permission_denied;\n-  ec = bad_ec;\n-  iter = fs::recursive_directory_iterator(p, opts, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible sub-directory.\n-  ec = bad_ec;\n-  permissions(p, fs::perms::owner_all, ec);\n-  VERIFY( !ec );\n-  ec = bad_ec;\n-  permissions(p/\"d1/d2\", fs::perms::none, ec);\n-  VERIFY( !ec );\n-  ec = bad_ec;\n-  iter = fs::recursive_directory_iterator(p, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter != end(iter) );\n-  VERIFY( iter->path() == p/\"d1\" );\n-  ++iter;              // should recurse into d1\n-  VERIFY( iter != end(iter) );\n-  VERIFY( iter->path() == p/\"d1/d2\" );\n-  iter.increment(ec);  // should fail to recurse into p/d1/d2\n-  VERIFY( ec );\n-  VERIFY( iter == end(iter) );\n-\n-  // Test inaccessible sub-directory, skipping permission denied.\n-  ec = bad_ec;\n-  iter = fs::recursive_directory_iterator(p, opts, ec);\n-  VERIFY( !ec );\n-  VERIFY( iter != end(iter) );\n-  VERIFY( iter->path() == p/\"d1\" );\n-  ++iter;              // should recurse into d1\n-  VERIFY( iter->path() == p/\"d1/d2\" );\n-  ec = bad_ec;\n-  iter.increment(ec);  // should fail to recurse into p/d1/d2, so skip it\n-  VERIFY( !ec );\n-  VERIFY( iter == end(iter) );\n+  if (__gnu_test::permissions_are_testable())\n+  {\n+    // Test inaccessible directory.\n+    ec = bad_ec;\n+    permissions(p, fs::perms::none, ec);\n+    VERIFY( !ec );\n+    iter = fs::recursive_directory_iterator(p, ec);\n+    VERIFY( ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible directory, skipping permission denied.\n+    const auto opts = fs::directory_options::skip_permission_denied;\n+    ec = bad_ec;\n+    iter = fs::recursive_directory_iterator(p, opts, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible sub-directory.\n+    ec = bad_ec;\n+    permissions(p, fs::perms::owner_all, ec);\n+    VERIFY( !ec );\n+    ec = bad_ec;\n+    permissions(p/\"d1/d2\", fs::perms::none, ec);\n+    VERIFY( !ec );\n+    ec = bad_ec;\n+    iter = fs::recursive_directory_iterator(p, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter != end(iter) );\n+    VERIFY( iter->path() == p/\"d1\" );\n+    ++iter;              // should recurse into d1\n+    VERIFY( iter != end(iter) );\n+    VERIFY( iter->path() == p/\"d1/d2\" );\n+    iter.increment(ec);  // should fail to recurse into p/d1/d2\n+    VERIFY( ec );\n+    VERIFY( iter == end(iter) );\n+\n+    // Test inaccessible sub-directory, skipping permission denied.\n+    ec = bad_ec;\n+    iter = fs::recursive_directory_iterator(p, opts, ec);\n+    VERIFY( !ec );\n+    VERIFY( iter != end(iter) );\n+    VERIFY( iter->path() == p/\"d1\" );\n+    ++iter;              // should recurse into d1\n+    VERIFY( iter->path() == p/\"d1/d2\" );\n+    ec = bad_ec;\n+    iter.increment(ec);  // should fail to recurse into p/d1/d2, so skip it\n+    VERIFY( !ec );\n+    VERIFY( iter == end(iter) );\n+\n+    permissions(p/\"d1/d2\", fs::perms::owner_all, ec);\n+  }\n \n-  permissions(p/\"d1/d2\", fs::perms::owner_all, ec);\n   remove_all(p, ec);\n }\n "}, {"sha": "79fe970e9f3068db35c920267139fc2d5beb9033", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/exists.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -74,10 +74,8 @@ test03()\n void\n test04()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // filesystem permissions not supported\n-  return;\n-#endif\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n \n   using perms = std::experimental::filesystem::perms;\n   path p = __gnu_test::nonexistent_path();"}, {"sha": "a474fa2a37f05fdc93375124420e802b7882bb23", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/is_empty.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -28,10 +28,8 @@ namespace fs = std::experimental::filesystem;\n void\n test01()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // filesystem permissions not supported\n-  return;\n-#endif\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n \n   auto p = __gnu_test::nonexistent_path();\n   create_directory(p);"}, {"sha": "fedbf4714b5aa27aa2338e4c2c174bfdc2748811", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove.cc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -78,19 +78,18 @@ test01()\n   VERIFY( !n );\n   VERIFY( exists(dir/\"a/b\") );\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No permissions support\n-#else\n-  permissions(dir, fs::perms::none, ec);\n-  if (!ec)\n+  if (__gnu_test::permissions_are_testable())\n   {\n-    ec.clear();\n-    n = remove(dir/\"a/b\", ec);\n-    VERIFY( ec );\n-    VERIFY( !n );\n-    permissions(dir, fs::perms::owner_all, ec);\n+    permissions(dir, fs::perms::none, ec);\n+    if (!ec)\n+    {\n+      ec.clear();\n+      n = remove(dir/\"a/b\", ec);\n+      VERIFY( ec );\n+      VERIFY( !n );\n+      permissions(dir, fs::perms::owner_all, ec);\n+    }\n   }\n-#endif\n \n   ec = bad_ec;\n   n = remove(dir/\"a/b\", ec);"}, {"sha": "dc067e79e80ca415944cd9f68775ea01a5ea38ad", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove_all.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -111,9 +111,9 @@ test02()\n void\n test04()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // no permissions\n-#else\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n+\n   // PR libstdc++/93201\n   std::error_code ec;\n   std::uintmax_t n;\n@@ -139,7 +139,6 @@ test04()\n   fs::permissions(dir, fs::perms::owner_write|fs::perms::add_perms);\n   fs::remove_all(dir, ec);\n   f.path.clear();\n-#endif\n }\n \n int"}, {"sha": "badd8a884cce2b7f46edfc9451c4de387cd1158f", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -102,6 +102,9 @@ test02()\n void\n test03()\n {\n+  if (!__gnu_test::permissions_are_testable())\n+    return;\n+\n   auto p = __gnu_test::nonexistent_path();\n   create_directories(p/\"tmp\");\n   permissions(p, fs::perms::none);"}, {"sha": "674b60b83d2642cb63d11e47c358c6ebd59fe0ab", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b2fd371f18169141e20b90effa7205db68fb11/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=29b2fd371f18169141e20b90effa7205db68fb11", "patch": "@@ -34,7 +34,7 @@ namespace test_fs = std::experimental::filesystem;\n #include <fstream>\n #include <string>\n #include <cstdio>\n-#include <unistd.h> // unlink, close, getpid\n+#include <unistd.h> // unlink, close, getpid, geteuid\n \n #if defined(_GNU_SOURCE) || _XOPEN_SOURCE >= 500 || _POSIX_C_SOURCE >= 200112L\n #include <stdlib.h> // mkstemp\n@@ -160,5 +160,21 @@ namespace __gnu_test\n     path_type path;\n   };\n \n+  bool\n+  permissions_are_testable(bool print_msg = true)\n+  {\n+    bool testable = false;\n+#if !(defined __MINGW32__ || defined __MINGW64__)\n+    if (geteuid() != 0)\n+      testable = true;\n+    // XXX on Linux the CAP_DAC_OVERRIDE and CAP_DAC_READ_SEARCH capabilities\n+    // can give normal users extra permissions for files and directories.\n+    // We ignore that possibility here.\n+#endif\n+    if (print_msg && !testable)\n+      std::puts(\"Skipping tests that depend on filesystem permissions\");\n+    return testable;\n+  }\n+\n } // namespace __gnu_test\n #endif"}]}