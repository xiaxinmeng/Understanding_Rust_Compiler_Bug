{"sha": "4075bdcf80721fbc35c6cad603097d61767d0af3", "node_id": "C_kwDOANBUbNoAKDQwNzViZGNmODA3MjFmYmMzNWM2Y2FkNjAzMDk3ZDYxNzY3ZDBhZjM", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-09-29T13:48:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-11T13:38:10Z"}, "message": "[Ada] Import binder globals as constant\n\ngcc/ada/\n\n\t* libgnarl/s-intman__android.adb, libgnarl/s-intman__lynxos.adb,\n\tlibgnarl/s-intman__posix.adb, libgnarl/s-intman__qnx.adb,\n\tlibgnarl/s-intman__solaris.adb, libgnarl/s-intman__susv3.adb,\n\tlibgnarl/s-taprob.adb, libgnarl/s-taprop__hpux-dce.adb,\n\tlibgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,\n\tlibgnarl/s-taprop__posix.adb, libgnarl/s-taprop__qnx.adb,\n\tlibgnarl/s-taprop__solaris.adb, libgnarl/s-taprop__vxworks.adb,\n\tlibgnarl/s-taskin.adb, libgnarl/s-tasque.adb,\n\tlibgnarl/s-tpoben.adb, libgnat/a-calend.adb,\n\tlibgnat/a-excach.adb, libgnat/a-except.adb, libgnat/a-tags.adb,\n\tlibgnat/a-textio.adb, libgnat/a-witeio.adb,\n\tlibgnat/a-ztexio.adb, libgnat/g-binenv.adb,\n\tlibgnat/s-parame.adb, libgnat/s-parame__vxworks.adb,\n\tlibgnat/s-stratt.adb, libgnat/s-trasym__dwarf.adb: Mark imported\n\tbinder globals as constant.", "tree": {"sha": "f036a49e003eb635fd9a3ece14bab9564f7cb378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f036a49e003eb635fd9a3ece14bab9564f7cb378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4075bdcf80721fbc35c6cad603097d61767d0af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4075bdcf80721fbc35c6cad603097d61767d0af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4075bdcf80721fbc35c6cad603097d61767d0af3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4075bdcf80721fbc35c6cad603097d61767d0af3/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "736f9bed34c0420063c3c01b520099711040d345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736f9bed34c0420063c3c01b520099711040d345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/736f9bed34c0420063c3c01b520099711040d345"}], "stats": {"total": 97, "additions": 44, "deletions": 53}, "files": [{"sha": "be9c50eac25b781d204e2ce0b5a70fa87f964269", "filename": "gcc/ada/libgnarl/s-intman__android.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__android.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__android.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman__android.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -68,7 +68,7 @@ package body System.Interrupt_Management is\n    Exception_Interrupts : constant Interrupt_List :=\n      (SIGFPE, SIGILL, SIGSEGV, SIGBUS);\n \n-   Unreserve_All_Interrupts : Interfaces.C.int;\n+   Unreserve_All_Interrupts : constant Interfaces.C.int;\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n "}, {"sha": "2a1f9c86f9dc455d745d180169e7bc657a8c5329", "filename": "gcc/ada/libgnarl/s-intman__lynxos.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__lynxos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__lynxos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman__lynxos.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -68,7 +68,7 @@ package body System.Interrupt_Management is\n    Exception_Interrupts : constant Interrupt_List :=\n      (SIGFPE, SIGILL, SIGSEGV, SIGBUS);\n \n-   Unreserve_All_Interrupts : Interfaces.C.int;\n+   Unreserve_All_Interrupts : constant Interfaces.C.int;\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n "}, {"sha": "ae3d77eaf6794b0dfae7c45c64ea14e1f45de786", "filename": "gcc/ada/libgnarl/s-intman__posix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman__posix.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -68,7 +68,7 @@ package body System.Interrupt_Management is\n    Exception_Interrupts : constant Interrupt_List :=\n      (SIGFPE, SIGILL, SIGSEGV, SIGBUS);\n \n-   Unreserve_All_Interrupts : Interfaces.C.int;\n+   Unreserve_All_Interrupts : constant Interfaces.C.int;\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n "}, {"sha": "8934bdfb5590dd3c7bec75f45e1a29e8c7fe06f4", "filename": "gcc/ada/libgnarl/s-intman__qnx.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__qnx.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__qnx.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman__qnx.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -68,7 +68,7 @@ package body System.Interrupt_Management is\n    Exception_Interrupts : constant Interrupt_List :=\n      (SIGFPE, SIGILL, SIGSEGV, SIGBUS);\n \n-   Unreserve_All_Interrupts : Interfaces.C.int;\n+   Unreserve_All_Interrupts : constant Interfaces.C.int;\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n "}, {"sha": "76002a713218221522a0c7bb3f3b8d768abcec8e", "filename": "gcc/ada/libgnarl/s-intman__solaris.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman__solaris.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -47,7 +47,7 @@ package body System.Interrupt_Management is\n    Exception_Interrupts : constant Interrupt_List :=\n      (SIGFPE, SIGILL, SIGSEGV, SIGBUS);\n \n-   Unreserve_All_Interrupts : Interfaces.C.int;\n+   Unreserve_All_Interrupts : constant Interfaces.C.int;\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n "}, {"sha": "f2870cbe7ce918dc815f12effb2bef52faafb685", "filename": "gcc/ada/libgnarl/s-intman__susv3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__susv3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-intman__susv3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman__susv3.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -56,7 +56,7 @@ package body System.Interrupt_Management is\n    use Interfaces.C;\n    use System.OS_Interface;\n \n-   Unreserve_All_Interrupts : Interfaces.C.int;\n+   Unreserve_All_Interrupts : constant Interfaces.C.int;\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n "}, {"sha": "1f304d96c4ba65a15d835dddb72555a7bc038310", "filename": "gcc/ada/libgnarl/s-taprob.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprob.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -47,7 +47,7 @@ package body System.Tasking.Protected_Objects is\n    -- Local Data --\n    ----------------\n \n-   Locking_Policy : Character;\n+   Locking_Policy : constant Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n \n    -------------------------"}, {"sha": "9bded3abe73712e1506a80ef9b30d1503873f2ba", "filename": "gcc/ada/libgnarl/s-taprop__hpux-dce.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__hpux-dce.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -87,10 +87,10 @@ package body System.Task_Primitives.Operations is\n    Unblocked_Signal_Mask : aliased sigset_t;\n    --  The set of signals that should unblocked in all tasks\n \n-   Time_Slice_Val : Integer;\n+   Time_Slice_Val : constant Integer;\n    pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n \n-   Dispatching_Policy : Character;\n+   Dispatching_Policy : constant Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    --  Note: the reason that Locking_Policy is not needed is that this"}, {"sha": "1c8c6bd38dc1d29b1a65563820a4796cdf1d7fb5", "filename": "gcc/ada/libgnarl/s-taprop__linux.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -84,13 +84,13 @@ package body System.Task_Primitives.Operations is\n    Next_Serial_Number : Task_Serial_Number := 100;\n    --  We start at 100 (reserve some special values for using in error checks)\n \n-   Time_Slice_Val : Integer;\n+   Time_Slice_Val : constant Integer;\n    pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n \n-   Dispatching_Policy : Character;\n+   Dispatching_Policy : constant Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   Locking_Policy : Character;\n+   Locking_Policy : constant Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n \n    Foreign_Task_Elaborated : aliased Boolean := True;"}, {"sha": "33d5977d1c4f366ef76af1c5b841303e673c4eda", "filename": "gcc/ada/libgnarl/s-taprop__mingw.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -109,10 +109,10 @@ package body System.Task_Primitives.Operations is\n    --  a time; it is used to execute in mutual exclusion from all other tasks.\n    --  Used to protect All_Tasks_List\n \n-   Time_Slice_Val : Integer;\n+   Time_Slice_Val : constant Integer;\n    pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n \n-   Dispatching_Policy : Character;\n+   Dispatching_Policy : constant Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    function Get_Policy (Prio : System.Any_Priority) return Character;"}, {"sha": "c0766a0b4cdd23f159600acd54f9d3e2845293e1", "filename": "gcc/ada/libgnarl/s-taprop__posix.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -83,7 +83,7 @@ package body System.Task_Primitives.Operations is\n    Environment_Task_Id : Task_Id;\n    --  A variable to hold Task_Id for the environment task\n \n-   Locking_Policy : Character;\n+   Locking_Policy : constant Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n    --  Value of the pragma Locking_Policy:\n    --    'C' for Ceiling_Locking\n@@ -99,10 +99,10 @@ package body System.Task_Primitives.Operations is\n    --  We start at 100, to reserve some special values for\n    --  using in error checking.\n \n-   Time_Slice_Val : Integer;\n+   Time_Slice_Val : constant Integer;\n    pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n \n-   Dispatching_Policy : Character;\n+   Dispatching_Policy : constant Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    Foreign_Task_Elaborated : aliased Boolean := True;"}, {"sha": "e7faf08894d94239aaec4b7a7c2de68085141fe8", "filename": "gcc/ada/libgnarl/s-taprop__qnx.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__qnx.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__qnx.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__qnx.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -83,7 +83,7 @@ package body System.Task_Primitives.Operations is\n    Environment_Task_Id : Task_Id;\n    --  A variable to hold Task_Id for the environment task\n \n-   Locking_Policy : Character;\n+   Locking_Policy : constant Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n    --  Value of the pragma Locking_Policy:\n    --    'C' for Ceiling_Locking\n@@ -99,10 +99,10 @@ package body System.Task_Primitives.Operations is\n    --  We start at 100, to reserve some special values for\n    --  using in error checking.\n \n-   Time_Slice_Val : Integer;\n+   Time_Slice_Val : constant Integer;\n    pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n \n-   Dispatching_Policy : Character;\n+   Dispatching_Policy : constant Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    Foreign_Task_Elaborated : aliased Boolean := True;"}, {"sha": "faaaeea100d15919998f94084b10fe87c92466b6", "filename": "gcc/ada/libgnarl/s-taprop__solaris.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -128,13 +128,13 @@ package body System.Task_Primitives.Operations is\n    -- External Configuration Values --\n    -----------------------------------\n \n-   Time_Slice_Val : Integer;\n+   Time_Slice_Val : constant Integer;\n    pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n \n-   Locking_Policy : Character;\n+   Locking_Policy : constant Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n \n-   Dispatching_Policy : Character;\n+   Dispatching_Policy : constant Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    Foreign_Task_Elaborated : aliased Boolean := True;"}, {"sha": "ff214105ec9801358a2cc193feb2454afdcc2160", "filename": "gcc/ada/libgnarl/s-taprop__vxworks.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -88,13 +88,13 @@ package body System.Task_Primitives.Operations is\n \n    --  The followings are internal configuration constants needed\n \n-   Dispatching_Policy : Character;\n+   Dispatching_Policy : constant Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n-   Locking_Policy : Character;\n+   Locking_Policy : constant Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n \n    Mutex_Protocol : Priority_Type;\n@@ -104,7 +104,7 @@ package body System.Task_Primitives.Operations is\n    --  time; it is used to execute in mutual exclusion from all other tasks.\n    --  Used to protect All_Tasks_List\n \n-   Time_Slice_Val : Integer;\n+   Time_Slice_Val : constant Integer;\n    pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n \n    Null_Thread_Id : constant Thread_Id := 0;"}, {"sha": "ab50af14138f5b7ab2d6e174fb7e98f2c5796005", "filename": "gcc/ada/libgnarl/s-taskin.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -173,13 +173,13 @@ package body System.Tasking is\n    Main_Task_Image : constant String := \"main_task\";\n    --  Image of environment task\n \n-   Main_Priority : Integer;\n+   Main_Priority : constant Integer;\n    pragma Import (C, Main_Priority, \"__gl_main_priority\");\n    --  Priority for main task. Note that this is of type Integer, not Priority,\n    --  because we use the value -1 to indicate the default main priority, and\n    --  that is of course not in Priority'range.\n \n-   Main_CPU : Integer;\n+   Main_CPU : constant Integer;\n    pragma Import (C, Main_CPU, \"__gl_main_cpu\");\n    --  Affinity for main task. Note that this is of type Integer, not\n    --  CPU_Range, because we use the value -1 to indicate the unassigned"}, {"sha": "79382c456b299270bc592afe4d818d9a18e5b149", "filename": "gcc/ada/libgnarl/s-tasque.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-tasque.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-tasque.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasque.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -44,7 +44,7 @@ package body System.Tasking.Queuing is\n \n    --  Entry Queues implemented as doubly linked list\n \n-   Queuing_Policy : Character;\n+   Queuing_Policy : constant Character;\n    pragma Import (C, Queuing_Policy, \"__gl_queuing_policy\");\n \n    Priority_Queuing : constant Boolean := Queuing_Policy = 'P';"}, {"sha": "0cb3677cc91af51a0e5328e8b77378c12f1de2cc", "filename": "gcc/ada/libgnarl/s-tpoben.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnarl%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tpoben.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -58,7 +58,7 @@ package body System.Tasking.Protected_Objects.Entries is\n    -- Local Data --\n    ----------------\n \n-   Locking_Policy : Character;\n+   Locking_Policy : constant Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n \n    --------------"}, {"sha": "b24e95d88665a89f2a9567f5f7a1ee5b84a3596f", "filename": "gcc/ada/libgnat/a-calend.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-calend.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -149,7 +149,7 @@ is\n    -- Leap seconds control --\n    --------------------------\n \n-   Flag : Integer;\n+   Flag : constant Integer;\n    pragma Import (C, Flag, \"__gl_leap_seconds_support\");\n    --  This imported value is used to determine whether the compilation had\n    --  binder flag \"-y\" present which enables leap seconds. A value of zero"}, {"sha": "a8e6a58e976223ec6f77af225c9ddec8d29ba54c", "filename": "gcc/ada/libgnat/a-excach.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-excach.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-excach.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-excach.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -41,7 +41,7 @@ pragma Warnings (On);\n separate (Ada.Exceptions)\n procedure Call_Chain (Excep : EOA) is\n \n-   Exception_Tracebacks : Integer;\n+   Exception_Tracebacks : constant Integer;\n    pragma Import (C, Exception_Tracebacks, \"__gl_exception_tracebacks\");\n    --  Boolean indicating whether tracebacks should be stored in exception\n    --  occurrences."}, {"sha": "631c35aa92ce90262a0be46fd581845d640fc16e", "filename": "gcc/ada/libgnat/a-except.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -1760,7 +1760,7 @@ package body Ada.Exceptions is\n    -- Wide_Exception_Name --\n    -------------------------\n \n-   WC_Encoding : Character;\n+   WC_Encoding : constant Character;\n    pragma Import (C, WC_Encoding, \"__gl_wc_encoding\");\n    --  Encoding method for source, as exported by binder\n "}, {"sha": "170d16ac9cdcc4822454dc135860de441b502cc0", "filename": "gcc/ada/libgnat/a-tags.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tags.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -1032,7 +1032,7 @@ package body Ada.Tags is\n    -- Wide_Expanded_Name --\n    ------------------------\n \n-   WC_Encoding : Character;\n+   WC_Encoding : constant Character;\n    pragma Import (C, WC_Encoding, \"__gl_wc_encoding\");\n    --  Encoding method for source, as exported by binder\n "}, {"sha": "1bdab6e2db27b9c0610e8d031e3cb8628f4fad10", "filename": "gcc/ada/libgnat/a-textio.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-textio.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -67,7 +67,7 @@ is\n \n    use type System.CRTL.size_t;\n \n-   WC_Encoding : Character;\n+   WC_Encoding : constant Character;\n    pragma Import (C, WC_Encoding, \"__gl_wc_encoding\");\n    --  Default wide character encoding\n "}, {"sha": "dbc0f2acfe9ac8bae445512cbbf5024738a907c4", "filename": "gcc/ada/libgnat/a-witeio.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-witeio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-witeio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-witeio.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -55,7 +55,7 @@ package body Ada.Wide_Text_IO is\n \n    use type System.CRTL.size_t;\n \n-   WC_Encoding : Character;\n+   WC_Encoding : constant Character;\n    pragma Import (C, WC_Encoding, \"__gl_wc_encoding\");\n    --  Default wide character encoding\n "}, {"sha": "b72a1d45b9866a4225d997d2d3e4de33f1b48448", "filename": "gcc/ada/libgnat/a-ztexio.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-ztexio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fa-ztexio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztexio.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -55,7 +55,7 @@ package body Ada.Wide_Wide_Text_IO is\n \n    use type System.CRTL.size_t;\n \n-   WC_Encoding : Character;\n+   WC_Encoding : constant Character;\n    pragma Import (C, WC_Encoding, \"__gl_wc_encoding\");\n    --  Default wide character encoding\n "}, {"sha": "4bf39cdb1c91aa1dea710116c9e5cc74f8d257fc", "filename": "gcc/ada/libgnat/g-binenv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fg-binenv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fg-binenv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-binenv.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -40,7 +40,7 @@ package body GNAT.Bind_Environment is\n    function Get (Key : String) return String is\n       use type System.Address;\n \n-      Bind_Env_Addr : System.Address;\n+      Bind_Env_Addr : constant System.Address;\n       pragma Import (C, Bind_Env_Addr, \"__gl_bind_env_addr\");\n       --  Variable provided by init.c/s-init.ads, and initialized by\n       --  the binder generated file."}, {"sha": "09a65eed3cf29de68e71ae1c11cb01a83636141c", "filename": "gcc/ada/libgnat/s-parame.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-parame.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-parame.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -55,7 +55,7 @@ package body System.Parameters is\n    ------------------------\n \n    function Default_Stack_Size return Size_Type is\n-      Default_Stack_Size : Integer;\n+      Default_Stack_Size : constant Integer;\n       pragma Import (C, Default_Stack_Size, \"__gl_default_stack_size\");\n    begin\n       if Default_Stack_Size = -1 then"}, {"sha": "45ee0a9114d1a5b489eba2414bd5e8e30090dca1", "filename": "gcc/ada/libgnat/s-parame__vxworks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -53,7 +53,7 @@ package body System.Parameters is\n    ------------------------\n \n    function Default_Stack_Size return Size_Type is\n-      Default_Stack_Size : Integer;\n+      Default_Stack_Size : constant Integer;\n       pragma Import (C, Default_Stack_Size, \"__gl_default_stack_size\");\n    begin\n       if Default_Stack_Size = -1 then"}, {"sha": "d7f572e3ec27416a84de5aac01d658909f753c5f", "filename": "gcc/ada/libgnat/s-stratt.adb", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-stratt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-stratt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stratt.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -36,13 +36,13 @@ with System.Stream_Attributes.XDR;\n \n package body System.Stream_Attributes is\n \n-   XDR_Flag : Integer;\n-   pragma Import (C, XDR_Flag, \"__gl_xdr_stream\");\n+   XDR_Stream : constant Integer;\n+   pragma Import (C, XDR_Stream, \"__gl_xdr_stream\");\n    --  This imported value is used to determine whether the build had the\n    --  binder switch \"-xdr\" present which enables XDR streaming and sets this\n    --  flag to 1.\n \n-   function XDR_Support return Boolean;\n+   function XDR_Support return Boolean is (XDR_Stream = 1);\n    pragma Inline (XDR_Support);\n    --  Return True if XDR streaming should be used. Note that 128-bit integers\n    --  are not supported by the XDR protocol and will raise Device_Error.\n@@ -141,15 +141,6 @@ package body System.Stream_Attributes is\n    function To_WC   is new UC (S_WC,   Wide_Character);\n    function To_WWC  is new UC (S_WWC,  Wide_Wide_Character);\n \n-   -----------------\n-   -- XDR_Support --\n-   -----------------\n-\n-   function XDR_Support return Boolean is\n-   begin\n-      return XDR_Flag = 1;\n-   end XDR_Support;\n-\n    -----------------\n    -- Block_IO_OK --\n    -----------------"}, {"sha": "fb26d77f83a6b6f0bf59c70a15e48c2887516a3b", "filename": "gcc/ada/libgnat/s-trasym__dwarf.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075bdcf80721fbc35c6cad603097d61767d0af3/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb?ref=4075bdcf80721fbc35c6cad603097d61767d0af3", "patch": "@@ -691,7 +691,7 @@ package body System.Traceback.Symbolic is\n       return Symbolic_Traceback (E, Suppress_Hex => True);\n    end Symbolic_Traceback_No_Hex;\n \n-   Exception_Tracebacks_Symbolic : Integer;\n+   Exception_Tracebacks_Symbolic : constant Integer;\n    pragma Import\n      (C,\n       Exception_Tracebacks_Symbolic,"}]}