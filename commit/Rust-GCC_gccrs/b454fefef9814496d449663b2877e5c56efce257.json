{"sha": "b454fefef9814496d449663b2877e5c56efce257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1NGZlZmVmOTgxNDQ5NmQ0NDk2NjNiMjg3N2U1YzU2ZWZjZTI1Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-30T14:34:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-30T14:34:19Z"}, "message": "(stack adjust peepholes): Use lea instead of add.w when adding 16 bit\nconstants on all but TARGET_68040.\n\nFrom-SVN: r13569", "tree": {"sha": "a76383201f6f717350f4604dc1e19e5ca972d538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a76383201f6f717350f4604dc1e19e5ca972d538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b454fefef9814496d449663b2877e5c56efce257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b454fefef9814496d449663b2877e5c56efce257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b454fefef9814496d449663b2877e5c56efce257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b454fefef9814496d449663b2877e5c56efce257/comments", "author": null, "committer": null, "parents": [{"sha": "073b0524fc3c8cd7e0ec329bbcd9bd5960d96cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073b0524fc3c8cd7e0ec329bbcd9bd5960d96cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073b0524fc3c8cd7e0ec329bbcd9bd5960d96cad"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "c242f42e0f171922a95ca069618d81beea44db95", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b454fefef9814496d449663b2877e5c56efce257/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b454fefef9814496d449663b2877e5c56efce257/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=b454fefef9814496d449663b2877e5c56efce257", "patch": "@@ -6450,17 +6450,25 @@\n \t  else\n \t    output_asm_insn (\\\"addq%.l %1,%0\\\", xoperands);\n \t}\n-      else if (INTVAL (xoperands[1]) <= 16 \n-\t       && TARGET_68020 && !TARGET_68040 && !TARGET_68060)\n+      else if (TARGET_CPU32 && INTVAL (xoperands[1]) <= 16) \n \t{\n \t  xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n \t\t\t\t  INTVAL (xoperands[1]) - 8);\n \t  output_asm_insn (\\\"addq%.w %#8,%0\\;addq%.w %1,%0\\\", xoperands);\n \t}\n       else\n #endif\n-        if (INTVAL (xoperands[1]) <= 0x7FFF && !TARGET_5200)\n-          output_asm_insn (\\\"add%.w %1,%0\\\", xoperands);\n+        if (INTVAL (xoperands[1]) <= 0x7FFF)\n+        {\n+\t  if (TARGET_68040)\n+\t    output_asm_insn (\\\"add%.w %1,%0\\\", xoperands);\n+\t  else\n+#ifdef MOTOROLA  \n+\t    output_asm_insn (\\\"lea (%c1,%0),%0\\\", xoperands);\n+#else\n+\t    output_asm_insn (\\\"lea %0@(%c1),%0\\\", xoperands);\n+#endif\n+        }\n       else\n         output_asm_insn (\\\"add%.l %1,%0\\\", xoperands);\n     }\n@@ -6493,17 +6501,25 @@\n \t  else\n \t    output_asm_insn (\\\"addq%.l %1,%0\\\", xoperands);\n \t}\n-      else if (INTVAL (xoperands[1]) <= 16 \n-\t       && TARGET_68020 && !TARGET_68040 && !TARGET_68060)\n+      else if (TARGET_CPU32 && INTVAL (xoperands[1]) <= 16)\n \t{\n \t  xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n \t\t\t\t  INTVAL (xoperands[1]) - 8);\n \t  output_asm_insn (\\\"addq%.w %#8,%0\\;addq%.w %1,%0\\\", xoperands);\n \t}\n       else\n #endif\n-        if (INTVAL (xoperands[1]) <= 0x7FFF && !TARGET_5200)\n-          output_asm_insn (\\\"add%.w %1,%0\\\", xoperands);\n+        if (INTVAL (xoperands[1]) <= 0x7FFF)\n+        {\n+\t  if (TARGET_68040)\n+\t    output_asm_insn (\\\"add%.w %1,%0\\\", xoperands);\n+\t  else\n+#ifdef MOTOROLA  \n+\t    output_asm_insn (\\\"lea (%c1,%0),%0\\\", xoperands);\n+#else\n+\t    output_asm_insn (\\\"lea %0@(%c1),%0\\\", xoperands);\n+#endif\n+        }\n       else\n         output_asm_insn (\\\"add%.l %1,%0\\\", xoperands);\n     }"}]}