{"sha": "ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyZTVlYzJkNGRiY2Q4NjViZDYyZmQ4ODdiODllN2E0MmY2NjIyMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-04-06T11:47:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-04-06T11:47:18Z"}, "message": "re PR tree-optimization/85244 (Bad optimisation with flexible array member (may be related to -ftree-dominator-opts))\n\n2018-04-06  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/85244\n\t* tree-dfa.c (get_ref_base_and_extent): Reset seen_variable_array_ref\n\tafter seeing a component reference with an adjacent field.  Treat\n\trefs to arrays at struct end of external decls similar to\n\trefs to unconstrained commons.\n\n\t* gcc.dg/torture/pr85244-1.c: New testcase.\n\t* gcc.dg/torture/pr85244-2.c: Likewise.\n\nFrom-SVN: r259168", "tree": {"sha": "6b9a5f6c6431c26e9dbdbeff5e32be6928d26f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b9a5f6c6431c26e9dbdbeff5e32be6928d26f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a98025d8fdd5274cd6e5573424504c60427c56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a98025d8fdd5274cd6e5573424504c60427c56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a98025d8fdd5274cd6e5573424504c60427c56a"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "f95365232dcad423e38c5660009826e48fb4813f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "patch": "@@ -1,3 +1,11 @@\n+2018-04-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/85244\n+\t* tree-dfa.c (get_ref_base_and_extent): Reset seen_variable_array_ref\n+\tafter seeing a component reference with an adjacent field.  Treat\n+\trefs to arrays at struct end of external decls similar to\n+\trefs to unconstrained commons.\n+\n 2018-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/85213"}, {"sha": "e52b67c589c46109b422d53028e317fb5cb0103f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "patch": "@@ -1,3 +1,9 @@\n+2018-04-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/85244\n+\t* gcc.dg/torture/pr85244-1.c: New testcase.\n+\t* gcc.dg/torture/pr85244-2.c: Likewise.\n+\n 2018-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/85213"}, {"sha": "44716aa9e04d2487767c35b9c9bb8043da85a345", "filename": "gcc/testsuite/gcc.dg/torture/pr85244-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85244-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85244-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85244-1.c?ref=ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-additional-sources \"pr85244-2.c\" } */\n+\n+struct s {\n+ long a;\n+ int b;\n+ int tab[];\n+};\n+\n+extern const struct s val;\n+extern int idx;\n+extern void abort (void);\n+\n+int main()\n+{\n+  if (val.tab[0] != 42 || val.tab[1] != 1337 || val.tab[idx] != 1337)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d57cb71242024efcd14e92e075f7b4a515856f21", "filename": "gcc/testsuite/gcc.dg/torture/pr85244-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85244-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85244-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85244-2.c?ref=ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "patch": "@@ -0,0 +1,8 @@\n+struct s {\n+    long a;\n+    int b;\n+    int tab[];\n+};\n+\n+int idx = 1;\n+const struct s val = { 0, 0, { 42, 1337 } };"}, {"sha": "a121b880bb045affa18a7c1101c9de2272f6bb14", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "patch": "@@ -438,7 +438,7 @@ get_ref_base_and_extent (tree exp, poly_int64_pod *poffset,\n \t\t   referenced the last field of a struct or a union member\n \t\t   then we have to adjust maxsize by the padding at the end\n \t\t   of our field.  */\n-\t\tif (seen_variable_array_ref && known_size_p (maxsize))\n+\t\tif (seen_variable_array_ref)\n \t\t  {\n \t\t    tree stype = TREE_TYPE (TREE_OPERAND (exp, 0));\n \t\t    tree next = DECL_CHAIN (field);\n@@ -454,7 +454,7 @@ get_ref_base_and_extent (tree exp, poly_int64_pod *poffset,\n \t\t\t    || ssize == NULL\n \t\t\t    || !poly_int_tree_p (ssize))\n \t\t\t  maxsize = -1;\n-\t\t\telse\n+\t\t\telse if (known_size_p (maxsize))\n \t\t\t  {\n \t\t\t    poly_offset_int tem\n \t\t\t      = (wi::to_poly_offset (ssize)\n@@ -464,6 +464,11 @@ get_ref_base_and_extent (tree exp, poly_int64_pod *poffset,\n \t\t\t    maxsize += tem;\n \t\t\t  }\n \t\t      }\n+\t\t    /* An component ref with an adjacent field up in the\n+\t\t       structure hierarchy constrains the size of any variable\n+\t\t       array ref lower in the access hierarchy.  */\n+\t\t    else\n+\t\t      seen_variable_array_ref = false;\n \t\t  }\n \t      }\n \t    else\n@@ -622,7 +627,9 @@ get_ref_base_and_extent (tree exp, poly_int64_pod *poffset,\n \n   if (DECL_P (exp))\n     {\n-      if (flag_unconstrained_commons && VAR_P (exp) && DECL_COMMON (exp))\n+      if (VAR_P (exp)\n+\t  && ((flag_unconstrained_commons && DECL_COMMON (exp))\n+\t      || (DECL_EXTERNAL (exp) && seen_variable_array_ref)))\n \t{\n \t  tree sz_tree = TYPE_SIZE (TREE_TYPE (exp));\n \t  /* If size is unknown, or we have read to the end, assume there"}]}