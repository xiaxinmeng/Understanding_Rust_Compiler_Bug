{"sha": "d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkZDUxZGM0NmRkM2VkZjBmMjE3YzRmYzFmMDQ5ODAwMzEyZDhmNw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2009-06-18T12:26:37Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2009-06-18T12:26:37Z"}, "message": "sfp-machine.h (_FP_NANFRAC_H, [...]): Define.\n\n2009-06-18  Paul Brook  <paul@codesourcery.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/arm/sfp-machine.h (_FP_NANFRAC_H, _FP_NANSIGN_H): Define.\n\t(__extendhfsf2, __truncsfhf2): Define.\n\t* config/arm/fp16.c: New file.\n\t* config/arm/t-bpabi (LIB2FUNCS_STATIC_EXTRA): Add fp16.c.\n\t* config/arm/t-symbian (LIB2FUNCS_STATIC_EXTRA):  Add fp16.c.\n\n\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r148655", "tree": {"sha": "ee9dd2a02d539711d5ab758adab04d81a455f285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9dd2a02d539711d5ab758adab04d81a455f285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/comments", "author": null, "committer": null, "parents": [{"sha": "0fd8c3ad1ef97e592cb302d764b9e69f85cb7d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd8c3ad1ef97e592cb302d764b9e69f85cb7d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd8c3ad1ef97e592cb302d764b9e69f85cb7d6f"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "27a743299ef40707659006ba6562117d9946f689", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "patch": "@@ -1,3 +1,12 @@\n+2009-06-18  Paul Brook  <paul@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/arm/sfp-machine.h (_FP_NANFRAC_H, _FP_NANSIGN_H): Define.\n+\t(__extendhfsf2, __truncsfhf2): Define.\n+\t* config/arm/fp16.c: New file.\n+\t* config/arm/t-bpabi (LIB2FUNCS_STATIC_EXTRA): Add fp16.c.\n+\t* config/arm/t-symbian (LIB2FUNCS_STATIC_EXTRA):  Add fp16.c.\n+\n 2009-06-18  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi (Half-Precision): New section."}, {"sha": "936caeb78d05947b12b5b48e26e0dd39a5e2f18b", "filename": "gcc/config/arm/fp16.c", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Ffp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Ffp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffp16.c?ref=d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "patch": "@@ -0,0 +1,145 @@\n+/* Half-float conversion routines.\n+\n+   Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+static inline unsigned short\n+__gnu_f2h_internal(unsigned int a, int ieee)\n+{\n+  unsigned short sign = (a >> 16) & 0x8000;\n+  int aexp = (a >> 23) & 0xff;\n+  unsigned int mantissa = a & 0x007fffff;\n+  unsigned int mask;\n+  unsigned int increment;\n+\n+  if (aexp == 0xff)\n+    {\n+      if (!ieee)\n+\treturn sign;\n+      return sign | 0x7e00 | (mantissa >> 13);\n+    }\n+  \n+  if (aexp == 0 && mantissa == 0)\n+    return sign;\n+\n+  aexp -= 127;\n+\n+  /* Decimal point between bits 22 and 23.  */\n+  mantissa |= 0x00800000;\n+  if (aexp < -14)\n+    {\n+      mask = 0x007fffff;\n+      if (aexp < -25)\n+\taexp = -26;\n+      else if (aexp != -25)\n+\tmask >>= 24 + aexp;\n+    }\n+  else\n+    mask = 0x00001fff;\n+\n+  /* Round.  */\n+  if (mantissa & mask)\n+    {\n+      increment = (mask + 1) >> 1;\n+      if ((mantissa & mask) == increment)\n+\tincrement = mantissa & (increment << 1);\n+      mantissa += increment;\n+      if (mantissa >= 0x01000000)\n+       \t{\n+\t  mantissa >>= 1;\n+\t  aexp++;\n+\t}\n+    }\n+\n+  if (ieee)\n+    {\n+      if (aexp > 15)\n+\treturn sign | 0x7c00;\n+    }\n+  else\n+    {\n+      if (aexp > 16)\n+\treturn sign | 0x7fff;\n+    }\n+\n+  if (aexp < -24)\n+    return sign;\n+\n+  if (aexp < -14)\n+    {\n+      mantissa >>= -14 - aexp;\n+      aexp = -14;\n+    }\n+\n+  /* We leave the leading 1 in the mantissa, and subtract one\n+     from the exponent bias to compensate.  */\n+  return sign | (((aexp + 14) << 10) + (mantissa >> 13));\n+}\n+\n+unsigned int\n+__gnu_h2f_internal(unsigned short a, int ieee)\n+{\n+  unsigned int sign = (unsigned int)(a & 0x8000) << 16;\n+  int aexp = (a >> 10) & 0x1f;\n+  unsigned int mantissa = a & 0x3ff;\n+\n+  if (aexp == 0x1f && ieee)\n+    return sign | 0x7f800000 | (mantissa << 13);\n+\n+  if (aexp == 0)\n+    {\n+      int shift;\n+\n+      if (mantissa == 0)\n+\treturn sign;\n+\n+      shift = __builtin_clz(mantissa) - 21;\n+      mantissa <<= shift;\n+      aexp = -shift;\n+    }\n+\n+  return sign | (((aexp + 0x70) << 23) + (mantissa << 13));\n+}\n+\n+unsigned short\n+__gnu_f2h_ieee(unsigned int a)\n+{\n+  return __gnu_f2h_internal(a, 1);\n+}\n+\n+unsigned int\n+__gnu_h2f_ieee(unsigned short a)\n+{\n+  return __gnu_h2f_internal(a, 1);\n+}\n+\n+unsigned short\n+__gnu_f2h_alternative(unsigned int x)\n+{\n+  return __gnu_f2h_internal(x, 0);\n+}\n+\n+unsigned int\n+__gnu_h2f_alternative(unsigned short a)\n+{\n+  return __gnu_h2f_internal(a, 0);\n+}"}, {"sha": "a89d05a00ba39f6f4b7759eb79e0510af30931e6", "filename": "gcc/config/arm/sfp-machine.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsfp-machine.h?ref=d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "patch": "@@ -19,9 +19,11 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n #define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n \n+#define _FP_NANFRAC_H\t\t((_FP_QNANBIT_H << 1) - 1)\n #define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n #define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1), -1\n #define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1\n+#define _FP_NANSIGN_H\t\t0\n #define _FP_NANSIGN_S\t\t0\n #define _FP_NANSIGN_D\t\t0\n #define _FP_NANSIGN_Q\t\t0\n@@ -97,5 +99,7 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define __fixdfdi\t__aeabi_d2lz\n #define __fixunsdfdi\t__aeabi_d2ulz\n #define __floatdidf\t__aeabi_l2d\n+#define __extendhfsf2\t__gnu_h2f_ieee\n+#define __truncsfhf2\t__gnu_f2h_ieee\n \n #endif /* __ARM_EABI__ */"}, {"sha": "61da9ec7b4ce9fea92860c26c09b7a87915affe1", "filename": "gcc/config/arm/t-bpabi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Ft-bpabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Ft-bpabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-bpabi?ref=d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "patch": "@@ -23,6 +23,8 @@ LIB1ASMFUNCS += _aeabi_lcmp _aeabi_ulcmp _aeabi_ldivmod _aeabi_uldivmod\n LIB2FUNCS_EXTRA = $(srcdir)/config/arm/bpabi.c \\\n \t\t  $(srcdir)/config/arm/unaligned-funcs.c\n \n+LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/arm/fp16.c\n+\n UNWIND_H = $(srcdir)/config/arm/unwind-arm.h\n LIB2ADDEH = $(srcdir)/config/arm/unwind-arm.c \\\n   $(srcdir)/config/arm/libunwind.S \\"}, {"sha": "72614b6c134785b421f38757059f84df6b6aa610", "filename": "gcc/config/arm/t-symbian", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Ft-symbian", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7/gcc%2Fconfig%2Farm%2Ft-symbian", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-symbian?ref=d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "patch": "@@ -35,6 +35,9 @@ UNWIND_H = $(srcdir)/config/arm/unwind-arm.h\n LIB2ADDEH = $(srcdir)/unwind-c.c $(srcdir)/config/arm/pr-support.c\n LIB2ADDEHDEP = $(UNWIND_H)\n \n+# Include half-float helpers.\n+LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/arm/fp16.c\n+\n # Create a multilib for processors with VFP floating-point, and a\n # multilib for those without -- using the soft-float ABI in both\n # cases.  Symbian OS object should be compiled with interworking"}]}