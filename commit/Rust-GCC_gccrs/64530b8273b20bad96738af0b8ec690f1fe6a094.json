{"sha": "64530b8273b20bad96738af0b8ec690f1fe6a094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1MzBiODI3M2IyMGJhZDk2NzM4YWYwYjhlYzY5MGYxZmU2YTA5NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2000-08-10T23:21:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-08-10T23:21:52Z"}, "message": "h8300.c: Fix comment typos.\n\n        * h8300.c: Fix comment typos.\n        (dosize): Declare the variable amount as unsigned.\n        (get_shift_alg): Fix a comparison between signed and unsigned.\n        (emit_a_shift): Likewise.\n        (h8300_adjust_insn_length): Simplify the code.\n\nFrom-SVN: r35609", "tree": {"sha": "5c39a5815bd152870d624c8175b95f4b10da13a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c39a5815bd152870d624c8175b95f4b10da13a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64530b8273b20bad96738af0b8ec690f1fe6a094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64530b8273b20bad96738af0b8ec690f1fe6a094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64530b8273b20bad96738af0b8ec690f1fe6a094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64530b8273b20bad96738af0b8ec690f1fe6a094/comments", "author": null, "committer": null, "parents": [{"sha": "6645c3fac816743d17d08fc47b9fbfa25d8d4a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6645c3fac816743d17d08fc47b9fbfa25d8d4a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6645c3fac816743d17d08fc47b9fbfa25d8d4a0f"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "a8f8d502bce51705f26b06c56e2cf862063a5d48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64530b8273b20bad96738af0b8ec690f1fe6a094/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64530b8273b20bad96738af0b8ec690f1fe6a094/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64530b8273b20bad96738af0b8ec690f1fe6a094", "patch": "@@ -1,5 +1,11 @@\n 2000-08-10  Kazu Hirata  <kazu@hxi.com>\n \n+\t* h8300.c: Fix comment typos.\n+\t(dosize): Declare the variable amount as unsigned.\n+\t(get_shift_alg): Fix a comparison between signed and unsigned.\n+\t(emit_a_shift): Likewise.\n+\t(h8300_adjust_insn_length): Simplify the code.\n+\n \t* c-decl.c: Fix formatting.\n \n 2000-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>"}, {"sha": "e6e4bb7f9bcf4905f334485c2647612a3e95dc0d", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64530b8273b20bad96738af0b8ec690f1fe6a094/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64530b8273b20bad96738af0b8ec690f1fe6a094/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=64530b8273b20bad96738af0b8ec690f1fe6a094", "patch": "@@ -160,7 +160,7 @@ dosize (file, op, size)\n       || (TARGET_H8300 && current_function_needs_context\n \t  && strcmp (op, \"sub\")))\n     {\n-      HOST_WIDE_INT amount;\n+      unsigned HOST_WIDE_INT amount;\n \n       /* Try different amounts in descending order.  */\n       for (amount = (TARGET_H8300H || TARGET_H8300S) ? 4 : 2;\n@@ -1371,7 +1371,7 @@ print_operand_address (file, addr)\n \n     case CONST_INT:\n       {\n-\t/* Since the h8/300 only has 16 bit pointers, negative values are also\n+\t/* Since the H8/300 only has 16 bit pointers, negative values are also\n \t   those >= 32768.  This happens for example with pointer minus a\n \t   constant.  We don't want to turn (char *p - 2) into\n \t   (char *p + 65534) because loop unrolling can build upon this\n@@ -1725,8 +1725,8 @@ nshift_operator (x, mode)\n }\n \n /* Called from the .md file to emit code to do shifts.\n-   Returns a boolean indicating success\n-   (currently this is always TRUE).  */\n+   Return a boolean indicating success.\n+   (Currently this is always TRUE).  */\n \n int\n expand_a_shift (mode, code, operands)\n@@ -1973,7 +1973,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n   /* We don't handle negative shifts or shifts greater than the word size,\n      they should have been handled already.  */\n \n-  if (count < 0 || count > GET_MODE_BITSIZE (mode))\n+  if (count < 0 || (unsigned int) count > GET_MODE_BITSIZE (mode))\n     abort ();\n \n   switch (mode)\n@@ -2537,7 +2537,7 @@ emit_a_shift (insn, operands)\n       /* If the count is too big, truncate it.\n          ANSI says shifts of GET_MODE_BITSIZE are undefined - we choose to\n \t do the intuitive thing.  */\n-      else if (n > GET_MODE_BITSIZE (mode))\n+      else if ((unsigned int) n > GET_MODE_BITSIZE (mode))\n \tn = GET_MODE_BITSIZE (mode);\n \n       alg = get_shift_alg (cpu_type, shift_type, mode, n, &assembler,\n@@ -2990,15 +2990,15 @@ h8300_adjust_insn_length (insn, length)\n       && GET_MODE (SET_DEST (pat)) == SImode\n       && INTVAL (SET_SRC (pat)) != 0)\n     {\n+      int val = INTVAL (SET_SRC (pat));\n+\n       if (TARGET_H8300\n-\t  && ((INTVAL (SET_SRC (pat)) & 0xffff) == 0\n-\t      || ((INTVAL (SET_SRC (pat)) >> 16) & 0xffff) == 0))\n+\t  && ((val & 0xffff) == 0\n+\t      || ((val >> 16) & 0xffff) == 0))\n \treturn -2;\n \n       if (TARGET_H8300H || TARGET_H8300S)\n \t{\n-\t  int val = INTVAL (SET_SRC (pat));\n-\n \t  if (val == (val & 0xff)\n \t      || val == (val & 0xff00))\n \t    return -6;"}]}