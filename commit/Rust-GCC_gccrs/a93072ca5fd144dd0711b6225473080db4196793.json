{"sha": "a93072ca5fd144dd0711b6225473080db4196793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzMDcyY2E1ZmQxNDRkZDA3MTFiNjIyNTQ3MzA4MGRiNDE5Njc5Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-12T13:29:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-12T13:29:18Z"}, "message": "Use hard_regno_nregs instead of HARD_REGNO_NREGS\n\nThis patch converts some places that use HARD_REGNO_NREGS to use\nhard_regno_nregs, in places where the initialisation has obviously\nalready taken place.\n\n2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/arm/arm.h (THUMB_SECONDARY_INPUT_RELOAD_CLASS): Use\n\thard_regno_nregs instead of HARD_REGNO_NREGS.\n\t(THUMB_SECONDARY_OUTPUT_RELOAD_CLASS): Likewise.\n\t* config/c6x/c6x.c (c6x_expand_prologue): Likewise.\n\t(c6x_expand_epilogue): Likewise.\n\t* config/frv/frv.c (frv_alloc_temp_reg): Likewise.\n\t(frv_read_iacc_argument): Likewise.\n\t* config/sh/sh.c: Include regs.h.\n\t(sh_print_operand): Use hard_regno_nregs instead of HARD_REGNO_NREGS.\n\t(regs_used): Likewise.\n\t(output_stack_adjust): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_copy_incoming_a7): Likewise.\n\t* expmed.c: Include regs.h.\n\t(store_bit_field_1): Use hard_regno_nregs instead of HARD_REGNO_NREGS.\n\t* ree.c: Include regs.h.\n\t(combine_reaching_defs): Use hard_regno_nregs instead of\n\tHARD_REGNO_NREGS.\n\t(add_removable_extension): Likewise.\n\nFrom-SVN: r252015", "tree": {"sha": "7f7fb05fc63d20d6d575e97ac2981b83cbf9f9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7fb05fc63d20d6d575e97ac2981b83cbf9f9e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a93072ca5fd144dd0711b6225473080db4196793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93072ca5fd144dd0711b6225473080db4196793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93072ca5fd144dd0711b6225473080db4196793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93072ca5fd144dd0711b6225473080db4196793/comments", "author": null, "committer": null, "parents": [{"sha": "ad47462665eb1f923f3513cf52b42af22a76eb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad47462665eb1f923f3513cf52b42af22a76eb14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad47462665eb1f923f3513cf52b42af22a76eb14"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "0c021aeb48b1dd96d43a117dad56721f6dddeff2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -1,3 +1,24 @@\n+2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/arm/arm.h (THUMB_SECONDARY_INPUT_RELOAD_CLASS): Use\n+\thard_regno_nregs instead of HARD_REGNO_NREGS.\n+\t(THUMB_SECONDARY_OUTPUT_RELOAD_CLASS): Likewise.\n+\t* config/c6x/c6x.c (c6x_expand_prologue): Likewise.\n+\t(c6x_expand_epilogue): Likewise.\n+\t* config/frv/frv.c (frv_alloc_temp_reg): Likewise.\n+\t(frv_read_iacc_argument): Likewise.\n+\t* config/sh/sh.c: Include regs.h.\n+\t(sh_print_operand): Use hard_regno_nregs instead of HARD_REGNO_NREGS.\n+\t(regs_used): Likewise.\n+\t(output_stack_adjust): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_copy_incoming_a7): Likewise.\n+\t* expmed.c: Include regs.h.\n+\t(store_bit_field_1): Use hard_regno_nregs instead of HARD_REGNO_NREGS.\n+\t* ree.c: Include regs.h.\n+\t(combine_reaching_defs): Use hard_regno_nregs instead of\n+\tHARD_REGNO_NREGS.\n+\t(add_removable_extension): Likewise.\n+\n 2017-09-12  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* regs.h (hard_regno_nregs): Turn into a function."}, {"sha": "8a40b43f61e044bb02d64f3012e727c2f2417694", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -1211,15 +1211,15 @@ enum reg_class\n   (lra_in_progress ? NO_REGS\t\t\t\t\t\t\\\n    : ((CLASS) != LO_REGS && (CLASS) != BASE_REGS\t\t\t\\\n       ? ((true_regnum (X) == -1 ? LO_REGS\t\t\t\t\\\n-         : (true_regnum (X) + HARD_REGNO_NREGS (0, MODE) > 8) ? LO_REGS\t\\\n+         : (true_regnum (X) + hard_regno_nregs (0, MODE) > 8) ? LO_REGS\t\\\n          : NO_REGS)) \t\t\t\t\t\t\t\\\n       : NO_REGS))\n \n #define THUMB_SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, X)\t\t\\\n   (lra_in_progress ? NO_REGS\t\t\t\t\t\t\\\n    : (CLASS) != LO_REGS && (CLASS) != BASE_REGS\t\t\t\t\\\n       ? ((true_regnum (X) == -1 ? LO_REGS\t\t\t\t\\\n-         : (true_regnum (X) + HARD_REGNO_NREGS (0, MODE) > 8) ? LO_REGS\t\\\n+         : (true_regnum (X) + hard_regno_nregs (0, MODE) > 8) ? LO_REGS\t\\\n          : NO_REGS)) \t\t\t\t\t\t\t\\\n       : NO_REGS)\n "}, {"sha": "cbc44ecf0ffb13c5314f65fabfd875fa5f984153", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -2834,7 +2834,7 @@ c6x_expand_prologue (void)\n \t\t\t\t reg);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \n-\t  nsaved += HARD_REGNO_NREGS (regno, save_mode);\n+\t  nsaved += hard_regno_nregs (regno, save_mode);\n \t}\n     }\n   gcc_assert (nsaved == frame.nregs);\n@@ -2922,7 +2922,7 @@ c6x_expand_epilogue (bool sibcall)\n \t  emit_move_insn (reg, adjust_address (mem, save_mode, off));\n \n \t  off += GET_MODE_SIZE (save_mode);\n-\t  nsaved += HARD_REGNO_NREGS (regno, save_mode);\n+\t  nsaved += hard_regno_nregs (regno, save_mode);\n \t}\n     }\n   if (!frame_pointer_needed)"}, {"sha": "83da2f15d6d634108ab53c9c4a60a7514fa035cb", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -1509,7 +1509,7 @@ frv_alloc_temp_reg (\n \t}\n     }\n \n-  nr = HARD_REGNO_NREGS (regno, mode);\n+  nr = hard_regno_nregs (regno, mode);\n   info->next_reg[ (int)rclass ] = regno + nr;\n \n   if (mark_as_used)\n@@ -8650,7 +8650,7 @@ frv_read_iacc_argument (machine_mode mode, tree call,\n      avoid creating lots of unnecessary call_insn rtl when IACCs aren't\n      being used.  */\n   regno = INTVAL (op) + IACC_FIRST;\n-  for (i = 0; i < HARD_REGNO_NREGS (regno, mode); i++)\n+  for (i = 0; i < hard_regno_nregs (regno, mode); i++)\n     global_regs[regno + i] = 1;\n \n   return gen_rtx_REG (mode, regno);"}, {"sha": "01836893b77aad8ee4c281620476ae80d120a5a0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"regs.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1392,8 +1393,8 @@ sh_print_operand (FILE *stream, rtx x, int code)\n \t    /* Floating point register pairs are always big endian;\n \t       general purpose registers are 64 bit wide.  */\n \t    regno = REGNO (inner);\n-\t    regno = (HARD_REGNO_NREGS (regno, inner_mode)\n-\t\t     - HARD_REGNO_NREGS (regno, mode))\n+\t    regno = (hard_regno_nregs (regno, inner_mode)\n+\t\t     - hard_regno_nregs (regno, mode))\n \t\t     + offset;\n \t    x = inner;\n \t    goto reg;\n@@ -5371,7 +5372,7 @@ regs_used (rtx x, int is_dest)\n     {\n     case REG:\n       if (REGNO (x) < 16)\n-\treturn (((1 << HARD_REGNO_NREGS (0, GET_MODE (x))) - 1)\n+\treturn (((1 << hard_regno_nregs (0, GET_MODE (x))) - 1)\n \t\t<< (REGNO (x) + is_dest));\n       return 0;\n     case SUBREG:\n@@ -5381,7 +5382,7 @@ regs_used (rtx x, int is_dest)\n \tif (!REG_P (y))\n \t  break;\n \tif (REGNO (y) < 16)\n-\t  return (((1 << HARD_REGNO_NREGS (0, GET_MODE (x))) - 1)\n+\t  return (((1 << hard_regno_nregs (0, GET_MODE (x))) - 1)\n \t\t  << (REGNO (y) +\n \t\t      subreg_regno_offset (REGNO (y),\n \t\t\t\t\t   GET_MODE (y),\n@@ -6687,7 +6688,7 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t\t      machine_mode mode;\n \t\t      mode = GET_MODE (crtl->return_rtx);\n \t\t      if (BASE_RETURN_VALUE_REG (mode) == FIRST_RET_REG)\n-\t\t\tnreg = HARD_REGNO_NREGS (FIRST_RET_REG, mode);\n+\t\t\tnreg = hard_regno_nregs (FIRST_RET_REG, mode);\n \t\t    }\n \t\t  for (i = 0; i < nreg; i++)\n \t\t    CLEAR_HARD_REG_BIT (temps, FIRST_RET_REG + i);"}, {"sha": "0a4c441a4e04062319b09f3b7d4c48e10c9eeedc", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -1155,11 +1155,11 @@ xtensa_copy_incoming_a7 (rtx opnd)\n     }\n   if (GET_CODE (reg) != REG\n       || REGNO (reg) > A7_REG\n-      || REGNO (reg) + HARD_REGNO_NREGS (A7_REG, mode) <= A7_REG)\n+      || REGNO (reg) + hard_regno_nregs (A7_REG, mode) <= A7_REG)\n     return opnd;\n \n   /* 1-word args will always be in a7; 2-word args in a6/a7.  */\n-  gcc_assert (REGNO (reg) + HARD_REGNO_NREGS (A7_REG, mode) - 1 == A7_REG);\n+  gcc_assert (REGNO (reg) + hard_regno_nregs (A7_REG, mode) - 1 == A7_REG);\n \n   cfun->machine->need_a7_copy = false;\n "}, {"sha": "f81163e15a56af4b06cb1ce6e644f60b4f9e35aa", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n+#include \"regs.h\"\n #include \"emit-rtl.h\"\n #include \"diagnostic-core.h\"\n #include \"fold-const.h\"\n@@ -952,7 +953,7 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       && GET_MODE_SIZE (op0_mode.require ()) > UNITS_PER_WORD\n       && (!REG_P (op0)\n \t  || !HARD_REGISTER_P (op0)\n-\t  || HARD_REGNO_NREGS (REGNO (op0), op0_mode.require ()) != 1))\n+\t  || hard_regno_nregs (REGNO (op0), op0_mode.require ()) != 1))\n     {\n       if (bitnum % BITS_PER_WORD + bitsize > BITS_PER_WORD)\n \t{"}, {"sha": "19225d5833b9ad2941322babc7db3319282d12db", "filename": "gcc/ree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93072ca5fd144dd0711b6225473080db4196793/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=a93072ca5fd144dd0711b6225473080db4196793", "patch": "@@ -226,6 +226,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"optabs.h\"\n+#include \"regs.h\"\n #include \"emit-rtl.h\"\n #include \"recog.h\"\n #include \"cfgrtl.h\"\n@@ -823,7 +824,7 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \treturn false;\n \n       /* Ensure the number of hard registers of the copy match.  */\n-      if (HARD_REGNO_NREGS (REGNO (src_reg), dst_mode) != REG_NREGS (src_reg))\n+      if (hard_regno_nregs (REGNO (src_reg), dst_mode) != REG_NREGS (src_reg))\n \treturn false;\n \n       /* There's only one reaching def.  */\n@@ -1135,7 +1136,7 @@ add_removable_extension (const_rtx expr, rtx_insn *insn,\n \n \t We allow this when the registers are different because the\n \t code in combine_reaching_defs will handle that case correctly.  */\n-      if (HARD_REGNO_NREGS (REGNO (dest), mode) != REG_NREGS (reg)\n+      if (hard_regno_nregs (REGNO (dest), mode) != REG_NREGS (reg)\n \t  && reg_overlap_mentioned_p (dest, reg))\n \treturn;\n "}]}