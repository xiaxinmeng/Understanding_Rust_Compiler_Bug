{"sha": "e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlZjU4YWZkNDY1NThmMWU4MmMyZDk2NWM5YmNkZWIxZWU0N2VkYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-10-24T21:52:51Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-10-24T21:52:51Z"}, "message": "builtin-math-2.c: Add checks for asin, acos, acosh and atanh.\n\n\t* gcc.dg/torture/builtin-math-2.c: Add checks for asin, acos,\n\tacosh and atanh.\n\t\n\t* gcc.dg/torture/builtin-math-3.c (TESTIT): Append 'F' and 'L'\n\tfloating point modifiers to arguments passed to float and long\n\tdouble functions respectively.  Update all callers to use floating\n\tpoint numbers, not integers.  Add tests for exp, exp2 and\n\texp10/pow10.\n\nFrom-SVN: r118012", "tree": {"sha": "f4735e3149ffc1de2d71037195fc0bae3d0dbc06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4735e3149ffc1de2d71037195fc0bae3d0dbc06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb/comments", "author": null, "committer": null, "parents": [{"sha": "b53fed56360bb38807b13ec7b3c83d34c6b0b81a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53fed56360bb38807b13ec7b3c83d34c6b0b81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53fed56360bb38807b13ec7b3c83d34c6b0b81a"}], "stats": {"total": 138, "additions": 109, "deletions": 29}, "files": [{"sha": "b69034778325712f9c510948e793e35979653f47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "patch": "@@ -1,5 +1,14 @@\n 2006-10-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* gcc.dg/torture/builtin-math-2.c: Add checks for asin, acos,\n+\tacosh and atanh.\n+\t\n+\t* gcc.dg/torture/builtin-math-3.c (TESTIT): Append 'F' and 'L'\n+\tfloating point modifiers to arguments passed to float and long\n+\tdouble functions respectively.  Update all callers to use floating\n+\tpoint numbers, not integers.  Add tests for exp, exp2 and\n+\texp10/pow10.\n+\n \t* gcc.dg/torture/builtin-math-3.c: New test.\n \n 2006-10-24  Erik Edelmann  <eedelman@gcc.gnu.org>"}, {"sha": "fff0e7a850695737c0c20e78f6aca957e7adf8e6", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-2.c", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c?ref=e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "patch": "@@ -1,7 +1,9 @@\n-/* Test things that should block GCC from optimizing compile-time\n+/* Copyright (C) 2006  Free Software Foundation.\n+\n+   Test things that should block GCC from optimizing compile-time\n    constants passed to a builtin transcendental function.\n \n-   Origin: Kaveh R. Ghazi 10/22/2006.  */\n+   Origin: Kaveh R. Ghazi,  October 22, 2006.  */\n \n /* { dg-do compile } */\n /* { dg-options \"-fdump-tree-original\" } */\n@@ -59,9 +61,50 @@ void bar()\n   foof (__builtin_exp2f (-1.5F));\n   foo (__builtin_exp2 (-1.5));\n   fool (__builtin_exp2l (-1.5L));\n+\n+  /* The asin arg must be [-1 ... 1] inclusive.  */\n+  foof (__builtin_asinf (-1.5F));\n+  foof (__builtin_asinf (1.5F));\n+  foo (__builtin_asin (-1.5));\n+  foo (__builtin_asin (1.5));\n+  fool (__builtin_asinl (-1.5L));\n+  fool (__builtin_asinl (1.5L));\n+\n+  /* The acos arg must be [-1 ... 1] inclusive.  */\n+  foof (__builtin_acosf (-1.5F));\n+  foof (__builtin_acosf (1.5F));\n+  foo (__builtin_acos (-1.5));\n+  foo (__builtin_acos (1.5));\n+  fool (__builtin_acosl (-1.5L));\n+  fool (__builtin_acosl (1.5L));\n+\n+  /* The acosh arg must be [1 ... Inf] inclusive.  */\n+  foof (__builtin_acoshf (0.5F));\n+  foo (__builtin_acosh (0.5));\n+  fool (__builtin_acoshl (0.5L));\n+\n+  /* The atanh arg must be [-1 ... 1] exclusive.  */\n+  foof (__builtin_atanhf (-1.0F));\n+  foof (__builtin_atanhf (1.0F));\n+  foo (__builtin_atanh (-1.0));\n+  foo (__builtin_atanh (1.0));\n+  fool (__builtin_atanhl (-1.0L));\n+  fool (__builtin_atanhl (1.0L));\n }\n \n /* { dg-final { scan-tree-dump-times \"exp2 \" 9 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"exp2f\" 9 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"exp2l\" 9 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"asin \" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"asinf\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"asinl\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"acos \" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"acosf\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"acosl\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"acosh \" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"acoshf\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"acoshl\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"atanh \" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"atanhf\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"atanhl\" 2 \"original\" } } */\n /* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "d50b227f07cb927812f052abeee99f07716bde2f", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-3.c", "status": "modified", "additions": 55, "deletions": 27, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-3.c?ref=e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "patch": "@@ -3,7 +3,7 @@\n    Verify that built-in math function constant folding of constant\n    arguments is correctly performed by the compiler.\n \n-   Origin: Kaveh R. Ghazi, October 23, 2006.  */\n+   Origin: Kaveh R. Ghazi,  October 23, 2006.  */\n \n /* { dg-do link } */\n \n@@ -12,11 +12,11 @@ extern void link_error(int);\n \n /* Test that FUNC(ARG) == (RES).  */\n #define TESTIT(FUNC,ARG,RES) do { \\\n-  if (__builtin_##FUNC##f(ARG) != RES) \\\n+  if (__builtin_##FUNC##f(ARG##F) != RES##F) \\\n     link_error(__LINE__); \\\n   if (__builtin_##FUNC(ARG) != RES) \\\n     link_error(__LINE__); \\\n-  if (__builtin_##FUNC##l(ARG) != RES) \\\n+  if (__builtin_##FUNC##l(ARG##L) != RES##L) \\\n     link_error(__LINE__); \\\n   } while (0);\n \n@@ -32,40 +32,68 @@ extern void link_error(int);\n \n int main (void)\n {\n-  TESTIT2 (asin, -1, -3.15/2, -3.14/2); /* asin(-1) == -pi/2 */\n-  TESTIT (asin, 0, 0); /* asin(0) == 0 */\n-  TESTIT2 (asin, 1, 3.14/2, 3.15/2); /* asin(1) == pi/2 */\n+  TESTIT2 (asin, -1.0, -3.15/2.0, -3.14/2.0); /* asin(-1) == -pi/2 */\n+  TESTIT (asin, 0.0, 0.0); /* asin(0) == 0 */\n+  TESTIT2 (asin, 1.0, 3.14/2.0, 3.15/2.0); /* asin(1) == pi/2 */\n \n-  TESTIT2 (acos, -1, 3.14, 3.15); /* acos(-1) == pi */\n-  TESTIT2 (acos, 0, 3.14/2, 3.15/2); /* acos(0) == pi/2 */\n-  TESTIT (acos, 1, 0); /* acos(1) == 0 */\n+  TESTIT2 (acos, -1.0, 3.14, 3.15); /* acos(-1) == pi */\n+  TESTIT2 (acos, 0.0, 3.14/2.0, 3.15/2.0); /* acos(0) == pi/2 */\n+  TESTIT (acos, 1.0, 0.0); /* acos(1) == 0 */\n \n-  TESTIT2 (atan, -1, -3.15/4, -3.14/4); /* atan(-1) == -pi/4 */\n-  TESTIT (atan, 0, 0); /* atan(0) == 0 */\n-  TESTIT2 (atan, 1, 3.14/4, 3.15/4); /* atan(1) == pi/4 */\n+  TESTIT2 (atan, -1.0, -3.15/4.0, -3.14/4.0); /* atan(-1) == -pi/4 */\n+  TESTIT (atan, 0.0, 0.0); /* atan(0) == 0 */\n+  TESTIT2 (atan, 1.0, 3.14/4.0, 3.15/4.0); /* atan(1) == pi/4 */\n \n-  TESTIT2 (asinh, -1, -0.89, -0.88); /* asinh(-1) == -0.881... */\n-  TESTIT (asinh, 0, 0); /* asinh(0) == 0 */\n-  TESTIT2 (asinh, 1, 0.88, 0.89); /* asinh(1) == 0.881... */\n+  TESTIT2 (asinh, -1.0, -0.89, -0.88); /* asinh(-1) == -0.881... */\n+  TESTIT (asinh, 0.0, 0.0); /* asinh(0) == 0 */\n+  TESTIT2 (asinh, 1.0, 0.88, 0.89); /* asinh(1) == 0.881... */\n \n-  TESTIT (acosh, 1, 0); /* acosh(1) == 0. */\n-  TESTIT2 (acosh, 2, 1.31, 1.32); /* acosh(2) == 1.316... */\n+  TESTIT (acosh, 1.0, 0.0); /* acosh(1) == 0. */\n+  TESTIT2 (acosh, 2.0, 1.31, 1.32); /* acosh(2) == 1.316... */\n \n   TESTIT2 (atanh, -0.5, -0.55, -0.54); /* atanh(-0.5) == -0.549... */\n-  TESTIT (atanh, 0, 0); /* atanh(0) == 0 */\n+  TESTIT (atanh, 0.0, 0.0); /* atanh(0) == 0 */\n   TESTIT2 (atanh, 0.5, 0.54, 0.55); /* atanh(0.5) == 0.549... */\n \n-  TESTIT2 (sinh, -1, -1.18, -1.17); /* sinh(-1) == -1.175... */\n-  TESTIT (sinh, 0, 0); /* sinh(0) == 0 */\n-  TESTIT2 (sinh, 1, 1.17, 1.18); /* sinh(1) == 1.175... */\n+  TESTIT2 (sin, -1.0, -0.85, -0.84); /* sin(-1) == -0.841... */\n+  TESTIT (sin, 0.0, 0.0); /* sin(0) == 0 */\n+  TESTIT2 (sin, 1.0, 0.84, 0.85); /* sin(1) == 0.841... */\n \n-  TESTIT2 (cosh, -1, 1.54, 1.55); /* cosh(-1) == 1.543... */\n-  TESTIT (cosh, 0, 1); /* cosh(0) == 1 */\n-  TESTIT2 (cosh, 1, 1.54, 1.55); /* cosh(1) == 1.543... */\n+  TESTIT2 (cos, -1.0, 0.54, 0.55); /* cos(-1) == 0.5403... */\n+  TESTIT (cos, 0.0, 1.0); /* cos(0) == 1 */\n+  TESTIT2 (cos, 1.0, 0.54, 0.55); /* cos(1) == 0.5403... */\n \n-  TESTIT2 (tanh, -1, -0.77, -0.76); /* tanh(-1) == -0.761... */\n-  TESTIT (tanh, 0, 0); /* tanh(0) == 0 */\n-  TESTIT2 (tanh, 1, 0.76, 0.77); /* tanh(1) == 0.761... */\n+  TESTIT2 (tan, -1.0, -1.56, 1.55); /* tan(-1) == -1.557... */\n+  TESTIT (tan, 0.0, 0.0); /* tan(0) == 0 */\n+  TESTIT2 (tan, 1.0, 1.55, 1.56); /* tan(1) == 1.557... */\n+\n+  TESTIT2 (sinh, -1.0, -1.18, -1.17); /* sinh(-1) == -1.175... */\n+  TESTIT (sinh, 0.0, 0.0); /* sinh(0) == 0 */\n+  TESTIT2 (sinh, 1.0, 1.17, 1.18); /* sinh(1) == 1.175... */\n+\n+  TESTIT2 (cosh, -1.0, 1.54, 1.55); /* cosh(-1) == 1.543... */\n+  TESTIT (cosh, 0.0, 1.0); /* cosh(0) == 1 */\n+  TESTIT2 (cosh, 1.0, 1.54, 1.55); /* cosh(1) == 1.543... */\n+\n+  TESTIT2 (tanh, -1.0, -0.77, -0.76); /* tanh(-1) == -0.761... */\n+  TESTIT (tanh, 0.0, 0.0); /* tanh(0) == 0 */\n+  TESTIT2 (tanh, 1.0, 0.76, 0.77); /* tanh(1) == 0.761... */\n+\n+  TESTIT2 (exp, -1.0, 0.36, 0.37); /* exp(-1) == 1/e */\n+  TESTIT (exp, 0.0, 1.0); /* exp(0) == 1 */\n+  TESTIT2 (exp, 1.0, 2.71, 2.72); /* exp(1) == e */\n+\n+  TESTIT (exp2, -1.0, 0.5); /* exp2(-1) == 1/2 */\n+  TESTIT (exp2, 0.0, 1.0); /* exp2(0) == 1 */\n+  TESTIT (exp2, 1.0, 2.0); /* exp2(1) == 2 */\n+\n+  TESTIT (exp10, -1.0, 0.1); /* exp10(-1) == 1/10 */\n+  TESTIT (exp10, 0.0, 1.0); /* exp10(0) == 1 */\n+  TESTIT (exp10, 1.0, 10.0); /* exp10(1) == 10 */\n+\n+  TESTIT (pow10, -1.0, 0.1); /* pow10(-1) == 1/10 */\n+  TESTIT (pow10, 0.0, 1.0); /* pow10(0) == 1 */\n+  TESTIT (pow10, 1.0, 10.0); /* pow10(1) == 10 */\n \n   return 0;\n }"}]}