{"sha": "40eef757425806fdf01462bde3455eaefaf1abd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlZWY3NTc0MjU4MDZmZGYwMTQ2MmJkZTM0NTVlYWVmYWYxYWJkNw==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2001-02-03T01:25:03Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-02-03T01:25:03Z"}, "message": "c4x.c (c4x_hard_regno_rename_ok): New.\n\n\t* c4x.c (c4x_hard_regno_rename_ok): New.\n\t* c4x-protos.h (c4x_hard_regno_rename_ok): New.\n\t* c4x.h (HARD_REGNO_RENAME_OK): Define.\n\nFrom-SVN: r39419", "tree": {"sha": "366497f2b0e4c4187021c1c84b0a37c450e8e2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366497f2b0e4c4187021c1c84b0a37c450e8e2fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40eef757425806fdf01462bde3455eaefaf1abd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40eef757425806fdf01462bde3455eaefaf1abd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40eef757425806fdf01462bde3455eaefaf1abd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40eef757425806fdf01462bde3455eaefaf1abd7/comments", "author": null, "committer": null, "parents": [{"sha": "0d6882a0f12103e8f69f216278edeae2c2584ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6882a0f12103e8f69f216278edeae2c2584ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6882a0f12103e8f69f216278edeae2c2584ce1"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "8a52bed3e8ce995483313736b2166ca72cf772d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40eef757425806fdf01462bde3455eaefaf1abd7", "patch": "@@ -1,3 +1,9 @@\n+2001-02-03  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* c4x.c (c4x_hard_regno_rename_ok): New.\n+\t* c4x-protos.h (c4x_hard_regno_rename_ok): New.\n+\t* c4x.h (HARD_REGNO_RENAME_OK): Define.\n+\n Fri Feb  2 20:03:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* diagnostic.h: Add missing \"extern\" in all declarations."}, {"sha": "6449aa726506ed36313fee7aeda7669f441d75f3", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=40eef757425806fdf01462bde3455eaefaf1abd7", "patch": "@@ -88,6 +88,8 @@ extern int c4x_check_legit_addr PARAMS ((enum machine_mode, rtx, int));\n \n extern int c4x_hard_regno_mode_ok PARAMS ((unsigned int, enum machine_mode));\n \n+extern int c4x_hard_regno_rename_ok PARAMS ((unsigned int, unsigned int));\n+\n extern struct rtx_def *c4x_legitimize_address PARAMS ((rtx,\n \t\t\t\t\t\t       enum machine_mode));\n "}, {"sha": "a52d3508611dd0e0e9fe0dea9b02b5cdab82b342", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=40eef757425806fdf01462bde3455eaefaf1abd7", "patch": "@@ -429,6 +429,29 @@ c4x_hard_regno_mode_ok (regno, mode)\n   return 0;\n }\n \n+/* Return non-zero if REGNO1 can be renamed to REGNO2.  */\n+int\n+c4x_hard_regno_rename_ok (regno1, regno2)\n+     unsigned int regno1;\n+     unsigned int regno2;\n+{\n+  /* We can not copy call saved registers from mode QI into QF or from\n+     mode QF into QI.  */\n+  if ((regno1 == R6_REGNO || regno1 == R7_REGNO)\n+      && (regno2 == R4_REGNO || regno2 == R5_REGNO || regno2 == R8_REGNO))\n+    return 0;\n+  if ((regno1 == R4_REGNO || regno1 == R5_REGNO || regno1 == R8_REGNO)\n+      && (regno2 == R6_REGNO || regno2 == R7_REGNO))\n+    return 0;\n+  /* We cannot copy from an extended (40 bit) register to a standard\n+     (32 bit) register because we only set the condition codes for\n+     extended registers.  */\n+  if (IS_EXT_REGNO (regno1) && ! IS_EXT_REGNO (regno2))\n+    return 0;\n+  if (IS_EXT_REGNO (regno2) && ! IS_EXT_REGNO (regno1))\n+    return 0;\n+  return 1;\n+}\n \n /* The TI C3x C compiler register argument runtime model uses 6 registers,\n    AR2, R2, R3, RC, RS, RE."}, {"sha": "a64c0380cd8d4528dc68068775dc72c1cf4418e6", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40eef757425806fdf01462bde3455eaefaf1abd7/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=40eef757425806fdf01462bde3455eaefaf1abd7", "patch": "@@ -614,6 +614,11 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n  IR0_REGNO, IR1_REGNO,\t\t\t\t\t\\\n  SP_REGNO, DP_REGNO, ST_REGNO, IE_REGNO, IF_REGNO, IOF_REGNO}\n \n+/* A C expression that is nonzero if hard register number REGNO2 can be\n+   considered for use as a rename register for REGNO1 */\n+\n+#define HARD_REGNO_RENAME_OK(REGNO1,REGNO2) \\\n+  c4x_hard_regno_rename_ok((REGNO1), (REGNO2))\n \n /* Determine which register classes are very likely used by spill registers.\n    local-alloc.c won't allocate pseudos that have these classes as their"}]}