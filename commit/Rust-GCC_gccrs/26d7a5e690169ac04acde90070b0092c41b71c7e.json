{"sha": "26d7a5e690169ac04acde90070b0092c41b71c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkN2E1ZTY5MDE2OWFjMDRhY2RlOTAwNzBiMDA5MmM0MWI3MWM3ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-06-12T09:31:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-12T09:31:26Z"}, "message": "re PR target/90811 ([nvptx] ptxas error on OpenMP offloaded code)\n\n\tPR target/90811\n\t* cfgexpand.c (align_local_variable): Add really_expand argument,\n\tdon't SET_DECL_ALIGN if it is false.\n\t(add_stack_var): Add really_expand argument, pass it through to\n\talign_local_variable.\n\t(expand_one_stack_var_1): Pass true as really_expand to\n\talign_local_variable.\n\t(expand_one_ssa_partition): Pass true as really_expand to\n\tadd_stack_var.\n\t(expand_one_var): Pass really_expand through to add_stack_var.\n\nFrom-SVN: r272181", "tree": {"sha": "4e2b0ab223076018c7448459e19178147af68212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e2b0ab223076018c7448459e19178147af68212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d7a5e690169ac04acde90070b0092c41b71c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d7a5e690169ac04acde90070b0092c41b71c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d7a5e690169ac04acde90070b0092c41b71c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d7a5e690169ac04acde90070b0092c41b71c7e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84ae721396176b7f6f4b42f8c5caeb1b10012e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ae721396176b7f6f4b42f8c5caeb1b10012e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ae721396176b7f6f4b42f8c5caeb1b10012e52"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "5e3afcaed2163abc181f1ff624705423723ff3ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7a5e690169ac04acde90070b0092c41b71c7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7a5e690169ac04acde90070b0092c41b71c7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26d7a5e690169ac04acde90070b0092c41b71c7e", "patch": "@@ -1,3 +1,16 @@\n+2019-06-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/90811\n+\t* cfgexpand.c (align_local_variable): Add really_expand argument,\n+\tdon't SET_DECL_ALIGN if it is false.\n+\t(add_stack_var): Add really_expand argument, pass it through to\n+\talign_local_variable.\n+\t(expand_one_stack_var_1): Pass true as really_expand to\n+\talign_local_variable.\n+\t(expand_one_ssa_partition): Pass true as really_expand to\n+\tadd_stack_var.\n+\t(expand_one_var): Pass really_expand through to add_stack_var.\n+\n 2019-06-12  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n         * config/arm/iterators.md (VABAL): New int iterator."}, {"sha": "4272e24a700847eae56feb0b8bc867e299e523ea", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7a5e690169ac04acde90070b0092c41b71c7e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7a5e690169ac04acde90070b0092c41b71c7e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=26d7a5e690169ac04acde90070b0092c41b71c7e", "patch": "@@ -361,7 +361,7 @@ static bool has_short_buffer;\n    we can't do with expected alignment of the stack boundary.  */\n \n static unsigned int\n-align_local_variable (tree decl)\n+align_local_variable (tree decl, bool really_expand)\n {\n   unsigned int align;\n \n@@ -370,7 +370,12 @@ align_local_variable (tree decl)\n   else\n     {\n       align = LOCAL_DECL_ALIGNMENT (decl);\n-      SET_DECL_ALIGN (decl, align);\n+      /* Don't change DECL_ALIGN when called from estimated_stack_frame_size.\n+\t That is done before IPA and could bump alignment based on host\n+\t backend even for offloaded code which wants different\n+\t LOCAL_DECL_ALIGNMENT.  */\n+      if (really_expand)\n+\tSET_DECL_ALIGN (decl, align);\n     }\n   return align / BITS_PER_UNIT;\n }\n@@ -418,7 +423,7 @@ alloc_stack_frame_space (poly_int64 size, unsigned HOST_WIDE_INT align)\n /* Accumulate DECL into STACK_VARS.  */\n \n static void\n-add_stack_var (tree decl)\n+add_stack_var (tree decl, bool really_expand)\n {\n   struct stack_var *v;\n \n@@ -446,7 +451,7 @@ add_stack_var (tree decl)\n      variables that are simultaneously live.  */\n   if (known_eq (v->size, 0U))\n     v->size = 1;\n-  v->alignb = align_local_variable (decl);\n+  v->alignb = align_local_variable (decl, really_expand);\n   /* An alignment of zero can mightily confuse us later.  */\n   gcc_assert (v->alignb != 0);\n \n@@ -1323,7 +1328,7 @@ expand_one_stack_var_1 (tree var)\n   else\n     {\n       size = tree_to_poly_uint64 (DECL_SIZE_UNIT (var));\n-      byte_align = align_local_variable (var);\n+      byte_align = align_local_variable (var, true);\n     }\n \n   /* We handle highly aligned variables in expand_stack_vars.  */\n@@ -1413,7 +1418,7 @@ expand_one_ssa_partition (tree var)\n   if (!use_register_for_decl (var))\n     {\n       if (defer_stack_allocation (var, true))\n-\tadd_stack_var (var);\n+\tadd_stack_var (var, true);\n       else\n \texpand_one_stack_var_1 (var);\n       return;\n@@ -1695,7 +1700,7 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n \t}\n     }\n   else if (defer_stack_allocation (var, toplevel))\n-    add_stack_var (origvar);\n+    add_stack_var (origvar, really_expand);\n   else\n     {\n       if (really_expand)"}]}