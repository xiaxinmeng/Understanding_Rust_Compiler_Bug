{"sha": "f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRkYThkY2U3YTkwMjNjZjE0N2QxYTc1MzdjMGI3NWZlNDFmZWNiZg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-12-22T19:45:58Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-12-22T19:45:58Z"}, "message": "c-aux-info.c (gen_formal_list_for_type): Use prototype_p.\n\ngcc/\n\t* c-aux-info.c (gen_formal_list_for_type): Use prototype_p.\n\t* c-decl.c (diagnose_arglist_conflict): Likewise.\n\t(diagnose_mismatched_decls, merge_decls): Likewise.\n\t(c_builtin_function, c_builtin_function_ext_scope): Likewise.\n\t(start_decl, start_function): Likewise.\n\t* c-tree.h (C_DECL_ISNT_PROTOTYPED): Likewise.\n\t* config/ia64/ia64.h (INIT_CUMULATIVE_ARGS): Likewise.\n\t* config/mep/mep.c (mep_validate_interrupt): Likewise.\n\t* config/pa/pa.h (INIT_CUMULATIVE_ARGS): Likewise.\n\t* config/rs6000/rs6000.c (init_cumulative_args): Likewise.\n\t* config/sh/sh.c (sh_init_cumulative_args): Likewise.\n\t* config/sparc/sparc.c (init_cumulative_args): Likewise.\n\t* dwarf2out.c (add_prototyped_attribute): Likewise.\n\t(gen_subprogram_die): Likewise.\n\t* ipa-type-escape.c (check_function_parameter_and_return_types):\n\tLikewise.\n\t(check_call): Likewise.\n\t* tree-ssa.c (useless_type_conversion_p): Likewise.\n\ngcc/ada/\n\t* gcc-interface/utils.c (handle_nonnull_attribute): Use prototype_p.\n\t(handle_sentinel_attribute): Likewise.\n\ngcc/c-family/\n\t* c-common.c (handle_nonnull_attribute, handle_sentinel_attribute):\n\tUse prototype_p.\n\ngcc/cp/\n\t* decl.c (decls_match, duplicate_decls): Use prototype_p.\n\t* pt.c (push_template_decl_real): Likewise.\n\ngcc/lto/\n\t* lto-lang.c (handle_nonnull_attribute, handle_sentinel_attribute):\n\tUse prototype_p.\n\ngcc/objc/\n\t* objc-act.c (next_sjlj_build_enter_and_setjmp): Use prototype_p.\n\nFrom-SVN: r168181", "tree": {"sha": "0e435cd3933ac64da92933bc369a098bc84b208d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e435cd3933ac64da92933bc369a098bc84b208d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/comments", "author": null, "committer": null, "parents": [{"sha": "7d127f5921df15abb3d4bdbc3f71f4784c641207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d127f5921df15abb3d4bdbc3f71f4784c641207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d127f5921df15abb3d4bdbc3f71f4784c641207"}], "stats": {"total": 122, "additions": 82, "deletions": 40}, "files": [{"sha": "11dea2d503ea742088fbcfd099afee8cc99c99e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1,3 +1,24 @@\n+2010-12-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-aux-info.c (gen_formal_list_for_type): Use prototype_p.\n+\t* c-decl.c (diagnose_arglist_conflict): Likewise.\n+\t(diagnose_mismatched_decls, merge_decls): Likewise.\n+\t(c_builtin_function, c_builtin_function_ext_scope): Likewise.\n+\t(start_decl, start_function): Likewise.\n+\t* c-tree.h (C_DECL_ISNT_PROTOTYPED): Likewise.\n+\t* config/ia64/ia64.h (INIT_CUMULATIVE_ARGS): Likewise.\n+\t* config/mep/mep.c (mep_validate_interrupt): Likewise.\n+\t* config/pa/pa.h (INIT_CUMULATIVE_ARGS): Likewise.\n+\t* config/rs6000/rs6000.c (init_cumulative_args): Likewise.\n+\t* config/sh/sh.c (sh_init_cumulative_args): Likewise.\n+\t* config/sparc/sparc.c (init_cumulative_args): Likewise.\n+\t* dwarf2out.c (add_prototyped_attribute): Likewise.\n+\t(gen_subprogram_die): Likewise.\n+\t* ipa-type-escape.c (check_function_parameter_and_return_types):\n+\tLikewise.\n+\t(check_call): Likewise.\n+\t* tree-ssa.c (useless_type_conversion_p): Likewise.\n+\n 2010-12-22  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.md (\"mov<mode>\"): Use nonimmediate_operand"}, {"sha": "cbe8cad808718b6722fd7504c783a14b9dff4ced", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1,3 +1,8 @@\n+2010-12-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc-interface/utils.c (handle_nonnull_attribute): Use prototype_p.\n+\t(handle_sentinel_attribute): Likewise.\n+\n 2010-12-20  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR bootstrap/47027"}, {"sha": "b92e916bd381c4e57de1ce2f1a5dbea05e58bba5", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -5065,7 +5065,7 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n      will have the correct types when we actually check them later.  */\n   if (!args)\n     {\n-      if (!TYPE_ARG_TYPES (type))\n+      if (!prototype_p (type))\n \t{\n \t  error (\"nonnull attribute without arguments on a non-prototype\");\n \t  *no_add_attrs = true;\n@@ -5130,7 +5130,7 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n {\n   tree params = TYPE_ARG_TYPES (*node);\n \n-  if (!params)\n+  if (!prototype_p (*node))\n     {\n       warning (OPT_Wattributes,\n \t       \"%qs attribute requires prototypes with named arguments\","}, {"sha": "694f9c1f59ed77ade83d9d43baf940420eccaf3c", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -163,7 +163,7 @@ gen_formal_list_for_type (tree fntype, formals_style style)\n \n   if (!*formal_list)\n     {\n-      if (TYPE_ARG_TYPES (fntype))\n+      if (prototype_p (fntype))\n \t/* assert (TREE_VALUE (TYPE_ARG_TYPES (fntype)) == void_type_node);  */\n \tformal_list = \"void\";\n       else"}, {"sha": "40fccbe554cd702653b659e5b5d2b7eff8c5f029", "filename": "gcc/c-decl.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1501,9 +1501,8 @@ diagnose_arglist_conflict (tree newdecl, tree olddecl,\n \n   if (TREE_CODE (olddecl) != FUNCTION_DECL\n       || !comptypes (TREE_TYPE (oldtype), TREE_TYPE (newtype))\n-      || !((TYPE_ARG_TYPES (oldtype) == 0 && DECL_INITIAL (olddecl) == 0)\n-\t   ||\n-\t   (TYPE_ARG_TYPES (newtype) == 0 && DECL_INITIAL (newdecl) == 0)))\n+      || !((!prototype_p (oldtype) && DECL_INITIAL (olddecl) == 0)\n+\t   || (!prototype_p (newtype) && DECL_INITIAL (newdecl) == 0)))\n     return;\n \n   t = TYPE_ARG_TYPES (oldtype);\n@@ -1833,7 +1832,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  && !C_DECL_DECLARED_BUILTIN (olddecl)\n \t  && (!TREE_PUBLIC (newdecl)\n \t      || (DECL_INITIAL (newdecl)\n-\t\t  && !TYPE_ARG_TYPES (TREE_TYPE (newdecl)))))\n+\t\t  && !prototype_p (TREE_TYPE (newdecl)))))\n \t{\n \t  warning (OPT_Wshadow, \"declaration of %q+D shadows \"\n \t\t   \"a built-in function\", newdecl);\n@@ -1870,7 +1869,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       /* If we have a prototype after an old-style function definition,\n \t the argument types must be checked specially.  */\n       else if (DECL_INITIAL (olddecl)\n-\t       && !TYPE_ARG_TYPES (oldtype) && TYPE_ARG_TYPES (newtype)\n+\t       && !prototype_p (oldtype) && prototype_p (newtype)\n \t       && TYPE_ACTUAL_ARG_TYPES (oldtype)\n \t       && !validate_proto_after_old_defn (newdecl, newtype, oldtype))\n \t{\n@@ -2139,9 +2138,9 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n   bool new_is_definition = (TREE_CODE (newdecl) == FUNCTION_DECL\n \t\t\t    && DECL_INITIAL (newdecl) != 0);\n   bool new_is_prototype = (TREE_CODE (newdecl) == FUNCTION_DECL\n-\t\t\t   && TYPE_ARG_TYPES (TREE_TYPE (newdecl)) != 0);\n+\t\t\t   && prototype_p (TREE_TYPE (newdecl)));\n   bool old_is_prototype = (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t\t\t   && TYPE_ARG_TYPES (TREE_TYPE (olddecl)) != 0);\n+\t\t\t   && prototype_p (TREE_TYPE (olddecl)));\n   bool extern_changed = false;\n \n   /* For real parm decl following a forward decl, rechain the old decl\n@@ -3539,7 +3538,7 @@ c_builtin_function (tree decl)\n   tree   id = DECL_NAME (decl);\n \n   const char *name = IDENTIFIER_POINTER (id);\n-  C_DECL_BUILTIN_PROTOTYPE (decl) = (TYPE_ARG_TYPES (type) != 0);\n+  C_DECL_BUILTIN_PROTOTYPE (decl) = prototype_p (type);\n \n   /* Should never be called on a symbol with a preexisting meaning.  */\n   gcc_assert (!I_SYMBOL_BINDING (id));\n@@ -3565,7 +3564,7 @@ c_builtin_function_ext_scope (tree decl)\n   tree   id = DECL_NAME (decl);\n \n   const char *name = IDENTIFIER_POINTER (id);\n-  C_DECL_BUILTIN_PROTOTYPE (decl) = (TYPE_ARG_TYPES (type) != 0);\n+  C_DECL_BUILTIN_PROTOTYPE (decl) = prototype_p (type);\n \n   /* Should never be called on a symbol with a preexisting meaning.  */\n   gcc_assert (!I_SYMBOL_BINDING (id));\n@@ -4001,7 +4000,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n      prototypes file (if requested).  */\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n-    gen_aux_info_record (decl, 0, 0, TYPE_ARG_TYPES (TREE_TYPE (decl)) != 0);\n+    gen_aux_info_record (decl, 0, 0, prototype_p (TREE_TYPE (decl)));\n \n   /* ANSI specifies that a tentative definition which is not merged with\n      a non-tentative definition behaves exactly like a definition with an\n@@ -7625,7 +7624,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   current_function_prototype_locus = UNKNOWN_LOCATION;\n   current_function_prototype_built_in = false;\n   current_function_prototype_arg_types = NULL_TREE;\n-  if (TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0)\n+  if (!prototype_p (TREE_TYPE (decl1)))\n     {\n       if (old_decl != 0 && TREE_CODE (TREE_TYPE (old_decl)) == FUNCTION_TYPE\n \t  && comptypes (TREE_TYPE (TREE_TYPE (decl1)),\n@@ -7674,7 +7673,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   /* Optionally warn of old-fashioned def with no previous prototype.  */\n   if (warn_strict_prototypes\n       && old_decl != error_mark_node\n-      && TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0\n+      && !prototype_p (TREE_TYPE (decl1))\n       && C_DECL_ISNT_PROTOTYPE (old_decl))\n     warning_at (loc, OPT_Wstrict_prototypes,\n \t\t\"function declaration isn%'t a prototype\");\n@@ -7692,7 +7691,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n \t   && old_decl != 0\n \t   && old_decl != error_mark_node\n \t   && TREE_USED (old_decl)\n-\t   && TYPE_ARG_TYPES (TREE_TYPE (old_decl)) == 0)\n+\t   && !prototype_p (TREE_TYPE (old_decl)))\n     warning_at (loc, OPT_Wmissing_prototypes,\n \t\t\"%qD was used with no prototype before its definition\", decl1);\n   /* Optionally warn of any global def with no previous declaration.  */"}, {"sha": "defca774d0d0fb2d18485eab0496269d290ebf1d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1,3 +1,8 @@\n+2010-12-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-common.c (handle_nonnull_attribute, handle_sentinel_attribute):\n+\tUse prototype_p.\n+\n 2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-objc.h (objc_maybe_warn_exceptions): New."}, {"sha": "8eb849aa17466116e67d0952cb324d42fb984286", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -7348,7 +7348,7 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n      will have the correct types when we actually check them later.  */\n   if (!args)\n     {\n-      if (!TYPE_ARG_TYPES (type))\n+      if (!prototype_p (type))\n \t{\n \t  error (\"nonnull attribute without arguments on a non-prototype\");\n \t  *no_add_attrs = true;\n@@ -7631,7 +7631,7 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n {\n   tree params = TYPE_ARG_TYPES (*node);\n \n-  if (!params)\n+  if (!prototype_p (*node))\n     {\n       warning (OPT_Wattributes,\n \t       \"%qE attribute requires prototypes with named arguments\", name);"}, {"sha": "8e8836242708e497dce05454b1a65adb2565548c", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -98,7 +98,7 @@ along with GCC; see the file COPYING3.  If not see\n    (but this is presently difficult because some of them need FILE*).  */\n #define C_DECL_ISNT_PROTOTYPE(EXP)\t\t\t\\\n        (EXP == 0\t\t\t\t\t\\\n-\t|| (TYPE_ARG_TYPES (TREE_TYPE (EXP)) == 0\t\\\n+\t|| (!prototype_p (TREE_TYPE (EXP))\t\\\n \t    && !DECL_BUILT_IN (EXP)))\n \n /* For FUNCTION_TYPE, a hidden list of types of arguments.  The same as"}, {"sha": "8e6d298aa02eee130b051ed31fe44d62b4384972", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1047,7 +1047,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (CUM).words = 0;\t\t\t\t\t\t\t\\\n   (CUM).int_regs = 0;\t\t\t\t\t\t\t\\\n   (CUM).fp_regs = 0;\t\t\t\t\t\t\t\\\n-  (CUM).prototype = ((FNTYPE) && TYPE_ARG_TYPES (FNTYPE)) || (LIBNAME);\t\\\n+  (CUM).prototype = ((FNTYPE) && prototype_p (FNTYPE)) || (LIBNAME);\t\\\n   (CUM).atypes[0] = (CUM).atypes[1] = (CUM).atypes[2] = I64;\t        \\\n   (CUM).atypes[3] = (CUM).atypes[4] = (CUM).atypes[5] = I64;            \\\n   (CUM).atypes[6] = (CUM).atypes[7] = I64;                              \\"}, {"sha": "913a30a7563dc4598f96379dd85816744c601f34", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -4001,7 +4001,7 @@ mep_validate_interrupt (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n   if (TREE_TYPE (function_type) != void_type_node)\n     error (\"interrupt function must have return type of void\");\n \n-  if (TYPE_ARG_TYPES (function_type)\n+  if (prototype_p (function_type)\n       && (TREE_VALUE (TYPE_ARG_TYPES (function_type)) != void_type_node\n \t  || TREE_CHAIN (TYPE_ARG_TYPES (function_type)) != NULL_TREE))\n     error (\"interrupt function must have no arguments\");"}, {"sha": "0a0250ff3b9f40fec19a907f9f8afeb9ee59088f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -599,7 +599,7 @@ struct hppa_args {int words, nargs_prototype, incoming, indirect; };\n   (CUM).words = 0, \t\t\t\t\t\t\t\\\n   (CUM).incoming = 0,\t\t\t\t\t\t\t\\\n   (CUM).indirect = (FNTYPE) && !(FNDECL),\t\t\t\t\\\n-  (CUM).nargs_prototype = (FNTYPE && TYPE_ARG_TYPES (FNTYPE)\t\t\\\n+  (CUM).nargs_prototype = (FNTYPE && prototype_p (FNTYPE)\t\t\\\n \t\t\t   ? (list_length (TYPE_ARG_TYPES (FNTYPE)) - 1\t\\\n \t\t\t      + (TYPE_MODE (TREE_TYPE (FNTYPE)) == BLKmode \\\n \t\t\t\t || pa_return_in_memory (TREE_TYPE (FNTYPE), 0))) \\"}, {"sha": "f26e37e8cd157f9f090c27b0b49156eefa9be864", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -7874,7 +7874,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n   cum->words = 0;\n   cum->fregno = FP_ARG_MIN_REG;\n   cum->vregno = ALTIVEC_ARG_MIN_REG;\n-  cum->prototype = (fntype && TYPE_ARG_TYPES (fntype));\n+  cum->prototype = (fntype && prototype_p (fntype));\n   cum->call_cookie = ((DEFAULT_ABI == ABI_V4 && libcall)\n \t\t      ? CALL_LIBCALL : CALL_NORMAL);\n   cum->sysv_gregno = GP_ARG_MIN_REG;"}, {"sha": "ffe84b11bf86083671a18330294cd3e03b635b1a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -12119,7 +12119,7 @@ sh_init_cumulative_args (CUMULATIVE_ARGS *  pcum,\n     {\n       pcum->force_mem = ((TARGET_HITACHI || pcum->renesas_abi)\n \t\t\t && aggregate_value_p (TREE_TYPE (fntype), fndecl));\n-      pcum->prototype_p = TYPE_ARG_TYPES (fntype) ? TRUE : FALSE;\n+      pcum->prototype_p = prototype_p (fntype);\n       pcum->arg_count [(int) SH_ARG_INT]\n \t= TARGET_SH5 && aggregate_value_p (TREE_TYPE (fntype), fndecl);\n "}, {"sha": "7df0dfba4d5e3826ba6fbba48cc46b8306aae6da", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -5017,7 +5017,7 @@ init_cumulative_args (struct sparc_args *cum, tree fntype,\n \t\t      tree fndecl ATTRIBUTE_UNUSED)\n {\n   cum->words = 0;\n-  cum->prototype_p = fntype && TYPE_ARG_TYPES (fntype);\n+  cum->prototype_p = fntype && prototype_p (fntype);\n   cum->libcall_p = fntype == 0;\n }\n "}, {"sha": "5bdfa436820b9e24dbcaa84531178b2ac84b747c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1,3 +1,8 @@\n+2010-12-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* decl.c (decls_match, duplicate_decls): Use prototype_p.\n+\t* pt.c (push_template_decl_real): Likewise.\n+\n 2010-12-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47003"}, {"sha": "f74b0c22917a8634f926f38eadd2a54878b04bc8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -983,7 +983,7 @@ decls_match (tree newdecl, tree olddecl)\n \n       if (same_type_p (TREE_TYPE (f1), TREE_TYPE (f2)))\n \t{\n-\t  if (p2 == NULL_TREE && DECL_EXTERN_C_P (olddecl)\n+\t  if (!prototype_p (f2) && DECL_EXTERN_C_P (olddecl)\n \t      && (DECL_BUILT_IN (olddecl)\n #ifndef NO_IMPLICIT_EXTERN_C\n \t\t  || (DECL_IN_SYSTEM_HEADER (newdecl) && !DECL_CLASS_SCOPE_P (newdecl))\n@@ -996,7 +996,7 @@ decls_match (tree newdecl, tree olddecl)\n \t\tTREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n \t    }\n #ifndef NO_IMPLICIT_EXTERN_C\n-\t  else if (p1 == NULL_TREE\n+\t  else if (!prototype_p (f1)\n \t\t   && (DECL_EXTERN_C_P (olddecl)\n \t\t       && DECL_IN_SYSTEM_HEADER (olddecl)\n \t\t       && !DECL_CLASS_SCOPE_P (olddecl))\n@@ -1536,8 +1536,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t       && DECL_INITIAL (olddecl) != NULL_TREE\n-\t       && TYPE_ARG_TYPES (TREE_TYPE (olddecl)) == NULL_TREE\n-\t       && TYPE_ARG_TYPES (TREE_TYPE (newdecl)) != NULL_TREE)\n+\t       && !prototype_p (TREE_TYPE (olddecl))\n+\t       && prototype_p (TREE_TYPE (newdecl)))\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n \t  warning_at (input_location, 0, \"prototype for %q+#D\", newdecl);"}, {"sha": "ae6aed0fad98012daadc93d4fec77645739bd667", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -4737,7 +4737,7 @@ push_template_decl_real (tree decl, bool is_friend)\n \t      return error_mark_node;\n \t    }\n \t  if (NEW_DELETE_OPNAME_P (DECL_NAME (decl))\n-\t      && (!TYPE_ARG_TYPES (TREE_TYPE (decl))\n+\t      && (!prototype_p (TREE_TYPE (decl))\n \t\t  || TYPE_ARG_TYPES (TREE_TYPE (decl)) == void_list_node\n \t\t  || !TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (decl)))\n \t\t  || (TREE_CHAIN (TYPE_ARG_TYPES ((TREE_TYPE (decl))))"}, {"sha": "9fe1e9c43693651698a8ad728a60c4799153a04d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -17651,7 +17651,7 @@ static inline void\n add_prototyped_attribute (dw_die_ref die, tree func_type)\n {\n   if (get_AT_unsigned (comp_unit_die (), DW_AT_language) == DW_LANG_C89\n-      && TYPE_ARG_TYPES (func_type) != NULL)\n+      && prototype_p (func_type))\n     add_AT_flag (die, DW_AT_prototyped, 1);\n }\n \n@@ -18900,7 +18900,6 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   char label_id[MAX_ARTIFICIAL_LABEL_BYTES];\n   tree origin = decl_ultimate_origin (decl);\n   dw_die_ref subr_die;\n-  tree fn_arg_types;\n   tree outer_scope;\n   dw_die_ref old_die = lookup_decl_die (decl);\n   int declaration = (current_function_decl != decl\n@@ -19238,8 +19237,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t void_type_node 2) an unprototyped function declaration (not a\n \t definition).  This just means that we have no info about the\n \t parameters at all.  */\n-      fn_arg_types = TYPE_ARG_TYPES (TREE_TYPE (decl));\n-      if (fn_arg_types != NULL)\n+      if (prototype_p (TREE_TYPE (decl)))\n \t{\n \t  /* This is the prototyped case, check for....  */\n \t  if (stdarg_p (TREE_TYPE (decl)))"}, {"sha": "1ecf68ef2a74cc2854dde1bf2a42bc3ad1f58395", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1025,7 +1025,7 @@ check_function_parameter_and_return_types (tree fn, bool escapes)\n {\n   tree arg;\n \n-  if (TYPE_ARG_TYPES (TREE_TYPE (fn)))\n+  if (prototype_p (TREE_TYPE (fn)))\n     {\n       for (arg = TYPE_ARG_TYPES (TREE_TYPE (fn));\n \t   arg && TREE_VALUE (arg) != void_type_node;\n@@ -1333,7 +1333,7 @@ check_call (gimple call)\n \n       /* Check that there are no implicit casts in the passing of\n \t parameters.  */\n-      if (TYPE_ARG_TYPES (TREE_TYPE (callee_t)))\n+      if (prototype_p (TREE_TYPE (callee_t)))\n \t{\n \t  for (arg_type = TYPE_ARG_TYPES (TREE_TYPE (callee_t)), i = 0;\n \t       arg_type && TREE_VALUE (arg_type) != void_type_node"}, {"sha": "319a47a17a1d58b191a8267139dfe3f657ade3df", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1,3 +1,8 @@\n+2010-12-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* lto-lang.c (handle_nonnull_attribute, handle_sentinel_attribute):\n+\tUse prototype_p.\n+\n 2010-12-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/46796"}, {"sha": "968073ba4ef3048dbd760a44f12b86ed6b8d8eb7", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -313,7 +313,7 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n      will have the correct types when we actually check them later.  */\n   if (!args)\n     {\n-      gcc_assert (TYPE_ARG_TYPES (type));\n+      gcc_assert (prototype_p (type));\n       return NULL_TREE;\n     }\n "}, {"sha": "2aae2f4e6b844e397c4cae8b5fb95375fae2968a", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1,3 +1,7 @@\n+2010-12-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* objc-act.c (next_sjlj_build_enter_and_setjmp): Use prototype_p.\n+\n 2010-12-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_init): Call using_eh_for_cleanups."}, {"sha": "2ac51bb6583bd94be0920bde7ccc873979b37a65", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -5126,7 +5126,7 @@ next_sjlj_build_enter_and_setjmp (void)\n   t = build_fold_addr_expr_loc (input_location, t);\n #ifdef OBJCPLUS\n   /* Convert _setjmp argument to type that is expected.  */\n-  if (TYPE_ARG_TYPES (TREE_TYPE (objc_setjmp_decl)))\n+  if (prototype_p (TREE_TYPE (objc_setjmp_decl)))\n     t = convert (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (objc_setjmp_decl))), t);\n   else\n     t = convert (ptr_type_node, t);"}, {"sha": "7bd01f8d4dbac7f023d8ce50fedaacd6d56f4d0e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da8dce7a9023cf147d1a7537c0b75fe41fecbf/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f4da8dce7a9023cf147d1a7537c0b75fe41fecbf", "patch": "@@ -1241,7 +1241,7 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \t       || TREE_CODE (TREE_TYPE (outer_type)) == METHOD_TYPE)\n \t      && (TREE_CODE (TREE_TYPE (outer_type))\n \t\t  == TREE_CODE (TREE_TYPE (inner_type)))\n-\t      && !TYPE_ARG_TYPES (TREE_TYPE (outer_type))\n+\t      && !prototype_p (TREE_TYPE (outer_type))\n \t      && useless_type_conversion_p (TREE_TYPE (TREE_TYPE (outer_type)),\n \t\t\t\t\t    TREE_TYPE (TREE_TYPE (inner_type)))))\n \treturn true;\n@@ -1407,7 +1407,7 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \treturn false;\n \n       /* A conversion to an unprototyped argument list is ok.  */\n-      if (!TYPE_ARG_TYPES (outer_type))\n+      if (!prototype_p (outer_type))\n \treturn true;\n \n       /* If the unqualified argument types are compatible the conversion"}]}