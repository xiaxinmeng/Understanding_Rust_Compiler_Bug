{"sha": "61c7194612d105be0b93e3f39e909cf16819f9f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjNzE5NDYxMmQxMDViZTBiOTNlM2YzOWU5MDljZjE2ODE5ZjlmMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-10T23:26:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-10T23:26:34Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_C99): Add stdio.h checking.\n\n\n2001-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_C99): Add stdio.h checking.\n\tAdd checking for strtof, _Exit in stdlib.h\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Regenerate.\n\t* include/c_std/bits/std_cstdio.h: Alphabetize lists.\n\t(snprintf): Put C99 functions into __gnu_cxx namespace.\n\t(vfscanf): Same.\n\t(vscanf): Same.\n\t(vsnprintf): Same.\n\t(vsscanf): Same.\n\t* include/c_std/bits/std_cstdlib.h: Alphabetize lists. Put undefs\n\tfor C99 functions within _GLIBCPP_USE_C99 guard.\n\t(_Exit): Same.\n\t(strtof): Same.\n\t(strtold): Same.\n\t* include/bits/locale_facets.tcc: Check if C99 is enabled.\n\t* include/c_std/bits/std_cwchar.h (__gnu_cxx): Put undefs within\n\tC99 guard.\n\t* include/c_std/bits/cmath.tcc: Formatting tweak.\n\t* include/c_std/bits/std_cmath.h: Same.\n\nFrom-SVN: r43161", "tree": {"sha": "519f13fd83f7d6ef8ed3dc5b817593cc8124e012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519f13fd83f7d6ef8ed3dc5b817593cc8124e012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c7194612d105be0b93e3f39e909cf16819f9f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c7194612d105be0b93e3f39e909cf16819f9f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c7194612d105be0b93e3f39e909cf16819f9f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c7194612d105be0b93e3f39e909cf16819f9f1/comments", "author": null, "committer": null, "parents": [{"sha": "c176c051f8bb813df3b38df37248b052604d747a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c176c051f8bb813df3b38df37248b052604d747a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c176c051f8bb813df3b38df37248b052604d747a"}], "stats": {"total": 2288, "additions": 1254, "deletions": 1034}, "files": [{"sha": "4293fae69204a739caf419e4a37ae068d4300cb6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -1,3 +1,26 @@\n+2001-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_C99): Add stdio.h checking.\n+\tAdd checking for strtof, _Exit in stdlib.h\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Regenerate.\n+\t* include/c_std/bits/std_cstdio.h: Alphabetize lists. \n+\t(snprintf): Put C99 functions into __gnu_cxx namespace.\n+\t(vfscanf): Same.\n+\t(vscanf): Same.\n+\t(vsnprintf): Same.\n+\t(vsscanf): Same.\n+\t* include/c_std/bits/std_cstdlib.h: Alphabetize lists. Put undefs\n+\tfor C99 functions within _GLIBCPP_USE_C99 guard.\n+\t(_Exit): Same.\n+\t(strtof): Same.\n+\t(strtold): Same.\n+\t* include/bits/locale_facets.tcc: Check if C99 is enabled.\n+\t* include/c_std/bits/std_cwchar.h (__gnu_cxx): Put undefs within\n+\tC99 guard.\n+\t* include/c_std/bits/cmath.tcc: Formatting tweak.\n+\t* include/c_std/bits/std_cmath.h: Same.\n+\t\n 2001-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/c_std/bits/std_cstdio.h: Include cstddef for size_t."}, {"sha": "d976fd6937f706e1b3a2067ac2b00afb9e03b9c0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -608,7 +608,6 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n \n-  AC_CHECK_FUNCS(strtof)\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n   AC_CHECK_FUNCS(drand48)\n \n@@ -1268,6 +1267,37 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t         [isunordered(0.0,0.0);],, [ac_c99_math=no])\n   AC_MSG_RESULT($ac_c99_math)\n \n+  # Check for the existence in <stdio.h> of vscanf, et. al.\n+  ac_c99_stdio=yes;\n+  AC_MSG_CHECKING([for ISO C99 support in <stdio.h>])\n+  AC_TRY_COMPILE([#include <stdio.h>],\n+\t\t [snprintf(\"12\", 0, \"%i\");],, [ac_c99_stdio=no])\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vfscanf(stderr, \"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\t\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vscanf(\"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vsnprintf(fmt, 0, \"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vsscanf(fmt, \"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\n+  AC_MSG_RESULT($ac_c99_stdio)\n+\n   # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n   ac_c99_stdlib=yes;\n   AC_MSG_CHECKING([for lldiv_t declaration])\n@@ -1279,13 +1309,18 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_MSG_RESULT($ac_c99_lldiv_t)\n \n   AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtof(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtold(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>],\n \t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>],\n \t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [_Exit(0);],, [ac_c99_stdlib=no])\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n     ac_c99_stdlib=no; \n   fi; \n@@ -1303,8 +1338,9 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])\n-  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_wchar\" = x\"no\" \\\n-\t|| test x\"$ac_c99_stdlib\" = x\"no\"; then \n+  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_stdio\" = x\"no\" \\\n+\t|| test x\"$ac_c99_stdlib\" = x\"no\" \\\n+\t|| test x\"$ac_c99_wchar\" = x\"no\"; then\n     enable_c99=no; \n   fi; \n   AC_MSG_RESULT($enable_c99)"}, {"sha": "f59e10a54ebf14698b0c3613194d991528ee35e9", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -141,6 +141,10 @@ LIB_AC_PROG_CXX\n   # automake happy, but we dont execute it, since we dont care about\n   # the result.\n   if false; then\n+    # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands\n+    # to nothing, so nothing would remain between `then' and `fi' if it\n+    # were not for the `:' below.\n+    :\n     AC_EXEEXT\n   fi\n \n@@ -616,7 +620,6 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n \n-  AC_CHECK_FUNCS(strtof)\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n   AC_CHECK_FUNCS(drand48)\n \n@@ -1276,6 +1279,37 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t         [isunordered(0.0,0.0);],, [ac_c99_math=no])\n   AC_MSG_RESULT($ac_c99_math)\n \n+  # Check for the existence in <stdio.h> of vscanf, et. al.\n+  ac_c99_stdio=yes;\n+  AC_MSG_CHECKING([for ISO C99 support in <stdio.h>])\n+  AC_TRY_COMPILE([#include <stdio.h>],\n+\t\t [snprintf(\"12\", 0, \"%i\");],, [ac_c99_stdio=no])\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vfscanf(stderr, \"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\t\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vscanf(\"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vsnprintf(fmt, 0, \"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\n+  AC_TRY_COMPILE([#include <stdio.h>\n+\t\t  #include <stdarg.h>\n+\t\t  void foo(char* fmt, ...)\n+\t\t  {va_list args; va_start(args, fmt);\n+\t          vsscanf(fmt, \"%i\", args);}],\n+\t          [],, [ac_c99_stdio=no])\n+  AC_MSG_RESULT($ac_c99_stdio)\n+\n   # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n   ac_c99_stdlib=yes;\n   AC_MSG_CHECKING([for lldiv_t declaration])\n@@ -1287,13 +1321,18 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_MSG_RESULT($ac_c99_lldiv_t)\n \n   AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtof(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtold(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>],\n \t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>],\n \t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [_Exit(0);],, [ac_c99_stdlib=no])\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n     ac_c99_stdlib=no; \n   fi; \n@@ -1311,8 +1350,9 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])\n-  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_wchar\" = x\"no\" \\\n-\t|| test x\"$ac_c99_stdlib\" = x\"no\"; then \n+  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_stdio\" = x\"no\" \\\n+\t|| test x\"$ac_c99_stdlib\" = x\"no\" \\\n+\t|| test x\"$ac_c99_wchar\" = x\"no\"; then\n     enable_c99=no; \n   fi; \n   AC_MSG_RESULT($enable_c99)"}, {"sha": "f74f03a57270a105c198acc8fb1e9aca65bec48d", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -459,9 +459,6 @@\n /* Define if you have the sqrtl function.  */\n #undef HAVE_SQRTL\n \n-/* Define if you have the strtof function.  */\n-#undef HAVE_STRTOF\n-\n /* Define if you have the strtold function.  */\n #undef HAVE_STRTOLD\n "}, {"sha": "270f7438cb2c33e6fb25106ce51d3d9f1058c6fb", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1001, "deletions": 904, "changes": 1905, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=61c7194612d105be0b93e3f39e909cf16819f9f1"}, {"sha": "da20f7866a762527865894d0c7a7e7b8e52fac92", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -571,7 +571,7 @@ namespace std\n       // Stage 2: convert and store results.\n       char* __sanity;\n       errno = 0;\n-#ifdef _GLIBCPP_HAVE_STRTOF\n+#ifdef _GLIBCPP_USE_C99\n       float __f = strtof(__xtrc, &__sanity);\n #else\n       float __f = static_cast<float>(strtod(__xtrc, &__sanity));\n@@ -611,7 +611,7 @@ namespace std\n       return __beg;\n     }\n \n-#if defined(_GLIBCPP_HAVE_STRTOLD) && !defined(__hpux)\n+#if defined(_GLIBCPP_USE_C99) && !defined(__hpux)\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::"}, {"sha": "9b86bbb9da6f340cecbada837fd773c3d1cd1b73", "filename": "libstdc++-v3/include/c_std/bits/cmath.tcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fcmath.tcc?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -32,7 +32,8 @@\n #ifndef _CPP_BITS_CMATH_TCC\n #define _CPP_BITS_CMATH_TCC 1\n \n-namespace std {\n+namespace std \n+{\n   export template<typename _Tp>\n     _Tp\n     __cmath_power(_Tp __x, unsigned int __n)"}, {"sha": "d43256c15303aa9b81ff4ef518b9176d764af584", "filename": "libstdc++-v3/include/c_std/bits/std_cmath.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -495,7 +495,7 @@ namespace std\n   inline long double \n   tanh(long double __x) { return ::tanh(static_cast<double>(__x)); }\n #endif\n-} // std\n+} \n \n \n #if _GLIBCPP_USE_C99\n@@ -556,7 +556,7 @@ namespace __gnu_cxx\n      int \n      __capture_isunordered(_Tp __f1, _Tp __f2) \n      { return isunordered(__f1, __f2); }\n-} // namespace __gnu_cxx\n+} \n #endif\n \n #undef fpclassify\n@@ -651,3 +651,6 @@ namespace std\n #endif\n \n #endif\n+\n+\n+"}, {"sha": "03d82214934d68db0cb61c002221c2aade6febbb", "filename": "libstdc++-v3/include/c_std/bits/std_cstdio.h", "status": "modified", "additions": 84, "deletions": 62, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -34,106 +34,128 @@\n #ifndef _CPP_CSTDIO\n #define _CPP_CSTDIO 1\n \n+#include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n \n #pragma GCC system_header\n #include_next <stdio.h>\n \n // Get rid of those macros defined in <stdio.h> in lieu of real functions.\n-#undef remove\n-#undef rename\n-#undef tmpfile\n-#undef tmpnam\n+#undef clearerr\n #undef fclose\n+#undef feof\n+#undef ferror\n #undef fflush\n-#undef fopen\n-#undef freopen\n-#undef setbuf\n-#undef setvbuf\n-#undef fprintf\n-#undef fscanf\n-#undef printf\n-#undef scanf\n-#undef sprintf\n-#undef sscanf\n-#undef vfprintf\n-#undef vfscanf\n-#undef vprintf\n-#undef vscanf\n-#undef vsprintf\n-#undef vsscanf\n #undef fgetc\n+#undef fgetpos\n #undef fgets\n+#undef fopen\n+#undef fprintf\n #undef fputc\n #undef fputs\n+#undef fread\n+#undef freopen\n+#undef fscanf\n+#undef fseek\n+#undef fsetpos\n+#undef ftell\n+#undef fwrite\n #undef getc\n #undef getchar\n #undef gets\n+#undef perror\n+#undef printf\n #undef putc\n #undef putchar\n #undef puts\n-#undef ungetc\n-#undef fread\n-#undef fwrite\n-#undef fgetpos\n-#undef fseek\n-#undef fsetpos\n-#undef ftell\n+#undef remove\n+#undef rename\n #undef rewind\n-#undef clearerr\n-#undef feof\n-#undef ferror\n-#undef perror\n+#undef scanf\n+#undef setbuf\n+#undef setvbuf\n+#undef sprintf\n+#undef sscanf\n+#undef tmpfile\n+#undef tmpnam\n+#undef ungetc\n+#undef vfprintf\n+#undef vprintf\n+#undef vsprintf\n \n namespace std \n {\n   using ::FILE;\n   using ::fpos_t;\n \n-  using ::remove;\n-  using ::rename;\n-  using ::tmpfile;\n-  using ::tmpnam;\n+  using ::clearerr;\n   using ::fclose;\n+  using ::feof;\n+  using ::ferror;\n   using ::fflush;\n-  using ::fopen;\n-  using ::freopen;\n-  using ::setbuf;\n-  using ::setvbuf;\n-  using ::fprintf;\n-  using ::fscanf;\n-  using ::printf;\n-  using ::scanf;\n-  using ::sprintf;\n-  using ::sscanf;\n-  using ::vfprintf;\n-  using ::vfscanf;\n-  using ::vprintf;\n-  using ::vscanf;\n-  using ::vsprintf;\n-  using ::vsscanf;\n   using ::fgetc;\n+  using ::fgetpos;\n   using ::fgets;\n+  using ::fopen;\n+  using ::fprintf;\n   using ::fputc;\n   using ::fputs;\n+  using ::fread;\n+  using ::freopen;\n+  using ::fscanf;\n+  using ::fseek;\n+  using ::fsetpos;\n+  using ::ftell;\n+  using ::fwrite;\n   using ::getc;\n   using ::getchar;\n   using ::gets;\n+  using ::perror;\n+  using ::printf;\n   using ::putc;\n   using ::putchar;\n   using ::puts;\n-  using ::ungetc;\n-  using ::fread;\n-  using ::fwrite;\n-  using ::fgetpos;\n-  using ::fseek;\n-  using ::fsetpos;\n-  using ::ftell;\n+  using ::remove;\n+  using ::rename;\n   using ::rewind;\n-  using ::clearerr;\n-  using ::feof;\n-  using ::ferror;\n-  using ::perror;\n+  using ::scanf;\n+  using ::setbuf;\n+  using ::setvbuf;\n+  using ::sprintf;\n+  using ::sscanf;\n+  using ::tmpfile;\n+  using ::tmpnam;\n+  using ::ungetc;\n+  using ::vfprintf;\n+  using ::vprintf;\n+  using ::vsprintf;\n+}\n+\n+#if _GLIBCPP_USE_C99\n+\n+#undef snprintf\n+#undef vfscanf\n+#undef vscanf\n+#undef vsnprintf\n+#undef vsscanf\n+\n+namespace __gnu_cxx\n+{\n+  using ::snprintf;\n+  using ::vfscanf;\n+  using ::vscanf;\n+  using ::vsnprintf;\n+  using ::vsscanf;\n+}\n+\n+namespace std\n+{\n+  using __gnu_cxx::snprintf;\n+  using __gnu_cxx::vfscanf;\n+  using __gnu_cxx::vscanf;\n+  using __gnu_cxx::vsnprintf;\n+  using __gnu_cxx::vsscanf;\n }\n+#endif \n \n #endif"}, {"sha": "d123b8ddd7b5e7779a259078ba151fabaf47872d", "filename": "libstdc++-v3/include/c_std/bits/std_cstdlib.h", "status": "modified", "additions": 50, "deletions": 53, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -41,92 +41,91 @@\n #include_next <stdlib.h>\n \n // Get rid of those macros defined in <stdlib.h> in lieu of real functions.\n+#undef abort\n+#undef abs\n+#undef atexit\n #undef atof\n #undef atoi\n #undef atol\n-#undef strtod\n-#undef strtof\n-#undef strtol\n-#undef strtoul\n-#undef rand\n-#undef srand\n+#undef bsearch\n #undef calloc\n-#undef free\n-#undef malloc\n-#undef realloc\n-#undef abort\n-#undef atexit\n+#undef div\n #undef exit\n-//#undef _Exit\n+#undef free\n #undef getenv\n-#undef system\n-#undef bsearch\n-#undef qsort\n-#undef abs\n #undef labs\n-#undef llabs\n-#undef div\n #undef ldiv\n-#undef lldiv\n+#undef malloc\n #undef mblen\n-#undef mbtowc\n-#undef wctomb\n #undef mbstowcs\n+#undef mbtowc\n+#undef qsort\n+#undef rand\n+#undef realloc\n+#undef srand\n+#undef strtod\n+#undef strtol\n+#undef strtoul\n+#undef system\n #undef wcstombs\n-#undef atoll\n-#undef strtoll\n-#undef strtoull\n-#undef strtold\n+#undef wctomb\n \n namespace std \n {\n   using ::div_t;\n   using ::ldiv_t;\n \n+  using ::abort;\n+  using ::abs;\n+  using ::atexit;\n   using ::atof;\n   using ::atoi;\n   using ::atol;\n-  using ::strtod;\n-#if _GLIBCPP_HAVE_STRTOF\n-  using ::strtof;\n-#endif\n-  using ::strtol;\n-  using ::strtoul;\n-  using ::rand;\n-  using ::srand;\n+  using ::bsearch;\n   using ::calloc;\n-  using ::free;\n-  using ::malloc;\n-  using ::realloc;\n-  using ::abort;\n-  using ::atexit;\n+  using ::div;\n   using ::exit;\n-  // using ::_Exit;\n+  using ::free;\n   using ::getenv;\n-  using ::system;\n-  using ::bsearch;\n-  using ::qsort;\n-  using ::abs;\n   using ::labs;\n-  using ::div;\n   using ::ldiv;\n+  using ::malloc;\n   using ::mblen;\n-  using ::mbtowc;\n-  using ::wctomb;\n   using ::mbstowcs;\n+  using ::mbtowc;\n+  using ::qsort;\n+  using ::rand;\n+  using ::realloc;\n+  using ::srand;\n+  using ::strtod;\n+  using ::strtol;\n+  using ::strtoul;\n+  using ::system;\n   using ::wcstombs;\n+  using ::wctomb;\n \n   inline long \n   abs(long __i) { return labs(__i); }\n \n   inline ldiv_t\n   div(long __i, long __j) { return ldiv(__i, __j); }\n-} // namespace std\n+} \n \n #if _GLIBCPP_USE_C99\n+\n+#undef _Exit\n+#undef llabs\n+#undef lldiv\n+#undef atoll\n+#undef strtoll\n+#undef strtoull\n+#undef strtof\n+#undef strtold\n+\n namespace __gnu_cxx\n {\n   using ::lldiv_t;\n+  using ::_Exit;\n \n   inline long long \n   abs(long long __x) { return __x >= 0 ? __x : -__x; }\n@@ -143,27 +142,25 @@ namespace __gnu_cxx\n   { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n \n   using ::atoll;\n+  using ::strtof;\n   using ::strtoll;\n   using ::strtoull;\n-\n-#ifdef _GLIBCPP_HAVE_STRTOLD\n   using ::strtold; \n-#endif\n-} // namespace __gnu_cxx\n+} \n \n namespace std\n {\n   using __gnu_cxx::lldiv_t;\n+  using __gnu_cxx::_Exit;\n   using __gnu_cxx::abs;\n   using __gnu_cxx::llabs; \n   using __gnu_cxx::div;\n   using __gnu_cxx::lldiv;\n   using __gnu_cxx::atoll;\n+  using __gnu_cxx::strtof;\n   using __gnu_cxx::strtoll;\n   using __gnu_cxx::strtoull;\n-#ifdef _GLIBCPP_HAVE_STRTOLD\n   using __gnu_cxx::strtold;\n-#endif\n }\n #endif\n "}, {"sha": "7d286d74748c8a98b07fdc98718f11614797ed37", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c7194612d105be0b93e3f39e909cf16819f9f1/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=61c7194612d105be0b93e3f39e909cf16819f9f1", "patch": "@@ -112,7 +112,6 @@ namespace std\n #undef wmemmove\n #undef wmemset\n #undef wcsftime\n-\n #undef wcschr\n #undef wcspbrk\n #undef wcsrchr\n@@ -212,6 +211,11 @@ namespace std\n }\n \n #if _GLIBCPP_USE_C99\n+\n+#undef wcstold\n+#undef wcstoll\n+#undef wcstoull\n+\n namespace __gnu_cxx\n {\n   using ::wcstold;"}]}