{"sha": "a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlMWFhMjZkOWYyYTJmNWY3N2MxYmZkZTdjMzNhYzcxMDQxMjRmZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-09-14T15:15:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-09-14T15:15:34Z"}, "message": "tree-ssa-dom.c (stmts_to_rescan): Move from a block-local varray to a global varray.\n\n        * tree-ssa-dom.c (stmts_to_rescan): Move from a block-local varray\n        to a global varray.\n        (tree_ssa_dominator_optimize): Allocate stmts_to_rescan.\n        (dom_opt_initialize_block_local_data): No longer test stmts_to_rescan's\n        state.\n        (dom_opt_finalize_block): Update due to change in scope of\n        stmts_to_rescan.\n        (optimize_stmt): Similarly.\n\nFrom-SVN: r87494", "tree": {"sha": "797fdf099c38404a6c2542855513fae5c3882cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/797fdf099c38404a6c2542855513fae5c3882cb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff/comments", "author": null, "committer": null, "parents": [{"sha": "13795658b50234d99cf2b671214000131b132952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13795658b50234d99cf2b671214000131b132952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13795658b50234d99cf2b671214000131b132952"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "04439d01d177217ef3fe73ff831639208288acb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "patch": "@@ -1,3 +1,14 @@\n+2004-09-14  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (stmts_to_rescan): Move from a block-local\n+\tto a global varray.  \n+\t(tree_ssa_dominator_optimize): Allocate stmts_to_rescan.\n+\t(dom_opt_initialize_block_local_data): No longer test state\n+\tof stmts_to_rescan.\n+\t(dom_opt_finalize_block): Update due to change in scope of\n+\tstmts_to_rescan.\n+\t(optimize_stmt): Similarly.\n+\n 2004-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cgraph.h, cgraphunit.c, fold-const.c, lambda-mat.c,"}, {"sha": "342e68f7b365f1bb4325fc4fa37e3e396ff69507", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "patch": "@@ -53,6 +53,15 @@ Boston, MA 02111-1307, USA.  */\n    in this table.  */\n static htab_t avail_exprs;\n \n+/* Stack of statements we need to rescan during finalization for newly\n+   exposed variables.\n+\n+   Statement rescanning must occur after the current block's available\n+   expressions are removed from AVAIL_EXPRS.  Else we may change the\n+   hash code for an expression and be unable to find/remove it from\n+   AVAIL_EXPRS.  */\n+varray_type stmts_to_rescan;\n+\n /* Structure for entries in the expression hash table.\n \n    This requires more memory for the hash table entries, but allows us\n@@ -185,10 +194,6 @@ struct dom_walk_block_data\n      restored during finalization.  */\n   varray_type nonzero_vars;\n \n-  /* Array of statements we need to rescan during finalization for newly\n-     exposed variables.  */\n-  varray_type stmts_to_rescan;\n-\n   /* Array of variables which have their values constrained by operations\n      in this basic block.  We use this during finalization to know\n      which variables need their VRP data updated.  */\n@@ -313,6 +318,7 @@ tree_ssa_dominator_optimize (void)\n   nonzero_vars = BITMAP_XMALLOC ();\n   VARRAY_GENERIC_PTR_INIT (vrp_data, num_ssa_names, \"vrp_data\");\n   need_eh_cleanup = BITMAP_XMALLOC ();\n+  VARRAY_TREE_INIT (stmts_to_rescan, 20, \"Statements to rescan\");\n \n   /* Setup callbacks for the generic dominator tree walker.  */\n   walk_data.walk_stmts_backward = false;\n@@ -730,8 +736,6 @@ dom_opt_initialize_block_local_data (struct dom_walk_data *walk_data ATTRIBUTE_U\n \t\t  || VARRAY_ACTIVE_SIZE (bd->const_and_copies) == 0);\n       gcc_assert (!bd->nonzero_vars\n \t\t  || VARRAY_ACTIVE_SIZE (bd->nonzero_vars) == 0);\n-      gcc_assert (!bd->stmts_to_rescan\n-\t\t  || VARRAY_ACTIVE_SIZE (bd->stmts_to_rescan) == 0);\n       gcc_assert (!bd->vrp_variables\n \t\t  || VARRAY_ACTIVE_SIZE (bd->vrp_variables) == 0);\n       gcc_assert (!bd->block_defs\n@@ -1046,12 +1050,17 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n       VARRAY_POP (bd->vrp_variables);\n     }\n \n-  /* Re-scan operands in all statements that may have had new symbols\n-     exposed.  */\n-  while (bd->stmts_to_rescan && VARRAY_ACTIVE_SIZE (bd->stmts_to_rescan) > 0)\n+  /* If we queued any statements to rescan in this block, then\n+     go ahead and rescan them now.  */\n+  while (VARRAY_ACTIVE_SIZE (stmts_to_rescan) > 0)\n     {\n-      tree stmt = VARRAY_TOP_TREE (bd->stmts_to_rescan);\n-      VARRAY_POP (bd->stmts_to_rescan);\n+      tree stmt = VARRAY_TOP_TREE (stmts_to_rescan);\n+      basic_block stmt_bb = bb_for_stmt (stmt);\n+\n+      if (stmt_bb != bb)\n+\tbreak;\n+\n+      VARRAY_POP (stmts_to_rescan);\n       mark_new_vars_to_rename (stmt, vars_to_rename);\n     }\n }\n@@ -2850,11 +2859,7 @@ optimize_stmt (struct dom_walk_data *walk_data, basic_block bb,\n     }\n \n   if (may_have_exposed_new_symbols)\n-    {\n-      if (! bd->stmts_to_rescan)\n-\tVARRAY_TREE_INIT (bd->stmts_to_rescan, 20, \"stmts_to_rescan\");\n-      VARRAY_PUSH_TREE (bd->stmts_to_rescan, bsi_stmt (si));\n-    }\n+    VARRAY_PUSH_TREE (stmts_to_rescan, bsi_stmt (si));\n }\n \n /* Replace the RHS of STMT with NEW_RHS.  If RHS can be found in the"}]}