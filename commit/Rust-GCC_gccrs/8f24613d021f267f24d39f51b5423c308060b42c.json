{"sha": "8f24613d021f267f24d39f51b5423c308060b42c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyNDYxM2QwMjFmMjY3ZjI0ZDM5ZjUxYjU0MjNjMzA4MDYwYjQyYw==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2013-10-30T20:01:47Z"}, "committer": {"name": "Cong Hou", "email": "congh@gcc.gnu.org", "date": "2013-10-30T20:01:47Z"}, "message": "re PR target/58762 ([missed optimization] Vectorizing abs(int).)\n\n2013-10-30  Cong Hou  <congh@google.com>\n\n    PR target/58762\n    * config/i386/i386-protos.h (ix86_expand_sse2_abs): New function.\n    * config/i386/i386.c (ix86_expand_sse2_abs): New function.\n    * config/i386/sse.md: Add SSE2 support to abs (8/16/32-bit-int).\n\n2013-10-30  Cong Hou  <congh@google.com>\n\n    * gcc.target/i386/vect-abs-s8.c: New test.\n    * gcc.target/i386/vect-abs-s16.c: New test.\n    * gcc.target/i386/vect-abs-s32.c: New test.\n\nFrom-SVN: r204229", "tree": {"sha": "4d5c5a0a6bd64a5d027d233c09decc80c1aef2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d5c5a0a6bd64a5d027d233c09decc80c1aef2b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f24613d021f267f24d39f51b5423c308060b42c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f24613d021f267f24d39f51b5423c308060b42c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f24613d021f267f24d39f51b5423c308060b42c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f24613d021f267f24d39f51b5423c308060b42c/comments", "author": null, "committer": null, "parents": [{"sha": "afbb631e67b011f5d68dabf3f42bfca846f27fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afbb631e67b011f5d68dabf3f42bfca846f27fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afbb631e67b011f5d68dabf3f42bfca846f27fc1"}], "stats": {"total": 118, "additions": 117, "deletions": 1}, "files": [{"sha": "0bf4cbc56d5b478628c2e1cb3d9ce9a3e2f153a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -1,3 +1,10 @@\n+2013-10-30  Cong Hou  <congh@google.com>\n+\n+\tPR target/58762\n+\t* config/i386/i386-protos.h (ix86_expand_sse2_abs): New function.\n+\t* config/i386/i386.c (ix86_expand_sse2_abs): New function.\n+\t* config/i386/sse.md: Add SSE2 support to abs (8/16/32-bit-int).\n+\n 2013-10-18  Mikael Pettersson  <mikpelinux@gmail.com>\n \n \tPR rtl-optimization/58369"}, {"sha": "5799251404bed6e2b0f003f9f5f260f604d2b3f3", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -240,6 +240,7 @@ extern void ix86_expand_mul_widen_evenodd (rtx, rtx, rtx, bool, bool);\n extern void ix86_expand_mul_widen_hilo (rtx, rtx, rtx, bool, bool);\n extern void ix86_expand_sse2_mulv4si3 (rtx, rtx, rtx);\n extern void ix86_expand_sse2_mulvxdi3 (rtx, rtx, rtx);\n+extern void ix86_expand_sse2_abs (rtx, rtx);\n \n extern bool ix86_bnd_prefixed_insn_p (rtx);\n "}, {"sha": "3131efd2b5ccf7f8ebdd78d43395468a54365a5b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -42020,6 +42020,53 @@ ix86_bnd_prefixed_insn_p (rtx insn ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+void\n+ix86_expand_sse2_abs (rtx op0, rtx op1)\n+{\n+  enum machine_mode mode = GET_MODE (op0);\n+  rtx tmp0, tmp1;\n+\n+  switch (mode)\n+    {\n+      /* For 32-bit signed integer X, the best way to calculate the absolute\n+\t value of X is (((signed) X >> (W-1)) ^ X) - ((signed) X >> (W-1)).  */\n+      case V4SImode:\n+\ttmp0 = expand_simple_binop (mode, ASHIFTRT, op1,\n+\t\t\t\t    GEN_INT (GET_MODE_BITSIZE\n+\t\t\t\t\t\t (GET_MODE_INNER (mode)) - 1),\n+\t\t\t\t    NULL, 0, OPTAB_DIRECT);\n+\tif (tmp0)\n+\t  tmp1 = expand_simple_binop (mode, XOR, op1, tmp0,\n+\t\t\t\t      NULL, 0, OPTAB_DIRECT);\n+\tif (tmp0 && tmp1)\n+\t  expand_simple_binop (mode, MINUS, tmp1, tmp0,\n+\t\t\t       op0, 0, OPTAB_DIRECT);\n+\tbreak;\n+\n+      /* For 16-bit signed integer X, the best way to calculate the absolute\n+\t value of X is max (X, -X), as SSE2 provides the PMAXSW insn.  */\n+      case V8HImode:\n+\ttmp0 = expand_unop (mode, neg_optab, op1, NULL_RTX, 0);\n+\tif (tmp0)\n+\t  expand_simple_binop (mode, SMAX, op1, tmp0, op0, 0,\n+\t\t\t       OPTAB_DIRECT);\n+\tbreak;\n+\n+      /* For 8-bit signed integer X, the best way to calculate the absolute\n+\t value of X is min ((unsigned char) X, (unsigned char) (-X)),\n+\t as SSE2 provides the PMINUB insn.  */\n+      case V16QImode:\n+\ttmp0 = expand_unop (mode, neg_optab, op1, NULL_RTX, 0);\n+\tif (tmp0)\n+\t  expand_simple_binop (V16QImode, UMIN, op1, tmp0, op0, 0,\n+\t\t\t       OPTAB_DIRECT);\n+\tbreak;\n+\n+      default:\n+\tbreak;\n+    }\n+}\n+\n /* Expand an insert into a vector register through pinsr insn.\n    Return true if successful.  */\n "}, {"sha": "584a01116e6b35e9eb1fdf6530bdcfc4ab879b8a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -10270,7 +10270,7 @@\n    (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"abs<mode>2\"\n+(define_insn \"*abs<mode>2\"\n   [(set (match_operand:VI124_AVX2_48_AVX512F 0 \"register_operand\" \"=v\")\n \t(abs:VI124_AVX2_48_AVX512F\n \t  (match_operand:VI124_AVX2_48_AVX512F 1 \"nonimmediate_operand\" \"vm\")))]\n@@ -10282,6 +10282,19 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"abs<mode>2\"\n+  [(set (match_operand:VI124_AVX2_48_AVX512F 0 \"register_operand\")\n+\t(abs:VI124_AVX2_48_AVX512F\n+\t  (match_operand:VI124_AVX2_48_AVX512F 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE2\"\n+{\n+  if (!TARGET_SSSE3)\n+    {\n+      ix86_expand_sse2_abs (operands[0], operands[1]);\n+      DONE;\n+    }\n+})\n+\n (define_insn \"abs<mode>2\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n \t(abs:MMXMODEI"}, {"sha": "2b56fbf8b90b7d5a5fbb2684003f6b3bafaffb22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -1,3 +1,9 @@\n+2013-10-30  Cong Hou  <congh@google.com>\n+\n+\t* gcc.target/i386/vect-abs-s8.c: New test.\n+\t* gcc.target/i386/vect-abs-s16.c: New test.\n+\t* gcc.target/i386/vect-abs-s32.c: New test.\n+\n 2013-10-30  Tobias Burnus  <burnus@net-b.de>\n \n \t* gcc.dg/cilk-plus/cilk-plus.exp: Add the libcilkrts library"}, {"sha": "191ae3434e44f667773370b8c5cec264a2222ecf", "filename": "gcc/testsuite/gcc.target/i386/vect-abs-s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s16.c?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2 -mno-sse3 -fdump-tree-vect-details\" } */\n+\n+\n+void test (short* a, short* b)\n+{\n+  int i;\n+  for (i = 0; i < 10000; ++i)\n+    a[i] = abs (b[i]);\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "575e8efe0a8e031c94be42959ed8e34d46407cfe", "filename": "gcc/testsuite/gcc.target/i386/vect-abs-s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s32.c?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2 -mno-sse3 -fdump-tree-vect-details\" } */\n+\n+\n+void test (int* a, int* b)\n+{\n+  int i;\n+  for (i = 0; i < 10000; ++i)\n+    a[i] = abs (b[i]);\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3f3f3facb7940f9ce9906787fdb0dd965ba46c81", "filename": "gcc/testsuite/gcc.target/i386/vect-abs-s8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f24613d021f267f24d39f51b5423c308060b42c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-abs-s8.c?ref=8f24613d021f267f24d39f51b5423c308060b42c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2 -mno-sse3 -fdump-tree-vect-details\" } */\n+\n+\n+void test (char* a, char* b)\n+{\n+  int i;\n+  for (i = 0; i < 10000; ++i)\n+    a[i] = abs (b[i]);\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}