{"sha": "3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3M2QwMWMzZDFjM2I3NTk4MDBhM2ZjMmY2MWI5MmIwMmU4Njg4Yg==", "commit": {"author": {"name": "Martin v. Loewis", "email": "martin@loewis.home.cs.tu-berlin.de", "date": "1999-12-30T03:44:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-12-30T03:44:13Z"}, "message": "Restore i386 binary compatibility in Dwarf EH info.\n\n        * config/i386/i386.h (DWARF_FRAME_REGISTERS): Define as 17, the old\n        value of FIRST_PSEUDO_REGISTER.\n        * frame.h (DWARF_FRAME_REGISTERS): Default to FIRST_PSEUDO_REGISTER.\n        (struct frame_state): Use DWARF_FRAME_REGISTERS.\n        * dwarfout.c (output_reg_number): Ditto.\n        * dwarf2out.c (reg_number, expand_builtin_init_dwarf_reg_sizes): Ditto.\n        (DWARF_FRAME_RETURN_COLUMN): Default to DWARF_FRAME_REGISTERS.\n\nFrom-SVN: r31127", "tree": {"sha": "eefe171f502d384bf2c0b7cd9b7fbfe932b3f202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eefe171f502d384bf2c0b7cd9b7fbfe932b3f202"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/comments", "author": null, "committer": null, "parents": [{"sha": "87ad679bfb5aecb457aab8e7abf6030b82a020d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ad679bfb5aecb457aab8e7abf6030b82a020d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ad679bfb5aecb457aab8e7abf6030b82a020d6"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "b5be793756649540cf507b8a4ab910a1f306949c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "patch": "@@ -1,3 +1,13 @@\n+1999-12-29  \"Martin v. Loewis\" <martin@loewis.home.cs.tu-berlin.de>\n+\n+\tRestore i386 binary compatibility in Dwarf EH info.\n+\t* config/i386/i386.h (DWARF_FRAME_REGISTERS): Define as 17, the old\n+\tvalue of FIRST_PSEUDO_REGISTER.\n+\t* frame.h (DWARF_FRAME_REGISTERS): Default to FIRST_PSEUDO_REGISTER.\n+\t(struct frame_state): Use DWARF_FRAME_REGISTERS.\n+\t* dwarfout.c (output_reg_number): Ditto.\n+\t* dwarf2out.c (reg_number, expand_builtin_init_dwarf_reg_sizes): Ditto.\n+\t(DWARF_FRAME_RETURN_COLUMN): Default to DWARF_FRAME_REGISTERS.\n \n 1999-12-29  Bruce Korb  <autogen@linuxbox.com>\n "}, {"sha": "1d911f060d4e91bd83642d84cf6d657339ced4e0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "patch": "@@ -612,6 +612,11 @@ extern int ix86_arch;\n \n #define FIRST_PSEUDO_REGISTER 19\n \n+/* Number of hardware registers that go into the DWARF-2 unwind info.\n+   If not defined, equals FIRST_PSEUDO_REGISTER.  */\n+\n+#define DWARF_FRAME_REGISTERS 17\n+\n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n    On the 80386, the stack pointer is such, as is the arg pointer. */"}, {"sha": "f4fae3341a0d32656090ba6fa4d346067b476c1d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "patch": "@@ -515,7 +515,7 @@ static void dwarf2out_frame_debug_expr\tPROTO((rtx, char *));\n #ifdef PC_REGNUM\n #define DWARF_FRAME_RETURN_COLUMN \tDWARF_FRAME_REGNUM (PC_REGNUM)\n #else\n-#define DWARF_FRAME_RETURN_COLUMN \tFIRST_PSEUDO_REGISTER\n+#define DWARF_FRAME_RETURN_COLUMN \tDWARF_FRAME_REGISTERS\n #endif\n #endif\n \n@@ -566,7 +566,7 @@ reg_number (rtl)\n {\n   register unsigned regno = REGNO (rtl);\n \n-  if (regno >= FIRST_PSEUDO_REGISTER)\n+  if (regno >= DWARF_FRAME_REGISTERS)\n     {\n       warning (\"internal regno botch: regno = %d\\n\", regno);\n       regno = 0;\n@@ -587,7 +587,7 @@ expand_builtin_init_dwarf_reg_sizes (address)\n   rtx addr = expand_expr (address, NULL_RTX, VOIDmode, 0);\n   rtx mem = gen_rtx_MEM (mode, addr);\n \n-  for (i = 0; i < FIRST_PSEUDO_REGISTER; ++i)\n+  for (i = 0; i < DWARF_FRAME_REGISTERS; ++i)\n     {\n       int offset = i * GET_MODE_SIZE (mode);\n       int size = GET_MODE_SIZE (reg_raw_mode[i]);"}, {"sha": "f5b0fb5a75b6fa32f7cb42be3f1ff0dbdafc7de6", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "patch": "@@ -1680,7 +1680,7 @@ output_reg_number (rtl)\n {\n   register unsigned regno = REGNO (rtl);\n \n-  if (regno >= FIRST_PSEUDO_REGISTER)\n+  if (regno >= DWARF_FRAME_REGISTERS)\n     {\n       warning_with_decl (dwarf_last_decl, \"internal regno botch: regno = %d\\n\",\n \t\t\t regno);"}, {"sha": "330277c03f2390e652d234672f6a49bf62ac5f3a", "filename": "gcc/frame.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fframe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3073d01c3d1c3b759800a3fc2f61b92b02e8688b/gcc%2Fframe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.h?ref=3073d01c3d1c3b759800a3fc2f61b92b02e8688b", "patch": "@@ -1,6 +1,6 @@\n /* Header file for unwinding stack frames for exception handling.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GNU CC.\n@@ -21,16 +21,20 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n+#ifndef DWARF_FRAME_REGISTERS\n+#define DWARF_FRAME_REGISTERS FIRST_PSEUDO_REGISTER\n+#endif\n+\n typedef struct frame_state\n {\n   void *cfa;\n   void *eh_ptr;\n   long cfa_offset;\n   long args_size;\n-  long reg_or_offset[FIRST_PSEUDO_REGISTER+1];\n+  long reg_or_offset[DWARF_FRAME_REGISTERS+1];\n   unsigned short cfa_reg;\n   unsigned short retaddr_column;\n-  char saved[FIRST_PSEUDO_REGISTER+1];\n+  char saved[DWARF_FRAME_REGISTERS+1];\n } frame_state;\n \n /* Values for 'saved' above.  */"}]}