{"sha": "824e9320157031e3969aabe742cfddd38a0513cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0ZTkzMjAxNTcwMzFlMzk2OWFhYmU3NDJjZmRkZDM4YTA1MTNjZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T07:45:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T07:45:20Z"}, "message": "[multiple changes]\n\n2011-08-04  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-proc.adb, prj-nmsc.adb, prj-env.adb (Process_Declarative_Items):\n\tAdd support for overriding the Project_Path in aggregate projects.\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* a-cofove.ads: Minor reformatting.\n\n2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Build_Adjust_Or_Finalize_Statements): Update the comment\n\ton the generated code.\n\t(Build_Finalize_Statements): Update the comment on the generated code.\n\t(Build_Initialize_Statements): Update the comment on the generated code.\n\t(Build_Object_Declarations): Add local variable Result. The object\n\tdeclarations are now built in sequence.\n\t* rtsfind.ads: Add RE_Exception_Occurrence_Access to tables RE_Id and\n\tRE_Unit_Table.\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb, alfa.adb, alfa.ads: Minor reformatting.\n\n2011-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* einfo.ads (Elaboration_Entity): Document new definition and use.\n\t(Elaboration_Entity_Required): Adjust to above change.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Likewise.\n\t* exp_ch12.adb: And with and use for Snames.\n\t(Expand_N_Generic_Instantiation): Test 'Elaborated attribute.\n\t* exp_util.adb (Set_Elaboration_Flag): Likewise.\n\t* sem_attr.adb (Analyze_Attribute) <Check_Library_Unit>: Delete.\n\t<Check_Unit_Name>: Deal with N_Expanded_Name.\n\t<Attribute_Elaborated>: Extend to all unit names.\n\t* sem_elab.adb: And with and use for Uintp.\n\t(Check_Internal_Call_Continue): Adjust to Elaboration_Entity change.\n\t* sem_util.ads (Build_Elaboration_Entity): Adjust comment.\n\t* sem_util.adb (Build_Elaboration_Entity): Change type to Integer.\n\t* bindgen.adb (Gen_Elab_Externals_Ada): New local subprogram taken\n\tfrom Gen_Adainit_Ada.\n\t(Gen_Elab_Externals_C): Likewise, but taken from Gen_Adainit_C.\n\t(Gen_Adafinal_Ada): Remove redundant test.  In the non-main program\n\tcase, do not call System.Standard_Library.Adafinal; instead call\n\tfinalize_library if needed.\n\t(Gen_Adafinal_C): Likewise.\n\t(Gen_Adainit_Ada): Do not set SSL.Finalize_Library_Objects in the\n\tnon-main program case.\n\t(Gen_Adainit_C): Generate a couple of external declarations here.\n\tIn the main program case, set SSL.Finalize_Library_Objects.\n\t(Gen_Elab_Calls_Ada): Adjust to Elaboration_Entity change.\n\t(Gen_Elab_Calls_C): Likewise.\n\t(Gen_Finalize_Library_Ada): Likewise.  Skip SAL interface units.\n\t(Gen_Finalize_Library_C): Likewise.  Generate a full function.\n\t(Gen_Main_C): Put back call to Ada_Final and don't finalize library\n\tobjects here.\n\t(Gen_Output_File_Ada): Generate pragma Linker_Destructor for Ada_Final\n\tif -a is specified.  Call Gen_Elab_Externals_Ada.  Move around call to\n\tGen_Adafinal_Ada.\n\t(Gen_Output_File_C): Generate __attribute__((destructor)) for Ada_Final\n\tif -a is specified.  Call Gen_Elab_Externals_C.  Remove useless couple\n\tof external declarations. \u00a0Call Gen_Finalize_Library_C.\n\nFrom-SVN: r177318", "tree": {"sha": "c99f88092f5c194ff8b0d6bd08570d448e0d0837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c99f88092f5c194ff8b0d6bd08570d448e0d0837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/824e9320157031e3969aabe742cfddd38a0513cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824e9320157031e3969aabe742cfddd38a0513cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/824e9320157031e3969aabe742cfddd38a0513cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824e9320157031e3969aabe742cfddd38a0513cd/comments", "author": null, "committer": null, "parents": [{"sha": "316d9d4f9f86acf8fd0e4b22a80d0134c876502a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316d9d4f9f86acf8fd0e4b22a80d0134c876502a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316d9d4f9f86acf8fd0e4b22a80d0134c876502a"}], "stats": {"total": 1067, "additions": 658, "deletions": 409}, "files": [{"sha": "e318a9490a7f19eac91e2358c51dbb0aea1af128", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -1,3 +1,66 @@\n+2011-08-04  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-proc.adb, prj-nmsc.adb, prj-env.adb (Process_Declarative_Items):\n+\tAdd support for overriding the Project_Path in aggregate projects.\n+\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-cofove.ads: Minor reformatting.\n+\n+2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Adjust_Or_Finalize_Statements): Update the comment\n+\ton the generated code.\n+\t(Build_Finalize_Statements): Update the comment on the generated code.\n+\t(Build_Initialize_Statements): Update the comment on the generated code.\n+\t(Build_Object_Declarations): Add local variable Result. The object\n+\tdeclarations are now built in sequence.\n+\t* rtsfind.ads: Add RE_Exception_Occurrence_Access to tables RE_Id and\n+\tRE_Unit_Table.\n+\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb, alfa.adb, alfa.ads: Minor reformatting.\n+\n+2011-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Elaboration_Entity): Document new definition and use.\n+\t(Elaboration_Entity_Required): Adjust to above change.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Likewise.\n+\t* exp_ch12.adb: And with and use for Snames.\n+\t(Expand_N_Generic_Instantiation): Test 'Elaborated attribute.\n+\t* exp_util.adb (Set_Elaboration_Flag): Likewise.\n+\t* sem_attr.adb (Analyze_Attribute) <Check_Library_Unit>: Delete.\n+\t<Check_Unit_Name>: Deal with N_Expanded_Name.\n+\t<Attribute_Elaborated>: Extend to all unit names.\n+\t* sem_elab.adb: And with and use for Uintp.\n+\t(Check_Internal_Call_Continue): Adjust to Elaboration_Entity change.\n+\t* sem_util.ads (Build_Elaboration_Entity): Adjust comment.\n+\t* sem_util.adb (Build_Elaboration_Entity): Change type to Integer.\n+\t* bindgen.adb (Gen_Elab_Externals_Ada): New local subprogram taken\n+\tfrom Gen_Adainit_Ada.\n+\t(Gen_Elab_Externals_C): Likewise, but taken from Gen_Adainit_C.\n+\t(Gen_Adafinal_Ada): Remove redundant test.  In the non-main program\n+\tcase, do not call System.Standard_Library.Adafinal; instead call\n+\tfinalize_library if needed.\n+\t(Gen_Adafinal_C): Likewise.\n+\t(Gen_Adainit_Ada): Do not set SSL.Finalize_Library_Objects in the\n+\tnon-main program case.\n+\t(Gen_Adainit_C): Generate a couple of external declarations here.\n+\tIn the main program case, set SSL.Finalize_Library_Objects.\n+\t(Gen_Elab_Calls_Ada): Adjust to Elaboration_Entity change.\n+\t(Gen_Elab_Calls_C): Likewise.\n+\t(Gen_Finalize_Library_Ada): Likewise.  Skip SAL interface units.\n+\t(Gen_Finalize_Library_C): Likewise.  Generate a full function.\n+\t(Gen_Main_C): Put back call to Ada_Final and don't finalize library\n+\tobjects here.\n+\t(Gen_Output_File_Ada): Generate pragma Linker_Destructor for Ada_Final\n+\tif -a is specified.  Call Gen_Elab_Externals_Ada.  Move around call to\n+\tGen_Adafinal_Ada.\n+\t(Gen_Output_File_C): Generate __attribute__((destructor)) for Ada_Final\n+\tif -a is specified.  Call Gen_Elab_Externals_C.  Remove useless couple\n+\tof external declarations. \ufffdCall Gen_Finalize_Library_C.\n+\n 2011-08-04  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj.adb, prj.ads, makeutl.adb, makeutl.ads (Complete_Mains,"}, {"sha": "24e2944fb7e062c6fdf9719c264fda14d7eab6d6", "filename": "gcc/ada/a-cofove.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.ads?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -143,8 +143,9 @@ package Ada.Containers.Formal_Vectors is\n      (Container : Vector;\n       Index     : Index_Type) return Element_Type;\n \n-   function Element (Container : Vector; Position : Cursor)\n-                     return Element_Type;\n+   function Element\n+     (Container : Vector;\n+      Position  : Cursor) return Element_Type;\n \n    procedure Replace_Element\n      (Container : in out Vector;\n@@ -388,7 +389,7 @@ private\n    for Vector'Read use Read;\n \n    type Cursor is record\n-      Valid : Boolean := True;\n+      Valid : Boolean    := True;\n       Index : Index_Type := Index_Type'First;\n    end record;\n "}, {"sha": "065b7d8c5bb92e7c3b3933965a1587fae80bfde6", "filename": "gcc/ada/alfa.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Falfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Falfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -144,17 +144,6 @@ package body ALFA is\n       end loop;\n    end dalfa;\n \n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   procedure Initialize_ALFA_Tables is\n-   begin\n-      ALFA_File_Table.Init;\n-      ALFA_Scope_Table.Init;\n-      ALFA_Xref_Table.Init;\n-   end Initialize_ALFA_Tables;\n-\n    -------------------------\n    -- Get_Entity_For_Decl --\n    -------------------------\n@@ -223,6 +212,17 @@ package body ALFA is\n       return E;\n    end Get_Unique_Entity_For_Decl;\n \n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize_ALFA_Tables is\n+   begin\n+      ALFA_File_Table.Init;\n+      ALFA_Scope_Table.Init;\n+      ALFA_Xref_Table.Init;\n+   end Initialize_ALFA_Tables;\n+\n    -----------\n    -- palfa --\n    -----------"}, {"sha": "5ad7c61c1a66cd84fb17a87bbc6b70f46ba39303", "filename": "gcc/ada/alfa.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Falfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Falfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.ads?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -316,10 +316,6 @@ package ALFA is\n    -- Subprograms --\n    -----------------\n \n-   procedure dalfa;\n-   --  Debug routine to dump internal ALFA tables. This is a raw format dump\n-   --  showing exactly what the tables contain.\n-\n    procedure Initialize_ALFA_Tables;\n    --  Reset tables for a new compilation\n \n@@ -330,6 +326,10 @@ package ALFA is\n    --  Return the entity which represents declaration N, so that matching\n    --  declaration and body have the same entity.\n \n+   procedure dalfa;\n+   --  Debug routine to dump internal ALFA tables. This is a raw format dump\n+   --  showing exactly what the tables contain.\n+\n    procedure palfa;\n    --  Debugging procedure to output contents of ALFA binary tables in the\n    --  format in which they appear in an ALI file."}, {"sha": "9072e36f06aab9b5314513873948b8d4a0c7da6a", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 380, "deletions": 277, "changes": 657, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -72,6 +72,7 @@ package body Bindgen is\n    --  unit unconditionally, which is unpleasand, especially for ZFP etc.)\n \n    Lib_Final_Built : Boolean := False;\n+   --  Flag indicating whether the finalize_library rountine has been built\n \n    ----------------------------------\n    -- Interface_State Pragma Table --\n@@ -244,6 +245,12 @@ package body Bindgen is\n    procedure Gen_Adafinal_C;\n    --  Generate the Adafinal procedure (C code case)\n \n+   procedure Gen_Elab_Externals_Ada;\n+   --  Generate sequence of external declarations for elaboration (Ada)\n+\n+   procedure Gen_Elab_Externals_C;\n+   --  Generate sequence of external declarations for elaboration (C)\n+\n    procedure Gen_Elab_Calls_Ada;\n    --  Generate sequence of elaboration calls (Ada code case)\n \n@@ -421,13 +428,15 @@ package body Bindgen is\n    begin\n       WBI (\"   procedure \" & Ada_Final_Name.all & \" is\");\n \n-      --  Do nothing if finalization is disabled\n-\n-      if Cumulative_Restrictions.Set (No_Finalization) then\n+      if not Bind_Main_Program then\n          WBI (\"   begin\");\n-         WBI (\"      null;\");\n+         if Lib_Final_Built then\n+            WBI (\"      finalize_library;\");\n+         else\n+            WBI (\"      null;\");\n+         end if;\n \n-      --  General case\n+      --  Main program case\n \n       elsif VM_Target = No_VM then\n          WBI (\"      procedure s_stalib_adafinal;\");\n@@ -455,7 +464,17 @@ package body Bindgen is\n    procedure Gen_Adafinal_C is\n    begin\n       WBI (\"void \" & Ada_Final_Name.all & \" (void) {\");\n-      WBI (\"   system__standard_library__adafinal ();\");\n+\n+      if not Bind_Main_Program then\n+         if Lib_Final_Built then\n+            WBI (\"   finalize_library ();\");\n+         end if;\n+\n+      --  Main program case\n+\n+      else\n+         WBI (\"   system__standard_library__adafinal ();\");\n+      end if;\n       WBI (\"}\");\n       WBI (\"\");\n    end Gen_Adafinal_C;\n@@ -471,86 +490,6 @@ package body Bindgen is\n    begin\n       WBI (\"   procedure \" & Ada_Init_Name.all & \" is\");\n \n-      --  Generate externals for elaboration entities\n-\n-      for E in Elab_Order.First .. Elab_Order.Last loop\n-         declare\n-            Unum : constant Unit_Id := Elab_Order.Table (E);\n-            U    : Unit_Record renames Units.Table (Unum);\n-\n-         begin\n-            --  Check for Elab_Entity to be set for this unit\n-\n-            if U.Set_Elab_Entity\n-\n-            --  Don't generate reference for stand alone library\n-\n-              and then not U.SAL_Interface\n-\n-            --  Don't generate reference for predefined file in No_Run_Time\n-            --  mode, since we don't include the object files in this case\n-\n-              and then not\n-                (No_Run_Time_Mode\n-                   and then Is_Predefined_File_Name (U.Sfile))\n-            then\n-               Set_String (\"      \");\n-               Set_String (\"E\");\n-               Set_Unit_Number (Unum);\n-\n-               case VM_Target is\n-                  when No_VM | JVM_Target =>\n-                     Set_String (\" : Boolean; pragma Import (Ada, \");\n-                  when CLI_Target =>\n-                     Set_String (\" : Boolean; pragma Import (CIL, \");\n-               end case;\n-\n-               Set_String (\"E\");\n-               Set_Unit_Number (Unum);\n-               Set_String (\", \"\"\");\n-               Get_Name_String (U.Uname);\n-\n-               --  In the case of JGNAT we need to emit an Import name that\n-               --  includes the class name (using '$' separators in the case\n-               --  of a child unit name).\n-\n-               if VM_Target /= No_VM then\n-                  for J in 1 .. Name_Len - 2 loop\n-                     if VM_Target = CLI_Target\n-                       or else Name_Buffer (J) /= '.'\n-                     then\n-                        Set_Char (Name_Buffer (J));\n-                     else\n-                        Set_String (\"$\");\n-                     end if;\n-                  end loop;\n-\n-                  if VM_Target /= CLI_Target or else U.Unit_Kind = 's' then\n-                     Set_String (\".\");\n-                  else\n-                     Set_String (\"_pkg.\");\n-                  end if;\n-\n-                  --  If the unit name is very long, then split the\n-                  --  Import link name across lines using \"&\" (occurs\n-                  --  in some C2 tests).\n-\n-                  if 2 * Name_Len + 60 > Hostparm.Max_Line_Length then\n-                     Set_String (\"\"\" &\");\n-                     Write_Statement_Buffer;\n-                     Set_String (\"         \"\"\");\n-                  end if;\n-               end if;\n-\n-               Set_Unit_Name;\n-               Set_String (\"_E\"\");\");\n-               Write_Statement_Buffer;\n-            end if;\n-         end;\n-      end loop;\n-\n-      Write_Statement_Buffer;\n-\n       --  If the standard library is suppressed, then the only global variables\n       --  that might be needed (by the Ravenscar profile) are the priority and\n       --  the processor for the environment task.\n@@ -927,38 +866,39 @@ package body Bindgen is\n          WBI (\"      Initialize_Stack_Limit;\");\n       end if;\n \n-      --  Attach Finalize_Library to the right soft link. Do it only when not\n-      --  using a restricted run time, in which case tasks are\n-      --  non-terminating, so we do not want library-level finalization.\n+      --  In the main program case, attach finalize_library to the soft link.\n+      --  Do it only when not using a restricted run time, in which case tasks\n+      --  are non-terminating, so we do not want library-level finalization.\n \n-      if not Configurable_Run_Time_On_Target then\n-         if not Suppress_Standard_Library_On_Target then\n-            WBI (\"\");\n+      if Bind_Main_Program\n+        and then not Configurable_Run_Time_On_Target\n+        and then not Suppress_Standard_Library_On_Target\n+      then\n+         WBI (\"\");\n \n-            if VM_Target = No_VM then\n-               if Lib_Final_Built then\n-                  Set_String (\"      Finalize_Library_Objects := \");\n-                  Set_String (\"Finalize_Library'access;\");\n-               else\n-                  Set_String (\"      Finalize_Library_Objects := null;\");\n-               end if;\n+         if VM_Target = No_VM then\n+            if Lib_Final_Built then\n+               Set_String (\"      Finalize_Library_Objects := \");\n+               Set_String (\"finalize_library'access;\");\n+            else\n+               Set_String (\"      Finalize_Library_Objects := null;\");\n+            end if;\n \n-            --  On VM targets use regular Ada to set the soft link\n+         --  On VM targets use regular Ada to set the soft link\n \n+         else\n+            if Lib_Final_Built then\n+               Set_String\n+                 (\"      System.Soft_Links.Finalize_Library_Objects\");\n+               Set_String (\" := finalize_library'access;\");\n             else\n-               if Lib_Final_Built then\n-                  Set_String\n-                    (\"      System.Soft_Links.Finalize_Library_Objects\");\n-                  Set_String (\" := Finalize_Library'access;\");\n-               else\n-                  Set_String\n-                    (\"      System.Soft_Links.Finalize_Library_Objects\");\n-                  Set_String (\" := null;\");\n-               end if;\n+               Set_String\n+                 (\"      System.Soft_Links.Finalize_Library_Objects\");\n+               Set_String (\" := null;\");\n             end if;\n-\n-            Write_Statement_Buffer;\n          end if;\n+\n+         Write_Statement_Buffer;\n       end if;\n \n       --  Generate elaboration calls\n@@ -1001,40 +941,6 @@ package body Bindgen is\n       WBI (\"void \" & Ada_Init_Name.all & \" (void)\");\n       WBI (\"{\");\n \n-      --  Generate externals for elaboration entities\n-\n-      for E in Elab_Order.First .. Elab_Order.Last loop\n-         declare\n-            Unum : constant Unit_Id := Elab_Order.Table (E);\n-            U    : Unit_Record renames Units.Table (Unum);\n-\n-         begin\n-            --  Check for Elab entity to be set for this unit\n-\n-            if U.Set_Elab_Entity\n-\n-            --  Don't generate reference for stand alone library\n-\n-              and then not U.SAL_Interface\n-\n-            --  Don't generate reference for predefined file in No_Run_Time\n-            --  mode, since we don't include the object files in this case\n-\n-              and then not\n-                (No_Run_Time_Mode\n-                   and then Is_Predefined_File_Name (U.Sfile))\n-            then\n-               Set_String (\"   extern char \");\n-               Get_Name_String (U.Uname);\n-               Set_Unit_Name;\n-               Set_String (\"_E;\");\n-               Write_Statement_Buffer;\n-            end if;\n-         end;\n-      end loop;\n-\n-      Write_Statement_Buffer;\n-\n       --  Standard library suppressed\n \n       if Suppress_Standard_Library_On_Target then\n@@ -1217,22 +1123,26 @@ package body Bindgen is\n          Set_String (\";\");\n          Write_Statement_Buffer;\n \n+         --  Import entry point for elaboration time signal handler\n+         --  installation, and indication of if it's been called previously.\n+\n+         WBI (\"   extern int __gnat_handler_installed;\");\n          WBI (\"\");\n \n          --  Install elaboration time signal handler\n \n          WBI (\"   if (__gnat_handler_installed == 0)\");\n-         WBI (\"     {\");\n-         WBI (\"        __gnat_install_handler ();\");\n-         WBI (\"     }\");\n+         WBI (\"      __gnat_install_handler ();\");\n \n-         --  Call feature enable/disable routine\n+         --  Import entry point for environment feature enable/disable\n+         --  routine, and indication that it's been called previously.\n \n          if OpenVMS_On_Target then\n+            WBI (\"   extern int __gnat_features_set;\");\n+            WBI (\"\");\n+\n             WBI (\"   if (__gnat_features_set == 0)\");\n-            WBI (\"     {\");\n-            WBI (\"        __gnat_set_features ();\");\n-            WBI (\"     }\");\n+            WBI (\"      __gnat_set_features ();\");\n          end if;\n       end if;\n \n@@ -1269,6 +1179,27 @@ package body Bindgen is\n          Write_Statement_Buffer;\n       end if;\n \n+      --  In the main program case, attach finalize_library to the soft link.\n+      --  Do it only when not using a restricted run time, in which case tasks\n+      --  are non-terminating, so we do not want library-level finalization.\n+\n+      if Bind_Main_Program\n+        and then not Configurable_Run_Time_On_Target\n+        and then not Suppress_Standard_Library_On_Target\n+      then\n+         WBI (\"\");\n+         WBI (\"   extern void (*__gnat_finalize_library_objects)(void);\");\n+\n+         if Lib_Final_Built then\n+            Set_String (\"   __gnat_finalize_library_objects = \");\n+            Set_String (\"&finalize_library;\");\n+         else\n+            Set_String (\"   __gnat_finalize_library_objects = 0;\");\n+         end if;\n+\n+         Write_Statement_Buffer;\n+      end if;\n+\n       --  Generate elaboration calls\n \n       WBI (\"\");\n@@ -1277,6 +1208,130 @@ package body Bindgen is\n       WBI (\"\");\n    end Gen_Adainit_C;\n \n+   ----------------------------\n+   -- Gen_Elab_Externals_Ada --\n+   ----------------------------\n+\n+   procedure Gen_Elab_Externals_Ada is\n+   begin\n+      for E in Elab_Order.First .. Elab_Order.Last loop\n+         declare\n+            Unum : constant Unit_Id := Elab_Order.Table (E);\n+            U    : Unit_Record renames Units.Table (Unum);\n+\n+         begin\n+            --  Check for Elab_Entity to be set for this unit\n+\n+            if U.Set_Elab_Entity\n+\n+            --  Don't generate reference for stand alone library\n+\n+              and then not U.SAL_Interface\n+\n+            --  Don't generate reference for predefined file in No_Run_Time\n+            --  mode, since we don't include the object files in this case\n+\n+              and then not\n+                (No_Run_Time_Mode\n+                   and then Is_Predefined_File_Name (U.Sfile))\n+            then\n+               Set_String (\"   \");\n+               Set_String (\"E\");\n+               Set_Unit_Number (Unum);\n+\n+               case VM_Target is\n+                  when No_VM | JVM_Target =>\n+                     Set_String (\" : Integer; pragma Import (Ada, \");\n+                  when CLI_Target =>\n+                     Set_String (\" : Integer; pragma Import (CIL, \");\n+               end case;\n+\n+               Set_String (\"E\");\n+               Set_Unit_Number (Unum);\n+               Set_String (\", \"\"\");\n+               Get_Name_String (U.Uname);\n+\n+               --  In the case of JGNAT we need to emit an Import name that\n+               --  includes the class name (using '$' separators in the case\n+               --  of a child unit name).\n+\n+               if VM_Target /= No_VM then\n+                  for J in 1 .. Name_Len - 2 loop\n+                     if VM_Target = CLI_Target\n+                       or else Name_Buffer (J) /= '.'\n+                     then\n+                        Set_Char (Name_Buffer (J));\n+                     else\n+                        Set_String (\"$\");\n+                     end if;\n+                  end loop;\n+\n+                  if VM_Target /= CLI_Target or else U.Unit_Kind = 's' then\n+                     Set_String (\".\");\n+                  else\n+                     Set_String (\"_pkg.\");\n+                  end if;\n+\n+                  --  If the unit name is very long, then split the\n+                  --  Import link name across lines using \"&\" (occurs\n+                  --  in some C2 tests).\n+\n+                  if 2 * Name_Len + 60 > Hostparm.Max_Line_Length then\n+                     Set_String (\"\"\" &\");\n+                     Write_Statement_Buffer;\n+                     Set_String (\"         \"\"\");\n+                  end if;\n+               end if;\n+\n+               Set_Unit_Name;\n+               Set_String (\"_E\"\");\");\n+               Write_Statement_Buffer;\n+            end if;\n+         end;\n+      end loop;\n+\n+      WBI (\"\");\n+   end Gen_Elab_Externals_Ada;\n+\n+   --------------------------\n+   -- Gen_Elab_Externals_C --\n+   --------------------------\n+\n+   procedure Gen_Elab_Externals_C is\n+   begin\n+      for E in Elab_Order.First .. Elab_Order.Last loop\n+         declare\n+            Unum : constant Unit_Id := Elab_Order.Table (E);\n+            U    : Unit_Record renames Units.Table (Unum);\n+\n+         begin\n+            --  Check for Elab entity to be set for this unit\n+\n+            if U.Set_Elab_Entity\n+\n+            --  Don't generate reference for stand alone library\n+\n+              and then not U.SAL_Interface\n+\n+            --  Don't generate reference for predefined file in No_Run_Time\n+            --  mode, since we don't include the object files in this case\n+\n+              and then not\n+                (No_Run_Time_Mode\n+                   and then Is_Predefined_File_Name (U.Sfile))\n+            then\n+               Set_String (\"extern int \");\n+               Get_Name_String (U.Uname);\n+               Set_Unit_Name;\n+               Set_String (\"_E;\");\n+               Write_Statement_Buffer;\n+            end if;\n+         end;\n+      end loop;\n+\n+      WBI (\"\");\n+   end Gen_Elab_Externals_C;\n+\n    ------------------------\n    -- Gen_Elab_Calls_Ada --\n    ------------------------\n@@ -1306,51 +1361,55 @@ package body Bindgen is\n             if No_Run_Time_Mode and then Is_Predefined_File_Name (U.Sfile) then\n                null;\n \n+            --  Likewise if this is an interface to a stand alone library\n+\n+            elsif U.SAL_Interface then\n+               null;\n+\n             --  Case of no elaboration code\n \n             elsif U.No_Elab then\n \n-               --  The only case in which we have to do something is if\n-               --  this is a body, with a separate spec, where the separate\n-               --  spec has an elaboration entity defined.\n+               --  The only case in which we have to do something is if this\n+               --  is a body, with a separate spec, where the separate spec\n+               --  has an elaboration entity defined. In that case, this is\n+               --  where we increment the elaboration entity.\n \n-               --  In that case, this is where we set the elaboration entity\n-               --  to True, we do not need to test if this has already been\n-               --  done, since it is quicker to set the flag than to test it.\n-\n-               if not U.SAL_Interface and then U.Utype = Is_Body\n+               if U.Utype = Is_Body\n                  and then Units.Table (Unum_Spec).Set_Elab_Entity\n                then\n                   Set_String (\"      E\");\n                   Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" := True;\");\n+                  Set_String (\" := E\");\n+                  Set_Unit_Number (Unum_Spec);\n+                  Set_String (\" + 1;\");\n                   Write_Statement_Buffer;\n                end if;\n \n             --  Here if elaboration code is present. If binding a library\n             --  or if there is a non-Ada main subprogram then we generate:\n \n-            --    if not uname_E then\n+            --    if uname_E = 0 then\n             --       uname'elab_[spec|body];\n-            --       uname_E := True;\n             --    end if;\n+            --    uname_E := uname_E + 1;\n \n             --  Otherwise, elaboration routines are called unconditionally:\n \n             --    uname'elab_[spec|body];\n-            --    uname_E := True;\n+            --    uname_E := uname_E + 1;\n \n-            --  The uname_E assignment is skipped if this is a separate spec,\n-            --  since the assignment will be done when we process the body.\n+            --  The uname_E increment is skipped if this is a separate spec,\n+            --  since it will be done when we process the body.\n \n-            elsif not U.SAL_Interface then\n+            else\n                if Force_Checking_Of_Elaboration_Flags or\n                   Interface_Library_Unit or\n                   (not Bind_Main_Program)\n                then\n-                  Set_String (\"      if not E\");\n+                  Set_String (\"      if E\");\n                   Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" then\");\n+                  Set_String (\" = 0 then\");\n                   Write_Statement_Buffer;\n                   Set_String (\"   \");\n                end if;\n@@ -1386,26 +1445,21 @@ package body Bindgen is\n                Set_Char (';');\n                Write_Statement_Buffer;\n \n-               if U.Utype /= Is_Spec then\n-                  if Force_Checking_Of_Elaboration_Flags or\n-                     Interface_Library_Unit or\n-                     (not Bind_Main_Program)\n-                  then\n-                     Set_String (\"   \");\n-                  end if;\n-\n-                  Set_String (\"      E\");\n-                  Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" := True;\");\n-                  Write_Statement_Buffer;\n-               end if;\n-\n                if Force_Checking_Of_Elaboration_Flags or\n                   Interface_Library_Unit or\n                   (not Bind_Main_Program)\n                then\n                   WBI (\"      end if;\");\n                end if;\n+\n+               if U.Utype /= Is_Spec then\n+                  Set_String (\"      E\");\n+                  Set_Unit_Number (Unum_Spec);\n+                  Set_String (\" := E\");\n+                  Set_Unit_Number (Unum_Spec);\n+                  Set_String (\" + 1;\");\n+                  Write_Statement_Buffer;\n+               end if;\n             end if;\n          end;\n       end loop;\n@@ -1440,40 +1494,47 @@ package body Bindgen is\n             if No_Run_Time_Mode and then Is_Predefined_File_Name (U.Sfile) then\n                null;\n \n+            --  Likewise if this is an interface to a stand alone library\n+\n+            elsif U.SAL_Interface then\n+               null;\n+\n             --  Case of no elaboration code\n \n             elsif U.No_Elab then\n \n-               --  The only case in which we have to do something is if\n-               --  this is a body, with a separate spec, where the separate\n-               --  spec has an elaboration entity defined.\n+               --  The only case in which we have to do something is if this\n+               --  is a body, with a separate spec, where the separate spec\n+               --  has an elaboration entity defined. In that case, this is\n+               --  where we increment the elaboration entity.\n \n-               --  In that case, this is where we set the elaboration entity\n-               --  to True, we do not need to test if this has already been\n-               --  done, since it is quicker to set the flag than to test it.\n-\n-               if not U.SAL_Interface and then U.Utype = Is_Body\n+               if U.Utype = Is_Body\n                  and then Units.Table (Unum_Spec).Set_Elab_Entity\n                then\n-                  Set_String (\"   \");\n                   Get_Name_String (U.Uname);\n+\n+                  Set_String (\"   \");\n                   Set_Unit_Name;\n-                  Set_String (\"_E = 1;\");\n+                  Set_String (\"_E++;\");\n                   Write_Statement_Buffer;\n                end if;\n \n             --  Here if elaboration code is present. If binding a library\n             --  or if there is a non-Ada main subprogram then we generate:\n \n-            --    if (uname_E == 0) {\n+            --    if (uname_E == 0)\n             --       uname__elab[s|b] ();\n-            --       uname_E++;\n-            --    }\n+            --    uname_E++;\n+\n+            --  Otherwise, elaboration routines are called unconditionally:\n \n-            --  The uname_E assignment is skipped if this is a separate spec,\n-            --  since the assignment will be done when we process the body.\n+            --    uname__elab[s|b] ();\n+            --    uname_E++;\n \n-            elsif not U.SAL_Interface then\n+            --  The uname_E increment is skipped if this is a separate spec,\n+            --  since it will be done when we process the body.\n+\n+            else\n                Get_Name_String (U.Uname);\n \n                if Force_Checking_Of_Elaboration_Flags or\n@@ -1482,7 +1543,7 @@ package body Bindgen is\n                then\n                   Set_String (\"   if (\");\n                   Set_Unit_Name;\n-                  Set_String (\"_E == 0) {\");\n+                  Set_String (\"_E == 0)\");\n                   Write_Statement_Buffer;\n                   Set_String (\"   \");\n                end if;\n@@ -1495,25 +1556,11 @@ package body Bindgen is\n                Write_Statement_Buffer;\n \n                if U.Utype /= Is_Spec then\n-                  if Force_Checking_Of_Elaboration_Flags or\n-                     Interface_Library_Unit or\n-                     (not Bind_Main_Program)\n-                  then\n-                     Set_String (\"   \");\n-                  end if;\n-\n                   Set_String (\"   \");\n                   Set_Unit_Name;\n                   Set_String (\"_E++;\");\n                   Write_Statement_Buffer;\n                end if;\n-\n-               if Force_Checking_Of_Elaboration_Flags or\n-                  Interface_Library_Unit or\n-                  (not Bind_Main_Program)\n-               then\n-                  WBI (\"   }\");\n-               end if;\n             end if;\n          end;\n       end loop;\n@@ -1542,6 +1589,8 @@ package body Bindgen is\n             Write_Statement_Buffer;\n          end if;\n       end loop;\n+\n+      WBI (\"/* END ELABORATION DEFINITIONS */\");\n       WBI (\"\");\n    end Gen_Elab_Defs_C;\n \n@@ -1602,12 +1651,13 @@ package body Bindgen is\n          if U.Unit_Kind = 'p'\n            and then U.Has_Finalizer\n            and then not U.Is_Generic\n+           and then not U.SAL_Interface\n            and then not U.No_Elab\n          then\n             if not Lib_Final_Built then\n                Lib_Final_Built := True;\n \n-               WBI (\"   procedure Finalize_Library is\");\n+               WBI (\"   procedure finalize_library is\");\n \n                --  The following flag is used to check for library-level\n                --  exceptions raised during finalization. The symbol comes\n@@ -1708,16 +1758,48 @@ package body Bindgen is\n             Set_String (\"\"\");\");\n             Write_Statement_Buffer;\n \n-            WBI (\"      begin\");\n+            --  If binding a library or if there is a non-Ada main subprogram\n+            --  then we generate:\n \n-            --  Generate:\n+            --    begin\n+            --       uname_E := uname_E - 1;\n+            --       if uname_E = 0 then\n+            --          F<Count>;\n+            --       end if;\n+            --    end;\n+\n+            --  Otherwise, finalization routines are called unconditionally:\n+\n+            --    begin\n+            --       uname_E := uname_E - 1;\n             --       F<Count>;\n             --    end;\n \n+            WBI (\"      begin\");\n+            Set_String (\"         E\");\n+            Set_Unit_Number (Unum);\n+            Set_String (\" := E\");\n+            Set_Unit_Number (Unum);\n+            Set_String (\" - 1;\");\n+            Write_Statement_Buffer;\n+\n+            if Interface_Library_Unit or (not Bind_Main_Program) then\n+               Set_String (\"         if E\");\n+               Set_Unit_Number (Unum);\n+               Set_String (\" = 0 then\");\n+               Write_Statement_Buffer;\n+               Set_String (\"   \");\n+            end if;\n+\n             Set_String (\"         F\");\n             Set_Int    (Count);\n             Set_Char   (';');\n             Write_Statement_Buffer;\n+\n+            if Interface_Library_Unit or (not Bind_Main_Program) then\n+               WBI (\"         end if;\");\n+            end if;\n+\n             WBI (\"      end;\");\n \n             Count := Count + 1;\n@@ -1762,7 +1844,7 @@ package body Bindgen is\n          end if;\n \n          WBI (\"      end if;\");\n-         WBI (\"   end Finalize_Library;\");\n+         WBI (\"   end finalize_library;\");\n          WBI (\"\");\n       end if;\n    end Gen_Finalize_Library_Ada;\n@@ -1777,8 +1859,6 @@ package body Bindgen is\n       Unum  : Unit_Id;\n \n    begin\n-      WBI (\"   /* BEGIN FINALIZE */\");\n-\n       for E in reverse Elab_Order.First .. Elab_Order.Last loop\n          Unum := Elab_Order.Table (E);\n          U    := Units.Table (Unum);\n@@ -1788,9 +1868,14 @@ package body Bindgen is\n          if U.Unit_Kind = 'p'\n            and then U.Has_Finalizer\n            and then not U.Is_Generic\n+           and then not U.SAL_Interface\n            and then not U.No_Elab\n          then\n-            Set_String (\"   \");\n+            if not Lib_Final_Built then\n+               Lib_Final_Built := True;\n+\n+               WBI (\"static void finalize_library(void) {\");\n+            end if;\n \n             --  Dealing with package bodies is a little complicated. In such\n             --  cases we must retrieve the package spec since it contains the\n@@ -1803,6 +1888,34 @@ package body Bindgen is\n                Uspec := U;\n             end if;\n \n+            Get_Name_String (Uspec.Uname);\n+\n+            --  If binding a library or if there is a non-Ada main subprogram\n+            --  then we generate:\n+\n+            --    uname_E--;\n+            --    if (uname_E == 0)\n+            --       uname__finalize[S|B] ();\n+\n+            --  Otherwise, finalization routines are called unconditionally:\n+\n+            --    uname_E--;\n+            --    uname__finalize[S|B] ();\n+\n+            Set_String (\"   \");\n+            Set_Unit_Name;\n+            Set_String (\"_E--;\");\n+            Write_Statement_Buffer;\n+\n+            if Interface_Library_Unit or (not Bind_Main_Program) then\n+               Set_String (\"   if (\");\n+               Set_Unit_Name;\n+               Set_String (\"_E == 0)\");\n+               Write_Statement_Buffer;\n+               Set_String (\"   \");\n+            end if;\n+\n+            Set_String (\"   \");\n             Get_Name_String (Uspec.Uname);\n             Set_Unit_Name;\n             Set_String (\"__finalize\");\n@@ -1826,8 +1939,10 @@ package body Bindgen is\n          end if;\n       end loop;\n \n-      WBI (\"   /* END FINALIZE */\");\n-      WBI (\"\");\n+      if Lib_Final_Built then\n+         WBI (\"}\");\n+         WBI (\"\");\n+      end if;\n    end Gen_Finalize_Library_C;\n \n    ---------------------------------\n@@ -2124,15 +2239,10 @@ package body Bindgen is\n    ----------------\n \n    procedure Gen_Main_C is\n-      Needs_Library_Finalization : constant Boolean :=\n-                                     not Configurable_Run_Time_On_Target\n-                                       and then Has_Finalizer;\n-      --  For restricted run-time libraries (ZFP and Ravenscar) tasks are\n-      --  non-terminating, so we do not want library-level finalization.\n-\n    begin\n       if Exit_Status_Supported_On_Target then\n          WBI (\"#include <stdlib.h>\");\n+         WBI (\"\");\n          Set_String (\"int \");\n       else\n          Set_String (\"void \");\n@@ -2190,7 +2300,7 @@ package body Bindgen is\n          WBI (\"   gnat_argc = argc;\");\n          WBI (\"   gnat_argv = argv;\");\n          WBI (\"   gnat_envp = envp;\");\n-         WBI (\" \");\n+         WBI (\"\");\n \n       --  If configurable run-time, then nothing to do, since in this case\n       --  the gnat_argc/argv/envp variables are entirely suppressed.\n@@ -2239,7 +2349,6 @@ package body Bindgen is\n \n       if not No_Main_Subprogram then\n          WBI (\"   __gnat_break_start ();\");\n-         WBI (\" \");\n \n          --  Output main program name\n \n@@ -2266,10 +2375,8 @@ package body Bindgen is\n \n       --  Call adafinal if finalization active\n \n-      if not Cumulative_Restrictions.Set (No_Finalization)\n-        and then Needs_Library_Finalization\n-      then\n-         Gen_Finalize_Library_C;\n+      if not Cumulative_Restrictions.Set (No_Finalization) then\n+         WBI (\"   \" & Ada_Final_Name.all & \" ();\");\n       end if;\n \n       --  Outputs the dynamic stack measurement if needed\n@@ -2798,29 +2905,29 @@ package body Bindgen is\n             \"\"\"__gnat_ada_main_program_name\"\");\");\n       end if;\n \n-      if not Cumulative_Restrictions.Set (No_Finalization) then\n-         WBI (\"\");\n-         WBI (\"   procedure \" & Ada_Final_Name.all & \";\");\n-         WBI (\"   pragma Export (C, \" & Ada_Final_Name.all & \", \"\"\" &\n-              Ada_Final_Name.all & \"\"\");\");\n-      end if;\n-\n       WBI (\"\");\n       WBI (\"   procedure \" & Ada_Init_Name.all & \";\");\n       WBI (\"   pragma Export (C, \" & Ada_Init_Name.all & \", \"\"\" &\n            Ada_Init_Name.all & \"\"\");\");\n \n       --  If -a has been specified use pragma Linker_Constructor for the init\n-      --  procedure. No need to use a similar pragma for the final procedure as\n-      --  global finalization will occur when the executable finishes execution\n-      --  and for plugins (shared stand-alone libraries that can be\n-      --  \"unloaded\"), finalization should not occur automatically, otherwise\n-      --  the main executable may not continue to work properly.\n+      --  procedure and pragma Linker_Destructor for the final procedure.\n \n       if Use_Pragma_Linker_Constructor then\n          WBI (\"   pragma Linker_Constructor (\" & Ada_Init_Name.all & \");\");\n       end if;\n \n+      if not Cumulative_Restrictions.Set (No_Finalization) then\n+         WBI (\"\");\n+         WBI (\"   procedure \" & Ada_Final_Name.all & \";\");\n+         WBI (\"   pragma Export (C, \" & Ada_Final_Name.all & \", \"\"\" &\n+              Ada_Final_Name.all & \"\"\");\");\n+\n+         if Use_Pragma_Linker_Constructor then\n+            WBI (\"   pragma Linker_Destructor (\" & Ada_Final_Name.all & \");\");\n+         end if;\n+      end if;\n+\n       if Bind_Main_Program and then VM_Target = No_VM then\n \n          --  If we have the standard library, then Break_Start is defined\n@@ -2933,6 +3040,10 @@ package body Bindgen is\n       WBI (\"\");\n       WBI (\"package body \" & Ada_Main & \" is\");\n       WBI (\"   pragma Warnings (Off);\");\n+      WBI (\"\");\n+\n+      --  Generate externals for elaboration entities\n+      Gen_Elab_Externals_Ada;\n \n       if not Suppress_Standard_Library_On_Target then\n \n@@ -2964,11 +3075,11 @@ package body Bindgen is\n       --  Generate the adafinal routine unless there is no finalization to do\n \n       if not Cumulative_Restrictions.Set (No_Finalization) then\n-         Gen_Adafinal_Ada;\n-\n          if Needs_Library_Finalization then\n             Gen_Finalize_Library_Ada;\n          end if;\n+\n+         Gen_Adafinal_Ada;\n       end if;\n \n       Gen_Adainit_Ada;\n@@ -3019,14 +3130,8 @@ package body Bindgen is\n \n       Resolve_Binder_Options;\n \n-      WBI (\"extern void \" & Ada_Final_Name.all & \" (void);\");\n-\n       --  If -a has been specified use __attribute__((constructor)) for the\n-      --  init procedure. No need to use a similar featute for the final\n-      --  procedure as global finalization will occur when the executable\n-      --  finishes execution and for plugins (shared stand-alone libraries that\n-      --  can be \"unloaded\"), finalization should not occur automatically,\n-      --  otherwise the main executable may not continue to work properly.\n+      --  init procedure and __attribute__((destructor)) for the final one.\n \n       if Use_Pragma_Linker_Constructor then\n          WBI (\"extern void \" & Ada_Init_Name.all &\n@@ -3035,6 +3140,15 @@ package body Bindgen is\n          WBI (\"extern void \" & Ada_Init_Name.all & \" (void);\");\n       end if;\n \n+      if not Cumulative_Restrictions.Set (No_Finalization) then\n+         if Use_Pragma_Linker_Constructor then\n+            WBI (\"extern void \" & Ada_Final_Name.all &\n+                 \" (void) __attribute__((destructor));\");\n+         else\n+            WBI (\"extern void \" & Ada_Final_Name.all & \" (void);\");\n+         end if;\n+      end if;\n+\n       WBI (\"extern void system__standard_library__adafinal (void);\");\n \n       if not No_Main_Subprogram then\n@@ -3099,29 +3213,15 @@ package body Bindgen is\n \n       WBI (\"\");\n \n+      --  Generate externals for elaboration entities\n+      Gen_Elab_Externals_C;\n+\n       Gen_Elab_Defs_C;\n \n       if Needs_Library_Finalization then\n          Gen_Finalize_Library_Defs_C;\n       end if;\n \n-      --  Imported variables used only when we have a runtime\n-\n-      if not Suppress_Standard_Library_On_Target then\n-\n-         --  Track elaboration/finalization phase\n-\n-         WBI (\"extern int  __gnat_handler_installed;\");\n-         WBI (\"\");\n-\n-         --  Track feature enable/disable on VMS\n-\n-         if OpenVMS_On_Target then\n-            WBI (\"extern int  __gnat_features_set;\");\n-            WBI (\"\");\n-         end if;\n-      end if;\n-\n       --  Write argv/argc exit status stuff if main program case\n \n       if Bind_Main_Program then\n@@ -3174,8 +3274,8 @@ package body Bindgen is\n       --  (for the debugger to get initial control) is defined in this file.\n \n       if Suppress_Standard_Library_On_Target then\n-         WBI (\"\");\n          WBI (\"void __gnat_break_start (void) {}\");\n+         WBI (\"\");\n       end if;\n \n       --  Generate the __gnat_version and __gnat_ada_main_program_name info\n@@ -3184,7 +3284,6 @@ package body Bindgen is\n       --  when a C program uses 2 Ada libraries)\n \n       if Bind_Main_Program then\n-         WBI (\"\");\n          WBI (\"char __gnat_version[] = \"\"\" & Ver_Prefix &\n                                    Gnat_Version_String & \"\"\";\");\n \n@@ -3193,12 +3292,16 @@ package body Bindgen is\n          Set_Main_Program_Name;\n          Set_String (\"\"\";\");\n          Write_Statement_Buffer;\n+         WBI (\"\");\n       end if;\n \n-      --  Generate the adafinal routine. In no runtime mode, this is not\n-      --  needed, since there is no finalization to do.\n+      --  Generate the adafinal routine unless there is no finalization to do\n \n       if not Cumulative_Restrictions.Set (No_Finalization) then\n+         if Needs_Library_Finalization then\n+            Gen_Finalize_Library_C;\n+         end if;\n+\n          Gen_Adafinal_C;\n       end if;\n "}, {"sha": "97bbf28546a061f2b2be202a87dd4aa335cb3a81", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -3463,7 +3463,7 @@ package body Checks is\n \n       if Enable_Overflow_Checks\n         and then not Is_Entity_Name (N)\n-        and then  (Lor < Lo or else Hir > Hi)\n+        and then (Lor < Lo or else Hir > Hi)\n       then\n          OK := False;\n          return;"}, {"sha": "9a96e8c8d95e8fc6e91944b6a30338a4c9a6b42a", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -934,32 +934,34 @@ package Einfo is\n --       to the spec as possible.\n \n --    Elaboration_Entity (Node13)\n---       Present in generic and non-generic package and subprogram\n---       entities. This is a boolean entity associated with the unit that\n---       is initially set to False, and is set True when the unit is\n---       elaborated. This is used for two purposes. First, it is used to\n---       implement required access before elaboration checks (the flag\n---       must be true to call a subprogram at elaboration time). Second,\n---       it is used to guard against repeated execution of the generated\n---       elaboration code.\n+--       Present in generic and non-generic package and subprogram entities.\n+--       This is a counter associated with the unit that is initially set to\n+--       zero, is incremented when an elaboration request for the unit is\n+--       made, and is decremented when a finalization request for the unit\n+--       is made. This is used for three purposes. First, it is used to\n+--       implement access before elaboration checks (the counter must be\n+--       non-zero to call a subprogram at elaboration time). Second, it is\n+--       used to guard against repeated execution of the elaboration code.\n+--       Third, it is used to ensure that the finalization code is executed\n+--       only after all clients have requested it.\n --\n---       Note that we always allocate this flag, and set this field, but\n+--       Note that we always allocate this counter, and set this field, but\n --       we do not always actually use it. It is only used if it is needed\n---       for access-before-elaboration use (see Elaboration_Entity_Required\n+--       for access before elaboration use (see Elaboration_Entity_Required\n --       flag) or if either the spec or the body has elaboration code. If\n --       neither of these two conditions holds, then the entity is still\n --       allocated (since we don't know early enough whether or not there\n --       is elaboration code), but is simply not used for any purpose.\n \n --    Elaboration_Entity_Required (Flag174)\n---       Present in generics and non-generic package and subprogram\n---       entities. Set only if Elaboration_Entity is non-Empty to indicate\n---       that the boolean is required to be set even if there is no other\n---       elaboration code. This occurs when the Elaboration_Entity flag\n---       is used for required access-before-elaboration checking. If the\n---       flag is only for preventing multiple execution of the elaboration\n---       code, then if there is no other elaboration code, obviously there\n---       is no need to set the flag.\n+--       Present in generic and non-generic package and subprogram entities.\n+--       Set only if Elaboration_Entity is non-Empty to indicate that the\n+--       counter is required to be non-zero even if there is no other\n+--       elaboration code. This occurs when the Elaboration_Entity counter\n+--       is used for access before elaboration checks. If the counter is\n+--       only used to prevent multiple execution of the elaboration code,\n+--       then if there is no other elaboration code, obviously there is no\n+--       need to set the flag.\n \n --    Enclosing_Scope (Node18)\n --       Present in labels. Denotes the innermost enclosing construct that"}, {"sha": "6131b23c92cd4a8be0ae447e7e30a1a0321d7371", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -1916,7 +1916,12 @@ package body Exp_Attr is\n       begin\n          if Present (Elaboration_Entity (Ent)) then\n             Rewrite (N,\n-              New_Occurrence_Of (Elaboration_Entity (Ent), Loc));\n+              Make_Op_Ne (Loc,\n+                Left_Opnd =>\n+                  New_Occurrence_Of (Elaboration_Entity (Ent), Loc),\n+                Right_Opnd =>\n+                  Make_Integer_Literal (Loc, Uint_0)));\n+            Analyze_And_Resolve (N, Typ);\n          else\n             Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n          end if;"}, {"sha": "7c7f92ce38a1f8ecc143cdfdbd86602bf14d9398", "filename": "gcc/ada/exp_ch12.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch12.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,6 +29,7 @@ with Einfo;    use Einfo;\n with Exp_Util; use Exp_Util;\n with Nmake;    use Nmake;\n with Sinfo;    use Sinfo;\n+with Snames;   use Snames;\n with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n \n@@ -59,7 +60,9 @@ package body Exp_Ch12 is\n              Condition =>\n                Make_Op_Not (Loc,\n                  Right_Opnd =>\n-                   New_Occurrence_Of (Elaboration_Entity (Ent), Loc)),\n+                   Make_Attribute_Reference (Loc,\n+                     Attribute_Name => Name_Elaborated,\n+                     Prefix => New_Occurrence_Of (Ent, Loc))),\n              Reason => PE_Access_Before_Elaboration));\n       end if;\n    end Expand_N_Generic_Instantiation;"}, {"sha": "c49cf254deeea12ed73a25796258fe315b2dfbdf", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 100, "deletions": 50, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -2897,6 +2897,7 @@ package body Exp_Ch7 is\n    is\n       A_Expr : Node_Id;\n       E_Decl : Node_Id;\n+      Result : List_Id;\n \n    begin\n       if Restriction_Active (No_Exception_Propagation) then\n@@ -2907,36 +2908,86 @@ package body Exp_Ch7 is\n       pragma Assert (Present (E_Id));\n       pragma Assert (Present (Raised_Id));\n \n-      --  Generate:\n-      --    Exception_Identity (Get_Current_Excep.all.all) =\n-      --      Standard'Abort_Signal'Identity;\n+      Result := New_List;\n+\n+      --  In certain scenarios, finalization can be triggered by an abort. If\n+      --  the finalization itself fails and raises an exception, the resulting\n+      --  Program_Error must be supressed and replaced by an abort signal. In\n+      --  order to detect this scenario, save the state of entry into the\n+      --  finalization code.\n \n       if Abort_Allowed then\n-         A_Expr :=\n-           Make_Op_Eq (Loc,\n-             Left_Opnd =>\n-               Make_Function_Call (Loc,\n-                 Name =>\n-                   New_Reference_To (RTE (RE_Exception_Identity), Loc),\n-               Parameter_Associations => New_List (\n-                 Make_Explicit_Dereference (Loc,\n-                   Prefix =>\n-                     Make_Function_Call (Loc,\n-                       Name =>\n-                         Make_Explicit_Dereference (Loc,\n-                           Prefix =>\n-                             New_Reference_To\n-                               (RTE (RE_Get_Current_Excep), Loc)))))),\n+         declare\n+            Temp_Id : constant Entity_Id := Make_Temporary (Loc, 'E');\n+\n+         begin\n+            --  Generate:\n+            --    Temp : constant Exception_Occurrence_Access :=\n+            --             Get_Current_Excep.all;\n+\n+            Append_To (Result,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Temp_Id,\n+                Constant_Present => True,\n+                Object_Definition =>\n+                  New_Reference_To (RTE (RE_Exception_Occurrence_Access), Loc),\n+                Expression =>\n+                  Make_Function_Call (Loc,\n+                    Name =>\n+                      Make_Explicit_Dereference (Loc,\n+                        Prefix =>\n+                          New_Reference_To\n+                            (RTE (RE_Get_Current_Excep), Loc)))));\n+\n+            --  Generate:\n+            --    Temp /= null\n+            --      and then Exception_Identity (Temp.all) =\n+            --                 Standard'Abort_Signal'Identity;\n+\n+            A_Expr :=\n+              Make_And_Then (Loc,\n+                Left_Opnd =>\n+                  Make_Op_Ne (Loc,\n+                    Left_Opnd =>\n+                      New_Reference_To (Temp_Id, Loc),\n+                    Right_Opnd =>\n+                      Make_Null (Loc)),\n+\n+                Right_Opnd =>\n+                  Make_Op_Eq (Loc,\n+                    Left_Opnd =>\n+                      Make_Function_Call (Loc,\n+                        Name =>\n+                          New_Reference_To (RTE (RE_Exception_Identity), Loc),\n+                        Parameter_Associations => New_List (\n+                          Make_Explicit_Dereference (Loc,\n+                            Prefix =>\n+                              New_Reference_To (Temp_Id, Loc)))),\n+\n+                    Right_Opnd =>\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix =>\n+                          New_Reference_To (Stand.Abort_Signal, Loc),\n+                        Attribute_Name => Name_Identity)));\n+         end;\n+\n+      --  No abort\n \n-             Right_Opnd =>\n-               Make_Attribute_Reference (Loc,\n-                 Prefix =>\n-                   New_Reference_To (Stand.Abort_Signal, Loc),\n-                 Attribute_Name => Name_Identity));\n       else\n          A_Expr := New_Reference_To (Standard_False, Loc);\n       end if;\n \n+      --  Generate:\n+      --    Abort_Id : constant Boolean := <A_Expr>;\n+\n+      Append_To (Result,\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Abort_Id,\n+          Constant_Present => True,\n+          Object_Definition =>\n+            New_Reference_To (Standard_Boolean, Loc),\n+          Expression => A_Expr));\n+\n       --  Generate:\n       --    E_Id : Exception_Occurrence;\n \n@@ -2947,30 +2998,20 @@ package body Exp_Ch7 is\n             New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n       Set_No_Initialization (E_Decl);\n \n-      return\n-        New_List (\n-\n-         --  Abort_Id\n-\n-          Make_Object_Declaration (Loc,\n-            Defining_Identifier => Abort_Id,\n-            Constant_Present => True,\n-            Object_Definition =>\n-              New_Reference_To (Standard_Boolean, Loc),\n-            Expression => A_Expr),\n+      Append_To (Result, E_Decl);\n \n-         --  E_Id\n-\n-          E_Decl,\n+      --  Generate:\n+      --    Raised_Id : Boolean := False;\n \n-         --  Raised_Id\n+      Append_To (Result,\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Raised_Id,\n+          Object_Definition =>\n+            New_Reference_To (Standard_Boolean, Loc),\n+          Expression =>\n+            New_Reference_To (Standard_False, Loc)));\n \n-          Make_Object_Declaration (Loc,\n-            Defining_Identifier => Raised_Id,\n-            Object_Definition =>\n-              New_Reference_To (Standard_Boolean, Loc),\n-            Expression =>\n-              New_Reference_To (Standard_False, Loc)));\n+      return Result;\n    end Build_Object_Declarations;\n \n    ---------------------------\n@@ -4600,9 +4641,12 @@ package body Exp_Ch7 is\n       --  controlled elements. Generate:\n \n       --    declare\n+      --       Temp   : constant Exception_Occurrence_Access :=\n+      --                  Get_Current_Excep.all;\n       --       Abort  : constant Boolean :=\n-      --                  Exception_Identity (Get_Current_Excep.all) =\n-      --                    Standard'Abort_Signal'Identity;\n+      --                  Temp /= null\n+      --                    and then Exception_Identity (Temp_Id.all) =\n+      --                               Standard'Abort_Signal'Identity;\n       --         <or>\n       --       Abort  : constant Boolean := False;  --  no abort\n \n@@ -4653,9 +4697,12 @@ package body Exp_Ch7 is\n       --             exception\n       --                when others =>\n       --                   declare\n+      --                      Temp   : constant Exception_Occurrence_Access :=\n+      --                                 Get_Current_Excep.all;\n       --                      Abort  : constant Boolean :=\n-      --                        Exception_Identity (Get_Current_Excep.all) =\n-      --                          Standard'Abort_Signal'Identity;\n+      --                        Temp /= null\n+      --                          and then Exception_Identity (Temp_Id.all) =\n+      --                                     Standard'Abort_Signal'Identity;\n       --                        <or>\n       --                      Abort  : constant Boolean := False; --  no abort\n       --                      E      : Exception_Occurence;\n@@ -5513,9 +5560,12 @@ package body Exp_Ch7 is\n       --  may have discriminants and contain variant parts. Generate:\n \n       --    declare\n+      --       Temp   : constant Exception_Occurrence_Access :=\n+      --                  Get_Current_Excep.all;\n       --       Abort  : constant Boolean :=\n-      --                  Exception_Identity (Get_Current_Excep.all) =\n-      --                    Standard'Abort_Signal'Identity;\n+      --                  Temp /= null\n+      --                    and then Exception_Identity (Temp_Id.all) =\n+      --                               Standard'Abort_Signal'Identity;\n       --         <or>\n       --       Abort  : constant Boolean := False;  --  no abort\n       --       E      : Exception_Occurence;"}, {"sha": "cc4502ed2899205e9ac389e7bec0153bc0e7544e", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -6634,7 +6634,7 @@ package body Exp_Util is\n             Asn :=\n               Make_Assignment_Statement (Loc,\n                 Name       => New_Occurrence_Of (Ent, Loc),\n-                Expression => New_Occurrence_Of (Standard_True, Loc));\n+                Expression => Make_Integer_Literal (Loc, Uint_1));\n \n             if Nkind (Parent (N)) = N_Subunit then\n                Insert_After (Corresponding_Stub (Parent (N)), Asn);"}, {"sha": "eb8593a9633758bec35b51050d18410d20a9cd96", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -1840,6 +1840,11 @@ package body Prj.Env is\n          Self.Path := new String'(Tmp.all & Path_Separator & Path);\n          Free (Tmp);\n       end if;\n+\n+      if Current_Verbosity = High then\n+         Debug_Output (\"Adding directories to Project_Path: \"\"\"\n+                       & Path & '\"');\n+      end if;\n    end Add_Directories;\n \n    --------------------"}, {"sha": "d1b31f3732936b684fdbdeb80a335f6e3c556420", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -930,7 +930,9 @@ package body Prj.Nmsc is\n \n       Project_Path_For_Aggregate : Prj.Env.Project_Search_Path;\n \n-      procedure Found_Project_File (Path : Path_Information; Rank : Natural);\n+      procedure Found_Project_File\n+        (Path  : Path_Information;\n+         Rank  : Natural);\n       --  Called for each project file aggregated by Project\n \n       procedure Expand_Project_Files is\n@@ -942,7 +944,10 @@ package body Prj.Nmsc is\n       -- Found_Project_File --\n       ------------------------\n \n-      procedure Found_Project_File (Path : Path_Information; Rank : Natural) is\n+      procedure Found_Project_File\n+        (Path  : Path_Information;\n+         Rank  : Natural)\n+      is\n          pragma Unreferenced (Rank);\n       begin\n          if Path.Name /= Project.Path.Name then\n@@ -5041,8 +5046,8 @@ package body Prj.Nmsc is\n       Remove_Source_Dirs : Boolean := False;\n \n       procedure Add_To_Or_Remove_From_Source_Dirs\n-        (Path : Path_Information;\n-         Rank : Natural);\n+        (Path  : Path_Information;\n+         Rank  : Natural);\n       --  When Removed = False, the directory Path_Id to the list of\n       --  source_dirs if not already in the list. When Removed = True,\n       --  removed directory Path_Id if in the list.\n@@ -5055,8 +5060,8 @@ package body Prj.Nmsc is\n       ---------------------------------------\n \n       procedure Add_To_Or_Remove_From_Source_Dirs\n-        (Path : Path_Information;\n-         Rank : Natural)\n+        (Path  : Path_Information;\n+         Rank  : Natural)\n       is\n          List       : String_List_Id;\n          Prev       : String_List_Id;\n@@ -5310,9 +5315,9 @@ package body Prj.Nmsc is\n \n          Remove_Source_Dirs := False;\n          Add_To_Or_Remove_From_Source_Dirs\n-           (Path => (Name         => Project.Directory.Name,\n-                     Display_Name => Project.Directory.Display_Name),\n-            Rank => 1);\n+           (Path  => (Name         => Project.Directory.Name,\n+                      Display_Name => Project.Directory.Display_Name),\n+            Rank  => 1);\n \n       else\n          Remove_Source_Dirs := False;"}, {"sha": "295ac40c06ffdc706a3ebd735b329b1c8b124cc3", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -28,6 +28,7 @@ with Opt;      use Opt;\n with Osint;    use Osint;\n with Output;   use Output;\n with Prj.Attr; use Prj.Attr;\n+with Prj.Env;\n with Prj.Err;  use Prj.Err;\n with Prj.Ext;  use Prj.Ext;\n with Prj.Nmsc; use Prj.Nmsc;\n@@ -1971,10 +1972,6 @@ package body Prj.Proc is\n                      & Get_Name_String (Index_Name) & \")\", New_Value.Value);\n                end if;\n             end if;\n-\n-         elsif Name = Snames.Name_Project_Path then\n-            Debug_Output\n-              (\"Defined project path\");\n          end if;\n       end Process_Expression_For_Associative_Array;\n \n@@ -1987,11 +1984,10 @@ package body Prj.Proc is\n          New_Value    : Variable_Value)\n       is\n          Name : constant Name_Id := Name_Of (Current_Item, Node_Tree);\n-         Var  : Variable_Id := No_Variable;\n-\n          Is_Attribute : constant Boolean :=\n                           Kind_Of (Current_Item, Node_Tree) =\n                             N_Attribute_Declaration;\n+         Var  : Variable_Id := No_Variable;\n \n       begin\n          --  First, find the list where to find the variable or attribute.\n@@ -2056,6 +2052,29 @@ package body Prj.Proc is\n          else\n             Shared.Variable_Elements.Table (Var).Value := New_Value;\n          end if;\n+\n+         if Name = Snames.Name_Project_Path then\n+            if In_Tree.Is_Root_Tree then\n+               declare\n+                  Val : String_List_Id := New_Value.Values;\n+               begin\n+                  while Val /= Nil_String loop\n+                     Prj.Env.Add_Directories\n+                       (Child_Env.Project_Path,\n+                        Get_Name_String\n+                          (Shared.String_Elements.Table (Val).Value));\n+                     Val := Shared.String_Elements.Table (Val).Next;\n+                  end loop;\n+               end;\n+\n+            else\n+               if Current_Verbosity = High then\n+                  Debug_Output\n+                    (\"'for Project_Path' has no effect except in\"\n+                     & \" root aggregate\");\n+               end if;\n+            end if;\n+         end if;\n       end Process_Expression_Variable_Decl;\n \n       ------------------------"}, {"sha": "985022c7a17e277ecb31b589dee2a2111d2c6367", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -504,6 +504,7 @@ package Rtsfind is\n      RE_Exception_Message,               -- Ada.Exceptions\n      RE_Exception_Name_Simple,           -- Ada.Exceptions\n      RE_Exception_Occurrence,            -- Ada.Exceptions\n+     RE_Exception_Occurrence_Access,     -- Ada.Exceptions\n      RE_Null_Id,                         -- Ada.Exceptions\n      RE_Null_Occurrence,                 -- Ada.Exceptions\n      RE_Poll,                            -- Ada.Exceptions\n@@ -1682,6 +1683,7 @@ package Rtsfind is\n      RE_Exception_Message                => Ada_Exceptions,\n      RE_Exception_Name_Simple            => Ada_Exceptions,\n      RE_Exception_Occurrence             => Ada_Exceptions,\n+     RE_Exception_Occurrence_Access      => Ada_Exceptions,\n      RE_Null_Id                          => Ada_Exceptions,\n      RE_Null_Occurrence                  => Ada_Exceptions,\n      RE_Poll                             => Ada_Exceptions,"}, {"sha": "de0b5978110cd217b00bd9e83331b7471a2280e8", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -295,9 +295,6 @@ package body Sem_Attr is\n       procedure Check_Integer_Type;\n       --  Verify that prefix of attribute N is an integer type\n \n-      procedure Check_Library_Unit;\n-      --  Verify that prefix of attribute N is a library unit\n-\n       procedure Check_Modular_Integer_Type;\n       --  Verify that prefix of attribute N is a modular integer type\n \n@@ -344,8 +341,8 @@ package body Sem_Attr is\n       --  itself of the form of a library unit name. Note that this is\n       --  quite different from Check_Program_Unit, since it only checks\n       --  the syntactic form of the name, not the semantic identity. This\n-      --  is because it is used with attributes (Elab_Body, Elab_Spec, and\n-      --  UET_Address) which can refer to non-visible unit.\n+      --  is because it is used with attributes (Elab_Body, Elab_Spec,\n+      --  UET_Address and Elaborated) which can refer to non-visible unit.\n \n       procedure Error_Attr (Msg : String; Error_Node : Node_Id);\n       pragma No_Return (Error_Attr);\n@@ -1302,17 +1299,6 @@ package body Sem_Attr is\n          end if;\n       end Check_Integer_Type;\n \n-      ------------------------\n-      -- Check_Library_Unit --\n-      ------------------------\n-\n-      procedure Check_Library_Unit is\n-      begin\n-         if not Is_Compilation_Unit (Entity (P)) then\n-            Error_Attr_P (\"prefix of % attribute must be library unit\");\n-         end if;\n-      end Check_Library_Unit;\n-\n       --------------------------------\n       -- Check_Modular_Integer_Type --\n       --------------------------------\n@@ -1761,7 +1747,9 @@ package body Sem_Attr is\n          if Nkind (Nod) = N_Identifier then\n             return;\n \n-         elsif Nkind (Nod) = N_Selected_Component then\n+         elsif Nkind (Nod) = N_Selected_Component\n+           or else Nkind (Nod) = N_Expanded_Name\n+         then\n             Check_Unit_Name (Prefix (Nod));\n \n             if Nkind (Selector_Name (Nod)) = N_Identifier then\n@@ -3003,7 +2991,7 @@ package body Sem_Attr is\n \n       when Attribute_Elaborated =>\n          Check_E0;\n-         Check_Library_Unit;\n+         Check_Unit_Name (P);\n          Set_Etype (N, Standard_Boolean);\n \n       ----------"}, {"sha": "87f31d82e32c2c34ce3ffca6cc691e6de4fcfdfc", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -55,6 +55,7 @@ with Snames;   use Snames;\n with Stand;    use Stand;\n with Table;\n with Tbuild;   use Tbuild;\n+with Uintp;    use Uintp;\n with Uname;    use Uname;\n \n package body Sem_Elab is\n@@ -2156,8 +2157,8 @@ package body Sem_Elab is\n                     Make_Object_Declaration (Loce,\n                       Defining_Identifier => Ent,\n                       Object_Definition =>\n-                        New_Occurrence_Of (Standard_Boolean, Loce),\n-                      Expression => New_Occurrence_Of (Standard_False, Loce)));\n+                        New_Occurrence_Of (Standard_Integer, Loce),\n+                      Expression => Make_Integer_Literal (Loc, Uint_0)));\n \n                   --  Set elaboration flag at the point of the body\n \n@@ -2176,10 +2177,12 @@ package body Sem_Elab is\n                end;\n             end if;\n \n-            --  Generate check of the elaboration Boolean\n+            --  Generate check of the elaboration counter\n \n             Insert_Elab_Check (N,\n-              New_Occurrence_Of (Elaboration_Entity (E), Loc));\n+               Make_Attribute_Reference (Loc,\n+                 Attribute_Name => Name_Elaborated,\n+                 Prefix => New_Occurrence_Of (E, Loc)));\n          end if;\n \n          --  Generate the warning\n@@ -2419,7 +2422,7 @@ package body Sem_Elab is\n                 not Restriction_Active (No_Entry_Calls_In_Elaboration_Code)\n             then\n                --  Runtime elaboration check required. Generate check of the\n-               --  elaboration Boolean for the unit containing the entity.\n+               --  elaboration counter for the unit containing the entity.\n \n                Insert_Elab_Check (N,\n                  Make_Attribute_Reference (Loc,"}, {"sha": "7920d6d4d984a27970aa893ddeca4f984f84bafd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -964,9 +964,9 @@ package body Sem_Util is\n          Make_Object_Declaration (Loc,\n            Defining_Identifier => Elab_Ent,\n            Object_Definition   =>\n-             New_Occurrence_Of (Standard_Boolean, Loc),\n+             New_Occurrence_Of (Standard_Integer, Loc),\n            Expression          =>\n-             New_Occurrence_Of (Standard_False, Loc));\n+             Make_Integer_Literal (Loc, Uint_0));\n \n       Push_Scope (Standard_Standard);\n       Add_Global_Declaration (Decl);"}, {"sha": "c8b1a1ec3cd12bdeda55d4e7086e6c0ccb0e4b77", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e9320157031e3969aabe742cfddd38a0513cd/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=824e9320157031e3969aabe742cfddd38a0513cd", "patch": "@@ -136,7 +136,7 @@ package Sem_Util is\n    --  discriminants, and build actual subtype for it if so.\n \n    procedure Build_Elaboration_Entity (N : Node_Id; Spec_Id : Entity_Id);\n-   --  Given a compilation unit node N, allocate an elaboration boolean for\n+   --  Given a compilation unit node N, allocate an elaboration counter for\n    --  the compilation unit, and install it in the Elaboration_Entity field\n    --  of Spec_Id, the entity for the compilation unit.\n "}]}