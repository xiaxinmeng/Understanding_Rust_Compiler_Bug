{"sha": "e60f68ec460bc5b33a6f75caac9667bf978f37d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwZjY4ZWM0NjBiYzViMzNhNmY3NWNhYWM5NjY3YmY5NzhmMzdkOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-15T16:31:15Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-15T16:31:15Z"}, "message": "re PR fortran/87566 (ICE with class(*) and select)\n\n2018-10-15  Paul Thomas  <pault@gcc.gnu.org>\n\t    Tobias Burnus  <burnus@gcc.gnu.org>\n\n\tPR fortran/87566\n\t* resolve.c (resolve_assoc_var): Add missing array spec for\n\tclass associate names.\n\t(resolve_select_type): Handle case where last typed component\n\tof the selector has a different type to the expression.\n\t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Replace\n\tcall to gfc_expr_to_initialize with call to gfc_copy_expr.\n\t(gfc_conv_class_to_class): Guard assignment to 'len' field\n\tagainst case where zero constant is supplied.\n\n2018-10-15  Paul Thomas  <pault@gcc.gnu.org>\n\t    Tobias Burnus  <burnus@gcc.gnu.org>\n\n\tPR fortran/87566\n\t* gfortran.dg/select_type_44.f90: New test.\n\t* gfortran.dg/associate_42.f90: New test.\n\n\nCo-Authored-By: Tobias Burnus <burnus@gcc.gnu.org>\n\nFrom-SVN: r265171", "tree": {"sha": "3cdf05c071e53c16a1aa96b96c259221366c7d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cdf05c071e53c16a1aa96b96c259221366c7d1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e60f68ec460bc5b33a6f75caac9667bf978f37d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60f68ec460bc5b33a6f75caac9667bf978f37d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60f68ec460bc5b33a6f75caac9667bf978f37d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60f68ec460bc5b33a6f75caac9667bf978f37d8/comments", "author": null, "committer": null, "parents": [{"sha": "72551c683ce3ae89835216851473863c6d4ef27f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72551c683ce3ae89835216851473863c6d4ef27f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72551c683ce3ae89835216851473863c6d4ef27f"}], "stats": {"total": 141, "additions": 136, "deletions": 5}, "files": [{"sha": "4c5f17ad66ae2d70a46f614537c861851a7ae3a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e60f68ec460bc5b33a6f75caac9667bf978f37d8", "patch": "@@ -1,3 +1,16 @@\n+2018-10-15  Paul Thomas  <pault@gcc.gnu.org>\n+\tTobias Burnus  <burnus@gcc.gnu.org>\n+\n+\tPR fortran/87566\n+\t* resolve.c (resolve_assoc_var): Add missing array spec for\n+\tclass associate names.\n+\t(resolve_select_type): Handle case where last typed component\n+\tof the selector has a different type to the expression.\n+\t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Replace\n+\tcall to gfc_expr_to_initialize with call to gfc_copy_expr.\n+\t(gfc_conv_class_to_class): Guard assignment to 'len' field\n+\tagainst case where zero constant is supplied.\n+\n 2018-10-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/87597"}, {"sha": "56ab595b35232c9c0e37b2b4c6d3a202d5489c44", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e60f68ec460bc5b33a6f75caac9667bf978f37d8", "patch": "@@ -8675,6 +8675,18 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n \t  if (as->corank != 0)\n \t    sym->attr.codimension = 1;\n \t}\n+      else if (sym->ts.type == BT_CLASS && (!CLASS_DATA (sym)->as || sym->assoc->rankguessed))\n+\t{\n+\t  if (!CLASS_DATA (sym)->as)\n+\t    CLASS_DATA (sym)->as = gfc_get_array_spec ();\n+\t  as = CLASS_DATA (sym)->as;\n+\t  as->rank = target->rank;\n+\t  as->type = AS_DEFERRED;\n+\t  as->corank = gfc_get_corank (target);\n+\t  CLASS_DATA (sym)->attr.dimension = 1;\n+\t  if (as->corank != 0)\n+\t    CLASS_DATA (sym)->attr.codimension = 1;\n+\t}\n     }\n   else\n     {\n@@ -8875,9 +8887,24 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \n   if (code->expr2)\n     {\n-      if (code->expr1->symtree->n.sym->attr.untyped)\n-\tcode->expr1->symtree->n.sym->ts = code->expr2->ts;\n-      selector_type = CLASS_DATA (code->expr2)->ts.u.derived;\n+      gfc_ref *ref2 = NULL;\n+      for (ref = code->expr2->ref; ref != NULL; ref = ref->next)\n+\t if (ref->type == REF_COMPONENT\n+\t     && ref->u.c.component->ts.type == BT_CLASS)\n+\t   ref2 = ref;\n+\n+      if (ref2)\n+\t{\n+\t  if (code->expr1->symtree->n.sym->attr.untyped)\n+\t    code->expr1->symtree->n.sym->ts = ref->u.c.component->ts;\n+\t  selector_type = CLASS_DATA (ref2->u.c.component)->ts.u.derived;\n+\t}\n+      else\n+\t{\n+\t  if (code->expr1->symtree->n.sym->attr.untyped)\n+\t    code->expr1->symtree->n.sym->ts = code->expr2->ts;\n+\t  selector_type = CLASS_DATA (code->expr2)->ts.u.derived;\n+\t}\n \n       if (code->expr2->rank && CLASS_DATA (code->expr1)->as)\n \tCLASS_DATA (code->expr1)->as->rank = code->expr2->rank;"}, {"sha": "7a5091b7f85373aa5ceaa54648b9a801ad6a174d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=e60f68ec460bc5b33a6f75caac9667bf978f37d8", "patch": "@@ -394,7 +394,7 @@ gfc_find_and_cut_at_last_class_ref (gfc_expr *e)\n       e->ref = NULL;\n     }\n \n-  base_expr = gfc_expr_to_initialize (e);\n+  base_expr = gfc_copy_expr (e);\n \n   /* Restore the original tail expression.  */\n   if (class_ref)\n@@ -1131,7 +1131,8 @@ gfc_conv_class_to_class (gfc_se *parmse, gfc_expr *e, gfc_typespec class_ts,\n \n       /* Return the len component, except in the case of scalarized array\n \treferences, where the dynamic type cannot change.  */\n-      if (!elemental && full_array && copyback)\n+      if (!elemental && full_array && copyback\n+\t  && (UNLIMITED_POLY (e) || VAR_P (tmp)))\n \t  gfc_add_modify (&parmse->post, tmp,\n \t\t\t  fold_convert (TREE_TYPE (tmp), ctree));\n     }"}, {"sha": "f08abb181893d5de7f828d5272d36a5ea87839b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e60f68ec460bc5b33a6f75caac9667bf978f37d8", "patch": "@@ -1,3 +1,10 @@\n+2018-10-15  Paul Thomas  <pault@gcc.gnu.org>\n+\tTobias Burnus  <burnus@gcc.gnu.org>\n+\n+\tPR fortran/87566\n+\t* gfortran.dg/select_type_44.f90: New test.\n+\t* gfortran.dg/associate_42.f90: New test.\n+\n 2018-10-15  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \tPR tree-optimization/87022"}, {"sha": "359224de50c9e896639d39dffc901ab9ce67b949", "filename": "gcc/testsuite/gfortran.dg/associate_42.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_42.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_42.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_42.f90?ref=e60f68ec460bc5b33a6f75caac9667bf978f37d8", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! Tests the fix for a bug that was found in the course of fixing PR87566.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+    call AddArray\n+contains\n+  subroutine AddArray()\n+    type Object_array_pointer\n+        class(*), pointer :: p(:) => null()\n+    end type Object_array_pointer\n+\n+    type (Object_array_pointer) :: obj\n+    character(3), target :: tgt1(2) = ['one','two']\n+    character(5), target :: tgt2(2) = ['three','four ']\n+    real, target :: tgt3(3) = [1.0,2.0,3.0]\n+\n+    obj%p => tgt1\n+    associate (point => obj%p)\n+      select type (point)         ! Used to ICE here.\n+        type is (character(*))\n+          if (any (point .ne. tgt1)) stop 1\n+      end select\n+      point => tgt2\n+    end associate\n+\n+    select type (z => obj%p)\n+      type is (character(*))\n+        if (any (z .ne. tgt2)) stop 2\n+    end select\n+\n+    obj%p => tgt3\n+    associate (point => obj%p)\n+      select type (point)\n+        type is (real)\n+          if (any (point .ne. tgt3)) stop 3\n+      end select\n+    end associate\n+  end subroutine AddArray\n+end"}, {"sha": "8a5b5709b5aa952e02544e14e02e907787a4ac15", "filename": "gcc/testsuite/gfortran.dg/select_type_44.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_44.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60f68ec460bc5b33a6f75caac9667bf978f37d8/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_44.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_44.f90?ref=e60f68ec460bc5b33a6f75caac9667bf978f37d8", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR87566\n+!\n+! Contributed by Antony Lewis  <antony@cosmologist.info>\n+!\n+  call AddArray\n+contains\n+  subroutine AddArray()\n+    type Object_array_pointer\n+        class(*), pointer :: p(:) => null()\n+    end type Object_array_pointer\n+    class(*), pointer :: Pt => null()\n+    type (Object_array_pointer) :: obj\n+    character(3), target :: tgt1(2) = ['one','two']\n+    character(5), target :: tgt2(2) = ['three','four ']\n+\n+    allocate (Pt, source = Object_array_pointer ())\n+    select type (Pt)\n+      type is (object_array_pointer)\n+        Pt%p => tgt1\n+    end select\n+\n+    select type (Pt)\n+      class is (object_array_pointer)\n+        select type (Point=> Pt%P)\n+          type is (character(*))\n+            if (any (Point .ne. tgt1)) stop 1\n+            Point = ['abc','efg']\n+        end select\n+    end select\n+\n+    select type (Pt)\n+      class is (object_array_pointer)\n+        select type (Point=> Pt%P)\n+          type is (character(*))\n+            if (any (Point .ne. ['abc','efg'])) stop 2\n+        end select\n+    end select\n+\n+  end subroutine AddArray\n+end"}]}