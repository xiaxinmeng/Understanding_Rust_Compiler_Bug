{"sha": "25c87b0f9cc0730ea1fcccec747e99653faf3995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVjODdiMGY5Y2MwNzMwZWExZmNjY2VjNzQ3ZTk5NjUzZmFmMzk5NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-02-15T09:41:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:41:35Z"}, "message": "lib-xref.adb (Get_Type_Reference): For a private type whose full view is an array type...\n\n2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* lib-xref.adb (Get_Type_Reference): For a private type whose full\n\tview is an array type, indicate the component type as well, for\n\tnavigation purposes.\n\t(Generate_Reference): Don't consider array ref on LHS to be a case\n\tof violating pragma Unreferenced.\n\tDo not give Ada 2005 warning except on real reference.\n\nFrom-SVN: r111077", "tree": {"sha": "cdd60cd7a049ec9d1ffaf4195f5e34c46e007eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd60cd7a049ec9d1ffaf4195f5e34c46e007eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25c87b0f9cc0730ea1fcccec747e99653faf3995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c87b0f9cc0730ea1fcccec747e99653faf3995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c87b0f9cc0730ea1fcccec747e99653faf3995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c87b0f9cc0730ea1fcccec747e99653faf3995/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae8926a0edcf620d090dbab1a5d97cad6ac93666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8926a0edcf620d090dbab1a5d97cad6ac93666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8926a0edcf620d090dbab1a5d97cad6ac93666"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "fc55b4bfb82551726b2c3794df8b1889df58d2f8", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c87b0f9cc0730ea1fcccec747e99653faf3995/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c87b0f9cc0730ea1fcccec747e99653faf3995/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=25c87b0f9cc0730ea1fcccec747e99653faf3995", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -260,8 +260,7 @@ package body Lib.Xref is\n             end if;\n          end loop;\n \n-         --  Parent (N) is an assignment statement, check whether\n-         --  N is its name.\n+         --  Parent (N) is assignment statement, check whether N is its name\n \n          return Name (Parent (N)) = N;\n       end Is_On_LHS;\n@@ -277,21 +276,23 @@ package body Lib.Xref is\n          Check_Restriction (No_Obsolescent_Features, N);\n       end if;\n \n-      --  Warn if reference to Ada 2005 entity not in Ada 2005 mode\n+      --  Warn if reference to Ada 2005 entity not in Ada 2005 mode. We only\n+      --  detect real explicit references (modifications and references).\n \n       if Is_Ada_2005 (E)\n         and then Ada_Version < Ada_05\n         and then Warn_On_Ada_2005_Compatibility\n+        and then (Typ = 'm' or else Typ = 'r')\n       then\n          Error_Msg_NE (\"& is only defined in Ada 2005?\", N, E);\n       end if;\n \n-      --  Never collect references if not in main source unit. However,\n-      --  we omit this test if Typ is 'e' or 'k', since these entries are\n-      --  really structural, and it is useful to have them in units\n-      --  that reference packages as well as units that define packages.\n-      --  We also omit the test for the case of 'p' since we want to\n-      --  include inherited primitive operations from other packages.\n+      --  Never collect references if not in main source unit. However, we omit\n+      --  this test if Typ is 'e' or 'k', since these entries are structural,\n+      --  and it is useful to have them in units that reference packages as\n+      --  well as units that define packages. We also omit the test for the\n+      --  case of 'p' since we want to include inherited primitive operations\n+      --  from other packages.\n \n       if not In_Extended_Main_Source_Unit (N)\n         and then Typ /= 'e'\n@@ -397,12 +398,9 @@ package body Lib.Xref is\n                null;\n \n             --  Neither does a reference to a variable on the left side\n-            --  of an assignment\n+            --  of an assignment.\n \n-            elsif Ekind (E) = E_Variable\n-              and then Nkind (Parent (N)) = N_Assignment_Statement\n-              and then Name (Parent (N)) = N\n-            then\n+            elsif Is_On_LHS (N) then\n                null;\n \n             --  For entry formals, we want to place the warning on the\n@@ -720,11 +718,21 @@ package body Lib.Xref is\n \n                   elsif Is_Private_Type (Tref)\n                     and then Present (Full_View (Tref))\n-                    and then Is_Access_Type (Full_View (Tref))\n                   then\n-                     Tref := Directly_Designated_Type (Full_View (Tref));\n-                     Left := '(';\n-                     Right := ')';\n+                     if Is_Access_Type (Full_View (Tref)) then\n+                        Tref := Directly_Designated_Type (Full_View (Tref));\n+                        Left := '(';\n+                        Right := ')';\n+\n+                     --  If the full view is an array type, we also retrieve\n+                     --  the corresponding component type, because the ali\n+                     --  entry already indicates that this is an array.\n+\n+                     elsif Is_Array_Type (Full_View (Tref)) then\n+                        Tref := Component_Type (Full_View (Tref));\n+                        Left := '(';\n+                        Right := ')';\n+                     end if;\n \n                   --  If non-derived array, get component type.\n                   --  Skip component type for case of String"}]}