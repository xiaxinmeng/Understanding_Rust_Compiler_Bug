{"sha": "e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlYmJlYTUxZWIxYTJkMDQ0YTg3NjFjZjNmOTVkNDBiNjdmMTMyOQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-12-05T00:44:24Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-12-05T00:44:24Z"}, "message": "tree-ssa-alias.c (compute_flow_sensitive_aliasing): Call set_used_smts.\n\n2006-12-04  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-alias.c (compute_flow_sensitive_aliasing): Call\n\tset_used_smts.\n\t* tree-ssa-structalias.c (set_used_smts): Export.\n\t(find_what_p_points_to): Don't call set_used_smts here.\n\t* tree-ssa-structalias.h (set_used_smts): Add prototype.\n\nFrom-SVN: r119528", "tree": {"sha": "332b7bfeaf1b2a96cffecab0bfa2dc29230d9f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332b7bfeaf1b2a96cffecab0bfa2dc29230d9f3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8d85341b63d9eebe1ca2023adea6b5300873a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d85341b63d9eebe1ca2023adea6b5300873a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d85341b63d9eebe1ca2023adea6b5300873a7b"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "8a5b1aacc263b7bfca0181f7efeb8ce46f97afe5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "patch": "@@ -3,20 +3,32 @@\n \t* builtins.c (fold_builtin_memory_op): Check that expr_size match.\n \t* explow.c (expr_size, int_expr_size): Assert that size is non_NULL.\n \n+2006-12-04  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-alias.c (compute_flow_sensitive_aliasing): Call\n+\tset_used_smts.\n+\t* tree-ssa-structalias.c (set_used_smts): Export.\n+\t(find_what_p_points_to): Don't call set_used_smts here.\n+\t* tree-ssa-structalias.h (set_used_smts): Add prototype.\n+\n 2006-12-04  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \t* tree-ssa-alias.c (compute_may_aliases):\n \tCompute flow sensitive before flow insensitive.\n \t(compute_flow_sensitive_aliasing): Don't try to add\n \ta symbol memory tag to itself.\n+\t\n \t* alias.h (alias_set_subset_of): New prototype.\n+\n \t* alias.c (alias_set_subset_of): New function.\n+\n \t* tree-ssa-structalias.c: Update comments.\n \t(struct variable_info): Add finished_solution.\n \t(new_varinfo): Set finished solution to NULL.\n \t(var_escaped_vars): Remove.\n \t(escaped_vars_tree): Remove.\n \t(escaped_vars_id): Remove.\n+\t(nonlocal_vars_id): Remove.\n \t(constraint_expr_type): Add INCLUDES.\n \t(graph_size): Removed.\n \t(dump_constraint): Support INCLUDES.\n@@ -29,25 +41,29 @@\n \t(process_constraint): Fix non-field sensitive handling\n \tHandle includes.\n \t(get_constraint_for): Use INCLUDES.\n-\t(make_constraint_from_escaped): Use nonlocal_vars_id.\n+\t(make_constraint_from_anything): Renamed from\n+\tmake_constraint_from_escaped.\n \t(make_constraint_to_escaped): Removed.\n \t(find_global_initializers): Removed.\n \t(create_variable_info_for): Do not make constraints to escaped\n \tvars anymore.\n \t(dump_solution_for_var): Don't print out the equivalent points-to\n \tsets, just use the name of the variable it shares it with.\n \t(intra_create_variable_infos): Use INCLUDES.\n-\tMove initialization of nonlocal variable to init_base_vars.\n-\t(init_base_vars): Init nonlocal variable here.\n-\tRemove escaped_vars initialization.\n+\tChange nonlocal variable sets to anything sets.\n+\t(init_base_vars): Remove escaped_vars and nonlocal_var\n+\tinitialization. \n \t(find_escape_constraints): Removed.\n \t(delete_points_to_sets): Remove dead code.\n \t(used_smt_calculated): New variable.\n \t(set_used_smts): New function.\n \t(merge_smts_into): New function.\n \t(find_what_p_points_to): Modify to use SMTs.\n+\t(create_nonlocal_var): Remove.\n+\t\n \t* tree-ssa-operands.c (access_can_touch_variable): Remove\n \treference to nonlocal_all. \n+\n \t* tree-ssa.c (verify_name_tags): Remove.\n \t\n 2006-12-04  Carlos O'Donell  <carlos@codesourcery.com>"}, {"sha": "163c78d91836b079598fef6645ef6ed1393f4640", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "patch": "@@ -1096,6 +1096,8 @@ compute_flow_sensitive_aliasing (struct alias_info *ai)\n   size_t i;\n   tree ptr;\n   \n+  set_used_smts ();\n+  \n   for (i = 0; VEC_iterate (tree, ai->processed_ptrs, i, ptr); i++)\n     {\n       if (!find_what_p_points_to (ptr))"}, {"sha": "7fda8b55cc36b0d939266e1702746cd18d6a8215", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "patch": "@@ -3876,11 +3876,10 @@ static bitmap used_smts;\n    calculation being a bit co-dependent, we can't just calculate SMT\n    used info whenever we want, we have to calculate it around the time\n    that find_what_p_points_to is called.  */\n-static bool used_smt_calculated;\n \n /* Mark which SMT's are in use by points-to anything variables.  */\n \n-static void\n+void\n set_used_smts (void)\n {\n   int i;\n@@ -3926,7 +3925,6 @@ set_used_smts (void)\n \t    }\n \t}\n     }\n-  used_smt_calculated = true;\n }\n \n /* Merge the necessary SMT's into the solution set for VI, which is\n@@ -4076,12 +4074,10 @@ find_what_p_points_to (tree p)\n \t\t aliases for the underlying SMT.  */\n \t      if (was_pt_anything)\n \t\t{\n-\t\t  if (!used_smt_calculated)\n-\t\t    set_used_smts ();\n \t\t  merge_smts_into (p, vi);\n \t\t  pi->pt_global_mem = 1;\n-\n \t\t}\n+\n \t      set_uids_in_ptset (vi->decl, vi->finished_solution, vi->solution);\n \t      pi->pt_vars = vi->finished_solution;\n \t    }\n@@ -4324,8 +4320,6 @@ compute_points_to_sets (struct alias_info *ai)\n \n   solve_graph (graph);\n \n-  used_smt_calculated = false;\n-\n   if (dump_file)\n     dump_sa_points_to_info (dump_file);\n \n@@ -4458,7 +4452,6 @@ ipa_pta_execute (void)\n     fprintf (dump_file, \"\\nSolving graph:\\n\");\n \n   solve_graph (graph);\n-  set_used_smts ();\n \n   if (dump_file)\n     dump_sa_points_to_info (dump_file);"}, {"sha": "4a07f2b48644ad263d80221e4d8a93ec46271af9", "filename": "gcc/tree-ssa-structalias.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2Ftree-ssa-structalias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ebbea51eb1a2d044a8761cf3f95d40b67f1329/gcc%2Ftree-ssa-structalias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.h?ref=e5ebbea51eb1a2d044a8761cf3f95d40b67f1329", "patch": "@@ -94,5 +94,6 @@ extern void dump_solution_for_var (FILE *, unsigned int);\n extern void debug_solution_for_var (unsigned int);\n extern void dump_sa_points_to_info (FILE *);\n extern void debug_sa_points_to_info (void);\n+extern void set_used_smts (void);\n \n #endif /* TREE_SSA_STRUCTALIAS_H  */"}]}