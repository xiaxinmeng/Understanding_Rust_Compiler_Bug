{"sha": "4519314ce8c904c6f9703996a8ecf7b3fcff5198", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxOTMxNGNlOGM5MDRjNmY5NzAzOTk2YThlY2Y3YjNmY2ZmNTE5OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T15:23:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T15:23:55Z"}, "message": "2010-06-17  Joel Brobecker  <brobecker@adacore.com brobecker>\n\n\t* gnat_ugn.texi: Add a section introducing gdbserver.\n\n2010-06-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb, sem_ch4.adb, s-stoele.adb, par-labl.adb: Minor\n\treformatting.\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Valid_Ancestor_Type): handle properly the case of a\n\tconstrained discriminated parent that is a private type.\n\t(Analyze_Record_Aggregate): when collecting inherited discriminants,\n\thandle properly an ancestor type that is a constrained private type.\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Enclosing_Subprogram): If the called subprogram is\n\tprotected, use the protected_subprogram_body only if the original\n\tsubprogram has not been eliminated.\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Freeze_Expression): The designated type of an\n\taccess_to_suprogram type can only be frozen if all types in its profile\n\tare fully defined.\n\nFrom-SVN: r160923", "tree": {"sha": "6ce23f610186adf465b16d18bc493ed3b8399a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce23f610186adf465b16d18bc493ed3b8399a16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4519314ce8c904c6f9703996a8ecf7b3fcff5198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4519314ce8c904c6f9703996a8ecf7b3fcff5198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4519314ce8c904c6f9703996a8ecf7b3fcff5198", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4519314ce8c904c6f9703996a8ecf7b3fcff5198/comments", "author": null, "committer": null, "parents": [{"sha": "b49cf425fe18c5ee2fd9b1e6011c2e6a7661ab0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49cf425fe18c5ee2fd9b1e6011c2e6a7661ab0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49cf425fe18c5ee2fd9b1e6011c2e6a7661ab0a"}], "stats": {"total": 202, "additions": 173, "deletions": 29}, "files": [{"sha": "d70d736cc45a9d398d78bea2c1ed2b0db82bcaf7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -1,3 +1,31 @@\n+2010-06-17  Joel Brobecker  <brobecker@adacore.com brobecker>\n+\n+\t* gnat_ugn.texi: Add a section introducing gdbserver.\n+\n+2010-06-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb, sem_ch4.adb, s-stoele.adb, par-labl.adb: Minor\n+\treformatting.\n+\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Valid_Ancestor_Type): handle properly the case of a\n+\tconstrained discriminated parent that is a private type.\n+\t(Analyze_Record_Aggregate): when collecting inherited discriminants,\n+\thandle properly an ancestor type that is a constrained private type.\n+\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Enclosing_Subprogram): If the called subprogram is\n+\tprotected, use the protected_subprogram_body only if the original\n+\tsubprogram has not been eliminated.\n+\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): The designated type of an\n+\taccess_to_suprogram type can only be frozen if all types in its profile\n+\tare fully defined.\n+\n 2010-06-17  Robert Dewar  <dewar@adacore.com>\n \n \t* par.adb: Minor comment fix"}, {"sha": "89000600160e1cdc99935e5bb355aa0ecca08238", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -5306,6 +5306,26 @@ package body Freeze is\n             return True;\n          end;\n \n+      --  For the designated type of an access to subprogram. all types in\n+      --  the profile must be fully defined.\n+\n+      elsif Ekind (T) = E_Subprogram_Type then\n+         declare\n+            F : Entity_Id;\n+\n+         begin\n+            F := First_Formal (T);\n+            while Present (F) loop\n+               if not Is_Fully_Defined (Etype (F)) then\n+                  return False;\n+               end if;\n+\n+               Next_Formal (F);\n+            end loop;\n+\n+            return Is_Fully_Defined (Etype (T));\n+         end;\n+\n       else\n          return not Is_Private_Type (T)\n            or else Present (Full_View (Base_Type (T)));"}, {"sha": "17e7fb9d5fca4bb5f87c208d4acae8777c2aad1f", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -531,6 +531,7 @@ Running and Debugging Ada Programs\n * Ada Exceptions::\n * Ada Tasks::\n * Debugging Generic Units::\n+* Remote Debugging using gdbserver::\n * GNAT Abnormal Termination or Failure to Terminate::\n * Naming Conventions for GNAT Source Files::\n * Getting Internal Debugging Information::\n@@ -22375,6 +22376,7 @@ the incorrect user program.\n * Ada Exceptions::\n * Ada Tasks::\n * Debugging Generic Units::\n+* Remote Debugging using gdbserver::\n * GNAT Abnormal Termination or Failure to Terminate::\n * Naming Conventions for GNAT Source Files::\n * Getting Internal Debugging Information::\n@@ -22832,6 +22834,56 @@ When the breakpoint occurs, you can step through the code of the\n instance in the normal manner and examine the values of local variables, as for\n other units.\n \n+@node Remote Debugging using gdbserver\n+@section Remote Debugging using gdbserver\n+@cindex Remote Debugging using gdbserver\n+\n+@noindent\n+On platforms where gdbserver is supported, it is possible to use this tool\n+to debug your application remotely.  This can be useful in situations\n+where the program needs to be run on a target host that is different\n+from the host used for development, particularly when the target has\n+a limited amount of resources (either CPU and/or memory).\n+\n+To do so, start your program using gdbserver on the target machine.\n+gdbserver then automatically suspends the execution of your program\n+at its entry point, waiting for a debugger to connect to it.  The\n+following commands starts an application and tells gdbserver to\n+wait for a connection with the debugger on localhost port 4444.\n+\n+@smallexample\n+$ gdbserver localhost:4444 program\n+Process program created; pid = 5685\n+Listening on port 4444\n+@end smallexample\n+\n+Once gdbserver has started listening, we can tell the debugger to establish\n+a connection with this gdbserver, and then start the same debugging session\n+as if the program was being debugged on the same host, directly under\n+the control of GDB.\n+\n+@smallexample\n+$ gdb program\n+(gdb) target remote targethost:4444\n+Remote debugging using targethost:4444\n+0x00007f29936d0af0 in ?? () from /lib64/ld-linux-x86-64.so.\n+(gdb) b foo.adb:3\n+Breakpoint 1 at 0x401f0c: file foo.adb, line 3.\n+(gdb) continue\n+Continuing.\n+\n+Breakpoint 1, foo () at foo.adb:4\n+4       end foo;\n+@end smallexample\n+\n+It is also possible to use gdbserver to attach to an already running\n+program, in which case the execution of that program is simply suspended\n+until the connection between the debugger and gdbserver is established.\n+\n+For more information on how to use gdbserver, @ref{Top, Server, Using\n+the gdbserver Program, gdb, Debugging with GDB}.  GNAT Pro provides support\n+for gdbserver on x86-linux, x86-windows and x86_64-linux.\n+\n @node GNAT Abnormal Termination or Failure to Terminate\n @section GNAT Abnormal Termination or Failure to Terminate\n @cindex GNAT Abnormal Termination or Failure to Terminate"}, {"sha": "cb3ec1931437904c7072a6dbb17e9eacfe4e023e", "filename": "gcc/ada/par-labl.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fpar-labl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fpar-labl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-labl.adb?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -381,15 +381,15 @@ procedure Labl is\n                   --  statements are always part of some list, so\n                   --  List_Containing always makes sense.\n \n-                  if\n-                    List_Containing (Node (N)) = List_Containing (Node (S1))\n+                  if List_Containing (Node (N)) =\n+                     List_Containing (Node (S1))\n                   then\n                      Source := S1;\n                      Found  := True;\n \n-                  else\n-                     --  The goto is within some nested structure\n+                  --  The goto is within some nested structure\n \n+                  else\n                      No_Header (N);\n                      return;\n                   end if;"}, {"sha": "cd3e22ef907c1ef75d19525a86376ae16d5a9754", "filename": "gcc/ada/s-stoele.adb", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fs-stoele.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fs-stoele.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stoele.adb?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -39,7 +39,7 @@ package body System.Storage_Elements is\n \n    --  Conversion to/from address\n \n-   --  Note qualification below of To_Address to avoid ambiguities on VMS.\n+   --  Note qualification below of To_Address to avoid ambiguities on VMS\n \n    function To_Address is\n      new Ada.Unchecked_Conversion (Storage_Offset, Address);\n@@ -51,18 +51,30 @@ package body System.Storage_Elements is\n    --  These functions must be place first because they are inlined_always\n    --  and are used and inlined in other subprograms defined in this unit.\n \n-   function To_Integer (Value : Address) return Integer_Address is\n-   begin\n-      return Integer_Address (Value);\n-   end To_Integer;\n+   ----------------\n+   -- To_Address --\n+   ----------------\n \n    function To_Address (Value : Integer_Address) return Address is\n    begin\n       return Address (Value);\n    end To_Address;\n \n+   ----------------\n+   -- To_Integer --\n+   ----------------\n+\n+   function To_Integer (Value : Address) return Integer_Address is\n+   begin\n+      return Integer_Address (Value);\n+   end To_Integer;\n+\n    --  Address arithmetic\n \n+   ---------\n+   -- \"+\" --\n+   ---------\n+\n    function \"+\" (Left : Address; Right : Storage_Offset) return Address is\n    begin\n       return Storage_Elements.To_Address\n@@ -75,6 +87,10 @@ package body System.Storage_Elements is\n         (To_Integer (To_Address (Left)) + To_Integer (Right));\n    end \"+\";\n \n+   ---------\n+   -- \"-\" --\n+   ---------\n+\n    function \"-\" (Left : Address; Right : Storage_Offset) return Address is\n    begin\n       return Storage_Elements.To_Address\n@@ -87,6 +103,10 @@ package body System.Storage_Elements is\n                          (To_Integer (Left) - To_Integer (Right)));\n    end \"-\";\n \n+   -----------\n+   -- \"mod\" --\n+   -----------\n+\n    function \"mod\"\n      (Left  : Address;\n       Right : Storage_Offset) return Storage_Offset\n@@ -106,4 +126,5 @@ package body System.Storage_Elements is\n          raise Constraint_Error;\n       end if;\n    end \"mod\";\n+\n end System.Storage_Elements;"}, {"sha": "55f84505a4f02045ecb49da98278ffbba1f14197", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -2288,6 +2288,18 @@ package body Sem_Aggr is\n             then\n                A_Type := Etype (Imm_Type);\n                return True;\n+\n+            --  The parent type may be a private extension. The aggregate is\n+            --  legal if the type of the aggregate is an extension of it that\n+            --  is not a private extension.\n+\n+            elsif Is_Private_Type (A_Type)\n+              and then not Is_Private_Type (Imm_Type)\n+              and then Present (Full_View (A_Type))\n+              and then Base_Type (Full_View (A_Type)) = Etype (Imm_Type)\n+            then\n+               return True;\n+\n             else\n                Imm_Type := Etype (Base_Type (Imm_Type));\n             end if;\n@@ -2502,11 +2514,9 @@ package body Sem_Aggr is\n          From                   : List_Id;\n          Consider_Others_Choice : Boolean := False)\n          return                   Node_Id;\n-      --  Given a record component stored in parameter Compon, the following\n-      --  function returns its value as it appears in the list From, which is\n-      --  a list of N_Component_Association nodes.\n-      --  What is this referring to??? There is no \"following function\" in\n-      --  sight???\n+      --  Given a record component stored in parameter Compon, this function\n+      --  returns its value as it appears in the list From, which is a list\n+      --  of N_Component_Association nodes.\n       --\n       --  If no component association has a choice for the searched component,\n       --  the value provided by the others choice is returned, if there is one,\n@@ -3241,12 +3251,11 @@ package body Sem_Aggr is\n \n                Dnode := Declaration_Node (Base_Type (Root_Typ));\n \n-               --  If we don't get a full declaration, then we have some\n-               --  error which will get signalled later so skip this part.\n-               --  Otherwise, gather components of root that apply to the\n-               --  aggregate type. We use the base type in case there is an\n-               --  applicable stored constraint that renames the discriminants\n-               --  of the root.\n+               --  If we don't get a full declaration, then we have some error\n+               --  which will get signalled later so skip this part. Otherwise\n+               --  gather components of root that apply to the aggregate type.\n+               --  We use the base type in case there is an applicable stored\n+               --  constraint that renames the discriminants of the root.\n \n                if Nkind (Dnode) = N_Full_Type_Declaration then\n                   Record_Def := Type_Definition (Dnode);\n@@ -3281,6 +3290,15 @@ package body Sem_Aggr is\n                          Ancestor_Part (N), Parent_Typ);\n                      return;\n                   end if;\n+\n+               --  The current view of ancestor part may be a private type,\n+               --  while the context type is always non-private.\n+\n+               elsif Is_Private_Type (Root_Typ)\n+                 and then Present (Full_View (Root_Typ))\n+                 and then Nkind (N) = N_Extension_Aggregate\n+               then\n+                  exit when Base_Type (Full_View (Root_Typ)) = Parent_Typ;\n                end if;\n             end loop;\n "}, {"sha": "80fad0bd570156c2e62c65a0ebffe14976e7b281", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -6119,8 +6119,8 @@ package body Sem_Ch4 is\n          First_Actual : Node_Id;\n \n       begin\n-         --  Place the name of the operation, with its interpretations,\n-         --  on the rewritten call.\n+         --  Place the name of the operation, with its interpretations, on the\n+         --  rewritten call.\n \n          Set_Name (Call_Node, Subprog);\n "}, {"sha": "44adf316c7fe437556f427cb3910b92391374719", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -2076,7 +2076,7 @@ package body Sem_Res is\n                         end if;\n \n                         if Nkind_In\n-                          (N, N_Procedure_Call_Statement, N_Function_Call)\n+                             (N, N_Procedure_Call_Statement, N_Function_Call)\n                           and then Present (Parameter_Associations (N))\n                         then\n                            Report_Ambiguous_Argument;\n@@ -2121,7 +2121,7 @@ package body Sem_Res is\n \n                      --  If this is an indirect call, use the subprogram_type\n                      --  in the message, to have a meaningful location.\n-                     --  Indicate as well if this is an inherited operation,\n+                     --  Also indicate if this is an inherited operation,\n                      --  created by a type declaration.\n \n                      elsif Nkind (N) = N_Function_Call\n@@ -2202,7 +2202,7 @@ package body Sem_Res is\n                   null;\n \n                --  For procedure or function calls, set the type of the name,\n-               --  and also the entity pointer for the prefix\n+               --  and also the entity pointer for the prefix.\n \n                elsif Nkind_In (N, N_Procedure_Call_Statement, N_Function_Call)\n                  and then (Is_Entity_Name (Name (N))\n@@ -2238,9 +2238,9 @@ package body Sem_Res is\n       end if;\n \n       --  At this stage Found indicates whether or not an acceptable\n-      --  interpretation exists. If not, then we have an error, except\n-      --  that if the context is Any_Type as a result of some other error,\n-      --  then we suppress the error report.\n+      --  interpretation exists. If not, then we have an error, except that if\n+      --  the context is Any_Type as a result of some other error, then we\n+      --  suppress the error report.\n \n       if not Found then\n          if Typ /= Any_Type then"}, {"sha": "dcd6848b26b1a4536574da78d6e3bf4717a8f47e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4519314ce8c904c6f9703996a8ecf7b3fcff5198/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4519314ce8c904c6f9703996a8ecf7b3fcff5198", "patch": "@@ -2549,7 +2549,12 @@ package body Sem_Util is\n       elsif Ekind (Dynamic_Scope) = E_Task_Type then\n          return Get_Task_Body_Procedure (Dynamic_Scope);\n \n-      elsif Convention (Dynamic_Scope) = Convention_Protected then\n+      --  No body is generated if the protected operation is eliminated\n+\n+      elsif Convention (Dynamic_Scope) = Convention_Protected\n+        and then not Is_Eliminated (Dynamic_Scope)\n+        and then Present (Protected_Body_Subprogram (Dynamic_Scope))\n+      then\n          return Protected_Body_Subprogram (Dynamic_Scope);\n \n       else"}]}