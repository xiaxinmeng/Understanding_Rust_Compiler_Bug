{"sha": "9718d50bb51c94b253272d70bd2249153926217b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxOGQ1MGJiNTFjOTRiMjUzMjcyZDcwYmQyMjQ5MTUzOTI2MjE3Yg==", "commit": {"author": {"name": "Catherine Moore", "email": "clm@gcc.gnu.org", "date": "1998-05-27T12:40:31Z"}, "committer": {"name": "Catherine Moore", "email": "clm@gcc.gnu.org", "date": "1998-05-27T12:40:31Z"}, "message": "Replace .urem and .rem routines.\n\nReplace .urem and .rem routines.  Fix a problem\nwith signed operands and uses leaf procedure calling\nconvention.\n\nFrom-SVN: r20090", "tree": {"sha": "98fcece6cf7fcf13644e21814b047c14657d53c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98fcece6cf7fcf13644e21814b047c14657d53c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9718d50bb51c94b253272d70bd2249153926217b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9718d50bb51c94b253272d70bd2249153926217b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9718d50bb51c94b253272d70bd2249153926217b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9718d50bb51c94b253272d70bd2249153926217b/comments", "author": null, "committer": null, "parents": [{"sha": "c111bb67de19511fe104010455b89a00898b5ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c111bb67de19511fe104010455b89a00898b5ad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c111bb67de19511fe104010455b89a00898b5ad2"}], "stats": {"total": 454, "additions": 298, "deletions": 156}, "files": [{"sha": "d4dea1ae7654555871099110e8749d5ffbbb2f3a", "filename": "gcc/config/sparc/lb1spc.asm", "status": "modified", "additions": 298, "deletions": 156, "changes": 454, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9718d50bb51c94b253272d70bd2249153926217b/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9718d50bb51c94b253272d70bd2249153926217b/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flb1spc.asm?ref=9718d50bb51c94b253272d70bd2249153926217b", "patch": "@@ -282,205 +282,347 @@ got_result:\n #endif\n \n #ifdef L_modsi3\n+/* This implementation was taken from glibc:\n+ *\n+ * Input: dividend and divisor in %o0 and %o1 respectively.\n+ *\n+ * Algorithm parameters:\n+ *  N\t\thow many bits per iteration we try to get (4)\n+ *  WORDSIZE\ttotal number of bits (32)\n+ *\n+ * Derived constants:\n+ *  TOPBITS\tnumber of bits in the top decade of a number\n+ *\n+ * Important variables:\n+ *  Q\t\tthe partial quotient under development (initially 0)\n+ *  R\t\tthe remainder so far, initially the dividend\n+ *  ITER\tnumber of main division loop iterations required;\n+ *\t\tequal to ceil(log2(quotient) / N).  Note that this\n+ *\t\tis the log base (2^N) of the quotient.\n+ *  V\t\tthe current comparand, initially divisor*2^(ITER*N-1)\n+ *\n+ * Cost:\n+ *  Current estimate for non-large dividend is\n+ *\tceil(log2(quotient) / N) * (10 + 7N/2) + C\n+ *  A large dividend is one greater than 2^(31-TOPBITS) and takes a\n+ *  different path, as the upper bits of the quotient must be developed\n+ *  one bit at a time.\n+ */\n .text\n \t.align 4\n \t.global\t.urem\n \t.proc 4\n .urem:\n-\tsave\t%sp, -64, %sp\n \tb\tdivide\n-\tmov\t0, %l2\t\t! result always positive\n+\tmov\t0, %g3\t\t! result always positive\n+\n+        .align 4\n \t.global .rem\n \t.proc 4\n .rem:\n-\tsave\t%sp, -64, %sp\n-\torcc\t%i1, %i0, %g0\t! is either operand negative\n-\tbge\tdivide\t\t! if not, skip this junk\n-\tmov\t%i0, %l2\t! record sign of result in sign of %i2\n-\ttst\t%i1\n-\tbge\t2f\n-\ttst\t%i0\n-\t! %i1 < 0\n-\tbge\tdivide\n-\tneg\t%i1\n-2:\t! %i0 < 0\n-\tneg\t%i0\n-\t!\tFALL THROUGH\n+\t! compute sign of result; if neither is negative, no problem\n+\torcc\t%o1, %o0, %g0\t! either negative?\n+\tbge\t2f\t\t\t! no, go do the divide\n+\tmov\t%o0, %g3\t\t! sign of remainder matches %o0\n+\ttst\t%o1\n+\tbge\t1f\n+\ttst\t%o0\n+\t! %o1 is definitely negative; %o0 might also be negative\n+\tbge\t2f\t\t\t! if %o0 not negative...\n+\tsub\t%g0, %o1, %o1\t! in any case, make %o1 nonneg\n+1:\t! %o0 is negative, %o1 is nonnegative\n+\tsub\t%g0, %o0, %o0\t! make %o0 nonnegative\n+2:\n+\n+\t! Ready to divide.  Compute size of quotient; scale comparand.\n divide:\n-\t! Compute size of quotient, scale comparand.\n-\torcc\t%i1, %g0, %l1\t\t! movcc %i1, %l1\n-\tte\t2\t\t\t! if %i1 = 0\n-\tmov\t%i0, %i3\n-\tmov\t0, %i2\n-\tsethi\t%hi(1<<(32-4-1)), %l3\n-\tcmp \t%i3, %l3\n+\torcc\t%o1, %g0, %o5\n+\tbne\t1f\n+\tmov\t%o0, %o3\n+\n+\t\t! Divide by zero trap.  If it returns, return 0 (about as\n+\t\t! wrong as possible, but that is what SunOS does...).\n+\t\tta\t0x2   !ST_DIV0\n+\t\tretl\n+\t\tclr\t%o0\n+\n+1:\n+\tcmp\t%o3, %o5\t\t! if %o1 exceeds %o0, done\n+\tblu\tgot_result\t\t! (and algorithm fails otherwise)\n+\tclr\t%o2\n+\tsethi\t%hi(1 << (32 - 4 - 1)), %g1\n+\tcmp\t%o3, %g1\n \tblu\tnot_really_big\n-\tmov\t0, %l0\n-\t!\n-\t! Here, the %i0 is >= 2^(31-3) or so.  We must be careful here,\n-\t! as our usual 3-at-a-shot divide step will cause overflow and havoc.\n-\t! The total number of bits in the result here is 3*%l0+%l4, where\n-\t! %l4 <= 3.\n-\t! Compute %l0 in an unorthodox manner: know we need to Shift %l1 into\n-\t! the top decade: so do not even bother to compare to %i3.\n-1:\tcmp\t%l1, %l3\n-\tbgeu\t3f\n-\tmov\t1, %l4\n-\tsll\t%l1, 3, %l1\n-\tb\t1b\n-\tinc\t%l0\n-\t!\n-\t! Now compute %l4\n-\t!\n-2:\taddcc\t%l1, %l1, %l1\n-\tbcc\tnot_too_big\n-\tadd\t%l4, 1, %l4\n-\t!\n-\t! We are here if the %i1 overflowed when Shifting.\n-\t! This means that %i3 has the high-order bit set.\n-\t! Restore %l1 and subtract from %i3.\n-\tsll\t%l3, 4, %l3\n-\tsrl\t%l1, 1, %l1\n-\tadd\t%l1, %l3, %l1\n-\tb\tdo_single_div\n-\tdec\t%l4\n-not_too_big:\n-3:\tcmp\t%l1, %i3\n-\tblu\t2b\n-\tnop\n-\tbe\tdo_single_div\n-\tnop\n-\t! %l1 > %i3: went too far: back up 1 step\n-\t! \tsrl\t%l1, 1, %l1\n-\t!\tdec\t%l4\n+\tclr\t%o4\n+\n+\t! Here the dividend is >= 2**(31-N) or so.  We must be careful here,\n+\t! as our usual N-at-a-shot divide step will cause overflow and havoc.\n+\t! The number of bits in the result here is N*ITER+SC, where SC <= N.\n+\t! Compute ITER in an unorthodox manner: know we need to shift V into\n+\t! the top decade: so do not even bother to compare to R.\n+\t1:\n+\t\tcmp\t%o5, %g1\n+\t\tbgeu\t3f\n+\t\tmov\t1, %g2\n+\t\tsll\t%o5, 4, %o5\n+\t\tb\t1b\n+\t\tadd\t%o4, 1, %o4\n+\n+\t! Now compute %g2.\n+\t2:\taddcc\t%o5, %o5, %o5\n+\t\tbcc\tnot_too_big\n+\t\tadd\t%g2, 1, %g2\n+\n+\t\t! We get here if the %o1 overflowed while shifting.\n+\t\t! This means that %o3 has the high-order bit set.\n+\t\t! Restore %o5 and subtract from %o3.\n+\t\tsll\t%g1, 4, %g1\t! high order bit\n+\t\tsrl\t%o5, 1, %o5\t\t! rest of %o5\n+\t\tadd\t%o5, %g1, %o5\n+\t\tb\tdo_single_div\n+\t\tsub\t%g2, 1, %g2\n+\n+\tnot_too_big:\n+\t3:\tcmp\t%o5, %o3\n+\t\tblu\t2b\n+\t\tnop\n+\t\tbe\tdo_single_div\n+\t\tnop\n+\t/* NB: these are commented out in the V8-Sparc manual as well */\n+\t/* (I do not understand this) */\n+\t! %o5 > %o3: went too far: back up 1 step\n+\t!\tsrl\t%o5, 1, %o5\n+\t!\tdec\t%g2\n \t! do single-bit divide steps\n \t!\n-\t! We have to be careful here.  We know that %i3 >= %l1, so we can do the\n+\t! We have to be careful here.  We know that %o3 >= %o5, so we can do the\n \t! first divide step without thinking.  BUT, the others are conditional,\n-\t! and are only done if %i3 >= 0.  Because both %i3 and %l1 may have the\n-\t! high-order bit set in the first step, just falling into the regular\n+\t! and are only done if %o3 >= 0.  Because both %o3 and %o5 may have the high-\n+\t! order bit set in the first step, just falling into the regular\n \t! division loop will mess up the first time around.\n \t! So we unroll slightly...\n-do_single_div:\n-\tdeccc\t%l4\n-\tbl\tend_regular_divide\n-\tnop\n-\tsub\t%i3, %l1, %i3\n-\tmov\t1, %i2\n-\tb\tend_single_divloop\n-\tnop\n-single_divloop:\n-\tsll\t%i2, 1, %i2\n-\tbl\t1f\n-\tsrl\t%l1, 1, %l1\n-\t! %i3 >= 0\n-\tsub\t%i3, %l1, %i3\n-\tb\t2f\n-\tinc\t%i2\n-1:\t! %i3 < 0\n-\tadd\t%i3, %l1, %i3\n-\tdec\t%i2\n-end_single_divloop:\n-2:\tdeccc\t%l4\n-\tbge\tsingle_divloop\n-\ttst\t%i3\n-\tb\tend_regular_divide\n-\tnop\n+\tdo_single_div:\n+\t\tsubcc\t%g2, 1, %g2\n+\t\tbl\tend_regular_divide\n+\t\tnop\n+\t\tsub\t%o3, %o5, %o3\n+\t\tmov\t1, %o2\n+\t\tb\tend_single_divloop\n+\t\tnop\n+\tsingle_divloop:\n+\t\tsll\t%o2, 1, %o2\n+\t\tbl\t1f\n+\t\tsrl\t%o5, 1, %o5\n+\t\t! %o3 >= 0\n+\t\tsub\t%o3, %o5, %o3\n+\t\tb\t2f\n+\t\tadd\t%o2, 1, %o2\n+\t1:\t! %o3 < 0\n+\t\tadd\t%o3, %o5, %o3\n+\t\tsub\t%o2, 1, %o2\n+\t2:\n+\tend_single_divloop:\n+\t\tsubcc\t%g2, 1, %g2\n+\t\tbge\tsingle_divloop\n+\t\ttst\t%o3\n+\t\tb,a\tend_regular_divide\n+\n not_really_big:\n-1:\tsll\t%l1, 3, %l1\n-\tcmp\t%l1, %i3\n+1:\n+\tsll\t%o5, 4, %o5\n+\tcmp\t%o5, %o3\n \tbleu\t1b\n-\tinccc\t%l0\n+\taddcc\t%o4, 1, %o4\n \tbe\tgot_result\n-\tdec\t%l0\n-do_regular_divide:\n-\t! Do the main division iteration\n-\ttst\t%i3\n-\t! Fall through into divide loop\n+\tsub\t%o4, 1, %o4\n+\n+\ttst\t%o3\t! set up for initial iteration\n divloop:\n-\tsll\t%i2, 3, %i2\n-\t! depth 1, accumulated bits 0\n-\tbl\tL.1.8\n-\tsrl\t%l1,1,%l1\n+\tsll\t%o2, 4, %o2\n+\t\t! depth 1, accumulated bits 0\n+\tbl\tL1.16\n+\tsrl\t%o5,1,%o5\n \t! remainder is positive\n-\tsubcc\t%i3,%l1,%i3\n+\tsubcc\t%o3,%o5,%o3\n \t! depth 2, accumulated bits 1\n-\tbl\tL.2.9\n-\tsrl\t%l1,1,%l1\n+\tbl\tL2.17\n+\tsrl\t%o5,1,%o5\n \t! remainder is positive\n-\tsubcc\t%i3,%l1,%i3\n+\tsubcc\t%o3,%o5,%o3\n \t! depth 3, accumulated bits 3\n-\tbl\tL.3.11\n-\tsrl\t%l1,1,%l1\n+\tbl\tL3.19\n+\tsrl\t%o5,1,%o5\n \t! remainder is positive\n-\tsubcc\t%i3,%l1,%i3\n+\tsubcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits 7\n+\tbl\tL4.23\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (3*2+1), %i2\n-L.3.11:\t! remainder is negative\n-\taddcc\t%i3,%l1,%i3\n+\tadd\t%o2, (7*2+1), %o2\n+L4.23:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (3*2-1), %i2\n-L.2.9:\t! remainder is negative\n-\taddcc\t%i3,%l1,%i3\n+\tadd\t%o2, (7*2-1), %o2\n+\t\n+L3.19:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits 5\n+\tbl\tL4.21\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (5*2+1), %o2\n+\t\n+L4.21:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (5*2-1), %o2\n+\t\n+L2.17:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n \t! depth 3, accumulated bits 1\n-\tbl\tL.3.9\n-\tsrl\t%l1,1,%l1\n+\tbl\tL3.17\n+\tsrl\t%o5,1,%o5\n \t! remainder is positive\n-\tsubcc\t%i3,%l1,%i3\n+\tsubcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits 3\n+\tbl\tL4.19\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (1*2+1), %i2\n-L.3.9:\t! remainder is negative\n-\taddcc\t%i3,%l1,%i3\n+\tadd\t%o2, (3*2+1), %o2\n+\t\n+L4.19:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (1*2-1), %i2\n-L.1.8:\t! remainder is negative\n-\taddcc\t%i3,%l1,%i3\n+\tadd\t%o2, (3*2-1), %o2\n+\t\n+L3.17:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits 1\n+\tbl\tL4.17\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (1*2+1), %o2\n+\t\n+L4.17:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (1*2-1), %o2\n+\t\n+L1.16:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n \t! depth 2, accumulated bits -1\n-\tbl\tL.2.7\n-\tsrl\t%l1,1,%l1\n+\tbl\tL2.15\n+\tsrl\t%o5,1,%o5\n \t! remainder is positive\n-\tsubcc\t%i3,%l1,%i3\n+\tsubcc\t%o3,%o5,%o3\n \t! depth 3, accumulated bits -1\n-\tbl\tL.3.7\n-\tsrl\t%l1,1,%l1\n+\tbl\tL3.15\n+\tsrl\t%o5,1,%o5\n \t! remainder is positive\n-\tsubcc\t%i3,%l1,%i3\n+\tsubcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits -1\n+\tbl\tL4.15\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (-1*2+1), %i2\n-L.3.7:\t! remainder is negative\n-\taddcc\t%i3,%l1,%i3\n+\tadd\t%o2, (-1*2+1), %o2\n+\t\n+L4.15:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (-1*2-1), %i2\n-L.2.7:\t! remainder is negative\n-\taddcc\t%i3,%l1,%i3\n+\tadd\t%o2, (-1*2-1), %o2\n+\t\n+L3.15:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits -3\n+\tbl\tL4.13\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (-3*2+1), %o2\n+\t\n+L4.13:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (-3*2-1), %o2\n+\t\n+L2.15:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n \t! depth 3, accumulated bits -3\n-\tbl\tL.3.5\n-\tsrl\t%l1,1,%l1\n+\tbl\tL3.13\n+\tsrl\t%o5,1,%o5\n \t! remainder is positive\n-\tsubcc\t%i3,%l1,%i3\n+\tsubcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits -5\n+\tbl\tL4.11\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (-3*2+1), %i2\n-L.3.5:\t! remainder is negative\n-\taddcc\t%i3,%l1,%i3\n+\tadd\t%o2, (-5*2+1), %o2\n+\t\n+L4.11:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n \tb\t9f\n-\tadd\t%i2, (-3*2-1), %i2\n+\tadd\t%o2, (-5*2-1), %o2\n+\t\n+L3.13:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\t! depth 4, accumulated bits -7\n+\tbl\tL4.9\n+\tsrl\t%o5,1,%o5\n+\t! remainder is positive\n+\tsubcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (-7*2+1), %o2\n+\t\n+L4.9:\n+\t! remainder is negative\n+\taddcc\t%o3,%o5,%o3\n+\tb\t9f\n+\tadd\t%o2, (-7*2-1), %o2\n+\t\n+\t9:\n end_regular_divide:\n-9:\tdeccc\t%l0\n+\tsubcc\t%o4, 1, %o4\n \tbge\tdivloop\n-\ttst\t%i3\n-\tbge\tgot_result\n-\tnop\n-\t! non-restoring fixup here\n-\tadd\t%i3, %i1, %i3\n+\ttst\t%o3\n+\tbl,a\tgot_result\n+\t! non-restoring fixup here (one instruction only!)\n+\tadd\t%o3, %o1, %o3\n+\n got_result:\n-\ttst\t%l2\n-\tbge\t1f\n-\trestore\n-\t! answer < 0\n-\tretl\t\t! leaf-routine return\n-\tneg\t%o3, %o0\t! remainder <- -%i3\n-1:\tretl\t\t! leaf-routine return\n-\tmov\t%o3, %o0\t! remainder <- %i3\n-#endif\n+\t! check to see if answer should be < 0\n+\ttst\t%g3\n+\tbl,a\t1f\n+\tsub %g0, %o3, %o3\n+1:\n+\tretl\n+\tmov %o3, %o0\n \n+#endif\n "}]}