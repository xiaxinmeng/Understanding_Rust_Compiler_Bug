{"sha": "726e292d410fc29812a95eb6d88a2ceb82d9080d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2ZTI5MmQ0MTBmYzI5ODEyYTk1ZWI2ZDg4YTJjZWI4MmQ5MDgwZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:52:44Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:52:44Z"}, "message": "PR middle-end/93926 - ICE on a built-in redeclaration returning an integer instead of a pointer\n\ngcc/c/ChangeLog:\n\n\tPR middle-end/93926\n\t* c-decl.c (types_close_enough_to_match): New function.\n\t(match_builtin_function_types):\n\t(diagnose_mismatched_decls): Add missing inform call to a warning.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/93926\n\t* gcc.dg/Wbuiltin-declaration-mismatch-13.c: New test.", "tree": {"sha": "d8e00fcfab164e45d1902b71875a8813a3a01f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8e00fcfab164e45d1902b71875a8813a3a01f2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/726e292d410fc29812a95eb6d88a2ceb82d9080d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726e292d410fc29812a95eb6d88a2ceb82d9080d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726e292d410fc29812a95eb6d88a2ceb82d9080d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726e292d410fc29812a95eb6d88a2ceb82d9080d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a499c2f899961f2c09db2dc33e60b66e8d770092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a499c2f899961f2c09db2dc33e60b66e8d770092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a499c2f899961f2c09db2dc33e60b66e8d770092"}], "stats": {"total": 159, "additions": 132, "deletions": 27}, "files": [{"sha": "199b655270c5ab1033fc44225d59c52ae26fcb99", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=726e292d410fc29812a95eb6d88a2ceb82d9080d", "patch": "@@ -1,3 +1,10 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/93926\n+\t* c-decl.c (types_close_enough_to_match): New function.\n+\t(match_builtin_function_types):\n+\t(diagnose_mismatched_decls): Add missing inform call to a warning.\n+\n 2020-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/93812"}, {"sha": "c819fd0d0d54b7147c782850f28e861b2f6b0349", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=726e292d410fc29812a95eb6d88a2ceb82d9080d", "patch": "@@ -1649,6 +1649,18 @@ c_bind (location_t loc, tree decl, bool is_global)\n \n static GTY(()) tree last_structptr_types[6];\n \n+/* Returns true if types T1 and T2 representing return types or types\n+   of function arguments are close enough to be considered interchangeable\n+   in redeclarations of built-in functions.  */\n+\n+static bool\n+types_close_enough_to_match (tree t1, tree t2)\n+{\n+  return (TYPE_MODE (t1) == TYPE_MODE (t2)\n+\t  && POINTER_TYPE_P (t1) == POINTER_TYPE_P (t2)\n+\t  && FUNCTION_POINTER_TYPE_P (t1) == FUNCTION_POINTER_TYPE_P (t2));\n+}\n+\n /* Subroutine of compare_decls.  Allow harmless mismatches in return\n    and argument types provided that the type modes match.  Set *STRICT\n    and *ARGNO to the expected argument type and number in case of\n@@ -1659,16 +1671,19 @@ static tree\n match_builtin_function_types (tree newtype, tree oldtype,\n \t\t\t      tree *strict, unsigned *argno)\n {\n-  /* Accept the return type of the new declaration if same modes.  */\n-  tree oldrettype = TREE_TYPE (oldtype);\n-  tree newrettype = TREE_TYPE (newtype);\n-\n   *argno = 0;\n   *strict = NULL_TREE;\n \n-  if (TYPE_MODE (oldrettype) != TYPE_MODE (newrettype))\n+  /* Accept the return type of the new declaration if it has the same\n+     mode and if they're both pointers or if neither is.  */\n+  tree oldrettype = TREE_TYPE (oldtype);\n+  tree newrettype = TREE_TYPE (newtype);\n+\n+  if (!types_close_enough_to_match (oldrettype, newrettype))\n     return NULL_TREE;\n \n+  /* Check that the return types are compatible but don't fail if they\n+     are not (e.g., int vs long in ILP32) and just let the caller know.  */\n   if (!comptypes (TYPE_MAIN_VARIANT (oldrettype),\n \t\t  TYPE_MAIN_VARIANT (newrettype)))\n     *strict = oldrettype;\n@@ -1692,15 +1707,7 @@ match_builtin_function_types (tree newtype, tree oldtype,\n       tree oldtype = TYPE_MAIN_VARIANT (TREE_VALUE (oldargs));\n       tree newtype = TYPE_MAIN_VARIANT (TREE_VALUE (newargs));\n \n-      /* Fail for types with incompatible modes/sizes.  */\n-      if (TYPE_MODE (TREE_VALUE (oldargs))\n-\t  != TYPE_MODE (TREE_VALUE (newargs)))\n-\treturn NULL_TREE;\n-\n-      /* Fail for function and object pointer mismatches.  */\n-      if ((FUNCTION_POINTER_TYPE_P (oldtype)\n-\t   != FUNCTION_POINTER_TYPE_P (newtype))\n-\t  || POINTER_TYPE_P (oldtype) != POINTER_TYPE_P (newtype))\n+      if (!types_close_enough_to_match (oldtype, newtype))\n \treturn NULL_TREE;\n \n       unsigned j = (sizeof (builtin_structptr_types)\n@@ -1957,11 +1964,10 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  && !C_DECL_DECLARED_BUILTIN (olddecl))\n \t{\n \t  /* Accept \"harmless\" mismatches in function types such\n-\t     as missing qualifiers or pointer vs same size integer\n-\t     mismatches.  This is for the ffs and fprintf builtins.\n-\t     However, with -Wextra in effect, diagnose return and\n-\t     argument types that are incompatible according to\n-\t     language rules.  */\n+\t     as missing qualifiers or int vs long when they're the same\n+\t     size.  However, with -Wextra in effect, diagnose return and\n+\t     argument types that are incompatible according to language\n+\t     rules.  */\n \t  tree mismatch_expect;\n \t  unsigned mismatch_argno;\n \n@@ -1999,16 +2005,25 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t      /* If types match only loosely, print a warning but accept\n \t\t the redeclaration.  */\n \t      location_t newloc = DECL_SOURCE_LOCATION (newdecl);\n+\t      bool warned = false;\n \t      if (mismatch_argno)\n-\t\twarning_at (newloc, OPT_Wbuiltin_declaration_mismatch,\n-\t\t\t    \"mismatch in argument %u type of built-in \"\n-\t\t\t    \"function %qD; expected %qT\",\n-\t\t\t    mismatch_argno, newdecl, mismatch_expect);\n+\t\twarned = warning_at (newloc, OPT_Wbuiltin_declaration_mismatch,\n+\t\t\t\t     \"mismatch in argument %u type of built-in \"\n+\t\t\t\t     \"function %qD; expected %qT\",\n+\t\t\t\t     mismatch_argno, newdecl, mismatch_expect);\n \t      else\n-\t\twarning_at (newloc, OPT_Wbuiltin_declaration_mismatch,\n-\t\t\t    \"mismatch in return type of built-in \"\n-\t\t\t    \"function %qD; expected %qT\",\n-\t\t\t    newdecl, mismatch_expect);\n+\t\twarned = warning_at (newloc, OPT_Wbuiltin_declaration_mismatch,\n+\t\t\t\t     \"mismatch in return type of built-in \"\n+\t\t\t\t     \"function %qD; expected %qT\",\n+\t\t\t\t     newdecl, mismatch_expect);\n+\t      const char *header = header_for_builtin_fn (olddecl);\n+\t      if (warned && header)\n+\t\t{\n+\t\t  rich_location richloc (line_table, newloc);\n+\t\t  maybe_add_include_fixit (&richloc, header, true);\n+\t\t  inform (&richloc,\n+\t\t\t  \"%qD is declared in header %qs\", olddecl, header);\n+\t\t}\n \t    }\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL"}, {"sha": "401c648819d40d3d5e1d1657be90968261226fdc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=726e292d410fc29812a95eb6d88a2ceb82d9080d", "patch": "@@ -1,3 +1,8 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/93926\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-13.c: New test.\n+\n 2020-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/93812"}, {"sha": "f21f407e181852136a0c3f866ad8e7999d8404f8", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-13.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726e292d410fc29812a95eb6d88a2ceb82d9080d/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-13.c?ref=726e292d410fc29812a95eb6d88a2ceb82d9080d", "patch": "@@ -0,0 +1,78 @@\n+/* PR middle-end/93926 - ICE on a built-in redeclaration returning an integer\n+   instead of a pointer\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void* ret_calloc (size_t n1, size_t n2)\n+{\n+  extern size_t calloc (size_t, size_t);    // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return (void *) calloc (n1, n2);\n+}\n+\n+void* ret_malloc (size_t n)\n+{\n+  extern size_t malloc (size_t);            // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return (void *) malloc (n);\n+}\n+\n+void* ret_realloc (void *p, size_t n)\n+{\n+  extern size_t realloc (void *p, size_t);  // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return (void *) realloc (p, n);\n+}\n+\n+void* ret_strdup (const char *s)\n+{\n+  extern size_t strdup (const char*);       // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return (void *) strdup (s);\n+}\n+\n+void* ret_strndup (const char *s, size_t n)\n+{\n+  extern size_t\n+    strndup (const char*, size_t);          // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return (void *) strndup (s, n);\n+}\n+\n+// For good measure also exerise strcmp return type (not part of the bug).\n+\n+char* ret_strcmp (const char *s, const char *t)\n+{\n+  extern char*\n+    strcmp (const char*, const char*);      // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return strcmp (s, t);\n+}\n+\n+// Exercise warnings for pointer/integer mismatches in argument types\n+// (also not part of the bug).\n+\n+char* ret_strcat (size_t s, const char *t)\n+{\n+  extern char*\n+    strcat (size_t, const char*);           // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return strcat (s, t);\n+}\n+\n+char* ret_strcpy (char *s, size_t t)\n+{\n+  extern char* strcpy (char*, size_t);      // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return strcpy (s, t);\n+}\n+\n+char* ret_strncpy (char *s, const char *t, size_t n)\n+{\n+  extern char*\n+    strncpy (char*, size_t, const char*);   // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n+\n+  return strncpy (s, n, t);\n+}"}]}