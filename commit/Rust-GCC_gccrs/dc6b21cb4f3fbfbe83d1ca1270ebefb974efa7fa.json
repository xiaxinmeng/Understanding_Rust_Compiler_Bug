{"sha": "dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2YjIxY2I0ZjNmYmZiZTgzZDFjYTEyNzBlYmVmYjk3NGVmYTdmYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-12-17T13:49:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-12-17T13:49:16Z"}, "message": "DWARF: Don't expand hash table when no insertion is needed\n\ndwarf2out_finish performs:\n\n1. save_macinfo_strings\n2. hash table traverse of index_string\n3. output_macinfo -> output_macinfo_op\n4. output_indirect_strings -> hash table traverse of output_index_string\n\nfind_slot_with_hash has\n\n if (insert == INSERT && m_size * 3 <= m_n_elements * 4)\n    expand ();\n\nwhich may expand hash table even if no insertion is neeed and change hash\ntable traverse order.  When output_macinfo_op is called, all index strings\nhave been added to hash table by save_macinfo_strings and we shouldn't\nexpand index string hash table.  Otherwise find_slot_with_hash will expand\nhash table when hash table has the right size and hash table traverse of\noutput_index_string will have a different traverse order from index_string.\n\n\tPR debug/79342\n\t* dwarf2out.c (find_AT_string_in_table): Add insert argument\n\tdefaulting to INSERT and replace INSERT.\n\t(find_AT_string): Likewise.\n\t(output_macinfo_op): Pass NO_INSERT to find_AT_string.\n\nFrom-SVN: r267202", "tree": {"sha": "3e677886f5fd74a4e30f43e668a35c71ddc3f37f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e677886f5fd74a4e30f43e668a35c71ddc3f37f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0418f237b2143b16fd344fedcebafaf73faab571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0418f237b2143b16fd344fedcebafaf73faab571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0418f237b2143b16fd344fedcebafaf73faab571"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "9725e49b6a679901f3d87ad034b5fa146efb1a34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa", "patch": "@@ -1,3 +1,11 @@\n+2018-12-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR debug/79342\n+\t* dwarf2out.c (find_AT_string_in_table): Add insert argument\n+\tdefaulting to INSERT and replace INSERT.\n+\t(find_AT_string): Likewise.\n+\t(output_macinfo_op): Pass NO_INSERT to find_AT_string.\n+\n 2018-12-15  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* coverage.c (struct conts_entry): Add n_counts."}, {"sha": "24e2d97d1e77e573220c6c81e113dbb7504f76f3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=dc6b21cb4f3fbfbe83d1ca1270ebefb974efa7fa", "patch": "@@ -4618,12 +4618,13 @@ indirect_string_hasher::equal (indirect_string_node *x1, const char *x2)\n \n static struct indirect_string_node *\n find_AT_string_in_table (const char *str,\n-\t\t\t hash_table<indirect_string_hasher> *table)\n+\t\t\t hash_table<indirect_string_hasher> *table,\n+\t\t\t enum insert_option insert = INSERT)\n {\n   struct indirect_string_node *node;\n \n   indirect_string_node **slot\n-    = table->find_slot_with_hash (str, htab_hash_string (str), INSERT);\n+    = table->find_slot_with_hash (str, htab_hash_string (str), insert);\n   if (*slot == NULL)\n     {\n       node = ggc_cleared_alloc<indirect_string_node> ();\n@@ -4640,12 +4641,12 @@ find_AT_string_in_table (const char *str,\n /* Add STR to the indirect string hash table.  */\n \n static struct indirect_string_node *\n-find_AT_string (const char *str)\n+find_AT_string (const char *str, enum insert_option insert = INSERT)\n {\n   if (! debug_str_hash)\n     debug_str_hash = hash_table<indirect_string_hasher>::create_ggc (10);\n \n-  return find_AT_string_in_table (str, debug_str_hash);\n+  return find_AT_string_in_table (str, debug_str_hash, insert);\n }\n \n /* Add a string attribute value to a DIE.  */\n@@ -28095,7 +28096,19 @@ output_macinfo_op (macinfo_entry *ref)\n       break;\n     case DW_MACRO_define_strp:\n     case DW_MACRO_undef_strp:\n-      node = find_AT_string (ref->info);\n+      /* NB: dwarf2out_finish performs:\n+\t   1. save_macinfo_strings\n+\t   2. hash table traverse of index_string\n+\t   3. output_macinfo -> output_macinfo_op\n+\t   4. output_indirect_strings\n+\t\t-> hash table traverse of output_index_string\n+\n+\t When output_macinfo_op is called, all index strings have been\n+\t added to hash table by save_macinfo_strings and we can't pass\n+\t INSERT to find_slot_with_hash which may expand hash table, even\n+\t if no insertion is needed, and change hash table traverse order\n+\t between index_string and output_index_string.  */\n+      node = find_AT_string (ref->info, NO_INSERT);\n       gcc_assert (node\n \t\t  && (node->form == DW_FORM_strp\n \t\t      || node->form == dwarf_FORM (DW_FORM_strx)));"}]}