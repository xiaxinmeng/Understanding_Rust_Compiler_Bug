{"sha": "5472d1951a2f96bf92d004dec143cd21a4da3965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ3MmQxOTUxYTJmOTZiZjkyZDAwNGRlYzE0M2NkMjFhNGRhMzk2NQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2000-12-26T00:25:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-12-26T00:25:13Z"}, "message": "MenuContainer.java: Fixed typo.\n\n\t* java/awt/MenuContainer.java: Fixed typo.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added SystemColor.java.\n\t* java/awt/SystemColor.java: New file.\n\n\t* java/awt/Color.java (rgba): Now package-private.\n\n\t* java/awt/event/InputEvent.java (isAltGraphDown): New method.\n\n\t* java/awt/event/ContainerEvent.java (getContainer): Renamed from\n\tgetComponent.\n\n\t* java/awt/MenuItem.java (addNotify): New method.\n\t(MenuItem(String,MenuShortcut)): New constructor.\n\t(setLabel): Notify peer of change.\n\t(setEnabled): Likewise.\n\n\t* java/awt/GridLayout.java (toString): New method.\n\n\t* java/awt/FlowLayout.java (LEADING, TRAILING): New constants.\n\t(FlowLayout): Check for LEADING and TRAILING.\n\t(setAlignment): Likewise.\n\t(layoutContainer): Handle component orientation.\n\n\t* java/awt/Component.java (orientatin): New field.\n\t(setComponentOrientation): Wrote.\n\t(getComponentOrientation): Wrote.\n\n\t* java/awt/Event.java (Event): Implements Serializable.\n\t(consumed): New field for serialization.\n\t* java/awt/Dimension.java (Dimension): Implements Serializable.\n\t* java/awt/Cursor.java (Cursor): Implements Serializable.\n\t* java/awt/Container.java (Container): No longer abstract.\n\n\t* java/awt/Choice.java: Wrote.\n\t* java/awt/Checkbox.java: Wrote.\n\t* java/awt/ItemSelectable.java: Documented.\n\t* java/awt/CheckboxGroup.java: Wrote.\n\n\t* java/awt/CardLayout.java (layoutContainer): Directly use fields\n\tin other classes.\n\t(getSize): Likewise.\n\nFrom-SVN: r38486", "tree": {"sha": "a938f800a6d828c421e0820a9d7ebe6d666e7f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a938f800a6d828c421e0820a9d7ebe6d666e7f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5472d1951a2f96bf92d004dec143cd21a4da3965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5472d1951a2f96bf92d004dec143cd21a4da3965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5472d1951a2f96bf92d004dec143cd21a4da3965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5472d1951a2f96bf92d004dec143cd21a4da3965/comments", "author": null, "committer": null, "parents": [{"sha": "83050e0d93035b6d3f426df57e9096243d63800e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83050e0d93035b6d3f426df57e9096243d63800e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83050e0d93035b6d3f426df57e9096243d63800e"}], "stats": {"total": 925, "additions": 851, "deletions": 74}, "files": [{"sha": "f7544c260d9e544e17d773d4a955c165b2c23de2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -1,3 +1,49 @@\n+2000-12-25  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/awt/MenuContainer.java: Fixed typo.\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (awt_java_source_files): Added SystemColor.java.\n+\t* java/awt/SystemColor.java: New file.\n+\n+\t* java/awt/Color.java (rgba): Now package-private.\n+\n+\t* java/awt/event/InputEvent.java (isAltGraphDown): New method.\n+\n+\t* java/awt/event/ContainerEvent.java (getContainer): Renamed from\n+\tgetComponent.\n+\n+\t* java/awt/MenuItem.java (addNotify): New method.\n+\t(MenuItem(String,MenuShortcut)): New constructor.\n+\t(setLabel): Notify peer of change.\n+\t(setEnabled): Likewise.\n+\n+\t* java/awt/GridLayout.java (toString): New method.\n+\n+\t* java/awt/FlowLayout.java (LEADING, TRAILING): New constants.\n+\t(FlowLayout): Check for LEADING and TRAILING.\n+\t(setAlignment): Likewise.\n+\t(layoutContainer): Handle component orientation.\n+\n+\t* java/awt/Component.java (orientatin): New field.\n+\t(setComponentOrientation): Wrote.\n+\t(getComponentOrientation): Wrote.\n+\n+\t* java/awt/Event.java (Event): Implements Serializable.\n+\t(consumed): New field for serialization.\n+\t* java/awt/Dimension.java (Dimension): Implements Serializable.\n+\t* java/awt/Cursor.java (Cursor): Implements Serializable.\n+\t* java/awt/Container.java (Container): No longer abstract.\n+\n+\t* java/awt/Choice.java: Wrote.\n+\t* java/awt/Checkbox.java: Wrote.\n+\t* java/awt/ItemSelectable.java: Documented.\n+\t* java/awt/CheckboxGroup.java: Wrote.\n+\n+\t* java/awt/CardLayout.java (layoutContainer): Directly use fields\n+\tin other classes.\n+\t(getSize): Likewise.\n+\n 2000-12-24  Jeff Sturm  <jeff.sturm@commerceone.com>\n \n \t* java/io/FileDescriptor.java: Initialize fd to -1."}, {"sha": "f18686e220a30e6c4803cb223ac689da35a23b86", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -624,6 +624,7 @@ java/awt/RenderingHints.java \\\n java/awt/ScrollPane.java \\\n java/awt/Scrollbar.java\t\\\n java/awt/Shape.java \\\n+java/awt/SystemColor.java \\\n java/awt/TextArea.java \\\n java/awt/TextComponent.java \\\n java/awt/TextField.java\t\\"}, {"sha": "bc2e06afa71e4473445ffabf6c471e3dfda89fdb", "filename": "libjava/Makefile.in", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -120,29 +120,43 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n \n AUTOMAKE_OPTIONS = foreign no-installinfo\n-@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@NO_X_TRUE@cond_x_ltlibrary = \n-@NO_X_FALSE@cond_x_ltlibrary = @NO_X_FALSE@libgcjx.la\n+@TESTSUBDIR_TRUE@SUBDIRS = \\\n+@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = \\\n+@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = \\\n+@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = \\\n+@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = \\\n+@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@NO_X_TRUE@cond_x_ltlibrary = \\\n+@NO_X_FALSE@cond_x_ltlibrary = \\\n+@NO_X_FALSE@libgcjx.la\n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = @NEEDS_DATA_START_TRUE@libgcjdata.a\n-@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = @NEEDS_DATA_START_TRUE@libgcjdata.c\n+@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = \\\n+@NEEDS_DATA_START_TRUE@libgcjdata.a\n+@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = \\\n+@NEEDS_DATA_START_TRUE@libgcjdata.c\n \n-@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij\n+@NATIVE_TRUE@bin_PROGRAMS = \\\n+@NATIVE_TRUE@jv-convert gij\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@fastjar\n-@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@fastjar\n+@CANADIAN_FALSE@ZIP = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = \\\n+@CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -159,8 +173,10 @@ AM_CXXFLAGS = -fno-rtti -fvtable-thunks -fasynchronous-exceptions \\\n \t-fdollars-in-identifiers \\\n \t@LIBGCJ_CXXFLAGS@ @EXCEPTIONSPEC@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE\n \n-@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = \\\n+@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = \\\n+@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = -g @LIBGCJ_JAVAFLAGS@\n@@ -229,7 +245,8 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -376,6 +393,7 @@ java/awt/RenderingHints.java \\\n java/awt/ScrollPane.java \\\n java/awt/Scrollbar.java\t\\\n java/awt/Shape.java \\\n+java/awt/SystemColor.java \\\n java/awt/TextArea.java \\\n java/awt/TextComponent.java \\\n java/awt/TextField.java\t\\\n@@ -1194,7 +1212,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -1337,10 +1355,11 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/PopupMenu.P .deps/java/awt/Rectangle.P \\\n .deps/java/awt/RenderingHints.P .deps/java/awt/ScrollPane.P \\\n .deps/java/awt/Scrollbar.P .deps/java/awt/Shape.P \\\n-.deps/java/awt/TextArea.P .deps/java/awt/TextComponent.P \\\n-.deps/java/awt/TextField.P .deps/java/awt/Toolkit.P \\\n-.deps/java/awt/Transparency.P .deps/java/awt/Window.P \\\n-.deps/java/awt/color/ColorSpace.P .deps/java/awt/color/ICC_ColorSpace.P \\\n+.deps/java/awt/SystemColor.P .deps/java/awt/TextArea.P \\\n+.deps/java/awt/TextComponent.P .deps/java/awt/TextField.P \\\n+.deps/java/awt/Toolkit.P .deps/java/awt/Transparency.P \\\n+.deps/java/awt/Window.P .deps/java/awt/color/ColorSpace.P \\\n+.deps/java/awt/color/ICC_ColorSpace.P \\\n .deps/java/awt/color/ICC_Profile.P \\\n .deps/java/awt/datatransfer/Clipboard.P \\\n .deps/java/awt/event/AWTEventListener.P \\\n@@ -2096,7 +2115,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "05e4a44b9f48aaba4b8626c23ad04464290e868f", "filename": "libjava/java/awt/CardLayout.java", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCardLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCardLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCardLayout.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -19,7 +19,7 @@\n  * time.  This class includes methods for changing which card is\n  * shown.\n  *\n- * @verson 0.0\n+ * @version 0.0\n  * @author Tom Tromey <tromey@redhat.com>\n  * @date December 2, 2000\n  */\n@@ -127,24 +127,22 @@ public void last (Container parent)\n    */\n   public void layoutContainer (Container parent)\n   {\n-    // FIXME: can we just use the width and height fields of parent?\n-    // Or will that break with subclassing?\n-    Dimension d = parent.getSize ();\n+    int width = parent.width;\n+    int height = parent.height;\n \n     Insets ins = parent.getInsets ();\n \n-    int num = parent.getComponentCount ();\n-    // This is more efficient than calling getComponents().\n+    int num = parent.ncomponents;\n     Component[] comps = parent.component;\n-    \n+\n     for (int i = 0; i < num; ++i)\n       {\n \tif (comps[i].isVisible ())\n \t  {\n \t    // Only resize the one we care about.\n \t    comps[i].setBounds (hgap + ins.left, vgap + ins.top,\n-\t\t\t\td.width - 2 * hgap - ins.left - ins.right,\n-\t\t\t\td.height - 2 * vgap - ins.top - ins.bottom);\n+\t\t\t\twidth - 2 * hgap - ins.left - ins.right,\n+\t\t\t\theight - 2 * vgap - ins.top - ins.bottom);\n \t    break;\n \t  }\n       }\n@@ -302,14 +300,11 @@ else if (what == PREV)\n   // Compute the size according to WHAT.\n   private Dimension getSize (Container parent, int what)\n   {\n-    int w = 0, h = 0, num = parent.getComponentCount ();\n-    // This is more efficient than calling getComponents().\n+    int w = 0, h = 0, num = parent.ncomponents;\n     Component[] comps = parent.component;\n \n     for (int i = 0; i < num; ++i)\n       {\n-\t// FIXME: can we just directly read the fields in Component?\n-\t// Or will that not work with subclassing?\n \tDimension d;\n \n \tif (what == MIN)"}, {"sha": "10c6744376ccb6eabf493b8b387b656f579d48dd", "filename": "libjava/java/awt/Checkbox.java", "status": "modified", "additions": 173, "deletions": 3, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCheckbox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCheckbox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckbox.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -7,9 +7,179 @@\n details.  */\n \n package java.awt;\n+import java.awt.event.*;\n+import java.awt.peer.CheckboxPeer;\n \n-/* A very incomplete placeholder. */\n-\n-public class Checkbox extends Component\n+/** This class implements a component which has an on/off state.  Two\n+ * or more Checkboxes can be grouped by a CheckboxGroup.\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date December 25, 2000\n+ */\n+public class Checkbox extends Component implements ItemSelectable\n {\n+  /** Create a new checkbox.\n+   * @param label The checkbox label.  A null value is the same as \"\";\n+   *              this is the default.\n+   * @param state The initial check state; defaults to false.\n+   * @param group The CheckboxGroup.  Defaults to null.\n+   */\n+  public Checkbox ()\n+  {\n+    this (null, null, false);\n+  }\n+\n+  public Checkbox (String label)\n+  {\n+    this (label, null, false);\n+  }\n+\n+  public Checkbox (String label, boolean state)\n+  {\n+    this (label, null, state);\n+  }\n+\n+  public Checkbox (String label, boolean state, CheckboxGroup group)\n+  {\n+    this (label, group, state);\n+  }\n+\n+  public Checkbox (String label, CheckboxGroup group, boolean state)\n+  {\n+    this.label = label;\n+    this.group = group;\n+    this.state = state;\n+  }\n+\n+  /** Add a listener for item events.\n+   * @param listener The listener to add.\n+   */\n+  public synchronized void addItemListener (ItemListener listener)\n+  {\n+    listeners = AWTEventMulticaster.add (listeners, listener);\n+  }\n+\n+  /** This creates the component's peer.  */\n+  public void addNotify ()\n+  {\n+    if (peer == null)\n+      peer = getToolkit ().createCheckbox (this);\n+  }\n+\n+  /** Returns the current CheckboxGroup associated with this\n+   * Checkbox.  */\n+  public CheckboxGroup getCheckboxGroup ()\n+  {\n+    return group;\n+  }\n+\n+  /** Returns the current label; might be null.  */\n+  public String getLabel ()\n+  {\n+    return label;\n+  }\n+\n+  /** Returns this checkbox's label if this checkbox is selected.  */\n+  public Object[] getSelectedObjects ()\n+  {\n+    Object[] r;\n+    if (state)\n+      {\n+\tr = new Object[1];\n+\tr[0] = label;\n+      }\n+    else\n+      r = new Object[0];\n+    return r;\n+  }\n+\n+  /** Returns the current state of this checkbox.  */\n+  public boolean getState ()\n+  {\n+    return state;\n+  }\n+\n+  /** Generates a String representation of this Checkbox's state.  */\n+  protected String paramString ()\n+  {\n+    return (\"Checkbox[\"\n+\t    + \"state=\" + state + \",\"\n+\t    + \"label=\" + label + \",\"\n+\t    + \"group=\" + group + \"]\");\n+  }\n+\n+  /** Process an event for this Checkbox.\n+   * @param event The event the process.\n+   */\n+  protected void processEvent (AWTEvent event) \n+  {\n+    if (event instanceof ItemEvent)\n+      processItemEvent ((ItemEvent) event);\n+    else\n+      super.processEvent (event);\n+  }\n+\n+  /** Process an item event for this Checkbox.\n+   * @param event The ItemEvent to process\n+   */\n+  protected void processItemEvent (ItemEvent event)\n+  {\n+    if (listeners != null)\n+      listeners.itemStateChanged (event);\n+  }\n+\n+  /** Remove an item listener.\n+   * @param listener Item listener to remove.\n+   */\n+  public synchronized void removeItemListener (ItemListener listener)\n+  {\n+    listeners = AWTEventMulticaster.remove (listeners, listener);\n+  }\n+\n+  /** Set this checkbox's group.\n+   * @param group The new group.  null means remove the Checkbox from\n+   *              its group.\n+   */\n+  public void setCheckboxGroup (CheckboxGroup group)\n+  {\n+    this.group = group;\n+    if (peer != null)\n+      {\n+\tCheckboxPeer cp = (CheckboxPeer) peer;\n+\tcp.setCheckboxGroup (group);\n+      }\n+  }\n+\n+  /** Set the checkbox's label.\n+   * @param label The new label\n+   */\n+  public synchronized void setLabel (String label)\n+  {\n+    this.label = label;\n+    if (peer != null)\n+      {\n+\tCheckboxPeer cp = (CheckboxPeer) peer;\n+\t// FIXME: unclear what to do here; we err on the side of\n+\t// caution.\n+\tcp.setLabel (label == null ? \"\" : label);\n+      }\n+  }\n+\n+  /** Set the checkbox's state.\n+   * @param state The new state.\n+   */\n+  public void setState (boolean state)\n+  {\n+    this.state = state;\n+    if (peer != null)\n+      {\n+\tCheckboxPeer cp = (CheckboxPeer) peer;\n+\tcp.setState (state);\n+      }\n+  }\n+\n+  private ItemListener listeners;\n+\n+  String label;\n+  CheckboxGroup group;\n+  boolean state;\n }"}, {"sha": "d098a420999a90d27e7f86bf1ec8a5c52d840c7a", "filename": "libjava/java/awt/CheckboxGroup.java", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxGroup.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -8,11 +8,59 @@\n \n package java.awt;\n \n-/* Status: Empty placeholder. */\n+import java.io.Serializable;\n \n-public class CheckboxGroup\n+/** This class is used to groups checkbox components.\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date December 25, 2000\n+ */\n+public class CheckboxGroup implements Serializable\n {\n-  // Fields from the serialization spec. Decalare others \"transient\".\n-  boolean state;\n-  int checkboxMenuItemSerializedDataVersion;\n+  // Current set checkbox.\n+  Checkbox selectedCheckbox;\n+\n+  /** Create a new instance of CheckboxGroup.  */\n+  public CheckboxGroup ()\n+  {\n+  }\n+\n+  /** Returns the currently selected checkbox in the group.\n+   * @deprecated\n+   */\n+  public Checkbox getCurrent ()\n+  {\n+    return getSelectedCheckbox ();\n+  }\n+\n+  /** Returns the currently selected checkbox in the group.  */\n+  public Checkbox getSelectedCheckbox ()\n+  {\n+    return selectedCheckbox;\n+  }\n+\n+  /** Set the selected checkbox.\n+   * @deprecated\n+   */\n+  public synchronized void setCurrent (Checkbox checkbox)\n+  {\n+    setSelectedCheckbox (checkbox);\n+  }\n+\n+  /** Set the selected checkbox.  */\n+  public synchronized void setSelectedCheckbox (Checkbox checkbox)\n+  {\n+    if (checkbox != null && checkbox.group != this)\n+      return;\n+\n+    selectedCheckbox.setState (false);\n+    selectedCheckbox = checkbox;\n+    if (checkbox != null)\n+      checkbox.setState (true);\n+  }\n+\n+  /** Return String representation of this class and current Checkbox.  */\n+  public String toString ()\n+  {\n+    return \"[CheckboxGroup: \" + selectedCheckbox + \"]\";\n+  }\n }"}, {"sha": "3e30ead4e3577711fd815aa1e4b1b467423e48df", "filename": "libjava/java/awt/Choice.java", "status": "modified", "additions": 263, "deletions": 3, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -7,9 +7,269 @@\n details.  */\n \n package java.awt;\n+import java.awt.event.*;\n+import java.awt.peer.ChoicePeer;\n+import java.util.ArrayList;\n \n-/* A very incomplete placeholder. */\n-\n-public class Choice extends Component\n+/** This component lets the user choose an item from a list of\n+ * Strings.\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date December 25, 2000\n+ */\n+public class Choice extends Component implements ItemSelectable\n {\n+  /** Create a new Choice object.  */\n+  public Choice ()\n+  {\n+    items = new ArrayList ();\n+    selected = -1;\n+  }\n+\n+  /** Add a new item to this Choice object.  If the item is the first\n+   * item on the list, then it is selected.\n+   * @param item The new item; must be non-null.\n+   */\n+  public synchronized void add (String item)\n+  {\n+    if (item == null)\n+      throw new IllegalArgumentException (\"item must be non-null\");\n+    items.add (item);\n+\n+    int i = items.size () - 1;\n+    if (peer != null)\n+      {\n+\tChoicePeer cp = (ChoicePeer) peer;\n+\tcp.add (item, i);\n+      }\n+\n+    if (i == 0)\n+      select (0);\n+  }\n+\n+  /** Add a new item to this Choice object.  This is the same as the\n+   * add method.  */\n+  public void addItem (String item)\n+  {\n+    add (item);\n+  }\n+\n+  /** Add a listener for item events.\n+   * @param listener The listener to add.\n+   */\n+  public synchronized void addItemListener (ItemListener listener)\n+  {\n+    listeners = AWTEventMulticaster.add (listeners, listener);\n+  }\n+\n+  /** This creates the component's peer.  */\n+  public void addNotify ()\n+  {\n+    if (peer == null)\n+      peer = getToolkit ().createChoice (this);\n+  }\n+\n+  /** Returns number of items.\n+   * @deprecated\n+   */\n+  public int countItems ()\n+  {\n+    return getItemCount ();\n+  }\n+\n+  /** Returns an item from this choice.\n+   * @param index Index of the item.  Indices start at zero.\n+   */\n+  public String getItem (int index)\n+  {\n+    return (String) items.get (index);\n+  }\n+\n+  /** Returns number of items in Choice.  */\n+  public int getItemCount ()\n+  {\n+    return items.size ();\n+  }\n+\n+  /** Returns index of selected item; -1 if no item is selected.  */\n+  public int getSelectedIndex ()\n+  {\n+    return selected;\n+  }\n+\n+  /** Returns currently selected item; null if no item is selected.  */\n+  public synchronized String getSelectedItem ()\n+  {\n+    return selected == -1 ? null : (String) items.get (selected);\n+  }\n+\n+  /** Returns the currently selected item.  */\n+  public synchronized Object[] getSelectedObjects ()\n+  {\n+    // The JCL says this can return null but that breaks the contract\n+    // for ItemSelectable.\n+    Object[] r;\n+    if (selected != -1)\n+      {\n+\tr = new Object[1];\n+\tr[0] = items.get (selected);\n+      }\n+    else\n+      r = new Object[0];\n+    return r;\n+  }\n+\n+  /** Inserts an item into this Choice.  Existing items are shifted\n+   * upwards.  If the new item is the only item, then it is selected.\n+   * If the currently selected item is shifted, then the first item is\n+   * selected.  If the currently selected item is not shifted, then it\n+   * remains selected.\n+   * @param item The new item\n+   * @param index The position at which to insert it.\n+   */\n+  public synchronized void insert (String item, int index)\n+  {\n+    if (index > items.size ())\n+      index = items.size ();\n+    items.add (index, item);\n+\n+    if (peer != null)\n+      {\n+\tChoicePeer cp = (ChoicePeer) peer;\n+\tcp.add (item, index);\n+      }\n+\n+    if (items.size () == 1 || selected >= index)\n+      select (0);\n+  }\n+\n+  /** Generates a String representation of this Choice's state.  */\n+  protected String paramString ()\n+  {\n+    return (\"Choice[\"\n+\t    + \"selected=\" + selected\n+\t    + \"]\");\n+  }\n+\n+  /** Process an event for this Choice\n+   * @param event The event the process.\n+   */\n+  protected void processEvent (AWTEvent event)\n+  {\n+    if (event instanceof ItemEvent)\n+      processItemEvent ((ItemEvent) event);\n+    else\n+      super.processEvent (event);\n+  }\n+\n+  /** Process an item event for this Choice.\n+   * @param event The ItemEvent to process\n+   */\n+  protected void processItemEvent (ItemEvent event)\n+  {\n+    if (listeners != null)\n+      listeners.itemStateChanged (event);\n+  }\n+\n+  /** Remove an item from this Choice.  If several matches exist, the\n+   * first one is removed.  If the removed item is selected, the the\n+   * first item is selected.\n+   * @param item The item string.\n+   */\n+  public synchronized void remove (String item)\n+  {\n+    int size = items.size ();\n+    for (int i = 0; i < size; ++i)\n+      {\n+\tif (item.equals (items.get (i)))\n+\t  {\n+\t    remove (i);\n+\t    break;\n+\t  }\n+      }\n+    throw new IllegalArgumentException (\"item \\\"\" + item + \"\\\" not in Choice\");\n+  }\n+\n+  /** Remove an item from this Choice.  If the removed item is\n+   * selected, the the first item is selected.\n+   * @param index Index of the item to remove\n+   */\n+  public synchronized void remove (int index)\n+  {\n+    items.remove (index);\n+\n+    if (peer != null)\n+      {\n+\tChoicePeer cp = (ChoicePeer) peer;\n+\tcp.remove (index);\n+      }\n+\n+    if (index == selected)\n+      select (0);\n+    else if (selected > index)\n+      --selected;\n+  }\n+\n+  /** Remove all items from this choice.  */\n+  public synchronized void removeAll ()\n+  {\n+    int oldsize = items.size ();\n+    items.clear ();\n+    selected = -1;\n+\n+    if (peer != null)\n+      {\n+\tChoicePeer cp = (ChoicePeer) peer;\n+\tfor (int i = 0; i < oldsize; ++i)\n+\t  {\n+\t    // Always remove item 0.\n+\t    cp.remove (0);\n+\t  }\n+      }\n+  }\n+\n+  /** Remove an item listener.\n+   * @param listener Item listener to remove.\n+   */\n+  public synchronized void removeItemListener (ItemListener listener)\n+  {\n+    listeners = AWTEventMulticaster.remove (listeners, listener);\n+  }\n+\n+  /** Select an item in this Choice.\n+   * @param item Name of the item to select.\n+   */\n+  public synchronized void select (String item)\n+  {\n+    int size = items.size ();\n+    for (int i = 0; i < size; ++i)\n+      {\n+\tif (item.equals (items.get (i)))\n+\t  {\n+\t    select (i);\n+\t    break;\n+\t  }\n+      }\n+  }\n+\n+  /** Select an item in this choice.\n+   * @param index Index of item to select.\n+   */\n+  public synchronized void select (int index)\n+  {\n+    if (index < 0 || index > items.size ())\n+      throw new IllegalArgumentException (\"index out of range\");\n+    selected = index;\n+    if (peer != null)\n+      {\n+\tChoicePeer cp = (ChoicePeer) peer;\n+\tcp.select (index);\n+      }\n+  }\n+\n+  private ItemListener listeners;\n+\n+  // List of items.\n+  ArrayList items;\n+  // Index of selected item.\n+  int selected;\n }"}, {"sha": "6ae4621d5bef75d16d04df136609926b3595b4b5", "filename": "libjava/java/awt/Color.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FColor.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -38,7 +38,7 @@ public class Color extends Object implements Paint, java.io.Serializable\n   // The internal sRGB representation.\n   // Alpha is bits 24-31, if hasalpha is true.\n   // Red is bits 16-23; Green is bits 8-15; Blue is bits 0-7.\n-  private int rgba = 0xFFFFFFFF;\n+  int rgba = 0xFFFFFFFF;\n \n   public Color(int rgb)\n   {"}, {"sha": "da5106e02e1e764c87aefb6c6f102f501ea6efa8", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -90,6 +90,8 @@ public abstract class Component implements ImageObserver, MenuContainer,\n   transient HierarchyListener hierarchyListener;\n   transient HierarchyBoundsListener hierarchyBoundsListener;\n \n+  transient ComponentOrientation orientation = ComponentOrientation.UNKNOWN;\n+\n   protected Component()\n   {\n   }\n@@ -1569,15 +1571,14 @@ protected void firePropertyChange(String propertyName, Object oldValue,\n   \n   public void setComponentOrientation(ComponentOrientation o)\n   {\n-    // FIXME\n+    orientation = o;\n   }\n-  \n+\n   public ComponentOrientation getComponentOrientation()\n   {\n-    // FIXME\n-    return null;\n+    return orientation;\n   }\n-  \n+\n   /*\n   public AccessibleContext getAccessibleContext()\n   {"}, {"sha": "aa16a8f4461750688d11bb12bf6daf318b7e1e68", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -18,7 +18,7 @@\n \n /* A somewhat incomplete class. */\n \n-public abstract class Container extends Component\n+public class Container extends Component\n {\n   /* Serialized fields from the serialization spec. */\n   int ncomponents;"}, {"sha": "e964a12d15f3faaf6489438ecffd301b2e437ad0", "filename": "libjava/java/awt/Cursor.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCursor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FCursor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCursor.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -10,7 +10,7 @@\n \n /* A somewhat incomplete placeholder. */\n \n-public class Cursor\n+public class Cursor implements java.io.Serializable\n {\n   public static final int DEFAULT_CURSOR   = 0,\n \t\t\t  CROSSHAIR_CURSOR = 1,"}, {"sha": "60341cd23c257a9e75787f18a04ae0bfae533dcd", "filename": "libjava/java/awt/Dimension.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FDimension.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FDimension.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDimension.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -20,6 +20,7 @@\n  */\n \n public class Dimension extends java.awt.geom.Dimension2D\n+  implements java.io.Serializable\n {\n   public int height;\n   public int width;"}, {"sha": "481f5b814323dad499f105e025cd401580bcdf0b", "filename": "libjava/java/awt/Event.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEvent.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -14,7 +14,7 @@\n  * Status:  Believed complete and correct.\n  */\n \n-public class Event\n+public class Event implements java.io.Serializable\n {\n   public static final int SHIFT_MASK = 1,\n \t\t\t  CTRL_MASK = 2,\n@@ -82,9 +82,10 @@\n \t\t\t  WINDOW_ICONIFY = 203,\n \t\t\t  WINDOW_MOVED = 205;\n \n-  public Event evt;\n   public Object arg;\n   public int clickCount;\n+  boolean consumed;\t\t// Required by serialization spec.\n+  public Event evt;\n   public int id;\n   public int key; \n   public int modifiers;"}, {"sha": "95cb6e65521e1ae64a51b713d9fd521fc4a969d4", "filename": "libjava/java/awt/FlowLayout.java", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FFlowLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FFlowLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFlowLayout.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -27,6 +27,13 @@ public class FlowLayout implements LayoutManager, Serializable\n   /** Constant that specifies right alignment.  */\n   public static final int RIGHT = 2;\n \n+  /** Constant that specifies alignment to leading edge of container's\n+   * orientation.  */\n+  public static final int LEADING = 3;\n+  /** Constant that specifies alignment to trailing edge of container's\n+   * orientation.  */\n+  public static final int TRAILING = 4;\n+\n   /** Add a new component to the layout.  This particular implementation\n    * does nothing.\n    */\n@@ -82,7 +89,8 @@ public FlowLayout (int align, int hgap, int vgap)\n       throw new IllegalArgumentException (\"horizontal gap must be nonnegative\");\n     if (vgap < 0)\n       throw new IllegalArgumentException (\"vertical gap must be nonnegative\");\n-    if (align != LEFT && align != RIGHT && align != CENTER)\n+    if (align != LEFT && align != RIGHT && align != CENTER\n+\t&& align != LEADING && align != TRAILING)\n       throw new IllegalArgumentException (\"invalid align: \" + align);\n     this.align = align;\n     this.hgap = hgap;\n@@ -101,6 +109,9 @@ public void layoutContainer (Container parent)\n     Dimension d = parent.getSize ();\n     Insets ins = parent.getInsets ();\n \n+    ComponentOrientation orient = parent.getComponentOrientation ();\n+    boolean left_to_right = orient.isLeftToRight ();\n+\n     int y = ins.top + vgap;\n     int i = 0;\n     while (i < num)\n@@ -128,12 +139,20 @@ public void layoutContainer (Container parent)\n \n \t// Set the location of each component for this row.\n \tint x;\n-\tif (align == LEFT)\n+\n+\tint myalign = align;\n+\tif (align == LEADING)\n+\t  myalign = left_to_right ? LEFT : RIGHT;\n+\telse if (align == TRAILING)\n+\t  myalign = left_to_right ? RIGHT : LEFT;\n+\n+\tif (myalign == LEFT)\n \t  x = ins.left + hgap;\n-\telse if (align == CENTER)\n+\telse if (myalign == CENTER)\n \t  x = (d.width - new_w) / 2;\n \telse\n \t  x = d.width - new_w;\n+\n \tfor (int k = i; i < j; ++k)\n \t  {\n \t    // FIXME: this is very inefficient.\n@@ -178,7 +197,8 @@ public void removeLayoutComponent (Component comp)\n    */\n   public void setAlignment (int align)\n   {\n-    if (align != LEFT && align != RIGHT && align != CENTER)\n+    if (align != LEFT && align != RIGHT && align != CENTER\n+\t&& align != LEADING && align != TRAILING)\n       throw new IllegalArgumentException (\"invalid align: \" + align);\n     this.align = align;\n   }"}, {"sha": "976e3849035140cba30abe29cdb49b5634119312", "filename": "libjava/java/awt/GridLayout.java", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FGridLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FGridLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGridLayout.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -224,6 +224,15 @@ public void setVgap (int vgap)\n     this.vgap = vgap;\n   }\n \n+  /** Return String description of this object.  */\n+  public String toString ()\n+  {\n+    return (\"[\" + getClass ().getName ()\n+\t    + \",hgap=\" + hgap + \",vgap=\" + vgap\n+\t    + \",rows=\" + rows + \",cols=\" + cols\n+\t    + \"]\");\n+  }\n+\n   // This method is used to compute the various sizes.\n   private Dimension getSize (Container parent, boolean is_min)\n   {"}, {"sha": "12d41b7b3e9f898d1c180262c1c4309c3971db3b", "filename": "libjava/java/awt/ItemSelectable.java", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FItemSelectable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FItemSelectable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FItemSelectable.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -9,16 +9,28 @@\n package java.awt;\n import java.awt.event.*;\n \n-/**\n+/** This interface is implemented by components that support the\n+ * select of items.  For instance, Checkbox implements this\n+ * interface.\n  * @author Tom Tromey <tromey@cygnus.com>\n  * @date April 8, 2000\n  */\n-\n-/* Status: Believed complete and correct to JDK 1.2.  */\n-\n public interface ItemSelectable\n {\n+  /** This method adds a listener to receive item events fired by the\n+   * component.\n+   * @param l The item listener to add.\n+   */\n   public void addItemListener (ItemListener l);\n+\n+  /** This method returns the items in this component which are\n+   * currently selected.\n+   * @returns A non-null array containing the items.\n+   */\n   public Object[] getSelectedObjects ();\n+\n+  /** This method removes an item listener.\n+   * @param l The item listener to remove.\n+   */\n   public void removeItemListener (ItemListener l);\n }"}, {"sha": "074a00db5c730965e653a205941ce8958f4e1895", "filename": "libjava/java/awt/MenuContainer.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FMenuContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FMenuContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuContainer.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -13,12 +13,12 @@\n  * Status:  Believed complete and correct.\n  */\n \n-public  interface MenuContainer\n+public interface MenuContainer\n {\n   public Font getFont();\n \n   /**\n-   * @deprected\n+   * @deprecated\n    */\n   public boolean postEvent(Event evt);\n "}, {"sha": "06b5accc24ea292d9de7551079938438d96d7e95", "filename": "libjava/java/awt/MenuItem.java", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuItem.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -9,8 +9,7 @@\n package java.awt;\n import java.awt.event.*;\n import java.util.EventListener;\n-\n-/* A very incomplete placeholder. */\n+import java.awt.peer.MenuItemPeer;\n \n public class MenuItem extends MenuComponent\n {\n@@ -34,6 +33,12 @@ public MenuItem (String label)\n     this.label = label;\n   }\n \n+  public MenuItem (String label, MenuShortcut shortcut)\n+  {\n+    this.label = label;\n+    this.shortcut = shortcut;\n+  }\n+\n   public String getLabel()\n   {\n     return label;\n@@ -42,6 +47,11 @@ public String getLabel()\n   public synchronized void setLabel(String label)\n   {\n     this.label = label;\n+    if (peer != null)\n+      {\n+\tMenuItemPeer mp = (MenuItemPeer) peer;\n+\tmp.setLabel (label);\n+      }\n   }\n \n   public boolean isEnabled()\n@@ -51,7 +61,18 @@ public boolean isEnabled()\n \n   public synchronized void setEnabled(boolean b)\n   {\n-    this.enabled = b;\n+    // The JCL says this method is ignored if the enabled state does\n+    // not change.  I take that to mean that the peer is not notified\n+    // in this case.\n+    if (this.enabled != b)\n+      {\n+\tthis.enabled = b;\n+\tif (peer != null)\n+\t  {\n+\t    MenuItemPeer mp = (MenuItemPeer) peer;\n+\t    mp.setEnabled (b);\n+\t  }\n+      }\n   }\n \n   /** @deprecated Use setEnabled() instead. */\n@@ -120,6 +141,16 @@ public synchronized void removeActionListener(ActionListener l)\n     actionListener = AWTEventMulticaster.remove(actionListener, l);\n   }\n \n+  public void addNotify ()\n+  {\n+    if (peer != null)\n+      {\n+\t// This choice of toolkit seems unsatisfying, but I'm not sure\n+\t// what else to do.\n+\tpeer = Toolkit.getDefaultToolkit ().createMenuItem (this);\n+      }\n+  }\n+\n   /** Returns all registered EventListers of the given listenerType. \n     * listenerType must be a subclass of EventListener, or a \n     * ClassClassException is thrown."}, {"sha": "0a77d0575ad238e86738becd0c1a6b026dabd9fe", "filename": "libjava/java/awt/SystemColor.java", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FSystemColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2FSystemColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FSystemColor.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -0,0 +1,158 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/** This class contains most of the colors used by the native\n+ * windowing sytem to draw native components.\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date December 25, 2000\n+ */\n+public final class SystemColor extends Color implements java.io.Serializable\n+{\n+  /** The background color for the title bar of an active window.  */\n+  public static final SystemColor activeCaption\n+      = new SystemColor (ACTIVE_CAPTION);\n+  /** The border color of an active window.  */\n+  public static final SystemColor activeCaptionBorder\n+      = new SystemColor (ACTIVE_CAPTION_BORDER);\n+  /** The color of text in the title bar of an active window.  */\n+  public static final SystemColor activeCaptionText\n+      = new SystemColor (ACTIVE_CAPTION_TEXT);\n+  /** The background color.  */\n+  public static final SystemColor control = new SystemColor (CONTROL);\n+  /** The darkest color of an outline.  */\n+  public static final SystemColor controlDkShadow\n+      = new SystemColor (CONTROL_DK_SHADOW);\n+  /** The second brightest color of an outline.  */\n+  public static final SystemColor controlHighlight\n+      = new SystemColor (CONTROL_HIGHLIGHT);\n+  /** The brightest color of an outline.  */\n+  public static final SystemColor controlLtHighlight\n+      = new SystemColor (CONTROL_LT_HIGHLIGHT);\n+  /** The second darkest color of an outline.  */\n+  public static final SystemColor controlShadow\n+      = new SystemColor (CONTROL_SHADOW);\n+  /** The color of text in a label.  */\n+  public static final SystemColor controlText = new SystemColor (CONTROL_TEXT);\n+  /** The background color of the desktop.  */\n+  public static final SystemColor desktop = new SystemColor (DESKTOP);\n+  /** The background color for the title bar of an inactive window.  */\n+  public static final SystemColor inactiveCaption\n+      = new SystemColor (INACTIVE_CAPTION);\n+  /** The border color of an inactive window.  */\n+  public static final SystemColor inactiveCaptionBorder\n+      = new SystemColor (INACTIVE_CAPTION_BORDER);\n+  /** The color of text in the title ar of an inactive window.  */\n+  public static final SystemColor inactiveCaptionText\n+      = new SystemColor (INACTIVE_CAPTION_TEXT);\n+  /** The background color of tooltips. */\n+  public static final SystemColor info = new SystemColor (INFO);\n+  /** The color of text in tooltips.  */\n+  public static final SystemColor infoText = new SystemColor (INFO_TEXT);\n+  /** The background color of a menu.  */\n+  public static final SystemColor menu = new SystemColor (MENU);\n+  /** The color of text in a menu.  */\n+  public static final SystemColor menuText = new SystemColor (MENU_TEXT);\n+  /** The background color of a scrollbar.  */\n+  public static final SystemColor scrollbar = new SystemColor (SCROLLBAR);\n+  /** The background color of text components.  */\n+  public static final SystemColor text = new SystemColor (TEXT);\n+  /** The background color of highlighted text.  */\n+  public static final SystemColor textHighlight\n+      = new SystemColor (TEXT_HIGHLIGHT);\n+  /** The color of highlighted text.  */\n+  public static final SystemColor textHighlightText\n+      = new SystemColor (TEXT_HIGHLIGHT_TEXT);\n+  /** The color of inactive text.  */\n+  public static final SystemColor textInactiveText\n+      = new SystemColor (TEXT_INACTIVE_TEXT);\n+  /** The color of text in text components.  */\n+  public static final SystemColor textText = new SystemColor (TEXT_TEXT);\n+  /** The background color of a window.  */\n+  public static final SystemColor window = new SystemColor (WINDOW);\n+  /** The border color of a window.  */\n+  public static final SystemColor windowBorder\n+      = new SystemColor (WINDOW_BORDER);\n+  /** The color of text in a window.  */\n+  public static final SystemColor windowText = new SystemColor (WINDOW_TEXT);\n+\n+  public static final int DESKTOP = 0;\n+  public static final int ACTIVE_CAPTION = 1;\n+  public static final int ACTIVE_CAPTION_TEXT = 2;\n+  public static final int ACTIVE_CAPTION_BORDER = 3;\n+  public static final int INACTIVE_CAPTION = 4;\n+  public static final int INACTIVE_CAPTION_TEXT = 5;\n+  public static final int INACTIVE_CAPTION_BORDER = 6;\n+  public static final int WINDOW = 7;\n+  public static final int WINDOW_BORDER = 8;\n+  public static final int WINDOW_TEXT = 9;\n+  public static final int MENU = 10;\n+  public static final int MENU_TEXT = 11;\n+  public static final int TEXT = 12;\n+  public static final int TEXT_TEXT = 13;\n+  public static final int TEXT_HIGHLIGHT = 14;\n+  public static final int TEXT_HIGHLIGHT_TEXT = 15;\n+  public static final int TEXT_INACTIVE_TEXT = 16;\n+  public static final int CONTROL = 17;\n+  public static final int CONTROL_TEXT = 18;\n+  public static final int CONTROL_HIGHLIGHT = 19;\n+  public static final int CONTROL_LT_HIGHLIGHT = 20;\n+  public static final int CONTROL_SHADOW = 21;\n+  public static final int CONTROL_DK_SHADOW = 22;\n+  public static final int SCROLLBAR = 23;\n+  public static final int INFO = 24;\n+  public static final int INFO_TEXT = 25;\n+\n+  public static final int NUM_COLORS = 26;\n+\n+  private static final int rgbs[] =\n+  {\n+    0x005c5c,\n+    0x000080,\n+    0xffffff,\n+    0xc0c0c0,\n+    0x808080,\n+    0xc0c0c0,\n+    0xc0c0c0,\n+    0xffffff,\n+    0x000000,\n+    0x000000,\n+    0xc0c0c0,\n+    0x000000,\n+    0xc0c0c0,\n+    0x000000,\n+    0x000080,\n+    0xffffff,\n+    0x808080,\n+    0xc0c0c0,\n+    0x000000,\n+    0xffffff,\n+    0xe0e0e0,\n+    0x808080,\n+    0x000000,\n+    0xe0e0e0,\n+    0xe0e000,\n+    0x000000\n+  };\n+\n+  public int getRGB ()\n+  {\n+    return rgbs[rgba];\n+  }\n+\n+  public String toString ()\n+  {\n+    return \"[\" + getClass ().getName () + \" \" + rgba + \"]\";\n+  }\n+\n+  private SystemColor (int index)\n+  {\n+    super (index, true);\n+  }\n+}"}, {"sha": "9e895191e608bad94f81c210ed287b389c95faf8", "filename": "libjava/java/awt/event/ContainerEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2Fevent%2FContainerEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2Fevent%2FContainerEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FContainerEvent.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -35,7 +35,7 @@ public Component getChild ()\n     return child;\n   }\n \n-  public Component getComponent ()\n+  public Component getContainer ()\n   {\n     return (Component) source;\n   }"}, {"sha": "e9a11b94b1451e3a790c68177021514ef2aeec1d", "filename": "libjava/java/awt/event/InputEvent.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2Fevent%2FInputEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5472d1951a2f96bf92d004dec143cd21a4da3965/libjava%2Fjava%2Fawt%2Fevent%2FInputEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FInputEvent.java?ref=5472d1951a2f96bf92d004dec143cd21a4da3965", "patch": "@@ -47,6 +47,11 @@ public boolean isAltDown ()\n     return (modifiers & ALT_MASK) != 0;\n   }\n \n+  public boolean isAltGraphDown ()\n+  {\n+    return (modifiers & ALT_GRAPH_MASK) != 0;\n+  }\n+\n   public long getWhen ()\n   {\n     return when;"}]}