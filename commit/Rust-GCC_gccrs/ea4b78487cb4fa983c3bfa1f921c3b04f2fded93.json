{"sha": "ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0Yjc4NDg3Y2I0ZmE5ODNjM2JmYTFmOTIxYzNiMDRmMmZkZWQ5Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-25T14:36:40Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-25T14:36:40Z"}, "message": "c-typeck.c, [...]: Fix comment formatting.\n\n\t* c-typeck.c, defaults.h, dwarf.h, dwarf2out.c, fold-const.c,\n\tgthr-dce.h, gthr-posix.h, gthr-solaris.h, gthr-win32.h,\n\tlambda-code.c, lambda-mat.c, libgcc2.c, stmt.c,\n\ttree-ssa-pre.c, tree-vn.c, tree.h: Fix comment formatting.\n\nFrom-SVN: r88102", "tree": {"sha": "5867ad91eef65934da4de107a8e9e80facc6cfd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5867ad91eef65934da4de107a8e9e80facc6cfd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/comments", "author": null, "committer": null, "parents": [{"sha": "e75220c8ced33002009c5c9aa43a6db9015c9f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75220c8ced33002009c5c9aa43a6db9015c9f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75220c8ced33002009c5c9aa43a6db9015c9f50"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "f8503036037c0d7494ee9c5ab3414d40a4fdbad2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -1,3 +1,10 @@\n+2004-09-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-typeck.c, defaults.h, dwarf.h, dwarf2out.c, fold-const.c,\n+\tgthr-dce.h, gthr-posix.h, gthr-solaris.h, gthr-win32.h,\n+\tlambda-code.c, lambda-mat.c, libgcc2.c, stmt.c,\n+\ttree-ssa-pre.c, tree-vn.c, tree.h: Fix comment formatting.\n+\n 2004-09-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-loop-unswitch.c: Fix a comment typo."}, {"sha": "7d36e7bdde1373912a3f594ac4bde5b171b98b12", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -3321,7 +3321,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n   if (TREE_CODE (newrhs) == ERROR_MARK)\n     return error_mark_node;\n \n-  /* Scan operands */\n+  /* Scan operands.  */\n \n   result = build2 (MODIFY_EXPR, lhstype, lhs, newrhs);\n   TREE_SIDE_EFFECTS (result) = 1;"}, {"sha": "bdcefdb98274651a488b15999fbda603e800b236", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -248,7 +248,7 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #define TARGET_WEAK_NOT_IN_ARCHIVE_TOC 0\n #endif\n \n-/* This determines whether or not we need linkonce unwind information */\n+/* This determines whether or not we need linkonce unwind information.  */\n #ifndef TARGET_USES_WEAK_UNWIND_INFO\n #define TARGET_USES_WEAK_UNWIND_INFO 0\n #endif"}, {"sha": "2e1a7025923b56e970643e678d07592c4b2bca49", "filename": "gcc/dwarf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fdwarf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fdwarf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf.h?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -219,7 +219,7 @@ enum dwarf_fundamental_type {\n   \n     /* GNU extensions\n        The low order byte must indicate the size (in bytes) for the type.\n-       All of these types will probably break \"classic\" svr4 SDB */\n+       All of these types will probably break \"classic\" svr4 SDB.  */\n \n     FT_long_long\t= 0x8008,\n     FT_signed_long_long\t= 0x8108,"}, {"sha": "8ec62fe7829d3d4d0b967d398ad85f2dc4d97221", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -12926,7 +12926,7 @@ lookup_filename (const char *file_name)\n \treturn file_table_last_lookup_index;\n     }\n \n-  /* Didn't match the previous lookup, search the table */\n+  /* Didn't match the previous lookup, search the table.  */\n   n = VARRAY_ACTIVE_SIZE (file_table);\n   for (i = 1; i < n; i++)\n     if (strcmp (file_name, VARRAY_CHAR_PTR (file_table, i)) == 0)\n@@ -13219,15 +13219,15 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n   abbrev_die_table = ggc_alloc_cleared (ABBREV_DIE_TABLE_INCREMENT\n \t\t\t\t\t* sizeof (dw_die_ref));\n   abbrev_die_table_allocated = ABBREV_DIE_TABLE_INCREMENT;\n-  /* Zero-th entry is allocated, but unused */\n+  /* Zero-th entry is allocated, but unused.  */\n   abbrev_die_table_in_use = 1;\n \n   /* Allocate the initial hunk of the line_info_table.  */\n   line_info_table = ggc_alloc_cleared (LINE_INFO_TABLE_INCREMENT\n \t\t\t\t       * sizeof (dw_line_info_entry));\n   line_info_table_allocated = LINE_INFO_TABLE_INCREMENT;\n \n-  /* Zero-th entry is allocated, but unused */\n+  /* Zero-th entry is allocated, but unused.  */\n   line_info_table_in_use = 1;\n \n   /* Generate the initial DIE for the .debug section.  Note that the (string)"}, {"sha": "e39d75ceafc1adf8294ae5539bc145c05681b820", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -6686,7 +6686,7 @@ fold (tree expr)\n \t\t\t\t   TREE_OPERAND (arg0, 0),\n \t\t\t\t   build_real (type, c1)));\n \t    }\n-          /* Convert a + (b*c + d*e) into (a + b*c) + d*e */\n+          /* Convert a + (b*c + d*e) into (a + b*c) + d*e.  */\n           if (flag_unsafe_math_optimizations\n               && TREE_CODE (arg1) == PLUS_EXPR\n               && TREE_CODE (arg0) != MULT_EXPR)\n@@ -6701,7 +6701,7 @@ fold (tree expr)\n                   return fold (build2 (PLUS_EXPR, type, tree0, tree11));\n                 }\n             }\n-          /* Convert (b*c + d*e) + a into b*c + (d*e +a) */\n+          /* Convert (b*c + d*e) + a into b*c + (d*e +a).  */\n           if (flag_unsafe_math_optimizations\n               && TREE_CODE (arg0) == PLUS_EXPR\n               && TREE_CODE (arg1) != MULT_EXPR)\n@@ -9569,7 +9569,7 @@ tree_expr_nonnegative_p (tree t)\n \n /* Return true when T is an address and is known to be nonzero.\n    For floating point we further ensure that T is not denormal.\n-   Similar logic is present in nonzero_address in rtlanal.h  */\n+   Similar logic is present in nonzero_address in rtlanal.h.  */\n \n static bool\n tree_expr_nonzero_p (tree t)"}, {"sha": "821650933f414950a573313be2ef0c73ecfb65df", "filename": "gcc/gthr-dce.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-dce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-dce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-dce.h?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -124,7 +124,7 @@ static inline int\n __gthread_objc_init_thread_system (void)\n {\n   if (__gthread_active_p ())\n-    /* Initialize the thread storage key */\n+    /* Initialize the thread storage key.  */\n     return pthread_keycreate (&_objc_thread_storage, NULL);\n   else\n     return -1;"}, {"sha": "51c5404c467500e39fe21bbeb4e75b73b1405b78", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -143,7 +143,7 @@ __gthread_objc_init_thread_system (void)\n {\n   if (__gthread_active_p ())\n     {\n-      /* Initialize the thread storage key */\n+      /* Initialize the thread storage key.  */\n       if (pthread_key_create (&_objc_thread_storage, NULL) == 0)\n \t{\n \t  /* The normal default detach state for threads is"}, {"sha": "42514305f2c92c4bb872e0718175ca72c47be7be", "filename": "gcc/gthr-solaris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-solaris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-solaris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-solaris.h?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -113,7 +113,7 @@ static void *thread_local_storage = NULL;\n static inline int\n __gthread_objc_init_thread_system (void)\n {\n-  /* Initialize the thread storage key */\n+  /* Initialize the thread storage key.  */\n   if (__gthread_active_p ()\n       && thr_keycreate (&_objc_thread_storage, NULL) == 0)\n     return 0;"}, {"sha": "4e81598cf868e86ee103be0390dca18999d62726", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -88,7 +88,7 @@ static DWORD\t__gthread_objc_data_tls = (DWORD) -1;\n int\n __gthread_objc_init_thread_system (void)\n {\n-  /* Initialize the thread storage key */\n+  /* Initialize the thread storage key.  */\n   if ((__gthread_objc_data_tls = TlsAlloc ()) != (DWORD) -1)\n     return 0;\n   else"}, {"sha": "c1eb476c665e1814dfd2f54d344af07a68dea1f3", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -644,7 +644,7 @@ lambda_compute_auxillary_space (lambda_loopnest nest,\n      Remember the constant are in our vector a, our coefficient matrix is A,\n      and our invariant coefficient matrix is B  */\n \n-  /* Swap B and B1, and a1 and a */\n+  /* Swap B and B1, and a1 and a.  */\n   temp0 = B1;\n   B1 = B;\n   B = temp0;\n@@ -806,10 +806,10 @@ lambda_compute_target_space (lambda_loopnest auxillary_nest,\n       /* Computes the gcd of the coefficients of the linear part.  */\n       gcd1 = gcd_vector (target[i], i);\n \n-      /* Include the denominator in the GCD  */\n+      /* Include the denominator in the GCD.  */\n       gcd1 = gcd (gcd1, determinant);\n \n-      /* Now divide through by the gcd  */\n+      /* Now divide through by the gcd.  */\n       for (j = 0; j < i; j++)\n \ttarget[i][j] = target[i][j] / gcd1;\n \n@@ -822,7 +822,7 @@ lambda_compute_target_space (lambda_loopnest auxillary_nest,\n       LL_LINEAR_OFFSET (target_loop) = expression;\n     }\n \n-  /* For each loop, compute the new bounds from H */\n+  /* For each loop, compute the new bounds from H.  */\n   for (i = 0; i < depth; i++)\n     {\n       auxillary_loop = LN_LOOPS (auxillary_nest)[i];"}, {"sha": "8aa3c12a70a0f01f77885a35c4a0aefe522a0f62", "filename": "gcc/lambda-mat.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Flambda-mat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Flambda-mat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-mat.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -602,9 +602,9 @@ lambda_matrix_project_to_null (lambda_matrix B, int rowsize,\n   lambda_matrix M1, M2, M3, I;\n   int determinant;\n \n-  /* compute c(I-B^T inv(B B^T) B) e sub k   */\n+  /* Compute c(I-B^T inv(B B^T) B) e sub k.  */\n \n-  /* M1 is the transpose of B */\n+  /* M1 is the transpose of B.  */\n   M1 = lambda_matrix_new (colsize, colsize);\n   lambda_matrix_transpose (B, M1, rowsize, colsize);\n "}, {"sha": "e4fc91f905852613f63389a4fc2e2d35d7a61804", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -489,16 +489,16 @@ __udiv_w_sdiv (UWtype *rp, UWtype a1, UWtype a0, UWtype d)\n     {\n       if (a1 < d - a1 - (a0 >> (W_TYPE_SIZE - 1)))\n \t{\n-\t  /* dividend, divisor, and quotient are nonnegative */\n+\t  /* Dividend, divisor, and quotient are nonnegative.  */\n \t  sdiv_qrnnd (q, r, a1, a0, d);\n \t}\n       else\n \t{\n-\t  /* Compute c1*2^32 + c0 = a1*2^32 + a0 - 2^31*d */\n+\t  /* Compute c1*2^32 + c0 = a1*2^32 + a0 - 2^31*d.  */\n \t  sub_ddmmss (c1, c0, a1, a0, d >> 1, d << (W_TYPE_SIZE - 1));\n-\t  /* Divide (c1*2^32 + c0) by d */\n+\t  /* Divide (c1*2^32 + c0) by d.  */\n \t  sdiv_qrnnd (q, r, c1, c0, d);\n-\t  /* Add 2^31 to quotient */\n+\t  /* Add 2^31 to quotient.  */\n \t  q += (UWtype) 1 << (W_TYPE_SIZE - 1);\n \t}\n     }"}, {"sha": "0037b537c84806c70d6222767264c5ed66c18841", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -701,7 +701,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n       /* Mark clobbered registers.  */\n       if (i >= 0)\n         {\n-\t  /* Clobbering the PIC register is an error */\n+\t  /* Clobbering the PIC register is an error.  */\n \t  if (i == (int) PIC_OFFSET_TABLE_REGNUM)\n \t    {\n \t      error (\"PIC register %qs clobbered in %<asm%>\", regname);"}, {"sha": "7d218a88b7edec75211cb024b3e03214270e5ba8", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -856,7 +856,7 @@ phi_translate (tree expr, value_set_t set, basic_block pred,\n   if (is_gimple_min_invariant (expr))\n     return expr;\n \n-  /* Phi translations of a given expression don't change,  */\n+  /* Phi translations of a given expression don't change.  */\n   phitrans = phi_trans_lookup (expr, pred);\n   if (phitrans)\n     return phitrans;\n@@ -1199,7 +1199,7 @@ compute_antic_aux (basic_block block)\n       VEC_free (basic_block, worklist);\n     }\n \n-  /* Generate ANTIC_OUT - TMP_GEN */\n+  /* Generate ANTIC_OUT - TMP_GEN.  */\n   S = bitmap_set_subtract_from_value_set (ANTIC_OUT, TMP_GEN (block), false);\n \n   /* Start ANTIC_IN with EXP_GEN - TMP_GEN */"}, {"sha": "ab952ebadd0ab2ba8b9c71ca6d721f6afd931df3", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -165,7 +165,7 @@ val_expr_pair_expr_eq (const void *p1, const void *p2)\n }\n \n \n-/* Set the value handle for expression E to value V */\n+/* Set the value handle for expression E to value V.  */\n    \n static void\n set_value_handle (tree e, tree v)"}, {"sha": "012c34cdd6e796bf8e9e2989e02d30fd5cd04e64", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4b78487cb4fa983c3bfa1f921c3b04f2fded93/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ea4b78487cb4fa983c3bfa1f921c3b04f2fded93", "patch": "@@ -3251,11 +3251,11 @@ extern int mostly_zeros_p (tree);\n \n extern void add_var_to_bind_expr (tree, tree);\n \n-/* integer_zerop (tree x) is nonzero if X is an integer constant of value 0 */\n+/* integer_zerop (tree x) is nonzero if X is an integer constant of value 0.  */\n \n extern int integer_zerop (tree);\n \n-/* integer_onep (tree x) is nonzero if X is an integer constant of value 1 */\n+/* integer_onep (tree x) is nonzero if X is an integer constant of value 1.  */\n \n extern int integer_onep (tree);\n "}]}