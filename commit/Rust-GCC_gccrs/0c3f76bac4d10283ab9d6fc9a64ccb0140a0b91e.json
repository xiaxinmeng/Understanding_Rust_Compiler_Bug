{"sha": "0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzZjc2YmFjNGQxMDI4M2FiOWQ2ZmM5YTY0Y2NiMDE0MGEwYjkxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T12:32:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T12:32:22Z"}, "message": "[multiple changes]\n\n2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): The attributes can\n\tappear in the postcondition of a subprogram renaming declaration,\n\twhen the renamed entity is an attribute reference that is a\n\tfunction (such as 'Value).\n\t* sem_attr.adb (Eval_Attribute): It doesn't\n\tneed to be static, just known at compile time, so use\n\tCompile_Time_Known_Value instead of Is_Static_Expression.\n\tThis is an efficiency improvement over the previous bug fix.\n\t* sem_ch13.adb (Analyze_One_Aspect): Use Original_Node to detect\n\tillegal aspects on subprogram renaming declarations that may\n\thave been rewritten as bodies.\n\n2016-07-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_intr.adb (Errint): Do not emit error message in\n\tRelaxed_RM_Semantics mode.\n\nFrom-SVN: r237976", "tree": {"sha": "c87cbe44a1dfabcbe30a880e6d790dd9b0925b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c87cbe44a1dfabcbe30a880e6d790dd9b0925b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/comments", "author": null, "committer": null, "parents": [{"sha": "f3e0f7c3c189b07f56e8758ab5174bd2820d7ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e0f7c3c189b07f56e8758ab5174bd2820d7ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e0f7c3c189b07f56e8758ab5174bd2820d7ea5"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "92032ab358f366c0c05fb8d6cf7324592a0b9abb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "patch": "@@ -1,3 +1,22 @@\n+2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): The attributes can\n+\tappear in the postcondition of a subprogram renaming declaration,\n+\twhen the renamed entity is an attribute reference that is a\n+\tfunction (such as 'Value).\n+\t* sem_attr.adb (Eval_Attribute): It doesn't\n+\tneed to be static, just known at compile time, so use\n+\tCompile_Time_Known_Value instead of Is_Static_Expression.\n+\tThis is an efficiency improvement over the previous bug fix.\n+\t* sem_ch13.adb (Analyze_One_Aspect): Use Original_Node to detect\n+\tillegal aspects on subprogram renaming declarations that may\n+\thave been rewritten as bodies.\n+\n+2016-07-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_intr.adb (Errint): Do not emit error message in\n+\tRelaxed_RM_Semantics mode.\n+\n 2016-07-04  Bob Duff  <duff@adacore.com>\n \n \t* sem_attr.adb (Eval_Attribute): The code was assuming"}, {"sha": "d6d850994be0420d38eba1b8874b5ba13eb3c9f2", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "patch": "@@ -1354,14 +1354,17 @@ package body Sem_Attr is\n          --  The aspect or pragma where the attribute resides should be\n          --  associated with a subprogram declaration or a body. If this is not\n          --  the case, then the aspect or pragma is illegal. Return as analysis\n-         --  cannot be carried out.\n+         --  cannot be carried out. Note that it is legal to have the aspect\n+         --  appear on a subprogram renaming, when the renamed entity is an\n+         --  attribute reference.\n \n          if not Nkind_In (Subp_Decl, N_Abstract_Subprogram_Declaration,\n                                      N_Entry_Declaration,\n                                      N_Generic_Subprogram_Declaration,\n                                      N_Subprogram_Body,\n                                      N_Subprogram_Body_Stub,\n-                                     N_Subprogram_Declaration)\n+                                     N_Subprogram_Declaration,\n+                                     N_Subprogram_Renaming_Declaration)\n          then\n             return;\n          end if;\n@@ -7427,11 +7430,12 @@ package body Sem_Attr is\n                declare\n                   Enum_Expr : Node_Id;\n                   --  The enumeration-type expression of interest\n+\n                begin\n                   --  P'Enum_Rep case\n \n-                  if Ekind_In\n-                    (Entity (P), E_Constant, E_Enumeration_Literal)\n+                  if Ekind_In (Entity (P), E_Constant,\n+                                           E_Enumeration_Literal)\n                   then\n                      Enum_Expr := P;\n \n@@ -7449,7 +7453,8 @@ package body Sem_Attr is\n                   end if;\n \n                   --  We can fold if the expression is an enumeration\n-                  --  literal, or if it denotes a static constant.\n+                  --  literal, or if it denotes a constant whose value\n+                  --  is known at compile time.\n \n                   if Nkind (Enum_Expr) in N_Has_Entity\n                     and then (Ekind (Entity (Enum_Expr)) =\n@@ -7458,7 +7463,7 @@ package body Sem_Attr is\n                        (Ekind (Entity (Enum_Expr)) = E_Constant\n                           and then Nkind (Parent (Entity (Enum_Expr))) =\n                                      N_Object_Declaration\n-                          and then Is_Static_Expression\n+                          and then Compile_Time_Known_Value\n                                      (Expression (Parent (Entity (P))))))\n                   then\n                      P_Entity := Etype (P);"}, {"sha": "fc9c4c494bf93f5553a0cb81fc5371ca03885d21", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "patch": "@@ -1937,9 +1937,11 @@ package body Sem_Ch13 is\n             if not Implementation_Defined_Aspect (A_Id) then\n                Error_Msg_Name_1 := Nam;\n \n-               --  Not allowed for renaming declarations\n+               --  Not allowed for renaming declarations. Examine original\n+               --  node because a subprogram renaming may have been rewritten\n+               --  as a body.\n \n-               if Nkind (N) in N_Renaming_Declaration then\n+               if Nkind (Original_Node (N)) in N_Renaming_Declaration then\n                   Error_Msg_N\n                     (\"aspect % not allowed for renaming declaration\",\n                      Aspect);"}, {"sha": "e26443aa980974acd0a49f3a1746d5f7f4eb4f33", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=0c3f76bac4d10283ab9d6fc9a64ccb0140a0b91e", "patch": "@@ -31,6 +31,7 @@ with Errout;   use Errout;\n with Fname;    use Fname;\n with Lib;      use Lib;\n with Namet;    use Namet;\n+with Opt;      use Opt;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Eval; use Sem_Eval;\n with Sem_Util; use Sem_Util;\n@@ -466,8 +467,13 @@ package body Sem_Intr is\n \n    procedure Errint (Msg : String; S : Node_Id; N : Node_Id) is\n    begin\n-      Error_Msg_N (Msg, S);\n-      Error_Msg_N (\"incorrect intrinsic subprogram, see spec\", N);\n+      --  Ignore errors on Intrinsic in Relaxed_RM_Semantics mode where we can\n+      --  be more liberal.\n+\n+      if not Relaxed_RM_Semantics then\n+         Error_Msg_N (Msg, S);\n+         Error_Msg_N (\"incorrect intrinsic subprogram, see spec\", N);\n+      end if;\n    end Errint;\n \n end Sem_Intr;"}]}