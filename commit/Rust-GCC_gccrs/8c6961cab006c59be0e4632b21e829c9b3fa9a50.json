{"sha": "8c6961cab006c59be0e4632b21e829c9b3fa9a50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM2OTYxY2FiMDA2YzU5YmUwZTQ2MzJiMjFlODI5YzliM2ZhOWE1MA==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2016-07-27T15:09:10Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-07-27T15:09:10Z"}, "message": "re PR middle-end/71078 (x/abs(x) -> sign(1.0,x))\n\n2016-07-27  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR middle-end/71078\n\t* match.pd (x / abs(x) -> copysign(1.0, x)): New pattern.\n\ntestsuite/\n\t* gcc.dg/tree-ssa/pr71078-1.c: New test-case.\n\t* gcc.dg/tree-ssa/pr71078-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pr71078-3.c: Likewise.\n\nFrom-SVN: r238787", "tree": {"sha": "5b760477f103aff90ce4176e8d8ee2085e644d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b760477f103aff90ce4176e8d8ee2085e644d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c6961cab006c59be0e4632b21e829c9b3fa9a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6961cab006c59be0e4632b21e829c9b3fa9a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6961cab006c59be0e4632b21e829c9b3fa9a50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6961cab006c59be0e4632b21e829c9b3fa9a50/comments", "author": null, "committer": null, "parents": [{"sha": "81a12b7606c58a7d6bea3151be426ef3e91b45ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a12b7606c58a7d6bea3151be426ef3e91b45ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a12b7606c58a7d6bea3151be426ef3e91b45ea"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "e6abaea52fec916fe01115ad2c26b17389c764dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c6961cab006c59be0e4632b21e829c9b3fa9a50", "patch": "@@ -1,3 +1,8 @@\n+2016-07-27  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR middle-end/71078\n+\t* match.pd (x / abs(x) -> copysign(1.0, x)): New pattern.\n+\n 2016-07-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* system.h (STATIC_ASSERT): Use static_assert if building"}, {"sha": "2380d90d5db2affef4688525215955c58e1cbc17", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8c6961cab006c59be0e4632b21e829c9b3fa9a50", "patch": "@@ -195,6 +195,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && ! HONOR_INFINITIES (type))\n   { build_minus_one_cst (type); }))\n \n+/* PR71078: x / abs(x) -> copysign (1.0, x) */\n+(simplify\n+ (rdiv:C (convert? @0) (convert? (abs @0)))\n+  (if (SCALAR_FLOAT_TYPE_P (type)\n+       && ! HONOR_NANS (type)\n+       && ! HONOR_INFINITIES (type))\n+   (switch\n+    (if (types_match (type, float_type_node))\n+     (BUILT_IN_COPYSIGNF { build_one_cst (type); } (convert @0)))\n+    (if (types_match (type, double_type_node))\n+     (BUILT_IN_COPYSIGN { build_one_cst (type); } (convert @0)))\n+    (if (types_match (type, long_double_type_node))\n+     (BUILT_IN_COPYSIGNL { build_one_cst (type); } (convert @0))))))\n+\n /* In IEEE floating point, x/1 is not equivalent to x for snans.  */\n (simplify\n  (rdiv @0 real_onep)"}, {"sha": "3f7e5a7dd267a990a158f322605d846ec61c74d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c6961cab006c59be0e4632b21e829c9b3fa9a50", "patch": "@@ -1,3 +1,10 @@\n+2016-07-27  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR middle-end/71078\n+\t* gcc.dg/tree-ssa/pr71078-1.c: New test-case.\n+\t* gcc.dg/tree-ssa/pr71078-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr71078-3.c: Likewise.\n+\n 2016-07-27  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/costmodel/x86_64/costmodel-pr68961.c: Remove."}, {"sha": "6204c148ec36de928eb3d14d4ac75e1fbb8c6290", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71078-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-1.c?ref=8c6961cab006c59be0e4632b21e829c9b3fa9a50", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -fdump-tree-forwprop-details\" } */\n+\n+#include <math.h>\n+\n+float f1(float x)\n+{\n+  float t1 = fabsf (x);\n+  float t2 = x / t1;\n+  return t2;\n+}\n+ \n+double f2(double x)\n+{\n+  double t1 = fabs (x);\n+  double t2 = x / t1;\n+  return t2;\n+}\n+\n+long double f3 (long double x)\n+{\n+  long double t1 = fabsl (x);\n+  long double t2 = x / t1;\n+  return t2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"__builtin_copysignf\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump \"__builtin_copysign\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump \"__builtin_copysignl\" \"forwprop1\" } } */"}, {"sha": "96485af3984ccbfa2306f98c14b0350593f145bf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71078-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-2.c?ref=8c6961cab006c59be0e4632b21e829c9b3fa9a50", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -fdump-tree-forwprop-details\" } */\n+\n+#include <math.h>\n+\n+float f1(float x)\n+{\n+  float t1 = fabsf (x);\n+  float t2 = t1 / x; \n+  return t2;\n+}\n+ \n+double f2(double x)\n+{\n+  double t1 = fabs (x);\n+  double t2 = t1 / x; \n+  return t2;\n+}\n+\n+long double f3 (long double x)\n+{\n+  long double t1 = fabsl (x);\n+  long double t2 = t1 / x; \n+  return t2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"__builtin_copysignf\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump \"__builtin_copysign\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump \"__builtin_copysignl\" \"forwprop1\" } } */"}, {"sha": "8780b6afdfe8bfda9c124feb3b46790339bdfd11", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71078-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6961cab006c59be0e4632b21e829c9b3fa9a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71078-3.c?ref=8c6961cab006c59be0e4632b21e829c9b3fa9a50", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -fdump-tree-forwprop-details\" } */\n+\n+#include <math.h>\n+double f(float f)\n+{\n+  double t1 = fabs(f); \n+  double t2 = f / t1;\n+  return t2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"__builtin_copysign\" \"forwprop1\" } } */"}]}