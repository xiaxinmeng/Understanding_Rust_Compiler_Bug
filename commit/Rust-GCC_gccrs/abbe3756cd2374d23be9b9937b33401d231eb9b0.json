{"sha": "abbe3756cd2374d23be9b9937b33401d231eb9b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJiZTM3NTZjZDIzNzRkMjNiZTliOTkzN2IzMzQwMWQyMzFlYjliMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-07-03T13:36:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-07-03T13:36:26Z"}, "message": "Make dr_analyze_innermost operate on innermost_loop_behavior\n\nThis means that callers to dr_analyze_innermost don't need a full\ndata_reference and don't need to fill in any fields beforehand.\n\n2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-data-ref.h (dr_analyze_innermost): Replace the dr argument\n\twith a \"innermost_loop_behavior *\" and refeence tree.\n\t* tree-data-ref.c (dr_analyze_innermost): Likewise.\n\t(create_data_ref): Update call accordingly.\n\t* tree-predcom.c (find_looparound_phi): Likewise.\n\nFrom-SVN: r249913", "tree": {"sha": "bd2a0cbaf76fe375cab734bd599ca7a3c6d8783d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd2a0cbaf76fe375cab734bd599ca7a3c6d8783d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abbe3756cd2374d23be9b9937b33401d231eb9b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbe3756cd2374d23be9b9937b33401d231eb9b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbe3756cd2374d23be9b9937b33401d231eb9b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbe3756cd2374d23be9b9937b33401d231eb9b0/comments", "author": null, "committer": null, "parents": [{"sha": "d8ac7e2840b8c9f3ac7a8197ca5e03bbc72ba090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ac7e2840b8c9f3ac7a8197ca5e03bbc72ba090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ac7e2840b8c9f3ac7a8197ca5e03bbc72ba090"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "5abc06de67cf8a82527023433903b37cf243ea82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abbe3756cd2374d23be9b9937b33401d231eb9b0", "patch": "@@ -1,3 +1,11 @@\n+2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-data-ref.h (dr_analyze_innermost): Replace the dr argument\n+\twith a \"innermost_loop_behavior *\" and refeence tree.\n+\t* tree-data-ref.c (dr_analyze_innermost): Likewise.\n+\t(create_data_ref): Update call accordingly.\n+\t* tree-predcom.c (find_looparound_phi): Likewise.\n+\n 2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vectorizer.h (_stmt_vec_info): Replace individual dr_*"}, {"sha": "1545fdb90761c30620db59b0808dcb0262fa1029", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=abbe3756cd2374d23be9b9937b33401d231eb9b0", "patch": "@@ -749,7 +749,7 @@ canonicalize_base_object_address (tree addr)\n   return build_fold_addr_expr (TREE_OPERAND (addr, 0));\n }\n \n-/* Analyze the behavior of memory reference DR.  There are two modes:\n+/* Analyze the behavior of memory reference REF.  There are two modes:\n \n    - BB analysis.  In this case we simply split the address into base,\n      init and offset components, without reference to any containing loop.\n@@ -766,13 +766,13 @@ canonicalize_base_object_address (tree addr)\n    Perform BB analysis if LOOP is null, or if LOOP is the function's\n    dummy outermost loop.  In other cases perform loop analysis.\n \n-   Return true if the analysis succeeded and store the results in DR if so.\n+   Return true if the analysis succeeded and store the results in DRB if so.\n    BB analysis can only fail for bitfield or reversed-storage accesses.  */\n \n bool\n-dr_analyze_innermost (struct data_reference *dr, struct loop *loop)\n+dr_analyze_innermost (innermost_loop_behavior *drb, tree ref,\n+\t\t      struct loop *loop)\n {\n-  tree ref = DR_REF (dr);\n   HOST_WIDE_INT pbitsize, pbitpos;\n   tree base, poffset;\n   machine_mode pmode;\n@@ -864,13 +864,12 @@ dr_analyze_innermost (struct data_reference *dr, struct loop *loop)\n \t\t     fold_convert (ssizetype, base_iv.step),\n \t\t     fold_convert (ssizetype, offset_iv.step));\n \n-  DR_BASE_ADDRESS (dr) = canonicalize_base_object_address (base_iv.base);\n-\n-  DR_OFFSET (dr) = fold_convert (ssizetype, offset_iv.base);\n-  DR_INIT (dr) = init;\n-  DR_STEP (dr) = step;\n+  drb->base_address = canonicalize_base_object_address (base_iv.base);\n \n-  DR_ALIGNED_TO (dr) = size_int (highest_pow2_factor (offset_iv.base));\n+  drb->offset = fold_convert (ssizetype, offset_iv.base);\n+  drb->init = init;\n+  drb->step = step;\n+  drb->aligned_to = size_int (highest_pow2_factor (offset_iv.base));\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"success.\\n\");\n@@ -1069,7 +1068,8 @@ create_data_ref (loop_p nest, loop_p loop, tree memref, gimple *stmt,\n   DR_REF (dr) = memref;\n   DR_IS_READ (dr) = is_read;\n \n-  dr_analyze_innermost (dr, nest != NULL ? loop : NULL);\n+  dr_analyze_innermost (&DR_INNERMOST (dr), memref,\n+\t\t\tnest != NULL ? loop : NULL);\n   dr_analyze_indices (dr, nest, loop);\n   dr_analyze_alias (dr);\n "}, {"sha": "c8bb813e77cdd213bd17e1ecfd8b4298253b1bd2", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=abbe3756cd2374d23be9b9937b33401d231eb9b0", "patch": "@@ -322,7 +322,7 @@ typedef struct data_dependence_relation *ddr_p;\n #define DDR_REVERSED_P(DDR) (DDR)->reversed_p\n \n \f\n-bool dr_analyze_innermost (struct data_reference *, struct loop *);\n+bool dr_analyze_innermost (innermost_loop_behavior *, tree, struct loop *);\n extern bool compute_data_dependences_for_loop (struct loop *, bool,\n \t\t\t\t\t       vec<loop_p> *,\n \t\t\t\t\t       vec<data_reference_p> *,"}, {"sha": "6baa6062118f2dfe57fad6a6931a88b6dff50529", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbe3756cd2374d23be9b9937b33401d231eb9b0/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=abbe3756cd2374d23be9b9937b33401d231eb9b0", "patch": "@@ -1149,7 +1149,7 @@ find_looparound_phi (struct loop *loop, dref ref, dref root)\n   memset (&init_dr, 0, sizeof (struct data_reference));\n   DR_REF (&init_dr) = init_ref;\n   DR_STMT (&init_dr) = phi;\n-  if (!dr_analyze_innermost (&init_dr, loop))\n+  if (!dr_analyze_innermost (&DR_INNERMOST (&init_dr), init_ref, loop))\n     return NULL;\n \n   if (!valid_initializer_p (&init_dr, ref->distance + 1, root->ref))"}]}