{"sha": "a01fc54920d7d722eb9efc29156fe4a823d21265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxZmM1NDkyMGQ3ZDcyMmViOWVmYzI5MTU2ZmU0YTgyM2QyMTI2NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-07-27T17:21:20Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-07-27T17:21:20Z"}, "message": "Move make_location from tree.h/c to input.h/c\n\nFor some reason I added make_location and some related functions to\ntree.h/c, rather than to input.h/c.  Move them there, so we can use them\nwithout requiring tree, and add some selftest coverage.\n\ngcc/ChangeLog:\n\t* input.c (get_pure_location): Move here from tree.c.\n\t(make_location): Likewise.  Add header comment.\n\t(selftest::test_accessing_ordinary_linemaps): Verify\n\tpure_location_p, make_location, get_location_from_adhoc_loc and\n\tget_range_from_loc.\n\t* input.h (get_pure_location): Move declaration here from tree.h.\n\t(get_finish): Likewise for inline function.\n\t(make_location): Likewise for declaration.\n\t* tree.c (get_pure_location): Move to input.c.\n\t(make_location): Likewise.\n\t* tree.h (get_pure_location): Move declaration to tree.h.\n\t(get_finish): Likewise for inline function.\n\t(make_location): Likewise for declaration.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (source_location): Fix line numbers in\n\tcomment.\n\nFrom-SVN: r238792", "tree": {"sha": "e95187d29ed6854ea7491bfd9df3af7b2456d81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e95187d29ed6854ea7491bfd9df3af7b2456d81d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01fc54920d7d722eb9efc29156fe4a823d21265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01fc54920d7d722eb9efc29156fe4a823d21265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01fc54920d7d722eb9efc29156fe4a823d21265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01fc54920d7d722eb9efc29156fe4a823d21265/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "182f2f648a9bb55a4be594e4b9e6531fdea1a464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182f2f648a9bb55a4be594e4b9e6531fdea1a464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/182f2f648a9bb55a4be594e4b9e6531fdea1a464"}], "stats": {"total": 147, "additions": 96, "deletions": 51}, "files": [{"sha": "9e359bc1e6948807b1e36ae251b694e97d146d6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a01fc54920d7d722eb9efc29156fe4a823d21265", "patch": "@@ -1,3 +1,19 @@\n+2016-07-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* input.c (get_pure_location): Move here from tree.c.\n+\t(make_location): Likewise.  Add header comment.\n+\t(selftest::test_accessing_ordinary_linemaps): Verify\n+\tpure_location_p, make_location, get_location_from_adhoc_loc and\n+\tget_range_from_loc.\n+\t* input.h (get_pure_location): Move declaration here from tree.h.\n+\t(get_finish): Likewise for inline function.\n+\t(make_location): Likewise for declaration.\n+\t* tree.c (get_pure_location): Move to input.c.\n+\t(make_location): Likewise.\n+\t* tree.h (get_pure_location): Move declaration to tree.h.\n+\t(get_finish): Likewise for inline function.\n+\t(make_location): Likewise for declaration.\n+\n 2016-07-27  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR middle-end/71078"}, {"sha": "f91a702d47b533f004e82caad34ebf47d8ec116e", "filename": "gcc/input.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=a01fc54920d7d722eb9efc29156fe4a823d21265", "patch": "@@ -801,6 +801,56 @@ expansion_point_location (source_location location)\n \t\t\t\t   LRK_MACRO_EXPANSION_POINT, NULL);\n }\n \n+/* Given location LOC, strip away any packed range information\n+   or ad-hoc information.  */\n+\n+location_t\n+get_pure_location (location_t loc)\n+{\n+  if (IS_ADHOC_LOC (loc))\n+    loc\n+      = line_table->location_adhoc_data_map.data[loc & MAX_SOURCE_LOCATION].locus;\n+\n+  if (loc >= LINEMAPS_MACRO_LOWEST_LOCATION (line_table))\n+    return loc;\n+\n+  if (loc < RESERVED_LOCATION_COUNT)\n+    return loc;\n+\n+  const line_map *map = linemap_lookup (line_table, loc);\n+  const line_map_ordinary *ordmap = linemap_check_ordinary (map);\n+\n+  return loc & ~((1 << ordmap->m_range_bits) - 1);\n+}\n+\n+/* Construct a location with caret at CARET, ranging from START to\n+   finish e.g.\n+\n+                 11111111112\n+        12345678901234567890\n+     522\n+     523   return foo + bar;\n+                  ~~~~^~~~~\n+     524\n+\n+   The location's caret is at the \"+\", line 523 column 15, but starts\n+   earlier, at the \"f\" of \"foo\" at column 11.  The finish is at the \"r\"\n+   of \"bar\" at column 19.  */\n+\n+location_t\n+make_location (location_t caret, location_t start, location_t finish)\n+{\n+  location_t pure_loc = get_pure_location (caret);\n+  source_range src_range;\n+  src_range.m_start = start;\n+  src_range.m_finish = finish;\n+  location_t combined_loc = COMBINE_LOCATION_DATA (line_table,\n+\t\t\t\t\t\t   pure_loc,\n+\t\t\t\t\t\t   src_range,\n+\t\t\t\t\t\t   NULL);\n+  return combined_loc;\n+}\n+\n #define ONE_K 1024\n #define ONE_M (ONE_K * ONE_K)\n \n@@ -1335,6 +1385,16 @@ test_accessing_ordinary_linemaps (const line_table_case &case_)\n   assert_loceq (\"bar.c\", 1, 150, loc_f);\n \n   ASSERT_FALSE (is_location_from_builtin_token (loc_a));\n+  ASSERT_TRUE (pure_location_p (line_table, loc_a));\n+\n+  /* Verify using make_location to build a range, and extracting data\n+     back from it.  */\n+  location_t range_c_b_d = make_location (loc_c, loc_b, loc_d);\n+  ASSERT_FALSE (pure_location_p (line_table, range_c_b_d));\n+  ASSERT_EQ (loc_c, get_location_from_adhoc_loc (line_table, range_c_b_d));\n+  source_range src_range = get_range_from_loc (line_table, range_c_b_d);\n+  ASSERT_EQ (loc_b, src_range.m_start);\n+  ASSERT_EQ (loc_d, src_range.m_finish);\n }\n \n /* Verify various properties of UNKNOWN_LOCATION.  */"}, {"sha": "d51f950bcc96da7aeade1b8497e527b98df023de", "filename": "gcc/input.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=a01fc54920d7d722eb9efc29156fe4a823d21265", "patch": "@@ -76,6 +76,19 @@ extern location_t input_location;\n #define from_macro_expansion_at(LOC) \\\n   ((linemap_location_from_macro_expansion_p (line_table, LOC)))\n \n+extern location_t get_pure_location (location_t loc);\n+\n+/* Get the endpoint of any range encoded within location LOC.  */\n+\n+static inline location_t\n+get_finish (location_t loc)\n+{\n+  return get_range_from_loc (line_table, loc).m_finish;\n+}\n+\n+extern location_t make_location (location_t caret,\n+\t\t\t\t location_t start, location_t finish);\n+\n void dump_line_table_statistics (void);\n \n void dump_location_info (FILE *stream);"}, {"sha": "11d3b51e3127329fd87fa044842a255bb1853bc9", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a01fc54920d7d722eb9efc29156fe4a823d21265", "patch": "@@ -14112,28 +14112,6 @@ nonnull_arg_p (const_tree arg)\n   return false;\n }\n \n-/* Given location LOC, strip away any packed range information\n-   or ad-hoc information.  */\n-\n-location_t\n-get_pure_location (location_t loc)\n-{\n-  if (IS_ADHOC_LOC (loc))\n-    loc\n-      = line_table->location_adhoc_data_map.data[loc & MAX_SOURCE_LOCATION].locus;\n-\n-  if (loc >= LINEMAPS_MACRO_LOWEST_LOCATION (line_table))\n-    return loc;\n-\n-  if (loc < RESERVED_LOCATION_COUNT)\n-    return loc;\n-\n-  const line_map *map = linemap_lookup (line_table, loc);\n-  const line_map_ordinary *ordmap = linemap_check_ordinary (map);\n-\n-  return loc & ~((1 << ordmap->m_range_bits) - 1);\n-}\n-\n /* Combine LOC and BLOCK to a combined adhoc loc, retaining any range\n    information.  */\n \n@@ -14169,20 +14147,6 @@ set_source_range (tree expr, source_range src_range)\n   return adhoc;\n }\n \n-location_t\n-make_location (location_t caret, location_t start, location_t finish)\n-{\n-  location_t pure_loc = get_pure_location (caret);\n-  source_range src_range;\n-  src_range.m_start = start;\n-  src_range.m_finish = finish;\n-  location_t combined_loc = COMBINE_LOCATION_DATA (line_table,\n-\t\t\t\t\t\t   pure_loc,\n-\t\t\t\t\t\t   src_range,\n-\t\t\t\t\t\t   NULL);\n-  return combined_loc;\n-}\n-\n /* Return the name of combined function FN, for debugging purposes.  */\n \n const char *"}, {"sha": "14c8f7a59f4ac7f56f82e84c5a622d1c091c4cbe", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fc54920d7d722eb9efc29156fe4a823d21265/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a01fc54920d7d722eb9efc29156fe4a823d21265", "patch": "@@ -5425,16 +5425,6 @@ type_with_alias_set_p (const_tree t)\n   return false;\n }\n \n-extern location_t get_pure_location (location_t loc);\n-\n-/* Get the endpoint of any range encoded within location LOC.  */\n-\n-static inline location_t\n-get_finish (location_t loc)\n-{\n-  return get_range_from_loc (line_table, loc).m_finish;\n-}\n-\n extern location_t set_block (location_t loc, tree block);\n \n extern void gt_ggc_mx (tree &);\n@@ -5457,9 +5447,6 @@ get_decl_source_range (tree decl)\n   return get_range_from_loc (line_table, loc);\n }\n \n-extern location_t\n-make_location (location_t caret, location_t start, location_t finish);\n-\n /* Return true if it makes sense to promote/demote from_type to to_type. */\n inline bool\n desired_pro_or_demotion_p (const_tree to_type, const_tree from_type)"}, {"sha": "0cdd75d956ac55e3d72e2077b9a2f3e80d991268", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fc54920d7d722eb9efc29156fe4a823d21265/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fc54920d7d722eb9efc29156fe4a823d21265/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a01fc54920d7d722eb9efc29156fe4a823d21265", "patch": "@@ -1,3 +1,8 @@\n+2016-07-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (source_location): Fix line numbers in\n+\tcomment.\n+\n 2016-07-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (LINE_MAP_MAX_LOCATION_WITH_PACKED_RANGES):"}, {"sha": "443086a0b70a4309040668bbe07b939a9b216b96", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fc54920d7d722eb9efc29156fe4a823d21265/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fc54920d7d722eb9efc29156fe4a823d21265/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=a01fc54920d7d722eb9efc29156fe4a823d21265", "patch": "@@ -227,10 +227,10 @@ typedef unsigned int linenum_type;\n \n                  11111111112\n         12345678901234567890\n-     521\n+     522\n      523   return foo + bar;\n                   ~~~~^~~~~\n-     523\n+     524\n \n    The location's caret is at the \"+\", line 523 column 15, but starts\n    earlier, at the \"f\" of \"foo\" at column 11.  The finish is at the \"r\""}]}