{"sha": "05a596505cfa4642b7d5df8c071eef0ce4fdfafc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhNTk2NTA1Y2ZhNDY0MmI3ZDVkZjhjMDcxZWVmMGNlNGZkZmFmYw==", "commit": {"author": {"name": "Felix Lee", "email": "flee@cygnus.com", "date": "1999-02-10T12:26:21Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1999-02-10T12:26:21Z"}, "message": "Cleanup and bug-fix patch from Felix Lee.\n\n        * lib/c-torture.exp (c-torture-compile): Pull out code for\n        analyzing gcc error messages.\n        (c-torture-execute): Likewise.  Fix some (harmless) false\n        positives.\n        * lib/gcc.exp (gcc_check_compile): New function.\n\nFrom-SVN: r25133", "tree": {"sha": "0f2ce5c8d1f457de4007bd60b163ff30a4fc5eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f2ce5c8d1f457de4007bd60b163ff30a4fc5eca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05a596505cfa4642b7d5df8c071eef0ce4fdfafc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a596505cfa4642b7d5df8c071eef0ce4fdfafc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a596505cfa4642b7d5df8c071eef0ce4fdfafc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a596505cfa4642b7d5df8c071eef0ce4fdfafc/comments", "author": null, "committer": null, "parents": [{"sha": "44e95b192cf68a4642d9ff8e3eaa6bc46bd380b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e95b192cf68a4642d9ff8e3eaa6bc46bd380b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e95b192cf68a4642d9ff8e3eaa6bc46bd380b9"}], "stats": {"total": 157, "additions": 68, "deletions": 89}, "files": [{"sha": "76e6da05a40476011ebf6d79834bd639625d6a88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a596505cfa4642b7d5df8c071eef0ce4fdfafc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a596505cfa4642b7d5df8c071eef0ce4fdfafc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05a596505cfa4642b7d5df8c071eef0ce4fdfafc", "patch": "@@ -1,3 +1,11 @@\n+Wed Feb 10 12:15:35 1999  Felix Lee  <flee@cygnus.com>\n+\n+        * lib/c-torture.exp (c-torture-compile): Pull out code for\n+        analyzing gcc error messages.\n+        (c-torture-execute): Likewise.  Fix some (harmless) false\n+        positives.\n+        * lib/gcc.exp (gcc_check_compile): New function.\n+\n Mon Feb  8 21:42:57 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* gcc.c-torture/execute/990208-1.c: New test."}, {"sha": "2078a61b506a1fb97986ed1b539af2412b5270e2", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 5, "deletions": 88, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a596505cfa4642b7d5df8c071eef0ce4fdfafc/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a596505cfa4642b7d5df8c071eef0ce4fdfafc/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=05a596505cfa4642b7d5df8c071eef0ce4fdfafc", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+# Copyright (C) 1992-1998, 1999 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -76,50 +76,7 @@ proc c-torture-compile { src option } {\n     lappend options \"additional_flags=-w $option\"\n \n     set comp_output [gcc_target_compile \"$src\" \"$output\" object $options];\n-    \n-    # Set a few common compiler messages.\n-    set fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n- \n-    if [string match \"$fatal_signal 6\" $comp_output] then {\n-\tgcc_fail $testcase \"Got Signal 6, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    if [string match \"$fatal_signal 11\" $comp_output] then {\n-\tgcc_fail $testcase \"Got Signal 11, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    # We shouldn't get these because of -w, but just in case.\n-    if [string match \"*cc:*warning:*\" $comp_output] then {\n-\twarning \"$testcase: (with warnings) $option\"\n-\tsend_log \"$comp_output\\n\"\n-\tunresolved \"$testcase, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    set comp_output [prune_warnings $comp_output]\n-\n-    set unsupported_message [gcc_check_unsupported_p $comp_output]\n-    if { $unsupported_message != \"\" } {\n-\tunsupported \"$testcase: $unsupported_message\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    # remove any leftover LF/CR to make sure any output is legit\n-    regsub -all -- \"\\[\\r\\n\\]*\" $comp_output \"\" comp_output\n-    # If any message remains, we fail.\n-    if ![string match \"\" $comp_output] then {\n-\tgcc_fail $testcase $option\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    gcc_pass $testcase $option\n+    gcc_check_compile $testcase $option $output $comp_output\n     remote_file build delete $output\n }\n \n@@ -201,57 +158,17 @@ proc c-torture-execute { src args } {\n \t}\n \tset comp_output [gcc_target_compile \"$src\" \"${execname}\" executable $options];\n \n-\t# Set a few common compiler messages.\n-\tset fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n-\t\n-\tif [string match \"$fatal_signal 6\" $comp_output] then {\n-\t    gcc_fail $testcase \"Got Signal 6, $option\"\n+\tif ![gcc_check_compile \"$testcase compilation\" $option $execname $comp_output] {\n+\t    unresolved \"$testcase execution, $option\"\n \t    remote_file build delete $execname\n \t    continue\n \t}\n-\t\n-\tif [string match \"$fatal_signal 11\" $comp_output] then {\n-\t    gcc_fail $testcase \"Got Signal 11, $option\"\n-\t    remote_file build delete $execname\n-\t    continue\n-\t}\n-\t\n-\t# We shouldn't get these because of -w, but just in case.\n-\tif [string match \"*cc:*warning:*\" $comp_output] then {\n-\t    warning \"$testcase: (with warnings) $option\"\n-\t    send_log \"$comp_output\\n\"\n-\t    unresolved \"$testcase, $option\"\n-\t    remote_file build delete $execname\n-\t    continue\n-\t}\n-\t\n-\tset comp_output [prune_warnings $comp_output]\n-\t\n-\tset unsupported_message [gcc_check_unsupported_p $comp_output]\n-\n-\tif { $unsupported_message != \"\" } {\n-\t    unsupported \"$testcase: $unsupported_message\"\n-\t    continue\n-\t} elseif ![file exists $execname] {\n-\t    if ![is3way] {\n-\t\tfail \"$testcase compilation, $option\"\n-\t\tuntested \"$testcase execution, $option\"\n-\t\tcontinue\n-\t    } else {\n-\t\t# FIXME: since we can't test for the existance of a remote\n-\t\t# file without short of doing an remote file list, we assume\n-\t\t# that since we got no output, it must have compiled.\n-\t\tpass \"$testcase compilation, $option\"\t\t\n-\t    }\n-\t} else {\n-\t    pass \"$testcase compilation, $option\"\n-\t}\n \n \t# See if this source file uses \"long long\" types, if it does, and\n \t# no_long_long is set, skip execution of the test.\n \tif [target_info exists no_long_long] then {\n \t    if [expr [search_for $src \"long long\"]] then {\n-\t\tuntested \"$testcase execution, $option\"\n+\t\tunsupported \"$testcase execution, $option\"\n \t\tcontinue\n \t    }\n \t}"}, {"sha": "b8249333c3ff6a2434a88dc8b845fe9a487f0c6b", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a596505cfa4642b7d5df8c071eef0ce4fdfafc/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a596505cfa4642b7d5df8c071eef0ce4fdfafc/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=05a596505cfa4642b7d5df8c071eef0ce4fdfafc", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1992, 1993, 1994, 1996, 1997 Free Software Foundation, Inc.\n+# Copyright (C) 1992, 1993, 1994, 1996, 1997, 1999 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -148,6 +148,60 @@ proc gcc_target_compile { source dest type options } {\n     return [target_compile $source $dest $type $options]\n }\n \n+\n+# Reports pass/fail for a gcc compilation and returns true/false.\n+proc gcc_check_compile {testcase option objname gcc_output} {\n+\n+    set fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n+ \n+    if [string match \"$fatal_signal 6\" $gcc_output] then {\n+\tgcc_fail $testcase \"Got Signal 6, $option\"\n+\treturn 0\n+    }\n+\n+    if [string match \"$fatal_signal 11\" $gcc_output] then {\n+\tgcc_fail $testcase \"Got Signal 11, $option\"\n+\treturn 0\n+    }\n+\n+    # We shouldn't get these because of -w, but just in case.\n+    if [string match \"*cc:*warning:*\" $gcc_output] then {\n+\twarning \"$testcase: (with warnings) $option\"\n+\tsend_log \"$gcc_output\\n\"\n+\tunresolved \"$testcase, $option\"\n+\treturn 0\n+    }\n+\n+    set gcc_output [prune_warnings $gcc_output]\n+\n+    set unsupported_message [gcc_check_unsupported_p $gcc_output]\n+    if { $unsupported_message != \"\" } {\n+\tunsupported \"$testcase: $unsupported_message\"\n+\treturn 0\n+    }\n+\n+    # remove any leftover LF/CR to make sure any output is legit\n+    regsub -all -- \"\\[\\r\\n\\]*\" $gcc_output \"\" gcc_output\n+\n+    # If any message remains, we fail.\n+    if ![string match \"\" $gcc_output] then {\n+\tgcc_fail $testcase $option\n+\treturn 0\n+    }\n+\n+    # fail if the desired object file doesn't exist.\n+    # FIXME: there's no way of checking for existence on a remote host.\n+    if {$objname != \"\" && ![is3way] && ![file exists $objname]} {\n+\tgcc_fail $testcase $option\n+\treturn 0\n+    }\n+\n+    gcc_pass $testcase $option\n+    return 1\n+}\n+\n+\n+\n #\n # gcc_pass -- utility to record a testcase passed\n #"}]}