{"sha": "9a37bc079dd8e0d3d649b5e38464a5e5977d7baa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzN2JjMDc5ZGQ4ZTBkM2Q2NDliNWUzODQ2NGE1ZTU5NzdkN2JhYQ==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2010-11-23T19:18:39Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-11-23T19:18:39Z"}, "message": "re PR driver/42690 (Undefined reference errors with -flto -fuse-linker-plugin)\n\n\tPR driver/42690\n\t* gcc.c (LINK_COMMAND_SPEC): Remove hard-coded pass-through plugin\n\toptions, replace by call of pass-through-libs spec function to process\n\tlink_gcc_c_sequence spec.\n\t(lto_libgcc_spec): Delete variable.\n\t(static_specs[]): Remove related entry.\n\t(static_spec_functions[]): Add new entry for pass-through-libs.\n\t(main): Don't generate deleted lto_libgcc_spec.\n\t(pass_through_libs_spec_func): New function to implement the new\n\tpass-through-libs spec function.\n\t* doc/invoke.texi (pass-through-libs): Document new spec function.\n\nFrom-SVN: r167091", "tree": {"sha": "3c2fd17689d483c82175dbe4fcc439c01bddc80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c2fd17689d483c82175dbe4fcc439c01bddc80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9580395facfc727ebe8553e586db0489ef58b392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9580395facfc727ebe8553e586db0489ef58b392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9580395facfc727ebe8553e586db0489ef58b392"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "db6f8ab04247ef4e1eb26819cc79498c6687817d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a37bc079dd8e0d3d649b5e38464a5e5977d7baa", "patch": "@@ -1,3 +1,17 @@\n+2010-11-23  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR driver/42690\n+\t* gcc.c (LINK_COMMAND_SPEC): Remove hard-coded pass-through plugin\n+\toptions, replace by call of pass-through-libs spec function to process\n+\tlink_gcc_c_sequence spec.\n+\t(lto_libgcc_spec): Delete variable.\n+\t(static_specs[]): Remove related entry.\n+\t(static_spec_functions[]): Add new entry for pass-through-libs.\n+\t(main): Don't generate deleted lto_libgcc_spec.\n+\t(pass_through_libs_spec_func): New function to implement the new\n+\tpass-through-libs spec function.\n+\t* doc/invoke.texi (pass-through-libs): Document new spec function.\n+\n 2010-11-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/options.texi (Warning, Optimization): Document."}, {"sha": "c2ffea85abd8054f5c319bbd465cc0e0efaa39c3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9a37bc079dd8e0d3d649b5e38464a5e5977d7baa", "patch": "@@ -9690,6 +9690,18 @@ its usage:\n %:remove-outfile(-lm)\n @end smallexample\n \n+@item @code{pass-through-libs}\n+The @code{pass-through-libs} spec function takes any number of arguments.  It\n+finds any @option{-l} options and any non-options ending in \".a\" (which it\n+assumes are the names of linker input library archive files) and returns a\n+result containing all the found arguments each prepended by\n+@option{-plugin-opt=-pass-through=} and joined by spaces.  This list is\n+intended to be passed to the LTO linker plugin.\n+\n+@smallexample\n+%:pass-through-libs(%G %L %G)\n+@end smallexample\n+\n @item @code{print-asm-header}\n The @code{print-asm-header} function takes no arguments and simply\n prints a banner like:"}, {"sha": "c2998bd96b8392dd317730c586c4e3450c308676", "filename": "gcc/gcc.c", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a37bc079dd8e0d3d649b5e38464a5e5977d7baa/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=9a37bc079dd8e0d3d649b5e38464a5e5977d7baa", "patch": "@@ -284,6 +284,7 @@ static const char *print_asm_header_spec_function (int, const char **);\n static const char *compare_debug_dump_opt_spec_function (int, const char **);\n static const char *compare_debug_self_opt_spec_function (int, const char **);\n static const char *compare_debug_auxbase_opt_spec_function (int, const char **);\n+static const char *pass_through_libs_spec_func (int, const char **);\n \f\n /* The Specs Language\n \n@@ -656,8 +657,7 @@ proper position among the other output files.  */\n     -plugin %(linker_plugin_file) \\\n     -plugin-opt=%(lto_wrapper) \\\n     -plugin-opt=-fresolution=%u.res \\\n-    %{static|static-libgcc:-plugin-opt=-pass-through=%(lto_libgcc)}\t\\\n-    %{static:-plugin-opt=-pass-through=-lc}\t\\\n+    %{!nostdlib:%{!nodefaultlibs:%:pass-through-libs(%(link_gcc_c_sequence))}} \\\n     } \\\n     %{flto*:%<fcompare-debug*} \\\n     %{flto*} %l \" LINK_PIE_SPEC \\\n@@ -712,7 +712,6 @@ static const char *linker_name_spec = LINKER_NAME;\n static const char *linker_plugin_file_spec = \"\";\n static const char *lto_wrapper_spec = \"\";\n static const char *lto_gcc_spec = \"\";\n-static const char *lto_libgcc_spec = \"\";\n static const char *link_command_spec = LINK_COMMAND_SPEC;\n static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;\n static const char *startfile_prefix_spec = STARTFILE_PREFIX_SPEC;\n@@ -1197,7 +1196,6 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"linker_plugin_file\",\t&linker_plugin_file_spec),\n   INIT_STATIC_SPEC (\"lto_wrapper\",\t\t&lto_wrapper_spec),\n   INIT_STATIC_SPEC (\"lto_gcc\",\t\t\t&lto_gcc_spec),\n-  INIT_STATIC_SPEC (\"lto_libgcc\",\t\t&lto_libgcc_spec),\n   INIT_STATIC_SPEC (\"link_libgcc\",\t\t&link_libgcc_spec),\n   INIT_STATIC_SPEC (\"md_exec_prefix\",\t\t&md_exec_prefix),\n   INIT_STATIC_SPEC (\"md_startfile_prefix\",\t&md_startfile_prefix),\n@@ -1242,6 +1240,7 @@ static const struct spec_function static_spec_functions[] =\n   { \"compare-debug-dump-opt\",\tcompare_debug_dump_opt_spec_function },\n   { \"compare-debug-self-opt\",\tcompare_debug_self_opt_spec_function },\n   { \"compare-debug-auxbase-opt\", compare_debug_auxbase_opt_spec_function },\n+  { \"pass-through-libs\",\tpass_through_libs_spec_func },\n #ifdef EXTRA_SPEC_FUNCTIONS\n   EXTRA_SPEC_FUNCTIONS\n #endif\n@@ -6805,11 +6804,6 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t\t\t\t\t\t false);\n \t  if (!linker_plugin_file_spec)\n \t    fatal_error (\"-fuse-linker-plugin, but \" LTOPLUGINSONAME \" not found\");\n-\n-\t  lto_libgcc_spec = find_a_file (&startfile_prefixes, \"libgcc.a\",\n-\t\t\t\t\t R_OK, true);\n-\t  if (!lto_libgcc_spec)\n-\t    fatal_error (\"could not find libgcc.a\");\n \t}\n       lto_gcc_spec = argv[0];\n \n@@ -8190,3 +8184,46 @@ compare_debug_auxbase_opt_spec_function (int arg,\n \n   return name;\n }\n+\n+/* %:pass-through-libs spec function.  Finds all -l options and input\n+   file names in the lib spec passed to it, and makes a list of them\n+   prepended with the plugin option to cause them to be passed through\n+   to the final link after all the new object files have been added.  */\n+\n+const char *\n+pass_through_libs_spec_func (int argc, const char **argv)\n+{\n+  char *prepended = xstrdup (\" \");\n+  int n;\n+  /* Shlemiel the painter's algorithm.  Innately horrible, but at least\n+     we know that there will never be more than a handful of strings to\n+     concat, and it's only once per run, so it's not worth optimising.  */\n+  for (n = 0; n < argc; n++)\n+    {\n+      char *old = prepended;\n+      /* Anything that isn't an option is a full path to an output\n+         file; pass it through if it ends in '.a'.  Among options,\n+\t pass only -l.  */\n+      if (argv[n][0] == '-' && argv[n][1] == 'l')\n+\t{\n+\t  const char *lopt = argv[n] + 2;\n+\t  /* Handle both joined and non-joined -l options.  If for any\n+\t     reason there's a trailing -l with no joined or following\n+\t     arg just discard it.  */\n+\t  if (!*lopt && ++n >= argc)\n+\t    break;\n+\t  else if (!*lopt)\n+\t    lopt = argv[n];\n+\t  prepended = concat (prepended, \"-plugin-opt=-pass-through=-l\",\n+\t\tlopt, \" \", NULL);\n+\t}\n+      else if (!strcmp (\".a\", argv[n] + strlen (argv[n]) - 2))\n+\t{\n+\t  prepended = concat (prepended, \"-plugin-opt=-pass-through=\",\n+\t\targv[n], \" \", NULL);\n+\t}\n+      if (prepended != old)\n+\tfree (old);\n+    }\n+  return prepended;\n+}"}]}