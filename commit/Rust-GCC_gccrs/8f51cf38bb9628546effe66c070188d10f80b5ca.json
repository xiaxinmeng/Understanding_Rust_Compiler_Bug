{"sha": "8f51cf38bb9628546effe66c070188d10f80b5ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1MWNmMzhiYjk2Mjg1NDZlZmZlNjZjMDcwMTg4ZDEwZjgwYjVjYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-05-06T23:20:35Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-05-06T23:20:35Z"}, "message": "preprocessor: Fix pp-number lexing of digit separators [PR83873, PR97604]\n\nWhen the preprocessor lexes preprocessing numbers in lex_number, it\naccepts digit separators in more cases than actually permitted in\npp-numbers by the standard syntax.\n\nOne thing this accepts is adjacent digit separators; there is some\ncode to reject those later, but as noted in bug 83873 it fails to\ncover the case of adjacent digit separators within a floating-point\nexponent.  Accepting adjacent digit separators only results in a\nmissing diagnostic, not in valid code being rejected or being accepted\nwith incorrect semantics, because the correct lexing in such a case\nwould have '' start the following preprocessing tokens, and no valid\npreprocessing token starts '' while ' isn't valid on its own as a\npreprocessing token either.  So this patch fixes that case by moving\nthe error for adjacent digit separators to lex_number (allowing a more\nspecific diagnostic than if '' were excluded from the pp-number\ncompletely).\n\nOther cases inappropriately accepted involve digit separators before\n'.', 'e+', 'e-', 'p+' or 'p-' (or corresponding uppercase variants).\nIn those cases, as shown by the test digit-sep-pp-number.C added, this\ncan result in valid code being wrongly rejected as a result of too\nmany characters being included in the pp-number.  So this case is\nfixed by terminating the pp-number at the correct character according\nto the standard.  That test also covers the case where a digit\nseparator was followed by an identifier-nondigit that is not a\nnondigit (e.g. a UCN); that case was already handled correctly.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\nlibcpp/\n\tPR c++/83873\n\tPR preprocessor/97604\n\t* lex.c (lex_number): Reject adjacent digit separators here.  Do\n\tnot allow digit separators before '.' or an exponent with sign.\n\t* expr.c (cpp_classify_number): Do not check for adjacent digit\n\tseparators here.\n\ngcc/testsuite/\n\tPR c++/83873\n\tPR preprocessor/97604\n\t* g++.dg/cpp1y/digit-sep-neg-2.C,\n\tg++.dg/cpp1y/digit-sep-pp-number.C: New tests.\n\t* g++.dg/cpp1y/digit-sep-line-neg.C, g++.dg/cpp1y/digit-sep-neg.C:\n\tAdjust expected messages.", "tree": {"sha": "2b3b9f76f52b7e5b6a21d2dd4426c4d8352051e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b3b9f76f52b7e5b6a21d2dd4426c4d8352051e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f51cf38bb9628546effe66c070188d10f80b5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f51cf38bb9628546effe66c070188d10f80b5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f51cf38bb9628546effe66c070188d10f80b5ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f51cf38bb9628546effe66c070188d10f80b5ca/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07dd185755a791ab19e6a63274cf2cb69f087a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07dd185755a791ab19e6a63274cf2cb69f087a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07dd185755a791ab19e6a63274cf2cb69f087a6c"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "239d0287b74b496f55031fa7cd6f143ed04a85e9", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-line-neg.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-line-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-line-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-line-neg.C?ref=8f51cf38bb9628546effe66c070188d10f80b5ca", "patch": "@@ -2,3 +2,4 @@\n // { dg-do preprocess { target c++14 } }\n \n #line 0''123 // { dg-error \"is not a positive integer\" }\n+// { dg-error \"adjacent digit separators\" \"adjacent\" { target *-*-* } .-1 }"}, {"sha": "09393aaf838d2136b6a86cea60abe05133c8de6f", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-neg-2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg-2.C?ref=8f51cf38bb9628546effe66c070188d10f80b5ca", "patch": "@@ -0,0 +1,4 @@\n+// Test adjacent digit separators rejected in exponent (bug 83873).\n+// { dg-do compile { target c++14 } }\n+\n+double d = 1.0e1''0; /* { dg-error \"adjacent digit separators\" } */"}, {"sha": "300fe51041b638f21c6f84789ef92c138d1f0d9e", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-neg.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C?ref=8f51cf38bb9628546effe66c070188d10f80b5ca", "patch": "@@ -16,7 +16,7 @@ main()\n   unsigned u = 0b0001'0000'0000'0000'0000'0000'U; // { dg-error \"digit separator outside digit sequence\" }\n \n   double d = 0.0;\n-  d = 1'.602'176'565e-19; // { dg-error \"digit separator adjacent to decimal point\" }\n+  d = 1'.602'176'565e-19; // { dg-warning \"multi-character\" }\n   d = 1.'602'176'565e-19; // { dg-error \"digit separator adjacent to decimal point\" }\n   d = 1.602''176'565e-19; // { dg-error \"adjacent digit separators\" }\n   d = 1.602'176'565'e-19; // { dg-error \"digit separator adjacent to exponent\" }\n@@ -29,4 +29,5 @@ main()\n \n // { dg-error \"exponent has no digits\" \"exponent has no digits\" { target *-*-* } 23 }\n // { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 15 }\n+// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 19 }\n // { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 26 }"}, {"sha": "9777382224dace49d56763821a063fa12fa83fcd", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-pp-number.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-pp-number.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f51cf38bb9628546effe66c070188d10f80b5ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-pp-number.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-pp-number.C?ref=8f51cf38bb9628546effe66c070188d10f80b5ca", "patch": "@@ -0,0 +1,17 @@\n+// Test lexing of pp-numbers does not allow digit separators that do\n+// not form part of the pp-number syntax, when the code is valid with\n+// correct lexing but not with too many characters accepted in the\n+// pp-number (bug 97604).\n+// { dg-do compile { target c++14 } }\n+\n+static_assert (0x0'e-0xe == 0, \"signs\");\n+\n+#define a0 '.' -\n+#define acat(x) a ## x\n+static_assert (acat (0'.') == 0, \".\");\n+\n+// This case was not actually buggy.\n+#define c0(x) 0\n+#define b0 c0 (\n+#define bcat(x) b ## x\n+static_assert (bcat (0'\\u00c0')) == 0, \"identifier-nondigit\");"}, {"sha": "ab4a2608962888c0064eabf9933f15d5b4b95358", "filename": "libcpp/expr.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f51cf38bb9628546effe66c070188d10f80b5ca/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f51cf38bb9628546effe66c070188d10f80b5ca/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=8f51cf38bb9628546effe66c070188d10f80b5ca", "patch": "@@ -582,11 +582,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \t    max_digit = c;\n \t}\n       else if (DIGIT_SEP (c))\n-\t{\n-\t  if (seen_digit_sep)\n-\t    SYNTAX_ERROR_AT (virtual_location, \"adjacent digit separators\");\n-\t  seen_digit_sep = true;\n-\t}\n+\tseen_digit_sep = true;\n       else if (c == '.')\n \t{\n \t  if (seen_digit_sep || DIGIT_SEP (*str))"}, {"sha": "9662f1b8ca2f286e8f6bd101dff22199fa6954a5", "filename": "libcpp/lex.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f51cf38bb9628546effe66c070188d10f80b5ca/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f51cf38bb9628546effe66c070188d10f80b5ca/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=8f51cf38bb9628546effe66c070188d10f80b5ca", "patch": "@@ -1548,18 +1548,28 @@ lex_number (cpp_reader *pfile, cpp_string *number,\n   base = pfile->buffer->cur - 1;\n   do\n     {\n+      const uchar *adj_digit_sep = NULL;\n       cur = pfile->buffer->cur;\n \n       /* N.B. ISIDNUM does not include $.  */\n-      while (ISIDNUM (*cur) || *cur == '.' || DIGIT_SEP (*cur)\n-\t     || VALID_SIGN (*cur, cur[-1]))\n+      while (ISIDNUM (*cur)\n+\t     || (*cur == '.' && !DIGIT_SEP (cur[-1]))\n+\t     || DIGIT_SEP (*cur)\n+\t     || (VALID_SIGN (*cur, cur[-1]) && !DIGIT_SEP (cur[-2])))\n \t{\n \t  NORMALIZE_STATE_UPDATE_IDNUM (nst, *cur);\n+\t  /* Adjacent digit separators do not form part of the pp-number syntax.\n+\t     However, they can safely be diagnosed here as an error, since '' is\n+\t     not a valid preprocessing token.  */\n+\t  if (DIGIT_SEP (*cur) && DIGIT_SEP (cur[-1]) && !adj_digit_sep)\n+\t    adj_digit_sep = cur;\n \t  cur++;\n \t}\n       /* A number can't end with a digit separator.  */\n       while (cur > pfile->buffer->cur && DIGIT_SEP (cur[-1]))\n \t--cur;\n+      if (adj_digit_sep && adj_digit_sep < cur)\n+\tcpp_error (pfile, CPP_DL_ERROR, \"adjacent digit separators\");\n \n       pfile->buffer->cur = cur;\n     }"}]}