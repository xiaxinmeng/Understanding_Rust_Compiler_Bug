{"sha": "29984e05aed74b14a9bd3e5c53cbdb34663db9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5ODRlMDVhZWQ3NGIxNGE5YmQzZTVjNTNjYmRiMzQ2NjNkYjliZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@multimania.com", "date": "2002-09-04T22:24:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-04T22:24:12Z"}, "message": "re PR c/7102 (unsigned char divisision results in floating exception)\n\n        PR c/7102\n        * optabs.c (expand_binop): Convert CONST_INTs in all cases.\n\nFrom-SVN: r56815", "tree": {"sha": "554d4fcbbefd729d8d802a888bfc3a6e99fe9406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/554d4fcbbefd729d8d802a888bfc3a6e99fe9406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29984e05aed74b14a9bd3e5c53cbdb34663db9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29984e05aed74b14a9bd3e5c53cbdb34663db9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29984e05aed74b14a9bd3e5c53cbdb34663db9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29984e05aed74b14a9bd3e5c53cbdb34663db9be/comments", "author": null, "committer": null, "parents": [{"sha": "8d46398edf4ebc906649a4d1a3658e5d6166129c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d46398edf4ebc906649a4d1a3658e5d6166129c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d46398edf4ebc906649a4d1a3658e5d6166129c"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "ae3918f66d6ceaed56d5e6aa5e043bcb4a1ba8bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29984e05aed74b14a9bd3e5c53cbdb34663db9be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29984e05aed74b14a9bd3e5c53cbdb34663db9be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29984e05aed74b14a9bd3e5c53cbdb34663db9be", "patch": "@@ -1,3 +1,8 @@\n+2002-09-04  Eric Botcazou  <ebotcazou@multimania.com>\n+\n+\tPR c/7102\n+\t* optabs.c (expand_binop): Convert CONST_INTs in all cases.\n+\n 2002-09-04  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.md (setccfp0, setccfp1): New patterns."}, {"sha": "a7dae46dbcb81a2d80c733e897beed243f13cd58", "filename": "gcc/optabs.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29984e05aed74b14a9bd3e5c53cbdb34663db9be/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29984e05aed74b14a9bd3e5c53cbdb34663db9be/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=29984e05aed74b14a9bd3e5c53cbdb34663db9be", "patch": "@@ -779,32 +779,26 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t}\n \n       /* In case the insn wants input operands in modes different from\n-\t the result, convert the operands.  It would seem that we\n-\t don't need to convert CONST_INTs, but we do, so that they're\n-\t a properly sign-extended for their modes; we choose the\n-\t widest mode between mode and mode[01], so that, in a widening\n-\t operation, we call convert_modes with different FROM and TO\n-\t modes, which ensures the value is sign-extended.  Shift\n-\t operations are an exception, because the second operand needs\n-\t not be extended to the mode of the result.  */\n+\t those of the actual operands, convert the operands.  It would\n+\t seem that we don't need to convert CONST_INTs, but we do, so\n+\t that they're properly zero-extended or sign-extended for their\n+\t modes; shift operations are an exception, because the second\n+\t operand needs not be extended to the mode of the result.  */\n \n       if (GET_MODE (op0) != mode0\n \t  && mode0 != VOIDmode)\n \txop0 = convert_modes (mode0,\n \t\t\t      GET_MODE (op0) != VOIDmode\n \t\t\t      ? GET_MODE (op0)\n-\t\t\t      : GET_MODE_SIZE (mode) > GET_MODE_SIZE (mode0)\n-\t\t\t      ? mode\n-\t\t\t      : mode0,\n+\t\t\t      : mode,\n \t\t\t      xop0, unsignedp);\n \n       if (GET_MODE (xop1) != mode1\n \t  && mode1 != VOIDmode)\n \txop1 = convert_modes (mode1,\n \t\t\t      GET_MODE (op1) != VOIDmode\n \t\t\t      ? GET_MODE (op1)\n-\t\t\t      : (GET_MODE_SIZE (mode) > GET_MODE_SIZE (mode1)\n-\t\t\t\t && ! shift_op)\n+\t\t\t      : ! shift_op\n \t\t\t      ? mode\n \t\t\t      : mode1,\n \t\t\t      xop1, unsignedp);"}, {"sha": "24eeb0cb0a0b3151c3601919e590df36ed7459b7", "filename": "gcc/testsuite/gcc.c-torture/execute/20020904-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29984e05aed74b14a9bd3e5c53cbdb34663db9be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020904-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29984e05aed74b14a9bd3e5c53cbdb34663db9be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020904-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020904-1.c?ref=29984e05aed74b14a9bd3e5c53cbdb34663db9be", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/7102 */\n+\n+/* Verify that GCC zero-extends integer constants\n+   in unsigned binary operations. */\n+\n+typedef unsigned char u8;\n+\n+u8 fun(u8 y)\n+{\n+  u8 x=((u8)255)/y;\n+  return x;\n+}\n+\n+int main(void)\n+{\n+  if (fun((u8)2) != 127)\n+    abort ();\n+  return 0;\n+}"}]}