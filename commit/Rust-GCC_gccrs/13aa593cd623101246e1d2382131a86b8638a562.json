{"sha": "13aa593cd623101246e1d2382131a86b8638a562", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhYTU5M2NkNjIzMTAxMjQ2ZTFkMjM4MjEzMWE4NmI4NjM4YTU2Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-14T22:48:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-14T22:48:49Z"}, "message": "(probe_stack): Probe with write, not read.\n\n(allocate_stack): Update and correct stack probe code.\n\nFrom-SVN: r9384", "tree": {"sha": "e3327eebeac3eb39a4c7880aa3bfd2827ba384f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3327eebeac3eb39a4c7880aa3bfd2827ba384f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13aa593cd623101246e1d2382131a86b8638a562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13aa593cd623101246e1d2382131a86b8638a562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13aa593cd623101246e1d2382131a86b8638a562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13aa593cd623101246e1d2382131a86b8638a562/comments", "author": null, "committer": null, "parents": [{"sha": "4134d7fcf0b949212085fbda10ad943afae563ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4134d7fcf0b949212085fbda10ad943afae563ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4134d7fcf0b949212085fbda10ad943afae563ec"}], "stats": {"total": 64, "additions": 22, "deletions": 42}, "files": [{"sha": "350d32bc750c0749b02cecaecc7c41b34fc45111", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 22, "deletions": 42, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13aa593cd623101246e1d2382131a86b8638a562/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13aa593cd623101246e1d2382131a86b8638a562/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=13aa593cd623101246e1d2382131a86b8638a562", "patch": "@@ -3654,11 +3654,11 @@\n   \"\"\n   \"\n {\n-  operands[0] = gen_rtx (MEM, DImode, plus_constant (stack_pointer_rtx,\n+  operands[1] = gen_rtx (MEM, DImode, plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t     INTVAL (operands[0])));\n-  MEM_VOLATILE_P (operands[0]) = 1;\n+  MEM_VOLATILE_P (operands[1]) = 1;\n \n-  operands[1] = gen_reg_rtx (DImode);\n+  operands[0] = const0_rtx;\n }\")\n \n ;; This is how we allocate stack space.  If we are allocating a\n@@ -3689,7 +3689,7 @@\n \t    emit_insn (gen_probe_stack (GEN_INT (- (probed += 8192))));\n \n \t  if (probed + 4096 < INTVAL (operands[0]))\n-\t    emit_insn (gen_probe_stack (GEN_INT (- (probed += 4096))));\n+\t    emit_insn (gen_probe_stack (GEN_INT (- INTVAL(operands[0]))));\n \t}\n \n       operands[0] = GEN_INT (- INTVAL (operands[0]));\n@@ -3698,56 +3698,36 @@\n     {\n       rtx out_label = 0;\n       rtx loop_label = gen_label_rtx ();\n-      rtx count = gen_reg_rtx (DImode);\n-      rtx access = gen_reg_rtx (Pmode);\n-      rtx memref = gen_rtx (MEM, DImode, access);\n-\n-      MEM_VOLATILE_P (memref) = 1;\n+      rtx want = gen_reg_rtx (Pmode);\n+      rtx tmp = gen_reg_rtx (Pmode);\n+      rtx memref;\n \n-      /* If the amount to be allocated is not a constant, we only need to\n-\t do something special if it is >= 4096.  */\n+      emit_insn (gen_subdi3 (want, stack_pointer_rtx,\n+\t\t\t     force_reg (Pmode, operands[0])));\n+      emit_insn (gen_adddi3 (tmp, stack_pointer_rtx, GEN_INT (-4096)));\n \n       if (GET_CODE (operands[0]) != CONST_INT)\n \t{\n-\t  operands[0] = force_reg (DImode, operands[0]);\n \t  out_label = gen_label_rtx ();\n-\t  emit_insn (gen_cmpdi (operands[0],\n-\t\t\t\tforce_reg (DImode, GEN_INT (4096))));\n-\t  emit_jump_insn (gen_ble (out_label));\n-\n-\t  /* Compute COUNT = (N + 4096) / 8192.  N is known positive.  */\n-\t  emit_insn (gen_adddi3 (count, operands[0], GEN_INT (4096)));\n-\t  emit_insn (gen_lshrdi3 (count, count, GEN_INT (13)));\n+\t  emit_insn (gen_cmpdi (want, tmp));\n+\t  emit_jump_insn (gen_bgeu (out_label));\n \t}\n-      else\n-\temit_move_insn (count, GEN_INT ((INTVAL (operands[0]) + 4096) >> 13));\n \n-      /* ACCESS = SP + 4096.  */\n-      emit_insn (gen_adddi3 (access, stack_pointer_rtx, GEN_INT (4096)));\n       emit_label (loop_label);\n-\n-      /* Each iteration subtracts 8192 from ACCESS and references it.  */\n-      emit_insn (gen_adddi3 (count, count, constm1_rtx));\n-      emit_insn (gen_adddi3 (access, access, GEN_INT (-8192)));\n-      emit_move_insn (gen_reg_rtx (DImode), memref);\n-      emit_insn (gen_cmpdi (count, const0_rtx));\n-      emit_jump_insn (gen_bgt (loop_label));\n+      memref = gen_rtx (MEM, DImode, tmp);\n+      MEM_VOLATILE_P (memref) = 1;\n+      emit_move_insn (memref, const0_rtx);\n+      emit_insn (gen_adddi3 (tmp, tmp, GEN_INT(-8192)));\n+      emit_insn (gen_cmpdi (tmp, want));\n+      emit_jump_insn (gen_bgtu (loop_label));\n+      memref = gen_rtx (MEM, DImode, want);\n+      MEM_VOLATILE_P (memref) = 1;\n+      emit_move_insn (memref, const0_rtx);\n \n       if (out_label)\n \temit_label (out_label);\n \n-      /* We need to subtract operands[0] from SP.  We know it isn't a\n-\t constant less than 32768, so we know we have to load it into\n-\t a register.  */\n-\n-      emit_insn (gen_subdi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t     force_reg (Pmode, operands[0])));\n-\n-      /* Now, unless we have a constant and we know that we are within\n-\t 4096 from the end, we need to access sp + 4096.  */\n-      if (! (GET_CODE (operands[0]) == CONST_INT\n-\t     && (INTVAL (operands[0]) % 8192) < 4096))\n-\temit_insn (gen_probe_stack (GEN_INT (4096)));\n+      emit_move_insn (stack_pointer_rtx, want);\n \n       DONE;\n     }"}]}