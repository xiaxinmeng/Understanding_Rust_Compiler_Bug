{"sha": "d964285ca2090dbdc538fcf16f0a42da36f89d0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2NDI4NWNhMjA5MGRiZGM1MzhmY2YxNmYwYTQyZGEzNmY4OWQwZg==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-08T23:16:28Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-08T23:16:28Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1533", "tree": {"sha": "4159247e6f99be93cc97e735973b2c90e364cd0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4159247e6f99be93cc97e735973b2c90e364cd0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d964285ca2090dbdc538fcf16f0a42da36f89d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d964285ca2090dbdc538fcf16f0a42da36f89d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d964285ca2090dbdc538fcf16f0a42da36f89d0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d964285ca2090dbdc538fcf16f0a42da36f89d0f/comments", "author": null, "committer": null, "parents": [{"sha": "a98145268923c10efe11471304463023b276ef41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98145268923c10efe11471304463023b276ef41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98145268923c10efe11471304463023b276ef41"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "4c4aff832fc8a8beb09218aa9f375b15a4f482ab", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d964285ca2090dbdc538fcf16f0a42da36f89d0f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d964285ca2090dbdc538fcf16f0a42da36f89d0f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d964285ca2090dbdc538fcf16f0a42da36f89d0f", "patch": "@@ -6546,11 +6546,8 @@ do_store_flag (exp, target, mode, only_cheap)\n   if (operand_mode == BLKmode)\n     return 0;\n \n-  while (TREE_CODE (arg0) == NON_LVALUE_EXPR)\n-    arg0 = TREE_OPERAND (arg0, 0);\n-\n-  while (TREE_CODE (arg1) == NON_LVALUE_EXPR)\n-    arg1 = TREE_OPERAND (arg1, 0);\n+  STRIP_NOPS (arg0);\n+  STRIP_NOPS (arg1);\n \n   /* Get the rtx comparison code to use.  We know that EXP is a comparison\n      operation of some type.  Some comparisons against 1 and -1 can be"}, {"sha": "c90bd4e6c3e25d26824580b401853dd17b7f83fc", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d964285ca2090dbdc538fcf16f0a42da36f89d0f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d964285ca2090dbdc538fcf16f0a42da36f89d0f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d964285ca2090dbdc538fcf16f0a42da36f89d0f", "patch": "@@ -1217,8 +1217,7 @@ int\n integer_zerop (expr)\n      tree expr;\n {\n-  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_NOPS (expr);\n \n   return (TREE_CODE (expr) == INTEGER_CST\n \t  && TREE_INT_CST_LOW (expr) == 0\n@@ -1231,8 +1230,7 @@ int\n integer_onep (expr)\n      tree expr;\n {\n-  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_NOPS (expr);\n \n   return (TREE_CODE (expr) == INTEGER_CST\n \t  && TREE_INT_CST_LOW (expr) == 1\n@@ -1249,8 +1247,7 @@ integer_all_onesp (expr)\n   register int prec;\n   register int uns;\n \n-  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_NOPS (expr);\n \n   if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n@@ -1292,8 +1289,7 @@ integer_pow2p (expr)\n {\n   HOST_WIDE_INT high, low;\n \n-  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_NOPS (expr);\n \n   if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n@@ -1314,8 +1310,7 @@ int\n real_zerop (expr)\n      tree expr;\n {\n-  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_NOPS (expr);\n \n   return (TREE_CODE (expr) == REAL_CST\n \t  && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst0));\n@@ -1327,8 +1322,7 @@ int\n real_onep (expr)\n      tree expr;\n {\n-  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_NOPS (expr);\n \n   return (TREE_CODE (expr) == REAL_CST\n \t  && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst1));\n@@ -1340,8 +1334,7 @@ int\n real_twop (expr)\n      tree expr;\n {\n-  while (TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  STRIP_NOPS (expr);\n \n   return (TREE_CODE (expr) == REAL_CST\n \t  && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst2));\n@@ -1353,6 +1346,7 @@ int\n really_constant_p (exp)\n      tree exp;\n {\n+  /* This is not quite the same as STRIP_NOPS.  It does more.  */\n   while (TREE_CODE (exp) == NOP_EXPR\n \t || TREE_CODE (exp) == CONVERT_EXPR\n \t || TREE_CODE (exp) == NON_LVALUE_EXPR)"}, {"sha": "69afc66baac47e5672ae1f9612a0dcf3ec35dbed", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d964285ca2090dbdc538fcf16f0a42da36f89d0f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d964285ca2090dbdc538fcf16f0a42da36f89d0f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d964285ca2090dbdc538fcf16f0a42da36f89d0f", "patch": "@@ -2678,8 +2678,8 @@ output_constructor (exp, size)\n \tfield = TREE_PURPOSE (link);\n \n       /* Eliminate the marker that makes a cast not be an lvalue.  */\n-      if (val != 0 && TREE_CODE (val) == NON_LVALUE_EXPR)\n-\tval = TREE_OPERAND (val, 0);\n+      if (val != 0)\n+\tSTRIP_NOPS (val);\n \n       if (field == 0 || !DECL_BIT_FIELD (field))\n \t{"}]}