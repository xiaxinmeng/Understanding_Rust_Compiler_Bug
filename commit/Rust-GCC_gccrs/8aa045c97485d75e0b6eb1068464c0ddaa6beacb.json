{"sha": "8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "node_id": "C_kwDOANBUbNoAKDhhYTA0NWM5NzQ4NWQ3NWUwYjZlYjEwNjg0NjRjMGRkYWE2YmVhY2I", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-20T22:02:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-20T22:02:37Z"}, "message": "c++, tree: walk TREE_VEC (and VECTOR_CST) in natural order [PR101886]\n\nUnfortunately the extract_autos_r fix in r13-4799-ga7c8036b26082d is\nderailed by the fact that walk_tree_1 currently walks the elements of a\nTREE_VEC in reverse, which means for A<auto, auto> in the below testcase\nextract_autos_r ends up adjusting the TEMPLATE_TYPE_IDX of the first\nauto instead of the second one, and the first auto is the canonical auto\nof level 2 (and index 0), so we rightfully trigger the sanity check\nadded in that commit.\n\nIt seems TREE_VEC and VECTOR_CST are the only trees we walk in reverse,\nand this has been the case since r21884 whence the original version of\nwalk_tree_1 was introduced.  But that's arguably unnatural and not\nconsistent with how we walk all other compound trees such as CONSTRUCTORs\nand EXPR_P trees in forward order.\n\nSo this patch makes walk_tree_1 walk TREE_VEC (and VECTOR_CST) in\nforward order as well, which fixes the testcase.  Doing so revealed that\nkeep_template_parm grows the list of found template parameters from the\nfront, which previously compensated for the TREE_VEC behavior, so now we\nshould grow it from the back.\n\n\tPR c++/101886\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (find_template_parameter_info::parm_list_tail):\n\tNew data member.\n\t(keep_template_parm): Use parm_list_tail to append rather\n\tthan prepend to parm_list.\n\ngcc/ChangeLog:\n\n\t* tree.cc (walk_tree_1) <case TREE_VEC>: Walk the elements\n\tin forward instead of reverse order.\n\t<case VECTOR_CST>: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/concepts/diagnostic12.C: Adjust expected order of\n\ttemplate parameters within pretty printed parameter mapping.\n\t* g++.dg/concepts/auto6.C: New test.", "tree": {"sha": "2ebeed3776c7a98b39f4196f08169daa8bb3b9b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ebeed3776c7a98b39f4196f08169daa8bb3b9b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/comments", "author": null, "committer": null, "parents": [{"sha": "aed5584ff6891560dc567e54517b9722dadc503e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed5584ff6891560dc567e54517b9722dadc503e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed5584ff6891560dc567e54517b9722dadc503e"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "2d902988a43984af923dc6fdbbf4383daca6281c", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "patch": "@@ -10640,14 +10640,14 @@ for_each_template_parm (tree t, tree_fn_t fn, void* data,\n struct find_template_parameter_info\n {\n   explicit find_template_parameter_info (tree ctx_parms)\n-    : parm_list (NULL_TREE),\n-      ctx_parms (ctx_parms),\n+    : ctx_parms (ctx_parms),\n       max_depth (TMPL_PARMS_DEPTH (ctx_parms))\n   {}\n \n   hash_set<tree> visited;\n   hash_set<tree> parms;\n-  tree parm_list;\n+  tree parm_list = NULL_TREE;\n+  tree *parm_list_tail = &parm_list;\n   tree ctx_parms;\n   int max_depth;\n };\n@@ -10693,7 +10693,12 @@ keep_template_parm (tree t, void* data)\n   if (TYPE_P (t))\n     t = TYPE_MAIN_VARIANT (t);\n   if (!ftpi->parms.add (t))\n-    ftpi->parm_list = tree_cons (NULL_TREE, t, ftpi->parm_list);\n+    {\n+      /* Append T to PARM_LIST.  */\n+      tree node = build_tree_list (NULL_TREE, t);\n+      *ftpi->parm_list_tail = node;\n+      ftpi->parm_list_tail = &TREE_CHAIN (node);\n+    }\n \n   /* Verify the parameter we found has a valid index.  */\n   if (flag_checking)"}, {"sha": "1f6d72e54ccf0c364c2d24c02eda0c79a8516bd0", "filename": "gcc/testsuite/g++.dg/concepts/auto6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto6.C?ref=8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/101886\n+// { dg-do compile { target c++17_only } }\n+// { dg-options \"-fconcepts-ts\" }\n+\n+template<typename, typename> struct A { };\n+\n+template<class T>\n+void f() {\n+  A<int, int> a;\n+  A<auto, auto> b1 = a;\n+  A<auto, auto> b2 = a;\n+}\n+\n+template void f<int>();"}, {"sha": "8086500760bff260cbfd2d61a671233286d0c969", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C?ref=8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "patch": "@@ -3,7 +3,7 @@\n \n template<typename T, typename... Args>\n   concept c1 = requires (T t, Args... args) { *t; };\n-// { dg-message \"in requirements with .T t., .Args ... args. .with Args = \\{\\}; T = int\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"in requirements with .T t., .Args ... args. .with T = int; Args = \\{\\}\" \"\" { target *-*-* } .-1 }\n \n static_assert(c1<int>); // { dg-error \"failed\" }\n "}, {"sha": "92199bb650333a6c58ea45661435ccff15037136", "filename": "gcc/tree.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa045c97485d75e0b6eb1068464c0ddaa6beacb/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=8aa045c97485d75e0b6eb1068464c0ddaa6beacb", "patch": "@@ -11310,24 +11310,24 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tif (len == 0)\n \t  break;\n \n-\t/* Walk all elements but the first.  */\n-\twhile (--len)\n-\t  WALK_SUBTREE (TREE_VEC_ELT (*tp, len));\n+\t/* Walk all elements but the last.  */\n+\tfor (int i = 0; i < len - 1; ++i)\n+\t  WALK_SUBTREE (TREE_VEC_ELT (*tp, i));\n \n-\t/* Now walk the first one as a tail call.  */\n-\tWALK_SUBTREE_TAIL (TREE_VEC_ELT (*tp, 0));\n+\t/* Now walk the last one as a tail call.  */\n+\tWALK_SUBTREE_TAIL (TREE_VEC_ELT (*tp, len - 1));\n       }\n \n     case VECTOR_CST:\n       {\n \tunsigned len = vector_cst_encoded_nelts (*tp);\n \tif (len == 0)\n \t  break;\n-\t/* Walk all elements but the first.  */\n-\twhile (--len)\n-\t  WALK_SUBTREE (VECTOR_CST_ENCODED_ELT (*tp, len));\n-\t/* Now walk the first one as a tail call.  */\n-\tWALK_SUBTREE_TAIL (VECTOR_CST_ENCODED_ELT (*tp, 0));\n+\t/* Walk all elements but the last.  */\n+\tfor (unsigned i = 0; i < len - 1; ++i)\n+\t  WALK_SUBTREE (VECTOR_CST_ENCODED_ELT (*tp, i));\n+\t/* Now walk the last one as a tail call.  */\n+\tWALK_SUBTREE_TAIL (VECTOR_CST_ENCODED_ELT (*tp, len - 1));\n       }\n \n     case COMPLEX_CST:"}]}