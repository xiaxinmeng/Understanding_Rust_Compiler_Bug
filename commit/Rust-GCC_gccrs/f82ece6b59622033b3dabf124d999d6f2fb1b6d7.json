{"sha": "f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyZWNlNmI1OTYyMjAzM2IzZGFiZjEyNGQ5OTlkNmYyZmIxYjZkNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-03-21T11:04:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-03-21T11:04:36Z"}, "message": "Deprecate some C++ extensions\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-03/msg00995.html\n\t* doc/extend.texi (Deprecated Features): Update deprecared flags,\n\tmention anon-struct/union members and trailing attributes.\n\n\tcp/\n\t* class.c (finish_struct_anon_r): Refactor, deprecate anything\n\tother than public non-static data members.\n\t* parser.c (cp_parser_init_declarator): Deprecate attributes after\n\tparenthesized initializer.\n\n\ttestsuite/\n\t* g++.dg/ext/anon-struct6.C: Adjust.\n\t* g++.dg/ext/deprecate-1.C: New.\n\t* g++.dg/ext/deprecate-2.C: New.\n\t* g++.dg/lookup/pr84602.C: Adjust.\n\t* g++.dg/lookup/pr84962.C: Adjust.\n\t* g++.old-deja/g++.other/anon4.C\n\nFrom-SVN: r258712", "tree": {"sha": "040f797e6109bd8be5c3cf2481cdbf62aced7f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040f797e6109bd8be5c3cf2481cdbf62aced7f9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cd9cf2f0bc24499c292896f951c2a34875637f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd9cf2f0bc24499c292896f951c2a34875637f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd9cf2f0bc24499c292896f951c2a34875637f0"}], "stats": {"total": 156, "additions": 100, "deletions": 56}, "files": [{"sha": "d886c45f10d5ccbf7ba2e47c4b287a2fc9a14f50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -1,3 +1,8 @@\n+2018-03-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/extend.texi (Deprecated Features): Update deprecared flags,\n+\tmention anon-struct/union members and trailing attributes.\n+\n 2018-03-21  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/84969"}, {"sha": "da19013d21cb5c0ce0ad9ce97f377b28c177699b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -1,5 +1,10 @@\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n+\t* class.c (finish_struct_anon_r): Refactor, deprecate anything\n+\tother than public non-static data members.\n+\t* parser.c (cp_parser_init_declarator): Deprecate attributes after\n+\tparenthesized initializer.\n+\n \tPR c++/84836\n \t* name-lookup.c (update_binding): Correct logic for local binding\n \tupdate."}, {"sha": "3edae0f5e6193eced5df8bf7b75082d54086c960", "filename": "gcc/cp/class.c", "status": "modified", "additions": 19, "deletions": 37, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -2869,9 +2869,7 @@ warn_hidden (tree t)\n static void\n finish_struct_anon_r (tree field, bool complain)\n {\n-  bool is_union = TREE_CODE (TREE_TYPE (field)) == UNION_TYPE;\n-  tree elt = TYPE_FIELDS (TREE_TYPE (field));\n-  for (; elt; elt = DECL_CHAIN (elt))\n+  for (tree elt = TYPE_FIELDS (TREE_TYPE (field)); elt; elt = DECL_CHAIN (elt))\n     {\n       /* We're generally only interested in entities the user\n \t declared, but we also find nested classes by noticing\n@@ -2885,50 +2883,34 @@ finish_struct_anon_r (tree field, bool complain)\n \t      || TYPE_UNNAMED_P (TREE_TYPE (elt))))\n \tcontinue;\n \n-      if (TREE_CODE (elt) != FIELD_DECL)\n+      if (complain\n+\t  && (TREE_CODE (elt) != FIELD_DECL\n+\t      || (TREE_PRIVATE (elt) || TREE_PROTECTED (elt))))\n \t{\n \t  /* We already complained about static data members in\n \t     finish_static_data_member_decl.  */\n-\t  if (complain && !VAR_P (elt))\n+\t  if (!VAR_P (elt)\n+\t      && permerror (DECL_SOURCE_LOCATION (elt),\n+\t\t\t    TREE_CODE (TREE_TYPE (field)) == UNION_TYPE\n+\t\t\t    ? \"%q#D invalid; an anonymous union may \"\n+\t\t\t    \"only have public non-static data members\"\n+\t\t\t    : \"%q#D invalid; an anonymous struct may \"\n+\t\t\t    \"only have public non-static data members\", elt))\n \t    {\n-\t      if (is_union)\n-\t\tpermerror (DECL_SOURCE_LOCATION (elt),\n-\t\t\t   \"%q#D invalid; an anonymous union can \"\n-\t\t\t   \"only have non-static data members\", elt);\n-\t      else\n-\t\tpermerror (DECL_SOURCE_LOCATION (elt),\n-\t\t\t   \"%q#D invalid; an anonymous struct can \"\n-\t\t\t   \"only have non-static data members\", elt);\n-\t    }\n-\t  continue;\n-\t}\n-\n-      if (complain)\n-\t{\n-\t  if (TREE_PRIVATE (elt))\n-\t    {\n-\t      if (is_union)\n-\t\tpermerror (DECL_SOURCE_LOCATION (elt),\n-\t\t\t   \"private member %q#D in anonymous union\", elt);\n-\t      else\n-\t\tpermerror (DECL_SOURCE_LOCATION (elt),\n-\t\t\t   \"private member %q#D in anonymous struct\", elt);\n-\t    }\n-\t  else if (TREE_PROTECTED (elt))\n-\t    {\n-\t      if (is_union)\n-\t\tpermerror (DECL_SOURCE_LOCATION (elt),\n-\t\t\t   \"protected member %q#D in anonymous union\", elt);\n-\t      else\n-\t\tpermerror (DECL_SOURCE_LOCATION (elt),\n-\t\t\t   \"protected member %q#D in anonymous struct\", elt);\n+\t      static bool hint;\n+\t      if (flag_permissive && !hint)\n+\t\t{\n+\t\t  hint = true;\n+\t\t  inform (DECL_SOURCE_LOCATION (elt),\n+\t\t\t  \"this flexibility is deprecated and will be removed\");\n+\t\t}\n \t    }\n \t}\n \n       TREE_PRIVATE (elt) = TREE_PRIVATE (field);\n       TREE_PROTECTED (elt) = TREE_PROTECTED (field);\n \n-      /* Recurse into the anonymous aggregates to handle correctly\n+      /* Recurse into the anonymous aggregates to correctly handle\n \t access control (c++/24926):\n \n \t class A {"}, {"sha": "4e3e1dccda0effa112627460d5cd78384c7d96df", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -19685,12 +19685,21 @@ cp_parser_init_declarator (cp_parser* parser,\n   /* The old parser allows attributes to appear after a parenthesized\n      initializer.  Mark Mitchell proposed removing this functionality\n      on the GCC mailing lists on 2002-08-13.  This parser accepts the\n-     attributes -- but ignores them.  */\n+     attributes -- but ignores them.  Made a permerror in GCC 8.  */\n   if (cp_parser_allow_gnu_extensions_p (parser)\n-      && initialization_kind == CPP_OPEN_PAREN)\n-    if (cp_parser_attributes_opt (parser))\n-      warning (OPT_Wattributes,\n-\t       \"attributes after parenthesized initializer ignored\");\n+      && initialization_kind == CPP_OPEN_PAREN\n+      && cp_parser_attributes_opt (parser)\n+      && permerror (input_location,\n+\t\t    \"attributes after parenthesized initializer ignored\"))\n+    {\n+      static bool hint;\n+      if (flag_permissive && !hint)\n+\t{\n+\t  hint = true;\n+\t  inform (input_location,\n+\t\t  \"this flexibility is deprecated and will be removed\");\n+\t}\n+    }\n \n   /* And now complain about a non-function implicit template.  */\n   if (bogus_implicit_tmpl && decl != error_mark_node)"}, {"sha": "ce7862dbe6da18362ff6dedd9bc250de4f851a7a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -23824,23 +23824,25 @@ some cases that the feature will be dropped in the future.  In other\n cases, the feature might be gone already.\n \n While the list below is not exhaustive, it documents some of the options\n-that are now deprecated:\n+that are now deprecated or have been removed:\n \n @table @code\n @item -fexternal-templates\n @itemx -falt-external-templates\n-These are two of the many ways for G++ to implement template\n-instantiation.  @xref{Template Instantiation}.  The C++ standard clearly\n-defines how template definitions have to be organized across\n-implementation units.  G++ has an implicit instantiation mechanism that\n-should work just fine for standard-conforming code.\n+These are two options provided alternative methods of template\n+instantiation.  @xref{Template Instantiation}.  The options have been removed.\n \n @item -fstrict-prototype\n @itemx -fno-strict-prototype\n Previously it was possible to use an empty prototype parameter list to\n indicate an unspecified number of parameters (like C), rather than no\n-parameters, as C++ demands.  This feature has been removed, except where\n-it is required for backwards compatibility.   @xref{Backwards Compatibility}.\n+parameters, as C++ demands.  This feature has been removed.\n+\n+@item -fno-for-scope\n+@item -ffriend-injection\n+These two options provide compatibility with pre-standard C++.\n+@xref{Backwards Compatibility}.\n+\n @end table\n \n G++ allows a virtual function returning @samp{void *} to be overridden\n@@ -23879,6 +23881,14 @@ initializers for static members of const integral types and const\n enumeration types so this extension has been deprecated and will be removed\n from a future version.\n \n+G++ allows attributes to follow a parenthesized direct initializer,\n+e.g.@: @samp{ int f (0) __attribute__ ((something)); } This extension\n+has been ignored since G++ 3.3 and is deprecated.\n+\n+G++ allows anonymous structs and unions to have members that are not\n+public non-static data members (i.e.@: fields).  These extensions are\n+deprecated.\n+\n @node Backwards Compatibility\n @section Backwards Compatibility\n @cindex Backwards Compatibility"}, {"sha": "a9deebe170c54ba41e93c4ff0c04f2bda54fdcbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -1,5 +1,12 @@\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n+\t* g++.dg/ext/anon-struct6.C: Adjust.\n+\t* g++.dg/ext/deprecate-1.C: New.\n+\t* g++.dg/ext/deprecate-2.C: New.\n+\t* g++.dg/lookup/pr84602.C: Adjust.\n+\t* g++.dg/lookup/pr84962.C: Adjust.\n+\t* g++.old-deja/g++.other/anon4.C\n+\n \tPR c++/84836\n \t* g++.dg/lookup/pr84836.C: New.\n "}, {"sha": "360f25027a310b0572af71d536f811286703f221", "filename": "gcc/testsuite/g++.dg/ext/anon-struct6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct6.C?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -5,6 +5,6 @@ struct A\n   struct\n   {\n     struct { static int i; }; // { dg-error \"prohibits anonymous structs|non-static data members|unnamed class\" }\n-    void foo() { i; } // { dg-error \"can only have non-static data\" }\n+    void foo() { i; } // { dg-error \"public non-static data\" }\n   }; // { dg-error \"prohibits anonymous structs\" }\n };"}, {"sha": "a23b71ba6ca09ff481bdcf505c046427fb5e9bfa", "filename": "gcc/testsuite/g++.dg/ext/deprecate-1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdeprecate-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdeprecate-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdeprecate-1.C?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -0,0 +1,22 @@\n+// be pickier about anon-union and structs\n+// { dg-options \"-fpermissive\" }\n+\n+struct X\n+{\n+  struct \n+  {\n+    int f1 (); // { dg-warning \"public non-static data\" }\n+    // { dg-message \"will be removed\" \"\" { target *-*-* } .-1 }\n+    typedef int t1;  // { dg-warning \"public non-static data\" }\n+  private:\n+    int m1; // { dg-warning \"public non-static data\" }\n+  };\n+\n+  union\n+  {\n+    int f2 (); // { dg-warning \"public non-static data\" }\n+    typedef int t2; // { dg-warning \"public non-static data\" }\n+  protected:\n+    int m2; // { dg-warning \"public non-static data\" }\n+  };\n+};"}, {"sha": "5fcab2f6aac685aa3b393cb92e44a4f88ef8c6bf", "filename": "gcc/testsuite/g++.dg/ext/deprecate-2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdeprecate-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdeprecate-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdeprecate-2.C?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -0,0 +1,4 @@\n+// Stop accepting attributes after a parenthesized initializer\n+// { dg-options \"-fpermissive\" }\n+int i (0) __attribute__ ((ignored)); // { dg-warning \"attributes\" }\n+// { dg-message \"will be removed\" \"\" { target *-*-* } .-1 }"}, {"sha": "e1fc146a9cef257957c888b8ec2419bdfb327ba4", "filename": "gcc/testsuite/g++.dg/lookup/pr84602.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84602.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84602.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84602.C?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -3,15 +3,15 @@\n \n struct X {\n   union {\n-    class a; // { dg-warning \"can only have\" }\n+    class a; // { dg-warning \"public non-static data member\" }\n   };\n   a *b;\n };\n X::a *a;\n \n struct Y {\n   union {\n-    class a; // { dg-warning \"can only have\" }\n+    class a; // { dg-warning \"public non-static data member\" }\n     int a;\n   };\n   class a *b;\n@@ -23,7 +23,7 @@ struct Z {\n   union {\n     // Force MEMBER_VEC creation\n     int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;\n-    class a; // { dg-warning \"can only have\" }\n+    class a; // { dg-warning \"public non-static data member\" }\n     int a;\n   };\n   class a *b;"}, {"sha": "b9b7a3135266693097737cca1eb8a1581aaaf5ac", "filename": "gcc/testsuite/g++.dg/lookup/pr84962.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84962.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84962.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84962.C?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -6,7 +6,7 @@ struct X {\n   struct \n   {\n     template <typename> int a ();\n-    // { dg-error \"can only have\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"public non-static data member\" \"\" { target *-*-* } .-1 }\n   };\n \n   int  : a; // { dg-error \"non-integral\" }"}, {"sha": "e6ed91b77cadb236866c99164265f069891382ce", "filename": "gcc/testsuite/g++.old-deja/g++.other/anon4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82ece6b59622033b3dabf124d999d6f2fb1b6d7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon4.C?ref=f82ece6b59622033b3dabf124d999d6f2fb1b6d7", "patch": "@@ -11,6 +11,6 @@ struct A\n {\n   union\n   {\n-    void bad(); // { dg-error \"can only have non-static data\" }\n+    void bad(); // { dg-error \"public non-static data member\" }\n   };\n };"}]}