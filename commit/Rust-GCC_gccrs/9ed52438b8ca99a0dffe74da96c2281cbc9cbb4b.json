{"sha": "9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "node_id": "C_kwDOANBUbNoAKDllZDUyNDM4YjhjYTk5YTBkZmZlNzRkYTk2YzIyODFjYmM5Y2JiNGI", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-18T16:38:50Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-19T18:57:12Z"}, "message": "[nvptx] Don't skip atomic insns in nvptx_reorg_uniform_simt\n\nIn nvptx_reorg_uniform_simt we have a loop:\n...\n  for (insn = get_insns (); insn; insn = next)\n    {\n      next = NEXT_INSN (insn);\n      if (!(CALL_P (insn) && nvptx_call_insn_is_syscall_p (insn))\n         && !(NONJUMP_INSN_P (insn)\n              && GET_CODE (PATTERN (insn)) == PARALLEL\n              && get_attr_atomic (insn)))\n       continue;\n...\nthat intends to handle syscalls and atomic insns.\n\nHowever, this also silently skips the atomic insn nvptx_atomic_store, which\nhas GET_CODE (PATTERN (insn)) == SET.\n\nThis does not cause problems, because the nvptx_atomic_store actually maps\nonto a \"st\" insn, and therefore is not atomic and doesn't need to be handled\nby nvptx_reorg_uniform_simt.\n\nFix this by:\n- explicitly setting nvptx_atomic_store's atomic attribute to false,\n- rewriting the skip condition to make sure all insn\n  with atomic attribute are handled, and\n- asserting that all handled insns are PARALLEL.\n\nTested on nvptx.\n\ngcc/ChangeLog:\n\n2022-02-19  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (nvptx_reorg_uniform_simt): Handle all\n\tinsns with atomic attribute.  Assert that all handled insns are\n\tPARALLELs.\n\t* config/nvptx/nvptx.md (define_insn \"nvptx_atomic_store<mode>\"):\n\tSet atomic attribute to false.\n\ngcc/testsuite/ChangeLog:\n\n2022-02-19  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.target/nvptx/uniform-simt-3.c: New test.", "tree": {"sha": "d90c1198bbc833573d4b2a688ad49f7d699a4b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d90c1198bbc833573d4b2a688ad49f7d699a4b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e5c34ab45f34aadea65c5ba33ec685264b6ec66"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "55fab3e84cbb0c150e780f60437f4651f65f29ff", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "patch": "@@ -3274,12 +3274,24 @@ nvptx_reorg_uniform_simt ()\n   for (insn = get_insns (); insn; insn = next)\n     {\n       next = NEXT_INSN (insn);\n-      if (!(CALL_P (insn) && nvptx_call_insn_is_syscall_p (insn))\n-\t  && !(NONJUMP_INSN_P (insn)\n-\t       && GET_CODE (PATTERN (insn)) == PARALLEL\n-\t       && get_attr_atomic (insn)))\n+\n+      /* Skip NOTE, USE, etc.  */\n+      if (!INSN_P (insn) || recog_memoized (insn) == -1)\n \tcontinue;\n+\n+      if (CALL_P (insn) && nvptx_call_insn_is_syscall_p (insn))\n+\t{\n+\t  /* Handle syscall.  */\n+\t}\n+      else if (get_attr_atomic (insn))\n+\t{\n+\t  /* Handle atomic insn.  */\n+\t}\n+      else\n+\tcontinue;\n+\n       rtx pat = PATTERN (insn);\n+      gcc_assert (GET_CODE (pat) == PARALLEL);\n       rtx master = nvptx_get_unisimt_master ();\n       bool shuffle_p = false;\n       for (int i = 0; i < XVECLEN (pat, 0); i++)"}, {"sha": "132ef2f1d34ec453a41d8c7f9afd13ea01b901d6", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "patch": "@@ -2097,7 +2097,7 @@\n       = \"%.\\tst%A0.b%T0\\t%0, %1;\";\n     return nvptx_output_atomic_insn (t, operands, 0, 2);\n   }\n-  [(set_attr \"atomic\" \"true\")])\n+  [(set_attr \"atomic\" \"false\")]) ;; Note: st is not an atomic insn.\n \n (define_insn \"atomic_fetch_add<mode>\"\n   [(set (match_operand:SDIM 1 \"memory_operand\" \"+m\")"}, {"sha": "532fa825161759106e6dbf6ca7164095fb2bdc24", "filename": "gcc/testsuite/gcc.target/nvptx/uniform-simt-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-3.c?ref=9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -muniform-simt -misa=sm_75\" } */\n+\n+#include \"atomic-store-2.c\""}]}