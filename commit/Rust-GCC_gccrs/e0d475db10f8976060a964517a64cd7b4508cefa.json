{"sha": "e0d475db10f8976060a964517a64cd7b4508cefa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkNDc1ZGIxMGY4OTc2MDYwYTk2NDUxN2E2NGNkN2I0NTA4Y2VmYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-16T22:53:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-16T22:53:38Z"}, "message": "compiler: Don't built hash/equality functions for thunk structs.\n\nThey are never necessary, and they can cause problems when a\nthunk is used to pass an unexported type from a different\npackage to a function defined in that package.  The resulting\nstruct type may need to call the comparison routine from the\nother package, which will fail because the type is not\nexported.  This will be bug492 in the master testsuite.\n\nFrom-SVN: r218798", "tree": {"sha": "745f7d8d71a7a467de39d8220fc043eb29373144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/745f7d8d71a7a467de39d8220fc043eb29373144"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d475db10f8976060a964517a64cd7b4508cefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d475db10f8976060a964517a64cd7b4508cefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d475db10f8976060a964517a64cd7b4508cefa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d475db10f8976060a964517a64cd7b4508cefa/comments", "author": null, "committer": null, "parents": [{"sha": "c0f15a3f249fa7ec0a210e540c0d3af7f642ccfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f15a3f249fa7ec0a210e540c0d3af7f642ccfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f15a3f249fa7ec0a210e540c0d3af7f642ccfa"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "e8c3a3e27023e2968666882d227645b8b561f4d3", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d475db10f8976060a964517a64cd7b4508cefa/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d475db10f8976060a964517a64cd7b4508cefa/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=e0d475db10f8976060a964517a64cd7b4508cefa", "patch": "@@ -1884,6 +1884,8 @@ Statement::make_dec_statement(Expression* expr)\n // Class Thunk_statement.  This is the base class for go and defer\n // statements.\n \n+Unordered_set(const Struct_type*) Thunk_statement::thunk_types;\n+\n // Constructor.\n \n Thunk_statement::Thunk_statement(Statement_classification classification,\n@@ -2265,7 +2267,20 @@ Thunk_statement::build_struct(Function_type* fntype)\n \t}\n     }\n \n-  return Type::make_struct_type(fields, location);\n+  Struct_type *st = Type::make_struct_type(fields, location);\n+\n+  Thunk_statement::thunk_types.insert(st);\n+\n+  return st;\n+}\n+\n+// Return whether ST is a type created to hold thunk parameters.\n+\n+bool\n+Thunk_statement::is_thunk_struct(const Struct_type* st)\n+{\n+  return (Thunk_statement::thunk_types.find(st)\n+\t  != Thunk_statement::thunk_types.end());\n }\n \n // Build the thunk we are going to call.  This is a brand new, albeit"}, {"sha": "e12f60fdd30c11f726796458c8a72a50918c3d60", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d475db10f8976060a964517a64cd7b4508cefa/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d475db10f8976060a964517a64cd7b4508cefa/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=e0d475db10f8976060a964517a64cd7b4508cefa", "patch": "@@ -985,6 +985,10 @@ class Thunk_statement : public Statement\n   bool\n   simplify_statement(Gogo*, Named_object*, Block*);\n \n+  // Return whether ST is a type created to hold thunk parameters.\n+  static bool\n+  is_thunk_struct(const Struct_type *st);\n+\n  protected:\n   int\n   do_traverse(Traverse* traverse);\n@@ -1023,6 +1027,9 @@ class Thunk_statement : public Statement\n   void\n   thunk_field_param(int n, char* buf, size_t buflen);\n \n+  // A list of all the struct types created for thunk statements.\n+  static Unordered_set(const Struct_type*) thunk_types;\n+\n   // The function call to be executed in a separate thread (go) or\n   // later (defer).\n   Expression* call_;"}, {"sha": "fbcce7f3ed601726b48e9d12e881d1882641a31a", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d475db10f8976060a964517a64cd7b4508cefa/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d475db10f8976060a964517a64cd7b4508cefa/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=e0d475db10f8976060a964517a64cd7b4508cefa", "patch": "@@ -1593,7 +1593,9 @@ Type::type_functions(Gogo* gogo, Named_type* name, Function_type* hash_fntype,\n       hash_fnname = \"__go_type_hash_identity\";\n       equal_fnname = \"__go_type_equal_identity\";\n     }\n-  else if (!this->is_comparable())\n+  else if (!this->is_comparable() ||\n+\t   (this->struct_type() != NULL\n+\t    && Thunk_statement::is_thunk_struct(this->struct_type())))\n     {\n       hash_fnname = \"__go_type_hash_error\";\n       equal_fnname = \"__go_type_equal_error\";"}]}