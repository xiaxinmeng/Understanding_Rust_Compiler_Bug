{"sha": "aae8570a44715ff724f31c3fc2442e5f69c929a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlODU3MGE0NDcxNWZmNzI0ZjMxYzNmYzI0NDJlNWY2OWM5MjlhNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-05-23T10:37:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-05-23T10:37:34Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not modify the original type because of the alignment when...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Do not modify the\n\toriginal type because of the alignment when there is an address clause.\n\nFrom-SVN: r147818", "tree": {"sha": "74ed8d557ceb45bc5ec5c25ae6a3408eb6036d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ed8d557ceb45bc5ec5c25ae6a3408eb6036d13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae8570a44715ff724f31c3fc2442e5f69c929a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae8570a44715ff724f31c3fc2442e5f69c929a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae8570a44715ff724f31c3fc2442e5f69c929a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae8570a44715ff724f31c3fc2442e5f69c929a7/comments", "author": null, "committer": null, "parents": [{"sha": "92bffc1462e39ec00003876923ee8744bedcf817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92bffc1462e39ec00003876923ee8744bedcf817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92bffc1462e39ec00003876923ee8744bedcf817"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "1484a6a1715029dc0e5b7b11057fedcee24fdd7c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aae8570a44715ff724f31c3fc2442e5f69c929a7", "patch": "@@ -1,3 +1,8 @@\n+2009-05-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Do not modify the\n+\toriginal type because of the alignment when there is an address clause.\n+\n 2009-05-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: When"}, {"sha": "ca48c5a0f60c09307fa05932cb943e02fbfb2829", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=aae8570a44715ff724f31c3fc2442e5f69c929a7", "patch": "@@ -608,17 +608,22 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    return error_mark_node;\n \t  }\n \n-\t/* If an alignment is specified, use it if valid.   Note that\n-\t   exceptions are objects but don't have alignments.  We must do this\n-\t   before we validate the size, since the alignment can affect the\n-\t   size.  */\n+\t/* If an alignment is specified, use it if valid.  Note that exceptions\n+\t   are objects but don't have an alignment.  We must do this before we\n+\t   validate the size, since the alignment can affect the size.  */\n \tif (kind != E_Exception && Known_Alignment (gnat_entity))\n \t  {\n \t    gcc_assert (Present (Alignment (gnat_entity)));\n \t    align = validate_alignment (Alignment (gnat_entity), gnat_entity,\n \t\t\t\t\tTYPE_ALIGN (gnu_type));\n-\t    gnu_type = maybe_pad_type (gnu_type, NULL_TREE, align, gnat_entity,\n-\t\t\t\t       \"PAD\", false, definition, true);\n+\t    /* No point in changing the type if there is an address clause\n+\t       as the final type of the object will be a reference type.  */\n+\t    if (Present (Address_Clause (gnat_entity)))\n+\t      align = 0;\n+\t    else\n+\t      gnu_type\n+\t\t= maybe_pad_type (gnu_type, NULL_TREE, align, gnat_entity,\n+\t\t\t\t  \"PAD\", false, definition, true);\n \t  }\n \n \t/* If we are defining the object, see if it has a Size value and"}, {"sha": "1d8379a47a0670a3e31fedf9c7bd141df5532eff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aae8570a44715ff724f31c3fc2442e5f69c929a7", "patch": "@@ -1,3 +1,7 @@\n+2009-05-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/addr6.adb: New test.\n+\n 2009-05-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lib/target-supports.exp (check_effective_target_arm_thumb2_ok):"}, {"sha": "e357132d66f0cb9cebca747e3286246721ff5068", "filename": "gcc/testsuite/gnat.dg/addr6.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Ftestsuite%2Fgnat.dg%2Faddr6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae8570a44715ff724f31c3fc2442e5f69c929a7/gcc%2Ftestsuite%2Fgnat.dg%2Faddr6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr6.adb?ref=aae8570a44715ff724f31c3fc2442e5f69c929a7", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do compile }\n+\n+procedure Addr6 is\n+\n+   type Byte is mod 2**8;\n+\n+   type Byte_Arr1 is array (Positive range <>) of Byte;\n+   for Byte_Arr1'Alignment use 4;\n+\n+   type Byte_Arr2 is array (Positive range <>) of Byte;\n+\n+   function Length return Natural is\n+   begin\n+     return 1;\n+   end;\n+\n+   function Empty return Byte_Arr2 is\n+     Null_Arr : Byte_Arr2 (1 .. 0);\n+   begin\n+     return Null_Arr;\n+   end;\n+\n+   A1 : Byte_Arr1 (1 .. Length);\n+\n+   A2 : Byte_Arr2 (A1'Range);\n+   for A2'Alignment use 4;\n+   for A2'Address use A1'Address;\n+\n+begin\n+   A2 := Empty;\n+end;"}]}