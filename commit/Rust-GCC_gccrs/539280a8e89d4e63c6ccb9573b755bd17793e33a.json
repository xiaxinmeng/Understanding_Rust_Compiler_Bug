{"sha": "539280a8e89d4e63c6ccb9573b755bd17793e33a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5MjgwYThlODlkNGU2M2M2Y2NiOTU3M2I3NTViZDE3NzkzZTMzYQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-02T04:11:07Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-02T04:11:07Z"}, "message": "fixup libobjc usage of PCC_BITFIELD_TYPE_MATTERS\n\nlibobjc/ChangeLog:\n\n2015-05-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* acinclude.m4: Include bitfields.m4.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\t* configure.ac: Invoke gt_BITFIELD_TYPE_MATTERS.\n\t* encoding.c: Check HAVE_BITFIELD_TYPE_MATTERS.\n\nconfig/ChangeLog:\n\n2015-05-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* bitfields.m4: New file.\n\nFrom-SVN: r222715", "tree": {"sha": "fee646565688a42fe976a306924b04532245ff8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee646565688a42fe976a306924b04532245ff8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/539280a8e89d4e63c6ccb9573b755bd17793e33a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539280a8e89d4e63c6ccb9573b755bd17793e33a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/539280a8e89d4e63c6ccb9573b755bd17793e33a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539280a8e89d4e63c6ccb9573b755bd17793e33a/comments", "author": null, "committer": null, "parents": [{"sha": "90eb63a3a045dd9ac0774860e03163da82cb0a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eb63a3a045dd9ac0774860e03163da82cb0a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90eb63a3a045dd9ac0774860e03163da82cb0a1c"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "ee8f3b5baba03b5ff840d358e77939eeb05c8e97", "filename": "config/bitfields.m4", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539280a8e89d4e63c6ccb9573b755bd17793e33a/config%2Fbitfields.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539280a8e89d4e63c6ccb9573b755bd17793e33a/config%2Fbitfields.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbitfields.m4?ref=539280a8e89d4e63c6ccb9573b755bd17793e33a", "patch": "@@ -0,0 +1,26 @@\n+dnl Copyright (C) 2015 Free Software Foundation, Inc.\n+dnl This file is free software, distributed under the terms of the GNU\n+dnl General Public License.  As a special exception to the GNU General\n+dnl Public License, this file may be distributed as part of a program\n+dnl that contains a configuration script generated by Autoconf, under\n+dnl the same distribution terms as the rest of that program.\n+\n+# Define HAVE_BITFIELD_TYPE_MATTERS if the type of bitfields effects their\n+# alignment.\n+\n+AC_DEFUN([gt_BITFIELD_TYPE_MATTERS],\n+[\n+  AC_CACHE_CHECK([if the type of bitfields matters], gt_cv_bitfield_type_matters,\n+  [\n+    AC_TRY_COMPILE(\n+      [struct foo1 { char x; char :0; char y; };\n+struct foo2 { char x; int :0; char y; };\n+int foo1test[ sizeof (struct foo1) == 2 ? 1 : -1 ];\n+int foo2test[ sizeof (struct foo2) == 5 ? 1 : -1]; ],\n+      [], gt_cv_bitfield_type_matters=yes, gt_cv_bitfield_type_matters=no)\n+  ])\n+  if test $gt_cv_bitfield_type_matters = yes; then\n+    AC_DEFINE(HAVE_BITFIELD_TYPE_MATTERS, 1,\n+      [Define if the type of bitfields effects alignment.])\n+  fi\n+])"}, {"sha": "4193018d5843640239f2d3fa98996a661c152c43", "filename": "libobjc/acinclude.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Facinclude.m4?ref=539280a8e89d4e63c6ccb9573b755bd17793e33a", "patch": "@@ -12,6 +12,7 @@ m4_include(../config/acx.m4)\n m4_include(../config/no-executables.m4)\n m4_include(../config/enable.m4)\n m4_include(../config/tls.m4)\n+m4_include(../config/bitfields.m4)\n \n m4_include(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring an installed"}, {"sha": "20d1fcaf32990f55a0c403958fd223f6c7bfce61", "filename": "libobjc/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfig.h.in?ref=539280a8e89d4e63c6ccb9573b755bd17793e33a", "patch": "@@ -1,5 +1,8 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n \n+/* Define if the type of bitfields effects alignment. */\n+#undef HAVE_BITFIELD_TYPE_MATTERS\n+\n /* Define to 1 if the target assembler supports thread-local storage. */\n #undef HAVE_CC_TLS\n "}, {"sha": "0547f913a6b9306a238a7bc2c5e2c53d9ec098d9", "filename": "libobjc/configure", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=539280a8e89d4e63c6ccb9573b755bd17793e33a", "patch": "@@ -11530,6 +11530,44 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_exception_model_name\" >&5\n $as_echo \"$ac_exception_model_name\" >&6; }\n \n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the type of bitfields matters\" >&5\n+$as_echo_n \"checking if the type of bitfields matters... \" >&6; }\n+if test \"${gt_cv_bitfield_type_matters+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+struct foo1 { char x; char :0; char y; };\n+struct foo2 { char x; int :0; char y; };\n+int foo1test[ sizeof (struct foo1) == 2 ? 1 : -1 ];\n+int foo2test[ sizeof (struct foo2) == 5 ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gt_cv_bitfield_type_matters=yes\n+else\n+  gt_cv_bitfield_type_matters=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gt_cv_bitfield_type_matters\" >&5\n+$as_echo \"$gt_cv_bitfield_type_matters\" >&6; }\n+  if test $gt_cv_bitfield_type_matters = yes; then\n+\n+$as_echo \"#define HAVE_BITFIELD_TYPE_MATTERS 1\" >>confdefs.h\n+\n+  fi\n+\n+\n # ------\n # Output\n # ------"}, {"sha": "2d88519f6447032d2202f1c9f898529de8359d9a", "filename": "libobjc/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure.ac?ref=539280a8e89d4e63c6ccb9573b755bd17793e33a", "patch": "@@ -266,6 +266,8 @@ fi\n AC_LANG_POP(C)\n AC_MSG_RESULT($ac_exception_model_name)\n \n+gt_BITFIELD_TYPE_MATTERS\n+\n # ------\n # Output\n # ------"}, {"sha": "abb614540979b3ab5c731f0f84da1cbbf225c84d", "filename": "libobjc/encoding.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539280a8e89d4e63c6ccb9573b755bd17793e33a/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=539280a8e89d4e63c6ccb9573b755bd17793e33a", "patch": "@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* FIXME: This file contains functions that will abort the entire\n    program if they fail.  Is that really needed ?  */\n \n+#include \"config.h\"\n #include \"objc-private/common.h\"\n #include \"objc-private/error.h\"\n #include \"tconfig.h\"\n@@ -1167,7 +1168,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n   /* Record must have at least as much alignment as any field.\n      Otherwise, the alignment of the field within the record\n      is meaningless.  */\n-#if !PCC_BITFIELD_TYPE_MATTERS\n+#ifndef HAVE_BITFIELD_TYPE_MATTERS\n   layout->record_align = MAX (layout->record_align, desired_align);\n #else\t/* PCC_BITFIELD_TYPE_MATTERS */\n   if (*type == _C_BFLD)"}]}