{"sha": "86c8d1f646594d65f8d78714e59c948aefe918ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZjOGQxZjY0NjU5NGQ2NWY4ZDc4NzE0ZTU5Yzk0OGFlZmU5MThlZg==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-03-29T10:26:25Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-03-29T10:26:25Z"}, "message": "re PR tree-optimization/48290 (FAIL: gcc.dg/vect/pr38529.c, ICE in vect_get_vec_def_for_operand, at tree-vect-stmts.c:1072)\n\n\n        PR tree-optimization/48290\n        * tree-vect-loop.c (vect_analyze_loop_operations): In outer loop\n        vectorization, check that relevant phis in the basic block after \n        the inner loop are really inner loop's exit phis.\n\nFrom-SVN: r171657", "tree": {"sha": "1a3d3096c8b418278ba50d4e654e2337694da920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a3d3096c8b418278ba50d4e654e2337694da920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86c8d1f646594d65f8d78714e59c948aefe918ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c8d1f646594d65f8d78714e59c948aefe918ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c8d1f646594d65f8d78714e59c948aefe918ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c8d1f646594d65f8d78714e59c948aefe918ef/comments", "author": null, "committer": null, "parents": [{"sha": "e8cf17e7e0267018019b71f24e979a355ae3a621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8cf17e7e0267018019b71f24e979a355ae3a621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8cf17e7e0267018019b71f24e979a355ae3a621"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "ff341cf16d2a6ec454bbac0e41522ba112bfb236", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c8d1f646594d65f8d78714e59c948aefe918ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c8d1f646594d65f8d78714e59c948aefe918ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86c8d1f646594d65f8d78714e59c948aefe918ef", "patch": "@@ -1,3 +1,10 @@\n+2011-03-29  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/48290\n+\t* tree-vect-loop.c (vect_analyze_loop_operations): In outer loop\n+\tvectorization, check that relevant phis in the basic block after\n+\tthe inner loop are really inner loop's exit phis.\n+\n 2011-03-29  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR debug/48190"}, {"sha": "5fecf2a052497a17121eb719cd81979e26632847", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c8d1f646594d65f8d78714e59c948aefe918ef/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c8d1f646594d65f8d78714e59c948aefe918ef/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=86c8d1f646594d65f8d78714e59c948aefe918ef", "patch": "@@ -1184,11 +1184,11 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n               print_gimple_stmt (vect_dump, phi, 0, TDF_SLIM);\n             }\n \n+          /* Inner-loop loop-closed exit phi in outer-loop vectorization\n+             (i.e., a phi in the tail of the outer-loop).  */\n           if (! is_loop_header_bb_p (bb))\n             {\n-              /* inner-loop loop-closed exit phi in outer-loop vectorization\n-                 (i.e. a phi in the tail of the outer-loop).\n-                 FORNOW: we currently don't support the case that these phis\n+              /* FORNOW: we currently don't support the case that these phis\n                  are not used in the outerloop (unless it is double reduction,\n                  i.e., this phi is vect_reduction_def), cause this case\n                  requires to actually do something here.  */\n@@ -1202,6 +1202,32 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n                              \"Unsupported loop-closed phi in outer-loop.\");\n                   return false;\n                 }\n+\n+              /* If PHI is used in the outer loop, we check that its operand\n+                 is defined in the inner loop.  */\n+              if (STMT_VINFO_RELEVANT_P (stmt_info))\n+                {\n+                  tree phi_op;\n+                  gimple op_def_stmt;\n+\n+                  if (gimple_phi_num_args (phi) != 1)\n+                    return false;\n+\n+                  phi_op = PHI_ARG_DEF (phi, 0);\n+                  if (TREE_CODE (phi_op) != SSA_NAME)\n+                    return false;\n+\n+                  op_def_stmt = SSA_NAME_DEF_STMT (phi_op);\n+                  if (!op_def_stmt || !vinfo_for_stmt (op_def_stmt))\n+                    return false;\n+\n+                  if (STMT_VINFO_RELEVANT (vinfo_for_stmt (op_def_stmt))\n+                        != vect_used_in_outer\n+                      && STMT_VINFO_RELEVANT (vinfo_for_stmt (op_def_stmt))\n+                           != vect_used_in_outer_by_reduction)\n+                    return false;\n+                }\n+\n               continue;\n             }\n "}]}