{"sha": "99206ca90b8e53db1461366ac4ee4116a2673056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkyMDZjYTkwYjhlNTNkYjE0NjEzNjZhYzRlZTQxMTZhMjY3MzA1Ng==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2013-10-02T19:18:17Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2013-10-02T19:18:17Z"}, "message": "This patch fixes an issue where expansion of an ORIF expression arbitrarily...\n\nThis patch fixes an issue where expansion of an ORIF expression arbitrarily\napplied the probability that the entire condition was true to just the \nfirst condition. When the ORIF true probability was 100%, this resulted\nin the second condition's jump being given a count of zero (since the\nfirst condition's jump got 100% of the count), leading to incorrect function\nsplitting when it had a non-zero probability in reality. Since there\ncurrently isn't better information about which condition resulted\nin the ORIF being true, apply a 50-50 probability that it is the first\nvs. second condition that caused the entire expression to be true,\nso that neither condition's true label ends up as a 0-count bb.\n\nAn equivalent fix is made for ANDIF expansion.\n\n2013-10-02  Teresa Johnson  <tejohnson@google.com>\n\n\t* dojump.c (do_jump_1): Divide probability between\n\tboth conditions of a TRUTH_ORIF_EXPR.\n\nFrom-SVN: r203126", "tree": {"sha": "948779eafcef5cd8b6843ba98bb5ae65bea1435b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948779eafcef5cd8b6843ba98bb5ae65bea1435b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99206ca90b8e53db1461366ac4ee4116a2673056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99206ca90b8e53db1461366ac4ee4116a2673056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99206ca90b8e53db1461366ac4ee4116a2673056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99206ca90b8e53db1461366ac4ee4116a2673056/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56e82b14747c3d14a9e2ffec324aa338f0693020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e82b14747c3d14a9e2ffec324aa338f0693020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e82b14747c3d14a9e2ffec324aa338f0693020"}], "stats": {"total": 87, "additions": 63, "deletions": 24}, "files": [{"sha": "be3dc782309b52369bfdbfeaadabe383a8caae3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99206ca90b8e53db1461366ac4ee4116a2673056/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99206ca90b8e53db1461366ac4ee4116a2673056/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99206ca90b8e53db1461366ac4ee4116a2673056", "patch": "@@ -1,3 +1,8 @@\n+2013-10-02  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* dojump.c (do_jump_1): Divide probability between\n+\tboth conditions of a TRUTH_ANDIF_EXPR/TRUTH_ORIF_EXPR.\n+\n 2013-10-02  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in (DRIVER_DEFINES): Use $(if), not $(and)."}, {"sha": "ee12d761eee0833148f07b95d31656fee3ef6e92", "filename": "gcc/dojump.c", "status": "modified", "additions": 58, "deletions": 24, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99206ca90b8e53db1461366ac4ee4116a2673056/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99206ca90b8e53db1461366ac4ee4116a2673056/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=99206ca90b8e53db1461366ac4ee4116a2673056", "patch": "@@ -311,32 +311,66 @@ do_jump_1 (enum tree_code code, tree op0, tree op1,\n       break;\n \n     case TRUTH_ANDIF_EXPR:\n-      if (if_false_label == NULL_RTX)\n-        {\n-\t  drop_through_label = gen_label_rtx ();\n-\t  do_jump (op0, drop_through_label, NULL_RTX, prob);\n-\t  do_jump (op1, NULL_RTX, if_true_label, prob);\n-\t}\n-      else\n-\t{\n-\t  do_jump (op0, if_false_label, NULL_RTX, prob);\n-\t  do_jump (op1, if_false_label, if_true_label, prob);\n-\t}\n-      break;\n+      {\n+        /* Spread the probability that the expression is false evenly between\n+           the two conditions. So the first condition is false half the total\n+           probability of being false. The second condition is false the other\n+           half of the total probability of being false, so its jump has a false\n+           probability of half the total, relative to the probability we\n+           reached it (i.e. the first condition was true).  */\n+        int op0_prob = -1;\n+        int op1_prob = -1;\n+        if (prob != -1)\n+          {\n+            int false_prob = inv (prob);\n+            int op0_false_prob = false_prob / 2;\n+            int op1_false_prob = GCOV_COMPUTE_SCALE ((false_prob / 2),\n+                                                     inv (op0_false_prob));\n+            /* Get the probability that each jump below is true.  */\n+            op0_prob = inv (op0_false_prob);\n+            op1_prob = inv (op1_false_prob);\n+          }\n+        if (if_false_label == NULL_RTX)\n+          {\n+            drop_through_label = gen_label_rtx ();\n+            do_jump (op0, drop_through_label, NULL_RTX, op0_prob);\n+            do_jump (op1, NULL_RTX, if_true_label, op1_prob);\n+          }\n+        else\n+          {\n+            do_jump (op0, if_false_label, NULL_RTX, op0_prob);\n+            do_jump (op1, if_false_label, if_true_label, op1_prob);\n+          }\n+        break;\n+      }\n \n     case TRUTH_ORIF_EXPR:\n-      if (if_true_label == NULL_RTX)\n-\t{\n-          drop_through_label = gen_label_rtx ();\n-\t  do_jump (op0, NULL_RTX, drop_through_label, prob);\n-\t  do_jump (op1, if_false_label, NULL_RTX, prob);\n-\t}\n-      else\n-\t{\n-\t  do_jump (op0, NULL_RTX, if_true_label, prob);\n-\t  do_jump (op1, if_false_label, if_true_label, prob);\n-\t}\n-      break;\n+      {\n+        /* Spread the probability evenly between the two conditions. So\n+           the first condition has half the total probability of being true.\n+           The second condition has the other half of the total probability,\n+           so its jump has a probability of half the total, relative to\n+           the probability we reached it (i.e. the first condition was false).  */\n+        int op0_prob = -1;\n+        int op1_prob = -1;\n+        if (prob != -1)\n+          {\n+            op0_prob = prob / 2;\n+            op1_prob = GCOV_COMPUTE_SCALE ((prob / 2), inv (op0_prob));\n+          }\n+        if (if_true_label == NULL_RTX)\n+          {\n+            drop_through_label = gen_label_rtx ();\n+            do_jump (op0, NULL_RTX, drop_through_label, op0_prob);\n+            do_jump (op1, if_false_label, NULL_RTX, op1_prob);\n+          }\n+        else\n+          {\n+            do_jump (op0, NULL_RTX, if_true_label, op0_prob);\n+            do_jump (op1, if_false_label, if_true_label, op1_prob);\n+          }\n+        break;\n+      }\n \n     default:\n       gcc_unreachable ();"}]}