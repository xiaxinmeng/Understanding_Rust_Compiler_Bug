{"sha": "a5bfe14186a3eb1665baa0264801655cab77ce0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViZmUxNDE4NmEzZWIxNjY1YmFhMDI2NDgwMTY1NWNhYjc3Y2UwYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-13T20:27:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-13T20:27:05Z"}, "message": "re PR tree-optimization/17436 (Huge memory use regression)\n\n        PR 17436\n        * tree.h (TYPE_CONTAINS_PLACEHOLDER_INTERNAL): New.\n        (tree_type): Replace spare with contains_placeholder_bits.\n        (type_contains_placeholder_1): Rename from type_contains_placeholder_p,\n        make static.  Remove seen_types list.\n        (type_contains_placeholder_p): New.\n\nFrom-SVN: r87447", "tree": {"sha": "65253905bbbe5f77a01c8fc77ee164b1ef236d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65253905bbbe5f77a01c8fc77ee164b1ef236d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5bfe14186a3eb1665baa0264801655cab77ce0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bfe14186a3eb1665baa0264801655cab77ce0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5bfe14186a3eb1665baa0264801655cab77ce0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bfe14186a3eb1665baa0264801655cab77ce0c/comments", "author": null, "committer": null, "parents": [{"sha": "1823bf53abf47bcd2417da90df1cd4ba4c2bf094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1823bf53abf47bcd2417da90df1cd4ba4c2bf094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1823bf53abf47bcd2417da90df1cd4ba4c2bf094"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "fa5832f1038f38ec36c929b1c6ef9fa8f48690e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bfe14186a3eb1665baa0264801655cab77ce0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bfe14186a3eb1665baa0264801655cab77ce0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5bfe14186a3eb1665baa0264801655cab77ce0c", "patch": "@@ -1,3 +1,12 @@\n+2004-09-13  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 17436\n+\t* tree.h (TYPE_CONTAINS_PLACEHOLDER_INTERNAL): New.\n+\t(tree_type): Replace spare with contains_placeholder_bits.\n+\t(type_contains_placeholder_1): Rename from type_contains_placeholder_p,\n+\tmake static.  Remove seen_types list.\n+\t(type_contains_placeholder_p): New.\n+\n 2004-09-13  James E Wilson  <wilson@specifixinc.com>\n \n \t* config/mips/mips.c (CODE_FOR_mips_sqrt_ps): New."}, {"sha": "abfd169426f11e72e4ca7f5895b34faffe685ef7", "filename": "gcc/tree.c", "status": "modified", "additions": 32, "deletions": 44, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bfe14186a3eb1665baa0264801655cab77ce0c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bfe14186a3eb1665baa0264801655cab77ce0c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a5bfe14186a3eb1665baa0264801655cab77ce0c", "patch": "@@ -1704,20 +1704,20 @@ contains_placeholder_p (tree exp)\n   return 0;\n }\n \n-/* Return 1 if any part of the computation of TYPE involves a PLACEHOLDER_EXPR.\n-   This includes size, bounds, qualifiers (for QUAL_UNION_TYPE) and field\n-   positions.  */\n+/* Return true if any part of the computation of TYPE involves a\n+   PLACEHOLDER_EXPR.  This includes size, bounds, qualifiers\n+   (for QUAL_UNION_TYPE) and field positions.  */\n \n-bool\n-type_contains_placeholder_p (tree type)\n+static bool\n+type_contains_placeholder_1 (tree type)\n {\n   /* If the size contains a placeholder or the parent type (component type in\n      the case of arrays) type involves a placeholder, this type does.  */\n   if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE (type))\n       || CONTAINS_PLACEHOLDER_P (TYPE_SIZE_UNIT (type))\n       || (TREE_TYPE (type) != 0\n \t  && type_contains_placeholder_p (TREE_TYPE (type))))\n-    return 1;\n+    return true;\n \n   /* Now do type-specific checks.  Note that the last part of the check above\n      greatly limits what we have to do below.  */\n@@ -1734,7 +1734,7 @@ type_contains_placeholder_p (tree type)\n     case METHOD_TYPE:\n     case FILE_TYPE:\n     case FUNCTION_TYPE:\n-      return 0;\n+      return false;\n \n     case INTEGER_TYPE:\n     case REAL_TYPE:\n@@ -1753,58 +1753,46 @@ type_contains_placeholder_p (tree type)\n     case UNION_TYPE:\n     case QUAL_UNION_TYPE:\n       {\n-\tstatic tree seen_types = 0;\n \ttree field;\n-\tbool ret = 0;\n-\n-\t/* We have to be careful here that we don't end up in infinite\n-\t   recursions due to a field of a type being a pointer to that type\n-\t   or to a mutually-recursive type.  So we store a list of record\n-\t   types that we've seen and see if this type is in them.  To save\n-\t   memory, we don't use a list for just one type.  Here we check\n-\t   whether we've seen this type before and store it if not.  */\n-\tif (seen_types == 0)\n-\t  seen_types = type;\n-\telse if (TREE_CODE (seen_types) != TREE_LIST)\n-\t  {\n-\t    if (seen_types == type)\n-\t      return 0;\n-\n-\t    seen_types = tree_cons (NULL_TREE, type,\n-\t\t\t\t    build_tree_list (NULL_TREE, seen_types));\n-\t  }\n-\telse\n-\t  {\n-\t    if (value_member (type, seen_types) != 0)\n-\t      return 0;\n-\n-\t    seen_types = tree_cons (NULL_TREE, type, seen_types);\n-\t  }\n \n \tfor (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n \t  if (TREE_CODE (field) == FIELD_DECL\n \t      && (CONTAINS_PLACEHOLDER_P (DECL_FIELD_OFFSET (field))\n \t\t  || (TREE_CODE (type) == QUAL_UNION_TYPE\n \t\t      && CONTAINS_PLACEHOLDER_P (DECL_QUALIFIER (field)))\n \t\t  || type_contains_placeholder_p (TREE_TYPE (field))))\n-\t    {\n-\t      ret = true;\n-\t      break;\n-\t    }\n+\t    return true;\n \n-\t/* Now remove us from seen_types and return the result.  */\n-\tif (seen_types == type)\n-\t  seen_types = 0;\n-\telse\n-\t  seen_types = TREE_CHAIN (seen_types);\n-\n-\treturn ret;\n+\treturn false;\n       }\n \n     default:\n       gcc_unreachable ();\n     }\n }\n+\n+bool\n+type_contains_placeholder_p (tree type)\n+{\n+  bool result;\n+\n+  /* If the contains_placeholder_bits field has been initialized,\n+     then we know the answer.  */\n+  if (TYPE_CONTAINS_PLACEHOLDER_INTERNAL (type) > 0)\n+    return TYPE_CONTAINS_PLACEHOLDER_INTERNAL (type) - 1;\n+\n+  /* Indicate that we've seen this type node, and the answer is false.\n+     This is what we want to return if we run into recursion via fields.  */\n+  TYPE_CONTAINS_PLACEHOLDER_INTERNAL (type) = 1;\n+\n+  /* Compute the real value.  */\n+  result = type_contains_placeholder_1 (type);\n+\n+  /* Store the real value.  */\n+  TYPE_CONTAINS_PLACEHOLDER_INTERNAL (type) = result + 1;\n+\n+  return result;\n+}\n \f\n /* Given a tree EXP, a FIELD_DECL F, and a replacement value R,\n    return a tree with all occurrences of references to F in a"}, {"sha": "015f8d3fabc67e94a9557a1775be85d15239be8b", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bfe14186a3eb1665baa0264801655cab77ce0c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bfe14186a3eb1665baa0264801655cab77ce0c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a5bfe14186a3eb1665baa0264801655cab77ce0c", "patch": "@@ -1572,6 +1572,12 @@ struct tree_block GTY(())\n    compact a way as possible.  */\n #define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->type.packed_flag)\n \n+/* Used by type_contains_placeholder_p to avoid recomputation.\n+   Values are: 0 (unknown), 1 (false), 2 (true).  Never access\n+   this field directly.  */\n+#define TYPE_CONTAINS_PLACEHOLDER_INTERNAL(NODE) \\\n+  (TYPE_CHECK (NODE)->type.contains_placeholder_bits)\n+\n struct die_struct;\n \n struct tree_type GTY(())\n@@ -1592,7 +1598,7 @@ struct tree_type GTY(())\n   unsigned transparent_union_flag : 1;\n   unsigned packed_flag : 1;\n   unsigned restrict_flag : 1;\n-  unsigned spare : 2;\n+  unsigned contains_placeholder_bits : 2;\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}]}