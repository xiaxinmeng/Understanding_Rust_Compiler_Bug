{"sha": "25d744bb6cf7e3b9a91930caff9f88814f2c36ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVkNzQ0YmI2Y2Y3ZTNiOWE5MTkzMGNhZmY5Zjg4ODE0ZjJjMzZjYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-10T10:20:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-02T08:58:06Z"}, "message": "[Ada] Do not set the bounds of integer types to be universal\n\n2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Signed_Integer_Type_Declaration): Change the type\n\tof the bounds from Universal_Integer to Implicit_Base.", "tree": {"sha": "9be7aa7ec3843857450d65e501957884c78acc6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be7aa7ec3843857450d65e501957884c78acc6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25d744bb6cf7e3b9a91930caff9f88814f2c36ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d744bb6cf7e3b9a91930caff9f88814f2c36ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d744bb6cf7e3b9a91930caff9f88814f2c36ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d744bb6cf7e3b9a91930caff9f88814f2c36ca/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b13d324fa2d83538e2c733906ced7b000209ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b13d324fa2d83538e2c733906ced7b000209ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b13d324fa2d83538e2c733906ced7b000209ac"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "e792072b45f4a5cd322483e5a376aac7d945b096", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d744bb6cf7e3b9a91930caff9f88814f2c36ca/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d744bb6cf7e3b9a91930caff9f88814f2c36ca/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=25d744bb6cf7e3b9a91930caff9f88814f2c36ca", "patch": "@@ -22550,18 +22550,10 @@ package body Sem_Ch3 is\n               (\"non-static expression used for integer type bound!\", Expr);\n             Errs := True;\n \n-         --  The bounds are folded into literals, and we set their type to be\n-         --  universal, to avoid typing difficulties: we cannot set the type\n-         --  of the literal to the new type, because this would be a forward\n-         --  reference for the back end,  and if the original type is user-\n-         --  defined this can lead to spurious semantic errors (e.g. 2928-003).\n+         --  Otherwise the bounds are folded into literals\n \n-         else\n-            if Is_Entity_Name (Expr) then\n-               Fold_Uint (Expr, Expr_Value (Expr), True);\n-            end if;\n-\n-            Set_Etype (Expr, Universal_Integer);\n+         elsif Is_Entity_Name (Expr) then\n+            Fold_Uint (Expr, Expr_Value (Expr), True);\n          end if;\n       end Check_Bound;\n \n@@ -22583,6 +22575,7 @@ package body Sem_Ch3 is\n       if Hi = Error or else Lo = Error then\n          Base_Typ := Any_Integer;\n          Set_Error_Posted (T, True);\n+         Errs := True;\n \n       --  Here both bounds are OK expressions\n \n@@ -22627,6 +22620,17 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n+      --  Set the type of the bounds to the implicit base: we cannot set it to\n+      --  the new type, because this would be a forward reference for the code\n+      --  generator and, if the original type is user-defined, this could even\n+      --  lead to spurious semantic errors. Furthermore we do not set it to be\n+      --  universal, because this could make it much larger than needed here.\n+\n+      if not Errs then\n+         Set_Etype (Lo, Implicit_Base);\n+         Set_Etype (Hi, Implicit_Base);\n+      end if;\n+\n       --  Complete both implicit base and declared first subtype entities. The\n       --  inheritance of the rep item chain ensures that SPARK-related pragmas\n       --  are not clobbered when the signed integer type acts as a full view of"}]}