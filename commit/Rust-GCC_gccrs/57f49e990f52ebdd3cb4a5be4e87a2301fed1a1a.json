{"sha": "57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdmNDllOTkwZjUyZWJkZDNjYjRhNWJlNGU4N2EyMzAxZmVkMWExYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-07-07T18:43:55Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-07-07T18:43:55Z"}, "message": "rs6000.c (rs6000_get_function_versions_dispatcher): Add warning if GCC was not configured to link against a GLIBC that exports the...\n\n[gcc]\n2017-07-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_get_function_versions_dispatcher):\n\tAdd warning if GCC was not configured to link against a GLIBC that\n\texports the hardware capability bits.\n\t(make_resolver_func): Make resolver function private and not a\n\tCOMDAT function.  Create the name with clone_function_name instead\n\tof make_unique_name.\n\n[gcc/testsuite]\n2017-07-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/clone1.c: Add check to make sure the\n\t__builtin_cpu_supports function is fully supported.\n\t* gcc.target/powerpc/clone2.c: New runtime test for\n\ttarget_clones.\n\nFrom-SVN: r250055", "tree": {"sha": "0571c2b8c4e497a91406f655fe819736cfbbe596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0571c2b8c4e497a91406f655fe819736cfbbe596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/comments", "author": null, "committer": null, "parents": [{"sha": "6a69355ccf7c05c452ff1bea1fac1508d44bec5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a69355ccf7c05c452ff1bea1fac1508d44bec5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a69355ccf7c05c452ff1bea1fac1508d44bec5c"}], "stats": {"total": 81, "additions": 56, "deletions": 25}, "files": [{"sha": "dbb51913ecfec52f3563a3b4146384e6bb071b89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "patch": "@@ -1,5 +1,12 @@\n 2017-07-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n+\t* config/rs6000/rs6000.c (rs6000_get_function_versions_dispatcher):\n+\tAdd warning if GCC was not configured to link against a GLIBC that\n+\texports the hardware capability bits.\n+\t(make_resolver_func): Make resolver function private and not a\n+\tCOMDAT function.  Create the name with clone_function_name instead\n+\tof make_unique_name.\n+\n \tPR target/81348\n \t* config/rs6000/rs6000.md (HI sign_extend splitter): Use the\n \tcorrect operand in doing the split."}, {"sha": "10c552152a4503636ca4fc1f6801c07a7357158e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "patch": "@@ -37283,6 +37283,12 @@ rs6000_get_function_versions_dispatcher (void *decl)\n \n   default_node = default_version_info->this_node;\n \n+#ifndef TARGET_LIBC_PROVIDES_HWCAP_IN_TCB\n+  warning_at (DECL_SOURCE_LOCATION (default_node->decl), 0,\n+\t      \"target_clone needs GLIBC (2.23 and newer) to export hardware \"\n+\t      \"capability bits\");\n+#endif\n+\n   if (targetm.has_ifunc_p ())\n     {\n       struct cgraph_function_version_info *it_v = NULL;\n@@ -37328,29 +37334,19 @@ make_resolver_func (const tree default_decl,\n \t\t    const tree dispatch_decl,\n \t\t    basic_block *empty_bb)\n {\n-  /* IFUNC's have to be globally visible.  So, if the default_decl is\n-     not, then the name of the IFUNC should be made unique.  */\n-  bool is_uniq = (TREE_PUBLIC (default_decl) == 0);\n-\n-  /* Append the filename to the resolver function if the versions are\n-     not externally visible.  This is because the resolver function has\n-     to be externally visible for the loader to find it.  So, appending\n-     the filename will prevent conflicts with a resolver function from\n-     another module which is based on the same version name.  */\n-  char *resolver_name = make_unique_name (default_decl, \"resolver\", is_uniq);\n-\n-  /* The resolver function should return a (void *).  */\n+  /* Make the resolver function static.  The resolver function returns\n+     void *.  */\n+  tree decl_name = clone_function_name (default_decl, \"resolver\");\n+  const char *resolver_name = IDENTIFIER_POINTER (decl_name);\n   tree type = build_function_type_list (ptr_type_node, NULL_TREE);\n   tree decl = build_fn_decl (resolver_name, type);\n-  tree decl_name = get_identifier (resolver_name);\n   SET_DECL_ASSEMBLER_NAME (decl, decl_name);\n \n   DECL_NAME (decl) = decl_name;\n   TREE_USED (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_IGNORED_P (decl) = 0;\n-  /* IFUNC resolvers have to be externally visible.  */\n-  TREE_PUBLIC (decl) = 1;\n+  TREE_PUBLIC (decl) = 0;\n   DECL_UNINLINABLE (decl) = 1;\n \n   /* Resolver is not external, body is generated.  */\n@@ -37361,15 +37357,6 @@ make_resolver_func (const tree default_decl,\n   DECL_INITIAL (decl) = make_node (BLOCK);\n   DECL_STATIC_CONSTRUCTOR (decl) = 0;\n \n-  if (DECL_COMDAT_GROUP (default_decl) || TREE_PUBLIC (default_decl))\n-    {\n-      /* In this case, each translation unit with a call to this\n-\t versioned function will put out a resolver.  Ensure it\n-\t is comdat to keep just one copy.  */\n-      DECL_COMDAT (decl) = 1;\n-      make_decl_one_only (decl, DECL_ASSEMBLER_NAME (decl));\n-    }\n-\n   /* Build result decl and add to function_decl.  */\n   tree t = build_decl (UNKNOWN_LOCATION, RESULT_DECL, NULL_TREE, ptr_type_node);\n   DECL_ARTIFICIAL (t) = 1;\n@@ -37391,7 +37378,7 @@ make_resolver_func (const tree default_decl,\n     = make_attribute (\"ifunc\", resolver_name, DECL_ATTRIBUTES (dispatch_decl));\n \n   cgraph_node::create_same_body_alias (dispatch_decl, decl);\n-  XDELETEVEC (resolver_name);\n+\n   return decl;\n }\n "}, {"sha": "b2e43ef08a0e22309dc43ee8d22325d4995d2faa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "patch": "@@ -1,5 +1,10 @@\n 2017-07-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n+\t* gcc.target/powerpc/clone1.c: Add check to make sure the\n+\t__builtin_cpu_supports function is fully supported.\n+\t* gcc.target/powerpc/clone2.c: New runtime test for\n+\ttarget_clones.\n+\n \tPR target/81348\n \t* gcc.target/powerpc/pr81348.c: New test.\n "}, {"sha": "eb13a7b2dbd42c9294cde1b13f51c1523f3c2442", "filename": "gcc/testsuite/gcc.target/powerpc/clone1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fclone1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fclone1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fclone1.c?ref=57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "patch": "@@ -2,6 +2,7 @@\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-options \"-mcpu=power8 -O2\" } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-require-effective-target ppc_cpu_supports_hw } */\n \n /* Power9 (aka, ISA 3.0) has a MODSD instruction to do modulus, while Power8\n    (aka, ISA 2.07) has to do modulus with divide and multiply.  Make sure"}, {"sha": "ecad5eb8e2938b5084f165ee6456fff00f74c058", "filename": "gcc/testsuite/gcc.target/powerpc/clone2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fclone2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fclone2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fclone2.c?ref=57f49e990f52ebdd3cb4a5be4e87a2301fed1a1a", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { powerpc*-*-linux* } } } */\n+/* { dg-options \"-mvsx -O2\" } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-require-effective-target ppc_cpu_supports_hw } */\n+\n+#include <stddef.h>\n+#include <stdlib.h>\n+\n+/* Power9 (aka, ISA 3.0) has a MODSD instruction to do modulus, while Power8\n+   (aka, ISA 2.07) has to do modulus with divide and multiply.  Make sure that\n+   the basic support for target_clones runs.\n+\n+   Restrict ourselves to Linux, since IFUNC might not be supported in other\n+   operating systems.  */\n+\n+__attribute__((__target_clones__(\"cpu=power9,default\")))\n+long mod_func (long a, long b)\n+{\n+  return a % b;\n+}\n+\n+#define X 53L\n+#define Y 7L\n+int\n+main (void)\n+{\n+  if (mod_func (X, Y) != (X % Y))\n+    abort ();\n+\n+  return 0;\n+}"}]}