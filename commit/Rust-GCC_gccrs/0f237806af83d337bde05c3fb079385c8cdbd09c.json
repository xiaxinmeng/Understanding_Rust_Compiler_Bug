{"sha": "0f237806af83d337bde05c3fb079385c8cdbd09c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyMzc4MDZhZjgzZDMzN2JkZTA1YzNmYjA3OTM4NWM4Y2RiZDA5Yw==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-10-24T17:04:17Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-10-24T17:04:17Z"}, "message": "pdp11.md: Change length attribute to be in bytes.\n\n* config/pdp11/pdp11.md: Change length attribute to be in bytes.\n* config/pdp11/pdp11.c (output_jump): Ditto.\n\nFrom-SVN: r165902", "tree": {"sha": "d3b2cf169641ddac9cf8e0e3520df6b888484da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b2cf169641ddac9cf8e0e3520df6b888484da4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f237806af83d337bde05c3fb079385c8cdbd09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f237806af83d337bde05c3fb079385c8cdbd09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f237806af83d337bde05c3fb079385c8cdbd09c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f237806af83d337bde05c3fb079385c8cdbd09c/comments", "author": null, "committer": null, "parents": [{"sha": "a5cd07463dac757a2899ed43e28494ce68c5b2f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cd07463dac757a2899ed43e28494ce68c5b2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cd07463dac757a2899ed43e28494ce68c5b2f6"}], "stats": {"total": 204, "additions": 111, "deletions": 93}, "files": [{"sha": "5644df4d527b42382267df2686aa03a981fe0395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f237806af83d337bde05c3fb079385c8cdbd09c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f237806af83d337bde05c3fb079385c8cdbd09c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f237806af83d337bde05c3fb079385c8cdbd09c", "patch": "@@ -1,3 +1,8 @@\n+2010-10-24  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11.md: Change length attribute to be in bytes.\n+\t* config/pdp11/pdp11.c (output_jump): Ditto.\n+\n 2010-10-24  Ian Lance Taylor  <iant@google.com>\n \n \t* config/i386/i386.c (ix86_va_start): Remove extraneous blank"}, {"sha": "b54d8406d13992ad67b91f556919d7a70d4db49e", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f237806af83d337bde05c3fb079385c8cdbd09c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f237806af83d337bde05c3fb079385c8cdbd09c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=0f237806af83d337bde05c3fb079385c8cdbd09c", "patch": "@@ -1222,13 +1222,13 @@ output_jump (enum rtx_code code, int inv, int length)\n \t\n     switch (length)\n     {\n-      case 1:\n+      case 2:\n \t\n \tsprintf(buf, \"%s %%l1\", inv ? neg : pos);\n \t\n \treturn buf;\n \t\n-      case 3:\n+      case 6:\n \t\n \tsprintf(buf, \"%s JMP_%d\\n\\tjmp %%l1\\nJMP_%d:\", inv ? pos : neg, x, x);\n \t"}, {"sha": "fb863c0349c1c4b12bebdb6d8f8501c0efd3b729", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 104, "deletions": 91, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f237806af83d337bde05c3fb079385c8cdbd09c/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f237806af83d337bde05c3fb079385c8cdbd09c/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=0f237806af83d337bde05c3fb079385c8cdbd09c", "patch": "@@ -64,15 +64,16 @@\n ;; default is arith\n (define_attr \"type\" \"unknown,arith,fp\" (const_string \"arith\"))\n \n-;; length default is 1 word each\n-(define_attr \"length\" \"\" (const_int 1))\n+;; length default is 2 bytes each\n+(define_attr \"length\" \"\" (const_int 2))\n \n ;; a user's asm statement\n (define_asm_attributes\n   [(set_attr \"type\" \"unknown\")\n-; all bets are off how long it is - make it 256, forces long jumps \n-; whenever jumping around it !!!\n-   (set_attr \"length\" \"256\")])\n+; length for asm is the max length per statement.  That would be\n+; 5 words, for a floating point instruction with a literal constant\n+; argument.\n+   (set_attr \"length\" \"10\")])\n \n ;; define function units\n \n@@ -97,7 +98,7 @@\n   else\n     return \\\"{cmpd|cmpf} %0, %1\\;cfcc\\\";\n }\"\n-  [(set_attr \"length\" \"2,2,3,3,6\")]) \n+  [(set_attr \"length\" \"4,4,6,6,12\")]) \n \n (define_insn \"*cmphi\"\n   [(set (cc0)\n@@ -111,7 +112,7 @@\n    tst %0\n    cmp %0,%1\n    cmp %0,%1\"\n-  [(set_attr \"length\" \"1,1,2,2,2,3\")])\n+  [(set_attr \"length\" \"2,2,4,4,4,6\")])\n \n (define_insn \"*cmpqi\"\n   [(set (cc0)\n@@ -125,7 +126,7 @@\n    tstb %0\n    cmpb %0,%1\n    cmpb %0,%1\"\n-  [(set_attr \"length\" \"1,1,2,2,2,3\")])\n+  [(set_attr \"length\" \"2,2,4,4,4,6\")])\n \t\t\t   \n \n ;; sob instruction - we need an assembler which can make this instruction\n@@ -148,7 +149,7 @@\n  static int labelcount = 0;\n  static char buf[1000];\n \n- if (get_attr_length (insn) == 1)\n+ if (get_attr_length (insn) == 2)\n     return \\\"sob %0, %l1\\\";\n \n  /* emulate sob */\n@@ -170,8 +171,8 @@\n \t\t\t\t\t   (ge (minus (match_dup 0)\n \t\t\t\t\t\t       (pc))\n \t\t\t\t\t\t(const_int 0)))\n-\t\t\t\t      (const_int 4)\n-\t\t\t\t      (const_int 1)))])\n+\t\t\t\t      (const_int 8)\n+\t\t\t\t      (const_int 2)))])\n \n ;; These control RTL generation for conditional jump insns\n ;; and match them for register allocation.\n@@ -229,12 +230,12 @@\n   \"* return output_jump(GET_CODE (operands[0]), 0, get_attr_length(insn));\"\n   [(set (attr \"length\") (if_then_else (ior (le (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int -128))\n+\t\t\t\t\t       (const_int -256))\n \t\t\t\t\t   (ge (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int 128)))\n-\t\t\t\t      (const_int 3)\n-\t\t\t\t      (const_int 1)))])\n+\t\t\t\t\t       (const_int 256)))\n+\t\t\t\t      (const_int 6)\n+\t\t\t\t      (const_int 2)))])\n \n \n ;; These match inverted jump insns for register allocation.\n@@ -249,12 +250,12 @@\n   \"* return output_jump(GET_CODE (operands[0]), 1, get_attr_length(insn));\"\n   [(set (attr \"length\") (if_then_else (ior (le (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int -128))\n+\t\t\t\t\t       (const_int -256))\n \t\t\t\t\t   (ge (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int 128)))\n-\t\t\t\t      (const_int 3)\n-\t\t\t\t      (const_int 1)))])\n+\t\t\t\t\t       (const_int 256)))\n+\t\t\t\t      (const_int 6)\n+\t\t\t\t      (const_int 2)))])\n \f\n ;; Move instructions\n \n@@ -264,7 +265,7 @@\n   \"\"\n   \"* return output_move_quad (operands);\"\n ;; what's the mose expensive code - say twice movsi = 16\n-  [(set_attr \"length\" \"16,16,16\")])\n+  [(set_attr \"length\" \"32,32,32\")])\n \n (define_insn \"movsi\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,rm,m\")\n@@ -273,7 +274,7 @@\n   \"* return output_move_double (operands);\"\n ;; what's the most expensive code ? - I think 8!\n ;; we could split it up and make several sub-cases...\n-  [(set_attr \"length\" \"2,3,4,8,8\")])\n+  [(set_attr \"length\" \"4,6,8,16,16\")])\n \n (define_insn \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n@@ -286,11 +287,11 @@\n \n   return \\\"mov %1, %0\\\";\n }\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n (define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=g\")\n-\t(match_operand:QI 1 \"general_operand\" \"g\"))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n+\t(match_operand:QI 1 \"general_operand\" \"rRN,Qi,rRN,Qi\"))]\n   \"\"\n   \"*\n {\n@@ -299,7 +300,7 @@\n \n   return \\\"movb %1, %0\\\";\n }\"\n-  [(set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n ;; do we have to supply all these moves? e.g. to \n ;; NO_LOAD_FPU_REGs ? \n@@ -314,14 +315,14 @@\n      else \n        return output_move_quad (operands); \"\n ;; just a guess..\n-  [(set_attr \"length\" \"1,1,5,5,16\")])\n+  [(set_attr \"length\" \"2,2,10,10,32\")])\n \n (define_insn \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=g,r,g\")\n         (match_operand:SF 1 \"general_operand\" \"r,rmF,g\"))]\n   \"TARGET_FPU\"\n   \"* return output_move_double (operands);\"\n-  [(set_attr \"length\" \"8,8,8\")])\n+  [(set_attr \"length\" \"16,16,16\")])\n \n ;; maybe fiddle a bit with move_ratio, then \n ;; let constraints only accept a register ...\n@@ -362,7 +363,7 @@\n   \"(TARGET_BCOPY_BUILTIN)\"\n   \"* return output_block_move (operands);\"\n ;;; just a guess\n-  [(set_attr \"length\" \"40\")])\n+  [(set_attr \"length\" \"80\")])\n    \n \n \f\n@@ -385,7 +386,7 @@\n      else \n        return \\\"{stcdf|movfo} %1, %0\\\";\n   \"\n-  [(set_attr \"length\" \"3,1,2\")])\n+  [(set_attr \"length\" \"6,2,4\")])\n \n \n (define_expand \"truncsihi2\"\n@@ -400,11 +401,11 @@\n ;;- zero extension instructions\n \n (define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r\")\n-\t(zero_extend:HI (match_operand:QI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:HI 0 \"general_operand\" \"=rR,Q\")\n+\t(zero_extend:HI (match_operand:QI 1 \"general_operand\" \"0,0\")))]\n   \"\"\n   \"bic $0177400, %0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"4,6\")])\n \t\t\t \n (define_expand \"zero_extendhisi2\"\n   [(set (subreg:HI \n@@ -429,15 +430,15 @@\n    mov %1, -(sp)\\;{ldcfd|movof} (sp)+,%0\n    {ldcfd|movof} %1, %0\n    {ldcfd|movof} %1, %0\"\n-  [(set_attr \"length\" \"2,1,2\")])\n+  [(set_attr \"length\" \"4,2,4\")])\n \n ;; does movb sign extend in register-to-register move?\n (define_insn \"extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:HI (match_operand:QI 1 \"general_operand\" \"rR,Q\")))]\n   \"\"\n   \"movb %1, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -456,7 +457,7 @@\n     \n   return \\\"\\\";\n }\"\n-  [(set_attr \"length\" \"2,3\")])\n+  [(set_attr \"length\" \"4,6\")])\n \n ;; maybe we have to use define_expand to say that we have the instruction,\n ;; unconditionally, and then match dependent on CPU type:\n@@ -513,7 +514,7 @@\n       gcc_unreachable ();\n   }\n }\"\n-  [(set_attr \"length\" \"5,3,3\")])\n+  [(set_attr \"length\" \"10,6,6\")])\n \n \n (define_insn \"\"\n@@ -545,7 +546,7 @@\n \n   return \\\"\\\";\n }\"\n-  [(set_attr \"length\" \"6\")])\n+  [(set_attr \"length\" \"12\")])\n \n ;; make float to int and vice versa \n ;; using the cc_status.flag field we could probably cut down\n@@ -576,14 +577,14 @@\n      else \n        return \\\"setl\\;{ldcld|movif} %1, %0\\;seti\\\";\n   \"\n-  [(set_attr \"length\" \"5,3,4\")])\n+  [(set_attr \"length\" \"10,6,8\")])\n \n (define_insn \"floathidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=a,a\")\n \t(float:DF (match_operand:HI 1 \"general_operand\" \"rR,Qi\")))]\n   \"TARGET_FPU\"\n   \"{ldcid|movif} %1, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \t\n ;; cut float to int\n (define_insn \"fix_truncdfsi2\"\n@@ -605,14 +606,14 @@\n      else \n        return \\\"setl\\;{stcdl|movfi} %1, %0\\;seti\\\";\n   \"\n-  [(set_attr \"length\" \"5,3,4\")])\n+  [(set_attr \"length\" \"10,6,8\")])\n \n (define_insn \"fix_truncdfhi2\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,Q\")\n \t(fix:HI (fix:DF (match_operand:DF 1 \"register_operand\" \"a,a\"))))]\n   \"TARGET_FPU\"\n   \"{stcdi|movfi} %1, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n \f\n ;;- arithmetic instructions\n@@ -624,7 +625,7 @@\n \t\t (match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n   \"TARGET_FPU\"\n   \"{addd|addf} %2, %0\"\n-  [(set_attr \"length\" \"1,2,5\")])\n+  [(set_attr \"length\" \"2,4,10\")])\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r,r,o,o,r,r,r,o,o,o\")\n@@ -674,7 +675,7 @@\n \n   return \\\"\\\";\n }\"\n-  [(set_attr \"length\" \"3,5,6,8,3,1,5,5,3,8\")])\n+  [(set_attr \"length\" \"6,10,12,16,6,2,10,10,6,16\")])\n \n (define_insn \"addhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n@@ -693,7 +694,7 @@\n \n   return \\\"add %2, %0\\\";\n }\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n (define_insn \"addqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n@@ -712,7 +713,7 @@\n \n   return \\\"add %2, %0\\\";\n }\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n \f\n ;;- subtract instructions\n@@ -726,7 +727,7 @@\n \t\t  (match_operand:DF 2 \"general_operand\" \"fR,Q\")))]\n   \"TARGET_FPU\"\n   \"{subd|subf} %2, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r,r,o,o\")\n@@ -760,7 +761,7 @@\n   return \\\"\\\";\n }\"\n ;; offsettable memory addresses always are expensive!!!\n-  [(set_attr \"length\" \"3,5,6,8\")])\n+  [(set_attr \"length\" \"6,10,12,16\")])\n \n (define_insn \"subhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n@@ -773,7 +774,7 @@\n \n   return \\\"sub %2, %0\\\";\n }\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n (define_insn \"subqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n@@ -786,7 +787,7 @@\n \n   return \\\"sub %2, %0\\\";\n }\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n ;;;;- and instructions\n ;; Bit-and on the pdp (like on the VAX) is done with a clear-bits insn.\n@@ -837,23 +838,23 @@\n \n   return \\\"\\\";\n }\"\n-  [(set_attr \"length\" \"2,4,4,6,2,2,4,3,3,6\")])\n+  [(set_attr \"length\" \"4,8,8,12,4,4,8,6,6,12\")])\n \n (define_insn \"andhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n \t(and:HI (match_operand:HI 1 \"general_operand\" \"0,0,0,0\")\n \t\t(not:HI (match_operand:HI 2 \"general_operand\" \"rR,Qi,rR,Qi\"))))]\n   \"\"\n   \"bic %2, %0\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n (define_insn \"andqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n \t(and:QI (match_operand:QI 1 \"general_operand\" \"0,0,0,0\")\n \t\t(not:QI (match_operand:QI 2 \"general_operand\" \"rR,Qi,rR,Qi\"))))]\n   \"\"\n   \"bicb %2, %0\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n ;;- Bit set (inclusive or) instructions\n (define_insn \"iorsi3\"\n@@ -902,15 +903,15 @@\n \n   return \\\"\\\";\n }\"\n-  [(set_attr \"length\" \"2,4,4,6,2,2,4,3,3,6\")])\n+  [(set_attr \"length\" \"4,8,8,12,4,4,8,6,6,12\")])\n \n (define_insn \"iorhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n \t(ior:HI (match_operand:HI 1 \"general_operand\" \"%0,0,0,0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"rR,Qi,rR,Qi\")))]\n   \"\"\n   \"bis %2, %0\"\n-  [(set_attr \"length\" \"1,2,2,3\")])\n+  [(set_attr \"length\" \"2,4,4,6\")])\n \n (define_insn \"iorqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n@@ -945,15 +946,15 @@\n     }\n \n }\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_insn \"xorhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,Q\")\n \t(xor:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:HI 2 \"register_operand\" \"r,r\")))]\n   \"TARGET_40_PLUS\"\n   \"xor %2, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;;- one complement instructions\n \n@@ -962,7 +963,7 @@\n         (not:HI (match_operand:HI 1 \"general_operand\" \"0,0\")))]\n   \"\"\n   \"com %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"one_cmplqi2\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=rR,rR\")\n@@ -971,7 +972,7 @@\n   \"@\n   comb %0\n   movb %1, %0\\; comb %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;;- arithmetic shift instructions\n (define_insn \"ashlsi3\"\n@@ -980,7 +981,7 @@\n \t\t   (match_operand:HI 2 \"general_operand\" \"rR,Qi\")))]\n   \"TARGET_40_PLUS\"\n   \"ashc %2,%0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;; Arithmetic right shift on the pdp works by negating the shift count.\n (define_expand \"ashrsi3\"\n@@ -1002,7 +1003,7 @@\n \t\t   (const_int 1)))]\n   \"\"\n   \"asl %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;; and another possibility for asr is << -1\n ;; might cause problems since -1 can also be encoded as 65535!\n@@ -1015,7 +1016,7 @@\n \t\t   (const_int -1)))]\n   \"\"\n   \"asr %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;; lsr\n (define_insn \"\" \n@@ -1024,7 +1025,7 @@\n \t\t   (const_int 1)))]\n   \"\"\n   \"clc\\;ror %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1047,7 +1048,7 @@\n \n   return \\\"\\\";\n }\n-  [(set_attr \"length\" \"5\")])\n+  [(set_attr \"length\" \"10\")])\n \n ;; shift is by arbitrary count is expensive, \n ;; shift by one cheap - so let's do that, if\n@@ -1070,7 +1071,7 @@\n   return \\\"\\\";\n }\"\n ;; longest is 4\n-  [(set (attr \"length\") (const_int 4))])\n+  [(set (attr \"length\") (const_int 8))])\n \n ;; aslb\n (define_insn \"\" \n@@ -1091,8 +1092,8 @@\n }\"\n ;; set attribute length ( match_dup 2 & 7 ) *(1 or 2) !!!\n   [(set_attr_alternative \"length\" \n-                         [(const_int 7)\n-                          (const_int 14)])])\n+                         [(const_int 14)\n+                          (const_int 28)])])\n \n ;;; asr \n ;(define_insn \"\" \n@@ -1101,7 +1102,7 @@\n ;\t\t     (const_int 1)))]\n ;  \"\"\n ;  \"asr %0\"\n-;  [(set_attr \"length\" \"1,2\")])\n+;  [(set_attr \"length\" \"2,4\")])\n \n ;; asrb\n (define_insn \"\" \n@@ -1121,14 +1122,14 @@\n   return \\\"\\\";\n }\"\n   [(set_attr_alternative \"length\" \n-                         [(const_int 7)\n-                          (const_int 14)])])\n+                         [(const_int 14)\n+                          (const_int 28)])])\n \n ;; the following is invalid - too complex!!! - just say 14 !!!\n ;  [(set (attr \"length\") (plus (and (match_dup 2)\n-;                                   (const_int 7))\n+;                                   (const_int 14))\n ;                              (and (match_dup 2)\n-;                                   (const_int 7))))])\n+;                                   (const_int 14))))])\n \n \n \n@@ -1152,7 +1153,7 @@\n \n   return \\\"ash %2,%0\\\";\n }\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;; Arithmetic right shift on the pdp works by negating the shift count.\n (define_expand \"ashrhi3\"\n@@ -1180,7 +1181,7 @@\n \t(abs:DF (match_operand:DF 1 \"general_operand\" \"0,0\")))]\n   \"TARGET_FPU\"\n   \"{absd|absf} %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"abshi2\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=r,o\")\n@@ -1200,7 +1201,7 @@\n \n   return \\\"\\\";\n }\"\n-  [(set_attr \"length\" \"3,5\")])\n+  [(set_attr \"length\" \"6,10\")])\n \n \n ;; define expand abshi - is much better !!! - but\n@@ -1244,7 +1245,7 @@\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"0,0\")))]\n   \"TARGET_FPU\"\n   \"{negd|negf} %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1267,45 +1268,57 @@\n \n   return \\\"\\\";\n }\n-  [(set_attr \"length\" \"5\")])\n+  [(set_attr \"length\" \"10\")])\n \n (define_insn \"neghi2\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rR,Q\")\n \t(neg:HI (match_operand:HI 1 \"general_operand\" \"0,0\")))]\n   \"\"\n   \"neg %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n (define_insn \"negqi2\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=rR,Q\")\n \t(neg:QI (match_operand:QI 1 \"general_operand\" \"0,0\")))]\n   \"\"\n   \"negb %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n \n ;; Unconditional and other jump instructions\n (define_insn \"jump\"\n   [(set (pc)\n \t(label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-  \"jmp %l0\"\n-  [(set_attr \"length\" \"2\")])\n+  \"*\n+{\n+ if (get_attr_length (insn) == 2)\n+    return \\\"br %l0\\\";\n+ return \\\"jmp %l0\\\";\n+}\"\n+  [(set (attr \"length\") (if_then_else (ior (le (minus (match_dup 0)\n+\t\t\t\t\t\t      (pc))\n+\t\t\t\t\t       (const_int -256))\n+\t\t\t\t\t   (ge (minus (match_dup 0)\n+\t\t\t\t\t\t      (pc))\n+\t\t\t\t\t       (const_int 256)))\n+\t\t\t\t      (const_int 4)\n+\t\t\t\t      (const_int 2)))])\n \n (define_insn \"\"\n   [(set (pc)\n     (label_ref (match_operand 0 \"\" \"\")))\n    (clobber (const_int 1))]\n   \"\"\n   \"jmp %l0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_insn \"tablejump\"\n   [(set (pc) (match_operand:HI 0 \"general_operand\" \"rR,Q\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n   \"jmp %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;; indirect jump - let's be conservative!\n ;; allow only register_operand, even though we could also \n@@ -1326,7 +1339,7 @@\n   ;;- Don't use operand 1 for most machines.\n   \"\"\n   \"jsr pc, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;;- jump to subroutine\n (define_insn \"call_value\"\n@@ -1338,7 +1351,7 @@\n   ;;- Don't use operand 2 for most machines.\n   \"\"\n   \"jsr pc, %1\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;;- nop instruction\n (define_insn \"nop\"\n@@ -1355,7 +1368,7 @@\n \t\t (match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n   \"TARGET_FPU\"\n   \"{muld|mulf} %2, %0\"\n-  [(set_attr \"length\" \"1,2,5\")])\n+  [(set_attr \"length\" \"2,4,10\")])\n \n ;; 16 bit result multiply:\n ;; currently we multiply only into odd registers, so we don't use two \n@@ -1369,7 +1382,7 @@\n \t\t (match_operand:HI 2 \"general_operand\" \"rR,Qi\")))]\n   \"TARGET_40_PLUS\"\n   \"mul %2, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;; 32 bit result\n (define_expand \"mulhisi3\"\n@@ -1389,7 +1402,7 @@\n \t\t (match_operand:HI 2 \"general_operand\" \"rR,Qi\")))]\n   \"TARGET_40_PLUS\"\n   \"mul %2, %0\"\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"2,4\")])\n \n ;(define_insn \"mulhisi3\"\n ;  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\") ; even numbered!\n@@ -1398,7 +1411,7 @@\n ;\t\t (match_operand:HI 2 \"general_operand\" \"rR,Qi\")))]\n ;  \"TARGET_40_PLUS\"\n ;  \"mul %2, %0\"\n-;  [(set_attr \"length\" \"1,2\")])\n+;  [(set_attr \"length\" \"2,4\")])\n \n ;;- divide\n (define_insn \"divdf3\"\n@@ -1407,7 +1420,7 @@\n \t\t(match_operand:DF 2 \"general_operand\" \"fR,Q,F\")))]\n   \"TARGET_FPU\"\n   \"{divd|divf} %2, %0\"\n-  [(set_attr \"length\" \"1,2,5\")])\n+  [(set_attr \"length\" \"2,4,10\")])\n \n \t \n (define_expand \"divhi3\"\n@@ -1425,7 +1438,7 @@\n \t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"TARGET_40_PLUS\"\n   \"div %2,%0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_expand \"modhi3\"\n   [(set (subreg:HI (match_dup 1) 2)\n@@ -1442,7 +1455,7 @@\n \t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n   \"TARGET_40_PLUS\"\n   \"div %2,%0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"4\")])\n \n ;(define_expand \"divmodhi4\"\n ;  [(parallel [(set (subreg:HI (match_dup 1) 0)"}]}