{"sha": "0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1ZjhhNTk4ZGUxYzhkYzQ0ZmI1OWM2ZDBlYTBkY2Q1NTdmNjk1YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-25T02:25:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-25T02:25:52Z"}, "message": "Implement C++11 non-static data member initializers.\n\n\t* cp-tree.h (enum cpp_warn_str): Add CPP0X_NSDMI.\n\t* error.c (maybe_warn_cpp0x): Handle it.\n\t* call.c (convert_like_real) [ck_user]: Don't complain about\n\tusing an explicit constructor for direct-initialization.\n\t* class.c (check_field_decl): Fix ancient typo.\n\t(check_field_decls): NSDMIs make the default ctor non-trivial.\n\t* decl.c (cp_finish_decl): Record NSDMI.\n\t(grokdeclarator): Allow NSDMI.\n\t* decl2.c (grokfield): Allow NSDMI.  Correct LOOKUP flags.\n\t* init.c (perform_member_init): Use NSDMI.\n\t* method.c (walk_field_subobs): Check for NSDMI.\n\t* parser.c (cp_parser_member_declaration): Parse { } init.\n\t* semantics.c (register_constexpr_fundef): Don't talk about\n\ta return statement in a constexpr constructor.\n\t(cxx_eval_call_expression): Check DECL_INITIAL instead of\n\tDECL_SAVED_TREE.\n\nFrom-SVN: r179155", "tree": {"sha": "e73c67449ead609eb0ffca593088981be94efd13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e73c67449ead609eb0ffca593088981be94efd13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77236534b98427544513ef4c159cbabdb333efd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77236534b98427544513ef4c159cbabdb333efd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77236534b98427544513ef4c159cbabdb333efd0"}], "stats": {"total": 256, "additions": 212, "deletions": 44}, "files": [{"sha": "7881e1fef5e4b1622c85b82961b635a78ffa7f40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -1,3 +1,23 @@\n+2011-09-24  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement C++11 non-static data member initializers.\n+\t* cp-tree.h (enum cpp_warn_str): Add CPP0X_NSDMI.\n+\t* error.c (maybe_warn_cpp0x): Handle it.\n+\t* call.c (convert_like_real) [ck_user]: Don't complain about\n+\tusing an explicit constructor for direct-initialization.\n+\t* class.c (check_field_decl): Fix ancient typo.\n+\t(check_field_decls): NSDMIs make the default ctor non-trivial.\n+\t* decl.c (cp_finish_decl): Record NSDMI.\n+\t(grokdeclarator): Allow NSDMI.\n+\t* decl2.c (grokfield): Allow NSDMI.  Correct LOOKUP flags.\n+\t* init.c (perform_member_init): Use NSDMI.\n+\t* method.c (walk_field_subobs): Check for NSDMI.\n+\t* parser.c (cp_parser_member_declaration): Parse { } init.\n+\t* semantics.c (register_constexpr_fundef): Don't talk about\n+\ta return statement in a constexpr constructor.\n+\t(cxx_eval_call_expression): Check DECL_INITIAL instead of\n+\tDECL_SAVED_TREE.\n+\n 2011-09-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44267"}, {"sha": "6a7dfd398741b19c2ed626e4acf3838b23c21461", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -5648,6 +5648,9 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t/* When converting from an init list we consider explicit\n \t   constructors, but actually trying to call one is an error.  */\n \tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n+\t    /* Unless this is for direct-list-initialization.  */\n+\t    && !(BRACE_ENCLOSED_INITIALIZER_P (expr)\n+\t\t && CONSTRUCTOR_IS_DIRECT_INIT (expr))\n \t    /* Unless we're calling it for value-initialization from an\n \t       empty list, since that is handled separately in 8.5.4.  */\n \t    && cand->num_convs > 0)"}, {"sha": "a7d8218055facebf3b35cbad149337b11cafa55a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -2958,7 +2958,7 @@ check_field_decl (tree field,\n     {\n       /* `build_class_init_list' does not recognize\n \t non-FIELD_DECLs.  */\n-      if (TREE_CODE (t) == UNION_TYPE && any_default_members != 0)\n+      if (TREE_CODE (t) == UNION_TYPE && *any_default_members != 0)\n \terror (\"multiple fields in union %qT initialized\", t);\n       *any_default_members = 1;\n     }\n@@ -3256,6 +3256,14 @@ check_field_decls (tree t, tree *access_decls,\n \t\t \"  but does not override %<operator=(const %T&)%>\", t);\n     }\n \n+  /* Non-static data member initializers make the default constructor\n+     non-trivial.  */\n+  if (any_default_members)\n+    {\n+      TYPE_NEEDS_CONSTRUCTING (t) = true;\n+      TYPE_HAS_COMPLEX_DFLT (t) = true;\n+    }\n+\n   /* If any of the fields couldn't be packed, unset TYPE_PACKED.  */\n   if (cant_pack)\n     TYPE_PACKED (t) = 0;"}, {"sha": "2f93bbac8375c6200e2962398a0b93dde491a495", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -394,7 +394,9 @@ typedef enum cpp0x_warn_str\n   /* inline namespaces */\n   CPP0X_INLINE_NAMESPACES,\n   /* override controls, override/final */\n-  CPP0X_OVERRIDE_CONTROLS\n+  CPP0X_OVERRIDE_CONTROLS,\n+  /* non-static data member initializers */\n+  CPP0X_NSDMI\n } cpp0x_warn_str;\n   \n /* The various kinds of operation used by composite_pointer_type. */"}, {"sha": "661cc5ea113e984c9bc40ae56a63636fdabb4012", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -6075,6 +6075,10 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       return;\n     }\n \n+  /* Just store non-static data member initializers for later.  */\n+  if (init && TREE_CODE (decl) == FIELD_DECL)\n+    DECL_INITIAL (decl) = digest_init_flags (TREE_TYPE (decl), init, flags);\n+\n   /* Take care of TYPE_DECLs up front.  */\n   if (TREE_CODE (decl) == TYPE_DECL)\n     {\n@@ -10087,36 +10091,6 @@ grokdeclarator (const cp_declarator *declarator,\n \n \tif (decl == NULL_TREE)\n \t  {\n-\t    if (initialized)\n-\t      {\n-\t\tif (!staticp)\n-\t\t  {\n-\t\t    /* An attempt is being made to initialize a non-static\n-\t\t       member.  But, from [class.mem]:\n-\n-\t\t       4 A member-declarator can contain a\n-\t\t       constant-initializer only if it declares a static\n-\t\t       member (_class.static_) of integral or enumeration\n-\t\t       type, see _class.static.data_.\n-\n-\t\t       This used to be relatively common practice, but\n-\t\t       the rest of the compiler does not correctly\n-\t\t       handle the initialization unless the member is\n-\t\t       static so we make it static below.  */\n-\t\t    if (cxx_dialect >= cxx0x)\n-\t\t      {\n-\t\t\tsorry (\"non-static data member initializers\");\n-\t\t      }\n-\t\t    else\n-\t\t      {\n-\t\t\tpermerror (input_location, \"ISO C++ forbids initialization of member %qD\",\n-\t\t\t\t   unqualified_id);\n-\t\t\tpermerror (input_location, \"making %qD static\", unqualified_id);\n-\t\t\tstaticp = 1;\n-\t\t      }\n-\t\t  }\n-\t      }\n-\n \t    if (staticp)\n \t      {\n \t\t/* C++ allows static class members.  All other work\n@@ -10157,6 +10131,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t    DECL_MUTABLE_P (decl) = 1;\n \t\t    storage_class = sc_none;\n \t\t  }\n+\n+\t\tif (initialized)\n+\t\t  /* An attempt is being made to initialize a non-static\n+\t\t     member.  This is new in C++11.  */\n+\t\t  maybe_warn_cpp0x (CPP0X_NSDMI);\n \t      }\n \n \t    bad_specifiers (decl, BSP_FIELD, virtualp,"}, {"sha": "1e06280b26c74389a62ba8d9c63b0a806a9ea8c1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -795,7 +795,7 @@ grokfield (const cp_declarator *declarator,\n {\n   tree value;\n   const char *asmspec = 0;\n-  int flags = LOOKUP_ONLYCONVERTING;\n+  int flags;\n   tree name;\n \n   if (init\n@@ -919,9 +919,10 @@ grokfield (const cp_declarator *declarator,\n \t\t     value);\n \t    }\n \t}\n-      else if (pedantic && TREE_CODE (value) != VAR_DECL)\n-\t/* Already complained in grokdeclarator.  */\n-\tinit = NULL_TREE;\n+      else if (TREE_CODE (value) == FIELD_DECL)\n+\t/* C++11 NSDMI, keep going.  */;\n+      else if (TREE_CODE (value) != VAR_DECL)\n+\tgcc_unreachable ();\n       else if (!processing_template_decl)\n \t{\n \t  if (TREE_CODE (init) == CONSTRUCTOR)\n@@ -955,6 +956,12 @@ grokfield (const cp_declarator *declarator,\n   if (attrlist)\n     cplus_decl_attributes (&value, attrlist, 0);\n \n+  if (init && BRACE_ENCLOSED_INITIALIZER_P (init)\n+      && CONSTRUCTOR_IS_DIRECT_INIT (init))\n+    flags = LOOKUP_NORMAL;\n+  else\n+    flags = LOOKUP_IMPLICIT;\n+\n   switch (TREE_CODE (value))\n     {\n     case VAR_DECL:\n@@ -969,7 +976,6 @@ grokfield (const cp_declarator *declarator,\n \tinit = error_mark_node;\n       cp_finish_decl (value, init, /*init_const_expr_p=*/false,\n \t\t      NULL_TREE, flags);\n-      DECL_INITIAL (value) = init;\n       DECL_IN_AGGR_P (value) = 1;\n       return value;\n "}, {"sha": "392f304ef92ca1eb5090c6b51f7c5d7e28c4d392", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -3236,6 +3236,11 @@ maybe_warn_cpp0x (cpp0x_warn_str str)\n \t\t \"override controls (override/final) \"\n \t\t \"only available with -std=c++0x or -std=gnu++0x\");\n         break;\n+      case CPP0X_NSDMI:\n+\tpedwarn (input_location, 0,\n+\t\t \"non-static data member initializers \"\n+\t\t \"only available with -std=c++0x or -std=gnu++0x\");\n+        break;\n       default:\n \tgcc_unreachable();\n       }"}, {"sha": "f5904d5ddc2d1535865fdd8a57c9613603cbd010", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -493,6 +493,11 @@ perform_member_init (tree member, tree init)\n   tree decl;\n   tree type = TREE_TYPE (member);\n \n+  /* Use the non-static data member initializer if there was no\n+     mem-initializer for this field.  */\n+  if (init == NULL_TREE)\n+    init = break_out_target_exprs (DECL_INITIAL (member));\n+\n   /* Effective C++ rule 12 requires that all data members be\n      initialized.  */\n   if (warn_ecpp && init == NULL_TREE && TREE_CODE (type) != ARRAY_TYPE)"}, {"sha": "734c23b0d6c3cc81113ae493a000660017a0829d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -1036,10 +1036,20 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t  if (bad && deleted_p)\n \t    *deleted_p = true;\n \n+\t  if (DECL_INITIAL (field))\n+\t    {\n+\t      if (msg && DECL_INITIAL (field) == error_mark_node)\n+\t\tinform (0, \"initializer for %q+#D is invalid\", field);\n+\t      if (trivial_p)\n+\t\t*trivial_p = false;\n+\n+\t      /* Don't do the normal processing.  */\n+\t      continue;\n+\t    }\n+\n \t  /* For an implicitly-defined default constructor to be constexpr,\n-\t     every member must have a user-provided default constructor.  */\n-\t  /* FIXME will need adjustment for non-static data member\n-\t     initializers.  */\n+\t     every member must have a user-provided default constructor or\n+\t     an explicit initializer.  */\n \t  if (constexpr_p && !CLASS_TYPE_P (mem_type))\n \t    {\n \t      *constexpr_p = false;"}, {"sha": "bd46af38cb00085c2d8c3e5acb9de7fa039b04d2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -18202,6 +18202,12 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t    /* Parse the initializer.  */\n \t\t    initializer = cp_parser_constant_initializer (parser);\n \t\t}\n+\t      else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE)\n+\t\t       && !function_declarator_p (declarator))\n+\t\t{\n+\t\t  bool x;\n+\t\t  initializer = cp_parser_initializer (parser, &x, &x);\n+\t\t}\n \t      /* Otherwise, there is no initializer.  */\n \t      else\n \t\tinitializer = NULL_TREE;"}, {"sha": "19ecbee4d8ad416a2261562d57477ec23621a932", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -5826,8 +5826,8 @@ register_constexpr_fundef (tree fun, tree body)\n   body = massage_constexpr_body (fun, body);\n   if (body == NULL_TREE || body == error_mark_node)\n     {\n-      error (\"body of constexpr function %qD not a return-statement\", fun);\n-      DECL_DECLARED_CONSTEXPR_P (fun) = false;\n+      if (!DECL_CONSTRUCTOR_P (fun))\n+\terror (\"body of constexpr function %qD not a return-statement\", fun);\n       return NULL;\n     }\n \n@@ -6245,7 +6245,7 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n         {\n \t  if (!allow_non_constant)\n \t    {\n-\t      if (DECL_SAVED_TREE (fun))\n+\t      if (DECL_INITIAL (fun))\n \t\t{\n \t\t  /* The definition of fun was somehow unsuitable.  */\n \t\t  error_at (loc, \"%qD called in a constant expression\", fun);"}, {"sha": "795ac70ce3b498460d4e533d422a73c094db4faa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -1,3 +1,11 @@\n+2011-09-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/nsdmi1.C: New.\n+\t* g++.dg/cpp0x/nsdmi2.C: New.\n+\t* g++.dg/cpp0x/nsdmi3.C: New.\n+\t* g++.dg/cpp0x/nsdmi4.C: New.\n+\t* g++.old-deja/g++.other/init4.C: New.\n+\n 2011-09-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44267"}, {"sha": "f6381d0fdb4b4c6404b2ea3d7a13388e630d4cc9", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi1.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi1.C?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run }\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  int i = 42;\n+};\n+\n+struct B\n+{\n+  int i = 42;\n+  B() { }\n+  B(int i): i(i) { }\n+};\n+\n+template <class T, T t>\n+struct C\n+{\n+  T m = t;\n+};\n+\n+template <class T, T t>\n+struct D\n+{\n+  T m = t;\n+  D() { }\n+  D(T m):m(m) { }\n+};\n+\n+int main()\n+{\n+  A a1;\n+  if (a1.i != 42) return 1;\n+  A a2 = { 24 };\n+  if (a2.i != 24) return 2;\n+  A a3[1];\n+  if (a3[0].i != 42) return 3;\n+\n+  B b1;\n+  if (b1.i != 42) return 3;\n+  B b2 (24);\n+  if (b2.i != 24) return 4;\n+\n+  C<int,3> c1;\n+  if (c1.m != 3) return 5;\n+  C<int,3> c2 { 5 };\n+  if (c2.m != 5) return 6;\n+\n+  D<int,3> d1;\n+  if (d1.m != 3) return 7;\n+  D<int,3> d2 (5) ;\n+  if (d2.m != 5) return 8;\n+}"}, {"sha": "9636bed88208383d4d644de7bcad5e33f3952454", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi2.C?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  int i;\n+  constexpr A(int i): i(i) {}\n+};\n+\n+struct B\n+{\n+  A a1 = 1;\n+  A a2 { 2 };\n+  A a3 = { 3 };\n+};\n+\n+#define SA(X) static_assert(X,#X)\n+\n+constexpr B b;\n+SA(b.a1.i == 1);\n+SA(b.a2.i == 2);\n+SA(b.a3.i == 3);"}, {"sha": "73b2bc2e1acb627a78f5437a62ec296ea35bdbba", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi3.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  int i;\n+  explicit constexpr A(int i): i(i) {}\n+};\n+\n+struct B\n+{\n+  A a1 = 1;\t\t\t// { dg-error \"\" }\n+  A a2 { 2 };\n+  A a3 = { 3 };\t\t\t// { dg-error \"\" }\n+};\n+\n+constexpr B b;\t\t\t// { dg-error \"B::B\" }\n+\n+// { dg-message \"a1. is invalid\" \"\" { target *-*-* } 11 }"}, {"sha": "db365cb55e515b504dbf32ad68eb1e93077e3c2b", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi4.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi4.C?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do run }\n+// { dg-options -std=c++0x }\n+\n+int c;\n+\n+struct A\n+{\n+  A() { }\n+  A(const A&) { }\n+};\n+\n+A f() { ++c; return A(); }\n+\n+struct B\n+{\n+  A a = f();\n+};\n+\n+int main()\n+{\n+  B b1, b2;\n+  if (c != 2)\n+    __builtin_abort();\n+}"}, {"sha": "f8246d68f0ed37ea01c20054ba8740d8aacb0ab6", "filename": "gcc/testsuite/g++.old-deja/g++.other/init4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit4.C?ref=0e5f8a598de1c8dc44fb59c6d0ea0dcd557f695a", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++98 }\n+// { dg-options \"-std=c++98 -pedantic-errors\" }\n // { dg-do assemble  }\n \n class error {"}]}