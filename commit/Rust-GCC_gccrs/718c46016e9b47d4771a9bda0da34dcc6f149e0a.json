{"sha": "718c46016e9b47d4771a9bda0da34dcc6f149e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4YzQ2MDE2ZTliNDdkNDc3MWE5YmRhMGRhMzRkY2M2ZjE0OWUwYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-04-15T08:01:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-04-15T08:01:01Z"}, "message": "cfgloop.h (struct loop): Move force_vectorize down.\n\n\t* cfgloop.h (struct loop): Move force_vectorize down.\n\t* gimplify.c (gimple_boolify) <ANNOTATE_EXPR>: Handle new kinds.\n\t(gimplify_expr) <ANNOTATE_EXPR>: Minor tweak.\n\t* lto-streamer-in.c (input_cfg): Read dont_vectorize field.\n\t* lto-streamer-out.c (output_cfg): Write dont_vectorize field.\n\t* tree-cfg.c (replace_loop_annotate): Revamp and handle new kinds.\n\t* tree-core.h (enum annot_expr_kind): Add new kind values.\n\t* tree-inline.c (copy_loops): Copy dont_vectorize field and reorder.\n\t* tree-pretty-print.c (dump_generic_node) <ANNOTATE_EXPR>: Handle new\n\tkinds.\n\t* tree.def (ANNOTATE_EXPR): Tweak comment.\nada/\n\t* gcc-interface/trans.c (gnat_gimplify_stmt): Propagate loop hints.\n\nFrom-SVN: r209403", "tree": {"sha": "c69fd1fc4cb66f4513f0321b78b2af763ccd4971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c69fd1fc4cb66f4513f0321b78b2af763ccd4971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/718c46016e9b47d4771a9bda0da34dcc6f149e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718c46016e9b47d4771a9bda0da34dcc6f149e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718c46016e9b47d4771a9bda0da34dcc6f149e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718c46016e9b47d4771a9bda0da34dcc6f149e0a/comments", "author": null, "committer": null, "parents": [{"sha": "d2994b806914cf8468d9707ded03e2d14e146a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2994b806914cf8468d9707ded03e2d14e146a88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2994b806914cf8468d9707ded03e2d14e146a88"}], "stats": {"total": 243, "additions": 189, "deletions": 54}, "files": [{"sha": "0cd9d6984225dc0ace048187c83c9c2e13579864", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -1,3 +1,17 @@\n+2014-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfgloop.h (struct loop): Move force_vectorize down.\n+\t* gimplify.c (gimple_boolify) <ANNOTATE_EXPR>: Handle new kinds.\n+\t(gimplify_expr) <ANNOTATE_EXPR>: Minor tweak.\n+\t* lto-streamer-in.c (input_cfg): Read dont_vectorize field.\n+\t* lto-streamer-out.c (output_cfg): Write dont_vectorize field.\n+\t* tree-cfg.c (replace_loop_annotate): Revamp and handle new kinds.\n+\t* tree-core.h (enum annot_expr_kind): Add new kind values.\n+\t* tree-inline.c (copy_loops): Copy dont_vectorize field and reorder.\n+\t* tree-pretty-print.c (dump_generic_node) <ANNOTATE_EXPR>: Handle new\n+\tkinds.\n+\t* tree.def (ANNOTATE_EXPR): Tweak comment.\n+\n 2014-04-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-devirt.c (maybe_record_node): Ignore all non-methods (including"}, {"sha": "77c7542c8956c5e4171a657e3cea8deb89b9dffd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -1,3 +1,7 @@\n+2014-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_gimplify_stmt): Propagate loop hints.\n+\n 2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity, components_to_record):"}, {"sha": "3b6d5bd0d5e14a23ff18de6b21ea336cb16ddfd3", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -7761,6 +7761,15 @@ gnat_gimplify_stmt (tree *stmt_p)\n \t\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\t\tannot_expr_ivdep_kind));\n \n+\t    if (LOOP_STMT_NO_VECTOR (stmt))\n+\t      gnu_cond = build2 (ANNOTATE_EXPR, TREE_TYPE (gnu_cond), gnu_cond,\n+\t\t\t\t build_int_cst (integer_type_node,\n+\t\t\t\t\t\tannot_expr_no_vector_kind));\n+\t    if (LOOP_STMT_VECTOR (stmt))\n+\t      gnu_cond = build2 (ANNOTATE_EXPR, TREE_TYPE (gnu_cond), gnu_cond,\n+\t\t\t\t build_int_cst (integer_type_node,\n+\t\t\t\t\t\tannot_expr_vector_kind));\n+\n \t    gnu_cond\n \t      = build3 (COND_EXPR, void_type_node, gnu_cond, NULL_TREE,\n \t\t\tbuild1 (GOTO_EXPR, void_type_node, gnu_end_label));"}, {"sha": "10a00eab17790a7fdd57fc37ce1c90d4546900ba", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -173,12 +173,12 @@ struct GTY ((chain_next (\"%h.next\"))) loop {\n      of the loop can be safely evaluated concurrently.  */\n   int safelen;\n \n-  /* True if we should try harder to vectorize this loop.  */\n-  bool force_vectorize;\n-\n   /* True if this loop should never be vectorized.  */\n   bool dont_vectorize;\n \n+  /* True if we should try harder to vectorize this loop.  */\n+  bool force_vectorize;\n+\n   /* For SIMD loops, this is a unique identifier of the loop, referenced\n      by IFN_GOMP_SIMD_VF, IFN_GOMP_SIMD_LANE and IFN_GOMP_SIMD_LAST_LANE\n      builtins.  */"}, {"sha": "d7470fbb0a672ba0101dddf370166608b3af83ea", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -2813,15 +2813,18 @@ gimple_boolify (tree expr)\n       return expr;\n \n     case ANNOTATE_EXPR:\n-      if ((enum annot_expr_kind) TREE_INT_CST_LOW (TREE_OPERAND (expr, 1))\n-\t  == annot_expr_ivdep_kind)\n+      switch ((enum annot_expr_kind) TREE_INT_CST_LOW (TREE_OPERAND (expr, 1)))\n \t{\n+\tcase annot_expr_ivdep_kind:\n+\tcase annot_expr_no_vector_kind:\n+\tcase annot_expr_vector_kind:\n \t  TREE_OPERAND (expr, 0) = gimple_boolify (TREE_OPERAND (expr, 0));\n \t  if (TREE_CODE (type) != BOOLEAN_TYPE)\n \t    TREE_TYPE (expr) = boolean_type_node;\n \t  return expr;\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n-      /* FALLTHRU */\n \n     default:\n       if (COMPARISON_CLASS_P (expr))\n@@ -7528,7 +7531,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase ANNOTATE_EXPR:\n \t  {\n \t    tree cond = TREE_OPERAND (*expr_p, 0);\n-\t    tree id = TREE_OPERAND (*expr_p, 1);\n+\t    tree kind = TREE_OPERAND (*expr_p, 1);\n \t    tree type = TREE_TYPE (cond);\n \t    if (!INTEGRAL_TYPE_P (type))\n \t      {\n@@ -7538,8 +7541,8 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t      }\n \t    tree tmp = create_tmp_var (type, NULL);\n \t    gimplify_arg (&cond, pre_p, EXPR_LOCATION (*expr_p));\n-\t    gimple call = gimple_build_call_internal (IFN_ANNOTATE, 2,\n-\t\t\t\t\t\t      cond, id);\n+\t    gimple call\n+\t      = gimple_build_call_internal (IFN_ANNOTATE, 2, cond, kind);\n \t    gimple_call_set_lhs (call, tmp);\n \t    gimplify_seq_add_stmt (pre_p, call);\n \t    *expr_p = tmp;"}, {"sha": "20835f71d6af7c9c3dd2efdd88626dabf44ae138", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -718,6 +718,7 @@ input_cfg (struct lto_input_block *ib, struct data_in *data_in,\n \n       /* Read OMP SIMD related info.  */\n       loop->safelen = streamer_read_hwi (ib);\n+      loop->dont_vectorize = streamer_read_hwi (ib);\n       loop->force_vectorize = streamer_read_hwi (ib);\n       loop->simduid = stream_read_tree (ib, data_in);\n "}, {"sha": "55bcffee0b019791262581d2daa2e3aad5c05e48", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -1693,6 +1693,7 @@ output_cfg (struct output_block *ob, struct function *fn)\n \n       /* Write OMP SIMD related info.  */\n       streamer_write_hwi (ob, loop->safelen);\n+      streamer_write_hwi (ob, loop->dont_vectorize);\n       streamer_write_hwi (ob, loop->force_vectorize);\n       stream_write_tree (ob, loop->simduid, true);\n     }"}, {"sha": "739e1ecc5bd0f63484379eb70cef184683a98f7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -1,3 +1,8 @@\n+2014-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/vect12.ad[sb]: New test.\n+\t* gnat.dg/vect13.ad[sb]: Likewise.\n+\n 2014-04-15  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* c-c++-common/asan/null-deref-1.c: Change regexp to pass test"}, {"sha": "f493c8bbb0f8d0fe1d01a951748c806bae8b610b", "filename": "gcc/testsuite/gnat.dg/vect12.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect12.adb?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile { target i?86-*-* x86_64-*-* } }\n+-- { dg-options \"-O3 -msse2 -fdump-tree-vect-details\" }\n+\n+package body Vect12 is\n+\n+   function \"+\" (X, Y : Sarray) return Sarray is\n+      R : Sarray;\n+   begin\n+      for I in Sarray'Range loop\n+         pragma Loop_Optimize (No_Vector);\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+      return R;\n+   end;\n+\n+   procedure Add (X, Y : Sarray; R : out Sarray) is\n+   begin\n+      for I in Sarray'Range loop\n+         pragma Loop_Optimize (No_Vector);\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+   end;\n+\n+end Vect12;\n+\n+-- { dg-final { scan-tree-dump-not \"vectorized 1 loops\" \"vect\"  } }\n+-- { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "a600d0fa5dcebd0156287f9ce9775db2ea3373f9", "filename": "gcc/testsuite/gnat.dg/vect12.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect12.ads?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -0,0 +1,10 @@\n+package Vect12 is\n+\n+   -- Constrained array types are vectorizable\n+   type Sarray is array (1 .. 4) of Float;\n+   for Sarray'Alignment use 16;\n+\n+   function \"+\" (X, Y : Sarray) return Sarray;\n+   procedure Add (X, Y : Sarray; R : out Sarray);\n+\n+end Vect12;"}, {"sha": "ca765d3b4855b032ef6d098542f3c09bfd59c5ff", "filename": "gcc/testsuite/gnat.dg/vect13.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect13.adb?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile { target i?86-*-* x86_64-*-* } }\n+-- { dg-options \"-O3 -msse2 -fdump-tree-vect-details\" }\n+\n+package body Vect13 is\n+\n+   function \"+\" (X, Y : Sarray) return Sarray is\n+      R : Sarray;\n+   begin\n+      for I in Sarray'Range loop\n+         pragma Loop_Optimize (Vector);\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+      return R;\n+   end;\n+\n+   procedure Add (X, Y : Sarray; R : out Sarray) is\n+   begin\n+      for I in Sarray'Range loop\n+         pragma Loop_Optimize (Vector);\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+   end;\n+\n+end Vect13;\n+\n+-- { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\"  } }\n+-- { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "7aeac5e527a6ee27c17caa87cdbbfa904878c11f", "filename": "gcc/testsuite/gnat.dg/vect13.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftestsuite%2Fgnat.dg%2Fvect13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect13.ads?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -0,0 +1,10 @@\n+package Vect13 is\n+\n+   -- Constrained array types are vectorizable\n+   type Sarray is array (1 .. 4) of Float;\n+   for Sarray'Alignment use 16;\n+\n+   function \"+\" (X, Y : Sarray) return Sarray;\n+   procedure Add (X, Y : Sarray; R : out Sarray);\n+\n+end Vect13;"}, {"sha": "cd35d5595901668edf433e116019b9a5f37041cb", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -250,9 +250,9 @@ build_gimple_cfg (gimple_seq seq)\n }\n \n \n-/* Search for ANNOTATE call with annot_expr_ivdep_kind; if found, remove\n-   it and set loop->safelen to INT_MAX.  We assume that the annotation\n-   comes immediately before the condition.  */\n+/* Look for ANNOTATE calls with loop annotation kind; if found, remove\n+   them and propagate the information to the loop.  We assume that the\n+   annotations come immediately before the condition of the loop.  */\n \n static void\n replace_loop_annotate ()\n@@ -266,50 +266,62 @@ replace_loop_annotate ()\n     {\n       gsi = gsi_last_bb (loop->header);\n       stmt = gsi_stmt (gsi);\n-      if (stmt && gimple_code (stmt) == GIMPLE_COND)\n+      if (!(stmt && gimple_code (stmt) == GIMPLE_COND))\n+\tcontinue;\n+      for (gsi_prev_nondebug (&gsi); !gsi_end_p (gsi); gsi_prev (&gsi))\n \t{\n-\t  gsi_prev_nondebug (&gsi);\n-\t  if (gsi_end_p (gsi))\n-\t    continue;\n \t  stmt = gsi_stmt (gsi);\n \t  if (gimple_code (stmt) != GIMPLE_CALL)\n-\t\tcontinue;\n+\t    break;\n \t  if (!gimple_call_internal_p (stmt)\n-\t\t  || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n-\t    continue;\n-\t  if ((annot_expr_kind) tree_to_shwi (gimple_call_arg (stmt, 1))\n-\t      != annot_expr_ivdep_kind)\n-\t    continue;\n+\t      || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n+\t    break;\n+\t  switch ((annot_expr_kind) tree_to_shwi (gimple_call_arg (stmt, 1)))\n+\t    {\n+\t    case annot_expr_ivdep_kind:\n+\t      loop->safelen = INT_MAX;\n+\t      break;\n+\t    case annot_expr_no_vector_kind:\n+\t      loop->dont_vectorize = true;\n+\t      break;\n+\t    case annot_expr_vector_kind:\n+\t      loop->force_vectorize = true;\n+\t      cfun->has_force_vectorize_loops = true;\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n \t  stmt = gimple_build_assign (gimple_call_lhs (stmt),\n \t\t\t\t      gimple_call_arg (stmt, 0));\n \t  gsi_replace (&gsi, stmt, true);\n-\t  loop->safelen = INT_MAX;\n \t}\n     }\n \n-  /* Remove IFN_ANNOTATE. Safeguard for the case loop->latch == NULL.  */\n+  /* Remove IFN_ANNOTATE.  Safeguard for the case loop->latch == NULL.  */\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      gsi = gsi_last_bb (bb);\n-      stmt = gsi_stmt (gsi);\n-      if (stmt && gimple_code (stmt) == GIMPLE_COND)\n-\tgsi_prev_nondebug (&gsi);\n-      if (gsi_end_p (gsi))\n-\tcontinue;\n-      stmt = gsi_stmt (gsi);\n-      if (gimple_code (stmt) != GIMPLE_CALL)\n-\tcontinue;\n-      if (!gimple_call_internal_p (stmt)\n-\t  || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n-\tcontinue;\n-      if ((annot_expr_kind) tree_to_shwi (gimple_call_arg (stmt, 1))\n-\t  != annot_expr_ivdep_kind)\n-\tcontinue;\n-      warning_at (gimple_location (stmt), 0, \"ignoring %<GCC ivdep%> \"\n-\t\t  \"annotation\");\n-      stmt = gimple_build_assign (gimple_call_lhs (stmt),\n-\t\t\t\t  gimple_call_arg (stmt, 0));\n-      gsi_replace (&gsi, stmt, true);\n+      for (gsi = gsi_last_bb (bb); !gsi_end_p (gsi); gsi_prev (&gsi))\n+\t{\n+\t  stmt = gsi_stmt (gsi);\n+\t  if (gimple_code (stmt) != GIMPLE_CALL)\n+\t    break;\n+\t  if (!gimple_call_internal_p (stmt)\n+\t      || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n+\t    break;\n+\t  switch ((annot_expr_kind) tree_to_shwi (gimple_call_arg (stmt, 1)))\n+\t    {\n+\t    case annot_expr_ivdep_kind:\n+\t    case annot_expr_no_vector_kind:\n+\t    case annot_expr_vector_kind:\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  warning_at (gimple_location (stmt), 0, \"ignoring loop annotation\");\n+\t  stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t      gimple_call_arg (stmt, 0));\n+\t  gsi_replace (&gsi, stmt, true);\n+\t}\n     }\n }\n "}, {"sha": "373a9d689e02566918127af5a14e721c5faaba7d", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -657,7 +657,10 @@ enum tree_node_kind {\n };\n \n enum annot_expr_kind {\n-  annot_expr_ivdep_kind\n+  annot_expr_ivdep_kind,\n+  annot_expr_no_vector_kind,\n+  annot_expr_vector_kind,\n+  annot_expr_kind_last\n };\n \n "}, {"sha": "dea8521d3e6dc0c614798eab3f80b2bfa49ab52f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -2349,17 +2349,18 @@ copy_loops (copy_body_data *id,\n \t  place_new_loop (cfun, dest_loop);\n \t  flow_loop_tree_node_add (dest_parent, dest_loop);\n \n-\t  if (src_loop->simduid)\n-\t    {\n-\t      dest_loop->simduid = remap_decl (src_loop->simduid, id);\n-\t      cfun->has_simduid_loops = true;\n-\t    }\n+\t  dest_loop->safelen = src_loop->safelen;\n+\t  dest_loop->dont_vectorize = src_loop->dont_vectorize;\n \t  if (src_loop->force_vectorize)\n \t    {\n \t      dest_loop->force_vectorize = true;\n \t      cfun->has_force_vectorize_loops = true;\n \t    }\n-\t  dest_loop->safelen = src_loop->safelen;\n+\t  if (src_loop->simduid)\n+\t    {\n+\t      dest_loop->simduid = remap_decl (src_loop->simduid, id);\n+\t      cfun->has_simduid_loops = true;\n+\t    }\n \n \t  /* Recurse.  */\n \t  copy_loops (id, dest_loop, src_loop);"}, {"sha": "bf3b96629c2765447b72e9b37d09cfc6cd4403ea", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -2105,13 +2105,21 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n     case ANNOTATE_EXPR:\n       pp_string (buffer, \"ANNOTATE_EXPR <\");\n+      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       switch ((enum annot_expr_kind) TREE_INT_CST_LOW (TREE_OPERAND (node, 1)))\n \t{\n \tcase annot_expr_ivdep_kind:\n-\t  pp_string (buffer, \"ivdep, \");\n+\t  pp_string (buffer, \", ivdep\");\n+\t  break;\n+\tcase annot_expr_no_vector_kind:\n+\t  pp_string (buffer, \", no-vector\");\n+\t  break;\n+\tcase annot_expr_vector_kind:\n+\t  pp_string (buffer, \", vector\");\n \t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n-      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_greater (buffer);\n       break;\n "}, {"sha": "a92d86f32b066a9865f0cad9040ee3a3cfcb8eea", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718c46016e9b47d4771a9bda0da34dcc6f149e0a/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=718c46016e9b47d4771a9bda0da34dcc6f149e0a", "patch": "@@ -1280,7 +1280,7 @@ DEFTREECODE (TARGET_OPTION_NODE, \"target_option_node\", tcc_exceptional, 0)\n \n /* ANNOTATE_EXPR.\n    Operand 0 is the expression to be annotated.\n-   Operand 1 is the annotation id. */\n+   Operand 1 is the annotation kind.  */\n DEFTREECODE (ANNOTATE_EXPR, \"annotate_expr\", tcc_expression, 2)\n \n /* Cilk spawn statement"}]}