{"sha": "19dedccfc36a34b843292e6493c7ffd429673de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkZWRjY2ZjMzZhMzRiODQzMjkyZTY0OTNjN2ZmZDQyOTY3M2RlMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-07T04:34:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-07T04:34:57Z"}, "message": "Fix template/ref1.C, nontype15.C, addr-builtin1.C with -std=c++1z.\n\n\t* parser.c (cp_parser_template_argument): Handle references in\n\tC++1z mode.\n\t* constexpr.c (potential_constant_expression_1): Don't error about\n\tTREE_THIS_VOLATILE on declarations.\n\t[COMPONENT_REF]: Don't consider the object if we're dealing with an\n\toverloaded function.\n\nFrom-SVN: r231351", "tree": {"sha": "bf18eed02d681288b0f674e475652125572c8032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf18eed02d681288b0f674e475652125572c8032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19dedccfc36a34b843292e6493c7ffd429673de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dedccfc36a34b843292e6493c7ffd429673de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dedccfc36a34b843292e6493c7ffd429673de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dedccfc36a34b843292e6493c7ffd429673de2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aabdb83166b53a13956071f0e01f841a184340f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabdb83166b53a13956071f0e01f841a184340f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aabdb83166b53a13956071f0e01f841a184340f7"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "1fdbe05c5f7397458eb851d62eccfe0774de58f3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=19dedccfc36a34b843292e6493c7ffd429673de2", "patch": "@@ -1,5 +1,12 @@\n 2015-12-06  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_template_argument): Handle references in\n+\tC++1z mode.\n+\t* constexpr.c (potential_constant_expression_1): Don't error about\n+\tTREE_THIS_VOLATILE on declarations.\n+\t[COMPONENT_REF]: Don't consider the object if we're dealing with\n+\tan overloaded function.\n+\n \t* constraint.cc (strictly_subsumes): New.\n \t* cp-tree.h: Declare it.\n \t* pt.c (process_partial_specialization): Use it instead of"}, {"sha": "208f43b430d14f0de568b707faf247a3d6a9eae8", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=19dedccfc36a34b843292e6493c7ffd429673de2", "patch": "@@ -4130,7 +4130,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     return false;\n   if (t == NULL_TREE)\n     return true;\n-  if (TREE_THIS_VOLATILE (t))\n+  if (TREE_THIS_VOLATILE (t) && !DECL_P (t))\n     {\n       if (flags & tf_error)\n         error (\"expression %qE has side-effects\", t);\n@@ -4345,6 +4345,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n             of literal type or of pointer to literal type.  */\n       /* This test would be redundant, as it follows from the\n \t postfix-expression being a potential constant expression.  */\n+      if (type_unknown_p (t))\n+\treturn true;\n       return RECUR (TREE_OPERAND (t, 0), want_rval);\n \n     case EXPR_PACK_EXPANSION:"}, {"sha": "1c7b1d5074792ebb93a196523be202ec15ed4e6e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=19dedccfc36a34b843292e6493c7ffd429673de2", "patch": "@@ -15364,7 +15364,16 @@ cp_parser_template_argument (cp_parser* parser)\n      because the argument could really be a type-id.  */\n   if (maybe_type_id)\n     cp_parser_parse_tentatively (parser);\n-  argument = cp_parser_constant_expression (parser);\n+\n+  if (cxx_dialect <= cxx14)\n+    argument = cp_parser_constant_expression (parser);\n+  else\n+    {\n+      /* With C++17 generalized non-type template arguments we need to handle\n+\t lvalue constant expressions, too.  */\n+      argument = cp_parser_assignment_expression (parser);\n+      require_potential_constant_expression (argument);\n+    }\n \n   if (!maybe_type_id)\n     return argument;"}, {"sha": "d31f8923d5ce1e677a8b7a26e96e6d7ae5341c73", "filename": "gcc/testsuite/g++.dg/template/nontype8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dedccfc36a34b843292e6493c7ffd429673de2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype8.C?ref=19dedccfc36a34b843292e6493c7ffd429673de2", "patch": "@@ -8,6 +8,6 @@ struct S { int m; static int s; } s;\n \n X<&a[2]> x3;                    // { dg-error \"\" } address of array element\n X<&s.m> x4;                     // { dg-error \"\" } address of non-static member\n-X<&s.s> x5;                     // { dg-error \"\" } &S::s must be used\n+X<&s.s> x5;                     // { dg-error \"\" \"\" { target { ! c++1z } } } &S::s must be used\n X<&S::s> x6;                    // OK: address of static member\n "}]}