{"sha": "5af28c745214bb36de18d625705d6328373164cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmMjhjNzQ1MjE0YmIzNmRlMThkNjI1NzA1ZDYzMjgzNzMxNjRjYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-11-01T15:31:12Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-11-01T15:31:12Z"}, "message": "c-decl.c (grokdeclarator): Set decl source locations.\n\ngcc\n\t* c-decl.c (grokdeclarator): Set decl source locations.\n\t* c-parser.c (c_parser_enum_specifier): Set location.\n\t(c_parser_struct_or_union_specifier): Likewise.\ngcc/testsuite\n\t* gcc.dg/redecl-1.c: Update.\n\t* gcc.dg/pr20368-3.c: Update.\n\t* gcc.dg/inline-14.c: Update.\n\t* gcc.dg/builtins-30.c: Update.\n\t* gcc.dg/dremf-type-compat-4.c: Update.\n\t* gcc.dg/pr20368-2.c: Update.\n\nFrom-SVN: r129822", "tree": {"sha": "3a0a70e9966b269f5ebf022b1b4791ced82f6bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a0a70e9966b269f5ebf022b1b4791ced82f6bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5af28c745214bb36de18d625705d6328373164cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af28c745214bb36de18d625705d6328373164cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af28c745214bb36de18d625705d6328373164cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af28c745214bb36de18d625705d6328373164cb/comments", "author": null, "committer": null, "parents": [{"sha": "18aa09d19539fd8d1ca5337d1410e3e21d24a971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18aa09d19539fd8d1ca5337d1410e3e21d24a971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18aa09d19539fd8d1ca5337d1410e3e21d24a971"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "7363e52993695532043c18e3baec5e2907062ec9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -1,3 +1,9 @@\n+2007-11-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* c-decl.c (grokdeclarator): Set decl source locations.\n+\t* c-parser.c (c_parser_enum_specifier): Set location.\n+\t(c_parser_struct_or_union_specifier): Likewise.\n+\n 2007-11-01  Tom Tromey  <tromey@redhat.com>\n \n \t* print-tree.c (print_node): Print column number."}, {"sha": "5ddbcc0772a6338a5e4b7c6791f8136a2e750dc1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -4645,6 +4645,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       if (type_quals)\n \ttype = c_build_qualified_type (type, type_quals);\n       decl = build_decl (TYPE_DECL, declarator->u.id, type);\n+      DECL_SOURCE_LOCATION (decl) = declarator->id_loc;\n       if (declspecs->explicit_signed_p)\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n       if (declspecs->inline_p)\n@@ -4740,6 +4741,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \ttype_as_written = type;\n \n \tdecl = build_decl (PARM_DECL, declarator->u.id, type);\n+\tDECL_SOURCE_LOCATION (decl) = declarator->id_loc;\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n \n@@ -4779,6 +4781,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  }\n \ttype = c_build_qualified_type (type, type_quals);\n \tdecl = build_decl (FIELD_DECL, declarator->u.id, type);\n+\tDECL_SOURCE_LOCATION (decl) = declarator->id_loc;\n \tDECL_NONADDRESSABLE_P (decl) = bitfield;\n \tif (bitfield && !declarator->u.id)\n \t  TREE_NO_WARNING (decl) = 1;\n@@ -4815,6 +4818,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  }\n \n \tdecl = build_decl (FUNCTION_DECL, declarator->u.id, type);\n+\tDECL_SOURCE_LOCATION (decl) = declarator->id_loc;\n \tdecl = build_decl_attribute_variant (decl, decl_attr);\n \n \tif (pedantic && type_quals && !DECL_IN_SYSTEM_HEADER (decl))"}, {"sha": "29148266f9a1db26b5c4f6421976d70be9238832", "filename": "gcc/c-parser.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -1707,6 +1707,8 @@ c_parser_enum_specifier (c_parser *parser)\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ENUM));\n   c_parser_consume_token (parser);\n   attrs = c_parser_attributes (parser);\n+  /* Set the location in case we create a decl now.  */\n+  c_parser_set_source_position_from_token (c_parser_peek_token (parser));\n   if (c_parser_next_token_is (parser, CPP_NAME))\n     {\n       ident = c_parser_peek_token (parser)->value;\n@@ -1728,14 +1730,18 @@ c_parser_enum_specifier (c_parser *parser)\n \t  tree enum_value;\n \t  tree enum_decl;\n \t  bool seen_comma;\n+\t  c_token *token;\n \t  if (c_parser_next_token_is_not (parser, CPP_NAME))\n \t    {\n \t      c_parser_error (parser, \"expected identifier\");\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_BRACE, NULL);\n \t      values = error_mark_node;\n \t      break;\n \t    }\n-\t  enum_id = c_parser_peek_token (parser)->value;\n+\t  token = c_parser_peek_token (parser);\n+\t  enum_id = token->value;\n+\t  /* Set the location in case we create a decl now.  */\n+\t  c_parser_set_source_position_from_token (token);\n \t  c_parser_consume_token (parser);\n \t  if (c_parser_next_token_is (parser, CPP_EQ))\n \t    {\n@@ -1848,6 +1854,8 @@ c_parser_struct_or_union_specifier (c_parser *parser)\n     }\n   c_parser_consume_token (parser);\n   attrs = c_parser_attributes (parser);\n+  /* Set the location in case we create a decl now.  */\n+  c_parser_set_source_position_from_token (c_parser_peek_token (parser));\n   if (c_parser_next_token_is (parser, CPP_NAME))\n     {\n       ident = c_parser_peek_token (parser)->value;"}, {"sha": "e42f1ef44682d117725e2b65cd868b067d40f464", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -1,3 +1,12 @@\n+2007-11-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gcc.dg/redecl-1.c: Update.\n+\t* gcc.dg/pr20368-3.c: Update.\n+\t* gcc.dg/inline-14.c: Update.\n+\t* gcc.dg/builtins-30.c: Update.\n+\t* gcc.dg/dremf-type-compat-4.c: Update.\n+\t* gcc.dg/pr20368-2.c: Update.\n+\n 2007-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/33673"}, {"sha": "65a78fefe1d9af12523c6b145289e4da73355b60", "filename": "gcc/testsuite/gcc.dg/builtins-30.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -6,22 +6,22 @@ extern double strtod (const char *, char **);\n \n /* A built-in function may be overridden by an old-style definition\n    specifying too few arguments... */\n-double cos ()\n-{  /* { dg-warning \"shadows a built-in\" } */\n+double cos ()  /* { dg-warning \"shadows a built-in\" } */\n+{\n   /* { dg-warning \"number of arguments doesn't match built-in prototype\" \"built-in\" { target *-*-* } 10 } */\n   return strtod (\"nan\", 0);\n }\n \n /* the right number, but the wrong type, arguments... */\n-double sin (foo)\n-     int foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n+double sin (foo)  /* { dg-warning \"shadows a built-in\" } */\n+     int foo UNUSED;\n {  /* { dg-warning \"argument 'foo' doesn't match built-in prototype\" } */\n   return strtod (\"nan\", 0);\n }\n \n /* or too many arguments.  */\n-long double cosl (foo, bar)\n-     const char *foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n+long double cosl (foo, bar)  /* { dg-warning \"shadows a built-in\" } */\n+     const char *foo UNUSED;\n      int bar UNUSED;\n {  /* { dg-warning \"number of arguments doesn't match built-in prototype\" } */\n   /* { dg-warning \"argument 'foo' doesn't match built-in prototype\" \"foo\" { target *-*-* } 26 } */"}, {"sha": "b3a2c5ad5d7ba65e283b0f658b2fca497023f337", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -6,8 +6,8 @@\n /* { dg-options \"\" } */\n \n float\n-dremf(x, y)\n-     float x, y; /* { dg-warning \"conflicting types for built-in function 'dremf'\" } */\n+dremf(x, y) /* { dg-warning \"conflicting types for built-in function 'dremf'\" } */\n+     float x, y;\n {\n   return x + y;\n }"}, {"sha": "cef62776fbbcf540b65deaa6e628768779d0eaee", "filename": "gcc/testsuite/gcc.dg/inline-14.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -7,8 +7,8 @@ extern inline int func1 (void)\n   return 1;\n }\n \n-inline int func1 (void)\n-{ /* { dg-error \"redefinition\" } */\n+inline int func1 (void) /* { dg-error \"redefinition\" } */\n+{\n   return 1;\n }\n \n@@ -17,7 +17,7 @@ inline int func2 (void)\n   return 2;\n }\n \n-inline int func2 (void)\n-{ /* { dg-error \"redefinition\" } */\n+inline int func2 (void) /* { dg-error \"redefinition\" } */\n+{\n   return 2;\n }"}, {"sha": "7faded6bd8cf823705929b9e833b1b637796057a", "filename": "gcc/testsuite/gcc.dg/pr20368-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-2.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -6,7 +6,7 @@\n extern __typeof (f) g; /* { dg-error \"'f' undeclared here \\\\(not in a function\\\\)\" } */\n \n int\n-f (x)\n-     float x; /* { dg-warning \"no previous prototype for 'f'\" } */\n+f (x) /* { dg-warning \"no previous prototype for 'f'\" } */\n+     float x;\n {\n }"}, {"sha": "0d0ea6dfcc33294eebad7069b3ca60e5e0cec08b", "filename": "gcc/testsuite/gcc.dg/pr20368-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20368-3.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -6,7 +6,7 @@\n extern __typeof (f) g; /* { dg-error \"'f' undeclared here \\\\(not in a function\\\\)\" } */\n \n int\n-f (x)\n-     float x; /* { dg-warning \"no previous declaration for 'f'\" } */\n+f (x) /* { dg-warning \"no previous declaration for 'f'\" } */\n+     float x;\n {\n }"}, {"sha": "61d6e5b307a2812e094f0f6cd26841aa452af515", "filename": "gcc/testsuite/gcc.dg/redecl-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af28c745214bb36de18d625705d6328373164cb/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c?ref=5af28c745214bb36de18d625705d6328373164cb", "patch": "@@ -76,8 +76,8 @@ void test5(void)\n /* Extern then static, both at file scope.  */\n \n extern int test6(int);\t\t/* { dg-error \"previous\" \"\" } */\n-static int test6(int x)\t\t\t\n-{ return x; }\t\t\t/* { dg-error \"follows non-static\" } */\n+static int test6(int x)\t\t/* { dg-error \"follows non-static\" } */\n+{ return x; }\n \n \n /* Extern then static, extern at previous function scope.  */\n@@ -87,8 +87,8 @@ void prime7(void)\n   extern int test7(int);\t/* { dg-error \"previous\" \"\" } */\n }\n \n-static int test7(int x)\n-{ return x; }\t\t\t/* { dg-error \"follows non-static\" } */\n+static int test7(int x)\t\t/* { dg-error \"follows non-static\" } */\n+{ return x; }\n \n /* Implicit decl then static.  */\n \n@@ -98,5 +98,5 @@ void prime8(void)\n                                 /* { dg-warning \"implicit\" \"implicit\" { target *-*-* } 97 } */\n }\n \n-static int test8(int x)\n-{ return x; }\t\t\t/* { dg-error \"follows non-static\" } */\n+static int test8(int x)\t\t/* { dg-error \"follows non-static\" } */\n+{ return x; }"}]}