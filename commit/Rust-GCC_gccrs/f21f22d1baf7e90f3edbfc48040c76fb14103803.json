{"sha": "f21f22d1baf7e90f3edbfc48040c76fb14103803", "node_id": "C_kwDOANBUbNoAKGYyMWYyMmQxYmFmN2U5MGYzZWRiZmM0ODA0MGM3NmZiMTQxMDM4MDM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-26T16:08:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-27T22:24:29Z"}, "message": "libstdc++: Avoid overflow in ranges::advance(i, n, bound)\n\nWhen (bound - i) or n is the most negative value of its type, the\nnegative of the value will overflow. Instead of abs(n) >= abs(bound - i)\nuse n >= (bound - i) when positive and n <= (bound - i) when negative.\nThe function has a precondition that they must have the same sign, so\nthis works correctly. The precondition check can be moved into the else\nbranch, and simplified.\n\nThe standard requires calling ranges::advance(i, bound) even if i==bound\nis already true, which is technically observable, but that's pointless.\nWe can just return n in that case. Similarly, for i!=bound but n==0 we\nare supposed to call ranges::advance(i, n), but that's pointless. An LWG\nissue to allow omitting the pointless calls is expected to be filed.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (ranges::advance): Avoid signed\n\toverflow. Do nothing if already equal to desired result.\n\t* testsuite/24_iterators/range_operations/advance_overflow.cc:\n\tNew test.", "tree": {"sha": "73188c6f671ab823be094485ebad7a562b5caa29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73188c6f671ab823be094485ebad7a562b5caa29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f21f22d1baf7e90f3edbfc48040c76fb14103803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f22d1baf7e90f3edbfc48040c76fb14103803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21f22d1baf7e90f3edbfc48040c76fb14103803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f22d1baf7e90f3edbfc48040c76fb14103803/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b86171188dcb61d2d0e0a4a98a7467e58a84a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b86171188dcb61d2d0e0a4a98a7467e58a84a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b86171188dcb61d2d0e0a4a98a7467e58a84a7"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "3c5f4b1790af0734cb0dcba8430b912cd8c83370", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f22d1baf7e90f3edbfc48040c76fb14103803/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f22d1baf7e90f3edbfc48040c76fb14103803/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=f21f22d1baf7e90f3edbfc48040c76fb14103803", "patch": "@@ -756,20 +756,23 @@ namespace ranges\n \t  {\n \t    const auto __diff = __bound - __it;\n \n-\t    // n and bound must not lead in opposite directions:\n-\t    __glibcxx_assert(__n == 0 || __diff == 0 || (__n < 0 == __diff < 0));\n-\t    const auto __absdiff = __diff < 0 ? -__diff : __diff;\n-\t    const auto __absn = __n < 0 ? -__n : __n;;\n-\t    if (__absn >= __absdiff)\n+\t    if (__diff == 0)\n+\t      return __n;\n+\t    else if (__diff > 0 ? __n >= __diff : __n <= __diff)\n \t      {\n \t\t(*this)(__it, __bound);\n \t\treturn __n - __diff;\n \t      }\n-\t    else\n+\t    else if (__n != 0) [[likely]]\n \t      {\n+\t\t// n and bound must not lead in opposite directions:\n+\t\t__glibcxx_assert(__n < 0 == __diff < 0);\n+\n \t\t(*this)(__it, __n);\n \t\treturn 0;\n \t      }\n+\t    else\n+\t      return 0;\n \t  }\n \telse if (__it == __bound || __n == 0)\n \t  return __n;"}, {"sha": "0fadcd6e99a4d7bc93a0a4a33f80b7c348bb3cd8", "filename": "libstdc++-v3/testsuite/24_iterators/range_operations/advance_overflow.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f22d1baf7e90f3edbfc48040c76fb14103803/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fadvance_overflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f22d1baf7e90f3edbfc48040c76fb14103803/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fadvance_overflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fadvance_overflow.cc?ref=f21f22d1baf7e90f3edbfc48040c76fb14103803", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+// Public domain testcase from Casey Carter, send to LWG list on 2021-07-24.\n+//\n+// Here's a compile-only test case for which n is INT_MIN, which will overflow\n+// if simply negated to get |n|: https://godbolt.org/z/M7Wz1nW58.\n+\n+#include <cassert>\n+#include <iterator>\n+#include <limits>\n+\n+struct I {\n+    using difference_type = int;\n+    using value_type = int;\n+\n+    int x;\n+\n+    constexpr int operator*() const { return x; }\n+    constexpr I& operator++() { ++x; return *this; }\n+    constexpr I operator++(int) { ++x; return {x - 1}; }\n+    constexpr bool operator==(const I&) const = default;\n+\n+    constexpr int operator-(const I& that) const { return x - that.x; }\n+\n+    constexpr I& operator--() { --x; return *this; }\n+    constexpr I operator--(int) { --x; return {x - 1}; }\n+};\n+static_assert(std::bidirectional_iterator<I>);\n+static_assert(std::sized_sentinel_for<I, I>);\n+\n+constexpr bool test() {\n+    using L = std::numeric_limits<int>;\n+    I i{-2};\n+    return std::ranges::advance(i, L::min(), I{-4}) == L::min() + 2;\n+}\n+static_assert(test());"}]}