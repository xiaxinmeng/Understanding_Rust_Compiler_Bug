{"sha": "b3f3bba3fa08a3d6b254071c10abd941d57bf0b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmM2JiYTNmYTA4YTNkNmIyNTQwNzFjMTBhYmQ5NDFkNTdiZjBiOQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "message": "VAX: Ensure PIC mode address is adjustable with aligned bit-field insns\n\nWith the `*insv_aligned', `*extzv_aligned' and `*extv_aligned' insns we\nare going to adjust the bit-field location if it is in memory, so only\nallow such location addresses that can be offset, excluding external\nsymbol references in the PIC mode in particular.\n\nThis fixes an ICE like:\n\nduring RTL pass: final\nIn file included from .../gcc/testsuite/gcc.dg/torture/vshuf-v16qi.c:11:\n.../gcc/testsuite/gcc.dg/torture/vshuf-main.inc: In function 'test_13':\n.../gcc/testsuite/gcc.dg/torture/vshuf-main.inc:27:1: internal compiler error: in change_address_1, at emit-rtl.c:2275\n.../gcc/testsuite/gcc.dg/torture/vshuf-16.inc:16:1: note: in expansion of macro 'T'\n.../gcc/testsuite/gcc.dg/torture/vshuf-main.inc:28:1: note: in expansion of macro 'TESTS'\n0x10a34b33 change_address_1\n\t.../gcc/emit-rtl.c:2275\n0x10a358af adjust_address_1(rtx_def*, machine_mode, poly_int<1u, long>, int, int, int, poly_int<1u, long>)\n\t.../gcc/emit-rtl.c:2409\n0x11d2505f output_97\n\t.../gcc/config/vax/vax.md:806\n0x10adec4b get_insn_template(int, rtx_insn*)\n\t.../gcc/final.c:2070\n0x10ae1c5b final_scan_insn_1\n\t.../gcc/final.c:3039\n0x10ae2257 final_scan_insn(rtx_insn*, _IO_FILE*, int, int, int*)\n\t.../gcc/final.c:3152\n0x10ade9a3 final_1\n\t.../gcc/final.c:2020\n0x10ae6157 rest_of_handle_final\n\t.../gcc/final.c:4658\n0x10ae6697 execute\n\t.../gcc/final.c:4736\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://gcc.gnu.org/bugs/> for instructions.\ncompiler exited with status 1\nFAIL: gcc.dg/torture/vshuf-v16qi.c   -O2  (internal compiler error)\n\ntriggered by an RTL instruction like:\n\n(insn 97 96 98 (set (reg:SI 5 %r5 [88])\n        (zero_extract:SI (mem/c:SI (symbol_ref:SI (\"b\") <var_decl 0x7ffff7f801b0 b>) [0 b+0 S4 A128])\n            (const_int 8 [0x8])\n            (const_int 24 [0x18]))) \".../gcc/testsuite/gcc.dg/torture/vshuf-main.inc\":28:1 97 {*extzv_aligned}\n     (nil))\n\nand removes these regressions:\n\nFAIL: gcc.dg/torture/vshuf-v16qi.c   -O2  (internal compiler error)\nFAIL: gcc.dg/torture/vshuf-v16qi.c   -O2  (test for excess errors)\nFAIL: gcc.dg/torture/vshuf-v4hi.c   -O2  (internal compiler error)\nFAIL: gcc.dg/torture/vshuf-v4hi.c   -O2  (test for excess errors)\nFAIL: gcc.dg/torture/vshuf-v8hi.c   -O2  (internal compiler error)\nFAIL: gcc.dg/torture/vshuf-v8hi.c   -O2  (test for excess errors)\nFAIL: gcc.dg/torture/vshuf-v8qi.c   -O2  (internal compiler error)\nFAIL: gcc.dg/torture/vshuf-v8qi.c   -O2  (test for excess errors)\n\nHowever expand typically presents pseudo-registers rather than memory\nreferences to these insns, so a further rework is required to make a\nbetter use of the code variant they are supposed to produce.  This at\nleast fixes the problem at hand.\n\n\tgcc/\n\t* config/vax/vax.md (*insv_aligned, *extzv_aligned)\n\t(*extv_aligned): Also make sure the memory address of a bit-field\n\tlocation can be adjusted in the PIC mode.", "tree": {"sha": "24766c0c9bbfe2caaa9829b9789498c3078d55bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24766c0c9bbfe2caaa9829b9789498c3078d55bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9/comments", "author": null, "committer": null, "parents": [{"sha": "8a8de7507e1cfa2e7a16940a1ad93eb339258042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8de7507e1cfa2e7a16940a1ad93eb339258042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8de7507e1cfa2e7a16940a1ad93eb339258042"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "f90ae89391f1c30c3bda10dc64e673d735c6eccd", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=b3f3bba3fa08a3d6b254071c10abd941d57bf0b9", "patch": "@@ -762,11 +762,14 @@\n \t\t\t (match_operand:QI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t(match_operand:SI 3 \"general_operand\" \"g\"))]\n-   \"(INTVAL (operands[1]) == 8 || INTVAL (operands[1]) == 16)\n+  \"(INTVAL (operands[1]) == 8 || INTVAL (operands[1]) == 16)\n    && INTVAL (operands[2]) % INTVAL (operands[1]) == 0\n    && (!MEM_P (operands[0])\n-       || ! mode_dependent_address_p (XEXP (operands[0], 0),\n-\t\t\t\t      MEM_ADDR_SPACE (operands[0])))\n+       || ((!flag_pic\n+\t    || vax_acceptable_pic_operand_p (XEXP (operands[0], 0),\n+\t\t\t\t\t     true, true))\n+\t   && !mode_dependent_address_p (XEXP (operands[0], 0),\n+\t\t\t\t\t MEM_ADDR_SPACE (operands[0]))))\n    && (!(REG_P (operands[0])\n \t || (SUBREG_P (operands[0]) && REG_P (SUBREG_REG (operands[0]))))\n        || INTVAL (operands[2]) == 0)\"\n@@ -794,8 +797,11 @@\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (!MEM_P (operands[1])\n-       || ! mode_dependent_address_p (XEXP (operands[1], 0),\n-\t\t\t\t      MEM_ADDR_SPACE (operands[1])))\n+       || ((!flag_pic\n+\t    || vax_acceptable_pic_operand_p (XEXP (operands[1], 0),\n+\t\t\t\t\t     true, true))\n+\t   && !mode_dependent_address_p (XEXP (operands[1], 0),\n+\t\t\t\t\t MEM_ADDR_SPACE (operands[1]))))\n    && (!(REG_P (operands[1])\n \t || (SUBREG_P (operands[1]) && REG_P (SUBREG_REG (operands[1]))))\n        || INTVAL (operands[3]) == 0)\"\n@@ -822,8 +828,11 @@\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (!MEM_P (operands[1])\n-       || ! mode_dependent_address_p (XEXP (operands[1], 0),\n-\t\t\t\t      MEM_ADDR_SPACE (operands[1])))\n+       || ((!flag_pic\n+\t    || vax_acceptable_pic_operand_p (XEXP (operands[1], 0),\n+\t\t\t\t\t     true, true))\n+\t   && !mode_dependent_address_p (XEXP (operands[1], 0),\n+\t\t\t\t\t MEM_ADDR_SPACE (operands[1]))))\n    && (!(REG_P (operands[1])\n \t || (SUBREG_P (operands[1]) && REG_P (SUBREG_REG (operands[1]))))\n        || INTVAL (operands[3]) == 0)\""}]}