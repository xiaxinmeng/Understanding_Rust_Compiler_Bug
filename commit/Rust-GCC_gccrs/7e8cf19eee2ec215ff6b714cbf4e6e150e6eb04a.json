{"sha": "7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "node_id": "C_kwDOANBUbNoAKDdlOGNmMTllZWUyZWMyMTVmZjZiNzE0Y2JmNGU2ZTE1MGU2ZWIwNGE", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:39:25Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:22Z"}, "message": "arm: improve tests for vqaddq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u8.c: Likewise.", "tree": {"sha": "5edd1ff889c8202884921b58d6770595897ed219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5edd1ff889c8202884921b58d6770595897ed219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e73978c92be03d54f81d047ad79102c0efcbc5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e73978c92be03d54f81d047ad79102c0efcbc5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e73978c92be03d54f81d047ad79102c0efcbc5b"}], "stats": {"total": 588, "additions": 516, "deletions": 72}, "files": [{"sha": "a659373d441aed8877a9f9ee17476e286b35b811", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vqaddq_m_n_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8ffc6a67762e1adf132eaac37cc5e484d7d1bf85", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vqaddq_m_n_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2e88b7fabacaa91faa70eaa1c571ac3859606a73", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vqaddq_m_n_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "61cf9fcf2aa4ddca16e414fc3d5d7c67d2a511e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vqaddq_m_n_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bbd255ac1f1ca8b90b76921dd0aa4311f60b529e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vqaddq_m_n_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9cee8c65333e4dc669dd3f1ac113de404486159e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vqaddq_m_n_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8bb8a95742391af8d0eff733bf7bde0e06588ed6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vqaddq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9959724fc11f71c3db108c9022b2db57733ff86e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vqaddq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6b918978880877e24b362e37dfbfc357602650f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vqaddq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c0a8d9ba9c8b3fc44b7b944ce3af2a435add48c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_u16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vqaddq_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7a72ce578400321868a66a8a130d2968cdbf2b6c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vqaddq_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f7e6ca9b5a46e077182db580502ada37e96841af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_u8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vqaddq_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqaddt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vqaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0fac7abeac0c967f79f1a836543bafc1032751c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16_t b)\n {\n   return vqaddq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d750b1f2c146b98320f7dd282628ccc5f6102621", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32_t b)\n {\n   return vqaddq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5fc796edf754a2dc576831673d2c28331e298db2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vqaddq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "decad65c1881caf2ddbb06ccee41b1e111e9e340", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16_t b)\n {\n   return vqaddq_n_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvqadd.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t a)\n+{\n+  return vqaddq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b0a6d79093e3680a826483ae623c5d55c83f65b6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32_t b)\n {\n   return vqaddq_n_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvqadd.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t a)\n+{\n+  return vqaddq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f9ca9a1f042f128637cb3e3f84ea7033600e7806", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8_t b)\n {\n   return vqaddq_n_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvqadd.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t a)\n+{\n+  return vqaddq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ffa31463372665b08e6d67c303f13051bd73140c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vqaddq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c5937a967ffb83a5276d3148c45d0a3b864cd4c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vqaddq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f937512811f16175dd038142972729b2a826028", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vqaddq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "aa4be43f244f03328016a20f6b516497a834ba73", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_u16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u16.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vqaddq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "daef60eb5ca235ac7cbcdd94f9e7b17f5014ed32", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_u32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u32.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vqaddq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e28807ec70803695791c7d96933b854fe3c84022", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_u8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u8.c?ref=7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvqadd.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vqaddq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqadd.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vqaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}