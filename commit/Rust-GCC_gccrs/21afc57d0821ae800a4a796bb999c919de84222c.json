{"sha": "21afc57d0821ae800a4a796bb999c919de84222c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhZmM1N2QwODIxYWU4MDBhNGE3OTZiYjk5OWM5MTlkZTg0MjIyYw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-02T21:03:53Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-02T21:03:53Z"}, "message": "change local vars to rtx_insn *\n\ngcc/ChangeLog:\n\n2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* builtins.c (expand_builtin_trap): Change type of local\n\tvariable to rtx_insn *.\n\t* config/arc/arc.md: Likewise.\n\t* config/arm/arm.c (arm_barrier_cost): Likewise.\n\t* config/avr/avr.c (avr_reorg): Likewise.\n\t* config/bfin/bfin.c (workaround_speculation): Likewise.\n\t(add_sched_insns_for_speculation): Likewise.\n\t* config/i386/i386.c (ix86_init_pic_reg): Likewise.\n\t(ix86_emit_save_regs): Likewise.\n\t(get_scratch_register_on_entry): Likewise.\n\t(ix86_emit_restore_reg_using_pop): Likewise.\n\t(ix86_emit_leave): Likewise.\n\t(ix86_emit_restore_regs_using_mov): Likewise.\n\t(ix86_expand_epilogue): Likewise.\n\t* config/rl78/rl78.c (rl78_alloc_physical_registers_cmp):\n\tLikewise.\n\t(rl78_alloc_physical_registers_umul): Likewise.\n\t* config/sh/sh.md: Likewise.\n\t* cselib.c (discard_useless_locs): Likewise.\n\t(cselib_invalidate_regno): Likewise.\n\t(cselib_invalidate_mem): Likewise.\n\t* function.c (expand_function_start): Likewise.\n\t(emit_use_return_register_into_block): Likewise.\n\t* gcse.c: Likewise.\n\t* haifa-sched.c (ok_for_early_queue_removal): Likewise.\n\t* ifcvt.c (noce_get_alt_condition): Likewise.\n\t* loop-doloop.c (doloop_condition_get): Likewise.\n\t* lra-constraints.c (inherit_in_ebb): Likewise.\n\t* modulo-sched.c (sms_schedule_by_order): Likewise.\n\t* recog.c (next_insn_tests_no_inequality): Likewise.\n\t* reorg.c (emit_delay_sequence): Likewise.\n\t(update_reg_dead_notes): Likewise.\n\t(fix_reg_dead_note): Likewise.\n\t(fill_slots_from_thread): Likewise.\n\t(delete_computation): Likewise.\n\nFrom-SVN: r222730", "tree": {"sha": "ae3aefb83be277df16789b73b7f18ff32a473265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae3aefb83be277df16789b73b7f18ff32a473265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21afc57d0821ae800a4a796bb999c919de84222c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21afc57d0821ae800a4a796bb999c919de84222c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21afc57d0821ae800a4a796bb999c919de84222c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21afc57d0821ae800a4a796bb999c919de84222c/comments", "author": null, "committer": null, "parents": [{"sha": "563777d7fc12734a838980284a62c6330e1dfd72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563777d7fc12734a838980284a62c6330e1dfd72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563777d7fc12734a838980284a62c6330e1dfd72"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "b278655655356d75c2663b6ceab1fb79378ed710", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -1,3 +1,34 @@\n+2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* builtins.c (expand_builtin_trap): Change type of local\n+\tvariable to rtx_insn *.\n+\t(add_sched_insns_for_speculation): Likewise.\n+\t(ix86_emit_save_regs): Likewise.\n+\t(get_scratch_register_on_entry): Likewise.\n+\t(ix86_emit_restore_reg_using_pop): Likewise.\n+\t(ix86_emit_leave): Likewise.\n+\t(ix86_emit_restore_regs_using_mov): Likewise.\n+\t(ix86_expand_epilogue): Likewise.\n+\tLikewise.\n+\t(rl78_alloc_physical_registers_umul): Likewise.\n+\t* cselib.c (discard_useless_locs): Likewise.\n+\t(cselib_invalidate_regno): Likewise.\n+\t(cselib_invalidate_mem): Likewise.\n+\t* function.c (expand_function_start): Likewise.\n+\t(emit_use_return_register_into_block): Likewise.\n+\t* gcse.c: Likewise.\n+\t* haifa-sched.c (ok_for_early_queue_removal): Likewise.\n+\t* ifcvt.c (noce_get_alt_condition): Likewise.\n+\t* loop-doloop.c (doloop_condition_get): Likewise.\n+\t* lra-constraints.c (inherit_in_ebb): Likewise.\n+\t* modulo-sched.c (sms_schedule_by_order): Likewise.\n+\t* recog.c (next_insn_tests_no_inequality): Likewise.\n+\t* reorg.c (emit_delay_sequence): Likewise.\n+\t(update_reg_dead_notes): Likewise.\n+\t(fix_reg_dead_note): Likewise.\n+\t(fill_slots_from_thread): Likewise.\n+\t(delete_computation): Likewise.\n+\n 2015-05-01  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi (Variable Attributes): Add menu and proper"}, {"sha": "6fe1456e92d2ae3f02c035881b424e7f538e0a6f", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -4754,7 +4754,7 @@ expand_builtin_trap (void)\n #ifdef HAVE_trap\n   if (HAVE_trap)\n     {\n-      rtx insn = emit_insn (gen_trap ());\n+      rtx_insn *insn = emit_insn (gen_trap ());\n       /* For trap insns when not accumulating outgoing args force\n \t REG_ARGS_SIZE note to prevent crossjumping of calls with\n \t different args sizes.  */"}, {"sha": "ce601822302a94e370ceff49a6ef8ca48c1c1c4b", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -4877,7 +4877,7 @@\n     {\n       /* At least four instructions are needed between the setting of LP_COUNT\n \t and the loop end - but the lp instruction qualifies as one.  */\n-      rtx prev = prev_nonnote_insn (insn);\n+      rtx_insn *prev = prev_nonnote_insn (insn);\n \n       if (!INSN_P (prev) || dead_or_set_regno_p (prev, LP_COUNT))\n \toutput_asm_insn (\"nop\", operands);\n@@ -4933,7 +4933,7 @@\n   \"\"\n   \"*\n {\n-  rtx prev = prev_nonnote_insn (insn);\n+  rtx_insn *prev = prev_nonnote_insn (insn);\n \n   /* If there is an immediately preceding label, we must output a nop,\n      lest a branch to that label will fall out of the loop."}, {"sha": "666ef4267077bed54bbbcfc0485e73864eae77cc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -16609,7 +16609,7 @@ arm_barrier_cost (rtx insn)\n      but at the moment, the basic block information seems to be\n      corrupt by this stage of the compilation.  */\n   int base_cost = 50;\n-  rtx next = next_nonnote_insn (insn);\n+  rtx_insn *next = next_nonnote_insn (insn);\n \n   if (next != NULL && LABEL_P (next))\n     base_cost -= 20;"}, {"sha": "205fcdb02bf9caf17447c75a996480090cbd376d", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -11094,7 +11094,7 @@ avr_reorg (void)\n \t{\n           /* Now we work under compare insn with difficult branch.  */\n \n-          rtx next = next_real_insn (insn);\n+\t  rtx_insn *next = next_real_insn (insn);\n           rtx pat = PATTERN (next);\n \n           pattern = SET_SRC (pattern);"}, {"sha": "e8e8a4f99b928521c9186c4cb0b0fa2a42f297c8", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -4521,7 +4521,7 @@ workaround_speculation (void)\n \n \t\t  if (delay_needed > cycles_since_jump)\n \t\t    {\n-\t\t      rtx prev = prev_real_insn (label);\n+\t\t      rtx_insn *prev = prev_real_insn (label);\n \t\t      delay_needed -= cycles_since_jump;\n \t\t      if (dump_file)\n \t\t\tfprintf (dump_file, \"Adding %d nops after %d\\n\",\n@@ -4587,7 +4587,7 @@ add_sched_insns_for_speculation (void)\n \t  if (any_condjump_p (insn)\n \t      && !cbranch_predicted_taken_p (insn))\n \t    {\n-\t      rtx n = next_real_insn (insn);\n+\t      rtx_insn *n = next_real_insn (insn);\n \t      emit_insn_before (gen_stall (GEN_INT (3)), n);\n \t    }\n \t}"}, {"sha": "d5692446ab94a4c9c438329604d000e69d89aa1b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -6407,7 +6407,7 @@ ix86_init_pic_reg (void)\n       rtx reg = crtl->profile\n \t\t? gen_rtx_REG (Pmode, REAL_PIC_OFFSET_TABLE_REGNUM)\n \t\t: pic_offset_table_rtx;\n-      rtx insn = emit_insn (gen_set_got (reg));\n+      rtx_insn *insn = emit_insn (gen_set_got (reg));\n       RTX_FRAME_RELATED_P (insn) = 1;\n       if (crtl->profile)\n         emit_move_insn (pic_offset_table_rtx, reg);\n@@ -10373,7 +10373,7 @@ static void\n ix86_emit_save_regs (void)\n {\n   unsigned int regno;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   for (regno = FIRST_PSEUDO_REGISTER - 1; regno-- > 0; )\n     if (!SSE_REGNO_P (regno) && ix86_save_reg (regno, true))\n@@ -10837,7 +10837,7 @@ get_scratch_register_on_entry (struct scratch_reg *sr)\n   sr->reg = gen_rtx_REG (Pmode, regno);\n   if (sr->saved)\n     {\n-      rtx insn = emit_insn (gen_push (sr->reg));\n+      rtx_insn *insn = emit_insn (gen_push (sr->reg));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n }\n@@ -11804,7 +11804,7 @@ static void\n ix86_emit_restore_reg_using_pop (rtx reg)\n {\n   struct machine_function *m = cfun->machine;\n-  rtx insn = emit_insn (gen_pop (reg));\n+  rtx_insn *insn = emit_insn (gen_pop (reg));\n \n   ix86_add_cfa_restore_note (insn, reg, m->fs.sp_offset);\n   m->fs.sp_offset -= UNITS_PER_WORD;\n@@ -11874,7 +11874,7 @@ static void\n ix86_emit_leave (void)\n {\n   struct machine_function *m = cfun->machine;\n-  rtx insn = emit_insn (ix86_gen_leave ());\n+  rtx_insn *insn = emit_insn (ix86_gen_leave ());\n \n   ix86_add_queued_cfa_restore_notes (insn);\n \n@@ -11910,7 +11910,8 @@ ix86_emit_restore_regs_using_mov (HOST_WIDE_INT cfa_offset,\n     if (!SSE_REGNO_P (regno) && ix86_save_reg (regno, maybe_eh_return))\n       {\n \trtx reg = gen_rtx_REG (word_mode, regno);\n-\trtx insn, mem;\n+\trtx mem;\n+\trtx_insn *insn;\n \n \tmem = choose_baseaddr (cfa_offset);\n \tmem = gen_frame_mem (word_mode, mem);\n@@ -12082,7 +12083,8 @@ ix86_expand_epilogue (int style)\n       /* eh_return epilogues need %ecx added to the stack pointer.  */\n       if (style == 2)\n \t{\n-\t  rtx insn, sa = EH_RETURN_STACKADJ_RTX;\n+\t  rtx sa = EH_RETURN_STACKADJ_RTX;\n+\t  rtx_insn *insn;\n \n \t  /* Stack align doesn't work with eh_return.  */\n \t  gcc_assert (!stack_realign_drap);\n@@ -12210,7 +12212,7 @@ ix86_expand_epilogue (int style)\n   if (using_drap)\n     {\n       int param_ptr_offset = UNITS_PER_WORD;\n-      rtx insn;\n+      rtx_insn *insn;\n \n       gcc_assert (stack_realign_drap);\n \n@@ -12272,7 +12274,7 @@ ix86_expand_epilogue (int style)\n       if (crtl->args.pops_args >= 65536)\n \t{\n \t  rtx ecx = gen_rtx_REG (SImode, CX_REG);\n-\t  rtx insn;\n+\t  rtx_insn *insn;\n \n \t  /* There is no \"pascal\" calling convention in any 64bit ABI.  */\n \t  gcc_assert (!TARGET_64BIT);"}, {"sha": "0ca5515f84e07a37a6dafbb10334495bc330e823", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -3262,7 +3262,7 @@ rl78_alloc_physical_registers_cmp (rtx_insn * insn)\n {\n   int tmp_id;\n   rtx saved_op1;\n-  rtx prev = prev_nonnote_nondebug_insn (insn);\n+  rtx_insn *prev = prev_nonnote_nondebug_insn (insn);\n   rtx first;\n \n   OP (1) = transcode_memory_rtx (OP (1), DE, insn);\n@@ -3353,7 +3353,7 @@ rl78_alloc_physical_registers_cmp (rtx_insn * insn)\n static void\n rl78_alloc_physical_registers_umul (rtx_insn * insn)\n {\n-  rtx prev = prev_nonnote_nondebug_insn (insn);\n+  rtx_insn *prev = prev_nonnote_nondebug_insn (insn);\n   rtx first;\n   int tmp_id;\n   rtx saved_op1;"}, {"sha": "5c0e7077601ff213814c57e5750fb321381b3b1c", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -5964,7 +5964,7 @@ label:\n    When we're here, the not:SI pattern obviously has been matched already\n    and we only have to see whether the following insn is the left shift.  */\n \n-  rtx i = next_nonnote_insn_bb (curr_insn);\n+  rtx_insn *i = next_nonnote_insn_bb (curr_insn);\n   if (i == NULL_RTX || !NONJUMP_INSN_P (i))\n     FAIL;\n "}, {"sha": "5256a6e64b6bb44f00be4101121140640cfb49f8", "filename": "gcc/cselib.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -642,7 +642,7 @@ discard_useless_locs (cselib_val **x, void *info ATTRIBUTE_UNUSED)\n   cselib_val *v = *x;\n   struct elt_loc_list **p = &v->locs;\n   bool had_locs = v->locs != NULL;\n-  rtx setting_insn = v->locs ? v->locs->setting_insn : NULL;\n+  rtx_insn *setting_insn = v->locs ? v->locs->setting_insn : NULL;\n \n   while (*p)\n     {\n@@ -2190,7 +2190,7 @@ cselib_invalidate_regno (unsigned int regno, machine_mode mode)\n \t{\n \t  cselib_val *v = (*l)->elt;\n \t  bool had_locs;\n-\t  rtx setting_insn;\n+\t  rtx_insn *setting_insn;\n \t  struct elt_loc_list **p;\n \t  unsigned int this_last = i;\n \n@@ -2268,7 +2268,7 @@ cselib_invalidate_mem (rtx mem_rtx)\n       bool has_mem = false;\n       struct elt_loc_list **p = &v->locs;\n       bool had_locs = v->locs != NULL;\n-      rtx setting_insn = v->locs ? v->locs->setting_insn : NULL;\n+      rtx_insn *setting_insn = v->locs ? v->locs->setting_insn : NULL;\n \n       while (*p)\n \t{"}, {"sha": "83e87a2eba954e3a1cb82b0886afaafebc62739d", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -5094,7 +5094,8 @@ expand_function_start (tree subr)\n   if (cfun->static_chain_decl)\n     {\n       tree parm = cfun->static_chain_decl;\n-      rtx local, chain, insn;\n+      rtx local, chain;\n+     rtx_insn *insn;\n \n       local = gen_reg_rtx (Pmode);\n       chain = targetm.calls.static_chain (current_function_decl, true);\n@@ -5657,7 +5658,8 @@ prologue_epilogue_contains (const_rtx insn)\n static void\n emit_use_return_register_into_block (basic_block bb)\n {\n-  rtx seq, insn;\n+  rtx seq;\n+ rtx_insn *insn;\n   start_sequence ();\n   use_return_register ();\n   seq = get_insns ();"}, {"sha": "cf02bab5bff6762dadc50baa2761e0c7ce1a82b4", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -573,7 +573,8 @@ compute_can_copy (void)\n {\n   int i;\n #ifndef AVOID_CCMODE_COPIES\n-  rtx reg, insn;\n+  rtx reg;\n+ rtx_insn *insn;\n #endif\n   memset (can_copy, 0, NUM_MACHINE_MODES);\n "}, {"sha": "9a662d0bdb2a19742f63a5ab9b29ca79bafe7672", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -5241,7 +5241,6 @@ ok_for_early_queue_removal (rtx insn)\n {\n   if (targetm.sched.is_costly_dependence)\n     {\n-      rtx prev_insn;\n       int n_cycles;\n       int i = scheduled_insns.length ();\n       for (n_cycles = flag_sched_stalled_insns_dep; n_cycles; n_cycles--)\n@@ -5250,7 +5249,7 @@ ok_for_early_queue_removal (rtx insn)\n \t    {\n \t      int cost;\n \n-\t      prev_insn = scheduled_insns[i];\n+\t      rtx_insn *prev_insn = scheduled_insns[i];\n \n \t      if (!NOTE_P (prev_insn))\n \t\t{"}, {"sha": "8d8d4a846405340144a8aabe6adcc4596d2312a5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -1864,7 +1864,7 @@ noce_get_alt_condition (struct noce_if_info *if_info, rtx target,\n       enum rtx_code code = GET_CODE (if_info->cond);\n       rtx op_a = XEXP (if_info->cond, 0);\n       rtx op_b = XEXP (if_info->cond, 1);\n-      rtx prev_insn;\n+      rtx_insn *prev_insn;\n \n       /* First, look to see if we put a constant in a register.  */\n       prev_insn = prev_nonnote_insn (if_info->cond_earliest);"}, {"sha": "460786771a0aafec0f0d0da0992c6e5eb55f8b47", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -141,7 +141,7 @@ doloop_condition_get (rtx doloop_pat)\n   if (GET_CODE (pattern) != PARALLEL)\n     {\n       rtx cond;\n-      rtx prev_insn = prev_nondebug_insn (doloop_pat);\n+      rtx_insn *prev_insn = prev_nondebug_insn (doloop_pat);\n       rtx cmp_arg1, cmp_arg2;\n       rtx cmp_orig;\n "}, {"sha": "791f7deca73ecaa478c097323edddcc57e158dc2", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -5567,7 +5567,7 @@ inherit_in_ebb (rtx_insn *head, rtx_insn *tail)\n \t\t\t   || reg_renumber[src_regno] >= 0)\n \t\t    {\n \t\t      bool before_p;\n-\t\t      rtx use_insn = curr_insn;\n+\t\t      rtx_insn *use_insn = curr_insn;\n \n \t\t      before_p = (JUMP_P (curr_insn)\n \t\t\t\t  || (CALL_P (curr_insn) && reg->type == OP_IN));"}, {"sha": "8b0b0d44948df6f8a49f2a67c697f1a238f55d32", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -2203,7 +2203,7 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order)\n \t{\n \t  int u = nodes_order[i];\n   \t  ddg_node_ptr u_node = &ps->g->nodes[u];\n-\t  rtx insn = u_node->insn;\n+\t  rtx_insn *insn = u_node->insn;\n \n \t  if (!NONDEBUG_INSN_P (insn))\n \t    {"}, {"sha": "a5be34c21bd83377f3b13332f1a1ae8617950309", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -978,7 +978,7 @@ validate_simplify_insn (rtx insn)\n int\n next_insn_tests_no_inequality (rtx insn)\n {\n-  rtx next = next_cc0_user (insn);\n+  rtx_insn *next = next_cc0_user (insn);\n \n   /* If there is no next insn, we have to take the conservative choice.  */\n   if (next == 0)"}, {"sha": "a0674e4e0ad04c10df81827a08a1ab512e072791", "filename": "gcc/reorg.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc57d0821ae800a4a796bb999c919de84222c/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=21afc57d0821ae800a4a796bb999c919de84222c", "patch": "@@ -535,7 +535,7 @@ emit_delay_sequence (rtx_insn *insn, rtx_insn_list *list, int length)\n \n   /* Unlink INSN from the insn chain, so that we can put it into\n      the SEQUENCE.   Remember where we want to emit SEQUENCE in AFTER.  */\n-  rtx after = PREV_INSN (insn);\n+  rtx_insn *after = PREV_INSN (insn);\n   remove_insn (insn);\n   SET_NEXT_INSN (insn) = SET_PREV_INSN (insn) = NULL;\n \n@@ -1809,7 +1809,8 @@ reorg_redirect_jump (rtx_insn *jump, rtx nlabel)\n static void\n update_reg_dead_notes (rtx insn, rtx delayed_insn)\n {\n-  rtx p, link, next;\n+  rtx link, next;\n+  rtx_insn *p;\n \n   for (p = next_nonnote_insn (insn); p != delayed_insn;\n        p = next_nonnote_insn (p))\n@@ -1842,7 +1843,8 @@ update_reg_dead_notes (rtx insn, rtx delayed_insn)\n static void\n fix_reg_dead_note (rtx start_insn, rtx stop_insn)\n {\n-  rtx p, link, next;\n+  rtx link, next;\n+  rtx_insn *p;\n \n   for (p = next_nonnote_insn (start_insn); p != stop_insn;\n        p = next_nonnote_insn (p))\n@@ -2693,7 +2695,7 @@ fill_slots_from_thread (rtx_insn *insn, rtx condition, rtx thread_or_return,\n \t  && REG_P (SET_DEST (pat))\n \t  && !reg_overlap_mentioned_p (SET_DEST (pat), SET_SRC (pat)))\n \t{\n-\t  rtx next = next_nonnote_insn (trial);\n+\t  rtx_insn *next = next_nonnote_insn (trial);\n \n \t  if (next && NONJUMP_INSN_P (next)\n \t      && GET_CODE (PATTERN (next)) != USE\n@@ -3121,7 +3123,7 @@ delete_computation (rtx insn)\n \n   if (HAVE_cc0 && reg_referenced_p (cc0_rtx, PATTERN (insn)))\n     {\n-      rtx prev = prev_nonnote_insn (insn);\n+      rtx_insn *prev = prev_nonnote_insn (insn);\n       /* We assume that at this stage\n \t CC's are always set explicitly\n \t and always immediately before the jump that"}]}