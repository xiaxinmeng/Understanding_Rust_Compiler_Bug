{"sha": "edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhZmIzNWJkYWRmMzA5ZWJiOWQxZWRkYzU1NDlmOWUxYWQ0OWMwOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-06-02T14:15:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-07-01T15:11:20Z"}, "message": "x86: Convert CONST_WIDE_INT/CONST_VECTOR to broadcast\n\n1. Update move expanders to convert the CONST_WIDE_INT and CONST_VECTOR\noperands to vector broadcast from an integer with AVX.\n2. Add ix86_gen_scratch_sse_rtx to return a scratch SSE register which\nwon't increase stack alignment requirement and blocks transformation by\nthe combine pass.\n\nA small benchmark:\n\nhttps://gitlab.com/x86-benchmarks/microbenchmark/-/tree/memset/broadcast\n\nshows that broadcast is a little bit faster on Intel Core i7-8559U:\n\n$ make\ngcc -g -I. -O2   -c -o test.o test.c\ngcc -g   -c -o memory.o memory.S\ngcc -g   -c -o broadcast.o broadcast.S\ngcc -g   -c -o vec_dup_sse2.o vec_dup_sse2.S\ngcc -o test test.o memory.o broadcast.o vec_dup_sse2.o\n./test\nmemory      : 147215\nbroadcast   : 121213\nvec_dup_sse2: 171366\n$\n\nbroadcast is also smaller:\n\n$ size memory.o broadcast.o\n   text\t   data\t    bss\t    dec\t    hex\tfilename\n    132\t      0\t      0\t    132\t     84\tmemory.o\n    122\t      0\t      0\t    122\t     7a\tbroadcast.o\n$\n\n3. Update PR 87767 tests to expect integer broadcast instead of broadcast\nfrom memory.\n4. Update avx512f_cond_move.c to expect integer broadcast.\n\nA small benchmark:\n\nhttps://gitlab.com/x86-benchmarks/microbenchmark/-/tree/vpaddd/broadcast\n\nshows that integer broadcast is faster than embedded memory broadcast:\n\n$ make\ngcc -g -I. -O2 -march=skylake-avx512   -c -o test.o test.c\ngcc -g   -c -o memory.o memory.S\ngcc -g   -c -o broadcast.o broadcast.S\ngcc -o test test.o memory.o broadcast.o\n./test\nmemory      : 425538\nbroadcast   : 375260\n$\n\ngcc/\n\n\tPR target/100865\n\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n\tNew prototype.\n\t(ix86_byte_broadcast): New function.\n\t(ix86_convert_const_wide_int_to_broadcast): Likewise.\n\t(ix86_expand_move): Convert CONST_WIDE_INT to broadcast if mode\n\tsize is 16 bytes or bigger.\n\t(ix86_broadcast_from_integer_constant): New function.\n\t(ix86_expand_vector_move): Convert CONST_WIDE_INT and CONST_VECTOR\n\tto broadcast if mode size is 16 bytes or bigger.\n\t* config/i386/i386-protos.h (ix86_gen_scratch_sse_rtx): New\n\tprototype.\n\t* config/i386/i386.c (ix86_gen_scratch_sse_rtx): New function.\n\ngcc/testsuite/\n\n\tPR target/100865\n\t* gcc.target/i386/avx512f-broadcast-pr87767-1.c: Expect integer\n\tbroadcast.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-5.c: Likewise.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-5.c: Likewise.\n\t* gcc.target/i386/avx512f_cond_move.c: Also pass\n\t-mprefer-vector-width=512 and expect integer broadcast.\n\t* gcc.target/i386/pr100865-1.c: New test.\n\t* gcc.target/i386/pr100865-2.c: Likewise.\n\t* gcc.target/i386/pr100865-3.c: Likewise.\n\t* gcc.target/i386/pr100865-4a.c: Likewise.\n\t* gcc.target/i386/pr100865-4b.c: Likewise.\n\t* gcc.target/i386/pr100865-5a.c: Likewise.\n\t* gcc.target/i386/pr100865-5b.c: Likewise.\n\t* gcc.target/i386/pr100865-6a.c: Likewise.\n\t* gcc.target/i386/pr100865-6b.c: Likewise.\n\t* gcc.target/i386/pr100865-6c.c: Likewise.\n\t* gcc.target/i386/pr100865-7a.c: Likewise.\n\t* gcc.target/i386/pr100865-7b.c: Likewise.\n\t* gcc.target/i386/pr100865-7c.c: Likewise.\n\t* gcc.target/i386/pr100865-8a.c: Likewise.\n\t* gcc.target/i386/pr100865-8b.c: Likewise.\n\t* gcc.target/i386/pr100865-8c.c: Likewise.\n\t* gcc.target/i386/pr100865-9a.c: Likewise.\n\t* gcc.target/i386/pr100865-9b.c: Likewise.\n\t* gcc.target/i386/pr100865-9c.c: Likewise.\n\t* gcc.target/i386/pr100865-10a.c: Likewise.\n\t* gcc.target/i386/pr100865-10b.c: Likewise.\n\t* gcc.target/i386/pr100865-11a.c: Likewise.\n\t* gcc.target/i386/pr100865-11b.c: Likewise.\n\t* gcc.target/i386/pr100865-11c.c: Likewise.\n\t* gcc.target/i386/pr100865-12a.c: Likewise.\n\t* gcc.target/i386/pr100865-12b.c: Likewise.\n\t* gcc.target/i386/pr100865-12c.c: Likewise.", "tree": {"sha": "14d2f553da601c4e2dbb3d8446d43dffa78c5189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14d2f553da601c4e2dbb3d8446d43dffa78c5189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63454815de3b93331025bd990efdad5296ae706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63454815de3b93331025bd990efdad5296ae706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63454815de3b93331025bd990efdad5296ae706"}], "stats": {"total": 614, "additions": 590, "deletions": 24}, "files": [{"sha": "07381410ad57f4e9fb1e3143baaf7273a22e3ff6", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 182, "deletions": 12, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -93,6 +93,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"i386-builtins.h\"\n #include \"i386-expand.h\"\n \n+static bool ix86_expand_vector_init_duplicate (bool, machine_mode, rtx,\n+\t\t\t\t\t       rtx);\n+\n /* Split one or more double-mode RTL references into pairs of half-mode\n    references.  The RTL can be REG, offsettable MEM, integer constant, or\n    CONST_DOUBLE.  \"operands\" is a pointer to an array of double-mode RTLs to\n@@ -190,6 +193,82 @@ ix86_expand_clear (rtx dest)\n   emit_insn (tmp);\n }\n \n+/* Return true if V can be broadcasted from an integer of WIDTH bits\n+   which is returned in VAL_BROADCAST.  Otherwise, return false.  */\n+\n+static bool\n+ix86_broadcast (HOST_WIDE_INT v, unsigned int width,\n+\t\tHOST_WIDE_INT &val_broadcast)\n+{\n+  wide_int val = wi::uhwi (v, HOST_BITS_PER_WIDE_INT);\n+  val_broadcast = wi::extract_uhwi (val, 0, width);\n+  for (unsigned int i = width; i < HOST_BITS_PER_WIDE_INT; i += width)\n+    {\n+      HOST_WIDE_INT each = wi::extract_uhwi (val, i, width);\n+      if (val_broadcast != each)\n+\treturn false;\n+    }\n+  val_broadcast = sext_hwi (val_broadcast, width);\n+  return true;\n+}\n+\n+/* Convert the CONST_WIDE_INT operand OP to broadcast in MODE.  */\n+\n+static rtx\n+ix86_convert_const_wide_int_to_broadcast (machine_mode mode, rtx op)\n+{\n+  /* Don't use integer vector broadcast if we can't move from GPR to SSE\n+     register directly.  */\n+  if (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n+    return nullptr;\n+\n+  /* Convert CONST_WIDE_INT to a non-standard SSE constant integer\n+     broadcast only if vector broadcast is available.  */\n+  if (!TARGET_AVX\n+      || !CONST_WIDE_INT_P (op)\n+      || standard_sse_constant_p (op, mode))\n+    return nullptr;\n+\n+  HOST_WIDE_INT val = CONST_WIDE_INT_ELT (op, 0);\n+  HOST_WIDE_INT val_broadcast;\n+  scalar_int_mode broadcast_mode;\n+  if (TARGET_AVX2\n+      && ix86_broadcast (val, GET_MODE_BITSIZE (QImode),\n+\t\t\t val_broadcast))\n+    broadcast_mode = QImode;\n+  else if (TARGET_AVX2\n+\t   && ix86_broadcast (val, GET_MODE_BITSIZE (HImode),\n+\t\t\t      val_broadcast))\n+    broadcast_mode = HImode;\n+  else if (ix86_broadcast (val, GET_MODE_BITSIZE (SImode),\n+\t\t\t   val_broadcast))\n+    broadcast_mode = SImode;\n+  else if (TARGET_64BIT\n+\t   && ix86_broadcast (val, GET_MODE_BITSIZE (DImode),\n+\t\t\t      val_broadcast))\n+    broadcast_mode = DImode;\n+  else\n+    return nullptr;\n+\n+  /* Check if OP can be broadcasted from VAL.  */\n+  for (int i = 1; i < CONST_WIDE_INT_NUNITS (op); i++)\n+    if (val != CONST_WIDE_INT_ELT (op, i))\n+      return nullptr;\n+\n+  unsigned int nunits = (GET_MODE_SIZE (mode)\n+\t\t\t / GET_MODE_SIZE (broadcast_mode));\n+  machine_mode vector_mode;\n+  if (!mode_for_vector (broadcast_mode, nunits).exists (&vector_mode))\n+    gcc_unreachable ();\n+  rtx target = ix86_gen_scratch_sse_rtx (vector_mode);\n+  bool ok = ix86_expand_vector_init_duplicate (false, vector_mode,\n+\t\t\t\t\t       target,\n+\t\t\t\t\t       GEN_INT (val_broadcast));\n+  gcc_assert (ok);\n+  target = lowpart_subreg (mode, target, vector_mode);\n+  return target;\n+}\n+\n void\n ix86_expand_move (machine_mode mode, rtx operands[])\n {\n@@ -347,27 +426,89 @@ ix86_expand_move (machine_mode mode, rtx operands[])\n \t  && optimize)\n \top1 = copy_to_mode_reg (mode, op1);\n \n-      if (can_create_pseudo_p ()\n-\t  && CONST_DOUBLE_P (op1))\n+      if (can_create_pseudo_p ())\n \t{\n-\t  /* If we are loading a floating point constant to a register,\n-\t     force the value to memory now, since we'll get better code\n-\t     out the back end.  */\n+\t  if (CONST_DOUBLE_P (op1))\n+\t    {\n+\t      /* If we are loading a floating point constant to a\n+\t\t register, force the value to memory now, since we'll\n+\t\t get better code out the back end.  */\n \n-\t  op1 = validize_mem (force_const_mem (mode, op1));\n-\t  if (!register_operand (op0, mode))\n+\t      op1 = validize_mem (force_const_mem (mode, op1));\n+\t      if (!register_operand (op0, mode))\n+\t\t{\n+\t\t  rtx temp = gen_reg_rtx (mode);\n+\t\t  emit_insn (gen_rtx_SET (temp, op1));\n+\t\t  emit_move_insn (op0, temp);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\t  else if (GET_MODE_SIZE (mode) >= 16)\n \t    {\n-\t      rtx temp = gen_reg_rtx (mode);\n-\t      emit_insn (gen_rtx_SET (temp, op1));\n-\t      emit_move_insn (op0, temp);\n-\t      return;\n+\t      rtx tmp = ix86_convert_const_wide_int_to_broadcast\n+\t\t(GET_MODE (op0), op1);\n+\t      if (tmp != nullptr)\n+\t\top1 = tmp;\n \t    }\n \t}\n     }\n \n   emit_insn (gen_rtx_SET (op0, op1));\n }\n \n+static rtx\n+ix86_broadcast_from_integer_constant (machine_mode mode, rtx op)\n+{\n+  int nunits = GET_MODE_NUNITS (mode);\n+  if (nunits < 2)\n+    return nullptr;\n+\n+  /* Don't use integer vector broadcast if we can't move from GPR to SSE\n+     register directly.  */\n+  if (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n+    return nullptr;\n+\n+  /* Convert CONST_VECTOR to a non-standard SSE constant integer\n+     broadcast only if vector broadcast is available.  */\n+  if (!(TARGET_AVX2\n+\t|| (TARGET_AVX\n+\t    && (GET_MODE_INNER (mode) == SImode\n+\t\t|| GET_MODE_INNER (mode) == DImode)))\n+      || standard_sse_constant_p (op, mode))\n+    return nullptr;\n+\n+  /* Don't broadcast from a 64-bit integer constant in 32-bit mode.  */\n+  if (GET_MODE_INNER (mode) == DImode && !TARGET_64BIT)\n+    return nullptr;\n+\n+  rtx constant = get_pool_constant (XEXP (op, 0));\n+  if (GET_CODE (constant) != CONST_VECTOR)\n+    return nullptr;\n+\n+  /* There could be some rtx like\n+     (mem/u/c:V16QI (symbol_ref/u:DI (\"*.LC1\")))\n+     but with \"*.LC1\" refer to V2DI constant vector.  */\n+  if (GET_MODE (constant) != mode)\n+    {\n+      constant = simplify_subreg (mode, constant, GET_MODE (constant),\n+\t\t\t\t  0);\n+      if (constant == nullptr || GET_CODE (constant) != CONST_VECTOR)\n+\treturn nullptr;\n+    }\n+\n+  rtx first = XVECEXP (constant, 0, 0);\n+\n+  for (int i = 1; i < nunits; ++i)\n+    {\n+      rtx tmp = XVECEXP (constant, 0, i);\n+      /* Vector duplicate value.  */\n+      if (!rtx_equal_p (tmp, first))\n+\treturn nullptr;\n+    }\n+\n+  return first;\n+}\n+\n void\n ix86_expand_vector_move (machine_mode mode, rtx operands[])\n {\n@@ -407,7 +548,36 @@ ix86_expand_vector_move (machine_mode mode, rtx operands[])\n \t  op1 = simplify_gen_subreg (mode, r, imode, SUBREG_BYTE (op1));\n \t}\n       else\n-\top1 = validize_mem (force_const_mem (mode, op1));\n+\t{\n+\t  machine_mode mode = GET_MODE (op0);\n+\t  rtx tmp = ix86_convert_const_wide_int_to_broadcast\n+\t    (mode, op1);\n+\t  if (tmp == nullptr)\n+\t    op1 = validize_mem (force_const_mem (mode, op1));\n+\t  else\n+\t    op1 = tmp;\n+\t}\n+    }\n+\n+  if (can_create_pseudo_p ()\n+      && GET_MODE_SIZE (mode) >= 16\n+      && GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+      && (MEM_P (op1)\n+\t  && SYMBOL_REF_P (XEXP (op1, 0))\n+\t  && CONSTANT_POOL_ADDRESS_P (XEXP (op1, 0))))\n+    {\n+      rtx first = ix86_broadcast_from_integer_constant (mode, op1);\n+      if (first != nullptr)\n+\t{\n+\t  /* Broadcast to XMM/YMM/ZMM register from an integer\n+\t     constant.  */\n+\t  op1 = ix86_gen_scratch_sse_rtx (mode);\n+\t  bool ok = ix86_expand_vector_init_duplicate (false, mode,\n+\t\t\t\t\t\t       op1, first);\n+\t  gcc_assert (ok);\n+\t  emit_move_insn (op0, op1);\n+\t  return;\n+\t}\n     }\n \n   /* We need to check memory alignment for SSE mode since attribute"}, {"sha": "71745b9a1eadc389dc0e6658434106b0a604d7fb", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -50,6 +50,8 @@ extern void ix86_reset_previous_fndecl (void);\n \n extern bool ix86_using_red_zone (void);\n \n+extern rtx ix86_gen_scratch_sse_rtx (machine_mode);\n+\n extern unsigned int ix86_regmode_natural_size (machine_mode);\n #ifdef RTX_CODE\n extern int standard_80387_constant_p (rtx);"}, {"sha": "2fbaae7cd02cc7ac92d04042b6057c68d07c72d3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -23163,6 +23163,19 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n     }\n }\n \n+/* Return a scratch register in MODE for vector load and store.  */\n+\n+rtx\n+ix86_gen_scratch_sse_rtx (machine_mode mode)\n+{\n+  if (TARGET_SSE)\n+    return gen_rtx_REG (mode, (TARGET_64BIT\n+\t\t\t       ? LAST_REX_SSE_REG\n+\t\t\t       : LAST_SSE_REG));\n+  else\n+    return gen_reg_rtx (mode);\n+}\n+\n /* Address space support.\n \n    This is not \"far pointers\" in the 16-bit sense, but an easy way"}, {"sha": "a2664d87f2982720fa89433ab61b7f3171ee217d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -2,8 +2,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512dq\" } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 5 } }  */\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 5 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 { target { ! ia32 } } } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 5 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %zmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %zmm\\[0-9\\]+\" 3 { target { ! ia32 } } } } */\n \n typedef int v16si  __attribute__ ((vector_size (64)));\n typedef long long v8di  __attribute__ ((vector_size (64)));"}, {"sha": "477f9ca128220670f6cc1cbdd14a8bfb9d73fa38", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-5.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -2,8 +2,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n-/* { dg-final { scan-assembler-times \"\\[^n\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n-/* { dg-final { scan-assembler-times \"\\[^n\\n\\]*\\\\\\{1to16\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %zmm\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %zmm\\[0-9\\]+\" 4 { target { ! ia32 } } } } */\n \n typedef int v16si  __attribute__ ((vector_size (64)));\n typedef long long v8di  __attribute__ ((vector_size (64)));"}, {"sha": "ca49a585232e10d704aacec0e52066e2a5f3aeab", "filename": "gcc/testsuite/gcc.target/i386/avx512f_cond_move.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f_cond_move.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f_cond_move.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f_cond_move.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mavx512f\" } */\n-/* { dg-final { scan-assembler-times \"(?:vpblendmd|vmovdqa32)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 8 } } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512\" } */\n+/* { dg-final { scan-assembler-times \"(?:vpbroadcastd|vmovdqa32)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 8 } } */\n \n unsigned int x[128];\n int y[128];"}, {"sha": "f8eb99f0b5fe20f6ed3c673a2bcfba339d164dbd", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-1.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -2,9 +2,15 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512vl -mavx512dq\" } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 5 } }  */\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 10 } }  */\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 5 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 2 { target { ! ia32 } } } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 4 { target { ! ia32 } } } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 5 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 7 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %xmm\\[0-9\\]+\" 3 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %ymm\\[0-9\\]+\" 3 { target { ! ia32 } } } } */\n \n typedef int v4si  __attribute__ ((vector_size (16)));\n typedef int v8si  __attribute__ ((vector_size (32)));"}, {"sha": "32f6ac81841c44d2178fc6ec3942821b904aaee5", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-5.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -2,9 +2,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n /* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 4 } }  */\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 8 } }  */\n-/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %xmm\\[0-9\\]+\" 4 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %ymm\\[0-9\\]+\" 4 { target { ! ia32 } } } } */\n \n typedef int v4si  __attribute__ ((vector_size (16)));\n typedef int v8si  __attribute__ ((vector_size (32)));"}, {"sha": "6c3097fb2a6f844843e5c715cb4f92fe7a112fb9", "filename": "gcc/testsuite/gcc.target/i386/pr100865-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-1.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "7ffc19e56a838fa291b82449f4d7c5dc047921fa", "filename": "gcc/testsuite/gcc.target/i386/pr100865-10a.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern __int128 array[16];\n+\n+#define MK_CONST128_BROADCAST(A) \\\n+  ((((unsigned __int128) (unsigned char) A) << 120) \\\n+   | (((unsigned __int128) (unsigned char) A) << 112) \\\n+   | (((unsigned __int128) (unsigned char) A) << 104) \\\n+   | (((unsigned __int128) (unsigned char) A) << 96) \\\n+   | (((unsigned __int128) (unsigned char) A) << 88) \\\n+   | (((unsigned __int128) (unsigned char) A) << 80) \\\n+   | (((unsigned __int128) (unsigned char) A) << 72) \\\n+   | (((unsigned __int128) (unsigned char) A) << 64) \\\n+   | (((unsigned __int128) (unsigned char) A) << 56) \\\n+   | (((unsigned __int128) (unsigned char) A) << 48) \\\n+   | (((unsigned __int128) (unsigned char) A) << 40) \\\n+   | (((unsigned __int128) (unsigned char) A) << 32) \\\n+   | (((unsigned __int128) (unsigned char) A) << 24) \\\n+   | (((unsigned __int128) (unsigned char) A) << 16) \\\n+   | (((unsigned __int128) (unsigned char) A) << 8) \\\n+   | ((unsigned __int128) (unsigned char) A) )\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = MK_CONST128_BROADCAST (0x1f);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "edf52765c607817b7eadf298c136304e2e9b26fe", "filename": "gcc/testsuite/gcc.target/i386/pr100865-10b.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-10a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "04ce1662f3caac6cd90e5400838208ecbe0869ea", "filename": "gcc/testsuite/gcc.target/i386/pr100865-11a.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern __int128 array[16];\n+\n+#define MK_CONST128_BROADCAST(A) \\\n+  ((((unsigned __int128) (unsigned long long) A) << 64) \\\n+   | ((unsigned __int128) (unsigned long long) A) )\n+\n+#define MK_CONST128_BROADCAST_SIGNED(A) \\\n+  ((__int128) MK_CONST128_BROADCAST (A))\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = MK_CONST128_BROADCAST_SIGNED (-0x1ffffffffLL);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movabsq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpbroadcastq|vpunpcklqdq)\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "12d55b9a64242a8a033c52ef4ae1416ada50837c", "filename": "gcc/testsuite/gcc.target/i386/pr100865-11b.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-11a.c\"\n+\n+/* { dg-final { scan-assembler-times \"movabsq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "de56c84b9cad73b5896efb8d5381b29701a4e33f", "filename": "gcc/testsuite/gcc.target/i386/pr100865-11c.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-11c.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake -mno-avx2\" } */\n+\n+#include \"pr100865-11a.c\"\n+\n+/* { dg-final { scan-assembler-times \"movabsq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklqdq\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "d4833d44475dc73892a6daaa0bc46d879b97097b", "filename": "gcc/testsuite/gcc.target/i386/pr100865-12a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern __int128 array[16];\n+\n+#define MK_CONST128_BROADCAST(A) \\\n+  ((((unsigned __int128) (unsigned long long) A) << 64) \\\n+   | ((unsigned __int128) (unsigned long long) A) )\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = MK_CONST128_BROADCAST (0x1ffffffffLL);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movabsq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpbroadcastq|vpunpcklqdq)\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "63a5629b90c172f68733b7809841a48fd3c5bbec", "filename": "gcc/testsuite/gcc.target/i386/pr100865-12b.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-12a.c\"\n+\n+/* { dg-final { scan-assembler-times \"movabsq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "77415f22c97740e142ab6ec341958395ce605bf7", "filename": "gcc/testsuite/gcc.target/i386/pr100865-12c.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-12c.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake -mno-avx2\" } */\n+\n+#include \"pr100865-12a.c\"\n+\n+/* { dg-final { scan-assembler-times \"movabsq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklqdq\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "17efe2d72a36debad40efa268e04ec365db81a1b", "filename": "gcc/testsuite/gcc.target/i386/pr100865-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=skylake\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "b6dbcf7809be6337fc3934b4cbda3a9332609514", "filename": "gcc/testsuite/gcc.target/i386/pr100865-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=skylake-avx512\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "f55883598f933e49d1dfd4e5a3769c6d192ec8c5", "filename": "gcc/testsuite/gcc.target/i386/pr100865-4a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=skylake\" } */\n+\n+extern char array[64];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = -45;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%xmm\\[0-9\\]+, \" 4 } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "f41e6147b4c63d5f147f2fcecff20feef1a21d62", "filename": "gcc/testsuite/gcc.target/i386/pr100865-4b.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-4a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%xmm\\[0-9\\]+, \" 4 } } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "4149797fe816bfd86b3523cb9483e9a7ae4e0265", "filename": "gcc/testsuite/gcc.target/i386/pr100865-5a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern short array[64];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = -45;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 4 } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "ded41b680d351a1ec0966e09366b0c5f7153e463", "filename": "gcc/testsuite/gcc.target/i386/pr100865-5b.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-5b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-5a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[\\\\t \\]%ymm\\[0-9\\]+, \" 4 } } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastw\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "3fde549a10dc22e96946cdc40af4a9ef1fc2c036", "filename": "gcc/testsuite/gcc.target/i386/pr100865-6a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern int array[64];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = -45;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "44e74c64e5595014c7def40ad3fff502080686a8", "filename": "gcc/testsuite/gcc.target/i386/pr100865-6b.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-6a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 } } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastd\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "46d31030ce8512de49cf01ae9571a94827f54b32", "filename": "gcc/testsuite/gcc.target/i386/pr100865-6c.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-6c.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake -mno-avx2\" } */\n+\n+extern int array[64];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = -45;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbroadcastss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "f6f2be911206b135976a58d3f204dfd6f42fa4e6", "filename": "gcc/testsuite/gcc.target/i386/pr100865-7a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern long long int array[64];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = -45;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 16 } } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastq\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" { target { ! ia32 } } } } */"}, {"sha": "0a68820aa3278ab61c8b1352807143ebfb3cfca9", "filename": "gcc/testsuite/gcc.target/i386/pr100865-7b.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-7a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+%r\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[\\\\t \\]+\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 16 } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "4d50bb7e2f600674ba21428c71aea0e630c37631", "filename": "gcc/testsuite/gcc.target/i386/pr100865-7c.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-7c.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake -mno-avx2\" } */\n+\n+extern long long int array[64];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = -45;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbroadcastsd\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 16 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastsd\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" { target { ! ia32 } } } } */"}, {"sha": "544a14db6f794a89246acc31c5536112d8d007b5", "filename": "gcc/testsuite/gcc.target/i386/pr100865-8a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern __int128 array[16];\n+\n+#define MK_CONST128_BROADCAST(A) \\\n+  ((((unsigned __int128) (unsigned int) A) << 96) \\\n+   | (((unsigned __int128) (unsigned int) A) << 64) \\\n+   | (((unsigned __int128) (unsigned int) A) << 32) \\\n+   | ((unsigned __int128) (unsigned int) A) )\n+\n+#define MK_CONST128_BROADCAST_SIGNED(A) \\\n+  ((__int128) MK_CONST128_BROADCAST (A))\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = MK_CONST128_BROADCAST_SIGNED (-45);\n+}\n+\n+/* { dg-final { scan-assembler-times \"(?:vpbroadcastd|vpshufd)\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "99a10ad83bd085f1bc64e786cd7127770025bed7", "filename": "gcc/testsuite/gcc.target/i386/pr100865-8b.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-8a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "efee048861479e4a1f6374502b615b7301d3dc3a", "filename": "gcc/testsuite/gcc.target/i386/pr100865-8c.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-8c.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake -mno-avx2\" } */\n+\n+#include \"pr100865-8a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpshufd\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "45d0e0d0e2e947b61fbbcc9bcf0a4d81f08954f4", "filename": "gcc/testsuite/gcc.target/i386/pr100865-9a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9a.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake\" } */\n+\n+extern __int128 array[16];\n+\n+#define MK_CONST128_BROADCAST(A) \\\n+  ((((unsigned __int128) (unsigned short) A) << 112) \\\n+   | (((unsigned __int128) (unsigned short) A) << 96) \\\n+   | (((unsigned __int128) (unsigned short) A) << 80) \\\n+   | (((unsigned __int128) (unsigned short) A) << 64) \\\n+   | (((unsigned __int128) (unsigned short) A) << 48) \\\n+   | (((unsigned __int128) (unsigned short) A) << 32) \\\n+   | (((unsigned __int128) (unsigned short) A) << 16) \\\n+   | ((unsigned __int128) (unsigned short) A) )\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = MK_CONST128_BROADCAST (0x1fff);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[\\\\t \\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "146962485258e408a6733fc8a29424126164cee6", "filename": "gcc/testsuite/gcc.target/i386/pr100865-9b.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9b.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+\n+#include \"pr100865-9a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}, {"sha": "e6f25902c1dfbc49eca7d7d72e8f85786239ab2d", "filename": "gcc/testsuite/gcc.target/i386/pr100865-9c.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edafb35bdadf309ebb9d1eddc5549f9e1ad49c09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-9c.c?ref=edafb35bdadf309ebb9d1eddc5549f9e1ad49c09", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O3 -march=skylake -mno-avx2\" } */\n+\n+#include \"pr100865-9a.c\"\n+\n+/* { dg-final { scan-assembler-times \"vpshufd\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */"}]}