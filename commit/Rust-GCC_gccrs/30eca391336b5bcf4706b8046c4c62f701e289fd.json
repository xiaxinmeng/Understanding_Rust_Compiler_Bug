{"sha": "30eca391336b5bcf4706b8046c4c62f701e289fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBlY2EzOTEzMzZiNWJjZjQ3MDZiODA0NmM0YzYyZjcwMWUyODlmZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-16T22:53:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-16T22:53:14Z"}, "message": "(fold, case EQ_EXPR): When folding VAR++ = CONST, mask the new const\nif VAR is a bitfield reference; also for VAR--.\n\nFrom-SVN: r11976", "tree": {"sha": "93581c6cecc2ee347c484cb6a7ca781b6bb00f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93581c6cecc2ee347c484cb6a7ca781b6bb00f27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30eca391336b5bcf4706b8046c4c62f701e289fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30eca391336b5bcf4706b8046c4c62f701e289fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30eca391336b5bcf4706b8046c4c62f701e289fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30eca391336b5bcf4706b8046c4c62f701e289fd/comments", "author": null, "committer": null, "parents": [{"sha": "c30ac676411db2b1354229a08308a29724378e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c30ac676411db2b1354229a08308a29724378e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c30ac676411db2b1354229a08308a29724378e76"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "82e51c0ee7644b38748b5d48aa5747b85d0dbeca", "filename": "gcc/fold-const.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30eca391336b5bcf4706b8046c4c62f701e289fd/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30eca391336b5bcf4706b8046c4c62f701e289fd/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=30eca391336b5bcf4706b8046c4c62f701e289fd", "patch": "@@ -4428,6 +4428,24 @@ fold (expr)\n \t\t\t\t constop, TREE_OPERAND (varop, 1)));\n \t\tTREE_SET_CODE (varop, PREINCREMENT_EXPR);\n \n+\t\t/* If VAROP is a reference to a bitfield, we must mask\n+\t\t   the constant by the width of the field.  */\n+\t\tif (TREE_CODE (TREE_OPERAND (varop, 0)) == COMPONENT_REF\n+\t\t    && DECL_BIT_FIELD(TREE_OPERAND\n+\t\t\t\t      (TREE_OPERAND (varop, 0), 1)))\n+\t\t  {\n+\t\t    int size\n+\t\t      = TREE_INT_CST_LOW (DECL_SIZE\n+\t\t\t\t\t  (TREE_OPERAND\n+\t\t\t\t\t   (TREE_OPERAND (varop, 0), 1)));\n+\n+\t\t    newconst = fold (build (BIT_AND_EXPR,\n+\t\t\t\t\t    TREE_TYPE (varop), newconst,\n+\t\t\t\t\t    convert (TREE_TYPE (varop),\n+\t\t\t\t\t\t     build_int_2 (size, 0))));\n+\t\t  }\n+\t\t\t\t\t\t\t \n+\n \t\tt = build (code, type, TREE_OPERAND (t, 0),\n \t\t\t   TREE_OPERAND (t, 1));\n \t\tTREE_OPERAND (t, constopnum) = newconst;\n@@ -4444,6 +4462,23 @@ fold (expr)\n \t\t  = fold (build (MINUS_EXPR, TREE_TYPE (varop),\n \t\t\t\t constop, TREE_OPERAND (varop, 1)));\n \t\tTREE_SET_CODE (varop, PREDECREMENT_EXPR);\n+\n+\t\tif (TREE_CODE (TREE_OPERAND (varop, 0)) == COMPONENT_REF\n+\t\t    && DECL_BIT_FIELD(TREE_OPERAND\n+\t\t\t\t      (TREE_OPERAND (varop, 0), 1)))\n+\t\t  {\n+\t\t    int size\n+\t\t      = TREE_INT_CST_LOW (DECL_SIZE\n+\t\t\t\t\t  (TREE_OPERAND\n+\t\t\t\t\t   (TREE_OPERAND (varop, 0), 1)));\n+\n+\t\t    newconst = fold (build (BIT_AND_EXPR,\n+\t\t\t\t\t    TREE_TYPE (varop), newconst,\n+\t\t\t\t\t    convert (TREE_TYPE (varop),\n+\t\t\t\t\t\t     build_int_2 (size, 0))));\n+\t\t  }\n+\t\t\t\t\t\t\t \n+\n \t\tt = build (code, type, TREE_OPERAND (t, 0),\n \t\t\t   TREE_OPERAND (t, 1));\n \t\tTREE_OPERAND (t, constopnum) = newconst;"}]}