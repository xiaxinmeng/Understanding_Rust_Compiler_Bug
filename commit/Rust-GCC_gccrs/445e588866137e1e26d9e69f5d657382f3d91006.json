{"sha": "445e588866137e1e26d9e69f5d657382f3d91006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1ZTU4ODg2NjEzN2UxZTI2ZDllNjlmNWQ2NTczODJmM2Q5MTAwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T09:00:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T09:00:10Z"}, "message": "[multiple changes]\n\n2015-01-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Function_Return): In an extended return\n\tstatement, apply accessibility check to result object when there\n\tis no initializing expression (Ada 2012 RM 6.5 (5.4/3))\n\n2015-01-30  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch4.adb (Analyze_If_Expression): Allow for non-standard\n\tBoolean for case where ELSE is omitted.\n\t* sem_res.adb: Minor reformatting.\n\nFrom-SVN: r220274", "tree": {"sha": "23809b37bb58f2b97f30382d8d72dbbe57aae323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23809b37bb58f2b97f30382d8d72dbbe57aae323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445e588866137e1e26d9e69f5d657382f3d91006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445e588866137e1e26d9e69f5d657382f3d91006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445e588866137e1e26d9e69f5d657382f3d91006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445e588866137e1e26d9e69f5d657382f3d91006/comments", "author": null, "committer": null, "parents": [{"sha": "8ec350edf40d5d2f0f868136f514d6fd7832505a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec350edf40d5d2f0f868136f514d6fd7832505a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec350edf40d5d2f0f868136f514d6fd7832505a"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "be0188ddad70a3195e31fe3c454217d16143dabb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=445e588866137e1e26d9e69f5d657382f3d91006", "patch": "@@ -1,3 +1,15 @@\n+2015-01-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Function_Return): In an extended return\n+\tstatement, apply accessibility check to result object when there\n+\tis no initializing expression (Ada 2012 RM 6.5 (5.4/3))\n+\n+2015-01-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_If_Expression): Allow for non-standard\n+\tBoolean for case where ELSE is omitted.\n+\t* sem_res.adb: Minor reformatting.\n+\n 2015-01-27  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tFix build under cygwin/64."}, {"sha": "1d33d1b2ce2dadb18fc01e849469d3bd81885a10", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=445e588866137e1e26d9e69f5d657382f3d91006", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2035,29 +2035,22 @@ package body Sem_Ch4 is\n          begin\n             Set_Etype (N, Any_Type);\n \n-            --  Shouldn't the following statement be down in the ELSE of the\n-            --  following loop? ???\n+            --  Loop through intepretations of Then_Expr\n \n             Get_First_Interp (Then_Expr, I, It);\n+            while Present (It.Nam) loop\n \n-            --  if no Else_Expression the conditional must be boolean\n-\n-            if No (Else_Expr) then\n-               Set_Etype (N, Standard_Boolean);\n-\n-            --  Else_Expression Present. For each possible intepretation of\n-            --  the Then_Expression, add it only if the Else_Expression has\n-            --  a compatible type.\n+               --  Add possible intepretation of Then_Expr if no Else_Expr,\n+               --  or Else_Expr is present and has a compatible type.\n \n-            else\n-               while Present (It.Nam) loop\n-                  if Has_Compatible_Type (Else_Expr, It.Typ) then\n-                     Add_One_Interp (N, It.Typ, It.Typ);\n-                  end if;\n+               if No (Else_Expr)\n+                 or else Has_Compatible_Type (Else_Expr, It.Typ)\n+               then\n+                  Add_One_Interp (N, It.Typ, It.Typ);\n+               end if;\n \n-                  Get_Next_Interp (I, It);\n-               end loop;\n-            end if;\n+               Get_Next_Interp (I, It);\n+            end loop;\n          end;\n       end if;\n    end Analyze_If_Expression;"}, {"sha": "17ad3c408e8393290869f0dc793f5cdd4e3711d5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=445e588866137e1e26d9e69f5d657382f3d91006", "patch": "@@ -881,7 +881,8 @@ package body Sem_Ch6 is\n       -- Local Variables --\n       ---------------------\n \n-      Expr : Node_Id;\n+      Expr     : Node_Id;\n+      Obj_Decl : Node_Id;\n \n    --  Start of processing for Analyze_Function_Return\n \n@@ -966,12 +967,11 @@ package body Sem_Ch6 is\n \n       else\n          Check_SPARK_05_Restriction (\"extended RETURN is not allowed\", N);\n+         Obj_Decl := Last (Return_Object_Declarations (N));\n \n          --  Analyze parts specific to extended_return_statement:\n \n          declare\n-            Obj_Decl    : constant Node_Id :=\n-                            Last (Return_Object_Declarations (N));\n             Has_Aliased : constant Boolean := Aliased_Present (Obj_Decl);\n             HSS         : constant Node_Id := Handled_Statement_Sequence (N);\n \n@@ -1142,6 +1142,18 @@ package body Sem_Ch6 is\n                          & \"null-excluding return??\",\n                Reason => CE_Null_Not_Allowed);\n          end if;\n+\n+      --  RM 6.5 (5.4/3): accessibility checks also apply if the return object\n+      --  has no initializing expression.\n+\n+      elsif Ada_Version > Ada_2005 and then Is_Class_Wide_Type (R_Type) then\n+         if Type_Access_Level (Etype (Defining_Identifier (Obj_Decl))) >\n+              Subprogram_Access_Level (Scope_Id)\n+         then\n+            Error_Msg_N\n+              (\"level of return expression type is deeper than \"\n+               & \"class-wide function!\", Obj_Decl);\n+         end if;\n       end if;\n    end Analyze_Function_Return;\n "}, {"sha": "82890810a4852a6a87866dacc5cc1969fe59fb26", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445e588866137e1e26d9e69f5d657382f3d91006/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=445e588866137e1e26d9e69f5d657382f3d91006", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -722,9 +722,7 @@ package body Sem_Res is\n          F := First_Formal (Subp);\n          A := First_Actual (N);\n          while Present (F) and then Present (A) loop\n-            if not Is_Entity_Name (A)\n-              or else Entity (A) /= F\n-            then\n+            if not Is_Entity_Name (A) or else Entity (A) /= F then\n                return False;\n             end if;\n \n@@ -1310,9 +1308,7 @@ package body Sem_Res is\n          else\n             E := First_Entity (Pack);\n             while Present (E) loop\n-               if Test (E)\n-                 and then not In_Decl\n-               then\n+               if Test (E) and then not In_Decl then\n                   return E;\n                end if;\n \n@@ -2152,7 +2148,6 @@ package body Sem_Res is\n \n          Get_First_Interp (N, I, It);\n          Interp_Loop : while Present (It.Typ) loop\n-\n             if Debug_Flag_V then\n                Write_Str (\"Interp: \");\n                Write_Interp (It);"}]}