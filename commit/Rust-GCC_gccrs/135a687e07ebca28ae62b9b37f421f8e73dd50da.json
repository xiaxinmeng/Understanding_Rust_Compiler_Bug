{"sha": "135a687e07ebca28ae62b9b37f421f8e73dd50da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1YTY4N2UwN2ViY2EyOGFlNjJiOWIzN2Y0MjFmOGU3M2RkNTBkYQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-07-08T17:53:44Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-07-08T17:53:44Z"}, "message": "i386-protos.h (ix86_asm_output_function_label): New prototype.\n\n2010-07-08  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* config/i386/i386-protos.h (ix86_asm_output_function_label):\n\tNew prototype.\n\t* config/i386/i386.c (ix86_function_ms_hook_prologue): Check\n\tfor NULL fntype argument and allow 64-bit targets.\n\t(ix86_asm_output_function_label): New function.\n\t(ix86_expand_prologue): Handle 64-bit ms hook prologue.\n\t(ix86_handle_fndecl_attribute): Likewise.\n\t* doc/extend.texi (ms_hook_prologue): Adjust documentation.\n\t* doc/doc/tm.texi: Regenerated.\n\t* doc/doc/doc/tm.texi.in (ASM_OUTPUT_FUNCTION_LABEL): New.\n\t(ASM_DECLARE_FUNCTION_NAME): Adjust documentation.\n\t* defaults.h (ASM_OUTPUT_FUNCTION_LABEL): New macro.\n\t* config/darwin.h (ASM_DECLARE_FUNCTION_NAME): Use\n\tASM_OUTPUT_FUNCTION_LABEL instead of ASM_OUTPUT_LABEL.\n\t* config/elfos.h: Likewise.\n\t* config/i386/cygming.h: Likewise.\n\t* config/netbsd-aout.h: Likewise.\n\t* config/openbsd.h: Likewise.\n\t* config/i386/i386.h (ASM_OUTPUT_FUNCTION_LABEL): Override\n\tby ix86_asm_output_function_label function call.\n\t* varasm.c (assemble_start_function): Use\n\tASM_OUTPUT_FUNCTION_LABEL instead of ASM_OUTPUT_LABEL.\n\nFrom-SVN: r161971", "tree": {"sha": "fa8c8344ea79abfbf4515250a71acdceffc27b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa8c8344ea79abfbf4515250a71acdceffc27b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/135a687e07ebca28ae62b9b37f421f8e73dd50da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135a687e07ebca28ae62b9b37f421f8e73dd50da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135a687e07ebca28ae62b9b37f421f8e73dd50da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135a687e07ebca28ae62b9b37f421f8e73dd50da/comments", "author": null, "committer": null, "parents": [{"sha": "5ab3a5af253c3b6a57ccf66444e393815eedcaff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab3a5af253c3b6a57ccf66444e393815eedcaff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab3a5af253c3b6a57ccf66444e393815eedcaff"}], "stats": {"total": 164, "additions": 127, "deletions": 37}, "files": [{"sha": "531729ce92243be24a24213df1c8eeb0bb81f6ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -1,3 +1,28 @@\n+2010-07-08  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/i386-protos.h (ix86_asm_output_function_label):\n+\tNew prototype.\n+\t* config/i386/i386.c (ix86_function_ms_hook_prologue): Check\n+\tfor NULL fntype argument and allow 64-bit targets.\n+\t(ix86_asm_output_function_label): New function.\n+\t(ix86_expand_prologue): Handle 64-bit ms hook prologue.\n+\t(ix86_handle_fndecl_attribute): Likewise.\n+\t* doc/extend.texi (ms_hook_prologue): Adjust documentation.\n+\t* doc/doc/tm.texi: Regenerated.\n+\t* doc/doc/doc/tm.texi.in (ASM_OUTPUT_FUNCTION_LABEL): New.\n+\t(ASM_DECLARE_FUNCTION_NAME): Adjust documentation.\n+\t* defaults.h (ASM_OUTPUT_FUNCTION_LABEL): New macro.\n+\t* config/darwin.h (ASM_DECLARE_FUNCTION_NAME): Use\n+\tASM_OUTPUT_FUNCTION_LABEL instead of ASM_OUTPUT_LABEL.\n+\t* config/elfos.h: Likewise.\n+\t* config/i386/cygming.h: Likewise.\n+\t* config/netbsd-aout.h: Likewise.\n+\t* config/openbsd.h: Likewise.\n+\t* config/i386/i386.h (ASM_OUTPUT_FUNCTION_LABEL): Override\n+\tby ix86_asm_output_function_label function call.\n+\t* varasm.c (assemble_start_function): Use\n+\tASM_OUTPUT_FUNCTION_LABEL instead of ASM_OUTPUT_LABEL.\n+\n 2010-07-08  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_will_be_removed_from_program_if_no_direct_calls):"}, {"sha": "99d9928815204b849c5ceaabf3210f15edb40bd7", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -651,7 +651,7 @@ extern GTY(()) int darwin_ms_struct;\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n         || DECL_INITIAL (DECL))\t\t\t\t\t\t\\\n       (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\t\\\n-    ASM_OUTPUT_LABEL (FILE, xname);\t\t\t\t\t\\\n+    ASM_OUTPUT_FUNCTION_LABEL (FILE, xname, DECL);\t\t\t\\\n   } while (0)\n \n #undef TARGET_ASM_DECLARE_CONSTANT_NAME"}, {"sha": "8c415bad4421717ba6c673c27b90a2f85fbca6e8", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -282,7 +282,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     {\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n       ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n-      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+      ASM_OUTPUT_FUNCTION_LABEL (FILE, NAME, DECL);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif"}, {"sha": "1587af472cc01f908546890fa6e70fc5b8dfd278", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -276,7 +276,7 @@ do {\t\t\t\t\t\t\\\n       i386_pe_maybe_record_exported_symbol (DECL, NAME, 0);\t\t\\\n       if (write_symbols != SDB_DEBUG)\t\t\t\t\t\\\n \ti386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n-      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n+      ASM_OUTPUT_FUNCTION_LABEL (FILE, NAME, DECL);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "47a0a887d684e3bd3e63e3e78f914ad2b8238a08", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -139,6 +139,7 @@ extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);\n \n extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_arg_regno_p (int);\n+extern void ix86_asm_output_function_label (FILE *, const char *, tree);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n extern bool ix86_sol10_return_in_memory (const_tree,const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);"}, {"sha": "99b4cc3e61467792638dd30ddceaca89ff3b8331", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -5099,18 +5099,15 @@ ix86_function_type_abi (const_tree fntype)\n static bool\n ix86_function_ms_hook_prologue (const_tree fntype)\n {\n-  if (!TARGET_64BIT)\n+  if (fntype && lookup_attribute (\"ms_hook_prologue\", DECL_ATTRIBUTES (fntype)))\n     {\n-      if (lookup_attribute (\"ms_hook_prologue\", DECL_ATTRIBUTES (fntype)))\n-        {\n-          if (decl_function_context (fntype) != NULL_TREE)\n-          {\n-            error_at (DECL_SOURCE_LOCATION (fntype),\n-                \"ms_hook_prologue is not compatible with nested function\");\n-          }\n+      if (decl_function_context (fntype) != NULL_TREE)\n+      {\n+\terror_at (DECL_SOURCE_LOCATION (fntype),\n+\t    \"ms_hook_prologue is not compatible with nested function\");\n+      }\n \n-          return true;\n-        }\n+      return true;\n     }\n   return false;\n }\n@@ -5133,6 +5130,40 @@ ix86_cfun_abi (void)\n   return cfun->machine->call_abi;\n }\n \n+/* Write the extra assembler code needed to declare a function properly.  */\n+\n+void\n+ix86_asm_output_function_label (FILE *asm_out_file, const char *fname,\n+\t\t\t\ttree decl)\n+{\n+  bool is_ms_hook = ix86_function_ms_hook_prologue (decl);\n+\n+  if (is_ms_hook)\n+    {\n+      int i, filler_count = (TARGET_64BIT ? 32 : 16);\n+      unsigned int filler_cc = 0xcccccccc;\n+\n+      for (i = 0; i < filler_count; i += 4)\n+        fprintf (asm_out_file, ASM_LONG \" 0x%x\\n\", filler_cc);\n+    }\n+\n+  ASM_OUTPUT_LABEL (asm_out_file, fname);\n+\n+  /* Output magic byte marker, if hot-patch attribute is set.\n+     For x86 case frame-pointer prologue will be emitted in\n+     expand_prologue.  */\n+  if (is_ms_hook)\n+    {\n+      if (TARGET_64BIT)\n+\t/* leaq [%rsp + 0], %rsp  */\n+\tasm_fprintf (asm_out_file, ASM_BYTE\n+\t\t     \"0x48, 0x8d, 0xa4, 0x24, 0x00, 0x00, 0x00, 0x00\\n\");\n+      else\n+        /* movl.s %edi, %edi.  */\n+\tasm_fprintf (asm_out_file, ASM_BYTE \"0x8b, 0xff\\n\");\n+    }\n+}\n+\n /* regclass.c  */\n extern void init_regs (void);\n \n@@ -9154,21 +9185,19 @@ ix86_expand_prologue (void)\n \n   ix86_compute_frame_layout (&frame);\n \n-  if (ix86_function_ms_hook_prologue (current_function_decl))\n+  if (!TARGET_64BIT && ix86_function_ms_hook_prologue (current_function_decl))\n     {\n       rtx push, mov;\n \n       /* Make sure the function starts with\n-\t 8b ff     movl.s %edi,%edi\n+\t 8b ff     movl.s %edi,%edi (emited by ix86_asm_output_function_label)\n \t 55        push   %ebp\n \t 8b ec     movl.s %esp,%ebp\n \n \t This matches the hookable function prologue in Win32 API\n \t functions in Microsoft Windows XP Service Pack 2 and newer.\n \t Wine uses this to enable Windows apps to hook the Win32 API\n \t functions provided by Wine.  */\n-      insn = emit_insn (gen_vswapmov (gen_rtx_REG (SImode, DI_REG),\n-\t\t\t\t      gen_rtx_REG (SImode, DI_REG)));\n       push = emit_insn (gen_push (hard_frame_pointer_rtx));\n       mov = emit_insn (gen_vswapmov (hard_frame_pointer_rtx,\n \t\t\t\t     stack_pointer_rtx));\n@@ -26976,15 +27005,9 @@ ix86_handle_fndecl_attribute (tree *node, tree name,\n       return NULL_TREE;\n     }\n \n-  if (TARGET_64BIT)\n-    {\n-      warning (OPT_Wattributes, \"%qE attribute only available for 32-bit\",\n-               name);\n-      return NULL_TREE;\n-    }\n-\n #ifndef HAVE_AS_IX86_SWAP\n-  sorry (\"ms_hook_prologue attribute needs assembler swap suffix support\");\n+  if (!TARGET_64BIT)\n+    sorry (\"ms_hook_prologue attribute needs assembler swap suffix support\");\n #endif\n \n     return NULL_TREE;"}, {"sha": "eb3eb9f69b59e2c69328dc8a21c6e78a24dd1366", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -2082,6 +2082,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\n #endif\n \n+/* Write the extra assembler code needed to declare a function\n+   properly.  */\n+\n+#undef ASM_OUTPUT_FUNCTION_LABEL\n+#define ASM_OUTPUT_FUNCTION_LABEL(FILE, NAME, DECL) \\\n+  ix86_asm_output_function_label (FILE, NAME, DECL)\n+\n /* Under some conditions we need jump tables in the text section,\n    because the assembler cannot handle label differences between\n    sections.  This is the case for x86_64 on Mach-O for example.  */"}, {"sha": "914212b877f0063038089d786448d10c7613ae73", "filename": "gcc/config/netbsd-aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fnetbsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fnetbsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-aout.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -141,7 +141,7 @@ along with GCC; see the file COPYING3.  If not see\n     {\t\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\\\n       ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+      ASM_OUTPUT_FUNCTION_LABEL (FILE, NAME, DECL);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "30e1c252c5a8d60d99f71192f9292798a89db949", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -216,7 +216,7 @@ while (0)\n   do {\t\t\t\t\t\t\t\t\t\\\n     ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\t\\\n     ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+    ASM_OUTPUT_FUNCTION_LABEL (FILE, NAME, DECL);\t\t\t\\\n   } while (0)\n #endif\n "}, {"sha": "e7e32c4dd06c6cee8771d6fee68dce455ad49e2b", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -133,13 +133,21 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n /* This is how to output the definition of a user-level label named\n-   NAME, such as the label on a static function or variable NAME.  */\n+   NAME, such as the label on variable NAME.  */\n \n #ifndef ASM_OUTPUT_LABEL\n #define ASM_OUTPUT_LABEL(FILE,NAME) \\\n   do { assemble_name ((FILE), (NAME)); fputs (\":\\n\", (FILE)); } while (0)\n #endif\n \n+/* This is how to output the definition of a user-level label named\n+   NAME, such as the label on a function.  */\n+\n+#ifndef ASM_OUTPUT_FUNCTION_LABEL\n+#define ASM_OUTPUT_FUNCTION_LABEL(FILE, NAME, DECL) \\\n+  ASM_OUTPUT_LABEL ((FILE), (NAME))\n+#endif\n+\n /* Output the definition of a compiler-generated label named NAME.  */\n #ifndef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,NAME)\t\\"}, {"sha": "b9b4a44fd39df75c2547ecb8b2633287b09c102f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -2736,10 +2736,10 @@ the @option{-maccumulate-outgoing-args} option.\n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n \n-On 32 bit i[34567]86-*-* targets, you can use this function attribute to make\n-gcc generate the \"hot-patching\" function prologue used in Win32 API\n-functions in Microsoft Windows XP Service Pack 2 and newer. This requires\n-support for the swap suffix in the assembler. (GNU Binutils 2.19.51 or later)\n+On 32 bit i[34567]86-*-* targets and 64 bit x86_64-*-* targets, you can use\n+this function attribute to make gcc generate the \"hot-patching\" function\n+prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n+and newer.\n \n @item naked\n @cindex function without a prologue/epilogue code"}, {"sha": "d3d9c1e836018887317e98f9f3a7b3d0671885d6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -7661,6 +7661,19 @@ assembler syntax for defining the name, and a newline.  A default\n definition of this macro is provided which is correct for most systems.\n @end defmac\n \n+@defmac ASM_OUTPUT_FUNCTION_LABEL (@var{stream}, @var{name}, @var{decl})\n+A C statement (sans semicolon) to output to the stdio stream\n+@var{stream} the assembler definition of a label named @var{name} of\n+a function.\n+Use the expression @code{assemble_name (@var{stream}, @var{name})} to\n+output the name itself; before and after that, output the additional\n+assembler syntax for defining the name, and a newline.  A default\n+definition of this macro is provided which is correct for most systems.\n+\n+If this macro is not defined, then the function name is defined in the\n+usual manner as a label (by means of @code{ASM_OUTPUT_LABEL}).\n+@end defmac\n+\n @findex assemble_name_raw\n @defmac ASM_OUTPUT_INTERNAL_LABEL (@var{stream}, @var{name})\n Identical to @code{ASM_OUTPUT_LABEL}, except that @var{name} is known\n@@ -7744,11 +7757,11 @@ A C statement (sans semicolon) to output to the stdio stream\n @var{stream} any text necessary for declaring the name @var{name} of a\n function which is being defined.  This macro is responsible for\n outputting the label definition (perhaps using\n-@code{ASM_OUTPUT_LABEL}).  The argument @var{decl} is the\n+@code{ASM_OUTPUT_FUNCTION_LABEL}).  The argument @var{decl} is the\n @code{FUNCTION_DECL} tree node representing the function.\n \n If this macro is not defined, then the function name is defined in the\n-usual manner as a label (by means of @code{ASM_OUTPUT_LABEL}).\n+usual manner as a label (by means of @code{ASM_OUTPUT_FUNCTION_LABEL}).\n \n You may wish to use @code{ASM_OUTPUT_TYPE_DIRECTIVE} in the definition\n of this macro."}, {"sha": "51a8e5eaeab59919803a1e7000fac7255ee38d05", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -7660,6 +7660,19 @@ assembler syntax for defining the name, and a newline.  A default\n definition of this macro is provided which is correct for most systems.\n @end defmac\n \n+@defmac ASM_OUTPUT_FUNCTION_LABEL (@var{stream}, @var{name}, @var{decl})\n+A C statement (sans semicolon) to output to the stdio stream\n+@var{stream} the assembler definition of a label named @var{name} of\n+a function.\n+Use the expression @code{assemble_name (@var{stream}, @var{name})} to\n+output the name itself; before and after that, output the additional\n+assembler syntax for defining the name, and a newline.  A default\n+definition of this macro is provided which is correct for most systems.\n+\n+If this macro is not defined, then the function name is defined in the\n+usual manner as a label (by means of @code{ASM_OUTPUT_LABEL}).\n+@end defmac\n+\n @findex assemble_name_raw\n @defmac ASM_OUTPUT_INTERNAL_LABEL (@var{stream}, @var{name})\n Identical to @code{ASM_OUTPUT_LABEL}, except that @var{name} is known\n@@ -7743,11 +7756,11 @@ A C statement (sans semicolon) to output to the stdio stream\n @var{stream} any text necessary for declaring the name @var{name} of a\n function which is being defined.  This macro is responsible for\n outputting the label definition (perhaps using\n-@code{ASM_OUTPUT_LABEL}).  The argument @var{decl} is the\n+@code{ASM_OUTPUT_FUNCTION_LABEL}).  The argument @var{decl} is the\n @code{FUNCTION_DECL} tree node representing the function.\n \n If this macro is not defined, then the function name is defined in the\n-usual manner as a label (by means of @code{ASM_OUTPUT_LABEL}).\n+usual manner as a label (by means of @code{ASM_OUTPUT_FUNCTION_LABEL}).\n \n You may wish to use @code{ASM_OUTPUT_TYPE_DIRECTIVE} in the definition\n of this macro."}, {"sha": "de78bd094c9e33bc217d664be5ba21f1523fd5bc", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a687e07ebca28ae62b9b37f421f8e73dd50da/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=135a687e07ebca28ae62b9b37f421f8e73dd50da", "patch": "@@ -1865,7 +1865,7 @@ assemble_start_function (tree decl, const char *fnname)\n   ASM_DECLARE_FUNCTION_NAME (asm_out_file, fnname, current_function_decl);\n #else\n   /* Standard thing is just output label for the function.  */\n-  ASM_OUTPUT_LABEL (asm_out_file, fnname);\n+  ASM_OUTPUT_FUNCTION_LABEL (asm_out_file, fnname, current_function_decl);\n #endif /* ASM_DECLARE_FUNCTION_NAME */\n }\n "}]}