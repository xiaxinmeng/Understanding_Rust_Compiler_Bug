{"sha": "e622cd25a9d191e52eb77a01aa3187f7f153e2a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYyMmNkMjVhOWQxOTFlNTJlYjc3YTAxYWEzMTg3ZjdmMTUzZTJhMg==", "commit": {"author": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1992-02-12T23:44:20Z"}, "committer": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1992-02-12T23:44:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r314", "tree": {"sha": "ab6ff6c962ab0001d0611257f6d813df2f2176ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab6ff6c962ab0001d0611257f6d813df2f2176ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e622cd25a9d191e52eb77a01aa3187f7f153e2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e622cd25a9d191e52eb77a01aa3187f7f153e2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e622cd25a9d191e52eb77a01aa3187f7f153e2a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e622cd25a9d191e52eb77a01aa3187f7f153e2a2/comments", "author": null, "committer": null, "parents": [{"sha": "df4f282db4dc3ae9c0b57ffb7a94a6889f6f2c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4f282db4dc3ae9c0b57ffb7a94a6889f6f2c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4f282db4dc3ae9c0b57ffb7a94a6889f6f2c3b"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "cd1a02b79822e5f945f6f432add3f85d6bcc028a", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622cd25a9d191e52eb77a01aa3187f7f153e2a2/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622cd25a9d191e52eb77a01aa3187f7f153e2a2/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=e622cd25a9d191e52eb77a01aa3187f7f153e2a2", "patch": "@@ -165,10 +165,6 @@ extern char *output_call ();\n #define DOUBLE_TYPE_SIZE\t64\n #define LONG_DOUBLE_TYPE_SIZE\t64\n \n-/* The real.h version of this macro inexplicably checks BITS_PER_WORD */\n-\n-#define REAL_VALUE_TRUNCATE(mode, x) ((mode) == SFmode ? (float) (x) : (x))\n-\n /* Declare the standard types used by builtins to match convex stddef.h --\n    with int rather than long.  */\n \n@@ -200,9 +196,9 @@ extern char *output_call ();\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE\n-   but can be less for certain modes in special long registers.\n-   On Convex, all values fit in one register.  */\n-#define HARD_REGNO_NREGS(REGNO, MODE)   1\n+   but can be less for certain modes in special long registers. */\n+#define HARD_REGNO_NREGS(REGNO, MODE) \\\n+   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    On Convex, S registers can hold any type, A registers any nonfloat. */\n@@ -789,6 +785,11 @@ enum reg_class {\n \n #define ADDRESS_COST(RTX) (GET_CODE (RTX) == MEM ? 3 : 1)\n \n+/* Specify the cost of a branch insn; roughly the number of extra insns that\n+   should be added to avoid a branch.  */\n+\n+#define BRANCH_COST 0\n+\n /* Check a `double' value for validity for a particular machine mode.  */\n \n #define CHECK_FLOAT_VALUE(mode, d) \\"}]}