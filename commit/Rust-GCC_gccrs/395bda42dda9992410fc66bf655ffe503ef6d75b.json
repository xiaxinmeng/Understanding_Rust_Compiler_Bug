{"sha": "395bda42dda9992410fc66bf655ffe503ef6d75b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1YmRhNDJkZGE5OTkyNDEwZmM2NmJmNjU1ZmZlNTAzZWY2ZDc1Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-04T17:15:31Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-04T17:15:31Z"}, "message": "tree-flow-inline.h, [...]: Likewise.\n\n\t* tree-flow-inline.h, tree-ssa-operands.c,\n\ttree-ssa-operands.h, tree-ssa-opfinalize.h:\n\tLikewise. tree-vn.c: Fix comment typos.\n\t* doc/passes.texi, doc/tree-ssa.texi: Fix typos.\n\nFrom-SVN: r99220", "tree": {"sha": "9f36a787a3f3346ad83db21e2bfd57726ec9694a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f36a787a3f3346ad83db21e2bfd57726ec9694a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/395bda42dda9992410fc66bf655ffe503ef6d75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395bda42dda9992410fc66bf655ffe503ef6d75b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395bda42dda9992410fc66bf655ffe503ef6d75b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395bda42dda9992410fc66bf655ffe503ef6d75b/comments", "author": null, "committer": null, "parents": [{"sha": "4268e4cfa2e3720525e68b9b4277cc0bcce5ac5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4268e4cfa2e3720525e68b9b4277cc0bcce5ac5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4268e4cfa2e3720525e68b9b4277cc0bcce5ac5c"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "e2568bc0c2b0c3214955b05e7d1a5dd626b0db7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -1,3 +1,10 @@\n+2005-05-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-flow-inline.h, tree-ssa-operands.c,\n+\ttree-ssa-operands.h, tree-ssa-opfinalize.h:\n+\tLikewise. tree-vn.c: Fix comment typos.\n+\t* doc/passes.texi, doc/tree-ssa.texi: Fix typos.\n+\n 2005-05-04  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* doc/tm.texi (Target Hooks): Document"}, {"sha": "8e123667ec58b3cba177bf5e64874eadfe7ec88a", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -409,7 +409,7 @@ the number of elements operated upon in parallel in each iteration, and the\n Additional loop transformations such as peeling and versioning may take place\n to align the number of iterations, and to align the memory accesses in the loop.\n The pass is implemented in @file{tree-vectorizer.c} (the main driver and general\n-utilities), @file{tree-vect-analyze.c} and @file{tree-vect-tranform.c}.\n+utilities), @file{tree-vect-analyze.c} and @file{tree-vect-transform.c}.\n Analysis of data references is in @file{tree-data-ref.c}.\n \n @item Tree level if-conversion for vectorizer"}, {"sha": "cbceb37073c491f13af7fcd1f5c295d4f8f9a5fc", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -831,7 +831,7 @@ The following access routines are available for examining operands:\n \n @enumerate\n @item @code{SINGLE_SSA_@{USE,DEF,TREE@}_OPERAND}: These accessors will return \n-NULL unless there is exactly one operand mathcing the specified flags.  If \n+NULL unless there is exactly one operand matching the specified flags.  If \n there is exactly one operand, the operand is returned as either a @code{tree}, \n @code{def_operand_p}, or @code{use_operand_p}.\n "}, {"sha": "00fb7ac6d3df5457fdc00084770d054514bd1ec9", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -957,7 +957,7 @@ op_iter_next_tree (ssa_op_iter *ptr)\n }\n \n \n-/* This functiins clears the iterator PTR, and marks it done.  This is normally\n+/* This functions clears the iterator PTR, and marks it done.  This is normally\n    used to prevent warnings in the compile about might be uninitailzied\n    components.  */\n \n@@ -1103,7 +1103,7 @@ op_iter_init_must_and_may_def (ssa_op_iter *ptr, tree stmt,\n }\n \n \n-/* If there is a single opernad in STMT matching FLAGS, return it.  Otherwise\n+/* If there is a single operand in STMT matching FLAGS, return it.  Otherwise\n    return NULL.  PTR is the iterator to use.  */\n static inline tree\n single_ssa_tree_operand (tree stmt, int flags)\n@@ -1121,7 +1121,7 @@ single_ssa_tree_operand (tree stmt, int flags)\n }\n \n \n-/* If there is a single opernad in STMT matching FLAGS, return it.  Otherwise\n+/* If there is a single operand in STMT matching FLAGS, return it.  Otherwise\n    return NULL.  PTR is the iterator to use.  */\n static inline use_operand_p\n single_ssa_use_operand (tree stmt, int flags)\n@@ -1140,7 +1140,7 @@ single_ssa_use_operand (tree stmt, int flags)\n \n \n \n-/* If there is a single opernad in STMT matching FLAGS, return it.  Otherwise\n+/* If there is a single operand in STMT matching FLAGS, return it.  Otherwise\n    return NULL.  PTR is the iterator to use.  */\n static inline def_operand_p\n single_ssa_def_operand (tree stmt, int flags)\n@@ -1158,7 +1158,7 @@ single_ssa_def_operand (tree stmt, int flags)\n }\n \n \n-/* If there is a single opernad in STMT matching FLAGS, return it.  Otherwise\n+/* If there is a single operand in STMT matching FLAGS, return it.  Otherwise\n    return NULL.  PTR is the iterator to use.  */\n static inline bool\n zero_ssa_operands (tree stmt, int flags)\n@@ -1170,7 +1170,7 @@ zero_ssa_operands (tree stmt, int flags)\n }\n \n \n-/* Return the  number of opernads mathcing FLAGS in STMT.  */\n+/* Return the number of operands matching FLAGS in STMT.  */\n static inline int\n num_ssa_operands (tree stmt, int flags)\n {\n@@ -1285,7 +1285,7 @@ op_iter_init_phiuse (ssa_op_iter *ptr, tree phi, int flags)\n \n   comp = (is_gimple_reg (phi_def) ? SSA_OP_USE : SSA_OP_VIRTUAL_USES);\n     \n-  /* if the PHI node deosn't the operand type we care about, we're done.  */\n+  /* If the PHI node doesn't the operand type we care about, we're done.  */\n   if ((flags & comp) == 0)\n     {\n       ptr->done = true;\n@@ -1299,7 +1299,7 @@ op_iter_init_phiuse (ssa_op_iter *ptr, tree phi, int flags)\n }\n \n \n-/* Start an iterator for a PHI defintion.  */\n+/* Start an iterator for a PHI definition.  */\n \n static inline def_operand_p\n op_iter_init_phidef (ssa_op_iter *ptr, tree phi, int flags)\n@@ -1314,7 +1314,7 @@ op_iter_init_phidef (ssa_op_iter *ptr, tree phi, int flags)\n \n   comp = (is_gimple_reg (phi_def) ? SSA_OP_DEF : SSA_OP_VIRTUAL_DEFS);\n     \n-  /* if the PHI node deosn't the operand type we care about, we're done.  */\n+  /* If the PHI node doesn't the operand type we care about, we're done.  */\n   if ((flags & comp) == 0)\n     {\n       ptr->done = true;"}, {"sha": "d2a48bbf530c97f3661bfec1dbb94402c739c680", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -104,7 +104,7 @@ Boston, MA 02111-1307, USA.  */\n struct opbuild_list_d GTY (())\n {\n   varray_type vars;     /* The VAR_DECLS tree.  */\n-  varray_type uid;      /* The sort value for virtaul symbols.  */\n+  varray_type uid;      /* The sort value for virtual symbols.  */\n   varray_type next;     /* The next index in the sorted list.  */\n   int first;            /* First element in list.  */\n   unsigned num;\t\t/* Number of elements.  */\n@@ -284,7 +284,7 @@ opbuild_append_virtual (struct opbuild_list_d *list, tree var)\n     }\n   else\n     {\n-      /* Dont enter duplicates at all.  */\n+      /* Don't enter duplicates at all.  */\n       if (VARRAY_UINT (list->uid, last) == var_uid)\n         return;\n       \n@@ -359,7 +359,7 @@ opbuild_clear (struct opbuild_list_d *list)\n }\n \n \n-/* Remove ELEM from LIST where PREV is the rpevious element.  Return the next \n+/* Remove ELEM from LIST where PREV is the previous element.  Return the next \n    element.  */\n \n static inline int \n@@ -1064,7 +1064,7 @@ copy_virtual_operands (tree dest, tree src)\n \n   build_ssa_operands (dest);\n \n-  /* Copy all the virtuial fields.  */\n+  /* Copy all the virtual fields.  */\n   FOR_EACH_SSA_TREE_OPERAND (t, src, iter, SSA_OP_VUSE)\n     append_vuse (t);\n   FOR_EACH_SSA_TREE_OPERAND (t, src, iter, SSA_OP_VMAYDEF)"}, {"sha": "12f75ceec06c0fd8178409d8f6603b6eb2d5fb60", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -267,9 +267,9 @@ typedef struct ssa_operand_iterator_d\n        !op_iter_done (&(ITER));\t\t\t\t\t\\\n        op_iter_next_maymustdef (&(KILLVAR), &(DEFVAR), &(ITER)))\n \n-/* This macro will execute a loop over all the arguemnts of a PHI which\n-   match FLAGS.   A use_operand_p is alwasy returned via USEVAR.  FLAGS\n-   can be eiother SSA_OP_USE or SSA_OP_VIRTUAL_USES or SSA_OP_ALL_USES.  */\n+/* This macro will execute a loop over all the arguments of a PHI which\n+   match FLAGS.   A use_operand_p is always returned via USEVAR.  FLAGS\n+   can be either SSA_OP_USE or SSA_OP_VIRTUAL_USES or SSA_OP_ALL_USES.  */\n #define FOR_EACH_PHI_ARG (USEVAR, STMT, ITER, FLAGS)\t\t\\\n   for ((USEVAR) = op_iter_init_phiuse (&(ITER), STMT, FLAGS);\t\\\n        !op_iter_done (&(ITER));\t\t\t\t\t\\\n@@ -314,7 +314,7 @@ typedef struct ssa_operand_iterator_d\n \t\t\t\t\t\t\t\t\t\t/* This macro returns TRUE if there are no operands matching FLAGS in STMT.  */\n #define ZERO_SSA_OPERANDS(STMT, FLAGS) \tzero_ssa_operands (STMT, FLAGS)\n \n-/* THis macro counts the number of operands in STMT matching FLAGS.  */\n+/* This macro counts the number of operands in STMT matching FLAGS.  */\n #define NUM_SSA_OPERANDS(STMT, FLAGS)\tnum_ssa_operands (STMT, FLAGS)\n \n #endif  /* GCC_TREE_SSA_OPERANDS_H  */"}, {"sha": "3415cf46979999d9e8a384b070499b018781c856", "filename": "gcc/tree-ssa-opfinalize.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-ssa-opfinalize.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-ssa-opfinalize.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-opfinalize.h?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -20,7 +20,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n \n /* This file contains common code which is used by each of the 5 operand \n-   types.  Macros are defined to specify the varying componenets.\n+   types.  Macros are defined to specify the varying components.\n \n    FINALIZE_FUNC - name of finalize function.\n    FINALIZE_ALLOC - name of allocation routine.\n@@ -29,8 +29,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    FINALIZE_OPS - Lead element in list.\n    FINALIZE_USE_PTR - How to get the use_operand_p, if this is a use operand.\n    FINALIZE_INITIALIZE - How to initialize an element.\n-   FINALIZE_ELEM - How to retreive an element.\n-   FINALIZE_BASE - How to retreive the base variable of an element.\n+   FINALIZE_ELEM - How to retrieve an element.\n+   FINALIZE_BASE - How to retrieve the base variable of an element.\n    FINALIZE_BASE_TYPE - Type of the base variable.\n    FINALIZE_OPBUILD - Opbuild array for these nodes.\n    FINALIZE_OPBUILD_ELEM - How to get an element from the opbuild list."}, {"sha": "5f003720e4dfb4f6b1a01d692d1584e46ab072f2", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395bda42dda9992410fc66bf655ffe503ef6d75b/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=395bda42dda9992410fc66bf655ffe503ef6d75b", "patch": "@@ -175,7 +175,7 @@ set_value_handle (tree e, tree v)\n \n \n /* Insert EXPR into VALUE_TABLE with value VAL, and add expression\n-   EXPR to the value set for value VAL.  STMT represent the stmt\n+   EXPR to the value set for value VAL.  STMT represents the stmt\n    associated with EXPR.  It is used when computing a hash value for EXPR.  */\n \n void\n@@ -202,7 +202,7 @@ vn_add (tree expr, tree val, tree stmt)\n \n /* Search in VALUE_TABLE for an existing instance of expression EXPR,\n    and return its value, or NULL if none has been set.  STMT\n-   represent the stmt associated with EXPR.   It is arused when computing the \n+   represents the stmt associated with EXPR.  It is used when computing the \n    hash value for EXPR.  */\n \n tree\n@@ -228,7 +228,7 @@ vn_lookup (tree expr, tree stmt)\n \n /* Like vn_lookup, but creates a new value for expression EXPR, if\n    EXPR doesn't already have a value.  Return the existing/created\n-   value for EXPR.  STMT represent the stmt associated with EXPR.  It is used\n+   value for EXPR.  STMT represents the stmt associated with EXPR.  It is used\n    when computing the hash value for EXPR.  */\n \n tree"}]}