{"sha": "6ca7558bfe5d864ad317613d1793931ec8e82cb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhNzU1OGJmZTVkODY0YWQzMTc2MTNkMTc5MzkzMWVjOGU4MmNiMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-10T17:17:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-10T17:17:20Z"}, "message": "i386.c (legitimize_pic_address): Merge 64-bit and 32-bit gotoff_operand code paths.\n\n\t* config/i386/i386.c (legitimize_pic_address): Merge 64-bit and 32-bit\n\tgotoff_operand code paths.  Use copy_to_suggested_regs and\n\texpand_simple_binop where appropriate.  Cleanup.\n\nFrom-SVN: r236096", "tree": {"sha": "0a081a46cdebf4f71b89151667ae8a9d2e3a16e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a081a46cdebf4f71b89151667ae8a9d2e3a16e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ca7558bfe5d864ad317613d1793931ec8e82cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca7558bfe5d864ad317613d1793931ec8e82cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca7558bfe5d864ad317613d1793931ec8e82cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca7558bfe5d864ad317613d1793931ec8e82cb2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61431953d7a56be84e7c33b2ac14451952187ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61431953d7a56be84e7c33b2ac14451952187ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61431953d7a56be84e7c33b2ac14451952187ddf"}], "stats": {"total": 126, "additions": 52, "deletions": 74}, "files": [{"sha": "e9d2b8dfe158a0d64203d49282292b689b85dee8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca7558bfe5d864ad317613d1793931ec8e82cb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca7558bfe5d864ad317613d1793931ec8e82cb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ca7558bfe5d864ad317613d1793931ec8e82cb2", "patch": "@@ -1,3 +1,9 @@\n+2016-05-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (legitimize_pic_address): Merge 64-bit and 32-bit\n+\tgotoff_operand code paths.  Use copy_to_suggested_regs and\n+\texpand_simple_binop where appropriate.  Cleanup.\n+\n 2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/70799"}, {"sha": "237ba8009d662400267da8b5e9330b6ad1f0b6a5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 74, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca7558bfe5d864ad317613d1793931ec8e82cb2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca7558bfe5d864ad317613d1793931ec8e82cb2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6ca7558bfe5d864ad317613d1793931ec8e82cb2", "patch": "@@ -15433,46 +15433,16 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n   if (TARGET_64BIT && legitimate_pic_address_disp_p (addr))\n     new_rtx = addr;\n-  else if (TARGET_64BIT && !TARGET_PECOFF\n-\t   && ix86_cmodel != CM_SMALL_PIC && gotoff_operand (addr, Pmode))\n+  else if ((!TARGET_64BIT\n+\t    || /* TARGET_64BIT && */ ix86_cmodel != CM_SMALL_PIC)\n+\t   && !TARGET_PECOFF\n+\t   && gotoff_operand (addr, Pmode))\n     {\n-      rtx tmpreg;\n-      /* This symbol may be referenced via a displacement from the PIC\n-\t base address (@GOTOFF).  */\n-\n+      /* This symbol may be referenced via a displacement\n+\t from the PIC base address (@GOTOFF).  */\n       if (GET_CODE (addr) == CONST)\n \taddr = XEXP (addr, 0);\n-      if (GET_CODE (addr) == PLUS)\n-\t  {\n-            new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)),\n-\t\t\t\t      UNSPEC_GOTOFF);\n-\t    new_rtx = gen_rtx_PLUS (Pmode, new_rtx, XEXP (addr, 1));\n-\t  }\n-\telse\n-          new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n-      new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n-      if (!reg)\n-        tmpreg = gen_reg_rtx (Pmode);\n-      else\n-\ttmpreg = reg;\n-      emit_move_insn (tmpreg, new_rtx);\n \n-      if (reg != 0)\n-\t{\n-\t  new_rtx = expand_simple_binop (Pmode, PLUS, reg, pic_offset_table_rtx,\n-\t\t\t\t\t tmpreg, 1, OPTAB_DIRECT);\n-\t  new_rtx = reg;\n-\t}\n-      else\n-        new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmpreg);\n-    }\n-  else if (!TARGET_64BIT && !TARGET_PECOFF && gotoff_operand (addr, Pmode))\n-    {\n-      /* This symbol may be referenced via a displacement from the PIC\n-\t base address (@GOTOFF).  */\n-\n-      if (GET_CODE (addr) == CONST)\n-\taddr = XEXP (addr, 0);\n       if (GET_CODE (addr) == PLUS)\n \t  {\n             new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)),\n@@ -15481,39 +15451,43 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t  }\n \telse\n           new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n+\n       new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n-      new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n+\n+      if (TARGET_64BIT)\n+\tnew_rtx = copy_to_suggested_reg (new_rtx, reg, Pmode);\n \n       if (reg != 0)\n \t{\n-\t  emit_move_insn (reg, new_rtx);\n-\t  new_rtx = reg;\n-\t}\n+ \t  gcc_assert (REG_P (reg));\n+\t  new_rtx = expand_simple_binop (Pmode, PLUS, pic_offset_table_rtx,\n+\t\t\t\t\t new_rtx, reg, 1, OPTAB_DIRECT);\n+ \t}\n+      else\n+\tnew_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n     }\n   else if ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (addr) == 0)\n-\t   /* We can't use @GOTOFF for text labels on VxWorks;\n-\t      see gotoff_operand.  */\n+\t   /* We can't use @GOTOFF for text labels\n+\t      on VxWorks, see gotoff_operand.  */\n \t   || (TARGET_VXWORKS_RTP && GET_CODE (addr) == LABEL_REF))\n     {\n       rtx tmp = legitimize_pe_coff_symbol (addr, true);\n       if (tmp)\n         return tmp;\n \n-      /* For x64 PE-COFF there is no GOT table.  So we use address\n-         directly.  */\n+      /* For x64 PE-COFF there is no GOT table,\n+\t so we use address directly.  */\n       if (TARGET_64BIT && TARGET_PECOFF)\n \t{\n \t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_PCREL);\n \t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n \n-\t  if (reg == 0)\n-\t    reg = gen_reg_rtx (Pmode);\n-\t  emit_move_insn (reg, new_rtx);\n-\t  new_rtx = reg;\n+\t  new_rtx = copy_to_suggested_reg (new_rtx, reg, Pmode);\n \t}\n       else if (TARGET_64BIT && ix86_cmodel != CM_LARGE_PIC)\n \t{\n-\t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTPCREL);\n+\t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr),\n+\t\t\t\t    UNSPEC_GOTPCREL);\n \t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n \t  new_rtx = gen_const_mem (Pmode, new_rtx);\n \t  set_mem_alias_set (new_rtx, ix86_GOT_alias_set ());\n@@ -15528,9 +15502,8 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t}\n       else\n \t{\n-\t  /* This symbol must be referenced via a load from the\n-\t     Global Offset Table (@GOT).  */\n-\n+\t  /* This symbol must be referenced via a load\n+\t     from the Global Offset Table (@GOT).  */\n \t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);\n \t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n \t  if (TARGET_64BIT)\n@@ -15539,25 +15512,14 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t  new_rtx = gen_const_mem (Pmode, new_rtx);\n \t  set_mem_alias_set (new_rtx, ix86_GOT_alias_set ());\n \n-\t  if (reg == 0)\n-\t    reg = gen_reg_rtx (Pmode);\n-\t  emit_move_insn (reg, new_rtx);\n-\t  new_rtx = reg;\n+\t  new_rtx = copy_to_suggested_reg (new_rtx, reg, Pmode);\n \t}\n     }\n   else\n     {\n       if (CONST_INT_P (addr)\n \t  && !x86_64_immediate_operand (addr, VOIDmode))\n-\t{\n-\t  if (reg)\n-\t    {\n-\t      emit_move_insn (reg, addr);\n-\t      new_rtx = reg;\n-\t    }\n-\t  else\n-\t    new_rtx = force_reg (Pmode, addr);\n-\t}\n+\tnew_rtx = copy_to_suggested_reg (addr, reg, Pmode);\n       else if (GET_CODE (addr) == CONST)\n \t{\n \t  addr = XEXP (addr, 0);\n@@ -15571,13 +15533,15 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t    return orig;\n \t  gcc_assert (GET_CODE (addr) == PLUS);\n \t}\n+\n       if (GET_CODE (addr) == PLUS)\n \t{\n \t  rtx op0 = XEXP (addr, 0), op1 = XEXP (addr, 1);\n \n-\t  /* Check first to see if this is a constant offset from a @GOTOFF\n-\t     symbol reference.  */\n-\t  if (!TARGET_PECOFF && gotoff_operand (op0, Pmode)\n+\t  /* Check first to see if this is a constant\n+\t     offset from a @GOTOFF symbol reference.  */\n+\t  if (!TARGET_PECOFF\n+\t      && gotoff_operand (op0, Pmode)\n \t      && CONST_INT_P (op1))\n \t    {\n \t      if (!TARGET_64BIT)\n@@ -15586,13 +15550,18 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t\t\t\t\t    UNSPEC_GOTOFF);\n \t\t  new_rtx = gen_rtx_PLUS (Pmode, new_rtx, op1);\n \t\t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n-\t\t  new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n \n \t\t  if (reg != 0)\n \t\t    {\n-\t\t      emit_move_insn (reg, new_rtx);\n-\t\t      new_rtx = reg;\n+\t\t      gcc_assert (REG_P (reg));\n+\t\t      new_rtx = expand_simple_binop (Pmode, PLUS,\n+\t\t\t\t\t\t     pic_offset_table_rtx,\n+\t\t\t\t\t\t     new_rtx, reg, 1,\n+\t\t\t\t\t\t     OPTAB_DIRECT);\n \t\t    }\n+\t\t  else\n+\t\t    new_rtx\n+\t\t      = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n \t\t}\n \t      else\n \t\t{\n@@ -15601,7 +15570,9 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t\t    {\n \t\t      if (!x86_64_immediate_operand (op1, Pmode))\n \t\t\top1 = force_reg (Pmode, op1);\n-\t\t      new_rtx = gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), op1);\n+\n+\t\t      new_rtx\n+\t\t\t= gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), op1);\n \t\t    }\n \t\t}\n \t    }\n@@ -15619,6 +15590,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t\t    {\n \t\t      if (!x86_64_immediate_operand (new_rtx, mode))\n \t\t\tnew_rtx = force_reg (mode, new_rtx);\n+\n \t\t      new_rtx\n \t\t        = gen_rtx_PLUS (mode, force_reg (mode, base), new_rtx);\n \t\t    }\n@@ -15627,8 +15599,8 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t\t}\n \t      else\n \t\t{\n-\t\t  /* For %rip addressing, we have to use just disp32, not\n-\t\t     base nor index.  */\n+\t\t  /* For %rip addressing, we have to use\n+\t\t     just disp32, not base nor index.  */\n \t\t  if (TARGET_64BIT\n \t\t      && (GET_CODE (base) == SYMBOL_REF\n \t\t\t  || GET_CODE (base) == LABEL_REF))"}]}