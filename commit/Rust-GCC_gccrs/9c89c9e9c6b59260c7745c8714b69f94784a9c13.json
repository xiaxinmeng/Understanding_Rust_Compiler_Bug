{"sha": "9c89c9e9c6b59260c7745c8714b69f94784a9c13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4OWM5ZTljNmI1OTI2MGM3NzQ1Yzg3MTRiNjlmOTQ3ODRhOWMxMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-22T02:47:24Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-23T12:25:45Z"}, "message": "x86: Add __volatile__ to __cpuid and __cpuid_count\n\nSince CPUID instruction may return different values on hybrid core.\nvolatile is needed on asm statements in <cpuid.h>.\n\n\tPR target/99704\n\t* config/i386/cpuid.h (__cpuid): Add __volatile__.\n\t(__cpuid_count): Likewise.", "tree": {"sha": "4bc16429bd01613229df74b9ad624a4cb5b36790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bc16429bd01613229df74b9ad624a4cb5b36790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c89c9e9c6b59260c7745c8714b69f94784a9c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c89c9e9c6b59260c7745c8714b69f94784a9c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c89c9e9c6b59260c7745c8714b69f94784a9c13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c89c9e9c6b59260c7745c8714b69f94784a9c13/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6acd6692f1ac3c2ece3da36178df73e3b12c4f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acd6692f1ac3c2ece3da36178df73e3b12c4f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acd6692f1ac3c2ece3da36178df73e3b12c4f65"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "aebc17c6827198f8877ba29eda7567db487d5150", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c89c9e9c6b59260c7745c8714b69f94784a9c13/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c89c9e9c6b59260c7745c8714b69f94784a9c13/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=9c89c9e9c6b59260c7745c8714b69f94784a9c13", "patch": "@@ -212,28 +212,28 @@\n /* At least one cpu (Winchip 2) does not set %ebx and %ecx\n    for cpuid leaf 1. Forcibly zero the two registers before\n    calling cpuid as a precaution.  */\n-#define __cpuid(level, a, b, c, d)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    if (__builtin_constant_p (level) && (level) != 1)\t\\\n-      __asm__ (\"cpuid\\n\\t\"\t\t\t\t\\\n-\t      : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t      : \"0\" (level));\t\t\t\t\\\n-    else\t\t\t\t\t\t\\\n-      __asm__ (\"cpuid\\n\\t\"\t\t\t\t\\\n-\t      : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t      : \"0\" (level), \"1\" (0), \"2\" (0));\t\t\\\n+#define __cpuid(level, a, b, c, d)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (__builtin_constant_p (level) && (level) != 1)\t\t\t\\\n+      __asm__ __volatile__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n+\t\t\t    : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n+\t\t\t    : \"0\" (level));\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      __asm__ __volatile__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n+\t\t\t    : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n+\t\t\t    : \"0\" (level), \"1\" (0), \"2\" (0));\t\t\\\n   } while (0)\n #else\n-#define __cpuid(level, a, b, c, d)\t\t\t\\\n-  __asm__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level))\n+#define __cpuid(level, a, b, c, d)\t\t\t\t\t\\\n+  __asm__ __volatile__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n+\t\t\t: \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n+\t\t\t: \"0\" (level))\n #endif\n \n-#define __cpuid_count(level, count, a, b, c, d)\t\t\\\n-  __asm__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level), \"2\" (count))\n+#define __cpuid_count(level, count, a, b, c, d)\t\t\t\t\\\n+  __asm__ __volatile__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n+\t\t\t: \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n+\t\t\t: \"0\" (level), \"2\" (count))\n \n \n /* Return highest supported input value for cpuid instruction.  ext can"}]}