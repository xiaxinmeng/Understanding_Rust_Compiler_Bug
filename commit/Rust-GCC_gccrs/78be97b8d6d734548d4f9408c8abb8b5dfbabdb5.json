{"sha": "78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiZTk3YjhkNmQ3MzQ1NDhkNGY5NDA4YzhhYmI4YjVkZmJhYmRiNQ==", "commit": {"author": {"name": "Andrew Jenner", "email": "andrewjenner@gcc.gnu.org", "date": "2018-02-06T17:37:46Z"}, "committer": {"name": "Andrew Jenner", "email": "andrewjenner@gcc.gnu.org", "date": "2018-02-06T17:37:46Z"}, "message": "invoke.texi: Add section for the PowerPC SPE backend.\n\n       * doc/invoke.texi: Add section for the PowerPC SPE backend. Remove irrelevant options.\n\nFrom-SVN: r257422", "tree": {"sha": "74c43fa228abc35ed4831fc5277431731ebbe4ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74c43fa228abc35ed4831fc5277431731ebbe4ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5/comments", "author": null, "committer": null, "parents": [{"sha": "2b82c925639ff436af5ff1992b7fe176329cc941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b82c925639ff436af5ff1992b7fe176329cc941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b82c925639ff436af5ff1992b7fe176329cc941"}], "stats": {"total": 1114, "additions": 963, "deletions": 151}, "files": [{"sha": "49f693d0cb2d384fee0453c163a1d48d87e71cb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "patch": "@@ -1,3 +1,7 @@\n+2018-02-06  Andrew Jenner  <andrew@codeourcery.com>\n+\n+\t* doc/invoke.texi: Add section for the PowerPC SPE backend. Remove irrelevant options.\n+\n 2018-02-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n@@ -95,6 +99,7 @@\n \t%1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1,\n \t%2<round_saeonly_scalar_mask_op4>, %3}\"): ... this.\n \n+>>>>>>> .r257416\n 2018-02-02  Andrew Jenner  <andrew@codesourcery.com>\n \n \t* config/powerpcspe/powerpcspe.opt: Add Undocumented to irrelevant"}, {"sha": "367b99bc95cbf7164ec93fbe9c34ed8738dbcc1c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 958, "deletions": 151, "changes": 1109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "patch": "@@ -984,6 +984,46 @@ Objective-C and Objective-C++ Dialects}.\n @emph{PowerPC Options}\n See RS/6000 and PowerPC Options.\n \n+@emph{PowerPC SPE Options}\n+@gccoptlist{-mcpu=@var{cpu-type} @gol\n+-mtune=@var{cpu-type} @gol\n+-mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb @gol\n+-mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc @gol\n+-m32  -mxl-compat  -mno-xl-compat @gol\n+-malign-power  -malign-natural @gol\n+-msoft-float  -mhard-float  -mmultiple  -mno-multiple @gol\n+-msingle-float  -mdouble-float @gol\n+-mupdate  -mno-update @gol\n+-mavoid-indexed-addresses  -mno-avoid-indexed-addresses @gol\n+-mstrict-align  -mno-strict-align  -mrelocatable @gol\n+-mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib @gol\n+-mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig  -mbig-endian @gol\n+-msingle-pic-base @gol\n+-mprioritize-restricted-insns=@var{priority} @gol\n+-msched-costly-dep=@var{dependence_type} @gol\n+-minsert-sched-nops=@var{scheme} @gol\n+-mcall-sysv  -mcall-netbsd @gol\n+-maix-struct-return  -msvr4-struct-return @gol\n+-mabi=@var{abi-type}  -msecure-plt  -mbss-plt @gol\n+-mblock-move-inline-limit=@var{num} @gol\n+-misel  -mno-isel @gol\n+-misel=yes  -misel=no @gol\n+-mspe  -mno-spe @gol\n+-mspe=yes  -mspe=no @gol\n+-mfloat-gprs=yes  -mfloat-gprs=no  -mfloat-gprs=single  -mfloat-gprs=double @gol\n+-mprototype  -mno-prototype @gol\n+-msim  -mmvme  -mads  -myellowknife  -memb  -msdata @gol\n+-msdata=@var{opt}  -mvxworks  -G @var{num} @gol\n+-mrecip  -mrecip=@var{opt}  -mno-recip  -mrecip-precision @gol\n+-mno-recip-precision @gol\n+-mpointers-to-nested-functions  -mno-pointers-to-nested-functions @gol\n+-msave-toc-indirect  -mno-save-toc-indirect @gol\n+-mcompat-align-parm  -mno-compat-align-parm @gol\n+-mfloat128  -mno-float128 @gol\n+-mgnu-attribute  -mno-gnu-attribute @gol\n+-mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{reg} @gol\n+-mstack-protector-guard-offset=@var{offset}}\n+\n @emph{RISC-V Options}\n @gccoptlist{-mbranch-cost=@var{N-instruction} @gol\n -mplt  -mno-plt @gol\n@@ -1036,13 +1076,10 @@ See RS/6000 and PowerPC Options.\n -mblock-move-inline-limit=@var{num} @gol\n -misel  -mno-isel @gol\n -misel=yes  -misel=no @gol\n--mspe  -mno-spe @gol\n--mspe=yes  -mspe=no @gol\n -mpaired @gol\n -mvrsave  -mno-vrsave @gol\n -mmulhw  -mno-mulhw @gol\n -mdlmzb  -mno-dlmzb @gol\n--mfloat-gprs=yes  -mfloat-gprs=no  -mfloat-gprs=single  -mfloat-gprs=double @gol\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb  -msdata @gol\n -msdata=@var{opt}  -mvxworks  -G @var{num} @gol\n@@ -14356,6 +14393,7 @@ platform.\n * PDP-11 Options::\n * picoChip Options::\n * PowerPC Options::\n+* PowerPC SPE Options::\n * RISC-V Options::\n * RL78 Options::\n * RS/6000 and PowerPC Options::\n@@ -22028,149 +22066,947 @@ these warnings.\n \n These are listed under @xref{RS/6000 and PowerPC Options}.\n \n-@node RISC-V Options\n-@subsection RISC-V Options\n-@cindex RISC-V Options\n-\n-These command-line options are defined for RISC-V targets:\n+@node PowerPC SPE Options\n+@subsection PowerPC SPE Options\n+@cindex PowerPC SPE options\n \n+These @samp{-m} options are defined for PowerPC SPE:\n @table @gcctabopt\n-@item -mbranch-cost=@var{n}\n-@opindex mbranch-cost\n-Set the cost of branches to roughly @var{n} instructions.\n+@item -mmfcrf\n+@itemx -mno-mfcrf\n+@itemx -mpopcntb\n+@itemx -mno-popcntb\n+@opindex mmfcrf\n+@opindex mno-mfcrf\n+@opindex mpopcntb\n+@opindex mno-popcntb\n+You use these options to specify which instructions are available on the\n+processor you are using.  The default value of these options is\n+determined when configuring GCC@.  Specifying the\n+@option{-mcpu=@var{cpu_type}} overrides the specification of these\n+options.  We recommend you use the @option{-mcpu=@var{cpu_type}} option\n+rather than the options listed above.\n \n-@item -mplt\n-@itemx -mno-plt\n-@opindex plt\n-When generating PIC code, do or don't allow the use of PLTs. Ignored for\n-non-PIC.  The default is @option{-mplt}.\n+The @option{-mmfcrf} option allows GCC to generate the move from\n+condition register field instruction implemented on the POWER4\n+processor and other processors that support the PowerPC V2.01\n+architecture.\n+The @option{-mpopcntb} option allows GCC to generate the popcount and\n+double-precision FP reciprocal estimate instruction implemented on the\n+POWER5 processor and other processors that support the PowerPC V2.02\n+architecture.\n \n-@item -mabi=@var{ABI-string}\n-@opindex mabi\n-Specify integer and floating-point calling convention.  @var{ABI-string}\n-contains two parts: the size of integer types and the registers used for\n-floating-point types.  For example @samp{-march=rv64ifd -mabi=lp64d} means that\n-@samp{long} and pointers are 64-bit (implicitly defining @samp{int} to be\n-32-bit), and that floating-point values up to 64 bits wide are passed in F\n-registers.  Contrast this with @samp{-march=rv64ifd -mabi=lp64f}, which still\n-allows the compiler to generate code that uses the F and D extensions but only\n-allows floating-point values up to 32 bits long to be passed in registers; or\n-@samp{-march=rv64ifd -mabi=lp64}, in which no floating-point arguments will be\n-passed in registers.\n+@item -mcpu=@var{cpu_type}\n+@opindex mcpu\n+Set architecture type, register usage, and\n+instruction scheduling parameters for machine type @var{cpu_type}.\n+Supported values for @var{cpu_type} are @samp{8540}, @samp{8548},\n+and @samp{native}.\n \n-The default for this argument is system dependent, users who want a specific\n-calling convention should specify one explicitly.  The valid calling\n-conventions are: @samp{ilp32}, @samp{ilp32f}, @samp{ilp32d}, @samp{lp64},\n-@samp{lp64f}, and @samp{lp64d}.  Some calling conventions are impossible to\n-implement on some ISAs: for example, @samp{-march=rv32if -mabi=ilp32d} is\n-invalid because the ABI requires 64-bit values be passed in F registers, but F\n-registers are only 32 bits wide.\n+@option{-mcpu=powerpc} specifies pure 32-bit PowerPC (either\n+endian), with an appropriate, generic processor model assumed for\n+scheduling purposes.\n \n-@item -mfdiv\n-@itemx -mno-fdiv\n-@opindex mfdiv\n-Do or don't use hardware floating-point divide and square root instructions.\n-This requires the F or D extensions for floating-point registers.  The default\n-is to use them if the specified architecture has these instructions.\n+Specifying @samp{native} as cpu type detects and selects the\n+architecture option that corresponds to the host processor of the\n+system performing the compilation.\n+@option{-mcpu=native} has no effect if GCC does not recognize the\n+processor.\n \n-@item -mdiv\n-@itemx -mno-div\n-@opindex mdiv\n-Do or don't use hardware instructions for integer division.  This requires the\n-M extension.  The default is to use them if the specified architecture has\n-these instructions.\n+The other options specify a specific processor.  Code generated under\n+those options runs best on that processor, and may not run at all on\n+others.\n \n-@item -march=@var{ISA-string}\n-@opindex march\n-Generate code for given RISC-V ISA (e.g.@ @samp{rv64im}).  ISA strings must be\n-lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, and @samp{rv32imaf}.\n+The @option{-mcpu} options automatically enable or disable the\n+following options:\n \n-@item -mtune=@var{processor-string}\n-@opindex mtune\n-Optimize the output for the given processor, specified by microarchitecture\n-name.\n+@gccoptlist{-mhard-float  -mmfcrf  -mmultiple @gol\n+-mpopcntb -mpopcntd @gol\n+-msingle-float -mdouble-float @gol\n+-mfloat128}\n \n-@item -mpreferred-stack-boundary=@var{num}\n-@opindex mpreferred-stack-boundary\n-Attempt to keep the stack boundary aligned to a 2 raised to @var{num}\n-byte boundary.  If @option{-mpreferred-stack-boundary} is not specified,\n-the default is 4 (16 bytes or 128-bits).\n+The particular options set for any particular CPU varies between\n+compiler versions, depending on what setting seems to produce optimal\n+code for that CPU; it doesn't necessarily reflect the actual hardware's\n+capabilities.  If you wish to set an individual option to a particular\n+value, you may specify it after the @option{-mcpu} option, like\n+@option{-mcpu=8548}.\n \n-@strong{Warning:} If you use this switch, then you must build all modules with\n-the same value, including any libraries.  This includes the system libraries\n-and startup modules.\n+@item -mtune=@var{cpu_type}\n+@opindex mtune\n+Set the instruction scheduling parameters for machine type\n+@var{cpu_type}, but do not set the architecture type or register usage,\n+as @option{-mcpu=@var{cpu_type}} does.  The same\n+values for @var{cpu_type} are used for @option{-mtune} as for\n+@option{-mcpu}.  If both are specified, the code generated uses the\n+architecture and registers set by @option{-mcpu}, but the\n+scheduling parameters set by @option{-mtune}.\n \n-@item -msmall-data-limit=@var{n}\n-@opindex msmall-data-limit\n-Put global and static data smaller than @var{n} bytes into a special section\n-(on some targets).\n+@item -msecure-plt\n+@opindex msecure-plt\n+Generate code that allows @command{ld} and @command{ld.so}\n+to build executables and shared\n+libraries with non-executable @code{.plt} and @code{.got} sections.\n+This is a PowerPC\n+32-bit SYSV ABI option.\n \n-@item -msave-restore\n-@itemx -mno-save-restore\n-@opindex msave-restore\n-Do or don't use smaller but slower prologue and epilogue code that uses\n-library function calls.  The default is to use fast inline prologues and\n-epilogues.\n+@item -mbss-plt\n+@opindex mbss-plt\n+Generate code that uses a BSS @code{.plt} section that @command{ld.so}\n+fills in, and\n+requires @code{.plt} and @code{.got}\n+sections that are both writable and executable.\n+This is a PowerPC 32-bit SYSV ABI option.\n \n-@item -mstrict-align\n-@itemx -mno-strict-align\n-@opindex mstrict-align\n-Do not or do generate unaligned memory accesses.  The default is set depending\n-on whether the processor we are optimizing for supports fast unaligned access\n-or not.\n+@item -misel\n+@itemx -mno-isel\n+@opindex misel\n+@opindex mno-isel\n+This switch enables or disables the generation of ISEL instructions.\n \n-@item -mcmodel=medlow\n-@opindex mcmodel=medlow\n-Generate code for the medium-low code model. The program and its statically\n-defined symbols must lie within a single 2 GiB address range and must lie\n-between absolute addresses @minus{}2 GiB and +2 GiB. Programs can be\n-statically or dynamically linked. This is the default code model.\n+@item -misel=@var{yes/no}\n+This switch has been deprecated.  Use @option{-misel} and\n+@option{-mno-isel} instead.\n \n-@item -mcmodel=medany\n-@opindex mcmodel=medany\n-Generate code for the medium-any code model. The program and its statically\n-defined symbols must be within any single 2 GiB address range. Programs can be\n-statically or dynamically linked.\n+@item -mspe\n+@itemx -mno-spe\n+@opindex mspe\n+@opindex mno-spe\n+This switch enables or disables the generation of SPE simd\n+instructions.\n \n-@item -mexplicit-relocs\n-@itemx -mno-exlicit-relocs\n-Use or do not use assembler relocation operators when dealing with symbolic\n-addresses.  The alternative is to use assembler macros instead, which may\n-limit optimization.\n+@item -mspe=@var{yes/no}\n+This option has been deprecated.  Use @option{-mspe} and\n+@option{-mno-spe} instead.\n \n-@end table\n+@item -mfloat128\n+@itemx -mno-float128\n+@opindex mfloat128\n+@opindex mno-float128\n+Enable/disable the @var{__float128} keyword for IEEE 128-bit floating point\n+and use either software emulation for IEEE 128-bit floating point or\n+hardware instructions.\n \n-@node RL78 Options\n-@subsection RL78 Options\n-@cindex RL78 Options\n+@item -mfloat-gprs=@var{yes/single/double/no}\n+@itemx -mfloat-gprs\n+@opindex mfloat-gprs\n+This switch enables or disables the generation of floating-point\n+operations on the general-purpose registers for architectures that\n+support it.\n \n-@table @gcctabopt\n+The argument @samp{yes} or @samp{single} enables the use of\n+single-precision floating-point operations.\n \n-@item -msim\n-@opindex msim\n-Links in additional target libraries to support operation within a\n-simulator.\n+The argument @samp{double} enables the use of single and\n+double-precision floating-point operations.\n \n-@item -mmul=none\n-@itemx -mmul=g10\n-@itemx -mmul=g13\n-@itemx -mmul=g14\n-@itemx -mmul=rl78\n-@opindex mmul\n-Specifies the type of hardware multiplication and division support to\n-be used.  The simplest is @code{none}, which uses software for both\n-multiplication and division.  This is the default.  The @code{g13}\n-value is for the hardware multiply/divide peripheral found on the\n-RL78/G13 (S2 core) targets.  The @code{g14} value selects the use of\n-the multiplication and division instructions supported by the RL78/G14\n-(S3 core) parts.  The value @code{rl78} is an alias for @code{g14} and\n-the value @code{mg10} is an alias for @code{none}.\n+The argument @samp{no} disables floating-point operations on the\n+general-purpose registers.\n \n-In addition a C preprocessor macro is defined, based upon the setting\n-of this option.  Possible values are: @code{__RL78_MUL_NONE__},\n-@code{__RL78_MUL_G13__} or @code{__RL78_MUL_G14__}.\n+This option is currently only available on the MPC854x.\n \n-@item -mcpu=g10\n+@item -mfull-toc\n+@itemx -mno-fp-in-toc\n+@itemx -mno-sum-in-toc\n+@itemx -mminimal-toc\n+@opindex mfull-toc\n+@opindex mno-fp-in-toc\n+@opindex mno-sum-in-toc\n+@opindex mminimal-toc\n+Modify generation of the TOC (Table Of Contents), which is created for\n+every executable file.  The @option{-mfull-toc} option is selected by\n+default.  In that case, GCC allocates at least one TOC entry for\n+each unique non-automatic variable reference in your program.  GCC\n+also places floating-point constants in the TOC@.  However, only\n+16,384 entries are available in the TOC@.\n+\n+If you receive a linker error message that saying you have overflowed\n+the available TOC space, you can reduce the amount of TOC space used\n+with the @option{-mno-fp-in-toc} and @option{-mno-sum-in-toc} options.\n+@option{-mno-fp-in-toc} prevents GCC from putting floating-point\n+constants in the TOC and @option{-mno-sum-in-toc} forces GCC to\n+generate code to calculate the sum of an address and a constant at\n+run time instead of putting that sum into the TOC@.  You may specify one\n+or both of these options.  Each causes GCC to produce very slightly\n+slower and larger code at the expense of conserving TOC space.\n+\n+If you still run out of space in the TOC even when you specify both of\n+these options, specify @option{-mminimal-toc} instead.  This option causes\n+GCC to make only one TOC entry for every file.  When you specify this\n+option, GCC produces code that is slower and larger but which\n+uses extremely little TOC space.  You may wish to use this option\n+only on files that contain less frequently-executed code.\n+\n+@item -maix32\n+@opindex maix32\n+Disables the 64-bit ABI.  GCC defaults to @option{-maix32}.\n+\n+@item -mxl-compat\n+@itemx -mno-xl-compat\n+@opindex mxl-compat\n+@opindex mno-xl-compat\n+Produce code that conforms more closely to IBM XL compiler semantics\n+when using AIX-compatible ABI@.  Pass floating-point arguments to\n+prototyped functions beyond the register save area (RSA) on the stack\n+in addition to argument FPRs.  Do not assume that most significant\n+double in 128-bit long double value is properly rounded when comparing\n+values and converting to double.  Use XL symbol names for long double\n+support routines.\n+\n+The AIX calling convention was extended but not initially documented to\n+handle an obscure K&R C case of calling a function that takes the\n+address of its arguments with fewer arguments than declared.  IBM XL\n+compilers access floating-point arguments that do not fit in the\n+RSA from the stack when a subroutine is compiled without\n+optimization.  Because always storing floating-point arguments on the\n+stack is inefficient and rarely needed, this option is not enabled by\n+default and only is necessary when calling subroutines compiled by IBM\n+XL compilers without optimization.\n+\n+@item -malign-natural\n+@itemx -malign-power\n+@opindex malign-natural\n+@opindex malign-power\n+On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option\n+@option{-malign-natural} overrides the ABI-defined alignment of larger\n+types, such as floating-point doubles, on their natural size-based boundary.\n+The option @option{-malign-power} instructs GCC to follow the ABI-specified\n+alignment rules.  GCC defaults to the standard alignment defined in the ABI@.\n+\n+On 64-bit Darwin, natural alignment is the default, and @option{-malign-power}\n+is not supported.\n+\n+@item -msoft-float\n+@itemx -mhard-float\n+@opindex msoft-float\n+@opindex mhard-float\n+Generate code that does not use (uses) the floating-point register set.\n+Software floating-point emulation is provided if you use the\n+@option{-msoft-float} option, and pass the option to GCC when linking.\n+\n+@item -msingle-float\n+@itemx -mdouble-float\n+@opindex msingle-float\n+@opindex mdouble-float\n+Generate code for single- or double-precision floating-point operations.\n+@option{-mdouble-float} implies @option{-msingle-float}.\n+\n+@item -mmultiple\n+@itemx -mno-multiple\n+@opindex mmultiple\n+@opindex mno-multiple\n+Generate code that uses (does not use) the load multiple word\n+instructions and the store multiple word instructions.  These\n+instructions are generated by default on POWER systems, and not\n+generated on PowerPC systems.  Do not use @option{-mmultiple} on little-endian\n+PowerPC systems, since those instructions do not work when the\n+processor is in little-endian mode.  The exceptions are PPC740 and\n+PPC750 which permit these instructions in little-endian mode.\n+\n+@item -mupdate\n+@itemx -mno-update\n+@opindex mupdate\n+@opindex mno-update\n+Generate code that uses (does not use) the load or store instructions\n+that update the base register to the address of the calculated memory\n+location.  These instructions are generated by default.  If you use\n+@option{-mno-update}, there is a small window between the time that the\n+stack pointer is updated and the address of the previous frame is\n+stored, which means code that walks the stack frame across interrupts or\n+signals may get corrupted data.\n+\n+@item -mavoid-indexed-addresses\n+@itemx -mno-avoid-indexed-addresses\n+@opindex mavoid-indexed-addresses\n+@opindex mno-avoid-indexed-addresses\n+Generate code that tries to avoid (not avoid) the use of indexed load\n+or store instructions. These instructions can incur a performance\n+penalty on Power6 processors in certain situations, such as when\n+stepping through large arrays that cross a 16M boundary.  This option\n+is enabled by default when targeting Power6 and disabled otherwise.\n+\n+@item -mfused-madd\n+@itemx -mno-fused-madd\n+@opindex mfused-madd\n+@opindex mno-fused-madd\n+Generate code that uses (does not use) the floating-point multiply and\n+accumulate instructions.  These instructions are generated by default\n+if hardware floating point is used.  The machine-dependent\n+@option{-mfused-madd} option is now mapped to the machine-independent\n+@option{-ffp-contract=fast} option, and @option{-mno-fused-madd} is\n+mapped to @option{-ffp-contract=off}.\n+\n+@item -mno-strict-align\n+@itemx -mstrict-align\n+@opindex mno-strict-align\n+@opindex mstrict-align\n+On System V.4 and embedded PowerPC systems do not (do) assume that\n+unaligned memory references are handled by the system.\n+\n+@item -mrelocatable\n+@itemx -mno-relocatable\n+@opindex mrelocatable\n+@opindex mno-relocatable\n+Generate code that allows (does not allow) a static executable to be\n+relocated to a different address at run time.  A simple embedded\n+PowerPC system loader should relocate the entire contents of\n+@code{.got2} and 4-byte locations listed in the @code{.fixup} section,\n+a table of 32-bit addresses generated by this option.  For this to\n+work, all objects linked together must be compiled with\n+@option{-mrelocatable} or @option{-mrelocatable-lib}.\n+@option{-mrelocatable} code aligns the stack to an 8-byte boundary.\n+\n+@item -mrelocatable-lib\n+@itemx -mno-relocatable-lib\n+@opindex mrelocatable-lib\n+@opindex mno-relocatable-lib\n+Like @option{-mrelocatable}, @option{-mrelocatable-lib} generates a\n+@code{.fixup} section to allow static executables to be relocated at\n+run time, but @option{-mrelocatable-lib} does not use the smaller stack\n+alignment of @option{-mrelocatable}.  Objects compiled with\n+@option{-mrelocatable-lib} may be linked with objects compiled with\n+any combination of the @option{-mrelocatable} options.\n+\n+@item -mno-toc\n+@itemx -mtoc\n+@opindex mno-toc\n+@opindex mtoc\n+On System V.4 and embedded PowerPC systems do not (do) assume that\n+register 2 contains a pointer to a global area pointing to the addresses\n+used in the program.\n+\n+@item -mlittle\n+@itemx -mlittle-endian\n+@opindex mlittle\n+@opindex mlittle-endian\n+On System V.4 and embedded PowerPC systems compile code for the\n+processor in little-endian mode.  The @option{-mlittle-endian} option is\n+the same as @option{-mlittle}.\n+\n+@item -mbig\n+@itemx -mbig-endian\n+@opindex mbig\n+@opindex mbig-endian\n+On System V.4 and embedded PowerPC systems compile code for the\n+processor in big-endian mode.  The @option{-mbig-endian} option is\n+the same as @option{-mbig}.\n+\n+@item -mdynamic-no-pic\n+@opindex mdynamic-no-pic\n+On Darwin and Mac OS X systems, compile code so that it is not\n+relocatable, but that its external references are relocatable.  The\n+resulting code is suitable for applications, but not shared\n+libraries.\n+\n+@item -msingle-pic-base\n+@opindex msingle-pic-base\n+Treat the register used for PIC addressing as read-only, rather than\n+loading it in the prologue for each function.  The runtime system is\n+responsible for initializing this register with an appropriate value\n+before execution begins.\n+\n+@item -mprioritize-restricted-insns=@var{priority}\n+@opindex mprioritize-restricted-insns\n+This option controls the priority that is assigned to\n+dispatch-slot restricted instructions during the second scheduling\n+pass.  The argument @var{priority} takes the value @samp{0}, @samp{1},\n+or @samp{2} to assign no, highest, or second-highest (respectively)\n+priority to dispatch-slot restricted\n+instructions.\n+\n+@item -msched-costly-dep=@var{dependence_type}\n+@opindex msched-costly-dep\n+This option controls which dependences are considered costly\n+by the target during instruction scheduling.  The argument\n+@var{dependence_type} takes one of the following values:\n+\n+@table @asis\n+@item @samp{no}\n+No dependence is costly.\n+\n+@item @samp{all}\n+All dependences are costly.\n+\n+@item @samp{true_store_to_load}\n+A true dependence from store to load is costly.\n+\n+@item @samp{store_to_load}\n+Any dependence from store to load is costly.\n+\n+@item @var{number}\n+Any dependence for which the latency is greater than or equal to\n+@var{number} is costly.\n+@end table\n+\n+@item -minsert-sched-nops=@var{scheme}\n+@opindex minsert-sched-nops\n+This option controls which NOP insertion scheme is used during\n+the second scheduling pass.  The argument @var{scheme} takes one of the\n+following values:\n+\n+@table @asis\n+@item @samp{no}\n+Don't insert NOPs.\n+\n+@item @samp{pad}\n+Pad with NOPs any dispatch group that has vacant issue slots,\n+according to the scheduler's grouping.\n+\n+@item @samp{regroup_exact}\n+Insert NOPs to force costly dependent insns into\n+separate groups.  Insert exactly as many NOPs as needed to force an insn\n+to a new group, according to the estimated processor grouping.\n+\n+@item @var{number}\n+Insert NOPs to force costly dependent insns into\n+separate groups.  Insert @var{number} NOPs to force an insn to a new group.\n+@end table\n+\n+@item -mcall-sysv\n+@opindex mcall-sysv\n+On System V.4 and embedded PowerPC systems compile code using calling\n+conventions that adhere to the March 1995 draft of the System V\n+Application Binary Interface, PowerPC processor supplement.  This is the\n+default unless you configured GCC using @samp{powerpc-*-eabiaix}.\n+\n+@item -mcall-sysv-eabi\n+@itemx -mcall-eabi\n+@opindex mcall-sysv-eabi\n+@opindex mcall-eabi\n+Specify both @option{-mcall-sysv} and @option{-meabi} options.\n+\n+@item -mcall-sysv-noeabi\n+@opindex mcall-sysv-noeabi\n+Specify both @option{-mcall-sysv} and @option{-mno-eabi} options.\n+\n+@item -mcall-aixdesc\n+@opindex m\n+On System V.4 and embedded PowerPC systems compile code for the AIX\n+operating system.\n+\n+@item -mcall-linux\n+@opindex mcall-linux\n+On System V.4 and embedded PowerPC systems compile code for the\n+Linux-based GNU system.\n+\n+@item -mcall-freebsd\n+@opindex mcall-freebsd\n+On System V.4 and embedded PowerPC systems compile code for the\n+FreeBSD operating system.\n+\n+@item -mcall-netbsd\n+@opindex mcall-netbsd\n+On System V.4 and embedded PowerPC systems compile code for the\n+NetBSD operating system.\n+\n+@item -mcall-openbsd\n+@opindex mcall-netbsd\n+On System V.4 and embedded PowerPC systems compile code for the\n+OpenBSD operating system.\n+\n+@item -maix-struct-return\n+@opindex maix-struct-return\n+Return all structures in memory (as specified by the AIX ABI)@.\n+\n+@item -msvr4-struct-return\n+@opindex msvr4-struct-return\n+Return structures smaller than 8 bytes in registers (as specified by the\n+SVR4 ABI)@.\n+\n+@item -mabi=@var{abi-type}\n+@opindex mabi\n+Extend the current ABI with a particular extension, or remove such extension.\n+Valid values are @samp{altivec}, @samp{no-altivec}, @samp{spe},\n+@samp{no-spe}, @samp{ibmlongdouble}, @samp{ieeelongdouble},\n+@samp{elfv1}, @samp{elfv2}@.\n+\n+@item -mabi=spe\n+@opindex mabi=spe\n+Extend the current ABI with SPE ABI extensions.  This does not change\n+the default ABI, instead it adds the SPE ABI extensions to the current\n+ABI@.\n+\n+@item -mabi=no-spe\n+@opindex mabi=no-spe\n+Disable Book-E SPE ABI extensions for the current ABI@.\n+\n+@item -mabi=ibmlongdouble\n+@opindex mabi=ibmlongdouble\n+Change the current ABI to use IBM extended-precision long double.\n+This is not likely to work if your system defaults to using IEEE\n+extended-precision long double.  If you change the long double type\n+from IEEE extended-precision, the compiler will issue a warning unless\n+you use the @option{-Wno-psabi} option.\n+\n+@item -mabi=ieeelongdouble\n+@opindex mabi=ieeelongdouble\n+Change the current ABI to use IEEE extended-precision long double.\n+This is not likely to work if your system defaults to using IBM\n+extended-precision long double.  If you change the long double type\n+from IBM extended-precision, the compiler will issue a warning unless\n+you use the @option{-Wno-psabi} option.\n+\n+@item -mabi=elfv1\n+@opindex mabi=elfv1\n+Change the current ABI to use the ELFv1 ABI.\n+This is the default ABI for big-endian PowerPC 64-bit Linux.\n+Overriding the default ABI requires special system support and is\n+likely to fail in spectacular ways.\n+\n+@item -mabi=elfv2\n+@opindex mabi=elfv2\n+Change the current ABI to use the ELFv2 ABI.\n+This is the default ABI for little-endian PowerPC 64-bit Linux.\n+Overriding the default ABI requires special system support and is\n+likely to fail in spectacular ways.\n+\n+@item -mgnu-attribute\n+@itemx -mno-gnu-attribute\n+@opindex mgnu-attribute\n+@opindex mno-gnu-attribute\n+Emit .gnu_attribute assembly directives to set tag/value pairs in a\n+.gnu.attributes section that specify ABI variations in function\n+parameters or return values.\n+\n+@item -mprototype\n+@itemx -mno-prototype\n+@opindex mprototype\n+@opindex mno-prototype\n+On System V.4 and embedded PowerPC systems assume that all calls to\n+variable argument functions are properly prototyped.  Otherwise, the\n+compiler must insert an instruction before every non-prototyped call to\n+set or clear bit 6 of the condition code register (@code{CR}) to\n+indicate whether floating-point values are passed in the floating-point\n+registers in case the function takes variable arguments.  With\n+@option{-mprototype}, only calls to prototyped variable argument functions\n+set or clear the bit.\n+\n+@item -msim\n+@opindex msim\n+On embedded PowerPC systems, assume that the startup module is called\n+@file{sim-crt0.o} and that the standard C libraries are @file{libsim.a} and\n+@file{libc.a}.  This is the default for @samp{powerpc-*-eabisim}\n+configurations.\n+\n+@item -mmvme\n+@opindex mmvme\n+On embedded PowerPC systems, assume that the startup module is called\n+@file{crt0.o} and the standard C libraries are @file{libmvme.a} and\n+@file{libc.a}.\n+\n+@item -mads\n+@opindex mads\n+On embedded PowerPC systems, assume that the startup module is called\n+@file{crt0.o} and the standard C libraries are @file{libads.a} and\n+@file{libc.a}.\n+\n+@item -myellowknife\n+@opindex myellowknife\n+On embedded PowerPC systems, assume that the startup module is called\n+@file{crt0.o} and the standard C libraries are @file{libyk.a} and\n+@file{libc.a}.\n+\n+@item -mvxworks\n+@opindex mvxworks\n+On System V.4 and embedded PowerPC systems, specify that you are\n+compiling for a VxWorks system.\n+\n+@item -memb\n+@opindex memb\n+On embedded PowerPC systems, set the @code{PPC_EMB} bit in the ELF flags\n+header to indicate that @samp{eabi} extended relocations are used.\n+\n+@item -meabi\n+@itemx -mno-eabi\n+@opindex meabi\n+@opindex mno-eabi\n+On System V.4 and embedded PowerPC systems do (do not) adhere to the\n+Embedded Applications Binary Interface (EABI), which is a set of\n+modifications to the System V.4 specifications.  Selecting @option{-meabi}\n+means that the stack is aligned to an 8-byte boundary, a function\n+@code{__eabi} is called from @code{main} to set up the EABI\n+environment, and the @option{-msdata} option can use both @code{r2} and\n+@code{r13} to point to two separate small data areas.  Selecting\n+@option{-mno-eabi} means that the stack is aligned to a 16-byte boundary,\n+no EABI initialization function is called from @code{main}, and the\n+@option{-msdata} option only uses @code{r13} to point to a single\n+small data area.  The @option{-meabi} option is on by default if you\n+configured GCC using one of the @samp{powerpc*-*-eabi*} options.\n+\n+@item -msdata=eabi\n+@opindex msdata=eabi\n+On System V.4 and embedded PowerPC systems, put small initialized\n+@code{const} global and static data in the @code{.sdata2} section, which\n+is pointed to by register @code{r2}.  Put small initialized\n+non-@code{const} global and static data in the @code{.sdata} section,\n+which is pointed to by register @code{r13}.  Put small uninitialized\n+global and static data in the @code{.sbss} section, which is adjacent to\n+the @code{.sdata} section.  The @option{-msdata=eabi} option is\n+incompatible with the @option{-mrelocatable} option.  The\n+@option{-msdata=eabi} option also sets the @option{-memb} option.\n+\n+@item -msdata=sysv\n+@opindex msdata=sysv\n+On System V.4 and embedded PowerPC systems, put small global and static\n+data in the @code{.sdata} section, which is pointed to by register\n+@code{r13}.  Put small uninitialized global and static data in the\n+@code{.sbss} section, which is adjacent to the @code{.sdata} section.\n+The @option{-msdata=sysv} option is incompatible with the\n+@option{-mrelocatable} option.\n+\n+@item -msdata=default\n+@itemx -msdata\n+@opindex msdata=default\n+@opindex msdata\n+On System V.4 and embedded PowerPC systems, if @option{-meabi} is used,\n+compile code the same as @option{-msdata=eabi}, otherwise compile code the\n+same as @option{-msdata=sysv}.\n+\n+@item -msdata=data\n+@opindex msdata=data\n+On System V.4 and embedded PowerPC systems, put small global\n+data in the @code{.sdata} section.  Put small uninitialized global\n+data in the @code{.sbss} section.  Do not use register @code{r13}\n+to address small data however.  This is the default behavior unless\n+other @option{-msdata} options are used.\n+\n+@item -msdata=none\n+@itemx -mno-sdata\n+@opindex msdata=none\n+@opindex mno-sdata\n+On embedded PowerPC systems, put all initialized global and static data\n+in the @code{.data} section, and all uninitialized data in the\n+@code{.bss} section.\n+\n+@item -mblock-move-inline-limit=@var{num}\n+@opindex mblock-move-inline-limit\n+Inline all block moves (such as calls to @code{memcpy} or structure\n+copies) less than or equal to @var{num} bytes.  The minimum value for\n+@var{num} is 32 bytes on 32-bit targets and 64 bytes on 64-bit\n+targets.  The default value is target-specific.\n+\n+@item -G @var{num}\n+@opindex G\n+@cindex smaller data references (PowerPC)\n+@cindex .sdata/.sdata2 references (PowerPC)\n+On embedded PowerPC systems, put global and static items less than or\n+equal to @var{num} bytes into the small data or BSS sections instead of\n+the normal data or BSS section.  By default, @var{num} is 8.  The\n+@option{-G @var{num}} switch is also passed to the linker.\n+All modules should be compiled with the same @option{-G @var{num}} value.\n+\n+@item -mregnames\n+@itemx -mno-regnames\n+@opindex mregnames\n+@opindex mno-regnames\n+On System V.4 and embedded PowerPC systems do (do not) emit register\n+names in the assembly language output using symbolic forms.\n+\n+@item -mlongcall\n+@itemx -mno-longcall\n+@opindex mlongcall\n+@opindex mno-longcall\n+By default assume that all calls are far away so that a longer and more\n+expensive calling sequence is required.  This is required for calls\n+farther than 32 megabytes (33,554,432 bytes) from the current location.\n+A short call is generated if the compiler knows\n+the call cannot be that far away.  This setting can be overridden by\n+the @code{shortcall} function attribute, or by @code{#pragma\n+longcall(0)}.\n+\n+Some linkers are capable of detecting out-of-range calls and generating\n+glue code on the fly.  On these systems, long calls are unnecessary and\n+generate slower code.  As of this writing, the AIX linker can do this,\n+as can the GNU linker for PowerPC/64.  It is planned to add this feature\n+to the GNU linker for 32-bit PowerPC systems as well.\n+\n+In the future, GCC may ignore all longcall specifications\n+when the linker is known to generate glue.\n+\n+@item -mtls-markers\n+@itemx -mno-tls-markers\n+@opindex mtls-markers\n+@opindex mno-tls-markers\n+Mark (do not mark) calls to @code{__tls_get_addr} with a relocation\n+specifying the function argument.  The relocation allows the linker to\n+reliably associate function call with argument setup instructions for\n+TLS optimization, which in turn allows GCC to better schedule the\n+sequence.\n+\n+@item -mrecip\n+@itemx -mno-recip\n+@opindex mrecip\n+This option enables use of the reciprocal estimate and\n+reciprocal square root estimate instructions with additional\n+Newton-Raphson steps to increase precision instead of doing a divide or\n+square root and divide for floating-point arguments.  You should use\n+the @option{-ffast-math} option when using @option{-mrecip} (or at\n+least @option{-funsafe-math-optimizations},\n+@option{-ffinite-math-only}, @option{-freciprocal-math} and\n+@option{-fno-trapping-math}).  Note that while the throughput of the\n+sequence is generally higher than the throughput of the non-reciprocal\n+instruction, the precision of the sequence can be decreased by up to 2\n+ulp (i.e.@: the inverse of 1.0 equals 0.99999994) for reciprocal square\n+roots.\n+\n+@item -mrecip=@var{opt}\n+@opindex mrecip=opt\n+This option controls which reciprocal estimate instructions\n+may be used.  @var{opt} is a comma-separated list of options, which may\n+be preceded by a @code{!} to invert the option:\n+\n+@table @samp\n+\n+@item all\n+Enable all estimate instructions.\n+\n+@item default\n+Enable the default instructions, equivalent to @option{-mrecip}.\n+\n+@item none\n+Disable all estimate instructions, equivalent to @option{-mno-recip}.\n+\n+@item div\n+Enable the reciprocal approximation instructions for both\n+single and double precision.\n+\n+@item divf\n+Enable the single-precision reciprocal approximation instructions.\n+\n+@item divd\n+Enable the double-precision reciprocal approximation instructions.\n+\n+@item rsqrt\n+Enable the reciprocal square root approximation instructions for both\n+single and double precision.\n+\n+@item rsqrtf\n+Enable the single-precision reciprocal square root approximation instructions.\n+\n+@item rsqrtd\n+Enable the double-precision reciprocal square root approximation instructions.\n+\n+@end table\n+\n+So, for example, @option{-mrecip=all,!rsqrtd} enables\n+all of the reciprocal estimate instructions, except for the\n+@code{FRSQRTE}, @code{XSRSQRTEDP}, and @code{XVRSQRTEDP} instructions\n+which handle the double-precision reciprocal square root calculations.\n+\n+@item -mrecip-precision\n+@itemx -mno-recip-precision\n+@opindex mrecip-precision\n+Assume (do not assume) that the reciprocal estimate instructions\n+provide higher-precision estimates than is mandated by the PowerPC\n+ABI.  Selecting @option{-mcpu=power6}, @option{-mcpu=power7} or\n+@option{-mcpu=power8} automatically selects @option{-mrecip-precision}.\n+The double-precision square root estimate instructions are not generated by\n+default on low-precision machines, since they do not provide an\n+estimate that converges after three steps.\n+\n+@item -mpointers-to-nested-functions\n+@itemx -mno-pointers-to-nested-functions\n+@opindex mpointers-to-nested-functions\n+Generate (do not generate) code to load up the static chain register\n+(@code{r11}) when calling through a pointer on AIX and 64-bit Linux\n+systems where a function pointer points to a 3-word descriptor giving\n+the function address, TOC value to be loaded in register @code{r2}, and\n+static chain value to be loaded in register @code{r11}.  The\n+@option{-mpointers-to-nested-functions} is on by default.  You cannot\n+call through pointers to nested functions or pointers\n+to functions compiled in other languages that use the static chain if\n+you use @option{-mno-pointers-to-nested-functions}.\n+\n+@item -msave-toc-indirect\n+@itemx -mno-save-toc-indirect\n+@opindex msave-toc-indirect\n+Generate (do not generate) code to save the TOC value in the reserved\n+stack location in the function prologue if the function calls through\n+a pointer on AIX and 64-bit Linux systems.  If the TOC value is not\n+saved in the prologue, it is saved just before the call through the\n+pointer.  The @option{-mno-save-toc-indirect} option is the default.\n+\n+@item -mcompat-align-parm\n+@itemx -mno-compat-align-parm\n+@opindex mcompat-align-parm\n+Generate (do not generate) code to pass structure parameters with a\n+maximum alignment of 64 bits, for compatibility with older versions\n+of GCC.\n+\n+Older versions of GCC (prior to 4.9.0) incorrectly did not align a\n+structure parameter on a 128-bit boundary when that structure contained\n+a member requiring 128-bit alignment.  This is corrected in more\n+recent versions of GCC.  This option may be used to generate code\n+that is compatible with functions compiled with older versions of\n+GCC.\n+\n+The @option{-mno-compat-align-parm} option is the default.\n+\n+@item -mstack-protector-guard=@var{guard}\n+@itemx -mstack-protector-guard-reg=@var{reg}\n+@itemx -mstack-protector-guard-offset=@var{offset}\n+@itemx -mstack-protector-guard-symbol=@var{symbol}\n+@opindex mstack-protector-guard\n+@opindex mstack-protector-guard-reg\n+@opindex mstack-protector-guard-offset\n+@opindex mstack-protector-guard-symbol\n+Generate stack protection code using canary at @var{guard}.  Supported\n+locations are @samp{global} for global canary or @samp{tls} for per-thread\n+canary in the TLS block (the default with GNU libc version 2.4 or later).\n+\n+With the latter choice the options\n+@option{-mstack-protector-guard-reg=@var{reg}} and\n+@option{-mstack-protector-guard-offset=@var{offset}} furthermore specify\n+which register to use as base register for reading the canary, and from what\n+offset from that base register. The default for those is as specified in the\n+relevant ABI.  @option{-mstack-protector-guard-symbol=@var{symbol}} overrides\n+the offset with a symbol reference to a canary in the TLS block.\n+@end table\n+\n+\n+@node RISC-V Options\n+@subsection RISC-V Options\n+@cindex RISC-V Options\n+\n+These command-line options are defined for RISC-V targets:\n+\n+@table @gcctabopt\n+@item -mbranch-cost=@var{n}\n+@opindex mbranch-cost\n+Set the cost of branches to roughly @var{n} instructions.\n+\n+@item -mplt\n+@itemx -mno-plt\n+@opindex plt\n+When generating PIC code, do or don't allow the use of PLTs. Ignored for\n+non-PIC.  The default is @option{-mplt}.\n+\n+@item -mabi=@var{ABI-string}\n+@opindex mabi\n+Specify integer and floating-point calling convention.  @var{ABI-string}\n+contains two parts: the size of integer types and the registers used for\n+floating-point types.  For example @samp{-march=rv64ifd -mabi=lp64d} means that\n+@samp{long} and pointers are 64-bit (implicitly defining @samp{int} to be\n+32-bit), and that floating-point values up to 64 bits wide are passed in F\n+registers.  Contrast this with @samp{-march=rv64ifd -mabi=lp64f}, which still\n+allows the compiler to generate code that uses the F and D extensions but only\n+allows floating-point values up to 32 bits long to be passed in registers; or\n+@samp{-march=rv64ifd -mabi=lp64}, in which no floating-point arguments will be\n+passed in registers.\n+\n+The default for this argument is system dependent, users who want a specific\n+calling convention should specify one explicitly.  The valid calling\n+conventions are: @samp{ilp32}, @samp{ilp32f}, @samp{ilp32d}, @samp{lp64},\n+@samp{lp64f}, and @samp{lp64d}.  Some calling conventions are impossible to\n+implement on some ISAs: for example, @samp{-march=rv32if -mabi=ilp32d} is\n+invalid because the ABI requires 64-bit values be passed in F registers, but F\n+registers are only 32 bits wide.\n+\n+@item -mfdiv\n+@itemx -mno-fdiv\n+@opindex mfdiv\n+Do or don't use hardware floating-point divide and square root instructions.\n+This requires the F or D extensions for floating-point registers.  The default\n+is to use them if the specified architecture has these instructions.\n+\n+@item -mdiv\n+@itemx -mno-div\n+@opindex mdiv\n+Do or don't use hardware instructions for integer division.  This requires the\n+M extension.  The default is to use them if the specified architecture has\n+these instructions.\n+\n+@item -march=@var{ISA-string}\n+@opindex march\n+Generate code for given RISC-V ISA (e.g.@ @samp{rv64im}).  ISA strings must be\n+lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, and @samp{rv32imaf}.\n+\n+@item -mtune=@var{processor-string}\n+@opindex mtune\n+Optimize the output for the given processor, specified by microarchitecture\n+name.\n+\n+@item -mpreferred-stack-boundary=@var{num}\n+@opindex mpreferred-stack-boundary\n+Attempt to keep the stack boundary aligned to a 2 raised to @var{num}\n+byte boundary.  If @option{-mpreferred-stack-boundary} is not specified,\n+the default is 4 (16 bytes or 128-bits).\n+\n+@strong{Warning:} If you use this switch, then you must build all modules with\n+the same value, including any libraries.  This includes the system libraries\n+and startup modules.\n+\n+@item -msmall-data-limit=@var{n}\n+@opindex msmall-data-limit\n+Put global and static data smaller than @var{n} bytes into a special section\n+(on some targets).\n+\n+@item -msave-restore\n+@itemx -mno-save-restore\n+@opindex msave-restore\n+Do or don't use smaller but slower prologue and epilogue code that uses\n+library function calls.  The default is to use fast inline prologues and\n+epilogues.\n+\n+@item -mstrict-align\n+@itemx -mno-strict-align\n+@opindex mstrict-align\n+Do not or do generate unaligned memory accesses.  The default is set depending\n+on whether the processor we are optimizing for supports fast unaligned access\n+or not.\n+\n+@item -mcmodel=medlow\n+@opindex mcmodel=medlow\n+Generate code for the medium-low code model. The program and its statically\n+defined symbols must lie within a single 2 GiB address range and must lie\n+between absolute addresses @minus{}2 GiB and +2 GiB. Programs can be\n+statically or dynamically linked. This is the default code model.\n+\n+@item -mcmodel=medany\n+@opindex mcmodel=medany\n+Generate code for the medium-any code model. The program and its statically\n+defined symbols must be within any single 2 GiB address range. Programs can be\n+statically or dynamically linked.\n+\n+@item -mexplicit-relocs\n+@itemx -mno-exlicit-relocs\n+Use or do not use assembler relocation operators when dealing with symbolic\n+addresses.  The alternative is to use assembler macros instead, which may\n+limit optimization.\n+\n+@end table\n+\n+@node RL78 Options\n+@subsection RL78 Options\n+@cindex RL78 Options\n+\n+@table @gcctabopt\n+\n+@item -msim\n+@opindex msim\n+Links in additional target libraries to support operation within a\n+simulator.\n+\n+@item -mmul=none\n+@itemx -mmul=g10\n+@itemx -mmul=g13\n+@itemx -mmul=g14\n+@itemx -mmul=rl78\n+@opindex mmul\n+Specifies the type of hardware multiplication and division support to\n+be used.  The simplest is @code{none}, which uses software for both\n+multiplication and division.  This is the default.  The @code{g13}\n+value is for the hardware multiply/divide peripheral found on the\n+RL78/G13 (S2 core) targets.  The @code{g14} value selects the use of\n+the multiplication and division instructions supported by the RL78/G14\n+(S3 core) parts.  The value @code{rl78} is an alias for @code{g14} and\n+the value @code{mg10} is an alias for @code{none}.\n+\n+In addition a C preprocessor macro is defined, based upon the setting\n+of this option.  Possible values are: @code{__RL78_MUL_NONE__},\n+@code{__RL78_MUL_G13__} or @code{__RL78_MUL_G14__}.\n+\n+@item -mcpu=g10\n @itemx -mcpu=g13\n @itemx -mcpu=g14\n @itemx -mcpu=rl78\n@@ -22492,24 +23328,13 @@ This switch enables or disables the generation of ISEL instructions.\n This switch has been deprecated.  Use @option{-misel} and\n @option{-mno-isel} instead.\n \n-@item -mspe\n-@itemx -mno-spe\n-@opindex mspe\n-@opindex mno-spe\n-This switch enables or disables the generation of SPE simd\n-instructions.\n-\n @item -mpaired\n @itemx -mno-paired\n @opindex mpaired\n @opindex mno-paired\n This switch enables or disables the generation of PAIRED simd\n instructions.\n \n-@item -mspe=@var{yes/no}\n-This option has been deprecated.  Use @option{-mspe} and\n-@option{-mno-spe} instead.\n-\n @item -mvsx\n @itemx -mno-vsx\n @opindex mvsx\n@@ -22610,24 +23435,6 @@ The default for @option{-mfloat128-hardware} is enabled on PowerPC\n Linux systems using the ISA 3.0 instruction set, and disabled on other\n systems.\n \n-@item -mfloat-gprs=@var{yes/single/double/no}\n-@itemx -mfloat-gprs\n-@opindex mfloat-gprs\n-This switch enables or disables the generation of floating-point\n-operations on the general-purpose registers for architectures that\n-support it.\n-\n-The argument @samp{yes} or @samp{single} enables the use of\n-single-precision floating-point operations.\n-\n-The argument @samp{double} enables the use of single and\n-double-precision floating-point operations.\n-\n-The argument @samp{no} disables floating-point operations on the\n-general-purpose registers.\n-\n-This option is currently only available on the MPC854x.\n-\n @item -m32\n @itemx -m64\n @opindex m32"}]}