{"sha": "89ec3b67dbe856a447d068b053bc19559f136f43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllYzNiNjdkYmU4NTZhNDQ3ZDA2OGIwNTNiYzE5NTU5ZjEzNmY0Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-20T14:20:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-20T15:22:26Z"}, "message": "libstdc++: fix is_default_constructible for hash containers [PR 100863]\n\nThe recent change to _Hashtable_ebo_helper for this PR broke the\nis_default_constructible trait for a hash container with a non-default\nconstructible allocator. That happens because the constructor needs to\nbe user-provided in order to initialize the member, and so is not\ndefined as deleted when the type is not default constructible.\n\nBy making _Hashtable derive from _Enable_special_members we can ensure\nthat the default constructor for the std::unordered_xxx containers is\ndeleted when it would be ill-formed. This makes the trait give the\ncorrect answer.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100863\n\t* include/bits/hashtable.h (_Hashtable): Conditionally delete\n\tdefault constructor by deriving from _Enable_special_members.\n\t* testsuite/23_containers/unordered_map/cons/default.cc: New test.\n\t* testsuite/23_containers/unordered_set/cons/default.cc: New test.", "tree": {"sha": "095bc49b129d27b0523b87be0e941583a56a020e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095bc49b129d27b0523b87be0e941583a56a020e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ec3b67dbe856a447d068b053bc19559f136f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ec3b67dbe856a447d068b053bc19559f136f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ec3b67dbe856a447d068b053bc19559f136f43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ec3b67dbe856a447d068b053bc19559f136f43/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef9b135793a528c05c4a3e22649744955aa2dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9b135793a528c05c4a3e22649744955aa2dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef9b135793a528c05c4a3e22649744955aa2dfb"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "adb59213f2de3175e5331bb6cdd3b39604dc8446", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ec3b67dbe856a447d068b053bc19559f136f43/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ec3b67dbe856a447d068b053bc19559f136f43/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=89ec3b67dbe856a447d068b053bc19559f136f43", "patch": "@@ -33,6 +33,7 @@\n #pragma GCC system_header\n \n #include <bits/hashtable_policy.h>\n+#include <bits/enable_special_members.h>\n #if __cplusplus > 201402L\n # include <bits/node_handle.h>\n #endif\n@@ -48,6 +49,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t       // Mandatory to have erase not throwing.\n \t\t       __is_nothrow_invocable<const _Hash&, const _Tp&>>>;\n \n+  // Helper to conditionally delete the default constructor.\n+  // The _Hash_node_base type is used to distinguish this specialization\n+  // from any other potentially-overlapping subobjects of the hashtable.\n+  template<typename _Equal, typename _Hash, typename _Allocator>\n+    using _Hashtable_enable_default_ctor\n+      = _Enable_special_members<__and_<is_default_constructible<_Equal>,\n+\t\t\t\t       is_default_constructible<_Hash>,\n+\t\t\t\t       is_default_constructible<_Allocator>>{},\n+\t\t\t\ttrue, true, true, true, true,\n+\t\t\t\t__detail::_Hash_node_base>;\n+\n   /**\n    *  Primary class template _Hashtable.\n    *\n@@ -183,7 +195,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       private __detail::_Hashtable_alloc<\n \t__alloc_rebind<_Alloc,\n \t\t       __detail::_Hash_node<_Value,\n-\t\t\t\t\t    _Traits::__hash_cached::value>>>\n+\t\t\t\t\t    _Traits::__hash_cached::value>>>,\n+      private _Hashtable_enable_default_ctor<_Equal, _Hash, _Alloc>\n     {\n       static_assert(is_same<typename remove_cv<_Value>::type, _Value>::value,\n \t  \"unordered container must have a non-const, non-volatile value_type\");"}, {"sha": "e4f836fde3ebd187825646fda21e70d392a12541", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/default.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ec3b67dbe856a447d068b053bc19559f136f43/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ec3b67dbe856a447d068b053bc19559f136f43/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdefault.cc?ref=89ec3b67dbe856a447d068b053bc19559f136f43", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile { target c++11 } }\n+#include <unordered_map>\n+\n+static_assert( std::is_default_constructible<std::unordered_map<int, int>>{}, \"\" );\n+\n+template<typename T>\n+  struct NoDefaultConsAlloc\n+  {\n+    using value_type = T;\n+\n+    NoDefaultConsAlloc(int) noexcept { }\n+\n+    template<typename U>\n+      NoDefaultConsAlloc(const NoDefaultConsAlloc<U>&) { }\n+\n+    T *allocate(std::size_t n)\n+    { return std::allocator<T>().allocate(n); }\n+\n+    void deallocate(T *p, std::size_t n)\n+    { std::allocator<T>().deallocate(p, n); }\n+  };\n+\n+using Map = std::unordered_map<int, int, std::hash<int>, std::equal_to<int>,\n+\t\t\t       NoDefaultConsAlloc<std::pair<const int, int>>>;\n+static_assert( ! std::is_default_constructible<Map>{}, \"PR libstdc++/100863\" );\n+\n+struct Hash : std::hash<int> { Hash(int) { } };\n+using Map2 = std::unordered_map<int, int, Hash>;\n+static_assert( ! std::is_default_constructible<Map2>{}, \"PR libstdc++/100863\" );\n+\n+struct Equal : std::equal_to<int> { Equal(int) { } };\n+using Map3 = std::unordered_map<int, int, std::hash<int>, Equal>;\n+static_assert( ! std::is_default_constructible<Map3>{}, \"PR libstdc++/100863\" );"}, {"sha": "42fbf3d79977efcc4e8b18b5ca98e2d5e12b33e2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/default.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ec3b67dbe856a447d068b053bc19559f136f43/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ec3b67dbe856a447d068b053bc19559f136f43/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdefault.cc?ref=89ec3b67dbe856a447d068b053bc19559f136f43", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile { target c++11 } }\n+#include <unordered_set>\n+\n+static_assert( std::is_default_constructible<std::unordered_set<int>>{}, \"\" );\n+\n+template<typename T>\n+  struct NoDefaultConsAlloc\n+  {\n+    using value_type = T;\n+\n+    NoDefaultConsAlloc(int) noexcept { }\n+\n+    template<typename U>\n+      NoDefaultConsAlloc(const NoDefaultConsAlloc<U>&) { }\n+\n+    T *allocate(std::size_t n)\n+    { return std::allocator<T>().allocate(n); }\n+\n+    void deallocate(T *p, std::size_t n)\n+    { std::allocator<T>().deallocate(p, n); }\n+  };\n+\n+using Set = std::unordered_set<int, std::hash<int>, std::equal_to<int>,\n+\t\t\t       NoDefaultConsAlloc<int>>;\n+static_assert( ! std::is_default_constructible<Set>{}, \"PR libstdc++/100863\" );\n+\n+struct Hash : std::hash<int> { Hash(int) { } };\n+using Set2 = std::unordered_set<int, Hash>;\n+static_assert( ! std::is_default_constructible<Set2>{}, \"PR libstdc++/100863\" );\n+\n+struct Equal : std::equal_to<int> { Equal(int) { } };\n+using Set3 = std::unordered_set<int, std::hash<int>, Equal>;\n+static_assert( ! std::is_default_constructible<Set3>{}, \"PR libstdc++/100863\" );"}]}