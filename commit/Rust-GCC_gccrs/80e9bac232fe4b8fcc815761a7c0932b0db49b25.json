{"sha": "80e9bac232fe4b8fcc815761a7c0932b0db49b25", "node_id": "C_kwDOANBUbNoAKDgwZTliYWMyMzJmZTRiOGZjYzgxNTc2MWE3YzA5MzJiMGRiNDliMjU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-24T12:21:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-24T14:23:36Z"}, "message": "libstdc++: Fix members of net::ip::network_v4\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/internet (network_v4::netmask()): Avoid\n\tundefined shift.\n\t(network_v4::broadcast()): Optimize and fix for targets with\n\tuint_least32_t wider than 32 bits.\n\t(network_v4::to_string(const Allocator&)): Fix for custom\n\tallocators and optimize using to_chars.\n\t(operator==(const network_v4&, const network_v4&)): Add missing\n\tconstexpr.\n\t(operator==(const network_v6&, const network_v6&)): Likewise.\n\t* testsuite/experimental/net/internet/network/v4/cons.cc: New test.\n\t* testsuite/experimental/net/internet/network/v4/members.cc: New test.", "tree": {"sha": "143864dc9de040d859ffe1d2e56ffe1c71cefb35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/143864dc9de040d859ffe1d2e56ffe1c71cefb35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80e9bac232fe4b8fcc815761a7c0932b0db49b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e9bac232fe4b8fcc815761a7c0932b0db49b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80e9bac232fe4b8fcc815761a7c0932b0db49b25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e9bac232fe4b8fcc815761a7c0932b0db49b25/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ecfb75e053d54dd36dd3900d3096004f6d9aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ecfb75e053d54dd36dd3900d3096004f6d9aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ecfb75e053d54dd36dd3900d3096004f6d9aae"}], "stats": {"total": 356, "additions": 343, "deletions": 13}, "files": [{"sha": "5336b8a8ce31490aa36cebc5eb9659190ba90aa3", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9bac232fe4b8fcc815761a7c0932b0db49b25/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9bac232fe4b8fcc815761a7c0932b0db49b25/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=80e9bac232fe4b8fcc815761a7c0932b0db49b25", "patch": "@@ -1219,10 +1219,10 @@ namespace ip\n \n   /// @}\n \n-  bool\n+  constexpr bool\n   operator==(const network_v4& __a, const network_v4& __b) noexcept;\n \n-  bool\n+  constexpr bool\n   operator==(const network_v6& __a, const network_v6& __b) noexcept;\n \n \n@@ -1263,10 +1263,10 @@ namespace ip\n     constexpr address_v4\n     netmask() const noexcept\n     {\n-      address_v4::uint_type __val = address_v4::broadcast().to_uint();\n-      __val >>= (32 - _M_prefix_len);\n-      __val <<= (32 - _M_prefix_len);\n-      return address_v4{__val};\n+      address_v4 __m;\n+      if (_M_prefix_len)\n+\t__m = address_v4(0xFFFFFFFFu << (32 - _M_prefix_len));\n+      return __m;\n     }\n \n     constexpr address_v4\n@@ -1275,7 +1275,7 @@ namespace ip\n \n     constexpr address_v4\n     broadcast() const noexcept\n-    { return address_v4{_M_addr.to_uint() | ~netmask().to_uint()}; }\n+    { return address_v4{_M_addr.to_uint() | (0xFFFFFFFFu >> _M_prefix_len)}; }\n \n     address_v4_range\n     hosts() const noexcept\n@@ -1306,8 +1306,23 @@ namespace ip\n       __string_with<_Allocator>\n       to_string(const _Allocator& __a = _Allocator()) const\n       {\n-\treturn address().to_string(__a) + '/'\n-\t  + std::to_string(prefix_length());\n+\tauto __str = address().to_string(__a);\n+\tconst unsigned __addrlen = __str.length();\n+\tconst unsigned __preflen = prefix_length() >= 10 ? 2 : 1;\n+\tauto __write = [=](char* __p, size_t __n) {\n+\t  __p[__addrlen] = '/';\n+\t  std::__detail::__to_chars_10_impl(__p + __addrlen + 1, __preflen,\n+\t\t\t\t\t    (unsigned char)prefix_length());\n+\t  return __n;\n+\t};\n+\tconst unsigned __len = __addrlen + 1 + __preflen;\n+#if __cpp_lib_string_resize_and_overwrite\n+\t__str.resize_and_overwrite(__len, __write);\n+#else\n+\t__str.resize(__len);\n+\t__write(&__str.front(), __len);\n+#endif\n+\treturn __str;\n       }\n \n   private:\n@@ -1379,14 +1394,14 @@ namespace ip\n    * @{\n    */\n \n-  inline bool\n+  constexpr bool\n   operator==(const network_v4& __a, const network_v4& __b) noexcept\n   {\n     return __a.address() == __b.address()\n       && __a.prefix_length() == __b.prefix_length();\n   }\n \n-  inline bool\n+  constexpr bool\n   operator!=(const network_v4& __a, const network_v4& __b) noexcept\n   { return !(__a == __b); }\n \n@@ -1396,14 +1411,14 @@ namespace ip\n    * @{\n    */\n \n-  inline bool\n+  constexpr bool\n   operator==(const network_v6& __a, const network_v6& __b) noexcept\n   {\n     return __a.address() == __b.address()\n       && __a.prefix_length() == __b.prefix_length();\n   }\n \n-  inline bool\n+  constexpr bool\n   operator!=(const network_v6& __a, const network_v6& __b) noexcept\n   { return !(__a == __b); }\n "}, {"sha": "7784b6f6f58971f029edf164af28226cd6bd8971", "filename": "libstdc++-v3/testsuite/experimental/net/internet/network/v4/cons.cc", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9bac232fe4b8fcc815761a7c0932b0db49b25/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9bac232fe4b8fcc815761a7c0932b0db49b25/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fcons.cc?ref=80e9bac232fe4b8fcc815761a7c0932b0db49b25", "patch": "@@ -0,0 +1,129 @@\n+// { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n+// { dg-add-options net_ts }\n+\n+#include <experimental/internet>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::net::ip::network_v4;\n+using std::experimental::net::ip::address_v4;\n+\n+constexpr void\n+test01()\n+{\n+  network_v4 n0;\n+  VERIFY( n0.address().is_unspecified() );\n+  VERIFY( n0.prefix_length() == 0 );\n+}\n+\n+constexpr void\n+test02()\n+{\n+  address_v4 a0;\n+  network_v4 n0{ a0, 0 };\n+  VERIFY( n0.address() == a0 );\n+  VERIFY( n0.prefix_length() == 0 );\n+\n+  address_v4 a1{ address_v4::bytes_type{ 1, 2, 3, 4 } };\n+  network_v4 n1{ a1, 12};\n+  VERIFY( n1.address() == a1 );\n+  VERIFY( n1.prefix_length() == 12 );\n+}\n+\n+void\n+test02_errors()\n+{\n+  address_v4 a0;\n+  try\n+  {\n+    network_v4{a0, -1};\n+    VERIFY(false);\n+  }\n+  catch(const std::out_of_range&)\n+  {\n+  }\n+\n+  try\n+  {\n+    network_v4{a0, 33};\n+    VERIFY(false);\n+  }\n+  catch(const std::out_of_range&)\n+  {\n+  }\n+}\n+\n+constexpr void\n+test03()\n+{\n+  address_v4 a0;\n+  network_v4 n0{ a0, a0 };\n+  VERIFY( n0.address() == a0 );\n+  VERIFY( n0.prefix_length() == 0 );\n+\n+  address_v4 a1{ address_v4::bytes_type{ 1, 2, 3, 4 } };\n+  network_v4 n1{ a1, address_v4::broadcast() };\n+  VERIFY( n1.address() == a1 );\n+  VERIFY( n1.prefix_length() == 32 );\n+\n+  network_v4 n2{ a1, address_v4::bytes_type(128, 0, 0, 0) };\n+  VERIFY( n2.address() == a1 );\n+  VERIFY( n2.prefix_length() == 1 );\n+\n+  network_v4 n3{ a1, address_v4::bytes_type(255, 255, 255, 192) };\n+  VERIFY( n3.address() == a1 );\n+  VERIFY( n3.prefix_length() == 26 );\n+}\n+\n+void\n+test03_errors()\n+{\n+  address_v4 a0;\n+  try\n+  {\n+    // Contains non-contiguous non-zero bits.\n+    network_v4{a0, address_v4::bytes_type(255, 1, 0, 0)};\n+    VERIFY(false);\n+  }\n+  catch(const std::invalid_argument&)\n+  {\n+  }\n+\n+  try\n+  {\n+    // Most significant bit is zero and any other bits are non-zero.\n+    network_v4{a0, address_v4::bytes_type(1, 0, 0, 0)};\n+    VERIFY(false);\n+  }\n+  catch(const std::invalid_argument&)\n+  {\n+  }\n+\n+  try\n+  {\n+    // Most significant bit is zero and any other bits are non-zero.\n+    network_v4{a0, address_v4::bytes_type(0, 1, 0, 0)};\n+    VERIFY(false);\n+  }\n+  catch(const std::invalid_argument&)\n+  {\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test02_errors();\n+  test03();\n+  test03_errors();\n+\n+  constexpr bool c = []{\n+    test01();\n+    test02();\n+    test03();\n+    return true;\n+  };\n+}"}, {"sha": "3ea6586264966412241e826bfdfc9d9f9982a5b4", "filename": "libstdc++-v3/testsuite/experimental/net/internet/network/v4/members.cc", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9bac232fe4b8fcc815761a7c0932b0db49b25/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9bac232fe4b8fcc815761a7c0932b0db49b25/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fnetwork%2Fv4%2Fmembers.cc?ref=80e9bac232fe4b8fcc815761a7c0932b0db49b25", "patch": "@@ -0,0 +1,186 @@\n+// { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n+// { dg-add-options net_ts }\n+\n+#include <experimental/internet>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using std::experimental::net::ip::network_v4;\n+using std::experimental::net::ip::address_v4;\n+\n+constexpr void\n+test_netmask()\n+{\n+  network_v4 n0;\n+  VERIFY( n0.netmask() == address_v4() );\n+\n+  network_v4 n1({}, 1);\n+  VERIFY( n1.netmask() == address_v4(address_v4::bytes_type(128)) );\n+\n+  network_v4 n2({}, 2);\n+  VERIFY( n2.netmask() == address_v4(address_v4::bytes_type(192)) );\n+\n+  network_v4 n3({}, 3);\n+  VERIFY( n3.netmask() == address_v4(address_v4::bytes_type(224)) );\n+\n+  network_v4 n4({}, 17);\n+  VERIFY( n4.netmask() == address_v4(address_v4::bytes_type(255, 255, 128)) );\n+}\n+\n+constexpr void\n+test_network()\n+{\n+  network_v4 n0;\n+  VERIFY( n0.network() == address_v4() );\n+\n+  network_v4 n1(address_v4::bytes_type{1, 2, 3, 4}, 1);\n+  VERIFY( n1.network() == address_v4(address_v4::bytes_type(0, 0, 0, 0)) );\n+\n+  network_v4 n2(address_v4::bytes_type{1, 2, 3, 4}, 8);\n+  VERIFY( n2.network() == address_v4(address_v4::bytes_type(1, 0, 0, 0)) );\n+\n+  network_v4 n3(address_v4::bytes_type{1, 2, 3, 4}, 15);\n+  VERIFY( n3.network() == address_v4(address_v4::bytes_type(1, 2, 0, 0)) );\n+\n+  network_v4 n4(address_v4::bytes_type{1, 2, 3, 4}, 16);\n+  VERIFY( n4.network() == address_v4(address_v4::bytes_type(1, 2, 0, 0)) );\n+\n+  network_v4 n5(address_v4::bytes_type{1, 2, 3, 4}, 23);\n+  VERIFY( n5.network() == address_v4(address_v4::bytes_type(1, 2, 2, 0)) );\n+\n+  network_v4 n6(address_v4::bytes_type{1, 2, 3, 4}, 24);\n+  VERIFY( n6.network() == address_v4(address_v4::bytes_type(1, 2, 3, 0)) );\n+\n+  network_v4 n7(address_v4::bytes_type{1, 2, 3, 4}, 29);\n+  VERIFY( n7.network() == address_v4(address_v4::bytes_type(1, 2, 3, 0)) );\n+\n+  network_v4 n8(address_v4::bytes_type{1, 2, 3, 4}, 30);\n+  VERIFY( n8.network() == address_v4(address_v4::bytes_type(1, 2, 3, 4)) );\n+\n+  network_v4 n9(address_v4::bytes_type{1, 2, 3, 4}, 32);\n+  VERIFY( n9.network() == address_v4(address_v4::bytes_type(1, 2, 3, 4)) );\n+}\n+\n+constexpr void\n+test_broadcast()\n+{\n+  using b = address_v4::bytes_type;\n+\n+  network_v4 n0;\n+  VERIFY( n0.broadcast() == address_v4::broadcast() );\n+\n+  network_v4 n1(b{1, 2, 3, 4}, 1);\n+  VERIFY( n1.broadcast() == address_v4(b(127, 255, 255, 255)) );\n+\n+  network_v4 n2(b{1, 2, 3, 4}, 8);\n+  VERIFY( n2.broadcast() == address_v4(b(1, 255, 255, 255)) );\n+\n+  network_v4 n3(b{1, 2, 3, 4}, 15);\n+  VERIFY( n3.broadcast() == address_v4(b(1, 3, 255, 255)) );\n+\n+  network_v4 n4(b{1, 2, 3, 4}, 16);\n+  VERIFY( n4.broadcast() == address_v4(b(1, 2, 255, 255)) );\n+\n+  network_v4 n5(b{1, 2, 3, 4}, 23);\n+  VERIFY( n5.broadcast() == address_v4(b(1, 2, 3, 255)) );\n+\n+  network_v4 n6(b{1, 2, 3, 4}, 24);\n+  VERIFY( n6.broadcast() == address_v4(b(1, 2, 3, 255)) );\n+\n+  network_v4 n7(b{1, 2, 3, 4}, 29);\n+  VERIFY( n7.broadcast() == address_v4(b(1, 2, 3, 7)) );\n+\n+  network_v4 n8(b{1, 2, 3, 4}, 30);\n+  VERIFY( n8.broadcast() == address_v4(b(1, 2, 3, 7)) );\n+\n+  network_v4 n9(b{1, 2, 3, 4}, 31);\n+  VERIFY( n9.broadcast() == address_v4(b(1, 2, 3, 5)) );\n+\n+  network_v4 n10(b{1, 2, 3, 4}, 32);\n+  VERIFY( n10.broadcast() == address_v4(b(1, 2, 3, 4)) );\n+}\n+\n+constexpr void\n+test_canonical()\n+{\n+  network_v4 n0;\n+  VERIFY( n0.canonical() == network_v4(n0.network(), n0.prefix_length()) );\n+\n+  network_v4 n1(address_v4::bytes_type{1, 2, 3, 4}, 1);\n+  VERIFY( n1.canonical() == network_v4(n1.network(), n1.prefix_length()) );\n+\n+  network_v4 n2(address_v4::bytes_type{1, 2, 3, 4}, 8);\n+  VERIFY( n2.canonical() == network_v4(n2.network(), n2.prefix_length()) );\n+\n+  network_v4 n3(address_v4::bytes_type{1, 2, 3, 4}, 15);\n+  VERIFY( n3.canonical() == network_v4(n3.network(), n3.prefix_length()) );\n+\n+  network_v4 n4(address_v4::bytes_type{1, 2, 3, 4}, 16);\n+  VERIFY( n4.canonical() == network_v4(n4.network(), n4.prefix_length()) );\n+\n+  network_v4 n5(address_v4::bytes_type{1, 2, 3, 4}, 23);\n+  VERIFY( n5.canonical() == network_v4(n5.network(), n5.prefix_length()) );\n+\n+  network_v4 n6(address_v4::bytes_type{1, 2, 3, 4}, 24);\n+  VERIFY( n6.canonical() == network_v4(n6.network(), n6.prefix_length()) );\n+\n+  network_v4 n7(address_v4::bytes_type{1, 2, 3, 4}, 29);\n+  VERIFY( n7.canonical() == network_v4(n7.network(), n7.prefix_length()) );\n+\n+  network_v4 n8(address_v4::bytes_type{1, 2, 3, 4}, 30);\n+  VERIFY( n8.canonical() == network_v4(n8.network(), n8.prefix_length()) );\n+\n+  network_v4 n9(address_v4::bytes_type{1, 2, 3, 4}, 32);\n+  VERIFY( n9.canonical() == network_v4(n9.network(), n9.prefix_length()) );\n+}\n+\n+constexpr void\n+test_is_host()\n+{\n+  network_v4 n0;\n+  VERIFY( ! n0.is_host() );\n+\n+  network_v4 n1(address_v4::bytes_type{1, 2, 3, 4}, 1);\n+  VERIFY( ! n1.is_host() );\n+\n+  network_v4 n2(address_v4::bytes_type{1, 2, 3, 4}, 8);\n+  VERIFY( ! n2.is_host() );\n+\n+  network_v4 n3(address_v4::bytes_type{1, 2, 3, 4}, 32);\n+  VERIFY( n3.is_host() );\n+}\n+\n+void\n+test_to_string()\n+{\n+  using b = address_v4::bytes_type;\n+  __gnu_test::uneq_allocator<char> alloc(123);\n+  auto str = network_v4(address_v4(b(12, 34, 56, 78)), 24).to_string(alloc);\n+  VERIFY(str.get_allocator().get_personality() == alloc.get_personality());\n+  VERIFY( str == \"12.34.56.78/24\" );\n+\n+  __gnu_test::uneq_allocator<char> alloc2(99);\n+  auto str2 = network_v4(address_v4(b(87, 65, 43, 21)), 4).to_string(alloc2);\n+  VERIFY(str2.get_allocator().get_personality() == alloc2.get_personality());\n+  VERIFY( str2 == \"87.65.43.21/4\" );\n+}\n+\n+int main()\n+{\n+  test_netmask();\n+  test_network();\n+  test_broadcast();\n+  test_canonical();\n+  test_is_host();\n+  test_to_string();\n+\n+  constexpr bool c = []{\n+    test_netmask();\n+    test_network();\n+    test_broadcast();\n+    test_canonical();\n+    test_is_host();\n+    return true;\n+  };\n+}"}]}