{"sha": "6ce55180d494b616e2e3e68ffedfe9007e42ca06", "node_id": "C_kwDOANBUbNoAKDZjZTU1MTgwZDQ5NGI2MTZlMmUzZTY4ZmZlZGZlOTAwN2U0MmNhMDY", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-20T15:33:31Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-24T18:34:28Z"}, "message": "libstdc++: More efficient masked inc-/decrement implementation\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108856\n\t* include/experimental/bits/simd_builtin.h\n\t(_SimdImplBuiltin::_S_masked_unary): More efficient\n\timplementation of masked inc-/decrement for integers and floats\n\twithout AVX2.\n\t* include/experimental/bits/simd_x86.h\n\t(_SimdImplX86::_S_masked_unary): New. Use AVX512 masked subtract\n\tbuiltins for masked inc-/decrement.", "tree": {"sha": "864a54b5c1a6c21e3820cef02662ae16f4a01cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/864a54b5c1a6c21e3820cef02662ae16f4a01cf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ce55180d494b616e2e3e68ffedfe9007e42ca06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce55180d494b616e2e3e68ffedfe9007e42ca06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce55180d494b616e2e3e68ffedfe9007e42ca06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce55180d494b616e2e3e68ffedfe9007e42ca06/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd68cddbc745de2c4a4b4982673122716c8231c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd68cddbc745de2c4a4b4982673122716c8231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd68cddbc745de2c4a4b4982673122716c8231c"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "0cf5c9897cd19081d21f375896e0b54f1edd0b07", "filename": "libstdc++-v3/include/experimental/bits/simd_builtin.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce55180d494b616e2e3e68ffedfe9007e42ca06/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce55180d494b616e2e3e68ffedfe9007e42ca06/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h?ref=6ce55180d494b616e2e3e68ffedfe9007e42ca06", "patch": "@@ -2546,8 +2546,31 @@ template <typename _Abi, typename>\n \t_Op<decltype(__vv)> __op;\n \tif (__k._M_is_constprop_all_of())\n \t  return __data(__op(__vv));\n-\telse\n-\t  return _CommonImpl::_S_blend(__k, __v, __data(__op(__vv)));\n+\telse if constexpr (is_same_v<_Op<void>, __increment<void>>)\n+\t  {\n+\t    static_assert(not std::is_same_v<_K, bool>);\n+\t    if constexpr (is_integral_v<_Tp>)\n+\t      // Take a shortcut knowing that __k is an integer vector with values -1 or 0.\n+\t      return __v._M_data - __vector_bitcast<_Tp>(__k._M_data);\n+\t    else if constexpr (not __have_avx2)\n+\t      return __v._M_data\n+\t\t       + __vector_bitcast<_Tp>(__k._M_data & __builtin_bit_cast(\n+\t\t\t\t\t\t\t       _K, _Tp(1)));\n+\t    // starting with AVX2 it is more efficient to blend after add\n+\t  }\n+\telse if constexpr (is_same_v<_Op<void>, __decrement<void>>)\n+\t  {\n+\t    static_assert(not std::is_same_v<_K, bool>);\n+\t    if constexpr (is_integral_v<_Tp>)\n+\t      // Take a shortcut knowing that __k is an integer vector with values -1 or 0.\n+\t      return __v._M_data + __vector_bitcast<_Tp>(__k._M_data);\n+\t    else if constexpr (not __have_avx2)\n+\t      return __v._M_data\n+\t\t       - __vector_bitcast<_Tp>(__k._M_data & __builtin_bit_cast(\n+\t\t\t\t\t\t\t       _K, _Tp(1)));\n+\t    // starting with AVX2 it is more efficient to blend after sub\n+\t  }\n+\treturn _CommonImpl::_S_blend(__k, __v, __data(__op(__vv)));\n       }\n \n     //}}}2"}, {"sha": "8872ca301b9e5ddbea2fd3f3dc705f3c7f5a517b", "filename": "libstdc++-v3/include/experimental/bits/simd_x86.h", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce55180d494b616e2e3e68ffedfe9007e42ca06/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce55180d494b616e2e3e68ffedfe9007e42ca06/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h?ref=6ce55180d494b616e2e3e68ffedfe9007e42ca06", "patch": "@@ -3462,6 +3462,74 @@ template <typename _Abi, typename>\n       }\n \n     //}}} }}}\n+    template <template <typename> class _Op, typename _Tp, typename _K,\n+\t      size_t _Np>\n+      _GLIBCXX_SIMD_INTRINSIC static _SimdWrapper<_Tp, _Np>\n+      _S_masked_unary(const _SimdWrapper<_K, _Np> __k,\n+\t\t      const _SimdWrapper<_Tp, _Np> __v)\n+      {\n+\tif (__k._M_is_constprop_none_of())\n+\t  return __v;\n+\telse if (__k._M_is_constprop_all_of())\n+\t  {\n+\t    auto __vv = _Base::_M_make_simd(__v);\n+\t    _Op<decltype(__vv)> __op;\n+\t    return __data(__op(__vv));\n+\t  }\n+\telse if constexpr (__is_bitmask_v<decltype(__k)>\n+\t\t\t     && (is_same_v<_Op<void>, __increment<void>>\n+\t\t\t\t   || is_same_v<_Op<void>, __decrement<void>>))\n+\t  {\n+\t    // optimize masked unary increment and decrement as masked sub +/-1\n+\t    constexpr int __pm_one\n+\t      = is_same_v<_Op<void>, __increment<void>> ? -1 : 1;\n+\t    if constexpr (is_integral_v<_Tp>)\n+\t      {\n+\t\tconstexpr bool __lp64 = sizeof(long) == sizeof(long long);\n+\t\tusing _Ip = std::make_signed_t<_Tp>;\n+\t\tusing _Up = std::conditional_t<\n+\t\t\t      std::is_same_v<_Ip, long>,\n+\t\t\t      std::conditional_t<__lp64, long long, int>,\n+\t\t\t      std::conditional_t<\n+\t\t\t\tstd::is_same_v<_Ip, signed char>, char, _Ip>>;\n+\t\tconst auto __value = __vector_bitcast<_Up>(__v._M_data);\n+#define _GLIBCXX_SIMD_MASK_SUB(_Sizeof, _Width, _Instr)                        \\\n+  if constexpr (sizeof(_Tp) == _Sizeof && sizeof(__v) == _Width)               \\\n+    return __vector_bitcast<_Tp>(__builtin_ia32_##_Instr##_mask(__value,       \\\n+\t     __vector_broadcast<_Np>(_Up(__pm_one)), __value, __k._M_data))\n+\t\t_GLIBCXX_SIMD_MASK_SUB(1, 64, psubb512);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(1, 32, psubb256);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(1, 16, psubb128);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(2, 64, psubw512);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(2, 32, psubw256);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(2, 16, psubw128);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(4, 64, psubd512);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(4, 32, psubd256);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(4, 16, psubd128);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(8, 64, psubq512);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(8, 32, psubq256);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(8, 16, psubq128);\n+#undef _GLIBCXX_SIMD_MASK_SUB\n+\t      }\n+\t    else\n+\t      {\n+#define _GLIBCXX_SIMD_MASK_SUB(_Sizeof, _Width, _Instr)                        \\\n+  if constexpr (sizeof(_Tp) == _Sizeof && sizeof(__v) == _Width)               \\\n+    return __builtin_ia32_##_Instr##_mask(                                     \\\n+\t     __v._M_data, __vector_broadcast<_Np>(_Tp(__pm_one)), __v._M_data, \\\n+\t     __k._M_data, _MM_FROUND_CUR_DIRECTION)\n+\t\t_GLIBCXX_SIMD_MASK_SUB(4, 64, subps512);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(4, 32, subps256);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(4, 16, subps128);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(8, 64, subpd512);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(8, 32, subpd256);\n+\t\t_GLIBCXX_SIMD_MASK_SUB(8, 16, subpd128);\n+#undef _GLIBCXX_SIMD_MASK_SUB\n+\t      }\n+\t  }\n+\telse\n+\t  return _Base::template _S_masked_unary<_Op>(__k, __v);\n+      }\n   };\n \n // }}}"}]}