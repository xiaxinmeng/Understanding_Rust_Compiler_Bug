{"sha": "fd0b8fce4dc174fa55a0a706e2068a00eacf466a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwYjhmY2U0ZGMxNzRmYTU1YTBhNzA2ZTIwNjhhMDBlYWNmNDY2YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-16T00:54:45Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-16T00:54:45Z"}, "message": "(print_lang_identifier): Print value of limbo field.\n\n(pushdecl): Check an extern decl against both previous global and\nprevious limbo declarations.  For global declarations, clear limbo\nvalue field.  For block level extern declarations, set limbo field\nif zero.\n(grokdeclarator): If this is a block level extern, then allocate\nit on the permanent obstack, not the temporary obstack.\n\nFrom-SVN: r2128", "tree": {"sha": "8b9b764926c80b96c3f69102e1e5daadc5e594ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b9b764926c80b96c3f69102e1e5daadc5e594ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd0b8fce4dc174fa55a0a706e2068a00eacf466a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0b8fce4dc174fa55a0a706e2068a00eacf466a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0b8fce4dc174fa55a0a706e2068a00eacf466a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0b8fce4dc174fa55a0a706e2068a00eacf466a/comments", "author": null, "committer": null, "parents": [{"sha": "5a9085c7dc59f3118e0c9f44b3fe9e771fbde055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9085c7dc59f3118e0c9f44b3fe9e771fbde055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9085c7dc59f3118e0c9f44b3fe9e771fbde055"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "5e4bbc0623d3a5167b07dc45e292b8a8dfa6ba0b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 67, "deletions": 21, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0b8fce4dc174fa55a0a706e2068a00eacf466a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0b8fce4dc174fa55a0a706e2068a00eacf466a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=fd0b8fce4dc174fa55a0a706e2068a00eacf466a", "patch": "@@ -679,6 +679,7 @@ print_lang_identifier (file, node, indent)\n   print_node (file, \"label\", IDENTIFIER_LABEL_VALUE (node), indent + 4);\n   print_node (file, \"implicit\", IDENTIFIER_IMPLICIT_DECL (node), indent + 4);\n   print_node (file, \"error locus\", IDENTIFIER_ERROR_LOCUS (node), indent + 4);\n+  print_node (file, \"limbo value\", IDENTIFIER_LIMBO_VALUE (node), indent + 4);\n }\n \f\n /* Create a new `struct binding_level'.  */\n@@ -1785,22 +1786,31 @@ pushdecl (x)\n             }\n         }\n \n-      /* Multiple external decls of the same identifier ought to match.  */\n+      /* Multiple external decls of the same identifier ought to match.\n+\t Check against both global declarations and out of scope (limbo) block\n+\t level declarations.\n \n-      if (DECL_EXTERNAL (x) && IDENTIFIER_GLOBAL_VALUE (name) != 0\n-\t  && (DECL_EXTERNAL (IDENTIFIER_GLOBAL_VALUE (name))\n-\t      || TREE_PUBLIC (IDENTIFIER_GLOBAL_VALUE (name)))\n-\t  /* We get warnings about inline functions where they are defined.\n-\t     Avoid duplicate warnings where they are used.  */\n-\t  && !DECL_INLINE (x))\n+\t We get warnings about inline functions where they are defined.\n+\t Avoid duplicate warnings where they are used.  */\n+      if (DECL_EXTERNAL (x) && ! DECL_INLINE (x))\n \t{\n-\t  if (! comptypes (TREE_TYPE (x),\n-\t\t\t   TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (name))))\n+\t  tree decl;\n+\n+\t  if (IDENTIFIER_GLOBAL_VALUE (name) != 0\n+\t      && (DECL_EXTERNAL (IDENTIFIER_GLOBAL_VALUE (name))\n+\t\t  || TREE_PUBLIC (IDENTIFIER_GLOBAL_VALUE (name))))\n+\t    decl = IDENTIFIER_GLOBAL_VALUE (name);\n+\t  else if (IDENTIFIER_LIMBO_VALUE (name) != 0)\n+\t    /* Decls in limbo are always extern, so no need to check that.  */\n+\t    decl = IDENTIFIER_LIMBO_VALUE (name);\n+\t  else\n+\t    decl = 0;\n+\n+\t  if (decl && ! comptypes (TREE_TYPE (x), TREE_TYPE (decl)))\n \t    {\n \t      pedwarn_with_decl (x,\n \t\t\t\t \"type mismatch with previous external decl\");\n-\t      pedwarn_with_decl (IDENTIFIER_GLOBAL_VALUE (name),\n-\t\t\t\t \"previous external decl of `%s'\");\n+\t      pedwarn_with_decl (decl, \"previous external decl of `%s'\");\n \t    }\n \t}\n \n@@ -1864,6 +1874,9 @@ pushdecl (x)\n \n \t  IDENTIFIER_GLOBAL_VALUE (name) = x;\n \n+\t  /* We no longer care about any previous block level declarations.  */\n+\t  IDENTIFIER_LIMBO_VALUE (name) = 0;\n+\n \t  /* Don't forget if the function was used via an implicit decl.  */\n \t  if (IDENTIFIER_IMPLICIT_DECL (name)\n \t      && TREE_USED (IDENTIFIER_IMPLICIT_DECL (name)))\n@@ -1970,6 +1983,16 @@ pushdecl (x)\n \t      && TREE_PUBLIC (x))\n \t    {\n \t      TREE_PUBLIC (name) = 1;\n+\n+\t      /* Save this decl, so that we can do type checking against\n+\t\t other decls after it falls out of scope.\n+\n+\t\t Only save it once.  This prevents temporary decls created in\n+\t\t expand_inline_function from being used here, since this\n+\t\t will have been set when the inline function was parsed.\n+\t\t It also helps give slightly better warnings.  */\n+\t      if (IDENTIFIER_LIMBO_VALUE (name) == 0)\n+\t\tIDENTIFIER_LIMBO_VALUE (name) = x;\n \t    }\n \n \t  /* Warn if shadowing an argument at the top level of the body.  */\n@@ -3948,6 +3971,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t}\n       else if (TREE_CODE (declarator) == CALL_EXPR)\n \t{\n+\t  int extern_ref = (!(specbits & (1 << (int) RID_AUTO))\n+\t\t\t    || current_binding_level == global_binding_level);\n \t  tree arg_types;\n \n \t  /* Declaring a function type.\n@@ -3977,6 +4002,12 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    type = double_type_node;\n #endif /* TRADITIONAL_RETURN_FLOAT */\n \n+\t  /* If this is a block level extern, it must live past the end\n+\t     of the function so that we can check it against other extern\n+\t     declarations (IDENTIFIER_LIMBO_VALUE).  */\n+\t  if (extern_ref && allocation_temporary_p ())\n+\t    end_temporary_allocation ();\n+\n \t  /* Construct the function type and go to the next\n \t     inner layer of declarator.  */\n \n@@ -4216,6 +4247,14 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       }\n     else if (TREE_CODE (type) == FUNCTION_TYPE)\n       {\n+\t/* Every function declaration is \"external\"\n+\t   except for those which are inside a function body\n+\t   in which `auto' is used.\n+\t   That is a case not specified by ANSI C,\n+\t   and we use it for forward declarations for nested functions.  */\n+\tint extern_ref = (!(specbits & (1 << (int) RID_AUTO))\n+\t\t\t  || current_binding_level == global_binding_level);\n+\n \tif (specbits & (1 << (int) RID_AUTO)\n \t    && (pedantic || current_binding_level == global_binding_level))\n \t  pedwarn (\"invalid storage class for function `%s'\",\n@@ -4231,18 +4270,19 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    && pedantic)\n \t  pedwarn (\"invalid storage class for function `%s'\",\n \t\t   IDENTIFIER_POINTER (declarator));\n+\n+\t/* If this is a block level extern, it must live past the end\n+\t   of the function so that we can check it against other\n+\t   extern declarations (IDENTIFIER_LIMBO_VALUE).  */\n+\tif (extern_ref && allocation_temporary_p ())\n+\t  end_temporary_allocation ();\n+\n \tdecl = build_decl (FUNCTION_DECL, declarator, type);\n \n \tif (pedantic && (constp || volatilep))\n \t  pedwarn (\"ANSI C forbids const or volatile functions\");\n \n-\t/* Every function declaration is \"external\"\n-\t   except for those which are inside a function body\n-\t   in which `auto' is used.\n-\t   That is a case not specified by ANSI C,\n-\t   and we use it for forward declarations for nested functions.  */\n-\tif (!(specbits & (1 << (int) RID_AUTO))\n-\t    || current_binding_level == global_binding_level)\n+\tif (extern_ref)\n \t  DECL_EXTERNAL (decl) = 1;\n \t/* Record absence of global scope for `static' or `auto'.  */\n \tTREE_PUBLIC (decl)\n@@ -4268,6 +4308,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     else\n       {\n \t/* It's a variable.  */\n+\t/* An uninitialized decl with `extern' is a reference.  */\n+\tint extern_ref = !initialized && (specbits & (1 << (int) RID_EXTERN));\n \n \t/* Move type qualifiers down to element of an array.  */\n \tif (TREE_CODE (type) == ARRAY_TYPE && (constp || volatilep))\n@@ -4280,16 +4322,20 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n #endif\n \t  }\n \n+\t/* If this is a block level extern, it must live past the end\n+\t   of the function so that we can check it against other\n+\t   extern declarations (IDENTIFIER_LIMBO_VALUE).  */\n+\tif (extern_ref && allocation_temporary_p ())\n+\t  end_temporary_allocation ();\n+\n \tdecl = build_decl (VAR_DECL, declarator, type);\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n \n \tif (inlinep)\n \t  pedwarn_with_decl (decl, \"variable `%s' declared `inline'\");\n \n-\t/* An uninitialized decl with `extern' is a reference.  */\n-\tDECL_EXTERNAL (decl)\n-\t  = !initialized && (specbits & (1 << (int) RID_EXTERN));\n+\tDECL_EXTERNAL (decl) = extern_ref;\n \t/* At top level, the presence of a `static' or `register' storage\n \t   class specifier, or the absence of all storage class specifiers\n \t   makes this declaration a definition (perhaps tentative).  Also,"}]}