{"sha": "9152e0aa1b60461c043c189307d2b913279f0646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1MmUwYWExYjYwNDYxYzA0M2MxODkzMDdkMmI5MTMyNzlmMDY0Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-26T19:12:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-26T19:12:49Z"}, "message": "Params of add_insn and unlink_insn_chain\n\ngcc/\n2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (add_insn): Strengthen param from rtx to rtx_insn *.\n\t(unlink_insn_chain): Strengthen both params from rtx to\n\trtx_insn *.\n\n\t* cfgrtl.c (cfg_layout_function_header): Likewise for this\n\tvariable.\n\t(unlink_insn_chain): Likewise for params \"first\" and \"last\".\n\tRemove now-redundant checked cast.\n\t(record_effective_endpoints): Replace use of NULL_RTX with NULL.\n\t(fixup_reorder_chain): Strengthen local \"insn\" from rtx to\n\trtx_insn *.\n\t* emit-rtl.c (link_insn_into_chain): Likewise for all three\n\tparams.\n\t(add_insn): Likewise for param \"insn\" and local \"prev\".\n\t(add_insn_after_nobb): Likewise for both params and local \"next\".\n\t(add_insn_before_nobb): Likewise for both params and local \"prev\".\n\t(add_insn_after): Rename param \"after\" to \"uncast_after\",\n\tintroducing local \"after\" with another checked cast.\n\t(add_insn_before): Rename params \"insn\" and \"before\", giving them\n\t\"uncast_\" prefixes, adding the old names back using checked casts.\n\t(emit_note_after): Likewise for param \"after\".\n\t(emit_note_before): Likewise for param \"before\".\n\t(emit_label): Add a checked cast.\n\nFrom-SVN: r214536", "tree": {"sha": "2137ddb04f6d120f86daaf3303e8d44712e7f0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2137ddb04f6d120f86daaf3303e8d44712e7f0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9152e0aa1b60461c043c189307d2b913279f0646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9152e0aa1b60461c043c189307d2b913279f0646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9152e0aa1b60461c043c189307d2b913279f0646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9152e0aa1b60461c043c189307d2b913279f0646/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "466659612b3f276fbfac51ecadf0c2cf803270f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466659612b3f276fbfac51ecadf0c2cf803270f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466659612b3f276fbfac51ecadf0c2cf803270f3"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "6fa5dfc1ae0ba0d749d3100fcb019a4074f65871", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9152e0aa1b60461c043c189307d2b913279f0646", "patch": "@@ -1,3 +1,29 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (add_insn): Strengthen param from rtx to rtx_insn *.\n+\t(unlink_insn_chain): Strengthen both params from rtx to\n+\trtx_insn *.\n+\n+\t* cfgrtl.c (cfg_layout_function_header): Likewise for this\n+\tvariable.\n+\t(unlink_insn_chain): Likewise for params \"first\" and \"last\".\n+\tRemove now-redundant checked cast.\n+\t(record_effective_endpoints): Replace use of NULL_RTX with NULL.\n+\t(fixup_reorder_chain): Strengthen local \"insn\" from rtx to\n+\trtx_insn *.\n+\t* emit-rtl.c (link_insn_into_chain): Likewise for all three\n+\tparams.\n+\t(add_insn): Likewise for param \"insn\" and local \"prev\".\n+\t(add_insn_after_nobb): Likewise for both params and local \"next\".\n+\t(add_insn_before_nobb): Likewise for both params and local \"prev\".\n+\t(add_insn_after): Rename param \"after\" to \"uncast_after\",\n+\tintroducing local \"after\" with another checked cast.\n+\t(add_insn_before): Rename params \"insn\" and \"before\", giving them\n+\t\"uncast_\" prefixes, adding the old names back using checked casts.\n+\t(emit_note_after): Likewise for param \"after\".\n+\t(emit_note_before): Likewise for param \"before\".\n+\t(emit_label): Add a checked cast.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cselib.h (cselib_record_sets_hook):  Strengthen initial param"}, {"sha": "7b1fc2c4c947ceb214f26f9b1992a92c973e0a03", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=9152e0aa1b60461c043c189307d2b913279f0646", "patch": "@@ -65,7 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Holds the interesting leading and trailing notes for the function.\n    Only applicable if the CFG is in cfglayout mode.  */\n static GTY(()) rtx_insn *cfg_layout_function_footer;\n-static GTY(()) rtx cfg_layout_function_header;\n+static GTY(()) rtx_insn *cfg_layout_function_header;\n \n static rtx_insn *skip_insns_after_block (basic_block);\n static void record_effective_endpoints (void);\n@@ -3305,7 +3305,7 @@ fixup_abnormal_edges (void)\n /* Cut the insns from FIRST to LAST out of the insns stream.  */\n \n rtx_insn *\n-unlink_insn_chain (rtx first, rtx last)\n+unlink_insn_chain (rtx_insn *first, rtx_insn *last)\n {\n   rtx_insn *prevfirst = PREV_INSN (first);\n   rtx_insn *nextlast = NEXT_INSN (last);\n@@ -3320,7 +3320,7 @@ unlink_insn_chain (rtx first, rtx last)\n     set_last_insn (prevfirst);\n   if (!prevfirst)\n     set_first_insn (nextlast);\n-  return as_a <rtx_insn *> (first);\n+  return first;\n }\n \f\n /* Skip over inter-block insns occurring after BB which are typically\n@@ -3448,7 +3448,7 @@ record_effective_endpoints (void)\n     cfg_layout_function_header =\n \t    unlink_insn_chain (get_insns (), PREV_INSN (insn));\n   else\n-    cfg_layout_function_header = NULL_RTX;\n+    cfg_layout_function_header = NULL;\n \n   next_insn = get_insns ();\n   FOR_EACH_BB_FN (bb, cfun)\n@@ -3639,7 +3639,7 @@ static void\n fixup_reorder_chain (void)\n {\n   basic_block bb;\n-  rtx insn = NULL;\n+  rtx_insn *insn = NULL;\n \n   if (cfg_layout_function_header)\n     {"}, {"sha": "fa904222fd0bd0b02dfd3f7bb0e7b0d59d1dae9b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9152e0aa1b60461c043c189307d2b913279f0646", "patch": "@@ -3873,7 +3873,7 @@ make_note_raw (enum insn_note subtype)\n    but also BARRIERs and JUMP_TABLE_DATAs.  PREV and NEXT may be NULL.  */\n \n static inline void\n-link_insn_into_chain (rtx insn, rtx prev, rtx next)\n+link_insn_into_chain (rtx_insn *insn, rtx_insn *prev, rtx_insn *next)\n {\n   SET_PREV_INSN (insn) = prev;\n   SET_NEXT_INSN (insn) = next;\n@@ -3905,9 +3905,9 @@ link_insn_into_chain (rtx insn, rtx prev, rtx next)\n    INSN may be an INSN, JUMP_INSN, CALL_INSN, CODE_LABEL, BARRIER or NOTE.  */\n \n void\n-add_insn (rtx insn)\n+add_insn (rtx_insn *insn)\n {\n-  rtx prev = get_last_insn ();\n+  rtx_insn *prev = get_last_insn ();\n   link_insn_into_chain (insn, prev, NULL);\n   if (NULL == get_insns ())\n     set_first_insn (insn);\n@@ -3917,9 +3917,9 @@ add_insn (rtx insn)\n /* Add INSN into the doubly-linked list after insn AFTER.  */\n \n static void\n-add_insn_after_nobb (rtx insn, rtx after)\n+add_insn_after_nobb (rtx_insn *insn, rtx_insn *after)\n {\n-  rtx next = NEXT_INSN (after);\n+  rtx_insn *next = NEXT_INSN (after);\n \n   gcc_assert (!optimize || !INSN_DELETED_P (after));\n \n@@ -3946,9 +3946,9 @@ add_insn_after_nobb (rtx insn, rtx after)\n /* Add INSN into the doubly-linked list before insn BEFORE.  */\n \n static void\n-add_insn_before_nobb (rtx insn, rtx before)\n+add_insn_before_nobb (rtx_insn *insn, rtx_insn *before)\n {\n-  rtx prev = PREV_INSN (before);\n+  rtx_insn *prev = PREV_INSN (before);\n \n   gcc_assert (!optimize || !INSN_DELETED_P (before));\n \n@@ -3982,9 +3982,10 @@ add_insn_before_nobb (rtx insn, rtx before)\n    they know how to update a SEQUENCE. */\n \n void\n-add_insn_after (rtx uncast_insn, rtx after, basic_block bb)\n+add_insn_after (rtx uncast_insn, rtx uncast_after, basic_block bb)\n {\n   rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n+  rtx_insn *after = as_a <rtx_insn *> (uncast_after);\n   add_insn_after_nobb (insn, after);\n   if (!BARRIER_P (after)\n       && !BARRIER_P (insn)\n@@ -4011,8 +4012,10 @@ add_insn_after (rtx uncast_insn, rtx after, basic_block bb)\n    they know how to update a SEQUENCE. */\n \n void\n-add_insn_before (rtx insn, rtx before, basic_block bb)\n+add_insn_before (rtx uncast_insn, rtx uncast_before, basic_block bb)\n {\n+  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n+  rtx_insn *before = as_a <rtx_insn *> (uncast_before);\n   add_insn_before_nobb (insn, before);\n \n   if (!bb\n@@ -4559,8 +4562,9 @@ note_outside_basic_block_p (enum insn_note subtype, bool on_bb_boundary_p)\n /* Emit a note of subtype SUBTYPE after the insn AFTER.  */\n \n rtx_note *\n-emit_note_after (enum insn_note subtype, rtx after)\n+emit_note_after (enum insn_note subtype, rtx uncast_after)\n {\n+  rtx_insn *after = as_a <rtx_insn *> (uncast_after);\n   rtx_note *note = make_note_raw (subtype);\n   basic_block bb = BARRIER_P (after) ? NULL : BLOCK_FOR_INSN (after);\n   bool on_bb_boundary_p = (bb != NULL && BB_END (bb) == after);\n@@ -4575,8 +4579,9 @@ emit_note_after (enum insn_note subtype, rtx after)\n /* Emit a note of subtype SUBTYPE before the insn BEFORE.  */\n \n rtx_note *\n-emit_note_before (enum insn_note subtype, rtx before)\n+emit_note_before (enum insn_note subtype, rtx uncast_before)\n {\n+  rtx_insn *before = as_a <rtx_insn *> (uncast_before);\n   rtx_note *note = make_note_raw (subtype);\n   basic_block bb = BARRIER_P (before) ? NULL : BLOCK_FOR_INSN (before);\n   bool on_bb_boundary_p = (bb != NULL && BB_HEAD (bb) == before);\n@@ -4993,7 +4998,7 @@ emit_label (rtx label)\n {\n   gcc_checking_assert (INSN_UID (label) == 0);\n   INSN_UID (label) = cur_insn_uid++;\n-  add_insn (label);\n+  add_insn (as_a <rtx_insn *> (label));\n   return as_a <rtx_insn *> (label);\n }\n "}, {"sha": "f5b2ea1fffe8c913b106306134a448daca30d1dc", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9152e0aa1b60461c043c189307d2b913279f0646/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9152e0aa1b60461c043c189307d2b913279f0646", "patch": "@@ -3114,7 +3114,7 @@ extern unsigned int unshare_all_rtl (void);\n extern void unshare_all_rtl_again (rtx_insn *);\n extern void unshare_all_rtl_in_chain (rtx);\n extern void verify_rtl_sharing (void);\n-extern void add_insn (rtx);\n+extern void add_insn (rtx_insn *);\n extern void add_insn_before (rtx, rtx, basic_block);\n extern void add_insn_after (rtx, rtx, basic_block);\n extern void remove_insn (rtx);\n@@ -3123,7 +3123,7 @@ extern void delete_insn (rtx);\n extern rtx_insn *entry_of_function (void);\n extern void emit_insn_at_entry (rtx);\n extern void delete_insn_chain (rtx, rtx, bool);\n-extern rtx_insn *unlink_insn_chain (rtx, rtx);\n+extern rtx_insn *unlink_insn_chain (rtx_insn *, rtx_insn *);\n extern void delete_insn_and_edges (rtx_insn *);\n extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);\n extern rtx gen_const_mem (enum machine_mode, rtx);"}]}