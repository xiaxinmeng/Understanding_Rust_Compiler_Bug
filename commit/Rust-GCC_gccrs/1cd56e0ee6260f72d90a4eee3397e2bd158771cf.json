{"sha": "1cd56e0ee6260f72d90a4eee3397e2bd158771cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNkNTZlMGVlNjI2MGY3MmQ5MGE0ZWVlMzM5N2UyYmQxNTg3NzFjZg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-10-11T20:20:29Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-10-11T20:20:29Z"}, "message": "Initial revision\n\nFrom-SVN: r12954", "tree": {"sha": "ccbcbf2bf24b37f3b00fd08715662e22b05a9706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccbcbf2bf24b37f3b00fd08715662e22b05a9706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cd56e0ee6260f72d90a4eee3397e2bd158771cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd56e0ee6260f72d90a4eee3397e2bd158771cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cd56e0ee6260f72d90a4eee3397e2bd158771cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd56e0ee6260f72d90a4eee3397e2bd158771cf/comments", "author": null, "committer": null, "parents": [{"sha": "d22c85969b4555d97d16a2f6704bf57b7d712cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22c85969b4555d97d16a2f6704bf57b7d712cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22c85969b4555d97d16a2f6704bf57b7d712cd3"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "3df55a5c709c1dc32a397fdcb560809631e82608", "filename": "gcc/cp/tinfo.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cd56e0ee6260f72d90a4eee3397e2bd158771cf/gcc%2Fcp%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cd56e0ee6260f72d90a4eee3397e2bd158771cf/gcc%2Fcp%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.h?ref=1cd56e0ee6260f72d90a4eee3397e2bd158771cf", "patch": "@@ -0,0 +1,55 @@\n+// RTTI support internals for -*- C++ -*-\n+// Copyright (C) 1994, 1995, 1996 Free Software Foundation\n+\n+#include \"typeinfo\"\n+\n+// Class declarations shared between the typeinfo implementation files.\n+\n+// type_info for a class with no base classes (or an enum).\n+\n+struct __user_type_info : public type_info {\n+  __user_type_info (const char *n) : type_info (n) {}\n+\n+  // If our type can be converted to the desired type, \n+  // return the pointer, adjusted accordingly; else return 0.\n+  virtual void* dcast (const type_info &, int, void *,\n+\t\t       const type_info * = 0, void * = 0) const;\n+};\n+\n+// type_info for a class with one public, nonvirtual base class.\n+\n+class __si_type_info : public __user_type_info {\n+  const __user_type_info &base;\n+\n+public:\n+  __si_type_info (const char *n, const __user_type_info &b)\n+    : __user_type_info (n), base (b) { }\n+\n+  virtual void *dcast (const type_info &, int, void *,\n+\t\t       const type_info * = 0, void * = 0) const;\n+};\n+\n+// type_info for a general class.\n+\n+typedef unsigned int USItype\t__attribute__ ((mode (SI)));\n+\n+struct __class_type_info : public __user_type_info {\n+  enum access { PUBLIC = 1, PROTECTED = 2, PRIVATE = 3 };\n+\n+  struct base_info {\n+    const __user_type_info *base;\n+    USItype offset: 29;\n+    bool is_virtual: 1;\n+    access access: 2;\n+  };\n+\n+  const base_info *base_list;\n+  size_t n_bases;\n+\n+  __class_type_info (const char *name, const base_info *bl, size_t bn)\n+    : __user_type_info (name), base_list (bl), n_bases (bn) {}\n+\n+  // This is a little complex.\n+  virtual void* dcast (const type_info &, int, void *,\n+\t\t       const type_info * = 0, void * = 0) const;\n+};"}]}