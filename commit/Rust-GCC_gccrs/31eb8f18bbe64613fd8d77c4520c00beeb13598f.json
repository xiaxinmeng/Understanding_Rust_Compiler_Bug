{"sha": "31eb8f18bbe64613fd8d77c4520c00beeb13598f", "node_id": "C_kwDOANBUbNoAKDMxZWI4ZjE4YmJlNjQ2MTNmZDhkNzdjNDUyMGMwMGJlZWIxMzU5OGY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-04-12T13:56:05Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-04-12T15:08:08Z"}, "message": "RISC-V: Fix supporting data type according to RVV ISA. [PR109479]\n\nFor vint64m*_t, we should only allow them in zve64* instead of zve32*_zvl64b (>=64b).\nIdeally, we should make error message more friendly like Clang.\nhttps://godbolt.org/z/f9GMv4dMo to report the RVV type require extenstion name.\nHowever, I failed to find a way to do that. So current GCC can only report \"unknown\" type.\nAnd I added comments to remind us doing this in the future.\n\ngcc/ChangeLog:\n\n\tPR target/109479\n\t* config/riscv/riscv-vector-builtins-types.def (vint8mf8_t): Fix predicate.\n\t(vint16mf4_t): Ditto.\n\t(vint32mf2_t): Ditto.\n\t(vint64m1_t): Ditto.\n\t(vint64m2_t): Ditto.\n\t(vint64m4_t): Ditto.\n\t(vint64m8_t): Ditto.\n\t(vuint8mf8_t): Ditto.\n\t(vuint16mf4_t): Ditto.\n\t(vuint32mf2_t): Ditto.\n\t(vuint64m1_t): Ditto.\n\t(vuint64m2_t): Ditto.\n\t(vuint64m4_t): Ditto.\n\t(vuint64m8_t): Ditto.\n\t(vfloat32mf2_t): Ditto.\n\t(vbool64_t): Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (register_builtin_type): Add comments.\n\t(register_vector_type): Ditto.\n\t(check_required_extensions): Fix condition.\n\t* config/riscv/riscv-vector-builtins.h (RVV_REQUIRE_ZVE64): Remove it.\n\t(RVV_REQUIRE_ELEN_64): New define.\n\t(RVV_REQUIRE_MIN_VLEN_64): Ditto.\n\t* config/riscv/riscv-vector-switch.def (TARGET_VECTOR_FP32): Remove it.\n\t(TARGET_VECTOR_FP64): Ditto.\n\t(ENTRY): Fix predicate.\n\t* config/riscv/vector-iterators.md: Fix predicate.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109479\n\t* gcc.target/riscv/rvv/base/pr109479-1.c: New test.\n\t* gcc.target/riscv/rvv/base/pr109479-2.c: New test.\n\t* gcc.target/riscv/rvv/base/pr109479-3.c: New test.\n\t* gcc.target/riscv/rvv/base/pr109479-4.c: New test.\n\t* gcc.target/riscv/rvv/base/pr109479-5.c: New test.\n\t* gcc.target/riscv/rvv/base/pr109479-6.c: New test.", "tree": {"sha": "0fc6b338aa966a30ceade176b6df5a096610c232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fc6b338aa966a30ceade176b6df5a096610c232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31eb8f18bbe64613fd8d77c4520c00beeb13598f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31eb8f18bbe64613fd8d77c4520c00beeb13598f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31eb8f18bbe64613fd8d77c4520c00beeb13598f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31eb8f18bbe64613fd8d77c4520c00beeb13598f/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51856718a82ce60f067910d9037ca255645b37eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51856718a82ce60f067910d9037ca255645b37eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51856718a82ce60f067910d9037ca255645b37eb"}], "stats": {"total": 595, "additions": 349, "deletions": 246}, "files": [{"sha": "a74df066521052d3dec31386828210a7cf344d72", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "modified", "additions": 174, "deletions": 174, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -235,53 +235,53 @@ along with GCC; see the file COPYING3. If not see\n #define DEF_RVV_LMUL4_OPS(TYPE, REQUIRE)\n #endif\n \n-DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_I_OPS (vint8mf4_t, 0)\n DEF_RVV_I_OPS (vint8mf2_t, 0)\n DEF_RVV_I_OPS (vint8m1_t, 0)\n DEF_RVV_I_OPS (vint8m2_t, 0)\n DEF_RVV_I_OPS (vint8m4_t, 0)\n DEF_RVV_I_OPS (vint8m8_t, 0)\n-DEF_RVV_I_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_I_OPS (vint16mf2_t, 0)\n DEF_RVV_I_OPS (vint16m1_t, 0)\n DEF_RVV_I_OPS (vint16m2_t, 0)\n DEF_RVV_I_OPS (vint16m4_t, 0)\n DEF_RVV_I_OPS (vint16m8_t, 0)\n-DEF_RVV_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_I_OPS (vint32m1_t, 0)\n DEF_RVV_I_OPS (vint32m2_t, 0)\n DEF_RVV_I_OPS (vint32m4_t, 0)\n DEF_RVV_I_OPS (vint32m8_t, 0)\n-DEF_RVV_I_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_I_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_I_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_I_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_U_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_U_OPS (vuint8mf4_t, 0)\n DEF_RVV_U_OPS (vuint8mf2_t, 0)\n DEF_RVV_U_OPS (vuint8m1_t, 0)\n DEF_RVV_U_OPS (vuint8m2_t, 0)\n DEF_RVV_U_OPS (vuint8m4_t, 0)\n DEF_RVV_U_OPS (vuint8m8_t, 0)\n-DEF_RVV_U_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_U_OPS (vuint16mf2_t, 0)\n DEF_RVV_U_OPS (vuint16m1_t, 0)\n DEF_RVV_U_OPS (vuint16m2_t, 0)\n DEF_RVV_U_OPS (vuint16m4_t, 0)\n DEF_RVV_U_OPS (vuint16m8_t, 0)\n-DEF_RVV_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_U_OPS (vuint32m1_t, 0)\n DEF_RVV_U_OPS (vuint32m2_t, 0)\n DEF_RVV_U_OPS (vuint32m4_t, 0)\n DEF_RVV_U_OPS (vuint32m8_t, 0)\n-DEF_RVV_U_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_U_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_U_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_U_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_F_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_F_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_F_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_F_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_F_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n@@ -291,90 +291,90 @@ DEF_RVV_F_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_F_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_B_OPS (vbool64_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_B_OPS (vbool64_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_B_OPS (vbool32_t, 0)\n DEF_RVV_B_OPS (vbool16_t, 0)\n DEF_RVV_B_OPS (vbool8_t, 0)\n DEF_RVV_B_OPS (vbool4_t, 0)\n DEF_RVV_B_OPS (vbool2_t, 0)\n DEF_RVV_B_OPS (vbool1_t, 0)\n \n-DEF_RVV_WEXTI_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTI_OPS (vint16mf2_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m1_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m2_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m4_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m8_t, 0)\n-DEF_RVV_WEXTI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTI_OPS (vint32m1_t, 0)\n DEF_RVV_WEXTI_OPS (vint32m2_t, 0)\n DEF_RVV_WEXTI_OPS (vint32m4_t, 0)\n DEF_RVV_WEXTI_OPS (vint32m8_t, 0)\n-DEF_RVV_WEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTI_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTI_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTI_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_QEXTI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_QEXTI_OPS (vint32m1_t, 0)\n DEF_RVV_QEXTI_OPS (vint32m2_t, 0)\n DEF_RVV_QEXTI_OPS (vint32m4_t, 0)\n DEF_RVV_QEXTI_OPS (vint32m8_t, 0)\n-DEF_RVV_QEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTI_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTI_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTI_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_OEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTI_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTI_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTI_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTI_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_WEXTU_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTU_OPS (vuint16mf2_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m1_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m2_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m4_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m8_t, 0)\n-DEF_RVV_WEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTU_OPS (vuint32m1_t, 0)\n DEF_RVV_WEXTU_OPS (vuint32m2_t, 0)\n DEF_RVV_WEXTU_OPS (vuint32m4_t, 0)\n DEF_RVV_WEXTU_OPS (vuint32m8_t, 0)\n-DEF_RVV_WEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_QEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_QEXTU_OPS (vuint32m1_t, 0)\n DEF_RVV_QEXTU_OPS (vuint32m2_t, 0)\n DEF_RVV_QEXTU_OPS (vuint32m4_t, 0)\n DEF_RVV_QEXTU_OPS (vuint32m8_t, 0)\n-DEF_RVV_QEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_OEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_FULL_V_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_I_OPS (vint8mf4_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8mf2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m1_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m4_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m8_t, 0)\n-DEF_RVV_FULL_V_I_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_I_OPS (vint16mf2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m1_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m4_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m8_t, 0)\n-DEF_RVV_FULL_V_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_I_OPS (vint32m1_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint32m2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint32m4_t, 0)\n@@ -384,20 +384,20 @@ DEF_RVV_FULL_V_I_OPS (vint64m2_t, RVV_REQUIRE_FULL_V)\n DEF_RVV_FULL_V_I_OPS (vint64m4_t, RVV_REQUIRE_FULL_V)\n DEF_RVV_FULL_V_I_OPS (vint64m8_t, RVV_REQUIRE_FULL_V)\n \n-DEF_RVV_FULL_V_U_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_U_OPS (vuint8mf4_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8mf2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m1_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m4_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m8_t, 0)\n-DEF_RVV_FULL_V_U_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_U_OPS (vuint16mf2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m1_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m4_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m8_t, 0)\n-DEF_RVV_FULL_V_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_U_OPS (vuint32m1_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint32m2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint32m4_t, 0)\n@@ -412,128 +412,128 @@ DEF_RVV_WEXTF_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WEXTF_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WEXTF_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_CONVERT_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_CONVERT_I_OPS (vint32m1_t, 0)\n DEF_RVV_CONVERT_I_OPS (vint32m2_t, 0)\n DEF_RVV_CONVERT_I_OPS (vint32m4_t, 0)\n DEF_RVV_CONVERT_I_OPS (vint32m8_t, 0)\n-DEF_RVV_CONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_CONVERT_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_CONVERT_U_OPS (vuint32m1_t, 0)\n DEF_RVV_CONVERT_U_OPS (vuint32m2_t, 0)\n DEF_RVV_CONVERT_U_OPS (vuint32m4_t, 0)\n DEF_RVV_CONVERT_U_OPS (vuint32m8_t, 0)\n-DEF_RVV_CONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_WCONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_WCONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_WCONVERT_F_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_WI_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WI_OPS (vint8mf4_t, 0)\n DEF_RVV_WI_OPS (vint8mf2_t, 0)\n DEF_RVV_WI_OPS (vint8m1_t, 0)\n DEF_RVV_WI_OPS (vint8m2_t, 0)\n DEF_RVV_WI_OPS (vint8m4_t, 0)\n DEF_RVV_WI_OPS (vint8m8_t, 0)\n-DEF_RVV_WI_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WI_OPS (vint16mf2_t, 0)\n DEF_RVV_WI_OPS (vint16m1_t, 0)\n DEF_RVV_WI_OPS (vint16m2_t, 0)\n DEF_RVV_WI_OPS (vint16m4_t, 0)\n DEF_RVV_WI_OPS (vint16m8_t, 0)\n-DEF_RVV_WI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WI_OPS (vint32m1_t, 0)\n DEF_RVV_WI_OPS (vint32m2_t, 0)\n DEF_RVV_WI_OPS (vint32m4_t, 0)\n DEF_RVV_WI_OPS (vint32m8_t, 0)\n \n-DEF_RVV_WU_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WU_OPS (vuint8mf4_t, 0)\n DEF_RVV_WU_OPS (vuint8mf2_t, 0)\n DEF_RVV_WU_OPS (vuint8m1_t, 0)\n DEF_RVV_WU_OPS (vuint8m2_t, 0)\n DEF_RVV_WU_OPS (vuint8m4_t, 0)\n DEF_RVV_WU_OPS (vuint8m8_t, 0)\n-DEF_RVV_WU_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WU_OPS (vuint16mf2_t, 0)\n DEF_RVV_WU_OPS (vuint16m1_t, 0)\n DEF_RVV_WU_OPS (vuint16m2_t, 0)\n DEF_RVV_WU_OPS (vuint16m4_t, 0)\n DEF_RVV_WU_OPS (vuint16m8_t, 0)\n-DEF_RVV_WU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WU_OPS (vuint32m1_t, 0)\n DEF_RVV_WU_OPS (vuint32m2_t, 0)\n DEF_RVV_WU_OPS (vuint32m4_t, 0)\n DEF_RVV_WU_OPS (vuint32m8_t, 0)\n \n-DEF_RVV_WF_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WF_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WF_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_WF_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_WF_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_WF_OPS (vfloat32m8_t, RVV_REQUIRE_ELEN_FP_32)\n \n-DEF_RVV_EI16_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vint8mf4_t, 0)\n DEF_RVV_EI16_OPS (vint8mf2_t, 0)\n DEF_RVV_EI16_OPS (vint8m1_t, 0)\n DEF_RVV_EI16_OPS (vint8m2_t, 0)\n DEF_RVV_EI16_OPS (vint8m4_t, 0)\n-DEF_RVV_EI16_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vint16mf2_t, 0)\n DEF_RVV_EI16_OPS (vint16m1_t, 0)\n DEF_RVV_EI16_OPS (vint16m2_t, 0)\n DEF_RVV_EI16_OPS (vint16m4_t, 0)\n DEF_RVV_EI16_OPS (vint16m8_t, 0)\n-DEF_RVV_EI16_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vint32m1_t, 0)\n DEF_RVV_EI16_OPS (vint32m2_t, 0)\n DEF_RVV_EI16_OPS (vint32m4_t, 0)\n DEF_RVV_EI16_OPS (vint32m8_t, 0)\n-DEF_RVV_EI16_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vuint8mf4_t, 0)\n DEF_RVV_EI16_OPS (vuint8mf2_t, 0)\n DEF_RVV_EI16_OPS (vuint8m1_t, 0)\n DEF_RVV_EI16_OPS (vuint8m2_t, 0)\n DEF_RVV_EI16_OPS (vuint8m4_t, 0)\n-DEF_RVV_EI16_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vuint16mf2_t, 0)\n DEF_RVV_EI16_OPS (vuint16m1_t, 0)\n DEF_RVV_EI16_OPS (vuint16m2_t, 0)\n DEF_RVV_EI16_OPS (vuint16m4_t, 0)\n DEF_RVV_EI16_OPS (vuint16m8_t, 0)\n-DEF_RVV_EI16_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vuint32m1_t, 0)\n DEF_RVV_EI16_OPS (vuint32m2_t, 0)\n DEF_RVV_EI16_OPS (vuint32m4_t, 0)\n DEF_RVV_EI16_OPS (vuint32m8_t, 0)\n-DEF_RVV_EI16_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_EI16_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_EI16_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n@@ -543,67 +543,67 @@ DEF_RVV_EI16_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_EI16_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_EI16_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_EEW8_INTERPRET_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16mf2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16mf2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_EEW16_INTERPRET_OPS (vint8mf4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8mf2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8mf4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8mf2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_EEW32_INTERPRET_OPS (vint8mf2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint8m1_t, 0)\n@@ -615,10 +615,10 @@ DEF_RVV_EEW32_INTERPRET_OPS (vint16m1_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint16m2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint16m4_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint16m8_t, 0)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint8mf2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint8m1_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint8m2_t, 0)\n@@ -629,10 +629,10 @@ DEF_RVV_EEW32_INTERPRET_OPS (vuint16m1_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint16m2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint16m4_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint16m8_t, 0)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_EEW64_INTERPRET_OPS (vint8m1_t, 0)\n DEF_RVV_EEW64_INTERPRET_OPS (vint8m2_t, 0)\n@@ -659,162 +659,162 @@ DEF_RVV_EEW64_INTERPRET_OPS (vuint32m2_t, 0)\n DEF_RVV_EEW64_INTERPRET_OPS (vuint32m4_t, 0)\n DEF_RVV_EEW64_INTERPRET_OPS (vuint32m8_t, 0)\n \n-DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint32m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint32m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint32m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint32m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint32m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint32m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint16mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint16m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint16m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint32m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint32m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint16m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint16m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint32m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint32m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint8m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint16mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint16m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint32m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint8m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint16m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint32m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X8_VLMUL_EXT_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vint16mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n \n-DEF_RVV_X32_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X32_VLMUL_EXT_OPS (vint8mf4_t, 0)\n-DEF_RVV_X32_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X32_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X32_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n-DEF_RVV_X32_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n \n-DEF_RVV_X64_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X64_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X64_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X64_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n \n DEF_RVV_LMUL1_OPS (vint8m1_t, 0)\n DEF_RVV_LMUL1_OPS (vint16m1_t, 0)\n DEF_RVV_LMUL1_OPS (vint32m1_t, 0)\n-DEF_RVV_LMUL1_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL1_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL1_OPS (vuint8m1_t, 0)\n DEF_RVV_LMUL1_OPS (vuint16m1_t, 0)\n DEF_RVV_LMUL1_OPS (vuint32m1_t, 0)\n-DEF_RVV_LMUL1_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL1_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL1_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_LMUL1_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n \n DEF_RVV_LMUL2_OPS (vint8m2_t, 0)\n DEF_RVV_LMUL2_OPS (vint16m2_t, 0)\n DEF_RVV_LMUL2_OPS (vint32m2_t, 0)\n-DEF_RVV_LMUL2_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL2_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL2_OPS (vuint8m2_t, 0)\n DEF_RVV_LMUL2_OPS (vuint16m2_t, 0)\n DEF_RVV_LMUL2_OPS (vuint32m2_t, 0)\n-DEF_RVV_LMUL2_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL2_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL2_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_LMUL2_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n \n DEF_RVV_LMUL4_OPS (vint8m4_t, 0)\n DEF_RVV_LMUL4_OPS (vint16m4_t, 0)\n DEF_RVV_LMUL4_OPS (vint32m4_t, 0)\n-DEF_RVV_LMUL4_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL4_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL4_OPS (vuint8m4_t, 0)\n DEF_RVV_LMUL4_OPS (vuint16m4_t, 0)\n DEF_RVV_LMUL4_OPS (vuint32m4_t, 0)\n-DEF_RVV_LMUL4_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL4_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL4_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_LMUL4_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n "}, {"sha": "01cea23d3e687031c6ddf1945af76b43a60c15cf", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -2312,6 +2312,10 @@ register_builtin_type (vector_type_index type, tree eltype, machine_mode mode)\n   builtin_types[type].scalar = eltype;\n   builtin_types[type].scalar_ptr = build_pointer_type (eltype);\n   builtin_types[type].scalar_const_ptr = build_const_pointer (eltype);\n+  /* TODO: We currently just skip the register of the illegal RVV type.\n+     Ideally, we should report error message more friendly instead of\n+     reporting \"unknown\" type. Support more friendly error message in\n+     the future.  */\n   if (!riscv_v_ext_vector_mode_p (mode))\n     return;\n \n@@ -2362,6 +2366,10 @@ register_vector_type (vector_type_index type)\n \n   /* When vectype is NULL, the corresponding builtin type\n      is disabled according to '-march'.  */\n+  /* TODO: We currently just skip the register of the illegal RVV type.\n+     Ideally, we should report error message more friendly instead of\n+     reporting \"unknown\" type. Support more friendly error message in\n+     the future.  */\n   if (!vectype)\n     return;\n   tree id = get_identifier (vector_types[type].name);\n@@ -2452,12 +2460,14 @@ check_required_extensions (const function_instance &instance)\n     riscv_isa_flags |= RVV_REQUIRE_ELEN_FP_32;\n   if (TARGET_VECTOR_ELEN_FP_64)\n     riscv_isa_flags |= RVV_REQUIRE_ELEN_FP_64;\n-  if (TARGET_MIN_VLEN > 32)\n-    riscv_isa_flags |= RVV_REQUIRE_ZVE64;\n+  if (TARGET_VECTOR_ELEN_64)\n+    riscv_isa_flags |= RVV_REQUIRE_ELEN_64;\n   if (TARGET_64BIT)\n     riscv_isa_flags |= RVV_REQUIRE_RV64BIT;\n   if (TARGET_FULL_V)\n     riscv_isa_flags |= RVV_REQUIRE_FULL_V;\n+  if (TARGET_MIN_VLEN > 32)\n+    riscv_isa_flags |= RVV_REQUIRE_MIN_VLEN_64;\n \n   uint64_t missing_extensions = required_extensions & ~riscv_isa_flags;\n   if (missing_extensions != 0)"}, {"sha": "8ffb9d33e33b762b2c112f1bb2b4739ee0a972ee", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -103,10 +103,11 @@ static const unsigned int CP_WRITE_CSR = 1U << 5;\n \n /* Bit values used to identify required extensions for RVV intrinsics.  */\n #define RVV_REQUIRE_RV64BIT (1 << 0)\t/* Require RV64.  */\n-#define RVV_REQUIRE_ZVE64 (1 << 1)\t/* Require TARGET_MIN_VLEN > 32.  */\n+#define RVV_REQUIRE_ELEN_64 (1 << 1)\t/* Require TARGET_VECTOR_ELEN_64.  */\n #define RVV_REQUIRE_ELEN_FP_32 (1 << 2) /* Require FP ELEN >= 32.  */\n #define RVV_REQUIRE_ELEN_FP_64 (1 << 3) /* Require FP ELEN >= 64.  */\n #define RVV_REQUIRE_FULL_V (1 << 4) /* Require Full 'V' extension.  */\n+#define RVV_REQUIRE_MIN_VLEN_64 (1 << 5)\t/* Require TARGET_MIN_VLEN >= 64.  */\n \n /* Enumerates the RVV operand types.  */\n enum operand_type_index"}, {"sha": "3b944547b491c9082c2558db13365a17a188e028", "filename": "gcc/config/riscv/riscv-vector-switch.def", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -83,16 +83,6 @@ TODO: FP16 vector needs support of 'zvfh', we don't support it yet.  */\n #define ENTRY(MODE, REQUIREMENT, VLMUL_FOR_MIN_VLEN32, RATIO_FOR_MIN_VLEN32,   \\\n \t      VLMUL_FOR_MIN_VLEN64, RATIO_FOR_MIN_VLEN64)\n #endif\n-/* Flag of FP32 vector.  */\n-#ifndef TARGET_VECTOR_FP32\n-#define TARGET_VECTOR_FP32                                                     \\\n-  (TARGET_HARD_FLOAT && (TARGET_VECTOR_ELEN_FP_32 || TARGET_VECTOR_ELEN_FP_64))\n-#endif\n-/* Flag of FP64 vector.  */\n-#ifndef TARGET_VECTOR_FP64\n-#define TARGET_VECTOR_FP64                                                     \\\n-  (TARGET_DOUBLE_FLOAT && TARGET_VECTOR_ELEN_FP_64 && (TARGET_MIN_VLEN > 32))\n-#endif\n \n /* Mask modes. Disable VNx64BImode when TARGET_MIN_VLEN == 32.  */\n ENTRY (VNx64BI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_8, 1)\n@@ -129,35 +119,31 @@ ENTRY (VNx2HF, false, LMUL_1, 16, LMUL_F2, 32)\n ENTRY (VNx1HF, false, LMUL_F2, 32, LMUL_F4, 64)\n \n /* SEW = 32. Disable VNx16SImode when TARGET_MIN_VLEN == 32.\n-   For single-precision floating-point, we need TARGET_VECTOR_FP32 ==\n-   RVV_ENABLE.  */\n+   For single-precision floating-point, we need TARGET_VECTOR_ELEN_FP_32 to be\n+   true.  */\n ENTRY (VNx16SI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_8, 4)\n ENTRY (VNx8SI, true, LMUL_8, 4, LMUL_4, 8)\n ENTRY (VNx4SI, true, LMUL_4, 8, LMUL_2, 16)\n ENTRY (VNx2SI, true, LMUL_2, 16, LMUL_1, 32)\n ENTRY (VNx1SI, true, LMUL_1, 32, LMUL_F2, 64)\n \n-ENTRY (VNx16SF, TARGET_VECTOR_FP32 && (TARGET_MIN_VLEN > 32), LMUL_RESERVED, 0,\n-       LMUL_8, 4)\n-ENTRY (VNx8SF, TARGET_VECTOR_FP32, LMUL_8, 4, LMUL_4, 8)\n-ENTRY (VNx4SF, TARGET_VECTOR_FP32, LMUL_4, 8, LMUL_2, 16)\n-ENTRY (VNx2SF, TARGET_VECTOR_FP32, LMUL_2, 16, LMUL_1, 32)\n-ENTRY (VNx1SF, TARGET_VECTOR_FP32, LMUL_1, 32, LMUL_F2, 64)\n-\n-/* SEW = 64. Enable when TARGET_MIN_VLEN > 32.\n-   For double-precision floating-point, we need TARGET_VECTOR_FP64 ==\n-   RVV_ENABLE.  */\n-ENTRY (VNx8DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_8, 8)\n-ENTRY (VNx4DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_4, 16)\n-ENTRY (VNx2DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_2, 32)\n-ENTRY (VNx1DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_1, 64)\n-\n-ENTRY (VNx8DF, TARGET_VECTOR_FP64 && (TARGET_MIN_VLEN > 32), LMUL_RESERVED, 0,\n-       LMUL_8, 8)\n-ENTRY (VNx4DF, TARGET_VECTOR_FP64, LMUL_RESERVED, 0, LMUL_4, 16)\n-ENTRY (VNx2DF, TARGET_VECTOR_FP64, LMUL_RESERVED, 0, LMUL_2, 32)\n-ENTRY (VNx1DF, TARGET_VECTOR_FP64, LMUL_RESERVED, 0, LMUL_1, 64)\n-\n-#undef TARGET_VECTOR_FP32\n-#undef TARGET_VECTOR_FP64\n+ENTRY (VNx16SF, TARGET_VECTOR_ELEN_FP_32, LMUL_RESERVED, 0, LMUL_8, 4)\n+ENTRY (VNx8SF, TARGET_VECTOR_ELEN_FP_32, LMUL_8, 4, LMUL_4, 8)\n+ENTRY (VNx4SF, TARGET_VECTOR_ELEN_FP_32, LMUL_4, 8, LMUL_2, 16)\n+ENTRY (VNx2SF, TARGET_VECTOR_ELEN_FP_32, LMUL_2, 16, LMUL_1, 32)\n+ENTRY (VNx1SF, TARGET_VECTOR_ELEN_FP_32, LMUL_1, 32, LMUL_F2, 64)\n+\n+/* SEW = 64. Enable when TARGET_VECTOR_ELEN_64 is true.\n+   For double-precision floating-point, we need TARGET_VECTOR_ELEN_FP_64 to be\n+   true.  */\n+ENTRY (VNx8DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_8, 8)\n+ENTRY (VNx4DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_4, 16)\n+ENTRY (VNx2DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_2, 32)\n+ENTRY (VNx1DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_1, 64)\n+\n+ENTRY (VNx8DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_8, 8)\n+ENTRY (VNx4DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_4, 16)\n+ENTRY (VNx2DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_2, 32)\n+ENTRY (VNx1DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_1, 64)\n+\n #undef ENTRY"}, {"sha": "70ad85b661be44b597e3ce066ae89dfa86d51e4a", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -86,8 +86,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -102,8 +102,8 @@\n (define_mode_iterator VEEWEXT2 [\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -117,8 +117,8 @@\n \n (define_mode_iterator VEEWEXT4 [\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -131,8 +131,8 @@\n ])\n \n (define_mode_iterator VEEWEXT8 [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n   (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n   (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n@@ -162,8 +162,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n   VNx1SI VNx2SI VNx4SI VNx8SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -177,7 +177,7 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI\n   VNx1HI VNx2HI VNx4HI VNx8HI\n   VNx1SI VNx2SI VNx4SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -189,7 +189,7 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI\n   VNx1HI VNx2HI VNx4HI\n   VNx1SI VNx2SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n@@ -215,8 +215,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -232,8 +232,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VI_ZVE32 [\n@@ -291,8 +291,8 @@\n ])\n \n (define_mode_iterator VI_D [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VFULLI_D [\n@@ -302,28 +302,28 @@\n \n (define_mode_iterator VNX1_QHSD [\n   VNx1QI VNx1HI VNx1SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n (define_mode_iterator VNX2_QHSD [\n   VNx2QI VNx2HI VNx2SI\n-  (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n (define_mode_iterator VNX4_QHSD [\n   VNx4QI VNx4HI VNx4SI\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n (define_mode_iterator VNX8_QHSD [\n   VNx8QI VNx8HI VNx8SI\n-  (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n@@ -373,8 +373,8 @@\n   (VNx4QI \"TARGET_MIN_VLEN == 32\") VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   (VNx2HI \"TARGET_MIN_VLEN == 32\") VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   (VNx1SI \"TARGET_MIN_VLEN == 32\") VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32 && TARGET_MIN_VLEN == 32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -401,8 +401,8 @@\n (define_mode_iterator VWEXTI [\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VWEXTF [\n@@ -413,21 +413,21 @@\n ])\n \n (define_mode_iterator VWCONVERTI [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n-  (VNx2DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n-  (VNx8DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n ])\n \n (define_mode_iterator VQEXTI [\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VOEXTI [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_attr VLMULX2 ["}, {"sha": "a13cc12c5435714bd698d913c662e292a219a2a7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-1.c?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo1 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo2 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo3 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo4 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo5 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo6 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo7 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */"}, {"sha": "dd6bcb0f54851567bd6147ff151cf847f48c0a08", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-2.c?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo1 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo2 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo3 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo4 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo5 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo6 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo7 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */"}, {"sha": "01e86223da9f6c56e0b1ac801369621108598b49", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-3.c?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {__rvv_bool64_t t;} /* { dg-error {unknown type name '__rvv_bool64_t'} } */\n+void foo1 () {__rvv_int8mf8_t t;} /* { dg-error {unknown type name '__rvv_int8mf8_t'} } */\n+void foo2 () {__rvv_uint8mf8_t t;} /* { dg-error {unknown type name '__rvv_uint8mf8_t'} } */\n+void foo3 () {__rvv_int16mf4_t t;} /* { dg-error {unknown type name '__rvv_int16mf4_t'} } */\n+void foo4 () {__rvv_uint16mf4_t t;} /* { dg-error {unknown type name '__rvv_uint16mf4_t'} } */\n+void foo5 () {__rvv_int32mf2_t t;} /* { dg-error {unknown type name '__rvv_int32mf2_t'} } */\n+void foo6 () {__rvv_uint32mf2_t t;} /* { dg-error {unknown type name '__rvv_uint32mf2_t'} } */\n+void foo7 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo8 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo9 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo10 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo11 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo12 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo13 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo14 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */"}, {"sha": "62385b8dcd1b8b945be0d5fb7c3dc551a6e4c022", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-4.c?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;} /* { dg-error {unknown type name 'vbool64_t'} } */\n+void foo1 () {vint8mf8_t t;} /* { dg-error {unknown type name 'vint8mf8_t'} } */\n+void foo2 () {vuint8mf8_t t;} /* { dg-error {unknown type name 'vuint8mf8_t'} } */\n+void foo3 () {vint16mf4_t t;} /* { dg-error {unknown type name 'vint16mf4_t'} } */\n+void foo4 () {vuint16mf4_t t;} /* { dg-error {unknown type name 'vuint16mf4_t'} } */\n+void foo5 () {vint32mf2_t t;} /* { dg-error {unknown type name 'vint32mf2_t'} } */\n+void foo6 () {vuint32mf2_t t;} /* { dg-error {unknown type name 'vuint32mf2_t'} } */\n+void foo7 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo8 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo9 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo10 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo11 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo12 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo13 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo14 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */"}, {"sha": "26a0a742965f2ddbc0feb6b6aa61ba720eec9354", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-5.c?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {__rvv_bool64_t t;}\n+void foo1 () {__rvv_int8mf8_t t;}\n+void foo2 () {__rvv_uint8mf8_t t;}\n+void foo3 () {__rvv_int16mf4_t t;}\n+void foo4 () {__rvv_uint16mf4_t t;}\n+void foo5 () {__rvv_int32mf2_t t;}\n+void foo6 () {__rvv_uint32mf2_t t;}\n+void foo7 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo8 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo9 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo10 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo11 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo12 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo13 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo14 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */"}, {"sha": "eb66f3ea2bd4d7967e34777c792c1fd4eaba3649", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-6.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8f18bbe64613fd8d77c4520c00beeb13598f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-6.c?ref=31eb8f18bbe64613fd8d77c4520c00beeb13598f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;}\n+void foo1 () {vint8mf8_t t;}\n+void foo2 () {vuint8mf8_t t;}\n+void foo3 () {vint16mf4_t t;}\n+void foo4 () {vuint16mf4_t t;}\n+void foo5 () {vint32mf2_t t;}\n+void foo6 () {vuint32mf2_t t;}\n+void foo7 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo8 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo9 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo10 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo11 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo12 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo13 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo14 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */"}]}