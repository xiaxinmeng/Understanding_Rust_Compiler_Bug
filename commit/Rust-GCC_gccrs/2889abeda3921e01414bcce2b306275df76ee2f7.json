{"sha": "2889abeda3921e01414bcce2b306275df76ee2f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4OWFiZWRhMzkyMWUwMTQxNGJjY2UyYjMwNjI3NWRmNzZlZTJmNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-02-27T13:44:10Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-02-27T13:44:10Z"}, "message": "bfin.h (enum reg_class, [...]): Add D0REGS through D7REGS.\n\n\t* config/bfin/bfin.h (enum reg_class, REG_CLASS_NAMES,\n\tREG_CLASS_CONTENTS): Add D0REGS through D7REGS.\n\t(CONSTRAINT_LEN): Add entry for 'q'.\n\t(REG_CLASS_FROM_CONSTRAINT): Renamed from REG_CLASS_FROM_LETTER.\n\tAdd 'q' constraints.\n\t(REGNO_REG_CLASS): For R0 through R7, return corresponding regclass.\n\t(CLASS_LIKELY_SPILLED_P): True for R0, R1 and R2.\n\n\t* config/bfin/bfin.md (add_with_carry): New pattern.\n\t(s_or_u, su_optab, su_modifier): New code macros/attrs.\n\t(<su_optab>hisi_ll, <su_optab>hisi_lh, <su_optab>hisi_hl,\n\t<su_optab>hisi_hh): Renamed from mulhisi_xx patterns; macroized to\n\tsupport unsigned multiplies too.  Removed incorrect commutativity from\n\toperand 1 constraint where appropriate.\n\t(usmulhisi_ull, usmulhisi_ulh, usmulhisi_uhl, usmulhisi_uhh): New\n\tpatterns.\n\t(<su_optab>hisi_ll_lh, <su_optab>hisi_ll_hl, <su_optab>hisi_ll_hh,\n\t<su_optab>hisi_lh_hl, <su_optab>hisi_lh_hh, <su_optab>hisi_hl_hh):\n\tNew patterns.\n\t(usmulhisi_ll_lul, usmulhisi_ll_luh, usmulhisi_ll_hul,\n\tusmulhisi_ll_huh, usmulhisi_lh_lul, usmulhisi_lh_luh, usmulhisi_lh_hul,\n\tusmulhisi_lh_huh, usmulhisi_hl_lul, usmulhisi_hl_luh, usmulhisi_hl_hul,\n\tusmulhisi_hl_huh, usmulhisi_hh_lul, usmulhisi_hh_luh, usmulhisi_hh_hul,\n\tusmulhisi_hh_huh): New patterns.\n\nFrom-SVN: r122373", "tree": {"sha": "9aa78c5e4b007f1bdaf96447662b795b76da965e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aa78c5e4b007f1bdaf96447662b795b76da965e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2889abeda3921e01414bcce2b306275df76ee2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2889abeda3921e01414bcce2b306275df76ee2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2889abeda3921e01414bcce2b306275df76ee2f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2889abeda3921e01414bcce2b306275df76ee2f7/comments", "author": null, "committer": null, "parents": [{"sha": "ce27ef3d722fcd2d60f092e4fb4ace14f79fa058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce27ef3d722fcd2d60f092e4fb4ace14f79fa058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce27ef3d722fcd2d60f092e4fb4ace14f79fa058"}], "stats": {"total": 562, "additions": 543, "deletions": 19}, "files": [{"sha": "f6b8edb5efac1ffcc28b82be0821fe11b0a25c2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2889abeda3921e01414bcce2b306275df76ee2f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2889abeda3921e01414bcce2b306275df76ee2f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2889abeda3921e01414bcce2b306275df76ee2f7", "patch": "@@ -15,6 +15,31 @@\n \t(bfin_reorder_loops): New function.\n \t(bfin_reorg_loops): Use these three new functions.\n \n+\t* config/bfin/bfin.h (enum reg_class, REG_CLASS_NAMES,\n+\tREG_CLASS_CONTENTS): Add D0REGS through D7REGS.\n+\t(CONSTRAINT_LEN): Add entry for 'q'.\n+\t(REG_CLASS_FROM_CONSTRAINT): Renamed from REG_CLASS_FROM_LETTER.\n+\tAdd 'q' constraints.\n+\t(REGNO_REG_CLASS): For R0 through R7, return corresponding regclass.\n+\t(CLASS_LIKELY_SPILLED_P): True for R0, R1 and R2.\n+\n+\t* config/bfin/bfin.md (add_with_carry): New pattern.\n+\t(s_or_u, su_optab, su_modifier): New code macros/attrs.\n+\t(<su_optab>hisi_ll, <su_optab>hisi_lh, <su_optab>hisi_hl,\n+\t<su_optab>hisi_hh): Renamed from mulhisi_xx patterns; macroized to\n+\tsupport unsigned multiplies too.  Removed incorrect commutativity from\n+\toperand 1 constraint where appropriate.\n+\t(usmulhisi_ull, usmulhisi_ulh, usmulhisi_uhl, usmulhisi_uhh): New\n+\tpatterns.\n+\t(<su_optab>hisi_ll_lh, <su_optab>hisi_ll_hl, <su_optab>hisi_ll_hh,\n+\t<su_optab>hisi_lh_hl, <su_optab>hisi_lh_hh, <su_optab>hisi_hl_hh):\n+\tNew patterns.\n+\t(usmulhisi_ll_lul, usmulhisi_ll_luh, usmulhisi_ll_hul,\n+\tusmulhisi_ll_huh, usmulhisi_lh_lul, usmulhisi_lh_luh, usmulhisi_lh_hul,\n+\tusmulhisi_lh_huh, usmulhisi_hl_lul, usmulhisi_hl_luh, usmulhisi_hl_hul,\n+\tusmulhisi_hl_huh, usmulhisi_hh_lul, usmulhisi_hh_luh, usmulhisi_hh_hul,\n+\tusmulhisi_hh_huh): New patterns.\n+\n 2007-02-27  Andreas Schwab  <schwab@suse.de>\n \n \t* Makefile.in (TEXI_GCCINSTALL_FILES): Add gcc-common.texi."}, {"sha": "3085a38909d6cd8d597f8980edb27f23b65ea347", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2889abeda3921e01414bcce2b306275df76ee2f7/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2889abeda3921e01414bcce2b306275df76ee2f7/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=2889abeda3921e01414bcce2b306275df76ee2f7", "patch": "@@ -411,6 +411,14 @@ enum reg_class\n   CCREGS,\n   EVEN_DREGS,\n   ODD_DREGS,\n+  D0REGS,\n+  D1REGS,\n+  D2REGS,\n+  D3REGS,\n+  D4REGS,\n+  D5REGS,\n+  D6REGS,\n+  D7REGS,\n   DREGS,\n   FDPIC_REGS,\n   FDPIC_FPTR_REGS,\n@@ -447,6 +455,14 @@ enum reg_class\n    \"CCREGS\",\t\t\\\n    \"EVEN_DREGS\",\t\\\n    \"ODD_DREGS\",\t\t\\\n+   \"D0REGS\",\t\t\\\n+   \"D1REGS\",\t\t\\\n+   \"D2REGS\",\t\t\\\n+   \"D3REGS\",\t\t\\\n+   \"D4REGS\",\t\t\\\n+   \"D5REGS\",\t\t\\\n+   \"D6REGS\",\t\t\\\n+   \"D7REGS\",\t\t\\\n    \"DREGS\",\t\t\\\n    \"FDPIC_REGS\",\t\\\n    \"FDPIC_FPTR_REGS\",\t\\\n@@ -491,6 +507,14 @@ enum reg_class\n     { 0x00000000,    0x4 },\t\t/* CCREGS */  \\\n     { 0x00000055,    0 },\t\t/* EVEN_DREGS */   \\\n     { 0x000000aa,    0 },\t\t/* ODD_DREGS */   \\\n+    { 0x00000001,    0 },\t\t/* D0REGS */   \\\n+    { 0x00000002,    0 },\t\t/* D1REGS */   \\\n+    { 0x00000004,    0 },\t\t/* D2REGS */   \\\n+    { 0x00000008,    0 },\t\t/* D3REGS */   \\\n+    { 0x00000010,    0 },\t\t/* D4REGS */   \\\n+    { 0x00000020,    0 },\t\t/* D5REGS */   \\\n+    { 0x00000040,    0 },\t\t/* D6REGS */   \\\n+    { 0x00000080,    0 },\t\t/* D7REGS */   \\\n     { 0x000000ff,    0 },\t\t/* DREGS */   \\\n     { 0x00000800,    0x000 },\t\t/* FDPIC_REGS */   \\\n     { 0x00000200,    0x000 },\t\t/* FDPIC_FPTR_REGS */   \\\n@@ -537,7 +561,7 @@ enum reg_class\n \n /* Get reg_class from a letter such as appears in the machine description.  */\n \n-#define REG_CLASS_FROM_LETTER(LETTER)\t\\\n+#define REG_CLASS_FROM_CONSTRAINT(LETTER, STR)\t\\\n   ((LETTER) == 'a' ? PREGS :            \\\n    (LETTER) == 'Z' ? FDPIC_REGS :\t\\\n    (LETTER) == 'Y' ? FDPIC_FPTR_REGS :\t\\\n@@ -559,6 +583,16 @@ enum reg_class\n    (LETTER) == 'x' ? MOST_REGS :\t\\\n    (LETTER) == 'y' ? PROLOGUE_REGS :\t\\\n    (LETTER) == 'w' ? NON_A_CC_REGS :\t\\\n+   (LETTER) == 'q' \\\n+    ? ((STR)[1] == '0' ? D0REGS \\\n+       : (STR)[1] == '1' ? D1REGS \\\n+       : (STR)[1] == '2' ? D2REGS \\\n+       : (STR)[1] == '3' ? D3REGS \\\n+       : (STR)[1] == '4' ? D4REGS \\\n+       : (STR)[1] == '5' ? D5REGS \\\n+       : (STR)[1] == '6' ? D6REGS \\\n+       : (STR)[1] == '7' ? D7REGS \\\n+       : NO_REGS) : \\\n    NO_REGS)\n \n /* The same information, inverted:\n@@ -567,7 +601,14 @@ enum reg_class\n    or could index an array.  */\n \n #define REGNO_REG_CLASS(REGNO) \\\n- ((REGNO) < REG_P0 ? DREGS\t\t\t\t\\\n+((REGNO) == REG_R0 ? D0REGS\t\t\t\t\\\n+ : (REGNO) == REG_R1 ? D1REGS\t\t\t\t\\\n+ : (REGNO) == REG_R2 ? D2REGS\t\t\t\t\\\n+ : (REGNO) == REG_R3 ? D3REGS\t\t\t\t\\\n+ : (REGNO) == REG_R4 ? D4REGS\t\t\t\t\\\n+ : (REGNO) == REG_R5 ? D5REGS\t\t\t\t\\\n+ : (REGNO) == REG_R6 ? D6REGS\t\t\t\t\\\n+ : (REGNO) == REG_R7 ? D7REGS\t\t\t\t\\\n  : (REGNO) < REG_I0 ? PREGS\t\t\t\t\\\n  : (REGNO) == REG_ARGP ? PREGS\t\t\t\t\\\n  : (REGNO) >= REG_I0 && (REGNO) <= REG_I3 ? IREGS\t\\\n@@ -590,6 +631,9 @@ enum reg_class\n #define CLASS_LIKELY_SPILLED_P(CLASS) \\\n     ((CLASS) == PREGS_CLOBBERED \\\n      || (CLASS) == PROLOGUE_REGS \\\n+     || (CLASS) == D0REGS \\\n+     || (CLASS) == D1REGS \\\n+     || (CLASS) == D2REGS \\\n      || (CLASS) == CCREGS)\n \n /* Do not allow to store a value in REG_CC for any mode */\n@@ -1030,7 +1074,7 @@ do {\t\t\t\t\t       \\\n #define CONST_3UBIT_IMM_P(VALUE) ((VALUE) >= 0 && (VALUE) <= 7)\n \n #define CONSTRAINT_LEN(C, STR)\t\t\t\\\n-    ((C) == 'P' || (C) == 'M' || (C) == 'N' ? 2\t\\\n+    ((C) == 'P' || (C) == 'M' || (C) == 'N' || (C) == 'q' ? 2\t\\\n      : (C) == 'K' ? 3\t\t\t\t\\\n      : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n "}, {"sha": "7bdde27fafb503588f1957f6b3724014fb46c7c0", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 471, "deletions": 16, "changes": 487, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2889abeda3921e01414bcce2b306275df76ee2f7/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2889abeda3921e01414bcce2b306275df76ee2f7/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=2889abeda3921e01414bcce2b306275df76ee2f7", "patch": "@@ -1007,6 +1007,24 @@\n \n ;; DImode arithmetic operations\n \n+(define_insn \"add_with_carry\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n+                 (match_operand:SI 2 \"nonmemory_operand\" \"Ks7,d\")))\n+   (set (match_operand:SI 3 \"register_operand\" \"=d,d\")\n+\t(truncate:SI\n+\t (lshiftrt:DI (plus:DI (zero_extend:DI (match_dup 1))\n+\t\t\t       (zero_extend:DI (match_dup 2)))\n+\t\t      (const_int 32))))\n+   (clobber (reg:CC 34))]\n+  \"\"\n+  \"@\n+   %0 += %2; cc = ac0; %3 = cc;\n+   %0 = %0 + %2; cc = ac0; %3 = cc;\"\n+  [(set_attr \"type\" \"alu0\")\n+   (set_attr \"length\" \"6\")\n+   (set_attr \"seq_insns\" \"multi\")])\n+\n (define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&d,&d,&d\")\n         (plus:DI (match_operand:DI 1 \"register_operand\" \"%0,0,0\")\n@@ -3249,54 +3267,491 @@\n }\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"mulhisi_ll\"\n+(define_code_macro s_or_u [sign_extend zero_extend])\n+(define_code_attr su_optab [(sign_extend \"mul\")\n+\t\t\t    (zero_extend \"umul\")])\n+(define_code_attr su_modifier [(sign_extend \"IS\")\n+\t\t\t       (zero_extend \"FU\")])\n+\n+(define_insn \"<su_optab>hisi_ll\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (sign_extend:SI\n+\t(mult:SI (s_or_u:SI\n \t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"%d\")\n \t\t\t\t (parallel [(const_int 0)])))\n-\t\t (sign_extend:SI\n+\t\t (s_or_u:SI\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 0)])))))]\n   \"\"\n-  \"%0 = %h1 * %h2 (IS)%!\"\n+  \"%0 = %h1 * %h2 (<su_modifier>)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"mulhisi_lh\"\n+(define_insn \"<su_optab>hisi_lh\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (sign_extend:SI\n-\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"%d\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 0)])))\n-\t\t (sign_extend:SI\n+\t\t (s_or_u:SI\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %h1 * %d2 (IS)%!\"\n+  \"%0 = %h1 * %d2 (<su_modifier>)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"mulhisi_hl\"\n+(define_insn \"<su_optab>hisi_hl\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (sign_extend:SI\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t\t\t (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %d1 * %h2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"<su_optab>hisi_hh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(mult:SI (s_or_u:SI\n \t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"%d\")\n \t\t\t\t (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t\t\t (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %d1 * %d2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+;; Additional variants for signed * unsigned multiply.\n+\n+(define_insn \"usmulhisi_ull\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=W\")\n+\t(mult:SI (zero_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"%d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n \t\t (sign_extend:SI\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 0)])))))]\n   \"\"\n-  \"%0 = %d1 * %h2 (IS)%!\"\n+  \"%0 = %h2 * %h1 (IS,M)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"mulhisi_hh\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (sign_extend:SI\n+(define_insn \"usmulhisi_ulh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=W\")\n+\t(mult:SI (zero_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t\t\t (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %d2 * %h1 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_uhl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=W\")\n+\t(mult:SI (zero_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t\t\t (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %h2 * %d1 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_uhh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=W\")\n+\t(mult:SI (zero_extend:SI\n \t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"%d\")\n \t\t\t\t (parallel [(const_int 1)])))\n \t\t (sign_extend:SI\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %d1 * %d2 (IS)%!\"\n+  \"%0 = %d2 * %d1 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+;; Parallel versions of these operations.  First, normal signed or unsigned\n+;; multiplies.\n+\n+(define_insn \"<su_optab>hisi_ll_lh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %h1 * %h2, %3 = %h1 * %d2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"<su_optab>hisi_ll_hl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %h1 * %h2, %3 = %d1 * %h2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"<su_optab>hisi_ll_hh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %h1 * %h2, %3 = %d1 * %d2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"<su_optab>hisi_lh_hl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %h1 * %d2, %3 = %d1 * %h2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"<su_optab>hisi_lh_hh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %h1 * %d2, %3 = %d1 * %d2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"<su_optab>hisi_hl_hh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (s_or_u:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %d1 * %h2, %3 = %d1 * %d2 (<su_modifier>)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+;; Special signed * unsigned variants.\n+\n+(define_insn \"usmulhisi_ll_lul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %h1 * %h2, %3 = %h1 * %h2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_ll_luh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %h1 * %h2, %3 = %h1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_ll_hul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %h1 * %h2, %3 = %d1 * %h2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_ll_huh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %h1 * %h2, %3 = %d1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_lh_lul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %h1 * %d2, %3 = %h1 * %h2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_lh_luh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %h1 * %d2, %3 = %h1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_lh_hul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %h1 * %d2, %3 = %d1 * %h2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_lh_huh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %h1 * %d2, %3 = %d1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_hl_lul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %d1 * %h2, %3 = %h1 * %h2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_hl_luh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %d1 * %h2, %3 = %h1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_hl_hul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %d1 * %h2, %3 = %d1 * %h2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_hl_huh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 0)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %d1 * %h2, %3 = %d1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_hh_lul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %d1 * %d2, %3 = %h1 * %h2 (IS,M)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n+(define_insn \"usmulhisi_hh_luh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 0)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %d1 * %d2, %3 = %h1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_hh_hul\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 0)])))))]\n+  \"\"\n+  \"%0 = %d1 * %d2, %3 = %d1 * %h2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"usmulhisi_hh_huh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q0,q2,q4,q6\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))\n+\t\t (sign_extend:SI\n+\t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d,d,d,d\")\n+\t\t\t\t (parallel [(const_int 1)])))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=q1,q3,q5,q7\")\n+\t(mult:SI (sign_extend:SI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t\t (zero_extend:SI\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"\"\n+  \"%0 = %d1 * %d2, %3 = %d1 * %d2 (IS,M)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+;; Vector neg/abs.\n+\n (define_insn \"ssnegv2hi2\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(ss_neg:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")))]"}]}