{"sha": "87301e3956d44ad45e384a8eb16c79029d20213a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczMDFlMzk1NmQ0NGFkNDVlMzg0YThlYjE2Yzc5MDI5ZDIwMjEzYQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-26T23:12:46Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-28T13:12:52Z"}, "message": "aarch64: Use RTL builtins for [su]mlal_n intrinsics\n\nRewrite [su]mlal_n Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-26  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlal_n\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlal_n<mode>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vmlal_n_s16): Use RTL builtin\n\tinstead of inline asm.\n\t(vmlal_n_s32): Likewise.\n\t(vmlal_n_u16): Likewise.\n\t(vmlal_n_u32): Likewise.", "tree": {"sha": "317238e14cef0a03798c19b8caf7404047611c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/317238e14cef0a03798c19b8caf7404047611c14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87301e3956d44ad45e384a8eb16c79029d20213a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87301e3956d44ad45e384a8eb16c79029d20213a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87301e3956d44ad45e384a8eb16c79029d20213a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87301e3956d44ad45e384a8eb16c79029d20213a/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af66f4f1b06f5e0c099dfced2fcf7b1b23fa53e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af66f4f1b06f5e0c099dfced2fcf7b1b23fa53e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af66f4f1b06f5e0c099dfced2fcf7b1b23fa53e7"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "a1db6c75bd276fb8cefd2e9914823376d9522121", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87301e3956d44ad45e384a8eb16c79029d20213a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87301e3956d44ad45e384a8eb16c79029d20213a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=87301e3956d44ad45e384a8eb16c79029d20213a", "patch": "@@ -202,6 +202,10 @@\n   BUILTIN_VD_BHSI (TERNOP, smlal, 0, NONE)\n   BUILTIN_VD_BHSI (TERNOPU, umlal, 0, NONE)\n \n+  /* Implemented by aarch64_<su>mlal_n<mode>.  */\n+  BUILTIN_VD_HSI (TERNOP, smlal_n, 0, NONE)\n+  BUILTIN_VD_HSI (TERNOPU, umlal_n, 0, NONE)\n+\n   /* Implemented by aarch64_<su>mlsl_hi<mode>.  */\n   BUILTIN_VQW (TERNOP, smlsl_hi, 0, NONE)\n   BUILTIN_VQW (TERNOPU, umlsl_hi, 0, NONE)"}, {"sha": "2f6f1cb517cfb0d2bcdd72466a925eb10e98cd78", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87301e3956d44ad45e384a8eb16c79029d20213a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87301e3956d44ad45e384a8eb16c79029d20213a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=87301e3956d44ad45e384a8eb16c79029d20213a", "patch": "@@ -1932,6 +1932,21 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n \n+(define_insn \"aarch64_<su>mlal_n<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (plus:<VWIDE>\n+          (mult:<VWIDE>\n+            (ANY_EXTEND:<VWIDE>\n+              (vec_duplicate:VD_HSI\n+\t              (match_operand:<VEL> 3 \"register_operand\" \"<h_con>\")))\n+            (ANY_EXTEND:<VWIDE>\n+              (match_operand:VD_HSI 2 \"register_operand\" \"w\")))\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlal\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n+)\n+\n (define_insn \"aarch64_<su>mlsl<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (minus:<VWIDE>"}, {"sha": "8d0178987d76678088a19624d57e35503d757ea5", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87301e3956d44ad45e384a8eb16c79029d20213a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87301e3956d44ad45e384a8eb16c79029d20213a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=87301e3956d44ad45e384a8eb16c79029d20213a", "patch": "@@ -7614,48 +7614,28 @@ __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_n_s16 (int32x4_t __a, int16x4_t __b, int16_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smlal %0.4s,%2.4h,%3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlal_nv4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_n_s32 (int64x2_t __a, int32x2_t __b, int32_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smlal %0.2d,%2.2s,%3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlal_nv2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_n_u16 (uint32x4_t __a, uint16x4_t __b, uint16_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umlal %0.4s,%2.4h,%3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlal_nv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_n_u32 (uint64x2_t __a, uint32x2_t __b, uint32_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umlal %0.2d,%2.2s,%3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlal_nv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t"}]}