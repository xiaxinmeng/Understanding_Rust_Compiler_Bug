{"sha": "7e2de6df10b532be4e66025e318f68a0ebf2c408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyZGU2ZGYxMGI1MzJiZTRlNjYwMjVlMzE4ZjY4YTBlYmYyYzQwOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-29T23:53:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-29T23:53:50Z"}, "message": "C++: simplify output from suggest_alternatives_for\n\nIn the C++ FE, after emitting various errors about unrecognized names,\nthe parser can call\n  suggest_alternatives_for\nand/or\n  suggest_alternative_in_explicit_scope.\nThese can issue zero or more suggestions for the unrecognized name,\nor various other \"note\" diagnostics suggesting how to fix the problem.\n\nFor example, currently g++ emits:\n\nt.cc:12:3: error: 'gtk_widget_showall' was not declared in this scope\n12 |   gtk_widget_showall (w);\n   |   ^~~~~~~~~~~~~~~~~~\nt.cc:12:3: note: suggested alternative: 'gtk_widget_show_all'\n12 |   gtk_widget_showall (w);\n   |   ^~~~~~~~~~~~~~~~~~\n   |   gtk_widget_show_all\n\nThis patch consolidates the common case when there is a single\ncandidate, so that the error can issue a fix-it hint directly.\n\nThis simplifies the above to:\n\nt.cc:12:3: error: 'gtk_widget_showall' was not declared in this scope;\n did you mean 'gtk_widget_show_all'?\n12 |   gtk_widget_showall (w);\n   |   ^~~~~~~~~~~~~~~~~~\n   |   gtk_widget_show_all\n\nomitting the second \"note\" diagnostic.\n\nDoing so requires changing the above \"suggest_\" functions so that\nrather than being called after \"error\" and emitting a note directly,\nthey are called before the \"error\", and return a name_hint, which\ncan contain a suggestion and/or a deferred diagnostic.  The \"single\ncandidate\" case is handled via a suggestion, and the \"multiple\ncandidates\" case via a new subclass of deferred_diagnostic.\n\nThere was some complication due to the fact that we don't always have\nenough location information to issue a fix-it hint.  Specifically,\nfor the case in qualified_name_lookup_error, the location is that of\nthe name, but the location of the qualifier prefix isn't reliably\navailable.  For some hints, e.g. spell-corrections, the replacement\nis of the name, and for others, e.g. parent namespaces, it's for the\nqualified name.  The patch addresses this by splitting this case out\ninto a new \"suggest_alternatives_in_other_namespaces\" function, for\nwhich fix-it hints aren't issued.\n\nAnother complication is that of emitting a note when\n  --param cxx-max-namespaces-for-diagnostic-help\nis reached.  The patch emulates the existing behavior by emitting\nthe note from a deferred_diagnostic.  This potentially needs to\nco-exist with another deferred_diagnostic, so it works as a decorator\naround any other such deferred_diagnostic.  Doing so requires slightly\nextending class name_hint.\n\nOn adding test coverage for the various cases, I discovered that\nafter emitting a \"FOO is not a namespace-name\" error, we also emit\na \"expected namespace-name before\" error.  The patch removes this\nsecond error for the case where it's redundant, simplifying this case\nfrom e.g.:\n\nspellcheck-ns.C:10:24: error: 'inner_ms' is not a namespace-name\n10 | using namespace outer::inner_ms;\n   |                        ^~~~~~~~\nspellcheck-ns.C:10:24: note: suggested alternative: 'inner_ns'\n10 | using namespace outer::inner_ms;\n   |                        ^~~~~~~~\n   |                        inner_ns\nspellcheck-ns.C:10:32: error: expected namespace-name before ';' token\n10 | using namespace outer::inner_ms;\n   |                                ^\n\nto:\n\nspellcheck-ns.C:10:24: error: 'inner_ms' is not a namespace-name;\n did you mean 'inner_ns'?\n10 | using namespace outer::inner_ms;\n   |                        ^~~~~~~~\n   |                        inner_ns\n\ninclude/ChangeLog:\n\t* unique-ptr.h (gnu::move): Generalize so it applies to all\n\tlvalue references, rather than just to unique_ptr values.\n\ngcc/c-family/ChangeLog:\n\t* name-hint.h (name_hint::take_deferred): New member function.\n\ngcc/c/ChangeLog:\n\t* c-decl.c (implicit_decl_warning): Update \"is there a suggestion\"\n\tlogic for change to name_hint::operator bool.\n\t(undeclared_variable): Likewise.\n\t* c-parser.c (c_parser_declaration_or_fndef): Likewise.\n\t(c_parser_parameter_declaration): Likewise.\n\ngcc/cp/ChangeLog:\n\t* cp-name-hint.h: New file.\n\t* cp-tree.h (expr_to_string): New decl.\n\t(suggest_alternatives_for): Move to cp-name-hint.h, changing\n\treturn type from bool to name_hint.\n\t(suggest_alternative_in_explicit_scope): Likewise.\n\t* error.c: Define INCLUDE_UNIQUE_PTR.  Include \"cp-name-hint.h\".\n\t(expr_to_string): Make non-static.\n\t(qualified_name_lookup_error): For the non-\"::\" case, take\n\tresponsibity for issuing any suggestion from\n\tsuggest_alternative_in_explicit_scope, as it changes from\n\treturning a bool to returning a name_hint.  Replace fallback call\n\tto suggest_alternatives_for to a call to\n\tsuggest_alternatives_in_other_namespaces, capturing the fact that\n\twe don't have enough location information to issue a fix-it hint\n\tfor this case.  Update the error to support emitting a fix-it hint\n\twhere appropriate.  For the \"::\" case, take responsibility for\n\tissuing any suggestion from suggest_alternatives_for, supporting\n\temitting a fix-it hint.\n\t* lex.c: Define INCLUDE_UNIQUE_PTR.  Include \"gcc-rich-location.h\"\n\tand \"cp-name-hint.h\".\n\t(unqualified_name_lookup_error): Take responsibility for issuing\n\tany suggestion from suggest_alternatives_for, supporting emitting\n\ta fix-it hint.\n\t* name-lookup.c (class namespace_limit_reached): New subclass of\n\tdeferred_diagnostic.\n\t(class show_candidate_location): Likewise.\n\t(class suggest_alternatives): Likewise.\n\t(class namespace_hints): New class.\n\t(suggest_alternatives_for): Convert return type from bool to\n\tname_hint, replacing all direct diagnostic emission by setting\n\tsuggestions on the return value, or creating deferred diagnostics.\n\tSpecifically, split out initial traversal of namespaces into\n\tnamespace_hints' ctor, and maybe_decorate_with_limit, and move the\n\trest of the implementation to\n\tnamespace_hints::convert_candidates_to_name_hint and\n\tsuggest_alternatives_for_1.\n\t(namespace_hints::namespace_hints): New ctor, adapted from\n\tsuggest_alternatives_for's initial namespace traversal, storing\n\tlocation and name, and converting locals \"candidates\", \"limited\"\n\tand \"limit\" into members.\n\t(namespace_hints::convert_candidates_to_name_hint): New member\n\tfunction.\n\t(namespace_hints::maybe_decorate_with_limit): New member function.\n\t(suggest_alternatives_for_1): New function, based on second half\n\tof old implementation of suggest_alternatives_for, converting from\n\timmediate emission of suggestions to using name_hint.\n\t(suggest_alternatives_in_other_namespaces): New function.\n\t(maybe_suggest_missing_std_header): Convert from immediate\n\temission of suggestions to using name_hint, moving emission\n\timplementation to...\n\t(class missing_std_header): New subclass of deferred_diagnostic.\n\t(maybe_suggest_missing_header): Convert return type from bool to\n\tname_hint.\n\t(suggest_alternative_in_explicit_scope): Convert from immediate\n\temission of suggestions to using name_hint.\n\t* parser.c: Replace include of \"c-family/name-hint.h\" with\n\t\"cp-name-hint.h\".\n\t(cp_parser_diagnose_invalid_type_name): Update\n\t\"is there a suggestion\" logic for change to\n\tname_hint::operator bool.  Take responsibility for emitting\n\tfix-it hints from suggest_alternative_in_explicit_scope.\n\t(cp_parser_namespace_name): Take responsibility for emitting\n\tfix-it hints from suggest_alternative_in_explicit_scope.  Don't\n\temit the \"expected namespace-name\" error if we've already emitted\n\tan \"is not a namespace-name\" error.\n\ngcc/testsuite/ChangeLog:\n\t* c-c++-common/spellcheck-reserved.c: Update expected output for\n\tC++ for merger of \"did you mean\" suggestions into the error\n\tmessage.\n\t* g++.dg/ext/builtin3.C: Update expected output for merger of \"did\n\tyou mean\" suggestion into the error.\n\t* g++.dg/lookup/error1.C: Likewise.\n\t* g++.dg/lookup/pr77549.C: Likewise.\n\t* g++.dg/lookup/pr80913.C: Likewise.\n\t* g++.dg/lookup/suggestions1.C: Likewise.\n\t* g++.dg/lookup/suggestions2.C: New test.\n\t* g++.dg/overload/koenig1.C: Update expected output as above.\n\t* g++.dg/spellcheck-identifiers-2.C: Likewise.\n\t* g++.dg/spellcheck-identifiers.C: Likewise.\n\t* g++.dg/spellcheck-ns.C: New test.\n\t* g++.dg/spellcheck-pr77829.C: Update expected output as above.\n\t* g++.dg/spellcheck-pr78656.C: Likewise.\n\t* g++.dg/spellcheck-pr79298.C: Likewise, adding\n\t-fdiagnostics-show-caret to options.\n\t* g++.dg/spellcheck-pr80177.C: Likewise.\n\t* g++.dg/spellcheck-single-vs-multiple.C: New test.\n\t* g++.dg/spellcheck-typenames.C: Update expected output as above.\n\t* g++.dg/template/static10.C: Likewise.\n\t* g++.old-deja/g++.mike/ns5.C: Likewise.\n\t* g++.old-deja/g++.mike/ns7.C: Likewise.\n\t* g++.old-deja/g++.ns/koenig5.C: Likewise.\n\t* g++.old-deja/g++.other/lineno5.C: Likewise.\n\nlibstdc++-v3/ChangeLog:\n\t* testsuite/17_intro/using_namespace_std_exp_neg.cc: Remove\n\t\"expected namespace-name before\" error.\n\t* testsuite/17_intro/using_namespace_std_tr1_neg.cc: Likewise.\n\nFrom-SVN: r265610", "tree": {"sha": "ad3bc9e9751e07705061fb4f0700df96b7158e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad3bc9e9751e07705061fb4f0700df96b7158e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e2de6df10b532be4e66025e318f68a0ebf2c408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2de6df10b532be4e66025e318f68a0ebf2c408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2de6df10b532be4e66025e318f68a0ebf2c408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2de6df10b532be4e66025e318f68a0ebf2c408/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2bf438c02e885ddcd89e3f372fe88d9c3a58fd9"}], "stats": {"total": 1269, "additions": 913, "deletions": 356}, "files": [{"sha": "64e098816ec4f364c6fb962a7ba2cb25e84bab70", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,3 +1,7 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* name-hint.h (name_hint::take_deferred): New member function.\n+\n 2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/56856"}, {"sha": "ddc35259c721936aa5d44d3c5bb254c5595bf968", "filename": "gcc/c-family/name-hint.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc-family%2Fname-hint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc-family%2Fname-hint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fname-hint.h?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -99,7 +99,14 @@ class name_hint\n   }\n \n   const char *suggestion () const { return m_suggestion; }\n-  operator bool () const { return m_suggestion != NULL; }\n+\n+  /* Does this name_hint have a suggestion or a deferred diagnostic?  */\n+  operator bool () const { return (m_suggestion != NULL\n+\t\t\t\t   || m_deferred != NULL); }\n+\n+  /* Take ownership of this name_hint's deferred_diagnostic, for use\n+     in chaining up deferred diagnostics.  */\n+  gnu::unique_ptr<deferred_diagnostic> take_deferred () { return move (m_deferred); }\n \n   /* Call this on a name_hint if the corresponding warning was not emitted,\n      in which case we should also not emit the deferred_diagnostic.  */"}, {"sha": "708ef5d7da2a361398e04b1f31088d79ad82b7fb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,3 +1,11 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c (implicit_decl_warning): Update \"is there a suggestion\"\n+\tlogic for change to name_hint::operator bool.\n+\t(undeclared_variable): Likewise.\n+\t* c-parser.c (c_parser_declaration_or_fndef): Likewise.\n+\t(c_parser_parameter_declaration): Likewise.\n+\n 2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-errors.c (pedwarn_c11): New function."}, {"sha": "cbbf7eba51fd8c5c547a0fe9e91c53a00103b6ee", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -3150,27 +3150,27 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n \n   if (flag_isoc99)\n     {\n-      if (hint)\n+      if (const char *suggestion = hint.suggestion ())\n \t{\n \t  gcc_rich_location richloc (loc);\n-\t  richloc.add_fixit_replace (hint.suggestion ());\n+\t  richloc.add_fixit_replace (suggestion);\n \t  warned = pedwarn (&richloc, OPT_Wimplicit_function_declaration,\n \t\t\t    \"implicit declaration of function %qE;\"\n \t\t\t    \" did you mean %qs?\",\n-\t\t\t    id, hint.suggestion ());\n+\t\t\t    id, suggestion);\n \t}\n       else\n \twarned = pedwarn (loc, OPT_Wimplicit_function_declaration,\n \t\t\t  \"implicit declaration of function %qE\", id);\n     }\n-  else if (hint)\n+  else if (const char *suggestion = hint.suggestion ())\n     {\n       gcc_rich_location richloc (loc);\n-      richloc.add_fixit_replace (hint.suggestion ());\n+      richloc.add_fixit_replace (suggestion);\n       warned = warning_at\n \t(&richloc, OPT_Wimplicit_function_declaration,\n \t G_(\"implicit declaration of function %qE; did you mean %qs?\"),\n-\t id, hint.suggestion ());\n+\t id, suggestion);\n     }\n   else\n     warned = warning_at (loc, OPT_Wimplicit_function_declaration,\n@@ -3513,14 +3513,14 @@ undeclared_variable (location_t loc, tree id)\n   if (current_function_decl == NULL_TREE)\n     {\n       name_hint guessed_id = lookup_name_fuzzy (id, FUZZY_LOOKUP_NAME, loc);\n-      if (guessed_id)\n+      if (const char *suggestion = guessed_id.suggestion ())\n \t{\n \t  gcc_rich_location richloc (loc);\n-\t  richloc.add_fixit_replace (guessed_id.suggestion ());\n+\t  richloc.add_fixit_replace (suggestion);\n \t  error_at (&richloc,\n \t\t    \"%qE undeclared here (not in a function);\"\n \t\t    \" did you mean %qs?\",\n-\t\t    id, guessed_id.suggestion ());\n+\t\t    id, suggestion);\n \t}\n       else\n \terror_at (loc, \"%qE undeclared here (not in a function)\", id);\n@@ -3531,14 +3531,14 @@ undeclared_variable (location_t loc, tree id)\n       if (!objc_diagnose_private_ivar (id))\n \t{\n \t  name_hint guessed_id = lookup_name_fuzzy (id, FUZZY_LOOKUP_NAME, loc);\n-\t  if (guessed_id)\n+\t  if (const char *suggestion = guessed_id.suggestion ())\n \t    {\n \t      gcc_rich_location richloc (loc);\n-\t      richloc.add_fixit_replace (guessed_id.suggestion ());\n+\t      richloc.add_fixit_replace (suggestion);\n \t      error_at (&richloc,\n \t\t\t\"%qE undeclared (first use in this function);\"\n \t\t\t\" did you mean %qs?\",\n-\t\t\tid, guessed_id.suggestion ());\n+\t\t\tid, suggestion);\n \t    }\n \t  else\n \t    error_at (loc, \"%qE undeclared (first use in this function)\", id);"}, {"sha": "b36fca9a330acdfc7bb1d9ab5f32c7974c5383bf", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1822,12 +1822,12 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t  auto_diagnostic_group d;\n \t  name_hint hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_TYPENAME,\n \t\t\t\t\t      here);\n-\t  if (hint)\n+\t  if (const char *suggestion = hint.suggestion ())\n \t    {\n-\t      richloc.add_fixit_replace (hint.suggestion ());\n+\t      richloc.add_fixit_replace (suggestion);\n \t      error_at (&richloc,\n \t\t\t\"unknown type name %qE; did you mean %qs?\",\n-\t\t\tname, hint.suggestion ());\n+\t\t\tname, suggestion);\n \t    }\n \t  else\n \t    error_at (here, \"unknown type name %qE\", name);\n@@ -4074,13 +4074,13 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n \t  name_hint hint = lookup_name_fuzzy (token->value,\n \t\t\t\t\t      FUZZY_LOOKUP_TYPENAME,\n \t\t\t\t\t      token->location);\n-\t  if (hint)\n+\t  if (const char *suggestion = hint.suggestion ())\n \t    {\n \t      gcc_rich_location richloc (token->location);\n-\t      richloc.add_fixit_replace (hint.suggestion ());\n+\t      richloc.add_fixit_replace (suggestion);\n \t      error_at (&richloc,\n \t\t\t\"unknown type name %qE; did you mean %qs?\",\n-\t\t\ttoken->value, hint.suggestion ());\n+\t\t\ttoken->value, suggestion);\n \t    }\n \t  else\n \t    error_at (token->location, \"unknown type name %qE\", token->value);"}, {"sha": "e1167761ffc8aff9fd032602acd95ea701718a11", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,3 +1,71 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cp-name-hint.h: New file.\n+\t* cp-tree.h (expr_to_string): New decl.\n+\t(suggest_alternatives_for): Move to cp-name-hint.h, changing\n+\treturn type from bool to name_hint.\n+\t(suggest_alternative_in_explicit_scope): Likewise.\n+\t* error.c: Define INCLUDE_UNIQUE_PTR.  Include \"cp-name-hint.h\".\n+\t(expr_to_string): Make non-static.\n+\t(qualified_name_lookup_error): For the non-\"::\" case, take\n+\tresponsibity for issuing any suggestion from\n+\tsuggest_alternative_in_explicit_scope, as it changes from\n+\treturning a bool to returning a name_hint.  Replace fallback call\n+\tto suggest_alternatives_for to a call to\n+\tsuggest_alternatives_in_other_namespaces, capturing the fact that\n+\twe don't have enough location information to issue a fix-it hint\n+\tfor this case.  Update the error to support emitting a fix-it hint\n+\twhere appropriate.  For the \"::\" case, take responsibility for\n+\tissuing any suggestion from suggest_alternatives_for, supporting\n+\temitting a fix-it hint.\n+\t* lex.c: Define INCLUDE_UNIQUE_PTR.  Include \"gcc-rich-location.h\"\n+\tand \"cp-name-hint.h\".\n+\t(unqualified_name_lookup_error): Take responsibility for issuing\n+\tany suggestion from suggest_alternatives_for, supporting emitting\n+\ta fix-it hint.\n+\t* name-lookup.c (class namespace_limit_reached): New subclass of\n+\tdeferred_diagnostic.\n+\t(class show_candidate_location): Likewise.\n+\t(class suggest_alternatives): Likewise.\n+\t(class namespace_hints): New class.\n+\t(suggest_alternatives_for): Convert return type from bool to\n+\tname_hint, replacing all direct diagnostic emission by setting\n+\tsuggestions on the return value, or creating deferred diagnostics.\n+\tSpecifically, split out initial traversal of namespaces into\n+\tnamespace_hints' ctor, and maybe_decorate_with_limit, and move the\n+\trest of the implementation to\n+\tnamespace_hints::convert_candidates_to_name_hint and\n+\tsuggest_alternatives_for_1.\n+\t(namespace_hints::namespace_hints): New ctor, adapted from\n+\tsuggest_alternatives_for's initial namespace traversal, storing\n+\tlocation and name, and converting locals \"candidates\", \"limited\"\n+\tand \"limit\" into members.\n+\t(namespace_hints::convert_candidates_to_name_hint): New member\n+\tfunction.\n+\t(namespace_hints::maybe_decorate_with_limit): New member function.\n+\t(suggest_alternatives_for_1): New function, based on second half\n+\tof old implementation of suggest_alternatives_for, converting from\n+\timmediate emission of suggestions to using name_hint.\n+\t(suggest_alternatives_in_other_namespaces): New function.\n+\t(maybe_suggest_missing_std_header): Convert from immediate\n+\temission of suggestions to using name_hint, moving emission\n+\timplementation to...\n+\t(class missing_std_header): New subclass of deferred_diagnostic.\n+\t(maybe_suggest_missing_header): Convert return type from bool to\n+\tname_hint.\n+\t(suggest_alternative_in_explicit_scope): Convert from immediate\n+\temission of suggestions to using name_hint.\n+\t* parser.c: Replace include of \"c-family/name-hint.h\" with\n+\t\"cp-name-hint.h\".\n+\t(cp_parser_diagnose_invalid_type_name): Update\n+\t\"is there a suggestion\" logic for change to\n+\tname_hint::operator bool.  Take responsibility for emitting\n+\tfix-it hints from suggest_alternative_in_explicit_scope.\n+\t(cp_parser_namespace_name): Take responsibility for emitting\n+\tfix-it hints from suggest_alternative_in_explicit_scope.  Don't\n+\temit the \"expected namespace-name\" error if we've already emitted\n+\tan \"is not a namespace-name\" error.\n+\n 2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/56856"}, {"sha": "5d1cdc38ff9e84b97f872d7d9dd3a691491637f6", "filename": "gcc/cp/cp-name-hint.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fcp-name-hint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fcp-name-hint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-name-hint.h?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -0,0 +1,37 @@\n+/* Declarations for working with name_hint instances in the C++ frontend.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_CP_NAME_HINT_H\n+#define GCC_CP_NAME_HINT_H\n+\n+/* class name_hint is declared in c-family/name-hint.h, but due\n+   to issues described in that header, we have to jump through some\n+   #define hoops to be able to include it.\n+\n+   This header (cp/cp-name-hint.h) exists to limit the C++ frontend's\n+   exposure to the issue.  */\n+\n+#include \"c-family/name-hint.h\"\n+\n+extern name_hint suggest_alternatives_for (location_t, tree, bool);\n+extern name_hint suggest_alternatives_in_other_namespaces (location_t, tree);\n+extern name_hint suggest_alternative_in_explicit_scope (location_t, tree, tree);\n+\n+#endif /* GCC_CP_NAME_HINT_H */"}, {"sha": "8454cb4e178528f377692554a82e820ff8a39d49", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -6445,6 +6445,7 @@ extern const char *decl_as_string\t\t(tree, int);\n extern const char *decl_as_string_translate\t(tree, int);\n extern const char *decl_as_dwarf_string\t\t(tree, int);\n extern const char *expr_as_string\t\t(tree, int);\n+extern const char *expr_to_string\t\t(tree);\n extern const char *lang_decl_name\t\t(tree, int, bool);\n extern const char *lang_decl_dwarf_name\t\t(tree, int, bool);\n extern const char *language_to_string\t\t(enum languages);\n@@ -7478,8 +7479,6 @@ extern tree cp_fully_fold\t\t\t(tree);\n extern void clear_fold_cache\t\t\t(void);\n \n /* in name-lookup.c */\n-extern void suggest_alternatives_for            (location_t, tree, bool);\n-extern bool suggest_alternative_in_explicit_scope (location_t, tree, tree);\n extern tree strip_using_decl                    (tree);\n \n /* Tell the binding oracle what kind of binding we are looking for.  */"}, {"sha": "fa115aa211ce5363cf4aa1dd152d0a130ed829af", "filename": "gcc/cp/error.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -18,6 +18,8 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+/* For use with name_hint.  */\n+#define INCLUDE_UNIQUE_PTR\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n@@ -32,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ubsan.h\"\n #include \"internal-fn.h\"\n #include \"gcc-rich-location.h\"\n+#include \"cp-name-hint.h\"\n \n #define pp_separate_with_comma(PP) pp_cxx_separate_with (PP, ',')\n #define pp_separate_with_semicolon(PP) pp_cxx_separate_with (PP, ';')\n@@ -54,7 +57,6 @@ static const char *args_to_string (tree, int);\n static const char *code_to_string (enum tree_code);\n static const char *cv_to_string (tree, int);\n static const char *decl_to_string (tree, int);\n-static const char *expr_to_string (tree);\n static const char *fndecl_to_string (tree, int);\n static const char *op_to_string\t(bool, enum tree_code);\n static const char *parm_to_string (int);\n@@ -3059,7 +3061,7 @@ decl_to_string (tree decl, int verbose)\n   return pp_ggc_formatted_text (cxx_pp);\n }\n \n-static const char *\n+const char *\n expr_to_string (tree decl)\n {\n   reinit_cxx_pp ();\n@@ -4261,15 +4263,42 @@ qualified_name_lookup_error (tree scope, tree name,\n   else if (scope != global_namespace)\n     {\n       auto_diagnostic_group d;\n-      error_at (location, \"%qD is not a member of %qD\", name, scope);\n-      if (!suggest_alternative_in_explicit_scope (location, name, scope))\n-\tsuggest_alternatives_for (location, name, false);\n+      bool emit_fixit = true;\n+      name_hint hint\n+\t= suggest_alternative_in_explicit_scope (location, name, scope);\n+      if (!hint)\n+\t{\n+\t  hint = suggest_alternatives_in_other_namespaces (location, name);\n+\t  /* \"location\" is just the location of the name, not of the explicit\n+\t     scope, and it's not easy to get at the latter, so we can't issue\n+\t     fix-it hints for the suggestion.  */\n+\t  emit_fixit = false;\n+\t}\n+      if (const char *suggestion = hint.suggestion ())\n+\t{\n+\t  gcc_rich_location richloc (location);\n+\t  if (emit_fixit)\n+\t    richloc.add_fixit_replace (suggestion);\n+\t  error_at (&richloc, \"%qD is not a member of %qD; did you mean %qs?\",\n+\t\t    name, scope, suggestion);\n+\t}\n+      else\n+\terror_at (location, \"%qD is not a member of %qD\", name, scope);\n     }\n   else\n     {\n       auto_diagnostic_group d;\n-      error_at (location, \"%<::%D%> has not been declared\", name);\n-      suggest_alternatives_for (location, name, true);\n+      name_hint hint = suggest_alternatives_for (location, name, true);\n+      if (const char *suggestion = hint.suggestion ())\n+\t{\n+\t  gcc_rich_location richloc (location);\n+\t  richloc.add_fixit_replace (suggestion);\n+\t  error_at (&richloc,\n+\t\t    \"%<::%D%> has not been declared; did you mean %qs?\",\n+\t\t    name, suggestion);\n+\t}\n+      else\n+\terror_at (location, \"%<::%D%> has not been declared\", name);\n     }\n }\n "}, {"sha": "410dfd1bc5b4980bc0a6815d867926d9aad592e4", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -22,12 +22,16 @@ along with GCC; see the file COPYING3.  If not see\n /* This file is the lexical analyzer for GNU C++.  */\n \n #include \"config.h\"\n+/* For use with name_hint.  */\n+#define INCLUDE_UNIQUE_PTR\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n #include \"stringpool.h\"\n #include \"c-family/c-pragma.h\"\n #include \"c-family/c-objc.h\"\n+#include \"gcc-rich-location.h\"\n+#include \"cp-name-hint.h\"\n \n static int interface_strcmp (const char *);\n static void init_cp_pragma (void);\n@@ -500,8 +504,17 @@ unqualified_name_lookup_error (tree name, location_t loc)\n       if (!objc_diagnose_private_ivar (name))\n \t{\n \t  auto_diagnostic_group d;\n-\t  error_at (loc, \"%qD was not declared in this scope\", name);\n-\t  suggest_alternatives_for (loc, name, true);\n+\t  name_hint hint = suggest_alternatives_for (loc, name, true);\n+\t  if (const char *suggestion = hint.suggestion ())\n+\t    {\n+\t      gcc_rich_location richloc (loc);\n+\t      richloc.add_fixit_replace (suggestion);\n+\t      error_at (&richloc,\n+\t\t\t\"%qD was not declared in this scope; did you mean %qs?\",\n+\t\t\tname, suggestion);\n+\t    }\n+\t  else\n+\t    error_at (loc, \"%qD was not declared in this scope\", name);\n \t}\n       /* Prevent repeated error messages by creating a VAR_DECL with\n \t this NAME in the innermost block scope.  */"}, {"sha": "5b026da59e0bf9f34eb146a3d3ffa15e974849cb", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 312, "deletions": 95, "changes": 407, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -41,7 +41,10 @@ static cxx_binding *cxx_binding_make (tree value, tree type);\n static cp_binding_level *innermost_nonclass_level (void);\n static void set_identifier_type_value_with_scope (tree id, tree decl,\n \t\t\t\t\t\t  cp_binding_level *b);\n-static bool maybe_suggest_missing_std_header (location_t location, tree name);\n+static name_hint maybe_suggest_missing_std_header (location_t location,\n+\t\t\t\t\t\t   tree name);\n+static name_hint suggest_alternatives_for_1 (location_t location, tree name,\n+\t\t\t\t\t     bool suggest_misspellings);\n \n /* Create an overload suitable for recording an artificial TYPE_DECL\n    and another decl.  We use this machanism to implement the struct\n@@ -5299,20 +5302,132 @@ has_using_namespace_std_directive_p ()\n   return false;\n }\n \n-/* Suggest alternatives for NAME, an IDENTIFIER_NODE for which name\n-   lookup failed.  Search through all available namespaces and print out\n-   possible candidates.  If no exact matches are found, and\n-   SUGGEST_MISSPELLINGS is true, then also look for near-matches and\n-   suggest the best near-match, if there is one.  */\n+/* Subclass of deferred_diagnostic, for issuing a note when\n+   --param cxx-max-namespaces-for-diagnostic-help is reached.\n \n-void\n-suggest_alternatives_for (location_t location, tree name,\n-\t\t\t  bool suggest_misspellings)\n+   The note should be issued after the error, but before any other\n+   deferred diagnostics.  This is handled by decorating a wrapped\n+   deferred_diagnostic, and emitting a note before that wrapped note is\n+   deleted.  */\n+\n+class namespace_limit_reached : public deferred_diagnostic\n+{\n+ public:\n+  namespace_limit_reached (location_t loc, unsigned limit, tree name,\n+\t\t\t   gnu::unique_ptr<deferred_diagnostic> wrapped)\n+  : deferred_diagnostic (loc),\n+    m_limit (limit), m_name (name),\n+    m_wrapped (move (wrapped))\n+  {\n+  }\n+\n+  ~namespace_limit_reached ()\n+  {\n+    /* Unconditionally warn that the search was truncated.  */\n+    inform (get_location (),\n+\t    \"maximum limit of %d namespaces searched for %qE\",\n+\t    m_limit, m_name);\n+    /* m_wrapped will be implicitly deleted after this, emitting any followup\n+       diagnostic after the above note.  */\n+  }\n+\n+ private:\n+  unsigned m_limit;\n+  tree m_name;\n+  gnu::unique_ptr<deferred_diagnostic> m_wrapped;\n+};\n+\n+/* Subclass of deferred_diagnostic, for use when issuing a single suggestion.\n+   Emit a note showing the location of the declaration of the suggestion.  */\n+\n+class show_candidate_location : public deferred_diagnostic\n+{\n+ public:\n+  show_candidate_location (location_t loc, tree candidate)\n+  : deferred_diagnostic (loc),\n+    m_candidate (candidate)\n+  {\n+  }\n+\n+  ~show_candidate_location ()\n+  {\n+    inform (location_of (m_candidate), \"%qE declared here\", m_candidate);\n+  }\n+\n+ private:\n+  tree m_candidate;\n+};\n+\n+/* Subclass of deferred_diagnostic, for use when there are multiple candidates\n+   to be suggested by suggest_alternatives_for.\n+\n+   Emit a series of notes showing the various suggestions.  */\n+\n+class suggest_alternatives : public deferred_diagnostic\n {\n-  vec<tree> candidates = vNULL;\n-  vec<tree> worklist = vNULL;\n-  unsigned limit = PARAM_VALUE (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP);\n-  bool limited = false;\n+ public:\n+  suggest_alternatives (location_t loc, vec<tree> candidates)\n+  : deferred_diagnostic (loc),\n+    m_candidates (candidates)\n+  {\n+  }\n+\n+  ~suggest_alternatives ()\n+  {\n+    if (m_candidates.length ())\n+      {\n+\tinform_n (get_location (), m_candidates.length (),\n+\t\t  \"suggested alternative:\",\n+\t\t  \"suggested alternatives:\");\n+\tfor (unsigned ix = 0; ix != m_candidates.length (); ix++)\n+\t  {\n+\t    tree val = m_candidates[ix];\n+\n+\t    inform (location_of (val), \"  %qE\", val);\n+\t  }\n+      }\n+    m_candidates.release ();\n+  }\n+\n+ private:\n+  vec<tree> m_candidates;\n+};\n+\n+/* A class for encapsulating the result of a search across\n+   multiple namespaces for an unrecognized name seen at a\n+   given source location.  */\n+\n+class namespace_hints\n+{\n+ public:\n+  namespace_hints (location_t loc, tree name);\n+\n+  name_hint convert_candidates_to_name_hint ();\n+  name_hint maybe_decorate_with_limit (name_hint);\n+\n+ private:\n+  location_t m_loc;\n+  tree m_name;\n+  vec<tree> m_candidates;\n+\n+  /* Value of \"--param cxx-max-namespaces-for-diagnostic-help\".  */\n+  unsigned m_limit;\n+\n+  /* Was the limit reached?  */\n+  bool m_limited;\n+};\n+\n+/* Constructor for namespace_hints.  Search namespaces, looking for a match\n+   for unrecognized NAME seen at LOC.  */\n+\n+namespace_hints::namespace_hints (location_t loc, tree name)\n+: m_loc(loc), m_name (name)\n+{\n+  auto_vec<tree> worklist;\n+\n+  m_candidates = vNULL;\n+  m_limited = false;\n+  m_limit = PARAM_VALUE (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP);\n \n   /* Breadth-first search of namespaces.  Up to limit namespaces\n      searched (limit zero == unlimited).  */\n@@ -5323,14 +5438,14 @@ suggest_alternatives_for (location_t location, tree name,\n       name_lookup lookup (name);\n \n       if (lookup.search_qualified (ns, false))\n-\tcandidates.safe_push (lookup.value);\n+\tm_candidates.safe_push (lookup.value);\n \n-      if (!limited)\n+      if (!m_limited)\n \t{\n \t  /* Look for child namespaces.  We have to do this\n \t     indirectly because they are chained in reverse order,\n \t     which is confusing to the user.  */\n-\t  vec<tree> children = vNULL;\n+\t  auto_vec<tree> children;\n \n \t  for (tree decl = NAMESPACE_LEVEL (ns)->names;\n \t       decl; decl = TREE_CHAIN (decl))\n@@ -5339,60 +5454,141 @@ suggest_alternatives_for (location_t location, tree name,\n \t\t&& !DECL_NAMESPACE_INLINE_P (decl))\n \t      children.safe_push (decl);\n \n-\t  while (!limited && !children.is_empty ())\n+\t  while (!m_limited && !children.is_empty ())\n \t    {\n-\t      if (worklist.length () == limit)\n-\t\t{\n-\t\t  /* Unconditionally warn that the search was truncated.  */\n-\t\t  inform (location,\n-\t\t\t  \"maximum limit of %d namespaces searched for %qE\",\n-\t\t\t  limit, name);\n-\t\t  limited = true;\n-\t\t}\n+\t      if (worklist.length () == m_limit)\n+\t\tm_limited = true;\n \t      else\n \t\tworklist.safe_push (children.pop ());\n \t    }\n-\t  children.release ();\n \t}\n     }\n-  worklist.release ();\n+}\n \n-  if (candidates.length ())\n-    {\n-      inform_n (location, candidates.length (),\n-\t\t\"suggested alternative:\",\n-\t\t\"suggested alternatives:\");\n-      for (unsigned ix = 0; ix != candidates.length (); ix++)\n-\t{\n-\t  tree val = candidates[ix];\n+/* Drop ownership of m_candidates, using it to generate a name_hint at m_loc\n+   for m_name, an IDENTIFIER_NODE for which name lookup failed.\n \n-\t  inform (location_of (val), \"  %qE\", val);\n-\t}\n-      candidates.release ();\n-      return;\n+   If m_candidates is non-empty, use it to generate a suggestion and/or\n+   a deferred diagnostic that lists the possible candidate(s).\n+*/\n+\n+name_hint\n+namespace_hints::convert_candidates_to_name_hint ()\n+{\n+  /* How many candidates do we have?  */\n+\n+  /* If we have just one candidate, issue a name_hint with it as a suggestion\n+     (so that consumers are able to suggest it within the error message and emit\n+     it as a fix-it hint), and with a note showing the candidate's location.  */\n+  if (m_candidates.length () == 1)\n+    {\n+      tree candidate = m_candidates[0];\n+      /* Clean up CANDIDATES.  */\n+      m_candidates.release ();\n+      return name_hint (expr_to_string (candidate),\n+\t\t\tnew show_candidate_location (m_loc, candidate));\n     }\n+  else if (m_candidates.length () > 1)\n+    /* If we have more than one candidate, issue a name_hint without a single\n+       \"suggestion\", but with a deferred diagnostic that lists the\n+       various candidates.  This takes ownership of m_candidates.  */\n+    return name_hint (NULL, new suggest_alternatives (m_loc, m_candidates));\n \n+  /* Otherwise, m_candidates ought to be empty, so no cleanup is necessary.  */\n+  gcc_assert (m_candidates.length () == 0);\n+  gcc_assert (m_candidates == vNULL);\n+\n+  return name_hint ();\n+}\n+\n+/* If --param cxx-max-namespaces-for-diagnostic-help was reached,\n+   then we want to emit a note about after the error, but before\n+   any other deferred diagnostics.\n+\n+   Handle this by figuring out what hint is needed, then optionally\n+   decorating HINT with a namespace_limit_reached wrapper.  */\n+\n+name_hint\n+namespace_hints::maybe_decorate_with_limit (name_hint hint)\n+{\n+  if (m_limited)\n+    return name_hint (hint.suggestion (),\n+\t\t      new namespace_limit_reached (m_loc, m_limit,\n+\t\t\t\t\t\t   m_name,\n+\t\t\t\t\t\t   hint.take_deferred ()));\n+  else\n+    return hint;\n+}\n+\n+/* Generate a name_hint at LOCATION for NAME, an IDENTIFIER_NODE for which\n+   name lookup failed.\n+\n+   Search through all available namespaces and generate a suggestion and/or\n+   a deferred diagnostic that lists possible candidate(s).\n+\n+   If no exact matches are found, and SUGGEST_MISSPELLINGS is true, then also\n+   look for near-matches and suggest the best near-match, if there is one.\n+\n+   If nothing is found, then an empty name_hint is returned.  */\n+\n+name_hint\n+suggest_alternatives_for (location_t location, tree name,\n+\t\t\t  bool suggest_misspellings)\n+{\n+  /* First, search for exact matches in other namespaces.  */\n+  namespace_hints ns_hints (location, name);\n+  name_hint result = ns_hints.convert_candidates_to_name_hint ();\n+\n+  /* Otherwise, try other approaches.  */\n+  if (!result)\n+    result = suggest_alternatives_for_1 (location, name, suggest_misspellings);\n+\n+  return ns_hints.maybe_decorate_with_limit (gnu::move (result));\n+}\n+\n+/* The second half of suggest_alternatives_for, for when no exact matches\n+   were found in other namespaces.  */\n+\n+static name_hint\n+suggest_alternatives_for_1 (location_t location, tree name,\n+\t\t\t    bool suggest_misspellings)\n+{\n   /* No candidates were found in the available namespaces.  */\n \n   /* If there's a \"using namespace std;\" active, and this\n      is one of the most common \"std::\" names, then it's probably a\n      missing #include.  */\n   if (has_using_namespace_std_directive_p ())\n-    if (maybe_suggest_missing_std_header (location, name))\n-      return;\n+    {\n+      name_hint hint = maybe_suggest_missing_std_header (location, name);\n+      if (hint)\n+\treturn hint;\n+    }\n \n   /* Otherwise, consider misspellings.  */\n   if (!suggest_misspellings)\n-    return;\n-  if (name_hint hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME,\n-\t\t\t\t\t  location))\n-    {\n-      /* Show a spelling correction.  */\n-      gcc_rich_location richloc (location);\n+    return name_hint ();\n \n-      richloc.add_fixit_replace (hint.suggestion ());\n-      inform (&richloc, \"suggested alternative: %qs\", hint.suggestion ());\n-    }\n+  return lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME, location);\n+}\n+\n+/* Generate a name_hint at LOCATION for NAME, an IDENTIFIER_NODE for which\n+   name lookup failed.\n+\n+   Search through all available namespaces and generate a suggestion and/or\n+   a deferred diagnostic that lists possible candidate(s).\n+\n+   This is similiar to suggest_alternatives_for, but doesn't fallback to\n+   the other approaches used by that function.  */\n+\n+name_hint\n+suggest_alternatives_in_other_namespaces (location_t location, tree name)\n+{\n+  namespace_hints ns_hints (location, name);\n+\n+  name_hint result = ns_hints.convert_candidates_to_name_hint ();\n+\n+  return ns_hints.maybe_decorate_with_limit (gnu::move (result));\n }\n \n /* A well-known name within the C++ standard library, returned by\n@@ -5603,74 +5799,101 @@ get_cxx_dialect_name (enum cxx_dialect dialect)\n     }\n }\n \n-/* Suggest pertinent header files for NAME at LOCATION, for common\n-   names within the \"std\" namespace.\n-   Return true iff a suggestion was offered.  */\n+/* Subclass of deferred_diagnostic for use for names in the \"std\" namespace\n+   that weren't recognized, but for which we know which header it ought to be\n+   in.\n \n-static bool\n+   Emit a note either suggesting the header to be included, or noting that\n+   the current dialect is too early for the given name.  */\n+\n+class missing_std_header : public deferred_diagnostic\n+{\n+ public:\n+  missing_std_header (location_t loc,\n+\t\t      const char *name_str,\n+\t\t      const std_name_hint *header_hint)\n+  : deferred_diagnostic (loc),\n+    m_name_str (name_str),\n+    m_header_hint (header_hint)\n+  {}\n+  ~missing_std_header ()\n+  {\n+    gcc_rich_location richloc (get_location ());\n+    if (cxx_dialect >= m_header_hint->min_dialect)\n+      {\n+\tconst char *header = m_header_hint->header;\n+\tmaybe_add_include_fixit (&richloc, header, true);\n+\tinform (&richloc,\n+\t\t\"%<std::%s%> is defined in header %qs;\"\n+\t\t\" did you forget to %<#include %s%>?\",\n+\t\tm_name_str, header, header);\n+      }\n+    else\n+      inform (&richloc,\n+\t      \"%<std::%s%> is only available from %s onwards\",\n+\t      m_name_str, get_cxx_dialect_name (m_header_hint->min_dialect));\n+  }\n+\n+private:\n+  const char *m_name_str;\n+  const std_name_hint *m_header_hint;\n+};\n+\n+/* Attempt to generate a name_hint that suggests pertinent header files\n+   for NAME at LOCATION, for common names within the \"std\" namespace,\n+   or an empty name_hint if this isn't applicable.  */\n+\n+static name_hint\n maybe_suggest_missing_std_header (location_t location, tree name)\n {\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n   const char *name_str = IDENTIFIER_POINTER (name);\n   const std_name_hint *header_hint = get_std_name_hint (name_str);\n   if (!header_hint)\n-    return false;\n+    return name_hint ();\n \n-  gcc_rich_location richloc (location);\n-  if (cxx_dialect >= header_hint->min_dialect)\n-    {\n-      const char *header = header_hint->header;\n-      maybe_add_include_fixit (&richloc, header, true);\n-      inform (&richloc,\n-\t      \"%<std::%s%> is defined in header %qs;\"\n-\t      \" did you forget to %<#include %s%>?\",\n-\t      name_str, header, header);\n-    }\n-  else\n-    {\n-      inform (&richloc,\n-\t      \"%<std::%s%> is only available from %s onwards\",\n-\t      name_str, get_cxx_dialect_name (header_hint->min_dialect));\n-    }\n-  return true;\n+  return name_hint (NULL, new missing_std_header (location, name_str,\n+\t\t\t\t\t\t  header_hint));\n }\n \n-/* If SCOPE is the \"std\" namespace, then suggest pertinent header\n-   files for NAME at LOCATION.\n-   Return true iff a suggestion was offered.  */\n+/* Attempt to generate a name_hint that suggests a missing header file\n+   for NAME within SCOPE at LOCATION, or an empty name_hint if this isn't\n+   applicable.  */\n \n-static bool\n+static name_hint\n maybe_suggest_missing_header (location_t location, tree name, tree scope)\n {\n   if (scope == NULL_TREE)\n-    return false;\n+    return name_hint ();\n   if (TREE_CODE (scope) != NAMESPACE_DECL)\n-    return false;\n+    return name_hint ();\n   /* We only offer suggestions for the \"std\" namespace.  */\n   if (scope != std_node)\n-    return false;\n+    return name_hint ();\n   return maybe_suggest_missing_std_header (location, name);\n }\n \n-/* Look for alternatives for NAME, an IDENTIFIER_NODE for which name\n-   lookup failed within the explicitly provided SCOPE.  Suggest the\n-   the best meaningful candidates (if any) as a fix-it hint.\n-   Return true iff a suggestion was provided.  */\n+/* Generate a name_hint at LOCATION for NAME, an IDENTIFIER_NODE for which name\n+   lookup failed within the explicitly provided SCOPE.\n \n-bool\n+   Suggest the the best meaningful candidates (if any), otherwise\n+   an empty name_hint is returned.  */\n+\n+name_hint\n suggest_alternative_in_explicit_scope (location_t location, tree name,\n \t\t\t\t       tree scope)\n {\n   /* Something went very wrong; don't suggest anything.  */\n   if (name == error_mark_node)\n-    return false;\n+    return name_hint ();\n \n   /* Resolve any namespace aliases.  */\n   scope = ORIGINAL_NAMESPACE (scope);\n \n-  if (maybe_suggest_missing_header (location, name, scope))\n-    return true;\n+  name_hint hint = maybe_suggest_missing_header (location, name, scope);\n+  if (hint)\n+    return hint;\n \n   cp_binding_level *level = NAMESPACE_LEVEL (scope);\n \n@@ -5680,15 +5903,9 @@ suggest_alternative_in_explicit_scope (location_t location, tree name,\n   /* See if we have a good suggesion for the user.  */\n   const char *fuzzy_name = bm.get_best_meaningful_candidate ();\n   if (fuzzy_name)\n-    {\n-      gcc_rich_location richloc (location);\n-      richloc.add_fixit_replace (fuzzy_name);\n-      inform (&richloc, \"suggested alternative: %qs\",\n-\t      fuzzy_name);\n-      return true;\n-    }\n+    return name_hint (fuzzy_name, NULL);\n \n-  return false;\n+  return name_hint ();\n }\n \n /* Look up NAME (an IDENTIFIER_NODE) in SCOPE (either a NAMESPACE_DECL"}, {"sha": "c4bda7fc59e7cb236f1694b00c82b0849be5862b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 63, "deletions": 20, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -43,7 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"gcc-rich-location.h\"\n #include \"tree-iterator.h\"\n-#include \"c-family/name-hint.h\"\n+#include \"cp-name-hint.h\"\n \n \f\n /* The lexer.  */\n@@ -3292,13 +3292,13 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n       name_hint hint;\n       if (TREE_CODE (id) == IDENTIFIER_NODE)\n \thint = lookup_name_fuzzy (id, FUZZY_LOOKUP_TYPENAME, location);\n-      if (hint)\n+      if (const char *suggestion = hint.suggestion ())\n \t{\n \t  gcc_rich_location richloc (location);\n-\t  richloc.add_fixit_replace (hint.suggestion ());\n+\t  richloc.add_fixit_replace (suggestion);\n \t  error_at (&richloc,\n \t\t    \"%qE does not name a type; did you mean %qs?\",\n-\t\t    id, hint.suggestion ());\n+\t\t    id, suggestion);\n \t}\n       else\n \terror_at (location, \"%qE does not name a type\", id);\n@@ -3364,23 +3364,53 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n       if (TREE_CODE (parser->scope) == NAMESPACE_DECL)\n \t{\n \t  auto_diagnostic_group d;\n+\t  name_hint hint;\n+\t  if (decl == error_mark_node)\n+\t    hint = suggest_alternative_in_explicit_scope (location, id,\n+\t\t\t\t\t\t\t  parser->scope);\n+\t  const char *suggestion = hint.suggestion ();\n+\t  gcc_rich_location richloc (location_of (id));\n+\t  if (suggestion)\n+\t    richloc.add_fixit_replace (suggestion);\n \t  if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n-\t    error_at (location_of (id),\n-\t\t      \"%qE in namespace %qE does not name a template type\",\n-\t\t      id, parser->scope);\n+\t    {\n+\t      if (suggestion)\n+\t\terror_at (&richloc,\n+\t\t\t  \"%qE in namespace %qE does not name a template\"\n+\t\t\t  \" type; did you mean %qs?\",\n+\t\t\t  id, parser->scope, suggestion);\n+\t      else\n+\t\terror_at (&richloc,\n+\t\t\t  \"%qE in namespace %qE does not name a template type\",\n+\t\t\t  id, parser->scope);\n+\t    }\n \t  else if (TREE_CODE (id) == TEMPLATE_ID_EXPR)\n-\t    error_at (location_of (id),\n-\t\t      \"%qE in namespace %qE does not name a template type\",\n-\t\t      TREE_OPERAND (id, 0), parser->scope);\n+\t    {\n+\t      if (suggestion)\n+\t\terror_at (&richloc,\n+\t\t\t  \"%qE in namespace %qE does not name a template\"\n+\t\t\t  \" type; did you mean %qs?\",\n+\t\t\t  TREE_OPERAND (id, 0), parser->scope, suggestion);\n+\t      else\n+\t\terror_at (&richloc,\n+\t\t\t  \"%qE in namespace %qE does not name a template\"\n+\t\t\t  \" type\",\n+\t\t\t  TREE_OPERAND (id, 0), parser->scope);\n+\t    }\n \t  else\n-\t    error_at (location_of (id),\n-\t\t      \"%qE in namespace %qE does not name a type\",\n-\t\t      id, parser->scope);\n+\t    {\n+\t      if (suggestion)\n+\t\terror_at (&richloc,\n+\t\t\t  \"%qE in namespace %qE does not name a type\"\n+\t\t\t  \"; did you mean %qs?\",\n+\t\t\t  id, parser->scope, suggestion);\n+\t      else\n+\t\terror_at (&richloc,\n+\t\t\t  \"%qE in namespace %qE does not name a type\",\n+\t\t\t  id, parser->scope);\n+\t    }\n \t  if (DECL_P (decl))\n \t    inform (DECL_SOURCE_LOCATION (decl), \"%qD declared here\", decl);\n-\t  else if (decl == error_mark_node)\n-\t    suggest_alternative_in_explicit_scope (location, id,\n-\t\t\t\t\t\t   parser->scope);\n \t}\n       else if (CLASS_TYPE_P (parser->scope)\n \t       && constructor_name_p (id, parser->scope))\n@@ -18620,13 +18650,26 @@ cp_parser_namespace_name (cp_parser* parser)\n       if (!cp_parser_uncommitted_to_tentative_parse_p (parser))\n \t{\n \t  auto_diagnostic_group d;\n-\t  error_at (token->location, \"%qD is not a namespace-name\", identifier);\n+\t  name_hint hint;\n \t  if (namespace_decl == error_mark_node\n \t      && parser->scope && TREE_CODE (parser->scope) == NAMESPACE_DECL)\n-\t    suggest_alternative_in_explicit_scope (token->location, identifier,\n-\t\t\t\t\t\t   parser->scope);\n+\t    hint = suggest_alternative_in_explicit_scope (token->location,\n+\t\t\t\t\t\t\t  identifier,\n+\t\t\t\t\t\t\t  parser->scope);\n+\t  if (const char *suggestion = hint.suggestion ())\n+\t    {\n+\t      gcc_rich_location richloc (token->location);\n+\t      richloc.add_fixit_replace (suggestion);\n+\t      error_at (&richloc,\n+\t\t\t\"%qD is not a namespace-name; did you mean %qs?\",\n+\t\t\tidentifier, suggestion);\n+\t    }\n+\t  else\n+\t    error_at (token->location, \"%qD is not a namespace-name\",\n+\t\t      identifier);\n \t}\n-      cp_parser_error (parser, \"expected namespace-name\");\n+      else\n+\tcp_parser_error (parser, \"expected namespace-name\");\n       namespace_decl = error_mark_node;\n     }\n "}, {"sha": "e6e59050bae0fd55edb61e46a97e787fc4b5bd8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,3 +1,32 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/spellcheck-reserved.c: Update expected output for\n+\tC++ for merger of \"did you mean\" suggestions into the error\n+\tmessage.\n+\t* g++.dg/ext/builtin3.C: Update expected output for merger of \"did\n+\tyou mean\" suggestion into the error.\n+\t* g++.dg/lookup/error1.C: Likewise.\n+\t* g++.dg/lookup/pr77549.C: Likewise.\n+\t* g++.dg/lookup/pr80913.C: Likewise.\n+\t* g++.dg/lookup/suggestions1.C: Likewise.\n+\t* g++.dg/lookup/suggestions2.C: New test.\n+\t* g++.dg/overload/koenig1.C: Update expected output as above.\n+\t* g++.dg/spellcheck-identifiers-2.C: Likewise.\n+\t* g++.dg/spellcheck-identifiers.C: Likewise.\n+\t* g++.dg/spellcheck-ns.C: New test.\n+\t* g++.dg/spellcheck-pr77829.C: Update expected output as above.\n+\t* g++.dg/spellcheck-pr78656.C: Likewise.\n+\t* g++.dg/spellcheck-pr79298.C: Likewise, adding\n+\t-fdiagnostics-show-caret to options.\n+\t* g++.dg/spellcheck-pr80177.C: Likewise.\n+\t* g++.dg/spellcheck-single-vs-multiple.C: New test.\n+\t* g++.dg/spellcheck-typenames.C: Update expected output as above.\n+\t* g++.dg/template/static10.C: Likewise.\n+\t* g++.old-deja/g++.mike/ns5.C: Likewise.\n+\t* g++.old-deja/g++.mike/ns7.C: Likewise.\n+\t* g++.old-deja/g++.ns/koenig5.C: Likewise.\n+\t* g++.old-deja/g++.other/lineno5.C: Likewise.\n+\n 2018-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/auto24.C: Test location too."}, {"sha": "ed292f2bae0f3ef6a9f2cd092605199a1e880907", "filename": "gcc/testsuite/c-c++-common/spellcheck-reserved.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -30,8 +30,7 @@ void test (const char *buf, char ch)\n {\n   __builtin_strtchr (buf, ch); /* { dg-line misspelled_reserved } */\n   /* { dg-warning \"did you mean '__builtin_strchr'\" \"\" { target c } misspelled_reserved } */\n-  /* { dg-error \"not declared\"  \"\" { target c++ } misspelled_reserved } */\n-  /* { dg-message \"'__builtin_strrchr'\"  \"\" { target c++ } misspelled_reserved } */\n+  /* { dg-error \"'__builtin_strtchr' was not declared in this scope; did you mean '__builtin_strrchr'\\\\?\" \"\" { target c++ } misspelled_reserved } */\n }\n \n /* Similarly for a name that begins with a single underscore.  */\n@@ -40,8 +39,7 @@ void test_2 (const char *buf, char ch)\n {\n   _builtin_strchr (buf, ch); /* { dg-line misspelled_one_underscore } */\n   /* { dg-warning \"did you mean '__builtin_strchr'\" \"\" { target c } misspelled_one_underscore } */\n-  /* { dg-error \"not declared\"  \"\" { target c++ } misspelled_one_underscore } */\n-  /* { dg-message \"'__builtin_strchr'\"  \"\" { target c++ } misspelled_one_underscore } */\n+  /* { dg-error \"'_builtin_strchr' was not declared in this scope; did you mean '__builtin_strchr'\\\\?\" \"\" { target c++ } misspelled_one_underscore } */\n }\n \n /* Verify that we can correct \"__FILE_\" to \"__FILE__\".  */\n@@ -50,6 +48,5 @@ const char * test_3 (void)\n {\n   return __FILE_; /* { dg-line misspelled__FILE_ } */\n   /* { dg-error \"did you mean '__FILE__'\" \"\" { target c } misspelled__FILE_ } */\n-  /* { dg-error \"not declared\"  \"\" { target c++ } misspelled__FILE_ } */\n-  /* { dg-message \"'__FILE__'\"  \"\" { target c++ } misspelled__FILE_ } */\n+  /* { dg-error \"'__FILE_' was not declared in this scope; did you mean '__FILE__'\\\\?\"  \"\" { target c++ } misspelled__FILE_ } */\n }"}, {"sha": "31d2ac6f313c0b75c09247e07e0d5b48ca491fa5", "filename": "gcc/testsuite/g++.dg/ext/builtin3.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -9,6 +9,5 @@ extern \"C\" int printf(char*, ...); // { dg-message \"std::printf\" }\n }\n \n void foo() {\n-  printf(\"abc\"); \t\t// { dg-error \"3:'printf' was not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+  printf(\"abc\"); // { dg-error \"3:'printf' was not declared in this scope; did you mean 'std::printf'\\\\?\" }\n }"}, {"sha": "1f267e7b2544938f8c3b8232091087a16d5d01e0", "filename": "gcc/testsuite/g++.dg/lookup/error1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -3,8 +3,7 @@\n // { dg-do compile }\n \n namespace N { int i; }\t\t// { dg-message \"N::i\" }\n-void foo() { i; }   // { dg-error \"not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+void foo() { i; }   // { dg-error \"'i' was not declared in this scope; did you mean 'N::i'\\\\?\" }\n \n using namespace N;\n void bar() { i; }"}, {"sha": "af7c630197a5b609b08191c4087088602ef1af64", "filename": "gcc/testsuite/g++.dg/lookup/pr77549.C", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr77549.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr77549.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr77549.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -22,8 +22,8 @@ void\n f2 ()\n {\n   using N::bar;\n-  baz++;\t\t// { dg-error \"'baz' was not declared in this scope\" }\n-}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } .-1 }\n+  baz++;\t\t// { dg-error \"'baz' was not declared in this scope; did you mean 'bar'\\\\?\" }\n+}\n \n int\n bar ()\n@@ -44,8 +44,8 @@ void\n f3 ()\n {\n   using M::bar;\n-  baz ();\t\t// { dg-error \"'baz' was not declared in this scope\" }\n-}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } .-1 }\n+  baz ();\t\t// { dg-error \"'baz' was not declared in this scope; did you mean 'bar'\\\\?\" }\n+}\n \n namespace O\n {\n@@ -70,7 +70,6 @@ f4 ()\n {\n   using O::foo;\n   using P::bar;\n-  fooo ();\t\t// { dg-error \"'fooo' was not declared in this scope\" }\n-\t\t\t// { dg-message \"note: suggested alternative: 'foo'\" \"\" { target *-*-* } .-1 }\n-  baz ();\t\t// { dg-error \"'baz' was not declared in this scope\" }\n-}\t\t\t// { dg-message \"note: suggested alternative: 'bar'\" \"\" { target *-*-* } .-1 }\n+  fooo ();\t\t// { dg-error \"'fooo' was not declared in this scope; did you mean 'foo'\\\\?\" }\n+  baz ();\t\t// { dg-error \"'baz' was not declared in this scope; did you mean 'bar'\\\\?\" }\n+}"}, {"sha": "028e61a3f12cc335f9c079fb25567f56aaafea59", "filename": "gcc/testsuite/g++.dg/lookup/pr80913.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80913.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80913.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80913.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -6,6 +6,5 @@ struct meminfo {};\n \n void frob ()\n {\n-  meminf (); // { dg-error \"not declared\" }\n-  // { dg-message \"suggested alternative\" \"\" { target *-*-* } .-1 }\n+  meminf (); // { dg-error \"'meminf' was not declared in this scope; did you mean 'meminfo'\\\\?\" }\n }"}, {"sha": "47126a363e3f031e506fa23a08816a94d87c29e0", "filename": "gcc/testsuite/g++.dg/lookup/suggestions1.C", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,8 +1,6 @@\n // { dg-do compile }\n \n-namespace N { namespace M { int foo; } } // { dg-message \"N::M::foo\" }\n-int f (void) { return N::foo; }\t\t // { dg-error \"not a member\" }\n-// { dg-message \"suggested alternative\" \"missing namespace\" { target *-*-* } .-1 }\n+namespace N { namespace M { int foo; } } // { dg-message \"'N::M::foo' declared here\" }\n+int f (void) { return N::foo; }\t\t // { dg-error \"'foo' is not a member of 'N'; did you mean 'N::M::foo'\\\\?\" }\n \n-int g (void) { return ::foo; }\t// { dg-error \"not been declared\" }\n-// { dg-message \"suggested alternative\" \"omitted namespace\" { target *-*-* } .-1 }\n+int g (void) { return ::foo; }\t// { dg-error \"'::foo' has not been declared; did you mean 'N::M::foo'\\\\?\" }"}, {"sha": "900439f28b590654bb31c012a45f12b7a53c1b65", "filename": "gcc/testsuite/g++.dg/lookup/suggestions2.C", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions2.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -0,0 +1,128 @@\n+/* Suggestions involving namespaces.\n+\n+   The long variable names in this test case are close enough that we offer\n+   spellchecking suggestions for them in the given namespace, with fix-it\n+   hints.\n+\n+   The short variable names don't get spellchecking suggestions; instead\n+   we offer suggestions about other namespaces.  However, as we don't\n+   reliably have location information about the namespace part of the name,\n+   we shouldn't offer fix-it hints for such cases.  */\n+\n+// { dg-do compile }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+namespace outer_ns {\n+  int var_in_outer_ns; // { dg-line decl_of_var_in_outer_ns }\n+  int o; // { dg-line decl_of_o }\n+\n+  namespace inner_ns_a {\n+    int var_in_inner_ns_a;\n+    int a; // { dg-line decl_of_a }\n+  }\n+  namespace inner_ns_b {\n+    int var_in_inner_ns_b;\n+    int b; // { dg-line decl_of_b }\n+  }\n+}\n+\n+/* This one should get spell-corrected within the same namespace,\n+   with a fix-it hint.  */\n+\n+int test_1_long (void) {\n+  return outer_ns::var_in_inner_ns_a; // { dg-error \"did you mean 'var_in_outer_ns'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return outer_ns::var_in_inner_ns_a;\n+                    ^~~~~~~~~~~~~~~~~\n+                    var_in_outer_ns\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* This one should get a namespace suggestion (child namespace),\n+   with no fix-it hint.  */\n+\n+int test_1_short (void) {\n+  return outer_ns::a; // { dg-error \"did you mean 'outer_ns::inner_ns_a::a'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return outer_ns::a;\n+                    ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"declared here\" \"\" { target *-*-*} decl_of_a }\n+  /* { dg-begin-multiline-output \"\" }\n+     int a;\n+         ^\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* This one should get spell-corrected within the same namespace,\n+   with a fix-it hint.  */\n+\n+int test_2_long (void) {\n+  return outer_ns::inner_ns_a::var_in_outer_ns; // { dg-error \"did you mean 'var_in_inner_ns_a'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return outer_ns::inner_ns_a::var_in_outer_ns;\n+                                ^~~~~~~~~~~~~~~\n+                                var_in_inner_ns_a\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* This one should get a namespace suggestion (parent namespace),\n+   with no fix-it hint.  */\n+\n+int test_2_short (void) {\n+  return outer_ns::inner_ns_a::o; // { dg-error \"did you mean 'outer_ns::o'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return outer_ns::inner_ns_a::o;\n+                                ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"declared here\" \"\" { target *-*-*} decl_of_o }\n+  /* { dg-begin-multiline-output \"\" }\n+   int o;\n+       ^\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* This one should get spell-corrected within the same namespace,\n+   with a fix-it hint.  */\n+\n+int test_3_long (void) {\n+  return outer_ns::inner_ns_a::var_in_inner_ns_b; // { dg-error \"did you mean 'var_in_inner_ns_a'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return outer_ns::inner_ns_a::var_in_inner_ns_b;\n+                                ^~~~~~~~~~~~~~~~~\n+                                var_in_inner_ns_a\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* This one should get a namespace suggestion (sibling namespace),\n+   with no fix-it hint.  */\n+\n+int test_3_short (void) {\n+  return outer_ns::inner_ns_a::b; // { dg-error \"did you mean 'outer_ns::inner_ns_b::b'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return outer_ns::inner_ns_a::b;\n+                                ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"declared here\" \"\" { target *-*-*} decl_of_b }\n+  /* { dg-begin-multiline-output \"\" }\n+     int b;\n+         ^\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* This one should get a namespace suggestion, from the global ns to a child ns.\n+   It should get a fix-it hint.  */\n+\n+int test_4_long (void) {\n+  return ::var_in_outer_ns; // { dg-error \"did you mean 'outer_ns::var_in_outer_ns'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return ::var_in_outer_ns;\n+            ^~~~~~~~~~~~~~~\n+            outer_ns::var_in_outer_ns\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"declared here\" \"\" { target *-*-*} decl_of_var_in_outer_ns }\n+  /* { dg-begin-multiline-output \"\" }\n+   int var_in_outer_ns;\n+       ^~~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "550806124229cc805f5ab21420f1926ae077ea94", "filename": "gcc/testsuite/g++.dg/overload/koenig1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -13,7 +13,6 @@ void g ()\n {\n   B *bp;\n   N::A *ap;\n-  f (bp);\t\t\t// { dg-error \"3:'f' was not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+  f (bp);\t\t\t// { dg-error \"3:'f' was not declared in this scope; did you mean 'N::f'\" }\n   f (ap);\n }"}, {"sha": "67ae52bdee4282e92b6de1879294e02b56843235", "filename": "gcc/testsuite/g++.dg/spellcheck-identifiers-2.C", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers-2.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -9,12 +9,7 @@ int\n test_1 (const char *p)\n {\n   int i;\n-  return ssacnf (p, \"%d\", &i); /* { dg-error \"10: .ssacnf. was not declared in this scope\" } */\n-  /* { dg-begin-multiline-output \"\" }\n-   return ssacnf (p, \"%d\", &i);\n-          ^~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'sscafn'\" \"\" { target *-*-* } 12 }\n+  return ssacnf (p, \"%d\", &i); /* { dg-error \"10: .ssacnf. was not declared in this scope; did you mean 'sscafn'\\\\?\" } */\n   /* { dg-begin-multiline-output \"\" }\n    return ssacnf (p, \"%d\", &i);\n           ^~~~~~\n@@ -29,12 +24,7 @@ int\n test_2 (void)\n {\n   int i;\n-  return sacnf (\"%d\", &i); /* { dg-error \"10: .sacnf. was not declared in this scope\" } */\n-  /* { dg-begin-multiline-output \"\" }\n-   return sacnf (\"%d\", &i);\n-          ^~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'scanf'\" \"\" { target *-*-* } 32 }\n+  return sacnf (\"%d\", &i); /* { dg-error \"10: .sacnf. was not declared in this scope; did you mean 'scanf'\\\\?\" } */\n   /* { dg-begin-multiline-output \"\" }\n    return sacnf (\"%d\", &i);\n           ^~~~~"}, {"sha": "a9521af8c53aaf15e09869c82b08e80c744f7535", "filename": "gcc/testsuite/g++.dg/spellcheck-identifiers.C", "status": "modified", "additions": 14, "deletions": 84, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -9,12 +9,7 @@ extern void gtk_widget_show_all (GtkWidget *w);\n void\n test_1 (GtkWidget *w)\n {\n-  gtk_widget_showall (w); // { dg-error \"3: 'gtk_widget_showall' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   gtk_widget_showall (w);\n-   ^~~~~~~~~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"3: suggested alternative: 'gtk_widget_show_all'\" \"\" { target *-*-* } 12 }\n+  gtk_widget_showall (w); // { dg-error \"3: 'gtk_widget_showall' was not declared in this scope; did you mean 'gtk_widget_show_all'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    gtk_widget_showall (w);\n    ^~~~~~~~~~~~~~~~~~\n@@ -23,24 +18,14 @@ test_1 (GtkWidget *w)\n \n   /* Ensure we don't try to suggest \"gtk_widget_showall\" for subsequent\n      corrections.  */\n-  gtk_widget_showall_ (w); // { dg-error \"3: 'gtk_widget_showall_' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   gtk_widget_showall_ (w);\n-   ^~~~~~~~~~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"3: suggested alternative: 'gtk_widget_show_all'\" \"\" { target *-*-* } 26 }\n+  gtk_widget_showall_ (w); // { dg-error \"3: 'gtk_widget_showall_' was not declared in this scope; did you mean 'gtk_widget_show_all'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    gtk_widget_showall_ (w);\n    ^~~~~~~~~~~~~~~~~~~\n    gtk_widget_show_all\n    { dg-end-multiline-output \"\" } */\n \n-  GtkWidgetShowAll (w); // { dg-error \"3: 'GtkWidgetShowAll' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   GtkWidgetShowAll (w);\n-   ^~~~~~~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"3: suggested alternative: 'gtk_widget_show_all'\" \"\" { target *-*-* } 38 }\n+  GtkWidgetShowAll (w); // { dg-error \"3: 'GtkWidgetShowAll' was not declared in this scope; did you mean 'gtk_widget_show_all'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    GtkWidgetShowAll (w);\n    ^~~~~~~~~~~~~~~~\n@@ -51,12 +36,7 @@ test_1 (GtkWidget *w)\n int\n test_2 (int param)\n {\n-  return parma * parma; // { dg-error \"10: 'parma' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   return parma * parma;\n-          ^~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'param'\" \"\" { target *-*-* } 54 }\n+  return parma * parma; // { dg-error \"10: 'parma' was not declared in this scope; did you mean 'param'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return parma * parma;\n           ^~~~~\n@@ -69,12 +49,7 @@ test_2 (int param)\n int\n test_3 (int i)\n {\n-  return MACRAME (i); // { dg-error \"10: 'MACRAME' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   return MACRAME (i);\n-          ^~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'MACRO'\" \"\" { target *-*-* } 72 }\n+  return MACRAME (i); // { dg-error \"10: 'MACRAME' was not declared in this scope; did you mean 'MACRO'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return MACRAME (i);\n           ^~~~~~~\n@@ -87,12 +62,7 @@ test_3 (int i)\n int\n test_4 (int node)\n {\n-  return IDENTIFIER_PTR (node); // { dg-error \"10: 'IDENTIFIER_PTR' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   return IDENTIFIER_PTR (node);\n-          ^~~~~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'IDENTIFIER_POINTER'\" \"\" { target *-*-* } 90 }\n+  return IDENTIFIER_PTR (node); // { dg-error \"10: 'IDENTIFIER_PTR' was not declared in this scope; did you mean 'IDENTIFIER_POINTER'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return IDENTIFIER_PTR (node);\n           ^~~~~~~~~~~~~~\n@@ -104,12 +74,7 @@ test_4 (int node)\n int\n test_5 (void)\n {\n-  return __LINE_; /* { dg-error \"10: '__LINE_' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   return __LINE_;\n-          ^~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: '__LINE__'\" \"\" { target *-*-* } 107 }\n+  return __LINE_; /* { dg-error \"10: '__LINE_' was not declared in this scope; did you mean '__LINE__'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return __LINE_;\n           ^~~~~~~\n@@ -118,12 +83,7 @@ test_5 (void)\n }\n \n #define MAX_ITEMS 100\n-int array[MAX_ITEM]; // { dg-error \"11: 'MAX_ITEM' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n- int array[MAX_ITEM];\n-           ^~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"11: suggested alternative: 'MAX_ITEMS'\" \"\" { target *-*-* } 121 }\n+int array[MAX_ITEM]; // { dg-error \"11: 'MAX_ITEM' was not declared in this scope; did you mean 'MAX_ITEMS'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n  int array[MAX_ITEM];\n            ^~~~~~~~\n@@ -141,26 +101,16 @@ test_6 (enum foo f)\n {\n   switch (f)\n     {\n-    case FOO_FURST: // { dg-error \"10: 'FOO_FURST' was not declared in this scope\" }\n+    case FOO_FURST: // { dg-error \"10: 'FOO_FURST' was not declared in this scope; did you mean 'FOO_FIRST'\\\\?\" }\n       break;\n-  /* { dg-begin-multiline-output \"\" }\n-     case FOO_FURST:\n-          ^~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'FOO_FIRST'\" \"\" { target *-*-* } 144 }\n   /* { dg-begin-multiline-output \"\" }\n      case FOO_FURST:\n           ^~~~~~~~~\n           FOO_FIRST\n    { dg-end-multiline-output \"\" } */\n \n-    case FOO_SECCOND: // { dg-error \"10: 'FOO_SECCOND' was not declared in this scope\" }\n+    case FOO_SECCOND: // { dg-error \"10: 'FOO_SECCOND' was not declared in this scope; did you mean 'FOO_SECOND'\\\\?\" }\n       break;\n-  /* { dg-begin-multiline-output \"\" }\n-     case FOO_SECCOND:\n-          ^~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'FOO_SECOND'\" \"\" { target *-*-* } 157 }\n   /* { dg-begin-multiline-output \"\" }\n      case FOO_SECCOND:\n           ^~~~~~~~~~~\n@@ -178,12 +128,7 @@ void\n test_7 (int i, int j)\n {\n   int buffer[100];\n-  snprint (buffer, 100, \"%i of %i\", i, j); // { dg-error \"3: 'snprint' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   snprint (buffer, 100, \"%i of %i\", i, j);\n-   ^~~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"3: suggested alternative: 'snprintf'\" \"\" { target *-*-* } 181 }\n+  snprint (buffer, 100, \"%i of %i\", i, j); // { dg-error \"3: 'snprint' was not declared in this scope; did you mean 'snprintf'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    snprint (buffer, 100, \"%i of %i\", i, j);\n    ^~~~~~~\n@@ -196,12 +141,7 @@ test_8 ()\n {\n   int local = 42;\n   \n-  return locale; // { dg-error \"10: 'locale' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   return locale;\n-          ^~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'local'\" \"\" { target *-*-* } 199 }\n+  return locale; // { dg-error \"10: 'locale' was not declared in this scope; did you mean 'local'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return locale;\n           ^~~~~~\n@@ -226,12 +166,7 @@ public:\n \n int base::test_method_1 ()\n {\n-  return m_food; // { dg-error \"10: 'm_food' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   return m_food;\n-          ^~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'm_foo'\" \"\" { target *-*-* } 229 }\n+  return m_food; // { dg-error \"10: 'm_food' was not declared in this scope; did you mean 'm_foo'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return m_food;\n           ^~~~~~\n@@ -241,12 +176,7 @@ int base::test_method_1 ()\n \n int sub::test_method_2 ()\n {\n-  return m_food; // { dg-error \"10: 'm_food' was not declared in this scope\" }\n-  /* { dg-begin-multiline-output \"\" }\n-   return m_food;\n-          ^~~~~~\n-   { dg-end-multiline-output \"\" } */\n-  // { dg-message \"10: suggested alternative: 'm_foo'\" \"\" { target *-*-* } 244 }\n+  return m_food; // { dg-error \"10: 'm_food' was not declared in this scope; did you mean 'm_foo'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return m_food;\n           ^~~~~~"}, {"sha": "4f7452a50b7e97ac41c1324171ac262458739a80", "filename": "gcc/testsuite/g++.dg/spellcheck-ns.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-ns.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-ns.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-ns.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+namespace outer {\n+  namespace inner_ns {\n+  }\n+  typedef int some_typedef;\n+}\n+\n+using namespace outer;\n+using namespace outer::inner_ms; // { dg-error \"'inner_ms' is not a namespace-name; did you mean 'inner_ns'\" }\n+/* { dg-begin-multiline-output \"\" }\n+ using namespace outer::inner_ms;\n+                        ^~~~~~~~\n+                        inner_ns\n+   { dg-end-multiline-output \"\" } */\n+\n+outer::some_typedfe var; // { dg-error \"'some_typedfe' in namespace 'outer' does not name a type; did you mean 'some_typedef'\" }\n+/* { dg-begin-multiline-output \"\" }\n+ outer::some_typedfe var;\n+        ^~~~~~~~~~~~\n+        some_typedef\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "17071345d3fb0ddc96eaa4a26a637065276e80b8", "filename": "gcc/testsuite/g++.dg/spellcheck-pr77829.C", "status": "modified", "additions": 7, "deletions": 44, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr77829.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr77829.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr77829.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -18,12 +18,7 @@ namespace detail {\n \n void fn_1_explicit ()\n {\n-  detail::some_type i; // { dg-error \".some_type. is not a member of .detail.\" }\n-  // { dg-message \"suggested alternative: .some_typedef.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   detail::some_type i;\n-           ^~~~~~~~~\n-     { dg-end-multiline-output \"\" } */\n+  detail::some_type i; // { dg-error \".some_type. is not a member of .detail.; did you mean 'some_typedef'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    detail::some_type i;\n            ^~~~~~~~~\n@@ -35,12 +30,7 @@ namespace detail {\n \n void fn_1_implicit ()\n {\n-  some_type i; // { dg-error \".some_type. was not declared in this scope\" }\n-  // { dg-message \"suggested alternative: .some_typedef.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   some_type i;\n-   ^~~~~~~~~\n-     { dg-end-multiline-output \"\" } */\n+  some_type i; // { dg-error \".some_type. was not declared in this scope; did you mean 'some_typedef'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    some_type i;\n    ^~~~~~~~~\n@@ -54,12 +44,7 @@ void fn_1_implicit ()\n /* Tests of lookup of a function.  */\n \n void fn_2_explicit (int i) {\n-  detail::foo(i); // { dg-error \".foo. is not a member of .detail.\" }\n-  // { dg-message \"suggested alternative: ._foo.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   detail::foo(i);\n-           ^~~\n-     { dg-end-multiline-output \"\" } */\n+  detail::foo(i); // { dg-error \".foo. is not a member of .detail.; did you mean '_foo'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    detail::foo(i);\n            ^~~\n@@ -70,12 +55,7 @@ void fn_2_explicit (int i) {\n namespace detail {\n \n void fn_2_implicit (int i) {\n-  foo(i); // { dg-error \".foo. was not declared in this scope\" }\n-  // { dg-message \"suggested alternative: ._foo.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   foo(i);\n-   ^~~\n-     { dg-end-multiline-output \"\" } */\n+  foo(i); // { dg-error \".foo. was not declared in this scope; did you mean '_foo'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    foo(i);\n    ^~~\n@@ -89,13 +69,7 @@ void fn_2_implicit (int i) {\n /* Examples using a template.  */\n \n void fn_3_explicit (int i) {\n-  detail::something_els(i); // { dg-error \".something_els. is not a member of .detail.\" }\n-  // { dg-message \"suggested alternative: .something_else.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   detail::something_els(i);\n-           ^~~~~~~~~~~~~\n-     { dg-end-multiline-output \"\" } */\n-\n+  detail::something_els(i); // { dg-error \".something_els. is not a member of .detail.; did you mean 'something_else'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    detail::something_els(i);\n            ^~~~~~~~~~~~~\n@@ -106,13 +80,7 @@ void fn_3_explicit (int i) {\n namespace detail {\n \n void fn_3_implicit (int i) {\n-  something_els(i); // { dg-error \".something_els. was not declared in this scope\" }\n-  // { dg-message \"suggested alternative: .something_else.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   something_els(i);\n-   ^~~~~~~~~~~~~\n-     { dg-end-multiline-output \"\" } */\n-\n+  something_els(i); // { dg-error \".something_els. was not declared in this scope; did you mean 'something_else'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    something_els(i);\n    ^~~~~~~~~~~~~\n@@ -153,12 +121,7 @@ typedef int another_typedef;\n \n void fn_5 ()\n {\n-  ::another_type i; // { dg-error \".::another_type. has not been declared\" }\n-  // { dg-message \"suggested alternative: .another_typedef.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   ::another_type i;\n-     ^~~~~~~~~~~~\n-     { dg-end-multiline-output \"\" } */\n+  ::another_type i; // { dg-error \".::another_type. has not been declared; did you mean 'another_typedef'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    ::another_type i;\n      ^~~~~~~~~~~~"}, {"sha": "ead4e0847befe0bceddaa947ee35677d3084fb0f", "filename": "gcc/testsuite/g++.dg/spellcheck-pr78656.C", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78656.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78656.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78656.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -4,12 +4,7 @@\n \n void* allocate(std::size_t n)\n {\n-  return std::allocate<char>().allocate(n); // { dg-error \".allocate. is not a member of .std.\" }\n-  // { dg-message \"suggested alternative: .allocator.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   return std::allocate<char>().allocate(n);\n-               ^~~~~~~~\n-     { dg-end-multiline-output \"\" } */ \n+  return std::allocate<char>().allocate(n); // { dg-error \".allocate. is not a member of .std.; did you mean 'allocator'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return std::allocate<char>().allocate(n);\n                ^~~~~~~~\n@@ -22,12 +17,7 @@ void* allocate(std::size_t n)\n \n void* test_2(std::size_t n)\n {\n-  return std::alocator<char>().allocate(n); // { dg-error \".alocator. is not a member of .std.\" }\n-  // { dg-message \"suggested alternative: .allocator.\" \"\" { target *-*-* } .-1 }\n-  /* { dg-begin-multiline-output \"\" }\n-   return std::alocator<char>().allocate(n);\n-               ^~~~~~~~\n-     { dg-end-multiline-output \"\" } */ \n+  return std::alocator<char>().allocate(n); // { dg-error \".alocator. is not a member of .std.; did you mean 'allocator'\\\\?\" }\n   /* { dg-begin-multiline-output \"\" }\n    return std::alocator<char>().allocate(n);\n                ^~~~~~~~"}, {"sha": "7016ee5af444868a62a4e83d1b026f78e02196e3", "filename": "gcc/testsuite/g++.dg/spellcheck-pr79298.C", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr79298.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr79298.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr79298.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,5 +1,6 @@\n // Ensure that we can offer suggestions for misspellings via a\n // namespace alias.\n+// { dg-options \"-fdiagnostics-show-caret\" }\n \n namespace N { int x; int color; }\n namespace M = N; \n@@ -8,10 +9,18 @@ namespace O = M;\n int foo () \n {\n   return M::y; // { dg-error \".y. is not a member of .M.\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return M::y;\n+             ^\n+     { dg-end-multiline-output \"\" } */\n }\n \n int bar () \n {\n-  return O::colour; // { dg-error \".colour. is not a member of .O.\" }\n-  // { dg-message \"suggested alternative: .color.\" \"\" { target *-*-* } .-1 }\n+  return O::colour; // { dg-error \".colour. is not a member of .O.; did you mean 'color'\\\\?\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return O::colour;\n+             ^~~~~~\n+             color\n+     { dg-end-multiline-output \"\" } */\n }"}, {"sha": "7367887a37b09ed52d0c58387e77775903d23ecb", "filename": "gcc/testsuite/g++.dg/spellcheck-pr80177.C", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr80177.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr80177.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr80177.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,7 +1,12 @@\n // { dg-do compile { target c++11 } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n \n void pr80177 ()\n {\n-  static_assertion (1 == 0, \"1 == 0\"); // { dg-error \"3: 'static_assertion' was not declared in this scope\" }\n-  // { dg-message \"3: suggested alternative: 'static_assert'\" \"\" { target *-*-* } .-1 }\n+  static_assertion (1 == 0, \"1 == 0\"); // { dg-error \"3: 'static_assertion' was not declared in this scope; did you mean 'static_assert'\\\\?\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   static_assertion (1 == 0, \"1 == 0\");\n+   ^~~~~~~~~~~~~~~~\n+   static_assert\n+     { dg-end-multiline-output \"\" } */\n }"}, {"sha": "7d9b87a1d307289e1129830e872d230910787090", "filename": "gcc/testsuite/g++.dg/spellcheck-single-vs-multiple.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-single-vs-multiple.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-single-vs-multiple.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-single-vs-multiple.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -0,0 +1,79 @@\n+/* Example of namespace suggestions, covering the special-case handling\n+   of where there's one suggestion, vs multiple suggestions.  */\n+\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* Missing a namespace, where there's one candidate.\n+   Verify that we issue a fix-it hint.  */\n+\n+namespace ns1\n+{\n+  void foo_1 (); // { dg-line foo_1_decl }\n+}\n+\n+void test_1 ()\n+{\n+  foo_1 (); // { dg-error \"'foo_1' was not declared in this scope; did you mean 'ns1::foo_1'\\\\?\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo_1 ();\n+   ^~~~~\n+   ns1::foo_1\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"'ns1::foo_1' declared here\" \"\" { target *-*-*} foo_1_decl }\n+  /* { dg-begin-multiline-output \"\" }\n+   void foo_1 ();\n+        ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Missing a namespace, where there are multiple candidates.\n+   We don't issue a fix-it hint.  */\n+\n+namespace ns2_a\n+{\n+  char foo_2 (); // { dg-line ns2_a_foo_2_decl }\n+}\n+\n+namespace ns2_b\n+{\n+  int foo_2 (); // { dg-line ns2_b_foo_2_decl }\n+}\n+\n+void test_2 ()\n+{\n+  foo_2 (); // { dg-line foo_2_usage }\n+  // { dg-error \"'foo_2' was not declared in this scope\" \"\" { target *-*-*} foo_2_usage }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo_2 ();\n+   ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"suggested alternatives:\" \"\" { target *-*-*} foo_2_usage }\n+  // { dg-message \"  'ns2_a::foo_2'\" \"\" { target *-*-*} ns2_a_foo_2_decl }\n+  /* { dg-begin-multiline-output \"\" }\n+   char foo_2 ();\n+        ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"  'ns2_b::foo_2'\" \"\" { target *-*-*} ns2_b_foo_2_decl }\n+  /* { dg-begin-multiline-output \"\" }\n+   int foo_2 ();\n+       ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Misspelling within an explicit namespace.\n+   Verify that we issue a fix-it hint.  */\n+\n+namespace ns3\n+{\n+  void foo_3 ();\n+}\n+\n+void test_3 ()\n+{\n+  ns3::goo_3 (); // { dg-error \"'goo_3' is not a member of 'ns3'; did you mean 'foo_3'\\\\?\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   ns3::goo_3 ();\n+        ^~~~~\n+        foo_3\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "25d3f1dcefd8eb322a392f1e7721640e383e00bd", "filename": "gcc/testsuite/g++.dg/spellcheck-typenames.C", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -9,12 +9,7 @@ void test_2 (singed char e); // { dg-error \"21: variable or field 'test_2' decla\n  void test_2 (singed char e);\n                      ^~~~\n    { dg-end-multiline-output \"\" } */\n-// { dg-message \"14: 'singed' was not declared in this scope\" \"\" { target *-*-* } 7 }\n-/* { dg-begin-multiline-output \"\" }\n- void test_2 (singed char e);\n-              ^~~~~~\n-   { dg-end-multiline-output \"\" } */\n-// { dg-message \"14: suggested alternative: 'signed'\" \"\" { target *-*-* } 7 }\n+// { dg-message \"14: 'singed' was not declared in this scope; did you mean 'signed'\\\\?\" \"\" { target *-*-* } 7 }\n /* { dg-begin-multiline-output \"\" }\n  void test_2 (singed char e);\n               ^~~~~~\n@@ -26,8 +21,7 @@ void test_3 (car e); // { dg-error \"14: variable or field 'test_3' declared void\n  void test_3 (car e);\n               ^~~\n    { dg-end-multiline-output \"\" } */\n-// { dg-message \"14: 'car' was not declared in this scope\" \"\" { target *-*-* } 24 }\n-// { dg-message \"14: suggested alternative: 'char'\" \"\" { target *-*-* } 24 }\n+// { dg-message \"14: 'car' was not declared in this scope; did you mean 'char'\\\\?\" \"\" { target *-*-* } 19 }\n /* { dg-begin-multiline-output \"\" }\n  void test_3 (car e);\n               ^~~"}, {"sha": "36fed386e493bd681330f39aad47704a3709de53", "filename": "gcc/testsuite/g++.dg/template/static10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -19,6 +19,6 @@ namespace __gnu_debug_def\n namespace std\n {\n   template<> void\n-  vector<int, allocator<int> >::swap(vector<int, allocator<int> >&) { } // { dg-error \"\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+  vector<int, allocator<int> >::swap(vector<int, allocator<int> >&) { } // { dg-error \"did you mean 'std::allocator'\" }\n+  // { dg-error \"\" \"\" { target *-*-*} .-1 }\n }"}, {"sha": "832b5e8c1ddf18e95ca184290516dd41337380cc", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns5.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -3,5 +3,4 @@ namespace A {\n   int i = 1;\t\t\t// { dg-message \"A::i\" }\n }\n \n-int j = i;\t\t// { dg-error \"\" } \n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+int j = i;\t\t// { dg-error \"'i' was not declared in this scope; did you mean 'A::i'\" } "}, {"sha": "6f9e6d21b1f8fed56d0ea5ba8825ab9a13ef6ee6", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns7.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -5,6 +5,5 @@ namespace A {\n }\n \n namespace B {\n-  int j = i;\t// { dg-error \"\" } \n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+  int j = i;\t// { dg-error \"'i' was not declared in this scope; did you mean 'A::i'\" } \n }"}, {"sha": "4461d13dce2bb2706b155b57f3f96c40af14f8e0", "filename": "gcc/testsuite/g++.old-deja/g++.ns/koenig5.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -14,6 +14,5 @@ void g()\n   foo(new X);            // ok -- DR 218 says that we find the global\n \t\t\t // foo variable first, and therefore do not\n \t\t\t // perform argument-dependent lookup.\n-  bar(new X);            // { dg-error \"3:'bar' was not declared\" }\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+  bar(new X);            // { dg-error \"3:'bar' was not declared in this scope; did you mean 'A::bar'\" }\n }"}, {"sha": "1865f117e0f6ac2a774047048537249df66e76c6", "filename": "gcc/testsuite/g++.old-deja/g++.other/lineno5.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -15,6 +15,5 @@ namespace tmp {\n \n class A {\n   public:\n-  int kaka(tmp::B = b);\t\t// { dg-error \"\" } no b in scope\n-  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } .-1 }\n+  int kaka(tmp::B = b);\t\t// { dg-error \"'b' was not declared in this scope; did you mean 'tmp::b'\" }\n };"}, {"sha": "4584f7cb8afd62654b6cef50e362c3d99eda32f8", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,3 +1,8 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* unique-ptr.h (gnu::move): Generalize so it applies to all\n+\tlvalue references, rather than just to unique_ptr values.\n+\n 2018-07-26  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/86548"}, {"sha": "a7255fc554610562b3abcb9867d17160a52aeba8", "filename": "include/unique-ptr.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/include%2Funique-ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/include%2Funique-ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Funique-ptr.h?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -336,13 +336,13 @@ operator>= (const detail::unique_ptr_base<T, D> &x,\n { return !(x < y); }\n \n /* std::move \"emulation\".  This is as simple as it can be -- no\n-   attempt is made to emulate rvalue references.  Instead relies on\n-   the fact that gnu::unique_ptr has move semantics like\n-   std::auto_ptr.  I.e., copy/assignment actually moves.  */\n+   attempt is made to emulate rvalue references.  This relies on T\n+   having move semantics like std::auto_ptr.\n+   I.e., copy/assignment actually moves.  */\n \n-template<typename T, typename D>\n-unique_ptr<T, D>\n-move (unique_ptr<T, D> v)\n+template<typename T>\n+const T&\n+move (T& v)\n {\n   return v;\n }"}, {"sha": "a3a40568fcdbb40e65189f0daed98088a1c80bec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -1,3 +1,9 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/17_intro/using_namespace_std_exp_neg.cc: Remove\n+\t\"expected namespace-name before\" error.\n+\t* testsuite/17_intro/using_namespace_std_tr1_neg.cc: Likewise.\n+\n 2018-10-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* testsuite/23_containers/deque/48101_neg.cc: Remove dg-prune-output"}, {"sha": "2bf8f12e59fc0eb13ac2f1f0728fddec1af7fdb0", "filename": "libstdc++-v3/testsuite/17_intro/using_namespace_std_exp_neg.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -61,5 +61,3 @@ namespace gnu\n {\n   using namespace std::experimental;  // { dg-error \"is not a namespace-name\" }\n }\n-\n-// { dg-error \"expected namespace-name before\" \"\" { target *-*-* } 62 }"}, {"sha": "8a1527ca6cbd0008575145ef6a1a99b40207d9e1", "filename": "libstdc++-v3/testsuite/17_intro/using_namespace_std_tr1_neg.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2de6df10b532be4e66025e318f68a0ebf2c408/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2de6df10b532be4e66025e318f68a0ebf2c408/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc?ref=7e2de6df10b532be4e66025e318f68a0ebf2c408", "patch": "@@ -64,5 +64,3 @@ namespace gnu\n {\n   using namespace std::tr1;  // { dg-error \"is not a namespace-name\" }\n }\n-\n-// { dg-error \"expected namespace-name before\" \"\" { target *-*-* } 65 }"}]}