{"sha": "dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhNzdhOGExYjY4ZjU1ZTVmZjMwOTRjYmEzYmY5Y2U1NzU0YTRiMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-04-03T00:08:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-04-03T00:08:54Z"}, "message": "exception (get_terminate(), [...]): Declare.\n\n\t* libsupc++/exception (get_terminate(), get_unexpected()): Declare.\n\t* libsupc++/eh_terminate.cc (get_terminate() , set_unexpected()):\n\tDefine.\n\t(set_terminate(terminate_handler)): Set atomically.\n\t(set_unexpected(terminate_handler)): Likewise.\n\t* libsupc++/new (get_new_handler()): Declare.\n\t* libsupc++/new_handler.cc (get_new_handler()): Define.\n\t(set_new_handler(new_handler)): Set atomically.\n\t(__new_handler): Use internal linkage.\n\t* libsupc++/new_op.cc (operator new): Use get_new_handler().\n\t* libsupc++/new_opnt.cc (operator new): Likewise.\n\t* acinclude.m4: Bump libtool_VERSION to 6:19:0.\n\t* configure: Regenerate.\n\t* libsupc++/Makefile.am: Compile above files with -std=gnu++11.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Add new exports.\n\t* doc/xml/manual/status_cxx2011.xml: Update.\n\t* testsuite/18_support/headers/exception/synopsis.cc: Check accessors\n\tfor handlers.\n\t* testsuite/18_support/headers/new/synopsis.cc: Likewise.\n\t* testsuite/18_support/new_handler.cc: New.\n\t* testsuite/18_support/terminate_handler.cc: New.\n\t* testsuite/18_support/unexpected_handler.cc: New.\n\nFrom-SVN: r197380", "tree": {"sha": "41b23a61903b4ffa760fefd1e9f216e33e089932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b23a61903b4ffa760fefd1e9f216e33e089932"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6fd8c8e8807f49f0f2cb646e1811f1f29a5aae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fd8c8e8807f49f0f2cb646e1811f1f29a5aae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fd8c8e8807f49f0f2cb646e1811f1f29a5aae1"}], "stats": {"total": 338, "additions": 286, "deletions": 52}, "files": [{"sha": "9e27c7632c605d9a57ff0fc50b640540ace04c4c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -1,3 +1,29 @@\n+2013-04-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* libsupc++/exception (get_terminate(), get_unexpected()): Declare.\n+\t* libsupc++/eh_terminate.cc (get_terminate() , set_unexpected()):\n+\tDefine.\n+\t(set_terminate(terminate_handler)): Set atomically.\n+\t(set_unexpected(terminate_handler)): Likewise.\n+\t* libsupc++/new (get_new_handler()): Declare.\n+\t* libsupc++/new_handler.cc (get_new_handler()): Define.\n+\t(set_new_handler(new_handler)): Set atomically.\n+\t(__new_handler): Use internal linkage.\n+\t* libsupc++/new_op.cc (operator new): Use get_new_handler().\n+\t* libsupc++/new_opnt.cc (operator new): Likewise.\n+\t* acinclude.m4: Bump libtool_VERSION to 6:19:0.\n+\t* configure: Regenerate.\n+\t* libsupc++/Makefile.am: Compile above files with -std=gnu++11.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Add new exports.\n+\t* doc/xml/manual/status_cxx2011.xml: Update.\n+\t* testsuite/18_support/headers/exception/synopsis.cc: Check accessors\n+\tfor handlers.\n+\t* testsuite/18_support/headers/new/synopsis.cc: Likewise.\n+\t* testsuite/18_support/new_handler.cc: New.\n+\t* testsuite/18_support/terminate_handler.cc: New.\n+\t* testsuite/18_support/unexpected_handler.cc: New.\n+\n 2013-04-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/appendix_contributing.xml: Remove broken link and"}, {"sha": "4d06b207af1cdae31e9a9d2dde3e8cd8f442528d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -3241,7 +3241,7 @@ changequote([,])dnl\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:18:0\n+libtool_VERSION=6:19:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "978641f076b88d9df7a25543b4b0f8fce823bcd8", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -1344,6 +1344,19 @@ GLIBCXX_3.4.18 {\n \n } GLIBCXX_3.4.17;\n \n+GLIBCXX_3.4.19 {\n+\n+    # std::get_new_handler()\n+    _ZSt15get_new_handlerv;\n+\n+    # std::get_terminate()\n+    _ZSt13get_terminatev;\n+\n+    # std::get_unexpected()\n+    _ZSt14get_unexpectedv;\n+\n+} GLIBCXX_3.4.18;\n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {\n "}, {"sha": "17b6a266c736b6a4879e0c0f118b0a836938169b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -71477,7 +71477,7 @@ $as_echo \"$as_me: WARNING: === Symbol versioning will be disabled.\" >&2;}\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:18:0\n+libtool_VERSION=6:19:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "d8caf0fe71740ed2e5cc664b57f0ea65272c2c86", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -154,13 +154,10 @@ particular release.\n       <entry>C library dependency for quick_exit, at_quick_exit</entry>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>18.6</entry>\n       <entry>Dynamic memory management</entry>\n-      <entry>Partial</entry>\n-      <entry>Missing <code>get_new_handler</code>.\n-             <code>set_new_handler</code> is not thread-safe.\n-      </entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <entry>18.7</entry>\n@@ -205,13 +202,10 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>18.8.3</entry>\n       <entry>Abnormal termination</entry>\n-      <entry>Partial</entry>\n-      <entry>Missing <code>get_terminate</code>.\n-             <code>set_terminate</code> is not thread-safe.\n-      </entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <entry>18.8.4</entry>\n@@ -2616,12 +2610,9 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>D.11</entry>\n       <entry>Violating exception-specifications</entry>\n-      <entry>Partial</entry>\n-      <entry>Missing <code>get_unexpected</code>.\n-             <code>set_unexpected</code> is not thread-safe.\n+      <entry/>\n       </entry>\n     </row>\n "}, {"sha": "25c58fb8b0d1ac6c3cd589409c5b37d916e90be5", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -106,31 +106,51 @@ cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n \n-# Use special rules for the C++0x sources so that the proper flags are passed.\n+# Use special rules for the C++11 sources so that the proper flags are passed.\n eh_ptr.lo: eh_ptr.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n eh_ptr.o: eh_ptr.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+eh_terminate.lo: eh_terminate.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+eh_terminate.o: eh_terminate.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n eh_throw.lo: eh_throw.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n eh_throw.o: eh_throw.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n guard.lo: guard.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n guard.o: guard.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n atexit_thread.lo: atexit_thread.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n atexit_thread.o: atexit_thread.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n nested_exception.lo: nested_exception.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n nested_exception.o: nested_exception.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+new_handler.lo: new_handler.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+new_handler.o: new_handler.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+new_op.lo: new_op.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+new_op.o: new_op.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+new_opnt.lo: new_opnt.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+new_opnt.o: new_opnt.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually"}, {"sha": "eb13f1ea9efd6d6f56f5e45d17337657279de98c", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -787,31 +787,51 @@ cp-demangle.lo: cp-demangle.c\n cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n-# Use special rules for the C++0x sources so that the proper flags are passed.\n+# Use special rules for the C++11 sources so that the proper flags are passed.\n eh_ptr.lo: eh_ptr.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n eh_ptr.o: eh_ptr.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+eh_terminate.lo: eh_terminate.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+eh_terminate.o: eh_terminate.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n eh_throw.lo: eh_throw.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n eh_throw.o: eh_throw.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n guard.lo: guard.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n guard.o: guard.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n atexit_thread.lo: atexit_thread.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n atexit_thread.o: atexit_thread.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n nested_exception.lo: nested_exception.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n nested_exception.o: nested_exception.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+new_handler.lo: new_handler.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+new_handler.o: new_handler.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+new_op.lo: new_op.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+new_op.o: new_op.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+new_opnt.lo: new_opnt.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+new_opnt.o: new_opnt.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n install-stdHEADERS: $(std_HEADERS)\n \t@$(NORMAL_INSTALL)"}, {"sha": "bc38e1d201d2627895c4591fb2264b89bbe677f7", "filename": "libstdc++-v3/libsupc++/eh_terminate.cc", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -45,7 +45,7 @@ __cxxabiv1::__terminate (std::terminate_handler handler) throw ()\n void\n std::terminate () throw()\n {\n-  __terminate (__terminate_handler);\n+  __terminate (get_terminate ());\n }\n \n void\n@@ -58,21 +58,37 @@ __cxxabiv1::__unexpected (std::unexpected_handler handler)\n void\n std::unexpected ()\n {\n-  __unexpected (__unexpected_handler);\n+  __unexpected (get_unexpected ());\n }\n \n std::terminate_handler\n std::set_terminate (std::terminate_handler func) throw()\n {\n-  std::terminate_handler old = __terminate_handler;\n-  __terminate_handler = func;\n+  std::terminate_handler old;\n+  __atomic_exchange (&__terminate_handler, &func, &old, __ATOMIC_ACQ_REL);\n   return old;\n }\n \n+std::terminate_handler\n+std::get_terminate () noexcept\n+{\n+  std::terminate_handler func;\n+  __atomic_load (&__terminate_handler, &func, __ATOMIC_ACQUIRE);\n+  return func;\n+}\n+\n std::unexpected_handler\n std::set_unexpected (std::unexpected_handler func) throw()\n {\n-  std::unexpected_handler old = __unexpected_handler;\n-  __unexpected_handler = func;\n+  std::unexpected_handler old;\n+  __atomic_exchange (&__unexpected_handler, &func, &old, __ATOMIC_ACQ_REL);\n   return old;\n }\n+\n+std::unexpected_handler\n+std::get_unexpected () noexcept\n+{\n+  std::unexpected_handler func;\n+  __atomic_load (&__unexpected_handler, &func, __ATOMIC_ACQUIRE);\n+  return func;\n+}"}, {"sha": "6bd97706a83f6d09ab3e7af0f30a2baa67282ef6", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -92,13 +92,23 @@ namespace std\n   /// Takes a new handler function as an argument, returns the old function.\n   terminate_handler set_terminate(terminate_handler) _GLIBCXX_USE_NOEXCEPT;\n \n+#if __cplusplus >= 201103L\n+  /// Return the current terminate handler.\n+  terminate_handler get_terminate() noexcept;\n+#endif\n+\n   /** The runtime will call this function if %exception handling must be\n    *  abandoned for any reason.  It can also be called by the user.  */\n   void terminate() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__noreturn__));\n \n   /// Takes a new handler function as an argument, returns the old function.\n   unexpected_handler set_unexpected(unexpected_handler) _GLIBCXX_USE_NOEXCEPT;\n \n+#if __cplusplus >= 201103L\n+  /// Return the current unexpected handler.\n+  unexpected_handler get_unexpected() noexcept;\n+#endif\n+\n   /** The runtime will call this function if an %exception is thrown which\n    *  violates the function's %exception specification.  */\n   void unexpected() __attribute__ ((__noreturn__));"}, {"sha": "e3f0f7796f85c8290548c250a7a3e3d36f165cf5", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -75,6 +75,11 @@ namespace std\n   /// Takes a replacement handler as the argument, returns the\n   /// previous handler.\n   new_handler set_new_handler(new_handler) throw();\n+\n+#if __cplusplus >= 201103L\n+  /// Return the current new handler.\n+  new_handler get_new_handler() noexcept;\n+#endif\n } // namespace std\n \n //@{"}, {"sha": "2f6bb5e46c196391cba28a248760fb82a69c42b6", "filename": "libstdc++-v3/libsupc++/new_handler.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -28,12 +28,24 @@\n const std::nothrow_t std::nothrow = { };\n \n using std::new_handler;\n-new_handler __new_handler;\n+namespace\n+{\n+  new_handler __new_handler;\n+}\n \n new_handler\n std::set_new_handler (new_handler handler) throw()\n {\n-  new_handler prev_handler = __new_handler;\n-  __new_handler = handler;\n+  new_handler prev_handler;\n+  __atomic_exchange (&__new_handler, &handler, &prev_handler,\n+\t\t     __ATOMIC_ACQ_REL);\n   return prev_handler;\n }\n+\n+new_handler\n+std::get_new_handler () noexcept\n+{\n+  new_handler handler;\n+  __atomic_load (&__new_handler, &handler, __ATOMIC_ACQUIRE);\n+  return handler;\n+}"}, {"sha": "903b347045c597d809203d6b353737c23679fe06", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -38,8 +38,6 @@ using std::malloc;\n extern \"C\" void *malloc (std::size_t);\n #endif\n \n-extern new_handler __new_handler;\n-\n _GLIBCXX_WEAK_DEFINITION void *\n operator new (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\n {\n@@ -51,7 +49,7 @@ operator new (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\n   p = (void *) malloc (sz);\n   while (p == 0)\n     {\n-      new_handler handler = __new_handler;\n+      new_handler handler = std::get_new_handler ();\n       if (! handler)\n \t_GLIBCXX_THROW_OR_ABORT(bad_alloc());\n       handler ();"}, {"sha": "d72feffa213e7c8866a62ee18493542f4730dd32", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -30,7 +30,6 @@ using std::new_handler;\n using std::bad_alloc;\n \n extern \"C\" void *malloc (std::size_t);\n-extern new_handler __new_handler;\n \n _GLIBCXX_WEAK_DEFINITION void *\n operator new (std::size_t sz, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n@@ -43,7 +42,7 @@ operator new (std::size_t sz, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   p = (void *) malloc (sz);\n   while (p == 0)\n     {\n-      new_handler handler = __new_handler;\n+      new_handler handler = std::get_new_handler ();\n       if (! handler)\n \treturn 0;\n       __try"}, {"sha": "acbd8327e800e51d815720cd0a17122bfa7ed148", "filename": "libstdc++-v3/testsuite/18_support/headers/exception/synopsis.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fexception%2Fsynopsis.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n \n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n //\n@@ -25,10 +26,12 @@ namespace std {\n \n   typedef void (*unexpected_handler)();\n   unexpected_handler set_unexpected(unexpected_handler  f ) throw();\n+  unexpected_handler get_unexpected() noexcept;\n   void unexpected();\n \n   typedef void (*terminate_handler)();\n   terminate_handler set_terminate(terminate_handler  f ) throw();\n+  terminate_handler get_terminate() noexcept;\n   void terminate() throw();\n \n   bool uncaught_exception() throw();"}, {"sha": "8ce8992947aa46a57b7d679774fecba4306b518d", "filename": "libstdc++-v3/testsuite/18_support/headers/new/synopsis.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n \n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n //\n@@ -25,6 +26,7 @@ namespace std {\n   extern const nothrow_t nothrow;\n   typedef void (*new_handler)();\n   new_handler set_new_handler(new_handler new_p) throw();\n+  new_handler get_new_handler() noexcept;\n }\n \n void* operator new(std::size_t size) throw(std::bad_alloc);"}, {"sha": "97cb61e05773da9970be4b2abae1d62f74600fb7", "filename": "libstdc++-v3/testsuite/18_support/new_handler.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_handler.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2013 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// 18.6.2 Storage allocation errors\n+\n+#include <new>\n+#include <testsuite_hooks.h>\n+\n+void handler() { throw std::bad_alloc(); }\n+\n+void test01()\n+{\n+  auto prev = std::set_new_handler(handler);\n+  VERIFY( prev == nullptr );\n+  auto curr = std::get_new_handler();\n+  VERIFY( curr == handler );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f3112b19fdb6ed38f1bbcc34545327e18efe0bdf", "filename": "libstdc++-v3/testsuite/18_support/terminate_handler.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fterminate_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fterminate_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fterminate_handler.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2013 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// 18.8.3 Abnormal termination\n+\n+#include <exception>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+void handler() { std::abort(); }\n+\n+void test01()\n+{\n+  auto prev = std::set_terminate(handler);\n+  VERIFY( prev != handler );\n+  auto curr = std::get_terminate();\n+  VERIFY( curr == handler );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f5a925012893014b05edc58a81d9a36db6ed3e36", "filename": "libstdc++-v3/testsuite/18_support/unexpected_handler.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Funexpected_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Funexpected_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Funexpected_handler.cc?ref=dca77a8a1b68f55e5ff3094cba3bf9ce5754a4b2", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2013 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// D.11 Violating exception-specifications\n+\n+#include <exception>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+void handler() { std::abort(); }\n+\n+void test01()\n+{\n+  auto prev = std::set_unexpected(handler);\n+  VERIFY( prev != handler );\n+  auto curr = std::get_unexpected();\n+  VERIFY( curr == handler );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}