{"sha": "79ce98bcefbcd42548dc596316c27b162cabb610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljZTk4YmNlZmJjZDQyNTQ4ZGM1OTYzMTZjMjdiMTYyY2FiYjYxMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-05-03T18:03:42Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-05-03T18:03:42Z"}, "message": "re PR c/70859 (Bad column number in type-generic function errors)\n\n\tPR c/70859\n\t* input.c (expansion_point_location): New function.\n\t* input.h (expansion_point_location): Declare.\n\n\t* c-common.c (builtin_function_validate_nargs): Add location\n\tparameter.  Use it.\n\t(check_builtin_function_arguments): Add location and arguments\n\tparameters.  Use them.\n\t* c-common.h (check_builtin_function_arguments): Update declaration.\n\n\t* c-typeck.c (build_function_call_vec): Pass LOC and ARG_LOC down to\n\tcheck_builtin_function_arguments.\n\n\t* call.c (build_cxx_call): Pass location and vNULL down to\n\tcheck_builtin_function_arguments.\n\n\t* gcc.dg/pr70859.c: New test.\n\t* gcc.dg/pr70859-2.c: New test.\n\nFrom-SVN: r235832", "tree": {"sha": "1356923e14f6cfb6e6e6d80ac03712659ba41aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1356923e14f6cfb6e6e6d80ac03712659ba41aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ce98bcefbcd42548dc596316c27b162cabb610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ce98bcefbcd42548dc596316c27b162cabb610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ce98bcefbcd42548dc596316c27b162cabb610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ce98bcefbcd42548dc596316c27b162cabb610/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "402e89f5986220a96898381cc32f7efe76bd092c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402e89f5986220a96898381cc32f7efe76bd092c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402e89f5986220a96898381cc32f7efe76bd092c"}], "stats": {"total": 213, "additions": 177, "deletions": 36}, "files": [{"sha": "69db5dbee7bbd7e7d0507a3446b295e1b6346ba8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70859\n+\t* input.c (expansion_point_location): New function.\n+\t* input.h (expansion_point_location): Declare.\n+\n 2016-05-03  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* dwarf2out.c (resolve_args_picking_1): Replace the frame_offset"}, {"sha": "09a72e39e864b7f93cb10eaca6380a3357ac98ba", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -1,3 +1,12 @@\n+2016-05-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70859\n+\t* c-common.c (builtin_function_validate_nargs): Add location\n+\tparameter.  Use it.\n+\t(check_builtin_function_arguments): Add location and arguments\n+\tparameters.  Use them.\n+\t* c-common.h (check_builtin_function_arguments): Update declaration.\n+\n 2016-05-03  Richard Biener  <rguenther@suse.de>\n \n \t* cilk.c (cilk_gimplify_call_params_in_spawned_fn): Do not"}, {"sha": "63a18c866ebd3f270b9a97f667d99d670d092e34", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -9797,31 +9797,39 @@ check_function_arguments_recurse (void (*callback)\n /* Checks for a builtin function FNDECL that the number of arguments\n    NARGS against the required number REQUIRED and issues an error if\n    there is a mismatch.  Returns true if the number of arguments is\n-   correct, otherwise false.  */\n+   correct, otherwise false.  LOC is the location of FNDECL.  */\n \n static bool\n-builtin_function_validate_nargs (tree fndecl, int nargs, int required)\n+builtin_function_validate_nargs (location_t loc, tree fndecl, int nargs,\n+\t\t\t\t int required)\n {\n   if (nargs < required)\n     {\n-      error_at (input_location,\n-\t\t\"not enough arguments to function %qE\", fndecl);\n+      error_at (loc, \"not enough arguments to function %qE\", fndecl);\n       return false;\n     }\n   else if (nargs > required)\n     {\n-      error_at (input_location,\n-\t\t\"too many arguments to function %qE\", fndecl);\n+      error_at (loc, \"too many arguments to function %qE\", fndecl);\n       return false;\n     }\n   return true;\n }\n \n+/* Helper macro for check_builtin_function_arguments.  */\n+#define ARG_LOCATION(N)\t\t\t\t\t\\\n+  (arg_loc.is_empty ()\t\t\t\t\t\\\n+   ? EXPR_LOC_OR_LOC (args[(N)], input_location)\t\\\n+   : expansion_point_location (arg_loc[(N)]))\n+\n /* Verifies the NARGS arguments ARGS to the builtin function FNDECL.\n-   Returns false if there was an error, otherwise true.  */\n+   Returns false if there was an error, otherwise true.  LOC is the\n+   location of the function; ARG_LOC is a vector of locations of the\n+   arguments.  */\n \n bool\n-check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n+check_builtin_function_arguments (location_t loc, vec<location_t> arg_loc,\n+\t\t\t\t  tree fndecl, int nargs, tree *args)\n {\n   if (!DECL_BUILT_IN (fndecl)\n       || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n@@ -9843,34 +9851,34 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n \t/* The maximum alignment in bits corresponding to the same\n \t   maximum in bytes enforced in check_user_alignment().  */\n \tunsigned maxalign = (UINT_MAX >> 1) + 1;\n-  \n+\n \t/* Reject invalid alignments.  */\n \tif (align < BITS_PER_UNIT || maxalign < align)\n \t  {\n-\t    error_at (EXPR_LOC_OR_LOC (args[1], input_location),\n+\t    error_at (ARG_LOCATION (1),\n \t\t      \"second argument to function %qE must be a constant \"\n \t\t      \"integer power of 2 between %qi and %qu bits\",\n \t\t      fndecl, BITS_PER_UNIT, maxalign);\n \t    return false;\n \t  }\n-      return true;\n+\treturn true;\n       }\n \n     case BUILT_IN_CONSTANT_P:\n-      return builtin_function_validate_nargs (fndecl, nargs, 1);\n+      return builtin_function_validate_nargs (loc, fndecl, nargs, 1);\n \n     case BUILT_IN_ISFINITE:\n     case BUILT_IN_ISINF:\n     case BUILT_IN_ISINF_SIGN:\n     case BUILT_IN_ISNAN:\n     case BUILT_IN_ISNORMAL:\n     case BUILT_IN_SIGNBIT:\n-      if (builtin_function_validate_nargs (fndecl, nargs, 1))\n+      if (builtin_function_validate_nargs (loc, fndecl, nargs, 1))\n \t{\n \t  if (TREE_CODE (TREE_TYPE (args[0])) != REAL_TYPE)\n \t    {\n-\t      error (\"non-floating-point argument in call to \"\n-\t\t     \"function %qE\", fndecl);\n+\t      error_at (ARG_LOCATION (0), \"non-floating-point argument in \"\n+\t\t\t\"call to function %qE\", fndecl);\n \t      return false;\n \t    }\n \t  return true;\n@@ -9883,7 +9891,7 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n     case BUILT_IN_ISLESSEQUAL:\n     case BUILT_IN_ISLESSGREATER:\n     case BUILT_IN_ISUNORDERED:\n-      if (builtin_function_validate_nargs (fndecl, nargs, 2))\n+      if (builtin_function_validate_nargs (loc, fndecl, nargs, 2))\n \t{\n \t  enum tree_code code0, code1;\n \t  code0 = TREE_CODE (TREE_TYPE (args[0]));\n@@ -9892,43 +9900,42 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n \t\t|| (code0 == REAL_TYPE && code1 == INTEGER_TYPE)\n \t\t|| (code0 == INTEGER_TYPE && code1 == REAL_TYPE)))\n \t    {\n-\t      error (\"non-floating-point arguments in call to \"\n-\t\t     \"function %qE\", fndecl);\n+\t      error_at (loc, \"non-floating-point arguments in call to \"\n+\t\t\t\"function %qE\", fndecl);\n \t      return false;\n \t    }\n \t  return true;\n \t}\n       return false;\n \n     case BUILT_IN_FPCLASSIFY:\n-      if (builtin_function_validate_nargs (fndecl, nargs, 6))\n+      if (builtin_function_validate_nargs (loc, fndecl, nargs, 6))\n \t{\n-\t  unsigned i;\n-\n-\t  for (i=0; i<5; i++)\n+\t  for (unsigned int i = 0; i < 5; i++)\n \t    if (TREE_CODE (args[i]) != INTEGER_CST)\n \t      {\n-\t\terror (\"non-const integer argument %u in call to function %qE\",\n-\t\t       i+1, fndecl);\n+\t\terror_at (ARG_LOCATION (i), \"non-const integer argument %u in \"\n+\t\t\t  \"call to function %qE\", i + 1, fndecl);\n \t\treturn false;\n \t      }\n \n \t  if (TREE_CODE (TREE_TYPE (args[5])) != REAL_TYPE)\n \t    {\n-\t      error (\"non-floating-point argument in call to function %qE\",\n-\t\t     fndecl);\n+\t      error_at (ARG_LOCATION (5), \"non-floating-point argument in \"\n+\t\t\t\"call to function %qE\", fndecl);\n \t      return false;\n \t    }\n \t  return true;\n \t}\n       return false;\n \n     case BUILT_IN_ASSUME_ALIGNED:\n-      if (builtin_function_validate_nargs (fndecl, nargs, 2 + (nargs > 2)))\n+      if (builtin_function_validate_nargs (loc, fndecl, nargs, 2 + (nargs > 2)))\n \t{\n \t  if (nargs >= 3 && TREE_CODE (TREE_TYPE (args[2])) != INTEGER_TYPE)\n \t    {\n-\t      error (\"non-integer argument 3 in call to function %qE\", fndecl);\n+\t      error_at (ARG_LOCATION (2), \"non-integer argument 3 in call to \"\n+\t\t\t\"function %qE\", fndecl);\n \t      return false;\n \t    }\n \t  return true;\n@@ -9938,21 +9945,21 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n     case BUILT_IN_ADD_OVERFLOW:\n     case BUILT_IN_SUB_OVERFLOW:\n     case BUILT_IN_MUL_OVERFLOW:\n-      if (builtin_function_validate_nargs (fndecl, nargs, 3))\n+      if (builtin_function_validate_nargs (loc, fndecl, nargs, 3))\n \t{\n \t  unsigned i;\n \t  for (i = 0; i < 2; i++)\n \t    if (!INTEGRAL_TYPE_P (TREE_TYPE (args[i])))\n \t      {\n-\t\terror (\"argument %u in call to function %qE does not have \"\n-\t\t       \"integral type\", i + 1, fndecl);\n+\t\terror_at (ARG_LOCATION (i), \"argument %u in call to function \"\n+\t\t\t  \"%qE does not have integral type\", i + 1, fndecl);\n \t\treturn false;\n \t      }\n \t  if (TREE_CODE (TREE_TYPE (args[2])) != POINTER_TYPE\n \t      || TREE_CODE (TREE_TYPE (TREE_TYPE (args[2]))) != INTEGER_TYPE)\n \t    {\n-\t      error (\"argument 3 in call to function %qE does not have \"\n-\t\t     \"pointer to integer type\", fndecl);\n+\t      error_at (ARG_LOCATION (2), \"argument 3 in call to function %qE \"\n+\t\t\t\"does not have pointer to integer type\", fndecl);\n \t      return false;\n \t    }\n \t  return true;"}, {"sha": "4454d0847248f1fde24b08d18ecbc1e08ee7fa00", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -788,7 +788,8 @@ extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t       unsigned HOST_WIDE_INT),\n \t\t\t\t\t      void *, tree,\n \t\t\t\t\t      unsigned HOST_WIDE_INT);\n-extern bool check_builtin_function_arguments (tree, int, tree *);\n+extern bool check_builtin_function_arguments (location_t, vec<location_t>,\n+\t\t\t\t\t      tree, int, tree *);\n extern void check_function_format (tree, int, tree *);\n extern tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "8ac13e31f424bdd52a8b9d0a0608d6db830ae70c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70859\n+\t* c-typeck.c (build_function_call_vec): Pass LOC and ARG_LOC down to\n+\tcheck_builtin_function_arguments.\n+\n 2016-05-03  Richard Biener  <rguenther@suse.de>\n \n \t* Make-lang.in (cc1-checksum.c): For stage-final re-use"}, {"sha": "204702e505e17fc2555e3e4c8b6d910a09e7da24", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -3046,7 +3046,8 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n   if (fundecl\n       && DECL_BUILT_IN (fundecl)\n       && DECL_BUILT_IN_CLASS (fundecl) == BUILT_IN_NORMAL\n-      && !check_builtin_function_arguments (fundecl, nargs, argarray))\n+      && !check_builtin_function_arguments (loc, arg_loc, fundecl, nargs,\n+\t\t\t\t\t    argarray))\n     return error_mark_node;\n \n   /* Check that the arguments to the function are valid.  */"}, {"sha": "3bc37e1ba70d6923ebddc31b0be3192ec0d8af3b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70859\n+\t* call.c (build_cxx_call): Pass location and vNULL down to\n+\tcheck_builtin_function_arguments.\n+\n 2016-05-03  Richard Biener  <rguenther@suse.de>\n \n \t* Make-lang.in (cc1plus-checksum.c): For stage-final re-use"}, {"sha": "e9ebdbc171d8e59a8cf3f6ab4399e64b49313cc3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -7790,7 +7790,8 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n       for (i = 0; i < nargs; i++)\n \targarray[i] = fold_non_dependent_expr (argarray[i]);\n \n-      if (!check_builtin_function_arguments (fndecl, nargs, argarray))\n+      if (!check_builtin_function_arguments (EXPR_LOCATION (fn), vNULL, fndecl,\n+\t\t\t\t\t     nargs, argarray))\n \treturn error_mark_node;\n     }\n "}, {"sha": "61b1e4477fc3cd0ed1e80b584983d240ebcd905d", "filename": "gcc/input.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -789,6 +789,16 @@ expansion_point_location_if_in_system_header (source_location location)\n   return location;\n }\n \n+/* If LOCATION is a virtual location for a token coming from the expansion\n+   of a macro, unwind to the location of the expansion point of the macro.  */\n+\n+source_location\n+expansion_point_location (source_location location)\n+{\n+  return linemap_resolve_location (line_table, location,\n+\t\t\t\t   LRK_MACRO_EXPANSION_POINT, NULL);\n+}\n+\n #define ONE_K 1024\n #define ONE_M (ONE_K * ONE_K)\n "}, {"sha": "ae4fecfe11ce69ebeb320ce832ab6d8924eddf5d", "filename": "gcc/input.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -42,6 +42,7 @@ extern const char *location_get_source_line (const char *file_path, int line,\n \t\t\t\t\t     int *line_size);\n extern expanded_location expand_location_to_spelling_point (source_location);\n extern source_location expansion_point_location_if_in_system_header (source_location);\n+extern source_location expansion_point_location (source_location);\n \n /* Historically GCC used location_t, while cpp used source_location.\n    This could be removed but it hardly seems worth the effort.  */"}, {"sha": "59e5be84d8c62cb2326a363b9a1f4016637fbe52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70859\n+\t* gcc.dg/pr70859.c: New test.\n+\t* gcc.dg/pr70859-2.c: New test.\n+\n 2016-05-03  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gnat.dg/debug5.adb: New testcase."}, {"sha": "4817852a955f589697ed16d385a22bcadc8c1b92", "filename": "gcc/testsuite/gcc.dg/pr70859-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70859-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70859-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70859-2.c?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/70859 */\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+#define MAX __SIZE_MAX__\n+#define MAX2 SIZE_MAX\n+#define FIVE 5\n+\n+static void *p;\n+\n+void\n+fn0 (int n)\n+{\n+  p = __builtin_alloca_with_align (n, SIZE_MAX); /* { dg-error \"39:must be a constant integer\" } */\n+  p = __builtin_alloca_with_align (n, MAX); /* { dg-error \"39:must be a constant integer\" } */\n+  p = __builtin_alloca_with_align (n, MAX2); /* { dg-error \"39:must be a constant integer\" } */\n+  p = __builtin_alloca_with_align (n, FIVE); /* { dg-error \"39:must be a constant integer\" } */\n+}"}, {"sha": "0a3c8437c66d3350592f9160faf60f0802d0c3ce", "filename": "gcc/testsuite/gcc.dg/pr70859.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70859.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ce98bcefbcd42548dc596316c27b162cabb610/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70859.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70859.c?ref=79ce98bcefbcd42548dc596316c27b162cabb610", "patch": "@@ -0,0 +1,69 @@\n+/* PR c/70859 */\n+/* { dg-do compile } */\n+\n+static void *p;\n+static double *d;\n+static int r;\n+__extension__ static _Bool b;\n+\n+void\n+fn0 (int n)\n+{\n+  p = __builtin_alloca_with_align (n, 6); /* { dg-error \"39:must be a constant integer\" } */\n+\n+  r += __builtin_isfinite (0); /* { dg-error \"28:non-floating-point argument in call\" } */\n+  r += __builtin_isinf (0); /* { dg-error \"25:non-floating-point argument in call\" } */\n+  r += __builtin_isinf_sign (0); /* { dg-error \"30:non-floating-point argument in call\" } */\n+  r += __builtin_isnan (0); /* { dg-error \"25:non-floating-point argument in call\" } */\n+  r += __builtin_isnormal (0); /* { dg-error \"28:non-floating-point argument in call\" } */\n+  r += __builtin_signbit (0); /* { dg-error \"27:non-floating-point argument in call\" } */\n+\n+  r += __builtin_isgreater (0, 0); /* { dg-error \"8:non-floating-point arguments in call to function\" } */\n+  r += __builtin_isgreaterequal (0, 0); /* { dg-error \"8:non-floating-point arguments in call to function\" } */\n+  r += __builtin_isless (0, 0); /* { dg-error \"8:non-floating-point arguments in call to function\" } */\n+  r += __builtin_islessequal (0, 0); /* { dg-error \"8:non-floating-point arguments in call to function\" } */\n+  r += __builtin_islessgreater (0, 0); /* { dg-error \"8:non-floating-point arguments in call to function\" } */\n+  r += __builtin_isunordered (0, 0); /* { dg-error \"8:non-floating-point arguments in call to function\" } */\n+\n+  r += __builtin_fpclassify (1, 2, n, 4, 5, n); /* { dg-error \"36:non-const integer argument 3 in call\" } */\n+  r += __builtin_fpclassify (1, 2, 3, 4, 5, 6); /* { dg-error \"45:non-floating-point argument in call\" } */\n+\n+  d = __builtin_assume_aligned (p, n, p); /* { dg-error \"39:non-integer argument 3 in call\" } */\n+\n+  b = __builtin_add_overflow (n, *d, &r); /* { dg-error \"34:argument 2 in call to function\" } */\n+  b = __builtin_add_overflow (n, 5, d); /* { dg-error \"37:argument 3 in call\" } */\n+  b = __builtin_sub_overflow (n, *d, &r); /* { dg-error \"34:argument 2 in call to function\" } */\n+  b = __builtin_sub_overflow (n, 5, d); /* { dg-error \"37:argument 3 in call\" } */\n+  b = __builtin_mul_overflow (n, *d, &r); /* { dg-error \"34:argument 2 in call to function\" } */\n+  b = __builtin_mul_overflow (n, 5, d); /* { dg-error \"37:argument 3 in call\" } */\n+}\n+\n+int\n+fn1 (void)\n+{\n+  if (__builtin_constant_p ()) /* { dg-error \"7:not enough\" } */\n+    return 0;\n+  if (__builtin_constant_p (1, 2)) /* { dg-error \"7:too many\" } */\n+    return 1;\n+  if (__builtin_isfinite ()) /* { dg-error \"7:not enough\" } */\n+    return 3;\n+  if (__builtin_isfinite (1, 2)) /* { dg-error \"7:too many\" } */\n+    return 4;\n+  if (__builtin_isless (0)) /* { dg-error \"7:not enough\" } */\n+    return 5;\n+  if (__builtin_isless (1, 2, 3)) /* { dg-error \"7:too many\" } */\n+    return 6;\n+  if (__builtin_fpclassify (1, 2, 3, 4, 5)) /* { dg-error \"7:not enough\" } */\n+    return 7;\n+  if (__builtin_fpclassify (1, 2, 3, 4, 5, r, 6)) /* { dg-error \"7:too many\" } */\n+    return 8;\n+  if (__builtin_assume_aligned (p)) /* { dg-error \"7:too few\" } */\n+    return 9;\n+  if (__builtin_assume_aligned (p, r, p, p)) /* { dg-error \"7:too many\" } */\n+    return 10;\n+  if (__builtin_add_overflow ()) /* { dg-error \"7:not enough\" } */\n+    return 11;\n+  if (__builtin_add_overflow (1, 2, 3, &r)) /* { dg-error \"7:too many\" } */\n+    return 12;\n+  return -1;\n+}"}]}