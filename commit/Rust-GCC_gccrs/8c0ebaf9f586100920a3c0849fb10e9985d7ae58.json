{"sha": "8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "node_id": "C_kwDOANBUbNoAKDhjMGViYWY5ZjU4NjEwMDkyMGEzYzA4NDlmYjEwZTk5ODVkN2FlNTg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-07T12:07:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-07T13:03:36Z"}, "message": "ipa/104303 - miscompilation of gnatmake\n\nModref attempts to track memory accesses relative to the base pointers\nwhich are parameters of functions.\nIf it fails, it still makes difference between unknown memory access and\nglobal memory access.  The second makes it possible to disambiguate with\nmemory that is not accessible from outside world (i.e. everything that does\nnot escape from the caller function).  This is useful so we do not punt\nwhen unknown function is called.\n\nThe added ref_may_access_global_memory_p ends up using\nptr_deref_may_alias_global_p which does not consider escaped automatic\nvariables as global.  For modref those are still global since they\ncan be accessed from functions called.\n\nThe following adds a flag to the *_global_p APIs indicating whether\nescaped local memory should be considered as global or not and\nremoves ref_may_access_global_memory_p in favor of using\nref_may_alias_global_p with the flag set to true.\n\n2022-04-07  Richard Biener  <rguenther@suse.de>\n\t    Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/104303\n\t* tree-ssa-alias.h (ptr_deref_may_alias_global_p,\n\tref_may_alias_global_p, ref_may_alias_global_p,\n\tstmt_may_clobber_global_p, pt_solution_includes_global): Add\n\tbool parameters indicating whether escaped locals should be\n\tconsidered global.\n\t* tree-ssa-structalias.cc (pt_solution_includes_global):\n\tWhen the new escaped_nonlocal_p flag is true also consider\n\tpt->vars_contains_escaped.\n\t* tree-ssa-alias.cc (ptr_deref_may_alias_global_p):\n\tPass down new escaped_nonlocal_p flag.\n\t(ref_may_alias_global_p): Likewise.\n\t(stmt_may_clobber_global_p): Likewise.\n\t(ref_may_alias_global_p_1): Likewise.  For decls also\n\tquery the escaped solution if true.\n\t(ref_may_access_global_memory_p): Remove.\n\t(modref_may_conflict): Use ref_may_alias_global_p with\n\tescaped locals considered global.\n\t(ref_maybe_used_by_stmt_p): Adjust.\n\t* ipa-fnsummary.cc (points_to_local_or_readonly_memory_p):\n\tLikewise.\n\t* tree-ssa-dse.cc (dse_classify_store): Likewise.\n\t* trans-mem.cc (thread_private_new_memory): Likewise, but\n\tconsider escaped locals global.\n\t* tree-ssa-dce.cc (mark_stmt_if_obviously_necessary): Likewise.\n\n\t* gnat.dg/concat5.adb: New.\n\t* gnat.dg/concat5_pkg1.adb: Likewise.\n\t* gnat.dg/concat5_pkg1.ads: Likewise.\n\t* gnat.dg/concat5_pkg2.adb: Likewise.\n\t* gnat.dg/concat5_pkg2.ads: Likewise.", "tree": {"sha": "6d15d0cf669d155035d261647744f8eadb7a8d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d15d0cf669d155035d261647744f8eadb7a8d72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b939b19ab454ab2d932ef292bbc557abe4431c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b939b19ab454ab2d932ef292bbc557abe4431c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b939b19ab454ab2d932ef292bbc557abe4431c"}], "stats": {"total": 147, "additions": 93, "deletions": 54}, "files": [{"sha": "b12e7a1124d5132d71799a403e63aea912de2662", "filename": "gcc/ipa-fnsummary.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Fipa-fnsummary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Fipa-fnsummary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.cc?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -2587,7 +2587,7 @@ points_to_local_or_readonly_memory_p (tree t)\n \t  && DECL_BY_REFERENCE (DECL_RESULT (current_function_decl))\n \t  && t == ssa_default_def (cfun, DECL_RESULT (current_function_decl)))\n \treturn true;\n-      return !ptr_deref_may_alias_global_p (t);\n+      return !ptr_deref_may_alias_global_p (t, false);\n     }\n   if (TREE_CODE (t) == ADDR_EXPR)\n     return refs_local_or_readonly_memory_p (TREE_OPERAND (t, 0));"}, {"sha": "fabf24865d60edc75dec4c1e9d7ebc36e25ab065", "filename": "gcc/testsuite/gnat.dg/concat5.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5.adb?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Concat5_Pkg1; use Concat5_Pkg1;\n+\n+procedure Concat5 is\n+begin\n+  Scan (\"-RTS=none\");\n+end;"}, {"sha": "c32f5af314e33d8135c89d1f17f26b824130feb8", "filename": "gcc/testsuite/gnat.dg/concat5_pkg1.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg1.adb?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -0,0 +1,18 @@\n+with Concat5_Pkg2; use Concat5_Pkg2;\n+\n+package body Concat5_Pkg1 is\n+\n+  procedure Make_Failed (S : String);\n+  pragma No_Inline (Make_Failed);\n+\n+  procedure Make_Failed (S : String) is\n+  begin\n+    Compare (S);\n+  end;\n+\n+  procedure Scan (S : String) is\n+  begin\n+    Make_Failed (\"option \" & S & \" should start with '--'\");\n+  end;\n+\n+end Concat5_Pkg1;"}, {"sha": "7f46d87f6e633ea98f5984d4e9f8f85591e287af", "filename": "gcc/testsuite/gnat.dg/concat5_pkg1.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg1.ads?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -0,0 +1,5 @@\n+package Concat5_Pkg1 is\n+\n+  procedure Scan (S : String);\n+\n+end Concat5_Pkg1;"}, {"sha": "98bd38826b2e120a918ca4a1208cf05389caf049", "filename": "gcc/testsuite/gnat.dg/concat5_pkg2.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg2.adb?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -0,0 +1,10 @@\n+package body Concat5_Pkg2 is\n+\n+  procedure Compare (S : String) is\n+  begin\n+    if S /= \"option -RTS=none should start with '--'\" then\n+      raise Program_Error;\n+    end if;\n+  end;\n+\n+end Concat5_Pkg2;"}, {"sha": "2931ffd5d5ac4248f994128d9c1cd06aec9282f6", "filename": "gcc/testsuite/gnat.dg/concat5_pkg2.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat5_pkg2.ads?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -0,0 +1,5 @@\n+package Concat5_Pkg2 is\n+\n+  procedure Compare (S : String);\n+\n+end Concat5_Pkg2;"}, {"sha": "ae2921f808e5f22303cfeaf7657ce34364d82f19", "filename": "gcc/trans-mem.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftrans-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftrans-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.cc?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -1400,7 +1400,7 @@ thread_private_new_memory (basic_block entry_block, tree x)\n   /* Search DEF chain to find the original definition of this address.  */\n   do\n     {\n-      if (ptr_deref_may_alias_global_p (x))\n+      if (ptr_deref_may_alias_global_p (x, true))\n \t{\n \t  /* Address escapes.  This is not thread-private.  */\n \t  retval = mem_non_local;"}, {"sha": "063f1893851cb45e09fdb8cdf1b4c60827abd00c", "filename": "gcc/tree-ssa-alias.cc", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-alias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-alias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.cc?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -210,10 +210,12 @@ dump_alias_stats (FILE *s)\n }\n \n \n-/* Return true, if dereferencing PTR may alias with a global variable.  */\n+/* Return true, if dereferencing PTR may alias with a global variable.\n+   When ESCAPED_LOCAL_P is true escaped local memory is also considered\n+   global.  */\n \n bool\n-ptr_deref_may_alias_global_p (tree ptr)\n+ptr_deref_may_alias_global_p (tree ptr, bool escaped_local_p)\n {\n   struct ptr_info_def *pi;\n \n@@ -230,7 +232,7 @@ ptr_deref_may_alias_global_p (tree ptr)\n     return true;\n \n   /* ???  This does not use TBAA to prune globals ptr may not access.  */\n-  return pt_solution_includes_global (&pi->pt);\n+  return pt_solution_includes_global (&pi->pt, escaped_local_p);\n }\n \n /* Return true if dereferencing PTR may alias DECL.\n@@ -480,37 +482,44 @@ ptrs_compare_unequal (tree ptr1, tree ptr2)\n   return false;\n }\n \n-/* Returns whether reference REF to BASE may refer to global memory.  */\n+/* Returns whether reference REF to BASE may refer to global memory.\n+   When ESCAPED_LOCAL_P is true escaped local memory is also considered\n+   global.  */\n \n static bool\n-ref_may_alias_global_p_1 (tree base)\n+ref_may_alias_global_p_1 (tree base, bool escaped_local_p)\n {\n   if (DECL_P (base))\n-    return is_global_var (base);\n+    return (is_global_var (base)\n+\t    || (escaped_local_p\n+\t\t&& pt_solution_includes (&cfun->gimple_df->escaped, base)));\n   else if (TREE_CODE (base) == MEM_REF\n \t   || TREE_CODE (base) == TARGET_MEM_REF)\n-    return ptr_deref_may_alias_global_p (TREE_OPERAND (base, 0));\n+    return ptr_deref_may_alias_global_p (TREE_OPERAND (base, 0),\n+\t\t\t\t\t escaped_local_p);\n   return true;\n }\n \n bool\n-ref_may_alias_global_p (ao_ref *ref)\n+ref_may_alias_global_p (ao_ref *ref, bool escaped_local_p)\n {\n   tree base = ao_ref_base (ref);\n-  return ref_may_alias_global_p_1 (base);\n+  return ref_may_alias_global_p_1 (base, escaped_local_p);\n }\n \n bool\n-ref_may_alias_global_p (tree ref)\n+ref_may_alias_global_p (tree ref, bool escaped_local_p)\n {\n   tree base = get_base_address (ref);\n-  return ref_may_alias_global_p_1 (base);\n+  return ref_may_alias_global_p_1 (base, escaped_local_p);\n }\n \n-/* Return true whether STMT may clobber global memory.  */\n+/* Return true whether STMT may clobber global memory.\n+   When ESCAPED_LOCAL_P is true escaped local memory is also considered\n+   global.  */\n \n bool\n-stmt_may_clobber_global_p (gimple *stmt)\n+stmt_may_clobber_global_p (gimple *stmt, bool escaped_local_p)\n {\n   tree lhs;\n \n@@ -531,7 +540,7 @@ stmt_may_clobber_global_p (gimple *stmt)\n     case GIMPLE_ASSIGN:\n       lhs = gimple_assign_lhs (stmt);\n       return (TREE_CODE (lhs) != SSA_NAME\n-\t      && ref_may_alias_global_p (lhs));\n+\t      && ref_may_alias_global_p (lhs, escaped_local_p));\n     case GIMPLE_CALL:\n       return true;\n     default:\n@@ -2567,30 +2576,6 @@ refs_output_dependent_p (tree store1, tree store2)\n   return refs_may_alias_p_1 (&r1, &r2, false);\n }\n \n-/* Return ture if REF may access global memory.  */\n-\n-bool\n-ref_may_access_global_memory_p (ao_ref *ref)\n-{\n-  if (!ref->ref)\n-    return true;\n-  tree base = ao_ref_base (ref);\n-  if (TREE_CODE (base) == MEM_REF\n-      || TREE_CODE (base) == TARGET_MEM_REF)\n-    {\n-      if (ptr_deref_may_alias_global_p (TREE_OPERAND (base, 0)))\n-\treturn true;\n-    }\n-  else\n-    {\n-      if (!auto_var_in_fn_p (base, current_function_decl)\n-\t  || pt_solution_includes (&cfun->gimple_df->escaped,\n-\t\t\t\t   base))\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n /* Returns true if and only if REF may alias any access stored in TT.\n    IF TBAA_P is true, use TBAA oracle.  */\n \n@@ -2654,7 +2639,7 @@ modref_may_conflict (const gcall *stmt,\n \t\t{\n \t\t  if (global_memory_ok)\n \t\t    continue;\n-\t\t  if (ref_may_access_global_memory_p (ref))\n+\t\t  if (ref_may_alias_global_p (ref, true))\n \t\t    return true;\n \t\t  global_memory_ok = true;\n \t\t  num_tests++;\n@@ -2990,7 +2975,7 @@ ref_maybe_used_by_stmt_p (gimple *stmt, ao_ref *ref, bool tbaa_p)\n \treturn is_global_var (base);\n       else if (TREE_CODE (base) == MEM_REF\n \t       || TREE_CODE (base) == TARGET_MEM_REF)\n-\treturn ptr_deref_may_alias_global_p (TREE_OPERAND (base, 0));\n+\treturn ptr_deref_may_alias_global_p (TREE_OPERAND (base, 0), false);\n       return false;\n     }\n "}, {"sha": "fa081ab0173003992432341eeee399c33a38d766", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -121,18 +121,18 @@ extern tree ao_ref_alias_ptr_type (ao_ref *);\n extern tree ao_ref_base_alias_ptr_type (ao_ref *);\n extern bool ao_ref_alignment (ao_ref *, unsigned int *,\n \t\t\t      unsigned HOST_WIDE_INT *);\n-extern bool ptr_deref_may_alias_global_p (tree);\n+extern bool ptr_deref_may_alias_global_p (tree, bool);\n extern bool ptr_derefs_may_alias_p (tree, tree);\n extern bool ptrs_compare_unequal (tree, tree);\n-extern bool ref_may_alias_global_p (tree);\n-extern bool ref_may_alias_global_p (ao_ref *);\n+extern bool ref_may_alias_global_p (tree, bool);\n+extern bool ref_may_alias_global_p (ao_ref *, bool);\n extern bool refs_may_alias_p (tree, tree, bool = true);\n extern bool refs_may_alias_p_1 (ao_ref *, ao_ref *, bool);\n extern bool refs_anti_dependent_p (tree, tree);\n extern bool refs_output_dependent_p (tree, tree);\n extern bool ref_maybe_used_by_stmt_p (gimple *, tree, bool = true);\n extern bool ref_maybe_used_by_stmt_p (gimple *, ao_ref *, bool = true);\n-extern bool stmt_may_clobber_global_p (gimple *);\n+extern bool stmt_may_clobber_global_p (gimple *, bool);\n extern bool stmt_may_clobber_ref_p (gimple *, tree, bool = true);\n extern bool stmt_may_clobber_ref_p_1 (gimple *, ao_ref *, bool = true);\n extern bool call_may_clobber_ref_p (gcall *, tree, bool = true);\n@@ -171,7 +171,7 @@ extern void dump_alias_stats (FILE *);\n extern unsigned int compute_may_aliases (void);\n extern bool pt_solution_empty_p (const pt_solution *);\n extern bool pt_solution_singleton_or_null_p (struct pt_solution *, unsigned *);\n-extern bool pt_solution_includes_global (struct pt_solution *);\n+extern bool pt_solution_includes_global (struct pt_solution *, bool);\n extern bool pt_solution_includes (struct pt_solution *, const_tree);\n extern bool pt_solutions_intersect (struct pt_solution *, struct pt_solution *);\n extern void pt_solution_reset (struct pt_solution *);"}, {"sha": "34ce8abe33a0466b8ab06e32e29d18569afa3223", "filename": "gcc/tree-ssa-dce.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-dce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-dce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.cc?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -315,7 +315,7 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n     }\n \n   if ((gimple_vdef (stmt) && keep_all_vdefs_p ())\n-      || stmt_may_clobber_global_p (stmt))\n+      || stmt_may_clobber_global_p (stmt, true))\n     {\n       mark_stmt_necessary (stmt, true);\n       return;"}, {"sha": "881a2d0f98dba81ab4c13af357ca7ec6a3916e40", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -1030,7 +1030,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t just pretend the stmt makes itself dead.  Otherwise fail.  */\n       if (defs.is_empty ())\n \t{\n-\t  if (ref_may_alias_global_p (ref))\n+\t  if (ref_may_alias_global_p (ref, false))\n \t    return DSE_STORE_LIVE;\n \n \t  if (by_clobber_p)\n@@ -1062,7 +1062,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t    {\n \t      /* But if the store is to global memory it is definitely\n \t\t not dead.  */\n-\t      if (ref_may_alias_global_p (ref))\n+\t      if (ref_may_alias_global_p (ref, false))\n \t\treturn DSE_STORE_LIVE;\n \t      defs.unordered_remove (i);\n \t    }"}, {"sha": "581bdcf565243a010ae12b750c196b72ab0cc4e3", "filename": "gcc/tree-ssa-structalias.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-structalias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0ebaf9f586100920a3c0849fb10e9985d7ae58/gcc%2Ftree-ssa-structalias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.cc?ref=8c0ebaf9f586100920a3c0849fb10e9985d7ae58", "patch": "@@ -6995,10 +6995,12 @@ pt_solution_singleton_or_null_p (struct pt_solution *pt, unsigned *uid)\n   return true;\n }\n \n-/* Return true if the points-to solution *PT includes global memory.  */\n+/* Return true if the points-to solution *PT includes global memory.\n+   If ESCAPED_LOCAL_P is true then escaped local variables are also\n+   considered global.  */\n \n bool\n-pt_solution_includes_global (struct pt_solution *pt)\n+pt_solution_includes_global (struct pt_solution *pt, bool escaped_local_p)\n {\n   if (pt->anything\n       || pt->nonlocal\n@@ -7009,12 +7011,17 @@ pt_solution_includes_global (struct pt_solution *pt)\n       || pt->vars_contains_escaped_heap)\n     return true;\n \n+  if (escaped_local_p && pt->vars_contains_escaped)\n+    return true;\n+\n   /* 'escaped' is also a placeholder so we have to look into it.  */\n   if (pt->escaped)\n-    return pt_solution_includes_global (&cfun->gimple_df->escaped);\n+    return pt_solution_includes_global (&cfun->gimple_df->escaped,\n+\t\t\t\t\tescaped_local_p);\n \n   if (pt->ipa_escaped)\n-    return pt_solution_includes_global (&ipa_escaped_pt);\n+    return pt_solution_includes_global (&ipa_escaped_pt,\n+\t\t\t\t\tescaped_local_p);\n \n   return false;\n }"}]}