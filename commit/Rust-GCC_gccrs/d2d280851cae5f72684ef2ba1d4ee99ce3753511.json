{"sha": "d2d280851cae5f72684ef2ba1d4ee99ce3753511", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkMjgwODUxY2FlNWY3MjY4NGVmMmJhMWQ0ZWU5OWNlMzc1MzUxMQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-04-13T01:13:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-13T01:13:07Z"}, "message": "pa.c: Remove space register specification in memory addresses...\n\n        * pa.c: Remove space register specification in memory addresses,\n        except where it is actually needed.\n        * pa.md, pa.h, ee.asm, ee_fp.asm, lib2funcs.asm: Likewise.\n\nFrom-SVN: r26398", "tree": {"sha": "0919f2478485c3711d67dd027ea72931372f02d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0919f2478485c3711d67dd027ea72931372f02d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2d280851cae5f72684ef2ba1d4ee99ce3753511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d280851cae5f72684ef2ba1d4ee99ce3753511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d280851cae5f72684ef2ba1d4ee99ce3753511", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d280851cae5f72684ef2ba1d4ee99ce3753511/comments", "author": null, "committer": null, "parents": [{"sha": "da59be1f1f60b5e8cac16e243fc21989110b9689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da59be1f1f60b5e8cac16e243fc21989110b9689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da59be1f1f60b5e8cac16e243fc21989110b9689"}], "stats": {"total": 468, "additions": 237, "deletions": 231}, "files": [{"sha": "449ed875216d995cf5f09ff3664ece3fef1a081a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2d280851cae5f72684ef2ba1d4ee99ce3753511", "patch": "@@ -1,3 +1,9 @@\n+Tue Apr 13 02:11:11 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.c: Remove space register specification in memory addresses,\n+\texcept where it is actually needed.\n+\t* pa.md, pa.h, ee.asm, ee_fp.asm, lib2funcs.asm: Likewise.\n+\n Mon Apr 12 23:34:35 PDT 1999 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "757632b066b8c110a595963323ff9c4e29cc35f2", "filename": "gcc/config/pa/ee.asm", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fee.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fee.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fee.asm?ref=d2d280851cae5f72684ef2ba1d4ee99ce3753511", "patch": "@@ -62,7 +62,7 @@ __outline_prologue\n         ldo -4(%r31),%r31\n \n \t; Save off %r2\n-\tstw %r2,-20(0,%r30)\n+\tstw %r2,-20(%r30)\n \n \t; Make our new frame.\n \tadd %r21,%r30,%r30\n@@ -86,37 +86,37 @@ __outline_prologue\n \tsubi 18,%r1,%r1\n \tblr,n %r1,%r0\n \tb,n L$0000\n-\tstws,ma %r18,4(0,%r20)\n+\tstws,ma %r18,4(%r20)\n \tnop\n-\tstws,ma %r17,4(0,%r20)\n+\tstws,ma %r17,4(%r20)\n \tnop\n-\tstws,ma %r16,4(0,%r20)\n+\tstws,ma %r16,4(%r20)\n \tnop\n-\tstws,ma %r15,4(0,%r20)\n+\tstws,ma %r15,4(%r20)\n \tnop\n-\tstws,ma %r14,4(0,%r20)\n+\tstws,ma %r14,4(%r20)\n \tnop\n-\tstws,ma %r13,4(0,%r20)\n+\tstws,ma %r13,4(%r20)\n \tnop\n-\tstws,ma %r12,4(0,%r20)\n+\tstws,ma %r12,4(%r20)\n \tnop\n-\tstws,ma %r11,4(0,%r20)\n+\tstws,ma %r11,4(%r20)\n \tnop\n-\tstws,ma %r10,4(0,%r20)\n+\tstws,ma %r10,4(%r20)\n \tnop\n-\tstws,ma %r9,4(0,%r20)\n+\tstws,ma %r9,4(%r20)\n \tnop\n-\tstws,ma %r8,4(0,%r20)\n+\tstws,ma %r8,4(%r20)\n \tnop\n-\tstws,ma %r7,4(0,%r20)\n+\tstws,ma %r7,4(%r20)\n \tnop\n-\tstws,ma %r6,4(0,%r20)\n+\tstws,ma %r6,4(%r20)\n \tnop\n-\tstws,ma %r5,4(0,%r20)\n+\tstws,ma %r5,4(%r20)\n \tnop\n-\tstws,ma %r4,4(0,%r20)\n+\tstws,ma %r4,4(%r20)\n \tnop\n-\tstws,ma %r3,4(0,%r20)\n+\tstws,ma %r3,4(%r20)\n \tnop\n L$0000\n \t; All gr saves are done.  Align the temporary frame pointer and\n@@ -128,25 +128,25 @@ L$0000\n \tsubi 21,%r22,%r22\n \tblr,n %r22,%r0\n \tb,n L$0001\n-\tfstws,ma %fr21,8(0,%r20)\n+\tfstws,ma %fr21,8(%r20)\n \tnop\n-\tfstws,ma %fr20,8(0,%r20)\n+\tfstws,ma %fr20,8(%r20)\n \tnop\n-\tfstws,ma %fr19,8(0,%r20)\n+\tfstws,ma %fr19,8(%r20)\n \tnop\n-\tfstws,ma %fr18,8(0,%r20)\n+\tfstws,ma %fr18,8(%r20)\n \tnop\n-\tfstws,ma %fr17,8(0,%r20)\n+\tfstws,ma %fr17,8(%r20)\n \tnop\n-\tfstws,ma %fr16,8(0,%r20)\n+\tfstws,ma %fr16,8(%r20)\n \tnop\n-\tfstws,ma %fr15,8(0,%r20)\n+\tfstws,ma %fr15,8(%r20)\n \tnop\n-\tfstws,ma %fr14,8(0,%r20)\n+\tfstws,ma %fr14,8(%r20)\n \tnop\n-\tfstws,ma %fr13,8(0,%r20)\n+\tfstws,ma %fr13,8(%r20)\n \tnop\n-\tfstws,ma %fr12,8(0,%r20)\n+\tfstws,ma %fr12,8(%r20)\n \tnop\n L$0001\n \t; Return\n@@ -170,7 +170,7 @@ __outline_epilogue\n         ldo -4(%r31),%r31\n \n \t; Reload %r2\n-\tldw -20(0,%r20),%r2\n+\tldw -20(%r20),%r2\n \n \t; Add in local_fsize (%r19) to the frame pointer to find\n \t; the saved registers.\n@@ -191,37 +191,37 @@ __outline_epilogue\n \tsubi 18,%r1,%r1\n \tblr,n %r1,%r0\n \tb,n L$0004\n-\tldws,ma 4(0,%r20),%r18\n+\tldws,ma 4(%r20),%r18\n \tnop\n-\tldws,ma 4(0,%r20),%r17\n+\tldws,ma 4(%r20),%r17\n \tnop\n-\tldws,ma 4(0,%r20),%r16\n+\tldws,ma 4(%r20),%r16\n \tnop\n-\tldws,ma 4(0,%r20),%r15\n+\tldws,ma 4(%r20),%r15\n \tnop\n-\tldws,ma 4(0,%r20),%r14\n+\tldws,ma 4(%r20),%r14\n \tnop\n-\tldws,ma 4(0,%r20),%r13\n+\tldws,ma 4(%r20),%r13\n \tnop\n-\tldws,ma 4(0,%r20),%r12\n+\tldws,ma 4(%r20),%r12\n \tnop\n-\tldws,ma 4(0,%r20),%r11\n+\tldws,ma 4(%r20),%r11\n \tnop\n-\tldws,ma 4(0,%r20),%r10\n+\tldws,ma 4(%r20),%r10\n \tnop\n-\tldws,ma 4(0,%r20),%r9\n+\tldws,ma 4(%r20),%r9\n \tnop\n-\tldws,ma 4(0,%r20),%r8\n+\tldws,ma 4(%r20),%r8\n \tnop\n-\tldws,ma 4(0,%r20),%r7\n+\tldws,ma 4(%r20),%r7\n \tnop\n-\tldws,ma 4(0,%r20),%r6\n+\tldws,ma 4(%r20),%r6\n \tnop\n-\tldws,ma 4(0,%r20),%r5\n+\tldws,ma 4(%r20),%r5\n \tnop\n-\tldws,ma 4(0,%r20),%r4\n+\tldws,ma 4(%r20),%r4\n \tnop\n-\tldws,ma 4(0,%r20),%r3\n+\tldws,ma 4(%r20),%r3\n \tnop\n L$0004\n \t; All gr restore are done.  Align the temporary frame pointer and\n@@ -233,25 +233,25 @@ L$0004\n \tsubi 21,%r22,%r22\n \tblr,n %r22,%r0\n \tb,n L$0005\n-\tfldws,ma 8(0,%r20),%fr21\n+\tfldws,ma 8(%r20),%fr21\n \tnop\n-\tfldws,ma 8(0,%r20),%fr20\n+\tfldws,ma 8(%r20),%fr20\n \tnop\n-\tfldws,ma 8(0,%r20),%fr19\n+\tfldws,ma 8(%r20),%fr19\n \tnop\n-\tfldws,ma 8(0,%r20),%fr18\n+\tfldws,ma 8(%r20),%fr18\n \tnop\n-\tfldws,ma 8(0,%r20),%fr17\n+\tfldws,ma 8(%r20),%fr17\n \tnop\n-\tfldws,ma 8(0,%r20),%fr16\n+\tfldws,ma 8(%r20),%fr16\n \tnop\n-\tfldws,ma 8(0,%r20),%fr15\n+\tfldws,ma 8(%r20),%fr15\n \tnop\n-\tfldws,ma 8(0,%r20),%fr14\n+\tfldws,ma 8(%r20),%fr14\n \tnop\n-\tfldws,ma 8(0,%r20),%fr13\n+\tfldws,ma 8(%r20),%fr13\n \tnop\n-\tfldws,ma 8(0,%r20),%fr12\n+\tfldws,ma 8(%r20),%fr12\n \tnop\n L$0005\n \t; Return and deallocate our frame."}, {"sha": "18a7fbbaad191ab1573904e964d7e3cd7f69b512", "filename": "gcc/config/pa/ee_fp.asm", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fee_fp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fee_fp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fee_fp.asm?ref=d2d280851cae5f72684ef2ba1d4ee99ce3753511", "patch": "@@ -63,13 +63,13 @@ __outline_prologue_fp\n         ldo -4(%r31),%r31\n \n \t; Save off %r2\n-\tstw %r2,-20(0,%r30)\n+\tstw %r2,-20(%r30)\n \n \t; Make our new frame.\n \tadd %r21,%r30,%r30\n \n \t; Save our old stack pointer.\n-\tstw %r20,0(0,%r20)\n+\tstw %r20,0(%r20)\n \n \t; Add in local_fsize to our frame pointer so we do register\n \t; saves into the right place\n@@ -90,37 +90,37 @@ __outline_prologue_fp\n \tsubi 18,%r1,%r1\n \tblr,n %r1,%r0\n \tb,n L$0002\n-\tstws,ma %r18,4(0,%r20)\n+\tstws,ma %r18,4(%r20)\n \tnop\n-\tstws,ma %r17,4(0,%r20)\n+\tstws,ma %r17,4(%r20)\n \tnop\n-\tstws,ma %r16,4(0,%r20)\n+\tstws,ma %r16,4(%r20)\n \tnop\n-\tstws,ma %r15,4(0,%r20)\n+\tstws,ma %r15,4(%r20)\n \tnop\n-\tstws,ma %r14,4(0,%r20)\n+\tstws,ma %r14,4(%r20)\n \tnop\n-\tstws,ma %r13,4(0,%r20)\n+\tstws,ma %r13,4(%r20)\n \tnop\n-\tstws,ma %r12,4(0,%r20)\n+\tstws,ma %r12,4(%r20)\n \tnop\n-\tstws,ma %r11,4(0,%r20)\n+\tstws,ma %r11,4(%r20)\n \tnop\n-\tstws,ma %r10,4(0,%r20)\n+\tstws,ma %r10,4(%r20)\n \tnop\n-\tstws,ma %r9,4(0,%r20)\n+\tstws,ma %r9,4(%r20)\n \tnop\n-\tstws,ma %r8,4(0,%r20)\n+\tstws,ma %r8,4(%r20)\n \tnop\n-\tstws,ma %r7,4(0,%r20)\n+\tstws,ma %r7,4(%r20)\n \tnop\n-\tstws,ma %r6,4(0,%r20)\n+\tstws,ma %r6,4(%r20)\n \tnop\n-\tstws,ma %r5,4(0,%r20)\n+\tstws,ma %r5,4(%r20)\n \tnop\n-\tstws,ma %r4,4(0,%r20)\n+\tstws,ma %r4,4(%r20)\n \tnop\n-\tstws,ma %r3,4(0,%r20)\n+\tstws,ma %r3,4(%r20)\n \tnop\n L$0002\n \t; All gr saves are done.  Align the temporary frame pointer and\n@@ -132,25 +132,25 @@ L$0002\n \tsubi 21,%r22,%r22\n \tblr,n %r22,%r0\n \tb,n L$0003\n-\tfstws,ma %fr21,8(0,%r20)\n+\tfstws,ma %fr21,8(%r20)\n \tnop\n-\tfstws,ma %fr20,8(0,%r20)\n+\tfstws,ma %fr20,8(%r20)\n \tnop\n-\tfstws,ma %fr19,8(0,%r20)\n+\tfstws,ma %fr19,8(%r20)\n \tnop\n-\tfstws,ma %fr18,8(0,%r20)\n+\tfstws,ma %fr18,8(%r20)\n \tnop\n-\tfstws,ma %fr17,8(0,%r20)\n+\tfstws,ma %fr17,8(%r20)\n \tnop\n-\tfstws,ma %fr16,8(0,%r20)\n+\tfstws,ma %fr16,8(%r20)\n \tnop\n-\tfstws,ma %fr15,8(0,%r20)\n+\tfstws,ma %fr15,8(%r20)\n \tnop\n-\tfstws,ma %fr14,8(0,%r20)\n+\tfstws,ma %fr14,8(%r20)\n \tnop\n-\tfstws,ma %fr13,8(0,%r20)\n+\tfstws,ma %fr13,8(%r20)\n \tnop\n-\tfstws,ma %fr12,8(0,%r20)\n+\tfstws,ma %fr12,8(%r20)\n \tnop\n L$0003\n \t; Return, setting up a frame pointer in the delay slot\n@@ -178,10 +178,10 @@ __outline_epilogue_fp\n \n \t; Reload %r2\n \t; First save off %r2\n-\tldw -20(0,%r20),%r2\n+\tldw -20(%r20),%r2\n \n \t; Load our old stack pointer, save it in %r21.\n-\tldw 0(0,%r20),%r21\n+\tldw 0(%r20),%r21\n \n \t; Add in local_fsize (%r19) to the frame pointer to find\n \t; the saved registers.\n@@ -202,37 +202,37 @@ __outline_epilogue_fp\n \tsubi 18,%r1,%r1\n \tblr,n %r1,%r0\n \tb,n L$0006\n-\tldws,ma 4(0,%r20),%r18\n+\tldws,ma 4(%r20),%r18\n \tnop\n-\tldws,ma 4(0,%r20),%r17\n+\tldws,ma 4(%r20),%r17\n \tnop\n-\tldws,ma 4(0,%r20),%r16\n+\tldws,ma 4(%r20),%r16\n \tnop\n-\tldws,ma 4(0,%r20),%r15\n+\tldws,ma 4(%r20),%r15\n \tnop\n-\tldws,ma 4(0,%r20),%r14\n+\tldws,ma 4(%r20),%r14\n \tnop\n-\tldws,ma 4(0,%r20),%r13\n+\tldws,ma 4(%r20),%r13\n \tnop\n-\tldws,ma 4(0,%r20),%r12\n+\tldws,ma 4(%r20),%r12\n \tnop\n-\tldws,ma 4(0,%r20),%r11\n+\tldws,ma 4(%r20),%r11\n \tnop\n-\tldws,ma 4(0,%r20),%r10\n+\tldws,ma 4(%r20),%r10\n \tnop\n-\tldws,ma 4(0,%r20),%r9\n+\tldws,ma 4(%r20),%r9\n \tnop\n-\tldws,ma 4(0,%r20),%r8\n+\tldws,ma 4(%r20),%r8\n \tnop\n-\tldws,ma 4(0,%r20),%r7\n+\tldws,ma 4(%r20),%r7\n \tnop\n-\tldws,ma 4(0,%r20),%r6\n+\tldws,ma 4(%r20),%r6\n \tnop\n-\tldws,ma 4(0,%r20),%r5\n+\tldws,ma 4(%r20),%r5\n \tnop\n-\tldws,ma 4(0,%r20),%r4\n+\tldws,ma 4(%r20),%r4\n \tnop\n-\tldws,ma 4(0,%r20),%r3\n+\tldws,ma 4(%r20),%r3\n \tnop\n L$0006\n \t; All gr restore are done.  Align the temporary frame pointer and\n@@ -244,25 +244,25 @@ L$0006\n \tsubi 21,%r22,%r22\n \tblr,n %r22,%r0\n \tb,n L$0007\n-\tfldws,ma 8(0,%r20),%fr21\n+\tfldws,ma 8(%r20),%fr21\n \tnop\n-\tfldws,ma 8(0,%r20),%fr20\n+\tfldws,ma 8(%r20),%fr20\n \tnop\n-\tfldws,ma 8(0,%r20),%fr19\n+\tfldws,ma 8(%r20),%fr19\n \tnop\n-\tfldws,ma 8(0,%r20),%fr18\n+\tfldws,ma 8(%r20),%fr18\n \tnop\n-\tfldws,ma 8(0,%r20),%fr17\n+\tfldws,ma 8(%r20),%fr17\n \tnop\n-\tfldws,ma 8(0,%r20),%fr16\n+\tfldws,ma 8(%r20),%fr16\n \tnop\n-\tfldws,ma 8(0,%r20),%fr15\n+\tfldws,ma 8(%r20),%fr15\n \tnop\n-\tfldws,ma 8(0,%r20),%fr14\n+\tfldws,ma 8(%r20),%fr14\n \tnop\n-\tfldws,ma 8(0,%r20),%fr13\n+\tfldws,ma 8(%r20),%fr13\n \tnop\n-\tfldws,ma 8(0,%r20),%fr12\n+\tfldws,ma 8(%r20),%fr12\n \tnop\n L$0007\n \t; Return and deallocate our frame."}, {"sha": "e7a431ee6f83def1e017e106c5894f2df346cbc5", "filename": "gcc/config/pa/lib2funcs.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Flib2funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Flib2funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flib2funcs.asm?ref=d2d280851cae5f72684ef2ba1d4ee99ce3753511", "patch": "@@ -50,7 +50,7 @@ __gcc_plt_call\n \t.CALLINFO\n \t.ENTRY\n \t; Our return address comes in %r31, not %r2!\n-\tstw %r31,-8(0,%r30)\n+\tstw %r31,-8(%r30)\n \n \t; An inline version of dyncall so we don't have to worry\n \t; about long calls to millicode, PIC and other complexities.\n@@ -63,7 +63,7 @@ L$foo\n         mtsp %r1,%sr0\n         ble 0(%sr0,%r22)\n \tcopy %r31,%r2\n-\tldw -8(0,%r30),%r2\n+\tldw -8(%r30),%r2\n \n \t; We're going to be returning to a stack address, so we\n \t; need to do an intra-space return."}, {"sha": "92f98ac3f7f9e3358566a98c9e1b15c7708e8ac4", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d2d280851cae5f72684ef2ba1d4ee99ce3753511", "patch": "@@ -1661,8 +1661,8 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == POST_INC)\n-\t\treturn \"stws,ma %1,8(0,%0)\\n\\tstw %R1,-4(0,%0)\";\n-\t      return \"stws,ma %1,-8(0,%0)\\n\\tstw %R1,12(0,%0)\";\n+\t\treturn \"stws,ma %1,8(%0)\\n\\tstw %R1,-4(%0)\";\n+\t      return \"stws,ma %1,-8(%0)\\n\\tstw %R1,12(%0)\";\n \t    }\n \t  else\n \t    abort();\n@@ -1681,8 +1681,8 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == PRE_INC)\n-\t\treturn \"stws,mb %1,8(0,%0)\\n\\tstw %R1,4(0,%0)\";\n-\t      return \"stws,mb %1,-8(0,%0)\\n\\tstw %R1,4(0,%0)\";\n+\t\treturn \"stws,mb %1,8(%0)\\n\\tstw %R1,4(%0)\";\n+\t      return \"stws,mb %1,-8(%0)\\n\\tstw %R1,4(%0)\";\n \t    }\n \t  else\n \t    abort();\n@@ -1708,17 +1708,17 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == POST_INC)\n-\t\treturn \"ldws,ma 8(0,%1),%0\\n\\tldw -4(0,%1),%R0\";\n-\t      return \"ldws,ma -8(0,%1),%0\\n\\tldw 12(0,%1),%R0\";\n+\t\treturn \"ldws,ma 8(%1),%0\\n\\tldw -4(%1),%R0\";\n+\t      return \"ldws,ma -8(%1),%0\\n\\tldw 12(%1),%R0\";\n \t    }\n \t  else\n \t    {\n \t      /* This is an undefined situation.  We should load into the\n \t\t address register *and* update that register.  Probably\n \t\t we don't need to handle this at all.  */\n \t      if (GET_CODE (addr) == POST_INC)\n-\t\treturn \"ldw 4(0,%1),%R0\\n\\tldws,ma 8(0,%1),%0\";\n-\t      return \"ldw 4(0,%1),%R0\\n\\tldws,ma -8(0,%1),%0\";\n+\t\treturn \"ldw 4(%1),%R0\\n\\tldws,ma 8(%1),%0\";\n+\t      return \"ldw 4(%1),%R0\\n\\tldws,ma -8(%1),%0\";\n \t    }\n \t}\n       else if (GET_CODE (addr) == PRE_INC || GET_CODE (addr) == PRE_DEC)\n@@ -1735,17 +1735,17 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == PRE_INC)\n-\t\treturn \"ldws,mb 8(0,%1),%0\\n\\tldw 4(0,%1),%R0\";\n-\t      return \"ldws,mb -8(0,%1),%0\\n\\tldw 4(0,%1),%R0\";\n+\t\treturn \"ldws,mb 8(%1),%0\\n\\tldw 4(%1),%R0\";\n+\t      return \"ldws,mb -8(%1),%0\\n\\tldw 4(%1),%R0\";\n \t    }\n \t  else\n \t    {\n \t      /* This is an undefined situation.  We should load into the\n \t\t address register *and* update that register.  Probably\n \t\t we don't need to handle this at all.  */\n \t      if (GET_CODE (addr) == PRE_INC)\n-\t\treturn \"ldw 12(0,%1),%R0\\n\\tldws,mb 8(0,%1),%0\";\n-\t      return \"ldw -4(0,%1),%R0\\n\\tldws,mb -8(0,%1),%0\";\n+\t\treturn \"ldw 12(%1),%R0\\n\\tldws,mb 8(%1),%0\";\n+\t      return \"ldw -4(%1),%R0\\n\\tldws,mb -8(%1),%0\";\n \t    }\n \t}\n       else if (GET_CODE (addr) == PLUS\n@@ -1762,7 +1762,7 @@ output_move_double (operands)\n \t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n \t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n \t      output_asm_insn (\"sh%O3addl %2,%1,%0\", xoperands);\n-\t      return \"ldw 4(0,%0),%R0\\n\\tldw 0(0,%0),%0\";\n+\t      return \"ldw 4(%0),%R0\\n\\tldw 0(%0),%0\";\n \t    }\n \t  else\n \t    {\n@@ -1773,7 +1773,7 @@ output_move_double (operands)\n \t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n \t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n \t      output_asm_insn (\"sh%O3addl %2,%1,%R0\", xoperands);\n-\t      return \"ldw 0(0,%R0),%0\\n\\tldw 4(0,%R0),%R0\";\n+\t      return \"ldw 0(%R0),%0\\n\\tldw 4(%R0),%R0\";\n \t    }\n \t   \n \t}\n@@ -1967,25 +1967,25 @@ output_block_move (operands, size_is_constant)\n \toutput_asm_insn (\"ldi %4,%2\", operands);\n \n \t/* Copying loop.  */\n-\toutput_asm_insn (\"ldws,ma 4(0,%1),%3\", operands);\n-\toutput_asm_insn (\"ldws,ma 4(0,%1),%6\", operands);\n-\toutput_asm_insn (\"stws,ma %3,4(0,%0)\", operands);\n+\toutput_asm_insn (\"ldws,ma 4(%1),%3\", operands);\n+\toutput_asm_insn (\"ldws,ma 4(%1),%6\", operands);\n+\toutput_asm_insn (\"stws,ma %3,4(%0)\", operands);\n \toutput_asm_insn (\"addib,>= -8,%2,.-12\", operands);\n-\toutput_asm_insn (\"stws,ma %6,4(0,%0)\", operands);\n+\toutput_asm_insn (\"stws,ma %6,4(%0)\", operands);\n \n \t/* Handle the residual.  There could be up to 7 bytes of\n \t   residual to copy!  */\n \tif (n_bytes % 8 != 0)\n \t  {\n \t    operands[4] = GEN_INT (n_bytes % 4);\n \t    if (n_bytes % 8 >= 4)\n-\t      output_asm_insn (\"ldws,ma 4(0,%1),%3\", operands);\n+\t      output_asm_insn (\"ldws,ma 4(%1),%3\", operands);\n \t    if (n_bytes % 4 != 0)\n-\t      output_asm_insn (\"ldw 0(0,%1),%6\", operands);\n+\t      output_asm_insn (\"ldw 0(%1),%6\", operands);\n \t    if (n_bytes % 8 >= 4)\n-\t      output_asm_insn (\"stws,ma %3,4(0,%0)\", operands);\n+\t      output_asm_insn (\"stws,ma %3,4(%0)\", operands);\n \t    if (n_bytes % 4 != 0)\n-\t      output_asm_insn (\"stbys,e %6,%4(0,%0)\", operands);\n+\t      output_asm_insn (\"stbys,e %6,%4(%0)\", operands);\n \t  }\n \treturn \"\";\n \n@@ -1995,23 +1995,23 @@ output_block_move (operands, size_is_constant)\n \toutput_asm_insn (\"ldi %4,%2\", operands);\n \n \t/* Copying loop.  */\n-\toutput_asm_insn (\"ldhs,ma 2(0,%1),%3\", operands);\n-\toutput_asm_insn (\"ldhs,ma 2(0,%1),%6\", operands);\n-\toutput_asm_insn (\"sths,ma %3,2(0,%0)\", operands);\n+\toutput_asm_insn (\"ldhs,ma 2(%1),%3\", operands);\n+\toutput_asm_insn (\"ldhs,ma 2(%1),%6\", operands);\n+\toutput_asm_insn (\"sths,ma %3,2(%0)\", operands);\n \toutput_asm_insn (\"addib,>= -4,%2,.-12\", operands);\n-\toutput_asm_insn (\"sths,ma %6,2(0,%0)\", operands);\n+\toutput_asm_insn (\"sths,ma %6,2(%0)\", operands);\n \n \t/* Handle the residual.  */\n \tif (n_bytes % 4 != 0)\n \t  {\n \t    if (n_bytes % 4 >= 2)\n-\t      output_asm_insn (\"ldhs,ma 2(0,%1),%3\", operands);\n+\t      output_asm_insn (\"ldhs,ma 2(%1),%3\", operands);\n \t    if (n_bytes % 2 != 0)\n-\t      output_asm_insn (\"ldb 0(0,%1),%6\", operands);\n+\t      output_asm_insn (\"ldb 0(%1),%6\", operands);\n \t    if (n_bytes % 4 >= 2)\n-\t      output_asm_insn (\"sths,ma %3,2(0,%0)\", operands);\n+\t      output_asm_insn (\"sths,ma %3,2(%0)\", operands);\n \t    if (n_bytes % 2 != 0)\n-\t      output_asm_insn (\"stb %6,0(0,%0)\", operands);\n+\t      output_asm_insn (\"stb %6,0(%0)\", operands);\n \t  }\n \treturn \"\";\n \n@@ -2021,17 +2021,17 @@ output_block_move (operands, size_is_constant)\n \toutput_asm_insn (\"ldi %4,%2\", operands);\n \n \t/* Copying loop.  */\n-\toutput_asm_insn (\"ldbs,ma 1(0,%1),%3\", operands);\n-\toutput_asm_insn (\"ldbs,ma 1(0,%1),%6\", operands);\n-\toutput_asm_insn (\"stbs,ma %3,1(0,%0)\", operands);\n+\toutput_asm_insn (\"ldbs,ma 1(%1),%3\", operands);\n+\toutput_asm_insn (\"ldbs,ma 1(%1),%6\", operands);\n+\toutput_asm_insn (\"stbs,ma %3,1(%0)\", operands);\n \toutput_asm_insn (\"addib,>= -2,%2,.-12\", operands);\n-\toutput_asm_insn (\"stbs,ma %6,1(0,%0)\", operands);\n+\toutput_asm_insn (\"stbs,ma %6,1(%0)\", operands);\n \n \t/* Handle the residual.  */\n \tif (n_bytes % 2 != 0)\n \t  {\n-\t    output_asm_insn (\"ldb 0(0,%1),%3\", operands);\n-\t    output_asm_insn (\"stb %3,0(0,%0)\", operands);\n+\t    output_asm_insn (\"ldb 0(%1),%3\", operands);\n+\t    output_asm_insn (\"stb %3,0(%0)\", operands);\n \t  }\n \treturn \"\";\n \n@@ -3883,21 +3883,21 @@ print_operand (file, x, code)\n \t{\n \tcase PRE_DEC:\n \tcase POST_DEC:\n-\t  fprintf (file, \"-%d(0,%s)\", size, reg_names [REGNO (base)]);\n+\t  fprintf (file, \"-%d(%s)\", size, reg_names [REGNO (base)]);\n \t  break;\n \tcase PRE_INC:\n \tcase POST_INC:\n-\t  fprintf (file, \"%d(0,%s)\", size, reg_names [REGNO (base)]);\n+\t  fprintf (file, \"%d(%s)\", size, reg_names [REGNO (base)]);\n \t  break;\n \tdefault:\n \t  if (GET_CODE (XEXP (x, 0)) == PLUS\n \t      && GET_CODE (XEXP (XEXP (x, 0), 0)) == MULT)\n-\t    fprintf (file, \"%s(0,%s)\",\n+\t    fprintf (file, \"%s(%s)\",\n \t\t     reg_names [REGNO (XEXP (XEXP (XEXP (x, 0), 0), 0))],\n \t\t     reg_names [REGNO (XEXP (XEXP (x, 0), 1))]);\n \t  else if (GET_CODE (XEXP (x, 0)) == PLUS\n \t\t   && GET_CODE (XEXP (XEXP (x, 0), 1)) == MULT)\n-\t    fprintf (file, \"%s(0,%s)\",\n+\t    fprintf (file, \"%s(%s)\",\n \t\t     reg_names [REGNO (XEXP (XEXP (XEXP (x, 0), 1), 0))],\n \t\t     reg_names [REGNO (XEXP (XEXP (x, 0), 0))]);\n \t  else\n@@ -4888,10 +4888,10 @@ output_dbra (operands, insn, which_alternative)\n \treturn \"ldo %1(%0),%0\";\n       else if (which_alternative == 1)\n \t{\n-\t  output_asm_insn (\"fstws %0,-16(0,%%r30)\",operands);\n-\t  output_asm_insn (\"ldw -16(0,%%r30),%4\",operands);\n-\t  output_asm_insn (\"ldo %1(%4),%4\\n\\tstw %4,-16(0,%%r30)\", operands);\n-\t  return \"fldws -16(0,%%r30),%0\";\n+\t  output_asm_insn (\"fstws %0,-16(%%r30)\",operands);\n+\t  output_asm_insn (\"ldw -16(%%r30),%4\",operands);\n+\t  output_asm_insn (\"ldo %1(%4),%4\\n\\tstw %4,-16(%%r30)\", operands);\n+\t  return \"fldws -16(%%r30),%0\";\n \t}\n       else\n \t{\n@@ -4953,12 +4953,12 @@ output_dbra (operands, insn, which_alternative)\n       /* Move loop counter from FP register to MEM then into a GR,\n \t increment the GR, store the GR into MEM, and finally reload\n \t the FP register from MEM from within the branch's delay slot.  */\n-      output_asm_insn (\"fstws %0,-16(0,%%r30)\\n\\tldw -16(0,%%r30),%4\",operands);\n-      output_asm_insn (\"ldo %1(%4),%4\\n\\tstw %4,-16(0,%%r30)\", operands);\n+      output_asm_insn (\"fstws %0,-16(%%r30)\\n\\tldw -16(%%r30),%4\",operands);\n+      output_asm_insn (\"ldo %1(%4),%4\\n\\tstw %4,-16(%%r30)\", operands);\n       if (get_attr_length (insn) == 24)\n-\treturn \"comb,%S2 0,%4,%3\\n\\tfldws -16(0,%%r30),%0\";\n+\treturn \"comb,%S2 0,%4,%3\\n\\tfldws -16(%%r30),%0\";\n       else\n-\treturn \"comclr,%B2 0,%4,0\\n\\tbl %3,0\\n\\tfldws -16(0,%%r30),%0\";\n+\treturn \"comclr,%B2 0,%4,0\\n\\tbl %3,0\\n\\tfldws -16(%%r30),%0\";\n     }\n   /* Deal with gross reload from memory case.  */\n   else\n@@ -4994,8 +4994,8 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \treturn \"copy %1,%0\";\n       else if (which_alternative == 1)\n \t{\n-\t  output_asm_insn (\"stw %1,-16(0,%%r30)\",operands);\n-\t  return \"fldws -16(0,%%r30),%0\";\n+\t  output_asm_insn (\"stw %1,-16(%%r30)\",operands);\n+\t  return \"fldws -16(%%r30),%0\";\n \t}\n       else if (which_alternative == 2)\n \treturn \"stw %1,%0\";\n@@ -5060,11 +5060,11 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n       /* Move loop counter from FP register to MEM then into a GR,\n \t increment the GR, store the GR into MEM, and finally reload\n \t the FP register from MEM from within the branch's delay slot.  */\n-      output_asm_insn (\"stw %1,-16(0,%%r30)\",operands);\n+      output_asm_insn (\"stw %1,-16(%%r30)\",operands);\n       if (get_attr_length (insn) == 12)\n-\treturn \"comb,%S2 0,%1,%3\\n\\tfldws -16(0,%%r30),%0\";\n+\treturn \"comb,%S2 0,%1,%3\\n\\tfldws -16(%%r30),%0\";\n       else\n-\treturn \"comclr,%B2 0,%1,0\\n\\tbl %3,0\\n\\tfldws -16(0,%%r30),%0\";\n+\treturn \"comclr,%B2 0,%1,0\\n\\tbl %3,0\\n\\tfldws -16(%%r30),%0\";\n     }\n   /* Deal with gross reload from memory case.  */\n   else if (which_alternative == 2)\n@@ -5402,7 +5402,7 @@ output_call (insn, call_dest)\n \n \t      output_asm_insn (\"addil LT%%%0,%%r19\", xoperands);\n \t      output_asm_insn (\"ldw RT%%%0(%%r1),%%r22\", xoperands);\n-\t      output_asm_insn (\"ldw 0(0,%%r22),%%r22\", xoperands);\n+\t      output_asm_insn (\"ldw 0(%%r22),%%r22\", xoperands);\n \n \t      /* Get our address + 8 into %r1.  */\n \t      output_asm_insn (\"bl .+8,%%r1\", xoperands);"}, {"sha": "eeabab61c7b52cd6c94a62d4a72fe63cb2807bb8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d2d280851cae5f72684ef2ba1d4ee99ce3753511", "patch": "@@ -1320,15 +1320,15 @@ extern union tree_node *current_function_decl;\n \n #define TRAMPOLINE_TEMPLATE(FILE) \\\n   {\t\t\t\t\t\t\t\\\n-    fputs (\"\\tldw\t36(0,%r22),%r21\\n\", FILE);\t\\\n+    fputs (\"\\tldw\t36(%r22),%r21\\n\", FILE);\t\\\n     fputs (\"\\tbb,>=,n\t%r21,30,.+16\\n\", FILE);\t\\\n     fputs (\"\\tdepi\t0,31,2,%r21\\n\", FILE);\t\t\\\n-    fputs (\"\\tldw\t4(0,%r21),%r19\\n\", FILE);\t\\\n-    fputs (\"\\tldw\t0(0,%r21),%r21\\n\", FILE);\t\\\n-    fputs (\"\\tldsid\t(0,%r21),%r1\\n\", FILE);\t\\\n+    fputs (\"\\tldw\t4(%r21),%r19\\n\", FILE);\t\\\n+    fputs (\"\\tldw\t0(%r21),%r21\\n\", FILE);\t\\\n+    fputs (\"\\tldsid\t(%r21),%r1\\n\", FILE);\t\\\n     fputs (\"\\tmtsp\t%r1,%sr0\\n\", FILE);\t\t\\\n     fputs (\"\\tbe\t0(%sr0,%r21)\\n\", FILE);\t\\\n-    fputs (\"\\tldw\t40(0,%r22),%r29\\n\", FILE);\t\\\n+    fputs (\"\\tldw\t40(%r22),%r29\\n\", FILE);\t\\\n     fputs (\"\\t.word\t0\\n\", FILE);\t\t\t\\\n     fputs (\"\\t.word\t0\\n\", FILE);\t\t\t\\\n   }\n@@ -2429,7 +2429,7 @@ DTORS_SECTION_FUNCTION\n   switch (GET_CODE (addr))\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n     case REG:\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"0(0,%s)\", reg_names [REGNO (addr)]);\t\t\\\n+      fprintf (FILE, \"0(%s)\", reg_names [REGNO (addr)]);\t\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     case PLUS:\t\t\t\t\t\t\t\t\\\n       if (GET_CODE (XEXP (addr, 0)) == CONST_INT)\t\t\t\\\n@@ -2438,7 +2438,7 @@ DTORS_SECTION_FUNCTION\n \toffset = INTVAL (XEXP (addr, 1)), base = XEXP (addr, 0);\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tabort ();\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%d(0,%s)\", offset, reg_names [REGNO (base)]);\t\\\n+      fprintf (FILE, \"%d(%s)\", offset, reg_names [REGNO (base)]);\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     case LO_SUM:\t\t\t\t\t\t\t\\\n       if (!symbolic_operand (XEXP (addr, 1)))\t\t\t\t\\\n@@ -2455,7 +2455,7 @@ DTORS_SECTION_FUNCTION\n       fputs (\")\", FILE);\t\t\t\t\t\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     case CONST_INT:\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%d(0,0)\", INTVAL (addr));\t\t\t\t\\\n+      fprintf (FILE, \"%d(%r0)\", INTVAL (addr));\t\t\t\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     default:\t\t\t\t\t\t\t\t\\\n       output_addr_const (FILE, addr);\t\t\t\t\t\\"}, {"sha": "38ef038ba40c33e0890e3320055b115f10c95f7e", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d280851cae5f72684ef2ba1d4ee99ce3753511/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=d2d280851cae5f72684ef2ba1d4ee99ce3753511", "patch": "@@ -1450,9 +1450,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldwx %1(0,%2),%0\\\";\n+    return \\\"ldwx %1(%2),%0\\\";\n   else\n-    return \\\"ldwx %2(0,%1),%0\\\";\n+    return \\\"ldwx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1469,9 +1469,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldwx %2(0,%1),%0\\\";\n+    return \\\"ldwx %2(%1),%0\\\";\n   else\n-    return \\\"ldwx %1(0,%2),%0\\\";\n+    return \\\"ldwx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1488,8 +1488,8 @@\n   \"*\n {\n   if (INTVAL (operands[2]) < 0)\n-    return \\\"ldwm %2(0,%1),%0\\\";\n-  return \\\"ldws,mb %2(0,%1),%0\\\";\n+    return \\\"ldwm %2(%1),%0\\\";\n+  return \\\"ldws,mb %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1504,8 +1504,8 @@\n   \"*\n {\n   if (INTVAL (operands[1]) < 0)\n-    return \\\"stwm %r2,%1(0,%0)\\\";\n-  return \\\"stws,mb %r2,%1(0,%0)\\\";\n+    return \\\"stwm %r2,%1(%0)\\\";\n+  return \\\"stws,mb %r2,%1(%0)\\\";\n }\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n@@ -1520,8 +1520,8 @@\n   \"*\n {\n   if (INTVAL (operands[2]) > 0)\n-    return \\\"ldwm %2(0,%1),%0\\\";\n-  return \\\"ldws,ma %2(0,%1),%0\\\";\n+    return \\\"ldwm %2(%1),%0\\\";\n+  return \\\"ldws,ma %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1536,8 +1536,8 @@\n   \"*\n {\n   if (INTVAL (operands[2]) > 0)\n-    return \\\"stwm %r1,%2(0,%0)\\\";\n-  return \\\"stws,ma %r1,%2(0,%0)\\\";\n+    return \\\"stwm %r1,%2(%0)\\\";\n+  return \\\"stws,ma %r1,%2(%0)\\\";\n }\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n@@ -1785,9 +1785,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldhx %1(0,%2),%0\\\";\n+    return \\\"ldhx %1(%2),%0\\\";\n   else\n-    return \\\"ldhx %2(0,%1),%0\\\";\n+    return \\\"ldhx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1804,9 +1804,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldhx %2(0,%1),%0\\\";\n+    return \\\"ldhx %2(%1),%0\\\";\n   else\n-    return \\\"ldhx %1(0,%2),%0\\\";\n+    return \\\"ldhx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1826,9 +1826,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldhx %1(0,%2),%0\\\";\n+    return \\\"ldhx %1(%2),%0\\\";\n   else\n-    return \\\"ldhx %2(0,%1),%0\\\";\n+    return \\\"ldhx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1847,9 +1847,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldhx %2(0,%1),%0\\\";\n+    return \\\"ldhx %2(%1),%0\\\";\n   else\n-    return \\\"ldhx %1(0,%2),%0\\\";\n+    return \\\"ldhx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1861,7 +1861,7 @@\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldhs,mb %2(0,%1),%0\"\n+  \"ldhs,mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -1875,7 +1875,7 @@\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldhs,mb %2(0,%1),%0\"\n+  \"ldhs,mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -1886,7 +1886,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_dup 1)))]\n   \"\"\n-  \"sths,mb %r2,%1(0,%0)\"\n+  \"sths,mb %r2,%1(%0)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -1947,9 +1947,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldbx %1(0,%2),%0\\\";\n+    return \\\"ldbx %1(%2),%0\\\";\n   else\n-    return \\\"ldbx %2(0,%1),%0\\\";\n+    return \\\"ldbx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1966,9 +1966,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldbx %2(0,%1),%0\\\";\n+    return \\\"ldbx %2(%1),%0\\\";\n   else\n-    return \\\"ldbx %1(0,%2),%0\\\";\n+    return \\\"ldbx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1988,9 +1988,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldbx %1(0,%2),%0\\\";\n+    return \\\"ldbx %1(%2),%0\\\";\n   else\n-    return \\\"ldbx %2(0,%1),%0\\\";\n+    return \\\"ldbx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2009,9 +2009,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldbx %2(0,%1),%0\\\";\n+    return \\\"ldbx %2(%1),%0\\\";\n   else\n-    return \\\"ldbx %1(0,%2),%0\\\";\n+    return \\\"ldbx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2030,9 +2030,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldbx %1(0,%2),%0\\\";\n+    return \\\"ldbx %1(%2),%0\\\";\n   else\n-    return \\\"ldbx %2(0,%1),%0\\\";\n+    return \\\"ldbx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2051,9 +2051,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldbx %2(0,%1),%0\\\";\n+    return \\\"ldbx %2(%1),%0\\\";\n   else\n-    return \\\"ldbx %1(0,%2),%0\\\";\n+    return \\\"ldbx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2064,7 +2064,7 @@\n \t\t\t (match_operand:SI 2 \"int5_operand\" \"L\"))))\n    (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldbs,mb %2(0,%1),%0\"\n+  \"ldbs,mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2076,7 +2076,7 @@\n \t\t\t\t  (match_operand:SI 2 \"int5_operand\" \"L\")))))\n    (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldbs,mb %2(0,%1),%0\"\n+  \"ldbs,mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2087,7 +2087,7 @@\n \t\t\t\t  (match_operand:SI 2 \"int5_operand\" \"L\")))))\n    (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldbs,mb %2(0,%1),%0\"\n+  \"ldbs,mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2098,7 +2098,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_dup 1)))]\n   \"\"\n-  \"stbs,mb %r2,%1(0,%0)\"\n+  \"stbs,mb %r2,%1(%0)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2305,9 +2305,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"flddx %1(0,%2),%0\\\";\n+    return \\\"flddx %1(%2),%0\\\";\n   else\n-    return \\\"flddx %2(0,%1),%0\\\";\n+    return \\\"flddx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2324,9 +2324,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"flddx %2(0,%1),%0\\\";\n+    return \\\"flddx %2(%1),%0\\\";\n   else\n-    return \\\"flddx %1(0,%2),%0\\\";\n+    return \\\"flddx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2343,9 +2343,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"fstdx %0,%1(0,%2)\\\";\n+    return \\\"fstdx %0,%1(%2)\\\";\n   else\n-    return \\\"fstdx %0,%2(0,%1)\\\";\n+    return \\\"fstdx %0,%2(%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -2362,9 +2362,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"fstdx %0,%2(0,%1)\\\";\n+    return \\\"fstdx %0,%2(%1)\\\";\n   else\n-    return \\\"fstdx %0,%1(0,%2)\\\";\n+    return \\\"fstdx %0,%1(%2)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -2610,9 +2610,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"fldwx %1(0,%2),%0\\\";\n+    return \\\"fldwx %1(%2),%0\\\";\n   else\n-    return \\\"fldwx %2(0,%1),%0\\\";\n+    return \\\"fldwx %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2629,9 +2629,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"fldwx %2(0,%1),%0\\\";\n+    return \\\"fldwx %2(%1),%0\\\";\n   else\n-    return \\\"fldwx %1(0,%2),%0\\\";\n+    return \\\"fldwx %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2648,9 +2648,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"fstwx %0,%1(0,%2)\\\";\n+    return \\\"fstwx %0,%1(%2)\\\";\n   else\n-    return \\\"fstwx %0,%2(0,%1)\\\";\n+    return \\\"fstwx %0,%2(%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -2667,9 +2667,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"fstwx %0,%2(0,%1)\\\";\n+    return \\\"fstwx %0,%2(%1)\\\";\n   else\n-    return \\\"fstwx %0,%1(0,%2)\\\";\n+    return \\\"fstwx %0,%1(%2)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -5039,7 +5039,7 @@\n    (use (mem:SI (match_operand:SI 0 \"register_operand\" \"r\")))\n    (use (mem:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"fdc 0(0,%0)\\;fdc 0(0,%1)\\;sync\"\n+  \"fdc 0(%0)\\;fdc 0(%1)\\;sync\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n@@ -5051,7 +5051,7 @@\n    (clobber (match_operand:SI 3 \"register_operand\" \"=&r\"))\n    (clobber (match_operand:SI 4 \"register_operand\" \"=&r\"))]\n   \"\"\n-  \"mfsp %%sr0,%4\\;ldsid (0,%2),%3\\;mtsp %3,%%sr0\\;fic 0(%%sr0,%0)\\;fic 0(%%sr0,%1)\\;sync\\;mtsp %4,%%sr0\\;nop\\;nop\\;nop\\;nop\\;nop\\;nop\"\n+  \"mfsp %%sr0,%4\\;ldsid (%2),%3\\;mtsp %3,%%sr0\\;fic 0(%%sr0,%0)\\;fic 0(%%sr0,%1)\\;sync\\;mtsp %4,%%sr0\\;nop\\;nop\\;nop\\;nop\\;nop\\;nop\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"52\")])\n "}]}