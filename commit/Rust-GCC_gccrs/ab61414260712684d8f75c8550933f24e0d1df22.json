{"sha": "ab61414260712684d8f75c8550933f24e0d1df22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2MTQxNDI2MDcxMjY4NGQ4Zjc1Yzg1NTA5MzNmMjRlMGQxZGYyMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-09T20:18:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-09T20:18:48Z"}, "message": "alpha.md (extendsidi2): Turn into a splitter.\n\n        * alpha.md (extendsidi2): Turn into a splitter.  Allow f/f.\n        If TARGET_FIX, allow r/f.  Remove cvtlq unspec pattern.\n        (peepholes): Re-enable.\n\nFrom-SVN: r29878", "tree": {"sha": "618aa0c5765790ca134bbbac75463abe71d18b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/618aa0c5765790ca134bbbac75463abe71d18b75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab61414260712684d8f75c8550933f24e0d1df22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab61414260712684d8f75c8550933f24e0d1df22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab61414260712684d8f75c8550933f24e0d1df22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab61414260712684d8f75c8550933f24e0d1df22/comments", "author": null, "committer": null, "parents": [{"sha": "d3a923ee2e12552204257a77c59fad127beec6e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a923ee2e12552204257a77c59fad127beec6e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a923ee2e12552204257a77c59fad127beec6e4"}], "stats": {"total": 91, "additions": 53, "deletions": 38}, "files": [{"sha": "0c30fa1a61800660ddb8d33473b259588bb0b7d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab61414260712684d8f75c8550933f24e0d1df22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab61414260712684d8f75c8550933f24e0d1df22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab61414260712684d8f75c8550933f24e0d1df22", "patch": "@@ -1,3 +1,9 @@\n+Sat Oct  9 13:15:53 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (extendsidi2): Turn into a splitter.  Allow f/f.\n+\tIf TARGET_FIX, allow r/f.  Remove cvtlq unspec pattern.\n+\t(peepholes): Re-enable.\n+\n Sat Oct  9 12:18:16 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (flow.o): Depend on TREE_H."}, {"sha": "caf8306089d7644b0959738be28573520cdfc1f3", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab61414260712684d8f75c8550933f24e0d1df22/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab61414260712684d8f75c8550933f24e0d1df22/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=ab61414260712684d8f75c8550933f24e0d1df22", "patch": "@@ -27,7 +27,6 @@\n ;;\t1\tcttz\n ;;\t2\tinsxh\n ;;\t3\tmskxh\n-;;\t4\tcvtlq\n ;;\t5\tcvtql\n ;;\t6\tnt_lda\n ;;\t\n@@ -389,40 +388,53 @@\n \n ;; Handle 32-64 bit extension from memory to a floating point register\n ;; specially, since this ocurrs frequently in int->double conversions.\n-;; This is done with a define_split after reload converting the plain\n-;; sign-extension into a load+unspec, which of course results in lds+cvtlq.\n ;;\n ;; Note that while we must retain the =f case in the insn for reload's\n ;; benefit, it should be eliminated after reload, so we should never emit\n ;; code for that case.  But we don't reject the possibility.\n \n-(define_insn \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,?f\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,m\")))]\n+(define_expand \"extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,*f,?*f\")\n+\t(sign_extend:DI\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,*f,m\")))]\n+  \"! TARGET_FIX\"\n+  \"@\n+   addl %1,$31,%0\n+   ldl %0,%1\n+   cvtlq %1,%0\n+   lds %0,%1\\;cvtlq %0,%0\"\n+  [(set_attr \"type\" \"iadd,ild,fadd,fld\")\n+   (set_attr \"length\" \"*,*,*,8\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,*f,?*f\")\n+\t(sign_extend:DI\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,*f,*f,m\")))]\n+  \"TARGET_FIX\"\n   \"@\n    addl %1,$31,%0\n    ldl %0,%1\n+   ftois %1,%0\n+   cvtlq %1,%0\n    lds %0,%1\\;cvtlq %0,%0\"\n-  [(set_attr \"type\" \"iadd,ild,fld\")\n-   (set_attr \"length\" \"*,*,8\")])\n+  [(set_attr \"type\" \"iadd,ild,ftoi,fadd,fld\")\n+   (set_attr \"length\" \"*,*,*,*,8\")])\n \n ;; Due to issues with CLASS_CANNOT_CHANGE_SIZE, we cannot use a subreg here.\n (define_split\n   [(set (match_operand:DI 0 \"hard_fp_register_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"memory_operand\" \"\")))]\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (unspec:DI [(match_dup 2)] 4))]\n+   (set (match_dup 0) (sign_extend:DI (match_dup 2)))]\n   \"operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(unspec:DI [(match_operand:SI 1 \"register_operand\" \"f\")] 4))]\n-  \"\"\n-  \"cvtlq %1,%0\"\n-  [(set_attr \"type\" \"fadd\")])\n-\n ;; Do addsi3 the way expand_binop would do if we didn't have one.  This\n ;; generates better code.  We have the anonymous addsi3 pattern below in\n ;; case combine wants to make it.\n@@ -5407,25 +5419,22 @@\n ;; Optimize sign-extension of SImode loads.  This shows up in the wake of\n ;; reload when converting fp->int.\n \n-;(define_peephole2\n-;  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-;        (match_operand:SI 1 \"memory_operand\" \"m\"))\n-;   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n-;        (sign_extend:DI (match_dup 0)))]\n-;  \"rtx_equal_p (operands[0], operands[2])\n-;   || reg_dead_p (insn, operands[0])\"\n-;  [(set (match_dup 2)\n-;\t(sign_extend:DI (match_dup 1)))]\n-;  \"\")\n-;\n-;(define_peephole2\n-;  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-;        (match_operand:SI 1 \"hard_fp_register_operand\" \"f\"))\n-;   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n-;        (sign_extend:DI (match_dup 0)))]\n-;  \"TARGET_FIX\n-;   && (rtx_equal_p (operands[0], operands[2])\n-;       || reg_dead_p (insn, operands[0]))\"\n-;  [(set (match_dup 2)\n-;\t(sign_extend:DI (match_dup 1)))]\n-;  \"\")\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (match_operand:SI 1 \"memory_operand\" \"m\"))\n+   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n+        (sign_extend:DI (match_dup 0)))]\n+  \"dead_or_set_p (next_nonnote_insn (insn), operands[0])\"\n+  [(set (match_dup 2)\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (match_operand:SI 1 \"hard_fp_register_operand\" \"f\"))\n+   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n+        (sign_extend:DI (match_dup 0)))]\n+  \"TARGET_FIX && dead_or_set_p (next_nonnote_insn (insn), operands[0])\"\n+  [(set (match_dup 2)\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"\")"}]}