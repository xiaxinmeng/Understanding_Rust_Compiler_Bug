{"sha": "d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcwZTlkODE1NjRjNjlkYmNmMDNlYTE1MzlkZjdiNDE2YTJkZTRjMQ==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2007-10-11T17:56:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-11T17:56:31Z"}, "message": "stl_heap.h (__push_heap, [...]): Use _GLIBCXX_MOVE.\n\n2007-10-11  Chris Jefferson  <chris@bubblescope.net>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_heap.h (__push_heap, push_heap, __adjust_heap,\n\tmake_heap): Use _GLIBCXX_MOVE.\n\t(__pop_heap): Likewise, adjust signature.\n\t(pop_heap): Adjust __pop_heap call.\n\t* include/bits/stl_algo.h (__heap_select): Likewise.\n\t* testsuite/25_algorithms/heap/moveable.cc: Remove dg-require-rvalref.\n\t* testsuite/25_algorithms/partial_sort/moveable.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r129237", "tree": {"sha": "88c9b54801385de6a404e2cc14a4caf41c761fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c9b54801385de6a404e2cc14a4caf41c761fc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29b747611f60e5aa30b43734ac3bdd5745b09ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b747611f60e5aa30b43734ac3bdd5745b09ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b747611f60e5aa30b43734ac3bdd5745b09ea4"}], "stats": {"total": 108, "additions": 62, "deletions": 46}, "files": [{"sha": "34c00f7c270af16be0192399d4a483a0205fd5ae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "patch": "@@ -1,3 +1,14 @@\n+2007-10-11  Chris Jefferson  <chris@bubblescope.net>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_heap.h (__push_heap, push_heap, __adjust_heap,\n+\tmake_heap): Use _GLIBCXX_MOVE.\n+\t(__pop_heap): Likewise, adjust signature.\n+\t(pop_heap): Adjust __pop_heap call.\n+\t* include/bits/stl_algo.h (__heap_select): Likewise.\n+\t* testsuite/25_algorithms/heap/moveable.cc: Remove dg-require-rvalref.\n+\t* testsuite/25_algorithms/partial_sort/moveable.cc: Likewise.\n+\n 2007-10-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/33734"}, {"sha": "1b1d214964b3c582faf9232b01203ff133543ae1", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "patch": "@@ -1628,13 +1628,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  _RandomAccessIterator __middle,\n \t\t  _RandomAccessIterator __last)\n     {\n-      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-\t_ValueType;\n-\n       std::make_heap(__first, __middle);\n       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)\n \tif (*__i < *__first)\n-\t  std::__pop_heap(__first, __middle, __i, _ValueType(*__i));\n+\t  std::__pop_heap(__first, __middle, __i);\n     }\n \n   /**\n@@ -1648,13 +1645,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  _RandomAccessIterator __middle,\n \t\t  _RandomAccessIterator __last, _Compare __comp)\n     {\n-      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-\t_ValueType;\n-\n       std::make_heap(__first, __middle, __comp);\n       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)\n \tif (__comp(*__i, *__first))\n-\t  std::__pop_heap(__first, __middle, __i, _ValueType(*__i), __comp);\n+\t  std::__pop_heap(__first, __middle, __i, __comp);\n     }\n \n   // partial_sort"}, {"sha": "1fd9f7a11605309683c957cd41d1e3ba9a4ac907", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "patch": "@@ -62,6 +62,7 @@\n #define _STL_HEAP_H 1\n \n #include <debug/debug.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -121,11 +122,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Distance __parent = (__holeIndex - 1) / 2;\n       while (__holeIndex > __topIndex && *(__first + __parent) < __value)\n \t{\n-\t  *(__first + __holeIndex) = *(__first + __parent);\n+\t  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));\n \t  __holeIndex = __parent;\n \t  __parent = (__holeIndex - 1) / 2;\n \t}\n-      *(__first + __holeIndex) = __value;\n+      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);\n     }\n \n   /**\n@@ -153,12 +154,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_heap(__first, __last - 1);\n \n+      _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n       std::__push_heap(__first, _DistanceType((__last - __first) - 1),\n-\t\t       _DistanceType(0), _ValueType(*(__last - 1)));\n+\t\t       _DistanceType(0), _GLIBCXX_MOVE(__value));\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance, typename _Tp,\n-\t    typename _Compare>\n+\t   typename _Compare>\n     void\n     __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,\n \t\t_Distance __topIndex, _Tp __value, _Compare __comp)\n@@ -167,11 +169,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       while (__holeIndex > __topIndex\n \t     && __comp(*(__first + __parent), __value))\n \t{\n-\t  *(__first + __holeIndex) = *(__first + __parent);\n+\t  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));\n \t  __holeIndex = __parent;\n \t  __parent = (__holeIndex - 1) / 2;\n \t}\n-      *(__first + __holeIndex) = __value;\n+      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);\n     }\n \n   /**\n@@ -201,8 +203,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_heap_pred(__first, __last - 1, __comp);\n \n+      _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n       std::__push_heap(__first, _DistanceType((__last - __first) - 1),\n-\t\t       _DistanceType(0), _ValueType(*(__last - 1)), __comp);\n+\t\t       _DistanceType(0), _GLIBCXX_MOVE(__value), __comp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance, typename _Tp>\n@@ -217,28 +220,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __secondChild = 2 * (__secondChild + 1);\n \t  if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))\n \t    __secondChild--;\n-\t  *(__first + __holeIndex) = *(__first + __secondChild);\n+\t  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));\n \t  __holeIndex = __secondChild;\n \t}\n       if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)\n \t{\n \t  __secondChild = 2 * (__secondChild + 1);\n-\t  *(__first + __holeIndex) = *(__first + (__secondChild - 1));\n+\t  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first\n+\t\t\t\t\t\t     + (__secondChild - 1)));\n \t  __holeIndex = __secondChild - 1;\n \t}\n-      std::__push_heap(__first, __holeIndex, __topIndex, __value);\n+      std::__push_heap(__first, __holeIndex, __topIndex,\n+\t\t       _GLIBCXX_MOVE(__value));\n     }\n \n-  template<typename _RandomAccessIterator, typename _Tp>\n+  template<typename _RandomAccessIterator>\n     inline void\n     __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t       _RandomAccessIterator __result, _Tp __value)\n+\t       _RandomAccessIterator __result)\n     {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+\t_ValueType;\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n-\t_Distance;\n-      *__result = *__first;\n-      std::__adjust_heap(__first, _Distance(0), _Distance(__last - __first),\n-\t\t\t __value);\n+\t_DistanceType;\n+\n+      _ValueType __value = _GLIBCXX_MOVE(*__result);\n+      *__result = _GLIBCXX_MOVE(*__first);\n+      std::__adjust_heap(__first, _DistanceType(0),\n+\t\t\t _DistanceType(__last - __first),\n+\t\t\t _GLIBCXX_MOVE(__value));\n     }\n \n   /**\n@@ -264,8 +274,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_heap(__first, __last);\n \n-      std::__pop_heap(__first, __last - 1, __last - 1,\n-\t\t      _ValueType(*(__last - 1)));\n+      std::__pop_heap(__first, __last - 1, __last - 1);\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance,\n@@ -282,28 +291,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  if (__comp(*(__first + __secondChild),\n \t\t     *(__first + (__secondChild - 1))))\n \t    __secondChild--;\n-\t  *(__first + __holeIndex) = *(__first + __secondChild);\n+\t  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));\n \t  __holeIndex = __secondChild;\n \t}\n       if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)\n \t{\n \t  __secondChild = 2 * (__secondChild + 1);\n-\t  *(__first + __holeIndex) = *(__first + (__secondChild - 1));\n+\t  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first\n+\t\t\t\t\t\t     + (__secondChild - 1)));\n \t  __holeIndex = __secondChild - 1;\n \t}\n-      std::__push_heap(__first, __holeIndex, __topIndex, __value, __comp);\n+      std::__push_heap(__first, __holeIndex, __topIndex, \n+\t\t       _GLIBCXX_MOVE(__value), __comp);      \n     }\n \n-  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>\n+  template<typename _RandomAccessIterator, typename _Compare>\n     inline void\n     __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t       _RandomAccessIterator __result, _Tp __value, _Compare __comp)\n+\t       _RandomAccessIterator __result, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+\t_ValueType;\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n-\t_Distance;\n-      *__result = *__first;\n-      std::__adjust_heap(__first, _Distance(0), _Distance(__last - __first),\n-\t\t\t __value, __comp);\n+\t_DistanceType;\n+\n+      _ValueType __value = _GLIBCXX_MOVE(*__result);\n+      *__result = _GLIBCXX_MOVE(*__first);\n+      std::__adjust_heap(__first, _DistanceType(0),\n+\t\t\t _DistanceType(__last - __first),\n+\t\t\t _GLIBCXX_MOVE(__value), __comp);\n     }\n \n   /**\n@@ -322,17 +338,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     pop_heap(_RandomAccessIterator __first,\n \t     _RandomAccessIterator __last, _Compare __comp)\n     {\n-      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-\t_ValueType;\n-\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n-      std::__pop_heap(__first, __last - 1, __last - 1,\n-\t\t      _ValueType(*(__last - 1)), __comp);\n+      std::__pop_heap(__first, __last - 1, __last - 1, __comp);\n     }\n \n   /**\n@@ -365,8 +377,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _DistanceType __parent = (__len - 2) / 2;\n       while (true)\n \t{\n-\t  std::__adjust_heap(__first, __parent, __len,\n-\t\t\t     _ValueType(*(__first + __parent)));\n+\t  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));\n+\t  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value));\n \t  if (__parent == 0)\n \t    return;\n \t  __parent--;\n@@ -405,8 +417,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _DistanceType __parent = (__len - 2) / 2;\n       while (true)\n \t{\n-\t  std::__adjust_heap(__first, __parent, __len,\n-\t\t\t     _ValueType(*(__first + __parent)), __comp);\n+\t  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));\n+\t  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),\n+\t\t\t     __comp);\n \t  if (__parent == 0)\n \t    return;\n \t  __parent--;"}, {"sha": "ee04793e66e483b4c180258dfbfd16722d59bb12", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc?ref=d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "patch": "@@ -1,4 +1,3 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2007 Free Software Foundation, Inc."}, {"sha": "74a95d9e1a83ed07d46eabc80e7de9c36e82c5da", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc?ref=d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "patch": "@@ -1,4 +1,3 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2007 Free Software Foundation, Inc."}]}