{"sha": "32d8123cd6ce87acb557aec230e8359051316f9f", "node_id": "C_kwDOANBUbNoAKDMyZDgxMjNjZDZjZTg3YWNiNTU3YWVjMjMwZTgzNTkwNTEzMTZmOWY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-22T12:46:23Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-22T12:46:23Z"}, "message": "c++ modules: partial variable template specializations [PR106826]\n\nWith partial variable template specializations, it looks like we\nstream the VAR_DECL (i.e. the DECL_TEMPLATE_RESULT of the corresponding\nTEMPLATE_DECL) since process_partial_specialization adds it to the\nspecializations table, but we end up never streaming the corresponding\nTEMPLATE_DECL itself that's reachable only from the primary template's\nDECL_TEMPLATE_SPECIALIZATIONS list, which leads to this list being\nincomplete on stream-in.\n\nThe modules machinery already has special logic for streaming partial\nspecializations of class templates; this patch attempts to generalize\nit to handle those of variable templates as well.\n\n\tPR c++/106826\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (trees_out::decl_value): Use get_template_info in\n\tthe MK_partial case to handle both VAR_DECL and TYPE_DECL.\n\t(trees_out::key_mergeable): Likewise.\n\t(trees_in::key_mergeable): Likewise.\n\t(has_definition): Consider DECL_INITIAL of a partial variable\n\ttemplate specialization.\n\t(depset::hash::make_dependency): Handle partial variable template\n\tspecializations too.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/partial-2_a.C: New test.\n\t* g++.dg/modules/partial-2_b.C: New test.", "tree": {"sha": "17846c76f1efa66fdfaa1a5e08c0d1fbe6266342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17846c76f1efa66fdfaa1a5e08c0d1fbe6266342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32d8123cd6ce87acb557aec230e8359051316f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d8123cd6ce87acb557aec230e8359051316f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d8123cd6ce87acb557aec230e8359051316f9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d8123cd6ce87acb557aec230e8359051316f9f/comments", "author": null, "committer": null, "parents": [{"sha": "26607a63da99226a020e3318468139a672a14153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26607a63da99226a020e3318468139a672a14153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26607a63da99226a020e3318468139a672a14153"}], "stats": {"total": 96, "additions": 82, "deletions": 14}, "files": [{"sha": "f23832cb56aedd299f3e0564cbbf3ad84535900d", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d8123cd6ce87acb557aec230e8359051316f9f/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d8123cd6ce87acb557aec230e8359051316f9f/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=32d8123cd6ce87acb557aec230e8359051316f9f", "patch": "@@ -7789,8 +7789,9 @@ trees_out::decl_value (tree decl, depset *dep)\n \t    }\n \t  else\n \t    {\n-\t      tree_node (CLASSTYPE_TI_TEMPLATE (TREE_TYPE (inner)));\n-\t      tree_node (CLASSTYPE_TI_ARGS (TREE_TYPE (inner)));\n+\t      tree ti = get_template_info (inner);\n+\t      tree_node (TI_TEMPLATE (ti));\n+\t      tree_node (TI_ARGS (ti));\n \t    }\n \t}\n       tree_node (get_constraints (decl));\n@@ -10625,9 +10626,10 @@ trees_out::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n \n \tcase MK_partial:\n \t  {\n+\t    tree ti = get_template_info (inner);\n \t    key.constraints = get_constraints (inner);\n-\t    key.ret = CLASSTYPE_TI_TEMPLATE (TREE_TYPE (inner));\n-\t    key.args = CLASSTYPE_TI_ARGS (TREE_TYPE (inner));\n+\t    key.ret = TI_TEMPLATE (ti);\n+\t    key.args = TI_ARGS (ti);\n \t  }\n \t  break;\n \t}\n@@ -10866,8 +10868,8 @@ trees_in::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n \t       spec; spec = TREE_CHAIN (spec))\n \t    {\n \t      tree tmpl = TREE_VALUE (spec);\n-\t      if (template_args_equal (key.args,\n-\t\t\t\t       CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl)))\n+\t      tree ti = get_template_info (tmpl);\n+\t      if (template_args_equal (key.args, TI_ARGS (ti))\n \t\t  && cp_tree_equal (key.constraints,\n \t\t\t\t    get_constraints\n \t\t\t\t    (DECL_TEMPLATE_RESULT (tmpl))))\n@@ -11381,8 +11383,7 @@ has_definition (tree decl)\n \n     case VAR_DECL:\n       if (DECL_LANG_SPECIFIC (decl)\n-\t  && DECL_TEMPLATE_INFO (decl)\n-\t  && DECL_USE_TEMPLATE (decl) < 2)\n+\t  && DECL_TEMPLATE_INFO (decl))\n \treturn DECL_INITIAL (decl);\n       else\n \t{\n@@ -12498,11 +12499,14 @@ depset::hash::make_dependency (tree decl, entity_kind ek)\n \n   if (!dep)\n     {\n-      if (DECL_IMPLICIT_TYPEDEF_P (decl)\n-\t  /* ... not an enum, for instance.  */\n-\t  && RECORD_OR_UNION_TYPE_P (TREE_TYPE (decl))\n-\t  && TYPE_LANG_SPECIFIC (TREE_TYPE (decl))\n-\t  && CLASSTYPE_USE_TEMPLATE (TREE_TYPE (decl)) == 2)\n+      if ((DECL_IMPLICIT_TYPEDEF_P (decl)\n+\t   /* ... not an enum, for instance.  */\n+\t   && RECORD_OR_UNION_TYPE_P (TREE_TYPE (decl))\n+\t   && TYPE_LANG_SPECIFIC (TREE_TYPE (decl))\n+\t   && CLASSTYPE_USE_TEMPLATE (TREE_TYPE (decl)) == 2)\n+\t  || (VAR_P (decl)\n+\t      && DECL_LANG_SPECIFIC (decl)\n+\t      && DECL_USE_TEMPLATE (decl) == 2))\n \t{\n \t  /* A partial or explicit specialization. Partial\n \t     specializations might not be in the hash table, because\n@@ -12515,7 +12519,7 @@ depset::hash::make_dependency (tree decl, entity_kind ek)\n \t     dep_hash, and then convert the dep we just found into a\n \t     redirect.  */\n \n-\t  tree ti = TYPE_TEMPLATE_INFO (TREE_TYPE (decl));\n+\t  tree ti = get_template_info (decl);\n \t  tree tmpl = TI_TEMPLATE (ti);\n \t  tree partial = NULL_TREE;\n \t  for (tree spec = DECL_TEMPLATE_SPECIALIZATIONS (tmpl);"}, {"sha": "2681bb59ce8cba3512a40535d14c3bab8b1b5cfd", "filename": "gcc/testsuite/g++.dg/modules/partial-2_a.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d8123cd6ce87acb557aec230e8359051316f9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d8123cd6ce87acb557aec230e8359051316f9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_a.C?ref=32d8123cd6ce87acb557aec230e8359051316f9f", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/106826\n+// { dg-additional-options -fmodules-ts }\n+// { dg-module-cmi pr106826 }\n+export module pr106826;\n+\n+template<class T> constexpr bool is_reference_v = false;\n+template<class T> constexpr bool is_reference_v<T&> = true;\n+template<class T> constexpr bool is_reference_v<T&&> = true;\n+\n+struct A {\n+  template<class T> static constexpr bool is_reference_v = false;\n+};\n+\n+template<class T> constexpr bool A::is_reference_v<T&> = true;\n+template<class T> constexpr bool A::is_reference_v<T&&> = true;\n+\n+#if __cpp_concepts\n+namespace concepts {\n+  template<class T> bool is_reference_v;\n+\n+  template<class T> requires __is_same(T, T&)\n+  constexpr bool is_reference_v<T> = true;\n+\n+  template<class T> requires __is_same(T, T&&) && (!__is_same(T, T&))\n+  constexpr bool is_reference_v<T> = true;\n+\n+  template<class T> requires (!__is_same(T, T&)) && (!__is_same(T, T&&))\n+  constexpr bool is_reference_v<T> = false;\n+\n+  struct A {\n+    template<class T> static bool is_reference_v;\n+  };\n+\n+  template<class T> requires __is_same(T, T&)\n+  constexpr bool A::is_reference_v<T> = true;\n+\n+  template<class T> requires __is_same(T, T&&) && (!__is_same(T, T&))\n+  constexpr bool A::is_reference_v<T> = true;\n+\n+  template<class T> requires (!__is_same(T, T&)) && (!__is_same(T, T&&))\n+  constexpr bool A::is_reference_v<T> = false;\n+}\n+#endif"}, {"sha": "0af41ef5e5e4ecf6e5485c5b684c1bbf10d67519", "filename": "gcc/testsuite/g++.dg/modules/partial-2_b.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32d8123cd6ce87acb557aec230e8359051316f9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32d8123cd6ce87acb557aec230e8359051316f9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpartial-2_b.C?ref=32d8123cd6ce87acb557aec230e8359051316f9f", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/106826\n+// { dg-additional-options -fmodules-ts }\n+module pr106826;\n+\n+static_assert(is_reference_v<int&>);\n+static_assert(is_reference_v<int&&>);\n+static_assert(!is_reference_v<int>);\n+\n+static_assert(A::is_reference_v<long&>);\n+static_assert(A::is_reference_v<long&&>);\n+static_assert(!A::is_reference_v<long>);\n+\n+#if __cpp_concepts\n+static_assert(concepts::is_reference_v<char&>);\n+static_assert(concepts::is_reference_v<char&&>);\n+static_assert(!concepts::is_reference_v<char>);\n+\n+static_assert(concepts::A::is_reference_v<bool&>);\n+static_assert(concepts::A::is_reference_v<bool&&>);\n+static_assert(!concepts::A::is_reference_v<bool>);\n+#endif"}]}