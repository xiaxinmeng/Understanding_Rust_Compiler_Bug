{"sha": "3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I5NjJlYTBmN2E1MmIyYTllYmJhMDRkZjMzNDEwZDNkZmZkMmM5MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-02-19T01:20:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-02-19T01:20:56Z"}, "message": "divtab.c, [...]: Follow spelling conventions.\n\n\t* config/sh/divtab.c, config/sh/sh.c, config/sh/sh.h,\n\tconfig/sh/sh.md: Follow spelling conventions.\n\nFrom-SVN: r122117", "tree": {"sha": "b5474906ade2f9314a40a481ce9a66187787518a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5474906ade2f9314a40a481ce9a66187787518a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/comments", "author": null, "committer": null, "parents": [{"sha": "49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e7a9d4b821c982a55f9783b7c15cb4bedc5548"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "641704a601b6cc1a9c187659bb128ddbc314352b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "patch": "@@ -1,3 +1,8 @@\n+2007-02-19  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/sh/divtab.c, config/sh/sh.c, config/sh/sh.h,\n+\tconfig/sh/sh.md: Follow spelling conventions.\n+\n 2007-02-18  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/28173"}, {"sha": "b955da93bc9d2c32ea0c571dd80306182f70a60b", "filename": "gcc/config/sh/divtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fdivtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fdivtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fdivtab.c?ref=3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "patch": "@@ -83,7 +83,7 @@ static double note_defect3 (int val, double d2, double y2d, double x)\n     }\n }\n \n-/* This function assumes 32 bit integers.  */\n+/* This function assumes 32-bit integers.  */\n static double\n calc_defect (double x, int constant, int factor)\n {"}, {"sha": "bb2776f1c894e7f826c3a07598c73357bb650232", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "patch": "@@ -3702,7 +3702,7 @@ broken_move (rtx insn)\n       if (GET_CODE (pat) == PARALLEL)\n \tpat = XVECEXP (pat, 0, 0);\n       if (GET_CODE (pat) == SET\n-\t  /* We can load any 8 bit value if we don't care what the high\n+\t  /* We can load any 8-bit value if we don't care what the high\n \t     order bits end up as.  */\n \t  && GET_MODE (SET_DEST (pat)) != QImode\n \t  && (CONSTANT_P (SET_SRC (pat))\n@@ -9651,7 +9651,7 @@ struct builtin_description\n \n /* describe number and signedness of arguments; arg[0] == result\n    (1: unsigned, 2: signed, 4: don't care, 8: pointer 0: no argument */\n-/* 9: 64 bit pointer, 10: 32 bit pointer */\n+/* 9: 64-bit pointer, 10: 32-bit pointer */\n static const char signature_args[][4] =\n {\n #define SH_BLTIN_V2SI2 0"}, {"sha": "d76f97b764bb8772f2aa26b6a0da023c35047367", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "patch": "@@ -1550,8 +1550,8 @@ extern enum reg_class reg_class_from_letter[];\n     Bsc: SCRATCH - for the scratch register in movsi_ie in the\n \t fldi0 / fldi0 cases\n    C: Constants other than only CONST_INT (constraint len == 3)\n-    Css: signed 16 bit constant, literal or symbolic\n-    Csu: unsigned 16 bit constant, literal or symbolic\n+    Css: signed 16-bit constant, literal or symbolic\n+    Csu: unsigned 16-bit constant, literal or symbolic\n     Csy: label or symbol\n     Cpg: non-explicit constants that can be directly loaded into a general\n \t purpose register in PIC code.  like 's' except we don't allow"}, {"sha": "810e99dc018d6ea0bf71048bb7690a7f5b4f0e75", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "patch": "@@ -206,7 +206,7 @@\n ;; store\tto memory\n ;; fstore\tfloating point register to memory\n ;; move\t\tgeneral purpose register to register\n-;; movi8\t8 bit immediate to general purpose register\n+;; movi8\t8-bit immediate to general purpose register\n ;; mt_group\tother sh4 mt instructions\n ;; fmove\tregister to register, floating point\n ;; smpy\t\tword precision integer multiply\n@@ -263,7 +263,7 @@\n ;; store_media\tSHmedia general register store instructions\n ;; mcmp_media\tSHmedia multimedia compare, absolute, saturating ops\n ;; mac_media\tSHmedia mac-style fixed point operations\n-;; d2mpy_media\tSHmedia: two 32 bit integer multiplies\n+;; d2mpy_media\tSHmedia: two 32-bit integer multiplies\n ;; atrans_media\tSHmedia approximate transcendental functions\n ;; ustore_media\tSHmedia unaligned stores\n ;; nil\t\tno-op move, will be deleted."}]}