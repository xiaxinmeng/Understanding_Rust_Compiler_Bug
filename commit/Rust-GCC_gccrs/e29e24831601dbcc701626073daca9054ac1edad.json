{"sha": "e29e24831601dbcc701626073daca9054ac1edad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5ZTI0ODMxNjAxZGJjYzcwMTYyNjA3M2RhY2E5MDU0YWMxZWRhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-19T10:54:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-19T10:54:36Z"}, "message": "[multiple changes]\n\n2009-06-19  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_type.ads, sem_ch12.adb: Minor reformatting\n\n\t* s-wchcnv.adb (UTF_32_To_Char_Sequence): Handle invalid data properly\n\n2009-06-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Build_Wrapper_Spec): Handle properly an overridden\n\tprimitive operation of a rivate extension whose controlling argument\n\tis an out parameter.\n\n\t* sem.adb (Walk_Library_Units): exclude generic package declarations\n\tfrom check.\n\nFrom-SVN: r148696", "tree": {"sha": "3dc69a796350c5398ef3695ee47179b993e295a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc69a796350c5398ef3695ee47179b993e295a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e29e24831601dbcc701626073daca9054ac1edad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29e24831601dbcc701626073daca9054ac1edad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29e24831601dbcc701626073daca9054ac1edad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29e24831601dbcc701626073daca9054ac1edad/comments", "author": null, "committer": null, "parents": [{"sha": "c3b74b8ac872668b2a5f5804b48e4b27949de70f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b74b8ac872668b2a5f5804b48e4b27949de70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b74b8ac872668b2a5f5804b48e4b27949de70f"}], "stats": {"total": 132, "additions": 75, "deletions": 57}, "files": [{"sha": "64768dd9e35e083bc77fe9653b275470841d6e69", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e29e24831601dbcc701626073daca9054ac1edad", "patch": "@@ -1,3 +1,18 @@\n+2009-06-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_type.ads, sem_ch12.adb: Minor reformatting\n+\n+\t* s-wchcnv.adb (UTF_32_To_Char_Sequence): Handle invalid data properly\n+\n+2009-06-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Wrapper_Spec): Handle properly an overridden\n+\tprimitive operation of a rivate extension whose controlling argument\n+\tis an out parameter.\n+\n+\t* sem.adb (Walk_Library_Units): exclude generic package declarations\n+\tfrom check.\n+\n 2009-06-19  Thomas Quinot  <quinot@adacore.com>\n \n \t* i-vxwoio.ads: Add comments"}, {"sha": "aa69402723a46959c136448c86921e60f05ed89f", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=e29e24831601dbcc701626073daca9054ac1edad", "patch": "@@ -2073,14 +2073,15 @@ package body Exp_Ch9 is\n                 Parameter_Type      => Obj_Param_Typ);\n \n          --  If we are dealing with a primitive declared between two views,\n-         --  create a default parameter.\n+         --  create a default parameter. The mode of the parameter must\n+         --  match that of the primitive operation.\n \n          else pragma Assert (Is_Private_Primitive_Subprogram (Subp_Id));\n             Obj_Param :=\n               Make_Parameter_Specification (Loc,\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uO),\n-                In_Present => True,\n+                In_Present  => In_Present (Parent (First_Entity (Subp_Id))),\n                 Out_Present => Ekind (Subp_Id) /= E_Function,\n                   Parameter_Type => New_Reference_To (Obj_Typ, Loc));\n          end if;"}, {"sha": "893232e605a96ffc6dd0cacb8038ca46ba1f4456", "filename": "gcc/ada/s-wchcnv.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fs-wchcnv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fs-wchcnv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchcnv.adb?ref=e29e24831601dbcc701626073daca9054ac1edad", "patch": "@@ -284,6 +284,14 @@ package body System.WCh_Cnv is\n       U      : Unsigned_32;\n \n    begin\n+      --  Raise CE for invalid UTF_32_Code\n+\n+      if not Val'Valid then\n+         raise Constraint_Error;\n+      end if;\n+\n+      --  Processing depends on encoding mode\n+\n       case EM is\n \n          when WCEM_Hex =>\n@@ -425,10 +433,6 @@ package body System.WCh_Cnv is\n \n                if Val > 16#FFFF# then\n                   if Val > 16#00FF_FFFF# then\n-                     if Val > 16#7FFF_FFFF# then\n-                        raise Constraint_Error;\n-                     end if;\n-\n                      Out_Char (Hexc (Val / 16 ** 7));\n                      Out_Char (Hexc ((Val / 16 ** 6) mod 16));\n                   end if;"}, {"sha": "58521e9c727f3b5065fd69a7b99ada620cdc9b33", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=e29e24831601dbcc701626073daca9054ac1edad", "patch": "@@ -1600,13 +1600,13 @@ package body Sem is\n                begin\n                   if not Done (Get_Cunit_Unit_Number (Withed_Unit)) then\n                      if not Nkind_In\n-                              (Unit (Withed_Unit), N_Package_Body,\n-                                                   N_Subprogram_Body)\n+                              (Unit (Withed_Unit),\n+                                 N_Generic_Package_Declaration,\n+                                 N_Package_Body,\n+                                 N_Subprogram_Body)\n                      then\n                         Write_Unit_Name\n-                          (Unit_Name\n-                            (Get_Cunit_Unit_Number\n-                             (Withed_Unit)));\n+                          (Unit_Name (Get_Cunit_Unit_Number (Withed_Unit)));\n                         Write_Str (\" not yet walked!\");\n \n                         if Get_Cunit_Unit_Number (Withed_Unit) = Unit_Num then"}, {"sha": "a07832cbd1515c4c131ef63139ec7f63796aea69", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e29e24831601dbcc701626073daca9054ac1edad", "patch": "@@ -4360,7 +4360,7 @@ package body Sem_Ch12 is\n       Old_Main   : constant Entity_Id := Cunit_Entity (Main_Unit);\n \n    begin\n-      --  A new compilation unit node is built for the instance declaration.\n+      --  A new compilation unit node is built for the instance declaration\n \n       Decl_Cunit :=\n         Make_Compilation_Unit (Sloc (N),"}, {"sha": "879432435fd37fbe759cc3eac2a89543bfd1a9bb", "filename": "gcc/ada/sem_type.ads", "status": "modified", "additions": 43, "deletions": 45, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fsem_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29e24831601dbcc701626073daca9054ac1edad/gcc%2Fada%2Fsem_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.ads?ref=e29e24831601dbcc701626073daca9054ac1edad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,12 +55,12 @@ package Sem_Type is\n    --  Corresponding to the set of interpretations for a given overloadable\n    --  identifier, there is a set of possible types corresponding to the types\n    --  that the overloaded call may return. We keep a 1-to-1 correspondence\n-   --  between interpretations and types: for user-defined subprograms the\n-   --  type is the declared return type. For operators, the type is determined\n-   --  by the type of the arguments. If the arguments themselves are\n-   --  overloaded, we enter the operator name in the names table for each\n-   --  possible result type. In most cases, arguments are not overloaded and\n-   --  only one interpretation is present anyway.\n+   --  between interpretations and types: for user-defined subprograms the type\n+   --  is the declared return type. For operators, the type is determined by\n+   --  the type of the arguments. If the arguments themselves are overloaded,\n+   --  we enter the operator name in the names table for each possible result\n+   --  type. In most cases, arguments are not overloaded and only one\n+   --  interpretation is present anyway.\n \n    type Interp is record\n       Nam         : Entity_Id;\n@@ -97,37 +97,36 @@ package Sem_Type is\n    --  Invoked by gnatf when processing multiple files\n \n    procedure Collect_Interps (N : Node_Id);\n-   --  Invoked when the name N has more than one visible interpretation.\n-   --  This is the high level routine which accumulates the possible\n-   --  interpretations of the node. The first meaning and type of N have\n-   --  already been stored in N. If the name is an expanded name, the homonyms\n-   --  are only those that belong to the same scope.\n+   --  Invoked when the name N has more than one visible interpretation. This\n+   --  is the high level routine which accumulates the possible interpretations\n+   --  of the node. The first meaning and type of N have already been stored\n+   --  in N. If the name is an expanded name, the homonyms are only those that\n+   --  belong to the same scope.\n \n    function Is_Invisible_Operator\n      (N    : Node_Id;\n       T    : Entity_Id)\n       return Boolean;\n-   --  Check whether a predefined operation with universal operands appears\n-   --  in a context in which the operators of the expected type are not\n-   --  visible.\n+   --  Check whether a predefined operation with universal operands appears in\n+   --  a context in which the operators of the expected type are not visible.\n \n    procedure List_Interps (Nam : Node_Id; Err : Node_Id);\n-   --  List candidate interpretations of an overloaded name. Used for\n-   --  various error reports.\n+   --  List candidate interpretations of an overloaded name. Used for various\n+   --  error reports.\n \n    procedure Add_One_Interp\n      (N         : Node_Id;\n       E         : Entity_Id;\n       T         : Entity_Id;\n       Opnd_Type : Entity_Id := Empty);\n    --  Add (E, T) to the list of interpretations of the node being resolved.\n-   --  For calls and operators, i.e. for nodes that have a name field,\n-   --  E is an overloadable entity, and T is its type. For constructs such\n-   --  as indexed expressions, the caller sets E equal to T, because the\n-   --  overloading comes from other fields, and the node itself has no name\n-   --  to resolve. Hidden denotes whether an interpretation has been disabled\n-   --  by an abstract operator. Add_One_Interp includes semantic processing to\n-   --  deal with adding entries that hide one another etc.\n+   --  For calls and operators, i.e. for nodes that have a name field, E is an\n+   --  overloadable entity, and T is its type. For constructs such as indexed\n+   --  expressions, the caller sets E equal to T, because the overloading comes\n+   --  from other fields, and the node itself has no name to resolve. Hidden\n+   --  denotes whether an interpretation has been disabled by an abstract\n+   --  operator. Add_One_Interp includes semantic processing to deal with\n+   --  adding entries that hide one another etc.\n \n    --  For operators, the legality of the operation depends on the visibility\n    --  of T and its scope. If the operator is an equality or comparison, T is\n@@ -166,10 +165,9 @@ package Sem_Type is\n    --  New_N, its new copy. It has no effect in the non-overloaded case.\n \n    function Covers (T1, T2 : Entity_Id) return Boolean;\n-   --  This is the basic type compatibility routine. T1 is the expected\n-   --  type, imposed by context, and T2 is the actual type. The processing\n-   --  reflects both the definition of type coverage and the rules\n-   --  for operand matching.\n+   --  This is the basic type compatibility routine. T1 is the expected type,\n+   --  imposed by context, and T2 is the actual type. The processing reflects\n+   --  both the definition of type coverage and the rules for operand matching.\n \n    function Disambiguate\n      (N      : Node_Id;\n@@ -188,24 +186,24 @@ package Sem_Type is\n    --  opposed to an operator, type and mode conformance are required.\n \n    function Find_Unique_Type (L : Node_Id; R : Node_Id) return Entity_Id;\n-   --  Used in second pass of resolution,  for equality and comparison nodes.\n-   --  L is the left operand, whose type is known to be correct, and R is\n-   --  the right operand,  which has one interpretation compatible with that\n-   --  of L. Return the type intersection of the two.\n+   --  Used in second pass of resolution, for equality and comparison nodes. L\n+   --  is the left operand, whose type is known to be correct, and R is the\n+   --  right operand, which has one interpretation compatible with that of L.\n+   --  Return the type intersection of the two.\n \n    function Has_Compatible_Type\n      (N    : Node_Id;\n       Typ  : Entity_Id)\n       return Boolean;\n-   --  Verify that some interpretation of the node N has a type compatible\n-   --  with Typ. If N is not overloaded, then its unique type must be\n-   --  compatible with Typ. Otherwise iterate through the interpretations\n-   --  of N looking for a compatible one.\n+   --  Verify that some interpretation of the node N has a type compatible with\n+   --  Typ. If N is not overloaded, then its unique type must be compatible\n+   --  with Typ. Otherwise iterate through the interpretations of N looking for\n+   --  a compatible one.\n \n    function Hides_Op (F : Entity_Id; Op : Entity_Id) return Boolean;\n-   --  A user-defined function hides a predefined operator if it is\n-   --  matches the signature of the operator, and is declared in an\n-   --  open scope, or in the scope of the result type.\n+   --  A user-defined function hides a predefined operator if it is matches the\n+   --  signature of the operator, and is declared in an open scope, or in the\n+   --  scope of the result type.\n \n    function Interface_Present_In_Ancestor\n      (Typ   : Entity_Id;\n@@ -241,15 +239,15 @@ package Sem_Type is\n    --  real type, or a one dimensional array with a discrete component type.\n \n    function Valid_Boolean_Arg (T : Entity_Id) return Boolean;\n-   --  A valid argument of a boolean operator is either some boolean type,\n-   --  or a one-dimensional array of boolean type.\n+   --  A valid argument of a boolean operator is either some boolean type, or a\n+   --  one-dimensional array of boolean type.\n \n    procedure Write_Interp_Ref (Map_Ptr : Int);\n-   --  Debugging procedure to display entry in Interp_Map. Would not be\n-   --  needed if it were possible to debug instantiations of Table.\n+   --  Debugging procedure to display entry in Interp_Map. Would not be needed\n+   --  if it were possible to debug instantiations of Table.\n \n    procedure Write_Overloads (N : Node_Id);\n-   --  Debugging procedure to output info on possibly overloaded entities\n-   --  for specified node.\n+   --  Debugging procedure to output info on possibly overloaded entities for\n+   --  specified node.\n \n end Sem_Type;"}]}