{"sha": "d15ae5d695685e78f3529cf49a0250900ad1e97a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1YWU1ZDY5NTY4NWU3OGYzNTI5Y2Y0OWEwMjUwOTAwYWQxZTk3YQ==", "commit": {"author": {"name": "James A. Morrison", "email": "ja2morri@uwaterloo.ca", "date": "2003-12-05T06:34:50Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-12-05T06:34:50Z"}, "message": "Patch from James Morrison\n* treelang.texi (What is GNU Treelang?): Fix a typo.\n(Lexical Syntax): Create an itemize list of keywords.  Add commas to\nparagraph defining names.\n\nFrom-SVN: r74310", "tree": {"sha": "387823b3449adc06de47108390778e7c5578c6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/387823b3449adc06de47108390778e7c5578c6a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d15ae5d695685e78f3529cf49a0250900ad1e97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15ae5d695685e78f3529cf49a0250900ad1e97a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15ae5d695685e78f3529cf49a0250900ad1e97a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15ae5d695685e78f3529cf49a0250900ad1e97a/comments", "author": null, "committer": null, "parents": [{"sha": "e3869806bb75b1dcb3c8e459b070739acaae3f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3869806bb75b1dcb3c8e459b070739acaae3f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3869806bb75b1dcb3c8e459b070739acaae3f93"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "36865e31e1f6832b8690ea7b88e522a755abe033", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ae5d695685e78f3529cf49a0250900ad1e97a/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ae5d695685e78f3529cf49a0250900ad1e97a/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=d15ae5d695685e78f3529cf49a0250900ad1e97a", "patch": "@@ -1,3 +1,9 @@\n+2003-12-04  James A. Morrison  <ja2morri@uwaterloo.ca>\n+\n+\t* treelang.texi (What is GNU Treelang?): Fix a typo.\n+\t(Lexical Syntax): Create an itemize list of keywords.  Add commas to\n+\tparagraph defining names.\n+\n 2003-11-26  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (treelang.tags): Create TAGS.sub files in each"}, {"sha": "77e520374ef14dc38cd18249499df9a3f8613960", "filename": "gcc/treelang/treelang.texi", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ae5d695685e78f3529cf49a0250900ad1e97a/gcc%2Ftreelang%2Ftreelang.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ae5d695685e78f3529cf49a0250900ad1e97a/gcc%2Ftreelang%2Ftreelang.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.texi?ref=d15ae5d695685e78f3529cf49a0250900ad1e97a", "patch": "@@ -370,7 +370,7 @@ double_plus_one\n @{\n // aaa is a variable, of type integer and allocated at the start of the function\n   automatic int aaa;\n-// set aaa to the value returned from aaa, when passed arg7 and arg7 as the two parameters\n+// set aaa to the value returned from add, when passed arg7 and arg7 as the two parameters\n   aaa=add(arg7, arg7);\n   aaa=add(aaa, aaa);\n   aaa=subtract(subtract(aaa, arg7), arg7) + 1;\n@@ -419,39 +419,59 @@ x=1; // Set X to 1\n @end smallexample\n \n @item\n-Keywords consist of any reserved words or symbols as described\n-later. The list of keywords follows:\n+Keywords consist of any of the following reserved words or symbols:\n \n-@smallexample\n-@{ - used to start the statements in a function\n-@} - used to end the statements in a function\n-( - start list of function arguments, or to change the precedence of operators in an expression\n-) - end list or prioritized operators in expression\n-, - used to separate parameters in a function prototype or in a function call \n-; - used to end a statement\n-+ - addition\n-- - subtraction\n-= - assignment\n-== - equality test\n-if - begin IF statement\n-else - begin 'else' portion of IF statement\n-static - indicate variable is permanent, or function has file scope only\n-automatic - indicate that variable is allocated for the life of the function\n-external_reference - indicate that variable or function is defined in another file\n-external_definition - indicate that variable or function is to be accessible from other files\n-int - variable is an integer (same as C int) \n-char - variable is a character (same as C char)\n-unsigned - variable is unsigned. If this is not present, the variable is signed\n-return - start function return statement\n-void - used as function type to indicate function returns nothing\n-@end smallexample\n+@itemize @bullet\n+@item @{\n+used to start the statements in a function\n+@item @}\n+used to end the statements in a function\n+@item (\n+start list of function arguments, or to change the precedence of operators in an expression\n+@item )\n+end list or prioritized operators in expression\n+@item ,\n+used to separate parameters in a function prototype or in a function call \n+@item ;\n+used to end a statement\n+@item +\n+addition\n+@item - \n+subtraction\n+@item = \n+assignment\n+@item ==\n+equality test\n+@item if\n+begin IF statement\n+@item else\n+begin 'else' portion of IF statement\n+@item static\n+indicate variable is permanent, or function has file scope only\n+@item automatic\n+indicate that variable is allocated for the life of the function\n+@item external_reference\n+indicate that variable or function is defined in another file\n+@item external_definition\n+indicate that variable or function is to be accessible from other files\n+@item int\n+variable is an integer (same as C int) \n+@item char\n+variable is a character (same as C char)\n+@item unsigned\n+variable is unsigned. If this is not present, the variable is signed\n+@item return\n+start function return statement\n+@item void\n+used as function type to indicate function returns nothing\n+@end itemize\n \n \n @item\n-Names consist of any letter or \"_\" followed by any number of letters or\n-numbers or \"_\". \"$\" is not allowed in a name. All names must be globally\n-unique - the same name may not be used twice in any context - and must\n-not be a keyword. Names and keywords are case sensitive. For example:\n+Names consist of any letter or \"_\" followed by any number of letters,\n+numbers, or \"_\".  \"$\" is not allowed in a name. All names must be globally\n+unique, i.e. may not be used twice in any context, and must\n+not be a keyword.  Names and keywords are case sensitive. For example:\n \n @smallexample\n a A _a a_ IF_X"}]}