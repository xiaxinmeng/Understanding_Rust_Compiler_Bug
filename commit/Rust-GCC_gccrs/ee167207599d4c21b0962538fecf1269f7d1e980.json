{"sha": "ee167207599d4c21b0962538fecf1269f7d1e980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxNjcyMDc1OTlkNGMyMWIwOTYyNTM4ZmVjZjEyNjlmN2QxZTk4MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-02-21T07:27:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-02-21T07:27:14Z"}, "message": "re PR tree-optimization/18663 (ACATS ICE cc1221d expected integer_cst, have nop_expr in tree_int_cst_lt, at tree.c:3779)\n\n\tPR tree-optimization/18663\n\t* tree-ssa-dom.c (extract_range_from_cond): Return 0\n\tif the type has variable bounds.\n\nFrom-SVN: r95320", "tree": {"sha": "9afc5eb8f6b3f32272ea733644e2f80a2300694c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9afc5eb8f6b3f32272ea733644e2f80a2300694c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee167207599d4c21b0962538fecf1269f7d1e980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee167207599d4c21b0962538fecf1269f7d1e980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee167207599d4c21b0962538fecf1269f7d1e980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee167207599d4c21b0962538fecf1269f7d1e980/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a811c6725905343415f6ba018837deae6da940a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a811c6725905343415f6ba018837deae6da940a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a811c6725905343415f6ba018837deae6da940a1"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "f807935067fdce5503213a4625caadd30891c544", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee167207599d4c21b0962538fecf1269f7d1e980/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee167207599d4c21b0962538fecf1269f7d1e980/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee167207599d4c21b0962538fecf1269f7d1e980", "patch": "@@ -1,3 +1,9 @@\n+2005-02-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR tree-optimization/18663\n+\t* tree-ssa-dom.c (extract_range_from_cond): Return 0\n+\tif the type has variable bounds.\n+\n 2005-02-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gcse.c: Remove an obsolete comment."}, {"sha": "88c7f92fd4bbdc166552a304f9bb143730374d7a", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee167207599d4c21b0962538fecf1269f7d1e980/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee167207599d4c21b0962538fecf1269f7d1e980/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=ee167207599d4c21b0962538fecf1269f7d1e980", "patch": "@@ -3189,16 +3189,19 @@ extract_range_from_cond (tree cond, tree *hi_p, tree *lo_p, int *inverted_p)\n   tree op1 = TREE_OPERAND (cond, 1);\n   tree high, low, type;\n   int inverted;\n-  \n+\n+  type = TREE_TYPE (op1);\n+\n   /* Experiments have shown that it's rarely, if ever useful to\n      record ranges for enumerations.  Presumably this is due to\n      the fact that they're rarely used directly.  They are typically\n      cast into an integer type and used that way.  */\n-  if (TREE_CODE (TREE_TYPE (op1)) != INTEGER_TYPE)\n+  if (TREE_CODE (type) != INTEGER_TYPE\n+      /* We don't know how to deal with types with variable bounds.  */\n+      || TREE_CODE (TYPE_MIN_VALUE (type)) != INTEGER_CST\n+      || TREE_CODE (TYPE_MAX_VALUE (type)) != INTEGER_CST)\n     return 0;\n \n-  type = TREE_TYPE (op1);\n-\n   switch (TREE_CODE (cond))\n     {\n     case EQ_EXPR:"}]}