{"sha": "de70bb20ba3864deca9c9cba9edf646ae1d8a226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU3MGJiMjBiYTM4NjRkZWNhOWM5Y2JhOWVkZjY0NmFlMWQ4YTIyNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-16T12:31:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-16T12:31:49Z"}, "message": "tree-ssa-structalias.c (do_ds_constraint): Stores in global variables add them to ESCAPED.\n\n2009-06-16  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (do_ds_constraint): Stores in global\n\tvariables add them to ESCAPED.\n\t(find_func_aliases): Do not make all indirectly stored values\n\tescaped.\n\n\t* gcc.dg/tree-ssa/pta-escape-1.c: New testcase.\n\t* gcc.dg/tree-ssa/pta-escape-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-27.c: Likewise.\n\nFrom-SVN: r148525", "tree": {"sha": "5a544b381b9b4cb81b15ed5e414068721bdaae3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a544b381b9b4cb81b15ed5e414068721bdaae3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de70bb20ba3864deca9c9cba9edf646ae1d8a226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de70bb20ba3864deca9c9cba9edf646ae1d8a226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de70bb20ba3864deca9c9cba9edf646ae1d8a226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de70bb20ba3864deca9c9cba9edf646ae1d8a226/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "daa0eeb8ab04b67053944c8990643e1efe8c913b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa0eeb8ab04b67053944c8990643e1efe8c913b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa0eeb8ab04b67053944c8990643e1efe8c913b"}], "stats": {"total": 225, "additions": 192, "deletions": 33}, "files": [{"sha": "524f71e8fcad1dc2497fd5f255a936c7702b9f10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de70bb20ba3864deca9c9cba9edf646ae1d8a226", "patch": "@@ -1,3 +1,10 @@\n+2009-06-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (do_ds_constraint): Stores in global\n+\tvariables add them to ESCAPED.\n+\t(find_func_aliases): Do not make all indirectly stored values\n+\tescaped.\n+\n 2009-06-16  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* config/i386/winnt.c (i386_pe_encode_section_info): Update call to"}, {"sha": "fd2ca7357dcaa558615b14a04192487154fe53c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de70bb20ba3864deca9c9cba9edf646ae1d8a226", "patch": "@@ -1,3 +1,10 @@\n+2009-06-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pta-escape-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/pta-escape-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-escape-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-27.c: Likewise.\n+\n 2009-06-16  Martin Jambor  <mjambor@suse.cz>\n \n \t* testsuite/gcc.c-torture/compile/pr40432.c: New file."}, {"sha": "ee8a84bd06fcbff4e5b325c05714ff461101e838", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c?ref=de70bb20ba3864deca9c9cba9edf646ae1d8a226", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-alias-details\" } */\n+\n+int *i;\n+void __attribute__((noinline))\n+foo (void)\n+{\n+  *i = 1;\n+}\n+int __attribute__((noinline))\n+bar(int local_p)\n+{\n+  int x = 0;\n+  int *j;\n+  int **p;\n+  if (local_p)\n+    p = &j;\n+  else\n+    p = &i;\n+  *p = &x;  /* This makes x escape.  */\n+  foo ();\n+  return x;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  int k = 2;\n+  i = &k;\n+  if (bar (1) != 0 || k != 1)\n+    abort ();\n+  if (bar (0) != 1)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"ESCAPED, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "ad5ed2e50de0b6b8d5f7aac103806528331a17f2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c?ref=de70bb20ba3864deca9c9cba9edf646ae1d8a226", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-alias-details\" } */\n+\n+int *i;\n+void __attribute__((noinline))\n+foo (void)\n+{\n+  *i = 1;\n+}\n+int __attribute__((noinline))\n+bar(int local_p, int **q)\n+{\n+  int x = 0;\n+  int *j;\n+  int **p;\n+  if (local_p)\n+    p = &j;\n+  else\n+    p = q;\n+  *p = &x;  /* This makes x escape.  */\n+  foo ();\n+  return x;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  int k = 2;\n+  int **q = &i;\n+  i = &k;\n+  if (bar (1, q) != 0 || k != 1)\n+    abort ();\n+  if (bar (0, q) != 1)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"ESCAPED, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "ea11c8a3d7fef2ed07f04840f30099efb8ceaf72", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c?ref=de70bb20ba3864deca9c9cba9edf646ae1d8a226", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-alias-details\" } */\n+\n+int *i;\n+void __attribute__((noinline))\n+foo (void)\n+{\n+  *i = 1;\n+}\n+int **__attribute__((noinline,const))\n+foobar (void)\n+{\n+  return &i;\n+}\n+int __attribute__((noinline))\n+bar(int local_p)\n+{\n+  int x = 0;\n+  int *j;\n+  int **p;\n+  if (local_p)\n+    p = &j;\n+  else\n+    p = foobar();\n+  *p = &x;  /* This makes x escape.  */\n+  foo ();\n+  return x;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  int k = 2;\n+  i = &k;\n+  if (bar (1) != 0 || k != 1)\n+    abort ();\n+  if (bar (0) != 1)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"ESCAPED, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "39368707ce998a86d2836e46289b15588b6779b5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-27.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-27.c?ref=de70bb20ba3864deca9c9cba9edf646ae1d8a226", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+int *q;\n+void __attribute__((noinline))\n+bar (void)\n+{\n+  *q = 1;\n+}\n+int foo(int which_p)\n+{\n+  int x = 0;\n+  int *i,*j;\n+  int **p;\n+  if (which_p)\n+    p = &i;\n+  else\n+    p = &j;\n+  *p = &x;\n+  bar ();\n+  return x;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced x with 0\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "62a1e43309eecea79a35a8abc4bdec8770ca7c6f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de70bb20ba3864deca9c9cba9edf646ae1d8a226/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=de70bb20ba3864deca9c9cba9edf646ae1d8a226", "patch": "@@ -1664,6 +1664,19 @@ do_ds_constraint (constraint_t c, bitmap delta)\n       unsigned int t;\n       HOST_WIDE_INT fieldoffset = v->offset + loff;\n \n+      /* If v is a NONLOCAL then this is an escape point.  */\n+      if (j == nonlocal_id)\n+\t{\n+\t  t = find (escaped_id);\n+\t  if (add_graph_edge (graph, t, rhs)\n+\t      && bitmap_ior_into (get_varinfo (t)->solution, sol)\n+\t      && !TEST_BIT (changed, t))\n+\t    {\n+\t      SET_BIT (changed, t);\n+\t      changed_count++;\n+\t    }\n+\t}\n+\n       if (v->is_special_var)\n \tcontinue;\n \n@@ -1680,18 +1693,24 @@ do_ds_constraint (constraint_t c, bitmap delta)\n \t  if (v->may_have_pointers)\n \t    {\n \t      t = find (v->id);\n-\t      if (add_graph_edge (graph, t, rhs))\n+\t      if (add_graph_edge (graph, t, rhs)\n+\t\t  && bitmap_ior_into (get_varinfo (t)->solution, sol)\n+\t\t  && !TEST_BIT (changed, t))\n \t\t{\n-\t\t  if (bitmap_ior_into (get_varinfo (t)->solution, sol))\n-\t\t    {\n-\t\t      if (t == rhs)\n-\t\t\tsol = get_varinfo (rhs)->solution;\n-\t\t      if (!TEST_BIT (changed, t))\n-\t\t\t{\n-\t\t\t  SET_BIT (changed, t);\n-\t\t\t  changed_count++;\n-\t\t\t}\n-\t\t    }\n+\t\t  SET_BIT (changed, t);\n+\t\t  changed_count++;\n+\t\t}\n+\t    }\n+\t  /* If v is a global variable then this is an escape point.  */\n+\t  if (is_global_var (v->decl))\n+\t    {\n+\t      t = find (escaped_id);\n+\t      if (add_graph_edge (graph, t, rhs)\n+\t\t  && bitmap_ior_into (get_varinfo (t)->solution, sol)\n+\t\t  && !TEST_BIT (changed, t))\n+\t\t{\n+\t\t  SET_BIT (changed, t);\n+\t\t  changed_count++;\n \t\t}\n \t    }\n \n@@ -3734,31 +3753,15 @@ find_func_aliases (gimple origt)\n \t\tprocess_constraint (new_constraint (*c, *c2));\n \t    }\n \t}\n+      /* If there is a store to a global variable the rhs escapes.  */\n+      if ((lhsop = get_base_address (lhsop)) != NULL_TREE\n+\t  && DECL_P (lhsop)\n+\t  && is_global_var (lhsop))\n+\tmake_escape_constraint (rhsop);\n     }\n \n   stmt_escape_type = is_escape_site (t);\n-  if (stmt_escape_type == ESCAPE_STORED_IN_GLOBAL)\n-    {\n-      gcc_assert (is_gimple_assign (t));\n-      if (gimple_assign_rhs_code (t) == ADDR_EXPR)\n-\t{\n-\t  tree rhs = gimple_assign_rhs1 (t);\n-\t  tree base = get_base_address (TREE_OPERAND (rhs, 0));\n-\t  if (base\n-\t      && (!DECL_P (base)\n-\t\t  || !is_global_var (base)))\n-\t    make_escape_constraint (rhs);\n-\t}\n-      else if (get_gimple_rhs_class (gimple_assign_rhs_code (t))\n-\t       == GIMPLE_SINGLE_RHS)\n-\t{\n-\t  if (could_have_pointers (gimple_assign_rhs1 (t)))\n-\t    make_escape_constraint (gimple_assign_rhs1 (t));\n-\t}\n-      else\n-\tgcc_unreachable ();\n-    }\n-  else if (stmt_escape_type == ESCAPE_BAD_CAST)\n+  if (stmt_escape_type == ESCAPE_BAD_CAST)\n     {\n       gcc_assert (is_gimple_assign (t));\n       gcc_assert (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (t))"}]}