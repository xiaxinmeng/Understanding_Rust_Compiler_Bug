{"sha": "86771dcbc33d34860313f5a123ecec172e59453d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY3NzFkY2JjMzNkMzQ4NjAzMTNmNWExMjNlY2VjMTcyZTU5NDUzZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-03-23T22:03:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-03-23T22:03:51Z"}, "message": "PR c++/78489 - wrong SFINAE behavior.\n\n\tPR c++/84489\n\t* pt.c (type_unification_real): Don't defer substitution failure.\n\nFrom-SVN: r258824", "tree": {"sha": "4120c8efa3ca8166e60808383eab03b86f9ac498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4120c8efa3ca8166e60808383eab03b86f9ac498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86771dcbc33d34860313f5a123ecec172e59453d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86771dcbc33d34860313f5a123ecec172e59453d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86771dcbc33d34860313f5a123ecec172e59453d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86771dcbc33d34860313f5a123ecec172e59453d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "532c7a45847f3401e26fa2f07e52613891c80718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532c7a45847f3401e26fa2f07e52613891c80718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532c7a45847f3401e26fa2f07e52613891c80718"}], "stats": {"total": 113, "additions": 90, "deletions": 23}, "files": [{"sha": "09cc7dac812444a907413f628aba8de3903ed3f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86771dcbc33d34860313f5a123ecec172e59453d", "patch": "@@ -1,3 +1,10 @@\n+2018-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/78489 - wrong SFINAE behavior.\n+\n+\tPR c++/84489\n+\t* pt.c (type_unification_real): Don't defer substitution failure.\n+\n 2018-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85015"}, {"sha": "9cf03f45e24e50055912d0807b1b9e1976fbb950", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=86771dcbc33d34860313f5a123ecec172e59453d", "patch": "@@ -19995,41 +19995,49 @@ type_unification_real (tree tparms,\n \t  if (targ || tparm == error_mark_node)\n \t    continue;\n \t  tree parm = TREE_VALUE (tparm);\n-\n-\t  tsubst_flags_t fcomplain = complain;\n-\t  if (saw_undeduced == 1)\n-\t    {\n-\t      /* When saw_undeduced == 1, substitution into parm and arg might\n-\t\t fail or not replace all template parameters, and that's\n-\t\t fine.  */\n-\t      fcomplain = tf_none;\n-\t      if (TREE_CODE (parm) == PARM_DECL\n-\t\t  && uses_template_parms (TREE_TYPE (parm)))\n-\t\tcontinue;\n-\t    }\n-\n \t  tree arg = TREE_PURPOSE (tparm);\n \t  reopen_deferring_access_checks (*checks);\n \t  location_t save_loc = input_location;\n \t  if (DECL_P (parm))\n \t    input_location = DECL_SOURCE_LOCATION (parm);\n-\n \t  if (saw_undeduced == 1)\n \t    ++processing_template_decl;\n-\t  arg = tsubst_template_arg (arg, full_targs, fcomplain, NULL_TREE);\n-\t  if (saw_undeduced == 1)\n-\t    --processing_template_decl;\n \n-\t  if (arg != error_mark_node && !uses_template_parms (arg))\n-\t    arg = convert_template_argument (parm, arg, full_targs, complain,\n-\t\t\t\t\t     i, NULL_TREE);\n-\t  else if (saw_undeduced == 1)\n-\t    arg = NULL_TREE;\n+\t  if (saw_undeduced == 1\n+\t      && TREE_CODE (parm) == PARM_DECL\n+\t      && uses_template_parms (TREE_TYPE (parm)))\n+\t    {\n+\t      /* The type of this non-type parameter depends on undeduced\n+\t\t parameters.  Don't try to use its default argument yet,\n+\t\t but do check whether the arguments we already have cause\n+\t\t substitution failure, so that that happens before we try\n+\t\t later default arguments (78489).  */\n+\t      tree type = tsubst (TREE_TYPE (parm), full_targs, complain,\n+\t\t\t\t  NULL_TREE);\n+\t      if (type == error_mark_node)\n+\t\targ = error_mark_node;\n+\t      else\n+\t\targ = NULL_TREE;\n+\t    }\n \t  else\n-\t    arg = error_mark_node;\n+\t    {\n+\t      arg = tsubst_template_arg (arg, full_targs, complain, NULL_TREE);\n+\n+\t      if (!uses_template_parms (arg))\n+\t\targ = convert_template_argument (parm, arg, full_targs,\n+\t\t\t\t\t\t complain, i, NULL_TREE);\n+\t      else if (saw_undeduced == 1)\n+\t\targ = NULL_TREE;\n+\t      else\n+\t\targ = error_mark_node;\n+\t    }\n+\n+\t  if (saw_undeduced == 1)\n+\t    --processing_template_decl;\n \t  input_location = save_loc;\n \t  *checks = get_deferred_access_checks ();\n \t  pop_deferring_access_checks ();\n+\n \t  if (arg == error_mark_node)\n \t    return 1;\n \t  else if (arg)"}, {"sha": "023d9afdf70110bbdb792d9d13ca452bed128049", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg4a.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg4a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg4a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg4a.C?ref=86771dcbc33d34860313f5a123ecec172e59453d", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/55724\n+// { dg-do compile { target c++11 } }\n+\n+template<int N> struct S {};\n+template<typename T = int, T N = 42> void f(S<N>) {}\n+int main() { S<1> s; f(s); }"}, {"sha": "cfb4dc0b9a73ec5c88456f28af634c151eea22e9", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae60.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae60.C?ref=86771dcbc33d34860313f5a123ecec172e59453d", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/78489\n+// { dg-do compile { target c++11 } }\n+\n+template <bool P, class T = void> struct enable_if { using type = T; };\n+template <class T> struct enable_if<false, T> {};\n+\n+template <class Dummy> struct use_type { using type = int; };\n+\n+template <bool Pred>\n+struct get_type {\n+    static_assert(Pred, \"\");\n+    using type = int;\n+};\n+\n+template <bool Val,\n+              class      = typename enable_if<Val>::type, // Evaluation/Substitution should end here\n+              class ValT = typename get_type<Val>::type,  // This should not be instantiated\n+              typename use_type<ValT>::type = 0           // This NTTP causes ValT to be required\n+            >\n+constexpr bool test(int) { return false; }\n+\n+template <bool>\n+constexpr bool test(long) { return true; }\n+\n+static_assert(test<false>(0), \"\"); // should call test(long)"}, {"sha": "9e7145305e02b5755cb18617ee00901a536dcb0e", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae61.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86771dcbc33d34860313f5a123ecec172e59453d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae61.C?ref=86771dcbc33d34860313f5a123ecec172e59453d", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/78489\n+// { dg-do compile { target c++11 } }\n+\n+template <bool Pred, class T> struct enable_if { typedef T type; };\n+template <class T> struct enable_if<false, T> {};\n+\n+template <int Idx> struct blows_up { static_assert(Idx != Idx, \"\"); };\n+\n+template <int Idx,\n+           // substitution should fail here\n+          typename enable_if<Idx != Idx, int>::type = 0,\n+          // GCC evaluates this statement\n+          class = typename blows_up<Idx>::type \n+>\n+void Foo() {}\n+\n+// Check the constructor in as SFINAE context\n+template <int I> constexpr auto test(int) -> decltype((Foo<I>(), true)) { return true; }\n+template <int>   constexpr bool test(long) { return false; }\n+\n+static_assert(!test<3>(0), \"\"); // Blows up"}]}