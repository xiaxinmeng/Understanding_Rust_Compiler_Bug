{"sha": "cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3ZGFlMDE3MzRlZWEwZGZiNGMzODdlNGNkNDBlMWY5YTY4MmY1Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-18T20:57:34Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-01T00:56:42Z"}, "message": "c++: CTAD and explicit deduction guides for copy-list-init [PR90210]\n\nThis PR points out that we accept\n\n  template<typename T> struct tuple { tuple(T); }; // #1\n  template<typename T> explicit tuple(T t) -> tuple<T>; // #2\n  tuple t = { 1 };\n\ndespite the 'explicit' deduction guide in a copy-list-initialization\ncontext.  That's because in deduction_guides_for we first find the\nuser-defined deduction guide (#2), and then ctor_deduction_guides_for\ncreates artificial deduction guides: one from the tuple(T) constructor and\na copy guide.  So we end up with these three guides:\n\n  (1) template<class T> tuple(T) -> tuple<T> [DECL_NONCONVERTING_P]\n  (2) template<class T> tuple(tuple<T>) -> tuple<T>\n  (3) template<class T> tuple(T) -> tuple<T>\n\nThen, in do_class_deduction, we prune this set, and get rid of (1).\nThen overload resolution selects (3) and we succeed.\n\nBut [over.match.list]p1 says \"In copy-list-initialization, if an explicit\nconstructor is chosen, the initialization is ill-formed.\"  It also goes\non to say that this differs from other situations where only converting\nconstructors are considered for copy-initialization.  Therefore for\nlist-initialization we consider explicit constructors and complain if one\nis chosen.  E.g. convert_like_internal/ck_user can give an error.\n\nSo my logic runs that we should not prune the deduction_guides_for guides\nin a copy-list-initialization context, and only complain if we actually\nchoose an explicit deduction guide.  This matches clang++/EDG/msvc++.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/90210\n\t* pt.c (do_class_deduction): Don't prune explicit deduction guides\n\tin copy-list-initialization.  In copy-list-initialization, if an\n\texplicit deduction guide was selected, give an error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/90210\n\t* g++.dg/cpp1z/class-deduction73.C: New test.", "tree": {"sha": "4c98b0601dc585df10374119507e2a15d623f7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c98b0601dc585df10374119507e2a15d623f7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660bfe61d4045c7931a7c1c3a166d0a2cd199412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660bfe61d4045c7931a7c1c3a166d0a2cd199412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660bfe61d4045c7931a7c1c3a166d0a2cd199412"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "869477f2c2e844ee2202244a32207916625695e3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "patch": "@@ -28977,13 +28977,15 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   tree type = TREE_TYPE (tmpl);\n \n   bool try_list_ctor = false;\n+  bool list_init_p = false;\n \n   releasing_vec rv_args = NULL;\n   vec<tree,va_gc> *&args = *&rv_args;\n   if (init == NULL_TREE)\n     args = make_tree_vector ();\n   else if (BRACE_ENCLOSED_INITIALIZER_P (init))\n     {\n+      list_init_p = true;\n       try_list_ctor = TYPE_HAS_LIST_CTOR (type);\n       if (try_list_ctor && CONSTRUCTOR_NELTS (init) == 1)\n \t{\n@@ -29016,9 +29018,10 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   if (cands == error_mark_node)\n     return error_mark_node;\n \n-  /* Prune explicit deduction guides in copy-initialization context.  */\n+  /* Prune explicit deduction guides in copy-initialization context (but\n+     not copy-list-initialization).  */\n   bool elided = false;\n-  if (flags & LOOKUP_ONLYCONVERTING)\n+  if (!list_init_p && (flags & LOOKUP_ONLYCONVERTING))\n     {\n       for (lkp_iterator iter (cands); !elided && iter; ++iter)\n \tif (DECL_NONCONVERTING_P (STRIP_TEMPLATE (*iter)))\n@@ -29087,18 +29090,42 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n       --cp_unevaluated_operand;\n     }\n \n-  if (call == error_mark_node\n-      && (complain & tf_warning_or_error))\n+  if (call == error_mark_node)\n     {\n-      error (\"class template argument deduction failed:\");\n+      if (complain & tf_warning_or_error)\n+\t{\n+\t  error (\"class template argument deduction failed:\");\n \n-      ++cp_unevaluated_operand;\n-      call = build_new_function_call (cands, &args, complain | tf_decltype);\n-      --cp_unevaluated_operand;\n+\t  ++cp_unevaluated_operand;\n+\t  call = build_new_function_call (cands, &args,\n+\t\t\t\t\t  complain | tf_decltype);\n+\t  --cp_unevaluated_operand;\n \n-      if (elided)\n-\tinform (input_location, \"explicit deduction guides not considered \"\n-\t\t\"for copy-initialization\");\n+\t  if (elided)\n+\t    inform (input_location, \"explicit deduction guides not considered \"\n+\t\t    \"for copy-initialization\");\n+\t}\n+      return error_mark_node;\n+    }\n+  /* [over.match.list]/1: In copy-list-initialization, if an explicit\n+     constructor is chosen, the initialization is ill-formed.  */\n+  else if (flags & LOOKUP_ONLYCONVERTING)\n+    {\n+      tree fndecl = cp_get_callee_fndecl_nofold (call);\n+      if (fndecl && DECL_NONCONVERTING_P (fndecl))\n+\t{\n+\t  if (complain & tf_warning_or_error)\n+\t    {\n+\t      // TODO: Pass down location from cp_finish_decl.\n+\t      error (\"class template argument deduction for %qT failed: \"\n+\t\t     \"explicit deduction guide selected in \"\n+\t\t     \"copy-list-initialization\", type);\n+\t      inform (DECL_SOURCE_LOCATION (fndecl),\n+\t\t      \"explicit deduction guide declared here\");\n+\n+\t    }\n+\t  return error_mark_node;\n+\t}\n     }\n \n   /* If CTAD succeeded but the type doesn't have any explicit deduction"}, {"sha": "b37ddedd1bf166effd5bad430f44096cc67fecdd", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction73.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction73.C?ref=cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/90210\n+// { dg-do compile { target c++17 } }\n+\n+template<typename T> struct tuple { tuple(T); };\n+template<typename T> explicit tuple(T t) -> tuple<T>;\n+tuple t = { 1 }; // { dg-error \"explicit deduction guide selected\" }\n+tuple t1 = tuple{ 1 };\n+tuple t2{ 1 };\n+\n+template<typename T> struct A { A(T, T); };\n+template<typename T> explicit A(T, T) -> A<int>;\n+A a = {1, 1}; // { dg-error \"explicit deduction guide selected\" }\n+A a1 = A{1, 1};\n+A a2{1, 1};\n+\n+template<typename T, typename U>\n+struct B {\n+  B(T, U);\n+};\n+template<typename T, typename U>\n+B(T, U) -> B<T, typename U::type>; // SFINAEd-out\n+B b = { 1, 2 }; // OK\n+B b1 = B{ 1, 2 }; // OK\n+B b2{ 1, 2 }; // OK\n+\n+// Overriden implicit default constructor deduction guide:\n+template<typename T>\n+struct C { };\n+explicit C() -> C<int>;\n+C c = {}; // { dg-error \"explicit deduction guide selected\" }\n+C c1 = C{};\n+C c2{};\n+\n+// Overriden copy guide:\n+template<typename T>\n+struct D { };\n+template<typename T> explicit D(D<T>) -> D<T>;\n+D<int> d;\n+D d1 = {d}; // { dg-error \"explicit deduction guide selected\" }\n+D d2 = D{d};\n+D d3{d};"}]}