{"sha": "16ec4ebf00e10e2fd2bc2879e9ede682883951f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZlYzRlYmYwMGUxMGUyZmQyYmMyODc5ZTllZGU2ODI4ODM5NTFmMg==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-08T09:54:39Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-08T09:54:39Z"}, "message": "* debug.h: Use \"tree\" and \"rtx\" throughout.\n\nFrom-SVN: r48629", "tree": {"sha": "4786ab3ee59e62d81b64eb63ab29c0653469be4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4786ab3ee59e62d81b64eb63ab29c0653469be4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16ec4ebf00e10e2fd2bc2879e9ede682883951f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ec4ebf00e10e2fd2bc2879e9ede682883951f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ec4ebf00e10e2fd2bc2879e9ede682883951f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ec4ebf00e10e2fd2bc2879e9ede682883951f2/comments", "author": null, "committer": null, "parents": [{"sha": "489406028d6b27f6484e9c6f3588190652ed943c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489406028d6b27f6484e9c6f3588190652ed943c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489406028d6b27f6484e9c6f3588190652ed943c"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "c792fbec76a082be39f67f0712df91051d17149c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ec4ebf00e10e2fd2bc2879e9ede682883951f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ec4ebf00e10e2fd2bc2879e9ede682883951f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16ec4ebf00e10e2fd2bc2879e9ede682883951f2", "patch": "@@ -1,3 +1,9 @@\n+2002-01-08  Graham Stott  <grahams@redhat.com>\n+\n+\t* debug.h: Use \"tree\" and \"rtx\" throughout.\n+\n+\t* debug.c: Likewise.\n+\n 2002-01-08  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* dbxout.c (dbxout_symbol_location): If a symbol ref is in the"}, {"sha": "75d13bada509d165b8a21e5a0cdb087f561fa6d4", "filename": "gcc/debug.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ec4ebf00e10e2fd2bc2879e9ede682883951f2/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ec4ebf00e10e2fd2bc2879e9ede682883951f2/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=16ec4ebf00e10e2fd2bc2879e9ede682883951f2", "patch": "@@ -1,5 +1,5 @@\n /* Do-nothing debug hooks for GCC.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -54,20 +54,20 @@ debug_nothing_void ()\n \n void\n debug_nothing_tree (decl)\n-     union tree_node *decl ATTRIBUTE_UNUSED;\n+     tree decl ATTRIBUTE_UNUSED;\n {\n }\n \n bool\n debug_true_tree (block)\n-     union tree_node *block ATTRIBUTE_UNUSED;\n+     tree block ATTRIBUTE_UNUSED;\n {\n   return true;\n }\n \n void\n debug_nothing_rtx (insn)\n-     struct rtx_def *insn ATTRIBUTE_UNUSED;\n+     rtx insn ATTRIBUTE_UNUSED;\n {\n }\n "}, {"sha": "1f4349da7afbdc97aa50dc24210a4bfecf1baa6c", "filename": "gcc/debug.h", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ec4ebf00e10e2fd2bc2879e9ede682883951f2/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ec4ebf00e10e2fd2bc2879e9ede682883951f2/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=16ec4ebf00e10e2fd2bc2879e9ede682883951f2", "patch": "@@ -1,5 +1,5 @@\n /* Debug hooks for GCC.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -18,9 +18,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #ifndef GCC_DEBUG_H\n #define GCC_DEBUG_H\n \n-union tree_node;\n-struct rtx_def;\n-\n /* This structure contains hooks for the debug information output\n    functions, accessed through the global instance debug_hooks set in\n    toplev.c according to command line options.  */\n@@ -59,7 +56,7 @@ struct gcc_debug_hooks\n      instructions.  This may not be the case for blocks containing\n      nested functions, since we may actually call such a function even\n      though the BLOCK information is messed up.  Defaults to true.  */\n-  bool (* ignore_block) PARAMS ((union tree_node *));\n+  bool (* ignore_block) PARAMS ((tree));\n \n   /* Record a source file location at (FILE, LINE).  */\n   void (* source_line) PARAMS ((unsigned int line, const char *file));\n@@ -77,7 +74,7 @@ struct gcc_debug_hooks\n   void (* end_epilogue) PARAMS ((void));\n \n   /* Called at start of function DECL, before it is declared.  */\n-  void (* begin_function) PARAMS ((union tree_node *decl));\n+  void (* begin_function) PARAMS ((tree decl));\n \n   /* Record end of function.  LINE is highest line number in function.  */\n   void (* end_function) PARAMS ((unsigned int line));\n@@ -86,24 +83,24 @@ struct gcc_debug_hooks\n      function name (a symbol), its parameters, and the block that\n      makes up the function's body, and the local variables of the\n      function.  */\n-  void (* function_decl) PARAMS ((union tree_node *decl));\n+  void (* function_decl) PARAMS ((tree decl));\n \n   /* Debug information for a global DECL.  Called from toplev.c after\n      compilation proper has finished.  */\n-  void (* global_decl) PARAMS ((union tree_node *decl));\n+  void (* global_decl) PARAMS ((tree decl));\n \n   /* DECL is an inline function, whose body is present, but which is\n      not being output at this point.  */\n-  void (* deferred_inline_function) PARAMS ((union tree_node *decl));\n+  void (* deferred_inline_function) PARAMS ((tree decl));\n \n   /* DECL is an inline function which is about to be emitted out of\n      line.  The hook is useful to, e.g., emit abstract debug info for\n      the inline before it gets mangled by optimization.  */\n-  void (* outlining_inline_function) PARAMS ((union tree_node *decl));\n+  void (* outlining_inline_function) PARAMS ((tree decl));\n \n   /* Called from final_scan_insn for any CODE_LABEL insn whose\n      LABEL_NAME is non-null.  */\n-  void (* label) PARAMS ((struct rtx_def *insn));\n+  void (* label) PARAMS ((rtx));\n };\n \n extern struct gcc_debug_hooks *debug_hooks;\n@@ -120,11 +117,11 @@ extern void debug_nothing_int\n extern void debug_nothing_int_int\n   PARAMS ((unsigned int, unsigned int));\n extern void debug_nothing_tree\n-  PARAMS ((union tree_node *));\n+  PARAMS ((tree));\n extern bool debug_true_tree\n-  PARAMS ((union tree_node *));\n+  PARAMS ((tree));\n extern void debug_nothing_rtx\n-  PARAMS ((struct rtx_def *));\n+  PARAMS ((rtx));\n \n /* Hooks for various debug formats.  */\n extern struct gcc_debug_hooks do_nothing_debug_hooks;"}]}