{"sha": "6a6e71449b1a5b4fa36c99697b65d4710717cd64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE2ZTcxNDQ5YjFhNWI0ZmEzNmM5OTY5N2I2NWQ0NzEwNzE3Y2Q2NA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-07-08T10:20:36Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-07-08T10:20:36Z"}, "message": "re PR testsuite/48727 (FAIL: g++.dg/opt/devirt2.C scan-assembler-times xyzzy 2)\n\n\tPR testsuite/48727\n\t* g++.dg/opt/devirt2.C: Use specific pattern for sparc*-*-*.\n\nFrom-SVN: r176034", "tree": {"sha": "37874fae50161c347514cd4438cecfce3124c1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37874fae50161c347514cd4438cecfce3124c1a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a6e71449b1a5b4fa36c99697b65d4710717cd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6e71449b1a5b4fa36c99697b65d4710717cd64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a6e71449b1a5b4fa36c99697b65d4710717cd64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6e71449b1a5b4fa36c99697b65d4710717cd64/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e923ef4132bd61afa7ca5818281a12ce8fafcdd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e923ef4132bd61afa7ca5818281a12ce8fafcdd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e923ef4132bd61afa7ca5818281a12ce8fafcdd2"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "28d5cf9928e29afbadb1ed49e3711b13d0d85969", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6e71449b1a5b4fa36c99697b65d4710717cd64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6e71449b1a5b4fa36c99697b65d4710717cd64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a6e71449b1a5b4fa36c99697b65d4710717cd64", "patch": "@@ -1,3 +1,8 @@\n+2011-07-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR testsuite/48727\n+\t* g++.dg/opt/devirt2.C: Use specific pattern for sparc*-*-*.\n+\n 2011-07-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49662"}, {"sha": "a16c25ff46a3b374453a97409a59c280ae994f63", "filename": "gcc/testsuite/g++.dg/opt/devirt2.C", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6e71449b1a5b4fa36c99697b65d4710717cd64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6e71449b1a5b4fa36c99697b65d4710717cd64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt2.C?ref=6a6e71449b1a5b4fa36c99697b65d4710717cd64", "patch": "@@ -2,9 +2,14 @@\n // { dg-options \"-O2\" }\n // The IA64 and HPPA compilers generate external declarations in addition\n // to the call so those scans need to be more specific.\n-// { dg-final { scan-assembler-times \"xyzzy\" 2 { target { ! { hppa*-*-* ia64*-*-hpux* } } } } }\n-// { dg-final { scan-assembler-times \"br\\[^\\n\\]*xyzzy\"  2 { target ia64*-*-hpux* } } }\n-// { dg-final { scan-assembler-times \"xyzzy\\[^\\n\\]*,%r\"  2 { target hppa*-*-* } } }\n+// { dg-final { scan-assembler-times \"xyzzy\" 2 { target { ! { hppa*-*-* ia64*-*-hpux* sparc*-*-* } } } } }\n+// { dg-final { scan-assembler-times \"br\\[^\\n\\]*xyzzy\" 2 { target ia64*-*-hpux* } } }\n+// { dg-final { scan-assembler-times \"xyzzy\\[^\\n\\]*,%r\" 2 { target hppa*-*-* } } }\n+// Unless the assembler supports -relax, the 32-bit SPARC compiler generates\n+// sethi/jmp instead of just call, so the scans need to be more specific.\n+// With subexpressions, Tcl regexp -inline -all returns both the complete\n+// match and the subexpressions, so double the count.\n+// { dg-final { scan-assembler-times \"\\(jmp|call\\)\\[^\\n\\]*xyzzy\" 4 { target sparc*-*-* } } }\n \n struct S { S(); virtual void xyzzy(); };\n struct R { int a; S s; R(); };"}]}