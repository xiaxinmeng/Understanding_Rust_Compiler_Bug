{"sha": "ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwYmMyMWJkNjM0YTMzNGJhOGYzMjNjMzlhMTFmMDFkZmRjMmFhZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-01T16:23:49Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-01T20:21:10Z"}, "message": "c++: value-init vs zero-init in expand_aggr_init_1 [PR65816]\n\nIn the case of value-initializing an object of class type T,\n[dcl.init.general]/8 says:\n\n  - if T has either no default constructor ([class.default.ctor]) or\n    a default constructor that is user-provided or deleted, then the\n    object is default-initialized;\n  - otherwise, the object is zero-initialized and ...  if T has a\n    non-trivial default constructor, the object is default-initialized;\n\nBut when determining whether to first zero-initialize the object,\nexpand_aggr_init_1 incorrectly considers the user-providedness of _all_\nconstructors rather than only that of the _default_ constructors.  This\ncauses us to skip the zero-initialization step when the class type has a\ndefaulted default constructor alongside a user-defined constructor.\n\nIt seems the predicate type_has_non_user_provided_default_constructor\naccurately captures the above rule for when to first perform a\nzero-initialization during value-initialization, so this patch adjusts\nexpand_aggr_init_1 to use this predicate instead.\n\n\tPR c++/65816\n\ngcc/cp/ChangeLog:\n\n\t* init.c (expand_aggr_init_1): Check\n\ttype_has_non_user_provided_default_constructor instead of\n\ttype_has_user_provided_constructor.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-delegating3.C: New test.\n\t* g++.dg/cpp0x/dc10.C: New test.\n\t* g++.dg/cpp0x/initlist-base4.C: New test.\n\t* g++.dg/cpp2a/constexpr-init22.C: New test.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/23_containers/deque/allocator/default_init.cc,\n\ttestsuite/23_containers/forward_list/allocator/default_init.cc,\n\ttestsuite/23_containers/list/allocator/default_init.cc,\n\ttestsuite/23_containers/map/allocator/default_init.cc,\n\ttestsuite/23_containers/set/allocator/default_init.cc,\n\ttestsuite/23_containers/vector/allocator/default_init.cc,\n\ttestsuite/23_containers/vector/bool/allocator/default_init.cc:\n\tRemove xfail.", "tree": {"sha": "774b77fbb72a9a6be1526aae6ddc52799e4286c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/774b77fbb72a9a6be1526aae6ddc52799e4286c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/comments", "author": null, "committer": null, "parents": [{"sha": "9f55df63154a39d67ef5b24def7044bf87300831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f55df63154a39d67ef5b24def7044bf87300831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f55df63154a39d67ef5b24def7044bf87300831"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "b11232873000f99e26bfdba72304c3303f7ec5ef", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -2078,9 +2078,9 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n      that's value-initialization.  */\n   if (init == void_type_node)\n     {\n-      /* If the type has data but no user-provided ctor, we need to zero\n+      /* If the type has data but no user-provided default ctor, we need to zero\n \t out the object.  */\n-      if (!type_has_user_provided_constructor (type)\n+      if (type_has_non_user_provided_default_constructor (type)\n \t  && !is_really_empty_class (type, /*ignore_vptr*/true))\n \t{\n \t  tree field_size = NULL_TREE;"}, {"sha": "2263ec894884273a8ad461841566667f871e2b9e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-delegating3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-delegating3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-delegating3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-delegating3.C?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/65816\n+// { dg-do compile { target c++11 } }\n+\n+struct test {\n+  int m;\n+  test() = default;\n+  constexpr test(int) : test() {}\n+};\n+\n+static_assert(test(0).m == 0, \"\");"}, {"sha": "c008a1703e85d18bba862d43021261145fba5334", "filename": "gcc/testsuite/g++.dg/cpp0x/dc10.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc10.C?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/65816\n+// { dg-do run { target c++11 } }\n+\n+void* operator new(decltype(sizeof(int)), void* ptr) { return ptr; }\n+\n+struct test {\n+  int i;\n+  test() = default;\n+  test(int) : test() {}\n+};\n+\n+int main() {\n+  alignas(test) unsigned char space[sizeof(test)];\n+  for (auto& c : space) c = 0xff;\n+\n+  auto ptr = ::new(&space) test(42);\n+  int& i = static_cast<test&>(*ptr).i;\n+  if (i != 0) __builtin_abort();\n+}"}, {"sha": "4a02af92799982f7d43d702aeaec04a350560b64", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-base4.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-base4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-base4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-base4.C?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/65816\n+// { dg-do run { target c++11 } }\n+\n+void* operator new(decltype(sizeof(int)), void* ptr) { return ptr; }\n+\n+struct item { int i; };\n+\n+struct collector : item {\n+  int j;\n+  collector() = default;\n+  collector(int) {}\n+};\n+\n+struct tuple : collector {\n+  tuple() : collector() {}\n+};\n+\n+int main() {\n+  alignas(tuple) unsigned char space[sizeof(tuple)];\n+  for (auto& c : space) c = 0xff;\n+\n+  auto ptr = ::new(&space) tuple;\n+  int& i = static_cast<tuple&>(*ptr).i;\n+  int& j = static_cast<tuple&>(*ptr).j;\n+  if (i != 0 || j != 0) __builtin_abort();\n+}"}, {"sha": "50e4a95dbda24ce0d883a73c9a0028b8ee0b28cb", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init22.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init22.C?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/65816\n+// { dg-do compile { target c++20 } }\n+\n+struct X {\n+  int i;\n+  X() = default;\n+  constexpr X(int) { }\n+};\n+\n+struct Y : X {\n+  constexpr Y() : X() { }\n+};\n+\n+static_assert(Y().i == 0);"}, {"sha": "9428206f2ef537b715ecd16ba6250f5cb0c532c3", "filename": "libstdc++-v3/testsuite/23_containers/deque/allocator/default_init.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fdefault_init.cc?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++11 } }\n // { dg-options \"-O0\" }\n-// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n \n #include <deque>\n #include <testsuite_hooks.h>"}, {"sha": "4298fa5ffa57817c53976a68d797d3d4736b4009", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/default_init.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fdefault_init.cc?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++11 } }\n // { dg-options \"-O0\" }\n-// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n \n #include <forward_list>\n #include <testsuite_hooks.h>"}, {"sha": "03d8cfc89e864a9fcd674fec05cc64c9a59bb4ee", "filename": "libstdc++-v3/testsuite/23_containers/list/allocator/default_init.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fdefault_init.cc?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++11 } }\n // { dg-options \"-O0\" }\n-// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n \n #include <list>\n #include <testsuite_hooks.h>"}, {"sha": "6e3f36d60a4726435d1298af4b265e9d101d3fa0", "filename": "libstdc++-v3/testsuite/23_containers/map/allocator/default_init.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fdefault_init.cc?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++11 } }\n // { dg-options \"-O0\" }\n-// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n \n #include <map>\n #include <testsuite_hooks.h>"}, {"sha": "b031cb81504bbe6fcd38a216d7affc5d841368e2", "filename": "libstdc++-v3/testsuite/23_containers/set/allocator/default_init.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fdefault_init.cc?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++11 } }\n // { dg-options \"-O0\" }\n-// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n \n #include <set>\n #include <testsuite_hooks.h>"}, {"sha": "4673db71b6c7a23afa77abb984fb4a31499884e9", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/default_init.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fdefault_init.cc?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++11 } }\n // { dg-options \"-O0\" }\n-// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n \n #include <vector>\n #include <testsuite_hooks.h>"}, {"sha": "61cc7859d7454f8250e0cded506ad9f86493020b", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/allocator/default_init.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0bc21bd634a334ba8f323c39a11f01dfdc2aae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fdefault_init.cc?ref=ac0bc21bd634a334ba8f323c39a11f01dfdc2aae", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++11 } }\n // { dg-options \"-O0\" }\n-// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n \n #include <vector>\n #include <testsuite_hooks.h>"}]}