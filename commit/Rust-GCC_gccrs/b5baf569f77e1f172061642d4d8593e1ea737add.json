{"sha": "b5baf569f77e1f172061642d4d8593e1ea737add", "node_id": "C_kwDOANBUbNoAKGI1YmFmNTY5Zjc3ZTFmMTcyMDYxNjQyZDRkODU5M2UxZWE3MzdhZGQ", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-03-15T13:46:47Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-03-15T13:49:47Z"}, "message": "rs6000: Fix invalid address passed to __builtin_mma_disassemble_acc [PR104923]\n\nThe mma_disassemble_output_operand predicate is too lenient on the types\nof addresses it will accept, leading to combine creating invalid address\nthat eventually lead to ICEs in LRA.  The solution is to restrict the\naddresses to indirect, indexed or those valid for quad memory accesses.\n\n2022-03-15  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/104923\n\t* config/rs6000/predicates.md (mma_disassemble_output_operand): Restrict\n\tacceptable MEM addresses.\n\ngcc/testsuite/\n\tPR target/104923\n\t* gcc.target/powerpc/pr104923.c: New test.", "tree": {"sha": "a2943ae9ecea3e4900671b163121c443d468d984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2943ae9ecea3e4900671b163121c443d468d984"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5baf569f77e1f172061642d4d8593e1ea737add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5baf569f77e1f172061642d4d8593e1ea737add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5baf569f77e1f172061642d4d8593e1ea737add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5baf569f77e1f172061642d4d8593e1ea737add/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffe9c0a0d3564a6083ea6194eb3374a89c29c085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe9c0a0d3564a6083ea6194eb3374a89c29c085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe9c0a0d3564a6083ea6194eb3374a89c29c085"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "b1fcc69bb6075ba2a92844ba0e0d34cdc0070aaa", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5baf569f77e1f172061642d4d8593e1ea737add/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5baf569f77e1f172061642d4d8593e1ea737add/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=b5baf569f77e1f172061642d4d8593e1ea737add", "patch": "@@ -1277,10 +1277,15 @@\n (define_predicate \"mma_disassemble_output_operand\"\n   (match_code \"reg,subreg,mem\")\n {\n+  if (MEM_P (op))\n+    {\n+      rtx  addr = XEXP (op, 0);\n+      return indexed_or_indirect_address (addr, mode)\n+\t     || quad_address_p (addr, mode, false);\n+    }\n+\n   if (SUBREG_P (op))\n     op = SUBREG_REG (op);\n-  if (!REG_P (op))\n-    return true;\n \n   return vsx_register_operand (op, mode);\n })"}, {"sha": "f1198243df6ad996ce7fae4dfac0afeb5707c267", "filename": "gcc/testsuite/gcc.target/powerpc/pr104923.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5baf569f77e1f172061642d4d8593e1ea737add/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104923.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5baf569f77e1f172061642d4d8593e1ea737add/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104923.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104923.c?ref=b5baf569f77e1f172061642d4d8593e1ea737add", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/104923 */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Make sure we do not ICE on the following test cases.  */\n+\n+void\n+foo (__vector char *dst, __vector_quad *acc, unsigned int n)\n+{\n+  __vector char a[4];\n+  __builtin_mma_disassemble_acc(a, acc);\n+  dst[2 * n] = a[0];\n+}\n+\n+void\n+bar (__vector char *dst, __vector_quad *acc, unsigned int n)\n+{\n+  __vector char a[4];\n+  __builtin_mma_disassemble_acc(a, acc);\n+  dst[3 * n] = a[0];\n+}"}]}