{"sha": "eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhMGFiNmVjNjFmZmU2MzZkNWQ2MjYwMTQzN2Y1ZWZkMmM4NjI3ZA==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2018-05-07T16:13:48Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2018-05-07T16:13:48Z"}, "message": "Rollback bad commits!  Sorry!\n\nFrom-SVN: r260003", "tree": {"sha": "ba5b251e40d7685d9bb682e933059f22c8f5a2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba5b251e40d7685d9bb682e933059f22c8f5a2ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/comments", "author": null, "committer": null, "parents": [{"sha": "b118dfdb6d5ad68c8ff70ea517928c37ebb1fa11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b118dfdb6d5ad68c8ff70ea517928c37ebb1fa11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b118dfdb6d5ad68c8ff70ea517928c37ebb1fa11"}], "stats": {"total": 197, "additions": 43, "deletions": 154}, "files": [{"sha": "6db900cc0cd94fa31289f3354d4d5af3755cbc6f", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "patch": "@@ -2408,7 +2408,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  __v = __v * __v * __v;\n \t\t  __u = __aurng();\n \t\t}\n-\t      while (__u > result_type(1.0) - 0.0331 * __n * __n * __n * __n\n+\t      while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n\n \t\t     && (std::log(__u) > (0.5 * __n * __n + __a1\n \t\t\t\t\t  * (1.0 - __v + std::log(__v)))));\n \n@@ -2429,7 +2429,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  __v = __v * __v * __v;\n \t\t  __u = __aurng();\n \t\t}\n-\t      while (__u > result_type(1.0) - 0.0331 * __n * __n * __n * __n\n+\t      while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n\n \t\t     && (std::log(__u) > (0.5 * __n * __n + __a1\n \t\t\t\t\t  * (1.0 - __v + std::log(__v)))));\n "}, {"sha": "2e2c2c06560680b288cb2617ffce7a53e264ac81", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "patch": "@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ///  Return phase angle of @a z.\n   template<typename _Tp> _Tp arg(const complex<_Tp>&);\n   ///  Return @a z magnitude squared.\n-  template<typename _Tp> _Tp _GLIBCXX_CONSTEXPR norm(const complex<_Tp>&);\n+  template<typename _Tp> _Tp norm(const complex<_Tp>&);\n \n   ///  Return complex conjugate of @a z.\n   template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);\n@@ -322,7 +322,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   //@{\n   ///  Return new complex value @a x plus @a y.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -331,7 +331,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator+(const complex<_Tp>& __x, const _Tp& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -340,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator+(const _Tp& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r = __y;\n@@ -352,7 +352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   //@{\n   ///  Return new complex value @a x minus @a y.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -361,7 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator-(const complex<_Tp>& __x, const _Tp& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -370,7 +370,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator-(const _Tp& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r(__x, -__y.imag());\n@@ -382,7 +382,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   //@{\n   ///  Return new complex value @a x times @a y.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -391,7 +391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    inline _GLIBCXX_CONSTEXPR complex<_Tp>\n+    inline complex<_Tp>\n     operator*(const complex<_Tp>& __x, const _Tp& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -400,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator*(const _Tp& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r = __y;\n@@ -412,7 +412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   //@{\n   ///  Return new complex value @a x divided by @a y.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -421,7 +421,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator/(const complex<_Tp>& __x, const _Tp& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -430,7 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator/(const _Tp& __x, const complex<_Tp>& __y)\n     {\n       complex<_Tp> __r = __x;\n@@ -441,48 +441,48 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   ///  Return @a x.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator+(const complex<_Tp>& __x)\n     { return __x; }\n \n   ///  Return complex negation of @a x.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline complex<_Tp>\n+    inline complex<_Tp>\n     operator-(const complex<_Tp>& __x)\n     {  return complex<_Tp>(-__x.real(), -__x.imag()); }\n \n   //@{\n   ///  Return true if @a x is equal to @a y.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     { return __x.real() == __y.real() && __x.imag() == __y.imag(); }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator==(const complex<_Tp>& __x, const _Tp& __y)\n     { return __x.real() == __y && __x.imag() == _Tp(); }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator==(const _Tp& __x, const complex<_Tp>& __y)\n     { return __x == __y.real() && _Tp() == __y.imag(); }\n   //@}\n \n   //@{\n   ///  Return false if @a x is equal to @a y.\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator!=(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     { return __x.real() != __y.real() || __x.imag() != __y.imag(); }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator!=(const complex<_Tp>& __x, const _Tp& __y)\n     { return __x.real() != __y || __x.imag() != _Tp(); }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator!=(const _Tp& __x, const complex<_Tp>& __y)\n     { return __x != __y.real() || _Tp() != __y.imag(); }\n   //@}\n@@ -658,7 +658,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Norm_helper\n     {\n       template<typename _Tp>\n-        static _GLIBCXX_CONSTEXPR inline _Tp _S_do_it(const complex<_Tp>& __z)\n+        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n         {\n           const _Tp __x = __z.real();\n           const _Tp __y = __z.imag();\n@@ -670,15 +670,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Norm_helper<true>\n     {\n       template<typename _Tp>\n-        static _GLIBCXX_CONSTEXPR inline _Tp _S_do_it(const complex<_Tp>& __z)\n+        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n         {\n           _Tp __res = std::abs(__z);\n           return __res * __res;\n         }\n     };\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline _Tp\n+    inline _Tp\n     norm(const complex<_Tp>& __z)\n     {\n       return _Norm_helper<__is_floating<_Tp>::__value\n@@ -1866,7 +1866,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return _Tp(); }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline typename __gnu_cxx::__promote<_Tp>::__type\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n     norm(_Tp __x)\n     {\n       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n@@ -1905,11 +1905,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Forward declarations.\n   // DR 781.\n-  template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR std::complex<_Tp> proj(const std::complex<_Tp>&);\n+  template<typename _Tp> std::complex<_Tp> proj(const std::complex<_Tp>&);\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR std::complex<_Tp>\n+    std::complex<_Tp>\n     __complex_proj(const std::complex<_Tp>& __z)\n     {\n       const _Tp __den = (__z.real() * __z.real()\n@@ -1920,25 +1919,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #if _GLIBCXX_USE_C99_COMPLEX\n-  _GLIBCXX_CONSTEXPR inline __complex__ float\n+  inline __complex__ float\n   __complex_proj(__complex__ float __z)\n   { return __builtin_cprojf(__z); }\n \n-  _GLIBCXX_CONSTEXPR inline __complex__ double\n+  inline __complex__ double\n   __complex_proj(__complex__ double __z)\n   { return __builtin_cproj(__z); }\n \n-  _GLIBCXX_CONSTEXPR inline __complex__ long double\n+  inline __complex__ long double\n   __complex_proj(const __complex__ long double& __z)\n   { return __builtin_cprojl(__z); }\n \n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline std::complex<_Tp>\n+    inline std::complex<_Tp>\n     proj(const std::complex<_Tp>& __z)\n     { return __complex_proj(__z.__rep()); }\n #else\n   template<typename _Tp>\n-    _GLIBCXX_CONSTEXPR inline std::complex<_Tp>\n+    inline std::complex<_Tp>\n     proj(const std::complex<_Tp>& __z)\n     { return __complex_proj(__z); }\n #endif"}, {"sha": "26c66cabe29e13bd0c8275a3402963c193a4cfad", "filename": "libstdc++-v3/include/tr1/bessel_function.tcc", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc?ref=eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "patch": "@@ -353,47 +353,21 @@ namespace tr1\n      *   @param  __x   The argument of the Bessel functions.\n      *   @param  __Jnu  The output Bessel function of the first kind.\n      *   @param  __Nnu  The output Neumann function (Bessel function of the second kind).\n-     *\n-     *  Adapted for libstdc++ from GNU GSL version 2.4 specfunc/bessel_j.c\n-     *  Copyright (C) 1996,1997,1998,1999,2000,2001,2002,2003 Gerard Jungman\n      */\n     template <typename _Tp>\n     void\n     __cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp & __Jnu, _Tp & __Nnu)\n     {\n       const _Tp __mu   = _Tp(4) * __nu * __nu;\n-      const _Tp __8x = _Tp(8) * __x;\n-\n-      _Tp __P = _Tp(0);\n-      _Tp __Q = _Tp(0);\n-\n-      _Tp k = _Tp(0);\n-      _Tp __term = _Tp(1);\n-\n-      int __epsP = 0;\n-      int __epsQ = 0;\n-\n-      _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n-\n-      do\n-        {\n-          __term *= (k == 0) ? _Tp(1) : -(__mu - (2 * k - 1) * (2 * k - 1)) / (k * __8x);\n-          __epsP = std::abs(__term) < std::abs(__eps * __P);\n-          __P += __term;\n-\n-          k++;\n-\n-          __term *= (__mu - (2 * k - 1) * (2 * k - 1)) / (k * __8x);\n-          __epsQ = std::abs(__term) < std::abs(__eps * __Q);\n-          __Q += __term;\n-\n-          if (__epsP && __epsQ && k > __nu / 2.)\n-            break;\n-\n-          k++;\n-        }\n-      while (k < 1000);\n-\n+      const _Tp __mum1 = __mu - _Tp(1);\n+      const _Tp __mum9 = __mu - _Tp(9);\n+      const _Tp __mum25 = __mu - _Tp(25);\n+      const _Tp __mum49 = __mu - _Tp(49);\n+      const _Tp __xx = _Tp(64) * __x * __x;\n+      const _Tp __P = _Tp(1) - __mum1 * __mum9 / (_Tp(2) * __xx)\n+                    * (_Tp(1) - __mum25 * __mum49 / (_Tp(12) * __xx));\n+      const _Tp __Q = __mum1 / (_Tp(8) * __x)\n+                    * (_Tp(1) - __mum9 * __mum25 / (_Tp(6) * __xx));\n \n       const _Tp __chi = __x - (__nu + _Tp(0.5L))\n                             * __numeric_constants<_Tp>::__pi_2();"}, {"sha": "475c6dcaa4a777b008ba0006846784f21aec9d1a", "filename": "libstdc++-v3/testsuite/special_functions/08_cyl_bessel_j/check_value.cc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc?ref=eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "patch": "@@ -698,26 +698,6 @@ data026[21] =\n };\n const double toler026 = 1.0000000000000006e-11;\n \n-// Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 2.5857788132910287e-14\n-// max(|f - f_GSL| / |f_GSL|): 1.6767662425535933e-11\n-const testcase_cyl_bessel_j<double>\n-data027[11] =\n-{\n-  { 0.0116761350077845, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n-  {-0.0116998547780258, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n-  {-0.0228014834050837, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n-  {-0.0169735007873739, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n-  {-0.0014154528803530, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n-  { 0.0133337265844988, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n-  { 0.0198025620201474, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n-  { 0.0161297712798388, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n-  { 0.0053753369281577, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n-  {-0.0069238868725646, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n-  {-0.0154878717200738, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n-};\n-const double toler027 = 1.0000000000000006e-10;\n-\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_bessel_j<Ret> (&data)[Num], Ret toler)\n@@ -768,6 +748,5 @@ main()\n   test(data024, toler024);\n   test(data025, toler025);\n   test(data026, toler026);\n-  test(data027, toler027);\n   return 0;\n }"}, {"sha": "da1250278d55860f025d41c1b8f110b8fccdba81", "filename": "libstdc++-v3/testsuite/special_functions/10_cyl_neumann/check_value.cc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc?ref=eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "patch": "@@ -742,26 +742,6 @@ data028[20] =\n };\n const double toler028 = 1.0000000000000006e-11;\n \n-// Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 3.1049815496508870e-14\n-// max(|f - f_GSL| / |f_GSL|): 8.4272302674970308e-12\n-const testcase_cyl_neumann<double>\n-data029[11] =\n-{\n-  {-0.0224386882577326, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n-  {-0.0210775951598200, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n-  {-0.0035299439206693, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n-  { 0.0142500193265366, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n-  { 0.0213046790897353, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n-  { 0.0157343950779022, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n-  { 0.0025544633636228, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n-  {-0.0107220455248494, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n-  {-0.0180369192432256, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n-  {-0.0169584155930798, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n-  {-0.0088788704566206, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n-};\n-const double toler029 = 1.0000000000000006e-11;\n-\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_neumann<Ret> (&data)[Num], Ret toler)\n@@ -814,6 +794,5 @@ main()\n   test(data026, toler026);\n   test(data027, toler027);\n   test(data028, toler028);\n-  test(data029, toler029);\n   return 0;\n }"}, {"sha": "06a2d192df0b1e7a67d5c36178fd1dcf852769e4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/09_cyl_bessel_j/check_value.cc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc?ref=eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "patch": "@@ -698,26 +698,6 @@ data026[21] =\n };\n const double toler026 = 1.0000000000000006e-11;\n \n-// Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 2.5857788132910287e-14\n-// max(|f - f_GSL| / |f_GSL|): 1.6767662425535933e-11\n-const testcase_cyl_bessel_j<double>\n-data027[11] =\n-{\n-  { 0.0116761350077845, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n-  {-0.0116998547780258, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n-  {-0.0228014834050837, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n-  {-0.0169735007873739, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n-  {-0.0014154528803530, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n-  { 0.0133337265844988, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n-  { 0.0198025620201474, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n-  { 0.0161297712798388, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n-  { 0.0053753369281577, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n-  {-0.0069238868725646, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n-  {-0.0154878717200738, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n-};\n-const double toler027 = 1.0000000000000006e-10;\n-\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_bessel_j<Ret> (&data)[Num], Ret toler)\n@@ -768,6 +748,5 @@ main()\n   test(data024, toler024);\n   test(data025, toler025);\n   test(data026, toler026);\n-  test(data027, toler027);\n   return 0;\n }"}, {"sha": "3c0cbe7b977093bfb4761fc1e446ad26d5e1f9f0", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/11_cyl_neumann/check_value.cc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ab6ec61ffe636d5d62601437f5efd2c8627d/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc?ref=eda0ab6ec61ffe636d5d62601437f5efd2c8627d", "patch": "@@ -742,26 +742,6 @@ data028[20] =\n };\n const double toler028 = 1.0000000000000006e-11;\n \n-// Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 3.1049815496508870e-14\n-// max(|f - f_GSL| / |f_GSL|): 8.4272302674970308e-12\n-const testcase_cyl_neumann<double>\n-data029[11] =\n-{\n-  {-0.0224386882577326, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n-  {-0.0210775951598200, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n-  {-0.0035299439206693, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n-  { 0.0142500193265366, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n-  { 0.0213046790897353, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n-  { 0.0157343950779022, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n-  { 0.0025544633636228, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n-  {-0.0107220455248494, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n-  {-0.0180369192432256, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n-  {-0.0169584155930798, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n-  {-0.0088788704566206, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n-};\n-const double toler029 = 1.0000000000000006e-11;\n-\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_neumann<Ret> (&data)[Num], Ret toler)\n@@ -814,6 +794,5 @@ main()\n   test(data026, toler026);\n   test(data027, toler027);\n   test(data028, toler028);\n-  test(data029, toler029);\n   return 0;\n }"}]}