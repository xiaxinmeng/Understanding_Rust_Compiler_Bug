{"sha": "0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2OGM2MTM1ZmNkNmJmMGI5N2ZjODAxYjFkMGRkYzYwNjI3NTY1MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T12:55:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T12:55:34Z"}, "message": "[multiple changes]\n\n2013-04-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications):\n\tInsert the corresponding pragma for aspect Abstract_State at\n\tthe top of the visible declarations of the related package.\n\tPreviously this was only done when the package is a compilation\n\tunit.\n\n2013-04-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_ugn.texi: Further menu clean ups.\n\t* sem_prag.adb, opt.ads: Minor reformatting.\n\t* sem_util.ads: Minor comment fix.\n\nFrom-SVN: r197901", "tree": {"sha": "a949f38b2e84ab28cb4d13c39188a8bc58d562e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a949f38b2e84ab28cb4d13c39188a8bc58d562e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/comments", "author": null, "committer": null, "parents": [{"sha": "fd8b40539cd4af7c08207dfdf61a98aea6deeab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8b40539cd4af7c08207dfdf61a98aea6deeab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd8b40539cd4af7c08207dfdf61a98aea6deeab9"}], "stats": {"total": 417, "additions": 45, "deletions": 372}, "files": [{"sha": "c19dd7fe27a42be9e3d5428975d4e2a2141a1107", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "patch": "@@ -1,3 +1,17 @@\n+2013-04-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications):\n+\tInsert the corresponding pragma for aspect Abstract_State at\n+\tthe top of the visible declarations of the related package.\n+\tPreviously this was only done when the package is a compilation\n+\tunit.\n+\n+2013-04-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi: Further menu clean ups.\n+\t* sem_prag.adb, opt.ads: Minor reformatting.\n+\t* sem_util.ads: Minor comment fix.\n+\n 2013-04-12  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Aspect_Specifications): Aspect"}, {"sha": "e1cd61abc4a18420856c2ae7e4a62af6e58befc2", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 342, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "patch": "@@ -216,347 +216,6 @@ AdaCore@*\n * Mac OS Topics::\n * GNU Free Documentation License::\n * Index::\n-\n- --- Detailed Contents ---\n-\n-About This Guide\n-* What This Guide Contains::\n-* What You Should Know before Reading This Guide::\n-* Related Information::\n-* Conventions::\n-\n-Getting Started with GNAT\n-* Running GNAT::\n-* Running a Simple Ada Program::\n-* Running a Program with Multiple Units::\n-* Using the gnatmake Utility::\n-@ifset vms\n-* Editing with Emacs::\n-@end ifset\n-@ifclear vms\n-* Introduction to GPS::\n-@end ifclear\n-\n-The GNAT Compilation Model\n-* Source Representation::\n-* Foreign Language Representation::\n-* File Naming Rules::\n-* Using Other File Names::\n-* Alternative File Naming Schemes::\n-* Generating Object Files::\n-* Source Dependencies::\n-* The Ada Library Information Files::\n-* Binding an Ada Program::\n-* Mixed Language Programming::\n-@ifclear vms\n-* Building Mixed Ada & C++ Programs::\n-* Comparison between GNAT and C/C++ Compilation Models::\n-@end ifclear\n-* Comparison between GNAT and Conventional Ada Library Models::\n-@ifset vms\n-* Placement of temporary files::\n-@end ifset\n-\n-Compiling with gcc\n-* Compiling Programs::\n-* Switches for gcc::\n-* Search Paths and the Run-Time Library (RTL)::\n-* Order of Compilation Issues::\n-* Examples::\n-\n-Binding with gnatbind\n-* Running gnatbind::\n-* Switches for gnatbind::\n-* Command-Line Access::\n-* Search Paths for gnatbind::\n-* Examples of gnatbind Usage::\n-\n-Linking with gnatlink\n-* Running gnatlink::\n-* Switches for gnatlink::\n-\n-The GNAT Make Program gnatmake\n-* Running gnatmake::\n-* Switches for gnatmake::\n-* Mode Switches for gnatmake::\n-* Notes on the Command Line::\n-* How gnatmake Works::\n-* Examples of gnatmake Usage::\n-\n-Improving Performance\n-* Performance Considerations::\n-* Text_IO Suggestions::\n-* Reducing Size of Ada Executables with gnatelim::\n-* Reducing Size of Executables with unused subprogram/data elimination::\n-\n-Renaming Files with gnatchop\n-* Handling Files with Multiple Units::\n-* Operating gnatchop in Compilation Mode::\n-* Command Line for gnatchop::\n-* Switches for gnatchop::\n-* Examples of gnatchop Usage::\n-\n-Configuration Pragmas\n-* Handling of Configuration Pragmas::\n-* The Configuration Pragmas Files::\n-\n-Handling Arbitrary File Naming Conventions with gnatname\n-* Arbitrary File Naming Conventions::\n-* Running gnatname::\n-* Switches for gnatname::\n-* Examples of gnatname Usage::\n-\n-GNAT Project Manager\n-* Introduction::\n-* Building With Projects::\n-* Organizing Projects into Subsystems::\n-* Scenarios in Projects::\n-* Library Projects::\n-* Project Extension::\n-* Aggregate Projects::\n-* Aggregate Library Projects::\n-* Project File Reference::\n-\n-Tools Supporting Project Files\n-* gnatmake and Project Files::\n-* The GNAT Driver and Project Files::\n-\n-The Cross-Referencing Tools gnatxref and gnatfind\n-* Switches for gnatxref::\n-* Switches for gnatfind::\n-* Project Files for gnatxref and gnatfind::\n-* Regular Expressions in gnatfind and gnatxref::\n-* Examples of gnatxref Usage::\n-* Examples of gnatfind Usage::\n-\n-The GNAT Pretty-Printer gnatpp\n-* Switches for gnatpp::\n-* Formatting Rules::\n-\n-The GNAT Metrics Tool gnatmetric\n-* Switches for gnatmetric::\n-\n-File Name Krunching with gnatkr\n-* About gnatkr::\n-* Using gnatkr::\n-* Krunching Method::\n-* Examples of gnatkr Usage::\n-\n-Preprocessing with gnatprep\n-* Preprocessing Symbols::\n-* Using gnatprep::\n-* Switches for gnatprep::\n-* Form of Definitions File::\n-* Form of Input Text for gnatprep::\n-\n-The GNAT Library Browser gnatls\n-* Running gnatls::\n-* Switches for gnatls::\n-* Examples of gnatls Usage::\n-\n-Cleaning Up with gnatclean\n-* Running gnatclean::\n-* Switches for gnatclean::\n-@c * Examples of gnatclean Usage::\n-\n-@ifclear vms\n-GNAT and Libraries\n-* Introduction to Libraries in GNAT::\n-* General Ada Libraries::\n-* Stand-alone Ada Libraries::\n-* Rebuilding the GNAT Run-Time Library::\n-\n-Using the GNU make Utility\n-* Using gnatmake in a Makefile::\n-* Automatically Creating a List of Directories::\n-* Generating the Command Line Switches::\n-* Overcoming Command Line Length Limits::\n-@end ifclear\n-\n-Memory Management Issues\n-* Some Useful Memory Pools::\n-* The GNAT Debug Pool Facility::\n-@ifclear vms\n-* The gnatmem Tool::\n-@end ifclear\n-\n-Stack Related Facilities\n-* Stack Overflow Checking::\n-* Static Stack Usage Analysis::\n-* Dynamic Stack Usage Analysis::\n-\n-Verifying Properties with gnatcheck\n-\n-Creating Sample Bodies with gnatstub\n-* Running gnatstub::\n-* Switches for gnatstub::\n-\n-Creating Unit Tests with gnattest\n-* Running gnattest::\n-* Switches for gnattest::\n-* Project Attributes for gnattest::\n-* Simple Example::\n-* Setting Up and Tearing Down the Testing Environment::\n-* Regenerating Tests::\n-* Default Test Behavior::\n-* Testing Primitive Operations of Tagged Types::\n-* Testing Inheritance::\n-* Tagged Types Substitutability Testing::\n-* Testing with Contracts::\n-* Additional Tests::\n-@ifclear vms\n-* Support for other platforms/run-times::\n-@end ifclear\n-* Current Limitations::\n-\n-Performing Dimensionality Analysis in GNAT\n-\n-Generating Ada Bindings for C and C++ headers\n-* Running the binding generator::\n-* Generating bindings for C++ headers::\n-* Switches::\n-\n-Other Utility Programs\n-* Using Other Utility Programs with GNAT::\n-* The External Symbol Naming Scheme of GNAT::\n-* Converting Ada Files to html with gnathtml::\n-* Installing gnathtml::\n-@ifset vms\n-* LSE::\n-* Profiling::\n-@end ifset\n-\n-@ifclear vms\n-Code Coverage and Profiling\n-* Code Coverage of Ada Programs with gcov::\n-* Profiling an Ada Program with gprof::\n-@end ifclear\n-\n-Running and Debugging Ada Programs\n-* The GNAT Debugger GDB::\n-* Running GDB::\n-* Introduction to GDB Commands::\n-* Using Ada Expressions::\n-* Calling User-Defined Subprograms::\n-* Using the Next Command in a Function::\n-* Ada Exceptions::\n-* Ada Tasks::\n-* Debugging Generic Units::\n-* Remote Debugging with gdbserver::\n-* GNAT Abnormal Termination or Failure to Terminate::\n-* Naming Conventions for GNAT Source Files::\n-* Getting Internal Debugging Information::\n-* Stack Traceback::\n-\n-@ifset vms\n-Compatibility with HP Ada\n-* Ada Language Compatibility::\n-* Differences in the Definition of Package System::\n-* Language-Related Features::\n-* The Package STANDARD::\n-* The Package SYSTEM::\n-* Tasking and Task-Related Features::\n-* Pragmas and Pragma-Related Features::\n-* Library of Predefined Units::\n-* Bindings::\n-* Main Program Definition::\n-* Implementation-Defined Attributes::\n-* Compiler and Run-Time Interfacing::\n-* Program Compilation and Library Management::\n-* Input-Output::\n-* Implementation Limits::\n-* Tools and Utilities::\n-@end ifset\n-\n-Platform-Specific Information for the Run-Time Libraries\n-* Summary of Run-Time Configurations::\n-* Specifying a Run-Time Library::\n-* Choosing the Scheduling Policy::\n-* Solaris-Specific Considerations::\n-* Linux-Specific Considerations::\n-* AIX-Specific Considerations::\n-* RTX-Specific Considerations::\n-* HP-UX-Specific Considerations::\n-\n-Example of Binder Output File\n-\n-Elaboration Order Handling in GNAT\n-* Elaboration Code::\n-* Checking the Elaboration Order::\n-* Controlling the Elaboration Order::\n-* Controlling Elaboration in GNAT - Internal Calls::\n-* Controlling Elaboration in GNAT - External Calls::\n-* Default Behavior in GNAT - Ensuring Safety::\n-* Treatment of Pragma Elaborate::\n-* Elaboration Issues for Library Tasks::\n-* Mixing Elaboration Models::\n-* What to Do If the Default Elaboration Behavior Fails::\n-* Elaboration for Dispatching Calls::\n-* Summary of Procedures for Elaboration Control::\n-* Other Elaboration Order Considerations::\n-\n-Overflow Check Handling in GNAT\n-* Background::\n-* Overflow Checking Modes in GNAT::\n-* Specifying the Desired Mode::\n-* Default Settings::\n-* Implementation Notes::\n-\n-Conditional Compilation\n-* Use of Boolean Constants::\n-* Debugging - A Special Case::\n-* Conditionalizing Declarations::\n-* Use of Alternative Implementations::\n-* Preprocessing::\n-\n-Inline Assembler\n-* Basic Assembler Syntax::\n-* A Simple Example of Inline Assembler::\n-* Output Variables in Inline Assembler::\n-* Input Variables in Inline Assembler::\n-* Inlining Inline Assembler Code::\n-* Other Asm Functionality::\n-\n-Compatibility and Porting Guide\n-* Compatibility with Ada 83::\n-* Compatibility between Ada 95 and Ada 2005::\n-* Implementation-dependent characteristics::\n-* Compatibility with Other Ada Systems::\n-* Representation Clauses::\n-@ifclear vms\n-@c This brief section is only in the non-VMS version\n-@c The complete chapter on HP Ada issues is in the VMS version\n-* Compatibility with HP Ada 83::\n-@end ifclear\n-@ifset vms\n-* Transitioning to 64-Bit GNAT for OpenVMS::\n-@end ifset\n-\n-Microsoft Windows Topics\n-@ifclear FSFEDITION\n-* Installing from the Command Line::\n-@end ifclear\n-* Using GNAT on Windows::\n-* Using a network installation of GNAT::\n-* CONSOLE and WINDOWS subsystems::\n-* Temporary Files::\n-* Mixed-Language Programming on Windows::\n-* Windows Calling Conventions::\n-* Introduction to Dynamic Link Libraries (DLLs)::\n-* Using DLLs with GNAT::\n-* Building DLLs with GNAT::\n-* Building DLLs with gnatdll::\n-* GNAT and Windows Resources::\n-* Debugging a DLL::\n-* Setting Stack Size from gnatlink::\n-* Setting Heap Size from gnatlink::\n-\n-Mac OS Topics\n-* Codesigning the Debugger::\n-\n-GNU Free Documentation License\n-\n-Index\n @end menu\n @end ifnottex\n \n@@ -31080,7 +30739,7 @@ the location where you installed GNAT.\n @include fdl.texi\n @c GNU Free Documentation License\n \n-@node Index,,GNU Free Documentation License, Top\n+@node Index\n @unnumbered Index\n \n @printindex cp"}, {"sha": "03580fe117b387abd21ef3369410518974f789c6", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "patch": "@@ -602,21 +602,20 @@ package Opt is\n    Float_Format : Character := ' ';\n    --  GNAT\n    --  A non-blank value indicates that a Float_Format pragma has been\n-   --  processed, in which case this variable is set to 'I' for IEEE or\n-   --  to 'V' for VAX. The setting of 'V' is only possible on OpenVMS\n-   --  versions of GNAT.\n+   --  processed, in which case this variable is set to 'I' for IEEE or to\n+   --  'V' for VAX. The setting of 'V' is only possible on OpenVMS versions\n+   --  of GNAT.\n \n    Float_Format_Long : Character := ' ';\n    --  GNAT\n-   --  A non-blank value indicates that a Long_Float pragma has been\n-   --  processed (this pragma is recognized only in OpenVMS versions\n-   --  of GNAT), in which case this variable is set to D or G for\n-   --  D_Float or G_Float.\n+   --  A non-blank value indicates that a Long_Float pragma has been processed\n+   --  (this pragma is recognized only in OpenVMS versions of GNAT), in which\n+   --  case this variable is set to D or G for D_Float or G_Float.\n \n    Force_ALI_Tree_File : Boolean := False;\n    --  GNAT\n-   --  Force generation of ALI file even if errors are encountered.\n-   --  Also forces generation of tree file if -gnatt is also set.\n+   --  Force generation of ALI file even if errors are encountered. Also forces\n+   --  generation of tree file if -gnatt is also set. Set on by use of -gnatQ.\n \n    Disable_ALI_File : Boolean := False;\n    --  GNAT\n@@ -1404,12 +1403,12 @@ package Opt is\n    --  Flag set to force attempt at semantic analysis, even if parser errors\n    --  occur. This will probably cause blowups at this stage in the game. On\n    --  the other hand, most such blowups will be caught cleanly and simply\n-   --  say compilation abandoned. This flag is set to True by -gnatq or -gnatQ.\n+   --  say compilation abandoned. This flag is set on by -gnatq or -gnatQ.\n \n    Unchecked_Shared_Lib_Imports : Boolean := False;\n    --  GPRBUILD\n    --  Set to True when shared library projects are allowed to import projects\n-   --  that are not shared library projects. Set by switch\n+   --  that are not shared library projects. Set on by use of the switch\n    --  --unchecked-shared-lib-imports.\n \n    Undefined_Symbols_Are_False : Boolean := False;"}, {"sha": "d06398ac946bee883d62a29ad124164600651683", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "patch": "@@ -1968,12 +1968,27 @@ package body Sem_Ch13 is\n                end if;\n             end if;\n \n+            --  Aspect Abstract_State introduces implicit declarations for all\n+            --  state abstraction entities it defines. To emulate this behavior\n+            --  insert the pragma at the start of the visible declarations of\n+            --  the related package.\n+\n+            if Nam = Name_Abstract_State\n+              and then Nkind (N) = N_Package_Declaration\n+            then\n+               if No (Visible_Declarations (Specification (N))) then\n+                  Set_Visible_Declarations (Specification (N), New_List);\n+               end if;\n+\n+               Prepend (Aitem, Visible_Declarations (Specification (N)));\n+               goto Continue;\n+\n             --  In the context of a compilation unit, we directly put the\n             --  pragma in the Pragmas_After list of the\n             --  N_Compilation_Unit_Aux node (no delay is required here)\n             --  except for aspects on a subprogram body (see below).\n \n-            if Nkind (Parent (N)) = N_Compilation_Unit\n+            elsif Nkind (Parent (N)) = N_Compilation_Unit\n               and then (Present (Aitem) or else Is_Boolean_Aspect (Aspect))\n             then\n                declare\n@@ -2014,20 +2029,6 @@ package body Sem_Ch13 is\n \n                      Prepend (Aitem, Declarations (N));\n \n-                  --  Aspect Abstract_State produces implicit declarations for\n-                  --  all state abstraction entities it defines. To emulate\n-                  --  this behavior, insert the pragma at the start of the\n-                  --  visible declarations of the related package.\n-\n-                  elsif Nam = Name_Abstract_State\n-                    and then Nkind (N) = N_Package_Declaration\n-                  then\n-                     if No (Visible_Declarations (Specification (N))) then\n-                        Set_Visible_Declarations (Specification (N), New_List);\n-                     end if;\n-\n-                     Prepend (Aitem, Visible_Declarations (Specification (N)));\n-\n                   else\n                      if No (Pragmas_After (Aux)) then\n                         Set_Pragmas_After (Aux, New_List);"}, {"sha": "9616c6f9950e1fb8b56a4e85fce03cc695ffdd08", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "patch": "@@ -9330,9 +9330,8 @@ package body Sem_Prag is\n             begin\n                if Is_Input then\n                   if Ekind (Item_Id) = E_Out_Parameter\n-                    or else\n-                      (Global_Seen\n-                         and then not Appears_In (Subp_Inputs, Item_Id))\n+                    or else (Global_Seen\n+                              and then not Appears_In (Subp_Inputs, Item_Id))\n                   then\n                      Error_Msg_NE\n                        (\"item & must have mode in or in out\", Item, Item_Id);"}, {"sha": "1296786ef5aad6fc2efd45b3ca5d4c62e35c08d5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c68c6135fcd6bf0b97fc801b1d0ddc606275651/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=0c68c6135fcd6bf0b97fc801b1d0ddc606275651", "patch": "@@ -1453,7 +1453,8 @@ package Sem_Util is\n    procedure Set_Entity_With_Style_Check (N : Node_Id; Val : Entity_Id);\n    --  This procedure has the same calling sequence as Set_Entity, but\n    --  if Style_Check is set, then it calls a style checking routine which\n-   --  can check identifier spelling style.\n+   --  can check identifier spelling style. This procedure also takes care\n+   --  of checking the restriction No_Implementation_Identifiers.\n \n    procedure Set_Name_Entity_Id (Id : Name_Id; Val : Entity_Id);\n    pragma Inline (Set_Name_Entity_Id);"}]}