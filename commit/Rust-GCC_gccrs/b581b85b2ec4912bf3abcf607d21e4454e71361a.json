{"sha": "b581b85b2ec4912bf3abcf607d21e4454e71361a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU4MWI4NWIyZWM0OTEyYmYzYWJjZjYwN2QyMWU0NDU0ZTcxMzYxYQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-27T18:04:09Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-27T18:04:09Z"}, "message": "In gcc/: 2010-09-27 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.  Removed small\n        change in build_conditional_expr that had been added when fixing\n        PR objc/27377 and which did the same check in a less complete way.\n\n        2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4229905\n        * c-typeck.c (build_conditional_expr): Call objc_have_common_type when\n        looking for objective-c common pointer types.\n\n        2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4154928\n        * c-typeck.c (build_conditional_expr): For two ObjC pointer types,\n        use their ObjC common type.\n\nIn gcc/c-family:\n2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.\n\n        2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4229905\n        * c-common.h (objc_have_common_type): New declaration.\n        * stub-objc.c (objc_have_common_type): New stub.\n\n        2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4154928\n        * c-common.h (objc_common_type): New prototype.\n        * stub-objc.c (objc_common_type): New stub.\n\nIn gcc/objc/:\n2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.\n\n        2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4229905\n        * objc-act.c (objc_have_common_types): New function.\n\n        2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4154928\n        * objc-act.c (objc_common_type): New function.\n\nIn gcc/cp/:\n2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from apple/trunk branch on FSF servers:\n\n        2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4229905\n        * typeck.c (composite_pointer_type): Call objc_have_common_type\n        when comparing two objective-c pointer types.\n\n        2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4154928\n        * call.c (standard_conversion): Allow for a pointer conversion\n        between any two ObjC pointer types.\n        * typeck.c (composite_pointer_type): Determine common type\n        for two ObjC pointer types.\n\nIn gcc/testsuite/:\n2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.  Renamed\n        const-str-12.m to constr-str-12b.m to avoid conflicts.\n\n        2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4229905\n        * obj-c++.dg/warn5.mm: New\n\n        2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n\n        Radar 4154928\n        * obj-c++.dg/const-str-12.mm: New.\n        * objc.dg/const-str-12.m: New.\n\nFrom-SVN: r164655", "tree": {"sha": "52eceb4b49f0f2845bf998c477ea0bead40db6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52eceb4b49f0f2845bf998c477ea0bead40db6a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b581b85b2ec4912bf3abcf607d21e4454e71361a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b581b85b2ec4912bf3abcf607d21e4454e71361a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b581b85b2ec4912bf3abcf607d21e4454e71361a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b581b85b2ec4912bf3abcf607d21e4454e71361a/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf"}], "stats": {"total": 245, "additions": 237, "deletions": 8}, "files": [{"sha": "7954df7805bea70a8b2d7733627e05ec15640369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -1,3 +1,21 @@\n+2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.  Removed small\n+\tchange in build_conditional_expr that had been added when fixing\n+\tPR objc/27377 and which did the same check in a less complete way.\n+\n+\t2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4229905\n+\t* c-typeck.c (build_conditional_expr): Call objc_have_common_type when\n+\tlooking for objective-c common pointer types.\n+\t\n+\t2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4154928\n+\t* c-typeck.c (build_conditional_expr): For two ObjC pointer types,\n+\tuse their ObjC common type.\n+\n 2010-09-27  Richard Guenther  <rguenther@suse.de>\n \n \t* dbxout.c (dbxout_symbol): Use DECL_FILE_SCOPE_P."}, {"sha": "25603f90e2523b845092334268551c85470b837a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -1,3 +1,19 @@\n+2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\t\n+\n+\t2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4229905\t\n+\t* c-common.h (objc_have_common_type): New declaration.\n+\t* stub-objc.c (objc_have_common_type): New stub.\n+\n+\t2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4154928\n+\t* c-common.h (objc_common_type): New prototype.\n+\t* stub-objc.c (objc_common_type): New stub.\t\n+\n 2010-09-24  Jan Hubicka  <jh@suse.cz>\n \n \t* c-common.c (handle_leaf_attribute): New function."}, {"sha": "296f69058e903baeb097a9024df1da59d7e3889a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -941,7 +941,9 @@ extern tree objc_is_class_name (tree);\n extern tree objc_is_object_ptr (tree);\n extern void objc_check_decl (tree);\n extern int objc_is_reserved_word (tree);\n+extern tree objc_common_type (tree, tree);\n extern bool objc_compare_types (tree, tree, int, tree);\n+extern bool objc_have_common_type (tree, tree, int, tree);\n extern void objc_volatilize_decl (tree);\n extern bool objc_type_quals_match (tree, tree);\n extern tree objc_rewrite_function_call (tree, tree);"}, {"sha": "0384b486fcee9a67926b7300d8600259faa520dc", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -62,13 +62,26 @@ objc_is_reserved_word (tree ARG_UNUSED (ident))\n   return 0;\n }\n \n+tree\n+objc_common_type (tree ARG_UNUSED (type1), tree ARG_UNUSED (type2))\n+{\n+  return 0;\n+}\n+\n bool\n objc_compare_types (tree ARG_UNUSED (ltyp), tree ARG_UNUSED (rtyp),\n \t\t    int ARG_UNUSED (argno), tree ARG_UNUSED (callee))\n {\n   return false;\n }\n \n+bool\n+objc_have_common_type (tree ARG_UNUSED (ltyp), tree ARG_UNUSED (rtyp),\n+\t\t       int ARG_UNUSED (argno), tree ARG_UNUSED (callee))\n+{\n+  return false;\n+}\n+\n void\n objc_volatilize_decl (tree ARG_UNUSED (decl))\n {"}, {"sha": "e20c234006b3c2acf5042836de7a237dc9bc5b85", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -4051,7 +4051,6 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n   bool int_const, op1_int_operands, op2_int_operands, int_operands;\n   bool ifexp_int_operands;\n   tree ret;\n-  bool objc_ok;\n \n   op1_int_operands = EXPR_INT_CONST_OPERANDS (orig_op1);\n   if (op1_int_operands)\n@@ -4088,8 +4087,6 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n       return error_mark_node;\n     }\n \n-  objc_ok = objc_compare_types (type1, type2, -3, NULL_TREE);\n-\n   if ((TREE_CODE (op1) == EXCESS_PRECISION_EXPR\n        || TREE_CODE (op2) == EXCESS_PRECISION_EXPR)\n       && (code1 == INTEGER_TYPE || code1 == REAL_TYPE\n@@ -4255,13 +4252,15 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n \t  result_type = build_pointer_type (qualify_type (TREE_TYPE (type2),\n \t\t\t\t\t\t\t  TREE_TYPE (type1)));\n \t}\n+      /* Objective-C pointer comparisons are a bit more lenient.  */\n+      else if (objc_have_common_type (type1, type2, -3, NULL_TREE))\n+\tresult_type = objc_common_type (type1, type2);\n       else\n \t{\n \t  int qual = ENCODE_QUAL_ADDR_SPACE (as_common);\n \n-\t  if (!objc_ok)\n-\t    pedwarn (colon_loc, 0,\n-\t\t     \"pointer type mismatch in conditional expression\");\n+\t  pedwarn (colon_loc, 0,\n+\t\t   \"pointer type mismatch in conditional expression\");\n \t  result_type = build_pointer_type\n \t\t\t  (build_qualified_type (void_type_node, qual));\n \t}"}, {"sha": "f60080057bc7c588d60fff3e449ca88a94d020f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -1,3 +1,21 @@\n+2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from apple/trunk branch on FSF servers:\n+\t\n+\t2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4229905\n+\t* typeck.c (composite_pointer_type): Call objc_have_common_type\n+\twhen comparing two objective-c pointer types.\n+\n+\t2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4154928\n+\t* call.c (standard_conversion): Allow for a pointer conversion\n+\tbetween any two ObjC pointer types.\n+\t* typeck.c (composite_pointer_type): Determine common type\n+\tfor two ObjC pointer types.\n+\t\n 2010-09-24  Jan Hubicka  <jh@suse.cz>\n \n \t* decl.c (finish_function): Use decl_replaceable_p"}, {"sha": "c3a579929c3c04f95b37e4e7183c3a44dac6d9e4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -900,6 +900,11 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       else if (expr && string_conv_p (to, expr, 0))\n \t/* converting from string constant to char *.  */\n \tconv = build_conv (ck_qual, to, conv);\n+      /* Allow conversions among compatible ObjC pointer types (base\n+\t conversions have been already handled above).  */\n+      else if (c_dialect_objc ()\n+\t       && objc_compare_types (to, from, -4, NULL_TREE))\n+\tconv = build_conv (ck_ptr, to, conv);\n       else if (ptr_reasonably_similar (to_pointee, from_pointee))\n \t{\n \t  conv = build_conv (ck_ptr, to, conv);"}, {"sha": "9959e409f538814e787c28173c52b25f102d5cf0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -632,8 +632,8 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n   if (c_dialect_objc () && TREE_CODE (t1) == POINTER_TYPE\n       && TREE_CODE (t2) == POINTER_TYPE)\n     {\n-      if (objc_compare_types (t1, t2, -3, NULL_TREE))\n-\treturn t1;\n+      if (objc_have_common_type (t1, t2, -3, NULL_TREE))\n+\treturn objc_common_type (t1, t2);\n     }\n \n   /* [expr.eq] permits the application of a pointer conversion to"}, {"sha": "8e70e208bcda04abfca256d7ff3070788cba481e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -1,3 +1,17 @@\n+2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\n+\t2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4229905\n+\t* objc-act.c (objc_have_common_types): New function.\n+\t\n+\t2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4154928\n+\t* objc-act.c (objc_common_type): New function.\n+\t\n 2010-09-27  Richard Guenther  <rguenther@suse.de>\n \n \t* objc-act.c (objc_get_class_reference): Use CP_TYPE_CONTEXT."}, {"sha": "5d76596479c148c9dbdcd81f0d5d9585f6003cb7", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -1100,6 +1100,35 @@ objc_compare_protocols (tree lcls, tree ltyp, tree rcls, tree rtyp, bool warn)\n   return have_lproto || (rcls != NULL_TREE);\n }\n \n+/* Given two types TYPE1 and TYPE2, return their least common ancestor.\n+   Both TYPE1 and TYPE2 must be pointers, and already determined to be\n+   compatible by objc_compare_types() below.  */\n+\n+tree\n+objc_common_type (tree type1, tree type2)\n+{\n+  tree inner1 = TREE_TYPE (type1), inner2 = TREE_TYPE (type2);\n+\n+  while (POINTER_TYPE_P (inner1))\n+    {\n+      inner1 = TREE_TYPE (inner1);\n+      inner2 = TREE_TYPE (inner2);\n+    }\n+\n+  /* If one type is derived from another, return the base type.  */\n+  if (DERIVED_FROM_P (inner1, inner2))\n+    return type1;\n+  else if (DERIVED_FROM_P (inner2, inner1))\n+    return type2;\n+\n+  /* If both types are 'Class', return 'Class'.  */\n+  if (objc_is_class_id (inner1) && objc_is_class_id (inner2))\n+    return objc_class_type;\n+\n+  /* Otherwise, return 'id'.  */\n+  return objc_object_type;\n+}\n+\n /* Determine if it is permissible to assign (if ARGNO is greater than -3)\n    an instance of RTYP to an instance of LTYP or to compare the two\n    (if ARGNO is equal to -3), per ObjC type system rules.  Before\n@@ -1273,6 +1302,28 @@ objc_compare_types (tree ltyp, tree rtyp, int argno, tree callee)\n   return true;\n }\n \n+/* This routine is similar to objc_compare_types except that function-pointers are\n+   excluded. This is because, caller assumes that common types are of (id, Object*)\n+   variety and calls objc_common_type to obtain a common type. There is no commonolty\n+   between two function-pointers in this regard. */\n+\n+bool \n+objc_have_common_type (tree ltyp, tree rtyp, int argno, tree callee)\n+{\n+  if (objc_compare_types (ltyp, rtyp, argno, callee))\n+    {\n+      /* exclude function-pointer types. */\n+      do\n+        {\n+          ltyp = TREE_TYPE (ltyp);  /* Remove indirections.  */\n+          rtyp = TREE_TYPE (rtyp);\n+        }\n+      while (POINTER_TYPE_P (ltyp) && POINTER_TYPE_P (rtyp));\n+      return !(TREE_CODE (ltyp) == FUNCTION_TYPE && TREE_CODE (rtyp) == FUNCTION_TYPE);\n+    }\n+  return false;\n+}\n+\n /* Check if LTYP and RTYP have the same type qualifiers.  If either type\n    lives in the volatilized hash table, ignore the 'volatile' bit when\n    making the comparison.  */"}, {"sha": "24f0c17c4bdfc75f95281bb7014712430b93a79d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -1,3 +1,19 @@\n+2010-09-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.  Renamed\n+\tconst-str-12.m to constr-str-12b.m to avoid conflicts.\n+\t\n+\t2005-12-15  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4229905\n+\t* obj-c++.dg/warn5.mm: New\n+\t\n+\t2005-06-22  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tRadar 4154928\n+\t* obj-c++.dg/const-str-12.mm: New.\n+\t* objc.dg/const-str-12.m: New.\n+\n 2010-09-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40569"}, {"sha": "d6bb1bead2156062d5a2b7a2c7760f9144786d18", "filename": "gcc/testsuite/obj-c++.dg/const-str-12.mm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-12.mm?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -0,0 +1,26 @@\n+/* Test if ObjC types play nice in conditional expressions.  */\n+/* Author: Ziemowit Laski  */\n+\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-do compile } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+\n+@interface Foo: Object {\n+  char *cString;\n+  unsigned int len;\n+}\n++ (id)description;\n+@end\n+\n+@interface Bar: Object\n++ (Foo *) getString: (int) which;\n+@end\n+\n+struct objc_class _FooClassReference;\n+\n+@implementation Bar\n++ (Foo *) getString: (int) which {\n+  return which? [Foo description]: @\"Hello\";\n+}\n+@end"}, {"sha": "b46daed77fdf2e61a96d9bca53177967873e2b78", "filename": "gcc/testsuite/obj-c++.dg/warn5.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fwarn5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fwarn5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fwarn5.mm?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -0,0 +1,25 @@\n+/* Check to make sure that a c++ program compiled in objective-c++ mode\n+   has no trace of meta-data specific diagnosis coming out of compiling it.\n+   This is replicate of warn5.C.\n+*/\n+// { dg-do assemble  }\n+// { dg-options \"-Wpointer-arith\" }\n+\n+double X(const double x) { return x; }\n+double Y() { return 1.0; }\n+double Z() { return 2.0; }\n+\n+struct A {\n+  void bar() { }\n+  void foo() { }\n+};\n+\n+typedef void (A::*pmf)();\n+\n+static int mememe = &A::foo - &A::bar;  // { dg-warning \"\" } \n+pmf b = &A::foo-1;      // { dg-warning \"\" } \n+\n+int main() {\n+    double y;\n+    y=X(Y-Z);   // { dg-warning \"\" } \n+}"}, {"sha": "d6bb1bead2156062d5a2b7a2c7760f9144786d18", "filename": "gcc/testsuite/objc.dg/const-str-12b.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-12b.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581b85b2ec4912bf3abcf607d21e4454e71361a/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-12b.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-12b.m?ref=b581b85b2ec4912bf3abcf607d21e4454e71361a", "patch": "@@ -0,0 +1,26 @@\n+/* Test if ObjC types play nice in conditional expressions.  */\n+/* Author: Ziemowit Laski  */\n+\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-do compile } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+\n+@interface Foo: Object {\n+  char *cString;\n+  unsigned int len;\n+}\n++ (id)description;\n+@end\n+\n+@interface Bar: Object\n++ (Foo *) getString: (int) which;\n+@end\n+\n+struct objc_class _FooClassReference;\n+\n+@implementation Bar\n++ (Foo *) getString: (int) which {\n+  return which? [Foo description]: @\"Hello\";\n+}\n+@end"}]}