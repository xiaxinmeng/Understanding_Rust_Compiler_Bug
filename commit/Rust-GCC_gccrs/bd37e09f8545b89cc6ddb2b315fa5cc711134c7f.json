{"sha": "bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzN2UwOWY4NTQ1Yjg5Y2M2ZGRiMmIzMTVmYTVjYzcxMTEzNGM3Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-10-11T20:44:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-11T20:44:30Z"}, "message": "alpha.md (IMODE): New mode iterator.\n\n\t* config/alpha/alpha.md (IMODE): New mode iterator.\n\t(I124MODE): Ditto.\n\t(I248MODE): Ditto.\n\t(modesuffix): Handle QI and HI modes.\n\t(zero_extendqi<mode>2): Macroize insn from zero_extendqi{hi,si,di}2\n\tusing I248MODE mode iterator.\n\t(zero_extendhi<mode>2): Macroize insn from zero_extendhi{si,di}2\n\tusing I48MODE mode iterator.\n\t(andnot<mode>3): Macroize insn from andnot{si,di}3 using\n\tI48MODE mode iterator.\n\t(ins<modesuffix>l_const): Macroize insn from ins{b,w,l}l_const\n\tusing I248MODE mode iterator.\n\t(ins<modesuffix>l): Macroize insn from ins{b,w,l}l\n\tusing I248MODE mode iterator.\n\t(*mov<mode>cc_internal): Macroize insn from\n\t*mov{qi,hi,si,di}cc_internal using IMODE mode iterator.\n\t(*mov<mode>cc_lbc): Macroize insn from\n\t*mov{qi,hi,si,di}cc_lbc using IMODE mode iterator.\n\t(*mov<mode>cc_lbs): Macroize insn from\n\t*mov{qi,hi,si,di}cc_lbs using IMODE mode iterator.\n\t(mov<mode>cc): Macroize insn from mov{si,di}cc_lbs\n\tusing I48MODE mode iterator.\n\nFrom-SVN: r192379", "tree": {"sha": "8df15742be9d59a166c8360d15c4a1344e7349a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8df15742be9d59a166c8360d15c4a1344e7349a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6a7da82a98953d0c817367d410ccb080861b7da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a7da82a98953d0c817367d410ccb080861b7da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a7da82a98953d0c817367d410ccb080861b7da"}], "stats": {"total": 351, "additions": 80, "deletions": 271}, "files": [{"sha": "de0e155b782cc9aff473826c31d4b8ef093abe2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "patch": "@@ -1,3 +1,28 @@\n+2012-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.md (IMODE): New mode iterator.\n+\t(I124MODE): Ditto.\n+\t(I248MODE): Ditto.\n+\t(modesuffix): Handle QI and HI modes.\n+\t(zero_extendqi<mode>2): Macroize insn from zero_extendqi{hi,si,di}2\n+\tusing I248MODE mode iterator.\n+\t(zero_extendhi<mode>2): Macroize insn from zero_extendhi{si,di}2\n+\tusing I48MODE mode iterator.\n+\t(andnot<mode>3): Macroize insn from andnot{si,di}3 using\n+\tI48MODE mode iterator.\n+\t(ins<modesuffix>l_const): Macroize insn from ins{b,w,l}l_const\n+\tusing I248MODE mode iterator.\n+\t(ins<modesuffix>l): Macroize insn from ins{b,w,l}l\n+\tusing I248MODE mode iterator.\n+\t(*mov<mode>cc_internal): Macroize insn from\n+\t*mov{qi,hi,si,di}cc_internal using IMODE mode iterator.\n+\t(*mov<mode>cc_lbc): Macroize insn from\n+\t*mov{qi,hi,si,di}cc_lbc using IMODE mode iterator.\n+\t(*mov<mode>cc_lbs): Macroize insn from\n+\t*mov{qi,hi,si,di}cc_lbs using IMODE mode iterator.\n+\t(mov<mode>cc): Macroize insn from mov{si,di}cc_lbs\n+\tusing I48MODE mode iterator.\n+\n 2012-10-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* ira-build.c (ira_loop_tree_body_rev_postorder): New function."}, {"sha": "c222739540a6990651944df8c86feee372dee345", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 55, "deletions": 271, "changes": 326, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "patch": "@@ -90,10 +90,13 @@\n (define_mode_attr reloadmode [(QI \"qi\") (HI \"hi\") (CQI \"hi\")])\n \n ;; Other mode iterators\n+(define_mode_iterator IMODE [QI HI SI DI])\n (define_mode_iterator I12MODE [QI HI])\n+(define_mode_iterator I124MODE [QI HI SI])\n+(define_mode_iterator I248MODE [HI SI DI])\n (define_mode_iterator I48MODE [SI DI])\n (define_mode_attr DWI [(SI \"DI\") (DI \"TI\")])\n-(define_mode_attr modesuffix [(SI \"l\") (DI \"q\")])\n+(define_mode_attr modesuffix [(QI \"b\") (HI \"w\") (SI \"l\") (DI \"q\")])\n \n ;; Where necessary, the suffixes _le and _be are used to distinguish between\n ;; little-endian and big-endian patterns.\n@@ -1026,9 +1029,9 @@\n   operands[4] = GEN_INT (mask2);\n })\n \n-(define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:HI\n+(define_insn \"zero_extendqi<mode>2\"\n+  [(set (match_operand:I248MODE 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:I248MODE\n \t  (match_operand:QI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n   \"\"\n   \"@\n@@ -1037,42 +1040,9 @@\n   [(set_attr \"type\" \"ilog,ild\")\n    (set_attr \"isa\" \"*,bwx\")])\n \n-(define_insn \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:SI\n-\t  (match_operand:QI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n-  \"\"\n-  \"@\n-   and %1,0xff,%0\n-   ldbu %0,%1\"\n-  [(set_attr \"type\" \"ilog,ild\")\n-   (set_attr \"isa\" \"*,bwx\")])\n-\n-(define_insn \"zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI\n-\t  (match_operand:QI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n-  \"\"\n-  \"@\n-   and %1,0xff,%0\n-   ldbu %0,%1\"\n-  [(set_attr \"type\" \"ilog,ild\")\n-   (set_attr \"isa\" \"*,bwx\")])\n-\n-(define_insn \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:SI\n-\t  (match_operand:HI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n-  \"\"\n-  \"@\n-   zapnot %1,3,%0\n-   ldwu %0,%1\"\n-  [(set_attr \"type\" \"shift,ild\")\n-   (set_attr \"isa\" \"*,bwx\")])\n-\n-(define_insn \"zero_extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI\n+(define_insn \"zero_extendhi<mode>2\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:I48MODE\n \t  (match_operand:HI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n   \"\"\n   \"@\n@@ -1088,18 +1058,11 @@\n   \"zapnot %1,15,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"*andnotsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(and:SI (not:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\"))\n-\t\t(match_operand:SI 2 \"reg_or_0_operand\" \"rJ\")))]\n-  \"\"\n-  \"bic %r2,%1,%0\"\n-  [(set_attr \"type\" \"ilog\")])\n-\n-(define_insn \"andnotdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI (not:DI (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\"))\n-\t\t(match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")))]\n+(define_insn \"andnot<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(and:I48MODE\n+\t (not:I48MODE (match_operand:I48MODE 1 \"reg_or_8bit_operand\" \"rI\"))\n+\t (match_operand:I48MODE 2 \"reg_or_0_operand\" \"rJ\")))]\n   \"\"\n   \"bic %r2,%1,%0\"\n   [(set_attr \"type\" \"ilog\")])\n@@ -1140,9 +1103,9 @@\n \n (define_insn \"*iornot<mode>3\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n-\t(ior:I48MODE (not:I48MODE\n-\t\t      (match_operand:I48MODE 1 \"reg_or_8bit_operand\" \"rI\"))\n-\t\t     (match_operand:I48MODE 2 \"reg_or_0_operand\" \"rJ\")))]\n+\t(ior:I48MODE\n+\t (not:I48MODE (match_operand:I48MODE 1 \"reg_or_8bit_operand\" \"rI\"))\n+\t (match_operand:I48MODE 2 \"reg_or_0_operand\" \"rJ\")))]\n   \"\"\n   \"ornot %r2,%1,%0\"\n   [(set_attr \"type\" \"ilog\")])\n@@ -1517,34 +1480,34 @@\n   \"extqh %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extlh\"\n+(define_insn \"extwh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI\n \t (and:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t (const_int 2147483647))\n+\t\t (const_int 65535))\n \t (minus:DI (const_int 64)\n \t\t    (ashift:DI\n \t\t     (and:DI\n \t\t      (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t      (const_int 7))\n \t\t     (const_int 3)))))]\n   \"\"\n-  \"extlh %r1,%2,%0\"\n+  \"extwh %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extwh\"\n+(define_insn \"extlh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI\n \t (and:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t (const_int 65535))\n+\t\t (const_int 2147483647))\n \t (minus:DI (const_int 64)\n \t\t    (ashift:DI\n \t\t     (and:DI\n \t\t      (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t      (const_int 7))\n \t\t     (const_int 3)))))]\n   \"\"\n-  \"extwh %r1,%2,%0\"\n+  \"extlh %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n ;; This converts an extXl into an extXh with an appropriate adjustment\n@@ -1573,55 +1536,23 @@\n ;;  operands[7] = GEN_INT (- INTVAL (operands[2]) / BITS_PER_UNIT);\n ;;}\")\n \n-(define_insn \"*insbl_const\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t\t   (match_operand:DI 2 \"mul8_operand\" \"I\")))]\n-  \"\"\n-  \"insbl %1,%s2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"inswl_const\"\n+(define_insn \"ins<modesuffix>l_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\"))\n+\t(ashift:DI (zero_extend:DI\n+\t\t    (match_operand:I124MODE 1 \"register_operand\" \"r\"))\n \t\t   (match_operand:DI 2 \"mul8_operand\" \"I\")))]\n   \"\"\n-  \"inswl %1,%s2,%0\"\n+  \"ins<modesuffix>l %1,%s2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"*insll_const\"\n+(define_insn \"ins<modesuffix>l\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t   (match_operand:DI 2 \"mul8_operand\" \"I\")))]\n-  \"\"\n-  \"insll %1,%s2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"insbl\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\"))\n+\t(ashift:DI (zero_extend:DI\n+\t\t    (match_operand:I124MODE 1 \"register_operand\" \"r\"))\n \t\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t      (const_int 3))))]\n   \"\"\n-  \"insbl %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"inswl\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\"))\n-\t\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t\t      (const_int 3))))]\n-  \"\"\n-  \"inswl %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"insll\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t\t      (const_int 3))))]\n-  \"\"\n-  \"insll %1,%2,%0\"\n+  \"ins<modesuffix>l %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"insql\"\n@@ -2674,30 +2605,14 @@\n ;; in order to create more pairs of constants.  As long as we're allowing\n ;; two constants at the same time, and will have to reload one of them...\n \n-(define_insn \"*movqicc_internal\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(if_then_else:QI\n-\t (match_operator 2 \"signed_comparison_operator\"\n-\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n-\t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n-\t (match_operand:QI 1 \"add_operand\" \"rI,0,rI,0\")\n-\t (match_operand:QI 5 \"add_operand\" \"0,rI,0,rI\")))]\n-  \"(operands[3] == const0_rtx) ^ (operands[4] == const0_rtx)\"\n-  \"@\n-   cmov%C2 %r3,%1,%0\n-   cmov%D2 %r3,%5,%0\n-   cmov%c2 %r4,%1,%0\n-   cmov%d2 %r4,%5,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movhicc_internal\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(if_then_else:HI\n+(define_insn \"*mov<mode>cc_internal\"\n+  [(set (match_operand:IMODE 0 \"register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:IMODE\n \t (match_operator 2 \"signed_comparison_operator\"\n \t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n \t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n-\t (match_operand:HI 1 \"add_operand\" \"rI,0,rI,0\")\n-\t (match_operand:HI 5 \"add_operand\" \"0,rI,0,rI\")))]\n+\t (match_operand:IMODE 1 \"add_operand\" \"rI,0,rI,0\")\n+\t (match_operand:IMODE 5 \"add_operand\" \"0,rI,0,rI\")))]\n   \"(operands[3] == const0_rtx) ^ (operands[4] == const0_rtx)\"\n   \"@\n    cmov%C2 %r3,%1,%0\n@@ -2706,152 +2621,30 @@\n    cmov%d2 %r4,%5,%0\"\n   [(set_attr \"type\" \"icmov\")])\n \n-(define_insn \"*movsicc_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(if_then_else:SI\n-\t (match_operator 2 \"signed_comparison_operator\"\n-\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n-\t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n-\t (match_operand:SI 1 \"add_operand\" \"rI,0,rI,0\")\n-\t (match_operand:SI 5 \"add_operand\" \"0,rI,0,rI\")))]\n-  \"(operands[3] == const0_rtx) ^ (operands[4] == const0_rtx)\"\n-  \"@\n-   cmov%C2 %r3,%1,%0\n-   cmov%D2 %r3,%5,%0\n-   cmov%c2 %r4,%1,%0\n-   cmov%d2 %r4,%5,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movdicc_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(if_then_else:DI\n-\t (match_operator 2 \"signed_comparison_operator\"\n-\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n-\t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n-\t (match_operand:DI 1 \"add_operand\" \"rI,0,rI,0\")\n-\t (match_operand:DI 5 \"add_operand\" \"0,rI,0,rI\")))]\n-  \"(operands[3] == const0_rtx) ^ (operands[4] == const0_rtx)\"\n-  \"@\n-   cmov%C2 %r3,%1,%0\n-   cmov%D2 %r3,%5,%0\n-   cmov%c2 %r4,%1,%0\n-   cmov%d2 %r4,%5,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movqicc_lbc\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:QI\n+(define_insn \"*mov<mode>cc_lbc\"\n+  [(set (match_operand:IMODE 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:IMODE\n \t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n \t\t\t      (const_int 1)\n \t\t\t      (const_int 0))\n \t     (const_int 0))\n-\t (match_operand:QI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:QI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+\t (match_operand:IMODE 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:IMODE 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n   \"\"\n   \"@\n    cmovlbc %r2,%1,%0\n    cmovlbs %r2,%3,%0\"\n   [(set_attr \"type\" \"icmov\")])\n \n-(define_insn \"*movhicc_lbc\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:HI\n-\t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 0))\n-\t     (const_int 0))\n-\t (match_operand:HI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:HI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n-  \"\"\n-  \"@\n-   cmovlbc %r2,%1,%0\n-   cmovlbs %r2,%3,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movsicc_lbc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:SI\n-\t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 0))\n-\t     (const_int 0))\n-\t (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n-  \"\"\n-  \"@\n-   cmovlbc %r2,%1,%0\n-   cmovlbs %r2,%3,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movdicc_lbc\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:DI\n-\t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 0))\n-\t     (const_int 0))\n-\t (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:DI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n-  \"\"\n-  \"@\n-   cmovlbc %r2,%1,%0\n-   cmovlbs %r2,%3,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movqicc_lbs\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:QI\n-\t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 0))\n-\t     (const_int 0))\n-\t (match_operand:QI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:QI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n-  \"\"\n-  \"@\n-   cmovlbs %r2,%1,%0\n-   cmovlbc %r2,%3,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movhicc_lbs\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:HI\n-\t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 0))\n-\t     (const_int 0))\n-\t (match_operand:HI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:HI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n-  \"\"\n-  \"@\n-   cmovlbs %r2,%1,%0\n-   cmovlbc %r2,%3,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movsicc_lbs\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:SI\n-\t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n-\t\t\t      (const_int 1)\n-\t\t\t      (const_int 0))\n-\t     (const_int 0))\n-\t (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n-  \"\"\n-  \"@\n-   cmovlbs %r2,%1,%0\n-   cmovlbc %r2,%3,%0\"\n-  [(set_attr \"type\" \"icmov\")])\n-\n-(define_insn \"*movdicc_lbs\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:DI\n+(define_insn \"*mov<mode>cc_lbs\"\n+  [(set (match_operand:IMODE 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:IMODE\n \t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n \t\t\t      (const_int 1)\n \t\t\t      (const_int 0))\n \t     (const_int 0))\n-\t (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:DI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+\t (match_operand:IMODE 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:IMODE 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n   \"\"\n   \"@\n    cmovlbs %r2,%1,%0\n@@ -3450,25 +3243,16 @@\n \f\n ;; These are the main define_expand's used to make conditional moves.\n \n-(define_expand \"movsicc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_8bit_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"\")))]\n-  \"\"\n-{\n-  if ((operands[1] = alpha_emit_conditional_move (operands[1], SImode)) == 0)\n-    FAIL;\n-})\n-\n-(define_expand \"movdicc\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")\n-\t\t\t (match_operand:DI 3 \"reg_or_8bit_operand\" \"\")))]\n+(define_expand \"mov<mode>cc\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"\")\n+\t(if_then_else:I48MODE\n+\t  (match_operand 1 \"comparison_operator\" \"\")\n+\t  (match_operand:I48MODE 2 \"reg_or_8bit_operand\" \"\")\n+\t  (match_operand:I48MODE 3 \"reg_or_8bit_operand\" \"\")))]\n   \"\"\n {\n-  if ((operands[1] = alpha_emit_conditional_move (operands[1], DImode)) == 0)\n+  operands[1] = alpha_emit_conditional_move (operands[1], <MODE>mode);\n+  if (operands[1] == 0)\n     FAIL;\n })\n "}]}