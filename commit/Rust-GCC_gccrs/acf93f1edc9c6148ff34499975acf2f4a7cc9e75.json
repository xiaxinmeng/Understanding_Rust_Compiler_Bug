{"sha": "acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmOTNmMWVkYzljNjE0OGZmMzQ0OTk5NzVhY2YyZjRhN2NjOWU3NQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2016-01-05T20:19:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-01-05T20:19:16Z"}, "message": "Use vector_operand on SSE with 16b memory operand\n\nAdd vector_operand, which is vector_memory_operand or register_operand,\nand use it, instead of nonimmediate_operand, in SSE patterns with 16-byte\nmemory operand.\n\ngcc/\n\n\tPR target/68991\n\t* config/i386/i386.c (ix86_expand_vector_logical_operator):\n\tReplace nonimmediate_operand with vector_operand.\n\t* config/i386/predicates.md (vector_operand): New predicate.\n\t(general_vector_operand): Replace nonimmediate_operand with\n\tvector_operand.\n\t* config/i386/sse.md: Replace nonimmediate_operand with\n\tvector_operand and m constraint with Bm constraint on SSE\n\tpatterns with 16-byte memory operand.\n\t* config/i386/subst.md (round_nimm_predicate): Replace\n\tnonimmediate_operand with vector_operand.\n\t(round_saeonly_nimm_predicate): Likewise.\n\t(round_saeonly_nimm_scalar_predicate): New.\n\ngcc/testsuite/\n\n\tPR target/68991\n\t* gcc.target/i386/pr68991.c: New test.\n\nFrom-SVN: r232088", "tree": {"sha": "0b64428b0a0bdcd6c43da41d501ce77642ef9643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b64428b0a0bdcd6c43da41d501ce77642ef9643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f50525df20bafdcd1e04b2a406e9f83336df32a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f50525df20bafdcd1e04b2a406e9f83336df32a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f50525df20bafdcd1e04b2a406e9f83336df32a"}], "stats": {"total": 550, "additions": 305, "deletions": 245}, "files": [{"sha": "24359ffaa11f2a06f6634e8d8021b843e23c2882", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "patch": "@@ -1,3 +1,19 @@\n+2016-01-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/68991\n+\t* config/i386/i386.c (ix86_expand_vector_logical_operator):\n+\tReplace nonimmediate_operand with vector_operand.\n+\t* config/i386/predicates.md (vector_operand): New predicate.\n+\t(general_vector_operand): Replace nonimmediate_operand with\n+\tvector_operand.\n+\t* config/i386/sse.md: Replace nonimmediate_operand with\n+\tvector_operand and m constraint with Bm constraint on SSE\n+\tpatterns with 16-byte memory operand.\n+\t* config/i386/subst.md (round_nimm_predicate): Replace\n+\tnonimmediate_operand with vector_operand.\n+\t(round_saeonly_nimm_predicate): Likewise.\n+\t(round_saeonly_nimm_scalar_predicate): New.\n+\n 2016-01-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/68991"}, {"sha": "c6c66c77fb53cee0919e0192985af31a210bb852", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "patch": "@@ -19359,11 +19359,11 @@ ix86_expand_vector_logical_operator (enum rtx_code code, machine_mode mode,\n \t    {\n \t      op1 = operands[1];\n \t      op2 = SUBREG_REG (operands[2]);\n-\t      if (!nonimmediate_operand (op2, GET_MODE (dst)))\n+\t      if (!vector_operand (op2, GET_MODE (dst)))\n \t\top2 = force_reg (GET_MODE (dst), op2);\n \t    }\n \t  op1 = SUBREG_REG (op1);\n-\t  if (!nonimmediate_operand (op1, GET_MODE (dst)))\n+\t  if (!vector_operand (op1, GET_MODE (dst)))\n \t    op1 = force_reg (GET_MODE (dst), op1);\n \t  emit_insn (gen_rtx_SET (dst,\n \t\t\t\t  gen_rtx_fmt_ee (code, GET_MODE (dst),\n@@ -19374,9 +19374,9 @@ ix86_expand_vector_logical_operator (enum rtx_code code, machine_mode mode,\n \t  break;\n \t}\n     }\n-  if (!nonimmediate_operand (operands[1], mode))\n+  if (!vector_operand (operands[1], mode))\n     operands[1] = force_reg (mode, operands[1]);\n-  if (!nonimmediate_operand (operands[2], mode))\n+  if (!vector_operand (operands[2], mode))\n     operands[2] = force_reg (mode, operands[2]);\n   ix86_fixup_binary_operands_no_copy (code, mode, operands);\n   emit_insn (gen_rtx_SET (operands[0],"}, {"sha": "14e80d9b48f9472489b23d78a27d6a3da5b9182b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "patch": "@@ -958,6 +958,11 @@\n        (ior (match_test \"TARGET_AVX\")\n \t    (match_test \"MEM_ALIGN (op) >= GET_MODE_ALIGNMENT (mode)\"))))\n \n+; Return true when OP is register_operand or vector_memory_operand.\n+(define_predicate \"vector_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"vector_memory_operand\")))\n+\n ; Return true when OP is operand acceptable for standard SSE move.\n (define_predicate \"vector_move_operand\"\n   (ior (match_operand 0 \"nonimmediate_operand\")\n@@ -1598,9 +1603,9 @@\n   return val == ((low << 8) | low);\n })\n \n-;; Return true if OP is nonimmediate_operand or CONST_VECTOR.\n+;; Return true if OP is vector_operand or CONST_VECTOR.\n (define_predicate \"general_vector_operand\"\n-  (ior (match_operand 0 \"nonimmediate_operand\")\n+  (ior (match_operand 0 \"vector_operand\")\n        (match_code \"const_vector\")))\n \n ;; Return true if OP is either -1 constant or stored in register."}, {"sha": "c21cc0e7c67de440db6df5ea929f5b54c2afccef", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 238, "deletions": 237, "changes": 475, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "patch": "@@ -1629,8 +1629,8 @@\n (define_insn_and_split \"*absneg<mode>2\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,x,v,v\")\n \t(match_operator:VF 3 \"absneg_operator\"\n-\t  [(match_operand:VF 1 \"nonimmediate_operand\" \"0, xm, v, m\")]))\n-   (use (match_operand:VF 2 \"nonimmediate_operand\"    \"xm, 0, vm,v\"))]\n+\t  [(match_operand:VF 1 \"vector_operand\" \"0,  xBm,v, m\")]))\n+   (use (match_operand:VF 2 \"vector_operand\"    \"xBm,0,  vm,v\"))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -1691,7 +1691,7 @@\n \t(vec_merge:VF_128\n \t  (plusminus:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xBm,<round_constraint>\"))\n+\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -1715,7 +1715,7 @@\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(mult:VF\n \t  (match_operand:VF 1 \"<round_nimm_predicate>\" \"%0,v\")\n-\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xm,<round_constraint>\")))]\n+\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n   \"TARGET_SSE && ix86_binary_operator_ok (MULT, <MODE>mode, operands) && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    mul<ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -1731,7 +1731,7 @@\n \t(vec_merge:VF_128\n \t  (multdiv:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_constraint>\"))\n+\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -1747,14 +1747,14 @@\n (define_expand \"div<mode>3\"\n   [(set (match_operand:VF2 0 \"register_operand\")\n \t(div:VF2 (match_operand:VF2 1 \"register_operand\")\n-\t\t (match_operand:VF2 2 \"nonimmediate_operand\")))]\n+\t\t (match_operand:VF2 2 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (DIV, <MODE>mode, operands);\")\n \n (define_expand \"div<mode>3\"\n   [(set (match_operand:VF1 0 \"register_operand\")\n \t(div:VF1 (match_operand:VF1 1 \"register_operand\")\n-\t\t (match_operand:VF1 2 \"nonimmediate_operand\")))]\n+\t\t (match_operand:VF1 2 \"vector_operand\")))]\n   \"TARGET_SSE\"\n {\n   ix86_fixup_binary_operands_no_copy (DIV, <MODE>mode, operands);\n@@ -1774,7 +1774,7 @@\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(div:VF\n \t  (match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xm,<round_constraint>\")))]\n+\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    div<ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -1787,7 +1787,7 @@\n (define_insn \"<sse>_rcp<mode>2\"\n   [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n \t(unspec:VF1_128_256\n-\t  [(match_operand:VF1_128_256 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RCP))]\n+\t  [(match_operand:VF1_128_256 1 \"vector_operand\" \"xBm\")] UNSPEC_RCP))]\n   \"TARGET_SSE\"\n   \"%vrcpps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n@@ -1842,12 +1842,12 @@\n \n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:VF2 0 \"register_operand\")\n-\t(sqrt:VF2 (match_operand:VF2 1 \"nonimmediate_operand\")))]\n+\t(sqrt:VF2 (match_operand:VF2 1 \"vector_operand\")))]\n   \"TARGET_SSE2\")\n \n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:VF1 0 \"register_operand\")\n-\t(sqrt:VF1 (match_operand:VF1 1 \"nonimmediate_operand\")))]\n+\t(sqrt:VF1 (match_operand:VF1 1 \"vector_operand\")))]\n   \"TARGET_SSE\"\n {\n   if (TARGET_SSE_MATH\n@@ -1876,7 +1876,7 @@\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (sqrt:VF_128\n-\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"xm,<round_constraint>\"))\n+\t    (match_operand:VF_128 1 \"vector_operand\" \"xBm,<round_constraint>\"))\n \t  (match_operand:VF_128 2 \"register_operand\" \"0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -1893,7 +1893,7 @@\n (define_expand \"rsqrt<mode>2\"\n   [(set (match_operand:VF1_128_256 0 \"register_operand\")\n \t(unspec:VF1_128_256\n-\t  [(match_operand:VF1_128_256 1 \"nonimmediate_operand\")] UNSPEC_RSQRT))]\n+\t  [(match_operand:VF1_128_256 1 \"vector_operand\")] UNSPEC_RSQRT))]\n   \"TARGET_SSE_MATH\"\n {\n   ix86_emit_swsqrtsf (operands[0], operands[1], <MODE>mode, true);\n@@ -1903,7 +1903,7 @@\n (define_insn \"<sse>_rsqrt<mode>2\"\n   [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n \t(unspec:VF1_128_256\n-\t  [(match_operand:VF1_128_256 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RSQRT))]\n+\t  [(match_operand:VF1_128_256 1 \"vector_operand\" \"xBm\")] UNSPEC_RSQRT))]\n   \"TARGET_SSE\"\n   \"%vrsqrtps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n@@ -1972,7 +1972,7 @@\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\" \"%0,v\")\n-\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xm,<round_saeonly_constraint>\")))]\n+\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")))]\n   \"TARGET_SSE && flag_finite_math_only\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n@@ -1989,7 +1989,7 @@\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xm,<round_saeonly_constraint>\")))]\n+\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")))]\n   \"TARGET_SSE && !flag_finite_math_only\n    && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n   \"@\n@@ -2006,7 +2006,7 @@\n \t(vec_merge:VF_128\n \t  (smaxmin:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_saeonly_constraint>\"))\n+\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_saeonly_constraint>\"))\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -2026,10 +2026,10 @@\n ;; presence of -0.0 and NaN.\n \n (define_insn \"*ieee_smin<mode>3\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:VF 2 \"nonimmediate_operand\" \"vm,vm\")]\n+\t   (match_operand:VF 2 \"vector_operand\" \"xBm,vm\")]\n \t UNSPEC_IEEE_MIN))]\n   \"TARGET_SSE\"\n   \"@\n@@ -2041,10 +2041,10 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*ieee_smax<mode>3\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:VF 2 \"nonimmediate_operand\" \"vm,vm\")]\n+\t   (match_operand:VF 2 \"vector_operand\" \"xBm,vm\")]\n \t UNSPEC_IEEE_MAX))]\n   \"TARGET_SSE\"\n   \"@\n@@ -2074,7 +2074,7 @@\n \t(vec_merge:V2DF\n \t  (minus:V2DF\n \t    (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V2DF 2 \"vector_operand\" \"xBm,xm\"))\n \t  (plus:V2DF (match_dup 1) (match_dup 2))\n \t  (const_int 1)))]\n   \"TARGET_SSE3\"\n@@ -2106,7 +2106,7 @@\n \t(vec_merge:V4SF\n \t  (minus:V4SF\n \t    (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V4SF 2 \"vector_operand\" \"xBm,xm\"))\n \t  (plus:V4SF (match_dup 1) (match_dup 2))\n \t  (const_int 5)))]\n   \"TARGET_SSE3\"\n@@ -2124,10 +2124,10 @@\n \t(match_operator:VF_128_256 6 \"addsub_vm_operator\"\n \t  [(minus:VF_128_256\n \t     (match_operand:VF_128_256 1 \"register_operand\")\n-\t     (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t     (match_operand:VF_128_256 2 \"vector_operand\"))\n \t   (plus:VF_128_256\n-\t     (match_operand:VF_128_256 3 \"nonimmediate_operand\")\n-\t     (match_operand:VF_128_256 4 \"nonimmediate_operand\"))\n+\t     (match_operand:VF_128_256 3 \"vector_operand\")\n+\t     (match_operand:VF_128_256 4 \"vector_operand\"))\n \t   (match_operand 5 \"const_int_operand\")]))]\n   \"TARGET_SSE3\n    && can_create_pseudo_p ()\n@@ -2145,11 +2145,11 @@\n   [(set (match_operand:VF_128_256 0 \"register_operand\")\n \t(match_operator:VF_128_256 6 \"addsub_vm_operator\"\n \t  [(plus:VF_128_256\n-\t     (match_operand:VF_128_256 1 \"nonimmediate_operand\")\n-\t     (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t     (match_operand:VF_128_256 1 \"vector_operand\")\n+\t     (match_operand:VF_128_256 2 \"vector_operand\"))\n \t   (minus:VF_128_256\n \t     (match_operand:VF_128_256 3 \"register_operand\")\n-\t     (match_operand:VF_128_256 4 \"nonimmediate_operand\"))\n+\t     (match_operand:VF_128_256 4 \"vector_operand\"))\n \t   (match_operand 5 \"const_int_operand\")]))]\n   \"TARGET_SSE3\n    && can_create_pseudo_p ()\n@@ -2175,10 +2175,10 @@\n \t  [(vec_concat:<ssedoublemode>\n \t     (minus:VF_128_256\n \t       (match_operand:VF_128_256 1 \"register_operand\")\n-\t       (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t       (match_operand:VF_128_256 2 \"vector_operand\"))\n \t     (plus:VF_128_256\n-\t       (match_operand:VF_128_256 3 \"nonimmediate_operand\")\n-\t       (match_operand:VF_128_256 4 \"nonimmediate_operand\")))\n+\t       (match_operand:VF_128_256 3 \"vector_operand\")\n+\t       (match_operand:VF_128_256 4 \"vector_operand\")))\n \t   (match_parallel 5 \"addsub_vs_parallel\"\n \t     [(match_operand 6 \"const_int_operand\")])]))]\n   \"TARGET_SSE3\n@@ -2208,11 +2208,11 @@\n \t(match_operator:VF_128_256 7 \"addsub_vs_operator\"\n \t  [(vec_concat:<ssedoublemode>\n \t     (plus:VF_128_256\n-\t       (match_operand:VF_128_256 1 \"nonimmediate_operand\")\n-\t       (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t       (match_operand:VF_128_256 1 \"vector_operand\")\n+\t       (match_operand:VF_128_256 2 \"vector_operand\"))\n \t     (minus:VF_128_256\n \t       (match_operand:VF_128_256 3 \"register_operand\")\n-\t       (match_operand:VF_128_256 4 \"nonimmediate_operand\")))\n+\t       (match_operand:VF_128_256 4 \"vector_operand\")))\n \t   (match_parallel 5 \"addsub_vs_parallel\"\n \t     [(match_operand 6 \"const_int_operand\")])]))]\n   \"TARGET_SSE3\n@@ -2274,7 +2274,7 @@\n \t    (vec_select:DF (match_dup 1) (parallel [(const_int 1)])))\n \t  (plus:DF\n \t    (vec_select:DF\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\")\n+\t      (match_operand:V2DF 2 \"vector_operand\")\n \t      (parallel [(const_int 0)]))\n \t    (vec_select:DF (match_dup 2) (parallel [(const_int 1)])))))]\n   \"TARGET_SSE3\")\n@@ -2291,7 +2291,7 @@\n \t      (parallel [(match_operand:SI 4 \"const_0_to_1_operand\")])))\n \t  (plus:DF\n \t    (vec_select:DF\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t      (match_operand:V2DF 2 \"vector_operand\" \"xBm,xm\")\n \t      (parallel [(match_operand:SI 5 \"const_0_to_1_operand\")]))\n \t    (vec_select:DF\n \t      (match_dup 2)\n@@ -2317,7 +2317,7 @@\n \t    (vec_select:DF (match_dup 1) (parallel [(const_int 1)])))\n \t  (minus:DF\n \t    (vec_select:DF\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t      (match_operand:V2DF 2 \"vector_operand\" \"xBm,xm\")\n \t      (parallel [(const_int 0)]))\n \t    (vec_select:DF (match_dup 2) (parallel [(const_int 1)])))))]\n   \"TARGET_SSE3\"\n@@ -2424,7 +2424,7 @@\n \t  (vec_concat:V2SF\n \t    (plusminus:SF\n \t      (vec_select:SF\n-\t\t(match_operand:V4SF 2 \"nonimmediate_operand\" \"xBm,xm\")\n+\t\t(match_operand:V4SF 2 \"vector_operand\" \"xBm,xm\")\n \t\t(parallel [(const_int 0)]))\n \t      (vec_select:SF (match_dup 2) (parallel [(const_int 1)])))\n \t    (plusminus:SF\n@@ -2650,7 +2650,7 @@\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,x\")\n \t(match_operator:VF_128_256 3 \"sse_comparison_operator\"\n \t  [(match_operand:VF_128_256 1 \"register_operand\" \"%0,x\")\n-\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,xm\")]))]\n+\t   (match_operand:VF_128_256 2 \"vector_operand\" \"xBm,xm\")]))]\n   \"TARGET_SSE\n    && GET_RTX_CLASS (GET_CODE (operands[3])) == RTX_COMM_COMPARE\"\n   \"@\n@@ -2666,7 +2666,7 @@\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,x\")\n \t(match_operator:VF_128_256 3 \"sse_comparison_operator\"\n \t  [(match_operand:VF_128_256 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,xm\")]))]\n+\t   (match_operand:VF_128_256 2 \"vector_operand\" \"xBm,xm\")]))]\n   \"TARGET_SSE\"\n   \"@\n    cmp%D3<ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -2682,7 +2682,7 @@\n \t(vec_merge:VF_128\n \t (match_operator:VF_128 3 \"sse_comparison_operator\"\n \t   [(match_operand:VF_128 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,xm\")])\n+\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,xm\")])\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -2815,7 +2815,7 @@\n \t    (match_operand:<ssevecmode> 0 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0)]))\n \t  (vec_select:MODEF\n-\t    (match_operand:<ssevecmode> 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t    (match_operand:<ssevecmode> 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n   \"%vcomi<ssemodesuffix>\\t{<round_saeonly_op2>%1, %0|%0, %<iptr>1<round_saeonly_op2>}\"\n@@ -2835,7 +2835,7 @@\n \t    (match_operand:<ssevecmode> 0 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0)]))\n \t  (vec_select:MODEF\n-\t    (match_operand:<ssevecmode> 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t    (match_operand:<ssevecmode> 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n   \"%vucomi<ssemodesuffix>\\t{<round_saeonly_op2>%1, %0|%0, %<iptr>1<round_saeonly_op2>}\"\n@@ -2888,7 +2888,7 @@\n   [(set (match_operand:<sseintvecmode> 0 \"register_operand\")\n \t(match_operator:<sseintvecmode> 1 \"\"\n \t  [(match_operand:VI124_128 2 \"register_operand\")\n-\t   (match_operand:VI124_128 3 \"nonimmediate_operand\")]))]\n+\t   (match_operand:VI124_128 3 \"vector_operand\")]))]\n   \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vec_cmp (operands);\n@@ -2900,7 +2900,7 @@\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(match_operator:V2DI 1 \"\"\n \t  [(match_operand:V2DI 2 \"register_operand\")\n-\t   (match_operand:V2DI 3 \"nonimmediate_operand\")]))]\n+\t   (match_operand:V2DI 3 \"vector_operand\")]))]\n   \"TARGET_SSE4_2\"\n {\n   bool ok = ix86_expand_int_vec_cmp (operands);\n@@ -2924,7 +2924,7 @@\n   [(set (match_operand:<sseintvecmode> 0 \"register_operand\")\n \t(match_operator:<sseintvecmode> 1 \"\"\n \t  [(match_operand:VF_128 2 \"register_operand\")\n-\t   (match_operand:VF_128 3 \"nonimmediate_operand\")]))]\n+\t   (match_operand:VF_128 3 \"vector_operand\")]))]\n   \"TARGET_SSE\"\n {\n   bool ok = ix86_expand_fp_vec_cmp (operands);\n@@ -2972,7 +2972,7 @@\n   [(set (match_operand:<sseintvecmode> 0 \"register_operand\")\n \t(match_operator:<sseintvecmode> 1 \"\"\n \t  [(match_operand:VI124_128 2 \"register_operand\")\n-\t   (match_operand:VI124_128 3 \"nonimmediate_operand\")]))]\n+\t   (match_operand:VI124_128 3 \"vector_operand\")]))]\n   \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vec_cmp (operands);\n@@ -2984,7 +2984,7 @@\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(match_operator:V2DI 1 \"\"\n \t  [(match_operand:V2DI 2 \"register_operand\")\n-\t   (match_operand:V2DI 3 \"nonimmediate_operand\")]))]\n+\t   (match_operand:V2DI 3 \"vector_operand\")]))]\n   \"TARGET_SSE4_2\"\n {\n   bool ok = ix86_expand_int_vec_cmp (operands);\n@@ -3030,8 +3030,8 @@\n   [(set (match_operand:V_128 0 \"register_operand\")\n \t(if_then_else:V_128\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:VF_128 4 \"nonimmediate_operand\")\n-\t     (match_operand:VF_128 5 \"nonimmediate_operand\")])\n+\t    [(match_operand:VF_128 4 \"vector_operand\")\n+\t     (match_operand:VF_128 5 \"vector_operand\")])\n \t  (match_operand:V_128 1 \"general_operand\")\n \t  (match_operand:V_128 2 \"general_operand\")))]\n   \"TARGET_SSE\n@@ -3075,7 +3075,7 @@\n (define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n   [(set (match_operand:VI124_128 0 \"register_operand\")\n \t(vec_merge:VI124_128\n-\t  (match_operand:VI124_128 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI124_128 1 \"vector_operand\")\n \t  (match_operand:VI124_128 2 \"vector_move_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n   \"TARGET_SSE2\"\n@@ -3088,7 +3088,7 @@\n (define_expand \"vcond_mask_v2div2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(vec_merge:V2DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\")\n+\t  (match_operand:V2DI 1 \"vector_operand\")\n \t  (match_operand:V2DI 2 \"vector_move_operand\")\n \t  (match_operand:V2DI 3 \"register_operand\")))]\n   \"TARGET_SSE4_2\"\n@@ -3114,7 +3114,7 @@\n (define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n   [(set (match_operand:VF_128 0 \"register_operand\")\n \t(vec_merge:VF_128\n-\t  (match_operand:VF_128 1 \"nonimmediate_operand\")\n+\t  (match_operand:VF_128 1 \"vector_operand\")\n \t  (match_operand:VF_128 2 \"vector_move_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n   \"TARGET_SSE\"\n@@ -3135,7 +3135,7 @@\n \t(and:VF_128_256\n \t  (not:VF_128_256\n \t    (match_operand:VF_128_256 1 \"register_operand\" \"0,v\"))\n-\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:VF_128_256 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE && <mask_avx512vl_condition>\"\n {\n   static char buf[128];\n@@ -3223,8 +3223,8 @@\n (define_expand \"<code><mode>3<mask_name>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\")\n        (any_logic:VF_128_256\n-         (match_operand:VF_128_256 1 \"nonimmediate_operand\")\n-         (match_operand:VF_128_256 2 \"nonimmediate_operand\")))]\n+         (match_operand:VF_128_256 1 \"vector_operand\")\n+         (match_operand:VF_128_256 2 \"vector_operand\")))]\n   \"TARGET_SSE && <mask_avx512vl_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n@@ -3239,8 +3239,8 @@\n (define_insn \"*<code><mode>3<mask_name>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,v\")\n \t(any_logic:VF_128_256\n-\t  (match_operand:VF_128_256 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VF_128_256 1 \"vector_operand\" \"%0,v\")\n+\t  (match_operand:VF_128_256 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE && <mask_avx512vl_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n@@ -3328,10 +3328,10 @@\n   [(set (match_dup 4)\n \t(and:VF\n \t  (not:VF (match_dup 3))\n-\t  (match_operand:VF 1 \"nonimmediate_operand\")))\n+\t  (match_operand:VF 1 \"vector_operand\")))\n    (set (match_dup 5)\n \t(and:VF (match_dup 3)\n-\t\t(match_operand:VF 2 \"nonimmediate_operand\")))\n+\t\t(match_operand:VF 2 \"vector_operand\")))\n    (set (match_operand:VF 0 \"register_operand\")\n \t(ior:VF (match_dup 4) (match_dup 5)))]\n   \"TARGET_SSE\"\n@@ -3393,7 +3393,7 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n \t(and:TF\n \t  (not:TF (match_operand:TF 1 \"register_operand\" \"0,x\"))\n-\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+\t  (match_operand:TF 2 \"vector_operand\" \"xBm,xm\")))]\n   \"TARGET_SSE\"\n {\n   static char buf[32];\n@@ -3480,16 +3480,16 @@\n (define_expand \"<code>tf3\"\n   [(set (match_operand:TF 0 \"register_operand\")\n \t(any_logic:TF\n-\t  (match_operand:TF 1 \"nonimmediate_operand\")\n-\t  (match_operand:TF 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:TF 1 \"vector_operand\")\n+\t  (match_operand:TF 2 \"vector_operand\")))]\n   \"TARGET_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, TFmode, operands);\")\n \n (define_insn \"*<code>tf3\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n \t(any_logic:TF\n-\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0,x\")\n-\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xBm,xm\")))]\n+\t  (match_operand:TF 1 \"vector_operand\" \"%0,x\")\n+\t  (match_operand:TF 2 \"vector_operand\" \"xBm,xm\")))]\n   \"TARGET_SSE\n    && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n {\n@@ -4374,7 +4374,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint2>\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint2>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE\"\n   \"%vcvttss2si\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n@@ -4390,7 +4390,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(fix:DI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint>\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE && TARGET_64BIT\"\n   \"%vcvttss2si{q}\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n@@ -4479,7 +4479,7 @@\n (define_insn \"<sse2_avx_avx512f>_fix_notrunc<sf2simodelower><mode><mask_name>\"\n   [(set (match_operand:VI4_AVX 0 \"register_operand\" \"=v\")\n \t(unspec:VI4_AVX\n-\t  [(match_operand:<ssePSmode> 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:<ssePSmode> 1 \"vector_operand\" \"vBm\")]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition>\"\n   \"%vcvtps2dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n@@ -4581,7 +4581,7 @@\n \n (define_insn \"fix_truncv4sfv4si2<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t(fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")))]\n+\t(fix:V4SI (match_operand:V4SF 1 \"vector_operand\" \"vBm\")))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"%vcvttps2dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -4732,7 +4732,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:SI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n   \"vcvttss2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n@@ -4744,7 +4744,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:DI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F && TARGET_64BIT\"\n   \"vcvttss2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n@@ -4782,7 +4782,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:SI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n   \"vcvttsd2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n@@ -4794,7 +4794,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:DI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F && TARGET_64BIT\"\n   \"vcvttsd2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n@@ -4867,7 +4867,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint2>\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint2>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n   \"%vcvttsd2si\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n@@ -4884,7 +4884,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(fix:DI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint2>\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint2>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n   \"%vcvttsd2si{q}\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n@@ -5081,7 +5081,7 @@\n (define_insn \"sse2_cvtpd2dq<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n-\t  (unspec:V2SI [(match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  (unspec:V2SI [(match_operand:V2DF 1 \"vector_operand\" \"vBm\")]\n \t\t       UNSPEC_FIX_NOTRUNC)\n \t  (const_vector:V2SI [(const_int 0) (const_int 0)])))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n@@ -5242,7 +5242,7 @@\n (define_insn \"sse2_cvttpd2dq<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n-\t  (fix:V2SI (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\"))\n+\t  (fix:V2SI (match_operand:V2DF 1 \"vector_operand\" \"vBm\"))\n \t  (const_vector:V2SI [(const_int 0) (const_int 0)])))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n {\n@@ -5285,7 +5285,7 @@\n \t(vec_merge:V2DF\n \t  (float_extend:V2DF\n \t    (vec_select:V2SF\n-\t      (match_operand:V4SF 2 \"<round_saeonly_nimm_predicate>\" \"x,m,<round_saeonly_constraint>\")\n+\t      (match_operand:V4SF 2 \"<round_saeonly_nimm_scalar_predicate>\" \"x,m,<round_saeonly_constraint>\")\n \t      (parallel [(const_int 0) (const_int 1)])))\n \t  (match_operand:V2DF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n@@ -5328,7 +5328,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\")\n \t(vec_concat:V4SF\n \t  (float_truncate:V2SF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\"))\n+\t    (match_operand:V2DF 1 \"vector_operand\"))\n \t  (match_dup 2)))]\n   \"TARGET_SSE2\"\n   \"operands[2] = CONST0_RTX (V2SFmode);\")\n@@ -5338,7 +5338,7 @@\n \t(vec_merge:V4SF\n \t  (vec_concat:V4SF\n \t    (float_truncate:V2SF\n-\t      (match_operand:V2DF 1 \"nonimmediate_operand\"))\n+\t      (match_operand:V2DF 1 \"vector_operand\"))\n \t    (match_dup 4))\n \t  (match_operand:V4SF 2 \"register_operand\")\n \t  (match_operand:QI 3 \"register_operand\")))]\n@@ -5349,7 +5349,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SF\n \t  (float_truncate:V2SF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\"))\n+\t    (match_operand:V2DF 1 \"vector_operand\" \"vBm\"))\n \t  (match_operand:V2SF 2 \"const0_operand\")))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n {\n@@ -5478,7 +5478,7 @@\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n \t(float_extend:V2DF\n \t  (vec_select:V2SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V4SF 1 \"vector_operand\" \"vBm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"%vcvtps2pd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n@@ -5495,7 +5495,7 @@\n    (vec_select:V4SF\n      (vec_concat:V8SF\n        (match_dup 2)\n-       (match_operand:V4SF 1 \"nonimmediate_operand\"))\n+       (match_operand:V4SF 1 \"vector_operand\"))\n      (parallel [(const_int 6) (const_int 7)\n \t\t(const_int 2) (const_int 3)])))\n   (set (match_operand:V2DF 0 \"register_operand\")\n@@ -5536,7 +5536,7 @@\n   [(set (match_operand:V2DF 0 \"register_operand\")\n \t(float_extend:V2DF\n \t  (vec_select:V2SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\")\n+\t    (match_operand:V4SF 1 \"vector_operand\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE2\")\n \n@@ -5608,7 +5608,7 @@\n (define_expand \"vec_unpacks_float_hi_v4si\"\n   [(set (match_dup 2)\n \t(vec_select:V4SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\")\n+\t  (match_operand:V4SI 1 \"vector_operand\")\n \t  (parallel [(const_int 2) (const_int 3)\n \t\t     (const_int 2) (const_int 3)])))\n    (set (match_operand:V2DF 0 \"register_operand\")\n@@ -5623,14 +5623,14 @@\n   [(set (match_operand:V2DF 0 \"register_operand\")\n \t(float:V2DF\n \t  (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\")\n+\t    (match_operand:V4SI 1 \"vector_operand\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE2\")\n \n (define_expand \"vec_unpacks_float_hi_v8si\"\n   [(set (match_dup 2)\n \t(vec_select:V4SI\n-\t  (match_operand:V8SI 1 \"nonimmediate_operand\")\n+\t  (match_operand:V8SI 1 \"vector_operand\")\n \t  (parallel [(const_int 4) (const_int 5)\n \t\t     (const_int 6) (const_int 7)])))\n    (set (match_operand:V4DF 0 \"register_operand\")\n@@ -5676,7 +5676,7 @@\n (define_expand \"vec_unpacku_float_hi_v4si\"\n   [(set (match_dup 5)\n \t(vec_select:V4SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\")\n+\t  (match_operand:V4SI 1 \"vector_operand\")\n \t  (parallel [(const_int 2) (const_int 3)\n \t\t     (const_int 2) (const_int 3)])))\n    (set (match_dup 6)\n@@ -5713,7 +5713,7 @@\n   [(set (match_dup 5)\n \t(float:V2DF\n \t  (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\")\n+\t    (match_operand:V4SI 1 \"vector_operand\")\n \t    (parallel [(const_int 0) (const_int 1)]))))\n    (set (match_dup 6)\n \t(lt:V2DF (match_dup 5) (match_dup 3)))\n@@ -5855,8 +5855,8 @@\n \n (define_expand \"vec_pack_trunc_v2df\"\n   [(match_operand:V4SF 0 \"register_operand\")\n-   (match_operand:V2DF 1 \"nonimmediate_operand\")\n-   (match_operand:V2DF 2 \"nonimmediate_operand\")]\n+   (match_operand:V2DF 1 \"vector_operand\")\n+   (match_operand:V2DF 2 \"vector_operand\")]\n   \"TARGET_SSE2\"\n {\n   rtx tmp0, tmp1;\n@@ -5917,8 +5917,8 @@\n \n (define_expand \"vec_pack_sfix_trunc_v2df\"\n   [(match_operand:V4SI 0 \"register_operand\")\n-   (match_operand:V2DF 1 \"nonimmediate_operand\")\n-   (match_operand:V2DF 2 \"nonimmediate_operand\")]\n+   (match_operand:V2DF 1 \"vector_operand\")\n+   (match_operand:V2DF 2 \"vector_operand\")]\n   \"TARGET_SSE2\"\n {\n   rtx tmp0, tmp1, tmp2;\n@@ -6014,8 +6014,8 @@\n \n (define_expand \"vec_pack_sfix_v2df\"\n   [(match_operand:V4SI 0 \"register_operand\")\n-   (match_operand:V2DF 1 \"nonimmediate_operand\")\n-   (match_operand:V2DF 2 \"nonimmediate_operand\")]\n+   (match_operand:V2DF 1 \"vector_operand\")\n+   (match_operand:V2DF 2 \"vector_operand\")]\n   \"TARGET_SSE2\"\n {\n   rtx tmp0, tmp1, tmp2;\n@@ -6218,7 +6218,7 @@\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n \t    (match_operand:V4SF 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V4SF 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n   \"TARGET_SSE && <mask_avx512vl_condition>\"\n@@ -6323,7 +6323,7 @@\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n \t    (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V4SF 2 \"vector_operand\" \"xBm,xm\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n   \"TARGET_SSE\"\n@@ -6357,7 +6357,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V4SF 1 \"vector_operand\" \"vBm\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 1)\n \t\t     (const_int 1)\n@@ -6410,7 +6410,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V4SF 1 \"vector_operand\" \"vBm\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 0)\n \t\t     (const_int 0)\n@@ -6505,7 +6505,7 @@\n (define_expand \"sse_shufps<mask_expand4_name>\"\n   [(match_operand:V4SF 0 \"register_operand\")\n    (match_operand:V4SF 1 \"register_operand\")\n-   (match_operand:V4SF 2 \"nonimmediate_operand\")\n+   (match_operand:V4SF 2 \"vector_operand\")\n    (match_operand:SI 3 \"const_int_operand\")]\n   \"TARGET_SSE\"\n {\n@@ -6555,7 +6555,7 @@\n \t(vec_select:VI4F_128\n \t  (vec_concat:<ssedoublevecmode>\n \t    (match_operand:VI4F_128 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:VI4F_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:VI4F_128 2 \"vector_operand\" \"xBm,xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_3_operand\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\")\n \t\t     (match_operand 5 \"const_4_to_7_operand\")\n@@ -6651,6 +6651,7 @@\n    %vmovaps\\t{%1, %0|%0, %1}\n    %vmovlps\\t{%1, %d0|%d0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"ssememalign\" \"64\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n@@ -6776,7 +6777,7 @@\n    (set_attr \"mode\" \"V4SF,V4SF,V4SF,V4SF,V4SF,V4SF,SF,DI,DI\")])\n \n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n-;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n+;; vector_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n (define_insn \"*vec_concatv2sf_sse\"\n   [(set (match_operand:V2SF 0 \"register_operand\"     \"=x,x,*y,*y\")\n@@ -8501,7 +8502,7 @@\n (define_expand \"sse2_shufpd<mask_expand4_name>\"\n   [(match_operand:V2DF 0 \"register_operand\")\n    (match_operand:V2DF 1 \"register_operand\")\n-   (match_operand:V2DF 2 \"nonimmediate_operand\")\n+   (match_operand:V2DF 2 \"vector_operand\")\n    (match_operand:SI 3 \"const_int_operand\")]\n   \"TARGET_SSE2\"\n {\n@@ -8576,7 +8577,7 @@\n \t(vec_select:V2DI\n \t  (vec_concat:V4DI\n \t    (match_operand:V2DI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V2DI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 1)\n \t\t     (const_int 3)])))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n@@ -8626,7 +8627,7 @@\n \t(vec_select:V2DI\n \t  (vec_concat:V4DI\n \t    (match_operand:V2DI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V2DI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 0)\n \t\t     (const_int 2)])))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n@@ -8644,7 +8645,7 @@\n \t(vec_select:VI8F_128\n \t  (vec_concat:<ssedoublevecmode>\n \t    (match_operand:VI8F_128 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:VI8F_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:VI8F_128 2 \"vector_operand\" \"xBm,xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_1_operand\")\n \t\t     (match_operand 4 \"const_2_to_3_operand\")])))]\n   \"TARGET_SSE2\"\n@@ -9615,15 +9616,15 @@\n   [(set (match_operand:VI_AVX2 0 \"register_operand\")\n \t(minus:VI_AVX2\n \t  (match_dup 2)\n-\t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI_AVX2 1 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n (define_expand \"<plusminus_insn><mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\")\n \t(plusminus:VI_AVX2\n-\t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI_AVX2 1 \"vector_operand\")\n+\t  (match_operand:VI_AVX2 2 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n@@ -9652,8 +9653,8 @@\n (define_insn \"*<plusminus_insn><mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=x,v\")\n \t(plusminus:VI_AVX2\n-\t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\" \"<comm>0,v\")\n-\t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VI_AVX2 1 \"vector_operand\" \"<comm>0,v\")\n+\t  (match_operand:VI_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE2\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n@@ -9697,16 +9698,16 @@\n (define_expand \"<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n \t(sat_plusminus:VI12_AVX2\n-\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI12_AVX2 1 \"vector_operand\")\n+\t  (match_operand:VI12_AVX2 2 \"vector_operand\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2 0 \"register_operand\" \"=x,v\")\n \t(sat_plusminus:VI12_AVX2\n-\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\" \"<comm>0,v\")\n-\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VI12_AVX2 1 \"vector_operand\" \"<comm>0,v\")\n+\t  (match_operand:VI12_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n@@ -9730,15 +9731,15 @@\n \n (define_expand \"mul<mode>3<mask_name>\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\")\n-\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"nonimmediate_operand\")\n-\t\t       (match_operand:VI2_AVX2 2 \"nonimmediate_operand\")))]\n+\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"vector_operand\")\n+\t\t       (match_operand:VI2_AVX2 2 \"vector_operand\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n (define_insn \"*mul<mode>3<mask_name>\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n-\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\")\n-\t\t       (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"vector_operand\" \"%0,v\")\n+\t\t       (match_operand:VI2_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE2\n    && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n    && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n@@ -9757,9 +9758,9 @@\n \t  (lshiftrt:<ssedoublemode>\n \t    (mult:<ssedoublemode>\n \t      (any_extend:<ssedoublemode>\n-\t\t(match_operand:VI2_AVX2 1 \"nonimmediate_operand\"))\n+\t\t(match_operand:VI2_AVX2 1 \"vector_operand\"))\n \t      (any_extend:<ssedoublemode>\n-\t\t(match_operand:VI2_AVX2 2 \"nonimmediate_operand\")))\n+\t\t(match_operand:VI2_AVX2 2 \"vector_operand\")))\n \t    (const_int 16))))]\n   \"TARGET_SSE2\n    && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n@@ -9771,9 +9772,9 @@\n \t  (lshiftrt:<ssedoublemode>\n \t    (mult:<ssedoublemode>\n \t      (any_extend:<ssedoublemode>\n-\t\t(match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\"))\n+\t\t(match_operand:VI2_AVX2 1 \"vector_operand\" \"%0,v\"))\n \t      (any_extend:<ssedoublemode>\n-\t\t(match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))\n+\t\t(match_operand:VI2_AVX2 2 \"vector_operand\" \"xBm,vm\")))\n \t    (const_int 16))))]\n   \"TARGET_SSE2\n    && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n@@ -9873,11 +9874,11 @@\n \t(mult:V2DI\n \t  (zero_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\")\n+\t      (match_operand:V4SI 1 \"vector_operand\")\n \t      (parallel [(const_int 0) (const_int 2)])))\n \t  (zero_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\")\n+\t      (match_operand:V4SI 2 \"vector_operand\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n@@ -9887,11 +9888,11 @@\n \t(mult:V2DI\n \t  (zero_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0,v\")\n+\t      (match_operand:V4SI 1 \"vector_operand\" \"%0,v\")\n \t      (parallel [(const_int 0) (const_int 2)])))\n \t  (zero_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,vm\")\n+\t      (match_operand:V4SI 2 \"vector_operand\" \"xBm,vm\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\n    && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n@@ -9991,11 +9992,11 @@\n \t(mult:V2DI\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\")\n+\t      (match_operand:V4SI 1 \"vector_operand\")\n \t      (parallel [(const_int 0) (const_int 2)])))\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\")\n+\t      (match_operand:V4SI 2 \"vector_operand\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n@@ -10005,11 +10006,11 @@\n \t(mult:V2DI\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0,0,v\")\n+\t      (match_operand:V4SI 1 \"vector_operand\" \"%0,0,v\")\n \t      (parallel [(const_int 0) (const_int 2)])))\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n+\t      (match_operand:V4SI 2 \"vector_operand\" \"YrBm,*xBm,vm\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n    && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n@@ -10113,12 +10114,12 @@\n \t  (mult:V4SI\n \t    (sign_extend:V4SI\n \t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\")\n+\t\t(match_operand:V8HI 1 \"vector_operand\")\n \t\t(parallel [(const_int 0) (const_int 2)\n \t\t\t   (const_int 4) (const_int 6)])))\n \t    (sign_extend:V4SI\n \t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\")\n+\t\t(match_operand:V8HI 2 \"vector_operand\")\n \t\t(parallel [(const_int 0) (const_int 2)\n \t\t\t   (const_int 4) (const_int 6)]))))\n \t  (mult:V4SI\n@@ -10139,12 +10140,12 @@\n \t  (mult:V4SI\n \t    (sign_extend:V4SI\n \t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%0,x\")\n+\t\t(match_operand:V8HI 1 \"vector_operand\" \"%0,x\")\n \t\t(parallel [(const_int 0) (const_int 2)\n \t\t\t   (const_int 4) (const_int 6)])))\n \t    (sign_extend:V4SI\n \t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t\t(match_operand:V8HI 2 \"vector_operand\" \"xBm,xm\")\n \t\t(parallel [(const_int 0) (const_int 2)\n \t\t\t   (const_int 4) (const_int 6)]))))\n \t  (mult:V4SI\n@@ -10187,9 +10188,9 @@\n {\n   if (TARGET_SSE4_1)\n     {\n-      if (!nonimmediate_operand (operands[1], <MODE>mode))\n+      if (!vector_operand (operands[1], <MODE>mode))\n \toperands[1] = force_reg (<MODE>mode, operands[1]);\n-      if (!nonimmediate_operand (operands[2], <MODE>mode))\n+      if (!vector_operand (operands[2], <MODE>mode))\n \toperands[2] = force_reg (<MODE>mode, operands[2]);\n       ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n     }\n@@ -10203,8 +10204,8 @@\n (define_insn \"*<sse4_1_avx2>_mul<mode>3<mask_name>\"\n   [(set (match_operand:VI4_AVX512F 0 \"register_operand\" \"=Yr,*x,v\")\n \t(mult:VI4_AVX512F\n-\t  (match_operand:VI4_AVX512F 1 \"nonimmediate_operand\" \"%0,0,v\")\n-\t  (match_operand:VI4_AVX512F 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")))]\n+\t  (match_operand:VI4_AVX512F 1 \"vector_operand\" \"%0,0,v\")\n+\t  (match_operand:VI4_AVX512F 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (MULT, <MODE>mode, operands) && <mask_mode512bit_condition>\"\n   \"@\n    pmulld\\t{%2, %0|%0, %2}\n@@ -10256,8 +10257,8 @@\n ;; named patterns, but signed V4SI needs special help for plain SSE2.\n (define_expand \"vec_widen_smult_even_v4si\"\n   [(match_operand:V2DI 0 \"register_operand\")\n-   (match_operand:V4SI 1 \"nonimmediate_operand\")\n-   (match_operand:V4SI 2 \"nonimmediate_operand\")]\n+   (match_operand:V4SI 1 \"vector_operand\")\n+   (match_operand:V4SI 2 \"vector_operand\")]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],\n@@ -10313,8 +10314,8 @@\n (define_expand \"usadv16qi\"\n   [(match_operand:V4SI 0 \"register_operand\")\n    (match_operand:V16QI 1 \"register_operand\")\n-   (match_operand:V16QI 2 \"nonimmediate_operand\")\n-   (match_operand:V4SI 3 \"nonimmediate_operand\")]\n+   (match_operand:V16QI 2 \"vector_operand\")\n+   (match_operand:V4SI 3 \"vector_operand\")]\n   \"TARGET_SSE2\"\n {\n   rtx t1 = gen_reg_rtx (V2DImode);\n@@ -10654,8 +10655,8 @@\n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\")\n \t(smaxmin:VI124_128\n-\t  (match_operand:VI124_128 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI124_128 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI124_128 1 \"vector_operand\")\n+\t  (match_operand:VI124_128 2 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1 || <MODE>mode == V8HImode)\n@@ -10693,8 +10694,8 @@\n (define_insn \"*sse4_1_<code><mode>3<mask_name>\"\n   [(set (match_operand:VI14_128 0 \"register_operand\" \"=Yr,*x,v\")\n \t(smaxmin:VI14_128\n-\t  (match_operand:VI14_128 1 \"nonimmediate_operand\" \"%0,0,v\")\n-\t  (match_operand:VI14_128 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")))]\n+\t  (match_operand:VI14_128 1 \"vector_operand\" \"%0,0,v\")\n+\t  (match_operand:VI14_128 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n@@ -10711,8 +10712,8 @@\n (define_insn \"*<code>v8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(smaxmin:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0,x\")\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+\t  (match_operand:V8HI 1 \"vector_operand\" \"%0,x\")\n+\t  (match_operand:V8HI 2 \"vector_operand\" \"xBm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V8HImode, operands)\"\n   \"@\n    p<maxmin_int>w\\t{%2, %0|%0, %2}\n@@ -10727,8 +10728,8 @@\n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\")\n \t(umaxmin:VI124_128\n-\t  (match_operand:VI124_128 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI124_128 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI124_128 1 \"vector_operand\")\n+\t  (match_operand:VI124_128 2 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1 || <MODE>mode == V16QImode)\n@@ -10777,8 +10778,8 @@\n (define_insn \"*sse4_1_<code><mode>3<mask_name>\"\n   [(set (match_operand:VI24_128 0 \"register_operand\" \"=Yr,*x,v\")\n \t(umaxmin:VI24_128\n-\t  (match_operand:VI24_128 1 \"nonimmediate_operand\" \"%0,0,v\")\n-\t  (match_operand:VI24_128 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")))]\n+\t  (match_operand:VI24_128 1 \"vector_operand\" \"%0,0,v\")\n+\t  (match_operand:VI24_128 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n@@ -10795,8 +10796,8 @@\n (define_insn \"*<code>v16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n \t(umaxmin:V16QI\n-\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"%0,x\")\n-\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+\t  (match_operand:V16QI 1 \"vector_operand\" \"%0,x\")\n+\t  (match_operand:V16QI 2 \"vector_operand\" \"xBm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V16QImode, operands)\"\n   \"@\n    p<maxmin_int>b\\t{%2, %0|%0, %2}\n@@ -10881,8 +10882,8 @@\n (define_insn \"*sse4_1_eqv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(eq:V2DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"%0,0,x\")\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")))]\n+\t  (match_operand:V2DI 1 \"vector_operand\" \"%0,0,x\")\n+\t  (match_operand:V2DI 2 \"vector_operand\" \"YrBm,*xBm,xm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (EQ, V2DImode, operands)\"\n   \"@\n    pcmpeqq\\t{%2, %0|%0, %2}\n@@ -10897,8 +10898,8 @@\n (define_insn \"*sse2_eq<mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")\n \t(eq:VI124_128\n-\t  (match_operand:VI124_128 1 \"nonimmediate_operand\" \"%0,x\")\n-\t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+\t  (match_operand:VI124_128 1 \"vector_operand\" \"%0,x\")\n+\t  (match_operand:VI124_128 2 \"vector_operand\" \"xBm,xm\")))]\n   \"TARGET_SSE2 && !TARGET_XOP\n    && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n   \"@\n@@ -10913,24 +10914,24 @@\n (define_expand \"sse2_eq<mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\")\n \t(eq:VI124_128\n-\t  (match_operand:VI124_128 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI124_128 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI124_128 1 \"vector_operand\")\n+\t  (match_operand:VI124_128 2 \"vector_operand\")))]\n   \"TARGET_SSE2 && !TARGET_XOP \"\n   \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n \n (define_expand \"sse4_1_eqv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(eq:V2DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\")\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:V2DI 1 \"vector_operand\")\n+\t  (match_operand:V2DI 2 \"vector_operand\")))]\n   \"TARGET_SSE4_1\"\n   \"ix86_fixup_binary_operands_no_copy (EQ, V2DImode, operands);\")\n \n (define_insn \"sse4_2_gtv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(gt:V2DI\n \t  (match_operand:V2DI 1 \"register_operand\" \"0,0,x\")\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")))]\n+\t  (match_operand:V2DI 2 \"vector_operand\" \"YrBm,*xBm,xm\")))]\n   \"TARGET_SSE4_2\"\n   \"@\n    pcmpgtq\\t{%2, %0|%0, %2}\n@@ -10982,7 +10983,7 @@\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")\n \t(gt:VI124_128\n \t  (match_operand:VI124_128 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+\t  (match_operand:VI124_128 2 \"vector_operand\" \"xBm,xm\")))]\n   \"TARGET_SSE2 && !TARGET_XOP\"\n   \"@\n    pcmpgt<ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -11031,7 +11032,7 @@\n   [(set (match_operand:V_128 0 \"register_operand\")\n \t(if_then_else:V_128\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:VI124_128 4 \"nonimmediate_operand\")\n+\t    [(match_operand:VI124_128 4 \"vector_operand\")\n \t     (match_operand:VI124_128 5 \"general_operand\")])\n \t  (match_operand:V_128 1)\n \t  (match_operand:V_128 2)))]\n@@ -11048,7 +11049,7 @@\n   [(set (match_operand:VI8F_128 0 \"register_operand\")\n \t(if_then_else:VI8F_128\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:V2DI 4 \"nonimmediate_operand\")\n+\t    [(match_operand:V2DI 4 \"vector_operand\")\n \t     (match_operand:V2DI 5 \"general_operand\")])\n \t  (match_operand:VI8F_128 1)\n \t  (match_operand:VI8F_128 2)))]\n@@ -11097,8 +11098,8 @@\n   [(set (match_operand:V_128 0 \"register_operand\")\n \t(if_then_else:V_128\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:VI124_128 4 \"nonimmediate_operand\")\n-\t     (match_operand:VI124_128 5 \"nonimmediate_operand\")])\n+\t    [(match_operand:VI124_128 4 \"vector_operand\")\n+\t     (match_operand:VI124_128 5 \"vector_operand\")])\n \t  (match_operand:V_128 1 \"general_operand\")\n \t  (match_operand:V_128 2 \"general_operand\")))]\n   \"TARGET_SSE2\n@@ -11114,8 +11115,8 @@\n   [(set (match_operand:VI8F_128 0 \"register_operand\")\n \t(if_then_else:VI8F_128\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:V2DI 4 \"nonimmediate_operand\")\n-\t     (match_operand:V2DI 5 \"nonimmediate_operand\")])\n+\t    [(match_operand:V2DI 4 \"vector_operand\")\n+\t     (match_operand:V2DI 5 \"vector_operand\")])\n \t  (match_operand:VI8F_128 1 \"general_operand\")\n \t  (match_operand:VI8F_128 2 \"general_operand\")))]\n   \"TARGET_SSE4_2\"\n@@ -11177,7 +11178,7 @@\n \n (define_expand \"one_cmpl<mode>2\"\n   [(set (match_operand:VI 0 \"register_operand\")\n-\t(xor:VI (match_operand:VI 1 \"nonimmediate_operand\")\n+\t(xor:VI (match_operand:VI 1 \"vector_operand\")\n \t\t(match_dup 2)))]\n   \"TARGET_SSE\"\n {\n@@ -11194,7 +11195,7 @@\n   [(set (match_operand:VI_AVX2 0 \"register_operand\")\n \t(and:VI_AVX2\n \t  (not:VI_AVX2 (match_operand:VI_AVX2 1 \"register_operand\"))\n-\t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI_AVX2 2 \"vector_operand\")))]\n   \"TARGET_SSE2\")\n \n (define_expand \"<sse2_avx2>_andnot<mode>3_mask\"\n@@ -11223,7 +11224,7 @@\n   [(set (match_operand:VI 0 \"register_operand\" \"=x,v\")\n \t(and:VI\n \t  (not:VI (match_operand:VI 1 \"register_operand\" \"0,v\"))\n-\t  (match_operand:VI 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:VI 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE\"\n {\n   static char buf[64];\n@@ -11360,8 +11361,8 @@\n (define_insn \"<mask_codefor><code><mode>3<mask_name>\"\n   [(set (match_operand:VI48_AVX_AVX512F 0 \"register_operand\" \"=x,v\")\n \t(any_logic:VI48_AVX_AVX512F\n-\t  (match_operand:VI48_AVX_AVX512F 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VI48_AVX_AVX512F 2 \"nonimmediate_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VI48_AVX_AVX512F 1 \"vector_operand\" \"%0,v\")\n+\t  (match_operand:VI48_AVX_AVX512F 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n@@ -11456,8 +11457,8 @@\n (define_insn \"*<code><mode>3\"\n   [(set (match_operand:VI12_AVX_AVX512F 0 \"register_operand\" \"=x,v\")\n \t(any_logic: VI12_AVX_AVX512F\n-\t  (match_operand:VI12_AVX_AVX512F 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VI12_AVX_AVX512F 2 \"nonimmediate_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VI12_AVX_AVX512F 1 \"vector_operand\" \"%0,v\")\n+\t  (match_operand:VI12_AVX_AVX512F 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n   static char buf[64];\n@@ -11637,7 +11638,7 @@\n \t  (ss_truncate:<ssehalfvecmode>\n \t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"xm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,vm\"))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packsswb\\t{%2, %0|%0, %2}\n@@ -11654,7 +11655,7 @@\n \t  (ss_truncate:<ssehalfvecmode>\n \t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"xm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,vm\"))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packssdw\\t{%2, %0|%0, %2}\n@@ -11671,7 +11672,7 @@\n \t  (us_truncate:<ssehalfvecmode>\n \t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"xm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,vm\"))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packuswb\\t{%2, %0|%0, %2}\n@@ -11759,7 +11760,7 @@\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n \t    (match_operand:V16QI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V16QI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 8)  (const_int 24)\n \t\t     (const_int 9)  (const_int 25)\n \t\t     (const_int 10) (const_int 26)\n@@ -11855,7 +11856,7 @@\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n \t    (match_operand:V16QI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V16QI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 0) (const_int 16)\n \t\t     (const_int 1) (const_int 17)\n \t\t     (const_int 2) (const_int 18)\n@@ -11927,7 +11928,7 @@\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n \t    (match_operand:V8HI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V8HI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 4) (const_int 12)\n \t\t     (const_int 5) (const_int 13)\n \t\t     (const_int 6) (const_int 14)\n@@ -11995,7 +11996,7 @@\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n \t    (match_operand:V8HI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V8HI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 0) (const_int 8)\n \t\t     (const_int 1) (const_int 9)\n \t\t     (const_int 2) (const_int 10)\n@@ -12052,7 +12053,7 @@\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n \t    (match_operand:V4SI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V4SI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n@@ -12106,7 +12107,7 @@\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n \t    (match_operand:V4SI 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:V4SI 2 \"vector_operand\" \"xBm,vm\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n@@ -12773,7 +12774,7 @@\n \n (define_expand \"sse2_pshufd\"\n   [(match_operand:V4SI 0 \"register_operand\")\n-   (match_operand:V4SI 1 \"nonimmediate_operand\")\n+   (match_operand:V4SI 1 \"vector_operand\")\n    (match_operand:SI 2 \"const_int_operand\")]\n   \"TARGET_SSE2\"\n {\n@@ -12789,7 +12790,7 @@\n (define_insn \"sse2_pshufd_1<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")\n+\t  (match_operand:V4SI 1 \"vector_operand\" \"vBm\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")\n \t\t     (match_operand 3 \"const_0_to_3_operand\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\")\n@@ -12925,7 +12926,7 @@\n \n (define_expand \"sse2_pshuflw\"\n   [(match_operand:V8HI 0 \"register_operand\")\n-   (match_operand:V8HI 1 \"nonimmediate_operand\")\n+   (match_operand:V8HI 1 \"vector_operand\")\n    (match_operand:SI 2 \"const_int_operand\")]\n   \"TARGET_SSE2\"\n {\n@@ -12941,7 +12942,7 @@\n (define_insn \"sse2_pshuflw_1<mask_name>\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")\n+\t  (match_operand:V8HI 1 \"vector_operand\" \"vBm\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")\n \t\t     (match_operand 3 \"const_0_to_3_operand\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\")\n@@ -13082,7 +13083,7 @@\n \n (define_expand \"sse2_pshufhw\"\n   [(match_operand:V8HI 0 \"register_operand\")\n-   (match_operand:V8HI 1 \"nonimmediate_operand\")\n+   (match_operand:V8HI 1 \"vector_operand\")\n    (match_operand:SI 2 \"const_int_operand\")]\n   \"TARGET_SSE2\"\n {\n@@ -13098,7 +13099,7 @@\n (define_insn \"sse2_pshufhw_1<mask_name>\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")\n+\t  (match_operand:V8HI 1 \"vector_operand\" \"vBm\")\n \t  (parallel [(const_int 0)\n \t\t     (const_int 1)\n \t\t     (const_int 2)\n@@ -13576,9 +13577,9 @@\n \t    (plus:<ssedoublemode>\n \t      (plus:<ssedoublemode>\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\"))\n+\t\t  (match_operand:VI12_AVX2 1 \"vector_operand\"))\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\")))\n+\t\t  (match_operand:VI12_AVX2 2 \"vector_operand\")))\n \t      (match_dup <mask_expand_op3>))\n \t    (const_int 1))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n@@ -13603,9 +13604,9 @@\n \t    (plus:<ssedoublemode>\n \t      (plus:<ssedoublemode>\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\" \"%0,v\"))\n+\t\t  (match_operand:VI12_AVX2 1 \"vector_operand\" \"%0,v\"))\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))\n+\t\t  (match_operand:VI12_AVX2 2 \"vector_operand\" \"xBm,vm\")))\n \t      (match_operand:VI12_AVX2 <mask_expand_op3> \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n@@ -13625,7 +13626,7 @@\n   [(set (match_operand:VI8_AVX2_AVX512BW 0 \"register_operand\" \"=x,v\")\n \t(unspec:VI8_AVX2_AVX512BW\n \t  [(match_operand:<ssebytemode> 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:<ssebytemode> 2 \"nonimmediate_operand\" \"xm,vm\")]\n+\t   (match_operand:<ssebytemode> 2 \"vector_operand\" \"xBm,vm\")]\n \t  UNSPEC_PSADBW))]\n   \"TARGET_SSE2\"\n   \"@\n@@ -13891,7 +13892,7 @@\n \t    (vec_concat:V2HI\n \t      (ssse3_plusminus:HI\n \t\t(vec_select:HI\n-\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t\t  (match_operand:V8HI 2 \"vector_operand\" \"xBm,xm\")\n \t\t  (parallel [(const_int 0)]))\n \t\t(vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n \t      (ssse3_plusminus:HI\n@@ -14004,7 +14005,7 @@\n \t  (vec_concat:V2SI\n \t    (plusminus:SI\n \t      (vec_select:SI\n-\t\t(match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t\t(match_operand:V4SI 2 \"vector_operand\" \"xBm,xm\")\n \t\t(parallel [(const_int 0)]))\n \t      (vec_select:SI (match_dup 2) (parallel [(const_int 1)])))\n \t    (plusminus:SI\n@@ -14159,7 +14160,7 @@\n \t\t\t   (const_int 12) (const_int 14)])))\n \t    (sign_extend:V8HI\n \t      (vec_select:V8QI\n-\t\t(match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t\t(match_operand:V16QI 2 \"vector_operand\" \"xBm,xm\")\n \t\t(parallel [(const_int 0) (const_int 2)\n \t\t\t   (const_int 4) (const_int 6)\n \t\t\t   (const_int 8) (const_int 10)\n@@ -14274,9 +14275,9 @@\n \t      (lshiftrt:<ssedoublemode>\n \t\t(mult:<ssedoublemode>\n \t\t  (sign_extend:<ssedoublemode>\n-\t\t    (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\"))\n+\t\t    (match_operand:VI2_AVX2 1 \"vector_operand\" \"%0,v\"))\n \t\t  (sign_extend:<ssedoublemode>\n-\t\t    (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))\n+\t\t    (match_operand:VI2_AVX2 2 \"vector_operand\" \"xBm,vm\")))\n \t\t(const_int 14))\n \t      (match_operand:VI2_AVX2 3 \"const1_operand\"))\n \t    (const_int 1))))]\n@@ -14317,7 +14318,7 @@\n   [(set (match_operand:VI1_AVX512 0 \"register_operand\" \"=x,v\")\n \t(unspec:VI1_AVX512\n \t  [(match_operand:VI1_AVX512 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:VI1_AVX512 2 \"nonimmediate_operand\" \"xm,vm\")]\n+\t   (match_operand:VI1_AVX512 2 \"vector_operand\" \"xBm,vm\")]\n \t  UNSPEC_PSHUFB))]\n   \"TARGET_SSSE3 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n@@ -14347,7 +14348,7 @@\n   [(set (match_operand:VI124_AVX2 0 \"register_operand\" \"=x,x\")\n \t(unspec:VI124_AVX2\n \t  [(match_operand:VI124_AVX2 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:VI124_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")]\n+\t   (match_operand:VI124_AVX2 2 \"vector_operand\" \"xBm,xm\")]\n \t  UNSPEC_PSIGN))]\n   \"TARGET_SSSE3\"\n   \"@\n@@ -14399,7 +14400,7 @@\n   [(set (match_operand:SSESCALARMODE 0 \"register_operand\" \"=x,v\")\n \t(unspec:SSESCALARMODE\n \t  [(match_operand:SSESCALARMODE 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:SSESCALARMODE 2 \"nonimmediate_operand\" \"xm,vm\")\n+\t   (match_operand:SSESCALARMODE 2 \"vector_operand\" \"xBm,vm\")\n \t   (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n,n\")]\n \t  UNSPEC_PALIGNR))]\n   \"TARGET_SSSE3\"\n@@ -14454,7 +14455,7 @@\n (define_insn \"*abs<mode>2\"\n   [(set (match_operand:VI1248_AVX512VL_AVX512BW 0 \"register_operand\" \"=v\")\n \t(abs:VI1248_AVX512VL_AVX512BW\n-\t  (match_operand:VI1248_AVX512VL_AVX512BW 1 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:VI1248_AVX512VL_AVX512BW 1 \"vector_operand\" \"vBm\")))]\n   \"TARGET_SSSE3\"\n   \"%vpabs<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog1\")\n@@ -14492,7 +14493,7 @@\n (define_expand \"abs<mode>2\"\n   [(set (match_operand:VI1248_AVX512VL_AVX512BW 0 \"register_operand\")\n \t(abs:VI1248_AVX512VL_AVX512BW\n-\t  (match_operand:VI1248_AVX512VL_AVX512BW 1 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI1248_AVX512VL_AVX512BW 1 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n {\n   if (!TARGET_SSSE3)\n@@ -14606,7 +14607,7 @@\n (define_insn \"<sse4_1>_blend<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:VF_128_256\n-\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t  (match_operand:VF_128_256 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t  (match_operand:VF_128_256 1 \"register_operand\" \"0,0,x\")\n \t  (match_operand:SI 3 \"const_0_to_<blendbits>_operand\")))]\n   \"TARGET_SSE4_1\"\n@@ -14626,7 +14627,7 @@\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VF_128_256\n \t  [(match_operand:VF_128_256 1 \"register_operand\" \"0,0,x\")\n-\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t   (match_operand:VF_128_256 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t   (match_operand:VF_128_256 3 \"register_operand\" \"Yz,Yz,x\")]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n@@ -14646,8 +14647,8 @@\n (define_insn \"<sse4_1>_dp<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VF_128_256\n-\t  [(match_operand:VF_128_256 1 \"nonimmediate_operand\" \"%0,0,x\")\n-\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t  [(match_operand:VF_128_256 1 \"vector_operand\" \"%0,0,x\")\n+\t   (match_operand:VF_128_256 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n \t  UNSPEC_DP))]\n   \"TARGET_SSE4_1\"\n@@ -14684,7 +14685,7 @@\n   [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VI1_AVX2\n \t  [(match_operand:VI1_AVX2 1 \"register_operand\" \"0,0,x\")\n-\t   (match_operand:VI1_AVX2 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t   (match_operand:VI1_AVX2 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n \t  UNSPEC_MPSADBW))]\n   \"TARGET_SSE4_1\"\n@@ -14707,7 +14708,7 @@\n \t  (us_truncate:<ssehalfvecmode>\n \t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,0,v\"))\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"YrBm,*xBm,vm\"))))]\n   \"TARGET_SSE4_1 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packusdw\\t{%2, %0|%0, %2}\n@@ -14723,7 +14724,7 @@\n   [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VI1_AVX2\n \t  [(match_operand:VI1_AVX2 1 \"register_operand\"  \"0,0,x\")\n-\t   (match_operand:VI1_AVX2 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t   (match_operand:VI1_AVX2 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t   (match_operand:VI1_AVX2 3 \"register_operand\" \"Yz,Yz,x\")]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n@@ -14742,7 +14743,7 @@\n (define_insn \"sse4_1_pblendw\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:V8HI\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t  (match_operand:V8HI 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t  (match_operand:V8HI 1 \"register_operand\" \"0,0,x\")\n \t  (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")))]\n   \"TARGET_SSE4_1\"\n@@ -14803,7 +14804,7 @@\n \n (define_insn \"sse4_1_phminposuw\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x\")\n-\t(unspec:V8HI [(match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*xm\")]\n+\t(unspec:V8HI [(match_operand:V8HI 1 \"vector_operand\" \"YrBm,*xBm\")]\n \t\t     UNSPEC_PHMINPOSUW))]\n   \"TARGET_SSE4_1\"\n   \"%vphminposuw\\t{%1, %0|%0, %1}\"\n@@ -15063,7 +15064,7 @@\n (define_insn \"<sse4_1>_ptest<mode>\"\n   [(set (reg:CC FLAGS_REG)\n \t(unspec:CC [(match_operand:V_AVX 0 \"register_operand\" \"Yr, *x, x\")\n-\t\t    (match_operand:V_AVX 1 \"nonimmediate_operand\" \"Yrm, *xm, xm\")]\n+\t\t    (match_operand:V_AVX 1 \"vector_operand\" \"YrBm, *xBm, xm\")]\n \t\t   UNSPEC_PTEST))]\n   \"TARGET_SSE4_1\"\n   \"%vptest\\t{%1, %0|%0, %1}\"\n@@ -15081,7 +15082,7 @@\n (define_insn \"<sse4_1>_round<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x\")\n \t(unspec:VF_128_256\n-\t  [(match_operand:VF_128_256 1 \"nonimmediate_operand\" \"Yrm,*xm\")\n+\t  [(match_operand:VF_128_256 1 \"vector_operand\" \"YrBm,*xBm\")\n \t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_ROUND\"\n@@ -15099,7 +15100,7 @@\n \n (define_expand \"<sse4_1>_round<ssemodesuffix>_sfix<avxsizesuffix>\"\n   [(match_operand:<sseintvecmode> 0 \"register_operand\")\n-   (match_operand:VF1_128_256 1 \"nonimmediate_operand\")\n+   (match_operand:VF1_128_256 1 \"vector_operand\")\n    (match_operand:SI 2 \"const_0_to_15_operand\")]\n   \"TARGET_ROUND\"\n {\n@@ -15125,8 +15126,8 @@\n \n (define_expand \"<sse4_1>_round<ssemodesuffix>_vec_pack_sfix<avxsizesuffix>\"\n   [(match_operand:<ssepackfltmode> 0 \"register_operand\")\n-   (match_operand:VF2 1 \"nonimmediate_operand\")\n-   (match_operand:VF2 2 \"nonimmediate_operand\")\n+   (match_operand:VF2 1 \"vector_operand\")\n+   (match_operand:VF2 2 \"vector_operand\")\n    (match_operand:SI 3 \"const_0_to_15_operand\")]\n   \"TARGET_ROUND\"\n {\n@@ -16926,7 +16927,7 @@\n (define_insn \"aesenc\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0,x\")\n-\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")]\n+\t\t       (match_operand:V2DI 2 \"vector_operand\" \"xBm,xm\")]\n \t\t      UNSPEC_AESENC))]\n   \"TARGET_AES\"\n   \"@\n@@ -16942,7 +16943,7 @@\n (define_insn \"aesenclast\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0,x\")\n-\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")]\n+\t\t       (match_operand:V2DI 2 \"vector_operand\" \"xBm,xm\")]\n \t\t      UNSPEC_AESENCLAST))]\n   \"TARGET_AES\"\n   \"@\n@@ -16958,7 +16959,7 @@\n (define_insn \"aesdec\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0,x\")\n-\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")]\n+\t\t       (match_operand:V2DI 2 \"vector_operand\" \"xBm,xm\")]\n \t\t      UNSPEC_AESDEC))]\n   \"TARGET_AES\"\n   \"@\n@@ -16974,7 +16975,7 @@\n (define_insn \"aesdeclast\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0,x\")\n-\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")]\n+\t\t       (match_operand:V2DI 2 \"vector_operand\" \"xBm,xm\")]\n \t\t      UNSPEC_AESDECLAST))]\n   \"TARGET_AES\"\n   \"@\n@@ -16989,7 +16990,7 @@\n \n (define_insn \"aesimc\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(unspec:V2DI [(match_operand:V2DI 1 \"nonimmediate_operand\" \"xm\")]\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"vector_operand\" \"xBm\")]\n \t\t      UNSPEC_AESIMC))]\n   \"TARGET_AES\"\n   \"%vaesimc\\t{%1, %0|%0, %1}\"\n@@ -17000,7 +17001,7 @@\n \n (define_insn \"aeskeygenassist\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(unspec:V2DI [(match_operand:V2DI 1 \"nonimmediate_operand\" \"xm\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"vector_operand\" \"xBm\")\n \t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"n\")]\n \t\t     UNSPEC_AESKEYGENASSIST))]\n   \"TARGET_AES\"\n@@ -17014,7 +17015,7 @@\n (define_insn \"pclmulqdq\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0,x\")\n-\t\t      (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t\t      (match_operand:V2DI 2 \"vector_operand\" \"xBm,xm\")\n \t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n \t\t     UNSPEC_PCLMUL))]\n   \"TARGET_PCLMUL\"\n@@ -19152,7 +19153,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")]\n \t  UNSPEC_SHA1MSG1))]\n   \"TARGET_SHA\"\n   \"sha1msg1\\t{%2, %0|%0, %2}\"\n@@ -19163,7 +19164,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")]\n \t  UNSPEC_SHA1MSG2))]\n   \"TARGET_SHA\"\n   \"sha1msg2\\t{%2, %0|%0, %2}\"\n@@ -19174,7 +19175,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")]\n \t  UNSPEC_SHA1NEXTE))]\n   \"TARGET_SHA\"\n   \"sha1nexte\\t{%2, %0|%0, %2}\"\n@@ -19185,7 +19186,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")\n \t   (match_operand:SI 3 \"const_0_to_3_operand\" \"n\")]\n \t  UNSPEC_SHA1RNDS4))]\n   \"TARGET_SHA\"\n@@ -19198,7 +19199,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")]\n \t  UNSPEC_SHA256MSG1))]\n   \"TARGET_SHA\"\n   \"sha256msg1\\t{%2, %0|%0, %2}\"\n@@ -19209,7 +19210,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")]\n \t  UNSPEC_SHA256MSG2))]\n   \"TARGET_SHA\"\n   \"sha256msg2\\t{%2, %0|%0, %2}\"\n@@ -19220,7 +19221,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")\n \t   (match_operand:V4SI 3 \"register_operand\" \"Yz\")]\n \t  UNSPEC_SHA256RNDS2))]\n   \"TARGET_SHA\""}, {"sha": "d35f34ca57c131b5cc09a8e4b371af9c0c0a189f", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "patch": "@@ -123,7 +123,7 @@\n (define_subst_attr \"round_constraint\" \"round\" \"vm\" \"v\")\n (define_subst_attr \"round_constraint2\" \"round\" \"m\" \"v\")\n (define_subst_attr \"round_constraint3\" \"round\" \"rm\" \"r\")\n-(define_subst_attr \"round_nimm_predicate\" \"round\" \"nonimmediate_operand\" \"register_operand\")\n+(define_subst_attr \"round_nimm_predicate\" \"round\" \"vector_operand\" \"register_operand\")\n (define_subst_attr \"round_prefix\" \"round\" \"vex\" \"evex\")\n (define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(<MODE>mode == V16SFmode\n \t\t\t\t\t\t\t      || <MODE>mode == V8DFmode\n@@ -162,7 +162,8 @@\n (define_subst_attr \"round_saeonly_sd_mask_op5\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand5>\")\n (define_subst_attr \"round_saeonly_constraint\" \"round_saeonly\" \"vm\" \"v\")\n (define_subst_attr \"round_saeonly_constraint2\" \"round_saeonly\" \"m\" \"v\")\n-(define_subst_attr \"round_saeonly_nimm_predicate\" \"round_saeonly\" \"nonimmediate_operand\" \"register_operand\")\n+(define_subst_attr \"round_saeonly_nimm_predicate\" \"round_saeonly\" \"vector_operand\" \"register_operand\")\n+(define_subst_attr \"round_saeonly_nimm_scalar_predicate\" \"round_saeonly\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"round_saeonly_mode512bit_condition\" \"round_saeonly\" \"1\" \"(<MODE>mode == V16SFmode\n \t\t\t\t\t\t\t\t\t      || <MODE>mode == V8DFmode\n \t\t\t\t\t\t\t\t\t      || <MODE>mode == V8DImode"}, {"sha": "9b0f2f691f72bf0f1527bbb1d5231e7d447f8e98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "patch": "@@ -1,3 +1,8 @@\n+2016-01-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/68991\n+\t* gcc.target/i386/pr68991.c: New test.\n+\n 2016-01-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/68991"}, {"sha": "3fc5ac8dceb266d943e0d7d5aacbdac8fd109527", "filename": "gcc/testsuite/gcc.target/i386/pr68991.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68991.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf93f1edc9c6148ff34499975acf2f4a7cc9e75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68991.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68991.c?ref=acf93f1edc9c6148ff34499975acf2f4a7cc9e75", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse\" } */\n+\n+float\n+foo (float a, float b, float c, float d)\n+{\n+  float ac, bd, ad, bc, y;\n+\n+  ac = a * c;\n+  bd = b * d;\n+  ad = a * d;\n+  bc = b * c;\n+\n+  if (__builtin_expect (!__builtin_expect ((a) != (a), 0)\n+\t\t\t& !__builtin_expect (!__builtin_expect (((a) - (a)) != ((a) - (a)), 0), 1), 0)\n+      || __builtin_expect (!__builtin_expect ((b) != (b), 0)\n+\t\t\t   & !__builtin_expect (!__builtin_expect (((b) - (b)) != ((b) - (b)), 0), 1), 0))\n+    a = __builtin_copysignf (__builtin_expect (!__builtin_expect ((a) != (a), 0)\n+\t\t\t\t\t       & !__builtin_expect (!__builtin_expect (((a) - (a)) != ((a) - (a)), 0), 1), 0) ? 1 : 0, a);\n+\n+  c = __builtin_copysignf (__builtin_expect (!__builtin_expect ((c) != (c), 0) & !__builtin_expect (!__builtin_expect (((c) - (c)) != ((c) - (c)), 0), 1), 0) ? 1 : 0, c);\n+  if ((__builtin_expect (!__builtin_expect ((ac) != (ac), 0)\n+\t\t\t & !__builtin_expect (!__builtin_expect (((ac) - (ac)) != ((ac) - (ac)), 0), 1), 0)\n+       || __builtin_expect (!__builtin_expect ((bd) != (bd), 0)\n+\t\t\t    & !__builtin_expect (!__builtin_expect (((bd) - (bd)) != ((bd) - (bd)), 0), 1), 0)\n+       || __builtin_expect (!__builtin_expect ((bc) != (bc), 0) & !__builtin_expect (!__builtin_expect (((bc) - (bc)) != ((bc) - (bc)), 0), 1), 0)))\n+    d = __builtin_copysignf (0, d);\n+\n+  y = a * d + b * c;\n+\n+  return y;\n+}"}]}