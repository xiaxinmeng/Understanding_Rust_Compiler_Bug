{"sha": "e805a59940bf1d5627200c26771867f2f83cabc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwNWE1OTk0MGJmMWQ1NjI3MjAwYzI2NzcxODY3ZjJmODNjYWJjMQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-01-16T16:16:00Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-01-16T16:16:00Z"}, "message": "trans-intrinsic.c (build_fixbound_expr, [...]): Use 'build_int_cst' instead of converting 'integer_zero_node' or...\n\n* trans-intrinsic.c (build_fixbound_expr,\ngfc_conv_intrinsic_bound, gfc_conv_intrinsic_anyall,\ngfc_conv_intrinsic_count, gfc_conv_intrinsic_btest,\ngfc_conv_intrinsic_singlebitop): Use 'build_int_cst' instead\nof converting 'integer_zero_node' or 'integer_one_node'\nrespectively.\n(gfc_conv_intrinsic_ishftc): Same, but store in local variable to\nevade re-building.\n(gfc_conv_intrinsic_strcmp, gfc_conv_intrinsic_rrspacing,\ngfc_conv_intrinsic_trim, gfc_conv_intrinsic_iargc): Use\n'build_int_cst' instead of converting 'integer_zero_node' or\n'integer_one_node' respectively.\n\nFrom-SVN: r93730", "tree": {"sha": "6a8c5d154f3fc042c2c7626ce5b83e1c6a1896a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a8c5d154f3fc042c2c7626ce5b83e1c6a1896a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e805a59940bf1d5627200c26771867f2f83cabc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e805a59940bf1d5627200c26771867f2f83cabc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e805a59940bf1d5627200c26771867f2f83cabc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e805a59940bf1d5627200c26771867f2f83cabc1/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e3b87274d2e559eb5df85800069edee8f647f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3b87274d2e559eb5df85800069edee8f647f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3b87274d2e559eb5df85800069edee8f647f2c"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "1b5858c65566159765da6f5fec4991934ddbd134", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e805a59940bf1d5627200c26771867f2f83cabc1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e805a59940bf1d5627200c26771867f2f83cabc1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e805a59940bf1d5627200c26771867f2f83cabc1", "patch": "@@ -7,6 +7,19 @@\n \t* trans-types.c (gfc_get_character_type_len): : Use\n \tgfc_charlen_type_node as basic type for the range field.\n \n+\t* trans-intrinsic.c (build_fixbound_expr,\n+\tgfc_conv_intrinsic_bound, gfc_conv_intrinsic_anyall,\n+\tgfc_conv_intrinsic_count, gfc_conv_intrinsic_btest,\n+\tgfc_conv_intrinsic_singlebitop): Use 'build_int_cst' instead\n+\tof converting 'integer_zero_node' or 'integer_one_node'\n+\trespectively.\n+\t(gfc_conv_intrinsic_ishftc): Same, but store in local variable to\n+\tevade re-building.\n+\t(gfc_conv_intrinsic_strcmp, gfc_conv_intrinsic_rrspacing,\n+\tgfc_conv_intrinsic_trim, gfc_conv_intrinsic_iargc): Use\n+\t'build_int_cst' instead of converting 'integer_zero_node' or\n+\t'integer_one_node' respectively.\n+\t\n 2005-01-16  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR 19168"}, {"sha": "c44499fcdeb31dab4f6f55f4003673f440bf5438", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e805a59940bf1d5627200c26771867f2f83cabc1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e805a59940bf1d5627200c26771867f2f83cabc1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=e805a59940bf1d5627200c26771867f2f83cabc1", "patch": "@@ -235,7 +235,7 @@ build_fixbound_expr (stmtblock_t * pblock, tree arg, tree type, int up)\n   cond = build2 (up ? GE_EXPR : LE_EXPR, boolean_type_node, tmp, arg);\n \n   tmp = build2 (up ? PLUS_EXPR : MINUS_EXPR, type, intval,\n-\t\tconvert (type, integer_one_node));\n+\t\tbuild_int_cst (type, 1));\n   tmp = build3 (COND_EXPR, type, cond, intval, tmp);\n   return tmp;\n }\n@@ -684,8 +684,7 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n         {\n           bound = gfc_evaluate_now (bound, &se->pre);\n           cond = fold (build2 (LT_EXPR, boolean_type_node,\n-\t\t\t       bound, convert (TREE_TYPE (bound),\n-\t\t\t\t\t       integer_zero_node)));\n+\t\t\t       bound, build_int_cst (TREE_TYPE (bound), 0)));\n           tmp = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (TREE_TYPE (desc))];\n           tmp = fold (build2 (GE_EXPR, boolean_type_node, bound, tmp));\n           cond = fold(build2 (TRUTH_ORIF_EXPR, boolean_type_node, cond, tmp));\n@@ -1172,8 +1171,7 @@ gfc_conv_intrinsic_anyall (gfc_se * se, gfc_expr * expr, int op)\n \n   gfc_add_block_to_block (&body, &arrayse.pre);\n   tmp = build2 (op, boolean_type_node, arrayse.expr,\n-\t\tfold_convert (TREE_TYPE (arrayse.expr),\n-\t\t\t      integer_zero_node));\n+\t\tbuild_int_cst (TREE_TYPE (arrayse.expr), 0));\n   tmp = build3_v (COND_EXPR, tmp, found, build_empty_stmt ());\n   gfc_add_expr_to_block (&body, tmp);\n   gfc_add_block_to_block (&body, &arrayse.post);\n@@ -1215,7 +1213,7 @@ gfc_conv_intrinsic_count (gfc_se * se, gfc_expr * expr)\n   type = gfc_typenode_for_spec (&expr->ts);\n   /* Initialize the result.  */\n   resvar = gfc_create_var (type, \"count\");\n-  gfc_add_modify_expr (&se->pre, resvar, convert (type, integer_zero_node));\n+  gfc_add_modify_expr (&se->pre, resvar, build_int_cst (type, 0));\n \n   /* Walk the arguments.  */\n   arrayss = gfc_walk_expr (actual->expr);\n@@ -1234,7 +1232,7 @@ gfc_conv_intrinsic_count (gfc_se * se, gfc_expr * expr)\n   gfc_start_scalarized_body (&loop, &body);\n \n   tmp = build2 (PLUS_EXPR, TREE_TYPE (resvar), resvar,\n-\t\tconvert (TREE_TYPE (resvar), integer_one_node));\n+\t\tbuild_int_cst (TREE_TYPE (resvar), 1));\n   tmp = build2_v (MODIFY_EXPR, resvar, tmp);\n \n   gfc_init_se (&arrayse, NULL);\n@@ -1670,10 +1668,10 @@ gfc_conv_intrinsic_btest (gfc_se * se, gfc_expr * expr)\n   arg = TREE_VALUE (arg);\n   type = TREE_TYPE (arg);\n \n-  tmp = build2 (LSHIFT_EXPR, type, convert (type, integer_one_node), arg2);\n+  tmp = build2 (LSHIFT_EXPR, type, build_int_cst (type, 1), arg2);\n   tmp = build2 (BIT_AND_EXPR, type, arg, tmp);\n   tmp = fold (build2 (NE_EXPR, boolean_type_node, tmp,\n-\t\t      convert (type, integer_zero_node)));\n+\t\t      build_int_cst (type, 0)));\n   type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = convert (type, tmp);\n }\n@@ -1721,8 +1719,7 @@ gfc_conv_intrinsic_singlebitop (gfc_se * se, gfc_expr * expr, int set)\n   arg = TREE_VALUE (arg);\n   type = TREE_TYPE (arg);\n \n-  tmp = fold (build2 (LSHIFT_EXPR, type,\n-\t\t     convert (type, integer_one_node), arg2));\n+  tmp = fold (build2 (LSHIFT_EXPR, type, build_int_cst (type, 1), arg2));\n   if (set)\n     op = BIT_IOR_EXPR;\n   else\n@@ -1823,6 +1820,7 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n   tree tmp;\n   tree lrot;\n   tree rrot;\n+  tree zero;\n \n   arg = gfc_conv_intrinsic_function_args (se, expr);\n   arg2 = TREE_CHAIN (arg);\n@@ -1880,13 +1878,12 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n   tmp = fold (build1 (NEGATE_EXPR, TREE_TYPE (arg2), arg2));\n   rrot = fold (build2 (RROTATE_EXPR, type, arg, tmp));\n \n-  tmp = fold (build2 (GT_EXPR, boolean_type_node, arg2,\n-\t\t      convert (TREE_TYPE (arg2), integer_zero_node)));\n+  zero = build_int_cst (TREE_TYPE (arg2), 0);\n+  tmp = fold (build2 (GT_EXPR, boolean_type_node, arg2, zero));\n   rrot = fold (build3 (COND_EXPR, type, tmp, lrot, rrot));\n \n   /* Do nothing if shift == 0.  */\n-  tmp = fold (build2 (EQ_EXPR, boolean_type_node, arg2,\n-\t\t      convert (TREE_TYPE (arg2), integer_zero_node)));\n+  tmp = fold (build2 (EQ_EXPR, boolean_type_node, arg2, zero));\n   se->expr = fold (build3 (COND_EXPR, type, tmp, arg, rrot));\n }\n \n@@ -2097,7 +2094,7 @@ gfc_conv_intrinsic_strcmp (gfc_se * se, gfc_expr * expr, int op)\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = build2 (op, type, se->expr,\n-\t\t     convert (TREE_TYPE (se->expr), integer_zero_node));\n+\t\t     build_int_cst (TREE_TYPE (se->expr), 0));\n }\n \n /* Generate a call to the adjustl/adjustr library function.  */\n@@ -2529,7 +2526,7 @@ gfc_conv_intrinsic_rrspacing (gfc_se * se, gfc_expr * expr)\n    cond2 = build2 (EQ_EXPR, boolean_type_node, rcs.frac, zero);\n    cond = build2 (TRUTH_ANDIF_EXPR, boolean_type_node, cond, cond2);\n    tmp = build3 (COND_EXPR, masktype, cond,\n-\t\t convert (masktype, integer_zero_node), tmp);\n+\t\t build_int_cst (masktype, 0), tmp);\n \n    tmp = build1 (VIEW_CONVERT_EXPR, rcs.type, tmp);\n    se->expr = tmp;\n@@ -2608,7 +2605,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n \n   /* Free the temporary afterwards, if necessary.  */\n   cond = build2 (GT_EXPR, boolean_type_node, len,\n-\t\t convert (TREE_TYPE (len), integer_zero_node));\n+\t\t build_int_cst (TREE_TYPE (len), 0));\n   arglist = gfc_chainon_list (NULL_TREE, var);\n   tmp = gfc_build_function_call (gfor_fndecl_internal_free, arglist);\n   tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n@@ -2671,7 +2668,7 @@ gfc_conv_intrinsic_iargc (gfc_se * se, gfc_expr * expr, bool args_only)\n   tmp = fold_convert (type, tmp);\n \n   if (args_only)\n-    tmp = build2 (MINUS_EXPR, type, tmp, convert (type, integer_one_node));\n+    tmp = build2 (MINUS_EXPR, type, tmp, build_int_cst (type, 1));\n   se->expr = tmp;\n }\n "}]}