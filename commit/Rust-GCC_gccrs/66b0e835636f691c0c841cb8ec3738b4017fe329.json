{"sha": "66b0e835636f691c0c841cb8ec3738b4017fe329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiMGU4MzU2MzZmNjkxYzBjODQxY2I4ZWMzNzM4YjQwMTdmZTMyOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-18T23:49:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-18T23:49:35Z"}, "message": "decl.c (vtable_decl_p, [...]): Remove.\n\n\t* decl.c (vtable_decl_p, vtype_decl_p, walk_globals_data,\n\twalk_vtables_r, walk_vtables, walk_globals_r, walk_globals):\n\tRemove.\n\t* cp-tree.h: Remove the corresponding prototypes.\n\nFrom-SVN: r93867", "tree": {"sha": "3d29a62fab5cbed069d10ca0c6a94d77c8b83673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d29a62fab5cbed069d10ca0c6a94d77c8b83673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b0e835636f691c0c841cb8ec3738b4017fe329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b0e835636f691c0c841cb8ec3738b4017fe329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b0e835636f691c0c841cb8ec3738b4017fe329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b0e835636f691c0c841cb8ec3738b4017fe329/comments", "author": null, "committer": null, "parents": [{"sha": "1fe94b97e55fcbc14419a17b2a485fe4186619d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe94b97e55fcbc14419a17b2a485fe4186619d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fe94b97e55fcbc14419a17b2a485fe4186619d3"}], "stats": {"total": 118, "additions": 5, "deletions": 113}, "files": [{"sha": "e8e5176c610c8e0a1121f4469fdb32a6baf4ca22", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b0e835636f691c0c841cb8ec3738b4017fe329/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b0e835636f691c0c841cb8ec3738b4017fe329/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=66b0e835636f691c0c841cb8ec3738b4017fe329", "patch": "@@ -3,6 +3,11 @@\n \t* decl.c (delete_block): Remove.\n \t* cp-tree.h: Remove the corresponding prototype.\n \n+\t* decl.c (vtable_decl_p, vtype_decl_p, walk_globals_data,\n+\twalk_vtables_r, walk_vtables, walk_globals_r, walk_globals):\n+\tRemove.\n+\t* cp-tree.h: Remove the corresponding prototypes.\n+\n 2005-01-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/19472"}, {"sha": "35787dd6323286c9b7233b551a5e9c057644c09f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b0e835636f691c0c841cb8ec3738b4017fe329/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b0e835636f691c0c841cb8ec3738b4017fe329/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=66b0e835636f691c0c841cb8ec3738b4017fe329", "patch": "@@ -3812,13 +3812,7 @@ extern void fixup_anonymous_aggr                (tree);\n extern int check_static_variable_definition     (tree, tree);\n extern tree compute_array_index_type\t\t(tree, tree);\n extern tree check_default_argument              (tree, tree);\n-extern int vtable_decl_p                        (tree, void *);\n-extern int vtype_decl_p                         (tree, void *);\n extern int sigtable_decl_p                      (tree, void *);\n-typedef bool (*walk_globals_pred) (tree, void *);\n-typedef bool (*walk_globals_fn) (tree *, void *);\n-extern bool walk_globals (walk_globals_pred, walk_globals_fn, void *);\n-extern bool walk_vtables (walk_globals_pred, walk_globals_fn, void *);\n typedef int (*walk_namespaces_fn)               (tree, void *);\n extern int walk_namespaces                      (walk_namespaces_fn,\n \t\t\t\t\t\t       void *);"}, {"sha": "a9ab7b0164e242524f04dab058d8008ebd020d86", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b0e835636f691c0c841cb8ec3738b4017fe329/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b0e835636f691c0c841cb8ec3738b4017fe329/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=66b0e835636f691c0c841cb8ec3738b4017fe329", "patch": "@@ -80,8 +80,6 @@ static tree record_builtin_java_type (const char *, int);\n static const char *tag_name (enum tag_types);\n static tree lookup_and_check_tag (enum tag_types, tree, tag_scope, bool);\n static int walk_namespaces_r (tree, walk_namespaces_fn, void *);\n-static int walk_globals_r (tree, void*);\n-static int walk_vtables_r (tree, void*);\n static tree make_label_decl (tree, int);\n static void use_label (tree);\n static void check_previous_goto_1 (tree, struct cp_binding_level *, tree,\n@@ -754,64 +752,6 @@ insert_block (tree block)\n     = chainon (current_binding_level->blocks, block);\n }\n \n-/* Returns nonzero if T is a virtual function table.  */\n-\n-int\n-vtable_decl_p (tree t, void* data ATTRIBUTE_UNUSED )\n-{\n-  return (TREE_CODE (t) == VAR_DECL && DECL_VIRTUAL_P (t));\n-}\n-\n-/* Returns nonzero if T is a TYPE_DECL for a type with virtual\n-   functions.  */\n-\n-int\n-vtype_decl_p (tree t, void *data ATTRIBUTE_UNUSED )\n-{\n-  return (TREE_CODE (t) == TYPE_DECL\n-\t  && TREE_CODE (TREE_TYPE (t)) == RECORD_TYPE\n-\t  && TYPE_POLYMORPHIC_P (TREE_TYPE (t)));\n-}\n-\n-struct walk_globals_data {\n-  walk_globals_pred p;\n-  walk_globals_fn f;\n-  void *data;\n-};\n-\n-/* Walk the vtable declarations in NAMESPACE.  Whenever one is found\n-   for which P returns nonzero, call F with its address.  If any call\n-   to F returns a nonzero value, return a nonzero value.  */\n-\n-static int\n-walk_vtables_r (tree namespace, void* data)\n-{\n-  struct walk_globals_data* wgd = (struct walk_globals_data *) data;\n-  walk_globals_fn f = wgd->f;\n-  void *d = wgd->data;\n-  tree decl = NAMESPACE_LEVEL (namespace)->vtables;\n-  int result = 0;\n-\n-  for (; decl ; decl = TREE_CHAIN (decl))\n-    result |= (*f) (&decl, d);\n-\n-  return result;\n-}\n-\n-/* Walk the vtable declarations.  Whenever one is found for which P\n-   returns nonzero, call F with its address.  If any call to F\n-   returns a nonzero value, return a nonzero value.  */\n-bool\n-walk_vtables (walk_globals_pred p, walk_globals_fn f, void *data)\n-{\n-  struct walk_globals_data wgd;\n-  wgd.p = p;\n-  wgd.f = f;\n-  wgd.data = data;\n-\n-  return walk_namespaces (walk_vtables_r, &wgd);\n-}\n-\n /* Walk all the namespaces contained NAMESPACE, including NAMESPACE\n    itself, calling F for each.  The DATA is passed to F as well.  */\n \n@@ -838,53 +778,6 @@ walk_namespaces (walk_namespaces_fn f, void* data)\n   return walk_namespaces_r (global_namespace, f, data);\n }\n \n-/* Walk the global declarations in NAMESPACE.  Whenever one is found\n-   for which P returns nonzero, call F with its address.  If any call\n-   to F returns a nonzero value, return a nonzero value.  */\n-\n-static int\n-walk_globals_r (tree namespace, void* data)\n-{\n-  struct walk_globals_data* wgd = (struct walk_globals_data *) data;\n-  walk_globals_pred p = wgd->p;\n-  walk_globals_fn f = wgd->f;\n-  void *d = wgd->data;\n-  tree *t;\n-  int result = 0;\n-\n-  t = &NAMESPACE_LEVEL (namespace)->names;\n-\n-  while (*t)\n-    {\n-      tree glbl = *t;\n-\n-      if ((*p) (glbl, d))\n-\tresult |= (*f) (t, d);\n-\n-      /* If F changed *T, then *T still points at the next item to\n-\t examine.  */\n-      if (*t == glbl)\n-\tt = &TREE_CHAIN (*t);\n-    }\n-\n-  return result;\n-}\n-\n-/* Walk the global declarations.  Whenever one is found for which P\n-   returns true, call F with its address.  If any call to F\n-   returns true, return true.  */\n-\n-bool\n-walk_globals (walk_globals_pred p, walk_globals_fn f, void *data)\n-{\n-  struct walk_globals_data wgd;\n-  wgd.p = p;\n-  wgd.f = f;\n-  wgd.data = data;\n-\n-  return walk_namespaces (walk_globals_r, &wgd);\n-}\n-\n /* Call wrapup_globals_declarations for the globals in NAMESPACE.  If\n    DATA is non-NULL, this is the last time we will call\n    wrapup_global_declarations for this NAMESPACE.  */"}]}