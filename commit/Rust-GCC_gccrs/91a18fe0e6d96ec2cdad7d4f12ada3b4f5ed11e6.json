{"sha": "91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhMThmZTBlNmQ5NmVjMmNkYWQ3ZDRmMTJhZGEzYjRmNWVkMTFlNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-07-17T19:01:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-17T19:01:54Z"}, "message": "c-typeck.c (build_binary_op): Do not shorten unsigned right shift after sign extension.\n\n        * c-typeck.c (build_binary_op): Do not shorten unsigned\n        right shift after sign extension.\n\nFrom-SVN: r44080", "tree": {"sha": "c9572ed6e5246afd03ce187bb2507cce9039341a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9572ed6e5246afd03ce187bb2507cce9039341a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/comments", "author": null, "committer": null, "parents": [{"sha": "4fe706d8e0fc99538a988e63a3db7f529cd561d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe706d8e0fc99538a988e63a3db7f529cd561d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe706d8e0fc99538a988e63a3db7f529cd561d6"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "39b7e980ca3fed5b53874c912f3cca4cc99000ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "patch": "@@ -1,3 +1,8 @@\n+2001-07-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-typeck.c (build_binary_op): Do not shorten unsigned\n+\tright shift after sign extension.\n+\n Tue Jul 17 16:56:05 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* combine.c (combine_simplify_rtx): Attempt to simplify"}, {"sha": "7bde430e8cb513f5bb2a3a11b4e0d725585eed45", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "patch": "@@ -2469,22 +2469,12 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t      /* We can shorten only if the shift count is less than the\n \t\t number of bits in the smaller type size.  */\n \t      && compare_tree_int (op1, TYPE_PRECISION (TREE_TYPE (arg0))) < 0\n-\t      /* If arg is sign-extended and then unsigned-shifted,\n-\t\t we can simulate this with a signed shift in arg's type\n-\t\t only if the extended result is at least twice as wide\n-\t\t as the arg.  Otherwise, the shift could use up all the\n-\t\t ones made by sign-extension and bring in zeros.\n-\t\t We can't optimize that case at all, but in most machines\n-\t\t it never happens because available widths are 2**N.  */\n-\t      && (!TREE_UNSIGNED (final_type)\n-\t\t  || unsigned_arg\n-\t\t  || (2 * TYPE_PRECISION (TREE_TYPE (arg0))\n-\t\t      <= TYPE_PRECISION (result_type))))\n+\t      /* We cannot drop an unsigned shift after sign-extension.  */\n+\t      && (!TREE_UNSIGNED (final_type) || unsigned_arg))\n \t    {\n \t      /* Do an unsigned shift if the operand was zero-extended.  */\n \t      result_type\n-\t\t= signed_or_unsigned_type (unsigned_arg,\n-\t\t\t\t\t   TREE_TYPE (arg0));\n+\t\t= signed_or_unsigned_type (unsigned_arg, TREE_TYPE (arg0));\n \t      /* Convert value-to-be-shifted to that type.  */\n \t      if (TREE_TYPE (op0) != result_type)\n \t\top0 = convert (result_type, op0);"}, {"sha": "b266dfc357faaeb32f454b1b8562949f55ba895f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "patch": "@@ -1,3 +1,7 @@\n+2001-07-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/20010717-1.c: New.\n+\n 2001-07-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c-torture/compile/20010714-1.c, gcc.dg/format/attr-4.c: New"}, {"sha": "65199da90350baff01b1ca8c5a7b408b72b11bc6", "filename": "gcc/testsuite/gcc.c-torture/execute/20010717-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010717-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010717-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010717-1.c?ref=91a18fe0e6d96ec2cdad7d4f12ada3b4f5ed11e6", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  unsigned long u, r1, r2;\n+\n+  i = -16;\n+  j = 1;\n+  u = i + j;\n+\n+  /* no sign extension upon shift */\n+  r1 = u >> 1;\n+  /* sign extension upon shift, but there shouldn't be */\n+  r2 = ((unsigned long) (i + j)) >> 1;\n+\n+  if (r1 != r2)\n+    abort ();\n+\n+  return 0;\n+}"}]}