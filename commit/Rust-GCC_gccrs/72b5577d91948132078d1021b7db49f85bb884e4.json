{"sha": "72b5577d91948132078d1021b7db49f85bb884e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJiNTU3N2Q5MTk0ODEzMjA3OGQxMDIxYjdkYjQ5Zjg1YmI4ODRlNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-05-29T22:45:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-05-29T22:45:54Z"}, "message": "builtins.c (validate_gimple_arglist): Don't use va_arg with enum type.\n\n./:\t* builtins.c (validate_gimple_arglist): Don't use va_arg with\n\tenum type.\n\t* calls.c (emit_library_call_value_1): Likewise.\n\n\t* c-typeck.c (c_build_va_arg): New function.\n\t* c-tree.h (c_build_va_arg): Declare.\n\t* c-parser.c (c_parser_postfix_expression): Call c_build_va_arg\n\tinstead of build_va_arg.\ncp/:\n\t* error.c (cp_printer): Don't use va_arg with enum type.\ntestsuite/:\n\t* gcc.dg/Wcxx-compat-11.c: New testcase.\n\nFrom-SVN: r147989", "tree": {"sha": "86965b7acc5db54a702c131ce74a286eef70f176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86965b7acc5db54a702c131ce74a286eef70f176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72b5577d91948132078d1021b7db49f85bb884e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b5577d91948132078d1021b7db49f85bb884e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b5577d91948132078d1021b7db49f85bb884e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b5577d91948132078d1021b7db49f85bb884e4/comments", "author": null, "committer": null, "parents": [{"sha": "b0999b01149d3b429c78b98a7c24dd6f9652c08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0999b01149d3b429c78b98a7c24dd6f9652c08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0999b01149d3b429c78b98a7c24dd6f9652c08c"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "f101cbf56164b3de3ebb8aa6b01498662a00e5c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -1,3 +1,14 @@\n+2009-05-29  Ian Lance Taylor  <iant@google.com>\n+\n+\t* builtins.c (validate_gimple_arglist): Don't use va_arg with\n+\tenum type.\n+\t* calls.c (emit_library_call_value_1): Likewise.\n+\n+\t* c-typeck.c (c_build_va_arg): New function.\n+\t* c-tree.h (c_build_va_arg): Declare.\n+\t* c-parser.c (c_parser_postfix_expression): Call c_build_va_arg\n+\tinstead of build_va_arg.\n+\n 2009-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-loop-ivopts.c (strip_offset_1) <MULT_EXPR>: New case."}, {"sha": "80ff09d26bd44460e45fea73c58558ae56be4fd2", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -11231,7 +11231,7 @@ validate_gimple_arglist (const_gimple call, ...)\n \n   do\n     {\n-      code = va_arg (ap, enum tree_code);\n+      code = (enum tree_code) va_arg (ap, int);\n       switch (code)\n \t{\n \tcase 0:\n@@ -11282,7 +11282,7 @@ validate_arglist (const_tree callexpr, ...)\n \n   do\n     {\n-      code = va_arg (ap, enum tree_code);\n+      code = (enum tree_code) va_arg (ap, int);\n       switch (code)\n \t{\n \tcase 0:"}, {"sha": "244c238023d2ea530d83d70438c6373068e5d206", "filename": "gcc/c-parser.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -5338,6 +5338,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t      expr.value = error_mark_node;\n \t      break;\n \t    }\n+\t  loc = c_parser_peek_token (parser)->location;\n \t  t1 = c_parser_type_name (parser);\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t     \"expected %<)%>\");\n@@ -5348,9 +5349,9 @@ c_parser_postfix_expression (c_parser *parser)\n \t  else\n \t    {\n \t      tree type_expr = NULL_TREE;\n-\t      expr.value = build_va_arg (e1.value, groktypename (t1,\n-\t\t\t\t\t\t\t\t &type_expr,\n-\t\t\t\t\t\t\t\t NULL));\n+\t      expr.value = c_build_va_arg (e1.value,\n+\t\t\t\t\t   groktypename (t1, &type_expr, NULL),\n+\t\t\t\t\t   loc);\n \t      if (type_expr)\n \t\t{\n \t\t  expr.value = build2 (C_MAYBE_CONST_EXPR,"}, {"sha": "05b52d8a45cfc2b498518908d740a73d7ce24c24", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -650,6 +650,7 @@ extern tree c_finish_omp_parallel (tree, tree);\n extern tree c_begin_omp_task (void);\n extern tree c_finish_omp_task (tree, tree);\n extern tree c_finish_omp_clauses (tree);\n+extern tree c_build_va_arg (tree, tree, location_t);\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "43cb6f30cc87b22fbd53b420208b1a764ce5634c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -9976,3 +9976,14 @@ c_build_qualified_type (tree type, int type_quals)\n \n   return build_qualified_type (type, type_quals);\n }\n+\n+/* Build a VA_ARG_EXPR for the C parser.  */\n+\n+tree\n+c_build_va_arg (tree expr, tree type, location_t loc)\n+{\n+  if (warn_cxx_compat && TREE_CODE (type) == ENUMERAL_TYPE)\n+    warning_at (loc, OPT_Wc___compat,\n+\t\t\"C++ requires promoted type, not enum type, in %<va_arg%>\");\n+  return build_va_arg (expr, type);\n+}"}, {"sha": "c10b0cd3abadb2f5b532997633031d53f5be3151", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -3445,7 +3445,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n   for (; count < nargs; count++)\n     {\n       rtx val = va_arg (p, rtx);\n-      enum machine_mode mode = va_arg (p, enum machine_mode);\n+      enum machine_mode mode = (enum machine_mode) va_arg (p, int);\n \n       /* We cannot convert the arg value to the mode the library wants here;\n \t must do it earlier where we know the signedness of the arg.  */"}, {"sha": "e7e223ed2a43f2aa783c39e756c58148756147c9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -1,3 +1,7 @@\n+2009-05-29  Ian Lance Taylor  <iant@google.com>\n+\n+\t* error.c (cp_printer): Don't use va_arg with enum type.\n+\n 2009-05-28  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/39754"}, {"sha": "004543dd210349082f29f556a0f777698b59b907", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -2761,8 +2761,8 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n   const char *result;\n   tree t = NULL;\n #define next_tree    (t = va_arg (*text->args_ptr, tree))\n-#define next_tcode   va_arg (*text->args_ptr, enum tree_code)\n-#define next_lang    va_arg (*text->args_ptr, enum languages)\n+#define next_tcode   ((enum tree_code) va_arg (*text->args_ptr, int))\n+#define next_lang    ((enum languages) va_arg (*text->args_ptr, int))\n #define next_int     va_arg (*text->args_ptr, int)\n \n   if (precision != 0 || wide)"}, {"sha": "a78c416af5443e451372a10a7e29cdd8fce512ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -1,3 +1,7 @@\n+2009-05-29  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wcxx-compat-11.c: New testcase.\n+\n 2009-05-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/40019"}, {"sha": "8818338ad5e5a7521d79611c53e8c362170c5066", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-11.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b5577d91948132078d1021b7db49f85bb884e4/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-11.c?ref=72b5577d91948132078d1021b7db49f85bb884e4", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+\n+#include <stdarg.h>\n+\n+enum E { A };\n+\n+extern void f2 (int);\n+void\n+f1 (int n, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, n);\n+  f2 (va_arg (ap, int));\n+  f2 (va_arg (ap, _Bool));\t/* { dg-warning \"promoted\" } */\n+  f2 (va_arg (ap, enum E));\t/* { dg-warning \"promoted\" } */\n+}\n+\n+/* Match extra informative notes.  */\n+/* { dg-message \"note:\" \"expected\" { target *-*-* } 0 } */"}]}