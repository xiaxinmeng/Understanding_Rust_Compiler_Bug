{"sha": "e5119fab4f944e9c4bf1198f9408bcd8b002e200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxMTlmYWI0Zjk0NGU5YzRiZjExOThmOTQwOGJjZDhiMDAyZTIwMA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2017-03-28T20:55:38Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2017-03-28T20:55:38Z"}, "message": "re PR rtl-optimization/80193 (ICE on valid (but hairy) C code at -O3 on x86_64-linux-gnu: in check_allocation, at ira.c:2563)\n\n2017-03-28  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/80193\n\t* ira.c (ira): Do not check allocation for LRA.\n\n2017-03-28  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/80193\n\t* gcc.target/i386/pr80193.c: New.\n\nFrom-SVN: r246554", "tree": {"sha": "0094a5de9eecacd72808d29689265ffa402372e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0094a5de9eecacd72808d29689265ffa402372e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5119fab4f944e9c4bf1198f9408bcd8b002e200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5119fab4f944e9c4bf1198f9408bcd8b002e200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5119fab4f944e9c4bf1198f9408bcd8b002e200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5119fab4f944e9c4bf1198f9408bcd8b002e200/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f599d751ecacf9bcec4fe5ebaaaa1891d1b820e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f599d751ecacf9bcec4fe5ebaaaa1891d1b820e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f599d751ecacf9bcec4fe5ebaaaa1891d1b820e"}], "stats": {"total": 216, "additions": 214, "deletions": 2}, "files": [{"sha": "c848c7157171b480eee62c356391f8d97b7a901a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5119fab4f944e9c4bf1198f9408bcd8b002e200", "patch": "@@ -1,3 +1,8 @@\n+2017-03-28  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/80193\n+\t* ira.c (ira): Do not check allocation for LRA.\n+\n 2017-03-28  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* config/nvptx/nvptx-protos.h (nvptx_output_simt_enter): Declare."}, {"sha": "7079573bc3a30c96a13729bb8b5170088dd35bdc", "filename": "gcc/ira.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=e5119fab4f944e9c4bf1198f9408bcd8b002e200", "patch": "@@ -5334,7 +5334,6 @@ ira (FILE *f)\n                                        reg_alternate_class (old_regno),\n                                        reg_allocno_class (old_regno));\n                 }\n-\n \t    }\n \t  else\n \t    {\n@@ -5370,7 +5369,14 @@ ira (FILE *f)\n   calculate_allocation_cost ();\n \n #ifdef ENABLE_IRA_CHECKING\n-  if (ira_conflicts_p)\n+  if (ira_conflicts_p && ! ira_use_lra_p)\n+    /* Opposite to reload pass, LRA does not use any conflict info\n+       from IRA.  We don't rebuild conflict info for LRA (through\n+       ira_flattening call) and can not use the check here.  We could\n+       rebuild this info for LRA in the check mode but there is a risk\n+       that code generated with the check and without it will be a bit\n+       different.  Calling ira_flattening in any mode would be a\n+       wasting CPU time.  So do not check the allocation for LRA.  */\n     check_allocation ();\n #endif\n "}, {"sha": "654863e6be4faa7b312bab71515641fdd5df3193", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5119fab4f944e9c4bf1198f9408bcd8b002e200", "patch": "@@ -1,3 +1,8 @@\n+2017-03-28  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/80193\n+\t* gcc.target/i386/pr80193.c: New.\n+\n 2017-03-28  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78661"}, {"sha": "5bfc03955501845b65e2aa29a36fb797d5523194", "filename": "gcc/testsuite/gcc.target/i386/pr80193.c", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80193.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5119fab4f944e9c4bf1198f9408bcd8b002e200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80193.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80193.c?ref=e5119fab4f944e9c4bf1198f9408bcd8b002e200", "patch": "@@ -0,0 +1,196 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int printf (const char *, ...);\n+\n+char a, e, h, ag, ak, am, ar, ay, az, bc, bd, k, l;\n+int f, i, n, o, c, ac, ad, p, ah, s, aj, al, an, b, ao, aq, at, av, be, t, u, g, q, r, ai, **aa, ap;\n+\n+int d (int v)\n+{ \n+  return v + a;\n+}\n+\n+int j (char v, char w)\n+{ \n+  return v - w;\n+}\n+\n+void m (int p)\n+{\n+}\n+\n+static void bf ()\n+{ \n+  int bg[240], bi, bk, bl, bj, bm = -1;\n+  const int *bh;\n+  if (h)\n+    { \n+      int bn, bo;\n+      while (1)\n+        { \n+          int *bp = &at;\n+          const int **bq = &bh, **br = bq;\n+          while (av)\n+            while (ah)\n+              ;\n+          int bs = r, bt;\n+          if (bt)\n+            break;\n+        bu:\n+          for (; r; r = d (r))\n+            { \n+              *bp = j (q && b, 0);\n+              if (n)\n+                u = b;\n+              if (u && ak)\n+                p = 0;\n+            }\n+          if (c)\n+            { \n+              while (a)\n+                while (r)\n+                  { \n+                    int bw = ar, bx = an;\n+                  by:\n+                    printf (\"%d\\n\", an);\n+                    while (ao)\n+                      while (bw)\n+                        { \n+                          a = !g || f / g;\n+                          if (i)\n+                            az = i;\n+                          l = j (q && bh, 5);\n+                          if (n != 0)\n+                            t = l / n;\n+                          if (t)\n+                            while (bo)\n+                              ;\n+                        }\n+                    while (a)\n+                      ;\n+                    if (s)\n+                      while (bx)\n+                        while (1)\n+                          { \n+                            if (r)\n+                              break;\n+                            *aa || q;\n+                          }\n+                    while (at)\n+                      ;\n+                  }\n+              while (av)\n+                if (b)\n+                  goto by;\n+              while (bl)\n+                while (1)\n+                  { \n+                    if (r)\n+                      break;\n+                    while (ag)\n+                      if (bi)\n+                        printf (\"%d\\n\", 0);\n+                    if (bk)\n+                      { \n+                        bo = bn = bi = printf (\"\");\n+                        goto bz;\n+                      }\n+                    while (o)\n+                      if (a)\n+                        { \n+                          while (1)\n+                            ;\n+                        ca:\n+                          ;\n+                        }\n+                    if (ap)\n+                      while (1)\n+                        ;\n+                    while (a)\n+                      { \n+                        if (ai)\n+                          {\n+                          bz:\n+                            while (be)\n+                              if (a)\n+                                while (bn)\n+                                  bl = bg[am];\n+                            while (ac)\n+                              if (ad)\n+                                { \n+                                  bj++;\n+                                  while (bj)\n+                                    if (c)\n+                                      goto bu;\n+                                }\n+                            if (s)\n+                              { \n+                                while (ao)\n+                                  while (f)\n+                                    while (p)\n+                                      if (e)\n+                                        while (bj)\n+                                          for (; bo;)\n+                                            ;\n+                                if (aq)\n+                                  { \n+                                    while (aj)\n+                                      ;\n+                                    continue;\n+                                  }\n+                                while (1)\n+                                  ;\n+                              }\n+                            while (!bj)\n+                              { \n+                                al = 0;\n+                                for (; al < 6; al++)\n+                                  { \n+                                    ai = 0;\n+                                    for (; ai < 60; ai = d (ai))\n+                                      { \n+                                        k = !g || f / g;\n+                                        if (i)\n+                                          ay = 0;\n+                                        bc = j (q && *bq, ay);\n+                                        if (!n)\n+                                          ;\n+                                        else\n+                                          bd = bc / n;\n+                                        if (**bq)\n+                                          __builtin_abort ();\n+                                        *bp = !aa;\n+                                      }\n+                                    while (av)\n+                                      for (; ai; ai++)\n+                                        for (; ar; ar++)\n+                                          { \n+                                            int cb;\n+                                            *aa = &cb;\n+                                          }\n+                                    m ((long) &br);\n+                                    while (an)\n+                                      while (1)\n+                                        ;\n+                                  }\n+                              }\n+                          }\n+                        o = b;\n+                      }\n+                    while (bs)\n+                      bm++;\n+                    while (bm)\n+                      ;\n+                  }\n+            }\n+        }\n+      goto ca;\n+    }\n+}\n+\n+int main ()\n+{ \n+  bf ();\n+  return 0;\n+}"}]}