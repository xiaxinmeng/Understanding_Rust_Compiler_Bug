{"sha": "2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "node_id": "C_kwDOANBUbNoAKDJlY2E0ZmY0ZTg2N2ViOTk0ZTUxMTBmMDYzN2M4NzYyYjZjZmRkYzY", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-08-31T22:22:07Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-08-31T22:24:32Z"}, "message": "c: C2x attributes fixes and updates\n\nImplement some changes to the currently supported C2x standard\nattributes that have been made to the specification since they were\nfirst implemented in GCC, and some consequent changes:\n\n* maybe_unused is now supported on labels.  In fact that was already\n  accidentally supported in GCC as a result of sharing the\n  implementation with __attribute__ ((unused)), but needed to be\n  covered in the tests.\n\n* As part of the support for maybe_unused on labels, its\n  __has_c_attribute value changed.\n\n* The issue of maybe_unused accidentally being already supported on\n  labels showed up the lack of tests for other standard attributes\n  being incorrectly applied to labels; add such tests.\n\n* Use of fallthrough or nodiscard attributes on labels already\n  properly resulted in a pedwarn.  For the deprecated attribute,\n  however, there was only a warning, and the wording \"'deprecated'\n  attribute ignored for 'void'\" included an unhelpful \"for 'void'\".\n  Arrange for the case of the deprecated attribute on a label to be\n  checked for separately and result in a pedwarn.  As with\n  inappropriate uses of fallthrough (see commit\n  6c80b1b56dec2691436f3e2676e3d1b105b01b89), it seems reasonable for\n  this pedwarn to apply regardless of whether [[]] or __attribute__\n  was used and regardless of whether C or C++ is being compiled.\n\n* Attributes on case or default labels (the standard syntax supports\n  attributes on all kinds of labels) were quietly ignored, whether or\n  not appropriate for use in such a context, because they weren't\n  passed to decl_attributes at all.  (Note where I'm changing the\n  do_case prototype that such a function is actually only defined in\n  the C front end, not for C++, despite the declaration being in\n  c-common.h.)\n\n* A recent change as part of the editorial review in preparation for\n  the C2x CD ballot has changed the __has_c_attribute value for\n  fallthrough to 201910 to reflect when that attribute was actually\n  voted into the working draft.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c-family/\n\t* c-attribs.cc (handle_deprecated_attribute): Check and pedwarn\n\tfor LABEL_DECL.\n\t* c-common.cc (c_add_case_label): Add argument ATTRS.  Call\n\tdecl_attributes.\n\t* c-common.h (do_case, c_add_case_label): Update declarations.\n\t* c-lex.cc (c_common_has_attribute): For C, produce a result of\n\t201910 for fallthrough and 202106 for maybe_unused.\n\ngcc/c/\n\t* c-parser.cc (c_parser_label): Pass attributes to do_case.\n\t* c-typeck.cc (do_case): Add argument ATTRS.  Pass it to\n\tc_add_case_label.\n\ngcc/testsuite/\n\t* gcc.dg/c2x-attr-deprecated-2.c, gcc.dg/c2x-attr-fallthrough-2.c,\n\tgcc.dg/c2x-attr-maybe_unused-1.c, gcc.dg/c2x-attr-nodiscard-2.c:\n\tAdd tests of attributes on labels.\n\t* gcc.dg/c2x-has-c-attribute-2.c: Update expected results for\n\tmaybe_unused and fallthrough.", "tree": {"sha": "b9f8159355cec669975fde71224f52591da1b925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9f8159355cec669975fde71224f52591da1b925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26aafae4e50d1b90fe3a265027003487c1d25b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26aafae4e50d1b90fe3a265027003487c1d25b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26aafae4e50d1b90fe3a265027003487c1d25b45"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "8bb80e251dc26583afc3a0e17e651e7c2e2612d1", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -4163,6 +4163,13 @@ handle_deprecated_attribute (tree *node, tree name,\n \t  || TREE_CODE (decl) == CONST_DECL\n \t  || objc_method_decl (TREE_CODE (decl)))\n \tTREE_DEPRECATED (decl) = 1;\n+      else if (TREE_CODE (decl) == LABEL_DECL)\n+\t{\n+\t  pedwarn (input_location, OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t   name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n       else\n \twarn = 1;\n     }"}, {"sha": "1eb842e1c7bace7ba33a25c11242fc96ae079665", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -5068,11 +5068,12 @@ case_compare (splay_tree_key k1, splay_tree_key k2)\n    CASES is a tree containing all the case ranges processed so far;\n    COND is the condition for the switch-statement itself.\n    Returns the CASE_LABEL_EXPR created, or ERROR_MARK_NODE if no\n-   CASE_LABEL_EXPR is created.  */\n+   CASE_LABEL_EXPR is created.  ATTRS are the attributes to be applied\n+   to the label.  */\n \n tree\n c_add_case_label (location_t loc, splay_tree cases, tree cond,\n-\t\t  tree low_value, tree high_value)\n+\t\t  tree low_value, tree high_value, tree attrs)\n {\n   tree type;\n   tree label;\n@@ -5081,6 +5082,7 @@ c_add_case_label (location_t loc, splay_tree cases, tree cond,\n \n   /* Create the LABEL_DECL itself.  */\n   label = create_artificial_label (loc);\n+  decl_attributes (&label, attrs, 0);\n \n   /* If there was an error processing the switch condition, bail now\n      before we get more confused.  */"}, {"sha": "64fe14b66fe835a887fe67716e24843bc759eb2e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -1018,7 +1018,7 @@ extern void c_parse_final_cleanups (void);\n /* True iff TYPE is cv decltype(nullptr).  */\n #define NULLPTR_TYPE_P(TYPE) (TREE_CODE (TYPE) == NULLPTR_TYPE)\n \n-extern tree do_case (location_t, tree, tree);\n+extern tree do_case (location_t, tree, tree, tree);\n extern tree build_stmt (location_t, enum tree_code, ...);\n extern tree build_real_imag_expr (location_t, enum tree_code, tree);\n \n@@ -1046,7 +1046,8 @@ extern tree boolean_increment (enum tree_code, tree);\n \n extern int case_compare (splay_tree_key, splay_tree_key);\n \n-extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree);\n+extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree,\n+\t\t\t      tree = NULL_TREE);\n extern bool c_switch_covers_all_cases_p (splay_tree, tree);\n extern bool c_block_may_fallthru (const_tree);\n "}, {"sha": "417ba3e38baf364a7ef73de6dfc059a22274d1bf", "filename": "gcc/c-family/c-lex.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc-family%2Fc-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.cc?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -381,12 +381,14 @@ c_common_has_attribute (cpp_reader *pfile, bool std_syntax)\n \t    }\n \t  else\n \t    {\n-\t      if (is_attribute_p (\"deprecated\", attr_name)\n-\t\t  || is_attribute_p (\"maybe_unused\", attr_name)\n-\t\t  || is_attribute_p (\"fallthrough\", attr_name))\n+\t      if (is_attribute_p (\"deprecated\", attr_name))\n \t\tresult = 201904;\n+\t      else if (is_attribute_p (\"fallthrough\", attr_name))\n+\t\tresult = 201910;\n \t      else if (is_attribute_p (\"nodiscard\", attr_name))\n \t\tresult = 202003;\n+\t      else if (is_attribute_p (\"maybe_unused\", attr_name))\n+\t\tresult = 202106;\n \t    }\n \t  if (result)\n \t    attr_name = NULL_TREE;"}, {"sha": "95f4ead54a060348c7721eb8f0785c5caebd85a0", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -5912,14 +5912,14 @@ c_parser_label (c_parser *parser, tree std_attrs)\n       if (c_parser_next_token_is (parser, CPP_COLON))\n \t{\n \t  c_parser_consume_token (parser);\n-\t  label = do_case (loc1, exp1, NULL_TREE);\n+\t  label = do_case (loc1, exp1, NULL_TREE, std_attrs);\n \t}\n       else if (c_parser_next_token_is (parser, CPP_ELLIPSIS))\n \t{\n \t  c_parser_consume_token (parser);\n \t  exp2 = c_parser_expr_no_commas (parser, NULL).value;\n \t  if (c_parser_require (parser, CPP_COLON, \"expected %<:%>\"))\n-\t    label = do_case (loc1, exp1, exp2);\n+\t    label = do_case (loc1, exp1, exp2, std_attrs);\n \t}\n       else\n \tc_parser_error (parser, \"expected %<:%> or %<...%>\");\n@@ -5928,7 +5928,7 @@ c_parser_label (c_parser *parser, tree std_attrs)\n     {\n       c_parser_consume_token (parser);\n       if (c_parser_require (parser, CPP_COLON, \"expected %<:%>\"))\n-\tlabel = do_case (loc1, NULL_TREE, NULL_TREE);\n+\tlabel = do_case (loc1, NULL_TREE, NULL_TREE, std_attrs);\n     }\n   else\n     {"}, {"sha": "e4d58e318f88c5e2028971b07e1dae9a93bda5e5", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -11172,10 +11172,10 @@ c_start_switch (location_t switch_loc,\n   return add_stmt (cs->switch_stmt);\n }\n \n-/* Process a case label at location LOC.  */\n+/* Process a case label at location LOC, with attributes ATTRS.  */\n \n tree\n-do_case (location_t loc, tree low_value, tree high_value)\n+do_case (location_t loc, tree low_value, tree high_value, tree attrs)\n {\n   tree label = NULL_TREE;\n \n@@ -11211,7 +11211,7 @@ do_case (location_t loc, tree low_value, tree high_value)\n \n   label = c_add_case_label (loc, c_switch_stack->cases,\n \t\t\t    SWITCH_STMT_COND (c_switch_stack->switch_stmt),\n-\t\t\t    low_value, high_value);\n+\t\t\t    low_value, high_value, attrs);\n   if (label == error_mark_node)\n     label = NULL_TREE;\n   return label;"}, {"sha": "7c01317d8fa21db67802c5c24257b8da641b44a0", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -3,7 +3,8 @@\n /* { dg-options \"-std=c2x -pedantic-errors\" } */\n \n /* This attribute is not valid in most cases on types other than their\n-   definitions, or on statements, or as an attribute-declaration.  */\n+   definitions, or on labels, or on statements, or as an\n+   attribute-declaration.  */\n \n [[deprecated]]; /* { dg-error \"ignored\" } */\n \n@@ -21,4 +22,10 @@ f (void)\n   int a;\n   [[deprecated]]; /* { dg-error \"ignored\" } */\n   [[deprecated]] a = 1; /* { dg-error \"ignored\" } */\n+  [[deprecated]] label: ; /* { dg-error \"ignored\" } */\n+  switch (var)\n+    {\n+    [[deprecated]] case 1: ; /* { dg-error \"ignored\" } */\n+    [[deprecated]] default: ; /* { dg-error \"ignored\" } */\n+    }\n }"}, {"sha": "b65bcbef7098b7bef13991aeac7a66dcfc48ddd0", "filename": "gcc/testsuite/gcc.dg/c2x-attr-fallthrough-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -33,6 +33,10 @@ f (int a)\n     case 5:\n       b += 5;\n       break;\n+    [[fallthrough]] case 6: break; /* { dg-error \"ignored\" } */\n+    [[fallthrough]] default: break; /* { dg-error \"ignored\" } */\n     }\n   [[fallthrough]] return b; /* { dg-error \"ignored\" } */\n+ [[fallthrough]] label: ; /* { dg-error \"ignored\" } */\n+  goto label;\n }"}, {"sha": "7090a3f30e178f5b87e42dd1c96f2591b1f6d593", "filename": "gcc/testsuite/gcc.dg/c2x-attr-maybe_unused-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-1.c?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -14,7 +14,9 @@ g ([[maybe_unused]] int x, int y)\n   [[maybe_unused]] int a;\n   int b [[__maybe_unused__]];\n   int c [[maybe_unused]];\n+ [[__maybe_unused__]] label1:\n   c = y;\n+ [[maybe_unused]] label2:\n   return y;\n }\n \n@@ -29,3 +31,14 @@ union [[maybe_unused]] u { int x; };\n enum [[maybe_unused]] eu { E2 };\n \n union u2 { [[maybe_unused]] int a; int b [[maybe_unused]]; } y;\n+\n+void\n+g2 (int x)\n+{\n+  switch (x)\n+    {\n+      [[maybe_unused]] case 1: ;\n+      [[__maybe_unused__]] case 2: ;\n+      [[maybe_unused]] default: ;\n+    }\n+}"}, {"sha": "0ed2ebe92ffea3935ab8cf45b859600c020a5402", "filename": "gcc/testsuite/gcc.dg/c2x-attr-nodiscard-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-2.c?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -39,4 +39,10 @@ f (void)\n   [[nodiscard (\"reason\")]] int b = 1; /* { dg-error \"can only be applied\" } */\n   [[nodiscard]]; /* { dg-error \"ignored\" } */\n   [[nodiscard]] a = 1; /* { dg-error \"ignored\" } */\n+  [[nodiscard]] label: ; /* { dg-error \"can only be applied\" } */\n+  switch (var)\n+    {\n+      [[nodiscard]] case 1: ; /* { dg-error \"can only be applied\" } */\n+      [[nodiscard]] default: ; /* { dg-error \"can only be applied\" } */\n+    }\n }"}, {"sha": "6a379e9db4f5a44d1d068eaf560a0c843af94b29", "filename": "gcc/testsuite/gcc.dg/c2x-has-c-attribute-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eca4ff4e867eb994e5110f0637c8762b6cfddc6/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c?ref=2eca4ff4e867eb994e5110f0637c8762b6cfddc6", "patch": "@@ -10,11 +10,11 @@\n #error \"bad result for __nodiscard__\"\n #endif\n \n-#if __has_c_attribute(maybe_unused) != 201904L\n+#if __has_c_attribute(maybe_unused) != 202106L\n #error \"bad result for maybe_unused\"\n #endif\n \n-#if __has_c_attribute(__maybe_unused__) != 201904L\n+#if __has_c_attribute(__maybe_unused__) != 202106L\n #error \"bad result for __maybe_unused__\"\n #endif\n \n@@ -26,11 +26,11 @@\n #error \"bad result for __deprecated__\"\n #endif\n \n-#if __has_c_attribute (fallthrough) != 201904L\n+#if __has_c_attribute (fallthrough) != 201910L\n #error \"bad result for fallthrough\"\n #endif\n \n-#if __has_c_attribute (__fallthrough__) != 201904L\n+#if __has_c_attribute (__fallthrough__) != 201910L\n #error \"bad result for __fallthrough__\"\n #endif\n "}]}