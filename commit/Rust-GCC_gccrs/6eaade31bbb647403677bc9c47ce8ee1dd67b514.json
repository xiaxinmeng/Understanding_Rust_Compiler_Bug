{"sha": "6eaade31bbb647403677bc9c47ce8ee1dd67b514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhYWRlMzFiYmI2NDc0MDM2NzdiYzljNDdjZThlZTFkZDY3YjUxNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-25T02:26:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-25T02:26:21Z"}, "message": "except.c (expr_noexcept_p): Split out from finish_noexcept_expr.\n\n\t* except.c (expr_noexcept_p): Split out from finish_noexcept_expr.\n\t* cp-tree.h: Declare it.\n\t* method.c (walk_field_subobs): Use it.\n\nFrom-SVN: r179158", "tree": {"sha": "de3aff190fb00a74f4653d3e14ea69ee68705f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de3aff190fb00a74f4653d3e14ea69ee68705f88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eaade31bbb647403677bc9c47ce8ee1dd67b514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaade31bbb647403677bc9c47ce8ee1dd67b514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eaade31bbb647403677bc9c47ce8ee1dd67b514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaade31bbb647403677bc9c47ce8ee1dd67b514/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fd44881415e619bc3daaa47f3012bb39beab0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd44881415e619bc3daaa47f3012bb39beab0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd44881415e619bc3daaa47f3012bb39beab0c8"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "8c25746f0cb4206bd7e4f98352c773d38eea0ea6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6eaade31bbb647403677bc9c47ce8ee1dd67b514", "patch": "@@ -1,5 +1,9 @@\n 2011-09-24  Jason Merrill  <jason@redhat.com>\n \n+\t* except.c (expr_noexcept_p): Split out from finish_noexcept_expr.\n+\t* cp-tree.h: Declare it.\n+\t* method.c (walk_field_subobs): Use it.\n+\n \t* init.c (perform_member_init): Instantiate NSDMI here.\n \t* pt.c (tsubst_decl) [FIELD_DECL]: Not here.\n "}, {"sha": "0f7deb66b603a290762a3ce9d2ca3edbc4c25930", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6eaade31bbb647403677bc9c47ce8ee1dd67b514", "patch": "@@ -5047,6 +5047,7 @@ extern tree build_throw\t\t\t\t(tree);\n extern int nothrow_libfn_p\t\t\t(const_tree);\n extern void check_handlers\t\t\t(tree);\n extern tree finish_noexcept_expr\t\t(tree, tsubst_flags_t);\n+extern bool expr_noexcept_p\t\t\t(tree, tsubst_flags_t);\n extern void perform_deferred_noexcept_checks\t(void);\n extern bool nothrow_spec_p\t\t\t(const_tree);\n extern bool type_noexcept_p\t\t\t(const_tree);"}, {"sha": "ceec858be1f5a29608bec6e3a371b94375495e0b", "filename": "gcc/cp/except.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=6eaade31bbb647403677bc9c47ce8ee1dd67b514", "patch": "@@ -1125,14 +1125,27 @@ perform_deferred_noexcept_checks (void)\n tree\n finish_noexcept_expr (tree expr, tsubst_flags_t complain)\n {\n-  tree fn;\n-\n   if (expr == error_mark_node)\n     return error_mark_node;\n \n   if (processing_template_decl)\n     return build_min (NOEXCEPT_EXPR, boolean_type_node, expr);\n \n+  return (expr_noexcept_p (expr, complain)\n+\t  ? boolean_true_node : boolean_false_node);\n+}\n+\n+/* Returns whether EXPR is noexcept, possibly warning if allowed by\n+   COMPLAIN.  */\n+\n+bool\n+expr_noexcept_p (tree expr, tsubst_flags_t complain)\n+{\n+  tree fn;\n+\n+  if (expr == error_mark_node)\n+    return false;\n+\n   fn = cp_walk_tree_without_duplicates (&expr, check_noexcept_r, 0);\n   if (fn)\n     {\n@@ -1151,10 +1164,10 @@ finish_noexcept_expr (tree expr, tsubst_flags_t complain)\n \t  else\n \t    maybe_noexcept_warning (fn);\n \t}\n-      return boolean_false_node;\n+      return false;\n     }\n   else\n-    return boolean_true_node;\n+    return true;\n }\n \n /* Return true iff SPEC is throw() or noexcept(true).  */"}, {"sha": "1316dfb6a8382662b823bbef157531090d72662f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=6eaade31bbb647403677bc9c47ce8ee1dd67b514", "patch": "@@ -1042,6 +1042,12 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t\tinform (0, \"initializer for %q+#D is invalid\", field);\n \t      if (trivial_p)\n \t\t*trivial_p = false;\n+\t      /* Core 1351: If the field has an NSDMI that could throw, the\n+\t\t default constructor is noexcept(false).  FIXME this is\n+\t         broken by deferred parsing and 1360 saying we can't\n+\t\t lazily declare a non-trivial default constructor.  */\n+\t      if (spec_p && !expr_noexcept_p (DECL_INITIAL (field), complain))\n+\t\t*spec_p = noexcept_false_spec;\n \n \t      /* Don't do the normal processing.  */\n \t      continue;"}, {"sha": "5b734145b6b10307b1c63b6a2602ca7818062271", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6eaade31bbb647403677bc9c47ce8ee1dd67b514", "patch": "@@ -1,5 +1,7 @@\n 2011-09-24  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/nsdmi-eh1.C: New.\n+\n \t* g++.dg/cpp0x/nsdmi-defer3.C: New.\n \n \t* g++.dg/cpp0x/nsdmi-defer1.C: New."}, {"sha": "09c92d2f158aec3c72bf0ac8c124e21652dcf6c5", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-eh1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-eh1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaade31bbb647403677bc9c47ce8ee1dd67b514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-eh1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-eh1.C?ref=6eaade31bbb647403677bc9c47ce8ee1dd67b514", "patch": "@@ -0,0 +1,18 @@\n+// Core issue 1351\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options -std=c++0x }\n+\n+bool fail;\n+struct A\n+{\n+  int i = fail ? throw \"noooooooo\" : 42;\n+};\n+\n+int main()\n+{\n+  A a1;\n+  if (a1.i != 42) return 1;\n+  fail = true;\n+  try { A a2; }\n+  catch (...) { }\n+}"}]}