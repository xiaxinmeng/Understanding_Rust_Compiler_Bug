{"sha": "6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkNGM2NmU5YmI5MmQ2NmQ0YjVjMWIyMWRmYWZlNDlmOTNlYWNjNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-09-12T09:25:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-09-12T09:25:07Z"}, "message": "re PR tree-optimization/86844 (wrong code caused by store merging pass)\n\n\tPR tree-optimization/86844\n\t* gimple-ssa-store-merging.c\n\t(imm_store_chain_info::coalesce_immediate): For overlapping stores, if\n\tthere are any overlapping stores in between them, make sure they are\n\talso coalesced or we give up completely.\n\n\t* gcc.c-torture/execute/pr86844.c: New test.\n\t* gcc.dg/store_merging_22.c: New test.\n\t* gcc.dg/store_merging_23.c: New test.\n\nCo-Authored-By: Andreas Krebbel <krebbel@linux.ibm.com>\n\nFrom-SVN: r264232", "tree": {"sha": "eedf40724f05a2fb00b0bb352cdde55f1fcf382f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eedf40724f05a2fb00b0bb352cdde55f1fcf382f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9095b53a8c4a5663b89db946462ff534fe0836e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9095b53a8c4a5663b89db946462ff534fe0836e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9095b53a8c4a5663b89db946462ff534fe0836e7"}], "stats": {"total": 154, "additions": 146, "deletions": 8}, "files": [{"sha": "bd0d8668bd5d897bf8cb5fb52ebb0f560bc37caf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "patch": "@@ -1,3 +1,12 @@\n+2018-09-12  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR tree-optimization/86844\n+\t* gimple-ssa-store-merging.c\n+\t(imm_store_chain_info::coalesce_immediate): For overlapping stores, if\n+\tthere are any overlapping stores in between them, make sure they are\n+\talso coalesced or we give up completely.\n+\n 2018-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/87248"}, {"sha": "c8031e185704b4efa9a8046f8a6d2223c0563ddb", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "patch": "@@ -2702,15 +2702,80 @@ imm_store_chain_info::coalesce_immediate_stores ()\n \t{\n \t  /* Only allow overlapping stores of constants.  */\n \t  if (info->rhs_code == INTEGER_CST\n-\t      && merged_store->stores[0]->rhs_code == INTEGER_CST\n-\t      && check_no_overlap (m_store_info, i, INTEGER_CST,\n-\t\t\t\t   MAX (merged_store->last_order, info->order),\n-\t\t\t\t   MAX (merged_store->start\n-\t\t\t\t\t+ merged_store->width,\n-\t\t\t\t\tinfo->bitpos + info->bitsize)))\n+\t      && merged_store->stores[0]->rhs_code == INTEGER_CST)\n \t    {\n-\t      merged_store->merge_overlapping (info);\n-\t      goto done;\n+\t      unsigned int last_order\n+\t\t= MAX (merged_store->last_order, info->order);\n+\t      unsigned HOST_WIDE_INT end\n+\t\t= MAX (merged_store->start + merged_store->width,\n+\t\t       info->bitpos + info->bitsize);\n+\t      if (check_no_overlap (m_store_info, i, INTEGER_CST,\n+\t\t\t\t    last_order, end))\n+\t\t{\n+\t\t  /* check_no_overlap call above made sure there are no\n+\t\t     overlapping stores with non-INTEGER_CST rhs_code\n+\t\t     in between the first and last of the stores we've\n+\t\t     just merged.  If there are any INTEGER_CST rhs_code\n+\t\t     stores in between, we need to merge_overlapping them\n+\t\t     even if in the sort_by_bitpos order there are other\n+\t\t     overlapping stores in between.  Keep those stores as is.\n+\t\t     Example:\n+\t\t\tMEM[(int *)p_28] = 0;\n+\t\t\tMEM[(char *)p_28 + 3B] = 1;\n+\t\t\tMEM[(char *)p_28 + 1B] = 2;\n+\t\t\tMEM[(char *)p_28 + 2B] = MEM[(char *)p_28 + 6B];\n+\t\t     We can't merge the zero store with the store of two and\n+\t\t     not merge anything else, because the store of one is\n+\t\t     in the original order in between those two, but in\n+\t\t     store_by_bitpos order it comes after the last store that\n+\t\t     we can't merge with them.  We can merge the first 3 stores\n+\t\t     and keep the last store as is though.  */\n+\t\t  unsigned int len = m_store_info.length (), k = i;\n+\t\t  for (unsigned int j = i + 1; j < len; ++j)\n+\t\t    {\n+\t\t      store_immediate_info *info2 = m_store_info[j];\n+\t\t      if (info2->bitpos >= end)\n+\t\t\tbreak;\n+\t\t      if (info2->order < last_order)\n+\t\t\t{\n+\t\t\t  if (info2->rhs_code != INTEGER_CST)\n+\t\t\t    {\n+\t\t\t      /* Normally check_no_overlap makes sure this\n+\t\t\t\t doesn't happen, but if end grows below, then\n+\t\t\t\t we need to process more stores than\n+\t\t\t\t check_no_overlap verified.  Example:\n+\t\t\t\t    MEM[(int *)p_5] = 0;\n+\t\t\t\t    MEM[(short *)p_5 + 3B] = 1;\n+\t\t\t\t    MEM[(char *)p_5 + 4B] = _9;\n+\t\t\t\t    MEM[(char *)p_5 + 2B] = 2;  */\n+\t\t\t      k = 0;\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t  k = j;\n+\t\t\t  end = MAX (end, info2->bitpos + info2->bitsize);\n+\t\t\t}\n+\t\t    }\n+\n+\t\t  if (k != 0)\n+\t\t    {\n+\t\t      merged_store->merge_overlapping (info);\n+\n+\t\t      for (unsigned int j = i + 1; j <= k; j++)\n+\t\t\t{\n+\t\t\t  store_immediate_info *info2 = m_store_info[j];\n+\t\t\t  gcc_assert (info2->bitpos < end);\n+\t\t\t  if (info2->order < last_order)\n+\t\t\t    {\n+\t\t\t      gcc_assert (info2->rhs_code == INTEGER_CST);\n+\t\t\t      merged_store->merge_overlapping (info2);\n+\t\t\t    }\n+\t\t\t  /* Other stores are kept and not merged in any\n+\t\t\t     way.  */\n+\t\t\t}\n+\t\t      ignore = k;\n+\t\t      goto done;\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n       /* |---store 1---||---store 2---|"}, {"sha": "1d38a8efb703a563d8077f56042699fd8e8cfec9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "patch": "@@ -1,3 +1,11 @@\n+2018-09-12  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR tree-optimization/86844\n+\t* gcc.c-torture/execute/pr86844.c: New test.\n+\t* gcc.dg/store_merging_22.c: New test.\n+\t* gcc.dg/store_merging_23.c: New test.\n+\n 2018-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/87248"}, {"sha": "ead89228060f6779391e382ba6ad3a83b4e5ce15", "filename": "gcc/testsuite/gcc.c-torture/execute/pr86844.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr86844.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr86844.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr86844.c?ref=6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/86844 */\n+\n+__attribute__((noipa)) void\n+foo (int *p)\n+{\n+  *p = 0;\n+  *((char *)p + 3) = 1;\n+  *((char *)p + 1) = 2;\n+  *((char *)p + 2) = *((char *)p + 6);\n+}\n+\n+int\n+main ()\n+{\n+  int a[2] = { -1, 0 };\n+  if (sizeof (int) != 4)\n+    return 0;\n+  ((char *)a)[6] = 3;\n+  foo (a);\n+  if (((char *)a)[0] != 0 || ((char *)a)[1] != 2\n+      || ((char *)a)[2] != 3 || ((char *)a)[3] != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "bcd42358a2796b2afbe84fec883c276c46b7d8df", "filename": "gcc/testsuite/gcc.dg/store_merging_22.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_22.c?ref=6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/86844 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target store_merge } */\n+/* { dg-options \"-O2 -fdump-tree-store-merging\" } */\n+\n+void\n+foo (int *p)\n+{\n+  *p = 0;\n+  *((char *)p + 3) = 1;\n+  *((char *)p + 1) = 2;\n+  *((char *)p + 2) = *((char *)p + 38);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Merging successful\" 1 \"store-merging\" } } */\n+/* { dg-final { scan-tree-dump-times \"New sequence of 1 stores to replace old one of 3 stores\" 1 \"store-merging\" } } */"}, {"sha": "dd197fb8db2ead57de2249b2d5240b5d1fc99d29", "filename": "gcc/testsuite/gcc.dg/store_merging_23.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_23.c?ref=6cd4c66e9bb92d66d4b5c1b21dfafe49f93eacc7", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/86844 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target store_merge } */\n+/* { dg-options \"-O2 -fdump-tree-store-merging\" } */\n+\n+void\n+foo (int *p)\n+{\n+  *p = 0;\n+  int one = 1;\n+  __builtin_memcpy ((char *) p + 3, &one, sizeof (int));\n+  *((char *)p + 4) = *((char *)p + 36);\n+  *((char *)p + 1) = 2;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Merging successful\" \"store-merging\" } } */"}]}