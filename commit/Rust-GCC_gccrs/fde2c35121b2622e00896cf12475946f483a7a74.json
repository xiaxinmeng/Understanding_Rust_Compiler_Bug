{"sha": "fde2c35121b2622e00896cf12475946f483a7a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlMmMzNTEyMWIyNjIyZTAwODk2Y2YxMjQ3NTk0NmY0ODNhN2E3NA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-17T12:53:24Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-17T12:53:24Z"}, "message": "AVX-512. 80/n. Extend expand_sse2_mulvxdi3.\n\ngcc/\n\t* config/i386/i386.c (ix86_expand_sse2_mulvxdi3): Extend\n\texpand_sse2_mulvxdi3.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216400", "tree": {"sha": "1f9402ac35234188721e50e181b925a4bb49bc92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f9402ac35234188721e50e181b925a4bb49bc92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fde2c35121b2622e00896cf12475946f483a7a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde2c35121b2622e00896cf12475946f483a7a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde2c35121b2622e00896cf12475946f483a7a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde2c35121b2622e00896cf12475946f483a7a74/comments", "author": null, "committer": null, "parents": [{"sha": "070664295574d1920eb6bfc8a7ec376d5496bb62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070664295574d1920eb6bfc8a7ec376d5496bb62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070664295574d1920eb6bfc8a7ec376d5496bb62"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "c756191683336be5a550466ab6c1754467ff496b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde2c35121b2622e00896cf12475946f483a7a74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde2c35121b2622e00896cf12475946f483a7a74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fde2c35121b2622e00896cf12475946f483a7a74", "patch": "@@ -1,3 +1,15 @@\n+2014-10-17  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c (ix86_expand_sse2_mulvxdi3): Extend\n+\texpand_sse2_mulvxdi3.\n+\n 2014-10-17  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (fold_comparison): Remove redundant constant"}, {"sha": "52b411f9f1ce023ddfe6a70a9b31ca80590a05a2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde2c35121b2622e00896cf12475946f483a7a74/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde2c35121b2622e00896cf12475946f483a7a74/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fde2c35121b2622e00896cf12475946f483a7a74", "patch": "@@ -45623,7 +45623,22 @@ ix86_expand_sse2_mulvxdi3 (rtx op0, rtx op1, rtx op2)\n   enum machine_mode mode = GET_MODE (op0);\n   rtx t1, t2, t3, t4, t5, t6;\n \n-  if (TARGET_XOP && mode == V2DImode)\n+  if (TARGET_AVX512DQ)\n+    {\n+      rtx (*gen) (rtx, rtx, rtx);\n+\n+      if (mode == V8DImode)\n+\tgen = gen_avx512dq_mulv8di3;\n+      else if (TARGET_AVX512VL)\n+\t{\n+\t  if (mode == V4DImode)\n+\t    gen = gen_avx512dq_mulv4di3;\n+\t  else if (mode == V2DImode)\n+\t    gen = gen_avx512dq_mulv2di3;\n+\t}\n+      emit_insn (gen (op0, op1, op2));\n+    }\n+  else if (TARGET_XOP && mode == V2DImode)\n     {\n       /* op1: A,B,C,D, op2: E,F,G,H */\n       op1 = gen_lowpart (V4SImode, op1);"}]}