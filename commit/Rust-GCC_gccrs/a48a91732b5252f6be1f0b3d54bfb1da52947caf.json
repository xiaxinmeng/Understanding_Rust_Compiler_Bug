{"sha": "a48a91732b5252f6be1f0b3d54bfb1da52947caf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ4YTkxNzMyYjUyNTJmNmJlMWYwYjNkNTRiZmIxZGE1Mjk0N2NhZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-08-04T11:51:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-08-04T11:51:32Z"}, "message": "re PR fortran/44857 (ICE in output_constructor_regular_field, at varasm.c:4996)\n\n2010-08-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44857\n        * resolve.c (resolve_structure_cons): Fix handling of\n        initialization structcture constructors with character\n        elements of the wrong length.\n        * array.c (gfc_check_iter_variable): Add NULL check.\n        (gfc_resolve_character_array_constructor): Also truncate\n        character length.\n\n2010-08-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44857\n        * gfortran.dg/derived_constructor_char_1.f90: New.\n        * gfortran.dg/derived_constructor_char_2.f90: New.\n\nFrom-SVN: r162863", "tree": {"sha": "9ee4d951e1aaa29f3f08cdd47228251f110c2d47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ee4d951e1aaa29f3f08cdd47228251f110c2d47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a48a91732b5252f6be1f0b3d54bfb1da52947caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48a91732b5252f6be1f0b3d54bfb1da52947caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48a91732b5252f6be1f0b3d54bfb1da52947caf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48a91732b5252f6be1f0b3d54bfb1da52947caf/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48176d810041c2d6a68ddd315044307044d00d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48176d810041c2d6a68ddd315044307044d00d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48176d810041c2d6a68ddd315044307044d00d07"}], "stats": {"total": 129, "additions": 127, "deletions": 2}, "files": [{"sha": "30a9415555c8d3d236926a7f327bfb77496184cb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a48a91732b5252f6be1f0b3d54bfb1da52947caf", "patch": "@@ -1,3 +1,13 @@\n+2010-08-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44857\n+\t* resolve.c (resolve_structure_cons): Fix handling of\n+\tinitialization structcture constructors with character\n+\telements of the wrong length.\n+\t* array.c (gfc_check_iter_variable): Add NULL check.\n+\t(gfc_resolve_character_array_constructor): Also truncate\n+\tcharacter length.\n+\n 2010-08-04  Tobias Burnus  <burnus@net-b.de>\n \n \t* trans-io.c (gfc_build_io_library_fndecls): Fix return"}, {"sha": "0d92e9275e3e87b6c7ddc167faa73aaa53e9b946", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=a48a91732b5252f6be1f0b3d54bfb1da52947caf", "patch": "@@ -1207,7 +1207,7 @@ gfc_check_iter_variable (gfc_expr *expr)\n \n   sym = expr->symtree->n.sym;\n \n-  for (c = base; c; c = c->previous)\n+  for (c = base; c && c->iterator; c = c->previous)\n     if (sym == c->iterator->var->symtree->n.sym)\n       return SUCCESS;\n \n@@ -1829,7 +1829,7 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t      has_ts = (expr->ts.u.cl && expr->ts.u.cl->length_from_typespec);\n \n \t      if (! cl\n-\t\t  || (current_length != -1 && current_length < found_length))\n+\t\t  || (current_length != -1 && current_length != found_length))\n \t\tgfc_set_constant_character_len (found_length, p->expr,\n \t\t\t\t\t\thas_ts ? -1 : found_length);\n \t    }"}, {"sha": "620df03a34d472070038a4c3a3a40cbcab1af6dd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=a48a91732b5252f6be1f0b3d54bfb1da52947caf", "patch": "@@ -901,6 +901,52 @@ resolve_structure_cons (gfc_expr *expr)\n \t    t = gfc_convert_type (cons->expr, &comp->ts, 1);\n \t}\n \n+      /* For strings, the length of the constructor should be the same as\n+\t the one of the structure, ensure this if the lengths are known at\n+ \t compile time and when we are dealing with PARAMETER or structure\n+\t constructors.  */\n+      if (cons->expr->ts.type == BT_CHARACTER && comp->ts.u.cl\n+\t  && comp->ts.u.cl->length\n+\t  && comp->ts.u.cl->length->expr_type == EXPR_CONSTANT\n+\t  && cons->expr->ts.u.cl && cons->expr->ts.u.cl->length\n+\t  && cons->expr->ts.u.cl->length->expr_type == EXPR_CONSTANT\n+\t  && mpz_cmp (cons->expr->ts.u.cl->length->value.integer,\n+\t\t      comp->ts.u.cl->length->value.integer) != 0)\n+\t{\n+\t  if (cons->expr->expr_type == EXPR_VARIABLE\n+\t      && cons->expr->symtree->n.sym->attr.flavor == FL_PARAMETER)\n+\t    {\n+\t      /* Wrap the parameter in an array constructor (EXPR_ARRAY)\n+\t\t to make use of the gfc_resolve_character_array_constructor\n+\t\t machinery.  The expression is later simplified away to\n+\t\t an array of string literals.  */\n+\t      gfc_expr *para = cons->expr;\n+\t      cons->expr = gfc_get_expr ();\n+\t      cons->expr->ts = para->ts;\n+\t      cons->expr->where = para->where;\n+\t      cons->expr->expr_type = EXPR_ARRAY;\n+\t      cons->expr->rank = para->rank;\n+\t      cons->expr->shape = gfc_copy_shape (para->shape, para->rank);\n+\t      gfc_constructor_append_expr (&cons->expr->value.constructor,\n+\t\t\t\t\t   para, &cons->expr->where);\n+\t    }\n+\t  if (cons->expr->expr_type == EXPR_ARRAY)\n+\t    {\n+\t      gfc_constructor *p;\n+\t      p = gfc_constructor_first (cons->expr->value.constructor);\n+\t      if (cons->expr->ts.u.cl != p->expr->ts.u.cl)\n+\t\t{\n+\t\t  gfc_free_expr (cons->expr->ts.u.cl->length);\n+\t\t  gfc_free (cons->expr->ts.u.cl);\n+\t\t}\n+\n+\t      cons->expr->ts.u.cl = gfc_get_charlen ();\n+\t      cons->expr->ts.u.cl->length_from_typespec = true;\n+\t      cons->expr->ts.u.cl->length = gfc_copy_expr (comp->ts.u.cl->length);\n+\t      gfc_resolve_character_array_constructor (cons->expr);\n+\t    }\n+\t}\n+\n       if (cons->expr->expr_type == EXPR_NULL\n \t  && !(comp->attr.pointer || comp->attr.allocatable\n \t       || comp->attr.proc_pointer"}, {"sha": "b7ef5ed782a53234c9680be9804ba3e511d13473", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a48a91732b5252f6be1f0b3d54bfb1da52947caf", "patch": "@@ -1,3 +1,9 @@\n+2010-08-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44857\n+\t* gfortran.dg/derived_constructor_char_1.f90: New.\n+\t* gfortran.dg/derived_constructor_char_2.f90: New.\n+\n 2010-08-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/45159"}, {"sha": "20f3cf93e21fcccb030686b63bb1e00dcf533bc0", "filename": "gcc/testsuite/gfortran.dg/derived_constructor_char_1.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_1.f90?ref=a48a91732b5252f6be1f0b3d54bfb1da52947caf", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/44857\n+!\n+!\n+  Type :: t5\n+    character (len=5) :: txt(4)\n+  End Type t5\n+\n+  character (len=3), parameter :: str3(2) = [ \"ABC\", \"ZYX\" ]\n+  character (len=5), parameter :: str5(2) = [ \"AbCdE\", \"ZyXwV\" ]\n+  character (len=5), parameter :: str7(2) = [ \"aBcDeFg\", \"zYxWvUt\" ]\n+\n+  Type (t5) :: one   = t5((/ \"12345\", \"67890\" /))\n+  Type (t5) :: two   = t5((/ \"123\", \"678\" /))\n+  Type (t5) :: three = t5((/ \"1234567\", \"abcdefg\" /))\n+  Type (t5) :: four  = t5(str3)\n+  Type (t5) :: five  = t5(str5)\n+  Type (t5) :: six  = t5(str7)\n+  print '(2a)', one, two, three, four, five, six\n+End\n+\n+subroutine wasICEing()\n+  implicit none\n+\n+  Type :: Err_Text_Type\n+    integer :: nlines\n+    character (len=132), dimension(5) :: txt\n+  End Type Err_Text_Type\n+\n+  Type (Err_Text_Type)  :: Mess_FindFMT =  &\n+                                Err_Text_Type(0, (/\" \",\" \",\" \",\" \",\" \"/))\n+end subroutine wasICEing\n+\n+subroutine anotherCheck()\n+  Type :: t\n+    character (len=3) :: txt(2)\n+  End Type\n+  Type (t) :: tt = t((/ character(len=5) :: \"12345\", \"67890\" /))\n+  print *, tt\n+end subroutine\n+\n+! { dg-final { scan-tree-dump-times \"one = ..txt=..12345., .67890...;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"two = ..txt=..123  ., .678  ...;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"three = ..txt=..12345., .abcde...;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"four = ..txt=..ABC  ., .ZYX  ...;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"five = ..txt=..AbCdE., .ZyXwV...;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"six = ..txt=..aBcDe., .zYxWv...;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "c812bceeb095dd7a803bda930c9458f4df2a06ff", "filename": "gcc/testsuite/gfortran.dg/derived_constructor_char_2.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48a91732b5252f6be1f0b3d54bfb1da52947caf/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_2.f90?ref=a48a91732b5252f6be1f0b3d54bfb1da52947caf", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/44857\n+!\n+!\n+\n+  Type :: t\n+    character (len=5) :: txt(2)\n+  End Type\n+  character (len=5) :: str(2) = [ \"12345\", \"67890\" ]\n+  Type (t) :: tt = t( [str] ) ! { dg-error \"does not reduce to a constant\" }\n+End"}]}