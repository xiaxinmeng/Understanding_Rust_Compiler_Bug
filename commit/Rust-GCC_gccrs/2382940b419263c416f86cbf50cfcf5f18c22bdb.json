{"sha": "2382940b419263c416f86cbf50cfcf5f18c22bdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4Mjk0MGI0MTkyNjNjNDE2Zjg2Y2JmNTBjZmNmNWYxOGMyMmJkYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T20:35:53Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T20:35:53Z"}, "message": "rtl_data.x_nonlocal_goto_handler_labels becomes an rtx_expr_list\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* function.h (struct rtl_data): Strengthen field\n\tx_nonlocal_goto_handler_labels from rtx to rtx_expr_list *.\n\t* rtl.h (remove_node_from_expr_list): Strengthen second param from\n\trtx * to rtx_expr_list **.\n\n\t* cfgbuild.c (make_edges): In loop over\n\tnonlocal_goto_handler_labels, strengthen local \"x\" from rtx to\n\trtx_expr_list *, and use methods of the latter class to clarify\n\tthe code.\n\t* cfgrtl.c (cfg_layout_initialize): Strengthen local \"x\" from rtx to\n\trtx_expr_list *, and use methods of the latter class to clarify\n\tthe code.\n\t* dwarf2cfi.c (create_trace_edges): Likewise for local \"lab\".\n\t* reload1.c (set_initial_label_offsets): Likewise for local \"x\".\n\t* rtlanal.c (remove_node_from_expr_list): Strengthen param \"listp\"\n\tfrom rtx * to rtx_expr_list **.  Strengthen local \"temp\" from rtx\n\tto rtx_expr_list *.  Use methods of the latter class to clarify\n\tthe code.\n\nFrom-SVN: r214603", "tree": {"sha": "4ea4229327cb3a4dd3e2e59aac6110c2f460ebd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ea4229327cb3a4dd3e2e59aac6110c2f460ebd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2382940b419263c416f86cbf50cfcf5f18c22bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2382940b419263c416f86cbf50cfcf5f18c22bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2382940b419263c416f86cbf50cfcf5f18c22bdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2382940b419263c416f86cbf50cfcf5f18c22bdb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca486330c49fe55964c6d11f1463d70365bdef6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca486330c49fe55964c6d11f1463d70365bdef6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca486330c49fe55964c6d11f1463d70365bdef6b"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "25939ac35d9b74b607547355ca4d09026ed109cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -1,3 +1,24 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* function.h (struct rtl_data): Strengthen field\n+\tx_nonlocal_goto_handler_labels from rtx to rtx_expr_list *.\n+\t* rtl.h (remove_node_from_expr_list): Strengthen second param from\n+\trtx * to rtx_expr_list **.\n+\n+\t* cfgbuild.c (make_edges): In loop over\n+\tnonlocal_goto_handler_labels, strengthen local \"x\" from rtx to\n+\trtx_expr_list *, and use methods of the latter class to clarify\n+\tthe code.\n+\t* cfgrtl.c (cfg_layout_initialize): Strengthen local \"x\" from rtx to\n+\trtx_expr_list *, and use methods of the latter class to clarify\n+\tthe code.\n+\t* dwarf2cfi.c (create_trace_edges): Likewise for local \"lab\".\n+\t* reload1.c (set_initial_label_offsets): Likewise for local \"x\".\n+\t* rtlanal.c (remove_node_from_expr_list): Strengthen param \"listp\"\n+\tfrom rtx * to rtx_expr_list **.  Strengthen local \"temp\" from rtx\n+\tto rtx_expr_list *.  Use methods of the latter class to clarify\n+\tthe code.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* function.h (struct expr_status): Strengthen field"}, {"sha": "082f070408c8ee2f2ca8d898d1dc1f38b0f2d229", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -337,8 +337,10 @@ make_edges (basic_block min, basic_block max, int update_p)\n \t\t     taken, then only calls to those functions or to other\n \t\t     nested functions that use them could possibly do\n \t\t     nonlocal gotos.  */\n-\t\t  for (rtx x = nonlocal_goto_handler_labels; x; x = XEXP (x, 1))\n-\t\t    make_label_edge (edge_cache, bb, XEXP (x, 0),\n+\t\t  for (rtx_expr_list *x = nonlocal_goto_handler_labels;\n+\t\t       x;\n+\t\t       x = x->next ())\n+\t\t    make_label_edge (edge_cache, bb, x->element (),\n \t\t\t\t     EDGE_ABNORMAL | EDGE_ABNORMAL_CALL);\n \t\t}\n "}, {"sha": "9707c1f5f4dc45f261a859f29145231871525ddf", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -4216,7 +4216,7 @@ cfg_layout_duplicate_bb (basic_block bb)\n void\n cfg_layout_initialize (unsigned int flags)\n {\n-  rtx x;\n+  rtx_expr_list *x;\n   basic_block bb;\n \n   /* Once bb partitioning is complete, cfg layout mode should not be\n@@ -4235,9 +4235,9 @@ cfg_layout_initialize (unsigned int flags)\n   record_effective_endpoints ();\n \n   /* Make sure that the targets of non local gotos are marked.  */\n-  for (x = nonlocal_goto_handler_labels; x; x = XEXP (x, 1))\n+  for (x = nonlocal_goto_handler_labels; x; x = x->next ())\n     {\n-      bb = BLOCK_FOR_INSN (XEXP (x, 0));\n+      bb = BLOCK_FOR_INSN (x->element ());\n       bb->flags |= BB_NON_LOCAL_GOTO_TARGET;\n     }\n "}, {"sha": "245282408221557cdb40d7dddd1065d6917b5c52", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -2338,8 +2338,10 @@ create_trace_edges (rtx insn)\n \n       /* Process non-local goto edges.  */\n       if (can_nonlocal_goto (insn))\n-\tfor (rtx lab = nonlocal_goto_handler_labels; lab; lab = XEXP (lab, 1))\n-\t  maybe_record_trace_start_abnormal (XEXP (lab, 0), insn);\n+\tfor (rtx_expr_list *lab = nonlocal_goto_handler_labels;\n+\t     lab;\n+\t     lab = lab->next ())\n+\t  maybe_record_trace_start_abnormal (lab->element (), insn);\n     }\n   else if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (PATTERN (insn)))\n     {"}, {"sha": "a176e0ac66bab794b80a2cc33187758759f8a036", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -266,7 +266,7 @@ struct GTY(()) rtl_data {\n \n   /* List (chain of EXPR_LIST) of labels heading the current handlers for\n      nonlocal gotos.  */\n-  rtx x_nonlocal_goto_handler_labels;\n+  rtx_expr_list *x_nonlocal_goto_handler_labels;\n \n   /* Label that will go on function epilogue.\n      Jumping to this label serves as a \"return\" instruction"}, {"sha": "9db479ed24ed75f4535cdb376fa72b540f77a86d", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -3915,9 +3915,9 @@ set_initial_label_offsets (void)\n     if (x->element ())\n       set_label_offsets (x->element (), NULL, 1);\n \n-  for (rtx x = nonlocal_goto_handler_labels; x; x = XEXP (x, 1))\n-    if (XEXP (x, 0))\n-      set_label_offsets (XEXP (x, 0), NULL, 1);\n+  for (rtx_expr_list *x = nonlocal_goto_handler_labels; x; x = x->next ())\n+    if (x->element ())\n+      set_label_offsets (x->element (), NULL, 1);\n \n   for_each_eh_label (set_initial_eh_label_offset);\n }"}, {"sha": "b086b3c895274c4a0ae2c7e9177bff27418c35ed", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -2828,7 +2828,7 @@ extern unsigned hash_rtx_cb (const_rtx, enum machine_mode, int *, int *,\n extern rtx regno_use_in (unsigned int, rtx);\n extern int auto_inc_p (const_rtx);\n extern int in_expr_list_p (const_rtx, const_rtx);\n-extern void remove_node_from_expr_list (const_rtx, rtx *);\n+extern void remove_node_from_expr_list (const_rtx, rtx_expr_list **);\n extern int loc_mentioned_in_p (rtx *, const_rtx);\n extern rtx_insn *find_first_parameter_load (rtx, rtx);\n extern bool keep_with_call_p (const_rtx);"}, {"sha": "297ca418b062058c219ccc918d15d6d8e58189e7", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2382940b419263c416f86cbf50cfcf5f18c22bdb/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2382940b419263c416f86cbf50cfcf5f18c22bdb", "patch": "@@ -2134,26 +2134,26 @@ in_expr_list_p (const_rtx listp, const_rtx node)\n    A simple equality test is used to determine if NODE matches.  */\n \n void\n-remove_node_from_expr_list (const_rtx node, rtx *listp)\n+remove_node_from_expr_list (const_rtx node, rtx_expr_list **listp)\n {\n-  rtx temp = *listp;\n+  rtx_expr_list *temp = *listp;\n   rtx prev = NULL_RTX;\n \n   while (temp)\n     {\n-      if (node == XEXP (temp, 0))\n+      if (node == temp->element ())\n \t{\n \t  /* Splice the node out of the list.  */\n \t  if (prev)\n-\t    XEXP (prev, 1) = XEXP (temp, 1);\n+\t    XEXP (prev, 1) = temp->next ();\n \t  else\n-\t    *listp = XEXP (temp, 1);\n+\t    *listp = temp->next ();\n \n \t  return;\n \t}\n \n       prev = temp;\n-      temp = XEXP (temp, 1);\n+      temp = temp->next ();\n     }\n }\n \f"}]}