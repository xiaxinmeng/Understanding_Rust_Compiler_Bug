{"sha": "c79f6efda3d3ebae36ecd7beab058684d2790903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5ZjZlZmRhM2QzZWJhZTM2ZWNkN2JlYWIwNTg2ODRkMjc5MDkwMw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2015-10-23T10:41:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T10:41:13Z"}, "message": "exp_ch6.adb (Expand_N_Extended_Return_Statement): Do not call SS_Release for a block statement enclosing the return statement in...\n\n2015-10-23  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Do not call\n\tSS_Release for a block statement enclosing the return statement in the\n\tcase where a build-in-place function return is returning\n\tthe result on the secondary stack. This is accomplished by\n\tsetting the Sec_Stack_Needed_For_Return flag on such blocks.\n\tIt was already being set for the function itself, and it was\n\talready set correctly for blocks in the non-build-in-place case\n\t(in Expand_Simple_Function_Return).\n\t(Set_Enclosing_Sec_Stack_Return): New procedure to perform\n\tthe Set_Sec_Stack_Needed_For_Return calls. Called in the\n\tbuild-in-place and non-build-in-place cases.\n\t(Expand_Simple_Function_Return): Call\n\tSet_Enclosing_Sec_Stack_Return instead of performing the loop\n\tin line.\n\n2015-10-23  Bob Duff  <duff@adacore.com>\n\n\t* scng.adb (Char_Literal_Case): If an apostrophe\n\tfollows a reserved word, treat it as a lone apostrophe, rather\n\tthan the start of a character literal. This was already done for\n\t\"all\", but it needs to be done also for (e.g.) \"Delta\".\n\nFrom-SVN: r229226", "tree": {"sha": "0ed8b11b3c01df9037e5e1900516917ec38ab9ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed8b11b3c01df9037e5e1900516917ec38ab9ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79f6efda3d3ebae36ecd7beab058684d2790903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79f6efda3d3ebae36ecd7beab058684d2790903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79f6efda3d3ebae36ecd7beab058684d2790903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79f6efda3d3ebae36ecd7beab058684d2790903/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10158317660dcb6db1913913ce99073078314b4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10158317660dcb6db1913913ce99073078314b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10158317660dcb6db1913913ce99073078314b4f"}], "stats": {"total": 148, "additions": 95, "deletions": 53}, "files": [{"sha": "02301d5847ddeca3590f6ce75b7cf9bb8a49e163", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79f6efda3d3ebae36ecd7beab058684d2790903/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79f6efda3d3ebae36ecd7beab058684d2790903/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c79f6efda3d3ebae36ecd7beab058684d2790903", "patch": "@@ -1,3 +1,27 @@\n+2015-10-23  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Do not call\n+\tSS_Release for a block statement enclosing the return statement in the\n+\tcase where a build-in-place function return is returning\n+\tthe result on the secondary stack. This is accomplished by\n+\tsetting the Sec_Stack_Needed_For_Return flag on such blocks.\n+\tIt was already being set for the function itself, and it was\n+\talready set correctly for blocks in the non-build-in-place case\n+\t(in Expand_Simple_Function_Return).\n+\t(Set_Enclosing_Sec_Stack_Return): New procedure to perform\n+\tthe Set_Sec_Stack_Needed_For_Return calls. Called in the\n+\tbuild-in-place and non-build-in-place cases.\n+\t(Expand_Simple_Function_Return): Call\n+\tSet_Enclosing_Sec_Stack_Return instead of performing the loop\n+\tin line.\n+\n+2015-10-23  Bob Duff  <duff@adacore.com>\n+\n+\t* scng.adb (Char_Literal_Case): If an apostrophe\n+\tfollows a reserved word, treat it as a lone apostrophe, rather\n+\tthan the start of a character literal. This was already done for\n+\t\"all\", but it needs to be done also for (e.g.) \"Delta\".\n+\n 2015-10-23  Bob Duff  <duff@adacore.com>\n \n \t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function): Use"}, {"sha": "31267a50bae9eb09b073e5d3f81b52f1ccbef7b6", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 53, "deletions": 41, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79f6efda3d3ebae36ecd7beab058684d2790903/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79f6efda3d3ebae36ecd7beab058684d2790903/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c79f6efda3d3ebae36ecd7beab058684d2790903", "patch": "@@ -258,6 +258,13 @@ package body Exp_Ch6 is\n    --  Expand simple return from function. In the case where we are returning\n    --  from a function body this is called by Expand_N_Simple_Return_Statement.\n \n+   procedure Set_Enclosing_Sec_Stack_Return (N : Node_Id);\n+   --  N is a return statement for a function that returns its result on the\n+   --  secondary stack. This sets the Sec_Stack_Needed_For_Return flag on the\n+   --  function and all blocks and loops that the return statement is jumping\n+   --  out of. This ensures that the secondary stack is not released; otherwise\n+   --  the function result would be reclaimed before returning to the caller.\n+\n    ----------------------------------------------\n    -- Add_Access_Actual_To_Build_In_Place_Call --\n    ----------------------------------------------\n@@ -4662,18 +4669,18 @@ package body Exp_Ch6 is\n \n                      --  The allocator is returned on the secondary stack,\n                      --  so indicate that the function return, as well as\n-                     --  the block that encloses the allocator, must not\n+                     --  all blocks that encloses the allocator, must not\n                      --  release it. The flags must be set now because\n                      --  the decision to use the secondary stack is done\n                      --  very late in the course of expanding the return\n                      --  statement, past the point where these flags are\n                      --  normally set.\n \n-                     Set_Sec_Stack_Needed_For_Return (Func_Id);\n-                     Set_Sec_Stack_Needed_For_Return\n-                       (Return_Statement_Entity (N));\n                      Set_Uses_Sec_Stack (Func_Id);\n                      Set_Uses_Sec_Stack (Return_Statement_Entity (N));\n+                     Set_Sec_Stack_Needed_For_Return\n+                       (Return_Statement_Entity (N));\n+                     Set_Enclosing_Sec_Stack_Return (N);\n \n                      --  Create an if statement to test the BIP_Alloc_Form\n                      --  formal and initialize the access object to either the\n@@ -5966,44 +5973,10 @@ package body Exp_Ch6 is\n \n       else\n          --  Prevent the reclamation of the secondary stack by all enclosing\n-         --  blocks and loops as well as the related function, otherwise the\n-         --  result will be reclaimed too early or even clobbered. Due to a\n-         --  possible mix of internally generated blocks, source blocks and\n-         --  loops, the scope stack may not be contiguous as all labels are\n-         --  inserted at the top level within the related function. Instead,\n-         --  perform a parent-based traversal and mark all appropriate\n-         --  constructs.\n-\n-         declare\n-            P : Node_Id;\n-\n-         begin\n-            P := N;\n-            while Present (P) loop\n-\n-               --  Mark the label of a source or internally generated block or\n-               --  loop.\n+         --  blocks and loops as well as the related function; otherwise the\n+         --  result would be reclaimed too early.\n \n-               if Nkind_In (P, N_Block_Statement, N_Loop_Statement) then\n-                  Set_Sec_Stack_Needed_For_Return (Entity (Identifier (P)));\n-\n-               --  Mark the enclosing function\n-\n-               elsif Nkind (P) = N_Subprogram_Body then\n-                  if Present (Corresponding_Spec (P)) then\n-                     Set_Sec_Stack_Needed_For_Return (Corresponding_Spec (P));\n-                  else\n-                     Set_Sec_Stack_Needed_For_Return (Defining_Entity (P));\n-                  end if;\n-\n-                  --  Do not go beyond the enclosing function\n-\n-                  exit;\n-               end if;\n-\n-               P := Parent (P);\n-            end loop;\n-         end;\n+         Set_Enclosing_Sec_Stack_Return (N);\n \n          --  Optimize the case where the result is a function call. In this\n          --  case either the result is already on the secondary stack, or is\n@@ -9418,6 +9391,45 @@ package body Exp_Ch6 is\n       end if;\n    end Needs_Result_Accessibility_Level;\n \n+   ------------------------------------\n+   -- Set_Enclosing_Sec_Stack_Return --\n+   ------------------------------------\n+\n+   procedure Set_Enclosing_Sec_Stack_Return (N : Node_Id) is\n+      P : Node_Id := N;\n+\n+   begin\n+      --  Due to a possible mix of internally generated blocks, source blocks\n+      --  and loops, the scope stack may not be contiguous as all labels are\n+      --  inserted at the top level within the related function. Instead,\n+      --  perform a parent-based traversal and mark all appropriate constructs.\n+\n+      while Present (P) loop\n+\n+         --  Mark the label of a source or internally generated block or\n+         --  loop.\n+\n+         if Nkind_In (P, N_Block_Statement, N_Loop_Statement) then\n+            Set_Sec_Stack_Needed_For_Return (Entity (Identifier (P)));\n+\n+         --  Mark the enclosing function\n+\n+         elsif Nkind (P) = N_Subprogram_Body then\n+            if Present (Corresponding_Spec (P)) then\n+               Set_Sec_Stack_Needed_For_Return (Corresponding_Spec (P));\n+            else\n+               Set_Sec_Stack_Needed_For_Return (Defining_Entity (P));\n+            end if;\n+\n+            --  Do not go beyond the enclosing function\n+\n+            exit;\n+         end if;\n+\n+         P := Parent (P);\n+      end loop;\n+   end Set_Enclosing_Sec_Stack_Return;\n+\n    ------------------------\n    -- Unnest_Subprograms --\n    ------------------------"}, {"sha": "f0a9013a8b82f23ad35b978d0b95c3a5d34e49e3", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79f6efda3d3ebae36ecd7beab058684d2790903/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79f6efda3d3ebae36ecd7beab058684d2790903/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=c79f6efda3d3ebae36ecd7beab058684d2790903", "patch": "@@ -1834,14 +1834,19 @@ package body Scng is\n \n          --  Apostrophe. This can either be the start of a character literal,\n          --  or an isolated apostrophe used in a qualified expression or an\n-         --  attribute. We treat it as a character literal if it does not\n-         --  follow a right parenthesis, identifier, the keyword ALL or\n-         --  a literal. This means that we correctly treat constructs like:\n+         --  attribute. In the following:\n \n          --    A := CHARACTER'('A');\n \n-         --  Note that RM-2.2(7) does not require a separator between\n-         --  \"CHARACTER\" and \"'\" in the above.\n+         --  the first apostrophe is treated as an isolated apostrophe, and the\n+         --  second one is treated as the start of the character literal 'A'.\n+         --  Note that RM-2.2(7) does not require a separator between \"'\" and\n+         --  \"(\" in the above, so we cannot use lookahead to distinguish the\n+         --  cases; we use look-back instead. Analysis of the grammar shows\n+         --  that some tokens can be followed by an apostrophe, and some by a\n+         --  character literal, but none by both. Some cannot be followed by\n+         --  either, so it doesn't matter what we do in those cases, except to\n+         --  get good error behavior.\n \n          when ''' => Char_Literal_Case : declare\n             Code : Char_Code;\n@@ -1851,17 +1856,18 @@ package body Scng is\n             Accumulate_Checksum (''');\n             Scan_Ptr := Scan_Ptr + 1;\n \n-            --  Here is where we make the test to distinguish the cases. Treat\n-            --  as apostrophe if previous token is an identifier, right paren\n-            --  or the reserved word \"all\" (latter case as in A.all'Address)\n-            --  (or the reserved word \"project\" in project files). Also treat\n-            --  it as apostrophe after a literal (this catches some legitimate\n-            --  cases, like A.\"abs\"'Address, and also gives better error\n-            --  behavior for impossible cases like 123'xxx).\n+            --  Distinguish between apostrophe and character literal. It's an\n+            --  apostrophe if the previous token is one of the following.\n+            --  Reserved words are included for things like A.all'Address and\n+            --  T'Digits'Img. Strings literals are included for things like\n+            --  \"abs\"'Address. Other literals are included to give better error\n+            --  behavior for illegal cases like 123'Img.\n \n             if Prev_Token = Tok_Identifier\n                or else Prev_Token = Tok_Right_Paren\n                or else Prev_Token = Tok_All\n+               or else Prev_Token = Tok_Delta\n+               or else Prev_Token = Tok_Digits\n                or else Prev_Token = Tok_Project\n                or else Prev_Token in Token_Class_Literal\n             then"}]}