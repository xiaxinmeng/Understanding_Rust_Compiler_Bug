{"sha": "6f31a9d795f204b599466d53ef22cc579bfe37bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYzMWE5ZDc5NWYyMDRiNTk5NDY2ZDUzZWYyMmNjNTc5YmZlMzdiZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-09-26T10:46:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:46:00Z"}, "message": "sem_attr.adb (Analyze_Access_Attribute): Fix missing set of Address_Taken.\n\n2007-09-26  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Analyze_Access_Attribute): Fix missing set of\n\tAddress_Taken.\n\nFrom-SVN: r128801", "tree": {"sha": "22b139cf4e4d0cf8cb65a877753780e429620994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22b139cf4e4d0cf8cb65a877753780e429620994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f31a9d795f204b599466d53ef22cc579bfe37bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f31a9d795f204b599466d53ef22cc579bfe37bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f31a9d795f204b599466d53ef22cc579bfe37bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f31a9d795f204b599466d53ef22cc579bfe37bd/comments", "author": null, "committer": null, "parents": [{"sha": "d123579abfd2f419fce2f9e8188738912ade4512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d123579abfd2f419fce2f9e8188738912ade4512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d123579abfd2f419fce2f9e8188738912ade4512"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "903aad050a3239645abdb49745cfcd27fd6107b6", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f31a9d795f204b599466d53ef22cc579bfe37bd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f31a9d795f204b599466d53ef22cc579bfe37bd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=6f31a9d795f204b599466d53ef22cc579bfe37bd", "patch": "@@ -707,23 +707,42 @@ package body Sem_Attr is\n             end;\n          end if;\n \n-         --  Special cases when prefix is entity name\n+         --  Special cases when we can find a prefix that is an entity name\n \n-         if Is_Entity_Name (P) then\n+         declare\n+            PP  : Node_Id;\n+            Ent : Entity_Id;\n \n-            --  If we have an access to an object, and the attribute comes from\n-            --  source, then set the object as potentially source modified. We\n-            --  do this because the resulting access pointer can be used to\n-            --  modify the variable, and we might not detect this, leading to\n-            --  some junk warnings.\n+         begin\n+            PP := P;\n+            loop\n+               if Is_Entity_Name (PP) then\n+                  Ent := Entity (PP);\n \n-            Set_Never_Set_In_Source (Entity (P), False);\n+                  --  If we have an access to an object, and the attribute\n+                  --  comes from source, then set the object as potentially\n+                  --  source modified. We do this because the resulting access\n+                  --  pointer can be used to modify the variable, and we might\n+                  --  not detect this, leading to some junk warnings.\n \n-            --  Mark entity as address taken, and kill current values\n+                  Set_Never_Set_In_Source (Ent, False);\n \n-            Set_Address_Taken (Entity (P));\n-            Kill_Current_Values (Entity (P));\n-         end if;\n+                  --  Mark entity as address taken, and kill current values\n+\n+                  Set_Address_Taken (Ent);\n+                  Kill_Current_Values (Ent);\n+                  exit;\n+\n+               elsif Nkind (PP) = N_Selected_Component\n+                 or else Nkind (PP) = N_Indexed_Component\n+               then\n+                  PP := Prefix (PP);\n+\n+               else\n+                  exit;\n+               end if;\n+            end loop;\n+         end;\n \n          --  Check for aliased view unless unrestricted case. We allow a\n          --  nonaliased prefix when within an instance because the prefix may"}]}