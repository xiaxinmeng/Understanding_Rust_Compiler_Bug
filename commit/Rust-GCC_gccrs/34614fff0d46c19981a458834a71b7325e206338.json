{"sha": "34614fff0d46c19981a458834a71b7325e206338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2MTRmZmYwZDQ2YzE5OTgxYTQ1ODgzNGE3MWI3MzI1ZTIwNjMzOA==", "commit": {"author": {"name": "Mikulas Patocka", "email": "mikulas@artax.karlin.mff.cuni.cz", "date": "2008-03-18T20:00:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-18T20:00:12Z"}, "message": "re PR target/35504 (incorrect code generated on i386 for C++ multiple inheritance, large return structures and regparm or fastcall calling conventions)\n\n        PR target/35504\n        * config/i386/i386.c (x86_this_parameter): Calculate correct location\n        of \"this\" pointer when \"regparm = N\" or \"fastcall\" is in effect.\n\ntestsuite/ChangeLog\n\n        PR target/35504\n        * g++.dg/other/pr35504.C: New test.\n\nFrom-SVN: r133324", "tree": {"sha": "dc483ddfafcccacac26d2dfd5679a1bd46d3f4d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc483ddfafcccacac26d2dfd5679a1bd46d3f4d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34614fff0d46c19981a458834a71b7325e206338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34614fff0d46c19981a458834a71b7325e206338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34614fff0d46c19981a458834a71b7325e206338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34614fff0d46c19981a458834a71b7325e206338/comments", "author": null, "committer": null, "parents": [{"sha": "88ab8cf2a5541c7e6f199f53b4c8d894bc14c74d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ab8cf2a5541c7e6f199f53b4c8d894bc14c74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ab8cf2a5541c7e6f199f53b4c8d894bc14c74d"}], "stats": {"total": 199, "additions": 186, "deletions": 13}, "files": [{"sha": "d3601a7827d6b0e59f5458b028227908929eeb4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34614fff0d46c19981a458834a71b7325e206338/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34614fff0d46c19981a458834a71b7325e206338/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34614fff0d46c19981a458834a71b7325e206338", "patch": "@@ -1,19 +1,25 @@\n+2008-03-18  Mikulas Patocka  <mikulas@artax.karlin.mff.cuni.cz>\n+\n+\tPR target/35504\n+\t* config/i386/i386.c (x86_this_parameter): Calculate correct location\n+\tof \"this\" pointer when \"regparm = N\" or \"fastcall\" is in effect.\n+\n 2008-03-18  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/include/texinfo.tex: Update to version 2008-03-17.10.\n \n 2008-03-18  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * expr.c (store_expr): Assume lang_hooks.reduce_bit_field_operations\n-        is true.\n-        (expand_expr_real_1) <REDUCE_BIT_FIELD>: Don't look at ignore.\n-        (expand_expr_real_1): Assume lang_hooks.reduce_bit_field_operations\n-        is true.  Add \"&& !ignore\" condition to reduce_bit_field.  Modify\n-        target after ignore has been set, and move there also the commputation\n-        of subtarget and original_target.\n-        * langhooks-def.h (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Delete.\n-        (LANG_HOOKS_INITIALIZER): Remove it.\n-        * langhooks.h (struct lang_hooks): Remove reduce_bit_field_operations.\n+\t* expr.c (store_expr): Assume lang_hooks.reduce_bit_field_operations\n+\tis true.\n+\t(expand_expr_real_1) <REDUCE_BIT_FIELD>: Don't look at ignore.\n+\t(expand_expr_real_1): Assume lang_hooks.reduce_bit_field_operations\n+\tis true.  Add \"&& !ignore\" condition to reduce_bit_field.  Modify\n+\ttarget after ignore has been set, and move there also the commputation\n+\tof subtarget and original_target.\n+\t* langhooks-def.h (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Delete.\n+\t(LANG_HOOKS_INITIALIZER): Remove it.\n+\t* langhooks.h (struct lang_hooks): Remove reduce_bit_field_operations.\n \n 2008-03-18  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "5bb5494e27f766e9f1469813a1bd60746e512979", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34614fff0d46c19981a458834a71b7325e206338/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34614fff0d46c19981a458834a71b7325e206338/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=34614fff0d46c19981a458834a71b7325e206338", "patch": "@@ -22698,6 +22698,7 @@ x86_this_parameter (tree function)\n {\n   tree type = TREE_TYPE (function);\n   bool aggr = aggregate_value_p (TREE_TYPE (type), type) != 0;\n+  int nregs;\n \n   if (TARGET_64BIT)\n     {\n@@ -22710,11 +22711,25 @@ x86_this_parameter (tree function)\n       return gen_rtx_REG (DImode, parm_regs[aggr]);\n     }\n \n-  if (ix86_function_regparm (type, function) > 0 && !stdarg_p (type))\n+  nregs = ix86_function_regparm (type, function);\n+\n+  if (nregs > 0 && !stdarg_p (type))\n     {\n-      int regno = AX_REG;\n+      int regno;\n+\n       if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type)))\n-\tregno = CX_REG;\n+\tregno = aggr ? DX_REG : CX_REG;\n+      else\n+        {\n+\t  regno = AX_REG;\n+\t  if (aggr)\n+\t    {\n+\t      regno = DX_REG;\n+\t      if (nregs == 1)\n+\t\treturn gen_rtx_MEM (SImode,\n+\t\t\t\t    plus_constant (stack_pointer_rtx, 4));\n+\t    }\n+\t}\n       return gen_rtx_REG (SImode, regno);\n     }\n "}, {"sha": "6a303924ca488cac0dc00f7c5200fe5fae8175ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34614fff0d46c19981a458834a71b7325e206338/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34614fff0d46c19981a458834a71b7325e206338/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34614fff0d46c19981a458834a71b7325e206338", "patch": "@@ -1,3 +1,8 @@\n+2008-03-18  Mikulas Patocka  <mikulas@artax.karlin.mff.cuni.cz>\n+\n+\tPR target/35504\n+\t* g++.dg/other/pr35504.C: New test.\n+\n 2008-03-18  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/forwprop-4.c: New testcase."}, {"sha": "09c13fd08a7d74a422b0e9535207d7c5a01cd49f", "filename": "gcc/testsuite/g++.dg/other/pr35504.C", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34614fff0d46c19981a458834a71b7325e206338/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr35504.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34614fff0d46c19981a458834a71b7325e206338/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr35504.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr35504.C?ref=34614fff0d46c19981a458834a71b7325e206338", "patch": "@@ -0,0 +1,147 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } }\n+\n+#define ATTR0 __attribute__((__regparm__(0)))\n+#define ATTR1 __attribute__((__regparm__(1)))\n+#define ATTR2 __attribute__((__regparm__(2)))\n+#define ATTR3 __attribute__((__regparm__(3)))\n+#define ATTR4 __attribute__((__fastcall__))\n+#define ATTR5 __attribute__((__stdcall__))\n+#define ATTR6 __attribute__((__cdecl__))\n+#define ATTR7\n+\n+extern \"C\" void abort (void);\n+\n+struct long_struct\n+{\n+  int a[3];\n+};\n+\n+struct long_struct ret;\n+\n+class c3 *this3;\n+\n+class c1\n+{\n+  int val1;\n+public:\n+    virtual void foo () { }\n+};\n+\n+class c2\n+{\n+public:\n+  virtual ATTR0 struct long_struct method0 ()\n+  {\n+    return ret;\n+  }\n+\n+  virtual ATTR1 struct long_struct method1 ()\n+  {\n+    return ret;\n+  }\n+\n+  virtual ATTR2 struct long_struct method2 ()\n+  {\n+    return ret;\n+  }\n+\n+  virtual ATTR3 struct long_struct method3 ()\n+  {\n+    return ret;\n+  }\n+\n+  virtual ATTR4 struct long_struct method4 ()\n+  {\n+    return ret;\n+  }\n+\n+  virtual ATTR5 struct long_struct method5 ()\n+  {\n+    return ret;\n+  }\n+\n+  virtual ATTR6 struct long_struct method6 ()\n+  {\n+    return ret;\n+  }\n+\n+  virtual ATTR7 struct long_struct method7 ()\n+  {\n+    return ret;\n+  }\n+};\n+\n+class c3:c1, public c2\n+{\n+public:\n+  c3 ()\n+  {\n+    this3 = this;\n+  }\n+\n+  struct long_struct check_this (int a)\n+  {\n+    if (this3 != this)\n+      abort ();\n+\n+    return ret;\n+  }\n+\n+  virtual ATTR0 struct long_struct method0 ()\n+  {\n+    return check_this (0);\n+  }\n+\n+  virtual ATTR1 struct long_struct method1 ()\n+  {\n+    return check_this (1);\n+  }\n+\n+  virtual ATTR2 struct long_struct method2 ()\n+  {\n+    return check_this (2);\n+  }\n+\n+  virtual ATTR3 struct long_struct method3 ()\n+  {\n+    return check_this (3);\n+  }\n+\n+  virtual ATTR4 struct long_struct method4 ()\n+  {\n+    return check_this (4);\n+  }\n+\n+  virtual ATTR5 struct long_struct method5 ()\n+  {\n+    return check_this (5);\n+  }\n+\n+  virtual ATTR6 struct long_struct method6 ()\n+  {\n+    return check_this (6);\n+  }\n+\n+  virtual ATTR7 struct long_struct method7 ()\n+  {\n+    return check_this (7);\n+  }\n+};\n+\n+class c3 c3_instance;\n+class c2 *c2_ptr = &c3_instance;\n+\n+int\n+main ()\n+{\n+  c2_ptr->method0 ();\n+  c2_ptr->method1 ();\n+  c2_ptr->method2 ();\n+  c2_ptr->method3 ();\n+  c2_ptr->method4 ();\n+  c2_ptr->method5 ();\n+  c2_ptr->method6 ();\n+  c2_ptr->method7 ();\n+\n+  return 0;\n+}"}]}