{"sha": "f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE5ZjFlNWVmMDI4NDAzMjVlZDU3OWZmYTBmYjhkMmZmODJmOWIzNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-11-15T23:16:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-11-15T23:16:48Z"}, "message": "ia64: -mfused-madd cleanup\n\n\t* config.gcc [ia64-*] (extra_options): Add fused-madd.opt.\n\t* config/ia64/ia64.opt: Remove mfused-madd.\n\t* config/ia64/ia64.c (ia64_rtx_costs): Handle FP MULT, PLUS, FMA.\n\t* config/ia64/vms.h (TARGET_DEFAULT): Remove MASK_FUSED_MADD.\n\t* config/ia64/vms64.h (TARGET_DEFAULT): Likewise.\n\t* config/ia64/ia64.h (TARGET_DEFAULT): Likewise.\n\t* config/ia64/hpux.h (TARGET_DEFAULT): Likewise.\n\t* config/ia64/vect.md (addv2sf3, subv2sf3): Generate FMA.\n\t(*addv2sf3_1, *addv2sf3_2, *subv2sf3_1, *subv2sf3_2): Remove.\n\t(fmav2sf4): Rename from fpma; use FMA code.\n\t(fmsv2sf4): Rename from fpms; use FMA code.\n\t(fnmav2sf4): Rename from *fpnma; use FMA code.\n\t* config/ia64/ia64.md (MODE_SDF): New iterator.\n\t(suffix): New mode attribute.\n\t(*maddsf4, *msubsf4, *nmaddsf4): Remove.\n\t(fmssf4): Rename from *fmssf4.\n\t(fnmasf4): Rename from *nfmasf4.\n\t(*madddf4, *madddf4_trunc, *msubdf4, *msubdf4_trunc): Remove.\n\t(*nmadddf4, *nmadddf4_truncsf): Remove.\n\t(fmsdf4): Rename from *fmsdf4.\n\t(fnmadf4): Rename from *nfmadf4.\n\t(*fmadf_trunc_sf, *fmsdf_trunc_sf, *fnmadf_trunc_sf): New.\n\t(*maddxf4, *maddxf4_truncsf, *maddxf4_truncdf): Remove.\n\t(*msubxf4, *msubxf4_truncsf, *msubxf4_truncdf): Remove.\n\t(*nmaddxf4, *nmaddxf4_truncsf, *nmaddxf4_truncdf): Remove.\n\t(fmsxf4): Rename from *fmsxf4.\n\t(fnmaxf4): Rename from *nfmaxf4.\n\t(*fmaxf_trunc_<MODE_SDF>, *fmsxf_trunc_<MODE_SDF>): New.\n\t(*fnmaxf_trunc_<MODE_SDF>): New.\n\nFrom-SVN: r166780", "tree": {"sha": "7f0c28e6a2939f278f5a9f7b5fd0b1f6ec489747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f0c28e6a2939f278f5a9f7b5fd0b1f6ec489747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/comments", "author": null, "committer": null, "parents": [{"sha": "b6cfe8acc51bf65a1962afbde311cb185debcaf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6cfe8acc51bf65a1962afbde311cb185debcaf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6cfe8acc51bf65a1962afbde311cb185debcaf8"}], "stats": {"total": 457, "additions": 158, "deletions": 299}, "files": [{"sha": "7b62f4fe162907ed91d06507d9ef11b79b086ecc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -1,3 +1,35 @@\n+2010-11-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* config.gcc [ia64-*] (extra_options): Add fused-madd.opt.\n+\t* config/ia64/ia64.opt: Remove mfused-madd.\n+\t* config/ia64/ia64.c (ia64_rtx_costs): Handle FP MULT, PLUS, FMA.\n+\t* config/ia64/vms.h (TARGET_DEFAULT): Remove MASK_FUSED_MADD.\n+\t* config/ia64/vms64.h (TARGET_DEFAULT): Likewise.\n+\t* config/ia64/ia64.h (TARGET_DEFAULT): Likewise.\n+\t* config/ia64/hpux.h (TARGET_DEFAULT): Likewise.\n+\t* config/ia64/vect.md (addv2sf3, subv2sf3): Generate FMA.\n+\t(*addv2sf3_1, *addv2sf3_2, *subv2sf3_1, *subv2sf3_2): Remove.\n+\t(fmav2sf4): Rename from fpma; use FMA code.\n+\t(fmsv2sf4): Rename from fpms; use FMA code.\n+\t(fnmav2sf4): Rename from *fpnma; use FMA code.\n+\t* config/ia64/ia64.md (MODE_SDF): New iterator.\n+\t(suffix): New mode attribute.\n+\t(*maddsf4, *msubsf4, *nmaddsf4): Remove.\n+\t(fmssf4): Rename from *fmssf4.\n+\t(fnmasf4): Rename from *nfmasf4.\n+\t(*madddf4, *madddf4_trunc, *msubdf4, *msubdf4_trunc): Remove.\n+\t(*nmadddf4, *nmadddf4_truncsf): Remove.\n+\t(fmsdf4): Rename from *fmsdf4.\n+\t(fnmadf4): Rename from *nfmadf4.\n+\t(*fmadf_trunc_sf, *fmsdf_trunc_sf, *fnmadf_trunc_sf): New.\n+\t(*maddxf4, *maddxf4_truncsf, *maddxf4_truncdf): Remove.\n+\t(*msubxf4, *msubxf4_truncsf, *msubxf4_truncdf): Remove.\n+\t(*nmaddxf4, *nmaddxf4_truncsf, *nmaddxf4_truncdf): Remove.\n+\t(fmsxf4): Rename from *fmsxf4.\n+\t(fnmaxf4): Rename from *nfmaxf4.\n+\t(*fmaxf_trunc_<MODE_SDF>, *fmsxf_trunc_<MODE_SDF>): New.\n+\t(*fnmaxf_trunc_<MODE_SDF>): New.\n+\n 2010-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/46461"}, {"sha": "0bafc3a0364bfe0f1b43b9567a59e23a36442009", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -335,7 +335,7 @@ x86_64-*-*)\n ia64-*-*)\n \textra_headers=ia64intrin.h\n \tneed_64bit_hwint=yes\n-\textra_options=\"${extra_options} g.opt\"\n+\textra_options=\"${extra_options} g.opt fused-madd.opt\"\n \t;;\n hppa*-*-*)\n \tcpu_type=pa"}, {"sha": "c0dae0ae9ea65e14b8c17c19fc736504f387545a", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -106,7 +106,7 @@ do {\t\t\t\t\t\t\t\\\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32 | MASK_FUSED_MADD)\n+  (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32)\n \n /* ??? Might not be needed anymore.  */\n #define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) ((MODE) == TFmode)"}, {"sha": "bfd79bfd3b6ff3119a0b9a473d94e931f7131e75", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -5273,20 +5273,32 @@ ia64_rtx_costs (rtx x, int code, int outer_code, int *total,\n       *total = COSTS_N_INSNS (3);\n       return true;\n \n+    case FMA:\n+      *total = COSTS_N_INSNS (4);\n+      return true;\n+\n     case MULT:\n       /* For multiplies wider than HImode, we have to go to the FPU,\n          which normally involves copies.  Plus there's the latency\n          of the multiply itself, and the latency of the instructions to\n          transfer integer regs to FP regs.  */\n-      /* ??? Check for FP mode.  */\n-      if (GET_MODE_SIZE (GET_MODE (x)) > 2)\n+      if (FLOAT_MODE_P (GET_MODE (x)))\n+\t*total = COSTS_N_INSNS (4);\n+      else if (GET_MODE_SIZE (GET_MODE (x)) > 2)\n         *total = COSTS_N_INSNS (10);\n       else\n \t*total = COSTS_N_INSNS (2);\n       return true;\n \n     case PLUS:\n     case MINUS:\n+      if (FLOAT_MODE_P (GET_MODE (x)))\n+\t{\n+\t  *total = COSTS_N_INSNS (4);\n+\t  return true;\n+\t}\n+      /* FALLTHRU */\n+\n     case ASHIFT:\n     case ASHIFTRT:\n     case LSHIFTRT:"}, {"sha": "1b24c8ef4720ce00e14585ff2624c3d5be0527d1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -96,7 +96,7 @@ enum ia64_inline_type\n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_FUSED_MADD)\n+#define TARGET_DEFAULT (MASK_DWARF2_ASM)\n #endif\n \n #ifndef TARGET_CPU_DEFAULT"}, {"sha": "c258ca5b7a54e43cb86ef98020ac2e38b9566e24", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 83, "deletions": 186, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -206,7 +206,17 @@\n (automata_option \"w\")\n \n (include \"itanium2.md\")\n+\f\n+;; Mode iterators\n+\n+; Used for truncations from XFmode.\n+(define_mode_iterator MODE_SDF [SF DF])\n \n+(define_mode_attr suffix [\n+  (SF \".s\")\n+  (DF \".d\")\n+  (XF \"\")\n+  ])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -2757,24 +2767,6 @@\n   \"fmax %0 = %F1, %F2\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-(define_insn \"*maddsf4\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t  (match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\"))\n-\t\t (match_operand:SF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fma.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*msubsf4\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:SF (mult:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t   (match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\"))\n-\t\t  (match_operand:SF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fms.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n (define_insn \"*nmulsf3\"\n   [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n \t(neg:SF (mult:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -2783,16 +2775,6 @@\n   \"fnmpy.s %0 = %F1, %F2\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"*nmaddsf4\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 3 \"fr_reg_or_fp01_operand\" \"fG\") \n-\t\t  (mult:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t   (match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fnma.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-;; Official C99 versions of the fmaf family of operations.\n (define_insn \"fmasf4\"\n   [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n \t(fma:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -2802,7 +2784,7 @@\n   \"fma.s %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"*fmssf4\"\n+(define_insn \"fmssf4\"\n   [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n \t(fma:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n \t\t(match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -2812,8 +2794,7 @@\n   \"fms.s %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-;; This insn is officially \"-(a * b) + c\" which is \"(-a * b) + c\".\n-(define_insn \"*nfmasf4\"\n+(define_insn \"fnmasf4\"\n   [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n \t(fma:SF (neg:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n \t\t(match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -2934,44 +2915,6 @@\n   \"fmax %0 = %F1, %F2\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-(define_insn \"*madddf4\"\n-  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t  (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\"))\n-\t\t (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fma.d %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*madddf4_trunc\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t  (plus:DF (mult:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t    (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\"))\n-\t\t   (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fma.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*msubdf4\"\n-  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:DF (mult:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t   (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\"))\n-\t\t  (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fms.d %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*msubdf4_trunc\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t  (minus:DF (mult:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t     (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\"))\n-\t\t    (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fms.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n (define_insn \"*nmuldf3\"\n   [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n \t(neg:DF (mult:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -2989,26 +2932,6 @@\n   \"fnmpy.s %0 = %F1, %F2\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"*nmadddf4\"\n-  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:DF (match_operand:DF 3 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t  (mult:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t   (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fnma.d %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*nmadddf4_truncsf\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t(minus:DF (match_operand:DF 3 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t  (mult:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n-\t\t\t   (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fnma.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-;; Official C99 versions of the fma family of operations.\n (define_insn \"fmadf4\"\n   [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n \t(fma:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -3018,7 +2941,17 @@\n   \"fma.d %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"*fmsdf4\"\n+(define_insn \"*fmadf_trunc_sf\"\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:SF\n+\t  (fma:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t  (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t  (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n+  \"\"\n+  \"fma.s %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"fmsdf4\"\n   [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n \t(fma:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n \t\t(match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -3028,15 +2961,37 @@\n   \"fms.d %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-;; See comment for nfmasf4.\n-(define_insn \"*nfmadf4\"\n+(define_insn \"*fmsdf_trunc_sf\"\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:SF\n+\t  (fma:DF\n+\t    (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (neg:DF\n+\t      (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))))]\n+  \"\"\n+  \"fms.s %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"fnmadf4\"\n   [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n \t(fma:DF (neg:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n \t\t(match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n \t\t(match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n   \"\"\n   \"fnma.d %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"*fnmadf_trunc_sf\"\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:SF\n+\t  (fma:DF\n+\t    (neg:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n+\t    (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n+  \"\"\n+  \"fnma.s %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -3177,64 +3132,6 @@\n   \"fmax %0 = %F1, %F2\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-(define_insn \"*maddxf4\"\n-  [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n-\t(plus:XF (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t  (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\"))\n-\t\t (match_operand:XF 3 \"xfreg_or_signed_fp01_operand\" \"fZ\")))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fma %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*maddxf4_truncsf\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t  (plus:XF (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t    (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\"))\n-\t\t   (match_operand:XF 3 \"xfreg_or_signed_fp01_operand\" \"fZ\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fma.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*maddxf4_truncdf\"\n-  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:DF\n-\t  (plus:XF (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t    (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\"))\n-\t\t   (match_operand:XF 3 \"xfreg_or_signed_fp01_operand\" \"fZ\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fma.d %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*msubxf4\"\n-  [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:XF (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t   (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\"))\n-\t\t  (match_operand:XF 3 \"xfreg_or_signed_fp01_operand\" \"fZ\")))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fms %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*msubxf4_truncsf\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t  (minus:XF (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t     (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\"))\n-\t\t    (match_operand:XF 3 \"xfreg_or_signed_fp01_operand\" \"fZ\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fms.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*msubxf4_truncdf\"\n-  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:DF\n-\t  (minus:XF (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t     (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\"))\n-\t\t    (match_operand:XF 3 \"xfreg_or_signed_fp01_operand\" \"fZ\"))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fms.d %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n (define_insn \"*nmulxf3\"\n   [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n \t(neg:XF (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n@@ -3263,39 +3160,6 @@\n   \"fnmpy.d %0 = %F1, %F2\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"*nmaddxf4\"\n-  [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:XF (match_operand:XF 3 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t  (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t   (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\")\n-   )))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fnma %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*nmaddxf4_truncsf\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t  (minus:XF (match_operand:XF 3 \"xfreg_or_fp01_operand\" \"fG\") \n-\t\t    (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t     (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\")\n-   ))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fnma.s %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-(define_insn \"*nmaddxf4_truncdf\"\n-  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n-\t(float_truncate:DF\n-\t  (minus:XF (match_operand:XF 3 \"xfreg_or_fp01_operand\" \"fG\") \n-\t\t    (mult:XF (match_operand:XF 1 \"xfreg_or_fp01_operand\" \"fG\")\n-\t\t\t     (match_operand:XF 2 \"xfreg_or_fp01_operand\" \"fG\")\n-   ))))]\n-  \"TARGET_FUSED_MADD\"\n-  \"fnma.d %0 = %F1, %F2, %F3\"\n-  [(set_attr \"itanium_class\" \"fmac\")])\n-\n-;; Official C99 versions of the fmal family of operations.\n (define_insn \"fmaxf4\"\n   [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n \t(fma:XF (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -3305,7 +3169,18 @@\n   \"fma %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"*fmsxf4\"\n+(define_insn \"*fmaxf_trunc_<mode>\"\n+  [(set (match_operand:MODE_SDF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:MODE_SDF\n+\t  (fma:XF\n+\t    (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:XF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n+  \"\"\n+  \"fma<suffix> %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"fmsxf4\"\n   [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n \t(fma:XF (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n \t\t(match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n@@ -3315,15 +3190,37 @@\n   \"fms %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-;; See comment for nfmasf4.\n-(define_insn \"*nfmaxf4\"\n+(define_insn \"*fmsxf_trunc_<mode>\"\n+  [(set (match_operand:MODE_SDF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:MODE_SDF\n+\t  (fma:XF\n+\t    (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (neg:XF\n+\t      (match_operand:XF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))))]\n+  \"\"\n+  \"fms<suffix> %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"fnmaxf4\"\n   [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n \t(fma:XF (neg:XF (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n \t\t(match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n \t\t(match_operand:XF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n   \"\"\n   \"fnma %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"*fnmaxf_trunc_<mode>\"\n+  [(set (match_operand:MODE_SDF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:MODE_SDF\n+\t  (fma:XF\n+\t    (neg:XF (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n+\t    (match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:XF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n+  \"\"\n+  \"fnma<suffix> %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::"}, {"sha": "49d099a4e7bb92b2536a80e57123ddc3155f8d75", "filename": "gcc/config/ia64/ia64.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fia64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.opt?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -178,8 +178,4 @@ msel-sched-dont-check-control-spec\n Target Report Var(mflag_sel_sched_dont_check_control_spec) Init(0)\n Don't generate checks for control speculation in selective scheduling\n \n-mfused-madd\n-Target Report Mask(FUSED_MADD)\n-Enable fused multiply/add and multiply/subtract instructions\n-\n ; This comment is to ensure we retain the blank line above."}, {"sha": "6ab1002efdd9e258d7b3f021b64349e028dab3b8", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 22, "deletions": 100, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -903,106 +903,29 @@\n   \"fpnegabs %0 = %1\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-;; In order to convince combine to merge plus and mult to a useful fpma,\n-;; we need a couple of extra patterns.\n (define_expand \"addv2sf3\"\n-  [(parallel\n-    [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n-\t  (plus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n-\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"\")))\n-     (use (match_dup 3))])]\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+\t(fma:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n+\t\t  (match_dup 3)\n+\t\t  (match_operand:V2SF 2 \"fr_register_operand\" \"\")))]\n   \"\"\n {\n   rtvec v = gen_rtvec (2, CONST1_RTX (SFmode), CONST1_RTX (SFmode));\n   operands[3] = force_reg (V2SFmode, gen_rtx_CONST_VECTOR (V2SFmode, v));\n-  if (!TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_fpma (operands[0], operands[1], operands[3], operands[2]));\n-      DONE;\n-    }\n })\n \n-;; The split condition here could be combine_completed, if we had such.\n-(define_insn_and_split \"*addv2sf3_1\"\n-  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n-\t(plus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n-\t\t   (match_operand:V2SF 2 \"fr_register_operand\" \"f\")))\n-   (use (match_operand:V2SF 3 \"fr_register_operand\" \"f\"))]\n-  \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:V2SF\n-\t  (mult:V2SF (match_dup 1) (match_dup 3))\n-\t  (match_dup 2)))]\n-  \"\")\n-\n-(define_insn_and_split \"*addv2sf3_2\"\n-  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n-\t(plus:V2SF\n-\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n-\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"f\"))\n-\t  (match_operand:V2SF 3 \"fr_register_operand\" \"f\")))\n-    (use (match_operand:V2SF 4 \"\" \"X\"))]\n-  \"\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 0)\n-\t(plus:V2SF\n-\t  (mult:V2SF (match_dup 1) (match_dup 2))\n-\t  (match_dup 3)))]\n-  \"\")\n-\n-;; In order to convince combine to merge minus and mult to a useful fpms,\n-;; we need a couple of extra patterns.\n (define_expand \"subv2sf3\"\n-  [(parallel\n-    [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n-\t  (minus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n-\t\t      (match_operand:V2SF 2 \"fr_register_operand\" \"\")))\n-     (use (match_dup 3))])]\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+\t(fma:V2SF\n+\t  (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n+\t  (match_dup 3)\n+\t  (neg:V2SF (match_operand:V2SF 2 \"fr_register_operand\" \"\"))))]\n   \"\"\n {\n   rtvec v = gen_rtvec (2, CONST1_RTX (SFmode), CONST1_RTX (SFmode));\n   operands[3] = force_reg (V2SFmode, gen_rtx_CONST_VECTOR (V2SFmode, v));\n-  if (!TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_fpms (operands[0], operands[1], operands[3], operands[2]));\n-      DONE;\n-    }\n })\n \n-;; The split condition here could be combine_completed, if we had such.\n-(define_insn_and_split \"*subv2sf3_1\"\n-  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n-\t\t    (match_operand:V2SF 2 \"fr_register_operand\" \"f\")))\n-   (use (match_operand:V2SF 3 \"fr_register_operand\" \"f\"))]\n-  \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(minus:V2SF\n-\t  (mult:V2SF (match_dup 1) (match_dup 3))\n-\t  (match_dup 2)))]\n-  \"\")\n-\n-(define_insn_and_split \"*subv2sf3_2\"\n-  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:V2SF\n-\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n-\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"f\"))\n-\t  (match_operand:V2SF 3 \"fr_register_operand\" \"f\")))\n-    (use (match_operand:V2SF 4 \"\" \"X\"))]\n-  \"\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 0)\n-\t(minus:V2SF\n-\t  (mult:V2SF (match_dup 1) (match_dup 2))\n-\t  (match_dup 3)))]\n-  \"\")\n-\n (define_insn \"mulv2sf3\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n \t(mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n@@ -1011,22 +934,22 @@\n   \"fpmpy %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"fpma\"\n+(define_insn \"fmav2sf4\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n-\t(plus:V2SF\n-\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n-\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"f\"))\n+\t(fma:V2SF\n+\t  (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n+\t  (match_operand:V2SF 2 \"fr_register_operand\" \"f\")\n \t  (match_operand:V2SF 3 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fpma %0 = %1, %2, %3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"fpms\"\n+(define_insn \"fmsv2sf4\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n-\t(minus:V2SF\n-\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n-\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"f\"))\n-\t  (match_operand:V2SF 3 \"fr_register_operand\" \"f\")))]\n+\t(fma:V2SF\n+\t  (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n+\t  (match_operand:V2SF 2 \"fr_register_operand\" \"f\")\n+\t  (neg:V2SF (match_operand:V2SF 3 \"fr_register_operand\" \"f\"))))]\n   \"\"\n   \"fpms %0 = %1, %2, %3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n@@ -1040,12 +963,11 @@\n   \"fpnmpy %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn \"*fpnma\"\n+(define_insn \"fnmav2sf4\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n-\t(plus:V2SF\n-\t  (neg:V2SF\n-\t    (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n-\t\t       (match_operand:V2SF 2 \"fr_register_operand\" \"f\")))\n+\t(fma:V2SF\n+\t  (neg:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\"))\n+\t  (match_operand:V2SF 2 \"fr_register_operand\" \"f\")\n \t  (match_operand:V2SF 3 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fpnma %0 = %1, %2, %3\""}, {"sha": "1e1a04fd5770964771e7910687f8356f7a647a72", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -45,7 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Need .debug_line info generated from gcc and gas.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS | MASK_FUSED_MADD)\n+#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS)\n \n #define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n "}, {"sha": "ac1d7a50799afd584dbccdeacb7cfbbf7686e2a8", "filename": "gcc/config/ia64/vms64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Fconfig%2Fia64%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms64.h?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -36,6 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n #define POINTER_SIZE 64\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS | MASK_FUSED_MADD | MASK_MALLOC64)\n+#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS | MASK_MALLOC64)\n \n #include \"config/vms/vms-crtl-64.h\""}, {"sha": "fd80d061ad509557dcca68396b5e868f4acba095", "filename": "gcc/testsuite/gcc.target/ia64/mno-fused-madd-vect.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd-vect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd-vect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd-vect.c?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile */\n-/* { dg-options \"-O2 -mno-fused-madd -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ffp-contract=off -ftree-vectorize\" } */\n /* { dg-final { scan-assembler \"fpmpy\" } } */\n \n /* fpma and fpms will show in either way because there are no"}, {"sha": "487519addf5642d4092e12784a1584a2452bc39f", "filename": "gcc/testsuite/gcc.target/ia64/mno-fused-madd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd.c?ref=f19f1e5ef02840325ed579ffa0fb8d2ff82f9b35", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile */\n-/* { dg-options \"-O2 -mno-fused-madd\" } */\n+/* { dg-options \"-O2 -ffp-contract=off\" } */\n /* { dg-final { scan-assembler-not \"fma\" } } */\n /* { dg-final { scan-assembler-not \"fms\" } } */\n /* { dg-final { scan-assembler-not \"fnma\" } } */"}]}