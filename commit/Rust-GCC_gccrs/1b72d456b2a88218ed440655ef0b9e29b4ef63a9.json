{"sha": "1b72d456b2a88218ed440655ef0b9e29b4ef63a9", "node_id": "C_kwDOANBUbNoAKDFiNzJkNDU2YjJhODgyMThlZDQ0MDY1NWVmMGI5ZTI5YjRlZjYzYTk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-10T08:03:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-10T09:54:43Z"}, "message": "tree-optimization/104466 - fix cut&paste error perventing alias disambiguation\n\nThe following fixes a cut&paste error in disambiguating using restrict\ninfo.  Instead of using the for this purpose computed rbase1/rbase2\nwhich preserve MEM_REF bases even when they are based on a decl the\ncode performs the check on the bases that drop info for those ...\n\n2022-02-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104466\n\t* tree-ssa-alias.cc (refs_may_alias_p_2): Use rbase1/rbase2\n\tfor the MR_DEPENDENCE checks as intended.\n\n\t* gfortran.dg/pr104466.f90: New testcase.", "tree": {"sha": "b4db4575f2f31e630c0bd867df3b0ea04e07c64a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4db4575f2f31e630c0bd867df3b0ea04e07c64a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b72d456b2a88218ed440655ef0b9e29b4ef63a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b72d456b2a88218ed440655ef0b9e29b4ef63a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b72d456b2a88218ed440655ef0b9e29b4ef63a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b72d456b2a88218ed440655ef0b9e29b4ef63a9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a13d5a1d695465b3c3905b7c8ec888add1a39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a13d5a1d695465b3c3905b7c8ec888add1a39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a13d5a1d695465b3c3905b7c8ec888add1a39e"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "ec0e45866be830b642057e292c6371cbfdb98634", "filename": "gcc/testsuite/gfortran.dg/pr104466.f90", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b72d456b2a88218ed440655ef0b9e29b4ef63a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr104466.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b72d456b2a88218ed440655ef0b9e29b4ef63a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr104466.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr104466.f90?ref=1b72d456b2a88218ed440655ef0b9e29b4ef63a9", "patch": "@@ -0,0 +1,116 @@\n+! { dg-do compile }\n+! { dg-options \"-std=legacy -O2 --param max-inline-insns-auto=0 --param max-inline-insns-single=0 -fdump-tree-lim2-details\" }\n+\n+      MODULE mod_param\n+        integer, parameter :: Ngrids = 1\n+        integer, dimension(Ngrids) :: N\n+        END  \n+      MODULE mod_forces\n+        TYPE T_FORCES\n+          real, pointer :: sustr(:,:)\n+          real, pointer :: svstr(:,:)\n+          real, pointer :: bustr(:,:)\n+          real, pointer :: bvstr(:,:)\n+          real, pointer :: srflx(:,:)\n+          real, pointer :: stflx(:,:,:)\n+        END TYPE \n+        TYPE (T_FORCES), allocatable :: FORCES(:)\n+      END  \n+      MODULE mod_grid\n+        TYPE T_GRID\n+          real, pointer :: f(:,:)\n+          real, pointer :: Hz(:,:,:)\n+          real, pointer :: z_r(:,:,:)\n+          real, pointer :: z_w(:,:,:)\n+        END TYPE \n+        TYPE (T_GRID), allocatable :: GRID(:)\n+      END  \n+      MODULE mod_scalars\n+        USE mod_param\n+      END  \n+      MODULE mod_mixing\n+        TYPE T_MIXING\n+          integer,  pointer :: ksbl(:,:)\n+          real, pointer :: Akv(:,:,:)\n+          real, pointer :: Akt(:,:,:,:)\n+          real, pointer :: alpha(:,:)\n+          real, pointer :: beta(:,:)\n+          real, pointer :: bvf(:,:,:)\n+          real, pointer :: hsbl(:,:)\n+          real, pointer :: ghats(:,:,:,:)\n+        END TYPE \n+        TYPE (T_MIXING), allocatable :: MIXING(:)\n+      END  \n+      MODULE mod_ocean\n+        TYPE T_OCEAN\n+          real, pointer :: pden(:,:,:)\n+          real, pointer :: u(:,:,:,:)\n+          real, pointer :: v(:,:,:,:)\n+        END TYPE \n+        TYPE (T_OCEAN), allocatable :: OCEAN(:)\n+      END  \n+      MODULE lmd_skpp_mod\n+      PRIVATE\n+      PUBLIC  lmd_skpp\n+      CONTAINS\n+      SUBROUTINE lmd_skpp \n+      USE mod_forces\n+      USE mod_grid\n+      USE mod_mixing\n+      USE mod_ocean\n+      integer tile\n+      integer UBi, UBj \n+      CALL lmd_skpp_tile (ng, tile,                                     LBi, UBi, LBj, UBj,                           &\n+     IminS, ImaxS, JminS, JmaxS,                   nstp0,                                     &\n+     GRID(ng) % f,                                 GRID(ng) % Hz,                                &\n+     GRID(ng) % z_r,                               GRID(ng) % z_w,                               &\n+     OCEAN(ng) % u,                                OCEAN(ng) % v,                                &\n+     OCEAN(ng) % pden,                             FORCES(ng) % srflx,                           &\n+     FORCES(ng) % stflx,                           FORCES(ng) % bustr,                           &\n+     FORCES(ng) % bvstr,                           FORCES(ng) % sustr,                           &\n+     FORCES(ng) % svstr,                           MIXING(ng) % alpha,                           &\n+     MIXING(ng) % beta,                            MIXING(ng) % bvf,                             &\n+     MIXING(ng) % ghats,                           MIXING(ng) % Akt,                             &\n+     MIXING(ng) % Akv,                             MIXING(ng) % hsbl,                            MIXING(ng) % ksbl)\n+      END  \n+      SUBROUTINE lmd_skpp_tile (ng, tile,                               LBi, UBi, LBj, UBj,                     &\n+     IminS, ImaxS, JminS, JmaxS,             nstp,                                   f, Hz, z_r, z_w,                        &\n+     u, v, pden,                             srflx, stflx,                           bustr, bvstr, sustr, svstr,             &\n+     alpha,                                  beta,                                   bvf,                                    &\n+     ghats,                                  Akt, Akv, hsbl, ksbl)\n+      USE mod_scalars\n+      integer tile\n+      integer UBi, UBj\n+      real f(:,:)\n+      real Hz(:,:,:)\n+      real z_r(:,:,:)\n+      real z_w(:,:,:)\n+      real u(:,:,:,:)\n+      real v(:,:,:,:)\n+      real pden(:,:,:)\n+      real srflx(:,:)\n+      real stflx(:,:,:)\n+      real alpha(:,:)\n+      real beta(:,:)\n+      real bustr(:,:)\n+      real bvstr(:,:)\n+      real sustr(:,:)\n+      real svstr(:,:)\n+      real bvf(:,:,:)\n+      real Akt(:,:,:,:)\n+      real Akv(:,:,:)\n+      real hsbl(:,:)\n+      integer ksbl(:,:)\n+      real ghats(:,:,:,:)\n+      DO j=Jstr,Jend\n+        DO iik=IstrIstr,z_w(i,j,N(ng))\n+          IF (hsbl0.gt.z_w0) THEN\n+            ksbl=zbl\n+          END IF\n+        END DO\n+      END DO\n+      END  \n+      END \n+\n+! { dg-final { scan-tree-dump-not \": dependent\" \"lim2\" } }\n+! { dg-final { scan-tree-dump \"Moving statement\\[\\n\\r\\]_\\[0-9\\]+ = n\" \"lim2\" } }"}, {"sha": "3e8d2455ba506f8043642ded82aaa2e62e0339a0", "filename": "gcc/tree-ssa-alias.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b72d456b2a88218ed440655ef0b9e29b4ef63a9/gcc%2Ftree-ssa-alias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b72d456b2a88218ed440655ef0b9e29b4ef63a9/gcc%2Ftree-ssa-alias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.cc?ref=1b72d456b2a88218ed440655ef0b9e29b4ef63a9", "patch": "@@ -2420,12 +2420,12 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n \t  rbase2 = TREE_OPERAND (rbase2, 0);\n     }\n   if (rbase1 && rbase2\n-      && (TREE_CODE (base1) == MEM_REF || TREE_CODE (base1) == TARGET_MEM_REF)\n-      && (TREE_CODE (base2) == MEM_REF || TREE_CODE (base2) == TARGET_MEM_REF)\n+      && (TREE_CODE (rbase1) == MEM_REF || TREE_CODE (rbase1) == TARGET_MEM_REF)\n+      && (TREE_CODE (rbase2) == MEM_REF || TREE_CODE (rbase2) == TARGET_MEM_REF)\n       /* If the accesses are in the same restrict clique... */\n-      && MR_DEPENDENCE_CLIQUE (base1) == MR_DEPENDENCE_CLIQUE (base2)\n+      && MR_DEPENDENCE_CLIQUE (rbase1) == MR_DEPENDENCE_CLIQUE (rbase2)\n       /* But based on different pointers they do not alias.  */\n-      && MR_DEPENDENCE_BASE (base1) != MR_DEPENDENCE_BASE (base2))\n+      && MR_DEPENDENCE_BASE (rbase1) != MR_DEPENDENCE_BASE (rbase2))\n     return false;\n \n   ind1_p = (TREE_CODE (base1) == MEM_REF"}]}