{"sha": "0c27222c60b26cd21588576f140abd04f1d8a853", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyNzIyMmM2MGIyNmNkMjE1ODg1NzZmMTQwYWJkMDRmMWQ4YTg1Mw==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2019-09-19T08:14:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:14:52Z"}, "message": "[Ada] Accept concatentation arguments to pragma Annotate\n\nIn cases where pragma Annotate accepts a string literal as an argument,\nwe now also accept a concatenation of string literals.\n\n2019-09-19  Steve Baird  <baird@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Preferred_String_Type): A new function. Given an\n\texpression, determines whether the preference rules defined for\n\tthe third-and-later arguments of pragma Annotate suffice to\n\tdetermine the type of the expression. If so, then the preferred\n\ttype is returned; if not then Empty is returned. Handles\n\tconcatenations.\n\t(Analyze_Pragma): Replace previous code, which dealt only with\n\tstring literals, with calls to the new Preferred_String_Type\n\tfunction, which also handles concatenations.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update\n\tdocumentation for pragma Annotate.\n\t* gnat_rm.texi: Regenerate.\n\ngcc/testsuite/\n\n\t* gnat.dg/annotation1.adb: New testcase.\n\nFrom-SVN: r275957", "tree": {"sha": "644c9e9873f147c02c00846ae01ab92a4e3d0feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/644c9e9873f147c02c00846ae01ab92a4e3d0feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c27222c60b26cd21588576f140abd04f1d8a853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c27222c60b26cd21588576f140abd04f1d8a853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c27222c60b26cd21588576f140abd04f1d8a853", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c27222c60b26cd21588576f140abd04f1d8a853/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3a75a09b8424c192b32a39fa273d27db5b9c039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a75a09b8424c192b32a39fa273d27db5b9c039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a75a09b8424c192b32a39fa273d27db5b9c039"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "4208f958c60af2c3b4efdf2424dd33dc7bf89ef3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c27222c60b26cd21588576f140abd04f1d8a853", "patch": "@@ -1,3 +1,18 @@\n+2019-09-19  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_prag.adb (Preferred_String_Type): A new function. Given an\n+\texpression, determines whether the preference rules defined for\n+\tthe third-and-later arguments of pragma Annotate suffice to\n+\tdetermine the type of the expression. If so, then the preferred\n+\ttype is returned; if not then Empty is returned. Handles\n+\tconcatenations.\n+\t(Analyze_Pragma): Replace previous code, which dealt only with\n+\tstring literals, with calls to the new Preferred_String_Type\n+\tfunction, which also handles concatenations.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update\n+\tdocumentation for pragma Annotate.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_util.adb (Is_Possibly_Unaligned_Slice): Do not return true"}, {"sha": "bf0a9d4619713e8be3835dd77df7b7bcc7661531", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=0c27222c60b26cd21588576f140abd04f1d8a853", "patch": "@@ -455,7 +455,8 @@ not otherwise analyze it. The second optional identifier is also left\n unanalyzed, and by convention is used to control the action of the tool to\n which the annotation is addressed.  The remaining ARG arguments\n can be either string literals or more generally expressions.\n-String literals are assumed to be either of type\n+String literals (and concatenations of string literals) are assumed to be\n+either of type\n ``Standard.String`` or else ``Wide_String`` or ``Wide_Wide_String``\n depending on the character literals they contain.\n All other kinds of arguments are analyzed as expressions, and must be"}, {"sha": "2a4ad37a8ed03afb7ca632cad70b8ef3b7a24352", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0c27222c60b26cd21588576f140abd04f1d8a853", "patch": "@@ -1836,7 +1836,8 @@ not otherwise analyze it. The second optional identifier is also left\n unanalyzed, and by convention is used to control the action of the tool to\n which the annotation is addressed.  The remaining ARG arguments\n can be either string literals or more generally expressions.\n-String literals are assumed to be either of type\n+String literals (and concatenations of string literals) are assumed to be\n+either of type\n @code{Standard.String} or else @code{Wide_String} or @code{Wide_Wide_String}\n depending on the character literals they contain.\n All other kinds of arguments are analyzed as expressions, and must be\n@@ -7706,7 +7707,8 @@ usually supplied automatically by the project manager. A pragma\n Source_File_Name cannot appear after a @ref{ec,,Pragma Source_File_Name_Project}.\n \n For more details on the use of the @code{Source_File_Name} pragma, see the\n-sections on @code{Using Other File Names} and @cite{Alternative File Naming Schemes' in the :title:`GNAT User's Guide}.\n+sections on @cite{Using Other File Names} and @cite{Alternative File Naming Schemes}\n+in the @cite{GNAT User's Guide}.\n \n @node Pragma Source_File_Name_Project,Pragma Source_Reference,Pragma Source_File_Name,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-source-file-name-project}@anchor{ec}@anchor{gnat_rm/implementation_defined_pragmas id41}@anchor{ed}"}, {"sha": "5f7e6e5d842e2f34f886486c4ef9204dfad0c099", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0c27222c60b26cd21588576f140abd04f1d8a853", "patch": "@@ -13085,6 +13085,56 @@ package body Sem_Prag is\n             Expr    : Node_Id;\n             Nam_Arg : Node_Id;\n \n+            --------------------------\n+            -- Inferred_String_Type --\n+            --------------------------\n+\n+            function Preferred_String_Type (Expr : Node_Id) return Entity_Id;\n+            --  Infer the type to use for a string literal or a concatentation\n+            --  of operands whose types can be inferred. For such expressions,\n+            --  returns the \"narrowest\" of the three predefined string types\n+            --  that can represent the characters occuring in the expression.\n+            --  For other expressions, returns Empty.\n+\n+            function Preferred_String_Type (Expr : Node_Id) return Entity_Id is\n+            begin\n+               case Nkind (Expr) is\n+                  when N_String_Literal =>\n+                     if Has_Wide_Wide_Character (Expr) then\n+                        return Standard_Wide_Wide_String;\n+                     elsif Has_Wide_Character (Expr) then\n+                        return Standard_Wide_String;\n+                     else\n+                        return Standard_String;\n+                     end if;\n+\n+                  when N_Op_Concat =>\n+                     declare\n+                        L_Type : constant Entity_Id\n+                          := Preferred_String_Type (Left_Opnd (Expr));\n+                        R_Type : constant Entity_Id\n+                          := Preferred_String_Type (Right_Opnd (Expr));\n+\n+                        Type_Table : constant array (1 .. 4) of Entity_Id\n+                          := (Empty,\n+                              Standard_Wide_Wide_String,\n+                              Standard_Wide_String,\n+                              Standard_String);\n+                     begin\n+                        for Idx in Type_Table'Range loop\n+                           if (L_Type = Type_Table (Idx)) or\n+                              (R_Type = Type_Table (Idx))\n+                           then\n+                              return Type_Table (Idx);\n+                           end if;\n+                        end loop;\n+                        raise Program_Error;\n+                     end;\n+\n+                  when others =>\n+                     return Empty;\n+               end case;\n+            end Preferred_String_Type;\n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (1);\n@@ -13144,18 +13194,12 @@ package body Sem_Prag is\n                   if Is_Entity_Name (Expr) then\n                      null;\n \n-                  --  For string literals, we assume Standard_String as the\n-                  --  type, unless the string contains wide or wide_wide\n-                  --  characters.\n+                  --  For string literals and concatenations of string literals\n+                  --  we assume Standard_String as the type, unless the string\n+                  --  contains wide or wide_wide characters.\n \n-                  elsif Nkind (Expr) = N_String_Literal then\n-                     if Has_Wide_Wide_Character (Expr) then\n-                        Resolve (Expr, Standard_Wide_Wide_String);\n-                     elsif Has_Wide_Character (Expr) then\n-                        Resolve (Expr, Standard_Wide_String);\n-                     else\n-                        Resolve (Expr, Standard_String);\n-                     end if;\n+                  elsif Present (Preferred_String_Type (Expr)) then\n+                     Resolve (Expr, Preferred_String_Type (Expr));\n \n                   elsif Is_Overloaded (Expr) then\n                      Error_Pragma_Arg (\"ambiguous argument for pragma%\", Expr);"}, {"sha": "cac70e28fba8fda0daedd734796b200c3f289f16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c27222c60b26cd21588576f140abd04f1d8a853", "patch": "@@ -1,3 +1,7 @@\n+2019-09-19  Steve Baird  <baird@adacore.com>\n+\n+\t* gnat.dg/annotation1.adb: New testcase.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/inline21.adb, gnat.dg/inline21_g.ads,"}, {"sha": "6ed14dab0f340d7ca2b18e63aa407c17b93dcf35", "filename": "gcc/testsuite/gnat.dg/annotation1.adb", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Ftestsuite%2Fgnat.dg%2Fannotation1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c27222c60b26cd21588576f140abd04f1d8a853/gcc%2Ftestsuite%2Fgnat.dg%2Fannotation1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fannotation1.adb?ref=0c27222c60b26cd21588576f140abd04f1d8a853", "patch": "@@ -0,0 +1,7 @@\n+--  { dg-do compile }\n+\n+procedure Annotation1 is\n+   pragma Annotate (Some_Tool, Some_Action, \"abc\" & \"def\");\n+begin\n+   null;\n+end Annotation1;\n\\ No newline at end of file"}]}