{"sha": "ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyNDMzMGRkZmIxMjA2YTkwY2Y0NGJkZGEyZDk0MWFiYzA1ZDVkMw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito@0xlab.org", "date": "2014-08-24T02:52:46Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2014-08-24T02:52:46Z"}, "message": "Remove CALLER_SAVE_PROFITABLE since it is not used at present.\n\n\t* system.h (CALLER_SAVE_PROFITABLE): Poison.\n\t* regs.h (CALLER_SAVE_PROFITABLE): Remove.\n\t* doc/tm.texi.in (CALLER_SAVE_PROFITABLE): Remove.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r214405", "tree": {"sha": "876929a915d59c4c5cd72a5c23aa427680d8f595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/876929a915d59c4c5cd72a5c23aa427680d8f595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3447fefe74d4f1f1c08698f04123a9c699c47f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3447fefe74d4f1f1c08698f04123a9c699c47f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3447fefe74d4f1f1c08698f04123a9c699c47f71"}], "stats": {"total": 38, "additions": 9, "deletions": 29}, "files": [{"sha": "d0ae1f83a0bb4ebf7cbd93549a4c2564aebe280c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "patch": "@@ -1,3 +1,10 @@\n+2014-08-24  Kito Cheng  <kito@0xlab.org>\n+\n+\t* system.h (CALLER_SAVE_PROFITABLE): Poison.\n+\t* regs.h (CALLER_SAVE_PROFITABLE): Remove.\n+\t* doc/tm.texi.in (CALLER_SAVE_PROFITABLE): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\n 2014-08-24  Kito Cheng  <kito@0xlab.org>\n \n \t* ira.c: Fix typo in comment."}, {"sha": "4d6492b016930dd49ab8bf9c9d213606c3de10a2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "patch": "@@ -4528,16 +4528,6 @@ If you enable it, GCC can save registers around function calls.  This\n makes it possible to use call-clobbered registers to hold variables that\n must live across calls.\n \n-@defmac CALLER_SAVE_PROFITABLE (@var{refs}, @var{calls})\n-A C expression to determine whether it is worthwhile to consider placing\n-a pseudo-register in a call-clobbered hard register and saving and\n-restoring it around each function call.  The expression should be 1 when\n-this is worth doing, and 0 otherwise.\n-\n-If you don't define this macro, a default is used which is good on most\n-machines: @code{4 * @var{calls} < @var{refs}}.\n-@end defmac\n-\n @defmac HARD_REGNO_CALLER_SAVE_MODE (@var{regno}, @var{nregs})\n A C expression specifying which mode is required for saving @var{nregs}\n of a pseudo-register in call-clobbered hard register @var{regno}.  If"}, {"sha": "7a63353b4ea1acc0214d760c0b8460ec605b9433", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "patch": "@@ -3683,16 +3683,6 @@ If you enable it, GCC can save registers around function calls.  This\n makes it possible to use call-clobbered registers to hold variables that\n must live across calls.\n \n-@defmac CALLER_SAVE_PROFITABLE (@var{refs}, @var{calls})\n-A C expression to determine whether it is worthwhile to consider placing\n-a pseudo-register in a call-clobbered hard register and saving and\n-restoring it around each function call.  The expression should be 1 when\n-this is worth doing, and 0 otherwise.\n-\n-If you don't define this macro, a default is used which is good on most\n-machines: @code{4 * @var{calls} < @var{refs}}.\n-@end defmac\n-\n @defmac HARD_REGNO_CALLER_SAVE_MODE (@var{regno}, @var{nregs})\n A C expression specifying which mode is required for saving @var{nregs}\n of a pseudo-register in call-clobbered hard register @var{regno}.  If"}, {"sha": "36e803ddaa60b9a8b283876c9ca67aa0d8c76951", "filename": "gcc/regs.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "patch": "@@ -214,14 +214,6 @@ extern short *reg_renumber;\n \n extern int caller_save_needed;\n \n-/* Predicate to decide whether to give a hard reg to a pseudo which\n-   is referenced REFS times and would need to be saved and restored\n-   around a call CALLS times.  */\n-\n-#ifndef CALLER_SAVE_PROFITABLE\n-#define CALLER_SAVE_PROFITABLE(REFS, CALLS)  (4 * (CALLS) < (REFS))\n-#endif\n-\n /* Select a register mode required for caller save of hard regno REGNO.  */\n #ifndef HARD_REGNO_CALLER_SAVE_MODE\n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE) \\"}, {"sha": "3f2cfa12574d99aee38d9376c1bb2115a8655b55", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef24330ddfb1206a90cf44bdda2d941abc05d5d3/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=ef24330ddfb1206a90cf44bdda2d941abc05d5d3", "patch": "@@ -933,7 +933,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tCONST_DOUBLE_OK_FOR_LETTER_P EXTRA_CONSTRAINT\t\t\t   \\\n \tREG_CLASS_FROM_CONSTRAINT REG_CLASS_FOR_CONSTRAINT\t\t   \\\n \tEXTRA_CONSTRAINT_STR EXTRA_MEMORY_CONSTRAINT\t\t\t   \\\n-\tEXTRA_ADDRESS_CONSTRAINT CONST_DOUBLE_OK_FOR_CONSTRAINT_P\n+\tEXTRA_ADDRESS_CONSTRAINT CONST_DOUBLE_OK_FOR_CONSTRAINT_P\t   \\\n+\tCALLER_SAVE_PROFITABLE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}