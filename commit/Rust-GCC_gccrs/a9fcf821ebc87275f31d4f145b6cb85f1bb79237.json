{"sha": "a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmY2Y4MjFlYmM4NzI3NWYzMWQ0ZjE0NWI2Y2I4NWYxYmI3OTIzNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-01T09:23:41Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-01T09:23:41Z"}, "message": "S/390: Get rid of Y constraint in arithmetic right shift\n patterns.\n\nThe arithmetic shift patterns set also the condition code.  This adds\nmore substitution potential.  Depending on whether the actual result\nor the CC output will be used 3 different variants of each of these\npatterns are needed.  This multiplied with the PLUS and the AND\noperands from the earlier substitutions enables a lot of folding.\n\n2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md (\"*ashrdi3_cc_31\")\n\t(\"*ashrdi3_cconly_31\"\"*ashrdi3_cc_31_and\")\n\t(\"*ashrdi3_cconly_31_and\", \"*ashrdi3_31_and\", \"*ashrdi3_31\"):\n\tMerge insn definitions into ...\n\t(\"*ashrdi3_31<addr_style_op_cc><masked_op_cc><setcc><cconly>\"):\n\tNew pattern definition.\n\t(\"*ashr<mode>3_cc\", \"*ashr<mode>3_cconly\", \"ashr<mode>3\", )\n\t(\"*ashr<mode>3_cc_and\", \"*ashr<mode>3_cconly_and\")\n\t(\"*ashr<mode>3_and\"): Merge insn definitions into ...\n\t(\"*ashr<mode>3<addr_style_op_cc><masked_op_cc><setcc><cconly>\"):\n\tNew pattern definition.\n\t* config/s390/subst.md (\"addr_style_op_cc_subst\")\n\t(\"masked_op_cc_subst\", \"setcc_subst\", \"cconly_subst\"): New\n\tsubstitutions patterns plus attributes.\n\tAdd ashiftrt to SUBST iterator.\n\nFrom-SVN: r233845", "tree": {"sha": "ff149799c4077f2dafd41dbf9b34bbdb627ee769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff149799c4077f2dafd41dbf9b34bbdb627ee769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fcf821ebc87275f31d4f145b6cb85f1bb79237/comments", "author": null, "committer": null, "parents": [{"sha": "adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a"}], "stats": {"total": 261, "additions": 99, "deletions": 162}, "files": [{"sha": "3178ba110e54f7c5c366d381be7221b9612dfaab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fcf821ebc87275f31d4f145b6cb85f1bb79237/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fcf821ebc87275f31d4f145b6cb85f1bb79237/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "patch": "@@ -1,3 +1,21 @@\n+2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md (\"*ashrdi3_cc_31\")\n+\t(\"*ashrdi3_cconly_31\"\"*ashrdi3_cc_31_and\")\n+\t(\"*ashrdi3_cconly_31_and\", \"*ashrdi3_31_and\", \"*ashrdi3_31\"):\n+\tMerge insn definitions into ...\n+\t(\"*ashrdi3_31<addr_style_op_cc><masked_op_cc><setcc><cconly>\"):\n+\tNew pattern definition.\n+\t(\"*ashr<mode>3_cc\", \"*ashr<mode>3_cconly\", \"ashr<mode>3\", )\n+\t(\"*ashr<mode>3_cc_and\", \"*ashr<mode>3_cconly_and\")\n+\t(\"*ashr<mode>3_and\"): Merge insn definitions into ...\n+\t(\"*ashr<mode>3<addr_style_op_cc><masked_op_cc><setcc><cconly>\"):\n+\tNew pattern definition.\n+\t* config/s390/subst.md (\"addr_style_op_cc_subst\")\n+\t(\"masked_op_cc_subst\", \"setcc_subst\", \"cconly_subst\"): New\n+\tsubstitutions patterns plus attributes.\n+\tAdd ashiftrt to SUBST iterator.\n+\n 2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"<shift><mode>3\"): Change predicate of"}, {"sha": "dd91383b11be4cafa64324bb2fa08419668b3450", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 20, "deletions": 161, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fcf821ebc87275f31d4f145b6cb85f1bb79237/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fcf821ebc87275f31d4f145b6cb85f1bb79237/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "patch": "@@ -8448,181 +8448,40 @@\n   [(parallel\n     [(set (match_operand:DSI 0 \"register_operand\" \"\")\n           (ashiftrt:DSI (match_operand:DSI 1 \"register_operand\" \"\")\n-                        (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))\n+                        (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n   \"\")\n \n-(define_insn \"*ashrdi3_cc_31\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n-                 (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"!TARGET_ZARCH && s390_match_ccmode(insn, CCSmode)\"\n-  \"srda\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*ashrdi3_cconly_31\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n-                 (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"!TARGET_ZARCH && s390_match_ccmode(insn, CCSmode)\"\n-  \"srda\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*ashrdi3_31\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                     (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n+; FIXME: The number of alternatives is doubled here to match the fix\n+; number of 2 in the subst pattern for the (clobber (match_scratch...\n+; The right fix should be to support match_scratch in the output\n+; pattern of a define_subst.\n+(define_insn \"*ashrdi3_31<addr_style_op_cc><masked_op_cc><setcc><cconly>\"\n+  [(set (match_operand:DI 0 \"register_operand\"               \"=d, d\")\n+        (ashiftrt:DI (match_operand:DI 1 \"register_operand\"   \"0, 0\")\n+                     (match_operand:SI 2 \"nonmemory_operand\" \"an,an\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"!TARGET_ZARCH\"\n-  \"srda\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-; sra, srag, srak\n-(define_insn \"*ashr<mode>3_cc\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"          \"<d0>,d\")\n-                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\"))\n-                 (const_int 0)))\n-   (set (match_operand:GPR 0 \"register_operand\"                                   \"=d,d\")\n-        (ashiftrt:GPR (match_dup 1) (match_dup 2)))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n   \"@\n-   sra<g>\\t%0,<1>%Y2\n-   sra<gk>\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n-   (set_attr \"atype\"    \"reg,reg\")\n-   (set_attr \"cpu_facility\" \"*,z196\")\n-   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n+   srda\\t%0,<addr_style_op_cc_ops>\n+   srda\\t%0,<addr_style_op_cc_ops>\"\n+  [(set_attr \"op_type\" \"RS\")\n+   (set_attr \"atype\"   \"reg\")])\n \n-; sra, srag, srak\n-(define_insn \"*ashr<mode>3_cconly\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"          \"<d0>,d\")\n-                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\"))\n-                 (const_int 0)))\n-   (clobber (match_scratch:GPR 0                                                  \"=d,d\"))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"@\n-   sra<g>\\t%0,<1>%Y2\n-   sra<gk>\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n-   (set_attr \"atype\"    \"reg,reg\")\n-   (set_attr \"cpu_facility\" \"*,z196\")\n-   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n ; sra, srag\n-(define_insn \"*ashr<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\"                          \"=d,d\")\n-        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"          \"<d0>,d\")\n-                      (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")))\n+(define_insn \"*ashr<mode>3<addr_style_op_cc><masked_op_cc><setcc><cconly>\"\n+  [(set (match_operand:GPR 0 \"register_operand\"                 \"=d, d\")\n+        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>, d\")\n+                      (match_operand:SI 2 \"nonmemory_operand\"   \"an,an\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"@\n-   sra<g>\\t%0,<1>%Y2\n-   sra<gk>\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n-   (set_attr \"atype\"    \"reg,reg\")\n-   (set_attr \"cpu_facility\" \"*,z196\")\n-   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n-\n-\n-; shift pattern with implicit ANDs\n-\n-(define_insn \"*ashrdi3_cc_31_and\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n-\t\t (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n-  \"!TARGET_ZARCH && s390_match_ccmode(insn, CCSmode)\n-   && (INTVAL (operands[3]) & 63) == 63\"\n-  \"srda\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*ashrdi3_cconly_31_and\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n-                 (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"!TARGET_ZARCH && s390_match_ccmode(insn, CCSmode)\n-   && (INTVAL (operands[3]) & 63) == 63\"\n-  \"srda\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*ashrdi3_31_and\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                     (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t     (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"!TARGET_ZARCH && (INTVAL (operands[3]) & 63) == 63\"\n-  \"srda\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-; sra, srag, srak\n-(define_insn \"*ashr<mode>3_cc_and\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"                  \"<d0>,d\")\n-                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")\n-\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"             \"n,n\")))\n-\t\t (const_int 0)))\n-   (set (match_operand:GPR 0 \"register_operand\"                                           \"=d,d\")\n-        (ashiftrt:GPR (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n-  \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n-  \"@\n-   sra<g>\\t%0,<1>%Y2\n-   sra<gk>\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n-   (set_attr \"atype\"    \"reg,reg\")\n-   (set_attr \"cpu_facility\" \"*,z196\")\n-   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n-\n-; sra, srag, srak\n-(define_insn \"*ashr<mode>3_cconly_and\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"                  \"<d0>,d\")\n-                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")\n-\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"             \"n,n\")))\n-                 (const_int 0)))\n-   (clobber (match_scratch:GPR 0                                                          \"=d,d\"))]\n-  \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n-  \"@\n-   sra<g>\\t%0,<1>%Y2\n-   sra<gk>\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n-   (set_attr \"atype\"    \"reg,reg\")\n-   (set_attr \"cpu_facility\" \"*,z196\")\n-   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n-\n-; sra, srag, srak\n-(define_insn \"*ashr<mode>3_and\"\n-  [(set (match_operand:GPR 0 \"register_operand\"                                  \"=d,d\")\n-        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"                  \"<d0>,d\")\n-                      (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")\n-\t\t\t      (match_operand:SI 3 \"const_int_operand\"             \"n,n\"))))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"(INTVAL (operands[3]) & 63) == 63\"\n-  \"@\n-   sra<g>\\t%0,<1>%Y2\n-   sra<gk>\\t%0,%1,%Y2\"\n+   sra<g>\\t%0,<1><addr_style_op_cc_ops>\n+   sra<gk>\\t%0,%1,<addr_style_op_cc_ops>\"\n   [(set_attr \"op_type\"  \"RS<E>,RSY\")\n-   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"atype\"    \"reg\")\n    (set_attr \"cpu_facility\" \"*,z196\")\n    (set_attr \"z10prop\" \"z10_super_E1,*\")])\n "}, {"sha": "3becf2099b6720b721f5624a22f44b4a6087dcec", "filename": "gcc/config/s390/subst.md", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fcf821ebc87275f31d4f145b6cb85f1bb79237/gcc%2Fconfig%2Fs390%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fcf821ebc87275f31d4f145b6cb85f1bb79237/gcc%2Fconfig%2Fs390%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fsubst.md?ref=a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "patch": "@@ -19,7 +19,7 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_code_iterator SUBST [rotate ashift lshiftrt])\n+(define_code_iterator SUBST [rotate ashift lshiftrt ashiftrt])\n \n ; This expands an register/immediate operand to a register+immediate\n ; operand to draw advantage of the address style operand format\n@@ -59,3 +59,63 @@\n ; Use this in the insn name.\n (define_subst_attr \"masked_op\" \"masked_op_subst\" \"\" \"_and\")\n \n+\n+\n+; This is like the addr_style_op substitution above but with a CC clobber.\n+(define_subst \"addr_style_op_cc_subst\"\n+  [(set (match_operand:DSI 0 \"\"           \"\")\n+        (ashiftrt:DSI (match_operand:DSI 1 \"\" \"\")\n+\t\t      (match_operand:SI 2 \"\" \"\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"REG_P (operands[2])\"\n+  [(set (match_dup 0)\n+        (ashiftrt:DSI (match_dup 1)\n+\t\t      (plus:SI (match_dup 2)\n+\t\t\t       (match_operand 3 \"const_int_operand\" \"n\"))))\n+   (clobber (reg:CC CC_REGNUM))])\n+\n+(define_subst_attr \"addr_style_op_cc\"     \"addr_style_op_cc_subst\" \"\" \"_plus\")\n+(define_subst_attr \"addr_style_op_cc_ops\" \"addr_style_op_cc_subst\" \"%Y2\" \"%Y3(%2)\")\n+\n+\n+; This is like the masked_op substitution but with a CC clobber.\n+(define_subst \"masked_op_cc_subst\"\n+  [(set (match_operand:DSI 0 \"\"           \"\")\n+        (ashiftrt:DSI (match_operand:DSI 1 \"\" \"\")\n+\t\t      (match_operand:SI  2 \"\" \"\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"\"\n+  [(set (match_dup 0)\n+        (ashiftrt:DSI (match_dup 1)\n+\t\t      (and:SI (match_dup 2)\n+\t\t\t      (match_operand:SI 3 \"const_int_6bitset_operand\" \"\"))))\n+   (clobber (reg:CC CC_REGNUM))])\n+(define_subst_attr \"masked_op_cc\" \"masked_op_cc_subst\" \"\" \"_and\")\n+\n+\n+; This adds an explicit CC reg set to an operation while keeping the\n+; set for the operation result as well.\n+(define_subst \"setcc_subst\"\n+  [(set (match_operand:DSI 0 \"\"           \"\")\n+        (match_operand:DSI 1 \"\" \"\"))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  [(set (reg CC_REGNUM)\n+\t(compare (match_dup 1) (const_int 0)))\n+   (set (match_dup 0) (match_dup 1))])\n+\n+; Use this in the insn name.\n+(define_subst_attr \"setcc\" \"setcc_subst\" \"\" \"_cc\")\n+\n+; This adds an explicit CC reg set to an operation while dropping the\n+; result of the operation.\n+(define_subst \"cconly_subst\"\n+  [(set (match_operand:DSI 0 \"\"           \"\")\n+        (match_operand:DSI 1 \"\" \"\"))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  [(set (reg CC_REGNUM)\n+\t(compare (match_dup 1) (const_int 0)))\n+   (clobber (match_scratch:DSI 0 \"=d,d\"))])\n+\n+(define_subst_attr \"cconly\" \"cconly_subst\" \"\" \"_cconly\")"}]}