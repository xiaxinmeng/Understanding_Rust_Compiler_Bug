{"sha": "ecb575d09c0ff5314088214c2bb39f1959ad3318", "node_id": "C_kwDOANBUbNoAKGVjYjU3NWQwOWMwZmY1MzE0MDg4MjE0YzJiYjM5ZjE5NTlhZDMzMTg", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2017-05-08T18:28:21Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-12-07T18:00:48Z"}, "message": "gcc: xtensa: allow dynamic configuration\n\nImport include/xtensa-dynconfig.h that defines XCHAL_* macros as fields\nof a structure returned from the xtensa_get_config_v<x> function call.\nDefine that structure and fill it with default parameter values\nspecified in the include/xtensa-config.h.\nDefine reusable function xtensa_load_config that tries to load\nconfiguration and return an address of an exported object from it.\nDefine the function xtensa_get_config_v1 that uses xtensa_load_config\nto get structure xtensa_config_v1, either dynamically configured or the\ndefault.\n\nProvide essential XCHAL_* configuration parameters as __XCHAL_* built-in\nmacros. This way it will be possible to use them in libgcc and libc\nwithout need to patch libgcc or libc source for the specific xtensa core\nconfiguration.\n\ngcc/\n\t* config.gcc (xtensa*-*-*): Add xtensa-dynconfig.o to extra_objs.\n\t* config/xtensa/t-xtensa (TM_H): Add xtensa-dynconfig.h.\n\t(xtensa-dynconfig.o): New rule.\n\t* config/xtensa/xtensa-dynconfig.c: New file.\n\t* config/xtensa/xtensa-protos.h (xtensa_get_config_strings): New\n\tdeclaration.\n\t* config/xtensa/xtensa.h (xtensa-config.h): Replace #include\n\twith xtensa-dynconfig.h\n\t(XCHAL_HAVE_MUL32_HIGH, XCHAL_HAVE_RELEASE_SYNC)\n\t(XCHAL_HAVE_S32C1I, XCHAL_HAVE_THREADPTR)\n\t(XCHAL_HAVE_FP_POSTINC): Drop definitions.\n\t(TARGET_DIV32): Replace with __XCHAL_HAVE_DIV32.\n\t(TARGET_CPU_CPP_BUILTINS): Add new 'builtin' variable and loop\n\tthrough string array returned by the xtensa_get_config_strings\n\tfunction call.\n\ninclude/\n\t* xtensa-dynconfig.h: New file.", "tree": {"sha": "79bd0f681a406b7f465a68f3d0d0741906a8fbb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79bd0f681a406b7f465a68f3d0d0741906a8fbb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecb575d09c0ff5314088214c2bb39f1959ad3318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb575d09c0ff5314088214c2bb39f1959ad3318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb575d09c0ff5314088214c2bb39f1959ad3318", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb575d09c0ff5314088214c2bb39f1959ad3318/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "952c8a1dc6235dc49ab207a7f18f63d2bc97fbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952c8a1dc6235dc49ab207a7f18f63d2bc97fbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952c8a1dc6235dc49ab207a7f18f63d2bc97fbc9"}], "stats": {"total": 644, "additions": 626, "deletions": 18}, "files": [{"sha": "951902338205ed6c8ad2343119af9a214e68bf54", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ecb575d09c0ff5314088214c2bb39f1959ad3318", "patch": "@@ -561,6 +561,7 @@ tic6x-*-*)\n \t;;\n xtensa*-*-*)\n \textra_options=\"${extra_options} fused-madd.opt\"\n+\textra_objs=\"xtensa-dynconfig.o\"\n \t;;\n esac\n "}, {"sha": "4e5b7dec1bcea2853621e182672ef57398c8a591", "filename": "gcc/config/xtensa/t-xtensa", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Ft-xtensa?ref=ecb575d09c0ff5314088214c2bb39f1959ad3318", "patch": "@@ -16,5 +16,11 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-TM_H += $(srcdir)/../include/xtensa-config.h\n+TM_H += $(srcdir)/../include/xtensa-config.h \\\n+\t$(srcdir)/../include/xtensa-dynconfig.h\n $(out_object_file): gt-xtensa.h\n+\n+xtensa-dynconfig.o: $(srcdir)/config/xtensa/xtensa-dynconfig.c \\\n+  $(CONFIG_H) $(SYSTEM_H) $(srcdir)/../include/xtensa-dynconfig.h \\\n+  $(srcdir)/../include/xtensa-config.h\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $<"}, {"sha": "056204ae9463b5448bccd142a7741c1ec6e0980b", "filename": "gcc/config/xtensa/xtensa-dynconfig.c", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Fxtensa-dynconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Fxtensa-dynconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-dynconfig.c?ref=ecb575d09c0ff5314088214c2bb39f1959ad3318", "patch": "@@ -0,0 +1,170 @@\n+/* Xtensa configuration settings loader.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <config.h>\n+#include <system.h>\n+#include <coretypes.h>\n+#include <diagnostic.h>\n+#include <intl.h>\n+#define XTENSA_CONFIG_DEFINITION\n+#include \"xtensa-config.h\"\n+#include \"xtensa-dynconfig.h\"\n+\n+#if defined (HAVE_DLFCN_H)\n+#include <dlfcn.h>\n+#elif defined (_WIN32)\n+#include <windows.h>\n+#define ENABLE_PLUGIN\n+#endif\n+\n+#if !defined (HAVE_DLFCN_H) && defined (_WIN32)\n+\n+#define RTLD_LAZY 0      /* Dummy value.  */\n+\n+static void *\n+dlopen (const char *file, int mode ATTRIBUTE_UNUSED)\n+{\n+  return LoadLibrary (file);\n+}\n+\n+static void *\n+dlsym (void *handle, const char *name)\n+{\n+  return (void *) GetProcAddress ((HMODULE) handle, name);\n+}\n+\n+static int ATTRIBUTE_UNUSED\n+dlclose (void *handle)\n+{\n+  FreeLibrary ((HMODULE) handle);\n+  return 0;\n+}\n+\n+static const char *\n+dlerror (void)\n+{\n+  return _(\"Unable to load DLL.\");\n+}\n+\n+#endif /* !defined (HAVE_DLFCN_H) && defined (_WIN32)  */\n+\n+#define CONFIG_ENV_NAME \"XTENSA_GNU_CONFIG\"\n+\n+const void *xtensa_load_config (const char *name ATTRIBUTE_UNUSED,\n+\t\t\t\tconst void *no_plugin_def,\n+\t\t\t\tconst void *no_name_def ATTRIBUTE_UNUSED)\n+{\n+  static int init;\n+#ifdef ENABLE_PLUGIN\n+  static void *handle;\n+  void *p;\n+\n+  if (!init)\n+    {\n+      const char *path = getenv (CONFIG_ENV_NAME);\n+\n+      init = 1;\n+      if (!path)\n+\treturn no_plugin_def;\n+      handle = dlopen (path, RTLD_LAZY);\n+      if (!handle)\n+\t{\n+\t  fatal_error (input_location,\n+\t\t       _(\"%qs is defined but could not be loaded: %s\"),\n+\t\t       CONFIG_ENV_NAME, dlerror ());\n+\t  exit (FATAL_EXIT_CODE);\n+\t}\n+      if (dlsym (handle, \"plugin_is_GPL_compatible\") == NULL)\n+\t{\n+\t  fatal_error (input_location,\n+\t\t       _(\"%qs plugin is not licensed under a GPL-compatible license\"),\n+\t\t       CONFIG_ENV_NAME);\n+\t  exit (FATAL_EXIT_CODE);\n+\t}\n+    }\n+  else if (!handle)\n+    {\n+      return no_plugin_def;\n+    }\n+\n+  p = dlsym (handle, name);\n+  if (!p)\n+    {\n+      if (no_name_def)\n+\treturn no_name_def;\n+\n+      fatal_error (input_location,\n+\t\t   _(\"%qs is loaded but symbol %qs is not found: %s\"),\n+\t\t   CONFIG_ENV_NAME, name, dlerror ());\n+      exit (FATAL_EXIT_CODE);\n+    }\n+  return p;\n+#else\n+  if (!init)\n+    {\n+      const char *path = getenv (CONFIG_ENV_NAME);\n+\n+      init = 1;\n+      if (path)\n+\t{\n+\t  fatal_error (input_location,\n+\t\t       _(\"%qs is defined but plugin support is disabled\"),\n+\t\t       CONFIG_ENV_NAME);\n+\t  exit (FATAL_EXIT_CODE);\n+\t}\n+    }\n+  return no_plugin_def;\n+#endif\n+}\n+\n+XTENSA_CONFIG_INSTANCE_LIST;\n+\n+#define _STRINGIFY(a) #a\n+#define STRINGIFY(a) _STRINGIFY(a)\n+\n+#undef XTENSA_CONFIG_ENTRY\n+#define XTENSA_CONFIG_ENTRY(a) \"__\" #a \"=\" STRINGIFY(a)\n+\n+static const char * const xtensa_config_strings[] = {\n+    XTENSA_CONFIG_ENTRY_LIST,\n+    NULL,\n+};\n+\n+const struct xtensa_config_v1 *xtensa_get_config_v1 (void)\n+{\n+  static const struct xtensa_config_v1 *config;\n+\n+  if (!config)\n+    config = (const struct xtensa_config_v1 *) xtensa_load_config (\"xtensa_config_v1\",\n+\t\t\t\t\t\t\t\t   &xtensa_config_v1,\n+\t\t\t\t\t\t\t\t   NULL);\n+  return config;\n+}\n+\n+const char * const *xtensa_get_config_strings (void)\n+{\n+  static const char * const *config_strings;\n+\n+  if (!config_strings)\n+    config_strings = (const char * const *) xtensa_load_config (\"xtensa_config_strings\",\n+\t\t\t\t\t\t\t\t&xtensa_config_strings,\n+\t\t\t\t\t\t\t\tNULL);\n+\n+  return config_strings;\n+}"}, {"sha": "91a215e535d74897fbd29dd1cc32474bbefd679c", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=ecb575d09c0ff5314088214c2bb39f1959ad3318", "patch": "@@ -81,5 +81,6 @@ extern void xtensa_expand_epilogue (bool);\n extern void order_regs_for_local_alloc (void);\n extern enum reg_class xtensa_regno_to_class (int regno);\n extern HOST_WIDE_INT xtensa_initial_elimination_offset (int from, int to);\n+extern const char **xtensa_get_config_strings (void);\n \n #endif /* !__XTENSA_PROTOS_H__ */"}, {"sha": "7e193068431c78126a1b90898cdf80fdc350e884", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb575d09c0ff5314088214c2bb39f1959ad3318/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=ecb575d09c0ff5314088214c2bb39f1959ad3318", "patch": "@@ -19,27 +19,12 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* Get Xtensa configuration settings */\n-#include \"xtensa-config.h\"\n+#include \"xtensa-dynconfig.h\"\n \n /* External variables defined in xtensa.cc.  */\n \n /* Macros used in the machine description to select various Xtensa\n    configuration options.  */\n-#ifndef XCHAL_HAVE_MUL32_HIGH\n-#define XCHAL_HAVE_MUL32_HIGH 0\n-#endif\n-#ifndef XCHAL_HAVE_RELEASE_SYNC\n-#define XCHAL_HAVE_RELEASE_SYNC 0\n-#endif\n-#ifndef XCHAL_HAVE_S32C1I\n-#define XCHAL_HAVE_S32C1I 0\n-#endif\n-#ifndef XCHAL_HAVE_THREADPTR\n-#define XCHAL_HAVE_THREADPTR 0\n-#endif\n-#ifndef XCHAL_HAVE_FP_POSTINC\n-#define XCHAL_HAVE_FP_POSTINC 0\n-#endif\n #define TARGET_BIG_ENDIAN\tXCHAL_HAVE_BE\n #define TARGET_DENSITY\t\tXCHAL_HAVE_DENSITY\n #define TARGET_MAC16\t\tXCHAL_HAVE_MAC16\n@@ -76,14 +61,15 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* Define this if the target has no hardware divide instructions.  */\n-#if !TARGET_DIV32\n+#if !__XCHAL_HAVE_DIV32\n #define TARGET_HAS_NO_HW_DIVIDE\n #endif\n \n \f\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n+    const char **builtin;\t\t\t\t\t\t\\\n     builtin_assert (\"cpu=xtensa\");\t\t\t\t\t\\\n     builtin_assert (\"machine=xtensa\");\t\t\t\t\t\\\n     builtin_define (\"__xtensa__\");\t\t\t\t\t\\\n@@ -93,6 +79,8 @@ along with GCC; see the file COPYING3.  If not see\n     builtin_define (TARGET_BIG_ENDIAN ? \"__XTENSA_EB__\" : \"__XTENSA_EL__\"); \\\n     if (!TARGET_HARD_FLOAT)\t\t\t\t\t\t\\\n       builtin_define (\"__XTENSA_SOFT_FLOAT__\");\t\t\t\t\\\n+    for (builtin = xtensa_get_config_strings (); *builtin; ++builtin)\t\\\n+      builtin_define (*builtin);\t\t\t\t\t\\\n   } while (0)\n \n #define CPP_SPEC \" %(subtarget_cpp_spec) \""}, {"sha": "807a8ce61178a4ff803cd92a8846be88c6d67ed6", "filename": "include/xtensa-dynconfig.h", "status": "added", "additions": 442, "deletions": 0, "changes": 442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb575d09c0ff5314088214c2bb39f1959ad3318/include%2Fxtensa-dynconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb575d09c0ff5314088214c2bb39f1959ad3318/include%2Fxtensa-dynconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fxtensa-dynconfig.h?ref=ecb575d09c0ff5314088214c2bb39f1959ad3318", "patch": "@@ -0,0 +1,442 @@\n+/* Xtensa configuration settings.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   This program is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */\n+\n+#ifndef XTENSA_DYNCONFIG_H\n+#define XTENSA_DYNCONFIG_H\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+ * Config versioning.\n+ *\n+ * When new config entries need to be passed through dynconfig\n+ * create new xtensa_config_v<N> structure and put them there.\n+ * Declare new function xtensa_get_config_v<N> (void).\n+ * Define corresponding X*HAL_* macros by accessing xtensa_get_config_v<N> ().\n+ * Define macro XTENSA_CONFIG_V<N>_ENTRY_LIST by listing\n+ * XTENSA_CONFIG_ENTRY for every entry in the new structure.\n+ * Add constant definition for the new xtensa_config_v<N> to the\n+ * XTENSA_CONFIG_INSTANCE_LIST.\n+ * Add XTENSA_CONFIG_V<N>_ENTRY_LIST to the XTENSA_CONFIG_ENTRY_LIST.\n+ *\n+ * On the user side (gcc/binutils/...) add definition for the function\n+ * xtensa_get_config_v<N> (void).\n+ */\n+\n+struct xtensa_config_v1\n+{\n+  int xchal_have_be;\n+  int xchal_have_density;\n+  int xchal_have_const16;\n+  int xchal_have_abs;\n+  int xchal_have_addx;\n+  int xchal_have_l32r;\n+  int xshal_use_absolute_literals;\n+  int xshal_have_text_section_literals;\n+  int xchal_have_mac16;\n+  int xchal_have_mul16;\n+  int xchal_have_mul32;\n+  int xchal_have_mul32_high;\n+  int xchal_have_div32;\n+  int xchal_have_nsa;\n+  int xchal_have_minmax;\n+  int xchal_have_sext;\n+  int xchal_have_loops;\n+  int xchal_have_threadptr;\n+  int xchal_have_release_sync;\n+  int xchal_have_s32c1i;\n+  int xchal_have_booleans;\n+  int xchal_have_fp;\n+  int xchal_have_fp_div;\n+  int xchal_have_fp_recip;\n+  int xchal_have_fp_sqrt;\n+  int xchal_have_fp_rsqrt;\n+  int xchal_have_fp_postinc;\n+  int xchal_have_dfp;\n+  int xchal_have_dfp_div;\n+  int xchal_have_dfp_recip;\n+  int xchal_have_dfp_sqrt;\n+  int xchal_have_dfp_rsqrt;\n+  int xchal_have_windowed;\n+  int xchal_num_aregs;\n+  int xchal_have_wide_branches;\n+  int xchal_have_predicted_branches;\n+  int xchal_icache_size;\n+  int xchal_dcache_size;\n+  int xchal_icache_linesize;\n+  int xchal_dcache_linesize;\n+  int xchal_icache_linewidth;\n+  int xchal_dcache_linewidth;\n+  int xchal_dcache_is_writeback;\n+  int xchal_have_mmu;\n+  int xchal_mmu_min_pte_page_size;\n+  int xchal_have_debug;\n+  int xchal_num_ibreak;\n+  int xchal_num_dbreak;\n+  int xchal_debuglevel;\n+  int xchal_max_instruction_size;\n+  int xchal_inst_fetch_width;\n+  int xshal_abi;\n+  int xthal_abi_windowed;\n+  int xthal_abi_call0;\n+};\n+\n+struct xtensa_config_v2\n+{\n+  int xchal_m_stage;\n+  int xtensa_march_latest;\n+  int xtensa_march_earliest;\n+};\n+\n+typedef struct xtensa_isa_internal_struct xtensa_isa_internal;\n+\n+extern const void *xtensa_load_config (const char *name,\n+\t\t\t\t       const void *no_plugin_def,\n+\t\t\t\t       const void *no_name_def);\n+extern const struct xtensa_config_v1 *xtensa_get_config_v1 (void);\n+extern const struct xtensa_config_v2 *xtensa_get_config_v2 (void);\n+\n+#ifdef XTENSA_CONFIG_DEFINITION\n+\n+#ifndef XCHAL_HAVE_MUL32_HIGH\n+#define XCHAL_HAVE_MUL32_HIGH 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_RELEASE_SYNC\n+#define XCHAL_HAVE_RELEASE_SYNC 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_S32C1I\n+#define XCHAL_HAVE_S32C1I 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_THREADPTR\n+#define XCHAL_HAVE_THREADPTR 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_FP_POSTINC\n+#define XCHAL_HAVE_FP_POSTINC 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_DFP\n+#define XCHAL_HAVE_DFP 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_DFP_DIV\n+#define XCHAL_HAVE_DFP_DIV 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_DFP_RECIP\n+#define XCHAL_HAVE_DFP_RECIP 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_DFP_SQRT\n+#define XCHAL_HAVE_DFP_SQRT 0\n+#endif\n+\n+#ifndef XCHAL_HAVE_DFP_RSQRT\n+#define XCHAL_HAVE_DFP_RSQRT 0\n+#endif\n+\n+#ifndef XSHAL_HAVE_TEXT_SECTION_LITERALS\n+#define XSHAL_HAVE_TEXT_SECTION_LITERALS 0\n+#endif\n+\n+#ifndef XCHAL_MMU_MIN_PTE_PAGE_SIZE\n+#define XCHAL_MMU_MIN_PTE_PAGE_SIZE 1\n+#endif\n+\n+#ifndef XTHAL_ABI_WINDOWED\n+#define XTHAL_ABI_WINDOWED 0\n+#endif\n+\n+#ifndef XTHAL_ABI_CALL0\n+#define XTHAL_ABI_CALL0 1\n+#endif\n+\n+#ifndef XCHAL_M_STAGE\n+#define XCHAL_M_STAGE 0\n+#endif\n+\n+#ifndef XTENSA_MARCH_LATEST\n+#define XTENSA_MARCH_LATEST 0\n+#endif\n+\n+#ifndef XTENSA_MARCH_EARLIEST\n+#define XTENSA_MARCH_EARLIEST 0\n+#endif\n+\n+#define XTENSA_CONFIG_ENTRY(a) a\n+\n+#define XTENSA_CONFIG_V1_ENTRY_LIST \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_BE), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DENSITY), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_CONST16), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_ABS), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_ADDX), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_L32R), \\\n+    XTENSA_CONFIG_ENTRY(XSHAL_USE_ABSOLUTE_LITERALS), \\\n+    XTENSA_CONFIG_ENTRY(XSHAL_HAVE_TEXT_SECTION_LITERALS), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_MAC16), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_MUL16), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_MUL32), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_MUL32_HIGH), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DIV32), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_NSA), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_MINMAX), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_SEXT), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_LOOPS), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_THREADPTR), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_RELEASE_SYNC), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_S32C1I), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_BOOLEANS), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_FP), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_FP_DIV), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_FP_RECIP), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_FP_SQRT), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_FP_RSQRT), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_FP_POSTINC), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DFP), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DFP_DIV), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DFP_RECIP), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DFP_SQRT), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DFP_RSQRT), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_WINDOWED), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_NUM_AREGS), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_WIDE_BRANCHES), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_PREDICTED_BRANCHES), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_ICACHE_SIZE), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_DCACHE_SIZE), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_ICACHE_LINESIZE), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_DCACHE_LINESIZE), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_ICACHE_LINEWIDTH), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_DCACHE_LINEWIDTH), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_DCACHE_IS_WRITEBACK), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_MMU), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_MMU_MIN_PTE_PAGE_SIZE), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_HAVE_DEBUG), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_NUM_IBREAK), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_NUM_DBREAK), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_DEBUGLEVEL), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_MAX_INSTRUCTION_SIZE), \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_INST_FETCH_WIDTH), \\\n+    XTENSA_CONFIG_ENTRY(XSHAL_ABI), \\\n+    XTENSA_CONFIG_ENTRY(XTHAL_ABI_WINDOWED), \\\n+    XTENSA_CONFIG_ENTRY(XTHAL_ABI_CALL0)\n+\n+#define XTENSA_CONFIG_V2_ENTRY_LIST \\\n+    XTENSA_CONFIG_ENTRY(XCHAL_M_STAGE), \\\n+    XTENSA_CONFIG_ENTRY(XTENSA_MARCH_LATEST), \\\n+    XTENSA_CONFIG_ENTRY(XTENSA_MARCH_EARLIEST)\n+\n+#define XTENSA_CONFIG_INSTANCE_LIST \\\n+const struct xtensa_config_v1 xtensa_config_v1 = { \\\n+    XTENSA_CONFIG_V1_ENTRY_LIST, \\\n+}; \\\n+const struct xtensa_config_v2 xtensa_config_v2 = { \\\n+    XTENSA_CONFIG_V2_ENTRY_LIST, \\\n+}\n+\n+#define XTENSA_CONFIG_ENTRY_LIST \\\n+    XTENSA_CONFIG_V1_ENTRY_LIST, \\\n+    XTENSA_CONFIG_V2_ENTRY_LIST\n+\n+#else /* XTENSA_CONFIG_DEFINITION */\n+\n+#undef XCHAL_HAVE_BE\n+#define XCHAL_HAVE_BE\t\t\t(xtensa_get_config_v1 ()->xchal_have_be)\n+\n+#undef XCHAL_HAVE_DENSITY\n+#define XCHAL_HAVE_DENSITY\t\t(xtensa_get_config_v1 ()->xchal_have_density)\n+\n+#undef XCHAL_HAVE_CONST16\n+#define XCHAL_HAVE_CONST16\t\t(xtensa_get_config_v1 ()->xchal_have_const16)\n+\n+#undef XCHAL_HAVE_ABS\n+#define XCHAL_HAVE_ABS\t\t\t(xtensa_get_config_v1 ()->xchal_have_abs)\n+\n+#undef XCHAL_HAVE_ADDX\n+#define XCHAL_HAVE_ADDX\t\t\t(xtensa_get_config_v1 ()->xchal_have_addx)\n+\n+#undef XCHAL_HAVE_L32R\n+#define XCHAL_HAVE_L32R\t\t\t(xtensa_get_config_v1 ()->xchal_have_l32r)\n+\n+#undef XSHAL_USE_ABSOLUTE_LITERALS\n+#define XSHAL_USE_ABSOLUTE_LITERALS\t(xtensa_get_config_v1 ()->xshal_use_absolute_literals)\n+\n+#undef XSHAL_HAVE_TEXT_SECTION_LITERALS\n+#define XSHAL_HAVE_TEXT_SECTION_LITERALS (xtensa_get_config_v1 ()->xshal_have_text_section_literals)\n+\n+#undef XCHAL_HAVE_MAC16\n+#define XCHAL_HAVE_MAC16\t\t(xtensa_get_config_v1 ()->xchal_have_mac16)\n+\n+#undef XCHAL_HAVE_MUL16\n+#define XCHAL_HAVE_MUL16\t\t(xtensa_get_config_v1 ()->xchal_have_mul16)\n+\n+#undef XCHAL_HAVE_MUL32\n+#define XCHAL_HAVE_MUL32\t\t(xtensa_get_config_v1 ()->xchal_have_mul32)\n+\n+#undef XCHAL_HAVE_MUL32_HIGH\n+#define XCHAL_HAVE_MUL32_HIGH\t\t(xtensa_get_config_v1 ()->xchal_have_mul32_high)\n+\n+#undef XCHAL_HAVE_DIV32\n+#define XCHAL_HAVE_DIV32\t\t(xtensa_get_config_v1 ()->xchal_have_div32)\n+\n+#undef XCHAL_HAVE_NSA\n+#define XCHAL_HAVE_NSA\t\t\t(xtensa_get_config_v1 ()->xchal_have_nsa)\n+\n+#undef XCHAL_HAVE_MINMAX\n+#define XCHAL_HAVE_MINMAX\t\t(xtensa_get_config_v1 ()->xchal_have_minmax)\n+\n+#undef XCHAL_HAVE_SEXT\n+#define XCHAL_HAVE_SEXT\t\t\t(xtensa_get_config_v1 ()->xchal_have_sext)\n+\n+#undef XCHAL_HAVE_LOOPS\n+#define XCHAL_HAVE_LOOPS\t\t(xtensa_get_config_v1 ()->xchal_have_loops)\n+\n+#undef XCHAL_HAVE_THREADPTR\n+#define XCHAL_HAVE_THREADPTR\t\t(xtensa_get_config_v1 ()->xchal_have_threadptr)\n+\n+#undef XCHAL_HAVE_RELEASE_SYNC\n+#define XCHAL_HAVE_RELEASE_SYNC\t\t(xtensa_get_config_v1 ()->xchal_have_release_sync)\n+\n+#undef XCHAL_HAVE_S32C1I\n+#define XCHAL_HAVE_S32C1I\t\t(xtensa_get_config_v1 ()->xchal_have_s32c1i)\n+\n+#undef XCHAL_HAVE_BOOLEANS\n+#define XCHAL_HAVE_BOOLEANS\t\t(xtensa_get_config_v1 ()->xchal_have_booleans)\n+\n+#undef XCHAL_HAVE_FP\n+#define XCHAL_HAVE_FP\t\t\t(xtensa_get_config_v1 ()->xchal_have_fp)\n+\n+#undef XCHAL_HAVE_FP_DIV\n+#define XCHAL_HAVE_FP_DIV\t\t(xtensa_get_config_v1 ()->xchal_have_fp_div)\n+\n+#undef XCHAL_HAVE_FP_RECIP\n+#define XCHAL_HAVE_FP_RECIP\t\t(xtensa_get_config_v1 ()->xchal_have_fp_recip)\n+\n+#undef XCHAL_HAVE_FP_SQRT\n+#define XCHAL_HAVE_FP_SQRT\t\t(xtensa_get_config_v1 ()->xchal_have_fp_sqrt)\n+\n+#undef XCHAL_HAVE_FP_RSQRT\n+#define XCHAL_HAVE_FP_RSQRT\t\t(xtensa_get_config_v1 ()->xchal_have_fp_rsqrt)\n+\n+#undef XCHAL_HAVE_FP_POSTINC\n+#define XCHAL_HAVE_FP_POSTINC\t\t(xtensa_get_config_v1 ()->xchal_have_fp_postinc)\n+\n+#undef XCHAL_HAVE_DFP\n+#define XCHAL_HAVE_DFP\t\t\t(xtensa_get_config_v1 ()->xchal_have_dfp)\n+\n+#undef XCHAL_HAVE_DFP_DIV\n+#define XCHAL_HAVE_DFP_DIV\t\t(xtensa_get_config_v1 ()->xchal_have_dfp_div)\n+\n+#undef XCHAL_HAVE_DFP_RECIP\n+#define XCHAL_HAVE_DFP_RECIP\t\t(xtensa_get_config_v1 ()->xchal_have_dfp_recip)\n+\n+#undef XCHAL_HAVE_DFP_SQRT\n+#define XCHAL_HAVE_DFP_SQRT\t\t(xtensa_get_config_v1 ()->xchal_have_dfp_sqrt)\n+\n+#undef XCHAL_HAVE_DFP_RSQRT\n+#define XCHAL_HAVE_DFP_RSQRT\t\t(xtensa_get_config_v1 ()->xchal_have_dfp_rsqrt)\n+\n+#undef XCHAL_HAVE_WINDOWED\n+#define XCHAL_HAVE_WINDOWED\t\t(xtensa_get_config_v1 ()->xchal_have_windowed)\n+\n+#undef XCHAL_NUM_AREGS\n+#define XCHAL_NUM_AREGS\t\t\t(xtensa_get_config_v1 ()->xchal_num_aregs)\n+\n+#undef XCHAL_HAVE_WIDE_BRANCHES\n+#define XCHAL_HAVE_WIDE_BRANCHES\t(xtensa_get_config_v1 ()->xchal_have_wide_branches)\n+\n+#undef XCHAL_HAVE_PREDICTED_BRANCHES\n+#define XCHAL_HAVE_PREDICTED_BRANCHES\t(xtensa_get_config_v1 ()->xchal_have_predicted_branches)\n+\n+\n+#undef XCHAL_ICACHE_SIZE\n+#define XCHAL_ICACHE_SIZE\t\t(xtensa_get_config_v1 ()->xchal_icache_size)\n+\n+#undef XCHAL_DCACHE_SIZE\n+#define XCHAL_DCACHE_SIZE\t\t(xtensa_get_config_v1 ()->xchal_dcache_size)\n+\n+#undef XCHAL_ICACHE_LINESIZE\n+#define XCHAL_ICACHE_LINESIZE\t\t(xtensa_get_config_v1 ()->xchal_icache_linesize)\n+\n+#undef XCHAL_DCACHE_LINESIZE\n+#define XCHAL_DCACHE_LINESIZE\t\t(xtensa_get_config_v1 ()->xchal_dcache_linesize)\n+\n+#undef XCHAL_ICACHE_LINEWIDTH\n+#define XCHAL_ICACHE_LINEWIDTH\t\t(xtensa_get_config_v1 ()->xchal_icache_linewidth)\n+\n+#undef XCHAL_DCACHE_LINEWIDTH\n+#define XCHAL_DCACHE_LINEWIDTH\t\t(xtensa_get_config_v1 ()->xchal_dcache_linewidth)\n+\n+#undef XCHAL_DCACHE_IS_WRITEBACK\n+#define XCHAL_DCACHE_IS_WRITEBACK\t(xtensa_get_config_v1 ()->xchal_dcache_is_writeback)\n+\n+\n+#undef XCHAL_HAVE_MMU\n+#define XCHAL_HAVE_MMU\t\t\t(xtensa_get_config_v1 ()->xchal_have_mmu)\n+\n+#undef XCHAL_MMU_MIN_PTE_PAGE_SIZE\n+#define XCHAL_MMU_MIN_PTE_PAGE_SIZE\t(xtensa_get_config_v1 ()->xchal_mmu_min_pte_page_size)\n+\n+\n+#undef XCHAL_HAVE_DEBUG\n+#define XCHAL_HAVE_DEBUG\t\t(xtensa_get_config_v1 ()->xchal_have_debug)\n+\n+#undef XCHAL_NUM_IBREAK\n+#define XCHAL_NUM_IBREAK\t\t(xtensa_get_config_v1 ()->xchal_num_ibreak)\n+\n+#undef XCHAL_NUM_DBREAK\n+#define XCHAL_NUM_DBREAK\t\t(xtensa_get_config_v1 ()->xchal_num_dbreak)\n+\n+#undef XCHAL_DEBUGLEVEL\n+#define XCHAL_DEBUGLEVEL\t\t(xtensa_get_config_v1 ()->xchal_debuglevel)\n+\n+\n+#undef XCHAL_MAX_INSTRUCTION_SIZE\n+#define XCHAL_MAX_INSTRUCTION_SIZE\t(xtensa_get_config_v1 ()->xchal_max_instruction_size)\n+\n+#undef XCHAL_INST_FETCH_WIDTH\n+#define XCHAL_INST_FETCH_WIDTH\t\t(xtensa_get_config_v1 ()->xchal_inst_fetch_width)\n+\n+\n+#undef XSHAL_ABI\n+#undef XTHAL_ABI_WINDOWED\n+#undef XTHAL_ABI_CALL0\n+#define XSHAL_ABI\t\t\t(xtensa_get_config_v1 ()->xshal_abi)\n+#define XTHAL_ABI_WINDOWED\t\t(xtensa_get_config_v1 ()->xthal_abi_windowed)\n+#define XTHAL_ABI_CALL0\t\t\t(xtensa_get_config_v1 ()->xthal_abi_call0)\n+\n+\n+#undef XCHAL_M_STAGE\n+#define XCHAL_M_STAGE\t\t\t(xtensa_get_config_v2 ()->xchal_m_stage)\n+\n+#undef XTENSA_MARCH_LATEST\n+#define XTENSA_MARCH_LATEST\t\t(xtensa_get_config_v2 ()->xtensa_march_latest)\n+\n+#undef XTENSA_MARCH_EARLIEST\n+#define XTENSA_MARCH_EARLIEST\t\t(xtensa_get_config_v2 ()->xtensa_march_earliest)\n+\n+#endif /* XTENSA_CONFIG_DEFINITION */\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+#endif /* !XTENSA_DYNCONFIG_H */"}]}