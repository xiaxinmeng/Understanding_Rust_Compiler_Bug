{"sha": "01ca36af914385acfc864adfae6923768581888a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjYTM2YWY5MTQzODVhY2ZjODY0YWRmYWU2OTIzNzY4NTgxODg4YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-12-11T08:15:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-12-11T08:15:37Z"}, "message": "xvasprintf.c: New file.\n\n\t* xvasprintf.c: New file.\n\t* vprintf-support.h: Likewise.\n\t* vprintf-support.c: Likewise.\n\t* Makefile.in (CFILES): Add vprintf-support.c, xvasprintf.c.\n\t(REQUIRED_OFILES): Add vprintf-support.$(objext), xvasprintf.$(objext).\n\t(vprintf-support.$(objext), xvasprintf.$(objext)): New targets.\n\t(vasprintf.$(objext)): Depend on $(srcdir)/vprintf-support.h.\n\t* functions.texi: Regenerate.\n\t* vasprintf.c (int_vasprintf): Use libiberty_vprintf_buffer_size.\n\ninclude/ChangeLog:\n\n\t* libiberty.h (xvasprintf): Declare.\n\nlibcpp/ChangeLog:\n\n\t* directives.c (cpp_define_formatted): Use xvasprintf.\n\n\nCo-Authored-By: Ben Elliston <bje@au.ibm.com>\nCo-Authored-By: Manuel L\u00f3pez-Ib\u00e1\u00f1ez <manu@gcc.gnu.org>\n\nFrom-SVN: r218618", "tree": {"sha": "73160bf616558a6ddfc1ac73519216a81c9d0e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73160bf616558a6ddfc1ac73519216a81c9d0e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ca36af914385acfc864adfae6923768581888a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ca36af914385acfc864adfae6923768581888a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ca36af914385acfc864adfae6923768581888a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ca36af914385acfc864adfae6923768581888a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c168eab92cc42d3c995cc0a1188e1554ebbcd63a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c168eab92cc42d3c995cc0a1188e1554ebbcd63a"}], "stats": {"total": 358, "additions": 272, "deletions": 86}, "files": [{"sha": "1d5f7013321a9d0257d2a2332aae1c5d100ab9d3", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -1,3 +1,9 @@\n+2014-12-11  Uros Bizjak  <ubizjak@gmail.com>\n+            Ben Elliston  <bje@au.ibm.com>\n+            Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* libiberty.h (xvasprintf): Declare.\n+\n 2014-12-09  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* hashtab.h, splay-tree.h: Remove GTY markers."}, {"sha": "b9694f0f093843df12dca29f8e98b7d4bfb6bf41", "filename": "include/libiberty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -636,6 +636,11 @@ extern int asprintf (char **, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern int vasprintf (char **, const char *, va_list) ATTRIBUTE_PRINTF(2,0);\n #endif\n \n+/* Like vasprintf but allocates memory without fail. This works like\n+   xmalloc.  */\n+\n+extern char *xvasprintf (const char *, va_list) ATTRIBUTE_MALLOC ATTRIBUTE_PRINTF(1,0);\n+\n #if defined(HAVE_DECL_SNPRINTF) && !HAVE_DECL_SNPRINTF\n /* Like sprintf but prints at most N characters.  */\n extern int snprintf (char *, size_t, const char *, ...) ATTRIBUTE_PRINTF_3;"}, {"sha": "df71ac2597aa5fb9d9350e8477f94e119ed5e78c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -1,3 +1,7 @@\n+2014-12-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* directives.c (cpp_define_formatted): Use xvasprintf.\n+\n 2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* line-map.c (linemap_position_for_loc_and_offset): Add new"}, {"sha": "c9be4122511bc0db2a67ac820c75bbaa0707c22f", "filename": "libcpp/directives.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -2404,11 +2404,11 @@ cpp_define (cpp_reader *pfile, const char *str)\n void\n cpp_define_formatted (cpp_reader *pfile, const char *fmt, ...)\n {\n-  char *ptr = NULL;\n+  char *ptr;\n \n   va_list ap;\n   va_start (ap, fmt);\n-  vasprintf (&ptr, fmt, ap);\n+  ptr = xvasprintf (fmt, ap);\n   va_end (ap);\n \n   cpp_define (pfile, ptr);"}, {"sha": "e4a8ce81b2584e7215486eef519f13e7fde15572", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -1,3 +1,17 @@\n+2014-12-11  Uros Bizjak  <ubizjak@gmail.com>\n+            Ben Elliston  <bje@au.ibm.com>\n+            Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* xvasprintf.c: New file.\n+\t* vprintf-support.h: Likewise.\n+\t* vprintf-support.c: Likewise.\n+\t* Makefile.in (CFILES): Add vprintf-support.c, xvasprintf.c.\n+\t(REQUIRED_OFILES): Add vprintf-support.$(objext), xvasprintf.$(objext).\n+\t(vprintf-support.$(objext), xvasprintf.$(objext)): New targets.\n+\t(vasprintf.$(objext)): Depend on $(srcdir)/vprintf-support.h.\n+\t* functions.texi: Regenerate.\n+\t* vasprintf.c (int_vasprintf): Use libiberty_vprintf_buffer_size.\n+\n 2014-11-22  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR other/63694"}, {"sha": "e7e17af226cd77d7a4ff0d0fe36ae7bacb4bd2ee", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -155,10 +155,11 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \t strtoll.c strtoul.c strtoull.c strndup.c strnlen.c             \\\n \t strverscmp.c timeval-utils.c tmpnam.c\t\t\t\t\\\n \tunlink-if-ordinary.c\t\t\t\t\t\t\\\n-\tvasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c\t\\\n+\tvasprintf.c vfork.c vfprintf.c vprintf.c vprintf-support.c\t\\\n+\t vsnprintf.c vsprintf.c\t\t\t\t\t\t\\\n \twaitpid.c\t\t\t\t\t\t\t\\\n \txatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c\t\\\n-\t xstrndup.c\n+\t xstrndup.c xvasprintf.c\n \n # These are always included in the library.  The first four are listed\n # first and by compile time to optimize parallel builds.\n@@ -180,7 +181,7 @@ REQUIRED_OFILES =\t\t\t\t\t\t\t\\\n \t./obstack.$(objext)\t\t\t\t\t\t\\\n \t./partition.$(objext) ./pexecute.$(objext) ./physmem.$(objext)\t\\\n \t./pex-common.$(objext) ./pex-one.$(objext)\t\t\t\\\n-\t./@pexecute@.$(objext)\t\t\t\t\t\t\\\n+\t./@pexecute@.$(objext) ./vprintf-support.$(objext)\t\t\\\n \t./safe-ctype.$(objext)\t\t\t\t\t\t\\\n \t./simple-object.$(objext) ./simple-object-coff.$(objext)\t\\\n \t./simple-object-elf.$(objext) ./simple-object-mach-o.$(objext)\t\\\n@@ -191,7 +192,7 @@ REQUIRED_OFILES =\t\t\t\t\t\t\t\\\n \t./timeval-utils.$(objext) ./unlink-if-ordinary.$(objext)\t\\\n \t./xatexit.$(objext) ./xexit.$(objext) ./xmalloc.$(objext)\t\\\n \t./xmemdup.$(objext) ./xstrdup.$(objext) ./xstrerror.$(objext)\t\\\n-\t./xstrndup.$(objext)\n+\t./xstrndup.$(objext) ./xvasprintf.$(objext)\n \n # These are all the objects that configure may add to the library via\n # $funcs or EXTRA_OFILES.  This list exists here only for \"make\n@@ -1543,7 +1544,7 @@ $(CONFIGURED_OFILES): stamp-picdir stamp-noasandir\n \t$(COMPILE.c) $(srcdir)/unlink-if-ordinary.c $(OUTPUT_OPTION)\n \n ./vasprintf.$(objext): $(srcdir)/vasprintf.c config.h $(INCDIR)/ansidecl.h \\\n-\t$(INCDIR)/libiberty.h\n+\t$(INCDIR)/libiberty.h $(srcdir)/vprintf-support.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/vasprintf.c -o pic/$@; \\\n \telse true; fi\n@@ -1570,6 +1571,16 @@ $(CONFIGURED_OFILES): stamp-picdir stamp-noasandir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/vfprintf.c $(OUTPUT_OPTION)\n \n+./vprintf-support.$(objext): $(srcdir)/vprintf-support.c config.h \\\n+\t$(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/vprintf-support.c -o pic/$@; \\\n+\telse true; fi\n+\tif [ x\"$(NOASANFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(NOASANFLAG) $(srcdir)/vprintf-support.c -o noasan/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/vprintf-support.c $(OUTPUT_OPTION)\n+\n ./vprintf.$(objext): $(srcdir)/vprintf.c $(INCDIR)/ansidecl.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/vprintf.c -o pic/$@; \\\n@@ -1677,3 +1688,12 @@ $(CONFIGURED_OFILES): stamp-picdir stamp-noasandir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/xstrndup.c $(OUTPUT_OPTION)\n \n+./xvasprintf.$(objext): $(srcdir)/xvasprintf.c config.h $(INCDIR)/ansidecl.h \\\n+\t$(INCDIR)/libiberty.h $(srcdir)/vprintf-support.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/xvasprintf.c -o pic/$@; \\\n+\telse true; fi\n+\tif [ x\"$(NOASANFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(NOASANFLAG) $(srcdir)/xvasprintf.c -o noasan/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/xvasprintf.c $(OUTPUT_OPTION)"}, {"sha": "39064b4166ce862a3601bbf970603ba393230ad3", "filename": "libiberty/functions.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -2022,4 +2022,13 @@ always NUL terminated.\n \n @end deftypefn\n \n+@c xvasprintf.c:38\n+@deftypefn Replacement char* xvasprintf (const char *@var{format}, va_list @var{args})\n+\n+Print to allocated string without fail.  If @code{xvasprintf} fails,\n+this will print a message to @code{stderr} (using the name set by\n+@code{xmalloc_set_program_name}, if any) and then call @code{xexit}.\n+\n+@end deftypefn\n+\n "}, {"sha": "6ffe2dd7516b379c2a9625904a833e107a7a5813", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 5, "deletions": 79, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -14,9 +14,9 @@ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Library General Public License for more details.\n \n You should have received a copy of the GNU Library General Public\n-License along with libiberty; see the file COPYING.LIB.  If\n-not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n+License along with libiberty; see the file COPYING.LIB.  If not, write\n+to the Free Software Foundation, Inc., 51 Franklin Street - Fifth\n+Floor, Boston, MA 02110-1301, USA.  */\n \n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n@@ -33,10 +33,10 @@ Boston, MA 02110-1301, USA.  */\n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n #else\n-extern unsigned long strtoul ();\n extern PTR malloc ();\n #endif\n #include \"libiberty.h\"\n+#include \"vprintf-support.h\"\n \n #ifdef TEST\n int global_total_width;\n@@ -64,81 +64,7 @@ static int int_vasprintf (char **, const char *, va_list);\n static int\n int_vasprintf (char **result, const char *format, va_list args)\n {\n-  const char *p = format;\n-  /* Add one to make sure that it is never zero, which might cause malloc\n-     to return NULL.  */\n-  int total_width = strlen (format) + 1;\n-  va_list ap;\n-\n-#ifdef va_copy\n-  va_copy (ap, args);\n-#else\n-  memcpy ((PTR) &ap, (PTR) &args, sizeof (va_list));\n-#endif\n-\n-  while (*p != '\\0')\n-    {\n-      if (*p++ == '%')\n-\t{\n-\t  while (strchr (\"-+ #0\", *p))\n-\t    ++p;\n-\t  if (*p == '*')\n-\t    {\n-\t      ++p;\n-\t      total_width += abs (va_arg (ap, int));\n-\t    }\n-\t  else\n-\t    total_width += strtoul (p, (char **) &p, 10);\n-\t  if (*p == '.')\n-\t    {\n-\t      ++p;\n-\t      if (*p == '*')\n-\t\t{\n-\t\t  ++p;\n-\t\t  total_width += abs (va_arg (ap, int));\n-\t\t}\n-\t      else\n-\t      total_width += strtoul (p, (char **) &p, 10);\n-\t    }\n-\t  while (strchr (\"hlL\", *p))\n-\t    ++p;\n-\t  /* Should be big enough for any format specifier except %s and floats.  */\n-\t  total_width += 30;\n-\t  switch (*p)\n-\t    {\n-\t    case 'd':\n-\t    case 'i':\n-\t    case 'o':\n-\t    case 'u':\n-\t    case 'x':\n-\t    case 'X':\n-\t    case 'c':\n-\t      (void) va_arg (ap, int);\n-\t      break;\n-\t    case 'f':\n-\t    case 'e':\n-\t    case 'E':\n-\t    case 'g':\n-\t    case 'G':\n-\t      (void) va_arg (ap, double);\n-\t      /* Since an ieee double can have an exponent of 307, we'll\n-\t\t make the buffer wide enough to cover the gross case. */\n-\t      total_width += 307;\n-\t      break;\n-\t    case 's':\n-\t      total_width += strlen (va_arg (ap, char *));\n-\t      break;\n-\t    case 'p':\n-\t    case 'n':\n-\t      (void) va_arg (ap, char *);\n-\t      break;\n-\t    }\n-\t  p++;\n-\t}\n-    }\n-#ifdef va_copy\n-  va_end (ap);\n-#endif\n+  int total_width = libiberty_vprintf_buffer_size (format, args);\n #ifdef TEST\n   global_total_width = total_width;\n #endif"}, {"sha": "171232f1b0f3615998cc03ae0df87ba6cf80ee00", "filename": "libiberty/vprintf-support.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fvprintf-support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fvprintf-support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvprintf-support.c?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -0,0 +1,119 @@\n+/* Estimate the length of the string generated by a vprintf-like\n+   function.  Used by vasprintf and xvasprintf.\n+   Copyright (C) 1994, 2003, 2011, 2013, 2014 Free Software Foundation, Inc.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If not, write\n+to the Free Software Foundation, Inc., 51 Franklin Street - Fifth\n+Floor, Boston, MA 02110-1301, USA.  */\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include <ansidecl.h>\n+#include <stdarg.h>\n+#if !defined (va_copy) && defined (__va_copy)\n+# define va_copy(d,s)  __va_copy((d),(s))\n+#endif\n+#include <stdio.h>\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#else\n+extern unsigned long strtoul ();\n+#endif\n+#include \"libiberty.h\"\n+\n+int\n+libiberty_vprintf_buffer_size (const char *format, va_list args)\n+{\n+  const char *p = format;\n+  /* Add one to make sure that it is never zero, which might cause malloc\n+     to return NULL.  */\n+  int total_width = strlen (format) + 1;\n+  va_list ap;\n+\n+#ifdef va_copy\n+  va_copy (ap, args);\n+#else\n+  memcpy ((PTR) &ap, (PTR) &args, sizeof (va_list));\n+#endif\n+\n+  while (*p != '\\0')\n+    {\n+      if (*p++ == '%')\n+\t{\n+\t  while (strchr (\"-+ #0\", *p))\n+\t    ++p;\n+\t  if (*p == '*')\n+\t    {\n+\t      ++p;\n+\t      total_width += abs (va_arg (ap, int));\n+\t    }\n+\t  else\n+\t    total_width += strtoul (p, (char **) &p, 10);\n+\t  if (*p == '.')\n+\t    {\n+\t      ++p;\n+\t      if (*p == '*')\n+\t\t{\n+\t\t  ++p;\n+\t\t  total_width += abs (va_arg (ap, int));\n+\t\t}\n+\t      else\n+\t      total_width += strtoul (p, (char **) &p, 10);\n+\t    }\n+\t  while (strchr (\"hlL\", *p))\n+\t    ++p;\n+\t  /* Should be big enough for any format specifier except %s and floats.  */\n+\t  total_width += 30;\n+\t  switch (*p)\n+\t    {\n+\t    case 'd':\n+\t    case 'i':\n+\t    case 'o':\n+\t    case 'u':\n+\t    case 'x':\n+\t    case 'X':\n+\t    case 'c':\n+\t      (void) va_arg (ap, int);\n+\t      break;\n+\t    case 'f':\n+\t    case 'e':\n+\t    case 'E':\n+\t    case 'g':\n+\t    case 'G':\n+\t      (void) va_arg (ap, double);\n+\t      /* Since an ieee double can have an exponent of 307, we'll\n+\t\t make the buffer wide enough to cover the gross case. */\n+\t      total_width += 307;\n+\t      break;\n+\t    case 's':\n+\t      total_width += strlen (va_arg (ap, char *));\n+\t      break;\n+\t    case 'p':\n+\t    case 'n':\n+\t      (void) va_arg (ap, char *);\n+\t      break;\n+\t    }\n+\t  p++;\n+\t}\n+    }\n+#ifdef va_copy\n+  va_end (ap);\n+#endif\n+  return total_width;\n+}"}, {"sha": "9d2680aac89109dab69516a701589d62c68f4323", "filename": "libiberty/vprintf-support.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fvprintf-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fvprintf-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvprintf-support.h?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -0,0 +1,22 @@\n+/* Estimate the length of the string generated by a vprintf-like\n+   function.  Use by vasprintf and xvasprintf.\n+   Copyright (C) 1994, 2003, 2011, 2013, 2014 Free Software Foundation, Inc.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If not, write\n+to the Free Software Foundation, Inc., 51 Franklin Street - Fifth\n+Floor, Boston, MA 02110-1301, USA.  */\n+\n+\n+extern int libiberty_vprintf_buffer_size (const char *, va_list);"}, {"sha": "9e9a9d39e11d97af88379420e2d278d5f57da3cb", "filename": "libiberty/xvasprintf.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fxvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca36af914385acfc864adfae6923768581888a/libiberty%2Fxvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxvasprintf.c?ref=01ca36af914385acfc864adfae6923768581888a", "patch": "@@ -0,0 +1,61 @@\n+/* Implement the xvasprintf function.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by Manuel Lopez-Ibanez.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If not, write\n+to the Free Software Foundation, Inc., 51 Franklin Street - Fifth\n+Floor, Boston, MA 02110-1301, USA.  */\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include <ansidecl.h>\n+#include <stdarg.h>\n+#if !defined (va_copy) && defined (__va_copy)\n+# define va_copy(d,s)  __va_copy((d),(s))\n+#endif\n+#include <stdio.h>\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+#include \"libiberty.h\"\n+#include \"vprintf-support.h\"\n+\n+/*\n+\n+@deftypefn Replacement char* xvasprintf (const char *@var{format}, va_list @var{args})\n+\n+Print to allocated string without fail.  If @code{xvasprintf} fails,\n+this will print a message to @code{stderr} (using the name set by\n+@code{xmalloc_set_program_name}, if any) and then call @code{xexit}.\n+\n+@end deftypefn\n+\n+*/\n+\n+char *\n+xvasprintf (const char *format,\n+#if defined (_BSD_VA_LIST_) && defined (__FreeBSD__)\n+           _BSD_VA_LIST_ args)\n+#else\n+           va_list args)\n+#endif\n+{\n+  char *result;\n+  int total_width = libiberty_vprintf_buffer_size (format, args);\n+  result = (char *) xmalloc (total_width);\n+  vsprintf (result, format, args);\n+  return result;\n+}"}]}