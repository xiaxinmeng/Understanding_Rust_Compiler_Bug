{"sha": "d62520f3cf12ac65efcefaad12c63ba8e8348003", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyNTIwZjNjZjEyYWM2NWVmY2VmYWFkMTJjNjNiYThlODM0ODAwMw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2013-04-12T13:20:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T13:20:29Z"}, "message": "aspects.adb (Find_Aspect): New routine.\n\n2013-04-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.adb (Find_Aspect): New routine.\n\t(Find_Value_Of_Aspect): New routine.\n\t(Has_Aspect): Reimplemented.\n\t* aspects.ads (Find_Aspect): New routine.\n\t(Find_Value_Of_Aspect): New routine, previously known as Find_Aspect.\n\t* exp_ch5.adb (Expand_Iterator_Loop): Update the call to Find_Aspect.\n\t* exp_util.adb (Is_Iterated_Container): Update the call to Find_Aspect.\n\t* sem_ch4.adb (Try_Container_Indexing): Update calls to Find_Aspect.\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Update\n\tthe call to Find_Aspect. Use function Has_Aspect for better\n\treadability.\n\t(Preanalyze_Range): Use function Has_Aspect for better readability.\n\t* sem_ch13.adb (Check_One_Function): Update the call to Find_Aspect.\n\t* sem_prag.adb (Analyze_Pragma): There is no longer need to\n\tlook at the parent to extract the corresponding pragma for\n\taspect Global.\n\nFrom-SVN: r197911", "tree": {"sha": "39df61f81b5cc5107ebc2fce0fb5f0c3dcfeedd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39df61f81b5cc5107ebc2fce0fb5f0c3dcfeedd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62520f3cf12ac65efcefaad12c63ba8e8348003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62520f3cf12ac65efcefaad12c63ba8e8348003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62520f3cf12ac65efcefaad12c63ba8e8348003", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62520f3cf12ac65efcefaad12c63ba8e8348003/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "489c6e198e9e78f635878bdec992ce4d9fa807a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489c6e198e9e78f635878bdec992ce4d9fa807a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489c6e198e9e78f635878bdec992ce4d9fa807a2"}], "stats": {"total": 174, "additions": 113, "deletions": 61}, "files": [{"sha": "a4abd21692d3d1721130fd5a71d0da9c763ea4f5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -1,3 +1,22 @@\n+2013-04-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.adb (Find_Aspect): New routine.\n+\t(Find_Value_Of_Aspect): New routine.\n+\t(Has_Aspect): Reimplemented.\n+\t* aspects.ads (Find_Aspect): New routine.\n+\t(Find_Value_Of_Aspect): New routine, previously known as Find_Aspect.\n+\t* exp_ch5.adb (Expand_Iterator_Loop): Update the call to Find_Aspect.\n+\t* exp_util.adb (Is_Iterated_Container): Update the call to Find_Aspect.\n+\t* sem_ch4.adb (Try_Container_Indexing): Update calls to Find_Aspect.\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Update\n+\tthe call to Find_Aspect. Use function Has_Aspect for better\n+\treadability.\n+\t(Preanalyze_Range): Use function Has_Aspect for better readability.\n+\t* sem_ch13.adb (Check_One_Function): Update the call to Find_Aspect.\n+\t* sem_prag.adb (Analyze_Pragma): There is no longer need to\n+\tlook at the parent to extract the corresponding pragma for\n+\taspect Global.\n+\n 2013-04-12  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb, sem_elab.adb, repinfo.adb, sem_ch4.adb, restrict.adb,"}, {"sha": "364f857247629014c3d2aa97d0b9ab530ec4a8d0", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 68, "deletions": 43, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -114,52 +114,91 @@ package body Aspects is\n    -- Find_Aspect --\n    -----------------\n \n-   function Find_Aspect (Ent : Entity_Id; A : Aspect_Id) return Node_Id is\n-      Ritem : Node_Id;\n-      Typ   : Entity_Id;\n+   function Find_Aspect (Id : Entity_Id; A : Aspect_Id) return Node_Id is\n+      Decl  : Node_Id;\n+      Item  : Node_Id;\n+      Owner : Entity_Id;\n+      Spec  : Node_Id;\n \n    begin\n+      Owner := Id;\n \n-      --  If the aspect is an inherited one and the entity is a class-wide\n-      --  type, use the aspect of the specific type. If the type is a base\n-      --  aspect, examine the rep. items of the base type.\n+      --  Handle various cases of base or inherited aspects for types\n \n-      if Is_Type (Ent) then\n+      if Is_Type (Id) then\n          if Base_Aspect (A) then\n-            Typ := Base_Type (Ent);\n-         else\n-            Typ := Ent;\n+            Owner := Base_Type (Owner);\n          end if;\n \n-         if Is_Class_Wide_Type (Typ)\n-           and then Inherited_Aspect (A)\n-         then\n-            Ritem := First_Rep_Item (Etype (Typ));\n-         else\n-            Ritem := First_Rep_Item (Typ);\n+         if Is_Class_Wide_Type (Owner) and then Inherited_Aspect (A) then\n+            Owner := Root_Type (Owner);\n          end if;\n-\n-      else\n-         Ritem := First_Rep_Item (Ent);\n       end if;\n \n-      while Present (Ritem) loop\n-         if Nkind (Ritem) = N_Aspect_Specification\n-           and then Get_Aspect_Id (Chars (Identifier (Ritem))) = A\n+      --  Search the representation items for the desired aspect\n+\n+      Item := First_Rep_Item (Owner);\n+      while Present (Item) loop\n+         if Nkind (Item) = N_Aspect_Specification\n+           and then Get_Aspect_Id (Chars (Identifier (Item))) = A\n          then\n-            if A = Aspect_Default_Iterator then\n-               return Expression (Aspect_Rep_Item (Ritem));\n-            else\n-               return Expression (Ritem);\n-            end if;\n+            return Item;\n          end if;\n \n-         Next_Rep_Item (Ritem);\n+         Next_Rep_Item (Item);\n       end loop;\n \n+      --  Note that not all aspects are added to the chain of representation\n+      --  items. In such cases, search the list of aspect specifications. First\n+      --  find the declaration node where the aspects reside. This is usually\n+      --  the parent or the parent of the parent.\n+\n+      Decl := Parent (Owner);\n+      if not Permits_Aspect_Specifications (Decl) then\n+         Decl := Parent (Decl);\n+      end if;\n+\n+      --  Search the list of aspect specifications for the desired aspect\n+\n+      if Permits_Aspect_Specifications (Decl) then\n+         Spec := First (Aspect_Specifications (Decl));\n+         while Present (Spec) loop\n+            if Get_Aspect_Id (Chars (Identifier (Spec))) = A then\n+               return Spec;\n+            end if;\n+\n+            Next (Spec);\n+         end loop;\n+      end if;\n+\n+      --  The entity does not carry any aspects or the desired aspect was not\n+      --  found.\n+\n       return Empty;\n    end Find_Aspect;\n \n+   --------------------------\n+   -- Find_Value_Of_Aspect --\n+   --------------------------\n+\n+   function Find_Value_Of_Aspect\n+     (Id : Entity_Id;\n+      A  : Aspect_Id) return Node_Id\n+   is\n+      Spec : constant Node_Id := Find_Aspect (Id, A);\n+\n+   begin\n+      if Present (Spec) then\n+         if A = Aspect_Default_Iterator then\n+            return Expression (Aspect_Rep_Item (Spec));\n+         else\n+            return Expression (Spec);\n+         end if;\n+      end if;\n+\n+      return Empty;\n+   end Find_Value_Of_Aspect;\n+\n    -------------------\n    -- Get_Aspect_Id --\n    -------------------\n@@ -174,22 +213,8 @@ package body Aspects is\n    ----------------\n \n    function Has_Aspect (Id : Entity_Id; A : Aspect_Id) return Boolean is\n-      Decl   : constant Node_Id := Parent (Parent (Id));\n-      Aspect : Node_Id;\n-\n    begin\n-      if Has_Aspects (Decl) then\n-         Aspect := First (Aspect_Specifications (Decl));\n-         while Present (Aspect) loop\n-            if Get_Aspect_Id (Chars (Identifier (Aspect))) = A then\n-               return True;\n-            end if;\n-\n-            Next (Aspect);\n-         end loop;\n-      end if;\n-\n-      return False;\n+      return Present (Find_Aspect (Id, A));\n    end Has_Aspect;\n \n    ------------------"}, {"sha": "2194eb338344ff500c36fe3391b3f195c192fd1a", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -517,8 +517,15 @@ package Aspects is\n    --  Replace calls, and this function may be used to retrieve the aspect\n    --  specifications for the original rewritten node in such cases.\n \n-   function Find_Aspect (Ent : Entity_Id; A : Aspect_Id) return Node_Id;\n-   --  Find value of a given aspect from aspect list of entity\n+   function Find_Aspect (Id : Entity_Id; A : Aspect_Id) return Node_Id;\n+   --  Find the aspect specification of aspect A associated with entity I.\n+   --  Return Empty if Id does not have the requested aspect.\n+\n+   function Find_Value_Of_Aspect\n+     (Id : Entity_Id;\n+      A  : Aspect_Id) return Node_Id;\n+   --  Find the value of aspect A associated with entity Id. Return Empty if\n+   --  Id does not have the requested aspect.\n \n    function Has_Aspect (Id : Entity_Id; A : Aspect_Id) return Boolean;\n    --  Determine whether entity Id has aspect A"}, {"sha": "825ea1bd18d263d2414d20860030212db318cb97", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -3377,7 +3377,7 @@ package body Exp_Ch5 is\n             declare\n                Default_Iter : constant Entity_Id :=\n                                 Entity\n-                                  (Find_Aspect\n+                                  (Find_Value_Of_Aspect\n                                     (Etype (Container),\n                                      Aspect_Default_Iterator));\n "}, {"sha": "02384fd14914bb3f2adfad6943c168113303cfa0", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -4298,7 +4298,7 @@ package body Exp_Util is\n          --  Look for aspect Default_Iterator\n \n          if Has_Aspects (Parent (Typ)) then\n-            Aspect := Find_Aspect (Typ, Aspect_Default_Iterator);\n+            Aspect := Find_Value_Of_Aspect (Typ, Aspect_Default_Iterator);\n \n             if Present (Aspect) then\n                Iter := Entity (Aspect);"}, {"sha": "6d4a60954b1b1da09e3932df217ae9f81aebf8ce", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -1226,11 +1226,10 @@ package body Sem_Ch13 is\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Chars (Id)));\n \n-               when Aspect_Synchronization =>\n-\n-                  --  The aspect corresponds to pragma Implemented.\n-                  --  Construct the pragma.\n+               --  The aspect corresponds to pragma Implemented. Construct the\n+               --  pragma.\n \n+               when Aspect_Synchronization =>\n                   Aitem :=\n                     Make_Pragma (Loc,\n                       Pragma_Argument_Associations => New_List (\n@@ -2338,7 +2337,7 @@ package body Sem_Ch13 is\n \n          procedure Check_One_Function (Subp : Entity_Id) is\n             Default_Element : constant Node_Id :=\n-                                Find_Aspect\n+                                Find_Value_Of_Aspect\n                                   (Etype (First_Formal (Subp)),\n                                    Aspect_Iterator_Element);\n "}, {"sha": "6ff707ab9e41f6c4b25ac33697507d3b6eedd28f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -6717,11 +6717,13 @@ package body Sem_Ch4 is\n       Func_Name := Empty;\n \n       if Is_Variable (Prefix) then\n-         Func_Name := Find_Aspect (Etype (Prefix), Aspect_Variable_Indexing);\n+         Func_Name :=\n+           Find_Value_Of_Aspect (Etype (Prefix), Aspect_Variable_Indexing);\n       end if;\n \n       if No (Func_Name) then\n-         Func_Name := Find_Aspect (Etype (Prefix), Aspect_Constant_Indexing);\n+         Func_Name :=\n+           Find_Value_Of_Aspect (Etype (Prefix), Aspect_Constant_Indexing);\n       end if;\n \n       --  If aspect does not exist the expression is illegal. Error is"}, {"sha": "6f57730e1513f6590bd50bb8d2c91f4b523103c3", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -1789,7 +1789,7 @@ package body Sem_Ch5 is\n \n             declare\n                Element : constant Entity_Id :=\n-                           Find_Aspect (Typ, Aspect_Iterator_Element);\n+                           Find_Value_Of_Aspect (Typ, Aspect_Iterator_Element);\n             begin\n                if No (Element) then\n                   Error_Msg_NE (\"cannot iterate over&\", N, Typ);\n@@ -1800,7 +1800,7 @@ package body Sem_Ch5 is\n                   --  If the container has a variable indexing aspect, the\n                   --  element is a variable and is modifiable in the loop.\n \n-                  if Present (Find_Aspect (Typ, Aspect_Variable_Indexing)) then\n+                  if Has_Aspect (Typ, Aspect_Variable_Indexing) then\n                      Set_Ekind (Def_Id, E_Variable);\n                   end if;\n                end if;\n@@ -1814,7 +1814,7 @@ package body Sem_Ch5 is\n             if Is_Entity_Name (Original_Node (Name (N)))\n               and then not Is_Iterator (Typ)\n             then\n-               if No (Find_Aspect (Typ, Aspect_Iterator_Element)) then\n+               if not Has_Aspect (Typ, Aspect_Iterator_Element) then\n                   Error_Msg_NE\n                     (\"cannot iterate over&\", Name (N), Typ);\n                else\n@@ -3044,9 +3044,9 @@ package body Sem_Ch5 is\n \n          --  Check that the resulting object is an iterable container\n \n-         elsif Present (Find_Aspect (Typ, Aspect_Iterator_Element))\n-           or else Present (Find_Aspect (Typ, Aspect_Constant_Indexing))\n-           or else Present (Find_Aspect (Typ, Aspect_Variable_Indexing))\n+         elsif Has_Aspect (Typ, Aspect_Iterator_Element)\n+           or else Has_Aspect (Typ, Aspect_Constant_Indexing)\n+           or else Has_Aspect (Typ, Aspect_Variable_Indexing)\n          then\n             null;\n "}, {"sha": "d60c41ef9564cd9f55ee02794a9b1cf6fd613eaf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62520f3cf12ac65efcefaad12c63ba8e8348003/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d62520f3cf12ac65efcefaad12c63ba8e8348003", "patch": "@@ -9620,7 +9620,7 @@ package body Sem_Prag is\n \n                   --  Retrieve the pragma as it contains the analyzed lists\n \n-                  Global := Aspect_Rep_Item (Parent (Global));\n+                  Global := Aspect_Rep_Item (Global);\n \n                   --  The pragma may not have been analyzed because of the\n                   --  arbitrary declaration order of aspects. Make sure that"}]}