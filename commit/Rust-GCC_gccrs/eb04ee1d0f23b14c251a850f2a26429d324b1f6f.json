{"sha": "eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwNGVlMWQwZjIzYjE0YzI1MWE4NTBmMmEyNjQyOWQzMjRiMWY2Zg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-06-13T20:27:26Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-06-13T20:27:26Z"}, "message": "2018-06-13  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/helper_functions.h\n\t(__gnu_debug::_Safe_iterator<>): Add declaration.\n\t(__can_advance(_Ite, _Size)): New.\n\t(__can_advance(const _Safe_iterator<>&, _Size)): Overload declaration.\n\t* include/debug/functions.h\n\t(__gnu_debug::_Safe_iterator<>): Remove declaration.\n\t* include/debug/stl_iterator.h\n\t(__can_advance(const _Safe_iterator<>&)): New definition.\n\t* include/debug/stl_iterator.h\n\t(__can_advance(const std::reverse_iterator<>&, _Size)): New.\n\t(__can_advance(const std::move_iterator<>&, _Size)): New.\n\t* include/debug/macros.h (__glibcxx_check_can_increment): New.\n\t* include/debug/debug.h (__glibcxx_requires_can_increment): New.\n\t* include/bits/stl_algobase.h (fill_n): Use latter.\n\t* testsuite/25_algorithms/fill_n/2.cc: New.\n\t* testsuite/25_algorithms/fill_n/debug/1_neg.cc: New.\n\t* testsuite/25_algorithms/fill_n/debug/2_neg.cc: New.\n\t* testsuite/25_algorithms/fill_n/debug/3_neg.cc: New.\n\t* testsuite/25_algorithms/fill_n/debug/4_neg.cc: New.\n\nFrom-SVN: r261566", "tree": {"sha": "30635dfd4a3cb91099144aed2e26f667c1567867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30635dfd4a3cb91099144aed2e26f667c1567867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/comments", "author": null, "committer": null, "parents": [{"sha": "3b07c0e5e45a5594e9929adf898736af7b6839da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b07c0e5e45a5594e9929adf898736af7b6839da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b07c0e5e45a5594e9929adf898736af7b6839da"}], "stats": {"total": 268, "additions": 265, "deletions": 3}, "files": [{"sha": "223b32732ddaf3e65520b7f846c276d5421608e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -13,6 +13,26 @@\n \n 2018-06-13  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* include/debug/helper_functions.h\n+\t(__gnu_debug::_Safe_iterator<>): Add declaration.\n+\t(__can_advance(_Ite, _Size)): New.\n+\t(__can_advance(const _Safe_iterator<>&, _Size)): Overload declaration.\n+\t* include/debug/functions.h\n+\t(__gnu_debug::_Safe_iterator<>): Remove declaration.\n+\t* include/debug/stl_iterator.h\n+\t(__can_advance(const _Safe_iterator<>&)): New definition.\n+\t* include/debug/stl_iterator.h\n+\t(__can_advance(const std::reverse_iterator<>&, _Size)): New.\n+\t(__can_advance(const std::move_iterator<>&, _Size)): New.\n+\t* include/debug/macros.h (__glibcxx_check_can_increment): New.\n+\t* include/debug/debug.h (__glibcxx_requires_can_increment): New.\n+\t* include/bits/stl_algobase.h (fill_n): Use latter.\n+\t* testsuite/25_algorithms/fill_n/2.cc: New.\n+\t* testsuite/25_algorithms/fill_n/debug/1_neg.cc: New.\n+\t* testsuite/25_algorithms/fill_n/debug/2_neg.cc: New.\n+\t* testsuite/25_algorithms/fill_n/debug/3_neg.cc: New.\n+\t* testsuite/25_algorithms/fill_n/debug/4_neg.cc: New.\n+\n \t* include/debug/debug.h (__glibcxx_requires_can_increment_range): New.\n \t(__glibcxx_requires_can_decrement_range): New.\n "}, {"sha": "022a3f1598be4d941090480afbf19413c2845338", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -783,6 +783,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)\n+      __glibcxx_requires_can_increment(__first, __n);\n \n       return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));\n     }"}, {"sha": "f157a6df9b43a7580323ca13e73f9489ad506fbd", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -62,6 +62,7 @@ namespace __gnu_debug\n \n # define __glibcxx_requires_cond(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last)\n+# define __glibcxx_requires_can_increment(_First,_Size)\n # define __glibcxx_requires_can_increment_range(_First1,_Last1,_First2)\n # define __glibcxx_requires_can_decrement_range(_First1,_Last1,_First2)\n # define __glibcxx_requires_sorted(_First,_Last)\n@@ -88,6 +89,8 @@ namespace __gnu_debug\n # define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last)\t\\\n   __glibcxx_check_valid_range(_First,_Last)\n+# define __glibcxx_requires_can_increment(_First,_Size)\t\\\n+  __glibcxx_check_can_increment(_First,_Size)\n # define __glibcxx_requires_can_increment_range(_First1,_Last1,_First2)\t\\\n   __glibcxx_check_can_increment_range(_First1,_Last1,_First2)\n # define __glibcxx_requires_can_decrement_range(_First1,_Last1,_First2)\t\\"}, {"sha": "41519b26a60d6955a6868448a73e60fb8254aef5", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -40,9 +40,6 @@\n \n namespace __gnu_debug\n {\n-  template<typename _Iterator, typename _Sequence>\n-    class _Safe_iterator;\n-\n   template<typename _Sequence>\n     struct _Insert_range_from_self_is_safe\n     { enum { __value = 0 }; };"}, {"sha": "2073df9519101179fb356cf4726137ea03c0f7de", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -37,6 +37,9 @@\n \n namespace __gnu_debug\n {\n+  template<typename _Iterator, typename _Sequence>\n+    class _Safe_iterator;\n+\n   /** The precision to which we can calculate the distance between\n    *  two iterators.\n    */\n@@ -164,6 +167,16 @@ namespace __gnu_debug\n       return __valid_range(__first, __last, __dist);\n     }\n \n+  // Fallback method, always ok.\n+  template<typename _InputIterator, typename _Size>\n+    inline bool\n+    __can_advance(_InputIterator, _Size)\n+    { return true; }\n+\n+  template<typename _Iterator, typename _Sequence, typename _Size>\n+    bool\n+    __can_advance(const _Safe_iterator<_Iterator, _Sequence>&, _Size);\n+\n #if __cplusplus < 201103L\n   // Helper struct to detect random access safe iterators.\n   template<typename _Iterator>"}, {"sha": "44f48b04b181b35709f3e57a94e96ee8cd69128e", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -87,6 +87,13 @@ _GLIBCXX_DEBUG_VERIFY(_First != _Last,\t\t\t\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n+// Verify that [_First, _First + _Size) forms a valid range.\n+#define __glibcxx_check_can_increment(_First,_Size)\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Size),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_iter_subscript_oob)\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_integer(_Size, #_Size))\n+\n #define __glibcxx_check_can_increment_range(_First1,_Last1,_First2)\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "7ed2b93b407337ce9cd1eebd4b54e8de8a73e255", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -862,6 +862,11 @@ namespace __gnu_debug\n       return __res;\n     }\n \n+  template<typename _Iterator, typename _Sequence, typename _Size>\n+    inline bool\n+    __can_advance(const _Safe_iterator<_Iterator, _Sequence>& __it, _Size __n)\n+    { return __it._M_can_advance(__n); }\n+\n #if __cplusplus < 201103L\n   template<typename _Iterator, typename _Sequence>\n     struct __is_safe_random_iterator<_Safe_iterator<_Iterator, _Sequence> >"}, {"sha": "a6a2a76276611fdcf4fcecf49aeb401c0fa1c205", "filename": "libstdc++-v3/include/debug/stl_iterator.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -47,6 +47,11 @@ namespace __gnu_debug\n \t\t   const std::reverse_iterator<_Iterator>& __last)\n     { return __get_distance(__last.base(), __first.base()); }\n \n+  template<typename _Iterator, typename _Size>\n+    inline bool\n+    __can_advance(const std::reverse_iterator<_Iterator>& __it, _Size __n)\n+    { return __can_advance(__it.base(), -__n); }\n+\n #if __cplusplus < 201103L\n   template<typename _Iterator>\n     struct __is_safe_random_iterator<std::reverse_iterator<_Iterator> >\n@@ -96,6 +101,11 @@ namespace __gnu_debug\n \t\t   const std::move_iterator<_Iterator>& __last)\n     { return __get_distance(__first.base(), __last.base()); }\n \n+  template<typename _Iterator, typename _Size>\n+    inline bool\n+    __can_advance(const std::move_iterator<_Iterator>& __it, _Size __n)\n+    { return __can_advance(__it.base(), __n); }\n+\n   template<typename _Iterator>\n     inline auto\n     __unsafe(const std::move_iterator<_Iterator>& __it)"}, {"sha": "6e18032e1e69d587c27cd572c0363dd1bb80e723", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F2.cc?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.5 [lib.alg.fill] Fill_n.\n+\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <vector>\n+\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::vector<int> ref;\n+  ref.push_back(1);\n+  ref.push_back(2);\n+\n+  std::vector<std::vector<int>> vvect;\n+  vvect.push_back(std::vector<int>());\n+  vvect.push_back(std::vector<int>());\n+\n+  VERIFY( std::fill_n(vvect.begin(), 2, ref) == vvect.end() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "45a88fe4ff9864bd8b41bb37baee4c9caf9acfb3", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/debug/1_neg.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F1_neg.cc?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.5 [lib.alg.fill] Fill_n.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<int> vect;\n+  vect.push_back(1);\n+  std::fill_n(vect.begin(), 2, 0);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3738ae6c08af69dc0e5e7096f0334c5efbfd51e5", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/debug/2_neg.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F2_neg.cc?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.5 [lib.alg.fill] Fill_n.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<int> vect;\n+  vect.push_back(1);\n+  std::fill_n(vect.rbegin(), 2, 0);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1497dbb3942caa0cb793c3763a79303803f2c5aa", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/debug/3_neg.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F3_neg.cc?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.5 [lib.alg.fill] Fill_n.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <list>\n+\n+void\n+test01()\n+{\n+  std::list<int> l;\n+  l.push_back(1);\n+  std::fill_n(l.begin(), 2, 0);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "70c4a2972a9bba08f4657352f4551949241b1ce3", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/debug/4_neg.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04ee1d0f23b14c251a850f2a26429d324b1f6f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdebug%2F4_neg.cc?ref=eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.5 [lib.alg.fill] Fill_n.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <list>\n+\n+void\n+test01()\n+{\n+  std::list<int> l;\n+  l.push_back(1);\n+  l.push_back(2);\n+\n+  std::list<int>::iterator it = l.begin();\n+  ++it;\n+  std::fill_n(it, 2, 0);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}