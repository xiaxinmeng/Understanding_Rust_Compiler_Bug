{"sha": "f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1ZGZhMmZlMTQxZDRjZTMwYjMxM2Q2NTJmZTViMWNiY2Q3NjY4YQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-04-06T01:06:42Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-04-06T01:06:42Z"}, "message": "re PR bootstrap/48471 (ia64-*-* does not bootstrap due to unused variables in dbxout.c)\n\n\tPR bootstrap/48471\n\t* dbxout.c (debug_nesting, symbol_queue, symbol_queue_index):\n\tMove these...\n\t(symbol_queue_size, DBXOUT_DECR_NESTING): ...and these...\n\t(DBXOUT_DECR_NESTING_AND_RETURN): ...and this under\n\t#ifdef DBX_DEBUGGING_INFO.\n\nFrom-SVN: r172016", "tree": {"sha": "fe97b3bbcf1e4f0ddc41e3aff3eb1c89886bcddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe97b3bbcf1e4f0ddc41e3aff3eb1c89886bcddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a/comments", "author": null, "committer": null, "parents": [{"sha": "4bb28d9f2e68fa24ee511038df08fb78312ff120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bb28d9f2e68fa24ee511038df08fb78312ff120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bb28d9f2e68fa24ee511038df08fb78312ff120"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "f4b1f3b04a19326221931ab17c6cda55959d2209", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a", "patch": "@@ -1,3 +1,12 @@\n+2011-04-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR bootstrap/48471\n+\t* dbxout.c (debug_nesting, symbol_queue, symbol_queue_index):\n+\tMove these...\n+\t(symbol_queue_size, DBXOUT_DECR_NESTING): ...and these...\n+\t(DBXOUT_DECR_NESTING_AND_RETURN): ...and this under\n+\t#ifdef DBX_DEBUGGING_INFO.\n+\n 2011-04-05  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR bootstrap/48403"}, {"sha": "715632d3322c40ffb9f28da7958174e133751a16", "filename": "gcc/dbxout.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=f55dfa2fe141d4ce30b313d652fe5b1cbcd7668a", "patch": "@@ -96,27 +96,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"xcoffout.h\"\n #endif\n \n-/* When -gused is used, emit debug info for only used symbols. But in\n-   addition to the standard intercepted debug_hooks there are some\n-   direct calls into this file, i.e., dbxout_symbol, dbxout_parms, and\n-   dbxout_reg_params.  Those routines may also be called from a higher\n-   level intercepted routine. So to prevent recording data for an inner\n-   call to one of these for an intercept, we maintain an intercept\n-   nesting counter (debug_nesting). We only save the intercepted\n-   arguments if the nesting is 1.  */\n-static int debug_nesting = 0;\n-\n-static tree *symbol_queue;\n-static int symbol_queue_index = 0;\n-static int symbol_queue_size = 0;\n-\n-#define DBXOUT_DECR_NESTING \\\n-  if (--debug_nesting == 0 && symbol_queue_index > 0) \\\n-    { emit_pending_bincls_if_required (); debug_flush_symbol_queue (); }\n-\n-#define DBXOUT_DECR_NESTING_AND_RETURN(x) \\\n-  do {--debug_nesting; return (x);} while (0)\n-\n #ifndef ASM_STABS_OP\n # ifdef XCOFF_DEBUGGING_INFO\n #  define ASM_STABS_OP \"\\t.stabx\\t\"\n@@ -926,6 +905,27 @@ dbxout_finish_complex_stabs (tree sym, stab_code_type code,\n \n #if defined (DBX_DEBUGGING_INFO)\n \n+/* When -gused is used, emit debug info for only used symbols. But in\n+   addition to the standard intercepted debug_hooks there are some\n+   direct calls into this file, i.e., dbxout_symbol, dbxout_parms, and\n+   dbxout_reg_params.  Those routines may also be called from a higher\n+   level intercepted routine. So to prevent recording data for an inner\n+   call to one of these for an intercept, we maintain an intercept\n+   nesting counter (debug_nesting). We only save the intercepted\n+   arguments if the nesting is 1.  */\n+static int debug_nesting = 0;\n+\n+static tree *symbol_queue;\n+static int symbol_queue_index = 0;\n+static int symbol_queue_size = 0;\n+\n+#define DBXOUT_DECR_NESTING \\\n+  if (--debug_nesting == 0 && symbol_queue_index > 0) \\\n+    { emit_pending_bincls_if_required (); debug_flush_symbol_queue (); }\n+\n+#define DBXOUT_DECR_NESTING_AND_RETURN(x) \\\n+  do {--debug_nesting; return (x);} while (0)\n+\n static void\n dbxout_function_end (tree decl ATTRIBUTE_UNUSED)\n {"}]}