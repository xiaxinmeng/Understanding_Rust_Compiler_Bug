{"sha": "9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5MGFjMDVjOTJhMTU0YjVkMmNhNzA3OGQzYmY2ZjRjN2ViNmM1Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-06-12T20:33:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-06-12T20:33:22Z"}, "message": "compiler, reflect: Handle package path like gc compiler.\n\nFrom-SVN: r188482", "tree": {"sha": "33b14dcd566e3f484c612221423ad78d80bfe383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33b14dcd566e3f484c612221423ad78d80bfe383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/comments", "author": null, "committer": null, "parents": [{"sha": "b29e01b77bcbe5041f82007d423f2da9396d1e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29e01b77bcbe5041f82007d423f2da9396d1e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29e01b77bcbe5041f82007d423f2da9396d1e3b"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "6e9b8c124aa34ce6612e0cab666e84d6febed944", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "patch": "@@ -339,9 +339,14 @@ Gogo::set_package_name(const std::string& package_name,\n   // symbol names.\n   if (!this->pkgpath_set_)\n     {\n-      if (!this->prefix_from_option_)\n-\tthis->prefix_ = \"go\";\n-      this->pkgpath_ = this->prefix_ + '.' + package_name;\n+      if (!this->prefix_from_option_ && package_name == \"main\")\n+\tthis->pkgpath_ = package_name;\n+      else\n+\t{\n+\t  if (!this->prefix_from_option_)\n+\t    this->prefix_ = \"go\";\n+\t  this->pkgpath_ = this->prefix_ + '.' + package_name;\n+\t}\n       this->pkgpath_set_ = true;\n     }\n "}, {"sha": "ff6b5bddbd2787045976ce905e46cf668716b867", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "patch": "@@ -8337,14 +8337,23 @@ Named_type::do_reflection(Gogo* gogo, std::string* ret) const\n     {\n       // We handle -fgo-prefix and -fgo-pkgpath differently here for\n       // compatibility with how the compiler worked before\n-      // -fgo-pkgpath was introduced.\n+      // -fgo-pkgpath was introduced.  When -fgo-pkgpath is specified,\n+      // we use it to make a unique reflection string, so that the\n+      // type canonicalization in the reflect package will work.  In\n+      // order to be compatible with the gc compiler, we quote the\n+      // package path, so that the reflect methods can discard it.\n       const Package* package = this->named_object_->package();\n       if (gogo->pkgpath_from_option())\n-\tret->append(package != NULL ? package->pkgpath() : gogo->pkgpath());\n-      else\n-\tret->append(package != NULL\n-\t\t    ? package->package_name()\n-\t\t    : gogo->package_name());\n+\t{\n+\t  ret->push_back('\"');\n+\t  ret->append(package != NULL\n+\t\t      ? package->pkgpath_symbol()\n+\t\t      : gogo->pkgpath_symbol());\n+\t  ret->push_back('\"');\n+\t}\n+      ret->append(package != NULL\n+\t\t  ? package->package_name()\n+\t\t  : gogo->package_name());\n       ret->push_back('.');\n     }\n   if (this->in_function_ != NULL)"}, {"sha": "b6978a1e65b5a590c6c722153af5d675224386fe", "filename": "libgo/go/encoding/xml/marshal_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go?ref=9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "patch": "@@ -726,7 +726,7 @@ var marshalErrorTests = []struct {\n \t},\n \t{\n \t\tValue: map[*Ship]bool{nil: false},\n-\t\tErr:   \"xml: unsupported type: map[*encoding/xml.Ship]bool\",\n+\t\tErr:   \"xml: unsupported type: map[*xml.Ship]bool\",\n \t\tKind:  reflect.Map,\n \t},\n \t{"}, {"sha": "ce12c1795c24ee81926523fab7695be789e5f836", "filename": "libgo/go/html/template/escape_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go?ref=9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "patch": "@@ -226,7 +226,7 @@ func TestEscape(t *testing.T) {\n \t\t{\n \t\t\t\"badMarshaler\",\n \t\t\t`<button onclick='alert(1/{{.B}}in numbers)'>`,\n-\t\t\t`<button onclick='alert(1/ /* json: error calling MarshalJSON for type *html/template.badMarshaler: invalid character &#39;f&#39; looking for beginning of object key string */null in numbers)'>`,\n+\t\t\t`<button onclick='alert(1/ /* json: error calling MarshalJSON for type *template.badMarshaler: invalid character &#39;f&#39; looking for beginning of object key string */null in numbers)'>`,\n \t\t},\n \t\t{\n \t\t\t\"jsMarshaler\","}, {"sha": "a264ef1e08248304d3b129e70f267c673057f9b9", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=9690ac05c92a154b5d2ca7078d3bf6f4c7eb6c57", "patch": "@@ -83,6 +83,9 @@ type Type interface {\n \t// compare the Types directly.\n \tString() string\n \n+\t// Used internally by gccgo--the string retaining quoting.\n+\trawString() string\n+\n \t// Kind returns the specific kind of this type.\n \tKind() Kind\n \n@@ -432,7 +435,24 @@ func (t *commonType) toType() Type {\n \treturn canonicalize(t)\n }\n \n-func (t *commonType) String() string { return *t.string }\n+func (t *commonType) rawString() string { return *t.string }\n+\n+func (t *commonType) String() string {\n+\t// For gccgo, strip out quoted strings.\n+\ts := *t.string\n+\tvar q bool\n+\tr := make([]byte, len(s))\n+\tj := 0\n+\tfor i := 0; i < len(s); i++ {\n+\t\tif s[i] == '\"' {\n+\t\t\tq = !q\n+\t\t} else if !q {\n+\t\t\tr[j] = s[i]\n+\t\t\tj++\n+\t\t}\n+\t}\n+\treturn string(r[:j])\n+}\n \n func (t *commonType) Size() uintptr { return t.size }\n \n@@ -942,7 +962,7 @@ func canonicalize(t Type) Type {\n \tu := t.uncommon()\n \tvar s string\n \tif u == nil || u.PkgPath() == \"\" {\n-\t\ts = t.String()\n+\t\ts = t.rawString()\n \t} else {\n \t\ts = u.PkgPath() + \".\" + u.Name()\n \t}"}]}