{"sha": "2cbf2d9595cc705613fde7eb201d207adb92495d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNiZjJkOTU5NWNjNzA1NjEzZmRlN2ViMjAxZDIwN2FkYjkyNDk1ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-28T11:30:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-28T11:30:09Z"}, "message": "tree-pass.h (execute_pass_list): Adjust prototype.\n\n2014-04-28  Richard Biener  <rguenther@suse.de>\n\n\t* tree-pass.h (execute_pass_list): Adjust prototype.\n\t* passes.c (pass_manager::execute_early_local_passes):\n\tAdjust.\n\t(do_per_function): Change callback signature, push all actual\n\twork to the callbals.\n\t(do_per_function_toporder): Likewise.\n\t(execute_function_dump): Adjust.\n\t(execute_function_todo): Likewise.\n\t(clear_last_verified): Likewise.\n\t(verify_curr_properties): Likewise.\n\t(update_properties_after_pass): Likewise.\n\t(execute_pass_list_1): Split out from ...\n\t(execute_pass_list): ... here.  Adjust.\n\t(execute_ipa_pass_list): Likewise.\n\t* cgraphunit.c (cgraph_add_new_function): Adjust.\n\t(analyze_function): Likewise.\n\t(expand_function): Likewise.\n\t* cgraph.c (release_function_body): Free dominance info\n\there instead of asserting it was magically freed elsewhere.\n\nFrom-SVN: r209856", "tree": {"sha": "4f9b23d524821efc4c27bb71b50ded92810d7fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f9b23d524821efc4c27bb71b50ded92810d7fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cbf2d9595cc705613fde7eb201d207adb92495d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cbf2d9595cc705613fde7eb201d207adb92495d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cbf2d9595cc705613fde7eb201d207adb92495d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cbf2d9595cc705613fde7eb201d207adb92495d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba21a04a1e9b611b3f97895af0c7af3871991c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba21a04a1e9b611b3f97895af0c7af3871991c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba21a04a1e9b611b3f97895af0c7af3871991c94"}], "stats": {"total": 135, "additions": 82, "deletions": 53}, "files": [{"sha": "5c571d10a4344124a31d11b04ddb85efbb9d6680", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cbf2d9595cc705613fde7eb201d207adb92495d", "patch": "@@ -1,3 +1,25 @@\n+2014-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-pass.h (execute_pass_list): Adjust prototype.\n+\t* passes.c (pass_manager::execute_early_local_passes):\n+\tAdjust.\n+\t(do_per_function): Change callback signature, push all actual\n+\twork to the callbals.\n+\t(do_per_function_toporder): Likewise.\n+\t(execute_function_dump): Adjust.\n+\t(execute_function_todo): Likewise.\n+\t(clear_last_verified): Likewise.\n+\t(verify_curr_properties): Likewise.\n+\t(update_properties_after_pass): Likewise.\n+\t(execute_pass_list_1): Split out from ...\n+\t(execute_pass_list): ... here.  Adjust.\n+\t(execute_ipa_pass_list): Likewise.\n+\t* cgraphunit.c (cgraph_add_new_function): Adjust.\n+\t(analyze_function): Likewise.\n+\t(expand_function): Likewise.\n+\t* cgraph.c (release_function_body): Free dominance info\n+\there instead of asserting it was magically freed elsewhere.\n+\n 2014-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* configure.ac: Tweak GAS check for LEON instructions on SPARC."}, {"sha": "51915424de156d37dd66a3911c5a9a56c842040a", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=2cbf2d9595cc705613fde7eb201d207adb92495d", "patch": "@@ -1696,8 +1696,8 @@ release_function_body (tree decl)\n \t}\n       if (cfun->cfg)\n \t{\n-\t  gcc_assert (dom_computed[0] == DOM_NONE);\n-\t  gcc_assert (dom_computed[1] == DOM_NONE);\n+\t  free_dominance_info (CDI_DOMINATORS);\n+\t  free_dominance_info (CDI_POST_DOMINATORS);\n \t  clear_edges ();\n \t  cfun->cfg = NULL;\n \t}"}, {"sha": "d06ce3217fdc94845a684f89cb9cca836896672f", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=2cbf2d9595cc705613fde7eb201d207adb92495d", "patch": "@@ -520,7 +520,7 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \t    push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n \t    gimple_register_cfg_hooks ();\n \t    bitmap_obstack_initialize (NULL);\n-\t    execute_pass_list (passes->all_lowering_passes);\n+\t    execute_pass_list (cfun, passes->all_lowering_passes);\n \t    passes->execute_early_local_passes ();\n \t    bitmap_obstack_release (NULL);\n \t    pop_cfun ();\n@@ -658,7 +658,7 @@ analyze_function (struct cgraph_node *node)\n \n \t  gimple_register_cfg_hooks ();\n \t  bitmap_obstack_initialize (NULL);\n-\t  execute_pass_list (g->get_passes ()->all_lowering_passes);\n+\t  execute_pass_list (cfun, g->get_passes ()->all_lowering_passes);\n \t  free_dominance_info (CDI_POST_DOMINATORS);\n \t  free_dominance_info (CDI_DOMINATORS);\n \t  compact_blocks ();\n@@ -1771,7 +1771,7 @@ expand_function (struct cgraph_node *node)\n   /* Signal the start of passes.  */\n   invoke_plugin_callbacks (PLUGIN_ALL_PASSES_START, NULL);\n \n-  execute_pass_list (g->get_passes ()->all_passes);\n+  execute_pass_list (cfun, g->get_passes ()->all_passes);\n \n   /* Signal the end of passes.  */\n   invoke_plugin_callbacks (PLUGIN_ALL_PASSES_END, NULL);"}, {"sha": "c0a76d62d215270d994a87cebf02726defbeba88", "filename": "gcc/passes.c", "status": "modified", "additions": 53, "deletions": 46, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=2cbf2d9595cc705613fde7eb201d207adb92495d", "patch": "@@ -132,7 +132,7 @@ opt_pass::opt_pass (const pass_data &data, context *ctxt)\n void\n pass_manager::execute_early_local_passes ()\n {\n-  execute_pass_list (pass_early_local_passes_1->sub);\n+  execute_pass_list (cfun, pass_early_local_passes_1->sub);\n }\n \n unsigned int\n@@ -1498,27 +1498,17 @@ pass_manager::pass_manager (context *ctxt)\n    call CALLBACK on the current function.  */\n \n static void\n-do_per_function (void (*callback) (void *data), void *data)\n+do_per_function (void (*callback) (function *, void *data), void *data)\n {\n   if (current_function_decl)\n-    callback (data);\n+    callback (cfun, data);\n   else\n     {\n       struct cgraph_node *node;\n       FOR_EACH_DEFINED_FUNCTION (node)\n \tif (node->analyzed && gimple_has_body_p (node->decl)\n \t    && (!node->clone_of || node->decl != node->clone_of->decl))\n-\t  {\n-\t    push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n-\t    callback (data);\n-\t    if (!flag_wpa)\n-\t      {\n-\t        free_dominance_info (CDI_DOMINATORS);\n-\t        free_dominance_info (CDI_POST_DOMINATORS);\n-\t      }\n-\t    pop_cfun ();\n-\t    ggc_collect ();\n-\t  }\n+\t  callback (DECL_STRUCT_FUNCTION (node->decl), data);\n     }\n }\n \n@@ -1533,12 +1523,12 @@ static GTY ((length (\"nnodes\"))) cgraph_node_ptr *order;\n    call CALLBACK on the current function.\n    This function is global so that plugins can use it.  */\n void\n-do_per_function_toporder (void (*callback) (void *data), void *data)\n+do_per_function_toporder (void (*callback) (function *, void *data), void *data)\n {\n   int i;\n \n   if (current_function_decl)\n-    callback (data);\n+    callback (cfun, data);\n   else\n     {\n       gcc_assert (!order);\n@@ -1554,15 +1544,7 @@ do_per_function_toporder (void (*callback) (void *data), void *data)\n \t  order[i] = NULL;\n \t  node->process = 0;\n \t  if (cgraph_function_with_gimple_body_p (node))\n-\t    {\n-\t      cgraph_get_body (node);\n-\t      push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n-\t      callback (data);\n-\t      free_dominance_info (CDI_DOMINATORS);\n-\t      free_dominance_info (CDI_POST_DOMINATORS);\n-\t      pop_cfun ();\n-\t      ggc_collect ();\n-\t    }\n+\t    callback (DECL_STRUCT_FUNCTION (node->decl), data);\n \t}\n     }\n   ggc_free (order);\n@@ -1573,31 +1555,35 @@ do_per_function_toporder (void (*callback) (void *data), void *data)\n /* Helper function to perform function body dump.  */\n \n static void\n-execute_function_dump (void *data)\n+execute_function_dump (function *fn, void *data)\n {\n   opt_pass *pass = (opt_pass *)data;\n \n-  if (dump_file && current_function_decl)\n+  if (dump_file)\n     {\n-      if (cfun->curr_properties & PROP_trees)\n-        dump_function_to_file (current_function_decl, dump_file, dump_flags);\n+      push_cfun (fn);\n+\n+      if (fn->curr_properties & PROP_trees)\n+        dump_function_to_file (fn->decl, dump_file, dump_flags);\n       else\n \tprint_rtl_with_bb (dump_file, get_insns (), dump_flags);\n \n       /* Flush the file.  If verification fails, we won't be able to\n \t close the file before aborting.  */\n       fflush (dump_file);\n \n-      if ((cfun->curr_properties & PROP_cfg)\n+      if ((fn->curr_properties & PROP_cfg)\n \t  && (dump_flags & TDF_GRAPH))\n \t{\n \t  if (!pass->graph_dump_initialized)\n \t    {\n \t      clean_graph_dump_file (dump_file_name);\n \t      pass->graph_dump_initialized = true;\n \t    }\n-\t  print_graph_cfg (dump_file_name, cfun);\n+\t  print_graph_cfg (dump_file_name, fn);\n \t}\n+\n+      pop_cfun ();\n     }\n }\n \n@@ -1728,13 +1714,15 @@ pass_manager::dump_profile_report () const\n /* Perform all TODO actions that ought to be done on each function.  */\n \n static void\n-execute_function_todo (void *data)\n+execute_function_todo (function *fn, void *data)\n {\n   unsigned int flags = (size_t)data;\n-  flags &= ~cfun->last_verified;\n+  flags &= ~fn->last_verified;\n   if (!flags)\n     return;\n \n+  push_cfun (fn);\n+\n   /* Always cleanup the CFG before trying to update SSA.  */\n   if (flags & TODO_cleanup_cfg)\n     {\n@@ -1774,7 +1762,10 @@ execute_function_todo (void *data)\n \n   /* If we've seen errors do not bother running any verifiers.  */\n   if (seen_error ())\n-    return;\n+    {\n+      pop_cfun ();\n+      return;\n+    }\n \n #if defined ENABLE_CHECKING\n   if (flags & TODO_verify_ssa\n@@ -1793,7 +1784,9 @@ execute_function_todo (void *data)\n     verify_rtl_sharing ();\n #endif\n \n-  cfun->last_verified = flags & TODO_verify_all;\n+  fn->last_verified = flags & TODO_verify_all;\n+\n+  pop_cfun ();\n }\n \n /* Perform all TODO actions.  */\n@@ -1855,20 +1848,20 @@ verify_interpass_invariants (void)\n /* Clear the last verified flag.  */\n \n static void\n-clear_last_verified (void *data ATTRIBUTE_UNUSED)\n+clear_last_verified (function *fn, void *data ATTRIBUTE_UNUSED)\n {\n-  cfun->last_verified = 0;\n+  fn->last_verified = 0;\n }\n \n /* Helper function. Verify that the properties has been turn into the\n    properties expected by the pass.  */\n \n #ifdef ENABLE_CHECKING\n static void\n-verify_curr_properties (void *data)\n+verify_curr_properties (function *fn, void *data)\n {\n   unsigned int props = (size_t)data;\n-  gcc_assert ((cfun->curr_properties & props) == props);\n+  gcc_assert ((fn->curr_properties & props) == props);\n }\n #endif\n \n@@ -1927,11 +1920,11 @@ pass_fini_dump_file (opt_pass *pass)\n    properties. */\n \n static void\n-update_properties_after_pass (void *data)\n+update_properties_after_pass (function *fn, void *data)\n {\n   opt_pass *pass = (opt_pass *) data;\n-  cfun->curr_properties = (cfun->curr_properties | pass->properties_provided)\n-\t\t           & ~pass->properties_destroyed;\n+  fn->curr_properties = (fn->curr_properties | pass->properties_provided)\n+\t\t         & ~pass->properties_destroyed;\n }\n \n /* Execute summary generation for all of the passes in IPA_PASS.  */\n@@ -2206,20 +2199,33 @@ execute_one_pass (opt_pass *pass)\n   return true;\n }\n \n-void\n-execute_pass_list (opt_pass *pass)\n+static void\n+execute_pass_list_1 (opt_pass *pass)\n {\n   do\n     {\n       gcc_assert (pass->type == GIMPLE_PASS\n \t\t  || pass->type == RTL_PASS);\n       if (execute_one_pass (pass) && pass->sub)\n-        execute_pass_list (pass->sub);\n+        execute_pass_list_1 (pass->sub);\n       pass = pass->next;\n     }\n   while (pass);\n }\n \n+void\n+execute_pass_list (function *fn, opt_pass *pass)\n+{\n+  push_cfun (fn);\n+  execute_pass_list_1 (pass);\n+  if (fn->cfg)\n+    {\n+      free_dominance_info (CDI_DOMINATORS);\n+      free_dominance_info (CDI_POST_DOMINATORS);\n+    }\n+  pop_cfun ();\n+}\n+\n /* Write out all LTO data.  */\n static void\n write_lto (void)\n@@ -2543,7 +2549,8 @@ execute_ipa_pass_list (opt_pass *pass)\n \t  if (pass->sub->type == GIMPLE_PASS)\n \t    {\n \t      invoke_plugin_callbacks (PLUGIN_EARLY_GIMPLE_PASSES_START, NULL);\n-\t      do_per_function_toporder ((void (*)(void *))execute_pass_list,\n+\t      do_per_function_toporder ((void (*)(function *, void *))\n+\t\t\t\t\t  execute_pass_list,\n \t\t\t\t\tpass->sub);\n \t      invoke_plugin_callbacks (PLUGIN_EARLY_GIMPLE_PASSES_END, NULL);\n \t    }"}, {"sha": "0d941019f0ee5fd820fa4a769c0f27501da10b37", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cbf2d9595cc705613fde7eb201d207adb92495d/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=2cbf2d9595cc705613fde7eb201d207adb92495d", "patch": "@@ -586,7 +586,7 @@ extern gimple_opt_pass *make_pass_convert_switch (gcc::context *ctxt);\n extern opt_pass *current_pass;\n \n extern bool execute_one_pass (opt_pass *);\n-extern void execute_pass_list (opt_pass *);\n+extern void execute_pass_list (function *, opt_pass *);\n extern void execute_ipa_pass_list (opt_pass *);\n extern void execute_ipa_summary_passes (ipa_opt_pass_d *);\n extern void execute_all_ipa_transforms (void);\n@@ -614,7 +614,7 @@ extern bool function_called_by_processed_nodes_p (void);\n extern bool first_pass_instance;\n \n /* Declare for plugins.  */\n-extern void do_per_function_toporder (void (*) (void *), void *);\n+extern void do_per_function_toporder (void (*) (function *, void *), void *);\n \n extern void disable_pass (const char *);\n extern void enable_pass (const char *);"}]}