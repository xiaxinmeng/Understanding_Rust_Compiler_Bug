{"sha": "e0b7ed05b23f828aa1e4415f2074b4c152b0a9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiN2VkMDViMjNmODI4YWExZTQ0MTVmMjA3NGI0YzE1MmIwYTliZQ==", "commit": {"author": {"name": "Felix Natter", "email": "fnatter@gmx.net", "date": "2000-09-08T20:30:24Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-09-08T20:30:24Z"}, "message": "porting-howto.html: New version.\n\n2000-09-08  Felix Natter  <fnatter@gmx.net>\n\n\t* docs/17_intro/porting-howto.html:  New version.\n\nFrom-SVN: r36275", "tree": {"sha": "ed5bb06a43fbac0d444f16d069a2306fa7113679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5bb06a43fbac0d444f16d069a2306fa7113679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be/comments", "author": {"login": "fnatter", "id": 1979118, "node_id": "MDQ6VXNlcjE5NzkxMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1979118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnatter", "html_url": "https://github.com/fnatter", "followers_url": "https://api.github.com/users/fnatter/followers", "following_url": "https://api.github.com/users/fnatter/following{/other_user}", "gists_url": "https://api.github.com/users/fnatter/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnatter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnatter/subscriptions", "organizations_url": "https://api.github.com/users/fnatter/orgs", "repos_url": "https://api.github.com/users/fnatter/repos", "events_url": "https://api.github.com/users/fnatter/events{/privacy}", "received_events_url": "https://api.github.com/users/fnatter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfaf3cdbc47cb897ddb1ade88e8d9f77bc9608a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaf3cdbc47cb897ddb1ade88e8d9f77bc9608a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfaf3cdbc47cb897ddb1ade88e8d9f77bc9608a3"}], "stats": {"total": 248, "additions": 232, "deletions": 16}, "files": [{"sha": "f50c647a5be377f69807427e61d55d0d7519c18b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0b7ed05b23f828aa1e4415f2074b4c152b0a9be", "patch": "@@ -1,3 +1,7 @@\n+2000-09-08  Felix Natter  <fnatter@gmx.net>\n+\n+\t* docs/17_intro/porting-howto.html:  New version.\n+\n 2000-09-07  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* config/cpu/i386/bits/atomicity.h (__exchange_and_add): Change unused"}, {"sha": "54290b328c27af5326b0ec3a9fc1b97a2e89ab07", "filename": "libstdc++-v3/docs/17_intro/porting-howto.html", "status": "modified", "additions": 228, "deletions": 16, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be/libstdc%2B%2B-v3%2Fdocs%2F17_intro%2Fporting-howto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b7ed05b23f828aa1e4415f2074b4c152b0a9be/libstdc%2B%2B-v3%2Fdocs%2F17_intro%2Fporting-howto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F17_intro%2Fporting-howto.html?ref=e0b7ed05b23f828aa1e4415f2074b4c152b0a9be", "patch": "@@ -34,11 +34,17 @@ <h3 class=\"author\">Felix Natter</h3>\n \t\t  + second upload to libstdc++-page.\n \t\t</td>\n             </tr>\n+            <tr>\n+              <td align=\"left\">Revision 0.9</td><td align=\"left\">Wed Sep  6 02:59:32 2000</td><td align=\"left\">fnatter</td>\n+            </tr>\n+            <tr>\n+              <td colspan=\"3\" align=\"left\">5 new sections.</td>\n+            </tr>\n           </table>\n         </div>\n         <div class=\"abstract\">\n           <p>\n-            <a name=\"N2672\"></a><b>Abstract</b>\n+            <a name=\"N2688\"></a><b>Abstract</b>\n           </p>\n           <p>\n \t\tSome notes on porting applications from libstdc++-2.90 (or earlier\n@@ -97,7 +103,19 @@ <h3 class=\"author\">Felix Natter</h3>\n \t  Libc-macros (i.e. <b>isspace</b> from\n \t  <tt>&lt;cctype&gt;</tt>)</a>\n           </dt>\n-          <dt>7. <a href=\"#sec-about\">About...</a>\n+          <dt>7. <a href=\"#sec-stream-state\">\n+\t  State of streams\n+\t</a>\n+          </dt>\n+          <dt>8. <a href=\"#sec-vector-at\">vector::at is missing (i.e. gcc 2.95.2)</a>\n+          </dt>\n+          <dt>9. <a href=\"#sec-eof\">Using std::char_traits&lt;char&gt;::eof()</a>\n+          </dt>\n+          <dt>10. <a href=\"#sec-string-clear\">Using string::clear()/string::erase()</a>\n+          </dt>\n+          <dt>11. <a href=\"#sec-stringstream\">Using stringstream's</a>\n+          </dt>\n+          <dt>12. <a href=\"#sec-about\">About...</a>\n           </dt>\n         </dl>\n       </div>\n@@ -119,14 +137,14 @@ <h2 class=\"title\" style=\"clear: all\">\n \t  <div class=\"itemizedlist\">\n             <ul>\n               <li>\n-                <a name=\"N2696\"></a>\n+                <a name=\"N2712\"></a>\n                 <p>wrap your code in <b>namespace std {\n \t\t\t  ... }</b> =&gt; This is not an option because only symbols\n \t\t\tfrom the standard c++-library are defined in namespace std::.\n \t\t  </p>\n               </li>\n               <li>\n-                <a name=\"N2705\"></a>\n+                <a name=\"N2721\"></a>\n                 <p>put a kind of\n \t\t\t<i>using-declaration</i> in your source (either\n \t\t\t<b>using namespace std;</b> or i.e. <b>using\n@@ -135,7 +153,7 @@ <h2 class=\"title\" style=\"clear: all\">\n \t\t  </p>\n               </li>\n               <li>\n-                <a name=\"N2720\"></a>\n+                <a name=\"N2736\"></a>\n                 <p>use a <i>fully qualified name</i> for\n \t\t\teach libstdc++-symbol (i.e. <b>std::string</b>,\n \t\t\t<b>std::cout</b>) =&gt; can always be used\n@@ -240,7 +258,7 @@ <h3 class=\"title\">\n \t  </p>\n           <div class=\"table\">\n             <p>\n-              <a name=\"N2885\"></a><b>Table 1. Namespace std:: in Open-Source programs</b>\n+              <a name=\"N2901\"></a><b>Table 1. Namespace std:: in Open-Source programs</b>\n             </p>\n             <table border=\"1\">\n               <colgroup>\n@@ -269,7 +287,7 @@ <h3 class=\"title\">\n           </div>\n           <div class=\"table\">\n             <p>\n-              <a name=\"N2962\"></a><b>Table 2. Notations for categories</b>\n+              <a name=\"N2978\"></a><b>Table 2. Notations for categories</b>\n             </p>\n             <table border=\"1\">\n               <colgroup>\n@@ -295,8 +313,7 @@ <h3 class=\"title\">\n           <p>\n \t\tAs you can see, this currently lacks an example of a project which\n \t\tuses libstdc++-symbols in headers in a back-portable way (except\n-\t\tfor Gtk--: see the <a href=\"#sec-gtkmm-hack\">section on the Gtk-- hack\n-\t</a>).\n+\t\tfor Gtk--: see the <a href=\"#\"></a>).\n \t  </p>\n         </div>\n       </div>\n@@ -328,10 +345,10 @@ <h2 class=\"title\" style=\"clear: all\">\n         </h2>\n         <p>\n \t  When using libstdc++-v3, you can use\n-\t  <div id=\"N3066\" class=\"funcsynopsis\">\n+\t  <div id=\"N3082\" class=\"funcsynopsis\">\n             <p>\n             </p>\n-            <a name=\"N3066\"></a>\n+            <a name=\"N3082\"></a>\n             <pre class=\"funcsynopsisinfo\">\n \t\t  #include &lt;fstream&gt;\n \t\t</pre>\n@@ -412,22 +429,22 @@ <h2 class=\"title\" style=\"clear: all\">\n \t  <div class=\"itemizedlist\">\n             <ul>\n               <li>\n-                <a name=\"N3266\"></a>\n+                <a name=\"N3282\"></a>\n                 <p>you cannot do\n \t\t\t<b>ostream::operator&lt;&lt;(iterator)</b> to\n \t\t\tprint the address of the iterator =&gt; use\n \t\t\t<b>operator&lt;&lt; &amp;*iterator</b> instead ?\n \t\t  </p>\n               </li>\n               <li>\n-                <a name=\"N3287\"></a>\n+                <a name=\"N3303\"></a>\n                 <p>you cannot clear an iterator's reference\n \t\t\t(<b>iterator = 0</b>) =&gt; use\n \t\t\t<b>iterator = iterator_type();</b> ?\n \t\t  </p>\n               </li>\n               <li>\n-                <a name=\"N3300\"></a>\n+                <a name=\"N3316\"></a>\n                 <p>\n                   <b>if (iterator)</b> won't work any\n \t\t\tmore =&gt; use <b>if (iterator != iterator_type())</b>\n@@ -446,7 +463,7 @@ <h2 class=\"title\" style=\"clear: all\">\n         <p>\n \t  Glibc 2.0.x and 2.1.x define the <tt>&lt;ctype.h&gt;</tt> -functionality as\n \t  macros (isspace, isalpha etc.). Libstdc++-v3 \"shadows\" these macros\n-\t  as described in the <a href=\"#sec-cheaders\">section on C-headers</a>.\n+\t  as described in the <a href=\"#\"></a>.\n \t</p>\n         <p>\n \t  Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3\n@@ -499,9 +516,204 @@ <h2 class=\"title\" style=\"clear: all\">\n \t  \"\n \t</p>\n       </div>\n+      <div class=\"section\" id=\"sec-stream-state\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-stream-state\"><b>7. \n+\t  State of streams\n+\t</b></a>\n+        </h2>\n+        <p>\n+\t  At least some older implementations don't have\n+\t  <b>std::ios_base</b>, so you should use\n+\t  <b>std::ios::badbit</b>, <b>std::ios::failbit</b>\n+\t  and <b>std::ios::eofbit</b> and\n+\t  <b>std::ios::goodbit</b>.\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-vector-at\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-vector-at\"><b>8. vector::at is missing (i.e. gcc 2.95.2)</b></a>\n+        </h2>\n+        <p>\n+\t  For my use, I added it to\n+\t  <tt>prefix/include/g++-3/stl_vector.h</tt>:\n+\t  <pre class=\"programlisting\">\n+  reference operator[](size_type __n) { return *(begin() + __n); }\n+  reference at(size_type __n) {\n+    if (begin() + __n &gt;= end())\n+      throw out_of_range(\"vector::at\");\n+    return *(begin() + __n);\n+  }\n+  const_reference operator[](size_type __n) const { return *(begin() + __n); }\n+  const_reference at(size_type __n) const {\n+    if (begin() + __n &gt;= end())\n+      throw out_of_range(\"vector::at\");\n+    return *(begin() + __n);\n+  }\n+\t  </pre>\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-eof\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-eof\"><b>9. Using std::char_traits&lt;char&gt;::eof()</b></a>\n+        </h2>\n+        <p>\n+\t  <pre class=\"programlisting\">\n+\t\t#ifdef HAVE_CHAR_TRAITS\n+\t\t#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n+\t\t#else\n+\t\t#define CPP_EOF EOF\n+\t\t#endif\n+\t  </pre>\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-string-clear\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-string-clear\"><b>10. Using string::clear()/string::erase()</b></a>\n+        </h2>\n+        <p>\n+\t  There are two functions for deleting the contents of a string:\n+\t  <b>clear</b> and <b>erase</b> (the latter\n+\t  returns the string).\n+\t  <pre class=\"programlisting\">\n+\t\tvoid \n+\t\tclear() { _M_mutate(0, this-&gt;size(), 0); }\n+\t  </pre>\n+\t  <pre class=\"programlisting\">\n+      basic_string&amp; \n+      erase(size_type __pos = 0, size_type __n = npos)\n+      { \n+\t\treturn this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n+\t\t\t     _M_data(), _M_data()); \n+      }\n+\t  </pre>\n+\t  The implementation of <b>erase</b> seems to be more\n+\t  complicated (from libstdc++-v3), but <b>clear</b> is not\n+\t  implemented in gcc 2.95.2's libstdc++, so you should use\n+\t  <b>erase</b> (which is probably faster than\n+\t  <b>operator=(charT*)</b>).\n+\t</p>\n+      </div>\n+      <div class=\"section\" id=\"sec-stringstream\">\n+        <h2 class=\"title\" style=\"clear: all\">\n+          <a name=\"sec-stringstream\"><b>11. Using stringstream's</b></a>\n+        </h2>\n+        <p>\n+\t  Libstdc++-v3 includes the new\n+\t  <b>i/ostringstream</b>-classes, (<tt>&lt;sstream&gt;</tt>), but with older\n+\t  implementations you still have to use <b>i/ostrstream</b>\n+\t  (<tt>&lt;strstream&gt;</tt>):\n+\t  <pre class=\"programlisting\">\n+\t\t#ifdef HAVE_SSTREAM\n+\t\t#include &lt;sstream&gt;\n+\t\t#else\n+\t\t#include &lt;strstream&gt;\n+\t\t#endif\n+\t  </pre>\n+\t  <div class=\"itemizedlist\">\n+            <ul>\n+              <li>\n+                <a name=\"N3595\"></a>\n+                <p> <b>strstream</b> is considered to be\n+\t\t\tdeprecated\n+\t\t  </p>\n+              </li>\n+              <li>\n+                <a name=\"N3603\"></a>\n+                <p> <b>strstream</b> is limited to\n+\t\t\t<b>char</b>\n+\t\t  </p>\n+              </li>\n+              <li>\n+                <a name=\"N3614\"></a>\n+                <p> with <b>ostringstream</b> you don't\n+\t\t\thave to take care of terminating the string or freeing its\n+\t\t\tmemory\n+\t\t  </p>\n+              </li>\n+              <li>\n+                <a name=\"N3622\"></a>\n+                <p> <b>istringstream</b> can be re-filled\n+\t\t\t(clear(); str(input);)\n+\t\t  </p>\n+              </li>\n+            </ul>\n+          </div>\n+\t</p>\n+        <p>\n+\t  You can then use output-stringstreams like this:\n+\t  <pre class=\"programlisting\">\n+\t\t#ifdef HAVE_SSTREAM\n+\t\tstd::ostringstream oss;\n+\t\t#else\n+\t\tstd::ostrstream oss;\n+\t\t#endif\n+\t\toss &lt;&lt; \"Name=\" &lt;&lt; m_name &lt;&lt; \", number=\" &lt;&lt; m_number &lt;&lt; std::endl;\n+\t\t...\n+\t\t#ifndef HAVE_SSTREAM\n+\t\toss &lt;&lt; std::ends; // terminate the char*-string\n+\t\t#endif\n+\t\t// str() returns char* for ostrstream and a string for ostringstream\n+\t\t// this also causes ostrstream to think that the buffer's memory\n+\t\t// is yours\n+\t\tm_label.set_text(oss.str());\n+\t\t#ifndef HAVE_SSTREAM\n+\t\t// let the ostrstream take care of freeing the memory\n+\t\toss.freeze(false);\n+\t\t#endif\n+\t  </pre>\n+\t</p>\n+        <p>\n+\t  Input-stringstreams can be used similarly:\n+\t  <pre class=\"programlisting\">\n+\t\tstd::string input;\n+\t\t...\n+\t\t#ifdef HAVE_SSTREAM\n+\t\tstd::istringstream iss(input);\n+\t\t#else\n+\t\tstd::istrstream iss(input.c_str());\n+\t\t#endif\n+\t\tint i;\n+\t\tiss &gt;&gt; i; \n+\t  </pre>\n+\t  One (the only?) restriction is that an istrstream cannot be re-filled:\n+\t  <pre class=\"programlisting\">\n+\t\tstd::istringstream iss(numerator);\n+\t\tiss &gt;&gt; m_num;\n+\t\t// this is not possible with istrstream\n+\t\tiss.clear();\n+\t\tiss.str(denominator);\n+\t\tiss &gt;&gt; m_den;\n+\t  </pre>\n+\t  If you don't care about speed, you can put these conversions in\n+\t  a template-function:\n+\t  <pre class=\"programlisting\">\n+\t\ttemplate &lt;class X&gt;\n+\t\tvoid fromString(const string&amp; input, X&amp; any)\n+\t\t{\n+\t\t#ifdef HAVE_SSTREAM\n+\t\tstd::istringstream iss(input);\n+\t\t#else\n+\t\tstd::istrstream iss(input.c_str());\n+\t\t#endif\n+\t\tX temp;\n+\t\tiss &gt;&gt; temp;\n+\t\tif (iss.fail())\n+\t\t   throw runtime_error(..)\n+\t\tany = temp;\n+\t\t}\n+\t  </pre>\n+\t</p>\n+        <p>\n+\t  I have read the Josuttis book on Standard C++, so some information\n+\t  comes from there. Additionally, there is information in\n+\t  \"info iostream\", which covers the old implementation that gcc 2.95.2\n+\t  uses.\n+\t</p>\n+      </div>\n       <div class=\"section\" id=\"sec-about\">\n         <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-about\"><b>7. About...</b></a>\n+          <a name=\"sec-about\"><b>12. About...</b></a>\n         </h2>\n         <p>\n \t  Please send any experience, additions, corrections or questions to"}]}