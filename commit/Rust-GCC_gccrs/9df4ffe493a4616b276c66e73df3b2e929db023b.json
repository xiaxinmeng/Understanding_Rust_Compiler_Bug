{"sha": "9df4ffe493a4616b276c66e73df3b2e929db023b", "node_id": "C_kwDOANBUbNoAKDlkZjRmZmU0OTNhNDYxNmIyNzZjNjZlNzNkZjNiMmU5MjlkYjAyM2I", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-14T00:17:19Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-14T00:17:19Z"}, "message": "Daily bump.", "tree": {"sha": "9906da8356de3de21d815d6055920b07eaf5fc02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9906da8356de3de21d815d6055920b07eaf5fc02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9df4ffe493a4616b276c66e73df3b2e929db023b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df4ffe493a4616b276c66e73df3b2e929db023b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9df4ffe493a4616b276c66e73df3b2e929db023b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df4ffe493a4616b276c66e73df3b2e929db023b/comments", "author": null, "committer": null, "parents": [{"sha": "62ecd2b8d46aaf96caef5fa78953216629e49ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ecd2b8d46aaf96caef5fa78953216629e49ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ecd2b8d46aaf96caef5fa78953216629e49ebd"}], "stats": {"total": 875, "additions": 874, "deletions": 1}, "files": [{"sha": "8c42a7ca517dd372ea1690aaf90b11e0a3828250", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,7 @@\n+2022-05-13  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n+\n+\t* MAINTAINERS: Add myself to write after approval.\n+\n 2022-05-11  Kewen Lin  <linkw@linux.ibm.com>\n \n \t* MAINTAINERS: Remove myself from DCO section."}, {"sha": "31c63f69f3e8a5cedabc52033b2cf4970a865586", "filename": "gcc/ChangeLog", "status": "modified", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,260 @@\n+2022-05-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (vec_cmpeqv2div2di): Enable for TARGET_SSE2.\n+\tFor !TARGET_SSE4_1, expand as a V4SI vector comparison, followed\n+\tby a pshufd and pand.\n+\t(vec_cmpeqv1tiv1ti): New define_expand implementing V1TImode\n+\tvector equality as a V2DImode vector comparison (see above),\n+\tfollowed by a pshufd and pand.\n+\n+2022-05-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/83907\n+\t* tree-ssa-strlen.cc (handle_builtin_memset): Record a strinfo\n+\tfor memset with an constant char value.\n+\t(handle_store): Improved handling of stores with a first byte\n+\tof zero, but not storing_all_zeros_p.\n+\n+2022-05-13  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\t    Manolis Tsamis  <manolis.tsamis@vrull.eu>\n+\n+\t* config/riscv/riscv.h (CLZ_DEFINED_VALUE_AT_ZERO): Implement.\n+\t(CTZ_DEFINED_VALUE_AT_ZERO): Same.\n+\t* doc/sourcebuild.texi: add documentation for RISC-V specific\n+\ttest target keywords\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/105597\n+\t* range-op.cc (operator_minus::lhs_op1_relation): Use op1 instead\n+\tof the lhs and make sure it is not undefined.\n+\n+2022-05-13  Sebastian Pop  <spop@amazon.com>\n+\n+\tPR target/105162\n+\t* config/aarch64/aarch64-protos.h (atomic_ool_names): Increase dimension\n+\tof str array.\n+\t* config/aarch64/aarch64.cc (aarch64_atomic_ool_func): Call\n+\tmemmodel_from_int and handle MEMMODEL_SYNC_*.\n+\t(DEF0): Add __aarch64_*_sync functions.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Use new VREL_*\n+\tenumerated values.\n+\t* gimple-range-path.cc (maybe_register_phi_relation): Ditto.\n+\t* range-op.cc (*::lhs_op1_relation): Return relation_kind, and use\n+\tnew VREL enumerated values.\n+\t(*::lhs_op2_relation): Ditto.\n+\t(*::op1_op2_relation): Ditto.\n+\t(*::fold_range): Use new VREL enumerated values.\n+\t(minus_op1_op2_relation_effect): Ditto.\n+\t(range_relational_tests): Ditto.\n+\t* range-op.h (fold_range, op1_range, op2_range): Use VREL_VARYING.\n+\t(lhs_op1_relation, lhs_op2_relation, op1_op2_relation): Return\n+\trelation_kind.\n+\t(*_op1_op2_relation): Return relation_kind.\n+\t(relop_early_resolve): Use VREL_UNDEFINED.\n+\t* value-query.cc (range_query::query_relation): Use VREL_VARYING.\n+\t* value-relation.cc (VREL_LAST): Change enumerated value.\n+\t(vrel_range_assert): Delete.\n+\t(print_relation): Remove range assert.\n+\t(rr_negate_table): Adjust table to use new enumerated values..\n+\t(relation_negate): Remove range assert.\n+\t(rr_swap_table): Adjust.\n+\t(relation_swap): Remove range assert.\n+\t(rr_intersect_table): Adjust.\n+\t(relation_intersect): Remove range assert.\n+\t(rr_union_table): Adjust.\n+\t(relation_union): Remove range assert.\n+\t(rr_transitive_table): Adjust.\n+\t(relation_transitive): Remove range assert.\n+\t(equiv_oracle::query_relation): Use new VREL enumerated values.\n+\t(equiv_oracle::register_relation): Ditto.\n+\t(relation_oracle::register_stmt): Ditto.\n+\t(dom_oracle::set_one_relation): Ditto.\n+\t(dom_oracle::register_transitives): Ditto.\n+\t(dom_oracle::query_relation): Ditto.\n+\t(path_oracle::register_relation): Ditto.\n+\t(path_oracle::query_relation): Ditto.\n+\t* value-relation.h (enum relation_kind_t): New relation_kind.\n+\t(*_op1_op2_relation): Adjust prototypes.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-edge.cc (calc_switch_ranges): Check union return value.\n+\t* value-range.cc (irange::legacy_verbose_union_): Add return value.\n+\t(irange::irange_single_pair_union): New.\n+\t(irange::irange_union): Add return value.\n+\t* value-range.h (class irange): Adjust prototypes.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-range.cc (irange::legacy_verbose_intersect): Add return value.\n+\t(irange::irange_contains_p): New.\n+\t(irange::irange_intersect): Add return value.\n+\t* value-range.h (class irange): Adjust prototypes.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::get_global_range): Return the\n+\thad_global value instead.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/104547\n+\t* gimple-range-fold.cc (fold_using_range::range_of_range_op): Add\n+\tthe op1/op2 relation to the relation call.\n+\t* range-op.cc (*::lhs_op1_relation): Add param.\n+\t(*::lhs_op2_relation): Ditto.\n+\t(operator_minus::lhs_op1_relation): New.\n+\t(range_relational_tests): Add relation param.\n+\t* range-op.h (lhs_op1_relation, lhs_op2_relation): Adjust prototype.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::register_side_effects): First check\n+\tif the DEF should be exported as a global.\n+\t* tree-vrp.cc (rvrp_folder::pre_fold_bb): Process PHI side effects,\n+\twhich will export globals.\n+\t(execute_ranger_vrp): Remove call to export_global_ranges.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (path_oracle::reset_path): Clear killing_defs.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Start with\n+\tworlist truncated.\n+\t(ranger_cache::entry_range): Add rfd_mode parameter.\n+\t(ranger_cache::exit_range): Ditto.\n+\t(ranger_cache::edge_range): New.  Incorporate from range_on_edge.\n+\t(ranger_cache::range_of_expr): Adjust call to entry_range.\n+\t(ranger_cache::range_on_edge): Split to edge_range and call.\n+\t(ranger_cache::fill_block_cache): Always invoke range_from_dom.\n+\t(ranger_cache::range_from_dom): Make reentrant, add search mode, handle\n+\tmutiple predecessors.\n+\t(ranger_cache::update_to_nonnull): Adjust call to exit_range.\n+\t* gimple-range-cache.h (ranger_cache): Add enum rfd_mode.  Adjust\n+\tprototypes.\n+\n+2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gimple-harden-conditionals.cc: Include sbitmap.h.\n+\t(pass_harden_conditional_branches::execute): Skip new blocks.\n+\t(pass_harden_compares::execute): Likewise.\n+\n+2022-05-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/105463\n+\t* config/arm/mve.md (*movmisalign<mode>_mve_store): Use\n+\tmve_memory_operand.\n+\t(*movmisalign<mode>_mve_load): Likewise.\n+\t* config/arm/vec-common.md (movmisalign<mode>): Convert to generator\n+\tform...\n+\t(@movmisalign<mode>): ... thus.  Use generic predicates and then\n+\trework operands if they are not valid.  For MVE rework to a\n+\tnarrower element size if the alignment is not high enough.\n+\n+2022-05-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.cc (mve_vector_mem_operand): Allow SP_REGNUM\n+\twhen there is no write-back.  Fix use when strict is true.\n+\n+2022-05-13  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.h (TARGET_HAS_NO_HW_DIVIDE): New macro\n+\tdefinition.\n+\n+2022-05-13  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.md (extvsi, extvsi_internal, extzvsi,\n+\textzvsi_internal): Rename from extv, extv_internal, extzv and\n+\textzv_internal, respectively.\n+\n+2022-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-sra.cc (sra_modify_assign): Check that scalar storage order\n+\tis the same on the LHS and RHS before rewriting one with the model\n+\tof the other.\n+\n+2022-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.cc (gimple_build): Adjust for new\n+\tmain API.\n+\t* gimple-fold.h (gimple_build): New main APIs with\n+\titerator, insert direction and iterator update.\n+\t(gimple_build): New forwarder template.\n+\t(clear_padding_type_may_have_padding_p): Remove.\n+\t(clear_type_padding_in_mask): Likewise.\n+\t(arith_overflowed_p): Likewise.\n+\t* fold-const.h (clear_padding_type_may_have_padding_p): Declare.\n+\t(clear_type_padding_in_mask): Likewise.\n+\t(arith_overflowed_p): Likewise.\n+\t* tree-vect-generic.cc (gimplify_build3): Use main gimple_build API.\n+\t(gimplify_build2): Likewise.\n+\t(gimplify_build1): Likewise.\n+\t* ubsan.cc (ubsan_expand_ptr_ifn): Likewise, avoid extra\n+\tcompare stmt.\n+\t* gengtype.cc (open_base_files): Re-order includes.\n+\t* builtins.cc: Re-order gimple-fold.h include.\n+\t* calls.cc: Likewise.\n+\t* cgraphbuild.cc: Likewise.\n+\t* cgraphunit.cc: Likewise.\n+\t* config/rs6000/rs6000-builtin.cc: Likewise.\n+\t* config/rs6000/rs6000-call.cc: Likewise.\n+\t* config/rs6000/rs6000.cc: Likewise.\n+\t* config/s390/s390.cc: Likewise.\n+\t* expr.cc: Likewise.\n+\t* fold-const.cc: Likewise.\n+\t* function-tests.cc: Likewise.\n+\t* gimple-match-head.cc: Likewise.\n+\t* gimple-range-fold.cc: Likewise.\n+\t* gimple-ssa-evrp-analyze.cc: Likewise.\n+\t* gimple-ssa-evrp.cc: Likewise.\n+\t* gimple-ssa-sprintf.cc: Likewise.\n+\t* gimple-ssa-warn-access.cc: Likewise.\n+\t* gimplify.cc: Likewise.\n+\t* graphite-isl-ast-to-gimple.cc: Likewise.\n+\t* ipa-cp.cc: Likewise.\n+\t* ipa-devirt.cc: Likewise.\n+\t* ipa-prop.cc: Likewise.\n+\t* omp-low.cc: Likewise.\n+\t* pointer-query.cc: Likewise.\n+\t* range-op.cc: Likewise.\n+\t* tree-cfg.cc: Likewise.\n+\t* tree-if-conv.cc: Likewise.\n+\t* tree-inline.cc: Likewise.\n+\t* tree-object-size.cc: Likewise.\n+\t* tree-ssa-ccp.cc: Likewise.\n+\t* tree-ssa-dom.cc: Likewise.\n+\t* tree-ssa-forwprop.cc: Likewise.\n+\t* tree-ssa-ifcombine.cc: Likewise.\n+\t* tree-ssa-loop-ivcanon.cc: Likewise.\n+\t* tree-ssa-math-opts.cc: Likewise.\n+\t* tree-ssa-pre.cc: Likewise.\n+\t* tree-ssa-propagate.cc: Likewise.\n+\t* tree-ssa-reassoc.cc: Likewise.\n+\t* tree-ssa-sccvn.cc: Likewise.\n+\t* tree-ssa-strlen.cc: Likewise.\n+\t* tree-ssa.cc: Likewise.\n+\t* value-pointer-equiv.cc: Likewise.\n+\t* vr-values.cc: Likewise.\n+\n+2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR rtl-optimization/105455\n+\t* gimple-harden-conditionals.cc (insert_check_and_trap): Set\n+\tprobabilities for newly-conditional edges.\n+\n+2022-05-13  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/102583\n+\t* tree-ssa-forwprop.cc (simplify_bitfield_ref): Extended to a\n+\tcontiguous stride in the VEC_PERM_EXPR.\n+\n 2022-05-12  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/105577"}, {"sha": "8ab2db9cdf6af009b8d817b2cd5b2b4d95555f37", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1 +1 @@\n-20220513\n+20220514"}, {"sha": "d09eeb9c0b9b4f32947c47c7384ffe1c2d6c1db6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 300, "deletions": 0, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,303 @@\n+2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc-interface/decl.cc (is_cplusplus_method): Build proper\n+\tString for Get_External_Name.\n+\n+2022-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprogram): For a function, also copy the\n+\tReturns_By_Ref flag from the parent.\n+\n+2022-05-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Aspect_At_Freeze_Point): Analyze the\n+\texpression of the aspect at this point, like other aspects that\n+\tdenote simple entities. Ensures that function\n+\tStorage_Model_Object will have an entity to retrieve from the\n+\taspect expression. Also, move comment about aspects that don't\n+\trequire delay analysis in front of last alternative of the case\n+\tstatement, where it's supposed to be.\n+\n+2022-05-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* contracts.adb (Build_Unique_Name): New subprogram.\n+\t(Make_Class_Precondition_Subps): Use Build_Unique_Name to\n+\tgenerate the names of the call helpers and the name of indirect\n+\tcall wrappers.\n+\t* freeze.adb (Needs_Wrapper): Remove dead code.\n+\t(Check_Inherited_Conditions): Defer building helpers and ICW\n+\tuntil all the dispatch table wrappers have been built and\n+\tanalyzed. Required to ensure uniqueness in their names because\n+\twhen building these wrappers for overlapped subprograms their\n+\thomonym number is not definite until they have been analyzed.\n+\n+2022-05-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnarl/s-taprop__linux.adb (Initialize): Do not use an\n+\talternate stack if no handler for SEGV is installed.\n+\n+2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst (Control Flow\n+\tRedundancy): Drop mentions of noreturn and tail calls.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-13  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* ali.adb: Introduce new 'K' line in ALI files, used to\n+\trepresent CUDA kernel entries.\n+\t* ali.ads: Create new CUDA_Kernels table, which contains entries\n+\tof type CUDA_Kernel_Record. Each CUDA_Kernel_Record corresponds\n+\tto a K line in an ali file.\n+\t* bindgen.adb: Introduce new Gen_CUDA_Init procedure in the\n+\tbinder, which generates CUDA kernel registration code.\n+\t* gnat_cuda.adb: Move Get_CUDA_Kernels spec to package spec to\n+\tmake it available to bindgen.adb.\n+\t* gnat_cuda.ads: Likewise.\n+\t* lib-writ.adb: Introduce new Output_CUDA_Symbols procedure,\n+\twhich generates one 'K' line in the ALI file per visible CUDA\n+\tkernel.\n+\t* opt.ads: Introduce Enable_CUDA_Expansion option, triggered by\n+\tusing the -gnatd_c flag.\n+\t* switch-b.adb: Likewise.\n+\t* switch-c.adb: Likewise.\n+\n+2022-05-13  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* exp_aggr.adb (Gen_Loop): Create scope for loop variable of\n+\titerated components.\n+\n+2022-05-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-chtgfk.adb (Checked_Equivalent_Keys, Checked_Index):\n+\tRemove useless functions.\n+\t(Delete_Key_Sans_Free, Find, Generic_Conditional_Insert): Adapt\n+\tto removal of wrapper functions.\n+\t* libgnat/a-chtgfk.ads (Checked_Equivalent_Keys, Checked_Index):\n+\tRemove useless functions.\n+\t* libgnat/a-chtgfo.adb (Checked_Index): Remove useless function.\n+\t(Clear): Delete code commented out regarding Busy and Lock\n+\tmanagement.\n+\t(Delete_Node_At_Index): Delete unused procedure.\n+\t(Delete_Node_Sans_Free, Free, Generic_Read, Next): Adapt to\n+\tremoval of wrapper functions.\n+\t* libgnat/a-chtgfo.ads (Checked_Index): Remove useless function.\n+\t(Delete_Node_At_Index): Delete unused procedure.\n+\n+2022-05-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-cfhama.adb (Generic_Allocate): Retype to avoid\n+\taliasing.\n+\t(Assign, Move): Remove address comparison.\n+\t(Include): Insert constants for subtype constraints.\n+\t(Insert): Rewrite to avoid aliasing and function with side-effects.\n+\t* libgnat/a-cfhase.adb (Generic_Allocate): Retype to avoid\n+\taliasing.\n+\t(Assign, Move): Remove address comparison.\n+\t(Difference, Intersection, Is_Subset, Overlap,\n+\tSymmetric_Difference, Union): Remove address comparison.  Insert\n+\tconstants for subtype constraints.\n+\t(Insert): Rewrite to avoid aliasing and function with\n+\tside-effects.\n+\t* libgnat/a-chtgfk.adb (Checked_Equivalent_Keys, Checked_Index,\n+\tDelete_Key_Sans_Free, Find, Generic_Replace_Element, Index):\n+\tType for hash tables not tagged anymore.\n+\t(Generic_Conditional_Insert): New_Node generic formal is a\n+\tprocedure taking the hash table as first parameter now, to avoid\n+\taliasing in the caller.\n+\t* libgnat/a-chtgfk.ads: Same.\n+\t* libgnat/a-chtgfo.adb (Checked_Index, Clear,\n+\tDelete_Node_At_Index, Delete_Node_Sans_Free, First, Free,\n+\tGeneric_Allocate, Generic_Iteration, Generic_Read,\n+\tGeneric_Write, Index, Next): Type for hash tables not tagged\n+\tanymore.\n+\t(Generic_Equal): Removed tagged. Remove address comparison.\n+\t* libgnat/a-chtgfo.ads: Same.\n+\t* libgnat/a-cohata.ads (Hash_Table_Type): Remove tagged.\n+\n+2022-05-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* Makefile.rtl: Add new files.\n+\t* libgnat/a-cfhama.adb: Use formal version of hash tables.\n+\t* libgnat/a-cfhama.ads: Same.\n+\t* libgnat/a-cfhase.adb: Same.\n+\t* libgnat/a-cfhase.ads: Same.\n+\t* libgnat/a-chtgfk.adb: New unit for formal containers, modified\n+\tversion of Generic_Bounded_Keys.\n+\t* libgnat/a-chtgfk.ads: Same.\n+\t* libgnat/a-chtgfo.adb: New unit for formal containers, modified\n+\tversion of Generic_Bounded_Operations.\n+\t* libgnat/a-chtgfo.ads: Same.\n+\t* libgnat/a-cohata.ads (Generic_Formal_Hash_Table_Types): Third\n+\tversion of the type for hash tables, equivalent to the bounded\n+\tversion without tampering checks.\n+\n+2022-05-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* freeze.adb (Check_Inherited_Conditions): Dispatch table\n+\twrappers must be placed in the list of entities of their scope\n+\tat the same place of their wrapped primitive. This is required\n+\tfor private types since these wrappers are built when their full\n+\ttagged type declaration is frozen but they may override a\n+\tprimitive defined in the public part of the package (and it is\n+\timportant to maintain the wrapper in the list of public entities\n+\tof the package to ensure their correct visibility).\n+\n+2022-05-13  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* osint.ads, osint.adb (Relocate_Path): If the GNSA_ROOT\n+\tenvironment variable is set, we use that as the prefix, instead\n+\tof computing the prefix from the executable location.\n+\n+2022-05-13  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch3.ads (Build_Intialization_Call): Add new formal\n+\tparameter, Init_Control_Actual, with default value. Clients\n+\toutside of package Exp_Ch3 are unaffected.\n+\t* exp_ch3.adb (Initialization_Control): new package; support for\n+\tthis 4-valued parameter.  The existing Requires_Late_Init\n+\tfunction is moved into this new package.\n+\t(Build_Initialization_Call): Add new formal parameter for\n+\tsubprogram body, use this new formal parameter in generating an\n+\tinit proc call.\n+\t(Build_Record_Init_Proc): Replace Set_Tag Boolean formal\n+\tparameter with 4-valued Init_Control_Formal. Wrap if-statements\n+\twith appropriate conditions around tag initialization, early\n+\tinitialization, and late initialization statements.\n+\t* exp_util.adb (Build_Task_Image_Decl): Avoid problem with\n+\tduplicate declarations when an init proc for a type extension\n+\tcalls the parent type's init proc twice.\n+\n+2022-05-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Fix Typ in the\n+\tcase of a class-wide derived iterator.\n+\n+2022-05-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-strbou.ads (Overwrite): Switch to >= operator in\n+\tcontracts.\n+\t* libgnat/a-strsup.adb (Super_Overwrite): Switch to >= operator\n+\tin code of procedure (function already uses it).\n+\t* libgnat/a-strsup.ads (Super_Overwrite): Switch to >= operator\n+\tin contracts.\n+\n+2022-05-13  Etienne Servais  <servais@adacore.com>\n+\n+\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Fix code\n+\tsnippet.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* aspects.adb (Find_Value_Of_Aspect): Add guard.\n+\t* sem_ch4.adb (Complete_Object_Operation): Remove obsolete code.\n+\t* sem_ch5.adb (Has_Sec_Stack_Default_Iterator): Add guard.\n+\n+2022-05-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): The expansion of\n+\t'Address in a call to an instantiation of the implicit\n+\tsubprogram To_Pointer with a class-wide interface type target\n+\trequires adding an implicit type conversion to force\n+\tdisplacement of the \"this\" pointer.\n+\n+2022-05-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute): Ensure that attribute\n+\texpressions are resolved at this stage; required for preanalyzed\n+\treferences to discriminants since their resolution (and\n+\texpansion) will take care of updating their Entity attribute to\n+\treference their discriminal.\n+\n+2022-05-13  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Wrong_Type): Avoid using the first subtype of\n+\tthe expected type in error messages when the expected type is\n+\tnot internally generated.\n+\n+2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst: Add subsection on\n+\tControl Flow Redundancy.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Insert_Actions) <N_Iteration_Scheme>: Check that\n+\tit is a WHILE iteration scheme before using Condition_Actions.\n+\n+2022-05-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* atree.adb, gen_il-gen.adb, osint.adb, set_targ.adb,\n+\tsinput.adb, table.adb, treepr.adb, types.ads: Replace uses of\n+\tUnchecked_Conversion in the compiler itself.\n+\t* libgnarl/a-reatim.adb, libgnarl/s-osinte__gnu.ads,\n+\tlibgnarl/s-osinte__kfreebsd-gnu.ads, libgnat/a-coboho.adb,\n+\tlibgnat/a-stuten.ads, libgnat/s-putima.adb: Likewise in the\n+\truntime.\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Likewise in\n+\tdocumentation.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-05-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* butil.adb, sem.adb, sinput.adb, types.ads, xref_lib.adb:\n+\tReplace uses of Unchecked_Deallocation with\n+\tAda.Unchecked_Deallocation.\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Likewise for the\n+\tdocumentation; fix casing of GNAT.IO.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-05-13  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Fix ARM reference.\n+\tRemove useless loop.\n+\n+2022-05-13  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Fix typo in\n+\tcomment.\n+\n+2022-05-13  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Return_Construct_Accessibility): Modify\n+\tgeneration of run-time accessibility checks to account for cases\n+\twhere Extra_Accessibility_Of_Result should be used versus the\n+\tlevel of the enclosing subprogram. Use original node to avoid\n+\tchecking against expanded code. Disable check generation for\n+\ttagged type case.\n+\t(Is_Formal_Of_Current_Function): Added to encompass a predicate\n+\tused within Check_Return_Construct_Accessibility to test if an\n+\tassociated expression is related to a relevant formal.\n+\t* sem_util.adb, sem_util.ads (Enclosing_Subprogram): Modified to\n+\taccept Node_Or_Entity_Id.\n+\t(Innermost_Master_Scope_Depth): Calculate level based on the\n+\tsubprogram of a return statement instead of the one returned by\n+\tCurrent_Subprogram.\n+\t(Needs_Result_Accessibility_Level): Remove\n+\tDisable_Coextension_Cases constant, and disable the tagged type\n+\tcase for performance reasons.\n+\n+2022-05-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Flag_Effectively_Volatile_Objects): Ignore\n+\tcomponent and discriminant identifiers.\n+\n+2022-05-13  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Flag_Effectively_Volatile_Objects): Remove\n+\tredundant guard.\n+\n+2022-05-13  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch8.adb (Determine_Package_Scope): Created to centralize\n+\tthe calculation of which package a given use clause belongs to.\n+\t(Most_Descendant_Use_Clause): Modified to call\n+\tDetermine_Package_Scope.\n+\t* sem_util.adb, sem_util.ads (Enclosing_Package): Modified to\n+\thandle both entity and node ids.\n+\n 2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* gnat1drv.adb (Gnat1drv): Skip postponed checks when there are"}, {"sha": "5a9551b64010ea26a43681552cd7da2a144c0f03", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,7 @@\n+2022-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* supergraph.cc: Re-order gimple-fold.h include.\n+\n 2022-05-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.cc (state_change_event::get_desc): Call maybe_free"}, {"sha": "0d2b277f0a07d7384a776c452301e65ae3dc407e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,7 @@\n+2022-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-omp.cc: Remove gimple-fold.h include.\n+\n 2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.h (enum rid): Add RID_OMP_ALL_MEMORY."}, {"sha": "090124f0bc53170d525c50567783bb40d131341a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,11 @@\n+2022-05-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* mangle.cc (maybe_write_module): Check external linkage.\n+\n+2022-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* constexpr.cc: Remove gimple-fold.h include.\n+\n 2022-05-12  Patrick Palka  <ppalka@redhat.com>\n \n \t* cp-tree.h (TMPL_ARGS_LEVEL): Assert LEVEL is 1 when"}, {"sha": "b4f2ff89c587fe199ef98759e81aab4bb0fbe54d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,9 @@\n+2022-05-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): When mapping nondescriptor\n+\tarray sections, use GOMP_MAP_FIRSTPRIVATE_POINTER instead of\n+\tGOMP_MAP_POINTER for the pointer attachment.\n+\n 2022-05-11  Harald Anlauf  <anlauf@gmx.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "3109d8e6ea28aea42399ce217d8585064f08ae5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,150 @@\n+2022-05-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/81952\n+\t* g++.dg/overload/conv-op4.C: New test.\n+\n+2022-05-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse2-v1ti-veq.c: New test case.\n+\t* gcc.target/i386/sse2-v1ti-vne.c: New test case.\n+\n+2022-05-13  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* g++.target/powerpc/pr65240-1.C: Adjust DejaGnu directives.\n+\t* g++.target/powerpc/pr65240-2.C: Likewise.\n+\t* g++.target/powerpc/pr65240-3.C: Likewise.\n+\t* g++.target/powerpc/pr65240-4.C: Likewise.\n+\t* g++.target/powerpc/pr65242.C: Likewise.\n+\t* g++.target/powerpc/pr67211.C: Likewise.\n+\t* g++.target/powerpc/pr69667.C: Likewise.\n+\t* g++.target/powerpc/pr71294.C: Likewise.\n+\n+2022-05-13  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* g++.dg/pr65240.h: Move to g++.target/powerpc.\n+\t* g++.dg/pr93974.C: Likewise.\n+\t* g++.dg/pr65240-1.C: Move to g++.target/powerpc, adjust dg directives.\n+\t* g++.dg/pr65240-2.C: Likewise.\n+\t* g++.dg/pr65240-3.C: Likewise.\n+\t* g++.dg/pr65240-4.C: Likewise.\n+\t* g++.dg/pr65242.C: Likewise.\n+\t* g++.dg/pr67211.C: Likewise.\n+\t* g++.dg/pr69667.C: Likewise.\n+\t* g++.dg/pr71294.C: Likewise.\n+\t* g++.dg/pr84264.C: Likewise.\n+\t* g++.dg/pr84279.C: Likewise.\n+\t* g++.dg/pr85657.C: Likewise.\n+\t* g++.target/powerpc/pr65240-1.C: New file.\n+\t* g++.target/powerpc/pr65240-2.C: New file.\n+\t* g++.target/powerpc/pr65240-3.C: New file.\n+\t* g++.target/powerpc/pr65240-4.C: New file.\n+\t* g++.target/powerpc/pr65240.h: New file.\n+\t* g++.target/powerpc/pr65242.C: New file.\n+\t* g++.target/powerpc/pr67211.C: New file.\n+\t* g++.target/powerpc/pr69667.C: New file.\n+\t* g++.target/powerpc/pr71294.C: New file.\n+\t* g++.target/powerpc/pr84264.C: New file.\n+\t* g++.target/powerpc/pr84279.C: New file.\n+\t* g++.target/powerpc/pr85657.C: New file.\n+\t* g++.target/powerpc/pr93974.C: New file.\n+\n+2022-05-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/83907\n+\t* gcc.dg/tree-ssa/pr83907-1.c: New test case.\n+\t* gcc.dg/tree-ssa/pr83907-2.c: New test case.\n+\n+2022-05-13  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\t    Manolis Tsamis  <manolis.tsamis@vrull.eu>\n+\n+\t* gcc.dg/pr90838.c: Add additional flags (dg-additional-options)\n+\t  when compiling for riscv64 and subsume gcc.target/aarch64/pr90838.c\n+\t  and gcc.target/i386/pr95863-2.c.\n+\t* gcc.target/aarch64/pr90838.c: Removed.\n+\t* gcc.target/i386/pr95863-2.c: Removed.\n+\t* lib/target-supports.exp: Recognize RV32 or RV64 via XLEN\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/105597\n+\t* gcc.dg/pr105597.c: New.\n+\n+2022-05-13  Sebastian Pop  <spop@amazon.com>\n+\n+\tPR target/105162\n+\t* gcc.target/aarch64/sync-comp-swap-ool.c: New.\n+\t* gcc.target/aarch64/sync-op-acquire-ool.c: New.\n+\t* gcc.target/aarch64/sync-op-full-ool.c: New.\n+\t* gcc.target/aarch64/target_attr_20.c: Update check.\n+\t* gcc.target/aarch64/target_attr_21.c: Same.\n+\n+2022-05-13  Palmer Dabbelt  <palmer@rivosinc.com>\n+\n+\t* gcc.dg/debug/btf/btf-datasec-1.c: Don't use small data on RISC-V.\n+\n+2022-05-13  Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\n+\t* g++.dg/opt/const7.C: Don't use small data on RISC-V.\n+\n+2022-05-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* g++.dg/pr104547.C: New.\n+\n+2022-05-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/mod-sym-4.C: New.\n+\n+2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gnat.dg/hardbool.ads: New.\n+\t* gnat.dg/hardbool.adb: New.\n+\n+2022-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/sso17.adb: New test.\n+\n+2022-05-13  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/attributes_7.c: Make\n+\tdiagnostic unique.\n+\n+2022-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/plugin/diagnostic_group_plugin.c: Reorder or remove\n+\tgimple-fold.h include.\n+\t* gcc.dg/plugin/diagnostic_plugin_show_trees.c:\n+\tLikewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_inlining.c:\n+\tLikewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_metadata.c:\n+\tLikewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_paths.c:\n+\tLikewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c:\n+\tLikewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_string_literals.c: Likewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_tree_expression_range.c:\n+\tLikewise.\n+\t* gcc.dg/plugin/finish_unit_plugin.c: Likewise.\n+\t* gcc.dg/plugin/ggcplug.c: Likewise.\n+\t* gcc.dg/plugin/must_tail_call_plugin.c: Likewise.\n+\t* gcc.dg/plugin/one_time_plugin.c: Likewise.\n+\t* gcc.dg/plugin/selfassign.c: Likewise.\n+\t* gcc.dg/plugin/start_unit_plugin.c: Likewise.\n+\t* g++.dg/plugin/selfassign.c: Likewise.\n+\n+2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR rtl-optimization/105455\n+\t* gcc.dg/pr105455.c: New.\n+\n+2022-05-13  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr102583.c: New test.\n+\t* gcc.target/i386/pr92645-2.c: Adjust testcase.\n+\t* gcc.target/i386/pr92645-3.c: Ditto.\n+\n 2022-05-12  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.target/powerpc/pr101168.C: Require VSX."}, {"sha": "5d351a6bc506992d7bc6ca777141352e883bfa84", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,9 @@\n+2022-05-13  Sebastian Pop  <spop@amazon.com>\n+\n+\tPR target/105162\n+\t* config/aarch64/lse.S: Define BARRIER and handle memory MODEL 5.\n+\t* config/aarch64/t-lse: Add a 5th memory model for _sync functions.\n+\n 2022-05-10  Martin Liska  <mliska@suse.cz>\n \t    Hans-Peter Helfert  <peter-helfert@t-online.de>\n "}, {"sha": "3f21ffb03c13d7321e26c476ef9c9147e459fabd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,19 @@\n+2022-05-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/target-nowait-array-section.f90: New test.\n+\n+2022-05-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/target-nowait-array-section.f90: New test.\n+\n+2022-05-13  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/Makefrag.am (libgomp_plugin_nvptx_la_CPPFLAGS)\n+\t[PLUGIN_NVPTX_DYNAMIC]: Don't append '$(PLUGIN_NVPTX_CPPFLAGS)'.\n+\t(libgomp_plugin_nvptx_la_LDFLAGS) [PLUGIN_NVPTX_DYNAMIC]: Don't\n+\tappend '$(PLUGIN_NVPTX_LDFLAGS)'.\n+\t* Makefile.in: Regenerate.\n+\n 2022-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* Makefile.am (libgomp_la_LIBADD): Initialize."}, {"sha": "e6c2bb5bedae3803d0b7a688e3ed56ae4e1266b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df4ffe493a4616b276c66e73df3b2e929db023b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df4ffe493a4616b276c66e73df3b2e929db023b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9df4ffe493a4616b276c66e73df3b2e929db023b", "patch": "@@ -1,3 +1,124 @@\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_thread.h (thread::_State, thread::_State_ptr):\n+\tDeclare as private unless _GLIBCXX_THREAD_IMPL is defined.\n+\t* src/c++11/thread.cc (_GLIBCXX_THREAD_IMPL): Define.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future (launch): Make operators noexcept.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Replace __exception_ptr\n+\twith \"__unspecified__\".\n+\t* libsupc++/exception_ptr.h: Improve doxygen docs.\n+\t(__exception_ptr::swap): Also declare in namespace std.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/nested_exception.h (throw_with_nested) [C++17]: Use\n+\tif-constexpr instead of tag dispatching.\n+\t(rethrow_if_nested) [C++17]: Likewise.\n+\t(rethrow_if_nested) [!__cpp_rtti]: Do not use dynamic_cast if it\n+\twould require RTTI.\n+\t* testsuite/18_support/nested_exception/rethrow_if_nested-term.cc:\n+\tNew test.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Define\n+\t_GTHREAD_USE_MUTEX_TIMEDLOCK macro.\n+\t* include/bits/std_mutex.h (mutex, lock_guard): Use @since and\n+\t@headerfile.\n+\t* include/bits/unique_lock.h (unique_lock): Likewise.\n+\t* include/std/mutex (recursive_mutex, timed_mutex)\n+\t(recursive_timed_mutex, scoped_lock): Likewise.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Define\n+\t_GLIBCXX23_CONSTEXPR macro.\n+\t* include/backward/auto_ptr.h (auto_ptr): Use @deprecated.\n+\t* include/bits/unique_ptr.h (default_delete): Use @since and\n+\t@headerfile.\n+\t* include/std/scoped_allocator: Remove @ingroup from @file\n+\tblock.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_thread.h (thread, thread::id): Improve\n+\tdoxygen docs.\n+\t* include/std/future: Likewise.\n+\t* include/std/thread (jthread): Likewise.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ostream_insert.h: Mark helper functions as\n+\tundocumented by Doxygen.\n+\t* include/bits/stl_algo.h: Use markdown for formatting and mark\n+\thelper functions as undocumented.\n+\t* include/bits/stl_numeric.h:  Likewise.\n+\t* include/bits/stl_pair.h (pair): Add @headerfile.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Define __allocator_base\n+\tso that Doxygen shows the right base-class for std::allocator.\n+\t* include/bits/alloc_traits.h: Improve doxygen docs.\n+\t* include/bits/allocator.h: Likewise.\n+\t* include/bits/new_allocator.h: Likewise.\n+\t* include/ext/new_allocator.h: Likewise.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Define macro\n+\t_GLIBCXX_DOXYGEN_ONLY to expand its argument.\n+\t* include/bits/c++config (_GLIBCXX_DOXYGEN_ONLY): Define.\n+\t* include/bits/regex.h: Improve doxygen docs.\n+\t* include/bits/regex_constants.h: Likewise.\n+\t* include/bits/regex_error.h: Likewise.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/atomic: Suppress doxygen docs for\n+\timplementation details.\n+\t* include/bits/atomic_base.h: Likewise.\n+\t* include/bits/shared_ptr_atomic.h: Use markdown. Fix grouping\n+\tso that std::atomic is not added to the pointer abstractions\n+\tgroup.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/system_error: Improve doxygen comments.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ptr_traits.h: Add some doxygen comments.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Expand new macros to\n+\tnothing.\n+\t* include/bits/c++config (_GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE)\n+\t(_GLIBCXX_END_INLINE_ABI_NAMESPACE): Define new macros.\n+\t* include/bits/algorithmfwd.h (_V2::__rotate): Use new macros\n+\tfor the namespace.\n+\t* include/bits/chrono.h (chrono::_V2::system_clock): Likewise.\n+\t* include/bits/stl_algo.h (_V2::__rotate): Likewise.\n+\t* include/std/condition_variable (_V2::condition_variable_any):\n+\tLikewise.\n+\t* include/std/system_error (_V2::error_category): Likewise.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/mofunc_impl.h: Fix doxygen command.\n+\n+2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (GROUP_NESTED_COMPOUNDS): Set to NO.\n+\t(CLASS_DIAGRAMS): Remove obsolete option.\n+\n 2022-05-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/locale/dragonfly/numeric_members.cc: Remove whitespace."}]}