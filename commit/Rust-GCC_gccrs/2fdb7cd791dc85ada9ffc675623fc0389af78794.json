{"sha": "2fdb7cd791dc85ada9ffc675623fc0389af78794", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZkYjdjZDc5MWRjODVhZGE5ZmZjNjc1NjIzZmMwMzg5YWY3ODc5NA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-12-30T09:09:07Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-12-30T09:09:07Z"}, "message": "global.c (regclass_intersect): Remove.\n\n\t* global.c (regclass_intersect): Remove.\n\t(mark_reg_use_for_earlyclobber): Use reg_classes_intersect_p instead.\n\nFrom-SVN: r92729", "tree": {"sha": "a530aedece694ab387659c1709e4d6eb9f20abbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a530aedece694ab387659c1709e4d6eb9f20abbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fdb7cd791dc85ada9ffc675623fc0389af78794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdb7cd791dc85ada9ffc675623fc0389af78794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdb7cd791dc85ada9ffc675623fc0389af78794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdb7cd791dc85ada9ffc675623fc0389af78794/comments", "author": null, "committer": null, "parents": [{"sha": "8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "4c3d8a62ef91654b3a42ec9522268662cb444707", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdb7cd791dc85ada9ffc675623fc0389af78794/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdb7cd791dc85ada9ffc675623fc0389af78794/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fdb7cd791dc85ada9ffc675623fc0389af78794", "patch": "@@ -1,3 +1,8 @@\n+2004-12-30  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* global.c (regclass_intersect): Remove.\n+\t(mark_reg_use_for_earlyclobber): Use reg_classes_intersect_p instead.\n+\n 2004-12-30  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_function_value): Use PARALLEL for "}, {"sha": "35fec4a4392d2624a12172443554a41f5ed74308", "filename": "gcc/global.c", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdb7cd791dc85ada9ffc675623fc0389af78794/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdb7cd791dc85ada9ffc675623fc0389af78794/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=2fdb7cd791dc85ada9ffc675623fc0389af78794", "patch": "@@ -309,7 +309,6 @@ static void reg_dies (int, enum machine_mode, struct insn_chain *);\n static void allocate_bb_info (void);\n static void free_bb_info (void);\n static bool check_earlyclobber (rtx);\n-static bool regclass_intersect (enum reg_class, enum reg_class);\n static void mark_reg_use_for_earlyclobber_1 (rtx *, void *);\n static int mark_reg_use_for_earlyclobber (rtx *, void *);\n static void calculate_local_reg_bb_info (void);\n@@ -2180,22 +2179,6 @@ check_earlyclobber (rtx insn)\n   return found;\n }\n \n-/* The function returns true if register classes C1 and C2 intersect.  */\n-\n-static bool\n-regclass_intersect (enum reg_class c1, enum reg_class c2)\n-{\n-  HARD_REG_SET rs, zero;\n-\n-  CLEAR_HARD_REG_SET (zero);\n-  COPY_HARD_REG_SET(rs, reg_class_contents [c1]);\n-  AND_HARD_REG_SET (rs, reg_class_contents [c2]);\n-  GO_IF_HARD_REG_EQUAL (zero, rs, yes);\n-  return true;\n- yes:\n-  return false;\n-}\n-\n /* The function checks that pseudo-register *X has a class\n    intersecting with the class of pseudo-register could be early\n    clobbered in the same insn.\n@@ -2218,11 +2201,12 @@ mark_reg_use_for_earlyclobber (rtx *x, void *data ATTRIBUTE_UNUSED)\n       pref_class = reg_preferred_class (regno);\n       alt_class = reg_alternate_class (regno);\n       for (i = VARRAY_ACTIVE_SIZE (earlyclobber_regclass) - 1; i >= 0; i--)\n-\tif (regclass_intersect (VARRAY_INT (earlyclobber_regclass, i),\n-\t\t\t\tpref_class)\n+\tif (reg_classes_intersect_p (VARRAY_INT (earlyclobber_regclass, i),\n+\t\t\t\t     pref_class)\n \t    || (VARRAY_INT (earlyclobber_regclass, i) != NO_REGS\n-\t\t&& regclass_intersect (VARRAY_INT (earlyclobber_regclass, i),\n-\t\t\t\t       alt_class)))\n+\t\t&& reg_classes_intersect_p (VARRAY_INT (earlyclobber_regclass,\n+\t\t\t\t\t\t\ti),\n+\t\t\t\t\t    alt_class)))\n \t  {\n \t    bitmap_set_bit (bb_info->earlyclobber, regno);\n \t    break;"}]}