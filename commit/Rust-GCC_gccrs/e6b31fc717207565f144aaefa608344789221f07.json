{"sha": "e6b31fc717207565f144aaefa608344789221f07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiMzFmYzcxNzIwNzU2NWYxNDRhYWVmYTYwODM0NDc4OTIyMWYwNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-04T17:06:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-04T17:08:13Z"}, "message": "libstdc++:  Avoid negating a size_t  [pr 94747]\n\nAlthough the code here is well formed, it doesn't show intent well.\nThe reason checkers trigger on this is that it is a cause of real\nbugs.  So, negate a ptrdiff_t instead.\n\n\t* libsupc++/dyncast.cc (__dynamic_cast): Cast offsetof to\n\tptrdiff_t before negation, to show intent more clearly.", "tree": {"sha": "0e4e6a9f0477e50311c78b9be6c4a1af3a0b2f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4e6a9f0477e50311c78b9be6c4a1af3a0b2f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6b31fc717207565f144aaefa608344789221f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b31fc717207565f144aaefa608344789221f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b31fc717207565f144aaefa608344789221f07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b31fc717207565f144aaefa608344789221f07/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6ce5422066b434f51f6475335788541fd82543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6ce5422066b434f51f6475335788541fd82543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6ce5422066b434f51f6475335788541fd82543"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "739ab9eeb290a3d2ad0cabfa34778ede96b3bba1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b31fc717207565f144aaefa608344789221f07/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b31fc717207565f144aaefa608344789221f07/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e6b31fc717207565f144aaefa608344789221f07", "patch": "@@ -1,3 +1,9 @@\n+2020-05-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR libstdc++/94747\n+\t* libsupc++/dyncast.cc (__dynamic_cast): Cast offsetof to\n+\tptrdiff_t before negation, to show intent more clearly.\n+\n 2020-05-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94936"}, {"sha": "7a5f483f9cf55c6bca978d37ac31884540f4bdb0", "filename": "libstdc++-v3/libsupc++/dyncast.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b31fc717207565f144aaefa608344789221f07/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdyncast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b31fc717207565f144aaefa608344789221f07/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdyncast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdyncast.cc?ref=e6b31fc717207565f144aaefa608344789221f07", "patch": "@@ -49,8 +49,8 @@ __dynamic_cast (const void *src_ptr,    // object started from\n   {\n   const void *vtable = *static_cast <const void *const *> (src_ptr);\n   const vtable_prefix *prefix =\n-      adjust_pointer <vtable_prefix> (vtable, \n-\t\t\t\t      -offsetof (vtable_prefix, origin));\n+    (adjust_pointer <vtable_prefix>\n+     (vtable,  -ptrdiff_t (offsetof (vtable_prefix, origin))));\n   const void *whole_ptr =\n       adjust_pointer <void> (src_ptr, prefix->whole_object);\n   const __class_type_info *whole_type = prefix->whole_type;\n@@ -63,8 +63,8 @@ __dynamic_cast (const void *src_ptr,    // object started from\n   // segfault later trying to use a vbase offset that doesn't exist.\n   const void *whole_vtable = *static_cast <const void *const *> (whole_ptr);\n   const vtable_prefix *whole_prefix =\n-    adjust_pointer <vtable_prefix> (whole_vtable,\n-\t\t\t\t    -offsetof (vtable_prefix, origin));\n+    (adjust_pointer <vtable_prefix>\n+     (whole_vtable, -ptrdiff_t (offsetof (vtable_prefix, origin))));\n   if (whole_prefix->whole_type != whole_type)\n     return NULL;\n   \n@@ -75,7 +75,8 @@ __dynamic_cast (const void *src_ptr,    // object started from\n   if (contained_public_p (result.dst2src))\n     // Src is known to be a public base of dst.\n     return const_cast <void *> (result.dst_ptr);\n-  if (contained_public_p (__class_type_info::__sub_kind (result.whole2src & result.whole2dst)))\n+  if (contained_public_p (__class_type_info::__sub_kind\n+\t\t\t  (result.whole2src & result.whole2dst)))\n     // Both src and dst are known to be public bases of whole. Found a valid\n     // cross cast.\n     return const_cast <void *> (result.dst_ptr);"}]}