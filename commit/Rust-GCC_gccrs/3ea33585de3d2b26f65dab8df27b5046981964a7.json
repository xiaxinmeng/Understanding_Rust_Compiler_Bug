{"sha": "3ea33585de3d2b26f65dab8df27b5046981964a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhMzM1ODVkZTNkMmIyNmY2NWRhYjhkZjI3YjUwNDY5ODE5NjRhNw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-03-15T03:05:17Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-03-15T03:05:17Z"}, "message": "PR c++/53792 - [C++11] improving compiler-time constexpr evaluation\n\ngcc/testsuite/ChangeLog:\n2016-03-14  Martin Sebor  <msebor@redhat.com>\n\n\tPR c++/53792\n\t* g++.dg/cpp0x/constexpr-inline.C: New test.\n\t* g++.dg/cpp0x/constexpr-inline-1.C: Same.\n\nFrom-SVN: r234208", "tree": {"sha": "b05cf8fc1e8c4f2b0f08902a4ac834acc5e6c6a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b05cf8fc1e8c4f2b0f08902a4ac834acc5e6c6a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ea33585de3d2b26f65dab8df27b5046981964a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea33585de3d2b26f65dab8df27b5046981964a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea33585de3d2b26f65dab8df27b5046981964a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea33585de3d2b26f65dab8df27b5046981964a7/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08a1cadc10b80f76033d18a8a2b6dfac53926bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a1cadc10b80f76033d18a8a2b6dfac53926bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a1cadc10b80f76033d18a8a2b6dfac53926bdc"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "e9b0a9aeed02e1c27ea5e5a805eb992c30c0cefb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea33585de3d2b26f65dab8df27b5046981964a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea33585de3d2b26f65dab8df27b5046981964a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ea33585de3d2b26f65dab8df27b5046981964a7", "patch": "@@ -1,3 +1,9 @@\n+2016-03-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/53792\n+\t* g++.dg/cpp0x/constexpr-inline.C: New test.\n+\t* g++.dg/cpp0x/constexpr-inline-1.C: Same.\n+\n 2016-03-14  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.dg/torture/pr70083.c: Prune non-standard ABI."}, {"sha": "fed699049124fc495b15b46974f330475d2f6103", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-inline-1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea33585de3d2b26f65dab8df27b5046981964a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inline-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea33585de3d2b26f65dab8df27b5046981964a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inline-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inline-1.C?ref=3ea33585de3d2b26f65dab8df27b5046981964a7", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/53792 - [C++11] improving compiler-time constexpr evaluation\n+//     Test case from comment #8.\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-O1 -fdump-tree-optimized\" }\n+\n+template <class T>\n+void sink (T);\n+  \n+constexpr unsigned foo ()\n+{\n+  unsigned  i = 1;\n+  while ((i << 1) > i)\n+    i = i << 1;\n+\n+  return i;\n+}\n+\n+template <unsigned N>\n+struct S { };\n+\n+void bar ()\n+{\n+  sink (foo ());\n+  sink (S<foo ()>());\n+}\n+\n+// Verify that the call to the foo() constexpr function is inlined\n+// regardless of whether or not it's invoked in a constant expression.\n+// { dg-final { scan-tree-dump-not \"= *foo *\\\\\\(\" \"optimized\" } }"}, {"sha": "d04257c8c33f1215385fb21a4aabe47e01d147d8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-inline.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea33585de3d2b26f65dab8df27b5046981964a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inline.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea33585de3d2b26f65dab8df27b5046981964a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inline.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inline.C?ref=3ea33585de3d2b26f65dab8df27b5046981964a7", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/53792 - [C++11] improving compiler-time constexpr evaluation\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-O1 -fdump-tree-optimized\" }\n+\n+struct entry\n+{\n+  char const* label;\n+  int value;\n+};\n+\n+constexpr bool same (char const *x, char const *y)\n+{\n+  return !*x && !*y ? true : /* default */ (*x == *y && same (x + 1, y + 1)); \n+}\n+\n+constexpr int\n+keyToValue (char const *label, entry const *entries)\n+{ \n+  return !entries->label ? entries->value \n+                         : same (entries->label, label) ? entries->value\n+                         : /* default */ keyToValue (label, entries + 1); \n+}\n+\n+constexpr entry foo[] = {{\"Foo\", 0}, {\"Bar\", 1}, {\"FooBar\", 2}, {0, -1}};\n+\n+int bar ()\n+{\n+  int result = keyToValue (\"Foo\", foo); \n+  return result;\n+}\n+\n+int baz ()\n+{\n+  constexpr int result = keyToValue (\"Foo\", foo); \n+  return result;\n+}\n+\n+// Verify that the call to the keyToValue() constexpr function is inlined\n+// regardless of whether or not it's invoked in a constexpr expression.\n+// { dg-final { scan-tree-dump-not \"keyToValue\" \"optimized\" } }"}]}