{"sha": "370ce32a02500b1394456b4d1ca495e464624cc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcwY2UzMmEwMjUwMGIxMzk0NDU2YjRkMWNhNDk1ZTQ2NDYyNGNjMA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2002-09-06T23:32:13Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2002-09-06T23:32:13Z"}, "message": "c-lang.c (objc_is_id): New stub.\n\n[gcc/ChangeLog]\n2002-09-06  Ziemowit Laski <zlaski@apple.com>\n        * c-lang.c (objc_is_id): New stub.\n        * c-tree.h (objc_is_id): New forward declaration.\n        * c-typeck.c (build_c_cast): Do not strip protocol\n        qualifiers from 'id' type.\n        * objc/objc-act.c (objc_comptypes): Correct handling\n        of protocol qualifiers.\n        (objc_is_id): New.\n\n[gcc/testsuite/ChangeLog]\n2002-09-05  Ziemowit Laski <zlaski@apple.com>\n\n        * objc.dg/proto-lossage-1.m: New test.\n\nFrom-SVN: r56905", "tree": {"sha": "df6bd7f2e22ceca6b00aa662bdecd65bc47d4c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df6bd7f2e22ceca6b00aa662bdecd65bc47d4c80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/370ce32a02500b1394456b4d1ca495e464624cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370ce32a02500b1394456b4d1ca495e464624cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370ce32a02500b1394456b4d1ca495e464624cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370ce32a02500b1394456b4d1ca495e464624cc0/comments", "author": null, "committer": null, "parents": [{"sha": "5fc0e5dfb43ae87c4afc11879efedc9845cae6a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fc0e5dfb43ae87c4afc11879efedc9845cae6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fc0e5dfb43ae87c4afc11879efedc9845cae6a9"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "695809d33f3529f76d1bb00e2b05bcda710984d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=370ce32a02500b1394456b4d1ca495e464624cc0", "patch": "@@ -1,3 +1,13 @@\n+2002-09-06  Ziemowit Laski <zlaski@apple.com>\n+\n+\t* c-lang.c (objc_is_id): New stub.\n+\t* c-tree.h (objc_is_id): New forward declaration.\n+\t* c-typeck.c (build_c_cast): Do not strip protocol\n+\tqualifiers from 'id' type.\n+\t* objc/objc-act.c (objc_comptypes): Correct handling\n+\tof protocol qualifiers.\n+\t(objc_is_id): New.\n+\n Fri Sep  6 13:10:08 2002  Jeffrey A Law  (law@redhat.com)\n \n         * pentium.md (pentium-firstvboth): Fix typo."}, {"sha": "8614e2500e5ece8fea50af377c8c16c2bf51af13", "filename": "gcc/c-lang.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=370ce32a02500b1394456b4d1ca495e464624cc0", "patch": "@@ -174,6 +174,13 @@ is_class_name (arg)\n   return 0;\n }\n \n+tree\n+objc_is_id (arg)\n+    tree arg ATTRIBUTE_UNUSED;\n+{\n+  return 0;\n+}\n+\n void\n objc_check_decl (decl)\n      tree decl ATTRIBUTE_UNUSED;"}, {"sha": "aa2fda5d5ea32652c1c92567e6a55edcece220f7", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=370ce32a02500b1394456b4d1ca495e464624cc0", "patch": "@@ -165,6 +165,7 @@ struct lang_type GTY(())\n /* in c-lang.c and objc-act.c */\n extern tree lookup_interface\t\t\tPARAMS ((tree));\n extern tree is_class_name\t\t\tPARAMS ((tree));\n+extern tree objc_is_id\t\t\t\tPARAMS ((tree));\n extern void objc_check_decl\t\t\tPARAMS ((tree));\n extern void finish_file\t\t\t\tPARAMS ((void));\n extern int objc_comptypes                 \tPARAMS ((tree, tree, int));"}, {"sha": "ac77bc234c7d7d11b52f905cd913588f6c347f22", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=370ce32a02500b1394456b4d1ca495e464624cc0", "patch": "@@ -3577,7 +3577,12 @@ build_c_cast (type, expr)\n   \n   if (type == error_mark_node || expr == error_mark_node)\n     return error_mark_node;\n-  type = TYPE_MAIN_VARIANT (type);\n+\n+  /* The ObjC front-end uses TYPE_MAIN_VARIANT to tie together types differing\n+     only in <protocol> qualifications.  But when constructing cast expressions,\n+     the protocols do matter and must be kept around.  */\n+  if (!flag_objc || !objc_is_id (type))\n+    type = TYPE_MAIN_VARIANT (type);\n \n #if 0\n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */"}, {"sha": "42861685b11cab9cda6fb2bbd83d612d69666cb6", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=370ce32a02500b1394456b4d1ca495e464624cc0", "patch": "@@ -648,13 +648,16 @@ objc_comptypes (lhs, rhs, reflexive)\n \t\t      tree cat;\n \n \t\t      rproto_list = CLASS_PROTOCOL_LIST (rinter);\n-\t\t      /* If the underlying ObjC class does not have\n-\t\t\t protocols attached to it, perhaps there are\n-\t\t\t \"one-off\" protocols attached to the rhs?\n-\t\t\t E.g., 'id<MyProt> foo;'.  */\n-\t\t      if (!rproto_list)\n-\t\t\trproto_list = TYPE_PROTOCOL_LIST (TREE_TYPE (rhs));\n \t\t      rproto = lookup_protocol_in_reflist (rproto_list, p);\n+\t\t      /* If the underlying ObjC class does not have\n+\t\t\t the protocol we're looking for, check for \"one-off\"\n+\t\t\t protocols (e.g., `NSObject<MyProt> foo;') attached\n+\t\t\t to the rhs.  */\n+\t\t      if (!rproto)\n+\t\t\t{\n+\t\t\t  rproto_list = TYPE_PROTOCOL_LIST (TREE_TYPE (rhs));\n+\t\t\t  rproto = lookup_protocol_in_reflist (rproto_list, p);\n+\t\t\t}\n \n \t\t      /* Check for protocols adopted by categories.  */\n \t\t      cat = CLASS_CATEGORY_LIST (rinter);\n@@ -2261,6 +2264,17 @@ is_class_name (ident)\n   return 0;\n }\n \n+tree\n+objc_is_id (ident)\n+     tree ident;\n+{\n+  /* NB: This function may be called before the ObjC front-end\n+     has been initialized, in which case ID_TYPE will be NULL. */\n+  return (id_type && ident && TYPE_P (ident) && IS_ID (ident)) \n+\t  ? id_type \n+\t  : NULL_TREE;\n+}\n+\n tree\n lookup_interface (ident)\n      tree ident;"}, {"sha": "18696d09e521dcb027ec933b1181213e654dd599", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=370ce32a02500b1394456b4d1ca495e464624cc0", "patch": "@@ -1,3 +1,7 @@\n+2002-09-05  Ziemowit Laski <zlaski@apple.com>\n+\n+\t* objc.dg/proto-lossage-1.m: New test.\n+\n 2002-09-06  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/cpp/_Pragma4.c: Fix typo."}, {"sha": "d312039262c471c22d37520319cebc9cd144bfa1", "filename": "gcc/testsuite/objc.dg/proto-lossage-1.m", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370ce32a02500b1394456b4d1ca495e464624cc0/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m?ref=370ce32a02500b1394456b4d1ca495e464624cc0", "patch": "@@ -0,0 +1,43 @@\n+/* Test for situations in which protocol conformance information\n+   may be lost, leading to superfluous warnings.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+/* One-line substitute for objc/objc.h */\n+typedef struct objc_object { struct objc_class *class_pointer; } *id;\n+\n+@protocol NSObject\n+- (int)someValue;\n+@end\n+\n+@interface NSObject <NSObject>\n+@end\n+\n+@protocol PlateMethods\n+- (void)someMethod;\n+@end\n+\n+@interface Foo {\n+  NSObject <PlateMethods> *plate;\n+  id <PlateMethods> plate1;\n+  NSObject *plate2;\n+}\n+- (id <PlateMethods>) getPlate;\n+- (id <NSObject>) getPlate1;\n+- (int) getValue;\n+@end\n+\n+@implementation Foo\n+- (id <PlateMethods>) getPlate {\n+  return plate;  /* { dg-bogus \"does not implement\" } */\n+}\n+- (id <NSObject>) getPlate1 {\n+  return (id <NSObject>)plate1; /* { dg-bogus \"does not conform\" } */\n+}\n+- (int) getValue {\n+  int i = [plate1 someValue];   /* { dg-warning \"not implemented by protocol\" } */\n+  int j = [(id <NSObject>)plate1 someValue];  /* { dg-bogus \"not implemented by protocol\" } */\n+  int k = [(id)plate1 someValue]; /* { dg-bogus \"not implemented by protocol\" } */\n+  return i + j + k;\n+}\n+@end"}]}