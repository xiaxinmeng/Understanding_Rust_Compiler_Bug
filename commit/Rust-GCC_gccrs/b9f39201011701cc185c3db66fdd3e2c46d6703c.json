{"sha": "b9f39201011701cc185c3db66fdd3e2c46d6703c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmMzkyMDEwMTE3MDFjYzE4NWMzZGI2NmZkZDNlMmM0NmQ2NzAzYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-02-20T23:24:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-02-20T23:24:58Z"}, "message": "class.c (build_vtable): New function, split out from ...\n\n\t* class.c (build_vtable): New function, split out from ...\n\t(get_vtable_decl): ... here, and ...\n\t(build_secondary_vtable): ... here.\n\n\t* pt.c (tsubst_decl): Fix formatting.\n\nFrom-SVN: r32082", "tree": {"sha": "aa25e55ace06d41dd1b609937c72379bd2625a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa25e55ace06d41dd1b609937c72379bd2625a78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9f39201011701cc185c3db66fdd3e2c46d6703c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f39201011701cc185c3db66fdd3e2c46d6703c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f39201011701cc185c3db66fdd3e2c46d6703c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f39201011701cc185c3db66fdd3e2c46d6703c/comments", "author": null, "committer": null, "parents": [{"sha": "b6412bae50ec973991c5473a83460410525fbebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6412bae50ec973991c5473a83460410525fbebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6412bae50ec973991c5473a83460410525fbebe"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "1bc3d1207b9037dba56d00497e26b58fb4da8564", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f39201011701cc185c3db66fdd3e2c46d6703c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f39201011701cc185c3db66fdd3e2c46d6703c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9f39201011701cc185c3db66fdd3e2c46d6703c", "patch": "@@ -1,3 +1,11 @@\n+2000-02-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (build_vtable): New function, split out from ...\n+\t(get_vtable_decl): ... here, and ...\n+\t(build_secondary_vtable): ... here.\n+\n+\t* pt.c (tsubst_decl): Fix formatting.\n+\t\n Sat Feb 19 18:43:13 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* class.c (build_primary_vtable, layout_vtable_decl): Likewise."}, {"sha": "9b339203c57af05c2ef6abb96dcde1e60d367ad7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f39201011701cc185c3db66fdd3e2c46d6703c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f39201011701cc185c3db66fdd3e2c46d6703c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b9f39201011701cc185c3db66fdd3e2c46d6703c", "patch": "@@ -152,6 +152,7 @@ static tree find_final_overrider PARAMS ((tree, tree, tree));\n static tree dfs_find_base PARAMS ((tree, void *));\n static int make_new_vtable PARAMS ((tree, tree));\n extern void dump_class_hierarchy PARAMS ((tree, int));\n+static tree build_vtable PARAMS ((tree, tree, tree));\n \n /* Variables shared between class.c and call.c.  */\n \n@@ -989,6 +990,32 @@ set_rtti_entry (virtuals, offset, type)\n   BV_FN (virtuals) = decl;\n }\n \n+/* Create a VAR_DECL for a primary or secondary vtable for\n+   CLASS_TYPE.  Use NAME for the name of the vtable, and VTABLE_TYPE\n+   for its type.  */\n+\n+static tree\n+build_vtable (class_type, name, vtable_type)\n+     tree class_type;\n+     tree name;\n+     tree vtable_type;\n+{\n+  tree decl;\n+\n+  decl = build_lang_decl (VAR_DECL, name, vtable_type);\n+  DECL_CONTEXT (decl) = class_type;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  TREE_STATIC (decl) = 1;\n+#ifndef WRITABLE_VTABLES\n+  /* Make them READONLY by default. (mrs) */\n+  TREE_READONLY (decl) = 1;\n+#endif\n+  DECL_VIRTUAL_P (decl) = 1;\n+  import_export_vtable (decl, class_type, 0);\n+\n+  return decl;\n+}\n+\n /* Get the VAR_DECL of the vtable for TYPE. TYPE need not be polymorphic,\n    or even complete.  If this does not exist, create it.  If COMPLETE is\n    non-zero, then complete the definition of it -- that will render it\n@@ -1010,31 +1037,18 @@ get_vtable_decl (type, complete)\n       return decl;\n     }\n   \n-  decl = build_lang_decl (VAR_DECL, name, void_type_node);\n-  \n-  /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (decl, type, 0);\n-\n+  decl = build_vtable (type, name, void_type_node);\n   decl = pushdecl_top_level (decl);\n   SET_IDENTIFIER_GLOBAL_VALUE (name, decl);\n   \n-  DECL_ARTIFICIAL (decl) = 1;\n-  TREE_STATIC (decl) = 1;\n-#ifndef WRITABLE_VTABLES\n-  /* Make them READONLY by default. (mrs) */\n-  TREE_READONLY (decl) = 1;\n-#endif\n   /* At one time the vtable info was grabbed 2 words at a time.  This\n      fails on sparc unless you have 8-byte alignment.  (tiemann) */\n   DECL_ALIGN (decl) = MAX (TYPE_ALIGN (double_type_node),\n \t\t\t   DECL_ALIGN (decl));\n \n-  DECL_VIRTUAL_P (decl) = 1;\n-  \n   if (complete)\n     cp_finish_decl (decl, NULL_TREE, NULL_TREE, 0);\n \n-  DECL_CONTEXT (decl) = type;\n   return decl;\n }\n \n@@ -1210,19 +1224,9 @@ build_secondary_vtable (binfo, for_type)\n       buf2 = new_buf2;\n     }\n \n-  new_decl = build_lang_decl (VAR_DECL, name, TREE_TYPE (orig_decl));\n-  /* Remember which class this vtable is really for.  */\n-  DECL_CONTEXT (new_decl) = for_type;\n-\n-  DECL_ARTIFICIAL (new_decl) = 1;\n-  TREE_STATIC (new_decl) = 1;\n-  BINFO_VTABLE (binfo) = pushdecl_top_level (new_decl);\n-  DECL_VIRTUAL_P (new_decl) = 1;\n-#ifndef WRITABLE_VTABLES\n-  /* Make them READONLY by default. (mrs) */\n-  TREE_READONLY (new_decl) = 1;\n-#endif\n+  new_decl = build_vtable (for_type, name, TREE_TYPE (orig_decl));\n   DECL_ALIGN (new_decl) = DECL_ALIGN (orig_decl);\n+  BINFO_VTABLE (binfo) = pushdecl_top_level (new_decl);\n \n   /* Make fresh virtual list, so we can smash it later.  */\n   BINFO_VIRTUALS (binfo) = copy_list (BINFO_VIRTUALS (binfo));\n@@ -1251,9 +1255,6 @@ build_secondary_vtable (binfo, for_type)\n   n_vtable_elems += list_length (BINFO_VIRTUALS (binfo));\n #endif\n \n-  /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (new_decl, for_type, 0);\n-\n   if (TREE_VIA_VIRTUAL (binfo))\n     my_friendly_assert (binfo == BINFO_FOR_VBASE (BINFO_TYPE (binfo),\n \t\t\t\t\t\t  current_class_type),"}, {"sha": "a1bb5424bb1195286d7eb08a9f2ba9008a6405a9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f39201011701cc185c3db66fdd3e2c46d6703c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f39201011701cc185c3db66fdd3e2c46d6703c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b9f39201011701cc185c3db66fdd3e2c46d6703c", "patch": "@@ -5856,7 +5856,7 @@ tsubst_decl (t, args, type, in_decl)\n \t{\n \t  /* For a template type parameter, we don't have to do\n \t     anything special.  */\n-\t  r= TYPE_NAME (type);\n+\t  r = TYPE_NAME (type);\n \t  break;\n \t}\n "}]}