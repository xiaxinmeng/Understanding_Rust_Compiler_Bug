{"sha": "c1db334ed53827be855c6e573bde2af301bcf596", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFkYjMzNGVkNTM4MjdiZTg1NWM2ZTU3M2JkZTJhZjMwMWJjZjU5Ng==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2008-08-05T08:16:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-05T08:16:44Z"}, "message": "g-comlin.adb (Sort_Sections, [...]): New/Modified internal methods needed to handle switch sections when...\n\n2008-08-05  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* g-comlin.adb (Sort_Sections, Group_Switches): New/Modified internal\n\tmethods needed to handle switch sections when building a command line.\n\t(Define_Section, Add_Switch, Remove_Switch, Is_New_Section,\n\tCurrent_Section): New public methods or methods modified to handle\n\tbuilding command lines with sections.\n\t(Set_Command_Line): Take into account sections when analysing a switch\n\tstring.\n\t(Start): Sort the switches by sections before iterating the command line\n\telements.\n\t\n\t* g-comlin.ads (Define_Section, Add_Switch, Remove_Switch,\n\tIs_New_Section, Current_Section): New methods or methods modified to\n\thandle building command lines with sections.\n\nFrom-SVN: r138670", "tree": {"sha": "bc93abdd2162306ad2803b8e31a129fd1632d960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc93abdd2162306ad2803b8e31a129fd1632d960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1db334ed53827be855c6e573bde2af301bcf596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1db334ed53827be855c6e573bde2af301bcf596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1db334ed53827be855c6e573bde2af301bcf596", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1db334ed53827be855c6e573bde2af301bcf596/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f0c4fcf427abfe2c8f3e7fe2e851ec19d7ff446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0c4fcf427abfe2c8f3e7fe2e851ec19d7ff446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0c4fcf427abfe2c8f3e7fe2e851ec19d7ff446"}], "stats": {"total": 377, "additions": 333, "deletions": 44}, "files": [{"sha": "a3faf53040bb6b21736636ade50e6826c09e7026", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 294, "deletions": 39, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1db334ed53827be855c6e573bde2af301bcf596/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1db334ed53827be855c6e573bde2af301bcf596/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=c1db334ed53827be855c6e573bde2af301bcf596", "patch": "@@ -120,10 +120,18 @@ package body GNAT.Command_Line is\n    --  ungrouping common prefixes when possible), and call Callback for each of\n    --  these.\n \n+   procedure Sort_Sections\n+     (Line     : GNAT.OS_Lib.Argument_List_Access;\n+      Sections : GNAT.OS_Lib.Argument_List_Access;\n+      Params   : GNAT.OS_Lib.Argument_List_Access);\n+   --  Reorder the command line switches so that the switches belonging to a\n+   --  section are grouped together.\n+\n    procedure Group_Switches\n-     (Cmd    : Command_Line;\n-      Result : Argument_List_Access;\n-      Params : Argument_List_Access);\n+     (Cmd      : Command_Line;\n+      Result   : Argument_List_Access;\n+      Sections : Argument_List_Access;\n+      Params   : Argument_List_Access);\n    --  Group switches with common prefixes whenever possible.\n    --  Once they have been grouped, we also check items for possible aliasing\n \n@@ -1081,6 +1089,22 @@ package body GNAT.Command_Line is\n       Append (Config.Prefixes, new String'(Prefix));\n    end Define_Prefix;\n \n+   --------------------\n+   -- Define_Section --\n+   --------------------\n+\n+   procedure Define_Section\n+     (Config : in out Command_Line_Configuration;\n+      Section : String)\n+   is\n+   begin\n+      if Config = null then\n+         Config := new Command_Line_Configuration_Record;\n+      end if;\n+\n+      Append (Config.Sections, new String'(Section));\n+   end Define_Section;\n+\n    -----------------------\n    -- Set_Configuration --\n    -----------------------\n@@ -1113,9 +1137,34 @@ package body GNAT.Command_Line is\n       Getopt_Description : String := \"\";\n       Switch_Char        : Character := '-')\n    is\n-      Tmp    : Argument_List_Access;\n-      Parser : Opt_Parser;\n-      S      : Character;\n+      Tmp     : Argument_List_Access;\n+      Parser  : Opt_Parser;\n+      S       : Character;\n+      Section : String_Access := null;\n+\n+      function Real_Full_Switch\n+        (S      : Character;\n+         Parser : Opt_Parser) return String;\n+      --  Ensure that the returned switch value contains the\n+      --  Switch_Char prefix if needed.\n+\n+      ----------------------\n+      -- Real_Full_Switch --\n+      ----------------------\n+\n+      function Real_Full_Switch\n+        (S      : Character;\n+         Parser : Opt_Parser) return String\n+      is\n+      begin\n+         if S = '*' then\n+            return Full_Switch (Parser);\n+         else\n+            return Switch_Char & Full_Switch (Parser);\n+         end if;\n+      end Real_Full_Switch;\n+\n+   --  Start of processing for Set_Command_Line\n \n    begin\n       Free (Cmd.Expanded);\n@@ -1132,20 +1181,55 @@ package body GNAT.Command_Line is\n                             Parser      => Parser);\n                exit when S = ASCII.NUL;\n \n-               if S = '*' then\n-                  Add_Switch (Cmd, Full_Switch (Parser), Parameter (Parser),\n-                              Separator (Parser));\n-               else\n-                  Add_Switch\n-                    (Cmd, Switch_Char & Full_Switch (Parser),\n-                     Parameter (Parser), Separator (Parser));\n-               end if;\n+               declare\n+                  Sw         : constant String :=\n+                                 Real_Full_Switch (S, Parser);\n+                  Is_Section : Boolean := False;\n+\n+               begin\n+                  if Cmd.Config /= null\n+                    and then Cmd.Config.Sections /= null\n+                  then\n+                     Section_Search :\n+                     for S in Cmd.Config.Sections'Range loop\n+                        if Sw = Cmd.Config.Sections (S).all then\n+                           Section := Cmd.Config.Sections (S);\n+                           Is_Section := True;\n+\n+                           exit Section_Search;\n+                        end if;\n+                     end loop Section_Search;\n+                  end if;\n+\n+                  if not Is_Section then\n+                     if Section = null then\n+                        Add_Switch\n+                          (Cmd, Sw,\n+                           Parameter (Parser),\n+                           Separator (Parser));\n+                     else\n+                        Add_Switch\n+                          (Cmd, Sw,\n+                           Parameter (Parser),\n+                           Separator (Parser),\n+                           Section.all);\n+                     end if;\n+                  end if;\n+               end;\n \n             exception\n                when Invalid_Parameter =>\n+\n                   --  Add it with no parameter, if that's the way the user\n-                  --  wants it\n-                  Add_Switch (Cmd, Switch_Char & Full_Switch (Parser));\n+                  --  wants it.\n+\n+                  if Section = null then\n+                     Add_Switch\n+                       (Cmd, Switch_Char & Full_Switch (Parser));\n+                  else\n+                     Add_Switch\n+                       (Cmd, Switch_Char & Full_Switch (Parser), Section.all);\n+                  end if;\n             end;\n          end loop;\n \n@@ -1230,7 +1314,8 @@ package body GNAT.Command_Line is\n      (Cmd       : in out Command_Line;\n       Switch    : String;\n       Parameter : String := \"\";\n-      Separator : Character := ' ')\n+      Separator : Character := ' ';\n+      Section   : String := \"\")\n    is\n       procedure Add_Simple_Switch (Simple : String);\n       --  Add a new switch that has had all its aliases expanded, and switches\n@@ -1250,7 +1335,12 @@ package body GNAT.Command_Line is\n                Cmd.Params := new Argument_List'\n                  (1 .. 1 => new String'(Separator & Parameter));\n             end if;\n-\n+            if Section = \"\" then\n+               Cmd.Sections := new Argument_List'(1 .. 1 => null);\n+            else\n+               Cmd.Sections := new Argument_List'\n+                 (1 .. 1 => new String'(Section));\n+            end if;\n          else\n             --  Do we already have this switch ?\n \n@@ -1261,6 +1351,11 @@ package body GNAT.Command_Line is\n                     or else\n                       (Cmd.Params (C) /= null\n                        and then Cmd.Params (C).all = Separator & Parameter))\n+                 and then\n+                   ((Cmd.Sections (C) = null and then Section = \"\")\n+                    or else\n+                      (Cmd.Sections (C) /= null\n+                       and then Cmd.Sections (C).all = Section))\n                then\n                   return;\n                end if;\n@@ -1273,6 +1368,12 @@ package body GNAT.Command_Line is\n             else\n                Append (Cmd.Params, new String'(Separator & Parameter));\n             end if;\n+\n+            if Section = \"\" then\n+               Append (Cmd.Sections, null);\n+            else\n+               Append (Cmd.Sections, new String'(Section));\n+            end if;\n          end if;\n       end Add_Simple_Switch;\n \n@@ -1337,7 +1438,8 @@ package body GNAT.Command_Line is\n    procedure Remove_Switch\n      (Cmd        : in out Command_Line;\n       Switch     : String;\n-      Remove_All : Boolean := False)\n+      Remove_All : Boolean := False;\n+      Section    : String  := \"\")\n    is\n       procedure Remove_Simple_Switch (Simple : String);\n       --  Removes a simple switch, with no aliasing or grouping\n@@ -1353,9 +1455,17 @@ package body GNAT.Command_Line is\n          if Cmd.Expanded /= null then\n             C := Cmd.Expanded'First;\n             while C <= Cmd.Expanded'Last loop\n-               if Cmd.Expanded (C).all = Simple then\n+               if Cmd.Expanded (C).all = Simple\n+                 and then\n+                   (Remove_All\n+                    or else (Cmd.Sections (C) = null\n+                             and then Section = \"\")\n+                    or else (Cmd.Sections (C) /= null\n+                             and then Section = Cmd.Sections (C).all))\n+               then\n                   Remove (Cmd.Expanded, C);\n                   Remove (Cmd.Params, C);\n+                  Remove (Cmd.Sections, C);\n \n                   if not Remove_All then\n                      return;\n@@ -1385,7 +1495,8 @@ package body GNAT.Command_Line is\n    procedure Remove_Switch\n      (Cmd       : in out Command_Line;\n       Switch    : String;\n-      Parameter : String)\n+      Parameter : String;\n+      Section   : String  := \"\")\n    is\n       procedure Remove_Simple_Switch (Simple : String);\n       --  Removes a simple switch, with no aliasing or grouping\n@@ -1402,6 +1513,12 @@ package body GNAT.Command_Line is\n             C := Cmd.Expanded'First;\n             while C <= Cmd.Expanded'Last loop\n                if Cmd.Expanded (C).all = Simple\n+                 and then\n+                   ((Cmd.Sections (C) = null\n+                     and then Section = \"\")\n+                    or else\n+                      (Cmd.Sections (C) /= null\n+                       and then Section = Cmd.Sections (C).all))\n                  and then\n                    ((Cmd.Params (C) = null and then Parameter = \"\")\n                       or else\n@@ -1416,6 +1533,7 @@ package body GNAT.Command_Line is\n                then\n                   Remove (Cmd.Expanded, C);\n                   Remove (Cmd.Params, C);\n+                  Remove (Cmd.Sections, C);\n \n                   --  The switch is necessarily unique by construction of\n                   --  Add_Switch\n@@ -1444,12 +1562,13 @@ package body GNAT.Command_Line is\n    --------------------\n \n    procedure Group_Switches\n-     (Cmd    : Command_Line;\n-      Result : Argument_List_Access;\n-      Params : Argument_List_Access)\n+     (Cmd      : Command_Line;\n+      Result   : Argument_List_Access;\n+      Sections : Argument_List_Access;\n+      Params   : Argument_List_Access)\n    is\n-      Group     : Ada.Strings.Unbounded.Unbounded_String;\n-      First     : Natural;\n+      Group   : Ada.Strings.Unbounded.Unbounded_String;\n+      First   : Natural;\n       use type Ada.Strings.Unbounded.Unbounded_String;\n \n    begin\n@@ -1469,17 +1588,40 @@ package body GNAT.Command_Line is\n               and then Looking_At\n                 (Result (C).all, Result (C)'First, Cmd.Config.Prefixes (P).all)\n             then\n-               Group :=\n-                 Group &\n-                   Result (C)\n-                     (Result (C)'First + Cmd.Config.Prefixes (P)'Length ..\n-                      Result (C)'Last);\n+               --  If we are still in the same section, group the switches\n+               if First = 0\n+                 or else\n+                   (Sections (C) = null\n+                    and then Sections (First) = null)\n+                 or else\n+                   (Sections (C) /= null\n+                    and then Sections (First) /= null\n+                    and then Sections (C).all = Sections (First).all)\n+               then\n+                  Group :=\n+                    Group &\n+                      Result (C)\n+                        (Result (C)'First + Cmd.Config.Prefixes (P)'Length ..\n+                         Result (C)'Last);\n+                  if First = 0 then\n+                     First := C;\n+                  end if;\n \n-               if First = 0 then\n+                  Free (Result (C));\n+               else\n+                  --  We changed section: we put the grouped switches to the\n+                  --  first place, on continue with the new section.\n+                  Result (First) :=\n+                    new String'\n+                      (Cmd.Config.Prefixes (P).all &\n+                       Ada.Strings.Unbounded.To_String (Group));\n+                  Group :=\n+                    Ada.Strings.Unbounded.To_Unbounded_String\n+                      (Result (C)\n+                       (Result (C)'First + Cmd.Config.Prefixes (P)'Length ..\n+                            Result (C)'Last));\n                   First := C;\n                end if;\n-\n-               Free (Result (C));\n             end if;\n          end loop;\n \n@@ -1576,6 +1718,70 @@ package body GNAT.Command_Line is\n       end loop;\n    end Alias_Switches;\n \n+   -------------------\n+   -- Sort_Sections --\n+   -------------------\n+\n+   procedure Sort_Sections\n+     (Line     : GNAT.OS_Lib.Argument_List_Access;\n+      Sections : GNAT.OS_Lib.Argument_List_Access;\n+      Params   : GNAT.OS_Lib.Argument_List_Access)\n+   is\n+      Sections_List : Argument_List_Access :=\n+                        new Argument_List'(1 .. 1 => null);\n+      Found         : Boolean;\n+      Old_Line      : constant Argument_List := Line.all;\n+      Old_Sections  : constant Argument_List := Sections.all;\n+      Old_Params    : constant Argument_List := Params.all;\n+      Index         : Natural;\n+\n+   begin\n+      if Line = null then\n+         return;\n+      end if;\n+\n+      --  First construct a list of all sections\n+\n+      for E in Line'Range loop\n+         if Sections (E) /= null then\n+            Found := False;\n+            for S in Sections_List'Range loop\n+               if (Sections_List (S) = null and then Sections (E) = null)\n+                 or else\n+                   (Sections_List (S) /= null\n+                     and then Sections (E) /= null\n+                     and then Sections_List (S).all = Sections (E).all)\n+               then\n+                  Found := True;\n+                  exit;\n+               end if;\n+            end loop;\n+\n+            if not Found then\n+               Append (Sections_List, Sections (E));\n+            end if;\n+         end if;\n+      end loop;\n+\n+      Index := Line'First;\n+\n+      for S in Sections_List'Range loop\n+         for E in Old_Line'Range loop\n+            if (Sections_List (S) = null and then Old_Sections (E) = null)\n+              or else\n+                (Sections_List (S) /= null\n+                  and then Old_Sections (E) /= null\n+                  and then Sections_List (S).all = Old_Sections (E).all)\n+            then\n+               Line (Index) := Old_Line (E);\n+               Sections (Index) := Old_Sections (E);\n+               Params (Index) := Old_Params (E);\n+               Index := Index + 1;\n+            end if;\n+         end loop;\n+      end loop;\n+   end Sort_Sections;\n+\n    -----------\n    -- Start --\n    -----------\n@@ -1591,6 +1797,10 @@ package body GNAT.Command_Line is\n          return;\n       end if;\n \n+      --  Reorder the expanded line so that sections are grouped\n+\n+      Sort_Sections (Cmd.Expanded, Cmd.Sections, Cmd.Params);\n+\n       --  Coalesce the switches as much as possible\n \n       if not Expanded\n@@ -1601,19 +1811,30 @@ package body GNAT.Command_Line is\n             Cmd.Coalesce (E) := new String'(Cmd.Expanded (E).all);\n          end loop;\n \n+         Cmd.Coalesce_Sections := new Argument_List (Cmd.Sections'Range);\n+         for E in Cmd.Sections'Range loop\n+            if Cmd.Sections (E) = null then\n+               Cmd.Coalesce_Sections (E) := null;\n+            else\n+               Cmd.Coalesce_Sections (E) := new String'(Cmd.Sections (E).all);\n+            end if;\n+         end loop;\n+\n          --  Not a clone, since we will not modify the parameters anyway\n \n          Cmd.Coalesce_Params := Cmd.Params;\n          Alias_Switches (Cmd, Cmd.Coalesce, Cmd.Params);\n-         Group_Switches (Cmd, Cmd.Coalesce, Cmd.Params);\n+         Group_Switches (Cmd, Cmd.Coalesce, Cmd.Coalesce_Sections, Cmd.Params);\n       end if;\n \n       if Expanded then\n-         Iter.List   := Cmd.Expanded;\n-         Iter.Params := Cmd.Params;\n+         Iter.List     := Cmd.Expanded;\n+         Iter.Params   := Cmd.Params;\n+         Iter.Sections := Cmd.Sections;\n       else\n-         Iter.List   := Cmd.Coalesce;\n-         Iter.Params := Cmd.Coalesce_Params;\n+         Iter.List     := Cmd.Coalesce;\n+         Iter.Params   := Cmd.Coalesce_Params;\n+         Iter.Sections := Cmd.Coalesce_Sections;\n       end if;\n \n       if Iter.List = null then\n@@ -1637,6 +1858,40 @@ package body GNAT.Command_Line is\n       return Iter.List (Iter.Current).all;\n    end Current_Switch;\n \n+   --------------------\n+   -- Is_New_Section --\n+   --------------------\n+\n+   function Is_New_Section    (Iter : Command_Line_Iterator) return Boolean is\n+      Section : constant String := Current_Section (Iter);\n+   begin\n+      if Iter.Sections = null then\n+         return False;\n+      elsif Iter.Current = Iter.Sections'First\n+        or else Iter.Sections (Iter.Current - 1) = null\n+      then\n+         return Section /= \"\";\n+      end if;\n+\n+      return Section /= Iter.Sections (Iter.Current - 1).all;\n+   end Is_New_Section;\n+\n+   ---------------------\n+   -- Current_Section --\n+   ---------------------\n+\n+   function Current_Section (Iter : Command_Line_Iterator) return String is\n+   begin\n+      if Iter.Sections = null\n+        or else Iter.Current > Iter.Sections'Last\n+        or else Iter.Sections (Iter.Current) = null\n+      then\n+         return \"\";\n+      end if;\n+\n+      return Iter.Sections (Iter.Current).all;\n+   end Current_Section;\n+\n    -----------------------\n    -- Current_Separator --\n    -----------------------"}, {"sha": "d92c157e3f13bc885f6b56eb3dd9ac90d7054d51", "filename": "gcc/ada/g-comlin.ads", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1db334ed53827be855c6e573bde2af301bcf596/gcc%2Fada%2Fg-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1db334ed53827be855c6e573bde2af301bcf596/gcc%2Fada%2Fg-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.ads?ref=c1db334ed53827be855c6e573bde2af301bcf596", "patch": "@@ -513,6 +513,13 @@ package GNAT.Command_Line is\n    --  characters whose order is irrelevant. In fact, this package will sort\n    --  them alphabetically.\n \n+   procedure Define_Section\n+     (Config  : in out Command_Line_Configuration;\n+      Section : String);\n+   --  Indicates a new switch section. Every switch belonging to the same\n+   --  section are ordered together, preceded by the section. They are placed\n+   --  at the end of the command line (as in 'gnatmake somefile.adb -cargs -g')\n+\n    procedure Free (Config : in out Command_Line_Configuration);\n    --  Free the memory used by Config\n \n@@ -549,13 +556,17 @@ package GNAT.Command_Line is\n    --  Command_Line_Iterator (which might be fine depending on your\n    --  application).\n    --\n+   --  If the command line has sections (such as -bargs -largs -cargs), then\n+   --  they should be listed in the Sections parameter (as \"-bargs -cargs\")\n+   --\n    --  This function can be used to reset Cmd by passing an empty string.\n \n    procedure Add_Switch\n      (Cmd       : in out Command_Line;\n       Switch    : String;\n       Parameter : String    := \"\";\n-      Separator : Character := ' ');\n+      Separator : Character := ' ';\n+      Section   : String    := \"\");\n    --  Add a new switch to the command line, and combine/group it with existing\n    --  switches if possible. Nothing is done if the switch already exists with\n    --  the same parameter.\n@@ -578,11 +589,17 @@ package GNAT.Command_Line is\n    --  Separator is the character that goes between the switches and its\n    --  parameter on the command line. If it is set to ASCII.NUL, then no\n    --  separator is applied, and they are concatenated\n+   --\n+   --  If the switch is part of a section, then it should be specified so that\n+   --  the switch is correctly placed in the command line, and the section\n+   --  added if not already present. For example, to add the -g switch into the\n+   --  -cargs section, you need to call (Cmd, \"-g\", Section => \"-cargs\")\n \n    procedure Remove_Switch\n      (Cmd        : in out Command_Line;\n       Switch     : String;\n-      Remove_All : Boolean := False);\n+      Remove_All : Boolean := False;\n+      Section    : String := \"\");\n    --  Remove Switch from the command line, and ungroup existing switches if\n    --  necessary.\n    --\n@@ -592,11 +609,18 @@ package GNAT.Command_Line is\n    --\n    --  If Remove_All is True, then all matching switches are removed, otherwise\n    --  only the first matching one is removed.\n+   --\n+   --  If the switch belongs to a section, then this section should be\n+   --  specified: Remove_Switch (Cmd_Line, \"-g\", Section => \"-cargs\") called\n+   --  on the command line \"-g -cargs -g\" will result in \"-g\", while if\n+   --  called with (Cmd_Line, \"-g\") this will result in \"-cargs -g\".\n+   --  If Remove_All is set, then both \"-g\" will be removed.\n \n    procedure Remove_Switch\n      (Cmd       : in out Command_Line;\n       Switch    : String;\n-      Parameter : String);\n+      Parameter : String;\n+      Section   : String := \"\");\n    --  Remove a switch with a specific parameter. If Parameter is the empty\n    --  string, then only a switch with no parameter will be removed.\n \n@@ -618,6 +642,8 @@ package GNAT.Command_Line is\n    --  call to Add_Switch, Remove_Switch or Set_Command_Line.\n \n    function Current_Switch    (Iter : Command_Line_Iterator) return String;\n+   function Is_New_Section    (Iter : Command_Line_Iterator) return Boolean;\n+   function Current_Section   (Iter : Command_Line_Iterator) return String;\n    function Current_Separator (Iter : Command_Line_Iterator) return String;\n    function Current_Parameter (Iter : Command_Line_Iterator) return String;\n    --  Return the current switch and its parameter (or the empty string if\n@@ -742,6 +768,9 @@ private\n       Prefixes : GNAT.OS_Lib.Argument_List_Access;\n       --  The list of prefixes\n \n+      Sections   : GNAT.OS_Lib.Argument_List_Access;\n+      --  The list of sections\n+\n       Aliases    : GNAT.OS_Lib.Argument_List_Access;\n       Expansions : GNAT.OS_Lib.Argument_List_Access;\n       --  The aliases. Both arrays have the same indices\n@@ -756,8 +785,12 @@ private\n       --  Parameter for the corresponding switch in Expanded. The first\n       --  character is the separator (or ASCII.NUL if there is no separator)\n \n-      Coalesce        : GNAT.OS_Lib.Argument_List_Access;\n-      Coalesce_Params : GNAT.OS_Lib.Argument_List_Access;\n+      Sections   : GNAT.OS_Lib.Argument_List_Access;\n+      --  The list of sections\n+\n+      Coalesce          : GNAT.OS_Lib.Argument_List_Access;\n+      Coalesce_Params   : GNAT.OS_Lib.Argument_List_Access;\n+      Coalesce_Sections : GNAT.OS_Lib.Argument_List_Access;\n       --  Cached version of the command line. This is recomputed every time the\n       --  command line changes. Switches are grouped as much as possible, and\n       --  aliases are used to reduce the length of the command line.\n@@ -767,6 +800,7 @@ private\n \n    type Command_Line_Iterator is record\n       List     : GNAT.OS_Lib.Argument_List_Access;\n+      Sections : GNAT.OS_Lib.Argument_List_Access;\n       Params   : GNAT.OS_Lib.Argument_List_Access;\n       Current  : Natural;\n    end record;"}]}