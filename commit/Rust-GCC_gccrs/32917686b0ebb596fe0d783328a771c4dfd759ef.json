{"sha": "32917686b0ebb596fe0d783328a771c4dfd759ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5MTc2ODZiMGViYjU5NmZlMGQ3ODMzMjhhNzcxYzRkZmQ3NTllZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-16T11:33:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-16T11:33:16Z"}, "message": "PR 72847 Prevent double-free in std::vector<bool>\n\n\tPR libstdc++/72847\n\t* include/bits/stl_bvector.h (_Bvector_base::_M_deallocate): Zero\n\tpointers to start and end of storage.\n\t* testsuite/23_containers/vector/bool/72847.cc: New test.\n\t* include/bits/vector.tcc (vector<bool>::_M_reallocate): Only update\n\t_M_finish after deallocating.\n\t(vector<bool>::_M_fill_insert): Likewise.\n\t(vector<bool>::_M_insert_range): Likewise.\n\t(vector<bool>::_M_insert_aux): Likewise.\n\nFrom-SVN: r239497", "tree": {"sha": "bef37ad2a61004e130733c3790b8c0f4d450509c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef37ad2a61004e130733c3790b8c0f4d450509c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32917686b0ebb596fe0d783328a771c4dfd759ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32917686b0ebb596fe0d783328a771c4dfd759ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32917686b0ebb596fe0d783328a771c4dfd759ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32917686b0ebb596fe0d783328a771c4dfd759ef/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4eec0a3e34cd709476b5062e44ef0075c75f426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4eec0a3e34cd709476b5062e44ef0075c75f426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4eec0a3e34cd709476b5062e44ef0075c75f426"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "a7689f451f50502eacf60b5e2b3b2d91f97eb581", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32917686b0ebb596fe0d783328a771c4dfd759ef", "patch": "@@ -1,3 +1,15 @@\n+2016-08-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/72847\n+\t* include/bits/stl_bvector.h (_Bvector_base::_M_deallocate): Zero\n+\tpointers to start and end of storage.\n+\t* testsuite/23_containers/vector/bool/72847.cc: New test.\n+\t* include/bits/vector.tcc (vector<bool>::_M_reallocate): Only update\n+\t_M_finish after deallocating.\n+\t(vector<bool>::_M_fill_insert): Likewise.\n+\t(vector<bool>::_M_insert_range): Likewise.\n+\t(vector<bool>::_M_insert_aux): Likewise.\n+\n 2016-08-15  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement LWG 2744 and LWG 2754."}, {"sha": "b3ac63f521fdc834063da1bdc2356f2a1842bf69", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=32917686b0ebb596fe0d783328a771c4dfd759ef", "patch": "@@ -500,6 +500,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    _Bit_alloc_traits::deallocate(_M_impl,\n \t\t\t\t\t  _M_impl._M_end_of_storage - __n,\n \t\t\t\t\t  __n);\n+\t    _M_impl._M_start = _M_impl._M_finish = _Bit_iterator();\n+\t    _M_impl._M_end_of_storage = _Bit_pointer();\n \t  }\n       }\n "}, {"sha": "6926a8b91c4d23968fab78d154a40e6522d1813f", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=32917686b0ebb596fe0d783328a771c4dfd759ef", "patch": "@@ -708,9 +708,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       _Bit_pointer __q = this->_M_allocate(__n);\n       iterator __start(std::__addressof(*__q), 0);\n-      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(), __start);\n+      iterator __finish(_M_copy_aligned(begin(), end(), __start));\n       this->_M_deallocate();\n       this->_M_impl._M_start = __start;\n+      this->_M_impl._M_finish = __finish;\n       this->_M_impl._M_end_of_storage = __q + _S_nword(__n);\n     }\n \n@@ -736,11 +737,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  iterator __start(std::__addressof(*__q), 0);\n \t  iterator __i = _M_copy_aligned(begin(), __position, __start);\n \t  std::fill(__i, __i + difference_type(__n), __x);\n-\t  this->_M_impl._M_finish = std::copy(__position, end(),\n-\t\t\t\t\t      __i + difference_type(__n));\n+\t  iterator __finish = std::copy(__position, end(),\n+\t\t\t\t\t__i + difference_type(__n));\n \t  this->_M_deallocate();\n \t  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);\n \t  this->_M_impl._M_start = __start;\n+\t  this->_M_impl._M_finish = __finish;\n \t}\n     }\n \n@@ -770,10 +772,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\titerator __start(std::__addressof(*__q), 0);\n \t\titerator __i = _M_copy_aligned(begin(), __position, __start);\n \t\t__i = std::copy(__first, __last, __i);\n-\t\tthis->_M_impl._M_finish = std::copy(__position, end(), __i);\n+\t\titerator __finish = std::copy(__position, end(), __i);\n \t\tthis->_M_deallocate();\n \t\tthis->_M_impl._M_end_of_storage = __q + _S_nword(__len);\n \t\tthis->_M_impl._M_start = __start;\n+\t\tthis->_M_impl._M_finish = __finish;\n \t      }\n \t  }\n       }\n@@ -798,10 +801,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  iterator __start(std::__addressof(*__q), 0);\n \t  iterator __i = _M_copy_aligned(begin(), __position, __start);\n \t  *__i++ = __x;\n-\t  this->_M_impl._M_finish = std::copy(__position, end(), __i);\n+\t  iterator __finish = std::copy(__position, end(), __i);\n \t  this->_M_deallocate();\n \t  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);\n \t  this->_M_impl._M_start = __start;\n+\t  this->_M_impl._M_finish = __finish;\n \t}\n     }\n "}, {"sha": "7bd8b396efd75aaa73ca88cacc201f4890ac71fb", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/72847.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F72847.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32917686b0ebb596fe0d783328a771c4dfd759ef/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F72847.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F72847.cc?ref=32917686b0ebb596fe0d783328a771c4dfd759ef", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-cstdint \"\" }\n+// { dg-skip-if \"\" { *-*-* } { \"-fno-exceptions\" } }\n+\n+#include <vector>\n+#include <ext/throw_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/72847\n+void\n+test01()\n+{\n+  bool test __attribute((unused)) = true;\n+\n+  typedef bool value_type;\n+  typedef __gnu_cxx::throw_allocator_limit<value_type> allocator_type;\n+  typedef std::vector<value_type, allocator_type> test_type;\n+  test_type v1(1, false);\n+  test_type v2(v1.capacity()+1, false);\n+  allocator_type::set_limit(0);\n+  try {\n+    v1 = v2;\n+  } catch (const __gnu_cxx::forced_error&) {\n+  }\n+  // throw_allocator will throw if double-free happens\n+}\n+\n+// Container requirement testing, exceptional behavior\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}