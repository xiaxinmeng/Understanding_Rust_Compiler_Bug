{"sha": "b6a0ebd1920300db383cd9e213c3bc2afb76e52d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhMGViZDE5MjAzMDBkYjM4M2NkOWUyMTNjM2JjMmFmYjc2ZTUyZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-01-16T23:50:22Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-01-16T23:50:22Z"}, "message": "Extern -param=max-predicted-iterations range.\n\n\t* params.opt (-param=max-predicted-iterations): Increase range from 0.\n\t* predict.c (estimate_loops): Add 1 to param_max_predicted_iterations.", "tree": {"sha": "f5db64b09e07e5793a5ee5f1d565d7f90683dae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5db64b09e07e5793a5ee5f1d565d7f90683dae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a0ebd1920300db383cd9e213c3bc2afb76e52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a0ebd1920300db383cd9e213c3bc2afb76e52d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a0ebd1920300db383cd9e213c3bc2afb76e52d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a0ebd1920300db383cd9e213c3bc2afb76e52d/comments", "author": null, "committer": null, "parents": [{"sha": "852f0ae80555238c425e33f98df5c7077694bd9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852f0ae80555238c425e33f98df5c7077694bd9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852f0ae80555238c425e33f98df5c7077694bd9f"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "febcd6fb31ff1f043641192cdb441855b093cdfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a0ebd1920300db383cd9e213c3bc2afb76e52d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a0ebd1920300db383cd9e213c3bc2afb76e52d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6a0ebd1920300db383cd9e213c3bc2afb76e52d", "patch": "@@ -1,3 +1,8 @@\n+2020-01-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* params.opt (-param=max-predicted-iterations): Increase range from 0.\n+\t* predict.c (estimate_loops): Add 1 to param_max_predicted_iterations.\n+\n 2020-01-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-fnsummary.c (estimate_calls_size_and_time): Fix formating of"}, {"sha": "8e4217dbb84c462fea56219670df7efd78d5de19", "filename": "gcc/params.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a0ebd1920300db383cd9e213c3bc2afb76e52d/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a0ebd1920300db383cd9e213c3bc2afb76e52d/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=b6a0ebd1920300db383cd9e213c3bc2afb76e52d", "patch": "@@ -555,7 +555,7 @@ Common Joined UInteger Var(param_max_pow_sqrt_depth) Init(5) IntegerRange(1, 32)\n Maximum depth of sqrt chains to use when synthesizing exponentiation by a real constant.\n \n -param=max-predicted-iterations=\n-Common Joined UInteger Var(param_max_predicted_iterations) Init(100) IntegerRange(1, 65536) Param Optimization\n+Common Joined UInteger Var(param_max_predicted_iterations) Init(100) IntegerRange(0, 65536) Param Optimization\n The maximum number of loop iterations we predict statically.\n \n -param=max-reload-search-insns="}, {"sha": "1b000581c8f5a7c3ea520c79f0987c0be58650dc", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a0ebd1920300db383cd9e213c3bc2afb76e52d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a0ebd1920300db383cd9e213c3bc2afb76e52d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=b6a0ebd1920300db383cd9e213c3bc2afb76e52d", "patch": "@@ -3427,7 +3427,8 @@ estimate_loops (void)\n {\n   auto_bitmap tovisit;\n   basic_block bb;\n-  sreal max_cyclic_prob = (sreal)1 - (sreal)1 / param_max_predicted_iterations;\n+  sreal max_cyclic_prob = (sreal)1\n+\t\t\t   - (sreal)1 / (param_max_predicted_iterations + 1);\n \n   /* Start by estimating the frequencies in the loops.  */\n   if (number_of_loops (cfun) > 1)"}]}