{"sha": "5f9689e59f9d5af9df5383c677e28aa1e9164ccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY5Njg5ZTU5ZjlkNWFmOWRmNTM4M2M2NzdlMjhhYTFlOTE2NGNjZA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2001-08-08T08:10:58Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2001-08-08T08:10:58Z"}, "message": "diagnostic.h (diagnostic_format_decoder): Parenthesize macro parameter.\n\n\n        * diagnostic.h (diagnostic_format_decoder): Parenthesize macro parameter.\n        (diagnostic_prefixing_rule): Likewise.\n        (diagnostic_line_cutoff): Likewise.\n        (diagnostic_kind_count): Likewise.\n\nFrom-SVN: r44711", "tree": {"sha": "430b49af472ef365d3d4540c52b5c01b62325058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/430b49af472ef365d3d4540c52b5c01b62325058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f9689e59f9d5af9df5383c677e28aa1e9164ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9689e59f9d5af9df5383c677e28aa1e9164ccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9689e59f9d5af9df5383c677e28aa1e9164ccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9689e59f9d5af9df5383c677e28aa1e9164ccd/comments", "author": null, "committer": null, "parents": [{"sha": "6d8c73f7e5f271272681e3edd588b51b9cc66ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8c73f7e5f271272681e3edd588b51b9cc66ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8c73f7e5f271272681e3edd588b51b9cc66ef3"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "878d64b5125550a6af85403a1b7cec49ee4f457f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9689e59f9d5af9df5383c677e28aa1e9164ccd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9689e59f9d5af9df5383c677e28aa1e9164ccd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f9689e59f9d5af9df5383c677e28aa1e9164ccd", "patch": "@@ -1,3 +1,10 @@\n+2001-08-08  Graham Stott  <grahams@redhat.com>\n+\n+\t* diagnostic.h (diagnostic_format_decoder): Parenthesize macro parameter.\n+\t(diagnostic_prefixing_rule): Likewise.\n+\t(diagnostic_line_cutoff): Likewise.\n+\t(diagnostic_kind_count): Likewise.\n+\n 2001-08-08  Graham Stott  <grahams@redhat.com>\n \n \t* alias.c (find_base_decl): Delete redundent assignment."}, {"sha": "e48d03349efe71d9ecf7254d5a43665c19a89038", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9689e59f9d5af9df5383c677e28aa1e9164ccd/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9689e59f9d5af9df5383c677e28aa1e9164ccd/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=5f9689e59f9d5af9df5383c677e28aa1e9164ccd", "patch": "@@ -226,17 +226,17 @@ struct diagnostic_context\n \n /* Client supplied function used to decode formats.  Can operate on both\n  `output_buffer *' and `diagnostic_context *'.  */\n-#define diagnostic_format_decoder(DC) ((output_buffer *)DC)->format_decoder\n+#define diagnostic_format_decoder(DC) ((output_buffer *)(DC))->format_decoder\n \n /* Prefixing rule used in formatting a diagnostic message.  Accepts both\n    `output_buffer *' and `diagnostic_context *'.  */\n #define diagnostic_prefixing_rule(DC) \\\n-   ((output_buffer *)DC)->state.prefixing_rule\n+   ((output_buffer *)(DC))->state.prefixing_rule\n \n /* Maximum characters per line in automatic line wrapping mode.\n    Zero means don't wrap lines. */\n #define diagnostic_line_cutoff(DC) \\\n-   ((output_buffer *)DC)->state.ideal_maximum_length\n+   ((output_buffer *)(DC))->state.ideal_maximum_length\n \n /* This diagnostic context is used by front-ends that directly output\n    diagnostic messages without going through `error', `warning',\n@@ -248,7 +248,7 @@ extern output_buffer *diagnostic_buffer;\n \n /* The total count of a KIND of diagnostics meitted so far.  */\n #define diagnostic_kind_count(DC, DK) \\\n-   ((output_buffer *)DC)->state.diagnostic_count[(int) DK]\n+   ((output_buffer *)(DC))->state.diagnostic_count[(int) (DK)]\n \n /* The number of errors that have been issued so far.  Ideally, these\n    would take an output_buffer as an argument.  */"}]}