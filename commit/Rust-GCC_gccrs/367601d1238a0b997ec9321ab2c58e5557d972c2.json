{"sha": "367601d1238a0b997ec9321ab2c58e5557d972c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3NjAxZDEyMzhhMGI5OTdlYzkzMjFhYjJjNThlNTU1N2Q5NzJjMg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-09T20:36:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-09T20:36:41Z"}, "message": "[multiple changes]\n\n2017-10-09  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Replace_Components): Browse the list of discriminants,\n\tnot components.\n\n2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Static_Elaboration_Checks): Elaboration requirements\n\tare verified only in the static model.\n\n2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification,\n\tCheck_Reverse_Iteration): Check that the domain of iteration supports\n\treverse iteration when it is a formal container.  This requires the\n\tpresence of a Previous primitive in the Iterable aspect.\n\t* sem_ch13.adb (Resolve_Iterable_Operation): Verify legality of\n\tprimitives Last and Previous to support reverse iteration over formal\n\tcontainers.\n\t(Validate_Iterable_Aspect): Add check for reverse iteration operations.\n\t* exp_ch5.adb (Build_Formal_Container_Iteration): Add proper expansion\n\tfor reverse iteration using primitives Last and Previous in generated\n\tloop.\n\n2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Subprogram_Name): If this is a child unit, use the name\n\tof the Defining_Program_Unit_Name, which is an identifier, in order to\n\tconstruct the string for the fully qualified name.\n\nFrom-SVN: r253567", "tree": {"sha": "83283e7b20e1325ad5dcc8db809d0a73a36a55fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83283e7b20e1325ad5dcc8db809d0a73a36a55fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/367601d1238a0b997ec9321ab2c58e5557d972c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367601d1238a0b997ec9321ab2c58e5557d972c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367601d1238a0b997ec9321ab2c58e5557d972c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367601d1238a0b997ec9321ab2c58e5557d972c2/comments", "author": null, "committer": null, "parents": [{"sha": "7f5e671bce70f537708f36033cd44869ca94fb4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5e671bce70f537708f36033cd44869ca94fb4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5e671bce70f537708f36033cd44869ca94fb4c"}], "stats": {"total": 128, "additions": 111, "deletions": 17}, "files": [{"sha": "2e799e1ef1db98d63a9964fb320ccfca2be61cbd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=367601d1238a0b997ec9321ab2c58e5557d972c2", "patch": "@@ -1,3 +1,33 @@\n+2017-10-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Replace_Components): Browse the list of discriminants,\n+\tnot components.\n+\n+2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Static_Elaboration_Checks): Elaboration requirements\n+\tare verified only in the static model.\n+\n+2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification,\n+\tCheck_Reverse_Iteration): Check that the domain of iteration supports\n+\treverse iteration when it is a formal container.  This requires the\n+\tpresence of a Previous primitive in the Iterable aspect.\n+\t* sem_ch13.adb (Resolve_Iterable_Operation): Verify legality of\n+\tprimitives Last and Previous to support reverse iteration over formal\n+\tcontainers.\n+\t(Validate_Iterable_Aspect): Add check for reverse iteration operations.\n+\t* exp_ch5.adb (Build_Formal_Container_Iteration): Add proper expansion\n+\tfor reverse iteration using primitives Last and Previous in generated\n+\tloop.\n+\n+2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Subprogram_Name): If this is a child unit, use the name\n+\tof the Defining_Program_Unit_Name, which is an identifier, in order to\n+\tconstruct the string for the fully qualified name.\n+\n 2017-10-09  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch3.adb: Rename Uses_Unseen_Priv into"}, {"sha": "d7587eb7aecee9c06145f3e79e723c6f96d64341", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=367601d1238a0b997ec9321ab2c58e5557d972c2", "patch": "@@ -178,14 +178,27 @@ package body Exp_Ch5 is\n       Loc      : constant Source_Ptr := Sloc (N);\n       Stats    : constant List_Id    := Statements (N);\n       Typ      : constant Entity_Id  := Base_Type (Etype (Container));\n-      First_Op : constant Entity_Id  :=\n-                   Get_Iterable_Type_Primitive (Typ, Name_First);\n-      Next_Op  : constant Entity_Id  :=\n-                   Get_Iterable_Type_Primitive (Typ, Name_Next);\n+\n+      First_Op : Entity_Id;\n+      Next_Op  : Entity_Id;\n \n       Has_Element_Op : constant Entity_Id :=\n                    Get_Iterable_Type_Primitive (Typ, Name_Has_Element);\n    begin\n+      --  Use the proper set of primitives depending on the direction of\n+      --  iteration. The legality of a reverse iteration has been checked\n+      --  during analysis.\n+\n+      if Reverse_Present (Iterator_Specification (Iteration_Scheme (N))) then\n+         First_Op := Get_Iterable_Type_Primitive (Typ, Name_Last);\n+         Next_Op  := Get_Iterable_Type_Primitive (Typ, Name_Previous);\n+\n+      else\n+         First_Op := Get_Iterable_Type_Primitive (Typ, Name_First);\n+         Next_Op  := Get_Iterable_Type_Primitive (Typ, Name_Next);\n+         null;\n+      end if;\n+\n       --  Declaration for Cursor\n \n       Init :=\n@@ -198,7 +211,7 @@ package body Exp_Ch5 is\n               Parameter_Associations => New_List (\n                 Convert_To_Iterable_Type (Container, Loc))));\n \n-      --  Statement that advances cursor in loop\n+      --  Statement that advances (in the right direction) cursor in loop\n \n       Advance :=\n         Make_Assignment_Statement (Loc,"}, {"sha": "701aa088ae9e787406c4f57d8e4e41b1313f170c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=367601d1238a0b997ec9321ab2c58e5557d972c2", "patch": "@@ -13200,9 +13200,12 @@ package body Sem_Ch13 is\n \n          Ent := Entity (N);\n          F1 := First_Formal (Ent);\n-         if Nam = Name_First then\n \n-            --  First (Container) => Cursor\n+         if Nam = Name_First\n+           or else Nam = Name_Last\n+         then\n+\n+            --  First or Last (Container) => Cursor\n \n             if Etype (Ent) /= Cursor then\n                Error_Msg_N (\"primitive for First must yield a curosr\", N);\n@@ -13221,6 +13224,19 @@ package body Sem_Ch13 is\n                Error_Msg_N (\"no match for Next iterable primitive\", N);\n             end if;\n \n+         elsif Nam = Name_Previous then\n+\n+            --  Previous (Container, Cursor) => Cursor\n+\n+            F2 := Next_Formal (F1);\n+\n+            if Etype (F2) /= Cursor\n+              or else Etype (Ent) /= Cursor\n+              or else Present (Next_Formal (F2))\n+            then\n+               Error_Msg_N (\"no match for Previous iterable primitive\", N);\n+            end if;\n+\n          elsif Nam = Name_Has_Element then\n \n             --  Has_Element (Container, Cursor) => Boolean\n@@ -14022,6 +14038,7 @@ package body Sem_Ch13 is\n       Cursor : constant Entity_Id := Get_Cursor_Type (ASN, Typ);\n \n       First_Id       : Entity_Id;\n+      Last_Id        : Entity_Id;\n       Next_Id        : Entity_Id;\n       Has_Element_Id : Entity_Id;\n       Element_Id     : Entity_Id;\n@@ -14034,6 +14051,7 @@ package body Sem_Ch13 is\n       end if;\n \n       First_Id       := Empty;\n+      Last_Id        := Empty;\n       Next_Id        := Empty;\n       Has_Element_Id := Empty;\n       Element_Id     := Empty;\n@@ -14054,6 +14072,14 @@ package body Sem_Ch13 is\n             Resolve_Iterable_Operation (Expr, Cursor, Typ, Name_First);\n             First_Id := Entity (Expr);\n \n+         elsif Chars (Prim) = Name_Last then\n+            Resolve_Iterable_Operation (Expr, Cursor, Typ, Name_Last);\n+            Last_Id := Entity (Expr);\n+\n+         elsif Chars (Prim) = Name_Previous then\n+            Resolve_Iterable_Operation (Expr, Cursor, Typ, Name_Previous);\n+            Last_Id := Entity (Expr);\n+\n          elsif Chars (Prim) = Name_Next then\n             Resolve_Iterable_Operation (Expr, Cursor, Typ, Name_Next);\n             Next_Id := Entity (Expr);\n@@ -14082,7 +14108,9 @@ package body Sem_Ch13 is\n       elsif No (Has_Element_Id) then\n          Error_Msg_N (\"match for Has_Element primitive not found\", ASN);\n \n-      elsif No (Element_Id) then\n+      elsif No (Element_Id)\n+        or else No (Last_Id)\n+      then\n          null;  --  Optional.\n       end if;\n    end Validate_Iterable_Aspect;"}, {"sha": "dd0ff2a9b02f498a8992623b73066b17056c65f9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=367601d1238a0b997ec9321ab2c58e5557d972c2", "patch": "@@ -21991,7 +21991,7 @@ package body Sem_Ch3 is\n                   exit;\n                end if;\n \n-               Next_Component (Comp);\n+               Next_Discriminant (Comp);\n             end loop;\n \n          elsif Nkind (N) = N_Component_Declaration then"}, {"sha": "b06bff77cff6fee4b16761b31c30feacccae84b4", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=367601d1238a0b997ec9321ab2c58e5557d972c2", "patch": "@@ -1937,12 +1937,19 @@ package body Sem_Ch5 is\n \n       procedure Check_Reverse_Iteration (Typ : Entity_Id) is\n       begin\n-         if Reverse_Present (N)\n-           and then not Is_Array_Type (Typ)\n-           and then not Is_Reversible_Iterator (Typ)\n-         then\n-            Error_Msg_NE\n-              (\"container type does not support reverse iteration\", N, Typ);\n+         if Reverse_Present (N) then\n+            if Is_Array_Type (Typ)\n+              or else Is_Reversible_Iterator (Typ)\n+              or else\n+                  (Present (Find_Aspect (Typ, Aspect_Iterable))\n+                    and then Present\n+                      (Get_Iterable_Type_Primitive (Typ, Name_Previous)))\n+            then\n+               null;\n+            else\n+               Error_Msg_NE\n+                 (\"container type does not support reverse iteration\", N, Typ);\n+            end if;\n          end if;\n       end Check_Reverse_Iteration;\n \n@@ -2303,6 +2310,7 @@ package body Sem_Ch5 is\n                        (\"missing Element primitive for iteration\", N);\n                   else\n                      Set_Etype (Def_Id, Etype (Elt));\n+                     Check_Reverse_Iteration (Typ);\n                   end if;\n                end;\n "}, {"sha": "5ba6938cf97fe1b943de2814d82f9796320a0238", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=367601d1238a0b997ec9321ab2c58e5557d972c2", "patch": "@@ -5516,12 +5516,18 @@ package body Sem_Elab is\n \n       Req_Met := False;\n \n+      --  Elaboration requirements are verified only when the static model is\n+      --  in effect because this diagnostic is graph-dependent.\n+\n+      if not Static_Elaboration_Checks then\n+         return;\n+\n       --  If the target is within the main unit, either at the source level or\n       --  through an instantiation, then there is no real requirement to meet\n       --  because the main unit cannot force its own elaboration by means of an\n       --  Elaborate[_All] pragma. Treat this case as valid coverage.\n \n-      if In_Extended_Main_Code_Unit (Target_Id) then\n+      elsif In_Extended_Main_Code_Unit (Target_Id) then\n          Req_Met := True;\n \n       --  Otherwise the target resides in an external unit"}, {"sha": "2e64e8263014e136fb299d2fa975aab6c87a4682", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367601d1238a0b997ec9321ab2c58e5557d972c2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=367601d1238a0b997ec9321ab2c58e5557d972c2", "patch": "@@ -23257,7 +23257,16 @@ package body Sem_Util is\n          return \"unknown subprogram\";\n       end if;\n \n-      Append_Entity_Name (Buf, Ent);\n+      if Nkind (Ent) = N_Defining_Program_Unit_Name then\n+\n+         --  If the subprogram is a child unit, use its simple name to\n+         --  start the construction of the fully qualified name.\n+\n+         Append_Entity_Name (Buf, Defining_Identifier (Ent));\n+\n+      else\n+         Append_Entity_Name (Buf, Ent);\n+      end if;\n       return +Buf;\n    end Subprogram_Name;\n "}]}