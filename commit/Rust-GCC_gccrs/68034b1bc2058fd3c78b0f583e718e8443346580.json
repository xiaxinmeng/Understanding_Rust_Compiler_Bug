{"sha": "68034b1bc2058fd3c78b0f583e718e8443346580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgwMzRiMWJjMjA1OGZkM2M3OGIwZjU4M2U3MThlODQ0MzM0NjU4MA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-02-22T10:50:35Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-02-22T10:50:35Z"}, "message": "[PR72741] Use 'oacc_build_routine_dims' for Fortran OpenACC 'routine' directives, too\n\n... instead of having an incomplete local implementation.\n\nWith these changes in place, we can then also revert the work-around r267213\n\"[nvptx] Unify C/Fortran routine handling in nvptx_goacc_validate_dims\".\n\n\tgcc/fortran/\n\tPR fortran/72741\n\t* gfortran.h (oacc_routine_lop): New enum.\n\t(symbol_attribute): Use it.\n\t* openmp.c (gfc_oacc_routine_dims): Replace with...\n\t(gfc_oacc_routine_lop): ... this new function.\n\t(gfc_match_oacc_routine): Adjust.\n\t* trans-decl.c (add_attributes_to_decl): Likewise.\n\tgcc/\n\tPR fortran/72741\n\t* omp-general.c (oacc_replace_fn_attrib): Mostly split out into...\n\t(oacc_replace_fn_attrib_attr): ... this new function.\n\t* omp-general.h (oacc_replace_fn_attrib_attr): New prototype.\n\t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims_1): Revert workaround.\n\tgcc/testsuite/\n\tPR fortran/72741\n\t* gfortran.dg/goacc/classify-routine.f95: Adjust.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r269105", "tree": {"sha": "bdb11b9ae34f705b45276d4d5b45627460b70e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdb11b9ae34f705b45276d4d5b45627460b70e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68034b1bc2058fd3c78b0f583e718e8443346580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68034b1bc2058fd3c78b0f583e718e8443346580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68034b1bc2058fd3c78b0f583e718e8443346580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68034b1bc2058fd3c78b0f583e718e8443346580/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c319667adff8cc10e87ff836f72d5a7471e942c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c319667adff8cc10e87ff836f72d5a7471e942c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c319667adff8cc10e87ff836f72d5a7471e942c6"}], "stats": {"total": 168, "additions": 99, "deletions": 69}, "files": [{"sha": "f14cbbce4775151a1d1e490e3c73ab1c45468498", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -1,3 +1,11 @@\n+2019-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/72741\n+\t* omp-general.c (oacc_replace_fn_attrib): Mostly split out into...\n+\t(oacc_replace_fn_attrib_attr): ... this new function.\n+\t* omp-general.h (oacc_replace_fn_attrib_attr): New prototype.\n+\t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims_1): Revert workaround.\n+\n 2019-02-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm-cpus.in (ares): Rename to..."}, {"sha": "424b43ac8b4873161e673a71a8f0b6684465159b", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -5577,41 +5577,6 @@ nvptx_goacc_validate_dims_1 (tree decl, int dims[], int fn_level, unsigned used)\n   else\n     gcc_unreachable ();\n \n-  if (routine_p)\n-    {\n-      /* OpenACC routines in C arrive here with the following attributes\n-\t (omitting the 'omp declare target'):\n-\t seq   : __attribute__((oacc function (0 1, 0 1, 0 1)))\n-\t vector: __attribute__((oacc function (0 1, 0 1, 1 0)))\n-\t worker: __attribute__((oacc function (0 1, 1 0, 1 0)))\n-\t gang  : __attribute__((oacc function (1 0, 1 0, 1 0)))\n-\n-\t If we take f.i. the oacc function attribute of the worker routine\n-\t (0 1, 1 0, 1 0), then:\n-\t - the slice (0, 1, 1) is interpreted by oacc_fn_attrib_level as\n-\t   meaning: worker routine, that is:\n-\t   - can't contain gang loop (0),\n-\t   - can contain worker loop (1),\n-\t   - can contain vector loop (1).\n-\t - the slice (1, 0, 0) is interpreted by oacc_validate_dims as the\n-\t dimensions: gang: 1, worker: 0, vector: 0.\n-\n-\t OTOH, routines in Fortran arrive here with these attributes:\n-\t seq   : __attribute__((oacc function (0 0, 0 0, 0 0)))\n-\t vector: __attribute__((oacc function (0 0, 0 0, 1 0)))\n-\t worker: __attribute__((oacc function (0 0, 1 0, 1 0)))\n-\t gang  : __attribute__((oacc function (1 0, 1 0, 1 0)))\n-\t that is, the same as for C but with the dimensions set to 0.\n-\n-\t This is due to a bug in the Fortran front-end: PR72741.  Work around\n-\t this bug by forcing the dimensions to be the same in Fortran as for C,\n-\t to be able to handle C and Fortran routines uniformly in this\n-\t function.  */\n-      dims[GOMP_DIM_VECTOR] = fn_level > GOMP_DIM_VECTOR ? 1 : 0;\n-      dims[GOMP_DIM_WORKER] = fn_level > GOMP_DIM_WORKER ? 1 : 0;\n-      dims[GOMP_DIM_GANG] = fn_level > GOMP_DIM_GANG ? 1 : 0;\n-    }\n-\n   if (oacc_min_dims_p)\n     {\n       gcc_assert (dims[GOMP_DIM_VECTOR] == 1);"}, {"sha": "0eb860449ca9f074969c12e63ef910c5f9bb7bc2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -1,3 +1,14 @@\n+2019-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR fortran/72741\n+\t* gfortran.h (oacc_routine_lop): New enum.\n+\t(symbol_attribute): Use it.\n+\t* openmp.c (gfc_oacc_routine_dims): Replace with...\n+\t(gfc_oacc_routine_lop): ... this new function.\n+\t(gfc_match_oacc_routine): Adjust.\n+\t* trans-decl.c (add_attributes_to_decl): Likewise.\n+\n 2019-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* openmp.c (gfc_match_oacc_declare): Revert earlier changes."}, {"sha": "f0258b39ffd16aa538372eca0b4b3e929f133aca", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -317,6 +317,15 @@ enum save_state\n { SAVE_NONE = 0, SAVE_EXPLICIT, SAVE_IMPLICIT\n };\n \n+/* OpenACC 'routine' directive's level of parallelism.  */\n+enum oacc_routine_lop\n+{ OACC_ROUTINE_LOP_NONE = 0,\n+  OACC_ROUTINE_LOP_GANG,\n+  OACC_ROUTINE_LOP_WORKER,\n+  OACC_ROUTINE_LOP_VECTOR,\n+  OACC_ROUTINE_LOP_SEQ\n+};\n+\n /* Strings for all symbol attributes.  We use these for dumping the\n    parse tree, in error messages, and also when reading and writing\n    modules.  In symbol.c.  */\n@@ -904,8 +913,8 @@ typedef struct\n   unsigned oacc_declare_device_resident:1;\n   unsigned oacc_declare_link:1;\n \n-  /* This is an OpenACC acclerator function at level N - 1  */\n-  unsigned oacc_function:3;\n+  /* OpenACC 'routine' directive's level of parallelism.  */\n+  ENUM_BITFIELD (oacc_routine_lop) oacc_routine_lop:3;\n \n   /* Attributes set by compiler extensions (!GCC$ ATTRIBUTES).  */\n   unsigned ext_attr:EXT_ATTR_NUM;"}, {"sha": "dfd4be86d50e94cae014d2a24a0d7ea83d81ae3e", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -2232,34 +2232,43 @@ gfc_match_oacc_cache (void)\n   return MATCH_YES;\n }\n \n-/* Determine the loop level for a routine.   */\n+/* Determine the OpenACC 'routine' directive's level of parallelism.  */\n \n-static int\n-gfc_oacc_routine_dims (gfc_omp_clauses *clauses)\n+static oacc_routine_lop\n+gfc_oacc_routine_lop (gfc_omp_clauses *clauses)\n {\n-  int level = -1;\n+  oacc_routine_lop ret = OACC_ROUTINE_LOP_SEQ;\n \n   if (clauses)\n     {\n-      unsigned mask = 0;\n+      unsigned n_lop_clauses = 0;\n \n       if (clauses->gang)\n-\tlevel = GOMP_DIM_GANG, mask |= GOMP_DIM_MASK (level);\n+\t{\n+\t  ++n_lop_clauses;\n+\t  ret = OACC_ROUTINE_LOP_GANG;\n+\t}\n       if (clauses->worker)\n-\tlevel = GOMP_DIM_WORKER, mask |= GOMP_DIM_MASK (level);\n+\t{\n+\t  ++n_lop_clauses;\n+\t  ret = OACC_ROUTINE_LOP_WORKER;\n+\t}\n       if (clauses->vector)\n-\tlevel = GOMP_DIM_VECTOR, mask |= GOMP_DIM_MASK (level);\n+\t{\n+\t  ++n_lop_clauses;\n+\t  ret = OACC_ROUTINE_LOP_VECTOR;\n+\t}\n       if (clauses->seq)\n-\tlevel = GOMP_DIM_MAX, mask |= GOMP_DIM_MASK (level);\n+\t{\n+\t  ++n_lop_clauses;\n+\t  ret = OACC_ROUTINE_LOP_SEQ;\n+\t}\n \n-      if (mask != (mask & -mask))\n+      if (n_lop_clauses > 1)\n \tgfc_error (\"Multiple loop axes specified for routine\");\n     }\n \n-  if (level < 0)\n-    level = GOMP_DIM_MAX;\n-\n-  return level;\n+  return ret;\n }\n \n match\n@@ -2352,8 +2361,8 @@ gfc_match_oacc_routine (void)\n \t\t\t\t       gfc_current_ns->proc_name->name,\n \t\t\t\t       &old_loc))\n \tgoto cleanup;\n-      gfc_current_ns->proc_name->attr.oacc_function\n-\t= gfc_oacc_routine_dims (c) + 1;\n+      gfc_current_ns->proc_name->attr.oacc_routine_lop\n+\t= gfc_oacc_routine_lop (c);\n     }\n \n   if (n)"}, {"sha": "20d453051a2944c06e32e8dd9e5e6a83b6eed9b4", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-stmt.h\"\n #include \"gomp-constants.h\"\n #include \"gimplify.h\"\n+#include \"omp-general.h\"\n \n #define MAX_LABEL_VALUE 99999\n \n@@ -1406,18 +1407,31 @@ add_attributes_to_decl (symbol_attribute sym_attr, tree list)\n     list = tree_cons (get_identifier (\"omp declare target\"),\n \t\t      NULL_TREE, list);\n \n-  if (sym_attr.oacc_function)\n+  if (sym_attr.oacc_routine_lop != OACC_ROUTINE_LOP_NONE)\n     {\n-      tree dims = NULL_TREE;\n-      int ix;\n-      int level = sym_attr.oacc_function - 1;\n-\n-      for (ix = GOMP_DIM_MAX; ix--;)\n-\tdims = tree_cons (build_int_cst (boolean_type_node, ix >= level),\n-\t\t\t  integer_zero_node, dims);\n+      omp_clause_code code;\n+      switch (sym_attr.oacc_routine_lop)\n+\t{\n+\tcase OACC_ROUTINE_LOP_GANG:\n+\t  code = OMP_CLAUSE_GANG;\n+\t  break;\n+\tcase OACC_ROUTINE_LOP_WORKER:\n+\t  code = OMP_CLAUSE_WORKER;\n+\t  break;\n+\tcase OACC_ROUTINE_LOP_VECTOR:\n+\t  code = OMP_CLAUSE_VECTOR;\n+\t  break;\n+\tcase OACC_ROUTINE_LOP_SEQ:\n+\t  code = OMP_CLAUSE_SEQ;\n+\t  break;\n+\tcase OACC_ROUTINE_LOP_NONE:\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      tree c = build_omp_clause (UNKNOWN_LOCATION, code);\n \n-      list = tree_cons (get_identifier (\"oacc function\"),\n-\t\t\tdims, list);\n+      tree dims = oacc_build_routine_dims (c);\n+      list = oacc_replace_fn_attrib_attr (list, dims);\n     }\n \n   return list;"}, {"sha": "356772ff4582185d2f410160aa02ec19599d0192", "filename": "gcc/omp-general.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -540,16 +540,26 @@ oacc_launch_pack (unsigned code, tree device, unsigned op)\n \n /* Replace any existing oacc fn attribute with updated dimensions.  */\n \n-void\n-oacc_replace_fn_attrib (tree fn, tree dims)\n+/* Variant working on a list of attributes.  */\n+\n+tree\n+oacc_replace_fn_attrib_attr (tree attribs, tree dims)\n {\n   tree ident = get_identifier (OACC_FN_ATTRIB);\n-  tree attribs = DECL_ATTRIBUTES (fn);\n \n   /* If we happen to be present as the first attrib, drop it.  */\n   if (attribs && TREE_PURPOSE (attribs) == ident)\n     attribs = TREE_CHAIN (attribs);\n-  DECL_ATTRIBUTES (fn) = tree_cons (ident, dims, attribs);\n+  return tree_cons (ident, dims, attribs);\n+}\n+\n+/* Variant working on a function decl.  */\n+\n+void\n+oacc_replace_fn_attrib (tree fn, tree dims)\n+{\n+  DECL_ATTRIBUTES (fn)\n+    = oacc_replace_fn_attrib_attr (DECL_ATTRIBUTES (fn), dims);\n }\n \n /* Scan CLAUSES for launch dimensions and attach them to the oacc"}, {"sha": "60faa5213a27e7166cc53e5b62949f2968f8ae46", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -81,6 +81,7 @@ extern gimple *omp_build_barrier (tree lhs);\n extern poly_uint64 omp_max_vf (void);\n extern int omp_max_simt_vf (void);\n extern tree oacc_launch_pack (unsigned code, tree device, unsigned op);\n+extern tree oacc_replace_fn_attrib_attr (tree attribs, tree dims);\n extern void oacc_replace_fn_attrib (tree fn, tree dims);\n extern void oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args);\n extern tree oacc_build_routine_dims (tree clauses);"}, {"sha": "dec48441f3099675a168050b53b5a4388c29e037", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -1,5 +1,8 @@\n 2019-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR fortran/72741\n+\t* gfortran.dg/goacc/classify-routine.f95: Adjust.\n+\n \t* c-c++-common/goacc/routine-5.c: Revert earlier changes.\n \t* g++.dg/goacc/template.C: Likewise.\n "}, {"sha": "e435f5d7eaef155cea172710cb3181f2cfa4a4b3", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68034b1bc2058fd3c78b0f583e718e8443346580/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=68034b1bc2058fd3c78b0f583e718e8443346580", "patch": "@@ -21,10 +21,10 @@ subroutine ROUTINE\n end subroutine ROUTINE\n \n ! Check the offloaded function's attributes.\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp declare target, oacc function \\\\(0 0, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"ompexp\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp declare target, oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"ompexp\" } }\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n ! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target, oacc function \\\\(0 0, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target, oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}]}