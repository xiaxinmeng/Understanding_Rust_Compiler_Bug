{"sha": "d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0YjZlNmU4YTJkOGJhYjY1ZWYyZDRhMTBlNjk5M2Q3MDkwYzhlZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-03-24T10:09:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-03-24T10:09:01Z"}, "message": "rs6000-protos.h (rs6000_offsettable_memref_p): Declare.\n\n\t* config/rs6000/rs6000-protos.h (rs6000_offsettable_memref_p): Declare.\n\t(rs6000_legitimate_small_data_p): Delete.\n\t* config/rs6000/rs6000.c (rs6000_offsettable_memref_p): New predicate.\n\t(rs6000_legitimate_small_data_p): Rename to legitimate_small_data_p\n\tand make static.  Add forward declaration.  Update uses.\n\t(rs6000_split_multireg_move): Use rs6000_offsettable_memref_p instead\n\tof offsettable_memref_p.\n\t* config/rs6000/rs6000.md (movdf_hardfloat32): Revert 2005-08-23 fix.\n\tUse rs6000_offsettable_memref_p instead of a less accurate predicate.\n\nFrom-SVN: r112349", "tree": {"sha": "5ad3707267a5fefb5118ca74a64bf4c3267b16c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad3707267a5fefb5118ca74a64bf4c3267b16c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/comments", "author": null, "committer": null, "parents": [{"sha": "243cc8369be79c5ea217a53b2ab47563e2ea6e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243cc8369be79c5ea217a53b2ab47563e2ea6e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243cc8369be79c5ea217a53b2ab47563e2ea6e02"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "687eb46214bc4e6ed6eabc5eecce69c39f4ae98c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "patch": "@@ -1,3 +1,15 @@\n+2006-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_offsettable_memref_p): Declare.\n+\t(rs6000_legitimate_small_data_p): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_offsettable_memref_p): New predicate.\n+\t(rs6000_legitimate_small_data_p): Rename to legitimate_small_data_p\n+\tand make static.  Add forward declaration.  Update uses.\n+\t(rs6000_split_multireg_move): Use rs6000_offsettable_memref_p instead\n+\tof offsettable_memref_p.\n+\t* config/rs6000/rs6000.md (movdf_hardfloat32): Revert 2005-08-23 fix.\n+\tUse rs6000_offsettable_memref_p instead of a less accurate predicate.\n+\n 2006-03-24  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (propagate_rhs_into_lhs): Temporarily work"}, {"sha": "0cb5a50b773305f1279ceb3332f65c2da63d728a", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "patch": "@@ -42,8 +42,6 @@ extern bool invalid_e500_subreg (rtx, enum machine_mode);\n extern void validate_condition_mode (enum rtx_code, enum machine_mode);\n extern bool legitimate_constant_pool_address_p (rtx);\n extern bool legitimate_indirect_address_p (rtx, int);\n-extern bool rs6000_legitimate_offset_address_p (enum machine_mode, rtx, int);\n-extern bool rs6000_legitimate_small_data_p (enum machine_mode, rtx);\n \n extern rtx rs6000_got_register (rtx);\n extern rtx find_addr_reg (rtx);\n@@ -102,7 +100,9 @@ extern rtx rs6000_legitimize_address (rtx, rtx, enum machine_mode);\n extern rtx rs6000_legitimize_reload_address (rtx, enum machine_mode,\n \t\t\t\t\t     int, int, int, int *);\n extern int rs6000_legitimate_address (enum machine_mode, rtx, int);\n+extern bool rs6000_legitimate_offset_address_p (enum machine_mode, rtx, int);\n extern bool rs6000_mode_dependent_address (rtx);\n+extern bool rs6000_offsettable_memref_p (rtx);\n extern rtx rs6000_return_addr (int, rtx);\n extern void rs6000_output_symbol_ref (FILE*, rtx);\n extern HOST_WIDE_INT rs6000_initial_elimination_offset (int, int);"}, {"sha": "fbe4615fa555418c01de63b75c733b7a8f46030d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "patch": "@@ -588,6 +588,7 @@ static unsigned toc_hash_function (const void *);\n static int toc_hash_eq (const void *, const void *);\n static int constant_pool_expr_1 (rtx, int *, int *);\n static bool constant_pool_expr_p (rtx);\n+static bool legitimate_small_data_p (enum machine_mode, rtx);\n static bool legitimate_indexed_address_p (rtx, int);\n static bool legitimate_lo_sum_address_p (enum machine_mode, rtx, int);\n static struct machine_function * rs6000_init_machine_status (void);\n@@ -2692,8 +2693,8 @@ legitimate_constant_pool_address_p (rtx x)\n \t  && constant_pool_expr_p (XEXP (x, 1)));\n }\n \n-bool\n-rs6000_legitimate_small_data_p (enum machine_mode mode, rtx x)\n+static bool\n+legitimate_small_data_p (enum machine_mode mode, rtx x)\n {\n   return (DEFAULT_ABI == ABI_V4\n \t  && !flag_pic && !TARGET_TOC\n@@ -3478,7 +3479,7 @@ rs6000_legitimate_address (enum machine_mode mode, rtx x, int reg_ok_strict)\n       && TARGET_UPDATE\n       && legitimate_indirect_address_p (XEXP (x, 0), reg_ok_strict))\n     return 1;\n-  if (rs6000_legitimate_small_data_p (mode, x))\n+  if (legitimate_small_data_p (mode, x))\n     return 1;\n   if (legitimate_constant_pool_address_p (x))\n     return 1;\n@@ -3543,6 +3544,33 @@ rs6000_mode_dependent_address (rtx addr)\n   return false;\n }\n \n+/* More elaborate version of recog's offsettable_memref_p predicate\n+   that works around the ??? note of rs6000_mode_dependent_address.\n+   In particular it accepts\n+\n+     (mem:DI (plus:SI (reg/f:SI 31 31) (const_int 32760 [0x7ff8])))\n+\n+   in 32-bit mode, that the recog predicate rejects.  */\n+\n+bool\n+rs6000_offsettable_memref_p (rtx op)\n+{\n+  if (!MEM_P (op))\n+    return false;\n+\n+  /* First mimic offsettable_memref_p.  */\n+  if (offsettable_address_p (1, GET_MODE (op), XEXP (op, 0)))\n+    return true;\n+\n+  /* offsettable_address_p invokes rs6000_mode_dependent_address, but\n+     the latter predicate knows nothing about the mode of the memory\n+     reference and, therefore, assumes that it is the largest supported\n+     mode (TFmode).  As a consequence, legitimate offsettable memory\n+     references are rejected.  rs6000_legitimate_offset_address_p contains\n+     the correct logic for the PLUS case of rs6000_mode_dependent_address.  */\n+  return rs6000_legitimate_offset_address_p (GET_MODE (op), XEXP (op, 0), 1);\n+}\n+\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE\n@@ -12488,7 +12516,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t\t\t : gen_adddi3 (breg, breg, delta_rtx));\n \t      src = replace_equiv_address (src, breg);\n \t    }\n-\t  else if (! offsettable_memref_p (src))\n+\t  else if (! rs6000_offsettable_memref_p (src))\n \t    {\n \t      rtx basereg;\n \t      basereg = gen_rtx_REG (Pmode, reg);\n@@ -12541,7 +12569,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t      dst = replace_equiv_address (dst, breg);\n \t    }\n \t  else\n-\t    gcc_assert (offsettable_memref_p (dst));\n+\t    gcc_assert (rs6000_offsettable_memref_p (dst));\n \t}\n \n       for (i = 0; i < nregs; i++)"}, {"sha": "48e8df2e1f0e0862c0c24a5fe9b810b1a296ad78", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d04b6e6e8a2d8bab65ef2d4a10e6993d7090c8ef", "patch": "@@ -8155,14 +8155,11 @@\n       else\n \treturn \\\"mr %0,%1\\;mr %L0,%L1\\\";\n     case 1:\n-      if (GET_CODE (operands[1]) == MEM\n-\t  && (rs6000_legitimate_offset_address_p (DFmode, XEXP (operands[1], 0),\n-\t\t\treload_completed || reload_in_progress)\n-\t      || rs6000_legitimate_small_data_p (DFmode, XEXP (operands[1], 0))\n-\t      || GET_CODE (XEXP (operands[1], 0)) == REG\n-\t      || GET_CODE (XEXP (operands[1], 0)) == LO_SUM\n-\t      || GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n-\t      || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC))\n+      if (rs6000_offsettable_memref_p (operands[1])\n+\t  || (GET_CODE (operands[1]) == MEM\n+\t      && (GET_CODE (XEXP (operands[1], 0)) == LO_SUM\n+\t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n+\t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)))\n \t{\n \t  /* If the low-address word is used in the address, we must load\n \t     it last.  Otherwise, load it first.  Note that we cannot have\n@@ -8198,14 +8195,11 @@\n \t    }\n \t}\n     case 2:\n-      if (GET_CODE (operands[0]) == MEM\n-          && (rs6000_legitimate_offset_address_p (DFmode, XEXP (operands[0], 0),\n-\t\t    reload_completed || reload_in_progress)\n-\t      || rs6000_legitimate_small_data_p (DFmode, XEXP (operands[0], 0))\n-\t      || GET_CODE (XEXP (operands[0], 0)) == REG\n-    \t      || GET_CODE (XEXP (operands[0], 0)) == LO_SUM\n-\t      || GET_CODE (XEXP (operands[0], 0)) == PRE_INC\n-\t      || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC))\n+      if (rs6000_offsettable_memref_p (operands[0])\n+\t  || (GET_CODE (operands[0]) == MEM\n+\t      && (GET_CODE (XEXP (operands[0], 0)) == LO_SUM\n+\t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_INC\n+\t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)))\n \treturn \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\\";\n       else\n \t{"}]}