{"sha": "00f34291175981393b2a9802ada879e72335dcd0", "node_id": "C_kwDOANBUbNoAKDAwZjM0MjkxMTc1OTgxMzkzYjJhOTgwMmFkYTg3OWU3MjMzNWRjZDA", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-08T07:48:58Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-08T11:27:49Z"}, "message": "Come up with OPTION_SET_P macro.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/misc.c (gnat_post_options): Use new macro\n\tOPTION_SET_P.\n\t(gnat_init_gcc_eh): Likewise.\n\t(gnat_init_gcc_fp): Likewise.\n\ngcc/c-family/ChangeLog:\n\n\t* c-opts.c (c_common_post_options): Use new macro\n\tOPTION_SET_P.\n\ngcc/ChangeLog:\n\n\t* config/alpha/alpha.c (alpha_option_override): Use new macro\n\tOPTION_SET_P.\n\t* config/arc/arc.c (arc_override_options): Likewise.\n\t* config/arm/arm.c (arm_option_override): Likewise.\n\t* config/bfin/bfin.c (bfin_load_pic_reg): Likewise.\n\t* config/c6x/c6x.c (c6x_option_override): Likewise.\n\t* config/csky/csky.c: Likewise.\n\t* config/darwin.c (darwin_override_options): Likewise.\n\t* config/frv/frv.c (frv_option_override): Likewise.\n\t* config/i386/djgpp.h: Likewise.\n\t* config/i386/i386.c (ix86_stack_protect_guard): Likewise.\n\t(ix86_max_noce_ifcvt_seq_cost): Likewise.\n\t* config/ia64/ia64.c (ia64_option_override): Likewise.\n\t(ia64_override_options_after_change): Likewise.\n\t* config/m32c/m32c.c (m32c_option_override): Likewise.\n\t* config/m32r/m32r.c (m32r_init): Likewise.\n\t* config/m68k/m68k.c (m68k_option_override): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_option_override): Likewise.\n\t* config/mips/mips.c (mips_option_override): Likewise.\n\t* config/nios2/nios2.c (nios2_option_override): Likewise.\n\t* config/nvptx/nvptx.c (nvptx_option_override): Likewise.\n\t* config/pa/pa.c (pa_option_override): Likewise.\n\t* config/riscv/riscv.c (riscv_option_override): Likewise.\n\t* config/rs6000/aix71.h: Likewise.\n\t* config/rs6000/aix72.h: Likewise.\n\t* config/rs6000/aix73.h: Likewise.\n\t* config/rs6000/rs6000.c (darwin_rs6000_override_options): Likewise.\n\t(rs6000_override_options_after_change): Likewise.\n\t(rs6000_linux64_override_options): Likewise.\n\t(glibc_supports_ieee_128bit): Likewise.\n\t(rs6000_option_override_internal): Likewise.\n\t(rs6000_file_start): Likewise.\n\t(rs6000_darwin_file_start): Likewise.\n\t* config/rs6000/rtems.h: Likewise.\n\t* config/rs6000/sysv4.h: Likewise.\n\t* config/rs6000/vxworks.h (SUB3TARGET_OVERRIDE_OPTIONS): Likewise.\n\t* config/s390/s390.c (s390_option_override): Likewise.\n\t* config/sh/linux.h: Likewise.\n\t* config/sh/netbsd-elf.h (while): Likewise.\n\t* config/sh/sh.c (sh_option_override): Likewise.\n\t* config/sol2.c (solaris_override_options): Likewise.\n\t* config/sparc/sparc.c (sparc_option_override): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_option_override): Likewise.\n\t* config/visium/visium.c (visium_option_override): Likewise.\n\t* config/vxworks.c (vxworks_override_options): Likewise.\n\t* lto-opts.c (lto_write_options): Likewise.\n\t* omp-expand.c (expand_omp_simd): Likewise.\n\t* omp-general.c (omp_max_vf): Likewise.\n\t* omp-offload.c (oacc_xform_loop): Likewise.\n\t* opts.h (OPTION_SET_P): Likewise.\n\t* targhooks.c (default_max_noce_ifcvt_seq_cost): Likewise.\n\t* toplev.c (process_options): Likewise.\n\t* tree-predcom.c: Likewise.\n\t* tree-sra.c (analyze_all_variable_accesses): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (maybe_warn_about_constant_value): Use new macro\n\tOPTION_SET_P.\n\t* decl.c (redeclaration_error_message): Likewise.\n\t(cxx_init_decl_processing): Likewise.\n\ngcc/d/ChangeLog:\n\n\t* d-lang.cc (d_post_options): Use new macro\n\tOPTION_SET_P.\n\ngcc/fortran/ChangeLog:\n\n\t* options.c (gfc_post_options): Use new macro\n\tOPTION_SET_P.\n\ngcc/objc/ChangeLog:\n\n\t* objc-next-runtime-abi-01.c: Use new macro\n\tOPTION_SET_P.\n\t* objc-next-runtime-abi-02.c (objc_next_runtime_abi_02_init): Likewise.", "tree": {"sha": "5267346de0543d9c66b23bab9e09d0cf89c9b01f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5267346de0543d9c66b23bab9e09d0cf89c9b01f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00f34291175981393b2a9802ada879e72335dcd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f34291175981393b2a9802ada879e72335dcd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f34291175981393b2a9802ada879e72335dcd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f34291175981393b2a9802ada879e72335dcd0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e3a826871effc7093852a9181f641c693ae94f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e3a826871effc7093852a9181f641c693ae94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e3a826871effc7093852a9181f641c693ae94f"}], "stats": {"total": 359, "additions": 192, "deletions": 167}, "files": [{"sha": "d0735708670a55ec5bc4e976bbf432c69b29d73b", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -271,7 +271,7 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   warn_stringop_overflow = 0;\n \n   /* No caret by default for Ada.  */\n-  if (!global_options_set.x_flag_diagnostics_show_caret)\n+  if (!OPTION_SET_P (flag_diagnostics_show_caret))\n     global_dc->show_caret = false;\n \n   /* Warn only if STABS is not the default: we don't want to emit a warning if\n@@ -422,12 +422,12 @@ gnat_init_gcc_eh (void)\n   flag_delete_dead_exceptions = 1;\n   if (Suppress_Checks)\n     {\n-      if (!global_options_set.x_flag_non_call_exceptions)\n+      if (!OPTION_SET_P (flag_non_call_exceptions))\n \tflag_non_call_exceptions = Machine_Overflows_On_Target && GNAT_Mode;\n     }\n   else\n     {\n-      if (!global_options_set.x_flag_non_call_exceptions)\n+      if (!OPTION_SET_P (flag_non_call_exceptions))\n         flag_non_call_exceptions = 1;\n       flag_aggressive_loop_optimizations = 0;\n       warn_aggressive_loop_optimizations = 0;\n@@ -445,14 +445,14 @@ gnat_init_gcc_fp (void)\n      S'Signed_Zeros is true, but don't override the user if not.  */\n   if (Signed_Zeros_On_Target)\n     flag_signed_zeros = 1;\n-  else if (!global_options_set.x_flag_signed_zeros)\n+  else if (!OPTION_SET_P (flag_signed_zeros))\n     flag_signed_zeros = 0;\n \n   /* Assume that FP operations can trap if S'Machine_Overflow is true,\n      but don't override the user if not.  */\n   if (Machine_Overflows_On_Target)\n     flag_trapping_math = 1;\n-  else if (!global_options_set.x_flag_trapping_math)\n+  else if (!OPTION_SET_P (flag_trapping_math))\n     flag_trapping_math = 0;\n }\n "}, {"sha": "0225cba7a4bfbc0b67dc87738a8cdadeff0f8855", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -831,7 +831,7 @@ c_common_post_options (const char **pfilename)\n      for -ffp-contract=off).  */\n   if (flag_iso\n       && !c_dialect_cxx ()\n-      && (global_options_set.x_flag_fp_contract_mode\n+      && (OPTION_SET_P (flag_fp_contract_mode)\n \t  == (enum fp_contract_mode) 0)\n       && flag_unsafe_math_optimizations == 0)\n     flag_fp_contract_mode = FP_CONTRACT_OFF;\n@@ -842,7 +842,7 @@ c_common_post_options (const char **pfilename)\n      the set specified in ISO C99/C11.  */\n   if (!flag_iso\n       && !c_dialect_cxx ()\n-      && (global_options_set.x_flag_permitted_flt_eval_methods\n+      && (OPTION_SET_P (flag_permitted_flt_eval_methods)\n \t  == PERMITTED_FLT_EVAL_METHODS_DEFAULT))\n     flag_permitted_flt_eval_methods = PERMITTED_FLT_EVAL_METHODS_TS_18661;\n   else\n@@ -1040,7 +1040,7 @@ c_common_post_options (const char **pfilename)\n \n       /* Unless -f{,no-}ext-numeric-literals has been used explicitly,\n \t for -std=c++{11,14,17,20,23} default to -fno-ext-numeric-literals.  */\n-      if (flag_iso && !global_options_set.x_flag_ext_numeric_literals)\n+      if (flag_iso && !OPTION_SET_P (flag_ext_numeric_literals))\n \tcpp_opts->ext_numeric_literals = 0;\n     }\n   else if (warn_narrowing == -1)"}, {"sha": "fced7ceefe23ceb37deda1e1d5162be5ac29475c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -575,7 +575,7 @@ alpha_option_override (void)\n   }\n \n   /* Default the definition of \"small data\" to 8 bytes.  */\n-  if (!global_options_set.x_g_switch_value)\n+  if (!OPTION_SET_P (g_switch_value))\n     g_switch_value = 8;\n \n   /* Infer TARGET_SMALL_DATA from -fpic/-fPIC.  */"}, {"sha": "8244f37bf03dce3b70fe513a2a6e194d7d8304ff", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -1441,7 +1441,7 @@ arc_override_options (void)\n     target_flags |= MASK_NO_SDATA_SET;\n \n   /* Check for small data option */\n-  if (!global_options_set.x_g_switch_value && !TARGET_NO_SDATA_SET)\n+  if (!OPTION_SET_P (g_switch_value) && !TARGET_NO_SDATA_SET)\n     g_switch_value = TARGET_LL64 ? 8 : 4;\n \n   /* A7 has an issue with delay slots.  */\n@@ -1455,7 +1455,7 @@ arc_override_options (void)\n     target_flags &= ~MASK_MILLICODE_THUNK_SET;\n \n   /* Set unaligned to all HS cpus.  */\n-  if (!global_options_set.x_unaligned_access && TARGET_HS)\n+  if (!OPTION_SET_P (unaligned_access) && TARGET_HS)\n     unaligned_access = 1;\n \n   /* These need to be done at start up.  It's convenient to do them here.  */"}, {"sha": "471128fc86a8454782584914163b89624ad46cf2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -71,6 +71,7 @@\n #include \"gimple.h\"\n #include \"selftest.h\"\n #include \"tree-vectorizer.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -3468,7 +3469,7 @@ arm_option_override (void)\n \n   arm_active_target.isa = sbitmap_alloc (isa_num_bits);\n \n-  if (!global_options_set.x_arm_fpu_index)\n+  if (!OPTION_SET_P (arm_fpu_index))\n     {\n       bool ok;\n       int fpu_index;\n@@ -3528,7 +3529,7 @@ arm_option_override (void)\n     flag_schedule_insns = flag_schedule_insns_after_reload = 0;\n \n   /* Override the default structure alignment for AAPCS ABI.  */\n-  if (!global_options_set.x_arm_structure_size_boundary)\n+  if (!OPTION_SET_P (arm_structure_size_boundary))\n     {\n       if (TARGET_AAPCS_BASED)\n \tarm_structure_size_boundary = 8;\n@@ -3553,12 +3554,12 @@ arm_option_override (void)\n \n   if (TARGET_VXWORKS_RTP)\n     {\n-      if (!global_options_set.x_arm_pic_data_is_text_relative)\n+      if (!OPTION_SET_P (arm_pic_data_is_text_relative))\n \tarm_pic_data_is_text_relative = 0;\n     }\n   else if (flag_pic\n \t   && !arm_pic_data_is_text_relative\n-\t   && !(global_options_set.x_target_flags & MASK_SINGLE_PIC_BASE))\n+\t   && !(OPTION_SET_P (target_flags) & MASK_SINGLE_PIC_BASE))\n     /* When text & data segments don't have a fixed displacement, the\n        intended use is with a single, read only, pic base register.\n        Unless the user explicitly requested not to do that, set"}, {"sha": "3287e495dd37a8e9c1760e60f621286b73078518", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -53,6 +53,7 @@\n #include \"hw-doloop.h\"\n #include \"dumpfile.h\"\n #include \"builtins.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1046,7 +1047,7 @@ bfin_load_pic_reg (rtx dest)\n   if (local_info_node && local_info_node->local)\n     return pic_offset_table_rtx;\n       \n-  if (global_options_set.x_bfin_library_id)\n+  if (OPTION_SET_P (bfin_library_id))\n     addr = plus_constant (Pmode, pic_offset_table_rtx,\n \t\t\t   -4 - bfin_library_id * 4);\n   else\n@@ -2369,7 +2370,7 @@ bfin_option_override (void)\n #endif\n \n   /* Library identification */\n-  if (global_options_set.x_bfin_library_id && ! TARGET_ID_SHARED_LIBRARY)\n+  if (OPTION_SET_P (bfin_library_id) && ! TARGET_ID_SHARED_LIBRARY)\n     error (\"%<-mshared-library-id=%> specified without \"\n \t   \"%<-mid-shared-library%>\");\n "}, {"sha": "4854371ee130a68b121c2ace4293cf03a3e38717", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -60,6 +60,7 @@\n #include \"dumpfile.h\"\n #include \"builtins.h\"\n #include \"flags.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -221,7 +222,7 @@ c6x_option_override (void)\n {\n   unsigned i;\n \n-  if (global_options_set.x_c6x_arch_option)\n+  if (OPTION_SET_P (c6x_arch_option))\n     {\n       c6x_arch = all_isas[c6x_arch_option].type;\n       c6x_insn_mask &= ~C6X_INSNS_ALL_CPU_BITS;"}, {"sha": "487288b32920f80e70955ebb156a5149cc5872a9", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -67,6 +67,7 @@\n #include \"pass_manager.h\"\n #include \"tree-pass.h\"\n #include \"context.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -2757,15 +2758,15 @@ csky_option_override (void)\n #ifdef ENABLE_TPF_DEBUG\n   /* Don't emit DWARF4 unless specifically selected.  The TPF\n      debuggers do not yet support DWARF 3/4.  */\n-  if (!global_options_set.x_dwarf_strict)\n+  if (!OPTION_SET_P (dwarf_strict))\n     dwarf_strict = 1;\n-  if (!global_options_set.x_dwarf_version)\n+  if (!OPTION_SET_P (dwarf_version))\n     dwarf_version = 3;\n #endif\n \n   /* Don't run the scheduler before reload by default,\n      since it tends to increase register pressure.  */\n-  if (!global_options_set.x_flag_schedule_insns)\n+  if (!OPTION_SET_P (flag_schedule_insns))\n     flag_schedule_insns = 0;\n \n   csky_add_gc_roots ();"}, {"sha": "28dc55d9b1c8b126ad886020a24176809a6b1a4f", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"optabs.h\"\n #include \"flags.h\"\n+#include \"opts.h\"\n \n /* Fix and Continue.\n \n@@ -3282,15 +3283,15 @@ darwin_override_options (void)\n     }\n \n   /* Unless set, force ABI=2 for NeXT and m64, 0 otherwise.  */\n-  if (!global_options_set.x_flag_objc_abi)\n+  if (!OPTION_SET_P (flag_objc_abi))\n     global_options.x_flag_objc_abi\n \t= (!flag_next_runtime)\n \t\t? 0\n \t\t: (TARGET_64BIT ? 2\n \t\t\t\t: (generating_for_darwin_version >= 9) ? 1\n \t\t\t\t\t\t\t\t       : 0);\n \n-  if (global_options_set.x_flag_objc_abi && flag_next_runtime)\n+  if (OPTION_SET_P (flag_objc_abi) && flag_next_runtime)\n     {\n       if (TARGET_64BIT && global_options.x_flag_objc_abi != 2)\n \t/* The Objective-C family ABI 2 is the only valid version NeXT/m64.  */\n@@ -3307,23 +3308,23 @@ darwin_override_options (void)\n \n   /* Don't emit DWARF3/4 unless specifically selected.  This is a\n      workaround for tool bugs.  */\n-  if (!global_options_set.x_dwarf_strict)\n+  if (!OPTION_SET_P (dwarf_strict))\n     dwarf_strict = 1;\n-  if (!global_options_set.x_dwarf_version)\n+  if (!OPTION_SET_P (dwarf_version))\n     dwarf_version = 2;\n \n-  if (global_options_set.x_dwarf_split_debug_info)\n+  if (OPTION_SET_P (dwarf_split_debug_info))\n     {\n       inform (input_location,\n \t      \"%<-gsplit-dwarf%> is not supported on this platform, ignored\");\n       dwarf_split_debug_info = 0;\n-      global_options_set.x_dwarf_split_debug_info = 0;\n+      OPTION_SET_P (dwarf_split_debug_info) = 0;\n     }\n \n   /* Do not allow unwind tables to be generated by default for m32.\n      fnon-call-exceptions will override this, regardless of what we do.  */\n   if (generating_for_darwin_version < 10\n-      && !global_options_set.x_flag_asynchronous_unwind_tables\n+      && !OPTION_SET_P (flag_asynchronous_unwind_tables)\n       && !TARGET_64BIT)\n     global_options.x_flag_asynchronous_unwind_tables = 0;\n \n@@ -3334,15 +3335,15 @@ darwin_override_options (void)\n       will be generated\".  If the User specifically sets flags... we assume\n       (s)he knows why...  */\n    if (generating_for_darwin_version < 9\n-       && global_options_set.x_flag_reorder_blocks_and_partition\n+       && OPTION_SET_P (flag_reorder_blocks_and_partition)\n        && ((global_options.x_flag_exceptions \t\t/* User, c++, java */\n-\t    && !global_options_set.x_flag_exceptions) \t/* User specified... */\n+\t    && !OPTION_SET_P (flag_exceptions)) \t/* User specified... */\n \t   || (global_options.x_flag_unwind_tables\n-\t       && !global_options_set.x_flag_unwind_tables)\n+\t       && !OPTION_SET_P (flag_unwind_tables))\n \t   || (global_options.x_flag_non_call_exceptions\n-\t       && !global_options_set.x_flag_non_call_exceptions)\n+\t       && !OPTION_SET_P (flag_non_call_exceptions))\n \t   || (global_options.x_flag_asynchronous_unwind_tables\n-\t       && !global_options_set.x_flag_asynchronous_unwind_tables)))\n+\t       && !OPTION_SET_P (flag_asynchronous_unwind_tables))))\n     {\n       inform (input_location,\n \t      \"%<-freorder-blocks-and-partition%> does not work with \"\n@@ -3353,12 +3354,12 @@ darwin_override_options (void)\n \n     /* FIXME: flag_objc_sjlj_exceptions is no longer needed since there is only\n        one valid choice of exception scheme for each runtime.  */\n-    if (!global_options_set.x_flag_objc_sjlj_exceptions)\n+    if (!OPTION_SET_P (flag_objc_sjlj_exceptions))\n       global_options.x_flag_objc_sjlj_exceptions =\n \t\t\t\tflag_next_runtime && !TARGET_64BIT;\n \n     /* FIXME: and this could be eliminated then too.  */\n-    if (!global_options_set.x_flag_exceptions\n+    if (!OPTION_SET_P (flag_exceptions)\n \t&& flag_objc_exceptions\n \t&& TARGET_64BIT)\n       flag_exceptions = 1;\n@@ -3414,7 +3415,7 @@ darwin_override_options (void)\n      Linkers that don't need stubs, don't need the EH symbol markers either.\n   */\n \n-  if (!global_options_set.x_darwin_symbol_stubs)\n+  if (!OPTION_SET_P (darwin_symbol_stubs))\n     {\n       if (darwin_target_linker)\n \t{"}, {"sha": "02cd07c09bcfdc25befb9e729651c1cc8732700a", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ifcvt.h\"\n #include \"rtl-iter.h\"\n #include \"calls.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -664,7 +665,7 @@ frv_option_override (void)\n       if (!flag_pic)\t\t/* -fPIC */\n \tflag_pic = 2;\n \n-      if (!global_options_set.x_g_switch_value)\t/* -G0 */\n+      if (!OPTION_SET_P (g_switch_value))\t/* -G0 */\n \t{\n \t  g_switch_value = 0;\n \t}\n@@ -757,7 +758,7 @@ frv_option_override (void)\n     }\n \n   /* Check for small data option */\n-  if (!global_options_set.x_g_switch_value && !TARGET_LIBPIC)\n+  if (!OPTION_SET_P (g_switch_value) && !TARGET_LIBPIC)\n     g_switch_value = SDATA_DEFAULT_SIZE;\n \n   /* There is no single unaligned SI op for PIC code.  Sometimes we"}, {"sha": "f1afad91c9943db3d48e218ed31fd29c4b12205c", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -147,7 +147,7 @@ along with GCC; see the file COPYING3.  If not see\n                                                                         \\\n         /* Don't emit DWARF3/4 unless specifically selected. */         \\\n         /* DWARF3/4 currently does not work for DJGPP.  */              \\\n-        if (!global_options_set.x_dwarf_version)                        \\\n+        if (!OPTION_SET_P (dwarf_version))                        \\\n             dwarf_version = 2;                                          \\\n                                                                         \\\n         }                                                               \\"}, {"sha": "fb656094e9ef9bd42912201c30c27431624cb275", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -22280,7 +22280,7 @@ ix86_stack_protect_guard (void)\n       tree type = build_qualified_type (type_node, qual);\n       tree t;\n \n-      if (global_options_set.x_ix86_stack_protector_guard_symbol_str)\n+      if (OPTION_SET_P (ix86_stack_protector_guard_symbol_str))\n \t{\n \t  t = ix86_tls_stack_chk_guard_decl;\n \n@@ -22794,12 +22794,12 @@ ix86_max_noce_ifcvt_seq_cost (edge e)\n   bool predictable_p = predictable_edge_p (e);\n   if (predictable_p)\n     {\n-      if (global_options_set.x_param_max_rtl_if_conversion_predictable_cost)\n+      if (OPTION_SET_P (param_max_rtl_if_conversion_predictable_cost))\n \treturn param_max_rtl_if_conversion_predictable_cost;\n     }\n   else\n     {\n-      if (global_options_set.x_param_max_rtl_if_conversion_unpredictable_cost)\n+      if (OPTION_SET_P (param_max_rtl_if_conversion_unpredictable_cost))\n \treturn param_max_rtl_if_conversion_unpredictable_cost;\n     }\n "}, {"sha": "39a0e0791b791665ae1573ff2f24677bd4a3c871", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -6098,7 +6098,7 @@ ia64_option_override (void)\n     flag_ira_loop_pressure = 1;\n \n \n-  ia64_section_threshold = (global_options_set.x_g_switch_value\n+  ia64_section_threshold = (OPTION_SET_P (g_switch_value)\n \t\t\t    ? g_switch_value\n \t\t\t    : IA64_DEFAULT_GVALUE);\n \n@@ -6120,8 +6120,8 @@ static void\n ia64_override_options_after_change (void)\n {\n   if (optimize >= 3\n-      && !global_options_set.x_flag_selective_scheduling\n-      && !global_options_set.x_flag_selective_scheduling2)\n+      && !OPTION_SET_P (flag_selective_scheduling)\n+      && !OPTION_SET_P (flag_selective_scheduling2))\n     {\n       flag_selective_scheduling2 = 1;\n       flag_sel_sched_pipelining = 1;"}, {"sha": "f99e2b0a4859a80006963177ab16e02c404e8e27", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -48,6 +48,7 @@\n #include \"expr.h\"\n #include \"tm-constrs.h\"\n #include \"builtins.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -412,7 +413,7 @@ static void\n m32c_option_override (void)\n {\n   /* We limit memregs to 0..16, and provide a default.  */\n-  if (global_options_set.x_target_memregs)\n+  if (OPTION_SET_P (target_memregs))\n     {\n       if (target_memregs < 0 || target_memregs > 16)\n \terror (\"invalid target memregs value %<%d%>\", target_memregs);"}, {"sha": "d644f6bda73e4d0c7f1693a6352d1710e331607e", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -45,6 +45,7 @@\n #include \"expr.h\"\n #include \"tm-constrs.h\"\n #include \"builtins.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -244,7 +245,7 @@ m32r_init (void)\n   m32r_punct_chars['@'] = 1; /* ??? no longer used */\n \n   /* Provide default value if not specified.  */\n-  if (!global_options_set.x_g_switch_value)\n+  if (!OPTION_SET_P (g_switch_value))\n     g_switch_value = SDATA_DEFAULT_SIZE;\n }\n "}, {"sha": "d1105e7a1377b7e319fcdd9454c839cb695d06aa", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -500,13 +500,13 @@ m68k_option_override (void)\n   const struct m68k_target_selection *entry;\n   unsigned long target_mask;\n \n-  if (global_options_set.x_m68k_arch_option)\n+  if (OPTION_SET_P (m68k_arch_option))\n     m68k_arch_entry = &all_isas[m68k_arch_option];\n \n-  if (global_options_set.x_m68k_cpu_option)\n+  if (OPTION_SET_P (m68k_cpu_option))\n     m68k_cpu_entry = &all_devices[(int) m68k_cpu_option];\n \n-  if (global_options_set.x_m68k_tune_option)\n+  if (OPTION_SET_P (m68k_tune_option))\n     m68k_tune_entry = &all_microarchs[(int) m68k_tune_option];\n \n   /* User can choose:"}, {"sha": "4813f7a7921414eb7304e36b0b4c64fafddbd431", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -51,6 +51,7 @@\n #include \"cfgloop.h\"\n #include \"insn-addr.h\"\n #include \"cfgrtl.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1741,7 +1742,7 @@ microblaze_option_override (void)\n   machine_mode mode;\n   int ver;\n \n-  microblaze_section_threshold = (global_options_set.x_g_switch_value\n+  microblaze_section_threshold = (OPTION_SET_P (g_switch_value)\n \t\t\t\t  ? g_switch_value\n \t\t\t\t  : MICROBLAZE_DEFAULT_GVALUE);\n "}, {"sha": "807bf1a78d4ff84e4daac3ab566d5863a6b271ce", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -66,6 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n #include \"flags.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -19883,7 +19884,7 @@ mips_option_override (void)\n {\n   int i, start, regno, mode;\n \n-  if (global_options_set.x_mips_isa_option)\n+  if (OPTION_SET_P (mips_isa_option))\n     mips_isa_option_info = &mips_cpu_info_table[mips_isa_option];\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n@@ -19915,15 +19916,15 @@ mips_option_override (void)\n     TARGET_INTERLINK_COMPRESSED = 1;\n \n   /* Set the small data limit.  */\n-  mips_small_data_threshold = (global_options_set.x_g_switch_value\n+  mips_small_data_threshold = (OPTION_SET_P (g_switch_value)\n \t\t\t       ? g_switch_value\n \t\t\t       : MIPS_DEFAULT_GVALUE);\n \n   /* The following code determines the architecture and register size.\n      Similar code was added to GAS 2.14 (see tc-mips.c:md_after_parse_args()).\n      The GAS and GCC code should be kept in sync as much as possible.  */\n \n-  if (global_options_set.x_mips_arch_option)\n+  if (OPTION_SET_P (mips_arch_option))\n     mips_set_architecture (mips_cpu_info_from_opt (mips_arch_option));\n \n   if (mips_isa_option_info != 0)\n@@ -19945,7 +19946,7 @@ mips_option_override (void)\n \t   mips_arch_info->name);\n \n   /* Optimize for mips_arch, unless -mtune selects a different processor.  */\n-  if (global_options_set.x_mips_tune_option)\n+  if (OPTION_SET_P (mips_tune_option))\n     mips_set_tune (mips_cpu_info_from_opt (mips_tune_option));\n \n   if (mips_tune_info == 0)"}, {"sha": "7a613e4c13e5444fc4bc2d5883835aa9723e48c3", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -52,6 +52,7 @@\n #include \"builtins.h\"\n #include \"tree-pass.h\"\n #include \"xregex.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1363,7 +1364,7 @@ nios2_option_override (void)\n   init_machine_status = &nios2_init_machine_status;\n \n   nios2_section_threshold\n-    = (global_options_set.x_g_switch_value\n+    = (OPTION_SET_P (g_switch_value)\n        ? g_switch_value : NIOS2_DEFAULT_GVALUE);\n \n   if (nios2_gpopt_option == gpopt_unspecified)"}, {"sha": "951252e598a2bb5733f45dd7b75a9857ee250d5b", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -215,15 +215,15 @@ nvptx_option_override (void)\n   /* Set toplevel_reorder, unless explicitly disabled.  We need\n      reordering so that we emit necessary assembler decls of\n      undeclared variables. */\n-  if (!global_options_set.x_flag_toplevel_reorder)\n+  if (!OPTION_SET_P (flag_toplevel_reorder))\n     flag_toplevel_reorder = 1;\n \n   debug_nonbind_markers_p = 0;\n \n   /* Set flag_no_common, unless explicitly disabled.  We fake common\n      using .weak, and that's not entirely accurate, so avoid it\n      unless forced.  */\n-  if (!global_options_set.x_flag_no_common)\n+  if (!OPTION_SET_P (flag_no_common))\n     flag_no_common = 1;\n \n   /* The patch area requires nops, which we don't have.  */"}, {"sha": "d13021ad94aa862f03f636237aef806d9f03b40e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -545,9 +545,9 @@ pa_option_override (void)\n     {\n       /* DWARF5 is not supported by gdb.  Don't emit DWARF5 unless\n \t specifically selected.  */\n-      if (!global_options_set.x_dwarf_strict)\n+      if (!OPTION_SET_P (dwarf_strict))\n \tdwarf_strict = 1;\n-      if (!global_options_set.x_dwarf_version)\n+      if (!OPTION_SET_P (dwarf_version))\n \tdwarf_version = 4;\n     }\n "}, {"sha": "126572c624371e5896bb8c323c48dff0e417f53f", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"predict.h\"\n #include \"tree-pass.h\"\n+#include \"opts.h\"\n \n /* True if X is an UNSPEC wrapper around a SYMBOL_REF or LABEL_REF.  */\n #define UNSPEC_ADDRESS_P(X)\t\t\t\t\t\\\n@@ -4839,23 +4840,23 @@ riscv_option_override (void)\n #endif\n \n   if (riscv_stack_protector_guard == SSP_GLOBAL\n-      && global_options_set.x_riscv_stack_protector_guard_offset_str)\n+      && OPTION_SET_P (riscv_stack_protector_guard_offset_str))\n     {\n       error (\"incompatible options %<-mstack-protector-guard=global%> and \"\n \t     \"%<-mstack-protector-guard-offset=%s%>\",\n \t     riscv_stack_protector_guard_offset_str);\n     }\n \n   if (riscv_stack_protector_guard == SSP_TLS\n-      && !(global_options_set.x_riscv_stack_protector_guard_offset_str\n-\t   && global_options_set.x_riscv_stack_protector_guard_reg_str))\n+      && !(OPTION_SET_P (riscv_stack_protector_guard_offset_str)\n+\t   && OPTION_SET_P (riscv_stack_protector_guard_reg_str)))\n     {\n       error (\"both %<-mstack-protector-guard-offset%> and \"\n \t     \"%<-mstack-protector-guard-reg%> must be used \"\n \t     \"with %<-mstack-protector-guard=sysreg%>\");\n     }\n \n-  if (global_options_set.x_riscv_stack_protector_guard_reg_str)\n+  if (OPTION_SET_P (riscv_stack_protector_guard_reg_str))\n     {\n       const char *str = riscv_stack_protector_guard_reg_str;\n       int reg = decode_reg_name (str);\n@@ -4867,7 +4868,7 @@ riscv_option_override (void)\n       riscv_stack_protector_guard_reg = reg;\n     }\n \n-  if (global_options_set.x_riscv_stack_protector_guard_offset_str)\n+  if (OPTION_SET_P (riscv_stack_protector_guard_offset_str))\n     {\n       char *end;\n       const char *str = riscv_stack_protector_guard_offset_str;"}, {"sha": "ddd204dd862e5806922bc3852c03c1a22a9cb1f7", "filename": "gcc/config/rs6000/aix71.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix71.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -33,7 +33,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n-      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+      if (OPTION_SET_P (rs6000_long_double_type_size))\t\t\\\n \twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n@@ -43,7 +43,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n        & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n+      if (OPTION_SET_P (rs6000_current_cmodel)\t\t\t\\\n \t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n \terror (\"%<-mcmodel%> incompatible with other toc options\"); \t\\\n       SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n@@ -63,7 +63,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       /* aix/ppc doesn't support -mvsx and -maltivec with Go */\t\t\\\n       rs6000_isa_flags &= ~(OPTION_MASK_VSX | OPTION_MASK_ALTIVEC);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  if (!global_options_set.x_dwarf_version)\t\t\t\t\\\n+  if (!OPTION_SET_P (dwarf_version))\t\t\t\t\\\n     /* AIX only supports DWARF 4.  */\t\t\t\t\t\\\n     dwarf_version = 4;\t\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "f0e375cb984d7cb45cf99eaa90e8649e619f8886", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -33,7 +33,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n-      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+      if (OPTION_SET_P (rs6000_long_double_type_size))\t\t\\\n \twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n@@ -43,7 +43,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n        & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n+      if (OPTION_SET_P (rs6000_current_cmodel)\t\t\t\\\n \t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n \terror (\"%<-mcmodel%> incompatible with other toc options\"); \t\\\n       SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n@@ -63,7 +63,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       /* aix/ppc doesn't support -mvsx and -maltivec with Go */\t\t\\\n       rs6000_isa_flags &= ~(OPTION_MASK_VSX | OPTION_MASK_ALTIVEC);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  if (!global_options_set.x_dwarf_version)\t\t\t\t\\\n+  if (!OPTION_SET_P (dwarf_version))\t\t\t\t\\\n     /* AIX only supports DWARF 4.  */\t\t\t\t\t\\\n     dwarf_version = 4;\t\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "2c92cc3db0dd6dc267e171374b62970706fcb457", "filename": "gcc/config/rs6000/aix73.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Faix73.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Faix73.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix73.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -33,7 +33,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n-      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+      if (OPTION_SET_P (rs6000_long_double_type_size))\t\t\\\n \twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n@@ -43,7 +43,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n        & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n+      if (OPTION_SET_P (rs6000_current_cmodel)\t\t\t\\\n \t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n \terror (\"%<-mcmodel%> incompatible with other toc options\"); \t\\\n       SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n@@ -63,7 +63,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       /* aix/ppc doesn't support -mvsx and -maltivec with Go */\t\t\\\n       rs6000_isa_flags &= ~(OPTION_MASK_VSX | OPTION_MASK_ALTIVEC);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  if (!global_options_set.x_dwarf_version)\t\t\t\t\\\n+  if (!OPTION_SET_P (dwarf_version))\t\t\t\t\\\n     /* AIX only supports DWARF 4.  */\t\t\t\t\t\\\n     dwarf_version = 4;\t\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "acba4d9f26c823d6241975883b1321fe01f2970e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -3392,7 +3392,7 @@ darwin_rs6000_override_options (void)\n       && !flag_apple_kext\n       && strverscmp (darwin_macosx_version_min, \"10.5\") >= 0\n       && ! (rs6000_isa_flags_explicit & OPTION_MASK_ALTIVEC)\n-      && ! global_options_set.x_rs6000_cpu_index)\n+      && ! OPTION_SET_P (rs6000_cpu_index))\n     {\n       rs6000_isa_flags |= OPTION_MASK_ALTIVEC;\n     }\n@@ -3471,26 +3471,26 @@ rs6000_override_options_after_change (void)\n {\n   /* Explicit -funroll-loops turns -munroll-only-small-loops off, and\n      turns -frename-registers on.  */\n-  if ((global_options_set.x_flag_unroll_loops && flag_unroll_loops)\n-       || (global_options_set.x_flag_unroll_all_loops\n+  if ((OPTION_SET_P (flag_unroll_loops) && flag_unroll_loops)\n+       || (OPTION_SET_P (flag_unroll_all_loops)\n \t   && flag_unroll_all_loops))\n     {\n-      if (!global_options_set.x_unroll_only_small_loops)\n+      if (!OPTION_SET_P (unroll_only_small_loops))\n \tunroll_only_small_loops = 0;\n-      if (!global_options_set.x_flag_rename_registers)\n+      if (!OPTION_SET_P (flag_rename_registers))\n \tflag_rename_registers = 1;\n-      if (!global_options_set.x_flag_cunroll_grow_size)\n+      if (!OPTION_SET_P (flag_cunroll_grow_size))\n \tflag_cunroll_grow_size = 1;\n     }\n-  else if (!global_options_set.x_flag_cunroll_grow_size)\n+  else if (!OPTION_SET_P (flag_cunroll_grow_size))\n     flag_cunroll_grow_size = flag_peel_loops || optimize >= 3;\n }\n \n #ifdef TARGET_USES_LINUX64_OPT\n static void\n rs6000_linux64_override_options ()\n {\n-  if (!global_options_set.x_rs6000_alignment_flags)\n+  if (!OPTION_SET_P (rs6000_alignment_flags))\n     rs6000_alignment_flags = MASK_ALIGN_NATURAL;\n   if (rs6000_isa_flags & OPTION_MASK_64BIT)\n     {\n@@ -3526,11 +3526,11 @@ rs6000_linux64_override_options ()\n \t  rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n \t  error (\"%<-m64%> requires a PowerPC64 cpu\");\n \t}\n-      if (!global_options_set.x_rs6000_current_cmodel)\n+      if (!OPTION_SET_P (rs6000_current_cmodel))\n \tSET_CMODEL (CMODEL_MEDIUM);\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_MINIMAL_TOC) != 0)\n \t{\n-\t  if (global_options_set.x_rs6000_current_cmodel\n+\t  if (OPTION_SET_P (rs6000_current_cmodel)\n \t      && rs6000_current_cmodel != CMODEL_SMALL)\n \t    error (\"%<-mcmodel incompatible with other toc options%>\");\n \t  if (TARGET_MINIMAL_TOC)\n@@ -3545,14 +3545,14 @@ rs6000_linux64_override_options ()\n \t}\n       if (rs6000_current_cmodel != CMODEL_SMALL)\n \t{\n-\t  if (!global_options_set.x_TARGET_NO_FP_IN_TOC)\n+\t  if (!OPTION_SET_P (TARGET_NO_FP_IN_TOC))\n \t    TARGET_NO_FP_IN_TOC = rs6000_current_cmodel == CMODEL_MEDIUM;\n-\t  if (!global_options_set.x_TARGET_NO_SUM_IN_TOC)\n+\t  if (!OPTION_SET_P (TARGET_NO_SUM_IN_TOC))\n \t    TARGET_NO_SUM_IN_TOC = 0;\n \t}\n       if (TARGET_PLTSEQ && DEFAULT_ABI != ABI_ELFv2)\n \t{\n-\t  if (global_options_set.x_rs6000_pltseq)\n+\t  if (OPTION_SET_P (rs6000_pltseq))\n \t    warning (0, \"%qs unsupported for this ABI\",\n \t\t     \"-mpltseq\");\n \t  rs6000_pltseq = false;\n@@ -3567,7 +3567,7 @@ rs6000_linux64_override_options ()\n \t  profile_kernel = 0;\n \t  error (INVALID_32BIT, \"profile-kernel\");\n \t}\n-      if (global_options_set.x_rs6000_current_cmodel)\n+      if (OPTION_SET_P (rs6000_current_cmodel))\n \t{\n \t  SET_CMODEL (CMODEL_SMALL);\n \t  error (INVALID_32BIT, \"cmodel\");\n@@ -3627,7 +3627,7 @@ glibc_supports_ieee_128bit (void)\n      includes OPTION_TARGET_CPU_DEFAULT, representing the name of the\n      default CPU specified at build configure time, TARGET_DEFAULT,\n      representing the default set of option flags for the default\n-     target, and global_options_set.x_rs6000_isa_flags, representing\n+     target, and OPTION_SET_P (rs6000_isa_flags), representing\n      which options were requested on the command line.\n \n    Upon return from this function:\n@@ -3676,13 +3676,13 @@ rs6000_option_override_internal (bool global_init_p)\n \n   /* Remember the explicit arguments.  */\n   if (global_init_p)\n-    rs6000_isa_flags_explicit = global_options_set.x_rs6000_isa_flags;\n+    rs6000_isa_flags_explicit = OPTION_SET_P (rs6000_isa_flags);\n \n   /* On 64-bit Darwin, power alignment is ABI-incompatible with some C\n      library functions, so warn about it. The flag may be useful for\n      performance studies from time to time though, so don't disable it\n      entirely.  */\n-  if (global_options_set.x_rs6000_alignment_flags\n+  if (OPTION_SET_P (rs6000_alignment_flags)\n       && rs6000_alignment_flags == MASK_ALIGN_POWER\n       && DEFAULT_ABI == ABI_DARWIN\n       && TARGET_64BIT)\n@@ -3695,20 +3695,20 @@ rs6000_option_override_internal (bool global_init_p)\n      with enough (>= 32) registers.  It is an expensive optimization.\n      So it is on only for peak performance.  */\n   if (optimize >= 3 && global_init_p\n-      && !global_options_set.x_flag_ira_loop_pressure)\n+      && !OPTION_SET_P (flag_ira_loop_pressure))\n     flag_ira_loop_pressure = 1;\n \n   /* -fsanitize=address needs to turn on -fasynchronous-unwind-tables in order\n      for tracebacks to be complete but not if any -fasynchronous-unwind-tables\n      options were already specified.  */\n   if (flag_sanitize & SANITIZE_USER_ADDRESS\n-      && !global_options_set.x_flag_asynchronous_unwind_tables)\n+      && !OPTION_SET_P (flag_asynchronous_unwind_tables))\n     flag_asynchronous_unwind_tables = 1;\n \n   /* -fvariable-expansion-in-unroller is a win for POWER whenever the\n      loop unroller is active.  It is only checked during unrolling, so\n      we can just set it on by default.  */\n-  if (!global_options_set.x_flag_variable_expansion_in_unroller)\n+  if (!OPTION_SET_P (flag_variable_expansion_in_unroller))\n     flag_variable_expansion_in_unroller = 1;\n \n   /* Set the pointer size.  */\n@@ -3905,7 +3905,7 @@ rs6000_option_override_internal (bool global_init_p)\n \n #ifdef XCOFF_DEBUGGING_INFO\n   /* For AIX default to 64-bit DWARF.  */\n-  if (!global_options_set.x_dwarf_offset_size)\n+  if (!OPTION_SET_P (dwarf_offset_size))\n     dwarf_offset_size = POINTER_SIZE_UNITS;\n #endif\n \n@@ -4129,7 +4129,7 @@ rs6000_option_override_internal (bool global_init_p)\n   else if (TARGET_ALLOW_MOVMISALIGN && !TARGET_VSX)\n     {\n       if (TARGET_ALLOW_MOVMISALIGN > 0\n-\t  && global_options_set.x_TARGET_ALLOW_MOVMISALIGN)\n+\t  && OPTION_SET_P (TARGET_ALLOW_MOVMISALIGN))\n \terror (\"%qs requires %qs\", \"-mallow-movmisalign\", \"-mvsx\");\n \n       TARGET_ALLOW_MOVMISALIGN = 0;\n@@ -4184,7 +4184,7 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t\t  : FLOAT_PRECISION_TFmode);\n \n   /* Set long double size before the IEEE 128-bit tests.  */\n-  if (!global_options_set.x_rs6000_long_double_type_size)\n+  if (!OPTION_SET_P (rs6000_long_double_type_size))\n     {\n       if (main_target_opt != NULL\n \t  && (main_target_opt->x_rs6000_long_double_type_size\n@@ -4197,7 +4197,7 @@ rs6000_option_override_internal (bool global_init_p)\n     ; /* The option value can be seen when cl_target_option_restore is called.  */\n   else if (rs6000_long_double_type_size == 128)\n     rs6000_long_double_type_size = FLOAT_PRECISION_TFmode;\n-  else if (global_options_set.x_rs6000_ieeequad)\n+  else if (OPTION_SET_P (rs6000_ieeequad))\n     {\n       if (global_options.x_rs6000_ieeequad)\n \terror (\"%qs requires %qs\", \"-mabi=ieeelongdouble\", \"-mlong-double-128\");\n@@ -4210,7 +4210,7 @@ rs6000_option_override_internal (bool global_init_p)\n      explicitly redefine TARGET_IEEEQUAD and TARGET_IEEEQUAD_DEFAULT to 0, so\n      those systems will not pick up this default.  Warn if the user changes the\n      default unless -Wno-psabi.  */\n-  if (!global_options_set.x_rs6000_ieeequad)\n+  if (!OPTION_SET_P (rs6000_ieeequad))\n     rs6000_ieeequad = TARGET_IEEEQUAD_DEFAULT;\n \n   else\n@@ -4395,7 +4395,7 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Enable Altivec ABI for AIX -maltivec.  */\n   if (TARGET_XCOFF\n       && (TARGET_ALTIVEC || TARGET_VSX)\n-      && !global_options_set.x_rs6000_altivec_abi)\n+      && !OPTION_SET_P (rs6000_altivec_abi))\n     {\n       if (main_target_opt != NULL && !main_target_opt->x_rs6000_altivec_abi)\n \terror (\"target attribute or pragma changes AltiVec ABI\");\n@@ -4408,7 +4408,7 @@ rs6000_option_override_internal (bool global_init_p)\n      be explicitly overridden in either case.  */\n   if (TARGET_ELF)\n     {\n-      if (!global_options_set.x_rs6000_altivec_abi\n+      if (!OPTION_SET_P (rs6000_altivec_abi)\n \t  && (TARGET_64BIT || TARGET_ALTIVEC || TARGET_VSX))\n \t{\n \t  if (main_target_opt != NULL &&\n@@ -4438,7 +4438,7 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Place FP constants in the constant pool instead of TOC\n      if section anchors enabled.  */\n   if (flag_section_anchors\n-      && !global_options_set.x_TARGET_NO_FP_IN_TOC)\n+      && !OPTION_SET_P (TARGET_NO_FP_IN_TOC))\n     TARGET_NO_FP_IN_TOC = 1;\n \n   if (TARGET_DEBUG_REG || TARGET_DEBUG_TARGET)\n@@ -4595,7 +4595,7 @@ rs6000_option_override_internal (bool global_init_p)\n     }\n \n   /* Handle stack protector */\n-  if (!global_options_set.x_rs6000_stack_protector_guard)\n+  if (!OPTION_SET_P (rs6000_stack_protector_guard))\n #ifdef TARGET_THREAD_SSP_OFFSET\n     rs6000_stack_protector_guard = SSP_TLS;\n #else\n@@ -4607,7 +4607,7 @@ rs6000_option_override_internal (bool global_init_p)\n   rs6000_stack_protector_guard_reg = TARGET_64BIT ? 13 : 2;\n #endif\n \n-  if (global_options_set.x_rs6000_stack_protector_guard_offset_str)\n+  if (OPTION_SET_P (rs6000_stack_protector_guard_offset_str))\n     {\n       char *endp;\n       const char *str = rs6000_stack_protector_guard_offset_str;\n@@ -4626,7 +4626,7 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_stack_protector_guard_offset = offset;\n     }\n \n-  if (global_options_set.x_rs6000_stack_protector_guard_reg_str)\n+  if (OPTION_SET_P (rs6000_stack_protector_guard_reg_str))\n     {\n       const char *str = rs6000_stack_protector_guard_reg_str;\n       int reg = decode_reg_name (str);\n@@ -4654,7 +4654,7 @@ rs6000_option_override_internal (bool global_init_p)\n       /* Set aix_struct_return last, after the ABI is determined.\n \t If -maix-struct-return or -msvr4-struct-return was explicitly\n \t used, don't override with the ABI default.  */\n-      if (!global_options_set.x_aix_struct_return)\n+      if (!OPTION_SET_P (aix_struct_return))\n \taix_struct_return = (DEFAULT_ABI != ABI_V4 || DRAFT_V4_STRUCT_RET);\n \n #if 0\n@@ -6272,14 +6272,14 @@ rs6000_file_start (void)\n \t  start = \"\";\n \t}\n \n-      if (global_options_set.x_rs6000_cpu_index)\n+      if (OPTION_SET_P (rs6000_cpu_index))\n \t{\n \t  fprintf (file, \"%s -mcpu=%s\", start,\n \t\t   processor_target_table[rs6000_cpu_index].name);\n \t  start = \"\";\n \t}\n \n-      if (global_options_set.x_rs6000_tune_index)\n+      if (OPTION_SET_P (rs6000_tune_index))\n \t{\n \t  fprintf (file, \"%s -mtune=%s\", start,\n \t\t   processor_target_table[rs6000_tune_index].name);\n@@ -21053,7 +21053,7 @@ rs6000_darwin_file_start (void)\n   if (rs6000_default_cpu != 0 && rs6000_default_cpu[0] != '\\0')\n     cpu_id = rs6000_default_cpu;\n \n-  if (global_options_set.x_rs6000_cpu_index)\n+  if (OPTION_SET_P (rs6000_cpu_index))\n     cpu_id = processor_target_table[rs6000_cpu_index].name;\n \n   /* Look through the mapping array.  Pick the first name that either"}, {"sha": "6184c5fde450d08a6782d8540f6784702e91ebc0", "filename": "gcc/config/rs6000/rtems.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frtems.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -116,14 +116,14 @@\n \t  if ((rs6000_isa_flags_explicit\t\t\t\\\n \t\t& OPTION_MASK_MINIMAL_TOC) != 0)\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n+\t      if (OPTION_SET_P (rs6000_current_cmodel)\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n \t\terror (\"%<-mcmodel%> incompatible with other toc options\"); \\\n \t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n+\t      if (!OPTION_SET_P (rs6000_current_cmodel))\t\\\n \t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n \t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n \t\t{\t\t\t\t\t\t\\"}, {"sha": "96ee5524224efa45d89e83d9c3e44dad9c216c28", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -70,7 +70,7 @@\n \n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (!global_options_set.x_g_switch_value)\t\t\t\t\\\n+  if (!OPTION_SET_P (g_switch_value))\t\t\t\t\\\n     g_switch_value = SDATA_DEFAULT_SIZE;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (rs6000_abi_name == NULL)\t\t\t\t\t\t\\\n@@ -197,16 +197,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (TARGET_PLTSEQ != rs6000_pltseq\t\t\t\t\t\\\n-      && global_options_set.x_rs6000_pltseq)\t\t\t\t\\\n+      && OPTION_SET_P (rs6000_pltseq))\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       error (\"%qs not supported by your assembler\", \"-mpltseq\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (DEFAULT_ABI == ABI_V4 && TARGET_PLTSEQ && !TARGET_SECURE_PLT)\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (global_options_set.x_rs6000_pltseq)\t\t\t\t\\\n+      if (OPTION_SET_P (rs6000_pltseq))\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  if (global_options_set.x_secure_plt)\t\t\t\t\\\n+\t  if (OPTION_SET_P (secure_plt))\t\t\t\t\\\n \t    error (\"%qs and %qs are incompatible\",\t\t\t\\\n \t\t   \"-mpltseq\", \"-mbss-plt\");\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\"}, {"sha": "ca21a3a7bd3fb172e021c2325ea738cd1b7e1617", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -155,7 +155,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef SUB3TARGET_OVERRIDE_OPTIONS\n #define SUB3TARGET_OVERRIDE_OPTIONS           \\\n   do {                                          \\\n-  if (!global_options_set.x_g_switch_value)     \\\n+  if (!OPTION_SET_P (g_switch_value))     \\\n     g_switch_value = SDATA_DEFAULT_SIZE;        \\\n   VXWORKS_OVERRIDE_OPTIONS;                     \\\n   } while (0)"}, {"sha": "4f144d1b0eb67d137512aa08a85b14689a80c864", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -15746,9 +15746,9 @@ s390_option_override (void)\n     {\n       /* Don't emit DWARF3/4 unless specifically selected.  The TPF\n \t debuggers do not yet support DWARF 3/4.  */\n-      if (!global_options_set.x_dwarf_strict)\n+      if (!OPTION_SET_P (dwarf_strict))\n \tdwarf_strict = 1;\n-      if (!global_options_set.x_dwarf_version)\n+      if (!OPTION_SET_P (dwarf_version))\n \tdwarf_version = 2;\n     }\n }"}, {"sha": "b75a7b8250e25316ea0b5b600fa255ec9ec6fbde", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -126,15 +126,15 @@ along with GCC; see the file COPYING3.  If not see\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       /* Set default atomic model if it hasn't been specified.  */\t\\\n-      if (global_options_set.x_sh_atomic_model_str == 0)\t\t\\\n+      if (OPTION_SET_P (sh_atomic_model_str) == 0)\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (TARGET_SH3)\t\t\t\t\t\t\\\n \t    sh_atomic_model_str = \"soft-gusa\";\t\t\t\t\\\n \t  else if (TARGET_SH1)\t\t\t\t\t\t\\\n \t    sh_atomic_model_str = \"soft-imask\";\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       /* Set -musermode if it hasn't been specified.  */\t\t\\\n-      if (global_options_set.x_TARGET_USERMODE == 0)\t\t\t\\\n+      if (OPTION_SET_P (TARGET_USERMODE) == 0)\t\t\t\\\n \tTARGET_USERMODE = true;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "39eb773001da7a6eb496fd7a2370c8af440c3eee", "filename": "gcc/config/sh/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -85,7 +85,7 @@ while (0)\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       /* Set -musermode if it hasn't been specified.  */\t\t\\\n-      if (global_options_set.x_TARGET_USERMODE == 0)\t\t\t\\\n+      if (OPTION_SET_P (TARGET_USERMODE) == 0)\t\t\t\\\n \tTARGET_USERMODE = true;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "0628f059ca2d5937f94b78f8f5c9ec9f4b162fc7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -893,7 +893,7 @@ sh_option_override (void)\n     }\n \n   /* Set -mzdcbranch for SH4 / SH4A if not otherwise specified by the user.  */\n-  if (! global_options_set.x_TARGET_ZDCBRANCH && TARGET_HARD_SH4)\n+  if (! OPTION_SET_P (TARGET_ZDCBRANCH) && TARGET_HARD_SH4)\n     TARGET_ZDCBRANCH = 1;\n \n   /* FDPIC code is a special form of PIC, and the vast majority of code\n@@ -932,13 +932,13 @@ sh_option_override (void)\n \t <http://gcc.gnu.org/ml/gcc-patches/2005-10/msg00816.html>.  */\n       else if (flag_exceptions)\n \t{\n-\t  if (flag_schedule_insns && global_options_set.x_flag_schedule_insns)\n+\t  if (flag_schedule_insns && OPTION_SET_P (flag_schedule_insns))\n \t    warning (0, \"ignoring %<-fschedule-insns%> because of exception \"\n \t\t\t\"handling bug\");\n \t  flag_schedule_insns = 0;\n \t}\n       else if (flag_schedule_insns\n-\t       && !global_options_set.x_flag_schedule_insns)\n+\t       && !OPTION_SET_P (flag_schedule_insns))\n \tflag_schedule_insns = 0;\n     }\n \n@@ -958,12 +958,12 @@ sh_option_override (void)\n   if (flag_unsafe_math_optimizations)\n     {\n       /* Enable fsca insn for SH4A if not otherwise specified by the user.  */\n-      if (global_options_set.x_TARGET_FSCA == 0\n+      if (OPTION_SET_P (TARGET_FSCA) == 0\n \t  && (TARGET_SH4A_FP || TARGET_FPU_SH4_300))\n \tTARGET_FSCA = 1;\n \n       /* Enable fsrra insn for SH4A if not otherwise specified by the user.  */\n-      if (global_options_set.x_TARGET_FSRRA == 0\n+      if (OPTION_SET_P (TARGET_FSRRA) == 0\n \t  && (TARGET_SH4A_FP || TARGET_FPU_SH4_300))\n \tTARGET_FSRRA = 1;\n     }\n@@ -976,7 +976,7 @@ sh_option_override (void)\n \n   /* If the -mieee option was not explicitly set by the user, turn it on\n      unless -ffinite-math-only was specified.  See also PR 33135.  */\n-  if (! global_options_set.x_TARGET_IEEE)\n+  if (! OPTION_SET_P (TARGET_IEEE))\n     TARGET_IEEE = ! flag_finite_math_only;\n \n   if (sh_fixed_range_str)"}, {"sha": "517816a1fe6f22cb6ba2fc524f0b21cd07e027cb", "filename": "gcc/config/sol2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"varasm.h\"\n #include \"output.h\"\n+#include \"opts.h\"\n \n tree solaris_pending_aligns, solaris_pending_inits, solaris_pending_finis;\n \n@@ -296,6 +297,6 @@ solaris_override_options (void)\n {\n   /* Older versions of Solaris ld cannot handle CIE version 3 in .eh_frame.\n      Don't emit DWARF3/4 unless specifically selected if so.  */\n-  if (!HAVE_LD_EH_FRAME_CIEV3 && !global_options_set.x_dwarf_version)\n+  if (!HAVE_LD_EH_FRAME_CIEV3 && !OPTION_SET_P (dwarf_version))\n     dwarf_version = 2;\n }"}, {"sha": "ca91be4c8e9aa13f6aa191bdb720dbb3ea5158aa", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -1859,7 +1859,7 @@ sparc_option_override (void)\n       }\n \n   /* Set the default CPU if no -mcpu option was specified.  */\n-  if (!global_options_set.x_sparc_cpu_and_features)\n+  if (!OPTION_SET_P (sparc_cpu_and_features))\n     {\n       for (def = &cpu_default[0]; def->cpu != -1; ++def)\n \tif (def->cpu == TARGET_CPU_DEFAULT)\n@@ -1869,7 +1869,7 @@ sparc_option_override (void)\n     }\n \n   /* Set the default CPU if no -mtune option was specified.  */\n-  if (!global_options_set.x_sparc_cpu)\n+  if (!OPTION_SET_P (sparc_cpu))\n     sparc_cpu = sparc_cpu_and_features;\n \n   cpu = &cpu_table[(int) sparc_cpu_and_features];\n@@ -1975,7 +1975,7 @@ sparc_option_override (void)\n     dump_target_flags (\"Final target_flags\", target_flags);\n \n   /* Set the code model if no -mcmodel option was specified.  */\n-  if (global_options_set.x_sparc_code_model)\n+  if (OPTION_SET_P (sparc_code_model))\n     {\n       if (TARGET_ARCH32)\n \terror (\"%<-mcmodel=%> is not supported in 32-bit mode\");\n@@ -1989,7 +1989,7 @@ sparc_option_override (void)\n     }\n \n   /* Set the memory model if no -mmemory-model option was specified.  */\n-  if (!global_options_set.x_sparc_memory_model)\n+  if (!OPTION_SET_P (sparc_memory_model))\n     {\n       /* Choose the memory model for the operating system.  */\n       enum sparc_memory_model_type os_default = SUBTARGET_DEFAULT_MEMORY_MODEL;\n@@ -2177,12 +2177,12 @@ sparc_option_override (void)\n   /* Disable save slot sharing for call-clobbered registers by default.\n      The IRA sharing algorithm works on single registers only and this\n      pessimizes for double floating-point registers.  */\n-  if (!global_options_set.x_flag_ira_share_save_slots)\n+  if (!OPTION_SET_P (flag_ira_share_save_slots))\n     flag_ira_share_save_slots = 0;\n \n   /* Only enable REE by default in 64-bit mode where it helps to eliminate\n      redundant 32-to-64-bit extensions.  */\n-  if (!global_options_set.x_flag_ree && TARGET_ARCH32)\n+  if (!OPTION_SET_P (flag_ree) && TARGET_ARCH32)\n     flag_ree = 0;\n \n   /* Do various machine dependent initializations.  */"}, {"sha": "08d1126c49e6bbc0deb595f3344325d0d84cdb42", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -56,6 +56,7 @@\n #include \"tilegx-builtins.h\"\n #include \"tilegx-multiply.h\"\n #include \"builtins.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -76,7 +77,7 @@ static bool output_memory_autoinc_first;\n static void\n tilegx_option_override (void)\n {\n-  if (global_options_set.x_tilegx_cmodel)\n+  if (OPTION_SET_P (tilegx_cmodel))\n     {\n       switch (tilegx_cmodel)\n \t{"}, {"sha": "ffa2243f155b527e5d4bdbadf60cd5890b343f7f", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -443,7 +443,7 @@ visium_option_override (void)\n     }\n \n   /* Set -mtune from -mcpu if not specified.  */\n-  if (!global_options_set.x_visium_cpu)\n+  if (!OPTION_SET_P (visium_cpu))\n     visium_cpu = visium_cpu_and_features;\n \n   /* Align functions on 256-byte (32-quadword) for GR5 and 64-byte (8-quadword)"}, {"sha": "29ec0604b6262623f7d0c3cc62c321fd01818331", "filename": "gcc/config/vxworks.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fvxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fconfig%2Fvxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"memmodel.h\"\n #include \"optabs.h\"\n+#include \"opts.h\"\n \n #if !HAVE_INITFINI_ARRAY_SUPPORT\n /* Like default_named_section_asm_out_constructor, except that even\n@@ -167,10 +168,10 @@ vxworks_override_options (void)\n      dwarf up to certain version.  Default dwarf control to friendly\n      values for these.  */\n \n-  if (!global_options_set.x_dwarf_strict)\n+  if (!OPTION_SET_P (dwarf_strict))\n     dwarf_strict = 1;\n \n-  if (!global_options_set.x_dwarf_version)\n+  if (!OPTION_SET_P (dwarf_version))\n     dwarf_version = VXWORKS_DWARF_VERSION_DEFAULT;\n \n }"}, {"sha": "08f8514d08deebdd08d0ea654c07dd16513baa9e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fold-const-call.h\"\n #include \"stor-layout.h\"\n #include \"cgraph.h\"\n+#include \"opts.h\"\n \n static bool verify_constant (tree, bool, bool *, bool *);\n #define VERIFY_CONSTANT(X)\t\t\t\t\t\t\\\n@@ -6107,7 +6108,7 @@ maybe_warn_about_constant_value (location_t loc, tree decl)\n   static bool explained = false;\n   if (cxx_dialect >= cxx17\n       && warn_interference_size\n-      && !global_options_set.x_param_destruct_interfere_size\n+      && !OPTION_SET_P (param_destruct_interfere_size)\n       && DECL_CONTEXT (decl) == std_node\n       && id_equal (DECL_NAME (decl), \"hardware_destructive_interference_size\")\n       && (LOCATION_FILE (input_location) != main_input_filename"}, {"sha": "561debe6a0e9902e733cda0b15fbeec570ceab32", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"  /* For 'g'.  */\n #include \"omp-general.h\"\n #include \"omp-offload.h\"  /* For offload_vars.  */\n+#include \"opts.h\"\n \n /* Possible cases of bad specifiers type used by bad_specifiers. */\n enum bad_spec_place {\n@@ -3228,7 +3229,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t{\n \t  DECL_EXTERNAL (newdecl) = 1;\n \t  /* For now, only warn with explicit -Wdeprecated.  */\n-\t  if (global_options_set.x_warn_deprecated)\n+\t  if (OPTION_SET_P (warn_deprecated))\n \t    {\n \t      auto_diagnostic_group d;\n \t      if (warning_at (DECL_SOURCE_LOCATION (newdecl), OPT_Wdeprecated,\n@@ -4756,7 +4757,7 @@ cxx_init_decl_processing (void)\n   /* Check that the hardware interference sizes are at least\n      alignof(max_align_t), as required by the standard.  */\n   const int max_align = max_align_t_align () / BITS_PER_UNIT;\n-  if (global_options_set.x_param_destruct_interfere_size)\n+  if (OPTION_SET_P (param_destruct_interfere_size))\n     {\n       if (param_destruct_interfere_size < max_align)\n \terror (\"%<--param destructive-interference-size=%d%> is less than \"\n@@ -4773,7 +4774,7 @@ cxx_init_decl_processing (void)\n     param_destruct_interfere_size = param_l1_cache_line_size;\n   /* else leave it unset.  */\n \n-  if (global_options_set.x_param_construct_interfere_size)\n+  if (OPTION_SET_P (param_construct_interfere_size))\n     {\n       if (param_construct_interfere_size < max_align)\n \terror (\"%<--param constructive-interference-size=%d%> is less than \""}, {"sha": "be6330fbdfb29d8429e100cfa389bd65894822f5", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -792,13 +792,13 @@ d_post_options (const char ** fn)\n \n   if (global.params.betterC)\n     {\n-      if (!global_options_set.x_flag_moduleinfo)\n+      if (!OPTION_SET_P (flag_moduleinfo))\n \tglobal.params.useModuleInfo = false;\n \n-      if (!global_options_set.x_flag_rtti)\n+      if (!OPTION_SET_P (flag_rtti))\n \tglobal.params.useTypeInfo = false;\n \n-      if (!global_options_set.x_flag_exceptions)\n+      if (!OPTION_SET_P (flag_exceptions))\n \tglobal.params.useExceptions = false;\n \n       global.params.checkAction = CHECKACTION_C;\n@@ -810,7 +810,7 @@ d_post_options (const char ** fn)\n   /* Turn off partitioning unless it was explicitly requested, as it doesn't\n      work with D exception chaining, where EH handler uses LSDA to determine\n      whether two thrown exception are in the same context.  */\n-  if (!global_options_set.x_flag_reorder_blocks_and_partition)\n+  if (!OPTION_SET_P (flag_reorder_blocks_and_partition))\n     global_options.x_flag_reorder_blocks_and_partition = 0;\n \n   /* Error about use of deprecated features.  */\n@@ -819,7 +819,7 @@ d_post_options (const char ** fn)\n     global.params.useDeprecated = DIAGNOSTICerror;\n \n   /* Make -fmax-errors visible to frontend's diagnostic machinery.  */\n-  if (global_options_set.x_flag_max_errors)\n+  if (OPTION_SET_P (flag_max_errors))\n     global.params.errorLimit = flag_max_errors;\n \n   if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)"}, {"sha": "3499a1caa6d279ea667dfe5f652d961eda34955d", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -260,7 +260,7 @@ gfc_post_options (const char **pfilename)\n      If not enabled explicitly by the user, only warn for -I\n      and -J, otherwise warn for all include paths.  */\n   verbose_missing_dir_warn\n-    = (global_options_set.x_cpp_warn_missing_include_dirs\n+    = (OPTION_SET_P (cpp_warn_missing_include_dirs)\n        && global_options.x_cpp_warn_missing_include_dirs);\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n \t\t       cpp_warn_missing_include_dirs, 1);\n@@ -309,7 +309,7 @@ gfc_post_options (const char **pfilename)\n     flag_dump_fortran_original = 0;\n \n   /* Make -fmax-errors visible to gfortran's diagnostic machinery.  */\n-  if (global_options_set.x_flag_max_errors)\n+  if (OPTION_SET_P (flag_max_errors))\n     gfc_option.max_errors = flag_max_errors;\n \n   /* Verify the input file name.  */\n@@ -388,7 +388,7 @@ gfc_post_options (const char **pfilename)\n \n       /* Enable -Werror=line-truncation when -Werror and -Wno-error have\n \t not been set.  */\n-      if (warn_line_truncation && !global_options_set.x_warnings_are_errors\n+      if (warn_line_truncation && !OPTION_SET_P (warnings_are_errors)\n \t  && (global_dc->classify_diagnostic[OPT_Wline_truncation] ==\n \t      DK_UNSPECIFIED))\n \tdiagnostic_classify_diagnostic (global_dc, OPT_Wline_truncation,"}, {"sha": "7b2ad74e69a68b40f3afad035a8d9e4ed58e1d82", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -70,17 +70,17 @@ lto_write_options (void)\n \n   obstack_init (&temporary_obstack);\n \n-  if (!global_options_set.x_flag_openmp\n+  if (!OPTION_SET_P (flag_openmp)\n       && !global_options.x_flag_openmp)\n     append_to_collect_gcc_options (&temporary_obstack, &first_p,\n \t\t\t\t   \"-fno-openmp\");\n-  if (!global_options_set.x_flag_openacc\n+  if (!OPTION_SET_P (flag_openacc)\n       && !global_options.x_flag_openacc)\n     append_to_collect_gcc_options (&temporary_obstack, &first_p,\n \t\t\t\t   \"-fno-openacc\");\n   /* Append PIC/PIE mode because its default depends on target and it is\n      subject of merging in lto-wrapper.  */\n-  if (!global_options_set.x_flag_pic && !global_options_set.x_flag_pie)\n+  if (!OPTION_SET_P (flag_pic) && !OPTION_SET_P (flag_pie))\n     {\n        append_to_collect_gcc_options (&temporary_obstack, &first_p,\n \t\t\t\t      global_options.x_flag_pic == 2\n@@ -94,7 +94,7 @@ lto_write_options (void)\n \t\t\t\t      : \"-fno-pie\");\n     }\n \n-  if (!global_options_set.x_flag_cf_protection)\n+  if (!OPTION_SET_P (flag_cf_protection))\n     {\n       append_to_collect_gcc_options (\n \t&temporary_obstack, &first_p,"}, {"sha": "17c8618992365ad97f95222fb704da773a6760af", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -259,7 +259,7 @@ static void next_runtime_01_initialize (void)\n #ifdef OBJCPLUS\n   /* For all NeXT objc ABIs -fobjc-call-cxx-cdtors is on by\n      default.  */\n-  if (!global_options_set.x_flag_objc_call_cxx_cdtors)\n+  if (!OPTION_SET_P (flag_objc_call_cxx_cdtors))\n     global_options.x_flag_objc_call_cxx_cdtors = 1;\n #endif\n "}, {"sha": "677b75f0334c357c688c49b4d2c8d251d79be2fd", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -255,7 +255,7 @@ objc_next_runtime_abi_02_init (objc_runtime_hooks *rthooks)\n     }\n \n   /* NeXT ABI 2 is intended to default to checking for nil receivers.  */\n-  if (! global_options_set.x_flag_objc_nilcheck)\n+  if (! OPTION_SET_P (flag_objc_nilcheck))\n     flag_objc_nilcheck = 1;\n \n   rthooks->initialize = next_runtime_02_initialize;\n@@ -366,7 +366,7 @@ static void next_runtime_02_initialize (void)\n #ifdef OBJCPLUS\n   /* For all NeXT objc ABIs -fobjc-call-cxx-cdtors is on by\n      default.  */\n-  if (!global_options_set.x_flag_objc_call_cxx_cdtors)\n+  if (!OPTION_SET_P (flag_objc_call_cxx_cdtors))\n     global_options.x_flag_objc_call_cxx_cdtors = 1;\n #endif\n "}, {"sha": "9715ef50e627fd29eb1033d280c539a750623d19", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"tree-eh.h\"\n+#include \"opts.h\"\n \n /* OMP region information.  Every parallel and workshare\n    directive is enclosed between two markers, the OMP_* directive\n@@ -6960,7 +6961,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n       /* If not -fno-tree-loop-vectorize, hint that we want to vectorize\n \t the loop.  */\n       if ((flag_tree_loop_vectorize\n-\t   || !global_options_set.x_flag_tree_loop_vectorize)\n+\t   || !OPTION_SET_P (flag_tree_loop_vectorize))\n \t  && flag_tree_loop_optimize\n \t  && loop->safelen > 1)\n \t{"}, {"sha": "3e5ca94c2a7f91206f873c75932d841e8819d836", "filename": "gcc/omp-general.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"data-streamer.h\"\n #include \"streamer-hooks.h\"\n+#include \"opts.h\"\n \n enum omp_requires omp_requires_mask;\n \n@@ -952,7 +953,7 @@ omp_max_vf (void)\n       || optimize_debug\n       || !flag_tree_loop_optimize\n       || (!flag_tree_loop_vectorize\n-\t  && global_options_set.x_flag_tree_loop_vectorize))\n+\t  && OPTION_SET_P (flag_tree_loop_vectorize)))\n     return 1;\n \n   auto_vector_modes modes;"}, {"sha": "833f7ddea58ffb9585f9e5ea0720795cb762481d", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"context.h\"\n #include \"convert.h\"\n+#include \"opts.h\"\n \n /* Describe the OpenACC looping structure of a function.  The entire\n    function is held in a 'NULL' loop.  */\n@@ -633,7 +634,7 @@ oacc_xform_loop (gcall *call)\n \t  /* If not -fno-tree-loop-vectorize, hint that we want to vectorize\n \t     the loop.  */\n \t  && (flag_tree_loop_vectorize\n-\t      || !global_options_set.x_flag_tree_loop_vectorize))\n+\t      || !OPTION_SET_P (flag_tree_loop_vectorize)))\n \t{\n \t  basic_block bb = gsi_bb (gsi);\n \t  class loop *parent = bb->loop_father;"}, {"sha": "f5bc9a3149c911d7dc56b6752c156598f91b9db0", "filename": "gcc/opts.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -500,4 +500,8 @@ extern char *gen_producer_string (const char *language_string,\n   } \\\n   while (false)\n \n+/* Return true if OPTION is set by user in global options.  */\n+\n+#define OPTION_SET_P(OPTION) global_options_set.x_ ## OPTION\n+\n #endif"}, {"sha": "cbbcedf790fcf69025eb830789679ec78de01564", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -2453,12 +2453,12 @@ default_max_noce_ifcvt_seq_cost (edge e)\n \n   if (predictable_p)\n     {\n-      if (global_options_set.x_param_max_rtl_if_conversion_predictable_cost)\n+      if (OPTION_SET_P (param_max_rtl_if_conversion_predictable_cost))\n \treturn param_max_rtl_if_conversion_predictable_cost;\n     }\n   else\n     {\n-      if (global_options_set.x_param_max_rtl_if_conversion_unpredictable_cost)\n+      if (OPTION_SET_P (param_max_rtl_if_conversion_unpredictable_cost))\n \treturn param_max_rtl_if_conversion_unpredictable_cost;\n     }\n "}, {"sha": "81748b1152ac21a68d84483540dbb0ab46e45ff2", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -1753,7 +1753,7 @@ process_options (bool no_backend)\n \n   /* Enable -Werror=coverage-mismatch when -Werror and -Wno-error\n      have not been set.  */\n-  if (!global_options_set.x_warnings_are_errors)\n+  if (!OPTION_SET_P (warnings_are_errors))\n     {\n       if (warn_coverage_mismatch\n \t  && (global_dc->classify_diagnostic[OPT_Wcoverage_mismatch] =="}, {"sha": "ce1f08f7d22c071bcddaf5cb9f3064b5af5fd29f", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -233,6 +233,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"tree-affine.h\"\n #include \"builtins.h\"\n+#include \"opts.h\"\n \n /* The maximum number of iterations between the considered memory\n    references.  */\n@@ -3492,7 +3493,7 @@ class pass_predcom : public gimple_opt_pass\n        only if predictive commoning isn't set explicitly, and it\n        doesn't allow unrolling.  */\n     if (flag_tree_loop_vectorize\n-\t&& !global_options_set.x_flag_predictive_commoning)\n+\t&& !OPTION_SET_P (flag_predictive_commoning))\n       return true;\n \n     return false;"}, {"sha": "9b786e29e4e59382e39616d659747faeeb1d3e6b", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f34291175981393b2a9802ada879e72335dcd0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=00f34291175981393b2a9802ada879e72335dcd0", "patch": "@@ -99,7 +99,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"builtins.h\"\n #include \"tree-sra.h\"\n-\n+#include \"opts.h\"\n \n /* Enumeration of all aggregate reductions we can do.  */\n enum sra_mode { SRA_MODE_EARLY_IPA,   /* early call regularization */\n@@ -3427,12 +3427,12 @@ analyze_all_variable_accesses (void)\n \n   if (optimize_speed_p)\n     {\n-      if (global_options_set.x_param_sra_max_scalarization_size_speed)\n+      if (OPTION_SET_P (param_sra_max_scalarization_size_speed))\n \tmax_scalarization_size = param_sra_max_scalarization_size_speed;\n     }\n   else\n     {\n-      if (global_options_set.x_param_sra_max_scalarization_size_size)\n+      if (OPTION_SET_P (param_sra_max_scalarization_size_size))\n \tmax_scalarization_size = param_sra_max_scalarization_size_size;\n     }\n   max_scalarization_size *= BITS_PER_UNIT;"}]}