{"sha": "d7ae3739a200ea1c90ca20afbebfc627ee32cf49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhZTM3MzlhMjAwZWExYzkwY2EyMGFmYmViZmM2MjdlZTMyY2Y0OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-12-06T07:03:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-06T07:03:04Z"}, "message": "re PR middle-end/78642 (invalid rtl sharing found in the insn)\n\n\tPR middle-end/78642\n\t* emit-rtl.c (verify_rtx_sharing) <CLOBBER>: Relax condition.\n\t(copy_rtx_if_shared_1) <CLOBBER>: Likewise.\n\t(copy_insn_1) <CLOBBER>: Likewise.\n\nFrom-SVN: r243282", "tree": {"sha": "3c799d29f383e335c4ef47d97f877bdcbe8fc694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c799d29f383e335c4ef47d97f877bdcbe8fc694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7ae3739a200ea1c90ca20afbebfc627ee32cf49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ae3739a200ea1c90ca20afbebfc627ee32cf49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ae3739a200ea1c90ca20afbebfc627ee32cf49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ae3739a200ea1c90ca20afbebfc627ee32cf49/comments", "author": null, "committer": null, "parents": [{"sha": "1d2ccddf2ea8b648b8520c7a844d6259b0f31ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2ccddf2ea8b648b8520c7a844d6259b0f31ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2ccddf2ea8b648b8520c7a844d6259b0f31ff7"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "38e86cfd707e7cb1c465fc6b5518fbd212b71f8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ae3739a200ea1c90ca20afbebfc627ee32cf49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ae3739a200ea1c90ca20afbebfc627ee32cf49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7ae3739a200ea1c90ca20afbebfc627ee32cf49", "patch": "@@ -1,3 +1,10 @@\n+2016-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/78642\n+\t* emit-rtl.c (verify_rtx_sharing) <CLOBBER>: Relax condition.\n+\t(copy_rtx_if_shared_1) <CLOBBER>: Likewise.\n+\t(copy_insn_1) <CLOBBER>: Likewise.\n+\n 2016-12-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/78688"}, {"sha": "5201bd0e0ef9c7dbd53e9534fd4cab351cc31d16", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ae3739a200ea1c90ca20afbebfc627ee32cf49/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ae3739a200ea1c90ca20afbebfc627ee32cf49/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d7ae3739a200ea1c90ca20afbebfc627ee32cf49", "patch": "@@ -2718,8 +2718,9 @@ verify_rtx_sharing (rtx orig, rtx insn)\n       /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n          clobbers or clobbers of hard registers that originated as pseudos.\n          This is needed to allow safe register renaming.  */\n-      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n-\t  && ORIGINAL_REGNO (XEXP (x, 0)) == REGNO (XEXP (x, 0)))\n+      if (REG_P (XEXP (x, 0))\n+\t  && HARD_REGISTER_NUM_P (REGNO (XEXP (x, 0)))\n+\t  && HARD_REGISTER_NUM_P (ORIGINAL_REGNO (XEXP (x, 0))))\n \treturn;\n       break;\n \n@@ -2970,8 +2971,9 @@ copy_rtx_if_shared_1 (rtx *orig1)\n       /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n          clobbers or clobbers of hard registers that originated as pseudos.\n          This is needed to allow safe register renaming.  */\n-      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n-\t  && ORIGINAL_REGNO (XEXP (x, 0)) == REGNO (XEXP (x, 0)))\n+      if (REG_P (XEXP (x, 0))\n+\t  && HARD_REGISTER_NUM_P (REGNO (XEXP (x, 0)))\n+\t  && HARD_REGISTER_NUM_P (ORIGINAL_REGNO (XEXP (x, 0))))\n \treturn;\n       break;\n \n@@ -5521,8 +5523,9 @@ copy_insn_1 (rtx orig)\n       /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n          clobbers or clobbers of hard registers that originated as pseudos.\n          This is needed to allow safe register renaming.  */\n-      if (REG_P (XEXP (orig, 0)) && REGNO (XEXP (orig, 0)) < FIRST_PSEUDO_REGISTER\n-\t  && ORIGINAL_REGNO (XEXP (orig, 0)) == REGNO (XEXP (orig, 0)))\n+      if (REG_P (XEXP (orig, 0))\n+\t  && HARD_REGISTER_NUM_P (REGNO (XEXP (orig, 0)))\n+\t  && HARD_REGISTER_NUM_P (ORIGINAL_REGNO (XEXP (orig, 0))))\n \treturn orig;\n       break;\n "}]}