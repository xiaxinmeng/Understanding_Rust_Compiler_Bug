{"sha": "8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4NGQ4OWRlYTAyYWFkNWZiYTBlZjRjZWY0ZWI3ZTUxZWE3NDQ1MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T07:44:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T07:44:45Z"}, "message": "target.def: Add code_for_* hooks.\n\ngcc/\n\t* target.def: Add code_for_* hooks.\n\t* gentarget-def.c (def_target_insn): Add TARGET_CODE_FOR_* macros.\n\t* defaults.h (HAVE_tablejump, gen_tablejump): Delete.\n\t* target-insns.def (casesi, tablejump): New targetm instruction\n\tpatterns.\n\t* expr.c (try_casesi): Use them instead of HAVE_*/gen_* interface.\n\t(do_tablejump): Likewise.\n\t* stmt.c (expand_switch_as_decision_tree_p): Likewise.\n\t(expand_sjlj_dispatch_table): Likewise.\n\t* targhooks.c (default_case_values_threshold): Likewise.\n\nFrom-SVN: r225421", "tree": {"sha": "3dfeb08ec615098e110099500704dd3f816af3a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dfeb08ec615098e110099500704dd3f816af3a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d07490f09ebb24ea3fd58237878fff6ca676f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d07490f09ebb24ea3fd58237878fff6ca676f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d07490f09ebb24ea3fd58237878fff6ca676f99"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "9ca2040e567d05816bb0bb4753d28fa663c17094", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -1,3 +1,16 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target.def: Add code_for_* hooks.\n+\t* gentarget-def.c (def_target_insn): Add TARGET_CODE_FOR_* macros.\n+\t* defaults.h (HAVE_tablejump, gen_tablejump): Delete.\n+\t* target-insns.def (casesi, tablejump): New targetm instruction\n+\tpatterns.\n+\t* expr.c (try_casesi): Use them instead of HAVE_*/gen_* interface.\n+\t(do_tablejump): Likewise.\n+\t* stmt.c (expand_switch_as_decision_tree_p): Likewise.\n+\t(expand_sjlj_dispatch_table): Likewise.\n+\t* targhooks.c (default_case_values_threshold): Likewise.\n+\n 2015-07-04  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/nios2.c (save_reg, restore_reg): Use plus_constant."}, {"sha": "5beddea669ea5880187edd05ddd921315673a2fb", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -1426,16 +1426,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_VTABLE_USES_DESCRIPTORS 0\n #endif\n \n-#ifndef HAVE_tablejump\n-#define HAVE_tablejump 0\n-static inline rtx\n-gen_tablejump (rtx, rtx)\n-{\n-  gcc_unreachable ();\n-  return NULL;\n-}\n-#endif\n-\n #endif /* GCC_INSN_FLAGS_H  */\n \n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "87d24422312c98feb7100e8197d973bc99ab9757", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -11058,14 +11058,6 @@ do_store_flag (sepops ops, rtx target, machine_mode mode)\n \t\t\t\t && !TYPE_UNSIGNED (ops->type)) ? -1 : 1);\n }\n \f\n-\n-/* Stubs in case we haven't got a casesi insn.  */\n-#ifndef HAVE_casesi\n-# define HAVE_casesi 0\n-# define gen_casesi(a, b, c, d, e) (0)\n-# define CODE_FOR_casesi CODE_FOR_nothing\n-#endif\n-\n /* Attempt to generate a casesi instruction.  Returns 1 if successful,\n    0 otherwise (i.e. if there is no casesi instruction).\n \n@@ -11080,7 +11072,7 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n   machine_mode index_mode = SImode;\n   rtx op1, op2, index;\n \n-  if (! HAVE_casesi)\n+  if (! targetm.have_casesi ())\n     return 0;\n \n   /* Convert the index to SImode.  */\n@@ -11124,7 +11116,7 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n   create_fixed_operand (&ops[4], (default_label\n \t\t\t\t  ? default_label\n \t\t\t\t  : fallback_label));\n-  expand_jump_insn (CODE_FOR_casesi, 5, ops);\n+  expand_jump_insn (targetm.code_for_casesi, 5, ops);\n   return 1;\n }\n \n@@ -11197,7 +11189,7 @@ do_tablejump (rtx index, machine_mode mode, rtx range, rtx table_label,\n   vector = gen_const_mem (CASE_VECTOR_MODE, index);\n   convert_move (temp, vector, 0);\n \n-  emit_jump_insn (gen_tablejump (temp, table_label));\n+  emit_jump_insn (targetm.gen_tablejump (temp, table_label));\n \n   /* If we are generating PIC code or if the table is PC-relative, the\n      table and JUMP_INSN must be adjacent, so don't output a BARRIER.  */\n@@ -11211,7 +11203,7 @@ try_tablejump (tree index_type, tree index_expr, tree minval, tree range,\n {\n   rtx index;\n \n-  if (! HAVE_tablejump)\n+  if (! targetm.have_tablejump ())\n     return 0;\n \n   index_expr = fold_build2 (MINUS_EXPR, index_type,"}, {"sha": "554fd421501324183a75dab773979a9cf24d3294", "filename": "gcc/gentarget-def.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fgentarget-def.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fgentarget-def.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgentarget-def.c?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -189,6 +189,13 @@ def_target_insn (const char *name, const char *prototype)\n     printf (\"invalid_%s\\n\", suffix);\n   else\n     printf (\"target_gen_%s\\n\", name);\n+\n+  printf (\"#undef TARGET_CODE_FOR_%s\\n\", upper_name);\n+  printf (\"#define TARGET_CODE_FOR_%s \", upper_name);\n+  if (truth == 0)\n+    printf (\"CODE_FOR_nothing\\n\");\n+  else\n+    printf (\"CODE_FOR_%s\\n\", name);\n }\n \n int"}, {"sha": "053ffb0c2a0bc118874d530a16c1212210452024", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -780,10 +780,6 @@ dump_case_nodes (FILE *f, struct case_node *root,\n   dump_case_nodes (f, root->right, indent_step, indent_level);\n }\n \f\n-#ifndef HAVE_casesi\n-#define HAVE_casesi 0\n-#endif\n-\n /* Return the smallest number of different values for which it is best to use a\n    jump-table instead of a tree of conditional branches.  */\n \n@@ -812,7 +808,7 @@ expand_switch_as_decision_tree_p (tree range,\n \n   /* If neither casesi or tablejump is available, or flag_jump_tables\n      over-ruled us, we really have no choice.  */\n-  if (!HAVE_casesi && !HAVE_tablejump)\n+  if (!targetm.have_casesi () && !targetm.have_tablejump ())\n     return true;\n   if (!flag_jump_tables)\n     return true;\n@@ -1291,7 +1287,7 @@ expand_sjlj_dispatch_table (rtx dispatch_index,\n      of expanding as a decision tree or dispatch table vs. the \"new\n      way\" with decrement chain or dispatch table.  */\n   if (dispatch_table.length () <= 5\n-      || (!HAVE_casesi && !HAVE_tablejump)\n+      || (!targetm.have_casesi () && !targetm.have_tablejump ())\n       || !flag_jump_tables)\n     {\n       /* Expand the dispatch as a decrement chain:"}, {"sha": "2c5288ebd05478a84be089ee801c4413f56426e3", "filename": "gcc/target-insns.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -31,6 +31,7 @@\n \n    Instructions should be documented in md.texi rather than here.  */\n DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (casesi, (rtx x0, rtx x1, rtx x2, rtx x3, rtx x4))\n DEF_TARGET_INSN (epilogue, (void))\n DEF_TARGET_INSN (jump, (rtx x0))\n DEF_TARGET_INSN (load_multiple, (rtx x0, rtx x1, rtx x2))\n@@ -42,3 +43,4 @@ DEF_TARGET_INSN (return, (void))\n DEF_TARGET_INSN (sibcall_epilogue, (void))\n DEF_TARGET_INSN (simple_return, (void))\n DEF_TARGET_INSN (store_multiple, (rtx x0, rtx x1, rtx x2))\n+DEF_TARGET_INSN (tablejump, (rtx x0, rtx x1))"}, {"sha": "a2f35545a08dfdaf4c6b5ef06d350a5143d7b758", "filename": "gcc/target.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -5877,6 +5877,11 @@ HOOK_VECTOR_END (mode_switching)\n #include \"target-insns.def\"\n #undef DEF_TARGET_INSN\n \n+#define DEF_TARGET_INSN(NAME, PROTO) \\\n+  DEFHOOKPOD (code_for_##NAME, \"*\", enum insn_code, CODE_FOR_nothing)\n+#include \"target-insns.def\"\n+#undef DEF_TARGET_INSN\n+\n /* Close the 'struct gcc_target' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)\n "}, {"sha": "80f31767b2d6547f5b4fbfa1a100981c0e8b943d", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8684d89dea02aad5fba0ef4cef4eb7e51ea74450/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8684d89dea02aad5fba0ef4cef4eb7e51ea74450", "patch": "@@ -1339,18 +1339,14 @@ default_target_can_inline_p (tree caller, tree callee)\n   return ret;\n }\n \n-#ifndef HAVE_casesi\n-# define HAVE_casesi 0\n-#endif\n-\n /* If the machine does not have a case insn that compares the bounds,\n    this means extra overhead for dispatch tables, which raises the\n    threshold for using them.  */\n \n unsigned int\n default_case_values_threshold (void)\n {\n-  return (HAVE_casesi ? 4 : 5);\n+  return (targetm.have_casesi () ? 4 : 5);\n }\n \n bool"}]}