{"sha": "e00464a5cb4214f5a5de4535de4f684a86aa10d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwNDY0YTVjYjQyMTRmNWE1ZGU0NTM1ZGU0ZjY4NGE4NmFhMTBkNQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2020-08-13T14:06:31Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2020-08-13T14:06:31Z"}, "message": "Fix PR fortran/93671; ICE in reffing coarray alloc. comps.\n\nFix an ICE when in a coarray an allocatable component had another allocatable\ncomponent.\n\ngcc/fortran/ChangeLog:\n\n2020-08-10  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/93671\n\t* trans-array.c (structure_alloc_comps): Keep caf-mode when applying to\n\tcomponents; get the caf_token correctly for allocated scalar components.\n\ngcc/testsuite/ChangeLog:\n\n2020-08-10  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/93671\n\t* gfortran.dg/coarray/pr93671.f90: New test.", "tree": {"sha": "b0300f52509913d2d954ece6c56ff9448c92777c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0300f52509913d2d954ece6c56ff9448c92777c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e00464a5cb4214f5a5de4535de4f684a86aa10d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00464a5cb4214f5a5de4535de4f684a86aa10d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00464a5cb4214f5a5de4535de4f684a86aa10d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00464a5cb4214f5a5de4535de4f684a86aa10d5/comments", "author": null, "committer": null, "parents": [{"sha": "db4615380832d3d3751a70ecdf6fe6c9fe3c4f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4615380832d3d3751a70ecdf6fe6c9fe3c4f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4615380832d3d3751a70ecdf6fe6c9fe3c4f69"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "7a1b2fc74c988d969a95aeda4fade987495340a9", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00464a5cb4214f5a5de4535de4f684a86aa10d5/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00464a5cb4214f5a5de4535de4f684a86aa10d5/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=e00464a5cb4214f5a5de4535de4f684a86aa10d5", "patch": "@@ -8627,14 +8627,13 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \n       vref = gfc_build_array_ref (var, index, NULL);\n \n-      if ((purpose == COPY_ALLOC_COMP || purpose == COPY_ONLY_ALLOC_COMP)\n-\t  && !caf_enabled (caf_mode))\n+      if (purpose == COPY_ALLOC_COMP || purpose == COPY_ONLY_ALLOC_COMP)\n \t{\n \t  tmp = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t     gfc_conv_array_data (dest));\n \t  dref = gfc_build_array_ref (tmp, index, NULL);\n \t  tmp = structure_alloc_comps (der_type, vref, dref, rank,\n-\t\t\t\t       COPY_ALLOC_COMP, 0, args);\n+\t\t\t\t       COPY_ALLOC_COMP, caf_mode, args);\n \t}\n       else\n \ttmp = structure_alloc_comps (der_type, vref, NULL_TREE, rank, purpose,\n@@ -9375,12 +9374,21 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      else if (flag_coarray == GFC_FCOARRAY_LIB\n \t\t       && caf_in_coarray (caf_mode))\n \t\t{\n-\t\t  tree dst_tok = c->as ? gfc_conv_descriptor_token (dcmp)\n-\t\t\t\t       : fold_build3_loc (input_location,\n-\t\t\t\t\t\t\t  COMPONENT_REF,\n-\t\t\t\t\t\t\t  pvoid_type_node, dest,\n-\t\t\t\t\t\t\t  c->caf_token,\n-\t\t\t\t\t\t\t  NULL_TREE);\n+\t\t  tree dst_tok;\n+\t\t  if (c->as)\n+\t\t    dst_tok = gfc_conv_descriptor_token (dcmp);\n+\t\t  else\n+\t\t    {\n+\t\t      /* For a scalar allocatable component the caf_token is\n+\t\t\t the next component.  */\n+\t\t      if (!c->caf_token)\n+\t\t\t  c->caf_token = c->next->backend_decl;\n+\t\t      dst_tok = fold_build3_loc (input_location,\n+\t\t\t\t\t\t COMPONENT_REF,\n+\t\t\t\t\t\t pvoid_type_node, dest,\n+\t\t\t\t\t\t c->caf_token,\n+\t\t\t\t\t\t NULL_TREE);\n+\t\t    }\n \t\t  tmp = duplicate_allocatable_coarray (dcmp, dst_tok, comp,\n \t\t\t\t\t\t       ctype, rank);\n \t\t}"}, {"sha": "8d26ff8875325c90b040746d130b299989922bb5", "filename": "gcc/testsuite/gfortran.dg/coarray/pr93671.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00464a5cb4214f5a5de4535de4f684a86aa10d5/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpr93671.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00464a5cb4214f5a5de4535de4f684a86aa10d5/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpr93671.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpr93671.f90?ref=e00464a5cb4214f5a5de4535de4f684a86aa10d5", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+\n+! PR/fortran 93671 - ICE on intrinsic assignment to allocatable derived-type\n+!                    component of coarray\n+\n+  type flux_planes\n+    integer, allocatable :: normals\n+  end type\n+\n+  type package\n+    type(flux_planes) surface_fluxes(1)\n+  end type\n+\n+  type(package) mail[*], halo_data\n+\n+  halo_data%surface_fluxes(1)%normals = 1\n+  mail = halo_data\n+  \n+  if (any(size(mail%surface_fluxes) /= [1]) .OR. &\n+          mail%surface_fluxes(1)%normals /= 1) then\n+    stop 1\n+  end if\n+end\n+"}]}