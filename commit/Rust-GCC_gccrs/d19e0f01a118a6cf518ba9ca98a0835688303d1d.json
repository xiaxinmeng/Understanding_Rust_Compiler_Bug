{"sha": "d19e0f01a118a6cf518ba9ca98a0835688303d1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5ZTBmMDFhMTE4YTZjZjUxOGJhOWNhOThhMDgzNTY4ODMwM2QxZA==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2010-11-11T13:33:59Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-11-11T13:33:59Z"}, "message": "re PR bootstrap/46397 (lto-plugin.c does not build on Solaris 10/SPARC)\n\n\tPR bootstrap/46397\n\tPR bootstrap/46362\n\t* configure.ac: Add AC_TYPE_INT64_T test.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\t* lto-plugin.c (debug): Use char not bool.\n\t(nop): Likewise.\n\t(check_1): Rename from check, and use int not bool for gate argument.\n\t(check): Macro wrapper for the above to coerce gate argument into\n\tboolean-valued integer in case it has pointer type.\n\t(parse_table_entry): Use 0 not false.\n\t(claim_file_handler): Avoid use of PRIx64 by splitting 64-bit size\n\tinto two 32-bit parts and printing as hex ints.\n\nFrom-SVN: r166601", "tree": {"sha": "513e7c529763f24b384625eb562c6b0c1840cae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513e7c529763f24b384625eb562c6b0c1840cae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19e0f01a118a6cf518ba9ca98a0835688303d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19e0f01a118a6cf518ba9ca98a0835688303d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19e0f01a118a6cf518ba9ca98a0835688303d1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19e0f01a118a6cf518ba9ca98a0835688303d1d/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a16e07c6822d6b68ecbcab07205e015363dcd4e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16e07c6822d6b68ecbcab07205e015363dcd4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a16e07c6822d6b68ecbcab07205e015363dcd4e7"}], "stats": {"total": 135, "additions": 125, "deletions": 10}, "files": [{"sha": "3db5448ba25fed279a6849f0952689c80a5acc85", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=d19e0f01a118a6cf518ba9ca98a0835688303d1d", "patch": "@@ -1,3 +1,19 @@\n+2010-11-11  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR bootstrap/46397\n+\tPR bootstrap/46362\n+\t* configure.ac: Add AC_TYPE_INT64_T test.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\t* lto-plugin.c (debug): Use char not bool.\n+\t(nop): Likewise.\n+\t(check_1): Rename from check, and use int not bool for gate argument.\n+\t(check): Macro wrapper for the above to coerce gate argument into\n+\tboolean-valued integer in case it has pointer type.\n+\t(parse_table_entry): Use 0 not false.\n+\t(claim_file_handler): Avoid use of PRIx64 by splitting 64-bit size\n+\tinto two 32-bit parts and printing as hex ints.\n+\n 2010-11-03  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR lto/46291"}, {"sha": "9c99e88b95438e744ecae4aca21b4507795afe40", "filename": "lto-plugin/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfig.h.in?ref=d19e0f01a118a6cf518ba9ca98a0835688303d1d", "patch": "@@ -75,6 +75,10 @@\n    #define below would cause a syntax error. */\n #undef _UINT64_T\n \n+/* Define to the type of a signed integer type of width exactly 64 bits if\n+   such a type exists and the standard includes do not define it. */\n+#undef int64_t\n+\n /* Define to the type of an unsigned integer type of width exactly 64 bits if\n    such a type exists and the standard includes do not define it. */\n #undef uint64_t"}, {"sha": "154c5bf23dab212e1ee628adaade8347eaf235b6", "filename": "lto-plugin/configure", "status": "modified", "additions": 84, "deletions": 2, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=d19e0f01a118a6cf518ba9ca98a0835688303d1d", "patch": "@@ -1730,6 +1730,77 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_func\n \n+# ac_fn_c_find_intX_t LINENO BITS VAR\n+# -----------------------------------\n+# Finds a signed integer type with width BITS, setting cache variable VAR\n+# accordingly.\n+ac_fn_c_find_intX_t ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for int$2_t\" >&5\n+$as_echo_n \"checking for int$2_t... \" >&6; }\n+if { as_var=$3; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  eval \"$3=no\"\n+     for ac_type in int$2_t 'int' 'long int' \\\n+\t 'long long int' 'short int' 'signed char'; do\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(0 < ($ac_type) (((($ac_type) 1 << ($2 - 2)) - 1) * 2 + 1))];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($ac_type) (((($ac_type) 1 << ($2 - 2)) - 1) * 2 + 1)\n+\t\t < ($ac_type) (((($ac_type) 1 << ($2 - 2)) - 1) * 2 + 2))];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  case $ac_type in #(\n+  int$2_t) :\n+    eval \"$3=yes\" ;; #(\n+  *) :\n+    eval \"$3=\\$ac_type\" ;;\n+esac\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+       eval as_val=\\$$3\n+   if test \"x$as_val\" = x\"\"no; then :\n+\n+else\n+  break\n+fi\n+     done\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n+\n+} # ac_fn_c_find_intX_t\n+\n # ac_fn_c_find_uintX_t LINENO BITS VAR\n # ------------------------------------\n # Finds an unsigned integer type with width BITS, setting cache variable VAR\n@@ -10434,7 +10505,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10437 \"configure\"\n+#line 10508 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10540,7 +10611,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10543 \"configure\"\n+#line 10614 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10796,6 +10867,17 @@ $as_echo \"#define SYM_STYLE ss_none\" >>confdefs.h\n \n     ;;\n esac\n+ac_fn_c_find_intX_t \"$LINENO\" \"64\" \"ac_cv_c_int64_t\"\n+case $ac_cv_c_int64_t in #(\n+  no|yes) ;; #(\n+  *)\n+\n+cat >>confdefs.h <<_ACEOF\n+#define int64_t $ac_cv_c_int64_t\n+_ACEOF\n+;;\n+esac\n+\n ac_fn_c_find_uintX_t \"$LINENO\" \"64\" \"ac_cv_c_uint64_t\"\n case $ac_cv_c_uint64_t in #(\n   no|yes) ;; #("}, {"sha": "15bc1a6b53bc058e7c5a07cfd608a64b9f697e2e", "filename": "lto-plugin/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure.ac?ref=d19e0f01a118a6cf518ba9ca98a0835688303d1d", "patch": "@@ -20,6 +20,7 @@ case $target in\n     AC_DEFINE([SYM_STYLE], [ss_none], [Default symbol style])\n     ;;\n esac\n+AC_TYPE_INT64_T\n AC_TYPE_UINT64_T\n AC_CONFIG_FILES(Makefile)\n AC_CONFIG_HEADERS(config.h)"}, {"sha": "78eb10988371675c8420ad291e900c7a638c404d", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e0f01a118a6cf518ba9ca98a0835688303d1d/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=d19e0f01a118a6cf518ba9ca98a0835688303d1d", "patch": "@@ -35,6 +35,9 @@ along with this program; see the file COPYING3.  If not see\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif\n+#if HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n #include <assert.h>\n #include <string.h>\n #include <stdlib.h>\n@@ -45,7 +48,6 @@ along with this program; see the file COPYING3.  If not see\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/wait.h>\n-#include <stdbool.h>\n #include <libiberty.h>\n #include <hashtab.h>\n #include \"../gcc/lto/common.h\"\n@@ -138,8 +140,8 @@ static int lto_wrapper_num_args;\n static char **pass_through_items = NULL;\n static unsigned int num_pass_through_items;\n \n-static bool debug;\n-static bool nop;\n+static char debug;\n+static char nop;\n static char *resolution_file = NULL;\n \n /* Set by default from configure.ac, but can be overridden at runtime\n@@ -148,7 +150,7 @@ static char *resolution_file = NULL;\n static enum symbol_style sym_style = SYM_STYLE;\n \n static void\n-check (bool gate, enum ld_plugin_level level, const char *text)\n+check_1 (int gate, enum ld_plugin_level level, const char *text)\n {\n   if (gate)\n     return;\n@@ -164,6 +166,11 @@ check (bool gate, enum ld_plugin_level level, const char *text)\n     }\n }\n \n+/* This little wrapper allows check to be called with a non-integer\n+   first argument, such as a pointer that must be non-NULL.  We can't\n+   use c99 bool type to coerce it into range, so we explicitly test.  */\n+#define check(GATE, LEVEL, TEXT) check_1 (((GATE) != 0), (LEVEL), (TEXT))\n+\n /* Parse an entry of the IL symbol table. The data to be parsed is pointed\n    by P and the result is written in ENTRY. The slot number is stored in SLOT.\n    Returns the address of the next entry. */\n@@ -205,7 +212,7 @@ parse_table_entry (char *p, struct ld_plugin_symbol *entry,\n       entry->name = concat (\"_\", p, NULL);\n       break;\n     default:\n-      check (false, LDPL_FATAL, \"invalid symbol style requested\");\n+      check (0, LDPL_FATAL, \"invalid symbol style requested\");\n       break;\n     }\n   while (*p)\n@@ -825,9 +832,14 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n   if (file->offset != 0)\n     {\n       char *objname;\n-      /* We pass the offset of the actual file, not the archive header. */\n-      int t = asprintf (&objname, \"%s@0x%\" PRIx64, file->name,\n-                        (int64_t) file->offset);\n+      /* We pass the offset of the actual file, not the archive header.\n+         Can't use PRIx64, because that's C99, so we have to print the\n+\t 64-bit hex int as two 32-bit ones. */\n+      int lo, hi;\n+      lo = file->offset & 0xffffffff;\n+      hi = ((int64_t)file->offset >> 32) & 0xffffffff;\n+      int t = hi ? asprintf (&objname, \"%s@0x%x%08x\", file->name, lo, hi)\n+\t\t: asprintf (&objname, \"%s@0x%x\", file->name, lo);\n       check (t >= 0, LDPL_FATAL, \"asprintf failed\");\n       lto_file.name = objname;\n     }"}]}