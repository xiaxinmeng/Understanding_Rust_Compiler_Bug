{"sha": "cd0f62787d6d57d1519f91d281ff00fb35b188ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QwZjYyNzg3ZDZkNTdkMTUxOWY5MWQyODFmZjAwZmIzNWIxODhjYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-30T16:12:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-30T16:12:16Z"}, "message": "tree-ssa-loop-niter.c (number_of_iterations_exit): New parameter EVERY_ITERATION with implicit value of true.\n\n\n\t* tree-ssa-loop-niter.c (number_of_iterations_exit): New parameter\n\tEVERY_ITERATION with implicit value of true.\n\t(record_estimate): Check dominance relationship of the basic block\n\twe are estimating on instead of relying on UPPER to be false.\n\t(struct ilb_data): Drop RELIABLE.\n\t(idx_infer_loop_bounds): Update.\n\t(infer_loop_bounds_from_ref): Drop parameter RELIABLE.\n\t(infer_loop_bounds_from_array): Drop parameter RELIABLE.\n\t(infer_loop_bounds_from_undefined): Update comments and handling\n\tof RELIABLE.\n\t(estimate_numbers_of_iterations_loop): Record all bounds.\n\nFrom-SVN: r192989", "tree": {"sha": "cbc6008b7f0ffd4f218684dc344ffb2600f892c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc6008b7f0ffd4f218684dc344ffb2600f892c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd0f62787d6d57d1519f91d281ff00fb35b188ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0f62787d6d57d1519f91d281ff00fb35b188ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0f62787d6d57d1519f91d281ff00fb35b188ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0f62787d6d57d1519f91d281ff00fb35b188ca/comments", "author": null, "committer": null, "parents": [{"sha": "baa061be44ee32ca259b1a66266d7a27f3c37054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baa061be44ee32ca259b1a66266d7a27f3c37054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baa061be44ee32ca259b1a66266d7a27f3c37054"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "e39f2ad7ae9fefd0b8ed9c20abd7d83c742a7318", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0f62787d6d57d1519f91d281ff00fb35b188ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0f62787d6d57d1519f91d281ff00fb35b188ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd0f62787d6d57d1519f91d281ff00fb35b188ca", "patch": "@@ -1,3 +1,17 @@\n+2012-10-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-loop-niter.c (number_of_iterations_exit): New parameter\n+\tEVERY_ITERATION with implicit value of true.\n+\t(record_estimate): Check dominance relationship of the basic block\n+\twe are estimating on instead of relying on UPPER to be false.\n+\t(struct ilb_data): Drop RELIABLE.\n+\t(idx_infer_loop_bounds): Update.\n+\t(infer_loop_bounds_from_ref): Drop parameter RELIABLE.\n+\t(infer_loop_bounds_from_array): Drop parameter RELIABLE.\n+\t(infer_loop_bounds_from_undefined): Update comments and handling\n+\tof RELIABLE.\n+\t(estimate_numbers_of_iterations_loop): Record all bounds.\n+\n 2012-10-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* lra-eliminations.c (lra_eliminate_regs_1): Use simplify_gen_subreg"}, {"sha": "20681a9140a33b4837a2ed5b507d2d13fce84b9c", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0f62787d6d57d1519f91d281ff00fb35b188ca/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0f62787d6d57d1519f91d281ff00fb35b188ca/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=cd0f62787d6d57d1519f91d281ff00fb35b188ca", "patch": "@@ -1793,20 +1793,24 @@ loop_only_exit_p (const struct loop *loop, const_edge exit)\n    meaning described in comments at struct tree_niter_desc\n    declaration), false otherwise.  If WARN is true and\n    -Wunsafe-loop-optimizations was given, warn if the optimizer is going to use\n-   potentially unsafe assumptions.  */\n+   potentially unsafe assumptions.  \n+   When EVERY_ITERATION is true, only tests that are known to be executed\n+   every iteration are considered (i.e. only test that alone bounds the loop). \n+ */\n \n bool\n number_of_iterations_exit (struct loop *loop, edge exit,\n \t\t\t   struct tree_niter_desc *niter,\n-\t\t\t   bool warn)\n+\t\t\t   bool warn, bool every_iteration)\n {\n   gimple stmt;\n   tree type;\n   tree op0, op1;\n   enum tree_code code;\n   affine_iv iv0, iv1;\n \n-  if (!dominated_by_p (CDI_DOMINATORS, loop->latch, exit->src))\n+  if (every_iteration\n+      && !dominated_by_p (CDI_DOMINATORS, loop->latch, exit->src))\n     return false;\n \n   niter->assumptions = boolean_false_node;\n@@ -2568,6 +2572,11 @@ record_estimate (struct loop *loop, tree bound, double_int i_bound,\n       loop->bounds = elt;\n     }\n \n+  /* If statement is executed on every path to the loop latch, we can directly\n+     infer the upper bound on the # of iterations of the loop.  */\n+  if (!dominated_by_p (CDI_DOMINATORS, loop->latch, gimple_bb (at_stmt)))\n+    return;\n+\n   /* Update the number of iteration estimates according to the bound.\n      If at_stmt is an exit then the loop latch is executed at most BOUND times,\n      otherwise it can be executed BOUND + 1 times.  We will lower the estimate\n@@ -2651,7 +2660,6 @@ struct ilb_data\n {\n   struct loop *loop;\n   gimple stmt;\n-  bool reliable;\n };\n \n static bool\n@@ -2660,7 +2668,7 @@ idx_infer_loop_bounds (tree base, tree *idx, void *dta)\n   struct ilb_data *data = (struct ilb_data *) dta;\n   tree ev, init, step;\n   tree low, high, type, next;\n-  bool sign, upper = data->reliable, at_end = false;\n+  bool sign, upper = true, at_end = false;\n   struct loop *loop = data->loop;\n \n   if (TREE_CODE (base) != ARRAY_REF)\n@@ -2737,14 +2745,12 @@ idx_infer_loop_bounds (tree base, tree *idx, void *dta)\n    STMT is guaranteed to be executed in every iteration of LOOP.*/\n \n static void\n-infer_loop_bounds_from_ref (struct loop *loop, gimple stmt, tree ref,\n-\t\t\t    bool reliable)\n+infer_loop_bounds_from_ref (struct loop *loop, gimple stmt, tree ref)\n {\n   struct ilb_data data;\n \n   data.loop = loop;\n   data.stmt = stmt;\n-  data.reliable = reliable;\n   for_each_index (&ref, idx_infer_loop_bounds, &data);\n }\n \n@@ -2753,7 +2759,7 @@ infer_loop_bounds_from_ref (struct loop *loop, gimple stmt, tree ref,\n    executed in every iteration of LOOP.  */\n \n static void\n-infer_loop_bounds_from_array (struct loop *loop, gimple stmt, bool reliable)\n+infer_loop_bounds_from_array (struct loop *loop, gimple stmt)\n {\n   if (is_gimple_assign (stmt))\n     {\n@@ -2763,10 +2769,10 @@ infer_loop_bounds_from_array (struct loop *loop, gimple stmt, bool reliable)\n       /* For each memory access, analyze its access function\n \t and record a bound on the loop iteration domain.  */\n       if (REFERENCE_CLASS_P (op0))\n-\tinfer_loop_bounds_from_ref (loop, stmt, op0, reliable);\n+\tinfer_loop_bounds_from_ref (loop, stmt, op0);\n \n       if (REFERENCE_CLASS_P (op1))\n-\tinfer_loop_bounds_from_ref (loop, stmt, op1, reliable);\n+\tinfer_loop_bounds_from_ref (loop, stmt, op1);\n     }\n   else if (is_gimple_call (stmt))\n     {\n@@ -2775,13 +2781,13 @@ infer_loop_bounds_from_array (struct loop *loop, gimple stmt, bool reliable)\n \n       lhs = gimple_call_lhs (stmt);\n       if (lhs && REFERENCE_CLASS_P (lhs))\n-\tinfer_loop_bounds_from_ref (loop, stmt, lhs, reliable);\n+\tinfer_loop_bounds_from_ref (loop, stmt, lhs);\n \n       for (i = 0; i < n; i++)\n \t{\n \t  arg = gimple_call_arg (stmt, i);\n \t  if (REFERENCE_CLASS_P (arg))\n-\t    infer_loop_bounds_from_ref (loop, stmt, arg, reliable);\n+\t    infer_loop_bounds_from_ref (loop, stmt, arg);\n \t}\n     }\n }\n@@ -2910,14 +2916,15 @@ infer_loop_bounds_from_undefined (struct loop *loop)\n \n       /* If BB is not executed in each iteration of the loop, we cannot\n \t use the operations in it to infer reliable upper bound on the\n-\t # of iterations of the loop.  However, we can use it as a guess.  */\n+\t # of iterations of the loop.  However, we can use it as a guess. \n+\t Reliable guesses come only from array bounds.  */\n       reliable = dominated_by_p (CDI_DOMINATORS, loop->latch, bb);\n \n       for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{\n \t  gimple stmt = gsi_stmt (bsi);\n \n-\t  infer_loop_bounds_from_array (loop, stmt, reliable);\n+\t  infer_loop_bounds_from_array (loop, stmt);\n \n \t  if (reliable)\n             {\n@@ -3078,7 +3085,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n   likely_exit = single_likely_exit (loop);\n   FOR_EACH_VEC_ELT (edge, exits, i, ex)\n     {\n-      if (!number_of_iterations_exit (loop, ex, &niter_desc, false))\n+      if (!number_of_iterations_exit (loop, ex, &niter_desc, false, false))\n \tcontinue;\n \n       niter = niter_desc.niter;"}]}