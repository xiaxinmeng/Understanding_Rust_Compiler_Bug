{"sha": "29f5db8ef81fac4db8e66e5f06fdf1d469e8161c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmNWRiOGVmODFmYWM0ZGI4ZTY2ZTVmMDZmZGYxZDQ2OWU4MTYxYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-25T21:15:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-26T01:33:02Z"}, "message": "analyzer: fix ICEs treeifying offset_region [PR96646, PR96841]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96646\n\tPR analyzer/96841\n\t* region-model.cc (region_model::get_representative_path_var):\n\tWhen handling offset_region, wrap the MEM_REF's first argument in\n\tan ADDR_EXPR of pointer type, rather than simply using the tree\n\tfor the parent region.  Require the MEM_REF's second argument to\n\tbe an integer constant.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96646\n\tPR analyzer/96841\n\t* gcc.dg/analyzer/pr96646.c: New test.\n\t* gcc.dg/analyzer/pr96841.c: New test.", "tree": {"sha": "03b825c6057813e07f1546c7efa8ea3acf6fbaea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b825c6057813e07f1546c7efa8ea3acf6fbaea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd8f031c7edf0fcbf5f20bf5fbd1526a64461d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd8f031c7edf0fcbf5f20bf5fbd1526a64461d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd8f031c7edf0fcbf5f20bf5fbd1526a64461d5"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "a88a295a24177b273a5ecd94813e010f4d5afdd8", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=29f5db8ef81fac4db8e66e5f06fdf1d469e8161c", "patch": "@@ -2140,11 +2140,14 @@ region_model::get_representative_path_var (const region *reg,\n \tpath_var offset_pv\n \t  = get_representative_path_var (offset_reg->get_byte_offset (),\n \t\t\t\t\t visited);\n-\tif (!offset_pv)\n+\tif (!offset_pv || TREE_CODE (offset_pv.m_tree) != INTEGER_CST)\n \t  return path_var (NULL_TREE, 0);\n+\ttree addr_parent = build1 (ADDR_EXPR,\n+\t\t\t\t   build_pointer_type (reg->get_type ()),\n+\t\t\t\t   parent_pv.m_tree);\n \treturn path_var (build2 (MEM_REF,\n \t\t\t\t reg->get_type (),\n-\t\t\t\t parent_pv.m_tree, offset_pv.m_tree),\n+\t\t\t\t addr_parent, offset_pv.m_tree),\n \t\t\t parent_pv.m_stack_depth);\n       }\n "}, {"sha": "2ac5a03b0e5d8fca96545051154709e899a007a7", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96646.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96646.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96646.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96646.c?ref=29f5db8ef81fac4db8e66e5f06fdf1d469e8161c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-additional-options \"-O1\" } */\n+\n+struct zx {\n+  struct zx *b4, *g0;\n+};\n+\n+struct oo {\n+  void *ph;\n+  struct zx el;\n+};\n+\n+inline void\n+k7 (struct zx *xj)\n+{\n+  xj->b4->g0 = 0; /* { dg-warning \"dereference of NULL\" } */\n+  xj->b4 = 0;\n+}\n+\n+void\n+n8 (struct oo *yx)\n+{\n+  k7 (&yx->el);\n+  n8 (yx);\n+}"}, {"sha": "d9d35f3dce8e32dccd6d3e7bfdbdbabd83d6b1ac", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96841.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f5db8ef81fac4db8e66e5f06fdf1d469e8161c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c?ref=29f5db8ef81fac4db8e66e5f06fdf1d469e8161c", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-additional-options \"-O1 -Wno-builtin-declaration-mismatch\" } */\n+\n+int\n+l8 (void);\n+\n+__SIZE_TYPE__\n+malloc (__SIZE_TYPE__);\n+\n+void\n+th (int *);\n+\n+void\n+bv (__SIZE_TYPE__ ny)\n+{\n+  int ***mf;\n+\n+  while (l8 ())\n+    {\n+      *mf = 0;\n+      (*mf)[ny] = (int *) malloc (sizeof (int));\n+      th ((*mf)[ny]); /* { dg-warning \"leak\" } */\n+    }\n+}"}]}