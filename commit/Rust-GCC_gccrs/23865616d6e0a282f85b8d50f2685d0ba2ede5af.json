{"sha": "23865616d6e0a282f85b8d50f2685d0ba2ede5af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4NjU2MTZkNmUwYTI4MmY4NWI4ZDUwZjI2ODVkMGJhMmVkZTVhZg==", "commit": {"author": {"name": "Anthony Green", "email": "green@moxielogic.com", "date": "2009-07-31T05:11:21Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2009-07-31T05:11:21Z"}, "message": "Tweak ABI & add moxie-uclinux target.\n\nFrom-SVN: r150307", "tree": {"sha": "c54f2113af4b25275af797e82b62a1380e0c7162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c54f2113af4b25275af797e82b62a1380e0c7162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23865616d6e0a282f85b8d50f2685d0ba2ede5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23865616d6e0a282f85b8d50f2685d0ba2ede5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23865616d6e0a282f85b8d50f2685d0ba2ede5af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23865616d6e0a282f85b8d50f2685d0ba2ede5af/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20e19db49ec468766f78a6d3a0f3b69980be2974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e19db49ec468766f78a6d3a0f3b69980be2974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e19db49ec468766f78a6d3a0f3b69980be2974"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "bde57bbbfa584da341fd3be9d5831b9d566aee77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23865616d6e0a282f85b8d50f2685d0ba2ede5af", "patch": "@@ -1,3 +1,21 @@\n+2009-07-31  Anthony Green  <green@moxielogic.com>\n+\n+\t* config/moxie/moxie.c (moxie_expand_prologue): Use $r5 instead of\n+\t$r12 in prologue.\n+\t(moxie_expand_epilogue): Ditto for epilogue.\n+\t(moxie_setup_incoming_varargs): ABI change.  Use 5 registers for\n+\tincoming arguments.\n+\t(moxie_function_arg): Ditto.\n+\t(moxie_pass_by_reference): Ditto.\n+\t(moxie_arg_partial_bytes): Ditto.\n+\t* config/moxie/moxie.h (CALL_USED_REGISTERS): Ditto.\n+\t(FUNCTION_ARG_ADVANCE) Ditto.\n+\t(REG_PARM_STACK_SPACE) Ditto.\n+\t(FUNCTION_ARG_REGNO_P) Dito.\n+\n+\t* config.gcc: Add moxie linux config support.\n+\t* gcc/config/moxie/uclinux.h: New file.\n+\n 2009-07-31  DJ Delorie  <dj@redhat.com>\n \n \t* config/sh/sh.md (UNSPECV_SP_SWITCH_B): New."}, {"sha": "ea24e1670c66f0fb001960b624e638632655ac59", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=23865616d6e0a282f85b8d50f2685d0ba2ede5af", "patch": "@@ -894,6 +894,15 @@ moxie-*-elf)\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \ttmake_file=\"${tmake_file} moxie/t-moxie moxie/t-moxie-softfp soft-fp/t-softfp\"\n \t;;\n+moxie-*-uclinux*)\n+\tgas=yes\n+\tgnu_ld=yes\n+\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} linux.h glibc-stdint.h moxie/uclinux.h\"\n+\textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n+\ttmake_file=\"${tmake_file} moxie/t-moxie moxie/t-moxie-softfp soft-fp/t-softfp\"\n+\ttm_defines=\"${tm_defines} UCLIBC_DEFAULT=1\"\n+\textra_options=\"${extra_options} linux.opt\"\n+\t;;\n h8300-*-rtems*)\n \ttmake_file=\"h8300/t-h8300 h8300/t-elf t-rtems h8300/t-rtems\"\n \ttm_file=\"h8300/h8300.h dbxelf.h elfos.h h8300/elf.h h8300/rtems.h rtems.h newlib-stdint.h\""}, {"sha": "39a5c10bb690a4bc29f6773f62c38f46bafd3c5c", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=23865616d6e0a282f85b8d50f2685d0ba2ede5af", "patch": "@@ -284,12 +284,12 @@ moxie_expand_prologue (void)\n \t{\n \t  insn = \n \t    emit_insn (gen_movsi \n-\t\t       (gen_rtx_REG (Pmode, MOXIE_R12), \n+\t\t       (gen_rtx_REG (Pmode, MOXIE_R5), \n \t\t\tGEN_INT (-cfun->machine->size_for_adjusting_sp)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, \n \t\t\t\t\tstack_pointer_rtx, \n-\t\t\t\t\tgen_rtx_REG (Pmode, MOXIE_R12)));\n+\t\t\t\t\tgen_rtx_REG (Pmode, MOXIE_R5)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\t\n     }\n@@ -303,7 +303,7 @@ moxie_expand_epilogue (void)\n \n   if (cfun->machine->callee_saved_reg_size != 0)\n     {\n-      reg = gen_rtx_REG (Pmode, MOXIE_R12);\n+      reg = gen_rtx_REG (Pmode, MOXIE_R5);\n       if (cfun->machine->callee_saved_reg_size <= 255)\n \t{\n \t  emit_move_insn (reg, hard_frame_pointer_rtx);\n@@ -359,14 +359,14 @@ moxie_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n \t\t\t      int *pretend_size, int no_rtl)\n {\n   int regno;\n-  int regs = 4 - *cum;\n+  int regs = 7 - *cum;\n   \n   *pretend_size = regs < 0 ? 0 : GET_MODE_SIZE (SImode) * regs;\n   \n   if (no_rtl)\n     return;\n   \n-  for (regno = *cum; regno < 4; regno++)\n+  for (regno = *cum; regno < 7; regno++)\n     {\n       rtx reg = gen_rtx_REG (SImode, regno);\n       rtx slot = gen_rtx_PLUS (Pmode,\n@@ -395,7 +395,7 @@ rtx\n moxie_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n \t\t    tree type ATTRIBUTE_UNUSED, int named ATTRIBUTE_UNUSED)\n {\n-  if (cum < 4)\n+  if (cum < 7)\n     return gen_rtx_REG (mode, cum);\n   else \n     return NULL_RTX;\n@@ -420,7 +420,7 @@ moxie_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n   else\n     size = GET_MODE_SIZE (mode);\n \n-  return size > 8;\n+  return size > 4*5;\n }\n \n /* Some function arguments will only partially fit in the registers\n@@ -434,7 +434,7 @@ moxie_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n {\n   int bytes_left, size;\n \n-  if (*cum >= 4)\n+  if (*cum >= 7)\n     return 0;\n \n   if (moxie_pass_by_reference (cum, mode, type, named))\n@@ -448,7 +448,7 @@ moxie_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n   else\n     size = GET_MODE_SIZE (mode);\n \n-  bytes_left = 8 - ((*cum - 2) * 4);\n+  bytes_left = (4 * 5) - ((*cum - 2) * 4);\n \n   if (size > bytes_left)\n     return bytes_left;"}, {"sha": "f50a6b2a27e0c8e6ec5f39086af8bf2f5e2f2fae", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=23865616d6e0a282f85b8d50f2685d0ba2ede5af", "patch": "@@ -144,7 +144,7 @@ enum reg_class\n \n #define REG_CLASS_CONTENTS \\\n { { 0x00000000 }, /* Empty */\t\t\t   \\\n-  { 0x0003FFFF }, /* $fp, $sp, $r0 to $r5, ?fp */  \\\n+  { 0x0003FFFF }, /* $fp, $sp, $r0 to $r13, ?fp */ \\\n   { 0x00040000 }, /* $pc */\t                   \\\n   { 0x00080000 }, /* ?cc */                        \\\n   { 0x000FFFFF }  /* All registers */              \\\n@@ -166,7 +166,7 @@ enum reg_class\n                               1, 1, 1, 1 }\n \n #define CALL_USED_REGISTERS { 1, 1, 1, 1, \\\n-\t\t\t      0, 0, 0, 0, \\\n+\t\t\t      1, 1, 1, 1, \\\n \t\t\t      0, 0, 0, 0, \\\n \t\t\t      0, 0, 1, 1, \\\n                               1, 1, 1, 1 }\n@@ -263,7 +263,7 @@ enum reg_class\n    : (unsigned) int_size_in_bytes (TYPE))\n \n #define FUNCTION_ARG_ADVANCE(CUM,MODE,TYPE,NAMED) \\\n-  (CUM = (CUM < MOXIE_R2 ?                        \\\n+  (CUM = (CUM < MOXIE_R5 ?                        \\\n           CUM + ((3 + MOXIE_FUNCTION_ARG_SIZE(MODE,TYPE))/4) : CUM ))\n \n /* How Scalar Function Values Are Returned */\n@@ -299,7 +299,7 @@ enum reg_class\n \n /* Define this if it is the responsibility of the caller to allocate\n    the area reserved for arguments passed in registers.  */\n-#define REG_PARM_STACK_SPACE(FNDECL) (2 * UNITS_PER_WORD)\n+#define REG_PARM_STACK_SPACE(FNDECL) (5 * UNITS_PER_WORD)\n \n /* Offset from the argument pointer register to the first argument's\n    address.  On some machines it may depend on the data type of the\n@@ -425,7 +425,7 @@ do\t\t\t\t\t\t\t\t\t      \\\n \n /* The register number of the stack pointer register, which must also\n    be a fixed register according to `FIXED_REGISTERS'.  */\n-#define STACK_POINTER_REGNUM 1\n+#define STACK_POINTER_REGNUM MOXIE_SP\n \n /* The register number of the frame pointer register, which is used to\n    access automatic variables in the stack frame.  */\n@@ -448,17 +448,9 @@ do\t\t\t\t\t\t\t\t\t      \\\n \n #define HARD_FRAME_POINTER_REGNUM MOXIE_FP\n \n-#if 0\n-#define ELIMINABLE_REGS\t\t\t\t\t\t\t\\\n-{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\t\\\n- { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\t\t\\\n- { ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM },\t\t\t\\\n- { ARG_POINTER_REGNUM,   HARD_FRAME_POINTER_REGNUM }}\t\t\t\n-#else\n #define ELIMINABLE_REGS\t\t\t\t\t\t\t\\\n {{ FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\t\t\\\n  { ARG_POINTER_REGNUM,   HARD_FRAME_POINTER_REGNUM }}\t\t\t\n-#endif\n \n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n    specifies the initial difference between the specified pair of\n@@ -471,7 +463,7 @@ do\t\t\t\t\t\t\t\t\t      \\\n \n /* A C expression that is nonzero if REGNO is the number of a hard\n    register in which function arguments are sometimes passed.  */\n-#define FUNCTION_ARG_REGNO_P(r) (r == MOXIE_R0 || r == MOXIE_R1)\n+#define FUNCTION_ARG_REGNO_P(r) (r >= MOXIE_R0 && r <= MOXIE_R4)\n \n /* A C expression that is nonzero if REGNO is the number of a hard\n    register in which the values of called function may come back.  */"}, {"sha": "0e5ee3d6b6b67274846bb0f4db5d4d0cf1e27825", "filename": "gcc/config/moxie/uclinux.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23865616d6e0a282f85b8d50f2685d0ba2ede5af/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fuclinux.h?ref=23865616d6e0a282f85b8d50f2685d0ba2ede5af", "patch": "@@ -0,0 +1,39 @@\n+/* Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: crt1%O%s} crti%O%s crtbegin%O%s\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-elf2flt\"\n+\n+#define TARGET_OS_CPP_BUILTINS() LINUX_TARGET_OS_CPP_BUILTINS()\n+\n+/* Like the definition in gcc.c, but for purposes of uClinux, every link is\n+   static.  */\n+#define MFWRAP_SPEC \" %{fmudflap|fmudflapth: \\\n+ --wrap=malloc --wrap=free --wrap=calloc --wrap=realloc\\\n+ --wrap=mmap --wrap=munmap --wrap=alloca\\\n+ %{fmudflapth: --wrap=pthread_create\\\n+}} %{fmudflap|fmudflapth: --wrap=main}\""}]}