{"sha": "62c154ed39c6410c39944a8b7f6feccddc2a2946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJjMTU0ZWQzOWM2NDEwYzM5OTQ0YThiN2Y2ZmVjY2RkYzJhMjk0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-05-22T23:13:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-22T23:13:28Z"}, "message": "decl.c (lang_print_error_function): New fn.\n\n\t* decl.c (lang_print_error_function): New fn.\n\t(init_decl_processing): Set print_error_function to use it.\n\t* errfn.c (cp_thing): Don't call maybe_print_template_context here.\n\t* call.c (maybe_handle_ref_bind): Propagate ICS_USER_FLAG and\n\tICS_BAD_FLAG.\n\t* cvt.c (ocp_convert): Don't set LOOKUP_NO_CONVERSION for\n\tcopy-initialization.\n\nFrom-SVN: r19966", "tree": {"sha": "0c6ae24ea4ef95ae0fb815cb46a34ead372a79db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6ae24ea4ef95ae0fb815cb46a34ead372a79db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62c154ed39c6410c39944a8b7f6feccddc2a2946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c154ed39c6410c39944a8b7f6feccddc2a2946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c154ed39c6410c39944a8b7f6feccddc2a2946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c154ed39c6410c39944a8b7f6feccddc2a2946/comments", "author": null, "committer": null, "parents": [{"sha": "bd070e1aa9a4f7b6575e6b58a78de2dc708e5d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd070e1aa9a4f7b6575e6b58a78de2dc708e5d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd070e1aa9a4f7b6575e6b58a78de2dc708e5d38"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "023f4571f9022682335d42b8ee97012bf6c151dc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62c154ed39c6410c39944a8b7f6feccddc2a2946", "patch": "@@ -1,5 +1,15 @@\n 1998-05-22  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl.c (lang_print_error_function): New fn.  \n+\t(init_decl_processing): Set print_error_function to use it.\n+\t* errfn.c (cp_thing): Don't call maybe_print_template_context here.\n+\n+\t* call.c (maybe_handle_ref_bind): Propagate ICS_USER_FLAG and\n+\tICS_BAD_FLAG.\n+\n+\t* cvt.c (ocp_convert): Don't set LOOKUP_NO_CONVERSION for\n+\tcopy-initialization.\n+\n \t* class.c (build_vtable_entry): Use int_fits_type_p.\n \t(build_vtable): Pass a signed offset to build_vtable_entry.\n \t(prepare_fresh_vtable, modify_one_vtable, fixup_vtable_deltas1,"}, {"sha": "f0bf7d816ab18ae57b6d65a34d3398302d3651d4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=62c154ed39c6410c39944a8b7f6feccddc2a2946", "patch": "@@ -3786,11 +3786,16 @@ maybe_handle_ref_bind (ics, reference_type)\n \t cv-qualification is subsumed by the initialization itself and\n \t does not constitute a conversion.  */\n \n+      tree old_ics = *ics;\n+\n       *reference_type = TREE_TYPE (TREE_TYPE (*ics));\n       *ics = TREE_OPERAND (*ics, 0);\n       if (TREE_CODE (*ics) == IDENTITY_CONV\n \t  && is_properly_derived_from (TREE_TYPE (*ics), *reference_type))\n \t*ics = build_conv (BASE_CONV, *reference_type, *ics);\n+      ICS_USER_FLAG (*ics) = ICS_USER_FLAG (old_ics);\n+      ICS_BAD_FLAG (*ics) = ICS_BAD_FLAG (old_ics);\n+      \n       return 1;\n     }\n   "}, {"sha": "abf847503deb6d25e3759307a2f5646d0b459a02", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=62c154ed39c6410c39944a8b7f6feccddc2a2946", "patch": "@@ -796,10 +796,10 @@ ocp_convert (type, expr, convtype, flags)\n \n       if ((flags & LOOKUP_ONLYCONVERTING)\n \t  && ! (IS_AGGR_TYPE (dtype) && DERIVED_FROM_P (type, dtype)))\n-\t{\n-\t  ctor = build_user_type_conversion (type, ctor, flags);\n-\t  flags |= LOOKUP_NO_CONVERSION;\n-\t}\n+\t/* For copy-initialization, first we create a temp of the proper type\n+\t   with a user-defined conversion sequence, then we direct-initialize\n+\t   the target with the temp (see [dcl.init]).  */\n+\tctor = build_user_type_conversion (type, ctor, flags);\n       if (ctor)\n \tctor = build_method_call (NULL_TREE, ctor_identifier,\n \t\t\t\t  build_expr_list (NULL_TREE, ctor),"}, {"sha": "aa1a419571dd710dbbc623a10cb85fffae2fedf2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=62c154ed39c6410c39944a8b7f6feccddc2a2946", "patch": "@@ -59,6 +59,8 @@ extern int static_labelno;\n extern tree current_namespace;\n extern tree global_namespace;\n \n+extern void (*print_error_function) PROTO((char *));\n+\n /* Stack of places to restore the search obstack back to.  */\n    \n /* Obstack used for remembering local class declarations (like\n@@ -172,6 +174,7 @@ static void record_unknown_type PROTO((tree, char *));\n static int member_function_or_else PROTO((tree, tree, char *));\n static void bad_specifiers PROTO((tree, char *, int, int, int, int,\n \t\t\t\t  int));\n+static void lang_print_error_function PROTO((char *));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PROTO((void));\n@@ -5904,6 +5907,18 @@ init_decl_processing ()\n \n   /* Show we use EH for cleanups.  */\n   using_eh_for_cleanups ();\n+\n+  print_error_function = lang_print_error_function;\n+}\n+\n+/* Function to print any language-specific context for an error message.  */\n+\n+static void\n+lang_print_error_function (file)\n+     char *file;\n+{\n+  default_print_error_function (file);\n+  maybe_print_template_context ();\n }\n \n /* Make a definition for a builtin function named NAME and whose data type"}, {"sha": "e5bfdf4045c8753030bd1f129030b80fb588ec92", "filename": "gcc/cp/errfn.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Ferrfn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c154ed39c6410c39944a8b7f6feccddc2a2946/gcc%2Fcp%2Ferrfn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferrfn.c?ref=62c154ed39c6410c39944a8b7f6feccddc2a2946", "patch": "@@ -72,10 +72,6 @@ cp_thing (errfn, atarg1, format, ap)\n   const char *f;\n   tree atarg = 0;\n \n-  /* We call this here so that the calls to cp_error in\n-     print_template_context don't bash buf.  */\n-  maybe_print_template_context ();\n-\n   len = strlen (format) + 1;\n   if (len > buflen)\n     {"}]}