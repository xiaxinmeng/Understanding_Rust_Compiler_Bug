{"sha": "2a737389e462c4d8566cf544365195311e17d614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3MzczODllNDYyYzRkODU2NmNmNTQ0MzY1MTk1MzExZTE3ZDYxNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-02-02T16:52:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-02-02T16:52:21Z"}, "message": "re PR target/47543 (ICE: in extract_insn, at recog.c:2109 when building zlib)\n\n\n\tPR middle-end/47543\n\t* reload.c (find_reloads_address): Handle reg+d address where both\n\tcomponents are invalid by reloading the entire address.\n\nFrom-SVN: r169533", "tree": {"sha": "58fc51ec9cdef4e637114018446c740238f15bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58fc51ec9cdef4e637114018446c740238f15bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a737389e462c4d8566cf544365195311e17d614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a737389e462c4d8566cf544365195311e17d614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a737389e462c4d8566cf544365195311e17d614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a737389e462c4d8566cf544365195311e17d614/comments", "author": null, "committer": null, "parents": [{"sha": "9dac82c4dac4a4e47756c5a16067672339804cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dac82c4dac4a4e47756c5a16067672339804cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dac82c4dac4a4e47756c5a16067672339804cf0"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "67b64a3a5987ade09eb27bcb6b4dbbaa3122bb0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a737389e462c4d8566cf544365195311e17d614/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a737389e462c4d8566cf544365195311e17d614/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a737389e462c4d8566cf544365195311e17d614", "patch": "@@ -1,3 +1,9 @@\n+2011-02-02  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/47543\n+\t* reload.c (find_reloads_address): Handle reg+d address where both\n+\tcomponents are invalid by reloading the entire address.\n+\n 2011-02-02  Sebastian Pop  <sebastian.pop@amd.com>\n \t    Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "714355c3201124beaf9f662df43e36d46409a367", "filename": "gcc/reload.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a737389e462c4d8566cf544365195311e17d614/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a737389e462c4d8566cf544365195311e17d614/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=2a737389e462c4d8566cf544365195311e17d614", "patch": "@@ -5066,8 +5066,13 @@ find_reloads_address (enum machine_mode mode, rtx *memrefloc, rtx ad,\n \t   && REG_P (XEXP (ad, 0))\n \t   && REGNO (XEXP (ad, 0)) < FIRST_PSEUDO_REGISTER\n \t   && CONST_INT_P (XEXP (ad, 1))\n-\t   && regno_ok_for_base_p (REGNO (XEXP (ad, 0)), mode, PLUS,\n-\t\t\t\t   CONST_INT))\n+\t   && (regno_ok_for_base_p (REGNO (XEXP (ad, 0)), mode, PLUS,\n+\t\t\t\t    CONST_INT)\n+\t       /* Similarly, if we were to reload the base register and the\n+\t\t  mem+offset address is still invalid, then we want to reload\n+\t\t  the whole address, not just the base register.  */\n+\t       || ! maybe_memory_address_addr_space_p\n+\t\t     (mode, ad, as, &(XEXP (ad, 0)))))\n \n     {\n       /* Unshare the MEM rtx so we can safely alter it.  */\n@@ -5079,7 +5084,9 @@ find_reloads_address (enum machine_mode mode, rtx *memrefloc, rtx ad,\n \t    loc = &XEXP (*loc, 0);\n \t}\n \n-      if (double_reg_address_ok)\n+      if (double_reg_address_ok\n+\t  && regno_ok_for_base_p (REGNO (XEXP (ad, 0)), mode,\n+\t\t\t\t  PLUS, CONST_INT))\n \t{\n \t  /* Unshare the sum as well.  */\n \t  *loc = ad = copy_rtx (ad);"}]}