{"sha": "ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5ZDJhMzdmMmRiMjAzMjgyODZmNWQzZDVhMTNhNGU3NjVjNTlmNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:47:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:47:21Z"}, "message": "[AArch64] Allow shrink-wrapping of non-leaf vector PCS functions\n\nWith the function ABI stuff, we can now support shrink-wrapping of\nnon-leaf vector PCS functions.  This is particularly useful if the\nvector PCS function calls an ordinary function on an error path,\nsince we can then keep the extra saves and restores specific to\nthat path too.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_use_simple_return_insn_p):\n\tDelete.\n\t* config/aarch64/aarch64.c (aarch64_components_for_bb): Check\n\twhether the block calls a function that clobbers more registers\n\tthan the current function is allowed to.\n\t(aarch64_use_simple_return_insn_p): Delete.\n\t* config/aarch64/aarch64.md (simple_return): Remove condition.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/torture/simd-abi-9.c: New test.\n\nFrom-SVN: r276340", "tree": {"sha": "e33d3b12ab823d3002276f63b725cc03e05af85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33d3b12ab823d3002276f63b725cc03e05af85e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d1e98dfd2bfce30640d71df355bedf114229744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1e98dfd2bfce30640d71df355bedf114229744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1e98dfd2bfce30640d71df355bedf114229744"}], "stats": {"total": 101, "additions": 83, "deletions": 18}, "files": [{"sha": "7b0bcef0248d8a107f7a2be8a4943d033657411a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "patch": "@@ -1,3 +1,13 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_use_simple_return_insn_p):\n+\tDelete.\n+\t* config/aarch64/aarch64.c (aarch64_components_for_bb): Check\n+\twhether the block calls a function that clobbers more registers\n+\tthan the current function is allowed to.\n+\t(aarch64_use_simple_return_insn_p): Delete.\n+\t* config/aarch64/aarch64.md (simple_return): Remove condition.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* function-abi.h (function_abi_aggregator): New class."}, {"sha": "c9a342304b602a17877a5a4248463864067c89d3", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "patch": "@@ -531,7 +531,6 @@ bool aarch64_split_dimode_const_store (rtx, rtx);\n bool aarch64_symbolic_address_p (rtx);\n bool aarch64_uimm12_shift (HOST_WIDE_INT);\n bool aarch64_use_return_insn_p (void);\n-bool aarch64_use_simple_return_insn_p (void);\n const char *aarch64_output_casesi (rtx *);\n \n enum aarch64_symbol_type aarch64_classify_symbol (rtx, HOST_WIDE_INT);"}, {"sha": "3da92a2d41aa573d747bfa5051604039d9159124", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "patch": "@@ -5976,13 +5976,30 @@ aarch64_components_for_bb (basic_block bb)\n   sbitmap components = sbitmap_alloc (LAST_SAVED_REGNUM + 1);\n   bitmap_clear (components);\n \n+  /* Clobbered registers don't generate values in any meaningful sense,\n+     since nothing after the clobber can rely on their value.  And we can't\n+     say that partially-clobbered registers are unconditionally killed,\n+     because whether they're killed or not depends on the mode of the\n+     value they're holding.  Thus partially call-clobbered registers\n+     appear in neither the kill set nor the gen set.\n+\n+     Check manually for any calls that clobber more of a register than the\n+     current function can.  */\n+  function_abi_aggregator callee_abis;\n+  rtx_insn *insn;\n+  FOR_BB_INSNS (bb, insn)\n+    if (CALL_P (insn))\n+      callee_abis.note_callee_abi (insn_callee_abi (insn));\n+  HARD_REG_SET extra_caller_saves = callee_abis.caller_save_regs (*crtl->abi);\n+\n   /* GPRs are used in a bb if they are in the IN, GEN, or KILL sets.  */\n   for (unsigned regno = 0; regno <= LAST_SAVED_REGNUM; regno++)\n     if ((!call_used_or_fixed_reg_p (regno)\n \t|| (simd_function && FP_SIMD_SAVED_REGNUM_P (regno)))\n-       && (bitmap_bit_p (in, regno)\n-\t   || bitmap_bit_p (gen, regno)\n-\t   || bitmap_bit_p (kill, regno)))\n+\t&& (TEST_HARD_REG_BIT (extra_caller_saves, regno)\n+\t    || bitmap_bit_p (in, regno)\n+\t    || bitmap_bit_p (gen, regno)\n+\t    || bitmap_bit_p (kill, regno)))\n       {\n \tunsigned regno2, offset, offset2;\n \tbitmap_set_bit (components, regno);\n@@ -6648,19 +6665,6 @@ aarch64_use_return_insn_p (void)\n   return known_eq (cfun->machine->frame.frame_size, 0);\n }\n \n-/* Return false for non-leaf SIMD functions in order to avoid\n-   shrink-wrapping them.  Doing this will lose the necessary\n-   save/restore of FP registers.  */\n-\n-bool\n-aarch64_use_simple_return_insn_p (void)\n-{\n-  if (aarch64_simd_decl_p (cfun->decl) && !crtl->is_leaf)\n-    return false;\n-\n-  return true;\n-}\n-\n /* Generate the epilogue instructions for returning from a function.\n    This is almost exactly the reverse of the prolog sequence, except\n    that we need to insert barriers to avoid scheduling loads that read"}, {"sha": "fcba5ace8673667f8dadb29ff14c60957fe0a75f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "patch": "@@ -799,7 +799,7 @@\n \n (define_insn \"simple_return\"\n   [(simple_return)]\n-  \"aarch64_use_simple_return_insn_p ()\"\n+  \"\"\n   \"ret\"\n   [(set_attr \"type\" \"branch\")]\n )"}, {"sha": "ce3a967935631b3109fd9d4db1a3a3ba6f4b03d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "patch": "@@ -1,3 +1,7 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/torture/simd-abi-9.c: New test.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/torture/simd-abi-8.c: New test."}, {"sha": "aaa0316d1d2836eb0cac5dc6029ff42164c87f5d", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-9.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9d2a37f2db20328286f5d3d5a13a4e765c59f7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-9.c?ref=ce9d2a37f2db20328286f5d3d5a13a4e765c59f7", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fshrink-wrap -ffat-lto-objects\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+int callee (void);\n+\n+/*\n+** caller:\n+**\tldr\t(w[0-9]+), \\[x0\\]\n+**\tcbn?z\t\\1, [^\\n]*\n+**\t...\n+**\tret\n+*/\n+int __attribute__ ((aarch64_vector_pcs))\n+caller (int *x)\n+{\n+  if (*x)\n+    return callee () + 1;\n+  else\n+    return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq22, q23} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq22, q23} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tstp\\tq[0-7],} } } */\n+/* { dg-final { scan-assembler-not {\\tldp\\tq[0-7],} } } */\n+/* { dg-final { scan-assembler-not {\\tstp\\tq2[4-9],} } } */\n+/* { dg-final { scan-assembler-not {\\tldp\\tq2[4-9],} } } */\n+/* { dg-final { scan-assembler-not {\\tstp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\tldp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\tstr\\tq} } } */\n+/* { dg-final { scan-assembler-not {\\tldr\\tq} } } */"}]}