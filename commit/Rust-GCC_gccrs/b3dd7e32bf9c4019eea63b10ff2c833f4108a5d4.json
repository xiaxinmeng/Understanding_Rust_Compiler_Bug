{"sha": "b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkZDdlMzJiZjljNDAxOWVlYTYzYjEwZmYyYzgzM2Y0MTA4YTVkNA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-05-09T19:06:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-05-09T19:06:56Z"}, "message": "vxxscale.h, [...]: New files.\n\n\t* config/arm/vxxscale.h, config/arm/vxxscale-coff.h: New files.\n\t* config/arm/vxxscale-elf.h, config/arm/t-vxxscale-elf: Likewise.\n\t* config.gcc (xscale-coff-vxworks, xscale-wrs-vxworks): New new cases.\n\t* fixinc/fixinc.copy: New file.\n\t* fixinc/mkfixinc.sh (*-vxworks*): New case, using above.\n\nFrom-SVN: r66639", "tree": {"sha": "b2cbc5e6e1ff4d65172ce04c1476598c0af4fce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2cbc5e6e1ff4d65172ce04c1476598c0af4fce0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/comments", "author": null, "committer": null, "parents": [{"sha": "f8a30250165a6dc9ac3e323cdf0859f13b4b69d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a30250165a6dc9ac3e323cdf0859f13b4b69d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a30250165a6dc9ac3e323cdf0859f13b4b69d8"}], "stats": {"total": 223, "additions": 223, "deletions": 0}, "files": [{"sha": "52c64859dbd4d78be0501ae54048405a26f75255", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -1,3 +1,11 @@\n+2003-05-09  Olivier Hainque <hainque@act-europe.fr>\n+\n+\t* config/arm/vxxscale.h, config/arm/vxxscale-coff.h: New files.\n+\t* config/arm/vxxscale-elf.h, config/arm/t-vxxscale-elf: Likewise.\n+\t* config.gcc (xscale-coff-vxworks, xscale-wrs-vxworks): New new cases.\n+\t* fixinc/fixinc.copy: New file.\n+\t* fixinc/mkfixinc.sh (*-vxworks*): New case, using above.\n+\n 2003-05-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* reload1.c (reload_cse_move2add): Don't turn an implicit"}, {"sha": "2b3b43492f74683a723ab0b97f4da2d71ebc3cff", "filename": "gcc/config.gcc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -2622,6 +2622,19 @@ xscale-*-coff)\n \tmd_file=arm/arm.md\n \textra_modes=arm/arm-modes.def\n \t;;\n+xscale-coff-vxworks)\n+\ttm_file=\"arm/semi.h arm/aout.h arm/coff.h arm/arm.h\"\n+\ttm_file=\"${tm_file} arm/vxxscale.h arm/vxxscale-coff.h\"\n+\ttmake_file=arm/t-xscale-coff\n+\tthread_file='vxworks'\n+\tuse_collect2=no\n+\t;;\n+xscale-wrs-vxworks)\n+\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h\"\n+\ttm_file=\"${tm_file} arm/arm.h arm/vxxscale.h arm/vxxscale-elf.h\"\n+\ttmake_file=arm/t-vxxscale-elf\n+\tthread_file='vxworks'\t\n+\t;;\n xstormy16-*-elf)\n \t# For historical reasons, the target files omit the 'x'.\n \ttm_file=\"dbxelf.h elfos.h svr4.h stormy16/stormy16.h\""}, {"sha": "c8ab34c62430cd8832776c7a04a35f45655959af", "filename": "gcc/config/arm/t-vxxscale-elf", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Ft-vxxscale-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Ft-vxxscale-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-vxxscale-elf?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -0,0 +1,56 @@\n+LIB1ASMSRC = arm/lib1funcs.asm\n+LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX\n+\n+# We want fine grained libraries, so use the new code to build the\n+# floating point emulation libraries.\n+FPBIT = fp-bit.c\n+DPBIT = dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifndef __ARMEB__' >> fp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n+\techo '#endif' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#ifndef __ARMEB__' > dp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#endif' >> dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+MULTILIB_OPTIONS     = mlittle-endian/mbig-endian\n+MULTILIB_DIRNAMES    = le be\n+MULTILIB_EXCEPTIONS  = \n+MULTILIB_MATCHES     = mbig-endian=mbe mlittle-endian=mle\n+\n+# Note XScale does not support 26 bit APCS.\n+# Note XScale does not support hard FP\n+\n+MULTILIB_OPTIONS    += mno-thumb-interwork/mthumb-interwork\n+MULTILIB_DIRNAMES   += normal interwork\n+\n+MULTILIB_OPTIONS    += marm/mthumb\n+MULTILIB_DIRNAMES   += arm thumb\n+MULTILIB_EXCEPTIONS += *mhard-float/*mthumb*\n+\n+MULTILIB_REDUNDANT_DIRS = interwork/thumb=thumb\n+\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n+\n+LIBGCC               = stmp-multilib\n+INSTALL_LIBGCC       = install-multilib\n+\n+# Currently there is a bug somewhere in GCC's alias analysis\n+# or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n+# Disabling function inlining is a workaround for this problem.\n+TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm"}, {"sha": "f66797f4446ae4a93a8b6eb251872979b01019a9", "filename": "gcc/config/arm/vxxscale-coff.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Fvxxscale-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Fvxxscale-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxxscale-coff.h?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -0,0 +1,27 @@\n+/* Definitions of target machine for GNU compiler,\n+   targetting the XSCALE/VxWorks/COFF run time environment. \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   \n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION\tfputs (\" (XScale/COFF VxWorks)\", stderr);\n+\n+#undef  SUBTARGET_EXTRA_ASM_SPEC\n+#define SUBTARGET_EXTRA_ASM_SPEC \"%{!mcpu=*:-mcpu=xscale}\""}, {"sha": "ff657087d4f02c82e5c5abf2a6b92e2b0507a136", "filename": "gcc/config/arm/vxxscale-elf.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Fvxxscale-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Fvxxscale-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxxscale-elf.h?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -0,0 +1,33 @@\n+/* Definitions of target machine for GNU compiler,\n+   targetting the XSCALE/VxWorks/ELF run time environment. \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION\tfputs (\" (XScale/ELF VxWorks)\", stderr);\n+\n+#define SUBTARGET_EXTRA_ASM_SPEC \"%{!mcpu=*:-mxscale} %{!mhard-float:-mno-fpu}\"\n+\n+#ifndef MULTILIB_DEFAULTS\n+#define MULTILIB_DEFAULTS \\\n+  { \"mlittle-endian\", \"mno-thumb-interwork\", \"marm\", \"msoft-float\" }\n+#endif\n+\n+#undef FLOAT_WORDS_BIG_ENDIAN \n+#define FLOAT_WORDS_BIG_ENDIAN (TARGET_BIG_END != 0)"}, {"sha": "16174a16b886f3117e478a3670539a283a9cf674", "filename": "gcc/config/arm/vxxscale.h", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Fvxxscale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Fconfig%2Farm%2Fvxxscale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxxscale.h?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -0,0 +1,80 @@\n+/* Definitions of target machine for GNU compiler,\n+   targetting the XSCALE/VxWorks run time environments. \n+   Common definitions for both the COFF (VxWorks5.4/T2.1)\n+   and ELF (VxWorks5.5/T2.2) targets.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   \n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define SUBTARGET_CPU_DEFAULT TARGET_CPU_xscale\n+\n+#undef  CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-DCPU=XSCALE -D__vxworks -Acpu=xscale -Amachine=xscale\"\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (ARM_FLAG_SOFT_FLOAT | ARM_FLAG_APCS_32)\n+\n+#undef  ASM_FILE_START\n+#define ASM_FILE_START(STREAM) \t\t\t\t\t\t\\\n+  do \t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (STREAM, \"%s Generated by gcc %s for Xscale/VxWorks\\n\",\t\\\n+\t       ASM_COMMENT_START, version_string);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Set up a trampoline, without forgetting to flush the Icache. */\n+#undef  INITIALIZE_TRAMPOLINE\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)                      \\\n+{                                                                      \\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant ((TRAMP), 8)),   \\\n+                 (CXT));                                               \\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant ((TRAMP), 12)),  \\\n+                 (FNADDR));                                            \\\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),      \\\n+                    0, VOIDmode, 2, TRAMP, Pmode,                      \\\n+                    plus_constant (TRAMP, TRAMPOLINE_SIZE), Pmode);    \\\n+}\n+\n+/* Clear the instruction cache from `BEG' to `END', resorting to the\n+   appropriate VxWorks service.  */\n+#define CLEAR_INSN_CACHE(BEG, END)                                     \\\n+{                                                                      \\\n+  extern int cacheTextUpdate (void *, size_t);                         \\\n+  cacheTextUpdate ((void *) (BEG), (size_t) ((END) - (BEG)));            \\\n+}\n+\n+/* VxWorks does all the library stuff itself.  */\n+#undef  LIB_SPEC\n+#define LIB_SPEC \t\"\"\n+\n+/* VxWorks uses object files, not loadable images.  make linker just\n+   combine objects. */\n+#undef  LINK_SPEC\n+#define LINK_SPEC \t\"-r\"\n+\n+/* VxWorks provides the functionality of crt0.o and friends itself.  */\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \t\"\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \t\"\"\n+\n+#define EH_FRAME_IN_DATA_SECTION\n+/* ??? To be investigated, in order to avoid link time errors against\n+   __EH_FRAME_BEGIN__, only defined through the use of crtstuff.  */"}, {"sha": "8d70b28eab22542c2c7b427051d6b1bb2adb26d9", "filename": "gcc/fixinc/fixinc.copy", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Ffixinc%2Ffixinc.copy", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Ffixinc%2Ffixinc.copy", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.copy?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+cp -R $2/* $1"}, {"sha": "e8d176fd5ee5d7351c50cb4580d0d84393842e71", "filename": "gcc/fixinc/mkfixinc.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Ffixinc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4/gcc%2Ffixinc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fmkfixinc.sh?ref=b3dd7e32bf9c4019eea63b10ff2c833f4108a5d4", "patch": "@@ -60,6 +60,10 @@ case $machine in\n         fixincludes=fixinc.ptx\n         ;;\n \n+    *-vxworks*)\n+        fixincludes=fixinc.copy\n+        ;;\n+\n     alpha*-dec-*vms* | \\\n     arm-semi-aout | \\\n     armel-semi-aout | \\"}]}