{"sha": "6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "node_id": "C_kwDOANBUbNoAKDY3MTY4MjJjNTQxYmZkNWU0YmI5MWEzOWMwY2IyYzg1YjcwZjgzZGU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T15:52:13Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T15:52:13Z"}, "message": "libstdc++: Implement ranges::contains/contains_subrange from P2302R4\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algo.h (__contains_fn, contains): Define.\n\t(__contains_subrange_fn, contains_subrange): Define.\n\t* testsuite/25_algorithms/contains/1.cc: New test.\n\t* testsuite/25_algorithms/contains_subrange/1.cc: New test.", "tree": {"sha": "335e7549a57728826764d25efee54cf23cf11992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/335e7549a57728826764d25efee54cf23cf11992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6716822c541bfd5e4bb91a39c0cb2c85b70f83de/comments", "author": null, "committer": null, "parents": [{"sha": "330d665ce6dcc63ed0bd78d807e69bbfc55255b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330d665ce6dcc63ed0bd78d807e69bbfc55255b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330d665ce6dcc63ed0bd78d807e69bbfc55255b6"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "b2c99028916630314fd635de0bfff6d10309e326", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6716822c541bfd5e4bb91a39c0cb2c85b70f83de/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6716822c541bfd5e4bb91a39c0cb2c85b70f83de/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "patch": "@@ -3464,6 +3464,60 @@ namespace ranges\n \n   inline constexpr __prev_permutation_fn prev_permutation{};\n \n+#if __cplusplus > 202002L\n+  struct __contains_fn\n+  {\n+    template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n+\t    typename _Tp, typename _Proj = identity>\n+      requires indirect_binary_predicate<ranges::equal_to,\n+\t\t\t\t\t projected<_Iter, _Proj>, const _Tp*>\n+      constexpr bool\n+      operator()(_Iter __first, _Sent __last, const _Tp& __value, _Proj __proj = {}) const\n+      { return ranges::find(std::move(__first), __last, __value, std::move(__proj)) != __last; }\n+\n+    template<input_range _Range, typename _Tp, typename _Proj = identity>\n+      requires indirect_binary_predicate<ranges::equal_to,\n+\t\t\t\t\t projected<iterator_t<_Range>, _Proj>, const _Tp*>\n+      constexpr bool\n+      operator()(_Range&& __r, const _Tp& __value, _Proj __proj = {}) const\n+      { return (*this)(ranges::begin(__r), ranges::end(__r), __value, std::move(__proj)); }\n+  };\n+\n+  inline constexpr __contains_fn contains{};\n+\n+  struct __contains_subrange_fn\n+  {\n+    template<forward_iterator _Iter1, sentinel_for<_Iter1> _Sent1,\n+\t     forward_iterator _Iter2, sentinel_for<_Iter2> _Sent2,\n+\t     typename _Pred = ranges::equal_to,\n+\t     typename Proj1 = identity, typename Proj2 = identity>\n+      requires indirectly_comparable<_Iter1, _Iter2, _Pred, Proj1, Proj2>\n+      constexpr bool\n+      operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n+\t\t _Pred __pred = {}, Proj1 __proj1 = {}, Proj2 __proj2 = {}) const\n+      {\n+\treturn __first2 == __last2\n+\t  || !ranges::search(__first1, __last1, __first2, __last2,\n+\t\t\t     std::move(__pred), std::move(__proj1), std::move(__proj2)).empty();\n+      }\n+\n+    template<forward_range _Range1, forward_range _Range2,\n+\t     typename _Pred = ranges::equal_to,\n+\t     typename _Proj1 = identity, typename _Proj2 = identity>\n+      requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n+\t\t\t\t     _Pred, _Proj1, _Proj2>\n+      constexpr bool\n+      operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      {\n+\treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__pred), std::move(__proj1), std::move(__proj2));\n+      }\n+  };\n+\n+  inline constexpr __contains_subrange_fn contains_subrange{};\n+#endif // C++23\n } // namespace ranges\n \n #define __cpp_lib_shift 201806L"}, {"sha": "146ab593b7057276c9a7ce95c334f85bde2230be", "filename": "libstdc++-v3/testsuite/25_algorithms/contains/1.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6716822c541bfd5e4bb91a39c0cb2c85b70f83de/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcontains%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6716822c541bfd5e4bb91a39c0cb2c85b70f83de/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcontains%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcontains%2F1.cc?ref=6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+namespace ranges = std::ranges;\n+\n+void\n+test01()\n+{\n+  int x[] = {1,2,3};\n+  using to_input = __gnu_test::test_input_range<int>;\n+  VERIFY( ranges::contains(to_input(x), 1) );\n+  VERIFY( ranges::contains(to_input(x), 2) );\n+  VERIFY( ranges::contains(to_input(x), 3) );\n+  VERIFY( !ranges::contains(to_input(x), 4) );\n+  VERIFY( !ranges::contains(x, x+2, 3) );\n+  auto neg = [](int n) { return -n; };\n+  VERIFY( ranges::contains(to_input(x), -1, neg) );\n+  VERIFY( ranges::contains(to_input(x), -2, neg) );\n+  VERIFY( ranges::contains(to_input(x), -3, neg) );\n+  VERIFY( !ranges::contains(to_input(x), -4, neg) );\n+\n+  VERIFY( !ranges::contains(x, x+2, -3, neg) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "6c3c99c0fd631bb5d1dad577ebd14feeb3324536", "filename": "libstdc++-v3/testsuite/25_algorithms/contains_subrange/1.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6716822c541bfd5e4bb91a39c0cb2c85b70f83de/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcontains_subrange%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6716822c541bfd5e4bb91a39c0cb2c85b70f83de/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcontains_subrange%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcontains_subrange%2F1.cc?ref=6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+namespace ranges = std::ranges;\n+\n+void\n+test01()\n+{\n+  int x[] = {1,2,3,4,5};\n+  int y[] = {2,3,4};\n+  int z[] = {4,5,6};\n+  __gnu_test::test_forward_range<int> rx(x);\n+  __gnu_test::test_forward_range<int> ry(y);\n+  __gnu_test::test_forward_range<int> rz(z);\n+  VERIFY( ranges::contains_subrange(rx, ry) );\n+  VERIFY( !ranges::contains_subrange(rx, rz) );\n+  VERIFY( ranges::contains_subrange(rx, ry, ranges::less{}) );\n+  VERIFY( ranges::contains_subrange(rx, rz, ranges::less{}) );\n+  auto plus3 = [](int n) { return n+3; };\n+  VERIFY( !ranges::contains_subrange(rx, ry, {}, plus3) );\n+  VERIFY( ranges::contains_subrange(rx, rz, {}, plus3) );\n+  VERIFY( ranges::contains_subrange(rx, ry, {}, plus3, plus3) );\n+  VERIFY( !ranges::contains_subrange(rx, rz, {}, plus3, plus3) );\n+\n+  VERIFY( ranges::contains_subrange(x, x+2, y, y+1) );\n+  VERIFY( !ranges::contains_subrange(x, x+2, y, y+2) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}