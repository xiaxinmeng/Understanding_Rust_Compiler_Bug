{"sha": "6593260b3a083812a908cd7fd6e35d6f2001efb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5MzI2MGIzYTA4MzgxMmE5MDhjZDdmZDZlMzVkNmYyMDAxZWZiOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-28T12:49:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-28T12:49:08Z"}, "message": "tree-data-ref.h (ddr_is_anti_dependent, [...]): Remove.\n\n2014-01-28  Richard Biener  <rguenther@suse.de>\n\n\t* tree-data-ref.h (ddr_is_anti_dependent, ddrs_have_anti_deps):\n\tRemove.\n\nFrom-SVN: r207181", "tree": {"sha": "0cfa25a6add0dac8d86baf88e465122f5f41860a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cfa25a6add0dac8d86baf88e465122f5f41860a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6593260b3a083812a908cd7fd6e35d6f2001efb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6593260b3a083812a908cd7fd6e35d6f2001efb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6593260b3a083812a908cd7fd6e35d6f2001efb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6593260b3a083812a908cd7fd6e35d6f2001efb9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "156b60e0b9980ecbfbcdb187ab44937b731dcecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156b60e0b9980ecbfbcdb187ab44937b731dcecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/156b60e0b9980ecbfbcdb187ab44937b731dcecb"}], "stats": {"total": 31, "additions": 5, "deletions": 26}, "files": [{"sha": "dca387d3ea8ea0aa9b47784ad6d44b8fd933c089", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6593260b3a083812a908cd7fd6e35d6f2001efb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6593260b3a083812a908cd7fd6e35d6f2001efb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6593260b3a083812a908cd7fd6e35d6f2001efb9", "patch": "@@ -1,3 +1,8 @@\n+2014-01-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-data-ref.h (ddr_is_anti_dependent, ddrs_have_anti_deps):\n+\tRemove.\n+\n 2014-01-28  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/45364"}, {"sha": "9d819e4a0ffb0b9a6128d20c1c856f042614fe33", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6593260b3a083812a908cd7fd6e35d6f2001efb9/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6593260b3a083812a908cd7fd6e35d6f2001efb9/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=6593260b3a083812a908cd7fd6e35d6f2001efb9", "patch": "@@ -457,32 +457,6 @@ same_access_functions (const struct data_dependence_relation *ddr)\n   return true;\n }\n \n-/* Return true when DDR is an anti-dependence relation.  */\n-\n-static inline bool\n-ddr_is_anti_dependent (ddr_p ddr)\n-{\n-  return (DDR_ARE_DEPENDENT (ddr) == NULL_TREE\n-\t  && DR_IS_READ (DDR_A (ddr))\n-\t  && DR_IS_WRITE (DDR_B (ddr))\n-\t  && !same_access_functions (ddr));\n-}\n-\n-/* Return true when DEPENDENCE_RELATIONS contains an anti-dependence.  */\n-\n-static inline bool\n-ddrs_have_anti_deps (vec<ddr_p> dependence_relations)\n-{\n-  unsigned i;\n-  ddr_p ddr;\n-\n-  for (i = 0; dependence_relations.iterate (i, &ddr); i++)\n-    if (ddr_is_anti_dependent (ddr))\n-      return true;\n-\n-  return false;\n-}\n-\n /* Returns true when all the dependences are computable.  */\n \n inline bool"}]}