{"sha": "0f54cc9c63842ddfa921530cb499743cafc9b177", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY1NGNjOWM2Mzg0MmRkZmE5MjE1MzBjYjQ5OTc0M2NhZmM5YjE3Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-03T02:20:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-28T13:33:11Z"}, "message": "tree-iterator: C++11 range-for and tree_stmt_iterator\n\nLike my recent patch to add ovl_range and lkp_range in the C++ front end,\nthis patch adds the tsi_range adaptor for using C++11 range-based 'for' with\na STATEMENT_LIST, e.g.\n\n  for (tree stmt : tsi_range (stmt_list)) { ... }\n\nThis also involves adding some operators to tree_stmt_iterator that are\nneeded for range-for iterators, and should also be useful in code that uses\nthe iterators directly.\n\nThe patch updates the suitable loops in the C++ front end, but does not\ntouch any loops elsewhere in the compiler.\n\ngcc/ChangeLog:\n\n\t* tree-iterator.h (struct tree_stmt_iterator): Add operator++,\n\toperator--, operator*, operator==, and operator!=.\n\t(class tsi_range): New.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (build_data_member_initialization): Use tsi_range.\n\t(build_constexpr_constructor_member_initializers): Likewise.\n\t(constexpr_fn_retval, cxx_eval_statement_list): Likewise.\n\t(potential_constant_expression_1): Likewise.\n\t* coroutines.cc (await_statement_expander): Likewise.\n\t(await_statement_walker): Likewise.\n\t* module.cc (trees_out::core_vals): Likewise.\n\t* pt.c (tsubst_expr): Likewise.\n\t* semantics.c (set_cleanup_locs): Likewise.", "tree": {"sha": "28795686ae6679df3a4961d97f4d71e8d87d3cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28795686ae6679df3a4961d97f4d71e8d87d3cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f54cc9c63842ddfa921530cb499743cafc9b177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f54cc9c63842ddfa921530cb499743cafc9b177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f54cc9c63842ddfa921530cb499743cafc9b177", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f54cc9c63842ddfa921530cb499743cafc9b177/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a07f5a5d8065e7f11133dd1f4ad3510ab2195b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a07f5a5d8065e7f11133dd1f4ad3510ab2195b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a07f5a5d8065e7f11133dd1f4ad3510ab2195b"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "297f2072de80dd50c7b1dd3dd2389c4992808d05", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0f54cc9c63842ddfa921530cb499743cafc9b177", "patch": "@@ -330,12 +330,9 @@ build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n     return false;\n   if (TREE_CODE (t) == STATEMENT_LIST)\n     {\n-      tree_stmt_iterator i;\n-      for (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))\n-\t{\n-\t  if (! build_data_member_initialization (tsi_stmt (i), vec))\n-\t    return false;\n-\t}\n+      for (tree stmt : tsi_range (t))\n+\tif (! build_data_member_initialization (stmt, vec))\n+\t  return false;\n       return true;\n     }\n   if (TREE_CODE (t) == CLEANUP_STMT)\n@@ -577,10 +574,9 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n \tbreak;\n \n       case STATEMENT_LIST:\n-\tfor (tree_stmt_iterator i = tsi_start (body);\n-\t     !tsi_end_p (i); tsi_next (&i))\n+\tfor (tree stmt : tsi_range (body))\n \t  {\n-\t    body = tsi_stmt (i);\n+\t    body = stmt;\n \t    if (TREE_CODE (body) == BIND_EXPR)\n \t      break;\n \t  }\n@@ -617,10 +613,9 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n     }\n   else if (TREE_CODE (body) == STATEMENT_LIST)\n     {\n-      tree_stmt_iterator i;\n-      for (i = tsi_start (body); !tsi_end_p (i); tsi_next (&i))\n+      for (tree stmt : tsi_range (body))\n \t{\n-\t  ok = build_data_member_initialization (tsi_stmt (i), &vec);\n+\t  ok = build_data_member_initialization (stmt, &vec);\n \t  if (!ok)\n \t    break;\n \t}\n@@ -675,11 +670,10 @@ constexpr_fn_retval (tree body)\n     {\n     case STATEMENT_LIST:\n       {\n-\ttree_stmt_iterator i;\n \ttree expr = NULL_TREE;\n-\tfor (i = tsi_start (body); !tsi_end_p (i); tsi_next (&i))\n+\tfor (tree stmt : tsi_range (body))\n \t  {\n-\t    tree s = constexpr_fn_retval (tsi_stmt (i));\n+\t    tree s = constexpr_fn_retval (stmt);\n \t    if (s == error_mark_node)\n \t      return error_mark_node;\n \t    else if (s == NULL_TREE)\n@@ -5772,7 +5766,6 @@ cxx_eval_statement_list (const constexpr_ctx *ctx, tree t,\n \t\t\t bool *non_constant_p, bool *overflow_p,\n \t\t\t tree *jump_target)\n {\n-  tree_stmt_iterator i;\n   tree local_target;\n   /* In a statement-expression we want to return the last value.\n      For empty statement expression return void_node.  */\n@@ -5782,9 +5775,8 @@ cxx_eval_statement_list (const constexpr_ctx *ctx, tree t,\n       local_target = NULL_TREE;\n       jump_target = &local_target;\n     }\n-  for (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))\n+  for (tree stmt : tsi_range (t))\n     {\n-      tree stmt = tsi_stmt (i);\n       /* We've found a continue, so skip everything until we reach\n \t the label its jumping to.  */\n       if (continues (jump_target))\n@@ -8282,16 +8274,10 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       }\n \n     case STATEMENT_LIST:\n-      {\n-\ttree_stmt_iterator i;\n-\tfor (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))\n-\t  {\n-\t    if (!RECUR (tsi_stmt (i), any))\n-\t      return false;\n-\t  }\n-\treturn true;\n-      }\n-      break;\n+      for (tree stmt : tsi_range (t))\n+\tif (!RECUR (stmt, any))\n+\t  return false;\n+      return true;\n \n     case MODIFY_EXPR:\n       if (cxx_dialect < cxx14)"}, {"sha": "1bf1931e7be126584de024a7940dc5b2b73d16e8", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=0f54cc9c63842ddfa921530cb499743cafc9b177", "patch": "@@ -1764,10 +1764,9 @@ await_statement_expander (tree *stmt, int *do_subtree, void *d)\n     return NULL_TREE; /* Just process the sub-trees.  */\n   else if (TREE_CODE (*stmt) == STATEMENT_LIST)\n     {\n-      tree_stmt_iterator i;\n-      for (i = tsi_start (*stmt); !tsi_end_p (i); tsi_next (&i))\n+      for (tree &s : tsi_range (*stmt))\n \t{\n-\t  res = cp_walk_tree (tsi_stmt_ptr (i), await_statement_expander,\n+\t  res = cp_walk_tree (&s, await_statement_expander,\n \t\t\t      d, NULL);\n \t  if (res)\n \t    return res;\n@@ -3509,10 +3508,9 @@ await_statement_walker (tree *stmt, int *do_subtree, void *d)\n     }\n   else if (TREE_CODE (*stmt) == STATEMENT_LIST)\n     {\n-      tree_stmt_iterator i;\n-      for (i = tsi_start (*stmt); !tsi_end_p (i); tsi_next (&i))\n+      for (tree &s : tsi_range (*stmt))\n \t{\n-\t  res = cp_walk_tree (tsi_stmt_ptr (i), await_statement_walker,\n+\t  res = cp_walk_tree (&s, await_statement_walker,\n \t\t\t      d, NULL);\n \t  if (res)\n \t    return res;"}, {"sha": "f0fb014470688b0fa97d27e0ecbc5de86be6a2f7", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=0f54cc9c63842ddfa921530cb499743cafc9b177", "patch": "@@ -6094,9 +6094,8 @@ trees_out::core_vals (tree t)\n       break;\n \n     case STATEMENT_LIST:\n-      for (tree_stmt_iterator iter = tsi_start (t);\n-\t   !tsi_end_p (iter); tsi_next (&iter))\n-\tif (tree stmt = tsi_stmt (iter))\n+      for (tree stmt : tsi_range (t))\n+\tif (stmt)\n \t  WT (stmt);\n       WT (NULL_TREE);\n       break;"}, {"sha": "b476ca8948de8f0378f4fc9f15ade3614fbb3923", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0f54cc9c63842ddfa921530cb499743cafc9b177", "patch": "@@ -18152,9 +18152,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     {\n     case STATEMENT_LIST:\n       {\n-\ttree_stmt_iterator i;\n-\tfor (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))\n-\t  RECUR (tsi_stmt (i));\n+\tfor (tree stmt : tsi_range (t))\n+\t  RECUR (stmt);\n \tbreak;\n       }\n "}, {"sha": "e40462d192a071033169f66fb64515dd87f9c64b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0f54cc9c63842ddfa921530cb499743cafc9b177", "patch": "@@ -613,9 +613,8 @@ set_cleanup_locs (tree stmts, location_t loc)\n       set_cleanup_locs (CLEANUP_BODY (stmts), loc);\n     }\n   else if (TREE_CODE (stmts) == STATEMENT_LIST)\n-    for (tree_stmt_iterator i = tsi_start (stmts);\n-\t !tsi_end_p (i); tsi_next (&i))\n-      set_cleanup_locs (tsi_stmt (i), loc);\n+    for (tree stmt : tsi_range (stmts))\n+      set_cleanup_locs (stmt, loc);\n }\n \n /* Finish a scope.  */"}, {"sha": "a72d0d37f1cc0ad28cf2c4b932113634ca6cb144", "filename": "gcc/tree-iterator.h", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Ftree-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f54cc9c63842ddfa921530cb499743cafc9b177/gcc%2Ftree-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.h?ref=0f54cc9c63842ddfa921530cb499743cafc9b177", "patch": "@@ -1,4 +1,4 @@\n-/* Iterator routines for manipulating GENERIC tree statement list.\n+/* Iterator routines for manipulating GENERIC tree statement list. -*- C++ -*-\n    Copyright (C) 2003-2021 Free Software Foundation, Inc.\n    Contributed by Andrew MacLeod  <amacleod@redhat.com>\n \n@@ -32,6 +32,21 @@ along with GCC; see the file COPYING3.  If not see\n struct tree_stmt_iterator {\n   struct tree_statement_list_node *ptr;\n   tree container;\n+\n+  /* No need for user-defined constructors, the implicit definitions (or\n+     aggregate initialization) are fine.  */\n+\n+  bool operator== (tree_stmt_iterator b) const\n+    { return b.ptr == ptr && b.container == container; }\n+  bool operator!= (tree_stmt_iterator b) const { return !(*this == b); }\n+  tree_stmt_iterator &operator++ () { ptr = ptr->next; return *this; }\n+  tree_stmt_iterator &operator-- () { ptr = ptr->prev; return *this; }\n+  tree_stmt_iterator operator++ (int)\n+    { tree_stmt_iterator x = *this; ++*this; return x; }\n+  tree_stmt_iterator operator-- (int)\n+    { tree_stmt_iterator x = *this; --*this; return x; }\n+  tree &operator* () { return ptr->stmt; }\n+  tree operator* () const { return ptr->stmt; }\n };\n \n static inline tree_stmt_iterator\n@@ -71,27 +86,38 @@ tsi_one_before_end_p (tree_stmt_iterator i)\n static inline void\n tsi_next (tree_stmt_iterator *i)\n {\n-  i->ptr = i->ptr->next;\n+  ++(*i);\n }\n \n static inline void\n tsi_prev (tree_stmt_iterator *i)\n {\n-  i->ptr = i->ptr->prev;\n+  --(*i);\n }\n \n static inline tree *\n tsi_stmt_ptr (tree_stmt_iterator i)\n {\n-  return &i.ptr->stmt;\n+  return &(*i);\n }\n \n static inline tree\n tsi_stmt (tree_stmt_iterator i)\n {\n-  return i.ptr->stmt;\n+  return *i;\n }\n \n+/* Make tree_stmt_iterator work as a C++ range, e.g.\n+   for (tree stmt : tsi_range (stmt_list)) { ... }  */\n+class tsi_range\n+{\n+  tree t;\n+ public:\n+  tsi_range (tree t): t(t) { }\n+  tree_stmt_iterator begin() const { return tsi_start (t); }\n+  tree_stmt_iterator end() const { return { nullptr, t }; }\n+};\n+\n enum tsi_iterator_update\n {\n   TSI_NEW_STMT,\t\t/* Only valid when single statement is added, move"}]}