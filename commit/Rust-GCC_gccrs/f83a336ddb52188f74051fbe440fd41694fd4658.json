{"sha": "f83a336ddb52188f74051fbe440fd41694fd4658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzYTMzNmRkYjUyMTg4Zjc0MDUxZmJlNDQwZmQ0MTY5NGZkNDY1OA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-08-12T12:24:05Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-08-12T12:24:05Z"}, "message": "predicates.md (setmem_operand): New predicate.\n\n2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/predicates.md (setmem_operand): New predicate.\n\t(shift_count_operand): Accept ANDs with special constants as\n\toperand.\n\t* config/s390/s390.c (print_shift_count_operand): Skip ANDs\n\twith special constants.\n\t* config/s390/s390.md (\"setmem_long\", \"*setmem_long\"): Replaced\n\tshift_count_operand with setmem_operand.\n\nFrom-SVN: r103028", "tree": {"sha": "dc94b3510d90c20e24e15cd81046fff83eabe3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc94b3510d90c20e24e15cd81046fff83eabe3ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f83a336ddb52188f74051fbe440fd41694fd4658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83a336ddb52188f74051fbe440fd41694fd4658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83a336ddb52188f74051fbe440fd41694fd4658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83a336ddb52188f74051fbe440fd41694fd4658/comments", "author": null, "committer": null, "parents": [{"sha": "c4d501291d813840ad576842db00d9cfe9e77623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d501291d813840ad576842db00d9cfe9e77623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d501291d813840ad576842db00d9cfe9e77623"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "9b8cf8a3cf685e03aa5d94b07cb8a68a59c2cd8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f83a336ddb52188f74051fbe440fd41694fd4658", "patch": "@@ -1,3 +1,13 @@\n+2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/predicates.md (setmem_operand): New predicate.\n+\t(shift_count_operand): Accept ANDs with special constants as\n+\toperand.\n+\t* config/s390/s390.c (print_shift_count_operand): Skip ANDs\n+\twith special constants.\n+\t* config/s390/s390.md (\"setmem_long\", \"*setmem_long\"): Replaced\n+\tshift_count_operand with setmem_operand.\n+\n 2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_extract_part, s390_single_part):"}, {"sha": "05ef8c87a15b5a1685c962820ce8623e8a9c9e34", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=f83a336ddb52188f74051fbe440fd41694fd4658", "patch": "@@ -75,13 +75,59 @@\n        (and (match_test \"mode == Pmode\")\n \t    (match_test \"!legitimate_la_operand_p (op)\"))))\n \n+;; Return true if OP is a valid operand for setmem.\n+\n+(define_predicate \"setmem_operand\"\n+  (match_code \"reg, subreg, plus, const_int\")\n+{\n+  HOST_WIDE_INT offset = 0;\n+\n+  /* The padding byte operand of the mvcle instruction is always truncated\n+     to the 8 least significant bits.  */\n+  if (GET_CODE (op) == AND && GET_CODE (XEXP (op, 1)) == CONST_INT\n+      && (INTVAL (XEXP (op, 1)) & 255) == 255)\n+    op = XEXP (op, 0);\n+\n+  /* We can have an integer constant, an address register,\n+     or a sum of the two.  Note that reload already checks\n+     that any register present is an address register, so\n+     we just check for any register here.  */\n+  if (GET_CODE (op) == CONST_INT)\n+    {\n+      offset = INTVAL (op);\n+      op = NULL_RTX;\n+    }\n+  if (op && GET_CODE (op) == PLUS && GET_CODE (XEXP (op, 1)) == CONST_INT)\n+    {\n+      offset = INTVAL (XEXP (op, 1));\n+      op = XEXP (op, 0);\n+    }\n+  while (op && GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  if (op && GET_CODE (op) != REG)\n+    return false;\n+\n+  /* Unfortunately we have to reject constants that are invalid\n+     for an address, or else reload will get confused.  */\n+  if (!DISP_IN_RANGE (offset))\n+    return false;\n+\n+  return true;\n+})\n+\n ;; Return true if OP is a valid shift count operand.\n \n (define_predicate \"shift_count_operand\"\n-  (match_code \"reg, subreg, plus, const_int\")\n+  (match_code \"reg, subreg, plus, const_int, and\")\n {\n   HOST_WIDE_INT offset = 0;\n \n+  /* Shift count operands are always truncated to the 6 least significant bits.\n+     So we can accept pointless ANDs here.  */\n+  if (GET_CODE (op) == AND && GET_CODE (XEXP (op, 1)) == CONST_INT\n+      && (INTVAL (XEXP (op, 1)) & 63) == 63)\n+    op = XEXP (op, 0);\n+\n   /* We can have an integer constant, an address register,\n      or a sum of the two.  Note that reload already checks\n      that any register present is an address register, so"}, {"sha": "277006f6473115b7fbf7334f599c3e32f4413985", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f83a336ddb52188f74051fbe440fd41694fd4658", "patch": "@@ -3758,6 +3758,17 @@ print_shift_count_operand (FILE *file, rtx op)\n {\n   HOST_WIDE_INT offset = 0;\n \n+  /* Shift count operands are always truncated to the 6 least significant bits and\n+     the setmem padding byte to the least 8 significant bits.  Hence we can drop\n+     pointless ANDs.  */\n+  if (GET_CODE (op) == AND && GET_CODE (XEXP (op, 1)) == CONST_INT)\n+    {\n+      if ((INTVAL (XEXP (op, 1)) & 63) != 63)\n+\tgcc_unreachable ();\n+\n+      op = XEXP (op, 0);\n+    }\n+\n   /* We can have an integer constant, an address register,\n      or a sum of the two.  */\n   if (GET_CODE (op) == CONST_INT)"}, {"sha": "c09df126c03bc53f099e9385ffeeaa89c2354b60", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83a336ddb52188f74051fbe440fd41694fd4658/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f83a336ddb52188f74051fbe440fd41694fd4658", "patch": "@@ -2062,7 +2062,7 @@\n   [(parallel\n     [(clobber (match_dup 1))\n      (set (match_operand:BLK 0 \"memory_operand\" \"\")\n-          (match_operand 2 \"shift_count_operand\" \"\"))\n+          (match_operand 2 \"setmem_operand\" \"\"))\n      (use (match_operand 1 \"general_operand\" \"\"))\n      (use (match_dup 3))\n      (clobber (reg:CC CC_REGNUM))])]\n@@ -2088,7 +2088,7 @@\n (define_insn \"*setmem_long\"\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n-        (match_operand 2 \"shift_count_operand\" \"Y\"))\n+        (match_operand 2 \"setmem_operand\" \"Y\"))\n    (use (match_dup 3))\n    (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]"}]}