{"sha": "381e27aad5e042060f10bcff7ae655a26eac95f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxZTI3YWFkNWUwNDIwNjBmMTBiY2ZmN2FlNjU1YTI2ZWFjOTVmNQ==", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@theobroma-systems.com", "date": "2015-01-15T13:48:14Z"}, "committer": {"name": "Philipp Tomsich", "email": "ptomsich@gcc.gnu.org", "date": "2015-01-15T13:48:14Z"}, "message": "aarch64-cores.def (xgene1): Update/add the xgene1 (APM XGene-1) core definition.\n\n2015-01-15  Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n\n        * config/aarch64/aarch64-cores.def (xgene1): Update/add the\n        xgene1 (APM XGene-1) core definition.\n        * gcc/config/aarch64/aarch64.c: Add cost tables for APM XGene-1\n        * config/arm/aarch-cost-tables.h: Add cost tables for APM XGene-1\n        * doc/invoke.texi: Document -mcpu=xgene1.\n\nFrom-SVN: r219656", "tree": {"sha": "2d64d24b585a6c09520c07e741d11dc96404a115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d64d24b585a6c09520c07e741d11dc96404a115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/381e27aad5e042060f10bcff7ae655a26eac95f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381e27aad5e042060f10bcff7ae655a26eac95f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/381e27aad5e042060f10bcff7ae655a26eac95f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381e27aad5e042060f10bcff7ae655a26eac95f5/comments", "author": null, "committer": null, "parents": [{"sha": "36566b39c38a8c22c4f369878033ef53fa25d315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36566b39c38a8c22c4f369878033ef53fa25d315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36566b39c38a8c22c4f369878033ef53fa25d315"}], "stats": {"total": 183, "additions": 181, "deletions": 2}, "files": [{"sha": "8ab2861451fa12dbb784cf0d49110b6b1f8f8f95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=381e27aad5e042060f10bcff7ae655a26eac95f5", "patch": "@@ -1,3 +1,11 @@\n+2015-01-15  Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config/aarch64/aarch64-cores.def (xgene1): Update/add the\n+\txgene1 (APM XGene-1) core definition.\n+\t* gcc/config/aarch64/aarch64.c: Add cost tables for APM XGene-1\n+\t* config/arm/aarch-cost-tables.h: Add cost tables for APM XGene-1\n+\t* doc/invoke.texi: Document -mcpu=xgene1.\n+\n 2015-10-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* dojump.h: New header file."}, {"sha": "35a43e6d0848edb030471692b49b84f7fc9eb355", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=381e27aad5e042060f10bcff7ae655a26eac95f5", "patch": "@@ -37,6 +37,7 @@\n AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53)\n AARCH64_CORE(\"cortex-a57\",  cortexa15, cortexa15, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57)\n AARCH64_CORE(\"thunderx\",    thunderx,  thunderx, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx)\n+AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8,  AARCH64_FL_FOR_ARCH8, xgene1)\n \n /* V8 big.LITTLE implementations.  */\n "}, {"sha": "640908234ae50883ac1e86d3d459067a4dd3ccd0", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=381e27aad5e042060f10bcff7ae655a26eac95f5", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa53,cortexa15,thunderx,cortexa57cortexa53\"\n+\t\"cortexa53,cortexa15,thunderx,xgene1,cortexa57cortexa53\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "34cce91b24b3a264e97b3d26def2df19880bdc30", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=381e27aad5e042060f10bcff7ae655a26eac95f5", "patch": "@@ -240,6 +240,27 @@ static const struct cpu_addrcost_table cortexa57_addrcost_table =\n   NAMED_PARAM (imm_offset, 0),\n };\n \n+#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n+__extension__\n+#endif\n+static const struct cpu_addrcost_table xgene1_addrcost_table =\n+{\n+#if HAVE_DESIGNATED_INITIALIZERS\n+  .addr_scale_costs =\n+#endif\n+    {\n+      NAMED_PARAM (hi, 1),\n+      NAMED_PARAM (si, 0),\n+      NAMED_PARAM (di, 0),\n+      NAMED_PARAM (ti, 1),\n+    },\n+  NAMED_PARAM (pre_modify, 1),\n+  NAMED_PARAM (post_modify, 0),\n+  NAMED_PARAM (register_offset, 0),\n+  NAMED_PARAM (register_extend, 1),\n+  NAMED_PARAM (imm_offset, 0),\n+};\n+\n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n #endif\n@@ -281,6 +302,16 @@ static const struct cpu_regmove_cost thunderx_regmove_cost =\n   NAMED_PARAM (FP2FP, 4)\n };\n \n+static const struct cpu_regmove_cost xgene1_regmove_cost =\n+{\n+  NAMED_PARAM (GP2GP, 1),\n+  /* Avoid the use of slow int<->fp moves for spilling by setting\n+     their cost higher than memmov_cost.  */\n+  NAMED_PARAM (GP2FP, 8),\n+  NAMED_PARAM (FP2GP, 8),\n+  NAMED_PARAM (FP2FP, 2)\n+};\n+\n /* Generic costs for vector insn classes.  */\n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n@@ -321,6 +352,26 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n   NAMED_PARAM (cond_not_taken_branch_cost, 1)\n };\n \n+/* Generic costs for vector insn classes.  */\n+#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n+__extension__\n+#endif\n+static const struct cpu_vector_cost xgene1_vector_cost =\n+{\n+  NAMED_PARAM (scalar_stmt_cost, 1),\n+  NAMED_PARAM (scalar_load_cost, 5),\n+  NAMED_PARAM (scalar_store_cost, 1),\n+  NAMED_PARAM (vec_stmt_cost, 2),\n+  NAMED_PARAM (vec_to_scalar_cost, 4),\n+  NAMED_PARAM (scalar_to_vec_cost, 4),\n+  NAMED_PARAM (vec_align_load_cost, 10),\n+  NAMED_PARAM (vec_unalign_load_cost, 10),\n+  NAMED_PARAM (vec_unalign_store_cost, 2),\n+  NAMED_PARAM (vec_store_cost, 2),\n+  NAMED_PARAM (cond_taken_branch_cost, 2),\n+  NAMED_PARAM (cond_not_taken_branch_cost, 1)\n+};\n+\n #define AARCH64_FUSE_NOTHING\t(0)\n #define AARCH64_FUSE_MOV_MOVK\t(1 << 0)\n #define AARCH64_FUSE_ADRP_ADD\t(1 << 1)\n@@ -400,6 +451,23 @@ static const struct tune_params thunderx_tunings =\n   1\t/* vec_reassoc_width.  */\n };\n \n+static const struct tune_params xgene1_tunings =\n+{\n+  &xgene1_extra_costs,\n+  &xgene1_addrcost_table,\n+  &xgene1_regmove_cost,\n+  &xgene1_vector_cost,\n+  NAMED_PARAM (memmov_cost, 6),\n+  NAMED_PARAM (issue_rate, 4),\n+  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_NOTHING),\n+  16,\t/* function_align.  */\n+  8,\t/* jump_align.  */\n+  16,\t/* loop_align.  */\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1\t/* vec_reassoc_width.  */\n+};\n+\n /* A processor implementing AArch64.  */\n struct processor\n {"}, {"sha": "05e96a9f290cf4c7e80d21a7a8ff2f6adc8eb7f4", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=381e27aad5e042060f10bcff7ae655a26eac95f5", "patch": "@@ -325,4 +325,105 @@ const struct cpu_cost_table cortexa57_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table xgene1_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    COSTS_N_INSNS (1), /* shift_reg.  */\n+    COSTS_N_INSNS (1), /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    COSTS_N_INSNS (1), /* log_shift.  */\n+    COSTS_N_INSNS (1), /* log_shift_reg.  */\n+    COSTS_N_INSNS (1), /* extend.  */\n+    0,                 /* extend_arithm.  */\n+    COSTS_N_INSNS (1), /* bfi.  */\n+    COSTS_N_INSNS (1), /* bfx.  */\n+    0,                 /* clz.  */\n+    COSTS_N_INSNS (1), /* rev.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (4),       /* simple.  */\n+      COSTS_N_INSNS (4),       /* flag_setting.  */\n+      COSTS_N_INSNS (4),       /* extend.  */\n+      COSTS_N_INSNS (4),       /* add.  */\n+      COSTS_N_INSNS (4),       /* extend_add.  */\n+      COSTS_N_INSNS (20)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (5),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (5),       /* extend.  */\n+      COSTS_N_INSNS (5),       /* add.  */\n+      COSTS_N_INSNS (5),       /* extend_add.  */\n+      COSTS_N_INSNS (21)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (5),         /* load.  */\n+    COSTS_N_INSNS (6),         /* load_sign_extend.  */\n+    COSTS_N_INSNS (5),         /* ldrd.  */\n+    COSTS_N_INSNS (5),         /* ldm_1st.  */\n+    1,                         /* ldm_regs_per_insn_1st.  */\n+    1,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (10),        /* loadf.  */\n+    COSTS_N_INSNS (10),        /* loadd.  */\n+    COSTS_N_INSNS (5),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    1,                         /* stm_regs_per_insn_1st.  */\n+    1,                         /* stm_regs_per_insn_subsequent.  */\n+    0,                         /* storef.  */\n+    0,                         /* stored.  */\n+    0,                         /* store_unaligned.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (23),      /* div.  */\n+      COSTS_N_INSNS (5),       /* mult.  */\n+      COSTS_N_INSNS (5),       /* mult_addsub. */\n+      COSTS_N_INSNS (5),       /* fma.  */\n+      COSTS_N_INSNS (5),       /* addsub.  */\n+      COSTS_N_INSNS (2),       /* fpconst. */\n+      COSTS_N_INSNS (3),       /* neg.  */\n+      COSTS_N_INSNS (2),       /* compare.  */\n+      COSTS_N_INSNS (6),       /* widen.  */\n+      COSTS_N_INSNS (6),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (4)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (29),      /* div.  */\n+      COSTS_N_INSNS (5),       /* mult.  */\n+      COSTS_N_INSNS (5),       /* mult_addsub.  */\n+      COSTS_N_INSNS (5),       /* fma.  */\n+      COSTS_N_INSNS (5),       /* addsub.  */\n+      COSTS_N_INSNS (3),       /* fpconst.  */\n+      COSTS_N_INSNS (3),       /* neg.  */\n+      COSTS_N_INSNS (2),       /* compare.  */\n+      COSTS_N_INSNS (6),       /* widen.  */\n+      COSTS_N_INSNS (6),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (4)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (2)  /* alu.  */\n+  }\n+};\n+\n #endif /* GCC_AARCH_COST_TABLES_H */"}, {"sha": "0f3ce8ecc3e73d69a54cb9e81bbda65ae648496a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381e27aad5e042060f10bcff7ae655a26eac95f5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=381e27aad5e042060f10bcff7ae655a26eac95f5", "patch": "@@ -12101,7 +12101,8 @@ architecture.\n @opindex mtune\n Specify the name of the target processor for which GCC should tune the\n performance of the code.  Permissible values for this option are:\n-@samp{generic}, @samp{cortex-a53}, @samp{cortex-a57}, @samp{thunderx}.\n+@samp{generic}, @samp{cortex-a53}, @samp{cortex-a57}, @samp{thunderx},\n+@samp{xgene1}.\n \n Additionally, this option can specify that GCC should tune the performance\n of the code for a big.LITTLE system.  The only permissible value is"}]}