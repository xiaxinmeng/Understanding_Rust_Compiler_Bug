{"sha": "8692693732e89806058d3b9c91132fb83661b214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5MjY5MzczMmU4OTgwNjA1OGQzYjljOTExMzJmYjgzNjYxYjIxNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-08-28T02:22:29Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-28T02:22:29Z"}, "message": "PR c++/81676 - bogus -Wunused warnings in constexpr if.\n\n\t* semantics.c (maybe_mark_exp_read_r): New function.\n\t(finish_if_stmt): Call it on THEN_CLAUSE and ELSE_CLAUSE.\n\n\t* g++.dg/cpp1z/constexpr-if31.C: New test.\n\t* g++.dg/cpp1z/constexpr-if32.C: New test.\n\nFrom-SVN: r274982", "tree": {"sha": "4d6fb359b2dfa84fd95432293af3448db1c32dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d6fb359b2dfa84fd95432293af3448db1c32dd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8692693732e89806058d3b9c91132fb83661b214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8692693732e89806058d3b9c91132fb83661b214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8692693732e89806058d3b9c91132fb83661b214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8692693732e89806058d3b9c91132fb83661b214/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14da3939da3adcef84816573caa9d93c7367507e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14da3939da3adcef84816573caa9d93c7367507e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14da3939da3adcef84816573caa9d93c7367507e"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "b735dab6a517290471e3c0fde37bab7328ef9f10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692693732e89806058d3b9c91132fb83661b214/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692693732e89806058d3b9c91132fb83661b214/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8692693732e89806058d3b9c91132fb83661b214", "patch": "@@ -1,5 +1,9 @@\n 2019-08-27  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/81676 - bogus -Wunused warnings in constexpr if.\n+\t* semantics.c (maybe_mark_exp_read_r): New function.\n+\t(finish_if_stmt): Call it on THEN_CLAUSE and ELSE_CLAUSE.\n+\n \tPR c++/91428 - warn about std::is_constant_evaluated in if constexpr.\n \t* cp-tree.h (decl_in_std_namespace_p): Declare.\n \t* semantics.c (is_std_constant_evaluated_p): New."}, {"sha": "b61d86f94b94434bb7ecabd57f8f403ee6a6f4a9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692693732e89806058d3b9c91132fb83661b214/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692693732e89806058d3b9c91132fb83661b214/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8692693732e89806058d3b9c91132fb83661b214", "patch": "@@ -810,13 +810,35 @@ finish_else_clause (tree if_stmt)\n   ELSE_CLAUSE (if_stmt) = pop_stmt_list (ELSE_CLAUSE (if_stmt));\n }\n \n+/* Callback for cp_walk_tree to mark all {VAR,PARM}_DECLs in a tree as\n+   read.  */\n+\n+static tree\n+maybe_mark_exp_read_r (tree *tp, int *, void *)\n+{\n+  tree t = *tp;\n+  if (VAR_P (t) || TREE_CODE (t) == PARM_DECL)\n+    mark_exp_read (t);\n+  return NULL_TREE;\n+}\n+\n /* Finish an if-statement.  */\n \n void\n finish_if_stmt (tree if_stmt)\n {\n   tree scope = IF_SCOPE (if_stmt);\n   IF_SCOPE (if_stmt) = NULL;\n+  if (IF_STMT_CONSTEXPR_P (if_stmt))\n+    {\n+      /* Prevent various -Wunused warnings.  We might not instantiate\n+\t either of these branches, so we would not mark the variables\n+\t used in that branch as read.  */\n+      cp_walk_tree_without_duplicates (&THEN_CLAUSE (if_stmt),\n+\t\t\t\t       maybe_mark_exp_read_r, NULL);\n+      cp_walk_tree_without_duplicates (&ELSE_CLAUSE (if_stmt),\n+\t\t\t\t       maybe_mark_exp_read_r, NULL);\n+    }\n   add_stmt (do_poplevel (scope));\n }\n "}, {"sha": "4c58780ff67b8ba0816bd24a6b5bd8473ff2f9dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692693732e89806058d3b9c91132fb83661b214/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692693732e89806058d3b9c91132fb83661b214/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8692693732e89806058d3b9c91132fb83661b214", "patch": "@@ -1,5 +1,9 @@\n 2019-08-27  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/81676 - bogus -Wunused warnings in constexpr if.\n+\t* g++.dg/cpp1z/constexpr-if31.C: New test.\n+\t* g++.dg/cpp1z/constexpr-if32.C: New test.\n+\n \tPR c++/91428 - warn about std::is_constant_evaluated in if constexpr.\n \t* g++.dg/cpp2a/is-constant-evaluated9.C: New test.\n "}, {"sha": "02140cff9fd8644b8c1c8c7c26559b7f767a20f6", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if31.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692693732e89806058d3b9c91132fb83661b214/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692693732e89806058d3b9c91132fb83661b214/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if31.C?ref=8692693732e89806058d3b9c91132fb83661b214", "patch": "@@ -0,0 +1,79 @@\n+// PR c++/81676 - bogus -Wunused warnings in constexpr if.\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wall -Wextra\" }\n+\n+template <typename T> int\n+f1 (T v)\n+{\n+  T x = 0;\n+  if constexpr(sizeof(T) == sizeof(int))\n+    return v + x;\n+  else\n+    return 0;\n+}\n+\n+template <typename T> int\n+f2 (T v) // { dg-warning \"unused parameter .v.\" }\n+{\n+  T x = 0;\n+  if constexpr(sizeof(T) == sizeof(int))\n+    return x;\n+  else\n+    return 0;\n+}\n+\n+template <typename T> int\n+f3 (T v)\n+{\n+  T x = 0; // { dg-warning \"unused variable .x.\" }\n+  if constexpr(sizeof(T) == sizeof(int))\n+    return v;\n+  else\n+    return 0;\n+}\n+\n+template <typename T> int\n+f4 (T v)\n+{\n+  T x = 0;\n+  if constexpr(sizeof(T) == sizeof(int))\n+    return 0;\n+  else\n+    return v + x;\n+}\n+\n+template <typename T> int\n+f5 (T v) // { dg-warning \"unused parameter .v.\" }\n+{\n+  T x = 0;\n+  if constexpr(sizeof(T) == sizeof(int))\n+    return 0;\n+  else\n+    return x;\n+}\n+\n+template <typename T> int\n+f6 (T v)\n+{\n+  T x = 0; // { dg-warning \"unused variable .x.\" }\n+  if constexpr(sizeof(T) == sizeof(int))\n+    return 0;\n+  else\n+    return v;\n+}\n+\n+int main()\n+{\n+  f1(0);\n+  f1('a');\n+  f2(0);\n+  f2('a');\n+  f3(0);\n+  f3('a');\n+  f4(0);\n+  f4('a');\n+  f5(0);\n+  f5('a');\n+  f6(0);\n+  f6('a');\n+}"}, {"sha": "13a6039fce69c5c3ca9c7391969be7c6d2fe9ce4", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if32.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692693732e89806058d3b9c91132fb83661b214/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692693732e89806058d3b9c91132fb83661b214/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if32.C?ref=8692693732e89806058d3b9c91132fb83661b214", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/81676 - bogus -Wunused warnings in constexpr if.\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wall -Wextra\" }\n+\n+int main()\n+{\n+    auto f = [](auto a, auto b) {\n+        if constexpr (sizeof(b) == 1) {\n+            return a;\n+        } else {\n+            return b;\n+        }\n+    };\n+\n+    return f(1, 1) + f(1, 'a');\n+}"}]}