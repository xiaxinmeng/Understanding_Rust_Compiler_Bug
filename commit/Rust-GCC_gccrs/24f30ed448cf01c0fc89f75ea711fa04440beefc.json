{"sha": "24f30ed448cf01c0fc89f75ea711fa04440beefc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmMzBlZDQ0OGNmMDFjMGZjODlmNzVlYTcxMWZhMDQ0NDBiZWVmYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-16T01:20:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-16T01:20:45Z"}, "message": "decl.c (warn_extern_redeclared_static): Simplify.\n\n\t* decl.c (warn_extern_redeclared_static): Simplify.  Catch\n\tproblems with extern \"C\" functions redeclared as static.\n\t(duplicate_decls): When a builtin is redeclared static, make the\n\tnew function have internal linkage.\n\nFrom-SVN: r29450", "tree": {"sha": "8f287ea08cc8d076c9ded0ad71332b7743e7fdae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f287ea08cc8d076c9ded0ad71332b7743e7fdae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24f30ed448cf01c0fc89f75ea711fa04440beefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f30ed448cf01c0fc89f75ea711fa04440beefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f30ed448cf01c0fc89f75ea711fa04440beefc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f30ed448cf01c0fc89f75ea711fa04440beefc/comments", "author": null, "committer": null, "parents": [{"sha": "9605da8a3fda7f5f52221143d6af94e9ed13a306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9605da8a3fda7f5f52221143d6af94e9ed13a306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9605da8a3fda7f5f52221143d6af94e9ed13a306"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "cd42511d5e1d3a8d88921ce0770f102230510a54", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=24f30ed448cf01c0fc89f75ea711fa04440beefc", "patch": "@@ -2921,8 +2921,7 @@ decls_match (newdecl, olddecl)\n }\n \n /* If NEWDECL is `static' and an `extern' was seen previously,\n-   warn about it.  (OLDDECL may be NULL_TREE; NAME contains\n-   information about previous usage as an `extern'.)\n+   warn about it.  OLDDECL is the previous declaration.\n \n    Note that this does not apply to the C++ case of declaring\n    a variable `extern const' and then later `const'.\n@@ -2934,33 +2933,31 @@ static void\n warn_extern_redeclared_static (newdecl, olddecl)\n      tree newdecl, olddecl;\n {\n-  tree name;\n-\n   static const char *explicit_extern_static_warning\n     = \"`%D' was declared `extern' and later `static'\";\n   static const char *implicit_extern_static_warning\n     = \"`%D' was declared implicitly `extern' and later `static'\";\n \n+  tree name;\n+\n   if (TREE_CODE (newdecl) == TYPE_DECL)\n     return;\n \n+  /* If the old declaration was `static', or the new one isn't, then\n+     then everything is OK.  */\n+  if (DECL_THIS_STATIC (olddecl) || !DECL_THIS_STATIC (newdecl))\n+    return;\n+\n+  /* It's OK to declare a builtin function as `static'.  */\n+  if (TREE_CODE (olddecl) == FUNCTION_DECL\n+      && DECL_ARTIFICIAL (olddecl))\n+    return;\n+\n   name = DECL_ASSEMBLER_NAME (newdecl);\n-  if (TREE_PUBLIC (name) && DECL_THIS_STATIC (newdecl))\n-    {\n-      /* It's okay to redeclare an ANSI built-in function as static,\n-\t or to declare a non-ANSI built-in function as anything.  */\n-      if (! (TREE_CODE (newdecl) == FUNCTION_DECL\n-\t     && olddecl != NULL_TREE\n-\t     && TREE_CODE (olddecl) == FUNCTION_DECL\n-\t     && DECL_ARTIFICIAL (olddecl)))\n-\t{\n-\t  cp_pedwarn (IDENTIFIER_IMPLICIT_DECL (name)\n-\t\t      ? implicit_extern_static_warning\n-\t\t      : explicit_extern_static_warning, newdecl);\n-\t  if (olddecl != NULL_TREE)\n-\t    cp_pedwarn_at (\"previous declaration of `%D'\", olddecl);\n-\t}\n-    }\n+  cp_pedwarn (IDENTIFIER_IMPLICIT_DECL (name)\n+\t      ? implicit_extern_static_warning\n+\t      : explicit_extern_static_warning, newdecl);\n+  cp_pedwarn_at (\"previous declaration of `%D'\", olddecl);\n }\n \n /* Handle when a new declaration NEWDECL has the same name as an old\n@@ -3047,6 +3044,14 @@ duplicate_decls (newdecl, olddecl)\n \t    /* Discard the old built-in function.  */\n \t    return 0;\n \t}\n+      \n+      if (DECL_THIS_STATIC (newdecl) && !DECL_THIS_STATIC (olddecl))\n+\t{\n+\t  /* If a builtin function is redeclared as `static', merge\n+\t     the declarations, but make the original one static.  */\n+\t  DECL_THIS_STATIC (olddecl) = 1;\n+\t  TREE_PUBLIC (olddecl) = 0;\n+\t}\n     }\n   else if (TREE_CODE (olddecl) != TREE_CODE (newdecl))\n     {"}, {"sha": "8439c34c3c24e54f104859cd370f73cd17c5f238", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net46.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C?ref=24f30ed448cf01c0fc89f75ea711fa04440beefc", "patch": "@@ -4,7 +4,7 @@\n \n int fail = 1;\n \n-static void *operator new(size_t size) throw (std::bad_alloc) {\n+void *operator new(size_t size) throw (std::bad_alloc) {\n   --fail;\n   return (void*) 0;\n }"}, {"sha": "d32d770cce7e64a2f14419758087fca6d37f12ae", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage3.C?ref=24f30ed448cf01c0fc89f75ea711fa04440beefc", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+extern \"C\" void f (); // ERROR - previous declaration\n+static void f () {} // ERROR - extern redeclared static"}, {"sha": "65772f7500e184ec364306498650befc18d2ddcb", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f30ed448cf01c0fc89f75ea711fa04440beefc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage4.C?ref=24f30ed448cf01c0fc89f75ea711fa04440beefc", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+static int strlen (const char*) { return 0; }\n+\n+template <int (*)(const char*)>\n+void f () {}\n+\n+// Check that the strlen declaration here is given internal linkage by\n+// using it as a non-type template argument, and expecting an error.\n+template void f<strlen>(); // ERROR - no matching template"}]}