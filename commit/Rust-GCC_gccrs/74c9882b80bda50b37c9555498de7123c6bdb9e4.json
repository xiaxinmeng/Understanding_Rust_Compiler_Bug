{"sha": "74c9882b80bda50b37c9555498de7123c6bdb9e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjOTg4MmI4MGJkYTUwYjM3Yzk1NTU0OThkZTcxMjNjNmJkYjllNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-22T07:31:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-22T07:31:01Z"}, "message": "openmp: Change omp_get_initial_device () to match OpenMP 5.1 requirements\n\n> Therefore, I think until omp_get_initial_device () value is changed, we\n\nThe following so far untested patch implements that change.\n\nOpenMP 4.5 said for omp_get_initial_device:\nThe value of the device number is implementation defined. If it is between 0 and one less than\nomp_get_num_devices() then it is valid for use with all device constructs and routines; if it is\noutside that range, then it is only valid for use with the device memory routines and not in the\ndevice clause.\nand OpenMP 5.0 similarly, but OpenMP 5.1 says:\nThe value of the device number is the value returned by the omp_get_num_devices routine.\n\nAs the new value is compatible with what has been required earlier, I think\nwe can change it already now.\n\n2020-10-22  Jakub Jelinek  <jakub@redhat.com>\n\n\t* icv.c (omp_get_initial_device): Remove including corresponding\n\tialias.\n\t* icv-device.c (omp_get_initial_device): New function.  Return\n\tgomp_get_num_devices ().  Add ialias.\n\t* target.c (resolve_device): Don't fail with\n\tOMP_TARGET_OFFLOAD=mandatory if device_id is equal to\n\tgomp_get_num_devices ().\n\t(omp_target_alloc, omp_target_free, omp_target_is_present,\n\tomp_target_memcpy, omp_target_memcpy_rect, omp_target_associate_ptr,\n\tomp_target_disassociate_ptr, omp_pause_resource): Use\n\tgomp_get_num_devices () instead of GOMP_DEVICE_HOST_FALLBACK on the\n\tfirst use in the functions, in uses dominated by the\n\tgomp_get_num_devices call use num_devices_openmp instead.\n\t* libgomp.texi (omp_get_initial_device): Document.\n\t* config/gcn/icv-device.c (omp_get_initial_device): New function.\n\tAdd ialias.\n\t* config/nvptx/icv-device.c (omp_get_initial_device): Likewise.\n\t* testsuite/libgomp.c/target-40.c: New test.", "tree": {"sha": "a076a134ac5adf7de55c2eb0cf7776d79edfb542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a076a134ac5adf7de55c2eb0cf7776d79edfb542"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74c9882b80bda50b37c9555498de7123c6bdb9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c9882b80bda50b37c9555498de7123c6bdb9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c9882b80bda50b37c9555498de7123c6bdb9e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c9882b80bda50b37c9555498de7123c6bdb9e4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3acf7a02631997c5505e109660457fdca3ed2d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3acf7a02631997c5505e109660457fdca3ed2d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3acf7a02631997c5505e109660457fdca3ed2d1"}], "stats": {"total": 94, "additions": 73, "deletions": 21}, "files": [{"sha": "ba3a446a6eae7f8b3a9c7b4dd2c534185e5e07ad", "filename": "libgomp/config/gcn/icv-device.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Fconfig%2Fgcn%2Ficv-device.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Fconfig%2Fgcn%2Ficv-device.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fgcn%2Ficv-device.c?ref=74c9882b80bda50b37c9555498de7123c6bdb9e4", "patch": "@@ -39,6 +39,12 @@ omp_get_default_device (void)\n   return 0;\n }\n \n+int\n+omp_get_initial_device (void)\n+{\n+  return GOMP_DEVICE_HOST_FALLBACK;\n+}\n+\n int\n omp_get_num_devices (void)\n {\n@@ -66,6 +72,7 @@ omp_is_initial_device (void)\n \n ialias (omp_set_default_device)\n ialias (omp_get_default_device)\n+ialias (omp_get_initial_device)\n ialias (omp_get_num_devices)\n ialias (omp_get_num_teams)\n ialias (omp_get_team_num)"}, {"sha": "795da7db757ca799a2bc77a0b9cc7ef26269ac4d", "filename": "libgomp/config/nvptx/icv-device.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Fconfig%2Fnvptx%2Ficv-device.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Fconfig%2Fnvptx%2Ficv-device.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Ficv-device.c?ref=74c9882b80bda50b37c9555498de7123c6bdb9e4", "patch": "@@ -39,6 +39,12 @@ omp_get_default_device (void)\n   return 0;\n }\n \n+int\n+omp_get_initial_device (void)\n+{\n+  return GOMP_DEVICE_HOST_FALLBACK;\n+}\n+\n int\n omp_get_num_devices (void)\n {\n@@ -54,5 +60,6 @@ omp_is_initial_device (void)\n \n ialias (omp_set_default_device)\n ialias (omp_get_default_device)\n+ialias (omp_get_initial_device)\n ialias (omp_get_num_devices)\n ialias (omp_is_initial_device)"}, {"sha": "af7972eae670fba50c1384ed89a8d28d8237aa47", "filename": "libgomp/icv-device.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ficv-device.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ficv-device.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ficv-device.c?ref=74c9882b80bda50b37c9555498de7123c6bdb9e4", "patch": "@@ -42,6 +42,12 @@ omp_get_default_device (void)\n   return icv->default_device_var;\n }\n \n+int\n+omp_get_initial_device (void)\n+{\n+  return gomp_get_num_devices ();\n+}\n+\n int\n omp_get_num_devices (void)\n {\n@@ -57,5 +63,6 @@ omp_is_initial_device (void)\n \n ialias (omp_set_default_device)\n ialias (omp_get_default_device)\n+ialias (omp_get_initial_device)\n ialias (omp_get_num_devices)\n ialias (omp_is_initial_device)"}, {"sha": "4da6527c9b82f43319047c65d9d79a12bb2455bc", "filename": "libgomp/icv.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ficv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ficv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ficv.c?ref=74c9882b80bda50b37c9555498de7123c6bdb9e4", "patch": "@@ -155,12 +155,6 @@ omp_get_proc_bind (void)\n   return icv->bind_var;\n }\n \n-int\n-omp_get_initial_device (void)\n-{\n-  return GOMP_DEVICE_HOST_FALLBACK;\n-}\n-\n int\n omp_get_num_places (void)\n {\n@@ -241,7 +235,6 @@ ialias (omp_get_max_active_levels)\n ialias (omp_get_supported_active_levels)\n ialias (omp_get_cancellation)\n ialias (omp_get_proc_bind)\n-ialias (omp_get_initial_device)\n ialias (omp_get_max_task_priority)\n ialias (omp_get_num_places)\n ialias (omp_get_place_num)"}, {"sha": "69370639c5b51b118b8f15832959e40d63a5f916", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=74c9882b80bda50b37c9555498de7123c6bdb9e4", "patch": "@@ -166,6 +166,7 @@ linkage, and do not throw exceptions.\n * omp_get_cancellation::        Whether cancellation support is enabled\n * omp_get_default_device::      Get the default device for target regions\n * omp_get_dynamic::             Dynamic teams setting\n+* omp_get_initial_device::      Device number of host device\n * omp_get_level::               Number of parallel regions\n * omp_get_max_active_levels::   Current maximum number of active regions\n * omp_get_max_task_priority::   Maximum task priority value that can be set\n@@ -353,6 +354,33 @@ disabled by default.\n \n \n \n+@node omp_get_initial_device\n+@section @code{omp_get_initial_device} -- Return device number of initial device\n+@table @asis\n+@item @emph{Description}:\n+This function returns a device number that represents the host device.\n+For OpenMP 5.1, this must be equal to the value returned by the\n+@code{omp_get_num_devices} function.\n+\n+@item @emph{C/C++}\n+@multitable @columnfractions .20 .80\n+@item @emph{Prototype}: @tab @code{int omp_get_initial_device(void);}\n+@end multitable\n+\n+@item @emph{Fortran}:\n+@multitable @columnfractions .20 .80\n+@item @emph{Interface}: @tab @code{integer function omp_get_initial_device()}\n+@end multitable\n+\n+@item @emph{See also}:\n+@ref{omp_get_num_devices}\n+\n+@item @emph{Reference}:\n+@uref{https://www.openmp.org, OpenMP specification v4.5}, Section 3.2.35.\n+@end table\n+\n+\n+\n @node omp_get_level\n @section @code{omp_get_level} -- Obtain the current nesting level\n @table @asis"}, {"sha": "1a8c67c2df5ac5e569ced528ddd3d313a7f0ee86", "filename": "libgomp/target.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=74c9882b80bda50b37c9555498de7123c6bdb9e4", "patch": "@@ -118,7 +118,8 @@ resolve_device (int device_id)\n   if (device_id < 0 || device_id >= gomp_get_num_devices ())\n     {\n       if (gomp_target_offload_var == GOMP_TARGET_OFFLOAD_MANDATORY\n-\t  && device_id != GOMP_DEVICE_HOST_FALLBACK)\n+\t  && device_id != GOMP_DEVICE_HOST_FALLBACK\n+\t  && device_id != num_devices_openmp)\n \tgomp_fatal (\"OMP_TARGET_OFFLOAD is set to MANDATORY, \"\n \t\t    \"but device not found\");\n \n@@ -132,8 +133,7 @@ resolve_device (int device_id)\n     {\n       gomp_mutex_unlock (&devices[device_id].lock);\n \n-      if (gomp_target_offload_var == GOMP_TARGET_OFFLOAD_MANDATORY\n-\t  && device_id != GOMP_DEVICE_HOST_FALLBACK)\n+      if (gomp_target_offload_var == GOMP_TARGET_OFFLOAD_MANDATORY)\n \tgomp_fatal (\"OMP_TARGET_OFFLOAD is set to MANDATORY, \"\n \t\t    \"but device is finalized\");\n \n@@ -2716,7 +2716,7 @@ GOMP_teams (unsigned int num_teams, unsigned int thread_limit)\n void *\n omp_target_alloc (size_t size, int device_num)\n {\n-  if (device_num == GOMP_DEVICE_HOST_FALLBACK)\n+  if (device_num == gomp_get_num_devices ())\n     return malloc (size);\n \n   if (device_num < 0)\n@@ -2742,7 +2742,7 @@ omp_target_free (void *device_ptr, int device_num)\n   if (device_ptr == NULL)\n     return;\n \n-  if (device_num == GOMP_DEVICE_HOST_FALLBACK)\n+  if (device_num == gomp_get_num_devices ())\n     {\n       free (device_ptr);\n       return;\n@@ -2773,7 +2773,7 @@ omp_target_is_present (const void *ptr, int device_num)\n   if (ptr == NULL)\n     return 1;\n \n-  if (device_num == GOMP_DEVICE_HOST_FALLBACK)\n+  if (device_num == gomp_get_num_devices ())\n     return 1;\n \n   if (device_num < 0)\n@@ -2807,7 +2807,7 @@ omp_target_memcpy (void *dst, const void *src, size_t length,\n   struct gomp_device_descr *dst_devicep = NULL, *src_devicep = NULL;\n   bool ret;\n \n-  if (dst_device_num != GOMP_DEVICE_HOST_FALLBACK)\n+  if (dst_device_num != gomp_get_num_devices ())\n     {\n       if (dst_device_num < 0)\n \treturn EINVAL;\n@@ -2820,7 +2820,7 @@ omp_target_memcpy (void *dst, const void *src, size_t length,\n \t  || dst_devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n \tdst_devicep = NULL;\n     }\n-  if (src_device_num != GOMP_DEVICE_HOST_FALLBACK)\n+  if (src_device_num != num_devices_openmp)\n     {\n       if (src_device_num < 0)\n \treturn EINVAL;\n@@ -2958,7 +2958,7 @@ omp_target_memcpy_rect (void *dst, const void *src, size_t element_size,\n   if (!dst && !src)\n     return INT_MAX;\n \n-  if (dst_device_num != GOMP_DEVICE_HOST_FALLBACK)\n+  if (dst_device_num != gomp_get_num_devices ())\n     {\n       if (dst_device_num < 0)\n \treturn EINVAL;\n@@ -2971,7 +2971,7 @@ omp_target_memcpy_rect (void *dst, const void *src, size_t element_size,\n \t  || dst_devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n \tdst_devicep = NULL;\n     }\n-  if (src_device_num != GOMP_DEVICE_HOST_FALLBACK)\n+  if (src_device_num != num_devices_openmp)\n     {\n       if (src_device_num < 0)\n \treturn EINVAL;\n@@ -3007,7 +3007,7 @@ int\n omp_target_associate_ptr (const void *host_ptr, const void *device_ptr,\n \t\t\t  size_t size, size_t device_offset, int device_num)\n {\n-  if (device_num == GOMP_DEVICE_HOST_FALLBACK)\n+  if (device_num == gomp_get_num_devices ())\n     return EINVAL;\n \n   if (device_num < 0)\n@@ -3070,7 +3070,7 @@ omp_target_associate_ptr (const void *host_ptr, const void *device_ptr,\n int\n omp_target_disassociate_ptr (const void *ptr, int device_num)\n {\n-  if (device_num == GOMP_DEVICE_HOST_FALLBACK)\n+  if (device_num == gomp_get_num_devices ())\n     return EINVAL;\n \n   if (device_num < 0)\n@@ -3113,9 +3113,9 @@ int\n omp_pause_resource (omp_pause_resource_t kind, int device_num)\n {\n   (void) kind;\n-  if (device_num == GOMP_DEVICE_HOST_FALLBACK)\n+  if (device_num == gomp_get_num_devices ())\n     return gomp_pause_host ();\n-  if (device_num < 0 || device_num >= gomp_get_num_devices ())\n+  if (device_num < 0 || device_num >= num_devices_openmp)\n     return -1;\n   /* Do nothing for target devices for now.  */\n   return 0;"}, {"sha": "138e16298d53b68507a2eb9486708c9309e179b8", "filename": "libgomp/testsuite/libgomp.c/target-40.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c9882b80bda50b37c9555498de7123c6bdb9e4/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-40.c?ref=74c9882b80bda50b37c9555498de7123c6bdb9e4", "patch": "@@ -0,0 +1,10 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  if (omp_get_initial_device () != omp_get_num_devices ())\n+    abort ();\n+  return 0;\n+}"}]}