{"sha": "c81e68a9cdbb5411dce1f1da3b35854212305c7c", "node_id": "C_kwDOANBUbNoAKGM4MWU2OGE5Y2RiYjU0MTFkY2UxZjFkYTNiMzU4NTQyMTIzMDVjN2M", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T22:26:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T22:26:35Z"}, "message": "value-relation: Fix up relation_union [PR108447]\n\nWhile looking at the PR, I've noticed one row in rr_union_table\nis wrong.  relation_union should be commutative, but due to that\nbug is not.  The following patch adds a self-test for that\nproperty (fails without the first hunk) and fixes that line.\n\nThe actual floating point relation problem isn't fixed by this patch\nthough.\n\n2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108447\n\t* value-relation.cc (rr_union_table): Fix VREL_UNDEFINED row order.\n\t(relation_tests): Add self-tests for relation_{intersect,union}\n\tcommutativity.\n\t* selftest.h (relation_tests): Declare.\n\t* function-tests.cc (test_ranges): Call it.", "tree": {"sha": "0292d083c0f9a7a5c7dd76fa59a04c3dedc5f6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0292d083c0f9a7a5c7dd76fa59a04c3dedc5f6df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c81e68a9cdbb5411dce1f1da3b35854212305c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81e68a9cdbb5411dce1f1da3b35854212305c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c81e68a9cdbb5411dce1f1da3b35854212305c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81e68a9cdbb5411dce1f1da3b35854212305c7c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77a67e3a9294c825ac1a2b205fbb266e7c29e82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a67e3a9294c825ac1a2b205fbb266e7c29e82b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a67e3a9294c825ac1a2b205fbb266e7c29e82b"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "39970b2fcfd920d7d9c9ad730c091f2e7bd567e0", "filename": "gcc/function-tests.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81e68a9cdbb5411dce1f1da3b35854212305c7c/gcc%2Ffunction-tests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81e68a9cdbb5411dce1f1da3b35854212305c7c/gcc%2Ffunction-tests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction-tests.cc?ref=c81e68a9cdbb5411dce1f1da3b35854212305c7c", "patch": "@@ -583,6 +583,7 @@ test_ranges ()\n   push_cfun (fun);\n   range_tests ();\n   range_op_tests ();\n+  relation_tests ();\n \n   build_cfg (fndecl);\n   convert_to_ssa (fndecl);"}, {"sha": "20d522afda4157e80b91d778a7e71729187c8de9", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81e68a9cdbb5411dce1f1da3b35854212305c7c/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81e68a9cdbb5411dce1f1da3b35854212305c7c/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=c81e68a9cdbb5411dce1f1da3b35854212305c7c", "patch": "@@ -244,6 +244,7 @@ extern void predict_cc_tests ();\n extern void pretty_print_cc_tests ();\n extern void range_tests ();\n extern void range_op_tests ();\n+extern void relation_tests ();\n extern void gimple_range_tests ();\n extern void read_rtl_function_cc_tests ();\n extern void rtl_tests_cc_tests ();"}, {"sha": "6f8a1b7e7d3c1a899f615b5896add4d5c9efb5bf", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81e68a9cdbb5411dce1f1da3b35854212305c7c/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81e68a9cdbb5411dce1f1da3b35854212305c7c/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=c81e68a9cdbb5411dce1f1da3b35854212305c7c", "patch": "@@ -115,7 +115,7 @@ relation_kind rr_union_table[VREL_LAST][VREL_LAST] = {\n   { VREL_VARYING, VREL_VARYING, VREL_VARYING, VREL_VARYING, VREL_VARYING,\n     VREL_VARYING, VREL_VARYING, VREL_VARYING },\n // VREL_UNDEFINED\n-  { VREL_VARYING, VREL_LT, VREL_LE, VREL_GT, VREL_GE, VREL_UNDEFINED,\n+  { VREL_VARYING, VREL_UNDEFINED, VREL_LT, VREL_LE, VREL_GT, VREL_GE,\n     VREL_EQ, VREL_NE },\n // VREL_LT\n   { VREL_VARYING, VREL_LT, VREL_LT, VREL_LE, VREL_NE, VREL_VARYING, VREL_LE,\n@@ -1718,3 +1718,26 @@ equiv_relation_iterator::get_name (relation_kind *rel)\n     }\n   return NULL_TREE;\n }\n+\n+#if CHECKING_P\n+#include \"selftest.h\"\n+\n+namespace selftest\n+{\n+void\n+relation_tests ()\n+{\n+  // Verify commutativity of relation_intersect and relation_union.\n+  for (relation_kind r1 = VREL_VARYING; r1 < VREL_PE8;\n+       r1 = relation_kind (r1 + 1))\n+    for (relation_kind r2 = VREL_VARYING; r2 < VREL_PE8;\n+\t r2 = relation_kind (r2 + 1))\n+      {\n+\tASSERT_EQ (relation_intersect (r1, r2), relation_intersect (r2, r1));\n+\tASSERT_EQ (relation_union (r1, r2), relation_union (r2, r1));\n+      }\n+}\n+\n+} // namespace selftest\n+\n+#endif // CHECKING_P"}]}