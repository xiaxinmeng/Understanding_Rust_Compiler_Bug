{"sha": "e92845664c623d7b8cf9bcf41d27183d2081a9fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyODQ1NjY0YzYyM2Q3YjhjZjliY2Y0MWQyNzE4M2QyMDgxYTlmYQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-11-30T14:49:37Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-11-30T14:49:37Z"}, "message": "re PR tree-optimization/18673 (Tree-PRE is O(N^4) in the depth of the dominator tree)\n\n2004-11-29  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/18673\n\n\t* tree-ssa-pre.c: Remove splay-tree.h include.\n\t(bitmap_value_replace_in_set): Fix to add if it does not exist.\n\t(find_or_generate_expression): Remove now-wrong condition.\n\t(create_expression_by_pieces): Fix condition and comment reason\n\tfor it.\n\t(insert_aux): Fix condition and comment reasons for it.\n\tFactor insertion code from here.\n\t(insert_into_preds_of_block): To here.  Fix conditions in factored\n\tfunction and comment reasons for them.\n\nFrom-SVN: r91522", "tree": {"sha": "87e56b92f614c34099494e971e4a652d4970f806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87e56b92f614c34099494e971e4a652d4970f806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e92845664c623d7b8cf9bcf41d27183d2081a9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92845664c623d7b8cf9bcf41d27183d2081a9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e92845664c623d7b8cf9bcf41d27183d2081a9fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92845664c623d7b8cf9bcf41d27183d2081a9fa/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2b60e4039b662779ffc4a59eacb186b5b821cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b60e4039b662779ffc4a59eacb186b5b821cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b60e4039b662779ffc4a59eacb186b5b821cd6"}], "stats": {"total": 211, "additions": 131, "deletions": 80}, "files": [{"sha": "7d524e5b5187b230973df0d51a606516bd6a87c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92845664c623d7b8cf9bcf41d27183d2081a9fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92845664c623d7b8cf9bcf41d27183d2081a9fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e92845664c623d7b8cf9bcf41d27183d2081a9fa", "patch": "@@ -1,3 +1,17 @@\n+2004-11-29  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/18673\n+\t\n+\t* tree-ssa-pre.c: Remove splay-tree.h include.\n+\t(bitmap_value_replace_in_set): Fix to add if it does not exist.\n+\t(find_or_generate_expression): Remove now-wrong condition.\n+\t(create_expression_by_pieces): Fix condition and comment reason\n+\tfor it. \n+\t(insert_aux): Fix condition and comment reasons for it.\n+\tFactor insertion code from here.\n+\t(insert_into_preds_of_block): To here.  Fix conditions in factored\n+\tfunction and comment reasons for them.\n+\n 2004-11-30  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-opt/18607"}, {"sha": "29cd567e9374c638dfed91de51789bf66136f93c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 117, "deletions": 80, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92845664c623d7b8cf9bcf41d27183d2081a9fa/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92845664c623d7b8cf9bcf41d27183d2081a9fa/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=e92845664c623d7b8cf9bcf41d27183d2081a9fa", "patch": "@@ -41,7 +41,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"alloc-pool.h\"\n #include \"tree-pass.h\"\n #include \"flags.h\"\n-#include \"splay-tree.h\"\n #include \"bitmap.h\"\n #include \"langhooks.h\"\n \n@@ -652,6 +651,7 @@ bitmap_set_replace_value (bitmap_set_t set, tree lookfor, tree expr)\n     return;\n   if (!bitmap_set_contains_value (set, lookfor))\n     return;\n+\n   /* The number of expressions having a given value is usually\n      significantly less than the total number of expressions in SET.\n      Thus, rather than check, for each expression in SET, whether it\n@@ -713,13 +713,17 @@ set_equal (value_set_t a, value_set_t b)\n   return true;\n }\n \n-/* Replace an instance of EXPR's VALUE with EXPR in SET.  */\n+/* Replace an instance of EXPR's VALUE with EXPR in SET if it exists,\n+   and add it otherwise. */\n \n static void\n bitmap_value_replace_in_set (bitmap_set_t set, tree expr)\n {\n   tree val = get_value_handle (expr);\n-  bitmap_set_replace_value (set, val, expr);\n+  if (bitmap_set_contains_value (set, val))\n+    bitmap_set_replace_value (set, val, expr);\n+  else\n+    bitmap_insert_into_set (set, expr);\n }\n \n /* Insert EXPR into SET if EXPR's value is not already present in\n@@ -1278,15 +1282,8 @@ compute_antic (void)\n static tree\n find_or_generate_expression (basic_block block, tree expr, tree stmts)\n {\n-  tree genop;\n-  genop = bitmap_find_leader (AVAIL_OUT (block), expr);\n-  /* Depending on the order we process DOM branches in, the value\n-     may not have propagated to all the dom children yet during\n-     this iteration.  In this case, the value will always be in\n-     the NEW_SETS for us already, having been propagated from our\n-     dominator.  */\n-  if (genop == NULL)\n-    genop = bitmap_find_leader (NEW_SETS (block), expr);\n+  tree genop = bitmap_find_leader (AVAIL_OUT (block), expr);\n+\n   /* If it's still NULL, see if it is a complex expression, and if\n      so, generate it recursively, otherwise, abort, because it's\n      not really .  */\n@@ -1374,8 +1371,13 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n     }\n   v = get_value_handle (expr);\n   vn_add (name, v, NULL);\n-  bitmap_insert_into_set (NEW_SETS (block), name);\n-  bitmap_value_insert_into_set (AVAIL_OUT (block), name);\n+\n+  /* The value may already exist in either NEW_SETS, or AVAIL_OUT, because\n+     we are creating the expression by pieces, and this particular piece of\n+     the expression may have been represented.  There is no harm in replacing\n+     here.  */\n+  bitmap_value_replace_in_set (NEW_SETS (block), name); \n+  bitmap_value_replace_in_set (AVAIL_OUT (block), name);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\t\t\t\t    \n       fprintf (dump_file, \"Inserted \");\n@@ -1384,6 +1386,90 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n     }\n   return name;\n }\n+\n+/* Insert the to-be-made-available values of NODE for each predecessor, stored\n+   in AVAIL, into the predecessors of BLOCK, and merge the result with a phi\n+   node, given the same value handle as NODE.  The prefix of the phi node is\n+   given with TMPNAME*/\n+\n+static bool\n+insert_into_preds_of_block (basic_block block, value_set_node_t node,\n+\t\t\t    tree *avail, const char *tmpname)\n+{\n+  tree val = get_value_handle (node->expr);\n+  edge pred;\n+  basic_block bprime;\n+  tree eprime;\n+  edge_iterator ei;\n+  tree type = TREE_TYPE (avail[EDGE_PRED (block, 0)->src->index]);\n+  tree temp;\n+  \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Found partial redundancy for expression \");\n+      print_generic_expr (dump_file, node->expr, 0);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n+  /* Make the necessary insertions.  */\n+  FOR_EACH_EDGE (pred, ei, block->preds)\n+    {\n+      tree stmts = alloc_stmt_list ();\n+      tree builtexpr;\n+      bprime = pred->src;\n+      eprime = avail[bprime->index];\n+      if (BINARY_CLASS_P (eprime)\n+\t  || UNARY_CLASS_P (eprime))\n+\t{\n+\t  builtexpr = create_expression_by_pieces (bprime,\n+\t\t\t\t\t\t   eprime,\n+\t\t\t\t\t\t   stmts);\n+\t  bsi_insert_on_edge (pred, stmts);\n+\t  avail[bprime->index] = builtexpr;\n+\t}\t\t\t      \n+    }\n+  /* Now build a phi for the new variable.  */\n+  temp = create_tmp_var (type, tmpname);\n+  add_referenced_tmp_var (temp);\n+  temp = create_phi_node (temp, block);\n+ \n+  FOR_EACH_EDGE (pred, ei, block->preds)\n+    add_phi_arg (temp, avail[pred->src->index], pred);\n+  \n+  vn_add (PHI_RESULT (temp), val, NULL);\n+  \n+  /* The value should *not* exist in PHI_GEN, or else we wouldn't be doing\n+     this insertion, since we test for the existence of this value in PHI_GEN\n+     before proceeding with the partial redundancy checks in insert_aux.\n+     \n+     The value may exist in AVAIL_OUT, in particular, it could be represented\n+     by the expression we are trying to eliminate, in which case we want the\n+     replacement to occur.  If it's not existing in AVAIL_OUT, we want it\n+     inserted there.\n+     \n+     Similarly, to the PHI_GEN case, the value should not exist in NEW_SETS of\n+     this block, because if it did, it would have existed in our dominator's\n+     AVAIL_OUT, and would have been skipped due to the full redundancy check.\n+  */\n+\n+  bitmap_insert_into_set (PHI_GEN (block),\n+\t\t\t  PHI_RESULT (temp));\n+  bitmap_value_replace_in_set (AVAIL_OUT (block), \n+\t\t\t       PHI_RESULT (temp));\n+  bitmap_insert_into_set (NEW_SETS (block),\n+\t\t\t  PHI_RESULT (temp));\n+  \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Created phi \");\n+      print_generic_expr (dump_file, temp, 0);\n+      fprintf (dump_file, \" in block %d\\n\", block->index);\n+    }\n+  pre_stats.phis++;\n+  return true;\n+}\n+\n+\n       \n /* Perform insertion of partially redundant values.\n    For BLOCK, do the following:\n@@ -1399,6 +1485,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n    3. Recursively call ourselves on the dominator children of BLOCK.\n \n */\n+\n static bool\n insert_aux (basic_block block)\n {\n@@ -1413,12 +1500,18 @@ insert_aux (basic_block block)\n \t{\n \t  unsigned i;\n \t  bitmap_iterator bi;\n-\n \t  bitmap_set_t newset = NEW_SETS (dom);\n-\t  EXECUTE_IF_SET_IN_BITMAP (newset->expressions, 0, i, bi)\n+\t  if (newset)\n \t    {\n-\t      bitmap_insert_into_set (NEW_SETS (block), ssa_name (i));\n-\t      bitmap_value_replace_in_set (AVAIL_OUT (block), ssa_name (i));\n+\t      /* Note that we need to value_replace both NEW_SETS, and\n+\t\t AVAIL_OUT. For both the case of NEW_SETS, the value may be\n+\t\t represented by some non-simple expression here that we want\n+\t\t to replace it with.  */\n+\t      EXECUTE_IF_SET_IN_BITMAP (newset->expressions, 0, i, bi)\n+\t\t{\n+\t\t  bitmap_value_replace_in_set (NEW_SETS (block), ssa_name (i));\n+\t\t  bitmap_value_replace_in_set (AVAIL_OUT (block), ssa_name (i));\n+\t\t}\n \t    }\n \t  if (EDGE_COUNT (block->preds) > 1)\n \t    {\n@@ -1438,7 +1531,7 @@ insert_aux (basic_block block)\n \t\t      tree first_s = NULL;\n \t\t      edge pred;\n \t\t      basic_block bprime;\n-\t\t      tree eprime;\n+\t\t      tree eprime = NULL_TREE;\n \t\t      edge_iterator ei;\n \n \t\t      val = get_value_handle (node->expr);\n@@ -1500,11 +1593,9 @@ insert_aux (basic_block block)\n \t\t\t      by_some = true; \n \t\t\t      if (first_s == NULL)\n \t\t\t\tfirst_s = edoubleprime;\n-\t\t\t      else if (first_s != edoubleprime)\n+\t\t\t      else if (!operand_equal_p (first_s, edoubleprime,\n+\t\t\t\t\t\t\t 0))\n \t\t\t\tall_same = false;\n-\t\t\t      gcc_assert (first_s == edoubleprime \n-\t\t\t\t\t  || !operand_equal_p\n-\t\t\t\t\t      (first_s, edoubleprime, 0));\n \t\t\t    }\n \t\t\t}\n \t\t      /* If we can insert it, it's not the same value\n@@ -1513,63 +1604,9 @@ insert_aux (basic_block block)\n \t\t\t partially redundant.  */\n \t\t      if (!cant_insert && !all_same && by_some)\n \t\t\t{\n-\t\t\t  tree type = TREE_TYPE (avail[EDGE_PRED (block, 0)->src->index]);\n-\t\t\t  tree temp;\n-\t\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t\t    {\n-\t\t\t      fprintf (dump_file, \"Found partial redundancy for expression \");\n-\t\t\t      print_generic_expr (dump_file, node->expr, 0);\n-\t\t\t      fprintf (dump_file, \"\\n\");\n-\t\t\t    }\n-\n-\t\t\t  /* Make the necessary insertions.  */\n-\t\t\t  FOR_EACH_EDGE (pred, ei, block->preds)\n-\t\t\t    {\n-\t\t\t      tree stmts = alloc_stmt_list ();\n-\t\t\t      tree builtexpr;\n-\t\t\t      bprime = pred->src;\n-\t\t\t      eprime = avail[bprime->index];\n-\t\t\t      if (BINARY_CLASS_P (eprime)\n-\t\t\t\t  || UNARY_CLASS_P (eprime))\n-\t\t\t\t{\n-\t\t\t\t  builtexpr = create_expression_by_pieces (bprime,\n-\t\t\t\t\t\t\t\t\t   eprime,\n-\t\t\t\t\t\t\t\t\t   stmts);\n-\t\t\t\t  bsi_insert_on_edge (pred, stmts);\n-\t\t\t\t  avail[bprime->index] = builtexpr;\n-\t\t\t\t}\t\t\t      \n-\t\t\t    }\n-\t\t\t  /* Now build a phi for the new variable.  */\n-\t\t\t  temp = create_tmp_var (type, \"prephitmp\");\n-\t\t\t  add_referenced_tmp_var (temp);\n-\t\t\t  temp = create_phi_node (temp, block);\n-\t\t\t  vn_add (PHI_RESULT (temp), val, NULL);\n-\n-#if 0\n-\t\t\t  if (!set_contains_value (AVAIL_OUT (block), val))\n-\t\t\t    insert_into_set (AVAIL_OUT (block), \n-\t\t\t\t\t     PHI_RESULT (temp));\n-\t\t\t  else\n-#endif\n-\t\t\t    bitmap_value_replace_in_set (AVAIL_OUT (block), \n-\t\t\t\t\t\t\t PHI_RESULT (temp));\n-\t\t\t  FOR_EACH_EDGE (pred, ei, block->preds)\n-\t\t\t    {\n-\t\t\t      add_phi_arg (temp, avail[pred->src->index],\n-\t\t\t\t\t   pred);\n-\t\t\t    }\n-\t\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t\t    {\n-\t\t\t      fprintf (dump_file, \"Created phi \");\n-\t\t\t      print_generic_expr (dump_file, temp, 0);\n-\t\t\t      fprintf (dump_file, \" in block %d\\n\", block->index);\n-\t\t\t    }\n-\t\t\t  pre_stats.phis++;\n-\t\t\t  new_stuff = true;\n-\t\t\t  bitmap_insert_into_set (NEW_SETS (block),\n-\t\t\t\t\t\t  PHI_RESULT (temp));\n-\t\t\t  bitmap_insert_into_set (PHI_GEN (block),\n-\t\t\t\t\t\t  PHI_RESULT (temp));\n+ \t\t\t  if (insert_into_preds_of_block (block, node, avail, \n+ \t\t\t\t\t\t\t  \"prephitmp\"))\n+ \t\t\t    new_stuff = true;\n \t\t\t}\n \n \t\t      free (avail);"}]}