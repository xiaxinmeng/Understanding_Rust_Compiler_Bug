{"sha": "e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "node_id": "C_kwDOANBUbNoAKGU3ZTY1YmJkZjNhMDZhN2QwMGVkN2RhNGZmOGViYjE2MDMxZWQ2YzM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-24T16:31:49Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-24T16:31:49Z"}, "message": "Allow references to arrays for ArrayIndexExpr accessor's\n\nWhen we have an array-index expr rust allows the array reference to be a\nreference and the compiler is meant to add in the required implicit\nindirection. This checks for this senario and injects the indirection\nduring code-generation.\n\nFixes #815", "tree": {"sha": "f75154244536a76f62a6cc4a89046ffd95bda6c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f75154244536a76f62a6cc4a89046ffd95bda6c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f967dd27790a16837b55e6d2c5ee01dcba096f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f967dd27790a16837b55e6d2c5ee01dcba096f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f967dd27790a16837b55e6d2c5ee01dcba096f53"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "46d501a58596c3f178161621588b4d30aa57b5b1", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "patch": "@@ -390,10 +390,32 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::ArrayIndexExpr &expr) override\n   {\n-    tree array = CompileExpr::Compile (expr.get_array_expr (), ctx);\n+    tree array_reference = CompileExpr::Compile (expr.get_array_expr (), ctx);\n     tree index = CompileExpr::Compile (expr.get_index_expr (), ctx);\n+\n+    // lets check if the array is a reference type then we can add an\n+    // indirection if required\n+    TyTy::BaseType *array_expr_ty = nullptr;\n+    bool ok = ctx->get_tyctx ()->lookup_type (\n+      expr.get_array_expr ()->get_mappings ().get_hirid (), &array_expr_ty);\n+    rust_assert (ok);\n+\n+    // do we need to add an indirect reference\n+    if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n+      {\n+\tTyTy::ReferenceType *r\n+\t  = static_cast<TyTy::ReferenceType *> (array_expr_ty);\n+\tTyTy::BaseType *tuple_type = r->get_base ();\n+\ttree array_tyty = TyTyResolveCompile::compile (ctx, tuple_type);\n+\n+\tarray_reference\n+\t  = ctx->get_backend ()->indirect_expression (array_tyty,\n+\t\t\t\t\t\t      array_reference, true,\n+\t\t\t\t\t\t      expr.get_locus ());\n+      }\n+\n     translated\n-      = ctx->get_backend ()->array_index_expression (array, index,\n+      = ctx->get_backend ()->array_index_expression (array_reference, index,\n \t\t\t\t\t\t     expr.get_locus ());\n   }\n "}, {"sha": "8c34b6c776abfc5e5b4634a147d7ecac62832e76", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "patch": "@@ -929,24 +929,27 @@ class TypeCheckExpr : public TypeCheckBase\n \n     auto resolved_index_expr\n       = size_ty->unify (TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n-    if (resolved_index_expr == nullptr)\n+    if (resolved_index_expr->get_kind () != TyTy::TypeKind::ERROR)\n       {\n-\trust_error_at (expr.get_index_expr ()->get_locus (),\n-\t\t       \"Type Resolver failure in Index for ArrayIndexExpr\");\n-\treturn;\n+\t// allow the index expr to fail lets just continue on\n+\tcontext->insert_type (expr.get_index_expr ()->get_mappings (),\n+\t\t\t      resolved_index_expr);\n       }\n-    context->insert_type (expr.get_index_expr ()->get_mappings (),\n-\t\t\t  resolved_index_expr);\n \n-    // resolve the array reference\n-    expr.get_array_expr ()->accept_vis (*this);\n-    if (infered == nullptr)\n+    auto array_expr_ty\n+      = TypeCheckExpr::Resolve (expr.get_array_expr (), inside_loop);\n+    if (array_expr_ty->get_kind () == TyTy::TypeKind::ERROR)\n+      return;\n+    else if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n       {\n-\trust_error_at (expr.get_index_expr ()->get_locus (),\n-\t\t       \"failed to resolve array reference expression\");\n-\treturn;\n+\t// lets try and deref it since rust allows this\n+\tauto ref = static_cast<TyTy::ReferenceType *> (array_expr_ty);\n+\tauto base = ref->get_base ();\n+\tif (base->get_kind () == TyTy::TypeKind::ARRAY)\n+\t  array_expr_ty = base;\n       }\n-    else if (infered->get_kind () != TyTy::TypeKind::ARRAY)\n+\n+    if (array_expr_ty->get_kind () != TyTy::TypeKind::ARRAY)\n       {\n \trust_error_at (expr.get_index_expr ()->get_locus (),\n \t\t       \"expected an ArrayType got [%s]\",\n@@ -955,7 +958,8 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    TyTy::ArrayType *array_type = static_cast<TyTy::ArrayType *> (infered);\n+    TyTy::ArrayType *array_type\n+      = static_cast<TyTy::ArrayType *> (array_expr_ty);\n     infered = array_type->get_element_type ()->clone ();\n   }\n "}, {"sha": "a62c6ca69c7a6e945595e372a3519c644520c04e", "filename": "gcc/testsuite/rust/compile/array3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs?ref=e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "patch": "@@ -0,0 +1,5 @@\n+fn foo(state: &mut [u32; 16], a: usize) {\n+    // { dg-warning \"function is never used: .foo.\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name .foo.\" \"\" { target *-*-* } .-2 }\n+    state[a] = 1;\n+}"}]}