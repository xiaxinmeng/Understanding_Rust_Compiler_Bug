{"sha": "2f93a2a03a343a29f614a530d7657f1ed6347ed5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY5M2EyYTAzYTM0M2EyOWY2MTRhNTMwZDc2NTdmMWVkNjM0N2VkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-05T17:26:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-05T18:01:26Z"}, "message": "libstdc++: Use non-throwing increment in recursive_directory_iterator [PR 97731]\n\nAs described in the PR, the recursive_directory_iterator constructor\ncalls advance(ec), but ec is a pointer so it calls _Dir::advance(bool).\nThe intention was to either call advance() or advance(*ec) depending\nwhether the pointer is null or not.\n\nThis fixes the bug and renames the parameter to ecptr to make similar\nmistakes less likely in future.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97731\n\t* src/filesystem/dir.cc (recursive_directory_iterator): Call the\n\tright overload of _Dir::advance.\n\t* testsuite/experimental/filesystem/iterators/97731.cc: New test.", "tree": {"sha": "123d81efebe07a7e284cb2bc6a3dc134e9ff5a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/123d81efebe07a7e284cb2bc6a3dc134e9ff5a35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f93a2a03a343a29f614a530d7657f1ed6347ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f93a2a03a343a29f614a530d7657f1ed6347ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f93a2a03a343a29f614a530d7657f1ed6347ed5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f93a2a03a343a29f614a530d7657f1ed6347ed5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "5109897abbde7953285d0b0fdff0d636a89e13bf", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f93a2a03a343a29f614a530d7657f1ed6347ed5/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f93a2a03a343a29f614a530d7657f1ed6347ed5/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=2f93a2a03a343a29f614a530d7657f1ed6347ed5", "patch": "@@ -187,31 +187,35 @@ struct fs::recursive_directory_iterator::_Dir_stack : std::stack<_Dir>\n \n fs::recursive_directory_iterator::\n recursive_directory_iterator(const path& p, directory_options options,\n-                             error_code* ec)\n+                             error_code* ecptr)\n : _M_options(options), _M_pending(true)\n {\n-  if (ec)\n-    ec->clear();\n   if (posix::DIR* dirp = posix::opendir(p.c_str()))\n     {\n+      if (ecptr)\n+\tecptr->clear();\n       auto sp = std::make_shared<_Dir_stack>();\n       sp->push(_Dir{ dirp, p });\n-      if (sp->top().advance(ec))\n+      if (ecptr ? sp->top().advance(*ecptr) : sp->top().advance())\n \t_M_dirs.swap(sp);\n     }\n   else\n     {\n       const int err = errno;\n       if (err == EACCES\n \t  && is_set(options, fs::directory_options::skip_permission_denied))\n-\treturn;\n+\t{\n+\t  if (ecptr)\n+\t    ecptr->clear();\n+\t  return;\n+\t}\n \n-      if (!ec)\n+      if (!ecptr)\n \t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\n \t      \"recursive directory iterator cannot open directory\", p,\n \t      std::error_code(err, std::generic_category())));\n \n-      ec->assign(err, std::generic_category());\n+      ecptr->assign(err, std::generic_category());\n     }\n }\n "}, {"sha": "c6a9d5663fe239dc3dbe58ae22fe27798dfd1781", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/97731.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f93a2a03a343a29f614a530d7657f1ed6347ed5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2F97731.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f93a2a03a343a29f614a530d7657f1ed6347ed5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2F97731.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2F97731.cc?ref=2f93a2a03a343a29f614a530d7657f1ed6347ed5", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-DUSE_FILESYSTEM_TS -lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <cerrno>\n+#include <testsuite_hooks.h>\n+\n+bool used_custom_readdir = false;\n+\n+extern \"C\" void* readdir(void*)\n+{\n+  used_custom_readdir = true;\n+  errno = EIO;\n+  return nullptr;\n+}\n+\n+void\n+test01()\n+{\n+  using std::experimental::filesystem::recursive_directory_iterator;\n+  std::error_code ec;\n+  recursive_directory_iterator it(\".\", ec);\n+  if (used_custom_readdir)\n+    VERIFY( ec.value() == EIO );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}