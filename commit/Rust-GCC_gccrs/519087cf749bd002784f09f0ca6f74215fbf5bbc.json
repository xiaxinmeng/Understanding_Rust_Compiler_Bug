{"sha": "519087cf749bd002784f09f0ca6f74215fbf5bbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5MDg3Y2Y3NDliZDAwMjc4NGYwOWYwY2E2Zjc0MjE1ZmJmNWJiYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-07-16T13:36:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-07-16T13:36:27Z"}, "message": "gimplify.c (mostly_copy_tree_r): Revert latest change.\n\n\t* gimplify.c (mostly_copy_tree_r): Revert latest change.\n\t(gimplify_save_expr): Likewise.\n\nFrom-SVN: r250238", "tree": {"sha": "340c54dbda6a6049126064171881c3bc6d78bc4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/340c54dbda6a6049126064171881c3bc6d78bc4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519087cf749bd002784f09f0ca6f74215fbf5bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519087cf749bd002784f09f0ca6f74215fbf5bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519087cf749bd002784f09f0ca6f74215fbf5bbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519087cf749bd002784f09f0ca6f74215fbf5bbc/comments", "author": null, "committer": null, "parents": [{"sha": "e1813e4b85ca24a49caa3d80cea025dd172ff770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1813e4b85ca24a49caa3d80cea025dd172ff770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1813e4b85ca24a49caa3d80cea025dd172ff770"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "4d04f54de103b02176c0e738dc7d80988ea52ee4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519087cf749bd002784f09f0ca6f74215fbf5bbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519087cf749bd002784f09f0ca6f74215fbf5bbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=519087cf749bd002784f09f0ca6f74215fbf5bbc", "patch": "@@ -1,3 +1,8 @@\n+2017-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimplify.c (mostly_copy_tree_r): Revert latest change.\n+\t(gimplify_save_expr): Likewise.\n+\n 2017-07-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-visibility.c (function_and_variable_visibility): Fix pasto."}, {"sha": "641a8210dad66075fe2a351e7f1a7c8893619aab", "filename": "gcc/gimplify.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519087cf749bd002784f09f0ca6f74215fbf5bbc/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519087cf749bd002784f09f0ca6f74215fbf5bbc/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=519087cf749bd002784f09f0ca6f74215fbf5bbc", "patch": "@@ -818,7 +818,12 @@ mostly_copy_tree_r (tree *tp, int *walk_subtrees, void *data)\n   /* Stop at types, decls, constants like copy_tree_r.  */\n   else if (TREE_CODE_CLASS (code) == tcc_type\n \t   || TREE_CODE_CLASS (code) == tcc_declaration\n-\t   || TREE_CODE_CLASS (code) == tcc_constant)\n+\t   || TREE_CODE_CLASS (code) == tcc_constant\n+\t   /* We can't do anything sensible with a BLOCK used as an\n+\t      expression, but we also can't just die when we see it\n+\t      because of non-expression uses.  So we avert our eyes\n+\t      and cross our fingers.  Silly Java.  */\n+\t   || code == BLOCK)\n     *walk_subtrees = 0;\n \n   /* Cope with the statement expression extension.  */\n@@ -5802,10 +5807,19 @@ gimplify_save_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n   /* If the SAVE_EXPR has not been resolved, then evaluate it once.  */\n   if (!SAVE_EXPR_RESOLVED_P (*expr_p))\n     {\n-      gcc_assert (TREE_TYPE (val) != void_type_node);\n-      /* The temporary may not be an SSA name as later abnormal and EH\n-\t control flow may invalidate use/def domination.  */\n-      val = get_initialized_tmp_var (val, pre_p, post_p, false);\n+      /* The operand may be a void-valued expression such as SAVE_EXPRs\n+\t generated by the Java frontend for class initialization.  It is\n+\t being executed only for its side-effects.  */\n+      if (TREE_TYPE (val) == void_type_node)\n+\t{\n+\t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n+\t\t\t       is_gimple_stmt, fb_none);\n+\t  val = NULL;\n+\t}\n+      else\n+\t/* The temporary may not be an SSA name as later abnormal and EH\n+\t   control flow may invalidate use/def domination.  */\n+\tval = get_initialized_tmp_var (val, pre_p, post_p, false);\n \n       TREE_OPERAND (*expr_p, 0) = val;\n       SAVE_EXPR_RESOLVED_P (*expr_p) = 1;"}]}