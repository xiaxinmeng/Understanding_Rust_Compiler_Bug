{"sha": "a312407bd715647f7c11b67e0a52effc94d0f15d", "node_id": "C_kwDOANBUbNoAKGEzMTI0MDdiZDcxNTY0N2Y3YzExYjY3ZTBhNTJlZmZjOTRkMGYxNWQ", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-06-20T18:59:55Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-06-26T20:01:49Z"}, "message": "Fortran: handle explicit-shape specs with constant bounds [PR105954]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/105954\n\t* decl.cc (variable_decl): Adjust upper bounds for explicit-shape\n\tspecs with constant bound expressions to ensure non-negative\n\textents.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/105954\n\t* gfortran.dg/pr105954.f90: New test.", "tree": {"sha": "959a183bd9b7a040e8410e88798bdacbacbd7b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/959a183bd9b7a040e8410e88798bdacbacbd7b72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a312407bd715647f7c11b67e0a52effc94d0f15d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a312407bd715647f7c11b67e0a52effc94d0f15d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a312407bd715647f7c11b67e0a52effc94d0f15d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a312407bd715647f7c11b67e0a52effc94d0f15d/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff01849dccd4355ac6491c04eff8b2e39ecee70e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff01849dccd4355ac6491c04eff8b2e39ecee70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff01849dccd4355ac6491c04eff8b2e39ecee70e"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "26ff54d46848bf07aa2d7e0ab3d42f4b0fe8cd9d", "filename": "gcc/fortran/decl.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a312407bd715647f7c11b67e0a52effc94d0f15d/gcc%2Ffortran%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a312407bd715647f7c11b67e0a52effc94d0f15d/gcc%2Ffortran%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.cc?ref=a312407bd715647f7c11b67e0a52effc94d0f15d", "patch": "@@ -2775,6 +2775,18 @@ variable_decl (int elem)\n \t\t  else\n \t\t    gfc_free_expr (n);\n \t\t}\n+\t      /* For an explicit-shape spec with constant bounds, ensure\n+\t\t that the effective upper bound is not lower than the\n+\t\t respective lower bound minus one.  Otherwise adjust it so\n+\t\t that the extent is trivially derived to be zero.  */\n+\t      if (as->lower[i]->expr_type == EXPR_CONSTANT\n+\t\t  && as->upper[i]->expr_type == EXPR_CONSTANT\n+\t\t  && as->lower[i]->ts.type == BT_INTEGER\n+\t\t  && as->upper[i]->ts.type == BT_INTEGER\n+\t\t  && mpz_cmp (as->upper[i]->value.integer,\n+\t\t\t      as->lower[i]->value.integer) < 0)\n+\t\tmpz_sub_ui (as->upper[i]->value.integer,\n+\t\t\t    as->lower[i]->value.integer, 1);\n \t    }\n \t}\n     }"}, {"sha": "89004bf9aa752e85fa16f735af9dbc9333e3504e", "filename": "gcc/testsuite/gfortran.dg/pr105954.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a312407bd715647f7c11b67e0a52effc94d0f15d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr105954.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a312407bd715647f7c11b67e0a52effc94d0f15d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr105954.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr105954.f90?ref=a312407bd715647f7c11b67e0a52effc94d0f15d", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+! PR fortran/105954 - ICE in gfc_element_size, at fortran/target-memory.cc:132\n+! Contributed by G.Steinmetz\n+\n+program p\n+  use iso_c_binding, only: c_float, c_sizeof\n+  implicit none\n+  integer, parameter :: n = -99\n+  type t\n+     real :: b(3,7:n)\n+  end type\n+  type, bind(c) :: u\n+     real(c_float) :: b(3,7:n)\n+  end type\n+  type(t) :: d\n+  type(u) :: e\n+  integer, parameter :: k = storage_size(d)\n+  integer, parameter :: m = sizeof(d)\n+  integer, parameter :: l = c_sizeof(e)\n+  if (k /= 0) stop 1\n+  if (m /= 0) stop 2\n+  if (l /= 0) stop 3\n+end\n+\n+! { dg-final { scan-tree-dump-not \"_gfortran_stop_numeric\" \"original\" } }"}]}