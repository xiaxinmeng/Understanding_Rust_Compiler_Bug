{"sha": "bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiNTM1MTZkMGE1ODEyMGYxZDNiMjRhYWJjMDlhM2Q3ZTY0NDNhYQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2010-07-03T00:31:43Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2010-07-03T00:31:43Z"}, "message": "neon.md (UNSPEC_VABA): Delete.\n\n2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Julian Brown  <julian@codesourcery.com>\n\n\tgcc/\n\t* config/arm/neon.md (UNSPEC_VABA): Delete.\n\t(UNSPEC_VABAL): Delete.\n\t(UNSPEC_VABS): Delete.\n\t(UNSPEC_VMUL_N): Delete.\n\t(adddi3_neon): New.\n\t(subdi3_neon): New.\n\t(mul<mode>3add<mode>_neon): Make the pattern named.\n\t(mul<mode>3neg<mode>add<mode>_neon): Likewise.\n\t(neon_vadd<mode>): Replace with define_expand, and move the remaining\n\tunspec parts...\n\t(neon_vadd<mode>_unspec): ...to this.\n\t(neon_vmla<mode>, neon_vmla<mode>_unspec): Likewise.\n\t(neon_vlms<mode>, neon_vmls<mode>_unspec): Likewise.\n\t(neon_vsub<mode>, neon_vsub<mode>_unspec): Likewise.\n\t(neon_vaba<mode>): Rewrite in terms of vabd.\n\t(neon_vabal<mode>): Rewrite in terms of vabdl.\n\t(neon_vabs<mode>): Rewrite without unspec.\n\t* config/arm/arm.md (*arm_adddi3): Disable for TARGET_NEON.\n\t(*arm_subdi3): Likewise.\n\t* config/arm/neon.ml (Vadd, Vsub): Split out 64-bit variants and add\n\tNo_op attribute to disable assembly output checks.\n\t* config/arm/arm_neon.h: Regenerated.\n\t* doc/arm-neon-intrinsics.texi: Regenerated.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/neon/vadds64.c: Regenerated.\n\t* gcc.target/arm/neon/vaddu64.c: Regenerated.\n\t* gcc.target/arm/neon/vsubs64.c: Regenerated.\n\t* gcc.target/arm/neon/vsubu64.c: Regenerated.\n\t* gcc.target/arm/neon-vmla-1.c: Add -ffast-math to options.\n\t* gcc.target/arm/neon-vmls-1.c: Likewise.\n\t* gcc.target/arm/neon-vsubs64.c: New execution test.\n\t* gcc.target/arm/neon-vsubu64.c: New execution test.\n\t* gcc.target/arm/neon-vadds64.c: New execution test.\n\t* gcc.target/arm/neon-vaddu64.c: New execution test.\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\n\nFrom-SVN: r161762", "tree": {"sha": "716708677aed26e5c65cf3ff167cec3906175513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/716708677aed26e5c65cf3ff167cec3906175513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b614e5669ebff10b7ec9b5fff4e539ab1416e38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b614e5669ebff10b7ec9b5fff4e539ab1416e38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b614e5669ebff10b7ec9b5fff4e539ab1416e38b"}], "stats": {"total": 409, "additions": 318, "deletions": 91}, "files": [{"sha": "3943f8f57ef3f87c57d439c3a0aaccb1ab68bf08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -1,3 +1,30 @@\n+2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/neon.md (UNSPEC_VABA): Delete.\n+\t(UNSPEC_VABAL): Delete.\n+\t(UNSPEC_VABS): Delete.\n+\t(UNSPEC_VMUL_N): Delete.\n+\t(adddi3_neon): New.\n+\t(subdi3_neon): New.\n+\t(mul<mode>3add<mode>_neon): Make the pattern named.\n+\t(mul<mode>3neg<mode>add<mode>_neon): Likewise.\n+\t(neon_vadd<mode>): Replace with define_expand, and move the remaining\n+\tunspec parts...\n+\t(neon_vadd<mode>_unspec): ...to this.\n+\t(neon_vmla<mode>, neon_vmla<mode>_unspec): Likewise.\n+\t(neon_vlms<mode>, neon_vmls<mode>_unspec): Likewise.\n+\t(neon_vsub<mode>, neon_vsub<mode>_unspec): Likewise.\n+\t(neon_vaba<mode>): Rewrite in terms of vabd.\n+\t(neon_vabal<mode>): Rewrite in terms of vabdl.\n+\t(neon_vabs<mode>): Rewrite without unspec.\n+\t* config/arm/arm.md (*arm_adddi3): Disable for TARGET_NEON.\n+\t(*arm_subdi3): Likewise.\n+\t* config/arm/neon.ml (Vadd, Vsub): Split out 64-bit variants and add\n+\tNo_op attribute to disable assembly output checks.\n+\t* config/arm/arm_neon.h: Regenerated.\n+\t* doc/arm-neon-intrinsics.texi: Regenerated.\n+\n 2010-07-02  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-split.c (split_function): For aggregate values set return_slot_opt;"}, {"sha": "fbbe7f42606f971bf2083c516bb02ec2c165a496", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -495,9 +495,10 @@\n \t(plus:DI (match_operand:DI 1 \"s_register_operand\" \"%0, 0\")\n \t\t (match_operand:DI 2 \"s_register_operand\" \"r,  0\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_MAVERICK)\"\n+  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_MAVERICK) && !TARGET_NEON\"\n   \"#\"\n-  \"TARGET_32BIT && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\n+   && ! (TARGET_NEON && IS_VFP_REGNUM (REGNO (operands[0])))\"\n   [(parallel [(set (reg:CC_C CC_REGNUM)\n \t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n \t\t\t\t (match_dup 1)))\n@@ -994,7 +995,7 @@\n \t(minus:DI (match_operand:DI 1 \"s_register_operand\" \"0,r,0\")\n \t\t  (match_operand:DI 2 \"s_register_operand\" \"r,0,0\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && !TARGET_NEON\"\n   \"subs\\\\t%Q0, %Q1, %Q2\\;sbc\\\\t%R0, %R1, %R2\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")]"}, {"sha": "9cba0a90a0f61a165c3d259c8cbe942086d8e7a8", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -414,12 +414,6 @@ vadd_s32 (int32x2_t __a, int32x2_t __b)\n   return (int32x2_t)__builtin_neon_vaddv2si (__a, __b, 1);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vadd_s64 (int64x1_t __a, int64x1_t __b)\n-{\n-  return (int64x1_t)__builtin_neon_vadddi (__a, __b, 1);\n-}\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vadd_f32 (float32x2_t __a, float32x2_t __b)\n {\n@@ -444,6 +438,12 @@ vadd_u32 (uint32x2_t __a, uint32x2_t __b)\n   return (uint32x2_t)__builtin_neon_vaddv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vadd_s64 (int64x1_t __a, int64x1_t __b)\n+{\n+  return (int64x1_t)__builtin_neon_vadddi (__a, __b, 1);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vadd_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n@@ -1368,12 +1368,6 @@ vsub_s32 (int32x2_t __a, int32x2_t __b)\n   return (int32x2_t)__builtin_neon_vsubv2si (__a, __b, 1);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vsub_s64 (int64x1_t __a, int64x1_t __b)\n-{\n-  return (int64x1_t)__builtin_neon_vsubdi (__a, __b, 1);\n-}\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vsub_f32 (float32x2_t __a, float32x2_t __b)\n {\n@@ -1398,6 +1392,12 @@ vsub_u32 (uint32x2_t __a, uint32x2_t __b)\n   return (uint32x2_t)__builtin_neon_vsubv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vsub_s64 (int64x1_t __a, int64x1_t __b)\n+{\n+  return (int64x1_t)__builtin_neon_vsubdi (__a, __b, 1);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vsub_u64 (uint64x1_t __a, uint64x1_t __b)\n {"}, {"sha": "48965ca2e9b5bb905555dde1b001d21ae1895c9c", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 163, "deletions": 56, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -22,11 +22,8 @@\n (define_constants\n   [(UNSPEC_ASHIFT_SIGNED\t65)\n    (UNSPEC_ASHIFT_UNSIGNED\t66)\n-   (UNSPEC_VABA\t\t\t67)\n-   (UNSPEC_VABAL\t\t68)\n    (UNSPEC_VABD\t\t\t69)\n    (UNSPEC_VABDL\t\t70)\n-   (UNSPEC_VABS\t\t\t71)\n    (UNSPEC_VADD\t\t\t72)\n    (UNSPEC_VADDHN\t\t73)\n    (UNSPEC_VADDL\t\t74)\n@@ -75,7 +72,6 @@\n    (UNSPEC_VMULL\t\t128)\n    (UNSPEC_VMUL_LANE\t\t129)\n    (UNSPEC_VMULL_LANE\t\t130)\n-   (UNSPEC_VMUL_N\t\t131)\n    (UNSPEC_VPADAL\t\t135)\n    (UNSPEC_VPADD\t\t136)\n    (UNSPEC_VPADDL\t\t137)\n@@ -816,11 +812,8 @@\n \n ;; Doubleword and quadword arithmetic.\n \n-;; NOTE: vadd/vsub and some other instructions also support 64-bit integer\n-;; element size, which we could potentially use for \"long long\" operations. We\n-;; don't want to do this at present though, because moving values from the\n-;; vector unit to the ARM core is currently slow and 64-bit addition (etc.) is\n-;; easy to do with ARM instructions anyway.\n+;; NOTE: some other instructions also support 64-bit integer\n+;; element size, which we could potentially use for \"long long\" operations.\n \n (define_insn \"*add<mode>3_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n@@ -836,6 +829,26 @@\n                     (const_string \"neon_int_1\")))]\n )\n \n+(define_insn \"adddi3_neon\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r\")\n+        (plus:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0\")\n+                 (match_operand:DI 2 \"s_register_operand\" \"w,r,0\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_NEON\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0: return \"vadd.i64\\t%P0, %P1, %P2\";\n+    case 1: return \"#\";\n+    case 2: return \"#\";\n+    default: gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"neon_type\" \"neon_int_1,*,*\")\n+   (set_attr \"conds\" \"*,clob,clob\")\n+   (set_attr \"length\" \"*,8,8\")]\n+)\n+\n (define_insn \"*sub<mode>3_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (minus:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n@@ -850,6 +863,27 @@\n                     (const_string \"neon_int_2\")))]\n )\n \n+(define_insn \"subdi3_neon\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?&r\")\n+        (minus:DI (match_operand:DI 1 \"s_register_operand\" \"w,0,r,0\")\n+                  (match_operand:DI 2 \"s_register_operand\" \"w,r,0,0\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_NEON\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0: return \"vsub.i64\\t%P0, %P1, %P2\";\n+    case 1: /* fall through */ \n+    case 2: /* fall through */\n+    case 3: return  \"subs\\\\t%Q0, %Q1, %Q2\\;sbc\\\\t%R0, %R1, %R2\";\n+    default: gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"neon_type\" \"neon_int_2,*,*,*\")\n+   (set_attr \"conds\" \"*,clob,clob,clob\")\n+   (set_attr \"length\" \"*,8,8,8\")]\n+)\n+\n (define_insn \"*mul<mode>3_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (mult:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n@@ -871,7 +905,7 @@\n                                     (const_string \"neon_mul_qqq_8_16_32_ddd_32\")))))]\n )\n \n-(define_insn \"*mul<mode>3add<mode>_neon\"\n+(define_insn \"mul<mode>3add<mode>_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (plus:VDQ (mult:VDQ (match_operand:VDQ 2 \"s_register_operand\" \"w\")\n                             (match_operand:VDQ 3 \"s_register_operand\" \"w\"))\n@@ -893,7 +927,7 @@\n                                     (const_string \"neon_mla_qqq_32_qqd_32_scalar\")))))]\n )\n \n-(define_insn \"*mul<mode>3neg<mode>add<mode>_neon\"\n+(define_insn \"mul<mode>3neg<mode>add<mode>_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (minus:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"0\")\n                    (mult:VDQ (match_operand:VDQ 2 \"s_register_operand\" \"w\")\n@@ -1718,11 +1752,37 @@\n \n ; good for plain vadd, vaddq.\n \n-(define_insn \"neon_vadd<mode>\"\n+(define_expand \"neon_vadd<mode>\"\n+  [(match_operand:VDQX 0 \"s_register_operand\" \"=w\")\n+   (match_operand:VDQX 1 \"s_register_operand\" \"w\")\n+   (match_operand:VDQX 2 \"s_register_operand\" \"w\")\n+   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+  \"TARGET_NEON\"\n+{\n+  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+    emit_insn (gen_add<mode>3 (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_neon_vadd<mode>_unspec (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n+  DONE;\n+})\n+\n+; Note that NEON operations don't support the full IEEE 754 standard: in\n+; particular, denormal values are flushed to zero.  This means that GCC cannot\n+; use those instructions for autovectorization, etc. unless\n+; -funsafe-math-optimizations is in effect (in which case flush-to-zero\n+; behaviour is permissible).  Intrinsic operations (provided by the arm_neon.h\n+; header) must work in either case: if -funsafe-math-optimizations is given,\n+; intrinsics expand to \"canonical\" RTL where possible, otherwise intrinsics\n+; expand to unspecs (which may potentially limit the extent to which they might\n+; be optimized by generic code).\n+\n+; Used for intrinsics when flag_unsafe_math_optimizations is false.\n+\n+(define_insn \"neon_vadd<mode>_unspec\"\n   [(set (match_operand:VDQX 0 \"s_register_operand\" \"=w\")\n         (unspec:VDQX [(match_operand:VDQX 1 \"s_register_operand\" \"w\")\n-\t\t      (match_operand:VDQX 2 \"s_register_operand\" \"w\")\n-                      (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+\t\t      (match_operand:VDQX 2 \"s_register_operand\" \"w\")]\n                      UNSPEC_VADD))]\n   \"TARGET_NEON\"\n   \"vadd.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n@@ -1795,6 +1855,8 @@\n   [(set_attr \"neon_type\" \"neon_int_4\")]\n )\n \n+;; We cannot replace this unspec with mul<mode>3 because of the odd \n+;; polynomial multiplication case that can specified by operand 3.\n (define_insn \"neon_vmul<mode>\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n         (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"w\")\n@@ -1818,13 +1880,31 @@\n                                     (const_string \"neon_mul_qqq_8_16_32_ddd_32\")))))]\n )\n \n-(define_insn \"neon_vmla<mode>\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n-        (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-\t\t      (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n-\t\t      (match_operand:VDQW 3 \"s_register_operand\" \"w\")\n-                     (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-                    UNSPEC_VMLA))]\n+(define_expand \"neon_vmla<mode>\"\n+  [(match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n+   (match_operand:VDQW 1 \"s_register_operand\" \"0\")\n+   (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n+   (match_operand:VDQW 3 \"s_register_operand\" \"w\")\n+   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+  \"TARGET_NEON\"\n+{\n+  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+    emit_insn (gen_mul<mode>3add<mode>_neon (operands[0], operands[1],\n+\t\t\t\t             operands[2], operands[3]));\n+  else\n+    emit_insn (gen_neon_vmla<mode>_unspec (operands[0], operands[1],\n+\t\t\t\t\t   operands[2], operands[3]));\n+  DONE;\n+})\n+\n+; Used for intrinsics when flag_unsafe_math_optimizations is false.\n+\n+(define_insn \"neon_vmla<mode>_unspec\"\n+  [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n+\t(unspec:VDQ [(match_operand:VDQ 1 \"s_register_operand\" \"0\")\n+\t\t     (match_operand:VDQ 2 \"s_register_operand\" \"w\")\n+\t\t     (match_operand:VDQ 3 \"s_register_operand\" \"w\")]\n+\t\t    UNSPEC_VMLA))]\n   \"TARGET_NEON\"\n   \"vmla.<V_if_elem>\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set (attr \"neon_type\")\n@@ -1857,13 +1937,31 @@\n                    (const_string \"neon_mla_ddd_32_qqd_16_ddd_32_scalar_qdd_64_32_long_scalar_qdd_64_32_long\")))]\n )\n \n-(define_insn \"neon_vmls<mode>\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n-        (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-\t\t      (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n-\t\t      (match_operand:VDQW 3 \"s_register_operand\" \"w\")\n-                     (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-                    UNSPEC_VMLS))]\n+(define_expand \"neon_vmls<mode>\"\n+  [(match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n+   (match_operand:VDQW 1 \"s_register_operand\" \"0\")\n+   (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n+   (match_operand:VDQW 3 \"s_register_operand\" \"w\")\n+   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+  \"TARGET_NEON\"\n+{\n+  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+    emit_insn (gen_mul<mode>3neg<mode>add<mode>_neon (operands[0],\n+\t\t operands[1], operands[2], operands[3]));\n+  else\n+    emit_insn (gen_neon_vmls<mode>_unspec (operands[0], operands[1],\n+\t\t\t\t\t   operands[2], operands[3]));\n+  DONE;\n+})\n+\n+; Used for intrinsics when flag_unsafe_math_optimizations is false.\n+\n+(define_insn \"neon_vmls<mode>_unspec\"\n+  [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n+\t(unspec:VDQ [(match_operand:VDQ 1 \"s_register_operand\" \"0\")\n+\t\t     (match_operand:VDQ 2 \"s_register_operand\" \"w\")\n+\t\t     (match_operand:VDQ 3 \"s_register_operand\" \"w\")]\n+\t\t    UNSPEC_VMLS))]\n   \"TARGET_NEON\"\n   \"vmls.<V_if_elem>\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set (attr \"neon_type\")\n@@ -1973,11 +2071,27 @@\n                    (const_string \"neon_mul_qdd_64_32_long_qqd_16_ddd_32_scalar_64_32_long_scalar\")))]\n )\n \n-(define_insn \"neon_vsub<mode>\"\n+(define_expand \"neon_vsub<mode>\"\n+  [(match_operand:VDQX 0 \"s_register_operand\" \"=w\")\n+   (match_operand:VDQX 1 \"s_register_operand\" \"w\")\n+   (match_operand:VDQX 2 \"s_register_operand\" \"w\")\n+   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+  \"TARGET_NEON\"\n+{\n+  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+    emit_insn (gen_sub<mode>3 (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_neon_vsub<mode>_unspec (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n+  DONE;\n+})\n+\n+; Used for intrinsics when flag_unsafe_math_optimizations is false.\n+\n+(define_insn \"neon_vsub<mode>_unspec\"\n   [(set (match_operand:VDQX 0 \"s_register_operand\" \"=w\")\n         (unspec:VDQX [(match_operand:VDQX 1 \"s_register_operand\" \"w\")\n-\t\t      (match_operand:VDQX 2 \"s_register_operand\" \"w\")\n-                      (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+\t\t      (match_operand:VDQX 2 \"s_register_operand\" \"w\")]\n                      UNSPEC_VSUB))]\n   \"TARGET_NEON\"\n   \"vsub.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n@@ -2160,11 +2274,11 @@\n \n (define_insn \"neon_vaba<mode>\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n-        (unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"0\")\n-\t\t       (match_operand:VDQIW 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:VDQIW 3 \"s_register_operand\" \"w\")\n-                       (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-\t\t      UNSPEC_VABA))]\n+        (plus:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"0\")\n+                    (unspec:VDQIW [(match_operand:VDQIW 2 \"s_register_operand\" \"w\")\n+\t\t                   (match_operand:VDQIW 3 \"s_register_operand\" \"w\")\n+                                   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\t                  UNSPEC_VABD)))]\n   \"TARGET_NEON\"\n   \"vaba.%T4%#<V_sz_elem>\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set (attr \"neon_type\")\n@@ -2174,11 +2288,11 @@\n \n (define_insn \"neon_vabal<mode>\"\n   [(set (match_operand:<V_widen> 0 \"s_register_operand\" \"=w\")\n-        (unspec:<V_widen> [(match_operand:<V_widen> 1 \"s_register_operand\" \"0\")\n-\t\t           (match_operand:VW 2 \"s_register_operand\" \"w\")\n-\t\t           (match_operand:VW 3 \"s_register_operand\" \"w\")\n-                           (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-                          UNSPEC_VABAL))]\n+        (plus:<V_widen> (match_operand:<V_widen> 1 \"s_register_operand\" \"0\")\n+                        (unspec:<V_widen> [(match_operand:VW 2 \"s_register_operand\" \"w\")\n+                                           (match_operand:VW 3 \"s_register_operand\" \"w\")\n+                                           (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+                          UNSPEC_VABDL)))]\n   \"TARGET_NEON\"\n   \"vabal.%T4%#<V_sz_elem>\\t%q0, %P2, %P3\"\n   [(set_attr \"neon_type\" \"neon_vaba\")]\n@@ -2309,22 +2423,15 @@\n                     (const_string \"neon_fp_vrecps_vrsqrts_qqq\")))]\n )\n \n-(define_insn \"neon_vabs<mode>\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"w\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                     UNSPEC_VABS))]\n+(define_expand \"neon_vabs<mode>\"\n+  [(match_operand:VDQW 0 \"s_register_operand\" \"\")\n+   (match_operand:VDQW 1 \"s_register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n-  \"vabs.<V_s_elem>\\t%<V_reg>0, %<V_reg>1\"\n-  [(set (attr \"neon_type\")\n-     (if_then_else (ior (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n-                        (ne (symbol_ref \"<Is_float_mode>\") (const_int 0)))\n-                   (if_then_else\n-                      (ne (symbol_ref \"<Is_d_reg>\") (const_int 0))\n-                      (const_string \"neon_fp_vadd_ddd_vabs_dd\")\n-                      (const_string \"neon_fp_vadd_qqq_vabs_qq\"))\n-                   (const_string \"neon_vqneg_vqabs\")))]\n-)\n+{\n+  emit_insn (gen_abs<mode>2 (operands[0], operands[1]));\n+  DONE;\n+})\n \n (define_insn \"neon_vqabs<mode>\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")"}, {"sha": "b5b9cab7309acf18e7421fdbc5b92bbaa63f2af9", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -709,7 +709,8 @@ let pf_su_8_64 = P8 :: P16 :: F32 :: su_8_64\n let ops =\n   [\n     (* Addition.  *)\n-    Vadd, [], All (3, Dreg), \"vadd\", sign_invar_2, F32 :: su_8_64;\n+    Vadd, [], All (3, Dreg), \"vadd\", sign_invar_2, F32 :: su_8_32;\n+    Vadd, [No_op], All (3, Dreg), \"vadd\", sign_invar_2, [S64; U64];\n     Vadd, [], All (3, Qreg), \"vaddQ\", sign_invar_2, F32 :: su_8_64;\n     Vadd, [], Long, \"vaddl\", elts_same_2, su_8_32;\n     Vadd, [], Wide, \"vaddw\", elts_same_2, su_8_32;\n@@ -758,7 +759,8 @@ let ops =\n     Vmls, [Saturating; Doubling], Long, \"vqdmlsl\", elts_same_io, [S16; S32];\n \n     (* Subtraction.  *)\n-    Vsub, [], All (3, Dreg), \"vsub\", sign_invar_2, F32 :: su_8_64;\n+    Vsub, [], All (3, Dreg), \"vsub\", sign_invar_2, F32 :: su_8_32;\n+    Vsub, [No_op], All (3, Dreg), \"vsub\", sign_invar_2,  [S64; U64];\n     Vsub, [], All (3, Qreg), \"vsubQ\", sign_invar_2, F32 :: su_8_64;\n     Vsub, [], Long, \"vsubl\", elts_same_2, su_8_32;\n     Vsub, [], Wide, \"vsubw\", elts_same_2, su_8_32;"}, {"sha": "a75e5821e2ba38da00782bc32e6fc5d6529e47ba", "filename": "gcc/doc/arm-neon-intrinsics.texi", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-neon-intrinsics.texi?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -43,20 +43,18 @@\n \n \n @itemize @bullet\n-@item uint64x1_t vadd_u64 (uint64x1_t, uint64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vadd.i64 @var{d0}, @var{d0}, @var{d0}}\n+@item float32x2_t vadd_f32 (float32x2_t, float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vadd.f32 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vadd_s64 (int64x1_t, int64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vadd.i64 @var{d0}, @var{d0}, @var{d0}}\n+@item uint64x1_t vadd_u64 (uint64x1_t, uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vadd_f32 (float32x2_t, float32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vadd.f32 @var{d0}, @var{d0}, @var{d0}}\n+@item int64x1_t vadd_s64 (int64x1_t, int64x1_t)\n @end itemize\n \n \n@@ -1013,20 +1011,18 @@\n \n \n @itemize @bullet\n-@item uint64x1_t vsub_u64 (uint64x1_t, uint64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vsub.i64 @var{d0}, @var{d0}, @var{d0}}\n+@item float32x2_t vsub_f32 (float32x2_t, float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vsub.f32 @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vsub_s64 (int64x1_t, int64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vsub.i64 @var{d0}, @var{d0}, @var{d0}}\n+@item uint64x1_t vsub_u64 (uint64x1_t, uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vsub_f32 (float32x2_t, float32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vsub.f32 @var{d0}, @var{d0}, @var{d0}}\n+@item int64x1_t vsub_s64 (int64x1_t, int64x1_t)\n @end itemize\n \n "}, {"sha": "f6c1ca0ddbbef10e620f60db2523cc214cf6941b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -1,3 +1,17 @@\n+2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* gcc.target/arm/neon/vadds64.c: Regenerated.\n+\t* gcc.target/arm/neon/vaddu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vsubs64.c: Regenerated.\n+\t* gcc.target/arm/neon/vsubu64.c: Regenerated.\n+\t* gcc.target/arm/neon-vmla-1.c: Add -ffast-math to options.\n+\t* gcc.target/arm/neon-vmls-1.c: Likewise.\n+\t* gcc.target/arm/neon-vsubs64.c: New execution test.\n+\t* gcc.target/arm/neon-vsubu64.c: New execution test.\n+\t* gcc.target/arm/neon-vadds64.c: New execution test.\n+\t* gcc.target/arm/neon-vaddu64.c: New execution test.\n+\n 2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gcc.target/arm/neon-vands64.c: New."}, {"sha": "284a1d8adc95f044d1194480595780551bde821d", "filename": "gcc/testsuite/gcc.target/arm/neon-vadds64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vadds64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vadds64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vadds64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vadd_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t)0xdeadbeef00000000LL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t)0x00000000deadbeefLL;\n+\n+  out_int64x1_t = vadd_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+  if (out_int64x1_t != (int64x1_t)0xdeadbeefdeadbeefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "05bda8b046e2375c19627773072a833a74abc2c0", "filename": "gcc/testsuite/gcc.target/arm/neon-vaddu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vaddu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vaddu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vaddu64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vadd_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t)0xdeadbeef00000000LL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t)0x00000000deadbeefLL;\n+\n+  out_uint64x1_t = vadd_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+  if (out_uint64x1_t != (uint64x1_t)0xdeadbeefdeadbeefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "9d239ed47d09c95a57cb68545e34eaa322d92f3b", "filename": "gcc/testsuite/gcc.target/arm/neon-vmla-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmla-1.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target arm_neon_hw } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n /* { dg-add-options arm_neon } */\n /* { dg-final { scan-assembler \"vmla\\\\.f32\" } } */\n "}, {"sha": "2beaebe17cf4ce0c210c3e04a31091aeb505982c", "filename": "gcc/testsuite/gcc.target/arm/neon-vmls-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmls-1.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-require-effective-target arm_neon_hw } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n /* { dg-add-options arm_neon } */\n /* { dg-final { scan-assembler \"vmls\\\\.f32\" } } */\n "}, {"sha": "23947004127918b0c328f2c3e5ca2b8ff3f36de4", "filename": "gcc/testsuite/gcc.target/arm/neon-vsubs64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vsubs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vsubs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vsubs64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vsub_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t)0xdeadbeefdeadbeefLL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t)0x0000beefdead0000LL;\n+\n+  out_int64x1_t = vsub_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+  if (out_int64x1_t != (int64x1_t)0xdead00000000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "0162e206ef6e081a5b987f37f8f5b9c825f2f9cd", "filename": "gcc/testsuite/gcc.target/arm/neon-vsubu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vsubu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vsubu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vsubu64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vsub_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t)0xdeadbeefdeadbeefLL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t)0x0000beefdead0000LL;\n+\n+  out_uint64x1_t = vsub_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+  if (out_uint64x1_t != (uint64x1_t)0xdead00000000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "fb17e0ea3b68bdca90a17107bd4ed9884358988c", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -17,5 +17,4 @@ void test_vadds64 (void)\n   out_int64x1_t = vadd_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vadd\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "18fc500b9f2c016787986651247008fbff869e26", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -17,5 +17,4 @@ void test_vaddu64 (void)\n   out_uint64x1_t = vadd_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vadd\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "57bcd33d42c7e3834e949bfa7c48cef56143ff1f", "filename": "gcc/testsuite/gcc.target/arm/neon/vsubs64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsubs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsubs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsubs64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -17,5 +17,4 @@ void test_vsubs64 (void)\n   out_int64x1_t = vsub_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vsub\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3a8ae462e81da90533cd623ad5bf9a2be4a63aea", "filename": "gcc/testsuite/gcc.target/arm/neon/vsubu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsubu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab53516d0a58120f1d3b24aabc09a3d7e6443aa/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsubu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsubu64.c?ref=bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "patch": "@@ -17,5 +17,4 @@ void test_vsubu64 (void)\n   out_uint64x1_t = vsub_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vsub\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}]}