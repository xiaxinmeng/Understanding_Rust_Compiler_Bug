{"sha": "e7a9f085ffd34b0d7bc4b803c182b41494f609aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdhOWYwODVmZmQzNGIwZDdiYzRiODAzYzE4MmI0MTQ5NGY2MDlhYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-11T02:33:04Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-11T02:33:04Z"}, "message": "c++: fn parm pack expansion inside constraint [PR100138]\n\nThis PR is about CTAD but the underlying problems are more general;\nCTAD is a good trigger for them because of the necessary substitution\ninto constraints that deduction guide generation entails.\n\nIn the testcase below, when generating the implicit deduction guide for\nthe constrained constructor template for A, we substitute the generic\nflattening map 'tsubst_args' into the constructor's constraints.  During\nthis substitution, tsubst_pack_expansion returns a rebuilt pack\nexpansion for sizeof...(xs), but doesn't carry over the\nPACK_EXPANSION_LOCAL_P (and PACK_EXPANSION_SIZEOF_P) flag from the\noriginal tree to the rebuilt one.  The flag is otherwise unset on the\noriginal tree but gets set for the rebuilt tree from make_pack_expansion\nsince at_function_scope_p() is true (we're inside main).  This leads to\na crash during satisfaction when substituting into the pack expansion\nbecause we don't have local_specializations set up (and it'd be set up\nfor us if PACK_EXPANSION_LOCAL_P is unset)\n\nSimilarly, tsubst_constraint needs to set cp_unevaluated so that the\nsubstitution performed therein doesn't rely on local_specializations.\nThis avoids a crash during CTAD for C below.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/100138\n\t* constraint.cc (tsubst_constraint): Set up cp_unevaluated.\n\t(satisfy_atom): Set up iloc_sentinel before calling\n\tcxx_constant_value.\n\t* pt.c (tsubst_pack_expansion): When returning a rebuilt pack\n\texpansion, carry over PACK_EXPANSION_LOCAL_P and\n\tPACK_EXPANSION_SIZEOF_P from the original pack expansion.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/100138\n\t* g++.dg/cpp2a/concepts-ctad4.C: New test.", "tree": {"sha": "a2acd25d921ca506cd34aaf135a903739d809b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2acd25d921ca506cd34aaf135a903739d809b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a9f085ffd34b0d7bc4b803c182b41494f609aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a9f085ffd34b0d7bc4b803c182b41494f609aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a9f085ffd34b0d7bc4b803c182b41494f609aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a9f085ffd34b0d7bc4b803c182b41494f609aa/comments", "author": null, "committer": null, "parents": [{"sha": "aa891c56f25baac94db004e309d1b6e40b770a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa891c56f25baac94db004e309d1b6e40b770a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa891c56f25baac94db004e309d1b6e40b770a95"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "30fccc46678fec4e8725628f17fde55a477539dd", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a9f085ffd34b0d7bc4b803c182b41494f609aa/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a9f085ffd34b0d7bc4b803c182b41494f609aa/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=e7a9f085ffd34b0d7bc4b803c182b41494f609aa", "patch": "@@ -2747,6 +2747,7 @@ tsubst_constraint (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   /* We also don't want to evaluate concept-checks when substituting the\n      constraint-expressions of a declaration.  */\n   processing_constraint_expression_sentinel s;\n+  cp_unevaluated u;\n   tree expr = tsubst_expr (t, args, complain, in_decl, false);\n   return expr;\n }\n@@ -3005,7 +3006,10 @@ satisfy_atom (tree t, tree args, sat_info info)\n \n   /* Compute the value of the constraint.  */\n   if (info.noisy ())\n-    result = cxx_constant_value (result);\n+    {\n+      iloc_sentinel ils (EXPR_LOCATION (result));\n+      result = cxx_constant_value (result);\n+    }\n   else\n     {\n       result = maybe_constant_value (result, NULL_TREE,"}, {"sha": "85c05af42ed4d92428de76f6831f0b948704c8ab", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a9f085ffd34b0d7bc4b803c182b41494f609aa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a9f085ffd34b0d7bc4b803c182b41494f609aa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e7a9f085ffd34b0d7bc4b803c182b41494f609aa", "patch": "@@ -13203,6 +13203,8 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       else\n \tresult = tsubst (pattern, args, complain, in_decl);\n       result = make_pack_expansion (result, complain);\n+      PACK_EXPANSION_LOCAL_P (result) = PACK_EXPANSION_LOCAL_P (t);\n+      PACK_EXPANSION_SIZEOF_P (result) = PACK_EXPANSION_SIZEOF_P (t);\n       if (PACK_EXPANSION_AUTO_P (t))\n \t{\n \t  /* This is a fake auto... pack expansion created in add_capture with"}, {"sha": "4f04cb3f43b1f5fd2a332229448134bf53e27655", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ctad4.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a9f085ffd34b0d7bc4b803c182b41494f609aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a9f085ffd34b0d7bc4b803c182b41494f609aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad4.C?ref=e7a9f085ffd34b0d7bc4b803c182b41494f609aa", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/100138\n+// { dg-do compile { target c++20 } }\n+\n+template <class T>\n+struct A {\n+  A(T, auto... xs) requires (sizeof...(xs) != 0);\n+};\n+\n+constexpr bool f(...) { return true; }\n+\n+template <class T>\n+struct B {\n+  B(T, auto... xs) requires (f(xs...)); // { dg-error \"constant expression\" }\n+};\n+\n+template <class T>\n+struct C {\n+  C(T, auto x) requires (f(x)); // { dg-error \"constant expression\" }\n+};\n+\n+int main() {\n+  A x{1, 2}; // { dg-bogus \"\" }\n+  B y{1, 2}; // { dg-error \"deduction|no match\" }\n+  C z{1, 2}; // { dg-error \"deduction|no match\" }\n+}"}]}