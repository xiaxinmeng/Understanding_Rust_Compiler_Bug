{"sha": "f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhNzRkMjc4NmVjODEyZTQwY2ZkMGIzYjdmYTNjYmViMjA5MzQ0NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-26T08:32:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-26T08:32:38Z"}, "message": "re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)\n\n2019-11-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92645\n\t* tree-vect-slp.c (vect_build_slp_tree_2): For unary ops\n\tdo not build the operation from scalars if the operand is.\n\n\t* gcc.target/i386/pr92645.c: New testcase.\n\nFrom-SVN: r278719", "tree": {"sha": "31c5b6b2f32b1d2e72dbecf908678ad3b98a9ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31c5b6b2f32b1d2e72dbecf908678ad3b98a9ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59d37e97093b1b9f9498e61ee648557479e79cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d37e97093b1b9f9498e61ee648557479e79cd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d37e97093b1b9f9498e61ee648557479e79cd4"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "6ea6e5b592fa25608c49a73499a153dc6bff0444", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "patch": "@@ -1,3 +1,9 @@\n+2019-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): For unary ops\n+\tdo not build the operation from scalars if the operand is.\n+\n 2019-11-25  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* config/gcn/mkoffload.c (COMMENT_PREFIX, struct id_map,"}, {"sha": "d105b609c84adad67d190d47c4204bc43fabbf3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "patch": "@@ -1,3 +1,8 @@\n+2019-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* gcc.target/i386/pr92645.c: New testcase.\n+\n 2019-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.dg/dec-comparison.f90: Change dg-do from run to compile."}, {"sha": "467ed536b94e2ecbb7120214d1c3018a79ce2d15", "filename": "gcc/testsuite/gcc.target/i386/pr92645.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645.c?ref=f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-optimized -msse2 -Wno-psabi\" } */\n+\n+typedef unsigned short v8hi __attribute__((vector_size(16)));\n+typedef unsigned int v4si __attribute__((vector_size(16)));\n+\n+void bar (v4si *dst, v8hi * __restrict src)\n+{\n+  unsigned int tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v4si *)tem;\n+  dst[1] = *(v4si *)&tem[4];\n+}\n+void foo (v4si *dst, v8hi src)\n+{\n+  unsigned int tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v4si *)tem;\n+  dst[1] = *(v4si *)&tem[4];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vec_unpack_\" 4 \"optimized\" } } */"}, {"sha": "48aca3b48f66a7caaf9d86728bca71ed289a2d6c", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444", "patch": "@@ -1410,10 +1410,11 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t\t\t\tmatches, npermutes,\n \t\t\t\t\t&this_tree_size, bst_map)) != NULL)\n \t{\n-\t  /* If we have all children of child built up from scalars then just\n-\t     throw that away and build it up this node from scalars.  */\n+\t  /* If we have all children of a non-unary child built up from\n+\t     scalars then just throw that away and build it up this node\n+\t     from scalars.  */\n \t  if (is_a <bb_vec_info> (vinfo)\n-\t      && !SLP_TREE_CHILDREN (child).is_empty ()\n+\t      && SLP_TREE_CHILDREN (child).length () > 1\n \t      /* ???  Rejecting patterns this way doesn't work.  We'd have to\n \t\t do extra work to cancel the pattern so the uses see the\n \t\t scalar version.  */\n@@ -1549,10 +1550,11 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t\t\t\t    tem, npermutes,\n \t\t\t\t\t    &this_tree_size, bst_map)) != NULL)\n \t    {\n-\t      /* If we have all children of child built up from scalars then\n-\t\t just throw that away and build it up this node from scalars.  */\n+\t      /* If we have all children of a non-unary child built up from\n+\t\t scalars then just throw that away and build it up this node\n+\t\t from scalars.  */\n \t      if (is_a <bb_vec_info> (vinfo)\n-\t\t  && !SLP_TREE_CHILDREN (child).is_empty ()\n+\t\t  && SLP_TREE_CHILDREN (child).length () > 1\n \t\t  /* ???  Rejecting patterns this way doesn't work.  We'd have\n \t\t     to do extra work to cancel the pattern so the uses see the\n \t\t     scalar version.  */"}]}