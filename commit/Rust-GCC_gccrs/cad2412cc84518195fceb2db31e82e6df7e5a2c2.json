{"sha": "cad2412cc84518195fceb2db31e82e6df7e5a2c2", "node_id": "C_kwDOANBUbNoAKGNhZDI0MTJjYzg0NTE4MTk1ZmNlYjJkYjMxZTgyZTZkZjdlNWEyYzI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-07T09:33:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-07T09:33:54Z"}, "message": "cgraph: Handle simd clones in cgraph_node::set_{const,pure}_flag [PR106433]\n\nThe following testcase ICEs, because we determine only in late pure const\npass that bar is const (the content of the function loses a store to a\nglobal var during dse3 and read from it during cddce2) and local-pure-const2\nmakes it const.  The cgraph ordering is that post IPA (in late IPA simd\nclones are created) bar is processed first, then foo as its caller, then\nfoo.simdclone* and finally bar.simdclone*.  Conceptually I think that is the\nright ordering which allows for static simd clones to be removed.\n\nThe reason for the ICE is that because bar was marked const, the call to\nit lost vops before vectorization, and when we in foo.simdclone* try to\nvectorize the call to bar, we replace it with bar.simdclone* which hasn't\nbeen marked const and so needs vops, which we don't add.\n\nNow, because the simd clones are created from the same IL, just in a loop\nwith different argument/return value passing, I think generally if the base\nfunction is determined to be const or pure, the simd clones should be too,\nunless e.g. the vectorization causes different optimization decisions, but\nthen still the global memory reads if any shouldn't affect what the function\ndoes and global memory stores shouldn't be reachable at runtime.\n\nSo, the following patch changes set_{const,pure}_flag to mark also simd\nclones.\n\n2023-02-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/106433\n\t* cgraph.cc (set_const_flag_1): Recurse on simd clones too.\n\t(cgraph_node::set_pure_flag): Call set_pure_flag_1 on simd clones too.\n\n\t* gcc.c-torture/compile/pr106433.c: New test.", "tree": {"sha": "c3e45aaf363caf42da76d684783421c155b49c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e45aaf363caf42da76d684783421c155b49c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cad2412cc84518195fceb2db31e82e6df7e5a2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad2412cc84518195fceb2db31e82e6df7e5a2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad2412cc84518195fceb2db31e82e6df7e5a2c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad2412cc84518195fceb2db31e82e6df7e5a2c2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b5ca4345f6a96a8b85b8aa1cfcc9cf667eadfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b5ca4345f6a96a8b85b8aa1cfcc9cf667eadfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b5ca4345f6a96a8b85b8aa1cfcc9cf667eadfd"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "f352212e463f228f9bc1df11cd8582f5b525795e", "filename": "gcc/cgraph.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad2412cc84518195fceb2db31e82e6df7e5a2c2/gcc%2Fcgraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad2412cc84518195fceb2db31e82e6df7e5a2c2/gcc%2Fcgraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.cc?ref=cad2412cc84518195fceb2db31e82e6df7e5a2c2", "patch": "@@ -2764,6 +2764,9 @@ set_const_flag_1 (cgraph_node *node, bool set_const, bool looping,\n       if (!set_const || alias->get_availability () > AVAIL_INTERPOSABLE)\n \tset_const_flag_1 (alias, set_const, looping, changed);\n     }\n+  for (struct cgraph_node *n = node->simd_clones; n != NULL;\n+       n = n->simdclone->next_clone)\n+    set_const_flag_1 (n, set_const, looping, changed);\n   for (cgraph_edge *e = node->callers; e; e = e->next_caller)\n     if (e->caller->thunk\n \t&& (!set_const || e->caller->get_availability () > AVAIL_INTERPOSABLE))\n@@ -2876,6 +2879,9 @@ cgraph_node::set_pure_flag (bool pure, bool looping)\n {\n   struct set_pure_flag_info info = {pure, looping, false};\n   call_for_symbol_thunks_and_aliases (set_pure_flag_1, &info, !pure, true);\n+  for (struct cgraph_node *n = simd_clones; n != NULL;\n+       n = n->simdclone->next_clone)\n+    set_pure_flag_1 (n, &info);\n   return info.changed;\n }\n "}, {"sha": "b840e5ecd931607a903b802a1f9f6868061ae70c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr106433.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad2412cc84518195fceb2db31e82e6df7e5a2c2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106433.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad2412cc84518195fceb2db31e82e6df7e5a2c2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106433.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106433.c?ref=cad2412cc84518195fceb2db31e82e6df7e5a2c2", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/106433 */\n+\n+int m, *p;\n+\n+__attribute__ ((simd)) int\n+bar (int x)\n+{\n+  if (x)\n+    {\n+      if (m < 1)\n+        for (m = 0; m < 1; ++m)\n+          ++x;\n+      p = &x;\n+      for (;;)\n+        ++m;\n+    }\n+  return 0;\n+}\n+\n+__attribute__ ((simd)) int\n+foo (int x)\n+{\n+  return bar (x);\n+}"}]}