{"sha": "7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxZjBiNDAyMDZiZWQ5ZmM0YjYyYTA0Y2E5ZjQ5YzhiOWNlYTRkYw==", "commit": {"author": {"name": "Dmitry Melnik", "email": "dm@ispras.ru", "date": "2011-04-08T11:58:23Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2011-04-08T11:58:23Z"}, "message": "re PR rtl-optimization/48235 (ICE: SIGSEGV in has_dependence_p (sel-sched-ir.c:3263) with -fselective-scheduling2 and custom flags)\n\n\tPR rtl-optimization/48235\n\t* sel-sched.c (code_motion_process_successors): Recompute the last\n\tinsn in basic block if control flow changed.\n\t(code_motion_path_driver): Ditto.  Recompute the first insn as well.\n\tUpdate condition for ilist_remove.\n\ntestsuite:\n\t* gcc.dg/pr48235.c: New.\n\nFrom-SVN: r172177", "tree": {"sha": "1fa6f7e96f6d0620dc73960c0139cec0127e43c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fa6f7e96f6d0620dc73960c0139cec0127e43c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/comments", "author": null, "committer": null, "parents": [{"sha": "ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "75ebe6f71193f04af89ce450d334c60a2210d8e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "patch": "@@ -1,3 +1,11 @@\n+2011-04-08  Dmitry Melnik  <dm@ispras.ru>\n+\n+\tPR rtl-optimization/48235\n+\t* sel-sched.c (code_motion_process_successors): Recompute the last\n+\tinsn in basic block if control flow changed.\n+\t(code_motion_path_driver): Ditto.  Recompute the first insn as well.\n+\tUpdate condition for ilist_remove.\n+\n 2011-04-08  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/48302"}, {"sha": "f409c4fa2ccb14acf48a493144910a0a0bfc681c", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "patch": "@@ -6369,7 +6369,10 @@ code_motion_process_successors (insn_t insn, av_set_t orig_ops,\n          the iterator becomes invalid.  We need to try again.  */\n       if (BLOCK_FOR_INSN (insn)->index != old_index\n           || EDGE_COUNT (bb->succs) != old_succs)\n-        goto rescan;\n+        {\n+          insn = sel_bb_end (BLOCK_FOR_INSN (insn));\n+          goto rescan;\n+        }\n     }\n \n #ifdef ENABLE_CHECKING\n@@ -6587,21 +6590,37 @@ code_motion_path_driver (insn_t insn, av_set_t orig_ops, ilist_t path,\n   if (!expr)\n     {\n       int res;\n+      rtx last_insn = PREV_INSN (insn);\n+      bool added_to_path;\n \n       gcc_assert (insn == sel_bb_end (bb));\n \n       /* Add bb tail to PATH (but it doesn't make any sense if it's a bb_head -\n \t it's already in PATH then).  */\n       if (insn != first_insn)\n-\tilist_add (&path, insn);\n+\t{\n+\t  ilist_add (&path, insn);\n+\t  added_to_path = true;\n+\t}\n+      else\n+        added_to_path = false;\n \n       /* Process_successors should be able to find at least one\n \t successor for which code_motion_path_driver returns TRUE.  */\n       res = code_motion_process_successors (insn, orig_ops,\n                                             path, static_params);\n \n+      /* Jump in the end of basic block could have been removed or replaced\n+         during code_motion_process_successors, so recompute insn as the\n+         last insn in bb.  */\n+      if (NEXT_INSN (last_insn) != insn)\n+        {\n+          insn = sel_bb_end (bb);\n+          first_insn = sel_bb_head (bb);\n+        }\n+\n       /* Remove bb tail from path.  */\n-      if (insn != first_insn)\n+      if (added_to_path)\n \tilist_remove (&path);\n \n       if (res != 1)"}, {"sha": "65440e2b2d933180df4064075a0e5c09b5f0a3b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Dmitry Melnik  <dm@ispras.ru>\n+\n+\tPR rtl-optimization/48235\n+\t* gcc.dg/pr48235.c: New.\n+\n 2011-04-08  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/48302"}, {"sha": "8ec5edb7325724d70be8ed8c2ddceee67740d34f", "filename": "gcc/testsuite/gcc.dg/pr48235.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48235.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48235.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48235.c?ref=7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O -fno-guess-branch-probability -fpeel-loops -freorder-blocks-and-partition -fschedule-insns2 -fsel-sched-pipelining -fselective-scheduling2\" } */\n+struct intC\n+{\n+  short x;\n+  short y;\n+};\n+\n+int size_x;\n+\n+static inline int\n+TileDiffXY (int x, int y)\n+{\n+  return (y * size_x) + x;\n+}\n+\n+struct HangarTileTable\n+{\n+  struct intC ti;\n+  int hangar_num;\n+};\n+\n+struct AirportSpec\n+{\n+  struct HangarTileTable *depot_table;\n+  int size;\n+};\n+\n+void Get ();\n+struct AirportSpec dummy;\n+\n+static inline int\n+GetRotatedTileFromOffset (int *a, struct intC tidc)\n+{\n+  if (!*a)\n+    Get ();\n+  switch (*a)\n+    {\n+    case 0:\n+      return (tidc.y << size_x) + tidc.x;\n+    case 1:\n+      return TileDiffXY (tidc.y, dummy.size - tidc.x);\n+    case 2:\n+      return TileDiffXY (tidc.x, dummy.size - tidc.y);\n+    case 3:\n+      return TileDiffXY (dummy.size - 1, tidc.x);\n+    }\n+}\n+\n+int\n+GetHangarNum (int *a)\n+{\n+\tint i;\n+  for (i = 0; i < dummy.size; i++)\n+    if (GetRotatedTileFromOffset (a, dummy.depot_table[i].ti))\n+      return dummy.depot_table[i].hangar_num;\n+}"}]}