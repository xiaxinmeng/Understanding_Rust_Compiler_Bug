{"sha": "bcc0f556a7ed261d8270a925fd4823c7136783f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNjMGY1NTZhN2VkMjYxZDgyNzBhOTI1ZmQ0ODIzYzcxMzY3ODNmMA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-04-06T20:35:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:16Z"}, "message": "[Ada] Declare expressions\n\n2020-06-16  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* par-ch4.adb (P_Case_Expression): Move to be local.\n\t(P_Declare_Expression): New parsing routine.\n\t(P_Unparen_Cond_Expr_Etc): New name for\n\tP_Unparen_Cond_Case_Quant_Expression which was missing one case\n\tin its name (iterated component association), and we're adding a\n\tnew case (declare expression), so lets use \"Etc\" instead of\n\ttrying to pack all those things into the name.  Add call to\n\tP_Declare_Expression, and check for missing parens.\n\t(P_Expression_If_OK, P_Expression_Or_Range_Attribute_If_OK): Add\n\tTok_Declare.\n\t* par.adb (P_Basic_Declarative_Items): Add parameter\n\tDeclare_Expression so we can tailor the error message about\n\tincorrect bodies.\n\t(P_Case_Expression): Move to body.\n\t* par-ch3.adb (P_Basic_Declarative_Items): Tailor the error\n\tmessage about incorrect bodies.\n\t* par-ch7.adb (P_Package): Pass Declare_Expression => False to\n\tP_Basic_Declarative_Items.\n\t* sem.ads (In_Declare_Expr): Counter used to determine whether\n\twe are analyzing a declare_expression. Needed to give errors\n\tabout things that are not allowed in declare_expression, such as\n\tthe 'Access attribute.\n\t* sem.adb (Do_Analyze): Save/restore In_Declare_Expr.\n\t* sem_ch4.adb (Analyze_Expression_With_Actions): Give this node\n\tits own scope.  That seems better in general, but it is\n\tnecessary for declare_expressions.  For example, an identifier\n\tdeclared in a declare_expression should not clash with the same\n\tidentifier in an outer scope.  If this is a declare_expression,\n\tindicated by Comes_From_Source, then check legality rules, and\n\tincr/decr In_Declare_Expr.\n\t* sem_aggr.adb (Resolve_Aggregate): Allow an applicable index\n\tconstraint for a declare_expression, so if its expression is an\n\tarray aggregate, it can have \"others => ...\".\n\t* sem_attr.adb (Analyze_Access_Attribute): Disallow these\n\tattributes in declare_expressions. Add comment to make it clear\n\tthat Unrestricted_Access is included.\n\t* sinfo.ads, sinfo.adb, atree.ads, atree.adb: Remove the\n\tnow-incorrect comment in sinfo.ads that says\n\tN_Expression_With_Actions has no proper scope.  Add 17-parameter\n\tversions of Nkind_In.  Remove the 16-parameter versions of\n\tNkind_In.", "tree": {"sha": "194cf316372122615b32cfac0b8155f5c179edd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/194cf316372122615b32cfac0b8155f5c179edd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcc0f556a7ed261d8270a925fd4823c7136783f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc0f556a7ed261d8270a925fd4823c7136783f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc0f556a7ed261d8270a925fd4823c7136783f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc0f556a7ed261d8270a925fd4823c7136783f0/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d51bf619f723292fd1475deb58b7b14144495648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51bf619f723292fd1475deb58b7b14144495648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51bf619f723292fd1475deb58b7b14144495648"}], "stats": {"total": 313, "additions": 253, "deletions": 60}, "files": [{"sha": "b342add9c9913383556a0fe318745d3f2e1d240f", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -1940,11 +1940,12 @@ package body Atree is\n       V13 : Node_Kind;\n       V14 : Node_Kind;\n       V15 : Node_Kind;\n-      V16 : Node_Kind) return Boolean\n+      V16 : Node_Kind;\n+      V17 : Node_Kind) return Boolean\n    is\n    begin\n       return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10,\n-                                  V11, V12, V13, V14, V15, V16);\n+                                  V11, V12, V13, V14, V15, V16, V17);\n    end Nkind_In;\n \n    --------"}, {"sha": "68415d49ecb1f6c57b1329b0d6c18aa6f8a20f67", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -772,7 +772,7 @@ package Atree is\n       V10 : Node_Kind;\n       V11 : Node_Kind) return Boolean;\n \n-   --  12..15-parameter versions are not yet needed\n+   --  12..16-parameter versions are not yet needed\n \n    function Nkind_In\n      (N   : Node_Id;\n@@ -791,7 +791,8 @@ package Atree is\n       V13 : Node_Kind;\n       V14 : Node_Kind;\n       V15 : Node_Kind;\n-      V16 : Node_Kind) return Boolean;\n+      V16 : Node_Kind;\n+      V17 : Node_Kind) return Boolean;\n \n    pragma Inline (Nkind_In);\n    --  Inline all above functions"}, {"sha": "1fadf368c186519b0f1f1e7f26cec59fa37c9a0f", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -4702,7 +4702,9 @@ package body Ch3 is\n    --  the scan pointer is repositioned past the next semicolon, and the scan\n    --  for declarative items continues.\n \n-   function P_Basic_Declarative_Items return List_Id is\n+   function P_Basic_Declarative_Items\n+     (Declare_Expression : Boolean) return List_Id\n+   is\n       Decl  : Node_Id;\n       Decls : List_Id;\n       Kind  : Node_Kind;\n@@ -4750,7 +4752,15 @@ package body Ch3 is\n             Kind = N_Task_Body       or else\n             Kind = N_Protected_Body\n          then\n-            Error_Msg (\"proper body not allowed in package spec\", Sloc (Decl));\n+            if Declare_Expression then\n+               Error_Msg\n+                 (\"proper body not allowed in declare_expression\",\n+                  Sloc (Decl));\n+            else\n+               Error_Msg\n+                 (\"proper body not allowed in package spec\",\n+                  Sloc (Decl));\n+            end if;\n \n             --  Complete declaration of mangled subprogram body, for better\n             --  recovery if analysis is attempted."}, {"sha": "e3f3f06f8a8f60495aa9db42a6c9cc4ce05b2e10", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 97, "deletions": 29, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -72,23 +72,24 @@ package body Ch4 is\n    -- Local Subprograms --\n    -----------------------\n \n-   function P_Aggregate_Or_Paren_Expr                 return Node_Id;\n-   function P_Allocator                               return Node_Id;\n-   function P_Case_Expression_Alternative             return Node_Id;\n-   function P_Iterated_Component_Association          return Node_Id;\n-   function P_Record_Or_Array_Component_Association   return Node_Id;\n-   function P_Factor                                  return Node_Id;\n-   function P_Primary                                 return Node_Id;\n-   function P_Relation                                return Node_Id;\n-   function P_Term                                    return Node_Id;\n+   function P_Aggregate_Or_Paren_Expr               return Node_Id;\n+   function P_Allocator                             return Node_Id;\n+   function P_Case_Expression_Alternative           return Node_Id;\n+   function P_Iterated_Component_Association        return Node_Id;\n+   function P_Record_Or_Array_Component_Association return Node_Id;\n+   function P_Factor                                return Node_Id;\n+   function P_Primary                               return Node_Id;\n+   function P_Relation                              return Node_Id;\n+   function P_Term                                  return Node_Id;\n+   function P_Declare_Expression                    return Node_Id;\n    function P_Reduction_Attribute_Reference (S : Node_Id)\n       return Node_Id;\n \n-   function P_Binary_Adding_Operator                  return Node_Kind;\n-   function P_Logical_Operator                        return Node_Kind;\n-   function P_Multiplying_Operator                    return Node_Kind;\n-   function P_Relational_Operator                     return Node_Kind;\n-   function P_Unary_Adding_Operator                   return Node_Kind;\n+   function P_Binary_Adding_Operator                return Node_Kind;\n+   function P_Logical_Operator                      return Node_Kind;\n+   function P_Multiplying_Operator                  return Node_Kind;\n+   function P_Relational_Operator                   return Node_Kind;\n+   function P_Unary_Adding_Operator                 return Node_Kind;\n \n    procedure Bad_Range_Attribute (Loc : Source_Ptr);\n    --  Called to place complaint about bad range attribute at the given\n@@ -107,11 +108,18 @@ package body Ch4 is\n    --  prefix. The current token is known to be an apostrophe and the\n    --  following token is known to be RANGE.\n \n-   function P_Unparen_Cond_Case_Quant_Expression return Node_Id;\n-   --  This function is called with Token pointing to IF, CASE, or FOR, in a\n-   --  context that allows a case, conditional, or quantified expression if\n-   --  it is surrounded by parentheses. If not surrounded by parentheses, the\n-   --  expression is still returned, but an error message is issued.\n+   function P_Case_Expression return Node_Id;\n+   --  Scans out a case expression. Called with Token pointing to the CASE\n+   --  keyword, and returns pointing to the terminating right parent,\n+   --  semicolon, or comma, but does not consume this terminating token.\n+\n+   function P_Unparen_Cond_Expr_Etc return Node_Id;\n+   --  This function is called with Token pointing to IF, CASE, FOR, or\n+   --  DECLARE, in a context that allows a conditional (if or case) expression,\n+   --  a quantified expression, an iterated component association, or a declare\n+   --  expression, if it is surrounded by parentheses. If not surrounded by\n+   --  parentheses, the expression is still returned, but an error message is\n+   --  issued.\n \n    -------------------------\n    -- Bad_Range_Attribute --\n@@ -1944,8 +1952,12 @@ package body Ch4 is\n    begin\n       --  Case of conditional, case or quantified expression\n \n-      if Token = Tok_Case or else Token = Tok_If or else Token = Tok_For then\n-         return P_Unparen_Cond_Case_Quant_Expression;\n+      if Token = Tok_Case\n+        or else Token = Tok_If\n+        or else Token = Tok_For\n+        or else Token = Tok_Declare\n+      then\n+         return P_Unparen_Cond_Expr_Etc;\n \n       --  Normal case, not case/conditional/quantified expression\n \n@@ -2053,8 +2065,12 @@ package body Ch4 is\n    begin\n       --  Case of conditional, case or quantified expression\n \n-      if Token = Tok_Case or else Token = Tok_If or else Token = Tok_For then\n-         return P_Unparen_Cond_Case_Quant_Expression;\n+      if Token = Tok_Case\n+        or else Token = Tok_If\n+        or else Token = Tok_For\n+        or else Token = Tok_Declare\n+      then\n+         return P_Unparen_Cond_Expr_Etc;\n \n       --  Normal case, not one of the above expression types\n \n@@ -3442,7 +3458,7 @@ package body Ch4 is\n         (Loc  : Source_Ptr;\n          Cond : Node_Id) return Node_Id\n       is\n-         Exprs : constant List_Id    := New_List;\n+         Exprs : constant List_Id := New_List;\n          Expr  : Node_Id;\n          State : Saved_Scan_State;\n          Eptr  : Source_Ptr;\n@@ -3557,6 +3573,49 @@ package body Ch4 is\n       return If_Expr;\n    end P_If_Expression;\n \n+   --------------------------\n+   -- P_Declare_Expression --\n+   --------------------------\n+\n+   --  DECLARE_EXPRESSION ::=\n+   --      DECLARE {DECLARE_ITEM}\n+   --      begin BODY_EXPRESSION\n+\n+   --  DECLARE_ITEM ::= OBJECT_DECLARATION\n+   --  | OBJECT_RENAMING_DECLARATION\n+\n+   function P_Declare_Expression return Node_Id is\n+      Loc : constant Source_Ptr := Token_Ptr;\n+   begin\n+      Scan; -- past IF\n+\n+      declare\n+         Actions : constant List_Id := P_Basic_Declarative_Items\n+           (Declare_Expression => True);\n+         --  Most declarative items allowed by P_Basic_Declarative_Items are\n+         --  illegal; semantic analysis will deal with that.\n+      begin\n+         if Token = Tok_Begin then\n+            Scan;\n+         else\n+            Error_Msg_SC -- CODEFIX\n+              (\"BEGIN expected!\");\n+         end if;\n+\n+         declare\n+            Expression : constant Node_Id := P_Expression;\n+            Result : constant Node_Id :=\n+              Make_Expression_With_Actions (Loc, Actions, Expression);\n+         begin\n+            if Ada_Version < Ada_2020 then\n+               Error_Msg (\"declare_expression is an Ada 2020 feature\", Loc);\n+            end if;\n+\n+            return Result;\n+         end;\n+      end;\n+   end P_Declare_Expression;\n+\n    -----------------------\n    -- P_Membership_Test --\n    -----------------------\n@@ -3594,11 +3653,11 @@ package body Ch4 is\n       end if;\n    end P_Membership_Test;\n \n-   ------------------------------------------\n-   -- P_Unparen_Cond_Case_Quant_Expression --\n-   ------------------------------------------\n+   -----------------------------\n+   -- P_Unparen_Cond_Expr_Etc --\n+   -----------------------------\n \n-   function P_Unparen_Cond_Case_Quant_Expression return Node_Id is\n+   function P_Unparen_Cond_Expr_Etc return Node_Id is\n       Lparen : constant Boolean := Prev_Token = Tok_Left_Paren;\n \n       Result     : Node_Id;\n@@ -3647,6 +3706,15 @@ package body Ch4 is\n             Result := P_Iterated_Component_Association;\n          end if;\n \n+      --  Declare expression\n+\n+      elsif Token = Tok_Declare then\n+         Result := P_Declare_Expression;\n+\n+         if not (Lparen and then Token = Tok_Right_Paren) then\n+            Error_Msg_N (\"declare expression must be parenthesized!\", Result);\n+         end if;\n+\n       --  No other possibility should exist (caller was supposed to check)\n \n       else\n@@ -3656,6 +3724,6 @@ package body Ch4 is\n       --  Return expression (possibly after having given message)\n \n       return Result;\n-   end P_Unparen_Cond_Case_Quant_Expression;\n+   end P_Unparen_Cond_Expr_Etc;\n \n end Ch4;"}, {"sha": "9645250cd5baa48d468a312ba60e107ae0a34bcd", "filename": "gcc/ada/par-ch7.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar-ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar-ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch7.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -265,7 +265,8 @@ package body Ch7 is\n \n                Set_Defining_Unit_Name (Specification_Node, Name_Node);\n                Set_Visible_Declarations\n-                 (Specification_Node, P_Basic_Declarative_Items);\n+                 (Specification_Node,\n+                  P_Basic_Declarative_Items (Declare_Expression => False));\n \n                if Token = Tok_Private then\n                   Error_Msg_Col := Scopes (Scope.Last).Ecol;\n@@ -282,16 +283,19 @@ package body Ch7 is\n                   Scan; -- past PRIVATE\n \n                   Set_Private_Declarations\n-                    (Specification_Node, P_Basic_Declarative_Items);\n+                    (Specification_Node,\n+                     P_Basic_Declarative_Items (Declare_Expression => False));\n \n                   --  Deal gracefully with multiple PRIVATE parts\n \n                   while Token = Tok_Private loop\n                      Error_Msg_SC\n                        (\"only one private part allowed per package\");\n                      Scan; -- past PRIVATE\n-                     Append_List (P_Basic_Declarative_Items,\n-                       Private_Declarations (Specification_Node));\n+                     Append_List\n+                       (P_Basic_Declarative_Items\n+                          (Declare_Expression => False),\n+                        Private_Declarations (Specification_Node));\n                   end loop;\n                end if;\n "}, {"sha": "78790808abda003b49c9f9fcb50b3760f6a52da6", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -679,7 +679,6 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  begin message if indeed the BEGIN is missing.\n \n       function P_Array_Type_Definition                return Node_Id;\n-      function P_Basic_Declarative_Items              return List_Id;\n       function P_Constraint_Opt                       return Node_Id;\n       function P_Declarative_Part                     return List_Id;\n       function P_Discrete_Choice_List                 return List_Id;\n@@ -694,6 +693,14 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       function P_Subtype_Mark_Resync                  return Node_Id;\n       function P_Unknown_Discriminant_Part_Opt        return Boolean;\n \n+      function P_Basic_Declarative_Items\n+        (Declare_Expression : Boolean) return List_Id;\n+      --  Used to parse the declarative items in a package visible or\n+      --  private part (in which case Declare_Expression is False), and\n+      --  the declare_items of a declare_expression (in which case\n+      --  Declare_Expression is True). Declare_Expression is used to\n+      --  affect the wording of error messages.\n+\n       function P_Access_Definition\n         (Null_Exclusion_Present : Boolean) return Node_Id;\n       --  Ada 2005 (AI-231/AI-254): The caller parses the null-exclusion part\n@@ -787,11 +794,6 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       function P_Simple_Expression                    return Node_Id;\n       function P_Simple_Expression_Or_Range_Attribute return Node_Id;\n \n-      function P_Case_Expression return Node_Id;\n-      --  Scans out a case expression. Called with Token pointing to the CASE\n-      --  keyword, and returns pointing to the terminating right parent,\n-      --  semicolon, or comma, but does not consume this terminating token.\n-\n       function P_Expression_If_OK return Node_Id;\n       --  Scans out an expression allowing an unparenthesized case expression,\n       --  if expression, or quantified expression to appear without enclosing"}, {"sha": "b84df652aa52e208f8063d73aa587511634f05d2", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -1412,6 +1412,7 @@ package body Sem is\n       S_GNAT_Mode         : constant Boolean          := GNAT_Mode;\n       S_Global_Dis_Names  : constant Boolean          := Global_Discard_Names;\n       S_In_Assertion_Expr : constant Nat              := In_Assertion_Expr;\n+      S_In_Declare_Expr   : constant Nat              := In_Declare_Expr;\n       S_In_Default_Expr   : constant Boolean          := In_Default_Expr;\n       S_In_Spec_Expr      : constant Boolean          := In_Spec_Expression;\n       S_Inside_A_Generic  : constant Boolean          := Inside_A_Generic;\n@@ -1523,6 +1524,7 @@ package body Sem is\n       Full_Analysis      := True;\n       Inside_A_Generic   := False;\n       In_Assertion_Expr  := 0;\n+      In_Declare_Expr    := 0;\n       In_Default_Expr    := False;\n       In_Spec_Expression := False;\n       Set_Comes_From_Source_Default (False);\n@@ -1607,6 +1609,7 @@ package body Sem is\n       Global_Discard_Names := S_Global_Dis_Names;\n       GNAT_Mode            := S_GNAT_Mode;\n       In_Assertion_Expr    := S_In_Assertion_Expr;\n+      In_Declare_Expr      := S_In_Declare_Expr;\n       In_Default_Expr      := S_In_Default_Expr;\n       In_Spec_Expression   := S_In_Spec_Expr;\n       Inside_A_Generic     := S_Inside_A_Generic;"}, {"sha": "d7f8cdb9cb75d680991650c4804e6b52351dee35", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -245,13 +245,20 @@ package Sem is\n \n    In_Assertion_Expr : Nat := 0;\n    --  This is set non-zero if we are within the expression of an assertion\n-   --  pragma or aspect. It is a counter which is incremented at the start of\n-   --  expanding such an expression, and decremented on completion of expanding\n-   --  that expression. Probably a boolean would be good enough, since we think\n-   --  that such expressions cannot nest, but that might not be true in the\n-   --  future (e.g. if let expressions are added to Ada) so we prepare for that\n-   --  future possibility by making it a counter. As with In_Spec_Expression,\n-   --  it must be recursively saved and restored for a Semantics call.\n+   --  pragma or aspect. It is incremented at the start of expanding such an\n+   --  expression, and decremented on completion of expanding that\n+   --  expression. This needs to be a counter, rather than a Boolean, because\n+   --  assertions can contain declare_expressions, which can contain\n+   --  assertions. As with In_Spec_Expression, it must be recursively saved and\n+   --  restored for a Semantics call.\n+\n+   In_Declare_Expr : Nat := 0;\n+   --  This is set non-zero if we are within a declare_expression. It is\n+   --  incremented at the start of expanding such an expression, and\n+   --  decremented on completion of expanding that expression. This needs to be\n+   --  a counter, rather than a Boolean, because declare_expressions can\n+   --  nest. As with In_Spec_Expression, it must be recursively saved and\n+   --  restored for a Semantics call.\n \n    In_Compile_Time_Warning_Or_Error : Boolean := False;\n    --  Switch to indicate that we are validating a pragma Compile_Time_Warning"}, {"sha": "8608d98ca4946a1b0f8cc4e6b2b3125c37b640e4", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -976,7 +976,8 @@ package body Sem_Aggr is\n                                            N_Extension_Aggregate,\n                                            N_Component_Association,\n                                            N_Case_Expression_Alternative,\n-                                           N_If_Expression))\n+                                           N_If_Expression,\n+                                           N_Expression_With_Actions))\n             then\n                Aggr_Resolved :=\n                  Resolve_Array_Aggregate"}, {"sha": "23fc02140073df75952cf78221dc0aa8e81dba70", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -801,6 +801,14 @@ package body Sem_Attr is\n       --  Start of processing for Analyze_Access_Attribute\n \n       begin\n+         --  Access and Unchecked_Access are illegal in declare_expressions,\n+         --  according to the RM. We also make the GNAT-specific\n+         --  Unrestricted_Access attribute illegal.\n+\n+         if In_Declare_Expr > 0 then\n+            Error_Attr (\"% attribute cannot occur in a declare_expression\", N);\n+         end if;\n+\n          Check_E0;\n \n          if Nkind (P) = N_Character_Literal then"}, {"sha": "545315605019ef9268e2e7f0f672ec7317ba35ca", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -2216,18 +2216,94 @@ package body Sem_Ch4 is\n    -- Analyze_Expression_With_Actions --\n    -------------------------------------\n \n+   --  Start of processing for Analyze_Quantified_Expression\n+\n    procedure Analyze_Expression_With_Actions (N : Node_Id) is\n+\n+      procedure Check_Action_OK (A : Node_Id);\n+      --  Check that the action is something that is allows as a declare_item\n+      --  of a declare_expression, except the checks are suppressed for\n+      --  generated code.\n+\n+      procedure Check_Action_OK (A : Node_Id) is\n+      begin\n+         if not Comes_From_Source (N) or else not Comes_From_Source (A) then\n+            return; -- Allow anything in generated code\n+         end if;\n+\n+         case Nkind (A) is\n+            when N_Object_Declaration =>\n+               if Nkind (Object_Definition (A)) = N_Access_Definition then\n+                  Error_Msg_N\n+                    (\"anonymous access type not allowed in declare_expression\",\n+                     Object_Definition (A));\n+               end if;\n+\n+               if Aliased_Present (A) then\n+                  Error_Msg_N (\"aliased not allowed in declare_expression\", A);\n+               end if;\n+\n+               if Constant_Present (A)\n+                 and then not Is_Limited_Type (Etype (Defining_Identifier (A)))\n+               then\n+                  return; -- nonlimited constants are OK\n+               end if;\n+\n+            when N_Object_Renaming_Declaration =>\n+               if Present (Access_Definition (A)) then\n+                  Error_Msg_N\n+                    (\"anonymous access type not allowed in declare_expression\",\n+                     Access_Definition (A));\n+               end if;\n+\n+               if not Is_Limited_Type (Etype (Defining_Identifier (A))) then\n+                  return; -- ???For now; the RM rule is a bit more complicated\n+               end if;\n+\n+            when others =>\n+               null; -- Nothing else allowed, not even pragmas\n+         end case;\n+\n+         Error_Msg_N (\"object renaming or constant declaration expected\", A);\n+      end Check_Action_OK;\n+\n       A : Node_Id;\n+      EWA_Scop : Entity_Id;\n+\n+   --  Start of processing for Analyze_Expression_With_Actions\n \n    begin\n+      --  Create a scope, which is needed to provide proper visibility of the\n+      --  declare_items.\n+\n+      EWA_Scop := New_Internal_Entity (E_Block, Current_Scope, Sloc (N), 'B');\n+      Set_Etype  (EWA_Scop, Standard_Void_Type);\n+      Set_Scope  (EWA_Scop, Current_Scope);\n+      Set_Parent (EWA_Scop, N);\n+      Push_Scope (EWA_Scop);\n+\n+      --  If this Expression_With_Actions node comes from source, then it\n+      --  represents a declare_expression; increment the counter to take note\n+      --  of that.\n+\n+      if Comes_From_Source (N) then\n+         In_Declare_Expr := In_Declare_Expr + 1;\n+      end if;\n+\n       A := First (Actions (N));\n       while Present (A) loop\n          Analyze (A);\n+         Check_Action_OK (A);\n          Next (A);\n       end loop;\n \n       Analyze_Expression (Expression (N));\n       Set_Etype (N, Etype (Expression (N)));\n+      End_Scope;\n+\n+      if Comes_From_Source (N) then\n+         In_Declare_Expr := In_Declare_Expr - 1;\n+      end if;\n    end Analyze_Expression_With_Actions;\n \n    ---------------------------"}, {"sha": "7368db64dddbf252f43e3c4b2ae20e94c9166d96", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -7288,7 +7288,8 @@ package body Sinfo is\n       V13 : Node_Kind;\n       V14 : Node_Kind;\n       V15 : Node_Kind;\n-      V16 : Node_Kind) return Boolean\n+      V16 : Node_Kind;\n+      V17 : Node_Kind) return Boolean\n    is\n    begin\n       return T = V1  or else\n@@ -7306,7 +7307,8 @@ package body Sinfo is\n              T = V13 or else\n              T = V14 or else\n              T = V15 or else\n-             T = V16;\n+             T = V16 or else\n+             T = V17;\n    end Nkind_In;\n \n    --------------------------"}, {"sha": "41847d8eb24cb0539fd8ddaeda3a140749491948", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc0f556a7ed261d8270a925fd4823c7136783f0/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=bcc0f556a7ed261d8270a925fd4823c7136783f0", "patch": "@@ -7994,9 +7994,18 @@ package Sinfo is\n       --  executing all the actions.\n \n       --  If the actions contain declarations, then these declarations may\n-      --  be referenced within the expression. However note that there is\n-      --  no proper scope associated with the expression-with-action, so the\n-      --  back-end will elaborate them in the context of the enclosing scope.\n+      --  be referenced within the expression.\n+\n+      --  (AI12-0236-1): In Ada 2020, for a declare_expression, the parser\n+      --  generates an N_Expression_With_Actions. Declare_expressions have\n+      --  various restrictions, which we do not enforce on\n+      --  N_Expression_With_Actions nodes that are generated by the\n+      --  expander. The two cases can be distinguished by looking at\n+      --  Comes_From_Source.\n+\n+      --  ???Perhaps we should change the name of this node to\n+      --  N_Declare_Expression, and perhaps we should change the Sprint syntax\n+      --  to match the RM syntax for declare_expression.\n \n       --  Sprint syntax:  do\n       --                    action;\n@@ -11466,7 +11475,7 @@ package Sinfo is\n       V10 : Node_Kind;\n       V11 : Node_Kind) return Boolean;\n \n-   --  12..15-parameter versions are not yet needed\n+   --  12..16-parameter versions are not yet needed\n \n    function Nkind_In\n      (T   : Node_Kind;\n@@ -11485,7 +11494,8 @@ package Sinfo is\n       V13 : Node_Kind;\n       V14 : Node_Kind;\n       V15 : Node_Kind;\n-      V16 : Node_Kind) return Boolean;\n+      V16 : Node_Kind;\n+      V17 : Node_Kind) return Boolean;\n \n    pragma Inline (Nkind_In);\n    --  Inline all above functions"}]}