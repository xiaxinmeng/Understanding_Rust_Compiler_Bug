{"sha": "762f069d63c737ccda7d256ac16084793754003c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyZjA2OWQ2M2M3MzdjY2RhN2QyNTZhYzE2MDg0NzkzNzU0MDAzYw==", "commit": {"author": {"name": "Mark Elbrecht", "email": "snowball3@bigfoot.com", "date": "2000-02-17T04:39:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-02-17T04:39:11Z"}, "message": "xm-djgpp.h (LIBSTDCXX): Delete.\n\n        * i386/xm-djgpp.h (LIBSTDCXX): Delete. Moved to config/i386/djgpp.h.\n        (XREF_FILE_NAME): Define.\n\n        * i386/djgpp.h (DATA_SECTION_ASM_OP): Define.\n        (EH_FRAME_SECTION_ASM_OP): Define.\n        (IDENT_ASM_OP): Define.\n        (TEXT_SECTION_ASM_OP): Define.\n        (CPP_SPEC): Define.\n        (CTORS_SECTION_ASM_OP): Define.\n        (CTOR_SECTION_FUNCTION): Use it.\n        (DTORS_SECTION_ASM_OP): Define.\n        (DTOR_SECTION_FUNCTION): Use it.\n\nFrom-SVN: r32028", "tree": {"sha": "8b2bbbb949a13ec1f0c8e7688de6bb6d13280fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2bbbb949a13ec1f0c8e7688de6bb6d13280fac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/762f069d63c737ccda7d256ac16084793754003c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762f069d63c737ccda7d256ac16084793754003c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762f069d63c737ccda7d256ac16084793754003c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762f069d63c737ccda7d256ac16084793754003c/comments", "author": null, "committer": null, "parents": [{"sha": "3a6cc97884e151d67adaab2004505db3729a972c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6cc97884e151d67adaab2004505db3729a972c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a6cc97884e151d67adaab2004505db3729a972c"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "3f9a34a84e1af03f910a0e76144d2c654feb0f0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762f069d63c737ccda7d256ac16084793754003c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762f069d63c737ccda7d256ac16084793754003c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=762f069d63c737ccda7d256ac16084793754003c", "patch": "@@ -1,3 +1,17 @@\n+2000-02-16 Mark Elbrecht <snowball3@bigfoot.com>\n+\t* i386/xm-djgpp.h (LIBSTDCXX): Delete. Moved to config/i386/djgpp.h.\n+\t(XREF_FILE_NAME): Define.\n+\n+\t* i386/djgpp.h (DATA_SECTION_ASM_OP): Define.\n+\t(EH_FRAME_SECTION_ASM_OP): Define.\n+\t(IDENT_ASM_OP): Define.\n+\t(TEXT_SECTION_ASM_OP): Define.\n+\t(CPP_SPEC): Define.\n+\t(CTORS_SECTION_ASM_OP): Define.\n+\t(CTOR_SECTION_FUNCTION): Use it.\n+\t(DTORS_SECTION_ASM_OP): Define.\n+\t(DTOR_SECTION_FUNCTION): Use it.\n+\n 2000-02-16  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* reg-stack.c (emit_swap_insn): Do not put a new insn before a"}, {"sha": "0969c26f789d0c60b3eb346f542bbdc6c8e9a596", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762f069d63c737ccda7d256ac16084793754003c/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762f069d63c737ccda7d256ac16084793754003c/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=762f069d63c737ccda7d256ac16084793754003c", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for an i386 running MS-DOS with DJGPP.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -43,11 +43,35 @@ Boston, MA 02111-1307, USA.  */\n #undef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n \n+/* Define the name of the .ctor section.  */\n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP \"\\t.section .ctor\"\n+\n+/* Define the name of the .data section.  */\n+#undef DATA_SECTION_ASM_OP\n+#define DATA_SECTION_ASM_OP \"\\t.section .data\"\n+\n+/* Define the name of the .dtor section.  */\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP \"\\t.section .dtor\"\n+\n+/* Define the name of the .eh_frame section.  */\n+#undef EH_FRAME_SECTION_ASM_OP\n+#define EH_FRAME_SECTION_ASM_OP \"\\t.section .eh_frame\"\n+\n+/* Define the name of the .ident op.  */\n+#undef IDENT_ASM_OP\n+#define IDENT_ASM_OP \"\\t.ident\"\n+\n /* Enable alias attribute support.  */\n #ifndef SET_ASM_OP\n #define SET_ASM_OP \"\\t.set\"\n #endif\n \n+/* Define the name of the .text section.  */\n+#undef TEXT_SECTION_ASM_OP\n+#define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n+\n /* Search for as.exe and ld.exe in DJGPP's binary directory. */ \n #define MD_EXEC_PREFIX \"$DJDIR/bin/\"\n \n@@ -60,6 +84,11 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \"-Dunix -DGO32 -DDJGPP=2 -DMSDOS \\\n   -Asystem(unix) -Asystem(msdos)\"\n \n+/* Include <sys/version.h> so __DJGPP__ and __DJGPP_MINOR__ are defined.  */\n+#undef CPP_SPEC\n+#define CPP_SPEC \"-remap %(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n+  -imacros %s../include/sys/version.h\"\n++\n /* We need to override link_command_spec in gcc.c so support -Tdjgpp.djl.\n    This cannot be done in LINK_SPECS as that LINK_SPECS is processed\n    before library search directories are known by the linker.\n@@ -105,7 +134,7 @@ ctor_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_ctor)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .ctor\\n\");\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n       in_section = in_ctor;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -116,7 +145,7 @@ dtor_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_dtor)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .dtor\\n\");\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n       in_section = in_dtor;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -168,3 +197,12 @@ dtor_section ()\t\t\t\t\t\t\t\\\n /* djgpp automatically calls its own version of __main, so don't define one\n    in libgcc, nor call one in main().  */\n #define HAS_INIT_SECTION\n+\n+/* Definitions to set wchar_t type to 'unsigned short int' to help out\n+   add-on Windows compilers for DJGPP. */\n+#define WCHAR_UNSIGNED 1\n+#define WCHAR_TYPE_SIZE 16\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+/* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */\n+#define LIBSTDCXX \"-lstdcxx\""}, {"sha": "c7f3f82dc9b4b1fb515c500db0eb208d7e8ebc8d", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762f069d63c737ccda7d256ac16084793754003c/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762f069d63c737ccda7d256ac16084793754003c/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=762f069d63c737ccda7d256ac16084793754003c", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Intel 80386 running DJGPP.\n-   Copyright (C) 1988, 1996, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -34,11 +34,23 @@ Boston, MA 02111-1307, USA.  */\n /* Allow test for DOS drive names.  */\n #define HAVE_DOS_BASED_FILE_SYSTEM\n \n-#define LIBSTDCXX \"-lstdcxx\"\n-\n /* System dependant initialization for collect2\n    to tell system() to act like Unix.  */\n #define COLLECT2_HOST_INITIALIZATION \\\n   do { __system_flags |= (__system_allow_multiple_cmds\t\t\t\\\n \t\t          | __system_emulate_chdir); } while (0)\n \n+/* Define a version appropriate for DOS.  */\n+#undef XREF_FILE_NAME\n+#define XREF_FILE_NAME(xref_file, file) \\\n+  do { \\\n+    const char xref_ext[] = \".gxref\"; \\\n+    strcpy (xref_file, file); \\\n+    s = basename (xref_file); \\\n+    t = strchr (s, '.'); \\\n+    if (t) \\\n+      strcpy (t, xref_ext); \\\n+    else \\\n+      strcat (xref_file, xref_ext); \\\n+  while (0)\n+"}]}