{"sha": "191e7a3000dae4cde90123c0228138217abbad4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxZTdhMzAwMGRhZTRjZGU5MDEyM2MwMjI4MTM4MjE3YWJiYWQ0ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-01-20T18:26:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-01-20T18:26:33Z"}, "message": "hash_load_check_resize_trigger_imp.hpp: Adjust assert condition.\n\n2011-01-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_load_check_resize_trigger_imp.hpp: Adjust assert condition.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp: Format.\n\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/debug_map_base.hpp: Use never_adjustor.\n\n\t* testsuite/ext/pb_ds/regression/hash_data_map_rand.cc: Adjust\n\titerations downward when testing in debug mode.\n\t* testsuite/ext/pb_ds/regression/trie_data_map_rand.cc: Same.\n\t* testsuite/ext/pb_ds/regression/tree_no_data_map_rand.cc: Same.\n\t* testsuite/ext/pb_ds/regression/hash_no_data_map_rand.cc: Same.\n\t* testsuite/ext/pb_ds/regression/tree_data_map_rand.cc: Same.\n\t* testsuite/ext/pb_ds/regression/trie_no_data_map_rand.cc: Same.\n\t* testsuite/ext/pb_ds/example/hash_illegal_resize.cc: Use SIZE,\n\treduce in debug mode.\n\nFrom-SVN: r169061", "tree": {"sha": "1579ab64f0c5b843411ca07c4ec17dcba45ba232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1579ab64f0c5b843411ca07c4ec17dcba45ba232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191e7a3000dae4cde90123c0228138217abbad4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191e7a3000dae4cde90123c0228138217abbad4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191e7a3000dae4cde90123c0228138217abbad4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191e7a3000dae4cde90123c0228138217abbad4d/comments", "author": null, "committer": null, "parents": [{"sha": "a1a797686428f8fab7aa88035683f2d58e00493e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a797686428f8fab7aa88035683f2d58e00493e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a797686428f8fab7aa88035683f2d58e00493e"}], "stats": {"total": 355, "additions": 205, "deletions": 150}, "files": [{"sha": "1fdfa915d230d07fdb732334677a2586385c53d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -1,3 +1,23 @@\n+2011-01-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_load_check_resize_trigger_imp.hpp: Adjust assert condition.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp: Format.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/debug_map_base.hpp: Use never_adjustor.\n+\n+\t* testsuite/ext/pb_ds/regression/hash_data_map_rand.cc: Adjust\n+\titerations downward when testing in debug mode.\n+\t* testsuite/ext/pb_ds/regression/trie_data_map_rand.cc: Same.\n+\t* testsuite/ext/pb_ds/regression/tree_no_data_map_rand.cc: Same.\n+\t* testsuite/ext/pb_ds/regression/hash_no_data_map_rand.cc: Same.\n+\t* testsuite/ext/pb_ds/regression/tree_data_map_rand.cc: Same.\n+\t* testsuite/ext/pb_ds/regression/trie_no_data_map_rand.cc: Same.\n+\t* testsuite/ext/pb_ds/example/hash_illegal_resize.cc: Use SIZE,\n+\treduce in debug mode.\n+\n 2011-01-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/36104 part two"}, {"sha": "a84265119082c67d0995e8bf968344ceca146806", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -66,15 +67,14 @@ clear()\n   m_size = 0;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n erase_at(entry_pointer a_entries, size_type i, false_type)\n {\n   a_entries[i]->~value_type();\n-\n   s_value_allocator.deallocate(a_entries[i], 1);\n }\n \n@@ -90,19 +90,20 @@ PB_DS_CLASS_C_DEC::\n pop()\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(!empty());\n+  _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   erase_at(m_a_entries, 0, s_no_throw_copies_ind);\n \n-  std::pop_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n+  std::pop_heap(m_a_entries, m_a_entries + m_size,\n+\t\tstatic_cast<entry_cmp& >(*this));\n \n   resize_for_erase_if_needed();\n \n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n template<typename Pred>\n@@ -112,12 +113,7 @@ erase_if(Pred pred)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-    typedef\n-    typename entry_pred<\n-    value_type,\n-    Pred,\n-    simple_value,\n-    Allocator>::type\n+  typedef typename entry_pred<value_type, Pred, simple_value, Allocator>::type\n     pred_t;\n \n   const size_type left = partition(pred_t(pred));\n@@ -149,11 +145,12 @@ erase_if(Pred pred)\n \n   m_size = left;\n \n-  std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n+  std::make_heap(m_a_entries, m_a_entries + m_size,\n+\t\t static_cast<entry_cmp& >(*this));\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-    return ersd;\n+  return ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -162,7 +159,7 @@ PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(!empty());\n+  _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   const size_type fix_pos = it.m_p_e - m_a_entries;\n \n@@ -181,7 +178,7 @@ erase(point_iterator it)\n     fix(m_a_entries + fix_pos);\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -231,16 +228,15 @@ partition(Pred pred)\n       else if (pred(m_a_entries[right]))\n \t--right;\n       else\n-        {\n+\t{\n \t  _GLIBCXX_DEBUG_ASSERT(left < right);\n \n \t  std::swap(m_a_entries[left], m_a_entries[right]);\n \n \t  ++left;\n \t  --right;\n-        }\n+\t}\n     }\n \n   return left;\n }\n-"}, {"sha": "39a12c5a1b1fa75ad0638f3d5151a4f68e35accc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "modified", "additions": 33, "deletions": 51, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -33,7 +33,7 @@\n // representation about the suitability of this software for any\n // purpose. It is provided \"as is\" without express or implied\n // warranty.\n- \n+\n /**\n  * @file debug_map_base.hpp\n  * Contains a debug-mode base for all maps.\n@@ -58,7 +58,7 @@ namespace __gnu_pbds\n     // Need std::pair ostream extractor.\n     template<typename _CharT, typename _Traits, typename _Tp1, typename _Tp2>\n     inline std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __out, \n+    operator<<(std::basic_ostream<_CharT, _Traits>& __out,\n \t       const std::pair<_Tp1, _Tp2>& p)\n     { return (__out << '(' << p.first << ',' << p.second << ')'); }\n \n@@ -72,11 +72,14 @@ namespace __gnu_pbds\n     class debug_map_base\n     {\n     private:\n-      typedef typename std::allocator< Key> key_allocator;\n-\n-      typedef typename key_allocator::size_type size_type;\n-\n-      typedef Const_Key_Reference const_key_reference;\n+      typedef typename std::allocator<Key> \t\tkey_allocator;\n+      typedef typename key_allocator::size_type \tsize_type;\n+      typedef Const_Key_Reference \t\t\tconst_key_reference;\n+      typedef std::__norm::list<Key> \t\t       \tkey_set;\n+      typedef typename key_set::iterator \t\tkey_set_iterator;\n+      typedef typename key_set::const_iterator \t\tconst_key_set_iterator;\n+      typedef __gnu_cxx::throw_allocator_random<Key>\tkey_db_allocator;\n+      typedef typename key_db_allocator::never_adjustor\tnever_adjustor;\n \n     protected:\n       debug_map_base();\n@@ -114,14 +117,8 @@ namespace __gnu_pbds\n       join(PB_DS_CLASS_C_DEC& other);\n \n     private:\n-      typedef std::list< Key> \t\t\tkey_set;\n-      typedef typename key_set::iterator \tkey_set_iterator;\n-      typedef typename key_set::const_iterator \tconst_key_set_iterator;\n-\n-#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-#endif \n \n       const_key_set_iterator\n       find(const_key_reference r_key) const;\n@@ -154,26 +151,24 @@ namespace __gnu_pbds\n     insert_new(const_key_reference r_key)\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      // XXX FIXME: Adapt for __gnu_cxx::throw_allocator_random.\n-      //__gnu_cxx::throw_allocator<char> alloc;\n-      // const double orig_throw_prob = alloc.get_probability();\n-      // alloc.set_probability(0);\n+\n       if (find(r_key) != m_key_set.end())\n \t{\n-\t  std::cerr << \"insert_new\" << r_key << std::endl;\n-\t  std::abort();\n+\t  std::cerr << \"insert_new key already present \" << r_key << std::endl;\n+\t  std::abort;\n \t}\n \n+      never_adjustor never;\n       __try\n \t{\n \t  m_key_set.push_back(r_key);\n \t}\n       __catch(...)\n \t{\n-\t  std::cerr << \"insert_new\" << r_key << std::endl;\n+\t  std::cerr << \"insert_new \" << r_key << std::endl;\n \t  std::abort();\n \t}\n-      // alloc.set_probability(orig_throw_prob);\n+\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n@@ -210,10 +205,10 @@ namespace __gnu_pbds\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       if (find(r_key) == m_key_set.end())\n-        {\n-          std::cerr << \"check_key_exists\" << r_key << std::endl;\n-          std::abort();\n-        }\n+\t{\n+\t  std::cerr << \"check_key_exists \" << r_key << std::endl;\n+\t  std::abort();\n+\t}\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n@@ -224,12 +219,12 @@ namespace __gnu_pbds\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       if (find(r_key) != m_key_set.end())\n-        {\n+\t{\n \t  using std::cerr;\n \t  using std::endl;\n-\t  cerr << \"check_key_does_not_exist\" << r_key << endl;\n-          std::abort();\n-        }\n+\t  cerr << \"check_key_does_not_exist \" << r_key << endl;\n+\t  std::abort();\n+\t}\n     }\n \n     PB_DS_CLASS_T_DEC\n@@ -241,7 +236,7 @@ namespace __gnu_pbds\n       const size_type key_set_size = m_key_set.size();\n       if (size != key_set_size)\n \t{\n-\t  std::cerr << \"check_size \" << size \n+\t  std::cerr << \"check_size \" << size\n \t\t    << \" \" << key_set_size << std::endl;\n \t  std::abort();\n \t}\n@@ -267,7 +262,7 @@ namespace __gnu_pbds\n       typedef const_key_set_iterator iterator_type;\n       for (iterator_type it = m_key_set.begin(); it != m_key_set.end(); ++it)\n \tif (m_eq(*it, r_key))\n-          return it;\n+\t  return it;\n       return m_key_set.end();\n     }\n \n@@ -281,14 +276,13 @@ namespace __gnu_pbds\n       while (it != m_key_set.end())\n \t{\n \t  if (m_eq(*it, r_key))\n-            return it;\n+\t    return it;\n \t  ++it;\n \t}\n       return it;\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n      }\n \n-#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n@@ -308,48 +302,37 @@ namespace __gnu_pbds\n \t  ++prime_it;\n \t}\n     }\n-#endif \n \n     PB_DS_CLASS_T_DEC\n     template<typename Cmp_Fn>\n     void\n     PB_DS_CLASS_C_DEC::\n     split(const_key_reference r_key, Cmp_Fn cmp_fn, PB_DS_CLASS_C_DEC& other)\n     {\n-      // XXX FIXME: Adapt for __gnu_cxx::throw_allocator_random.\n-      // __gnu_cxx::throw_allocator<char> alloc;\n-      // const double orig_throw_prob = alloc.get_probability();\n-      // alloc.set_probability(0);\n       other.clear();\n       key_set_iterator it = m_key_set.begin();\n       while (it != m_key_set.end())\n-        if (cmp_fn(r_key, * it))\n+\tif (cmp_fn(r_key, * it))\n \t  {\n-            other.insert_new(*it);\n-            it = m_key_set.erase(it);\n+\t    other.insert_new(*it);\n+\t    it = m_key_set.erase(it);\n \t  }\n-        else\n+\telse\n \t  ++it;\n-      // alloc.set_probability(orig_throw_prob);\n     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     join(PB_DS_CLASS_C_DEC& other)\n     {\n-      // XXX FIXME: Adapt for __gnu_cxx::throw_allocator_random.\n-      // __gnu_cxx::throw_allocator<char> alloc;\n-      // const double orig_throw_prob = alloc.get_probability();\n-      // alloc.set_probability(0);\n       key_set_iterator it = other.m_key_set.begin();\n       while (it != other.m_key_set.end())\n \t{\n \t  insert_new(*it);\n \t  it = other.m_key_set.erase(it);\n \t}\n       _GLIBCXX_DEBUG_ASSERT(other.m_key_set.empty());\n-      // alloc.set_probability(orig_throw_prob);\n     }\n \n #undef PB_DS_CLASS_T_DEC\n@@ -358,7 +341,6 @@ namespace __gnu_pbds\n } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n-\n-#endif \n+#endif\n \n+#endif"}, {"sha": "66f4ed6677372b6d38abd10e348e01dfd764768d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -46,7 +46,6 @@ PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   std::cout << \"av1\" << std::endl;\n-\n   if (m_a_values == 0 || m_end_it == 0 || m_size == 0)\n     _GLIBCXX_DEBUG_ASSERT(m_a_values == 0 &&  m_end_it == 0 && m_size == 0);\n \n@@ -63,7 +62,7 @@ assert_iterators() const\n   debug_base::check_size(m_size);\n   size_type iterated_num = 0;\n   const_iterator prev_it = end();\n-  _GLIBCXX_DEBUG_ASSERT( m_end_it == m_a_values + m_size);\n+  _GLIBCXX_DEBUG_ASSERT(m_end_it == m_a_values + m_size);\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++iterated_num;"}, {"sha": "17f7c55d4049ad3bf1fb434a1dbf11cfbbabd838", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -77,7 +77,7 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n   debug_base(other),\n-#endif \n+#endif\n   synth_e_access_traits(other),\n   node_update(other),\n   m_p_head(s_head_allocator.allocate(1)),\n@@ -88,8 +88,8 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     if (other.m_p_head->m_p_parent == 0)\n       {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        return;\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn;\n       }\n   __try\n     {\n@@ -205,7 +205,7 @@ recursive_copy_node(const_node_pointer p_other_nd)\n \t\t\t    pref_begin(a_p_children[0]));\n \n   --child_i;\n-  _GLIBCXX_DEBUG_ASSERT(child_i > 1);\n+  _GLIBCXX_DEBUG_ASSERT(child_i >= 1);\n   do\n     p_ret->add_child(a_p_children[child_i], pref_begin(a_p_children[child_i]),\n \t\t     pref_end(a_p_children[child_i]), this);"}, {"sha": "1418bbe4555f9b93e778d9e510aa79e9e4ed5112", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_imp.hpp", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -40,7 +41,7 @@\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-hash_load_check_resize_trigger(float load_min, float load_max) \n+hash_load_check_resize_trigger(float load_min, float load_max)\n : m_load_min(load_min), m_load_max(load_max), m_next_shrink_size(0),\n   m_next_grow_size(0), m_resize_needed(false)\n { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n@@ -151,13 +152,13 @@ notify_resized(size_type new_size)\n   m_next_shrink_size = size_type(m_load_min * new_size);\n \n #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n-  std::cerr << \"hlcrt::notify_resized \" <<\n-    static_cast<unsigned long>(new_size) << \"    \" <<\n-    static_cast<unsigned long>(m_load_min) << \"    \" <<\n-    static_cast<unsigned long>(m_load_max) << \"    \" <<\n-    static_cast<unsigned long>(m_next_shrink_size) << \" \" <<\n-    static_cast<unsigned long>(m_next_grow_size) << \"    \" << std::endl;\n-#endif \n+  std::cerr << \"hlcrt::notify_resized \"  << std::endl\n+\t    << \"1 \" << new_size << std::endl\n+\t    << \"2 \" << m_load_min << std::endl\n+\t    << \"3 \" << m_load_max << std::endl\n+\t    << \"4 \" << m_next_shrink_size << std::endl\n+\t    << \"5 \" << m_next_grow_size << std::endl;\n+#endif\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n@@ -170,34 +171,28 @@ notify_externally_resized(size_type new_size)\n   m_resize_needed = false;\n   size_type new_grow_size = size_type(m_load_max * new_size - 1);\n   size_type new_shrink_size = size_type(m_load_min * new_size);\n+\n+#ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n+  std::cerr << \"hlcrt::notify_externally_resized \"  << std::endl\n+\t    << \"1 \" << new_size << std::endl\n+\t    << \"2 \" << m_load_min << std::endl\n+\t    << \"3 \" << m_load_max << std::endl\n+\t    << \"4 \" << m_next_shrink_size << std::endl\n+\t    << \"5 \" << m_next_grow_size << std::endl\n+\t    << \"6 \" << new_shrink_size << std::endl\n+\t    << \"7 \" << new_grow_size << std::endl;\n+#endif\n+\n   if (new_grow_size >= m_next_grow_size)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(new_shrink_size > m_next_shrink_size);\n+      _GLIBCXX_DEBUG_ASSERT(new_shrink_size >= m_next_shrink_size);\n       m_next_grow_size = new_grow_size;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-#ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n-\tstd::cerr << \"hlcrt::notify_externally_resized1 \" <<\n-        static_cast<unsigned long>(new_size) << \"    \" <<\n-        static_cast<unsigned long>(m_load_min) << \"    \" <<\n-        static_cast<unsigned long>(m_load_max) << \"    \" <<\n-        static_cast<unsigned long>(m_next_shrink_size) << \" \" <<\n-        static_cast<unsigned long>(m_next_grow_size) << \"    \" << std::endl;\n-#endif \n-      return;\n     }\n-\n-  _GLIBCXX_DEBUG_ASSERT(new_shrink_size <= m_next_shrink_size);\n-  m_next_shrink_size = new_shrink_size;\n-\n-#ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n-  std::cerr << \"hlcrt::notify_externally_resized2 \" <<\n-    static_cast<unsigned long>(new_size) << \"    \" <<\n-    static_cast<unsigned long>(m_load_min) << \"    \" <<\n-    static_cast<unsigned long>(m_load_max) << \"    \" <<\n-    static_cast<unsigned long>(m_next_shrink_size) << \" \" <<\n-    static_cast<unsigned long>(m_next_grow_size) << \"    \" << std::endl;\n-#endif \n+  else\n+    {\n+      _GLIBCXX_DEBUG_ASSERT(new_shrink_size <= m_next_shrink_size);\n+      m_next_shrink_size = new_shrink_size;\n+    }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n@@ -220,7 +215,7 @@ swap(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    \n+\n   size_base::swap(other);\n   std::swap(m_load_min, other.m_load_min);\n   std::swap(m_load_max, other.m_load_max);\n@@ -285,5 +280,4 @@ assert_valid() const\n   _GLIBCXX_DEBUG_ASSERT(m_load_max > m_load_min);\n   _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= m_next_shrink_size);\n }\n-#endif \n-\n+#endif"}, {"sha": "3b239d43cba02dc060158165184110b9b24a28b5", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_illegal_resize.cc", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -1,6 +1,8 @@\n+// { dg-timeout-factor 2.0 }\n+\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -31,8 +33,7 @@\n \n /**\n  * @file hash_illegal_resize_example.cpp\n- * An example of illegally\n- *    externally resizing a hash-based container object.\n+ * An example of illegally externally resizing a hash-based container object.\n  */\n \n /**\n@@ -46,6 +47,15 @@\n #include <ext/pb_ds/exception.hpp>\n #include <cassert>\n \n+// size of test containers\n+#ifdef _GLIBCXX_DEBUG\n+# define SIZE 100\n+# define RESIZE 20\n+#else\n+# define SIZE 1000\n+# define RESIZE 200\n+#endif\n+\n using namespace std;\n using namespace __gnu_pbds;\n \n@@ -68,8 +78,7 @@ int main()\n     int,\n     int,\n     int_hash,\n-    equal_to<\n-    int>,\n+    equal_to<int>,\n     // Combining function.\n     direct_mod_range_hashing<>,\n     // Probe function.\n@@ -90,20 +99,20 @@ int main()\n   // Insert some elements.\n   int i;\n \n-  for (i = 0; i < 1000; ++i)\n+  for (i = 0; i < SIZE; ++i)\n     g[i] = 2*  i;\n \n   // Check all ok.\n-  assert(g.size() == 1000);\n-  for (i = 0; i < 1000; ++i)\n-    assert(g.find(i) != g.end()&&  g.find(i)->second == 2*  i);\n+  assert(g.size() == SIZE);\n+  for (i = 0; i < SIZE; ++i)\n+    assert(g.find(i) != g.end() && g.find(i)->second == 2 * i);\n \n   // Now attempt to resize the table to 200 (impossible).\n   bool ex_thrown = false;\n \n   try\n     {\n-      g.resize(200);\n+      g.resize(RESIZE);\n     }\n   catch(__gnu_pbds::resize_error& )\n     {\n@@ -118,10 +127,9 @@ int main()\n   // container object should still be in a valid state; the following\n   // checks this.\n   // Check all ok.\n-  assert(g.size() == 1000);\n-  for (i = 0; i < 1000; ++i)\n-    assert(g.find(i) != g.end()&&  g.find(i)->second == 2*  i);\n+  assert(g.size() == SIZE);\n+  for (i = 0; i < SIZE; ++i)\n+    assert(g.find(i) != g.end() && g.find(i)->second == 2 * i);\n \n   return 0;\n }\n-"}, {"sha": "5656a5b2991cbfeecb52896c9bfb4bd889e5bfdf", "filename": "libstdc++-v3/testsuite/ext/pb_ds/regression/hash_data_map_rand.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Fhash_data_map_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Fhash_data_map_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Fhash_data_map_rand.cc?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -45,11 +45,21 @@\n #include <regression/common_type.hpp>\n \n #ifndef ITERATIONS\n-#define ITERATIONS 5000\n+# ifdef _GLIBCXX_DEBUG\n+#  define ITERATIONS 100\n+# else\n+#  define ITERATIONS 5000\n #endif\n+#endif\n+\n #ifndef KEYS\n-#define KEYS 10000\n+# ifdef _GLIBCXX_DEBUG\n+#  define KEYS 200\n+# else\n+#  define KEYS 10000\n+# endif\n #endif\n+\n int\n main(int argc, char* a_p_argv[])\n {"}, {"sha": "e0530f579dc81062ad2029e248dd85556ba565ea", "filename": "libstdc++-v3/testsuite/ext/pb_ds/regression/hash_no_data_map_rand.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Fhash_no_data_map_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Fhash_no_data_map_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Fhash_no_data_map_rand.cc?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -5,7 +5,7 @@\n \n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -45,11 +45,21 @@\n #include <regression/common_type.hpp>\n \n #ifndef ITERATIONS\n-#define ITERATIONS 5000\n+# ifdef _GLIBCXX_DEBUG\n+#  define ITERATIONS 100\n+# else\n+#  define ITERATIONS 5000\n #endif\n+#endif\n+\n #ifndef KEYS\n-#define KEYS 10000\n+# ifdef _GLIBCXX_DEBUG\n+#  define KEYS 200\n+# else\n+#  define KEYS 10000\n+# endif\n #endif\n+\n int\n main(int argc, char* a_p_argv[])\n {\n@@ -60,4 +70,3 @@ main(int argc, char* a_p_argv[])\n \t\t\t      \"hash_no_data_map_rand_regression_test\",\n \t\t\t      map_tl_t());\n }\n-"}, {"sha": "01751e39fc3ad071eaef2c0a3c86b41b609f58f4", "filename": "libstdc++-v3/testsuite/ext/pb_ds/regression/tree_data_map_rand.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftree_data_map_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftree_data_map_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftree_data_map_rand.cc?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -5,7 +5,7 @@\n \n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -45,11 +45,21 @@\n #include <regression/common_type.hpp>\n \n #ifndef ITERATIONS\n-#define ITERATIONS 5000\n+# ifdef _GLIBCXX_DEBUG\n+#  define ITERATIONS 100\n+# else\n+#  define ITERATIONS 5000\n #endif\n+#endif\n+\n #ifndef KEYS\n-#define KEYS 10000\n+# ifdef _GLIBCXX_DEBUG\n+#  define KEYS 200\n+# else\n+#  define KEYS 10000\n+# endif\n #endif\n+\n int\n main(int argc, char* a_p_argv[])\n {\n@@ -60,4 +70,3 @@ main(int argc, char* a_p_argv[])\n \t\t\t      \"tree_data_map_rand_regression_test\",\n \t\t\t      map_tl_t());\n }\n-"}, {"sha": "c7dadb0d81eff6d1c850911a2d2ed3f5a7799c06", "filename": "libstdc++-v3/testsuite/ext/pb_ds/regression/tree_no_data_map_rand.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftree_no_data_map_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftree_no_data_map_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftree_no_data_map_rand.cc?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -5,7 +5,7 @@\n \n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,12 +44,23 @@\n #include <regression/rand/assoc/rand_regression_test.hpp>\n #include <regression/common_type.hpp>\n \n+\n #ifndef ITERATIONS\n-#define ITERATIONS 5000\n+# ifdef _GLIBCXX_DEBUG\n+#  define ITERATIONS 100\n+# else\n+#  define ITERATIONS 5000\n+#endif\n #endif\n+\n #ifndef KEYS\n-#define KEYS 10000\n+# ifdef _GLIBCXX_DEBUG\n+#  define KEYS 200\n+# else\n+#  define KEYS 10000\n+# endif\n #endif\n+\n int\n main(int argc, char* a_p_argv[])\n {\n@@ -60,4 +71,3 @@ main(int argc, char* a_p_argv[])\n \t\t\t      \"tree_no_data_map_rand_regression_test\",\n \t\t\t      map_tl_t());\n }\n-"}, {"sha": "8a3902812fa1c44d89e4f95866a9a9c132270bf7", "filename": "libstdc++-v3/testsuite/ext/pb_ds/regression/trie_data_map_rand.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftrie_data_map_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftrie_data_map_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftrie_data_map_rand.cc?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -5,7 +5,7 @@\n \n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -45,11 +45,21 @@\n #include <regression/common_type.hpp>\n \n #ifndef ITERATIONS\n-#define ITERATIONS 5000\n+# ifdef _GLIBCXX_DEBUG\n+#  define ITERATIONS 100\n+# else\n+#  define ITERATIONS 5000\n #endif\n+#endif\n+\n #ifndef KEYS\n-#define KEYS 10000\n+# ifdef _GLIBCXX_DEBUG\n+#  define KEYS 200\n+# else\n+#  define KEYS 10000\n+# endif\n #endif\n+\n int\n main(int argc, char* a_p_argv[])\n {\n@@ -60,4 +70,3 @@ main(int argc, char* a_p_argv[])\n \t\t\t      \"trie_data_map_rand_regression_test\",\n \t\t\t      map_tl_t());\n }\n-"}, {"sha": "2414118da84d2722f2a7d31fd430a0a73821cf64", "filename": "libstdc++-v3/testsuite/ext/pb_ds/regression/trie_no_data_map_rand.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftrie_no_data_map_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191e7a3000dae4cde90123c0228138217abbad4d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftrie_no_data_map_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fregression%2Ftrie_no_data_map_rand.cc?ref=191e7a3000dae4cde90123c0228138217abbad4d", "patch": "@@ -5,7 +5,7 @@\n \n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -45,19 +45,28 @@\n #include <regression/common_type.hpp>\n \n #ifndef ITERATIONS\n-#define ITERATIONS 5000\n+# ifdef _GLIBCXX_DEBUG\n+#  define ITERATIONS 100\n+# else\n+#  define ITERATIONS 5000\n #endif\n+#endif\n+\n #ifndef KEYS\n-#define KEYS 10000\n+# ifdef _GLIBCXX_DEBUG\n+#  define KEYS 200\n+# else\n+#  define KEYS 10000\n+# endif\n #endif\n+\n int\n main(int argc, char* a_p_argv[])\n {\n   using namespace __gnu_pbds::test;\n   typedef trie_set_tl_t map_tl_t;\n \n   return rand_regression_test(ITERATIONS, KEYS,\n-\t\t\t      \"trie_no_data_map_rand_regression_test\", \n+\t\t\t      \"trie_no_data_map_rand_regression_test\",\n \t\t\t      map_tl_t());\n }\n-"}]}