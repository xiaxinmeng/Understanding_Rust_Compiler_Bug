{"sha": "d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkNWQyODllMjkyODk3Y2JkM2JkZThmNzljM2NjNGIzZWQ5MWUxYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-08-06T14:44:02Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-08-06T14:44:02Z"}, "message": "i386.md: Check TARGET_ macros and optimize_size before checking function returns in...\n\n2007-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.md: Check TARGET_ macros and optimize_size\n\tbefore checking function returns in conditional expressions.\n\nFrom-SVN: r127243", "tree": {"sha": "eebcdabc19b1faf1a0efceddeffb6a039e123069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eebcdabc19b1faf1a0efceddeffb6a039e123069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a/comments", "author": null, "committer": null, "parents": [{"sha": "30cad60d51ea2fcd97586c80779e624dfe9e686d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cad60d51ea2fcd97586c80779e624dfe9e686d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30cad60d51ea2fcd97586c80779e624dfe9e686d"}], "stats": {"total": 538, "additions": 275, "deletions": 263}, "files": [{"sha": "22f028ef86da3a0b9ba5027f36f13c988985bb7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a", "patch": "@@ -1,3 +1,8 @@\n+2007-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.md: Check TARGET_ macros and optimize_size\n+\tbefore checking function returns in conditional expressions.\n+\n 2007-08-06  Alfred Minarik  <a.minarik@aon.at>\n \n \tPR pch/13676\n@@ -11,33 +16,33 @@\n \n 2008-08-05  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * configure.ac: Remove --enable-checking=df from default settings.\n-        * tree-pass.h (TODO_df_verify): New.  Shift TODO_mark_first_instance.\n-        * df-core.c (df_finish_pass) [ENABLE_CHECKING]: Schedule verification\n-        if the parameter is true.\n-        (df_analyze) [!ENABLE_DF_CHECKING]: Also do verification if the\n-        DF_VERIFY_SCHEDULED flag is true.\n-        * df.h (enum df_changeable_flags): Add DF_VERIFY_SCHEDULED.\n-        (df_finish_pass): Adjust prototype.\n-        * passes.c (execute_todo): Schedule verification if TODO_df_verify is\n-        true.\n-\n-        * see.c (pass_see): Add TODO_df_verify.\n-        * loop-init.c (pass_rtl_move_loop_invariants): Add TODO_df_verify.\n-        * global.c (rest_of_handle_global_alloc): Schedule verification\n-        after the pass.\n-        * local-alloc.c (rest_of_handle_local_alloc): Schedule verification\n-        before the pass.\n-        * function.c (pass_thread_prologue_and_epilogue): Add TODO_df_verify.\n-        * gcse.c (rest_of_handle_gcse): Adjust call to df_finish_pass.\n-        * loop-iv.c (iv_analysis_done): Schedule verification after the pass.\n-\n-        * config/sh/sh.c (sh_output_mi_thunk): Remove dead code.\n-        * config/ia64/ia64.c (ia64_reorg): Adjust call to df_finish_pass.\n-        * config/bfin/bfin.c (bfin_reorg): Adjust call to df_finish_pass.\n+\t* configure.ac: Remove --enable-checking=df from default settings.\n+\t* tree-pass.h (TODO_df_verify): New.  Shift TODO_mark_first_instance.\n+\t* df-core.c (df_finish_pass) [ENABLE_CHECKING]: Schedule verification\n+\tif the parameter is true.\n+\t(df_analyze) [!ENABLE_DF_CHECKING]: Also do verification if the\n+\tDF_VERIFY_SCHEDULED flag is true.\n+\t* df.h (enum df_changeable_flags): Add DF_VERIFY_SCHEDULED.\n+\t(df_finish_pass): Adjust prototype.\n+\t* passes.c (execute_todo): Schedule verification if TODO_df_verify is\n+\ttrue.\n+\n+\t* see.c (pass_see): Add TODO_df_verify.\n+\t* loop-init.c (pass_rtl_move_loop_invariants): Add TODO_df_verify.\n+\t* global.c (rest_of_handle_global_alloc): Schedule verification\n+\tafter the pass.\n+\t* local-alloc.c (rest_of_handle_local_alloc): Schedule verification\n+\tbefore the pass.\n+\t* function.c (pass_thread_prologue_and_epilogue): Add TODO_df_verify.\n+\t* gcse.c (rest_of_handle_gcse): Adjust call to df_finish_pass.\n+\t* loop-iv.c (iv_analysis_done): Schedule verification after the pass.\n+\n+\t* config/sh/sh.c (sh_output_mi_thunk): Remove dead code.\n+\t* config/ia64/ia64.c (ia64_reorg): Adjust call to df_finish_pass.\n+\t* config/bfin/bfin.c (bfin_reorg): Adjust call to df_finish_pass.\n \n 2007-08-05  Vladimir Yanovsky  <yanov@il.ibm.com>\n-            Revital Eres <eres@il.ibm.com>\n+\t    Revital Eres <eres@il.ibm.com>\n \n \t* doc/invoke.texi (-fmodulo-sched-allow-regmoves): Document new\n \tflag.\n@@ -904,7 +909,7 @@\n \t* doc/invoke.texi: Follow spelling conventions.\n \n 2007-07-29  Vladimir Yanovsky  <yanov@il.ibm.com>\n-            Revital Eres  <eres@il.ibm.com>\n+\t    Revital Eres  <eres@il.ibm.com>\n \n \t* modulo-sched.c (sms_schedule): Avoid loops which includes\n \tauto-increment instructions.\n@@ -2152,16 +2157,16 @@\n 2007-07-16  Sandra Loosemore  <sandra@codesourcery.com>\n \t    David Ung  <davidu@mips.com>\n \n-        * config/mips/mips.h (TUNE_24K): Define.\n+\t* config/mips/mips.h (TUNE_24K): Define.\n \t(TUNE_MACC_CHAINS): Add TUNE_24K.\n-        * config/mips/mips.md: (*mul_acc_si, *mul_sub_si): Change type to\n-        imadd.\n-        * config/mips/74k.md (r74k_int_mult): Split madd/msub to ..\n-        (r74k_int_madd): .. this new reservation.\n-        (define_bypass): Fixed bypasses for r74k_int_madd to use\n+\t* config/mips/mips.md: (*mul_acc_si, *mul_sub_si): Change type to\n+\timadd.\n+\t* config/mips/74k.md (r74k_int_mult): Split madd/msub to ..\n+\t(r74k_int_madd): .. this new reservation.\n+\t(define_bypass): Fixed bypasses for r74k_int_madd to use\n \tmips_linked_madd_p.\n-        * config/mips/24k.md (define_bypass): Define new\n-        r24k_int_mul3->r24k_int_madd bypass using mips_linked_madd_p.\n+\t* config/mips/24k.md (define_bypass): Define new\n+\tr24k_int_mul3->r24k_int_madd bypass using mips_linked_madd_p.\n \n 2007-07-16  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Nigel Stephens  <nigel@mips.com>\n@@ -3030,7 +3035,7 @@\n \t* doc/tm.texi (DOLLARS_IN_IDENTIFIERS): Update.\n \n 2007-07-06  Ian Lance Taylor  <iant@google.com>\n-            Zack Weinberg  <zackw@panix.com>\n+\t    Zack Weinberg  <zackw@panix.com>\n \n \tPR middle-end/32441\n \t* builtins.c (std_expand_builtin_va_start): Don't use make_tree.\n@@ -3307,7 +3312,7 @@\n \tafter \\.\n \n 2007-07-04  David Ung  <davidu@mips.com>\n-            Joseph Myers  <joseph@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mips/mips.md (type): Add logical, signext and move.\n \t(one_cmpl<mode>2, *and<mode>3, *and<mode>3_mips16, *ior<mode>3,\n@@ -4276,7 +4281,7 @@\n \n 2007-06-26  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-        * tree.def (VEC_WIDEN_MULT_LO_EXPR): Corrected string name.\n+\t* tree.def (VEC_WIDEN_MULT_LO_EXPR): Corrected string name.\n \t\n 2007-06-26  Steve Ellcey  <sje@cup.hp.com>\n \n@@ -4496,7 +4501,7 @@\n \n 2007-06-21  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-        * df-problems.c (df_note_bb_compute): Made computation of live\n+\t* df-problems.c (df_note_bb_compute): Made computation of live\n \tinfo consistent with df_lr.\n \n 2007-06-21  Richard Guenther  <rguenther@suse.de>\n@@ -4571,7 +4576,7 @@\n \t(epilogue_reit): Rename to epilogue_reit_24.\n \n 2007-06-20  Seongbae Park  <seongbae.park@gmail.com>\n-            Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\t    Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \t* dbgcnt.def (global_alloc_at_func, global_alloc_at_reg):\n \tNew counters.\n@@ -4919,9 +4924,9 @@\n \t(Intel 386 and AMD x86_64 Options): Document -mrecip.\n \n 2007-06-15  Andrew Pinski <andrew_pinski@playstation.sony.com>\n-            Zdenek Dvorak <dvorakz@suse.cz>\n-            Richard Guenther  <rguenther@suse.de>\n-            Kaz Kojima  <kkojima@gcc.gnu.org>\n+\t    Zdenek Dvorak <dvorakz@suse.cz>\n+\t    Richard Guenther  <rguenther@suse.de>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* tree-vrp.c (compare_values_warnv): Convert val2 to\n \tthe type of val1.\n@@ -5788,7 +5793,7 @@\n \t(vect_estimate_min_profitable_iterations): New function to estimate\n \tmimimimum iterartions required for vector version of loop to be\n \tprofitable over scalar version.\n-        (vect_model_reduction_cost): New function.\n+\t(vect_model_reduction_cost): New function.\n \t(vect_model_induction_cost): New function.\n \t(vect_model_simple_cost): New function.\n \t(vect_cost_strided_group_size): New function."}, {"sha": "cb96182299ac1151f994ea12f2d02faafc8b768a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 227, "deletions": 220, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d5d5d289e292897cbd3bde8f79c3cc4b3ed91e1a", "patch": "@@ -3541,9 +3541,9 @@\n   emit_move_insn (operands[3], operands[1]);\n \n   /* Generate a cltd if possible and doing so it profitable.  */\n-  if (true_regnum (operands[1]) == 0\n-      && true_regnum (operands[2]) == 1\n-      && (optimize_size || TARGET_USE_CLTD))\n+  if ((optimize_size || TARGET_USE_CLTD)\n+      && true_regnum (operands[1]) == 0\n+      && true_regnum (operands[2]) == 1)\n     {\n       emit_insn (gen_ashrsi3_31 (operands[2], operands[1], GEN_INT (31)));\n     }\n@@ -3572,8 +3572,8 @@\n     emit_move_insn (operands[3], operands[1]);\n \n   /* Generate a cltd if possible and doing so it profitable.  */\n-  if (true_regnum (operands[3]) == 0\n-      && (optimize_size || TARGET_USE_CLTD))\n+  if ((optimize_size || TARGET_USE_CLTD)\n+      && true_regnum (operands[3]) == 0)\n     {\n       emit_insn (gen_ashrsi3_31 (operands[4], operands[3], GEN_INT (31)));\n       DONE;\n@@ -10478,13 +10478,14 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\n+  \"TARGET_64BIT\n    && (optimize_size\n        || !TARGET_PARTIAL_FLAG_REG_STALL\n        || (operands[2] == const1_rtx\n \t   && (TARGET_SHIFT1\n-\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n+\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10519,13 +10520,14 @@\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"e\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\n+  \"TARGET_64BIT\n    && (optimize_size\n        || !TARGET_PARTIAL_FLAG_REG_STALL\n        || (operands[2] == const1_rtx\n \t   && (TARGET_SHIFT1\n-\t       || TARGET_DOUBLE_WITH_ADD)))\"\n+\t       || TARGET_DOUBLE_WITH_ADD)))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10806,13 +10808,13 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL\n-       || (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1\n-\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n+   \"(optimize_size\n+     || !TARGET_PARTIAL_FLAG_REG_STALL\n+     || (operands[2] == const1_rtx\n+\t && (TARGET_SHIFT1\n+\t     || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10847,13 +10849,13 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL\n-       || (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1\n-\t       || TARGET_DOUBLE_WITH_ADD)))\"\n+  \"(optimize_size\n+    || !TARGET_PARTIAL_FLAG_REG_STALL\n+    || (operands[2] == const1_rtx\n+\t&& (TARGET_SHIFT1\n+\t    || TARGET_DOUBLE_WITH_ADD)))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10889,13 +10891,14 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashift:SI (match_dup 1) (match_dup 2))))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\n+  \"TARGET_64BIT\n    && (optimize_size\n        || !TARGET_PARTIAL_FLAG_REG_STALL\n        || (operands[2] == const1_rtx\n \t   && (TARGET_SHIFT1\n-\t       || TARGET_DOUBLE_WITH_ADD)))\"\n+\t       || TARGET_DOUBLE_WITH_ADD)))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11013,13 +11016,13 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL\n-       || (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1\n-\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n+  \"(optimize_size\n+    || !TARGET_PARTIAL_FLAG_REG_STALL\n+    || (operands[2] == const1_rtx\n+\t&& (TARGET_SHIFT1\n+\t    || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11054,13 +11057,13 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL\n-       || (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1\n-\t       || TARGET_DOUBLE_WITH_ADD)))\"\n+  \"(optimize_size\n+    || !TARGET_PARTIAL_FLAG_REG_STALL\n+    || (operands[2] == const1_rtx\n+\t&& (TARGET_SHIFT1\n+\t    || TARGET_DOUBLE_WITH_ADD)))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11217,13 +11220,13 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashift:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL\n-       || (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1\n-\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n+  \"(optimize_size\n+    || !TARGET_PARTIAL_FLAG_REG_STALL\n+    || (operands[2] == const1_rtx\n+\t&& (TARGET_SHIFT1\n+\t    || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11258,13 +11261,13 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL\n-       || (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1\n-\t       || TARGET_DOUBLE_WITH_ADD)))\"\n+  \"(optimize_size\n+    || !TARGET_PARTIAL_FLAG_REG_STALL\n+    || (operands[2] == const1_rtx\n+\t&& (TARGET_SHIFT1\n+\t    || TARGET_DOUBLE_WITH_ADD)))\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11394,8 +11397,9 @@\n \t(ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -11426,8 +11430,9 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+  \"TARGET_64BIT\n    && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11443,8 +11448,9 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+  \"TARGET_64BIT\n    && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11461,10 +11467,10 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"TARGET_64BIT\n+   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -11476,10 +11482,10 @@\n \t\t       (match_operand:QI 2 \"const_int_operand\" \"n\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"TARGET_64BIT\n+   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -11607,8 +11613,8 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -11621,8 +11627,9 @@\n \t(zero_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t\t     (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"length\" \"2\")])\n@@ -11662,8 +11669,8 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11679,8 +11686,8 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11694,8 +11701,9 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\n+  \"TARGET_64BIT\n    && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11712,10 +11720,9 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -11727,10 +11734,9 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -11743,10 +11749,10 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"TARGET_64BIT\n+   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -11764,8 +11770,8 @@\n \t(ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -11796,8 +11802,8 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11813,8 +11819,8 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11831,10 +11837,9 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -11846,10 +11851,9 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -11867,8 +11871,8 @@\n \t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -11881,9 +11885,9 @@\n \t(ashiftrt:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n-   && (! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift1\")\n    (set (attr \"length\")\n@@ -11927,8 +11931,8 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11944,8 +11948,8 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11962,10 +11966,9 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n@@ -11977,10 +11980,9 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n@@ -12072,8 +12074,9 @@\n \t(lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -12104,8 +12107,9 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+  \"TARGET_64BIT\n    && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12121,8 +12125,9 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+  \"TARGET_64BIT\n    && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12139,10 +12144,10 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"TARGET_64BIT\n+   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -12154,10 +12159,10 @@\n \t\t       (match_operand:QI 2 \"const_int_operand\" \"e\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"TARGET_64BIT\n+   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -12208,8 +12213,8 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -12222,8 +12227,9 @@\n \t(lshiftrt:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"length\" \"2\")])\n@@ -12264,8 +12270,8 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12281,8 +12287,8 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12296,8 +12302,9 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+  \"TARGET_64BIT\n    && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12314,10 +12321,9 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -12329,10 +12335,9 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n         (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -12345,10 +12350,10 @@\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"TARGET_64BIT\n+   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -12366,8 +12371,8 @@\n \t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -12398,8 +12403,8 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12415,8 +12420,8 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12433,10 +12438,9 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -12448,10 +12452,9 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -12469,8 +12472,8 @@\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\")\n@@ -12528,8 +12531,8 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12545,8 +12548,8 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12563,10 +12566,9 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n@@ -12578,10 +12580,9 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n-   && (optimize_size\n-       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n+  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n@@ -12637,8 +12638,9 @@\n \t(rotate:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, DImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATE, DImode, operands)\"\n   \"rol{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -12671,8 +12673,8 @@\n \t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ROTATE, SImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n   \"rol{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -12686,8 +12688,9 @@\n \t  (rotate:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, SImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n   \"rol{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n    (set_attr \"length\" \"2\")])\n@@ -12730,8 +12733,8 @@\n \t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ROTATE, HImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATE, HImode, operands)\"\n   \"rol{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -12788,8 +12791,8 @@\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ROTATE, QImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATE, QImode, operands)\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -12871,8 +12874,9 @@\n \t(rotatert:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, DImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATERT, DImode, operands)\"\n   \"ror{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -12905,8 +12909,8 @@\n \t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ROTATERT, SImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n   \"ror{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -12920,8 +12924,9 @@\n \t  (rotatert:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, SImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"TARGET_64BIT\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n   \"ror{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -12967,8 +12972,8 @@\n \t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ROTATERT, HImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATERT, HImode, operands)\"\n   \"ror{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -13011,8 +13016,8 @@\n \t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (ROTATERT, QImode, operands)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ROTATERT, QImode, operands)\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\")\n@@ -19492,11 +19497,11 @@\n    (set (match_operand 1 \"register_operand\" \"\")\n \t(and (match_dup 3) (match_dup 4)))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n-   /* Ensure that the operand will remain sign-extended immediate.  */\n-   && ix86_match_ccmode (insn, INTVAL (operands[4]) >= 0 ? CCNOmode : CCZmode)\n    && ! optimize_size\n    && ((GET_MODE (operands[1]) == HImode && ! TARGET_FAST_PREFIX)\n-       || (GET_MODE (operands[1]) == QImode && TARGET_PROMOTE_QImode))\"\n+       || (GET_MODE (operands[1]) == QImode && TARGET_PROMOTE_QImode))\n+   /* Ensure that the operand will remain sign-extended immediate.  */\n+   && ix86_match_ccmode (insn, INTVAL (operands[4]) >= 0 ? CCNOmode : CCZmode)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (match_op_dup 2 [(and:SI (match_dup 3) (match_dup 4))\n \t\t\t            (const_int 0)]))\n@@ -19521,10 +19526,10 @@\n \t\t(match_operand:HI 3 \"const_int_operand\" \"\"))\n \t   (const_int 0)]))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n-   /* Ensure that the operand will remain sign-extended immediate.  */\n-   && ix86_match_ccmode (insn, INTVAL (operands[3]) >= 0 ? CCNOmode : CCZmode)\n    && ! TARGET_FAST_PREFIX\n-   && ! optimize_size\"\n+   && ! optimize_size\n+   /* Ensure that the operand will remain sign-extended immediate.  */\n+   && ix86_match_ccmode (insn, INTVAL (operands[3]) >= 0 ? CCNOmode : CCZmode)\"\n   [(set (match_dup 0)\n \t(match_op_dup 1 [(and:SI (match_dup 2) (match_dup 3))\n \t\t         (const_int 0)]))]\n@@ -19683,8 +19688,8 @@\n    (set (match_operand:SI 0 \"memory_operand\" \"\")\n         (match_operand:SI 1 \"immediate_operand\" \"\"))]\n   \"! optimize_size\n-   && get_attr_length (insn) >= ix86_cost->large_insn\n-   && TARGET_SPLIT_LONG_MOVES\"\n+   && TARGET_SPLIT_LONG_MOVES\n+   && get_attr_length (insn) >= ix86_cost->large_insn\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -19693,8 +19698,9 @@\n   [(match_scratch:HI 2 \"r\")\n    (set (match_operand:HI 0 \"memory_operand\" \"\")\n         (match_operand:HI 1 \"immediate_operand\" \"\"))]\n-  \"! optimize_size && get_attr_length (insn) >= ix86_cost->large_insn\n-  && TARGET_SPLIT_LONG_MOVES\"\n+  \"! optimize_size\n+   && TARGET_SPLIT_LONG_MOVES\n+   && get_attr_length (insn) >= ix86_cost->large_insn\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -19703,8 +19709,9 @@\n   [(match_scratch:QI 2 \"q\")\n    (set (match_operand:QI 0 \"memory_operand\" \"\")\n         (match_operand:QI 1 \"immediate_operand\" \"\"))]\n-  \"! optimize_size && get_attr_length (insn) >= ix86_cost->large_insn\n-  && TARGET_SPLIT_LONG_MOVES\"\n+  \"! optimize_size\n+   && TARGET_SPLIT_LONG_MOVES\n+   && get_attr_length (insn) >= ix86_cost->large_insn\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -19716,7 +19723,7 @@\n \t  [(match_operand:SI 2 \"memory_operand\" \"\")\n \t   (const_int 0)]))\n    (match_scratch:SI 3 \"r\")]\n-  \"ix86_match_ccmode (insn, CCNOmode) && ! optimize_size\"\n+  \" ! optimize_size && ix86_match_ccmode (insn, CCNOmode)\"\n   [(set (match_dup 3) (match_dup 2))\n    (set (match_dup 0) (match_op_dup 1 [(match_dup 3) (const_int 0)]))]\n   \"\")\n@@ -19736,11 +19743,11 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n-   && peep2_regno_dead_p (0, FLAGS_REG)\n    && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], SImode)))\n-       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], SImode)))\"\n+       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], SImode)))\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (xor:SI (match_dup 1) (const_int -1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -19750,11 +19757,11 @@\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n-   && peep2_regno_dead_p (0, FLAGS_REG)\n    && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], HImode)))\n-       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], HImode)))\"\n+       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], HImode)))\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (xor:HI (match_dup 1) (const_int -1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -19764,11 +19771,11 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n   \"!optimize_size\n-   && peep2_regno_dead_p (0, FLAGS_REG)\n    && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], QImode)))\n-       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], QImode)))\"\n+       || (TARGET_NOT_VECTORMODE && long_memory_operand (operands[0], QImode)))\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (xor:QI (match_dup 1) (const_int -1)))\n \t      (clobber (reg:CC FLAGS_REG))])]"}]}