{"sha": "4c5154c0c601dacfac9cff1d297ab692fe4f85ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM1MTU0YzBjNjAxZGFjZmFjOWNmZjFkMjk3YWI2OTJmZTRmODVlYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-10T14:33:47Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-10T14:33:47Z"}, "message": "BeanContextServicesSupport.java, [...]: New files.\n\n2003-03-10  Michael Koch  <koqnueror@gmx.de>\n\n\t* java/beans/beancontext/BeanContextServicesSupport.java,\n\tjava/beans/beancontext/BeanContextSupport.java: New files.\n\t* Makefile.am\n\t(awt_source_files): Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r64080", "tree": {"sha": "06e7e1dedf1a1555d394c4fd01aa502dad789606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06e7e1dedf1a1555d394c4fd01aa502dad789606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c5154c0c601dacfac9cff1d297ab692fe4f85ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5154c0c601dacfac9cff1d297ab692fe4f85ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c5154c0c601dacfac9cff1d297ab692fe4f85ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5154c0c601dacfac9cff1d297ab692fe4f85ea/comments", "author": null, "committer": null, "parents": [{"sha": "ec3ae3da7f683ca358ad01d5aa3fb9187297448e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3ae3da7f683ca358ad01d5aa3fb9187297448e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3ae3da7f683ca358ad01d5aa3fb9187297448e"}], "stats": {"total": 731, "additions": 731, "deletions": 0}, "files": [{"sha": "5a6e6e1f3e7ec0f75008eba1aae6386b8d58fbc3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c5154c0c601dacfac9cff1d297ab692fe4f85ea/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c5154c0c601dacfac9cff1d297ab692fe4f85ea/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4c5154c0c601dacfac9cff1d297ab692fe4f85ea", "patch": "@@ -1,3 +1,11 @@\n+2003-03-10  Michael Koch  <koqnueror@gmx.de>\n+\n+\t* java/beans/beancontext/BeanContextServicesSupport.java,\n+\tjava/beans/beancontext/BeanContextSupport.java: New files.\n+\t* Makefile.am\n+\t(awt_source_files): Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2003-03-10  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/FocusTraversalPolicy.java"}, {"sha": "ad6773e68e3f26658f71519df24d2a93446b0369", "filename": "libjava/java/beans/beancontext/BeanContextServicesSupport.java", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c5154c0c601dacfac9cff1d297ab692fe4f85ea/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServicesSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c5154c0c601dacfac9cff1d297ab692fe4f85ea/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServicesSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServicesSupport.java?ref=4c5154c0c601dacfac9cff1d297ab692fe4f85ea", "patch": "@@ -0,0 +1,275 @@\n+/* java.beans.beancontext.BeanContextServicesSupport\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.beans.beancontext;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import java.util.TooManyListenersException;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.2\n+ */\n+public class BeanContextServicesSupport\n+  extends BeanContextSupport\n+  implements BeanContextServices\n+{\n+  private static final long serialVersionUID = -8494482757288719206L;\n+  \n+  protected class BCSSChild\n+    extends BeanContextSupport.BCSChild\n+  {\n+    private static final long serialVersionUID = -6848044915271367103L;\n+  }\n+\n+  protected class BCSSProxyServiceProvider\n+    implements BeanContextServiceProvider,\n+    BeanContextServiceRevokedListener\n+  {\n+    private static final long serialVersionUID = 7078212910685744490L;\n+    \n+    public Iterator getCurrentServiceSelectors (BeanContextServices bcs,\n+                                                Class serviceClass)\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public Object getService (BeanContextServices bcs,\n+                              Object requestor,\n+                              Class serviceClass,\n+                              Object serviceSelector)\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public void releaseService (BeanContextServices bcs,\n+                                Object requestor,\n+                                Object service)\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public void serviceRevoked (BeanContextServiceRevokedEvent bcsre)\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+  }\n+\n+  protected static class BCSSServiceProvider\n+    implements Serializable\n+  {\n+    protected BeanContextServiceProvider serviceProvider;\n+\n+    protected BeanContextServiceProvider getServiceProvider()\n+    {\n+      return serviceProvider;\n+    }\n+  }\n+\n+  protected transient ArrayList bcsListeners;\n+\n+  protected transient BCSSProxyServiceProvider proxy;\n+\n+  protected transient int serializable;\n+\n+  protected transient HashMap services;\n+\n+  public BeanContextServicesSupport ()\n+  {\n+    this (null, null, true, true);\n+  }\n+\n+  public BeanContextServicesSupport (BeanContextServices peer)\n+  {\n+    this (peer, null, true, true);\n+  }\n+\n+  public BeanContextServicesSupport (BeanContextServices peer, Locale lcle)\n+  {\n+    this (peer, lcle, true, true);\n+  }\n+\n+  public BeanContextServicesSupport (BeanContextServices peer, Locale lcle, boolean dtime)\n+  {\n+    this (peer, lcle, dtime, true);\n+  }\n+\n+  public BeanContextServicesSupport (BeanContextServices peer, Locale lcle, boolean dtime, boolean visible)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void addBeanContextServicesListener (BeanContextServicesListener bcsl)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean addService (Class serviceClass, BeanContextServiceProvider bcsp) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected boolean addService (Class serviceClass, BeanContextServiceProvider bcsp, boolean fireEvent)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  protected void bcsPreDeserializationHook (ObjectInputStream ois)\n+    throws ClassNotFoundException, IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected void bcsPreSerializationHook (ObjectOutputStream oos) \n+    throws IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  protected void childJustRemovedHook (Object child, BeanContextSupport.BCSChild bcsc)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected BeanContextSupport.BCSChild createBCSChild (Object targetChild, Object peer) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected BeanContextServicesSupport.BCSSServiceProvider createBCSSServiceProvider (Class sc, BeanContextServiceProvider bcsp)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void fireServiceAdded (BeanContextServiceAvailableEvent bcssae) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void fireServiceAdded (Class serviceClass) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void fireServiceRevoked (BeanContextServiceRevokedEvent bcsre) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void fireServiceRevoked (Class serviceClass, boolean revokeNow)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public BeanContextServices getBeanContextServicesPeer ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final BeanContextServicesListener getChildBeanContextServicesListener (Object child) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Iterator getCurrentServiceClasses () \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Iterator getCurrentServiceSelectors (Class serviceClass) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Object getService (BeanContextChild child, Object requestor, Class serviceClass, Object serviceSelector, BeanContextServiceRevokedListener bcsrl)\n+    throws TooManyListenersException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean hasService (Class serviceClass)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void initialize ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected  void initializeBeanContextResources () \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected  void releaseBeanContextResources () \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void releaseService (BeanContextChild child, Object requestor, Object service) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void removeBeanContextServicesListener (BeanContextServicesListener bcsl) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void revokeService (Class serviceClass, BeanContextServiceProvider bcsp, boolean revokeCurrentServicesNow) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void serviceAvailable (BeanContextServiceAvailableEvent bcssae) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void serviceRevoked (BeanContextServiceRevokedEvent bcssre) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+}"}, {"sha": "5af299f5bb145e92aacd180729b2c02a1a826117", "filename": "libjava/java/beans/beancontext/BeanContextSupport.java", "status": "added", "additions": 448, "deletions": 0, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c5154c0c601dacfac9cff1d297ab692fe4f85ea/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c5154c0c601dacfac9cff1d297ab692fe4f85ea/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextSupport.java?ref=4c5154c0c601dacfac9cff1d297ab692fe4f85ea", "patch": "@@ -0,0 +1,448 @@\n+/* java.beans.beancontext.BeanContextSupport\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.beans.beancontext;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.beans.PropertyVetoException;\n+import java.beans.VetoableChangeListener;\n+import java.beans.Visibility;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Locale;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.2\n+ */\n+public class BeanContextSupport extends BeanContextChildSupport\n+  implements BeanContext, Serializable, PropertyChangeListener,\n+  VetoableChangeListener\n+{\n+  private static final long serialVersionUID = -4879613978649577204L;\n+  \n+  private void readObject (ObjectInputStream s)\n+    throws ClassNotFoundException, IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  private void writeObject (ObjectOutputStream s)\n+    throws ClassNotFoundException, IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected class BCSChild implements Serializable\n+  {\n+    private static final long serialVersionUID = 3289144128843950629L;\n+  }\n+\n+  protected static class BCSIterator implements Iterator\n+  {\n+    public boolean hasNext ()\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public Object next ()\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public void remove ()\n+    {\n+      // This must be a noop remove operation.\n+    }\n+  }\n+\n+  protected transient ArrayList bcmListeners;\n+\n+  protected transient HashMap children;\n+\n+  protected transient boolean designTime;\n+\n+  protected transient Locale locale;\n+\n+  protected transient boolean okToUseGui;\n+\n+  /**\n+   * Construct a BeanContextSupport instance.\n+   */\n+  public BeanContextSupport ()\n+  {\n+    this (null, null, true, true);\n+  }\n+\n+  /**\n+   * Construct a BeanContextSupport instance.\n+   */\n+  public BeanContextSupport (BeanContext peer)\n+  {\n+    this (peer, null, true, true);\n+  }\n+\n+  /**\n+   * Construct a BeanContextSupport instance.\n+   */\n+  public BeanContextSupport (BeanContext peer, Locale lcle)\n+  {\n+    this (peer, lcle, true, true);\n+  }\n+\n+  /**\n+   * Construct a BeanContextSupport instance.\n+   */\n+  public BeanContextSupport (BeanContext peer, Locale lcle, boolean dtime)\n+  {\n+    this (peer, lcle, dtime, true);\n+  }\n+\n+  /**\n+   * Construct a BeanContextSupport instance.\n+   */\n+  public BeanContextSupport (BeanContext peer, Locale lcle, boolean dtime,\n+                             boolean visible)\n+  {\n+    locale = lcle;\n+    designTime = dtime;\n+    okToUseGui = visible;\n+\n+    initialize ();\n+    \n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean add (Object targetChild)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean addAll (Collection c)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void addBeanContextMembershipListener (BeanContextMembershipListener bcml)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean avoidingGui ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected Iterator bcsChildren ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected void bcsPreDeserializationHook (ObjectInputStream ois)\n+    throws ClassNotFoundException, IOException \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected void bcsPreSerializationHook (ObjectOutputStream oos)\n+    throws IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected void childDeserializedHook (Object child, BeanContextSupport.BCSChild bcsc)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected void childJustAddedHook (Object child, BeanContextSupport.BCSChild bcsc)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected void childJustRemovedHook (Object child, BeanContextSupport.BCSChild bcsc)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final boolean classEquals (Class first, Class second)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void clear ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean contains (Object o)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean containsAll (Collection c)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean containsKey (Object o)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final Object[] copyChildren ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected BeanContextSupport.BCSChild createBCSChild (Object targetChild, Object peer)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void deserialize (ObjectInputStream ois, Collection coll)\n+    throws ClassNotFoundException, IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void dontUseGui ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void fireChildrenAdded (BeanContextMembershipEvent bcme)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void fireChildrenRemoved (BeanContextMembershipEvent bcme)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public BeanContext getBeanContextPeer ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final BeanContextChild getChildBeanContextChild (Object child)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final BeanContextMembershipListener getChildBeanContextMembershipListener (Object child)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final PropertyChangeListener getChildPropertyChangeListener (Object child)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final Serializable getChildSerializable (Object child)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final VetoableChangeListener getChildVetoableChangeListener (Object child)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected static final Visibility getChildVisibility (Object child)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Locale getLocale ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public URL getResource (String name, BeanContextChild bcc)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public InputStream getResourceAsStream (String name, BeanContextChild bcc)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected void initialize ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Object instantiateChild (String beanName)\n+    throws IOException, ClassNotFoundException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean isDesignTime ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean isEmpty ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean isSerializing ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Iterator iterator ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean needsGui ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void okToUseGui ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void propertyChange (PropertyChangeEvent pce)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public final void readChildren (ObjectInputStream ois)\n+    throws IOException, ClassNotFoundException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean remove (Object targetChild)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected boolean remove (Object targetChild, boolean callChildSetBC)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean removeAll (Collection c)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void removeBeanContextMembershipListener (BeanContextMembershipListener bcml)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public boolean retainAll (Collection c)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected final void serialize (ObjectOutputStream oos, Collection coll)\n+    throws IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void setDesignTime (boolean dtime)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void setLocale (Locale newLocale)\n+    throws PropertyVetoException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public int size ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Object[] toArray ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public Object[] toArray (Object[] arry)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected boolean validatePendingAdd (Object targetChild)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  protected boolean validatePendingRemove (Object targetChild)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public void vetoableChange (PropertyChangeEvent pce)\n+    throws PropertyVetoException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public final void writeChildren (ObjectOutputStream oos)\n+    throws IOException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+}"}]}