{"sha": "077b0dfbfe62790f11c2d173da10b80ed752f9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc3YjBkZmJmZTYyNzkwZjExYzJkMTczZGExMGI4MGVkNzUyZjlkMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-05-02T10:44:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-05-02T10:44:55Z"}, "message": "re PR middle-end/27337 (OpenMP ICE in expand_expr_real_1 at expr.c:6814)\n\n\tPR middle-end/27337\n\t* gimplify.c (gimplify_scan_omp_clauses): Handle INDIRECT_REF\n\taround RESULT_DECL for result passed by reference.\n\t(gimplify_expr): Call omp_notice_variable when RESULT_DECL is seen.\n\t* omp-low.c (use_pointer_for_field): Don't look at\n\tDECL_HAS_VALUE_EXPR_P for RESULT_DECLs.\n\t(scan_omp_1): Call remap_decl on RESULT_DECLs.\n\t(lower_rec_input_clauses): Don't allocate VLA memory for the second\n\ttime or var for passing by reference for\n\tOMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE clauses.  Allow creation of\n\tTREE_ADDRESSABLE variables when passing by reference.\n\n\t* omp-low.c (dump_omp_region): Fix output formatting.\ncp/\n\t* cp-gimplify.c (cxx_omp_privatize_by_reference): New function.\n\t* cp-tree.h (cxx_omp_privatize_by_reference): New prototype.\n\t* cp-objcp-common.h (LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE): Define.\ntestsuite/\n\t* g++.dg/gomp/pr27337-1.C: New test.\n\t* g++.dg/gomp/pr27337-2.C: New test.\nlibgomp/\n\t* testsuite/libgomp.c++/pr27337.C: New test.\n\nFrom-SVN: r113456", "tree": {"sha": "e7fe929b16a97446edb70447a1000494b145b0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7fe929b16a97446edb70447a1000494b145b0dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/077b0dfbfe62790f11c2d173da10b80ed752f9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077b0dfbfe62790f11c2d173da10b80ed752f9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077b0dfbfe62790f11c2d173da10b80ed752f9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077b0dfbfe62790f11c2d173da10b80ed752f9d1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2aee3e57aed77de4f5ef28a8711b315aeb1bf77c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aee3e57aed77de4f5ef28a8711b315aeb1bf77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aee3e57aed77de4f5ef28a8711b315aeb1bf77c"}], "stats": {"total": 214, "additions": 208, "deletions": 6}, "files": [{"sha": "f9213111d183bfa1771f87479ad06c492cef6bcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -1,5 +1,19 @@\n 2006-05-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/27337\n+\t* gimplify.c (gimplify_scan_omp_clauses): Handle INDIRECT_REF\n+\taround RESULT_DECL for result passed by reference.\n+\t(gimplify_expr): Call omp_notice_variable when RESULT_DECL is seen.\n+\t* omp-low.c (use_pointer_for_field): Don't look at\n+\tDECL_HAS_VALUE_EXPR_P for RESULT_DECLs.\n+\t(scan_omp_1): Call remap_decl on RESULT_DECLs.\n+\t(lower_rec_input_clauses): Don't allocate VLA memory for the second\n+\ttime or var for passing by reference for\n+\tOMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE clauses.  Allow creation of\n+\tTREE_ADDRESSABLE variables when passing by reference.\n+\n+\t* omp-low.c (dump_omp_region): Fix output formatting.\n+\n \tPR middle-end/27328\n \t* omp-low.c (remove_exit_barrier): Handle NULL exit_bb.\n \t(expand_omp_parallel): Likewise."}, {"sha": "937d5e80f1530e9af3baffd0db4f3d77b8edba12", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -1,3 +1,10 @@\n+2006-05-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/27337\n+\t* cp-gimplify.c (cxx_omp_privatize_by_reference): New function.\n+\t* cp-tree.h (cxx_omp_privatize_by_reference): New prototype.\n+\t* cp-objcp-common.h (LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE): Define.\n+\n 2006-04-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27094"}, {"sha": "4746103e61872f319f525a4858406058376deac4", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -1,6 +1,6 @@\n /* C++-specific tree lowering bits; see also c-gimplify.c and tree-gimple.c.\n \n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@redhat.com>\n \n This file is part of GCC.\n@@ -870,3 +870,12 @@ cxx_omp_clause_dtor (tree clause, tree decl)\n \n   return ret;\n }\n+\n+/* True if OpenMP should privatize what this DECL points to rather\n+   than the DECL itself.  */\n+\n+bool\n+cxx_omp_privatize_by_reference (tree decl)\n+{\n+  return TREE_CODE (decl) == RESULT_DECL && DECL_BY_REFERENCE (decl);\n+}"}, {"sha": "65eb6aedfa3650b16662a9f4467b7aa873523b30", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -161,5 +161,7 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_OMP_CLAUSE_ASSIGN_OP cxx_omp_clause_assign_op\n #undef LANG_HOOKS_OMP_CLAUSE_DTOR\n #define LANG_HOOKS_OMP_CLAUSE_DTOR cxx_omp_clause_dtor\n+#undef LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\n+#define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE cxx_omp_privatize_by_reference\n \n #endif /* GCC_CP_OBJCP_COMMON */"}, {"sha": "2e5739a7eb68a036839d070b47500eaa95003556", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -4267,6 +4267,7 @@ extern tree cxx_omp_clause_default_ctor\t\t(tree, tree);\n extern tree cxx_omp_clause_copy_ctor\t\t(tree, tree, tree);\n extern tree cxx_omp_clause_assign_op\t\t(tree, tree, tree);\n extern tree cxx_omp_clause_dtor\t\t\t(tree, tree);\n+extern bool cxx_omp_privatize_by_reference\t(tree);\n \n /* in tree.c */\n extern void lang_check_failed\t\t\t(const char *, int,"}, {"sha": "af3d92431284e2e4e4894a07da736111d446233a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -4504,6 +4504,11 @@ gimplify_scan_omp_clauses (tree *list_p, tree *pre_p, bool in_parallel)\n \t      remove = true;\n \t      break;\n \t    }\n+\t  /* Handle NRV results passed by reference.  */\n+\t  if (TREE_CODE (decl) == INDIRECT_REF\n+\t      && TREE_CODE (TREE_OPERAND (decl, 0)) == RESULT_DECL\n+\t      && DECL_BY_REFERENCE (TREE_OPERAND (decl, 0)))\n+\t    OMP_CLAUSE_DECL (c) = decl = TREE_OPERAND (decl, 0);\n \t  omp_add_variable (ctx, decl, flags);\n \t  if (TREE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t      && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n@@ -4531,6 +4536,11 @@ gimplify_scan_omp_clauses (tree *list_p, tree *pre_p, bool in_parallel)\n \t      remove = true;\n \t      break;\n \t    }\n+\t  /* Handle NRV results passed by reference.  */\n+\t  if (TREE_CODE (decl) == INDIRECT_REF\n+\t      && TREE_CODE (TREE_OPERAND (decl, 0)) == RESULT_DECL\n+\t      && DECL_BY_REFERENCE (TREE_OPERAND (decl, 0)))\n+\t    OMP_CLAUSE_DECL (c) = decl = TREE_OPERAND (decl, 0);\n \tdo_notice:\n \t  if (outer_ctx)\n \t    omp_notice_variable (outer_ctx, decl, true);\n@@ -5558,6 +5568,13 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  ret = gimplify_var_or_parm_decl (expr_p);\n \t  break;\n \n+\tcase RESULT_DECL:\n+\t  /* When within an OpenMP context, notice uses of variables.  */\n+\t  if (gimplify_omp_ctxp)\n+\t    omp_notice_variable (gimplify_omp_ctxp, *expr_p, true);\n+\t  ret = GS_ALL_DONE;\n+\t  break;\n+\n \tcase SSA_NAME:\n \t  /* Allow callbacks into the gimplifier during optimization.  */\n \t  ret = GS_ALL_DONE;"}, {"sha": "f344e6933fbf50cbe265f69f2976dc7aa09675db", "filename": "gcc/omp-low.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -491,7 +491,7 @@ use_pointer_for_field (tree decl, bool shared_p)\n \t without analyzing the expression whether or not its location\n \t is accessible to anyone else.  In the case of nested parallel\n \t regions it certainly may be.  */\n-      if (DECL_HAS_VALUE_EXPR_P (decl))\n+      if (TREE_CODE (decl) != RESULT_DECL && DECL_HAS_VALUE_EXPR_P (decl))\n \treturn true;\n \n       /* Do not use copy-in/copy-out for variables that have their\n@@ -724,7 +724,7 @@ dump_omp_region (FILE *file, struct omp_region *region, int indent)\n     }\n     \n   if (region->exit)\n-    fprintf (file, \"%*sbb: %d: OMP_RETURN\\n\", indent, \"\",\n+    fprintf (file, \"%*sbb %d: OMP_RETURN\\n\", indent, \"\",\n \t     region->exit->index);\n   else\n     fprintf (file, \"%*s[no exit marker]\\n\", indent, \"\");\n@@ -1286,6 +1286,7 @@ scan_omp_1 (tree *tp, int *walk_subtrees, void *data)\n     case VAR_DECL:\n     case PARM_DECL:\n     case LABEL_DECL:\n+    case RESULT_DECL:\n       if (ctx)\n \t*tp = remap_decl (t, &ctx->cb);\n       break;\n@@ -1518,10 +1519,14 @@ lower_rec_input_clauses (tree clauses, tree *ilist, tree *dlist,\n \t      break;\n \t    case OMP_CLAUSE_SHARED:\n \t    case OMP_CLAUSE_FIRSTPRIVATE:\n-\t    case OMP_CLAUSE_LASTPRIVATE:\n \t    case OMP_CLAUSE_COPYIN:\n \t    case OMP_CLAUSE_REDUCTION:\n \t      break;\n+\t    case OMP_CLAUSE_LASTPRIVATE:\n+\t      if (pass != 0\n+\t\t  && OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE (c))\n+\t\tcontinue;\n+\t      break;\n \t    default:\n \t      continue;\n \t    }\n@@ -1564,7 +1569,8 @@ lower_rec_input_clauses (tree clauses, tree *ilist, tree *dlist,\n \t\t code that expects a pointer to something that expects\n \t\t a direct variable.  Note that this doesn't apply to\n \t\t C++, since reference types are disallowed in data\n-\t\t sharing clauses there.  */\n+\t\t sharing clauses there, except for NRV optimized\n+\t\t return values.  */\n \t      if (pass == 0)\n \t\tcontinue;\n \n@@ -1575,7 +1581,9 @@ lower_rec_input_clauses (tree clauses, tree *ilist, tree *dlist,\n \t\t  if (DECL_NAME (var))\n \t\t    name = IDENTIFIER_POINTER (DECL_NAME (new_var));\n \n-\t\t  x = create_tmp_var (TREE_TYPE (TREE_TYPE (new_var)), name);\n+\t\t  x = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (new_var)),\n+\t\t\t\t\t  name);\n+\t\t  gimple_add_tmp_var (x);\n \t\t  x = build_fold_addr_expr_with_type (x, TREE_TYPE (new_var));\n \t\t}\n \t      else"}, {"sha": "d5b92bb42584b64a7e4d7369a90b4fb514b4abae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -1,5 +1,9 @@\n 2006-05-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/27337\n+\t* g++.dg/gomp/pr27337-1.C: New test.\n+\t* g++.dg/gomp/pr27337-2.C: New test.\n+\n \tPR middle-end/27328\n \t* gcc.dg/gomp/pr27328.c: New test.\n "}, {"sha": "6c26070ab349b7cf12cd0d561999c545de358405", "filename": "gcc/testsuite/g++.dg/gomp/pr27337-1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27337-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27337-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27337-1.C?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -0,0 +1,22 @@\n+// PR middle-end/27337\n+// { dg-do compile }\n+\n+struct S\n+{\n+  S ();\n+  ~S ();\n+  double &operator* () const;\n+};\n+\n+S\n+foo ()\n+{\n+  int i;\n+  S ret;\n+\n+#pragma omp parallel for\n+  for (i = 0; i < 2; i++)\n+    *ret += i;\n+\n+  return ret;\n+}"}, {"sha": "d1ae4a139f22e7cca7ae260427c6b9c1a3cfc6a2", "filename": "gcc/testsuite/g++.dg/gomp/pr27337-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27337-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27337-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27337-2.C?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -0,0 +1,22 @@\n+// PR middle-end/27337\n+// { dg-do compile }\n+\n+struct S\n+{\n+  S ();\n+  ~S ();\n+  int i;\n+};\n+\n+S\n+foo ()\n+{\n+  int i;\n+  S ret;\n+\n+#pragma omp parallel for firstprivate (ret) lastprivate (ret)\n+  for (i = 0; i < 2; i++)\n+    ret.i += i;\n+\n+  return ret;\n+}"}, {"sha": "754d0f91df6b67f920e0f4a504280d7290d158d3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -1,3 +1,8 @@\n+2006-05-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/27337\n+\t* testsuite/libgomp.c++/pr27337.C: New test.\n+\n 2006-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/26171"}, {"sha": "c12154e02b664066aca71c9c44f8ecc7435017f9", "filename": "libgomp/testsuite/libgomp.c++/pr27337.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077b0dfbfe62790f11c2d173da10b80ed752f9d1/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr27337.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077b0dfbfe62790f11c2d173da10b80ed752f9d1/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr27337.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr27337.C?ref=077b0dfbfe62790f11c2d173da10b80ed752f9d1", "patch": "@@ -0,0 +1,91 @@\n+// PR middle-end/27337\n+// { dg-do run }\n+\n+#include <omp.h>\n+\n+extern \"C\" void abort (void);\n+\n+struct S\n+{\n+  S ();\n+  ~S ();\n+  S (const S &);\n+  int i;\n+};\n+\n+int n[3];\n+\n+S::S () : i(18)\n+{\n+  if (omp_get_thread_num () != 0)\n+#pragma omp atomic\n+    n[0]++;\n+}\n+\n+S::~S ()\n+{\n+  if (omp_get_thread_num () != 0)\n+#pragma omp atomic\n+    n[1]++;\n+}\n+\n+S::S (const S &x)\n+{\n+  if (x.i != 18)\n+    abort ();\n+  i = 118;\n+  if (omp_get_thread_num () != 0)\n+#pragma omp atomic\n+    n[2]++;\n+}\n+\n+S\n+foo ()\n+{\n+  int i;\n+  S ret;\n+\n+#pragma omp parallel for firstprivate (ret) lastprivate (ret) \\\n+\t\t\t schedule (static, 1) num_threads (4)\n+  for (i = 0; i < 4; i++)\n+    {\n+      ret.i += omp_get_thread_num ();\n+      // FIXME: The following barrier should be unnecessary.\n+#pragma omp barrier\n+    }\n+\n+  return ret;\n+}\n+\n+S\n+bar ()\n+{\n+  int i;\n+  S ret;\n+\n+#pragma omp parallel for num_threads (4)\n+  for (i = 0; i < 4; i++)\n+#pragma omp atomic\n+    ret.i += omp_get_thread_num () + 1;\n+\n+  return ret;\n+}\n+\n+S x;\n+\n+int\n+main (void)\n+{\n+  omp_set_dynamic (false);\n+  x = foo ();\n+  if (n[0] != 0 || n[1] != 3 || n[2] != 3)\n+    abort ();\n+  if (x.i != 118 + 3)\n+    abort ();\n+  x = bar ();\n+  if (n[0] != 0 || n[1] != 3 || n[2] != 3)\n+    abort ();\n+  if (x.i != 18 + 0 + 1 + 2 + 3 + 4)\n+    abort ();\n+  return 0;\n+}"}]}