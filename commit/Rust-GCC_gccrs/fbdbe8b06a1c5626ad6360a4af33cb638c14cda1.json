{"sha": "fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkYmU4YjA2YTFjNTYyNmFkNjM2MGE0YWYzM2NiNjM4YzE0Y2RhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-31T07:10:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-31T07:10:57Z"}, "message": "re PR c++/90947 (Simple lookup table of array of strings is miscompiled)\n\n\tPR c++/90947\n\t* tree.h (type_initializer_zero_p): Remove.\n\t* tree.c (type_initializer_zero_p): Remove.\ncp/\n\t* cp-tree.h (type_initializer_zero_p): Declare.\n\t* decl.c (reshape_init_array_1): Formatting fix.\n\t* tree.c (type_initializer_zero_p): New function.  Moved from\n\t../tree.c, use next_initializable_field, formatting fix.  Return\n\tfalse for TYPE_NON_AGGREGATE_CLASS types.\n\nFrom-SVN: r277656", "tree": {"sha": "6f3b3270e66eb2e75172648e9848a118150d9d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3b3270e66eb2e75172648e9848a118150d9d5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4c431266f9aaf604edfca68e852ae8efe966e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c431266f9aaf604edfca68e852ae8efe966e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c431266f9aaf604edfca68e852ae8efe966e8e"}], "stats": {"total": 173, "additions": 97, "deletions": 76}, "files": [{"sha": "9f454193905c5569bb508c0f805231117444faee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -1,3 +1,9 @@\n+2019-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/90947\n+\t* tree.h (type_initializer_zero_p): Remove.\n+\t* tree.c (type_initializer_zero_p): Remove.\n+\n 2019-10-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* doc/invoke.texi (-Wshadow, -Wshadow=global"}, {"sha": "31f251c1b7e20fa2de303e1e99f282b4396c7f98", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -1,3 +1,12 @@\n+2019-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/90947\n+\t* cp-tree.h (type_initializer_zero_p): Declare.\n+\t* decl.c (reshape_init_array_1): Formatting fix.\n+\t* tree.c (type_initializer_zero_p): New function.  Moved from\n+\t../tree.c, use next_initializable_field, formatting fix.  Return\n+\tfalse for TYPE_NON_AGGREGATE_CLASS types.\n+\n 2019-10-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92268 - hard error satisfying return-type-requirement"}, {"sha": "42d5111ac0fb3c600c655baab7f8c65f3d72bd7b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -7382,6 +7382,11 @@ extern tree cxx_copy_lang_qualifiers\t\t(const_tree, const_tree);\n \n extern void cxx_print_statistics\t\t(void);\n extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);\n+/* Analogous to initializer_zerop but also examines the type for\n+   which the initializer is being used.  Unlike initializer_zerop,\n+   considers empty strings to be zero initializers for arrays and\n+   non-zero for pointers.  */\n+extern bool type_initializer_zero_p\t\t(tree, tree);\n \n /* in ptree.c */\n extern void cxx_print_xnode\t\t\t(FILE *, tree, int);"}, {"sha": "72acc8f0224b3a96929bf0f6bdf6173754523c8f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -5973,9 +5973,8 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n       /* Pointers initialized to strings must be treated as non-zero\n \t even if the string is empty.  */\n       tree init_type = TREE_TYPE (elt_init);\n-      if ((POINTER_TYPE_P (elt_type) != POINTER_TYPE_P (init_type)))\n-\tlast_nonzero = index;\n-      else if (!type_initializer_zero_p (elt_type, elt_init))\n+      if (POINTER_TYPE_P (elt_type) != POINTER_TYPE_P (init_type)\n+\t  || !type_initializer_zero_p (elt_type, elt_init))\n \tlast_nonzero = index;\n \n       /* This can happen with an invalid initializer (c++/54501).  */"}, {"sha": "a4b8b00c92295a3f112eb64d40c34a070db6fb9b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -5540,6 +5540,68 @@ maybe_warn_zero_as_null_pointer_constant (tree expr, location_t loc)\n   return false;\n }\n \f\n+/* Given an initializer INIT for a TYPE, return true if INIT is zero\n+   so that it can be replaced by value initialization.  This function\n+   distinguishes betwen empty strings as initializers for arrays and\n+   for pointers (which make it return false).  */\n+\n+bool\n+type_initializer_zero_p (tree type, tree init)\n+{\n+  if (type == error_mark_node || init == error_mark_node)\n+    return false;\n+\n+  STRIP_NOPS (init);\n+\n+  if (POINTER_TYPE_P (type))\n+    return TREE_CODE (init) != STRING_CST && initializer_zerop (init);\n+\n+  if (TREE_CODE (init) != CONSTRUCTOR)\n+    return initializer_zerop (init);\n+\n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      tree elt_type = TREE_TYPE (type);\n+      elt_type = TYPE_MAIN_VARIANT (elt_type);\n+      if (elt_type == char_type_node)\n+\treturn initializer_zerop (init);\n+\n+      tree elt_init;\n+      unsigned HOST_WIDE_INT i;\n+      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (init), i, elt_init)\n+\tif (!type_initializer_zero_p (elt_type, elt_init))\n+\t  return false;\n+      return true;\n+    }\n+\n+  if (TREE_CODE (type) != RECORD_TYPE)\n+    return initializer_zerop (init);\n+\n+  if (TYPE_NON_AGGREGATE_CLASS (type))\n+    return false;\n+\n+  tree fld = TYPE_FIELDS (type);\n+\n+  tree fld_init;\n+  unsigned HOST_WIDE_INT i;\n+  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (init), i, fld_init)\n+    {\n+      fld = next_initializable_field (fld);\n+      if (!fld)\n+\treturn true;\n+\n+      tree fldtype = TREE_TYPE (fld);\n+      if (!type_initializer_zero_p (fldtype, fld_init))\n+\treturn false;\n+\n+      fld = DECL_CHAIN (fld);\n+      if (!fld)\n+\tbreak;\n+    }\n+\n+  return true;\n+}\n+\f\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n /* Complain that some language-specific thing hanging off a tree\n    node has been accessed improperly.  */"}, {"sha": "f6be350ba72b1a7a19086d31361c4e1d44f0d251", "filename": "gcc/testsuite/g++.dg/init/array54.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray54.C?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/90947\n+// { dg-do run { target c++11 } }\n+\n+#include <atomic>\n+\n+static std::atomic<int> a[1] { {1} };\n+\n+int\n+main ()\n+{\n+  if (a[0].load () != 1)\n+    __builtin_abort ();\n+}"}, {"sha": "3866804b99dbc1b57955d4db2c6d3261d9be18d5", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -11123,73 +11123,6 @@ initializer_each_zero_or_onep (const_tree expr)\n     }\n }\n \n-/* Given an initializer INIT for a TYPE, return true if INIT is zero\n-   so that it can be replaced by value initialization.  This function\n-   distinguishes betwen empty strings as initializers for arrays and\n-   for pointers (which make it return false).  */\n-\n-bool\n-type_initializer_zero_p (tree type, tree init)\n-{\n-  if (type  == error_mark_node || init == error_mark_node)\n-    return false;\n-\n-  STRIP_NOPS (init);\n-\n-  if (POINTER_TYPE_P (type))\n-    return TREE_CODE (init) != STRING_CST && initializer_zerop (init);\n-\n-  if (TREE_CODE (init) != CONSTRUCTOR)\n-    return initializer_zerop (init);\n-\n-  if (TREE_CODE (type) == ARRAY_TYPE)\n-    {\n-      tree elt_type = TREE_TYPE (type);\n-      elt_type = TYPE_MAIN_VARIANT (elt_type);\n-      if (elt_type == char_type_node)\n-\treturn initializer_zerop (init);\n-\n-      tree elt_init;\n-      unsigned HOST_WIDE_INT i;\n-      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (init), i, elt_init)\n-\tif (!type_initializer_zero_p (elt_type, elt_init))\n-\t  return false;\n-      return true;\n-    }\n-\n-  if (TREE_CODE (type) != RECORD_TYPE)\n-    return initializer_zerop (init);\n-\n-  tree fld = TYPE_FIELDS (type);\n-\n-  tree fld_init;\n-  unsigned HOST_WIDE_INT i;\n-  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (init), i, fld_init)\n-    {\n-      /* Advance to the next member, skipping over everything that\n-\t canot be initialized (including unnamed bit-fields).  */\n-      while (TREE_CODE (fld) != FIELD_DECL\n-\t     || DECL_ARTIFICIAL (fld)\n-\t     || (DECL_BIT_FIELD (fld) && !DECL_NAME (fld)))\n-\t{\n-\t  fld = DECL_CHAIN (fld);\n-\t  if (!fld)\n-\t    return true;\n-\t  continue;\n-\t}\n-\n-      tree fldtype = TREE_TYPE (fld);\n-      if (!type_initializer_zero_p (fldtype, fld_init))\n-\treturn false;\n-\n-      fld = DECL_CHAIN (fld);\n-      if (!fld)\n-\tbreak;\n-    }\n-\n-  return true;\n-}\n-\n /* Check if vector VEC consists of all the equal elements and\n    that the number of elements corresponds to the type of VEC.\n    The function returns first element of the vector"}, {"sha": "18d6c0e0c21f14f54e3a0f9614bdfe0f5fd35536", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdbe8b06a1c5626ad6360a4af33cb638c14cda1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fbdbe8b06a1c5626ad6360a4af33cb638c14cda1", "patch": "@@ -4690,12 +4690,6 @@ extern tree first_field (const_tree);\n extern bool initializer_zerop (const_tree, bool * = NULL);\n extern bool initializer_each_zero_or_onep (const_tree);\n \n-/* Analogous to initializer_zerop but also examines the type for\n-   which the initializer is being used.  Unlike initializer_zerop,\n-   considers empty strings to be zero initializers for arrays and\n-   non-zero for pointers.  */\n-extern bool type_initializer_zero_p (tree, tree);\n-\n extern wide_int vector_cst_int_elt (const_tree, unsigned int);\n extern tree vector_cst_elt (const_tree, unsigned int);\n "}]}