{"sha": "8ec49cffc2ab188190544d494b8bb7907732d17e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjNDljZmZjMmFiMTg4MTkwNTQ0ZDQ5NGI4YmI3OTA3NzMyZDE3ZQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2010-03-03T22:05:30Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2010-03-03T22:05:30Z"}, "message": "sourcebuild.texi (Test directives): Document that arguments include-opts and exclude-opts are now optional for...\n\n\t* doc/sourcebuild.texi (Test directives): Document that arguments\n\tinclude-opts and exclude-opts are now optional for dg-skip-if,\n\tdg-xfail-if, dg-xfail-run-if, and dg-shouldfail.\n\n\t* lib/target-supports-dg.exp (check-flags): Provide defaults for\n\tinclude-opts and exclude-opts; skip checking the flags if arguments\n\tare the same as the defaults.\n\t(dg-xfail-if): Verify the number of arguments, supply defaults\n\tfor unspecified optional arguments.\n\t(dg-skip-if, dg-xfail-run-if): Verify the number of arguments.\n\nFrom-SVN: r157206", "tree": {"sha": "b7aef3740414b72a1357ba8c9a64141be8bc2c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7aef3740414b72a1357ba8c9a64141be8bc2c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ec49cffc2ab188190544d494b8bb7907732d17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec49cffc2ab188190544d494b8bb7907732d17e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec49cffc2ab188190544d494b8bb7907732d17e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec49cffc2ab188190544d494b8bb7907732d17e/comments", "author": null, "committer": null, "parents": [{"sha": "a84713ad264845bbbcad973031a3ef3f56064f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84713ad264845bbbcad973031a3ef3f56064f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84713ad264845bbbcad973031a3ef3f56064f33"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "a65ea60aa5a36c6a7049b3df1df4d8f13b95838b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ec49cffc2ab188190544d494b8bb7907732d17e", "patch": "@@ -1,3 +1,9 @@\n+2010-03-03  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/sourcebuild.texi (Test directives): Document that arguments\n+\tinclude-opts and exclude-opts are now optional for dg-skip-if,\n+\tdg-xfail-if, dg-xfail-run-if, and dg-shouldfail.\n+\n 2010-03-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/12909"}, {"sha": "ee5545850ea603df76b9eeb73162e681a4ffaa65", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8ec49cffc2ab188190544d494b8bb7907732d17e", "patch": "@@ -1019,7 +1019,7 @@ the test\n @item 300\n @end itemize\n \n-@item @{ dg-skip-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n+@item @{ dg-skip-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n Arguments @var{include-opts} and @var{exclude-opts} are lists in which\n each element is a string of zero or more GCC options.\n Skip the test if all of the following conditions are met:\n@@ -1029,11 +1029,13 @@ Skip the test if all of the following conditions are met:\n @item for at least one of the option strings in @var{include-opts},\n every option from that string is in the set of options with which\n the test would be compiled; use @samp{\"*\"} for an @var{include-opts} list\n-that matches any options\n+that matches any options; that is the default if @var{include-opts} is\n+not specified\n \n @item for each of the option strings in @var{exclude-opts}, at least one\n option from that string is not in the set of options with which the test\n-would be compiled; use @samp{\"\"} for an empty @var{exclude-opts} list\n+would be compiled; use @samp{\"\"} for an empty @var{exclude-opts} list;\n+that is the default if @var{exclude-opts} is not specified\n @end itemize\n \n For example, to skip a test if option @code{-Os} is present:\n@@ -1067,11 +1069,11 @@ but not if @code{-fpic} is also present:\n /* @{ dg-skip-if \"\" @{ *-*-* @}  @{ \"-O2 -g\" \"-O3 -g\" @} @{ \"-fpic\" @} @} */\n @end smallexample\n \n-@item  @{ dg-xfail-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n+@item  @{ dg-xfail-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n Expect the test to fail if the conditions (which are the same as for\n @code{dg-skip-if}) are met.  This does not affect the execute step.\n \n-@item  @{ dg-xfail-run-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n+@item  @{ dg-xfail-run-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n Expect the execute step of a test to fail if the conditions (which are\n the same as for @code{dg-skip-if}) and @code{dg-xfail-if}) are met.\n \n@@ -1089,7 +1091,7 @@ is not covered by the effective-target keyword.\n This directive must appear after any @code{dg-do} directive in the test\n and before any @code{dg-additional-sources} directive.\n \n-@item  @{ dg-shouldfail @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n+@item  @{ dg-shouldfail @var{comment} [@{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]]] @}\n Expect the test executable to return a nonzero exit status if the\n conditions (which are the same as for @code{dg-skip-if}) are met.\n "}, {"sha": "c06fe365ae569c1b37cf0866ff6d48f5d1220c68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ec49cffc2ab188190544d494b8bb7907732d17e", "patch": "@@ -1,3 +1,12 @@\n+2010-03-03  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/target-supports-dg.exp (check-flags): Provide defaults for\n+\tinclude-opts and exclude-opts; skip checking the flags if arguments\n+\tare the same as the defaults.\n+\t(dg-xfail-if): Verify the number of arguments, supply defaults\n+\tfor unspecified optional arguments.\n+\t(dg-skip-if, dg-xfail-run-if): Verify the number of arguments.\n+\n 2010-03-03  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/abi/mangle19-1.C: Adjust for default -Wabi."}, {"sha": "12631fafdfb2ef0501c779c3db51f7e3bf0be820", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec49cffc2ab188190544d494b8bb7907732d17e/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=8ec49cffc2ab188190544d494b8bb7907732d17e", "patch": "@@ -235,9 +235,26 @@ proc check-flags { args } {\n \tappend compiler_flags \"[board_info $dest multilib_flags] \"\n     }\n \n-    # The target list might be an effective-target keyword, so replace\n-    # the original list with \"*-*-*\", since we already know it matches.\n-    set result [check_conditional_xfail [lreplace $args 1 1 \"*-*-*\"]]\n+    # The next two arguments are optional.  If they were not specified,\n+    # use the defaults.\n+    if { [llength $args] == 2 } {\n+\tlappend $args [list \"*\"]\n+    }\n+    if { [llength $args] == 3 } {\n+\tlappend $args [list \"\"]\n+    }\n+\n+    # If the option strings are the defaults, or the same as the\n+    # defaults, there is no need to call check_conditional_xfail to\n+    # compare them to the actual options.\n+    if { [string compare [lindex $args 2] \"*\"] == 0\n+\t && [string compare [lindex $args 3] \"\" ] == 0 } {\n+\tset result 1    \n+    } else {\n+\t# The target list might be an effective-target keyword, so replace\n+\t# the original list with \"*-*-*\", since we already know it matches.\n+\tset result [check_conditional_xfail [lreplace $args 1 1 \"*-*-*\"]]\n+    }\n \n     # Any value in this variable was left over from an earlier test.\n     set compiler_flags \"\"\n@@ -256,14 +273,18 @@ proc check-flags { args } {\n # group of tests or flags specified with a previous dg-options command.\n \n proc dg-skip-if { args } {\n+    # Verify the number of arguments.  The last two are optional.\n+    set args [lreplace $args 0 0]\n+    if { [llength $args] < 2 || [llength $args] > 4 } {\n+\terror \"dg-skip-if 2: need 2, 3, or 4 arguments\"\n+    }\n+\n     # Don't bother if we're already skipping the test.\n     upvar dg-do-what dg-do-what\n     if { [lindex ${dg-do-what} 1] == \"N\" } {\n       return\n     }\n \n-    set args [lreplace $args 0 0]\n-\n     set selector [list target [lindex $args 1]]\n     if { [dg-process-target $selector] == \"S\" } {\n \tif [check-flags $args] {\n@@ -276,31 +297,53 @@ proc dg-skip-if { args } {\n # Like check_conditional_xfail, but callable from a dg test.\n \n proc dg-xfail-if { args } {\n+    # Verify the number of arguments.  The last three are optional.\n+    set args [lreplace $args 0 0]\n+    if { [llength $args] < 2 || [llength $args] > 4 } {\n+\terror \"dg-xfail-if: need 2, 3, or 4 arguments\"\n+    }\n+\n     # Don't change anything if we're already skipping the test.\n     upvar dg-do-what dg-do-what\n     if { [lindex ${dg-do-what} 1] == \"N\" } {\n       return\n     }\n \n-    set args [lreplace $args 0 0]\n     set selector [list target [lindex $args 1]]\n     if { [dg-process-target $selector] == \"S\" } {\n \tglobal compiler_conditional_xfail_data\n-\tset compiler_conditional_xfail_data [lreplace $args 1 1 \"*-*-*\"]\n+\n+\t# The target list might be an effective-target keyword.  Replace\n+\t# the original list with \"*-*-*\", since we already know it matches.\n+\tset args [lreplace $args 1 1 \"*-*-*\"]\n+\n+\t# Supply default values for unspecified optional arguments.\n+\tif { [llength $args] == 2 } {\n+\t    lappend $args [list \"*\"]\n+\t}\n+\tif { [llength $args] == 3 } {\n+\t    lappend $args [list \"\"]\n+\t}\n+\n+\tset compiler_conditional_xfail_data $args\n     }\n }\n \n # Like dg-xfail-if but for the execute step.\n \n proc dg-xfail-run-if { args } {\n+    # Verify the number of arguments.  The last two are optional.\n+    set args [lreplace $args 0 0]\n+    if { [llength $args] < 2 || [llength $args] > 4 } {\n+\terror \"dg-xfail-run-if: need 2, 3, or 4 arguments\"\n+    }\n+\n     # Don't bother if we're already skipping the test.\n     upvar dg-do-what dg-do-what\n     if { [lindex ${dg-do-what} 1] == \"N\" } {\n       return\n     }\n \n-    set args [lreplace $args 0 0]\n-\n     set selector [list target [lindex $args 1]]\n     if { [dg-process-target $selector] == \"S\" } {\n \tif [check-flags $args] {"}]}