{"sha": "56a35ac922195c920f075ae544d6f1a90ae71b83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhMzVhYzkyMjE5NWM5MjBmMDc1YWU1NDRkNmYxYTkwYWU3MWI4Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-05-27T07:46:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-05-27T07:46:12Z"}, "message": "re PR bootstrap/80887 (gnat bootstrap fails at s-regpat.o: raised STORAGE_ERROR : stack overflow or erroneous memory access)\n\n\tPR bootstrap/80887\n\t2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* match.pd ((A +- CST1) +- CST2): Allow some conversions.\n\n\t* gcc.dg/tree-ssa/addadd.c: Xfail all scan-tree-dump*.\n\nFrom-SVN: r248533", "tree": {"sha": "963bb3da523cffea9cc25fdc1018b6140a0f046f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/963bb3da523cffea9cc25fdc1018b6140a0f046f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a35ac922195c920f075ae544d6f1a90ae71b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a35ac922195c920f075ae544d6f1a90ae71b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a35ac922195c920f075ae544d6f1a90ae71b83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a35ac922195c920f075ae544d6f1a90ae71b83/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a35ae59b92e8e0e0e7cbf641a0cfb1173584bc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35ae59b92e8e0e0e7cbf641a0cfb1173584bc72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35ae59b92e8e0e0e7cbf641a0cfb1173584bc72"}], "stats": {"total": 58, "additions": 23, "deletions": 35}, "files": [{"sha": "c79553c61200e8b7fcbca1227ae617cb769e621f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56a35ac922195c920f075ae544d6f1a90ae71b83", "patch": "@@ -1,3 +1,10 @@\n+2017-05-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/80887\n+\t2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd ((A +- CST1) +- CST2): Allow some conversions.\n+\n 2017-05-26  Martin Liska  <mliska@suse.cz>\n \n \t* dumpfile.h (enum dump_kind): Renumber TDF_* flags to be contiguous."}, {"sha": "54a8e0449f8301ffaf553c139bbd2d7ccb1e8648", "filename": "gcc/match.pd", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=56a35ac922195c920f075ae544d6f1a90ae71b83", "patch": "@@ -1299,39 +1299,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   /* (A +- CST1) +- CST2 -> A + CST3  */\n   (for outer_op (plus minus)\n    (for inner_op (plus minus)\n-\tneg_inner_op (minus plus)\n     (simplify\n-     (outer_op (convert? (inner_op @0 CONSTANT_CLASS_P@1)) CONSTANT_CLASS_P@2)\n-     (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n-      /* If one of the types wraps, use that one.  */\n-      (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n-       (if (outer_op == PLUS_EXPR)\n-\t(plus (convert @0) (inner_op @2 (convert @1)))\n-\t(minus (convert @0) (neg_inner_op @2 (convert @1))))\n-       (if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t    || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n-\t(if (outer_op == PLUS_EXPR)\n-\t (convert (plus @0 (inner_op (convert @2) @1)))\n-\t (convert (minus @0 (neg_inner_op (convert @2) @1))))\n-\t/* If the constant operation overflows we cannot do the transform\n-\t   directly as we would introduce undefined overflow, for example\n-\t   with (a - 1) + INT_MIN.  */\n-\t(if (types_match (type, @0))\n-\t (with { tree cst = const_binop (outer_op == inner_op\n-\t\t\t\t\t ? PLUS_EXPR : MINUS_EXPR,\n-\t\t\t\t\t type, @1, @2); }\n-\t  (if (cst && !TREE_OVERFLOW (cst))\n-\t   (inner_op @0 { cst; } )\n-\t   /* X+INT_MAX+1 is X-INT_MIN.  */\n-\t   (if (INTEGRAL_TYPE_P (type) && cst\n-\t\t&& wi::eq_p (cst, wi::min_value (type)))\n-\t    (neg_inner_op @0 { wide_int_to_tree (type, cst); })\n-\t    /* Last resort, use some unsigned type.  */\n-\t    (with { tree utype = unsigned_type_for (type); }\n-\t     (convert (inner_op\n-\t\t       (convert:utype @0)\n-\t\t       (convert:utype\n-\t\t\t{ drop_tree_overflow (cst); }))))))))))))))\n+     (outer_op (inner_op @0 CONSTANT_CLASS_P@1) CONSTANT_CLASS_P@2)\n+     /* If the constant operation overflows we cannot do the transform\n+\tas we would introduce undefined overflow, for example\n+\twith (a - 1) + INT_MIN.  */\n+     (with { tree cst = const_binop (outer_op == inner_op\n+\t\t\t\t     ? PLUS_EXPR : MINUS_EXPR, type, @1, @2); }\n+      (if (cst && !TREE_OVERFLOW (cst))\n+       (inner_op @0 { cst; } ))))))\n \n   /* (CST1 - A) +- CST2 -> CST3 - A  */\n   (for outer_op (plus minus)"}, {"sha": "55aed107baa92cc6ea8a30e5f97979cc2a555da7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56a35ac922195c920f075ae544d6f1a90ae71b83", "patch": "@@ -1,3 +1,8 @@\n+2017-05-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/80887\n+\t* gcc.dg/tree-ssa/addadd.c: Xfail all scan-tree-dump*.\n+\n 2017-05-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/cpp0x/dr2061.C: New."}, {"sha": "669cfbc47ec23d611af981f8c712c2a931badfde", "filename": "gcc/testsuite/gcc.dg/tree-ssa/addadd.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a35ac922195c920f075ae544d6f1a90ae71b83/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c?ref=56a35ac922195c920f075ae544d6f1a90ae71b83", "patch": "@@ -29,6 +29,6 @@ void j(S*x){\n   *x += __INT_MAX__;\n }\n \n-/* { dg-final { scan-tree-dump-times \" \\\\+ 24;\" 2 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-not \"2147483647\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\+ 24;\" 2 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" { xfail *-*-* }  } } */\n+/* { dg-final { scan-tree-dump-not \"2147483647\" \"optimized\" { xfail *-*-* }  } } */"}]}