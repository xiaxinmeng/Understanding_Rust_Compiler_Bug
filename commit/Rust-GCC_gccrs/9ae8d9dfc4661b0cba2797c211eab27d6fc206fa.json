{"sha": "9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlOGQ5ZGZjNDY2MWIwY2JhMjc5N2MyMTFlYWIyN2Q2ZmMyMDZmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-05T19:39:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-05T19:39:12Z"}, "message": "cp-tree.h (TEMPLATE_PARM_NUM_SIBLINGS): Remove.\n\n\t* cp-tree.h (TEMPLATE_PARM_NUM_SIBLINGS): Remove.\n\t(struct template_parm_index_s): Remove num_siblings.\n\t* pt.c (fixup_template_parms, fixup_template_parm_index): Remove.\n\t(fixup_template_type_parm_type): Remove.\n\t(build_template_parm_index): Remove num_siblings parm.\n\t(process_template_parm): Likewise.\n\t* parser.c (cp_parser_template_parameter_list): Adjust.\n\t* tree.c (cp_tree_equal): Don't compare num_siblings.\n\t* typeck.c (comp_template_parms_position): Likewise.\n\nFrom-SVN: r189299", "tree": {"sha": "fabfe069719efa33a914e69ac81c22627ffa0e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fabfe069719efa33a914e69ac81c22627ffa0e17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49bb4bbe90dff8b1cc71e08693ed24e00b0f648e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bb4bbe90dff8b1cc71e08693ed24e00b0f648e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bb4bbe90dff8b1cc71e08693ed24e00b0f648e"}], "stats": {"total": 345, "additions": 16, "deletions": 329}, "files": [{"sha": "f4ed6fb3ea5207525ff93d50f3fdec8819ad523a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "patch": "@@ -1,5 +1,15 @@\n 2012-07-05  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-tree.h (TEMPLATE_PARM_NUM_SIBLINGS): Remove.\n+\t(struct template_parm_index_s): Remove num_siblings.\n+\t* pt.c (fixup_template_parms, fixup_template_parm_index): Remove.\n+\t(fixup_template_type_parm_type): Remove.\n+\t(build_template_parm_index): Remove num_siblings parm.\n+\t(process_template_parm): Likewise.\n+\t* parser.c (cp_parser_template_parameter_list): Adjust.\n+\t* tree.c (cp_tree_equal): Don't compare num_siblings.\n+\t* typeck.c (comp_template_parms_position): Likewise.\n+\n \tPR c++/50852\n \tPR c++/53039\n \t* tree.c (strip_typedefs_expr): New."}, {"sha": "0b2b23494811278666cabcb688d9b2c478ce1701", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "patch": "@@ -249,7 +249,6 @@ struct GTY(()) template_parm_index_s {\n   int index;\n   int level;\n   int orig_level;\n-  int num_siblings;\n   tree decl;\n };\n typedef struct template_parm_index_s template_parm_index;\n@@ -4523,9 +4522,6 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n \t((template_parm_index*)TEMPLATE_PARM_INDEX_CHECK (NODE))\n #define TEMPLATE_PARM_IDX(NODE) (TEMPLATE_PARM_INDEX_CAST (NODE)->index)\n #define TEMPLATE_PARM_LEVEL(NODE) (TEMPLATE_PARM_INDEX_CAST (NODE)->level)\n-/* The Number of sibling parms this template parm has.  */\n-#define TEMPLATE_PARM_NUM_SIBLINGS(NODE) \\\n-  (TEMPLATE_PARM_INDEX_CAST (NODE)->num_siblings)\n #define TEMPLATE_PARM_DESCENDANTS(NODE) (TREE_CHAIN (NODE))\n #define TEMPLATE_PARM_ORIG_LEVEL(NODE) (TEMPLATE_PARM_INDEX_CAST (NODE)->orig_level)\n #define TEMPLATE_PARM_DECL(NODE) (TEMPLATE_PARM_INDEX_CAST (NODE)->decl)\n@@ -5316,9 +5312,8 @@ extern void append_type_to_template_for_access_check (tree, tree, tree,\n extern tree splice_late_return_type\t\t(tree, tree);\n extern bool is_auto\t\t\t\t(const_tree);\n extern tree process_template_parm\t\t(tree, location_t, tree, \n-\t\t\t\t\t\t bool, bool, unsigned);\n+\t\t\t\t\t\t bool, bool);\n extern tree end_template_parm_list\t\t(tree);\n-void fixup_template_parms (void);\n extern void end_template_decl\t\t\t(void);\n extern tree maybe_update_decl_type\t\t(tree, tree);\n extern bool check_default_tmpl_args             (tree, tree, int, int, int);"}, {"sha": "1428a2616bc6ea4b56b619cb6c12d3345899c740", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "patch": "@@ -11993,8 +11993,7 @@ cp_parser_template_parameter_list (cp_parser* parser)\n \t\t\t\t\t\tparm_loc,\n \t\t\t\t\t\tparameter,\n \t\t\t\t\t\tis_non_type,\n-\t\t\t\t\t\tis_parameter_pack,\n-\t\t\t\t\t\t0);\n+\t\t\t\t\t\tis_parameter_pack);\n       else\n        {\n          tree err_parm = build_tree_list (parameter, parameter);"}, {"sha": "e07a36242b755f5e20c97f0c6519de931491ece3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 312, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "patch": "@@ -147,7 +147,7 @@ static tree convert_template_argument (tree, tree, tree,\n static int for_each_template_parm (tree, tree_fn_t, void*,\n \t\t\t\t   struct pointer_set_t*, bool);\n static tree expand_template_argument_pack (tree);\n-static tree build_template_parm_index (int, int, int, int, tree, tree);\n+static tree build_template_parm_index (int, int, int, tree, tree);\n static bool inline_needs_template_parms (tree);\n static void push_inline_template_parms_recursive (tree, int);\n static tree retrieve_local_specialization (tree);\n@@ -203,8 +203,6 @@ static tree listify_autos (tree, tree);\n static tree template_parm_to_arg (tree t);\n static bool arg_from_parm_pack_p (tree, tree);\n static tree current_template_args (void);\n-static tree fixup_template_type_parm_type (tree, int);\n-static tree fixup_template_parm_index (tree, tree, int);\n static tree tsubst_template_parm (tree, tree, tsubst_flags_t);\n \n /* Make the current scope suitable for access checking when we are\n@@ -3407,22 +3405,19 @@ check_template_shadow (tree decl)\n }\n \n /* Return a new TEMPLATE_PARM_INDEX with the indicated INDEX, LEVEL,\n-   ORIG_LEVEL, DECL, and TYPE.  NUM_SIBLINGS is the total number of\n-   template parameters.  */\n+   ORIG_LEVEL, DECL, and TYPE.  */\n \n static tree\n build_template_parm_index (int index,\n \t\t\t   int level,\n \t\t\t   int orig_level,\n-\t\t\t   int num_siblings,\n \t\t\t   tree decl,\n \t\t\t   tree type)\n {\n   tree t = make_node (TEMPLATE_PARM_INDEX);\n   TEMPLATE_PARM_IDX (t) = index;\n   TEMPLATE_PARM_LEVEL (t) = level;\n   TEMPLATE_PARM_ORIG_LEVEL (t) = orig_level;\n-  TEMPLATE_PARM_NUM_SIBLINGS (t) = num_siblings;\n   TEMPLATE_PARM_DECL (t) = decl;\n   TREE_TYPE (t) = type;\n   TREE_CONSTANT (t) = TREE_CONSTANT (decl);\n@@ -3488,7 +3483,6 @@ reduce_template_parm_level (tree index, tree type, int levels, tree args,\n       t = build_template_parm_index (TEMPLATE_PARM_IDX (index),\n \t\t\t\t     TEMPLATE_PARM_LEVEL (index) - levels,\n \t\t\t\t     TEMPLATE_PARM_ORIG_LEVEL (index),\n-\t\t\t\t     TEMPLATE_PARM_NUM_SIBLINGS (index),\n \t\t\t\t     decl, type);\n       TEMPLATE_PARM_DESCENDANTS (index) = t;\n       TEMPLATE_PARM_PARAMETER_PACK (t) \n@@ -3516,8 +3510,7 @@ reduce_template_parm_level (tree index, tree type, int levels, tree args,\n \n tree\n process_template_parm (tree list, location_t parm_loc, tree parm,\n-\t\t       bool is_non_type, bool is_parameter_pack,\n-\t\t       unsigned num_template_parms)\n+\t\t       bool is_non_type, bool is_parameter_pack)\n {\n   tree decl = 0;\n   tree defval;\n@@ -3592,7 +3585,6 @@ process_template_parm (tree list, location_t parm_loc, tree parm,\n       DECL_INITIAL (parm) = DECL_INITIAL (decl)\n \t= build_template_parm_index (idx, processing_template_decl,\n \t\t\t\t     processing_template_decl,\n-\t\t\t\t     num_template_parms,\n \t\t\t\t     decl, TREE_TYPE (parm));\n \n       TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)) \n@@ -3626,7 +3618,6 @@ process_template_parm (tree list, location_t parm_loc, tree parm,\n       TEMPLATE_TYPE_PARM_INDEX (t)\n \t= build_template_parm_index (idx, processing_template_decl,\n \t\t\t\t     processing_template_decl,\n-\t\t\t\t     num_template_parms,\n \t\t\t\t     decl, TREE_TYPE (parm));\n       TEMPLATE_TYPE_PARAMETER_PACK (t) = is_parameter_pack;\n       TYPE_CANONICAL (t) = canonical_type_parameter (t);\n@@ -3666,305 +3657,6 @@ end_template_parm_list (tree parms)\n   return saved_parmlist;\n }\n \n-/* Create a new type almost identical to TYPE but which has the\n-   following differences:\n-\n-     1/ T has a new TEMPLATE_PARM_INDEX that carries the new number of\n-     template sibling parameters of T.\n-\n-     2/ T has a new canonical type that matches the new number\n-     of sibling parms.\n-\n-     3/ From now on, T is going to be what lookups referring to the\n-     name of TYPE will return. No lookup should return TYPE anymore.\n-\n-   NUM_PARMS is the new number of sibling parms TYPE belongs to.\n-\n-   This is a subroutine of fixup_template_parms.  */\n-\n-static tree\n-fixup_template_type_parm_type (tree type, int num_parms)\n-{\n-  tree orig_idx = TEMPLATE_TYPE_PARM_INDEX (type), idx;\n-  tree t;\n-  /* This is the decl which name is inserted into the symbol table for\n-     the template parm type. So whenever we lookup the type name, this\n-     is the DECL we get.  */\n-  tree decl;\n-\n-  /* Do not fix up the type twice.  */\n-  if (orig_idx && TEMPLATE_PARM_NUM_SIBLINGS (orig_idx) != 0)\n-    return type;\n-\n-  t = copy_type (type);\n-  decl = TYPE_NAME (t);\n-\n-  TYPE_MAIN_VARIANT (t) = t;\n-  TYPE_NEXT_VARIANT (t)= NULL_TREE;\n-  TYPE_POINTER_TO (t) = 0;\n-  TYPE_REFERENCE_TO (t) = 0;\n-\n-  idx = build_template_parm_index (TEMPLATE_PARM_IDX (orig_idx),\n-\t\t\t\t   TEMPLATE_PARM_LEVEL (orig_idx),\n-\t\t\t\t   TEMPLATE_PARM_ORIG_LEVEL (orig_idx),\n-\t\t\t\t   num_parms,\n-\t\t\t\t   decl, t);\n-  TEMPLATE_PARM_DESCENDANTS (idx) = TEMPLATE_PARM_DESCENDANTS (orig_idx);\n-  TEMPLATE_PARM_PARAMETER_PACK (idx) = TEMPLATE_PARM_PARAMETER_PACK (orig_idx);\n-  TEMPLATE_TYPE_PARM_INDEX (t) = idx;\n-\n-  TYPE_STUB_DECL (t) = decl;\n-  TEMPLATE_TYPE_DECL (t) = decl;\n-  if (TREE_CODE (type) == TEMPLATE_TEMPLATE_PARM)\n-    TREE_TYPE (DECL_TEMPLATE_RESULT  (decl)) = t;\n-\n-  /* Update the type associated to the type name stored in the symbol\n-     table. Now, whenever the type name is looked up, the resulting\n-     type is properly fixed up.  */\n-  TREE_TYPE (decl) = t;\n-\n-  TYPE_CANONICAL (t) = canonical_type_parameter (t);\n-\n-  return t;\n-}\n-\n-/* Create and return a new TEMPLATE_PARM_INDEX that is almost\n-   identical to I, but that is fixed up as to:\n-\n-   1/ carry the number of sibling parms (NUM_PARMS) of the template\n-   parm represented by I.\n-\n-   2/ replace all references to template parm types declared before I\n-   (in the same template parm list as I) by references to template\n-   parm types contained in ARGS. ARGS should contain the list of\n-   template parms that have been fixed up so far, in a form suitable\n-   to be passed to tsubst.\n-\n-   This is a subroutine of fixup_template_parms.  */\n-\n-static tree\n-fixup_template_parm_index (tree i, tree args, int num_parms)\n-{\n-  tree index, decl, type;\n-\n-  if (i == NULL_TREE\n-      || TREE_CODE (i) != TEMPLATE_PARM_INDEX\n-      /* Do not fix up the index twice.  */\n-      || (TEMPLATE_PARM_NUM_SIBLINGS (i) != 0))\n-    return i;\n-\n-  decl = TEMPLATE_PARM_DECL (i);\n-  type = TREE_TYPE (decl);\n-\n-  index = build_template_parm_index (TEMPLATE_PARM_IDX (i),\n-\t\t\t\t     TEMPLATE_PARM_LEVEL (i),\n-\t\t\t\t     TEMPLATE_PARM_ORIG_LEVEL (i),\n-\t\t\t\t     num_parms,\n-\t\t\t\t     decl, type);\n-\n-  TEMPLATE_PARM_DESCENDANTS (index) = TEMPLATE_PARM_DESCENDANTS (i);\n-  TEMPLATE_PARM_PARAMETER_PACK (index) = TEMPLATE_PARM_PARAMETER_PACK (i);\n-\n-  type = tsubst (type, args, tf_none, NULL_TREE);\n-  \n-  TREE_TYPE (decl) = type;\n-  TREE_TYPE (index) = type;\n-\n-  return index;\n-}\n-\n-/* \n-   This is a subroutine of fixup_template_parms.\n-\n-   It computes the canonical type of the type of the template\n-   parameter PARM_DESC and update all references to that type so that\n-   they use the newly computed canonical type. No access check is\n-   performed during the fixup. PARM_DESC is a TREE_LIST which\n-   TREE_VALUE is the template parameter and its TREE_PURPOSE is the\n-   default argument of the template parm if any. IDX is the index of\n-   the template parameter, starting at 0. NUM_PARMS is the number of\n-   template parameters in the set PARM_DESC belongs to. ARGLIST is a\n-   TREE_VEC containing the full set of template parameters in a form\n-   suitable to be passed to substs functions as their ARGS\n-   argument. This is what current_template_args returns for a given\n-   template. The innermost vector of args in ARGLIST is the set of\n-   template parms that have been fixed up so far. This function adds\n-   the fixed up parameter into that vector.  */\n-\n-static void\n-fixup_template_parm (tree parm_desc,\n-\t\t     int idx,\n-\t\t     int num_parms,\n-\t\t     tree arglist)\n-{\n-  tree parm = TREE_VALUE (parm_desc);\n-  tree fixedup_args = INNERMOST_TEMPLATE_ARGS (arglist);\n-\n-  push_deferring_access_checks (dk_no_check);\n-\n-  if (TREE_CODE (parm) == TYPE_DECL)\n-    {\n-      /* PARM is a template type parameter. Fix up its type, add\n-\t the fixed-up template parm to the vector of fixed-up\n-\t template parms so far, and substitute the fixed-up\n-\t template parms into the default argument of this\n-\t parameter.  */\n-      tree t =\n-\tfixup_template_type_parm_type (TREE_TYPE (parm), num_parms);\n-      TREE_TYPE (parm) = t;\n-\n-      TREE_VEC_ELT (fixedup_args, idx) = template_parm_to_arg (parm_desc);\n-    }\n-  else if (TREE_CODE (parm) == TEMPLATE_DECL)\n-    {\n-      /* PARM is a template template parameter. This is going to\n-\t be interesting.  */\n-      tree tparms, targs, innermost_args, t;\n-      int j;\n-\n-      /* First, fix up the parms of the template template parm\n-\t because the parms are involved in defining the new canonical\n-\t type of the template template parm.  */\n-\n-      /* So we need to substitute the template parm types that have\n-\t been fixed up so far into the template parms of this template\n-\t template parm. E.g, consider this:\n-\n-\t template<class T, template<T u> class TT> class S;\n-\n-\t In this case we want to substitute T into the\n-\t template parameters of TT.\n-\n-\t So let's walk the template parms of PARM here, and\n-\t tsubst ARGLIST into into each of the template\n-\t parms.   */\n-\n-      /* For this substitution we need to build the full set of\n-\t template parameters and use that as arguments for the\n-\t tsubsting function.  */\n-      tparms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (parm));\n-\n-      /* This will contain the innermost parms of PARM into which\n-\t we have substituted so far.  */\n-      innermost_args = make_tree_vec (TREE_VEC_LENGTH (tparms));\n-      targs = add_to_template_args (arglist, innermost_args);\n-      for (j = 0; j < TREE_VEC_LENGTH (tparms); ++j)\n-\t{\n-\t  tree parameter;\n-\n-\t  parameter = TREE_VEC_ELT (tparms, j);\n-\n-\t  /* INNERMOST_ARGS needs to have at least the same number\n-\t     of elements as the index PARAMETER, ortherwise\n-\t     tsubsting into PARAMETER will result in partially\n-\t     instantiating it, reducing its tempate parm\n-\t     level. Let's tactically fill INNERMOST_ARGS for that\n-\t     purpose.  */\n-\t  TREE_VEC_ELT (innermost_args, j) =\n-\t    template_parm_to_arg (parameter);\n-\n-\t  fixup_template_parm (parameter, j,\n-\t\t\t       TREE_VEC_LENGTH (tparms),\n-\t\t\t       targs);\n-\t}\n-\n-      /* Now fix up the type of the template template parm.  */\n-\n-      t = fixup_template_type_parm_type (TREE_TYPE (parm), num_parms);\n-      TREE_TYPE (parm) = t;\n-\n-      TREE_VEC_ELT (fixedup_args, idx) =\n-\ttemplate_parm_to_arg (parm_desc);\n-    }\n-  else if (TREE_CODE (parm) == PARM_DECL)\n-    {\n-      /* PARM is a non-type template parameter. We need to:\n-\n-       * Fix up its TEMPLATE_PARM_INDEX to make it carry the\n-       proper number of sibling parameters.\n-\n-       * Make lookups of the template parameter return a reference\n-       to the fixed-up index. No lookup should return references\n-       to the former index anymore.\n-\n-       * Substitute the template parms that got fixed up so far\n-\n-       * into the type of PARM.  */\n-\n-      tree index = DECL_INITIAL (parm);\n-\n-      /* PUSHED_DECL is the decl added to the symbol table with\n-\t the name of the parameter. E,g:\n-\t     \n-\t template<class T, T u> //#0\n-\t auto my_function(T t) -> decltype(u); //#1\n-\n-\t Here, when looking up u at //#1, we get the decl of u\n-\t resulting from the declaration in #0. This is what\n-\t PUSHED_DECL is. We need to replace the reference to the\n-\t old TEMPLATE_PARM_INDEX carried by PUSHED_DECL by the\n-\t fixed-up TEMPLATE_PARM_INDEX.  */\n-      tree pushed_decl = TEMPLATE_PARM_DECL (index);\n-\n-      /* Let's fix up the TEMPLATE_PARM_INDEX then. Note that we must\n-\t fixup the type of PUSHED_DECL as well and luckily\n-\t fixup_template_parm_index does it for us too.  */\n-      tree fixed_up_index =\n-\tfixup_template_parm_index (index, arglist, num_parms);\n-\n-      DECL_INITIAL (pushed_decl) = DECL_INITIAL (parm) = fixed_up_index;\n-\n-      /* Add this fixed up PARM to the template parms we've fixed\n-\t up so far and use that to substitute the fixed-up\n-\t template parms into the type of PARM.  */\n-      TREE_VEC_ELT (fixedup_args, idx) =\n-\ttemplate_parm_to_arg (parm_desc);\n-      TREE_TYPE (parm) = tsubst (TREE_TYPE (parm), arglist,\n-\t\t\t\t tf_none, NULL_TREE);\n-    }\n-\n-  TREE_PURPOSE (parm_desc) =\n-    tsubst_template_arg (TREE_PURPOSE (parm_desc),\n-\t\t\t arglist, tf_none, parm);\n-\n-  pop_deferring_access_checks ();\n-}\n-\n-/* Walk the current template parms and properly compute the canonical\n-   types of the dependent types created during\n-   cp_parser_template_parameter_list.  */\n-\n-void\n-fixup_template_parms (void)\n-{\n-  tree arglist;\n-  tree parameter_vec;\n-  tree fixedup_args;\n-  int i, num_parms;\n-\n-  parameter_vec = INNERMOST_TEMPLATE_PARMS (current_template_parms);\n-  if (parameter_vec == NULL_TREE)\n-    return;\n-\n-  num_parms = TREE_VEC_LENGTH (parameter_vec);\n-\n-  /* This vector contains the current innermost template parms that\n-     have been fixed up so far.  The form of FIXEDUP_ARGS is suitable\n-     to be passed to tsubst* functions as their ARGS argument.  */\n-  fixedup_args = make_tree_vec (num_parms);\n-\n-  /* This vector contains the full set of template parms in a form\n-     suitable to be passed to substs functions as their ARGS\n-     argument.  */\n-  arglist = current_template_args ();\n-  arglist = add_outermost_template_args (arglist, fixedup_args);\n-\n-  /* Let's do the proper fixup now.  */\n-  for (i = 0; i < num_parms; ++i)\n-    fixup_template_parm (TREE_VEC_ELT (parameter_vec, i),\n-\t\t\t i, num_parms, arglist);\n-}\n-\n /* end_template_decl is called after a template declaration is seen.  */\n \n void\n@@ -20289,7 +19981,7 @@ make_auto (void)\n   TYPE_STUB_DECL (au) = TYPE_NAME (au);\n   TEMPLATE_TYPE_PARM_INDEX (au) = build_template_parm_index\n     (0, processing_template_decl + 1, processing_template_decl + 1,\n-     0, TYPE_NAME (au), NULL_TREE);\n+     TYPE_NAME (au), NULL_TREE);\n   TYPE_CANONICAL (au) = canonical_type_parameter (au);\n   DECL_ARTIFICIAL (TYPE_NAME (au)) = 1;\n   SET_DECL_TEMPLATE_PARM_P (TYPE_NAME (au));"}, {"sha": "01bc48383b45d11ec018c18ff26e9e5d3fc8cee1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "patch": "@@ -2568,9 +2568,6 @@ cp_tree_equal (tree t1, tree t2)\n \t\t\t\tBASELINK_FUNCTIONS (t2)));\n \n     case TEMPLATE_PARM_INDEX:\n-      if (TEMPLATE_PARM_NUM_SIBLINGS (t1)\n-\t  != TEMPLATE_PARM_NUM_SIBLINGS (t2))\n-\treturn false;\n       return (TEMPLATE_PARM_IDX (t1) == TEMPLATE_PARM_IDX (t2)\n \t      && TEMPLATE_PARM_LEVEL (t1) == TEMPLATE_PARM_LEVEL (t2)\n \t      && (TEMPLATE_PARM_PARAMETER_PACK (t1)"}, {"sha": "508e8fb25bc5166313f0387fdda072808b21d145", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "patch": "@@ -1140,12 +1140,6 @@ comp_template_parms_position (tree t1, tree t2)\n   index1 = TEMPLATE_TYPE_PARM_INDEX (TYPE_MAIN_VARIANT (t1));\n   index2 = TEMPLATE_TYPE_PARM_INDEX (TYPE_MAIN_VARIANT (t2));\n \n-  /* If T1 and T2 belong to template parm lists of different size,\n-     let's assume they are different.  */\n-  if (TEMPLATE_PARM_NUM_SIBLINGS (index1)\n-      != TEMPLATE_PARM_NUM_SIBLINGS (index2))\n-    return false;\n-\n   /* Then compare their relative position.  */\n   if (TEMPLATE_PARM_IDX (index1) != TEMPLATE_PARM_IDX (index2)\n       || TEMPLATE_PARM_LEVEL (index1) != TEMPLATE_PARM_LEVEL (index2)"}]}