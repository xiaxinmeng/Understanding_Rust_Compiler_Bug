{"sha": "305379908d3e3d0e17703c8fbce977c92fbc390d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1Mzc5OTA4ZDNlM2QwZTE3NzAzYzhmYmNlOTc3YzkyZmJjMzkwZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T15:29:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T15:29:21Z"}, "message": "[multiple changes]\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Is_Ancestor_Unit): Subsidiary to\n\tInstall_Limited_Context_Clauses, to determine whether a limited_with in\n\tsome parent of the current unit designates some other parent, in which\n\tcase the limited_with clause must not be installed.\n\t(In_Context): Refine test.\n\n2010-06-17  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_util.adb (Collect_Primitive_Operations): In the of an untagged\n\ttype with a dispatching equality operator that is overridden (for a\n\ttagged full type), don't include the overridden equality in the list of\n\tprimitives. The overridden equality is detected by testing for an\n\tAliased field that references the overriding equality.\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb: Minor reformatting.\n\nFrom-SVN: r160924", "tree": {"sha": "7124793bd2b8e0849febbc62dbdc8595dd91a9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7124793bd2b8e0849febbc62dbdc8595dd91a9b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305379908d3e3d0e17703c8fbce977c92fbc390d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305379908d3e3d0e17703c8fbce977c92fbc390d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305379908d3e3d0e17703c8fbce977c92fbc390d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305379908d3e3d0e17703c8fbce977c92fbc390d/comments", "author": null, "committer": null, "parents": [{"sha": "4519314ce8c904c6f9703996a8ecf7b3fcff5198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4519314ce8c904c6f9703996a8ecf7b3fcff5198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4519314ce8c904c6f9703996a8ecf7b3fcff5198"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "278b183f0cc4979157c2a747d210f650280e2549", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=305379908d3e3d0e17703c8fbce977c92fbc390d", "patch": "@@ -1,3 +1,23 @@\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Is_Ancestor_Unit): Subsidiary to\n+\tInstall_Limited_Context_Clauses, to determine whether a limited_with in\n+\tsome parent of the current unit designates some other parent, in which\n+\tcase the limited_with clause must not be installed.\n+\t(In_Context): Refine test.\n+\n+2010-06-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.adb (Collect_Primitive_Operations): In the of an untagged\n+\ttype with a dispatching equality operator that is overridden (for a\n+\ttagged full type), don't include the overridden equality in the list of\n+\tprimitives. The overridden equality is detected by testing for an\n+\tAliased field that references the overriding equality.\n+\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb: Minor reformatting.\n+\n 2010-06-17  Joel Brobecker  <brobecker@adacore.com brobecker>\n \n \t* gnat_ugn.texi: Add a section introducing gdbserver."}, {"sha": "f9768324611685161d092b9921aec4f931957d5a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=305379908d3e3d0e17703c8fbce977c92fbc390d", "patch": "@@ -5306,7 +5306,7 @@ package body Freeze is\n             return True;\n          end;\n \n-      --  For the designated type of an access to subprogram. all types in\n+      --  For the designated type of an access to subprogram, all types in\n       --  the profile must be fully defined.\n \n       elsif Ekind (T) = E_Subprogram_Type then"}, {"sha": "6b61a875763138cfd41bc6dcf1c634cdf93be261", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=305379908d3e3d0e17703c8fbce977c92fbc390d", "patch": "@@ -3373,6 +3373,11 @@ package body Sem_Ch10 is\n       --  units. The shadow entities are created when the inserted clause is\n       --  analyzed. Implements Ada 2005 (AI-50217).\n \n+      function Is_Ancestor_Unit (U1 : Node_Id; U2 : Node_Id) return Boolean;\n+      --  When compiling a unit Q descended from some parent unit P, a limited\n+      --  with_clause in the context of P that names some other ancestor of Q\n+      --  must not be installed because the ancestor is immediately visible.\n+\n       ---------------------\n       -- Check_Renamings --\n       ---------------------\n@@ -3645,6 +3650,22 @@ package body Sem_Ch10 is\n          New_Nodes_OK := New_Nodes_OK - 1;\n       end Expand_Limited_With_Clause;\n \n+      ----------------------\n+      -- Is_Ancestor_Unit --\n+      ----------------------\n+\n+      function Is_Ancestor_Unit (U1 : Node_Id; U2 : Node_Id) return Boolean is\n+         E1 : constant Entity_Id := Defining_Entity (Unit (U1));\n+         E2 : Entity_Id;\n+      begin\n+         if Nkind_In (Unit (U2), N_Package_Body, N_Subprogram_Body) then\n+            E2 := Defining_Entity (Unit (Library_Unit (U2)));\n+            return Is_Ancestor_Package (E1, E2);\n+         else\n+            return False;\n+         end if;\n+      end Is_Ancestor_Unit;\n+\n    --  Start of processing for Install_Limited_Context_Clauses\n \n    begin\n@@ -3678,6 +3699,9 @@ package body Sem_Ch10 is\n \n             if Library_Unit (Item) /= Cunit (Current_Sem_Unit)\n               and then not Limited_View_Installed (Item)\n+              and then\n+                not Is_Ancestor_Unit\n+                      (Library_Unit (Item), Cunit (Current_Sem_Unit))\n             then\n                if not Private_Present (Item)\n                  or else Private_Present (N)\n@@ -4013,7 +4037,8 @@ package body Sem_Ch10 is\n                   function In_Context return Boolean;\n                   --  Scan context of current unit, to check whether there is\n                   --  a with_clause on the same unit as a private with-clause\n-                  --  on a parent, in which case child unit is visible.\n+                  --  on a parent, in which case child unit is visible. If the\n+                  --  unit is a grand-child, the same applies to its parent.\n \n                   ----------------\n                   -- In_Context --\n@@ -4027,10 +4052,15 @@ package body Sem_Ch10 is\n                         if Nkind (Clause) = N_With_Clause\n                           and then Comes_From_Source (Clause)\n                           and then Is_Entity_Name (Name (Clause))\n-                          and then Entity (Name (Clause)) = Id\n                           and then not Private_Present (Clause)\n                         then\n-                           return True;\n+                           if Entity (Name (Clause)) = Id\n+                             or else\n+                               (Nkind (Name (Clause)) = N_Expanded_Name\n+                                 and then Entity (Prefix (Name (Clause))) = Id)\n+                           then\n+                              return True;\n+                           end if;\n                         end if;\n \n                         Next (Clause);"}, {"sha": "06676ea0fbcb98dd6ef26431bf6bb6006ab20868", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305379908d3e3d0e17703c8fbce977c92fbc390d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=305379908d3e3d0e17703c8fbce977c92fbc390d", "patch": "@@ -1670,7 +1670,30 @@ package body Sem_Util is\n                  and then (not Formal_Derived\n                             or else Present (Alias (Id)))\n                then\n-                  Append_Elmt (Id, Op_List);\n+                  --  In the special case of an equality operator aliased to\n+                  --  an overriding dispatching equality belonging to the same\n+                  --  type, we don't include it in the list of primitives.\n+                  --  This avoids inheriting multiple equality operators when\n+                  --  deriving from untagged private types whose full type is\n+                  --  tagged, which can otherwise cause ambiguities. Note that\n+                  --  this should only happen for this kind of untagged parent\n+                  --  type, since normally dispatching operations are inherited\n+                  --  using the type's Primitive_Operations list.\n+\n+                  if Chars (Id) = Name_Op_Eq\n+                    and then Is_Dispatching_Operation (Id)\n+                    and then Present (Alias (Id))\n+                    and then Is_Overriding_Operation (Alias (Id))\n+                    and then Base_Type (Etype (First_Entity (Id))) =\n+                               Base_Type (Etype (First_Entity (Alias (Id))))\n+                  then\n+                     null;\n+\n+                  --  Include the subprogram in the list of primitives\n+\n+                  else\n+                     Append_Elmt (Id, Op_List);\n+                  end if;\n                end if;\n             end if;\n "}]}