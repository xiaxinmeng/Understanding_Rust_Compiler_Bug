{"sha": "a8d8caca0cbfde0317ca96bfea75a7f047152dad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkOGNhY2EwY2JmZGUwMzE3Y2E5NmJmZWE3NWE3ZjA0NzE1MmRhZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-24T06:08:00Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-25T06:57:47Z"}, "message": "VEC_COND_EXPR: clean up first argument\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/95745\n\tPR middle-end/95830\n\t* gimple-isel.cc (gimple_expand_vec_cond_exprs): Delete dead\n\tSSA_NAMEs used as the first argument of a VEC_COND_EXPR.  Always\n\treturn 0.\n\t* tree-vect-generic.c (expand_vector_condition): Remove dead\n\tSSA_NAMEs used as the first argument of a VEC_COND_EXPR.", "tree": {"sha": "8f446411e050a36151bb9f30d61e0d8e1d1c088d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f446411e050a36151bb9f30d61e0d8e1d1c088d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8d8caca0cbfde0317ca96bfea75a7f047152dad", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl70SusACgkQTcGC3A+n\nN4VcWggAqdWYUJtJElOlCY/r/l36wWPJQpKiseZGNNhOQEfP3ZjnrBC+wX1Q5xK9\nmuJt4U6eSrhzqEk9hAr7d68czg3+KwWUylF8TcdyfnMPXxQj+aLoLnIIZFbvVDZg\ncmVD1eTvsXDMxkBEcbvIUktzhCFE8AQmILTMVFqp2tFjN8ZtdLs/l2MWV/bmcXFn\ntnuULkAR+f7VNw5FwKMVhwkjk14ezQX1Pcu5yxTidQGEPACf9dFFniySeX8b+F5V\nywXHJ4T6B0BBxYRvnhMSgHMadb+VG2Ka5S3kMXQ6VwdiJpVornTsam6gmiazb0eQ\ncveN6/jTjk9m4tPMUBDSODcwKsgDtA==\n=QcXN\n-----END PGP SIGNATURE-----", "payload": "tree 8f446411e050a36151bb9f30d61e0d8e1d1c088d\nparent 2e546c261beddd649e92925373e1c54aec3299a0\nauthor Martin Liska <mliska@suse.cz> 1592978880 +0200\ncommitter Martin Liska <mliska@suse.cz> 1593068267 +0200\n\nVEC_COND_EXPR: clean up first argument\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/95745\n\tPR middle-end/95830\n\t* gimple-isel.cc (gimple_expand_vec_cond_exprs): Delete dead\n\tSSA_NAMEs used as the first argument of a VEC_COND_EXPR.  Always\n\treturn 0.\n\t* tree-vect-generic.c (expand_vector_condition): Remove dead\n\tSSA_NAMEs used as the first argument of a VEC_COND_EXPR.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d8caca0cbfde0317ca96bfea75a7f047152dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d8caca0cbfde0317ca96bfea75a7f047152dad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d8caca0cbfde0317ca96bfea75a7f047152dad/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e546c261beddd649e92925373e1c54aec3299a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e546c261beddd649e92925373e1c54aec3299a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e546c261beddd649e92925373e1c54aec3299a0"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "b330cf4c20e2167bf13bf806bbe64ece59db19e4", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d8caca0cbfde0317ca96bfea75a7f047152dad/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d8caca0cbfde0317ca96bfea75a7f047152dad/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=a8d8caca0cbfde0317ca96bfea75a7f047152dad", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify-me.h\"\n #include \"gimplify.h\"\n #include \"tree-cfg.h\"\n+#include \"bitmap.h\"\n+#include \"tree-ssa-dce.h\"\n \n /* Expand all VEC_COND_EXPR gimple assignments into calls to internal\n    function based on type of selected expansion.  */\n@@ -178,8 +180,8 @@ gimple_expand_vec_cond_exprs (void)\n {\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n-  bool cfg_changed = false;\n   hash_map<tree, unsigned int> vec_cond_ssa_name_uses;\n+  auto_bitmap dce_ssa_names;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n@@ -196,7 +198,13 @@ gimple_expand_vec_cond_exprs (void)\n \t}\n     }\n \n-  return cfg_changed ? TODO_cleanup_cfg : 0;\n+  for (hash_map<tree, unsigned int>::iterator it = vec_cond_ssa_name_uses.begin ();\n+       it != vec_cond_ssa_name_uses.end (); ++it)\n+    bitmap_set_bit (dce_ssa_names, SSA_NAME_VERSION ((*it).first));\n+\n+  simple_dce_from_worklist (dce_ssa_names);\n+\n+  return 0;\n }\n \n namespace {"}, {"sha": "a4b56195903a8eb4222f1f6935e87722ae088076", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d8caca0cbfde0317ca96bfea75a7f047152dad/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d8caca0cbfde0317ca96bfea75a7f047152dad/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=a8d8caca0cbfde0317ca96bfea75a7f047152dad", "patch": "@@ -40,10 +40,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vector-builder.h\"\n #include \"vec-perm-indices.h\"\n #include \"insn-config.h\"\n+#include \"tree-ssa-dce.h\"\n #include \"recog.h\"\t\t/* FIXME: for insn_data */\n \n \n-static void expand_vector_operations_1 (gimple_stmt_iterator *);\n+static void expand_vector_operations_1 (gimple_stmt_iterator *, auto_bitmap *);\n \n /* Return the number of elements in a vector type TYPE that we have\n    already decided needs to be expanded piecewise.  We don't support\n@@ -932,7 +933,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n /* Expand a vector condition to scalars, by using many conditions\n    on the vector's elements.  */\n static void\n-expand_vector_condition (gimple_stmt_iterator *gsi)\n+expand_vector_condition (gimple_stmt_iterator *gsi, auto_bitmap *dce_ssa_names)\n {\n   gassign *stmt = as_a <gassign *> (gsi_stmt (*gsi));\n   tree type = gimple_expr_type (stmt);\n@@ -954,10 +955,11 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n   tree comp_index = index;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n   tree_code code = TREE_CODE (a);\n+  gassign *assign = NULL;\n \n   if (code == SSA_NAME)\n     {\n-      gassign *assign = dyn_cast<gassign *> (SSA_NAME_DEF_STMT (a));\n+      assign = dyn_cast<gassign *> (SSA_NAME_DEF_STMT (a));\n       if (assign != NULL\n \t  && TREE_CODE_CLASS (gimple_assign_rhs_code (assign)) == tcc_comparison)\n \t{\n@@ -1064,6 +1066,10 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n   constr = build_constructor (type, v);\n   gimple_assign_set_rhs_from_tree (gsi, constr);\n   update_stmt (gsi_stmt (*gsi));\n+\n+  if (a_is_comparison)\n+    bitmap_set_bit (*dce_ssa_names,\n+\t\t    SSA_NAME_VERSION (gimple_assign_lhs (assign)));\n }\n \n static tree\n@@ -1956,7 +1962,8 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n /* Process one statement.  If we identify a vector operation, expand it.  */\n \n static void\n-expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n+expand_vector_operations_1 (gimple_stmt_iterator *gsi,\n+\t\t\t    auto_bitmap *dce_ssa_names)\n {\n   tree lhs, rhs1, rhs2 = NULL, type, compute_type = NULL_TREE;\n   enum tree_code code;\n@@ -1985,7 +1992,7 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n \n   if (code == VEC_COND_EXPR)\n     {\n-      expand_vector_condition (gsi);\n+      expand_vector_condition (gsi, dce_ssa_names);\n       return;\n     }\n \n@@ -2233,11 +2240,13 @@ expand_vector_operations (void)\n   basic_block bb;\n   bool cfg_changed = false;\n \n+  auto_bitmap dce_ssa_names;\n+\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n-\t  expand_vector_operations_1 (&gsi);\n+\t  expand_vector_operations_1 (&gsi, &dce_ssa_names);\n \t  /* ???  If we do not cleanup EH then we will ICE in\n \t     verification.  But in reality we have created wrong-code\n \t     as we did not properly transition EH info and edges to\n@@ -2248,6 +2257,8 @@ expand_vector_operations (void)\n \t}\n     }\n \n+  simple_dce_from_worklist (dce_ssa_names);\n+\n   return cfg_changed ? TODO_cleanup_cfg : 0;\n }\n "}]}