{"sha": "e02840c1a92abecd211ffaf05b28329bcb534583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyODQwYzFhOTJhYmVjZDIxMWZmYWYwNWIyODMyOWJjYjUzNDU4Mw==", "commit": {"author": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2021-06-22T17:59:07Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2021-06-22T18:06:07Z"}, "message": "libstdc++: Fix for deadlock in std::counting_semaphore [PR100806]\n\nlibstdc++-v3/ChangeLog:\n\tPR libstdc++/100806\n\t* include/bits/semaphore_base.h (__atomic_semaphore::_M_release):\n\tForce _M_release() to wake all waiting threads.\n\t* testsuite/30_threads/semaphore/100806.cc: New test.", "tree": {"sha": "437bc170e44e0ef5c38159167081b2c77ac468fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/437bc170e44e0ef5c38159167081b2c77ac468fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e02840c1a92abecd211ffaf05b28329bcb534583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02840c1a92abecd211ffaf05b28329bcb534583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02840c1a92abecd211ffaf05b28329bcb534583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02840c1a92abecd211ffaf05b28329bcb534583/comments", "author": null, "committer": null, "parents": [{"sha": "ea4e32181d7a36055b57421abd0ced4735654cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4e32181d7a36055b57421abd0ced4735654cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4e32181d7a36055b57421abd0ced4735654cf6"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "c4565d7e56095d5a6aace891e1a9eacb80e80e10", "filename": "libstdc++-v3/include/bits/semaphore_base.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02840c1a92abecd211ffaf05b28329bcb534583/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02840c1a92abecd211ffaf05b28329bcb534583/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h?ref=e02840c1a92abecd211ffaf05b28329bcb534583", "patch": "@@ -256,7 +256,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__update > 1)\n \t__atomic_notify_address_bare(&_M_counter, true);\n       else\n-\t__atomic_notify_address_bare(&_M_counter, false);\n+\t__atomic_notify_address_bare(&_M_counter, true);\n+// FIXME - Figure out why this does not wake a waiting thread\n+//\t__atomic_notify_address_bare(&_M_counter, false);\n     }\n \n   private:"}, {"sha": "2fa2628a27836cc0f27c6d7bf727cbac4e95123f", "filename": "libstdc++-v3/testsuite/30_threads/semaphore/100806.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02840c1a92abecd211ffaf05b28329bcb534583/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2F100806.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02840c1a92abecd211ffaf05b28329bcb534583/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2F100806.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2F100806.cc?ref=e02840c1a92abecd211ffaf05b28329bcb534583", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++2a -pthread\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+// { dg-add-options libatomic }\n+\n+#include <iostream>\n+#include <sstream>\n+\n+#include <thread>\n+#include <semaphore>\n+#include <mutex>\n+#include <chrono>\n+#include <vector>\n+\n+std::counting_semaphore<4> semaphore{6};\n+\n+std::mutex mtx;\n+std::vector<std::string> results;\n+\n+void thread_main(size_t x)\n+{\n+  semaphore.acquire();\n+  std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+  semaphore.release();\n+  {\n+    std::ostringstream stm;\n+    stm << \"Thread \" << x << \" finished.\";\n+    std::lock_guard g{ mtx };\n+    results.push_back(stm.str());\n+  }\n+}\n+\n+int main()\n+{\n+    constexpr auto nthreads = 10;\n+\n+    std::vector<std::thread> threads(nthreads);\n+\n+    size_t counter{0};\n+    for(auto& t : threads)\n+      {\n+\tt = std::thread(thread_main, counter++);\n+      }\n+\n+    for(auto& t : threads)\n+      {\n+\tt.join();\n+\t{\n+\t  std::lock_guard g{ mtx };\n+\t  for (auto&& r : results)\n+\t    std::cout << r << '\\n';\n+\t  std::cout.flush();\n+\t  results.clear();\n+\t}\n+      }\n+}"}]}