{"sha": "315873869d984b23c4bf0e1a47ce030c2a575184", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1ODczODY5ZDk4NGIyM2M0YmYwZTFhNDdjZTAzMGMyYTU3NTE4NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-09T23:08:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-09T23:08:32Z"}, "message": "compiler: implement go:linkname compiler directive\n    \n    Implement the go:linkname compiler directive for functions (both\n    function definitions and function declarations).  At least for now, give\n    an error for code that tries to use go:linkname with a non-function.\n    \n    Reviewed-on: https://go-review.googlesource.com/26651\n\nFrom-SVN: r239311", "tree": {"sha": "21fd5a8356d1af04dc076e3b01ac52f8d760df73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21fd5a8356d1af04dc076e3b01ac52f8d760df73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315873869d984b23c4bf0e1a47ce030c2a575184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315873869d984b23c4bf0e1a47ce030c2a575184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315873869d984b23c4bf0e1a47ce030c2a575184", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315873869d984b23c4bf0e1a47ce030c2a575184/comments", "author": null, "committer": null, "parents": [{"sha": "dc29c7de7805ad0c045be6e123432ad0c04ae00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc29c7de7805ad0c045be6e123432ad0c04ae00e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc29c7de7805ad0c045be6e123432ad0c04ae00e"}], "stats": {"total": 136, "additions": 126, "deletions": 10}, "files": [{"sha": "d4c7a90d8b75345ea94fb5d0ec7d7b9cd81dfd21", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=315873869d984b23c4bf0e1a47ce030c2a575184", "patch": "@@ -1,4 +1,4 @@\n-d3636ca659ed7eed6d2e1cedfa0adccc6d81c07d\n+85a9c6992d9660e36972c279a5252fd9591bb765\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ee87141efd20f08c2c46dfd698f2520654e90a7f", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=315873869d984b23c4bf0e1a47ce030c2a575184", "patch": "@@ -52,6 +52,7 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n {\n   go_assert(filename_count > 0);\n \n+  Lex::Linknames all_linknames;\n   for (unsigned int i = 0; i < filename_count; ++i)\n     {\n       if (i > 0)\n@@ -76,6 +77,21 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n \n       if (strcmp(filename, \"-\") != 0)\n \tfclose(file);\n+\n+      Lex::Linknames* linknames = lexer.get_and_clear_linknames();\n+      if (linknames != NULL)\n+\t{\n+\t  if (!::gogo->current_file_imported_unsafe())\n+\t    {\n+\t      for (Lex::Linknames::const_iterator p = linknames->begin();\n+\t\t   p != linknames->end();\n+\t\t   ++p)\n+\t\terror_at(p->second.loc,\n+\t\t\t (\"//go:linkname only allowed in Go files that \"\n+\t\t\t  \"import \\\"unsafe\\\"\"));\n+\t    }\n+\t  all_linknames.insert(linknames->begin(), linknames->end());\n+\t}\n     }\n \n   ::gogo->linemap()->stop();\n@@ -86,6 +102,13 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   // define them now.\n   ::gogo->define_global_names();\n \n+  // Apply any go:linkname directives.\n+  for (Lex::Linknames::const_iterator p = all_linknames.begin();\n+       p != all_linknames.end();\n+       ++p)\n+    ::gogo->add_linkname(p->first, p->second.is_exported, p->second.ext_name,\n+\t\t\t p->second.loc);\n+\n   // Finalize method lists and build stub methods for named types.\n   ::gogo->finalize_methods();\n "}, {"sha": "a72ef9520ecc934542ba4728ffab07e1a4a810d9", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=315873869d984b23c4bf0e1a47ce030c2a575184", "patch": "@@ -32,6 +32,7 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int, int pointer_size)\n     file_block_names_(),\n     imports_(),\n     imported_unsafe_(false),\n+    current_file_imported_unsafe_(false),\n     packages_(),\n     init_functions_(),\n     var_deps_(),\n@@ -449,6 +450,7 @@ Gogo::import_package(const std::string& filename,\n   if (filename == \"unsafe\")\n     {\n       this->import_unsafe(local_name, is_local_name_exported, location);\n+      this->current_file_imported_unsafe_ = true;\n       return;\n     }\n \n@@ -2000,6 +2002,29 @@ Gogo::add_dot_import_object(Named_object* no)\n   this->current_bindings()->add_named_object(no);\n }\n \n+// Add a linkname.  This implements the go:linkname compiler directive.\n+// We only support this for functions and function declarations.\n+\n+void\n+Gogo::add_linkname(const std::string& go_name, bool is_exported,\n+\t\t   const std::string& ext_name, Location loc)\n+{\n+  Named_object* no =\n+    this->package_->bindings()->lookup(this->pack_hidden_name(go_name,\n+\t\t\t\t\t\t\t      is_exported));\n+  if (no == NULL)\n+    error_at(loc, \"%s is not defined\", go_name.c_str());\n+  else if (no->is_function())\n+    no->func_value()->set_asm_name(ext_name);\n+  else if (no->is_function_declaration())\n+    no->func_declaration_value()->set_asm_name(ext_name);\n+  else\n+    error_at(loc,\n+\t     (\"%s is not a function; \"\n+\t      \"//go:linkname is only supported for functions\"),\n+\t     go_name.c_str());\n+}\n+\n // Mark all local variables used.  This is used when some types of\n // parse error occur.\n \n@@ -2183,6 +2208,8 @@ Gogo::clear_file_scope()\n         }\n       package->clear_used();\n     }\n+\n+  this->current_file_imported_unsafe_ = false;\n }\n \n // Queue up a type specific function for later writing.  These are\n@@ -5034,6 +5061,12 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n             }\n         }\n \n+      if (!this->asm_name_.empty())\n+\t{\n+\t  asm_name = this->asm_name_;\n+\t  is_visible = true;\n+\t}\n+\n       // If a function calls the predeclared recover function, we\n       // can't inline it, because recover behaves differently in a\n       // function passed directly to defer.  If this is a recover"}, {"sha": "d2262e39111e9a11e70bfe66c60a29dcdc7e3eec", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=315873869d984b23c4bf0e1a47ce030c2a575184", "patch": "@@ -428,6 +428,12 @@ class Gogo\n   add_file_block_name(const std::string& name, Location location)\n   { this->file_block_names_[name] = location; }\n \n+  // Add a linkname, from the go:linkname compiler directive.  This\n+  // changes the externally visible name of go_name to be ext_name.\n+  void\n+  add_linkname(const std::string& go_name, bool is_exported,\n+\t       const std::string& ext_name, Location location);\n+\n   // Mark all local variables in current bindings as used.  This is\n   // used when there is a parse error to avoid useless errors.\n   void\n@@ -463,6 +469,11 @@ class Gogo\n   set_need_init_fn()\n   { this->need_init_fn_ = true; }\n \n+  // Return whether the current file imported the unsafe package.\n+  bool\n+  current_file_imported_unsafe() const\n+  { return this->current_file_imported_unsafe_; }\n+\n   // Clear out all names in file scope.  This is called when we start\n   // parsing a new file.\n   void\n@@ -760,6 +771,8 @@ class Gogo\n   Imports imports_;\n   // Whether the magic unsafe package was imported.\n   bool imported_unsafe_;\n+  // Whether the magic unsafe package was imported by the current file.\n+  bool current_file_imported_unsafe_;\n   // Mapping from package names we have seen to packages.  This does\n   // not include the package we are compiling.\n   Packages packages_;\n@@ -975,6 +988,11 @@ class Function\n   results_are_named() const\n   { return this->results_are_named_; }\n \n+  // Set the assembler name.\n+  void\n+  set_asm_name(const std::string& asm_name)\n+  { this->asm_name_ = asm_name; }\n+\n   // Set the pragmas for this function.\n   void\n   set_pragmas(unsigned int pragmas)\n@@ -1229,6 +1247,9 @@ class Function\n   Labels labels_;\n   // The number of local types defined in this function.\n   unsigned int local_type_count_;\n+  // The assembler name: this is the name that will be put in the object file.\n+  // Set by the go:linkname compiler directive.  This is normally empty.\n+  std::string asm_name_;\n   // The function descriptor, if any.\n   Expression* descriptor_;\n   // The function decl."}, {"sha": "9498c7dfc0b9ecaa1415d72f3621ec3e0d1d76e1", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=315873869d984b23c4bf0e1a47ce030c2a575184", "patch": "@@ -443,7 +443,7 @@ Lex::Lex(const char* input_file_name, FILE* input_file, Linemap* linemap)\n   : input_file_name_(input_file_name), input_file_(input_file),\n     linemap_(linemap), linebuf_(NULL), linebufsize_(120), linesize_(0),\n     lineoff_(0), lineno_(0), add_semi_at_eol_(false), pragmas_(0),\n-    extern_()\n+    extern_(), linknames_(NULL)\n {\n   this->linebuf_ = new char[this->linebufsize_];\n   this->linemap_->start_file(input_file_name, 0);\n@@ -1676,6 +1676,7 @@ Lex::skip_cpp_comment()\n   // //extern comment.\n   this->extern_.clear();\n \n+  Location loc = this->location();\n   size_t lineoff = this->lineoff_;\n \n   const char* p = this->linebuf_ + lineoff;\n@@ -1777,14 +1778,21 @@ Lex::skip_cpp_comment()\n     {\n       // As in the gc compiler, set the external link name for a Go symbol.\n       std::string go_name;\n-      std::string c_name;\n+      std::string ext_name;\n+      bool is_exported = false;\n       if (ps < pend)\n \t{\n \t  while (ps < pend && (*ps == ' ' || *ps == '\\t'))\n \t    ++ps;\n \t  if (ps < pend)\n \t    {\n \t      const char* pg = ps;\n+\n+\t      unsigned int c;\n+\t      bool issued_error;\n+\t      ps = this->advance_one_utf8_char(ps, &c, &issued_error);\n+\t      is_exported = Lex::is_unicode_uppercase(c);\n+\n \t      while (ps < pend && *ps != ' ' && *ps != '\\t')\n \t\t++ps;\n \t      if (ps < pend)\n@@ -1798,18 +1806,22 @@ Lex::skip_cpp_comment()\n \t      while (ps < pend && *ps != ' ' && *ps != '\\t')\n \t\t++ps;\n \t      if (ps <= pend)\n-\t\tc_name = std::string(pc, ps - pc);\n+\t\text_name = std::string(pc, ps - pc);\n \t    }\n \t  if (ps != pend)\n \t    {\n \t      go_name.clear();\n-\t      c_name.clear();\n+\t      ext_name.clear();\n \t    }\n \t}\n-      if (go_name.empty() || c_name.empty())\n-\terror_at(this->location(), \"usage: //go:linkname localname linkname\");\n+      if (go_name.empty() || ext_name.empty())\n+\terror_at(loc, \"usage: //go:linkname localname linkname\");\n       else\n-\tthis->linknames_[go_name] = c_name;\n+\t{\n+\t  if (this->linknames_ == NULL)\n+\t    this->linknames_ = new Linknames();\n+\t  (*this->linknames_)[go_name] = Linkname(ext_name, is_exported, loc);\n+\t}\n     }\n   else if (verb == \"go:nointerface\")\n     {"}, {"sha": "5c4afb611b0afc23f6e275e1faf0e114876806d3", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315873869d984b23c4bf0e1a47ce030c2a575184/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=315873869d984b23c4bf0e1a47ce030c2a575184", "patch": "@@ -375,6 +375,33 @@ class Lex\n     return ret;\n   }\n \n+  struct Linkname\n+  {\n+    std::string ext_name;\t// External name.\n+    bool is_exported;\t\t// Whether the internal name is exported.\n+    Location loc;\t\t// Location of go:linkname directive.\n+\n+    Linkname()\n+      : ext_name(), is_exported(false), loc()\n+    { }\n+\n+    Linkname(const std::string& ext_name_a, bool is_exported_a, Location loc_a)\n+      : ext_name(ext_name_a), is_exported(is_exported_a), loc(loc_a)\n+    { }\n+  };\n+\n+  typedef std::map<std::string, Linkname> Linknames;\n+\n+  // Return the linknames seen so far, or NULL if none, and clear the\n+  // set.  These are from go:linkname compiler directives.\n+  Linknames*\n+  get_and_clear_linknames()\n+  {\n+    Linknames* ret = this->linknames_;\n+    this->linknames_ = NULL;\n+    return ret;\n+  }\n+\n   // Return whether the identifier NAME should be exported.  NAME is a\n   // mangled name which includes only ASCII characters.\n   static bool\n@@ -514,8 +541,8 @@ class Lex\n   // The external name to use for a function declaration, from a magic\n   // //extern comment.\n   std::string extern_;\n-  // The list of //go:linkname comments.\n-  std::map<std::string, std::string> linknames_;\n+  // The list of //go:linkname comments, if any.\n+  Linknames* linknames_;\n };\n \n #endif // !defined(GO_LEX_H)"}]}