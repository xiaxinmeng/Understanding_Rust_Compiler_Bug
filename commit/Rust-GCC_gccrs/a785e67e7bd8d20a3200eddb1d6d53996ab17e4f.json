{"sha": "a785e67e7bd8d20a3200eddb1d6d53996ab17e4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4NWU2N2U3YmQ4ZDIwYTMyMDBlZGRiMWQ2ZDUzOTk2YWIxN2U0Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-27T05:27:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-27T05:27:28Z"}, "message": "(assemble_variable): For array whose size comes from the initializer, determine proper alignment here.\n\n(assemble_variable): For array whose size comes from\nthe initializer, determine proper alignment here.\n(assemble_align): New function.\n\nFrom-SVN: r4996", "tree": {"sha": "e23393d57c61258cb9f8dccade53d57880dd346b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e23393d57c61258cb9f8dccade53d57880dd346b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a785e67e7bd8d20a3200eddb1d6d53996ab17e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a785e67e7bd8d20a3200eddb1d6d53996ab17e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a785e67e7bd8d20a3200eddb1d6d53996ab17e4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a785e67e7bd8d20a3200eddb1d6d53996ab17e4f/comments", "author": null, "committer": null, "parents": [{"sha": "e5075818720b781f7da518311bfa0f9f3cf33572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5075818720b781f7da518311bfa0f9f3cf33572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5075818720b781f7da518311bfa0f9f3cf33572"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "57024d5e15766607e0b00354503c01cd5eafdfa5", "filename": "gcc/varasm.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a785e67e7bd8d20a3200eddb1d6d53996ab17e4f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a785e67e7bd8d20a3200eddb1d6d53996ab17e4f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a785e67e7bd8d20a3200eddb1d6d53996ab17e4f", "patch": "@@ -666,6 +666,16 @@ assemble_zeros (size)\n       ASM_OUTPUT_SKIP (asm_out_file, size);\n }\n \n+/* Assemble an alignment pseudo op for an ALIGN-bit boundary.  */\n+\n+void\n+assemble_align (align)\n+     int align;\n+{\n+  if (align > BITS_PER_UNIT)\n+    ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+}\n+\n /* Assemble a string constant with the specified C string as contents.  */\n \n void\n@@ -971,6 +981,13 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   /* Compute and output the alignment of this data.  */\n \n   align = DECL_ALIGN (decl);\n+  /* In the case for initialing an array whose length isn't specified,\n+     where we have not yet been able to do the layout,\n+     figure out the proper alignment now.  */\n+  if (dont_output_data && DECL_SIZE (decl) == 0\n+      && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n+    align = MAX (align, TYPE_ALIGN (TREE_TYPE (TREE_TYPE (decl))));\n+\n   /* Some object file formats have a maximum alignment which they support.\n      In particular, a.out format supports a maximum alignment of 4.  */\n #ifndef MAX_OFILE_ALIGNMENT"}]}