{"sha": "6071e495e5802a8949d2b02df6aa31a5f40f2af9", "node_id": "C_kwDOANBUbNoAKDYwNzFlNDk1ZTU4MDJhODk0OWQyYjAyZGY2YWEzMWE1ZjQwZjJhZjk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-13T21:11:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-13T21:15:20Z"}, "message": "Small fix for -fdump-ada-spec\n\nThis is needed to support the _Float32 and _Float64 types.\n\ngcc/c-family/\n\t* c-ada-spec.cc (is_float32): New function.\n\t(is_float64): Likewise.\n\t(is_float128): Tweak.\n\t(dump_ada_node) <REAL_TYPE>: Call them to recognize more types.", "tree": {"sha": "2074c34fca81ecf8e89b522caa96146a2c5ecc3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2074c34fca81ecf8e89b522caa96146a2c5ecc3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6071e495e5802a8949d2b02df6aa31a5f40f2af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6071e495e5802a8949d2b02df6aa31a5f40f2af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6071e495e5802a8949d2b02df6aa31a5f40f2af9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6071e495e5802a8949d2b02df6aa31a5f40f2af9/comments", "author": null, "committer": null, "parents": [{"sha": "4fa6845b4b29f33cc7ea3d8ff49b61bb1f460561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa6845b4b29f33cc7ea3d8ff49b61bb1f460561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa6845b4b29f33cc7ea3d8ff49b61bb1f460561"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "1e011d528256d5be6375161e5d045c3d585e4d02", "filename": "gcc/c-family/c-ada-spec.cc", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6071e495e5802a8949d2b02df6aa31a5f40f2af9/gcc%2Fc-family%2Fc-ada-spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6071e495e5802a8949d2b02df6aa31a5f40f2af9/gcc%2Fc-family%2Fc-ada-spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.cc?ref=6071e495e5802a8949d2b02df6aa31a5f40f2af9", "patch": "@@ -2030,7 +2030,39 @@ dump_ada_enum_type (pretty_printer *buffer, tree node, tree type, int spc)\n     }\n }\n \n-/* Return true if NODE is the __float128/_Float128 type.  */\n+/* Return true if NODE is the _Float32/_Float32x type.  */\n+\n+static bool\n+is_float32 (tree node)\n+{\n+  if (!TYPE_NAME (node) || TREE_CODE (TYPE_NAME (node)) != TYPE_DECL)\n+    return false;\n+\n+  tree name = DECL_NAME (TYPE_NAME (node));\n+\n+  if (IDENTIFIER_POINTER (name) [0] != '_')\n+    return false;\n+\n+  return id_equal (name, \"_Float32\") || id_equal (name, \"_Float32x\");\n+}\n+\n+/* Return true if NODE is the _Float64/_Float64x type.  */\n+\n+static bool\n+is_float64 (tree node)\n+{\n+  if (!TYPE_NAME (node) || TREE_CODE (TYPE_NAME (node)) != TYPE_DECL)\n+    return false;\n+\n+  tree name = DECL_NAME (TYPE_NAME (node));\n+\n+  if (IDENTIFIER_POINTER (name) [0] != '_')\n+    return false;\n+\n+  return id_equal (name, \"_Float64\") || id_equal (name, \"_Float64x\");\n+}\n+\n+/* Return true if NODE is the __float128/_Float128/_Float128x type.  */\n \n static bool\n is_float128 (tree node)\n@@ -2043,7 +2075,9 @@ is_float128 (tree node)\n   if (IDENTIFIER_POINTER (name) [0] != '_')\n     return false;\n \n-  return id_equal (name, \"__float128\") || id_equal (name, \"_Float128\");\n+  return id_equal (name, \"__float128\")\n+\t || id_equal (name, \"_Float128\")\n+\t || id_equal (name, \"_Float128x\");\n }\n \n static bool bitfield_used = false;\n@@ -2132,7 +2166,17 @@ dump_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n       break;\n \n     case REAL_TYPE:\n-      if (is_float128 (node))\n+      if (is_float32 (node))\n+\t{\n+\t  pp_string (buffer, \"Float\");\n+\t  break;\n+\t}\n+      else if (is_float64 (node))\n+\t{\n+\t  pp_string (buffer, \"Long_Float\");\n+\t  break;\n+\t}\n+      else if (is_float128 (node))\n \t{\n \t  append_withs (\"Interfaces.C.Extensions\", false);\n \t  pp_string (buffer, \"Extensions.Float_128\");"}]}