{"sha": "00be2a5f394119085c72aee8d18adefd8ec3ec22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiZTJhNWYzOTQxMTkwODVjNzJhZWU4ZDE4YWRlZmQ4ZWMzZWMyMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-13T15:25:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-13T15:25:15Z"}, "message": "Add C2x *_NORM_MAX constants to <float.h>.\n\nC2x adds <float.h> constants FLT_NORM_MAX, DBL_NORM_MAX and\nLDBL_NORM_MAX.  These are for the maximum \"normalized\" finite\nfloating-point number, where the given definition of normalized is\nthat all possible values with MANT_DIG significand digits (leading one\nnot zero) can be represented with that exponent.  The effect of that\ndefinition is that these macros are the same as the corresponding MAX\nmacros for all formats except IBM long double, where the NORM_MAX\nvalue has exponent 1 smaller than the MAX one so that all 106 digits\ncan be 1.\n\nThis patch adds those macros to GCC.  They are only defined for float,\ndouble and long double; C2x does not include such macros for DFP\ntypes, and while the integration of TS 18661-3 into C2x has not yet\noccurred, the draft proposed text does not add them for the _FloatN /\n_FloatNx types (where they would always be the same as the MAX\nmacros).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.  Also tested\ncompilation of the new test for powerpc-linux-gnu to confirm the check\nof LDBL_NORM_MAX in the IBM long double case does get properly\noptimized out.\n\ngcc:\n\t* ginclude/float.c [__STDC_VERSION__ > 201710L] (FLT_NORM_MAX,\n\tDBL_NORM_MAX, LDBL_NORM_MAX): Define.\n\t* real.c (get_max_float): Add norm_max argument.\n\t* real.h (get_max_float): Update prototype.\n\t* builtins.c (fold_builtin_interclass_mathfn): Update calls to\n\tget_max_float.\n\ngcc/c-family:\n\t* c-cppbuiltin.c (builtin_define_float_constants): Also define\n\tNORM_MAX constants.  Update call to get_max_float.\n\t(LAZY_HEX_FP_VALUES_CNT): Update value to include NORM_MAX\n\tconstants.\n\ngcc/d:\n\t* d-target.cc (define_float_constants): Update call to\n\tget_max_float.\n\ngcc/testsuite:\n\t* gcc.dg/c11-float-3.c, gcc.dg/c2x-float-1.c: New tests.\n\nFrom-SVN: r278145", "tree": {"sha": "71659c0262824c7ba87b2a92d37b1025348f0dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71659c0262824c7ba87b2a92d37b1025348f0dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00be2a5f394119085c72aee8d18adefd8ec3ec22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00be2a5f394119085c72aee8d18adefd8ec3ec22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00be2a5f394119085c72aee8d18adefd8ec3ec22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00be2a5f394119085c72aee8d18adefd8ec3ec22/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5024c8bb463fe7bfd20972cff37e3c917001172e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5024c8bb463fe7bfd20972cff37e3c917001172e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5024c8bb463fe7bfd20972cff37e3c917001172e"}], "stats": {"total": 127, "additions": 115, "deletions": 12}, "files": [{"sha": "5a52fd6516f4c03ef5e0e1cc9ec65e0723c9543c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -1,3 +1,12 @@\n+2019-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/float.c [__STDC_VERSION__ > 201710L] (FLT_NORM_MAX,\n+\tDBL_NORM_MAX, LDBL_NORM_MAX): Define.\n+\t* real.c (get_max_float): Add norm_max argument.\n+\t* real.h (get_max_float): Update prototype.\n+\t* builtins.c (fold_builtin_interclass_mathfn): Update calls to\n+\tget_max_float.\n+\n 2019-11-13  Martin Liska  <mliska@suse.cz>\n \n \t* dbgcnt.c (test_sorted_dbg_counters): New."}, {"sha": "f94151bd84d8f762de63277b78d3d76597a92b09", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -9038,7 +9038,7 @@ fold_builtin_interclass_mathfn (location_t loc, tree fndecl, tree arg)\n \t    mode = DFmode;\n \t    arg = fold_build1_loc (loc, NOP_EXPR, type, arg);\n \t  }\n-\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf));\n+\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf), false);\n \treal_from_string (&r, buf);\n \tresult = build_call_expr (isgr_fn, 2,\n \t\t\t\t  fold_build1_loc (loc, ABS_EXPR, type, arg),\n@@ -9062,7 +9062,7 @@ fold_builtin_interclass_mathfn (location_t loc, tree fndecl, tree arg)\n \t    mode = DFmode;\n \t    arg = fold_build1_loc (loc, NOP_EXPR, type, arg);\n \t  }\n-\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf));\n+\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf), false);\n \treal_from_string (&r, buf);\n \tresult = build_call_expr (isle_fn, 2,\n \t\t\t\t  fold_build1_loc (loc, ABS_EXPR, type, arg),\n@@ -9101,7 +9101,7 @@ fold_builtin_interclass_mathfn (location_t loc, tree fndecl, tree arg)\n \t  }\n \targ = fold_build1_loc (loc, ABS_EXPR, type, arg);\n \n-\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf));\n+\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf), false);\n \treal_from_string (&rmax, buf);\n \tsprintf (buf, \"0x1p%d\", REAL_MODE_FORMAT (orig_mode)->emin - 1);\n \treal_from_string (&rmin, buf);"}, {"sha": "e96ed631f52e61af0249206c3cf9199cc1de2985", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -1,3 +1,10 @@\n+2019-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (builtin_define_float_constants): Also define\n+\tNORM_MAX constants.  Update call to get_max_float.\n+\t(LAZY_HEX_FP_VALUES_CNT): Update value to include NORM_MAX\n+\tconstants.\n+\n 2019-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (get_underlying_decl): Do not look through typedefs."}, {"sha": "76d1e4a380e03495d2036bcead9e13e117c40c04", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -259,11 +259,16 @@ builtin_define_float_constants (const char *name_prefix,\n   /* Since, for the supported formats, B is always a power of 2, we\n      construct the following numbers directly as a hexadecimal\n      constants.  */\n-  get_max_float (fmt, buf, sizeof (buf));\n+  get_max_float (fmt, buf, sizeof (buf), false);\n \n   sprintf (name, \"__%s_MAX__\", name_prefix);\n   builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix, fp_cast);\n \n+  get_max_float (fmt, buf, sizeof (buf), true);\n+\n+  sprintf (name, \"__%s_NORM_MAX__\", name_prefix);\n+  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix, fp_cast);\n+\n   /* The minimum normalized positive floating-point number,\n      b**(emin-1).  */\n   sprintf (name, \"__%s_MIN__\", name_prefix);\n@@ -1607,10 +1612,10 @@ struct GTY(()) lazy_hex_fp_value_struct\n };\n /* Number of the expensive to compute macros we should evaluate lazily.\n    Each builtin_define_float_constants invocation calls\n-   builtin_define_with_hex_fp_value 4 times and builtin_define_float_constants\n+   builtin_define_with_hex_fp_value 5 times and builtin_define_float_constants\n    is called for FLT, DBL, LDBL and up to NUM_FLOATN_NX_TYPES times for\n    FLTNN*.  */ \n-#define LAZY_HEX_FP_VALUES_CNT (4 * (3 + NUM_FLOATN_NX_TYPES))\n+#define LAZY_HEX_FP_VALUES_CNT (5 * (3 + NUM_FLOATN_NX_TYPES))\n static GTY(()) struct lazy_hex_fp_value_struct\n   lazy_hex_fp_values[LAZY_HEX_FP_VALUES_CNT];\n static GTY(()) unsigned lazy_hex_fp_value_count;"}, {"sha": "012d4958a4466ea44051e12bb7da521272c5a502", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -1,3 +1,8 @@\n+2019-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* d-target.cc (define_float_constants): Update call to\n+\tget_max_float.\n+\n 2019-11-04  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* d-builtins.cc (build_frontend_type): Cope with variable"}, {"sha": "37a07b14d9fe75838f042312b21632f07712ae2a", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -82,7 +82,7 @@ define_float_constants (tree type)\n   const real_format *fmt = REAL_MODE_FORMAT (mode);\n \n   /* The largest representable value that's not infinity.  */\n-  get_max_float (fmt, buf, sizeof (buf));\n+  get_max_float (fmt, buf, sizeof (buf), false);\n   real_from_string (&T::max.rv (), buf);\n \n   /* The smallest representable normalized value that's not 0.  */"}, {"sha": "cafedc16c2f98ab1a711b2623180e3653a077bbf", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -238,6 +238,18 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* C11 */\n \n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+/* Maximum finite positive value with MANT_DIG digits in the\n+   significand taking their maximum value.  */\n+#undef FLT_NORM_MAX\n+#undef DBL_NORM_MAX\n+#undef LDBL_NORM_MAX\n+#define FLT_NORM_MAX\t__FLT_NORM_MAX__\n+#define DBL_NORM_MAX\t__DBL_NORM_MAX__\n+#define LDBL_NORM_MAX\t__LDBL_NORM_MAX__\n+\n+#endif /* C2X */\n+\n #ifdef __STDC_WANT_IEC_60559_BFP_EXT__\n /* Number of decimal digits for which conversions between decimal\n    character strings and binary formats, in both directions, are"}, {"sha": "90067f0087b9dab6ab23775bc68957708e28985a", "filename": "gcc/real.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -5242,22 +5242,29 @@ real_nextafter (REAL_VALUE_TYPE *r, format_helper fmt,\n /* Write into BUF the maximum representable finite floating-point\n    number, (1 - b**-p) * b**emax for a given FP format FMT as a hex\n    float string.  LEN is the size of BUF, and the buffer must be large\n-   enough to contain the resulting string.  */\n+   enough to contain the resulting string.  If NORM_MAX, instead write\n+   the maximum representable finite normalized floating-point number,\n+   defined to be such that all choices of digits for that exponent are\n+   representable in the format (this only makes a difference for IBM\n+   long double).  */\n \n void\n-get_max_float (const struct real_format *fmt, char *buf, size_t len)\n+get_max_float (const struct real_format *fmt, char *buf, size_t len,\n+\t       bool norm_max)\n {\n   int i, n;\n   char *p;\n+  bool is_ibm_extended = fmt->pnan < fmt->p;\n \n   strcpy (buf, \"0x0.\");\n   n = fmt->p;\n   for (i = 0, p = buf + 4; i + 3 < n; i += 4)\n     *p++ = 'f';\n   if (i < n)\n     *p++ = \"08ce\"[n - i];\n-  sprintf (p, \"p%d\", fmt->emax);\n-  if (fmt->pnan < fmt->p)\n+  sprintf (p, \"p%d\",\n+\t   (is_ibm_extended && norm_max) ? fmt->emax - 1 : fmt->emax);\n+  if (is_ibm_extended && !norm_max)\n     {\n       /* This is an IBM extended double format made up of two IEEE\n \t doubles.  The value of the long double is the sum of the"}, {"sha": "0f660c9c671c26fe21e3d85fbec219e234a24e7c", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -524,7 +524,7 @@ extern bool real_nextafter (REAL_VALUE_TYPE *, format_helper,\n /* Write into BUF the maximum representable finite floating-point\n    number, (1 - b**-p) * b**emax for a given FP format FMT as a hex\n    float string.  BUF must be large enough to contain the result.  */\n-extern void get_max_float (const struct real_format *, char *, size_t);\n+extern void get_max_float (const struct real_format *, char *, size_t, bool);\n \n #ifndef GENERATOR_FILE\n /* real related routines.  */"}, {"sha": "9e062e799d31ad70fbdefdc33a93de2b67301228", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -1,3 +1,7 @@\n+2019-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-float-3.c, gcc.dg/c2x-float-1.c: New tests.\n+\n 2019-11-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/92454"}, {"sha": "95d2074ea2de00e470497aeeb27f1f5e86086ce0", "filename": "gcc/testsuite/gcc.dg/c11-float-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-3.c?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -0,0 +1,17 @@\n+/* Test *_NORM_MAX not defined for C11.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <float.h>\n+\n+#ifdef FLT_NORM_MAX\n+#error \"FLT_NORM_MAX defined\"\n+#endif\n+\n+#ifdef DBL_NORM_MAX\n+#error \"DBL_NORM_MAX defined\"\n+#endif\n+\n+#ifdef LDBL_NORM_MAX\n+#error \"LDBL_NORM_MAX defined\"\n+#endif"}, {"sha": "8df85f935fd76961f33aea16efa6aaa83904f1c0", "filename": "gcc/testsuite/gcc.dg/c2x-float-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00be2a5f394119085c72aee8d18adefd8ec3ec22/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-1.c?ref=00be2a5f394119085c72aee8d18adefd8ec3ec22", "patch": "@@ -0,0 +1,37 @@\n+/* Test *_NORM_MAX macros.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <float.h>\n+\n+#ifndef FLT_NORM_MAX\n+#error \"FLT_NORM_MAX undefined\"\n+#endif\n+\n+#ifndef DBL_NORM_MAX\n+#error \"DBL_NORM_MAX undefined\"\n+#endif\n+\n+#ifndef LDBL_NORM_MAX\n+#error \"LDBL_NORM_MAX undefined\"\n+#endif\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  if (FLT_NORM_MAX != FLT_MAX)\n+    abort ();\n+  if (DBL_NORM_MAX != DBL_MAX)\n+    abort ();\n+#if LDBL_MANT_DIG == 106\n+  if (LDBL_NORM_MAX != 0x0.ffffffffffffffffffffffffffcp1023L)\n+    abort ();\n+#else\n+  if (LDBL_NORM_MAX != LDBL_MAX)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}]}