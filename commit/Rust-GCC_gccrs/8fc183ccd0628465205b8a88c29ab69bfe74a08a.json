{"sha": "8fc183ccd0628465205b8a88c29ab69bfe74a08a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjMTgzY2NkMDYyODQ2NTIwNWI4YTg4YzI5YWI2OWJmZTc0YTA4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-13T18:54:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-13T18:54:49Z"}, "message": "match.pd: Fold (~X | C) ^ D into (X | C) ^ (~D ^ C) if (~D ^ C) can be simplified [PR96691]\n\nThese simplifications are only simplifications if the (~D ^ C) or (D ^ C)\nexpressions fold into gimple vals, but in that case they decrease number of\noperations by 1.\n\n2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96691\n\t* match.pd ((~X | C) ^ D -> (X | C) ^ (~D ^ C),\n\t(~X & C) ^ D -> (X & C) ^ (D ^ C)): New simplifications if\n\t(~D ^ C) or (D ^ C) can be simplified.\n\n\t* gcc.dg/tree-ssa/pr96691.c: New test.", "tree": {"sha": "4f8b6bc9bb581e48d217a2c0baacbfcb5f13e102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f8b6bc9bb581e48d217a2c0baacbfcb5f13e102"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc183ccd0628465205b8a88c29ab69bfe74a08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc183ccd0628465205b8a88c29ab69bfe74a08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc183ccd0628465205b8a88c29ab69bfe74a08a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc183ccd0628465205b8a88c29ab69bfe74a08a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7ef413ef1b696dec2710ae0acc058bdc832686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7ef413ef1b696dec2710ae0acc058bdc832686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7ef413ef1b696dec2710ae0acc058bdc832686"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "6f7b41fe0ff16fb657c565f659ebde061ecf3382", "filename": "gcc/match.pd", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc183ccd0628465205b8a88c29ab69bfe74a08a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc183ccd0628465205b8a88c29ab69bfe74a08a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8fc183ccd0628465205b8a88c29ab69bfe74a08a", "patch": "@@ -947,8 +947,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (bit_ior:c (bit_xor:c@3 @0 @1) (bit_xor:c (bit_xor:c @1 @2) @0))\n  (bit_ior @3 @2))\n \n-/* Simplify (~X & Y) to X ^ Y if we know that (X & ~Y) is 0.  */\n #if GIMPLE\n+/* (~X | C) ^ D -> (X | C) ^ (~D ^ C) if (~D ^ C) can be simplified.  */\n+(simplify\n+ (bit_xor:c (bit_ior:cs (bit_not:s @0) @1) @2)\n+  (bit_xor (bit_ior @0 @1) (bit_xor! (bit_not! @2) @1)))\n+\n+/* (~X & C) ^ D -> (X & C) ^ (D ^ C) if (D ^ C) can be simplified.  */\n+(simplify\n+ (bit_xor:c (bit_and:cs (bit_not:s @0) @1) @2)\n+  (bit_xor (bit_and @0 @1) (bit_xor! @2 @1)))\n+\n+/* Simplify (~X & Y) to X ^ Y if we know that (X & ~Y) is 0.  */\n (simplify\n  (bit_and (bit_not SSA_NAME@0) INTEGER_CST@1)\n  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))"}, {"sha": "a254cc7da79b6b8bb55c19531d60cdc7aa4eb6b3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96691.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc183ccd0628465205b8a88c29ab69bfe74a08a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96691.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc183ccd0628465205b8a88c29ab69bfe74a08a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96691.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96691.c?ref=8fc183ccd0628465205b8a88c29ab69bfe74a08a", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/96691 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\| 123;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\& 123;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\^ -315;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\^ 314;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" \\\\\\^ 321;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" = ~\" \"optimized\" } } */\n+\n+int\n+foo (int x)\n+{\n+  return (~x | 123) ^ 321;\n+}\n+\n+int\n+bar (int x)\n+{\n+  return (~x & 123) ^ 321;\n+}"}]}