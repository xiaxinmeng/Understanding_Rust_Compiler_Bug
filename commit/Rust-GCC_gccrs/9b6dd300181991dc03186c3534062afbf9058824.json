{"sha": "9b6dd300181991dc03186c3534062afbf9058824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2ZGQzMDAxODE5OTFkYzAzMTg2YzM1MzQwNjJhZmJmOTA1ODgyNA==", "commit": {"author": {"name": "Vladimir Yanovsky", "email": "yanov@il.ibm.com", "date": "2007-07-28T21:51:53Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-07-28T21:51:53Z"}, "message": "Avoid SMS when the candidate loop contains INC instruction\n\nCo-Authored-By: Revital Eres <eres@il.ibm.com>\n\nFrom-SVN: r127027", "tree": {"sha": "fbc2601e3989219775a9593d107a28e213728ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc2601e3989219775a9593d107a28e213728ed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b6dd300181991dc03186c3534062afbf9058824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6dd300181991dc03186c3534062afbf9058824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6dd300181991dc03186c3534062afbf9058824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6dd300181991dc03186c3534062afbf9058824/comments", "author": null, "committer": null, "parents": [{"sha": "6d023ec55bfca23f4fa692b1650e3ddeecf73cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d023ec55bfca23f4fa692b1650e3ddeecf73cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d023ec55bfca23f4fa692b1650e3ddeecf73cc1"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "c8468a17642d377495a7808bc7020d3ebf5a841e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6dd300181991dc03186c3534062afbf9058824/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6dd300181991dc03186c3534062afbf9058824/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b6dd300181991dc03186c3534062afbf9058824", "patch": "@@ -1,3 +1,9 @@\n+2007-07-29  Vladimir Yanovsky  <yanov@il.ibm.com>\n+            Revital Eres  <eres@il.ibm.com>\n+\n+\t* modulo-sched.c (sms_schedule): Avoid loops which includes\n+\tauto-increment instructions.\n+\n 2007-07-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/32920"}, {"sha": "16cd5d88e24aae335dfe469f9c4c048657f210de", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6dd300181991dc03186c3534062afbf9058824/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6dd300181991dc03186c3534062afbf9058824/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=9b6dd300181991dc03186c3534062afbf9058824", "patch": "@@ -987,12 +987,16 @@ sms_schedule (void)\n       if ( !(count_reg = doloop_register_get (tail)))\n \tcontinue;\n \n-      /* Don't handle BBs with calls or barriers, or !single_set insns.  */\n+      /* Don't handle BBs with calls or barriers, or !single_set insns,\n+         or auto-increment insns (to avoid creating invalid reg-moves\n+         for the auto-increment insns).  \n+         ??? Should handle auto-increment insns.  */\n       for (insn = head; insn != NEXT_INSN (tail); insn = NEXT_INSN (insn))\n \tif (CALL_P (insn)\n \t    || BARRIER_P (insn)\n \t    || (INSN_P (insn) && !JUMP_P (insn)\n-\t\t&& !single_set (insn) && GET_CODE (PATTERN (insn)) != USE))\n+\t\t&& !single_set (insn) && GET_CODE (PATTERN (insn)) != USE)\n+            || (FIND_REG_INC_NOTE (insn, NULL_RTX) != 0))\n \t  break;\n \n       if (insn != NEXT_INSN (tail))\n@@ -1003,6 +1007,8 @@ sms_schedule (void)\n \t\tfprintf (dump_file, \"SMS loop-with-call\\n\");\n \t      else if (BARRIER_P (insn))\n \t\tfprintf (dump_file, \"SMS loop-with-barrier\\n\");\n+              else if (FIND_REG_INC_NOTE (insn, NULL_RTX) != 0)\n+                fprintf (dump_file, \"SMS reg inc\\n\");\n \t      else\n \t\tfprintf (dump_file, \"SMS loop-with-not-single-set\\n\");\n \t      print_rtl_single (dump_file, insn);"}, {"sha": "4bf697bcde6a28ec8a69c1959c91df124172284c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6dd300181991dc03186c3534062afbf9058824/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6dd300181991dc03186c3534062afbf9058824/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b6dd300181991dc03186c3534062afbf9058824", "patch": "@@ -1,3 +1,8 @@\n+2007-07-29  Vladimir Yanovsky  <yanov@il.ibm.com>\n+            Revital Eres  <eres@il.ibm.com>\n+\n+\t* gfortran.dg/sms-1.f90: New test.\n+\n 2007-07-28  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/compile/pr32920.c: New testcase."}, {"sha": "f9bfafe9208a4f0c037b6cf44426f00bbd5fabf0", "filename": "gcc/testsuite/gfortran.dg/sms-1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6dd300181991dc03186c3534062afbf9058824/gcc%2Ftestsuite%2Fgfortran.dg%2Fsms-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6dd300181991dc03186c3534062afbf9058824/gcc%2Ftestsuite%2Fgfortran.dg%2Fsms-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsms-1.f90?ref=9b6dd300181991dc03186c3534062afbf9058824", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-O2 -fmodulo-sched\" } \n+program main\n+  integer (kind = 8) :: i, l8, u8, step8\n+  integer (kind = 4) :: l4, step4\n+  integer (kind = 8), parameter :: big = 10000000000_8\n+\n+  u8 = big * 40 + 200\n+  l4 = 200\n+  step8 = -big\n+  call test ((/ (i, i = u8, l4, step8) /), u8, l4 + 0_8, step8)\n+contains\n+  subroutine test (a, l, u, step)\n+    integer (kind = 8), dimension (:), intent (in) :: a\n+    integer (kind = 8), intent (in) :: l, u, step\n+    integer (kind = 8) :: i\n+    integer :: j\n+\n+    j = 1\n+    do i = l, u, step\n+      if (a (j) .ne. i) call abort\n+      j = j + 1\n+    end do\n+    if (size (a, 1) .ne. j - 1) call abort\n+  end subroutine test\n+end program main\n+\n+"}]}