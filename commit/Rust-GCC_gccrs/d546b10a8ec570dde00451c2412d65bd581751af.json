{"sha": "d546b10a8ec570dde00451c2412d65bd581751af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0NmIxMGE4ZWM1NzBkZGUwMDQ1MWMyNDEyZDY1YmQ1ODE3NTFhZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-07T12:52:03Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-07T12:52:03Z"}, "message": "(find_reg) If CLASS_CANNOT_CHANGE_SIZE, avoid its registers if\nreg_changes_size.\n\nFrom-SVN: r7866", "tree": {"sha": "c93e10fe7e50244190d4ab9d243f17b7c0deb7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93e10fe7e50244190d4ab9d243f17b7c0deb7ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d546b10a8ec570dde00451c2412d65bd581751af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d546b10a8ec570dde00451c2412d65bd581751af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d546b10a8ec570dde00451c2412d65bd581751af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d546b10a8ec570dde00451c2412d65bd581751af/comments", "author": null, "committer": null, "parents": [{"sha": "0f64b8f696273bebcad25ed7294078c125811704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f64b8f696273bebcad25ed7294078c125811704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f64b8f696273bebcad25ed7294078c125811704"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "08a0f8a1e6dfa9fedf2b8e22fb1449bfe7e3b58d", "filename": "gcc/global.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d546b10a8ec570dde00451c2412d65bd581751af/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d546b10a8ec570dde00451c2412d65bd581751af/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=d546b10a8ec570dde00451c2412d65bd581751af", "patch": "@@ -923,6 +923,12 @@ find_reg (allocno, losers, alt_regs_p, accept_call_clobbered, retrying)\n \n   IOR_HARD_REG_SET (used1, hard_reg_conflicts[allocno]);\n \n+#ifdef CLASS_CANNOT_CHANGE_SIZE\n+  if (reg_changes_size[allocno_reg[allocno]])\n+    IOR_HARD_REG_SET (used1,\n+\t\t      reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE]);\n+#endif\n+\n   /* Try each hard reg to see if it fits.  Do this in two passes.\n      In the first pass, skip registers that are preferred by some other pseudo\n      to give it a better chance of getting one of those registers.  Only if\n@@ -1096,7 +1102,14 @@ find_reg (allocno, losers, alt_regs_p, accept_call_clobbered, retrying)\n \t  if (local_reg_n_refs[regno] != 0\n \t      /* Don't use a reg no good for this pseudo.  */\n \t      && ! TEST_HARD_REG_BIT (used2, regno)\n-\t      && HARD_REGNO_MODE_OK (regno, mode))\n+\t      && HARD_REGNO_MODE_OK (regno, mode)\n+#ifdef CLASS_CANNOT_CHANGE_SIZE\n+\t      && ! (reg_changes_size[allocno_reg[allocno]]\n+\t\t    && (TEST_HARD_REG_BIT\n+\t\t\t(reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t\t regno)))\n+#endif\n+\t      )\n \t    {\n \t      /* We explicitly evaluate the divide results into temporary\n \t\t variables so as to avoid excess precision problems that occur"}]}