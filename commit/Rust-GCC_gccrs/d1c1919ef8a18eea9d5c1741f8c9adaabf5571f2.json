{"sha": "d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2", "node_id": "C_kwDOANBUbNoAKGQxYzE5MTllZjhhMThlZWE5ZDVjMTc0MWY4YzlhZGFhYmY1NTcxZjI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-24T16:58:43Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-25T10:52:23Z"}, "message": "path solver: Move boolean import code to compute_imports.\n\nIn a follow-up patch I will be pruning the set of exported ranges\nwithin blocks to avoid unnecessary work.  In order to do this, all the\ninteresting SSA names must be in the internal import bitmap ahead of\ntime.  I had already abstracted them out into compute_imports, but I\nmissed the boolean code.  This fixes the oversight.\n\nThere's a net gain of 25 threadable paths, which is unexpected but\nwelcome.\n\nTested on x86-64 & ppc64le Linux.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103254\n\t* gimple-range-path.cc (path_range_query::compute_ranges): Move\n\texported boolean code...\n\t(path_range_query::compute_imports): ...here.", "tree": {"sha": "7def615aac6435a038ca6c45f958f4fc4bed06d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7def615aac6435a038ca6c45f958f4fc4bed06d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8acbd7bef6edbf537e3037174907029b530212f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acbd7bef6edbf537e3037174907029b530212f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acbd7bef6edbf537e3037174907029b530212f6"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "806bce9ff11d2eb7b5110c85b09e0a12ba341c51", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=d1c1919ef8a18eea9d5c1741f8c9adaabf5571f2", "patch": "@@ -537,7 +537,8 @@ void\n path_range_query::compute_imports (bitmap imports, basic_block exit)\n {\n   // Start with the imports from the exit block...\n-  bitmap r_imports = m_ranger->gori ().imports (exit);\n+  gori_compute &gori = m_ranger->gori ();\n+  bitmap r_imports = gori.imports (exit);\n   bitmap_copy (imports, r_imports);\n \n   auto_vec<tree> worklist (bitmap_count_bits (imports));\n@@ -579,6 +580,16 @@ path_range_query::compute_imports (bitmap imports, basic_block exit)\n \t    }\n \t}\n     }\n+  // Exported booleans along the path, may help conditionals.\n+  if (m_resolve)\n+    for (i = 0; i < m_path.length (); ++i)\n+      {\n+\tbasic_block bb = m_path[i];\n+\ttree name;\n+\tFOR_EACH_GORI_EXPORT_NAME (gori, bb, name)\n+\t  if (TREE_CODE (TREE_TYPE (name)) == BOOLEAN_TYPE)\n+\t    bitmap_set_bit (imports, SSA_NAME_VERSION (name));\n+      }\n }\n \n // Compute the ranges for IMPORTS along PATH.\n@@ -622,18 +633,6 @@ path_range_query::compute_ranges (const vec<basic_block> &path,\n     {\n       basic_block bb = curr_bb ();\n \n-      if (m_resolve)\n-\t{\n-\t  gori_compute &gori = m_ranger->gori ();\n-\t  tree name;\n-\n-\t  // Exported booleans along the path, may help conditionals.\n-\t  // Add them as interesting imports.\n-\t  FOR_EACH_GORI_EXPORT_NAME (gori, bb, name)\n-\t    if (TREE_CODE (TREE_TYPE (name)) == BOOLEAN_TYPE)\n-\t      bitmap_set_bit (m_imports, SSA_NAME_VERSION (name));\n-\t}\n-\n       compute_ranges_in_block (bb);\n       adjust_for_non_null_uses (bb);\n "}]}