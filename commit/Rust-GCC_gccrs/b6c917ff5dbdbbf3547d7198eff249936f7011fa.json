{"sha": "b6c917ff5dbdbbf3547d7198eff249936f7011fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjOTE3ZmY1ZGJkYmJmMzU0N2Q3MTk4ZWZmMjQ5OTM2ZjcwMTFmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-16T04:11:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-16T04:11:53Z"}, "message": "Make-lang.in (check-g++-strict-gc): New.\n\n\t* Make-lang.in (check-g++-strict-gc): New.\n\t(cp/except.o): Depend on gt-cp-except.h\n\t* except.c: Include gt-cp-except.h.\n\t* config-lang.in (gtfiles): Add cp/except.c.\n\t* decl2.c (mark_used): Adjust constexpr condition, set\n\tfunction_depth around template instantiation.\n\t* parser.c (cp_parser_lambda_body): Set function_depth.\n\t* semantics.c (maybe_add_lambda_conv_op): Likewise.\n\nFrom-SVN: r176350", "tree": {"sha": "be316d2adfde34ba7f9bc197ea6bd6f4528452f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be316d2adfde34ba7f9bc197ea6bd6f4528452f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6c917ff5dbdbbf3547d7198eff249936f7011fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c917ff5dbdbbf3547d7198eff249936f7011fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c917ff5dbdbbf3547d7198eff249936f7011fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c917ff5dbdbbf3547d7198eff249936f7011fa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea6136a283596a40c177cf79e01c204cc2fc555e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6136a283596a40c177cf79e01c204cc2fc555e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6136a283596a40c177cf79e01c204cc2fc555e"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "bb503c3b0905e81813126038c35aa9c62e7de7cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b6c917ff5dbdbbf3547d7198eff249936f7011fa", "patch": "@@ -1,5 +1,14 @@\n 2011-07-15  Jason Merrill  <jason@redhat.com>\n \n+\t* Make-lang.in (check-g++-strict-gc): New.\n+\t(cp/except.o): Depend on gt-cp-except.h\n+\t* except.c: Include gt-cp-except.h.\n+\t* config-lang.in (gtfiles): Add cp/except.c.\n+\t* decl2.c (mark_used): Adjust constexpr condition, set\n+\tfunction_depth around template instantiation.\n+\t* parser.c (cp_parser_lambda_body): Set function_depth.\n+\t* semantics.c (maybe_add_lambda_conv_op): Likewise.\n+\n \tPR testsuite/49741\n \t* Make-lang.in (check-c++0x): Use --extra_opts instead of--tool_opts.\n "}, {"sha": "21145b2c88a995b29e66686d23e1dfd760420496", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=b6c917ff5dbdbbf3547d7198eff249936f7011fa", "patch": "@@ -153,6 +153,10 @@ check-c++ : check-g++\n check-c++0x:\n \t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --extra_opts,-std=gnu++0x\" \\\n \t  TESTSUITEDIR=\"$(TESTSUITEDIR).c++0x\" check-g++\n+# Run the testsuite with garbage collection at every opportunity.\n+check-g++-strict-gc:\n+\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --extra_opts,--param,ggc-min-heapsize=0,--param,ggc-min-expand=0\" \\\n+\t  TESTSUITEDIR=\"$(TESTSUITEDIR).gc\" check-g++\n check-c++-subtargets : check-g++-subtargets\n # List of targets that can use the generic check- rule and its // variant.\n lang_checks += check-g++\n@@ -309,7 +313,7 @@ cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(TM_H)\n cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) convert.h \\\n   $(TARGET_H) $(C_PRAGMA_H) gt-cp-rtti.h intl.h\n cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  cp/cfns.h $(TREE_INLINE_H) $(TARGET_H)\n+  cp/cfns.h $(TREE_INLINE_H) $(TARGET_H) gt-cp-except.h\n cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(TM_P_H)\n cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h cp/cp-objcp-common.h \\\n   toplev.h $(TREE_INLINE_H) pointer-set.h gt-cp-pt.h vecprim.h intl.h \\"}, {"sha": "3ed3d8e880f5cd0a39f624041edce57f5c707a62", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=b6c917ff5dbdbbf3547d7198eff249936f7011fa", "patch": "@@ -30,4 +30,4 @@ compilers=\"cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3\"\n \n-gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.h \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-lex.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c \\$(srcdir)/cp/cp-lang.c\"\n+gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.h \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-lex.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c \\$(srcdir)/cp/cp-lang.c \\$(srcdir)/cp/except.c\""}, {"sha": "f05b0f8bda676b34ba6ac21bcda351bd37304015", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b6c917ff5dbdbbf3547d7198eff249936f7011fa", "patch": "@@ -4231,9 +4231,9 @@ mark_used (tree decl)\n   if ((decl_maybe_constant_var_p (decl)\n        || (TREE_CODE (decl) == FUNCTION_DECL\n \t   && DECL_DECLARED_CONSTEXPR_P (decl)))\n-      && !DECL_INITIAL (decl)\n       && DECL_LANG_SPECIFIC (decl)\n-      && DECL_TEMPLATE_INSTANTIATION (decl))\n+      && DECL_TEMPLATE_INFO (decl)\n+      && !uses_template_parms (DECL_TI_ARGS (decl)))\n     {\n       /* Instantiating a function will result in garbage collection.  We\n \t must treat this situation as if we were within the body of a\n@@ -4327,8 +4327,12 @@ mark_used (tree decl)\n        times.  Maintaining a stack of active functions is expensive,\n        and the inliner knows to instantiate any functions it might\n        need.  Therefore, we always try to defer instantiation.  */\n-    instantiate_decl (decl, /*defer_ok=*/true,\n-\t\t      /*expl_inst_class_mem_p=*/false);\n+    {\n+      ++function_depth;\n+      instantiate_decl (decl, /*defer_ok=*/true,\n+\t\t\t/*expl_inst_class_mem_p=*/false);\n+      --function_depth;\n+    }\n }\n \n #include \"gt-cp-decl2.h\""}, {"sha": "c37815d242dcc705de60eccd7cf68adca291df55", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=b6c917ff5dbdbbf3547d7198eff249936f7011fa", "patch": "@@ -1227,3 +1227,5 @@ build_noexcept_spec (tree expr, int complain)\n       return build_tree_list (expr, NULL_TREE);\n     }\n }\n+\n+#include \"gt-cp-except.h\""}, {"sha": "5fcedcd2e56cb7807a51f8bb89f875e8af055bec", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b6c917ff5dbdbbf3547d7198eff249936f7011fa", "patch": "@@ -7737,6 +7737,10 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n   bool nested = (current_function_decl != NULL_TREE);\n   if (nested)\n     push_function_context ();\n+  else\n+    /* Still increment function_depth so that we don't GC in the\n+       middle of an expression.  */\n+    ++function_depth;\n \n   /* Finish the function call operator\n      - class_specifier\n@@ -7836,6 +7840,8 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n \n   if (nested)\n     pop_function_context();\n+  else\n+    --function_depth;\n }\n \n /* Statements [gram.stmt.stmt]  */"}, {"sha": "fdd6c33b576adce9cdae6d4416ccfc5e0f34992a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c917ff5dbdbbf3547d7198eff249936f7011fa/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b6c917ff5dbdbbf3547d7198eff249936f7011fa", "patch": "@@ -8875,6 +8875,10 @@ maybe_add_lambda_conv_op (tree type)\n \n   if (nested)\n     push_function_context ();\n+  else\n+    /* Still increment function_depth so that we don't GC in the\n+       middle of an expression.  */\n+    ++function_depth;\n \n   /* Generate the body of the thunk.  */\n \n@@ -8927,6 +8931,8 @@ maybe_add_lambda_conv_op (tree type)\n \n   if (nested)\n     pop_function_context ();\n+  else\n+    --function_depth;\n }\n \n /* Returns true iff VAL is a lambda-related declaration which should"}]}