{"sha": "4822108e61ab879067482704f2f7d1670813d61a", "node_id": "C_kwDOANBUbNoAKDQ4MjIxMDhlNjFhYjg3OTA2NzQ4MjcwNGYyZjdkMTY3MDgxM2Q2MWE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-08T19:33:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-09T03:25:54Z"}, "message": "c++: constexpr non-trivial aggregate init [PR105191]\n\nMy patch for PR92385 made us use VEC_INIT_EXPR for aggregate initialization\nof an array where some elements are not explicitly initialized.  Constexpr\nhandling of that was treating initialization from {} as equivalent to\nvalue-initialization, which is problematic for classes with default member\ninitializers that make the default constructor non-trivial; in older\nstandard modes, not initializing all members makes a constructor\nnon-constexpr, but aggregate initialization is fine.\n\n\tPR c++/105191\n\tPR c++/92385\n\ngcc/cp/ChangeLog:\n\n\t* tree.cc (build_vec_init_elt): Do {}-init for aggregates.\n\t* constexpr.cc (cxx_eval_vec_init): Only treat {} as value-init\n\tfor non-aggregate types.\n\t(build_vec_init_expr): Also check constancy of explicit\n\tinitializer elements.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-array28.C: New test.", "tree": {"sha": "e3b0b52a7cca145a83283d6024a4963de68ce0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b0b52a7cca145a83283d6024a4963de68ce0c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4822108e61ab879067482704f2f7d1670813d61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4822108e61ab879067482704f2f7d1670813d61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4822108e61ab879067482704f2f7d1670813d61a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4822108e61ab879067482704f2f7d1670813d61a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58586721c79f77224b8571a5dba732620d5546ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58586721c79f77224b8571a5dba732620d5546ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58586721c79f77224b8571a5dba732620d5546ab"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "db78b4a6545c0e139047759feb232fd0bb78cd63", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4822108e61ab879067482704f2f7d1670813d61a/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4822108e61ab879067482704f2f7d1670813d61a/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=4822108e61ab879067482704f2f7d1670813d61a", "patch": "@@ -5008,7 +5008,8 @@ cxx_eval_vec_init (const constexpr_ctx *ctx, tree t,\n   bool value_init = VEC_INIT_EXPR_VALUE_INIT (t);\n   if (!init || !BRACE_ENCLOSED_INITIALIZER_P (init))\n     ;\n-  else if (CONSTRUCTOR_NELTS (init) == 0)\n+  else if (CONSTRUCTOR_NELTS (init) == 0\n+\t   && !CP_AGGREGATE_TYPE_P (strip_array_types (atype)))\n     {\n       /* Handle {} as value-init.  */\n       init = NULL_TREE;"}, {"sha": "63164bee638d695a87a15df0f5311e359bfa968d", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4822108e61ab879067482704f2f7d1670813d61a/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4822108e61ab879067482704f2f7d1670813d61a/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=4822108e61ab879067482704f2f7d1670813d61a", "patch": "@@ -740,7 +740,7 @@ build_cplus_new (tree type, tree init, tsubst_flags_t complain)\n    constructor calls until gimplification time; now we only do it to set\n    VEC_INIT_EXPR_IS_CONSTEXPR.\n \n-   We assume that init is either NULL_TREE, void_type_node (indicating\n+   We assume that init is either NULL_TREE, {}, void_type_node (indicating\n    value-initialization), or another array to copy.  */\n \n static tree\n@@ -752,7 +752,20 @@ build_vec_init_elt (tree type, tree init, tsubst_flags_t complain)\n       || !CLASS_TYPE_P (inner_type))\n     /* No interesting initialization to do.  */\n     return integer_zero_node;\n-  else if (init == void_type_node)\n+  if (init && BRACE_ENCLOSED_INITIALIZER_P (init))\n+    {\n+      /* Even if init has initializers for some array elements,\n+\t we're interested in the {}-init of trailing elements.\t*/\n+      if (CP_AGGREGATE_TYPE_P (inner_type))\n+\t{\n+\t  tree empty = build_constructor (init_list_type_node, nullptr);\n+\t  return digest_init (inner_type, empty, complain);\n+\t}\n+      else\n+\t/* It's equivalent to value-init.  */\n+\tinit = void_type_node;\n+    }\n+  if (init == void_type_node)\n     return build_value_init (inner_type, complain);\n \n   releasing_vec argvec;\n@@ -808,9 +821,13 @@ build_vec_init_expr (tree type, tree init, tsubst_flags_t complain)\n   TREE_SIDE_EFFECTS (init) = true;\n   SET_EXPR_LOCATION (init, input_location);\n \n-  if (cxx_dialect >= cxx11\n-      && potential_constant_expression (elt_init))\n-    VEC_INIT_EXPR_IS_CONSTEXPR (init) = true;\n+  if (cxx_dialect >= cxx11)\n+    {\n+      bool cx = potential_constant_expression (elt_init);\n+      if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+\tcx &= potential_constant_expression (init);\n+      VEC_INIT_EXPR_IS_CONSTEXPR (init) = cx;\n+    }\n   VEC_INIT_EXPR_VALUE_INIT (init) = value_init;\n \n   return init;"}, {"sha": "d7706b9f0b4c1cfb63fcaf71bfdb30b5fce9da61", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array28.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4822108e61ab879067482704f2f7d1670813d61a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4822108e61ab879067482704f2f7d1670813d61a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array28.C?ref=4822108e61ab879067482704f2f7d1670813d61a", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/105191\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  const char* message = \"\";\n+};\n+\n+enum class B { };\n+\n+struct C {\n+  A a;\n+  B b;\n+};\n+\n+struct D {\n+  C cs[1];\n+};\n+\n+constexpr D ds[4] = {\n+  D{},\n+};"}]}