{"sha": "12085390166594050f02780cbd49a3967ecef882", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIwODUzOTAxNjY1OTQwNTBmMDI3ODBjYmQ0OWEzOTY3ZWNlZjg4Mg==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2015-09-03T10:20:03Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2015-09-03T10:20:03Z"}, "message": "re PR tree-optimization/67351 (Missed optimisation on 64-bit field compared to 32-bit)\n\n2015-09-03  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\tPR middle-end/67351\n\n\tgcc/ChangeLog: \n\t* fold-const.c (fold_binary_loc) : Move \n\tTransform (x >> c) << c into x & (-1<<c) or\n\ttransform (x << c) >> c into x & ((unsigned)-1 >> c) for unsigned\n\ttypes using simplify and match.\n\t* match.pd (lshift (rshift @0 INTEGER_CST@1) @1) : New simplifier.\n\t(rshift (lshift @0 INTEGER_CST@1) @1) : New Simplifier.\n\n\tgcc/testsuite/ChangeLog: \n\t* g++.dg/pr66752-2.C: New test.\n\nFrom-SVN: r227432", "tree": {"sha": "5015382f1627fbd7120f8d8be9eb4c48b0135017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5015382f1627fbd7120f8d8be9eb4c48b0135017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12085390166594050f02780cbd49a3967ecef882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12085390166594050f02780cbd49a3967ecef882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12085390166594050f02780cbd49a3967ecef882", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12085390166594050f02780cbd49a3967ecef882/comments", "author": null, "committer": null, "parents": [{"sha": "27e2bd9f396088dc3642eb7d85eb424cc402c059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e2bd9f396088dc3642eb7d85eb424cc402c059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e2bd9f396088dc3642eb7d85eb424cc402c059"}], "stats": {"total": 161, "additions": 135, "deletions": 26}, "files": [{"sha": "57234e7c1e06b615ed3391a0db05b6cba412493f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12085390166594050f02780cbd49a3967ecef882/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12085390166594050f02780cbd49a3967ecef882/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12085390166594050f02780cbd49a3967ecef882", "patch": "@@ -1,3 +1,13 @@\n+2015-09-03  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\tPR middle-end/67351\n+\t* fold-const.c (fold_binary_loc) : Move \n+\tTransform (x >> c) << c into x & (-1<<c) or\n+\ttransform (x << c) >> c into x & ((unsigned)-1 >> c) for unsigned\n+\ttypes using simplify and match.\n+\t* match.pd (lshift (rshift @0 INTEGER_CST@1) @1) : New simplifier.\n+\t(rshift (lshift @0 INTEGER_CST@1) @1) : New Simplifier\n+\n 2015-09-03  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/66705"}, {"sha": "a79bfa7b0600eb3f9f3239939d5e8aa982256698", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12085390166594050f02780cbd49a3967ecef882/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12085390166594050f02780cbd49a3967ecef882/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=12085390166594050f02780cbd49a3967ecef882", "patch": "@@ -10412,32 +10412,6 @@ fold_binary_loc (location_t loc,\n \n       prec = element_precision (type);\n \n-      /* Transform (x >> c) << c into x & (-1<<c), or transform (x << c) >> c\n-         into x & ((unsigned)-1 >> c) for unsigned types.  */\n-      if (((code == LSHIFT_EXPR && TREE_CODE (arg0) == RSHIFT_EXPR)\n-           || (TYPE_UNSIGNED (type)\n-\t       && code == RSHIFT_EXPR && TREE_CODE (arg0) == LSHIFT_EXPR))\n-\t  && tree_fits_uhwi_p (arg1)\n-\t  && tree_to_uhwi (arg1) < prec\n-\t  && tree_fits_uhwi_p (TREE_OPERAND (arg0, 1))\n-\t  && tree_to_uhwi (TREE_OPERAND (arg0, 1)) < prec)\n-\t{\n-\t  HOST_WIDE_INT low0 = tree_to_uhwi (TREE_OPERAND (arg0, 1));\n-\t  HOST_WIDE_INT low1 = tree_to_uhwi (arg1);\n-\t  tree lshift;\n-\t  tree arg00;\n-\n-\t  if (low0 == low1)\n-\t    {\n-\t      arg00 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-\n-\t      lshift = build_minus_one_cst (type);\n-\t      lshift = const_binop (code, lshift, arg1);\n-\n-\t      return fold_build2_loc (loc, BIT_AND_EXPR, type, arg00, lshift);\n-\t    }\n-\t}\n-\n       /* If we have a rotate of a bit operation with the rotate count and\n \t the second operand of the bit operation both constant,\n \t permute the two operations.  */"}, {"sha": "bd5c267f1f86093be10eab8c40cfbf94b71c6545", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12085390166594050f02780cbd49a3967ecef882/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12085390166594050f02780cbd49a3967ecef882/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=12085390166594050f02780cbd49a3967ecef882", "patch": "@@ -931,6 +931,20 @@ along with GCC; see the file COPYING3.  If not see\n       && tree_expr_nonnegative_p (@1))\n   @0))\n \n+/* Optimize (x >> c) << c into x & (-1<<c).  */\n+(simplify\n+ (lshift (rshift @0 INTEGER_CST@1) @1)\n+ (if (wi::ltu_p (@1, element_precision (type)))\n+  (bit_and @0 (lshift { build_minus_one_cst (type); } @1))))\n+\n+/* Optimize (x << c) >> c into x & ((unsigned)-1 >> c) for unsigned\n+   types.  */\n+(simplify\n+ (rshift (lshift @0 INTEGER_CST@1) @1)\n+ (if (TYPE_UNSIGNED (type)\n+      && (wi::ltu_p (@1, element_precision (type))))\n+  (bit_and @0 (rshift { build_minus_one_cst (type); } @1))))\n+\n (for shiftrotate (lrotate rrotate lshift rshift)\n  (simplify\n   (shiftrotate @0 integer_zerop)"}, {"sha": "c107835c41dd00e35d24bc9cc76dfc4e7b5af996", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12085390166594050f02780cbd49a3967ecef882/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12085390166594050f02780cbd49a3967ecef882/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12085390166594050f02780cbd49a3967ecef882", "patch": "@@ -1,3 +1,8 @@\n+2015-09-03  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\tPR middle-end/67351\n+\t* g++.dg/pr66752-2.C: New test.\n+\n 2015-09-03  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/66705"}, {"sha": "f5bdda6cca7995c72723fa900d2dc5f21a9167b5", "filename": "gcc/testsuite/g++.dg/pr67351.C", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12085390166594050f02780cbd49a3967ecef882/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67351.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12085390166594050f02780cbd49a3967ecef882/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67351.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67351.C?ref=12085390166594050f02780cbd49a3967ecef882", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+typedef unsigned char uchar;\n+typedef unsigned short ushort;\n+typedef unsigned int uint;\n+typedef unsigned long long uint64;\n+\n+class MyRgba\n+{\n+  uint rgba;\n+\n+public:\n+    explicit MyRgba (uint c):rgba (c)\n+  {\n+  };\n+\n+  static MyRgba fromRgba (uchar r, uchar g, uchar b, uchar a)\n+  {\n+    return MyRgba (uint (r) << 24\n+\t\t   | uint (g) << 16 | uint (b) << 8 | uint (a));\n+  }\n+\n+  uchar r ()\n+  {\n+    return rgba >> 24;\n+  }\n+  uchar g ()\n+  {\n+    return rgba >> 16;\n+  }\n+  uchar b ()\n+  {\n+    return rgba >> 8;\n+  }\n+  uchar a ()\n+  {\n+    return rgba;\n+  }\n+\n+  void setG (uchar _g)\n+  {\n+    *this = fromRgba (r (), _g, b (), a ());\n+  }\n+};\n+\n+extern MyRgba giveMe ();\n+\n+MyRgba\n+test ()\n+{\n+  MyRgba a = giveMe ();\n+  a.setG (0xf0);\n+  return a;\n+}\n+\n+class MyRgba64\n+{\n+  uint64 rgba;\n+\n+public:\n+    explicit MyRgba64 (uint64 c):rgba (c)\n+  {\n+  };\n+\n+  static MyRgba64 fromRgba64 (ushort r, ushort g, ushort b, ushort a)\n+  {\n+    return MyRgba64 (uint64 (r) << 48\n+\t\t     | uint64 (g) << 32 | uint64 (b) << 16 | uint64 (a));\n+  }\n+\n+  ushort r ()\n+  {\n+    return rgba >> 48;\n+  }\n+  ushort g ()\n+  {\n+    return rgba >> 32;\n+  }\n+  ushort b ()\n+  {\n+    return rgba >> 16;\n+  }\n+  ushort a ()\n+  {\n+    return rgba;\n+  }\n+\n+  void setG (ushort _g)\n+  {\n+    *this = fromRgba64 (r (), _g, b (), a ());\n+  }\n+};\n+\n+extern MyRgba64 giveMe64 ();\n+\n+MyRgba64\n+test64 ()\n+{\n+  MyRgba64 a = giveMe64 ();\n+  a.setG (0xf0f0);\n+  return a;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"<<\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \">>\" \"optimized\" } } */"}]}