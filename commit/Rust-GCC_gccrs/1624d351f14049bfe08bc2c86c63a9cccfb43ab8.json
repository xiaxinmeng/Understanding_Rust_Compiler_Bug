{"sha": "1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyNGQzNTFmMTQwNDliZmUwOGJjMmM4NmM2M2E5Y2NjZmI0M2FiOA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2019-10-16T13:35:41Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@gcc.gnu.org", "date": "2019-10-16T13:35:41Z"}, "message": "In PR70010, a function is marked with target(no-vsx) to disable VSX code generation.\n\nIn PR70010, a function is marked with target(no-vsx) to disable VSX code\ngeneration.  To avoid VSX code generation, this function should not be\ninlined into VSX function.  To fix the bug, in the current logic when\nchecking whether the caller's ISA flags supports the callee's ISA flags, we\njust need to add a test that enforces that the caller's ISA flags match\nexactly the callee's flags, for those flags that were explicitly set in the\ncallee.  If caller without target attribute then using options from command\nline.\n\ngcc/\n2019-10-16  Peter Bergner <bergner@linux.ibm.com>\n\t    Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR target/70010\n\t* config/rs6000/rs6000.c (rs6000_can_inline_p): Prohibit inlining if\n\tthe callee explicitly disables some isa_flags the caller is using.\n\ngcc.testsuite/\n2019-10-16  Peter Bergner <bergner@linux.ibm.com>\n\t    Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR target/70010\n\t* gcc.target/powerpc/pr70010.c: New test.\n\t* gcc.target/powerpc/pr70010-1.c: New test.\n\t* gcc.target/powerpc/pr70010-2.c: New test.\n\t* gcc.target/powerpc/pr70010-3.c: New test.\n\t* gcc.target/powerpc/pr70010-4.c: New test.\n\nCo-Authored-By: Jiufu Guo <guojiufu@linux.ibm.com>\n\nFrom-SVN: r277065", "tree": {"sha": "10b462439e9e18a577c0a2b016773bbfc30a7650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10b462439e9e18a577c0a2b016773bbfc30a7650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50425706ad8808bba6c062fd5ed1fe88676821d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50425706ad8808bba6c062fd5ed1fe88676821d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50425706ad8808bba6c062fd5ed1fe88676821d4"}], "stats": {"total": 134, "additions": 122, "deletions": 12}, "files": [{"sha": "da7bf1fddbfdd5e88bd7ab4dc13f3d3b2db84f35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -1,3 +1,10 @@\n+2019-10-16  Peter Bergner <bergner@linux.ibm.com>\n+\t    Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR target/70010\n+\t* config/rs6000/rs6000.c (rs6000_can_inline_p): Prohibit inlining if\n+\tthe callee explicitly disables some isa_flags the caller is using.\n+\n 2019-10-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* function-abi.cc (expr_callee_abi): Assert for POINTER_TYPE_P."}, {"sha": "a129137da94aec9e6f6469a46be9575c2c5de27a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -23964,25 +23964,31 @@ rs6000_can_inline_p (tree caller, tree callee)\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_TARGET (caller);\n   tree callee_tree = DECL_FUNCTION_SPECIFIC_TARGET (callee);\n \n-  /* If callee has no option attributes, then it is ok to inline.  */\n+  /* If the callee has no option attributes, then it is ok to inline.  */\n   if (!callee_tree)\n     ret = true;\n \n-  /* If caller has no option attributes, but callee does then it is not ok to\n-     inline.  */\n-  else if (!caller_tree)\n-    ret = false;\n-\n   else\n     {\n-      struct cl_target_option *caller_opts = TREE_TARGET_OPTION (caller_tree);\n+      HOST_WIDE_INT caller_isa;\n       struct cl_target_option *callee_opts = TREE_TARGET_OPTION (callee_tree);\n+      HOST_WIDE_INT callee_isa = callee_opts->x_rs6000_isa_flags;\n+      HOST_WIDE_INT explicit_isa = callee_opts->x_rs6000_isa_flags_explicit;\n \n-      /* Callee's options should a subset of the caller's, i.e. a vsx function\n-\t can inline an altivec function but a non-vsx function can't inline a\n-\t vsx function.  */\n-      if ((caller_opts->x_rs6000_isa_flags & callee_opts->x_rs6000_isa_flags)\n-\t  == callee_opts->x_rs6000_isa_flags)\n+      /* If the caller has option attributes, then use them.\n+\t Otherwise, use the command line options.  */\n+      if (caller_tree)\n+\tcaller_isa = TREE_TARGET_OPTION (caller_tree)->x_rs6000_isa_flags;\n+      else\n+\tcaller_isa = rs6000_isa_flags;\n+\n+      /* The callee's options must be a subset of the caller's options, i.e.\n+\t a vsx function may inline an altivec function, but a no-vsx function\n+\t must not inline a vsx function.  However, for those options that the\n+\t callee has explicitly enabled or disabled, then we must enforce that\n+\t the callee's and caller's options match exactly; see PR70010.  */\n+      if (((caller_isa & callee_isa) == callee_isa)\n+\t  && (caller_isa & explicit_isa) == (callee_isa & explicit_isa))\n \tret = true;\n     }\n "}, {"sha": "93ca734f8a90483da0174c83f4c30e330a1606b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -1,3 +1,13 @@\n+2019-10-16  Peter Bergner <bergner@linux.ibm.com>\n+\t    Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR target/70010\n+\t* gcc.target/powerpc/pr70010.c: New test.\n+\t* gcc.target/powerpc/pr70010-1.c: New test.\n+\t* gcc.target/powerpc/pr70010-2.c: New test.\n+\t* gcc.target/powerpc/pr70010-3.c: New test.\n+\t* gcc.target/powerpc/pr70010-4.c: New test.\n+\n 2019-10-16  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR ipa/91088"}, {"sha": "78870dbd8862e3cbf2b1528a9cd4d74bfd88643b", "filename": "gcc/testsuite/gcc.target/powerpc/pr70010-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-1.c?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flto -mvsx\" } */\n+\n+vector int c, a, b;\n+\n+static inline void __attribute__ ((__always_inline__, target (\"no-vsx\")))\n+foo () /* { dg-error \"inlining failed in call to .* target specific option mismatch\" } */\n+{\n+  c = a + b;\n+}\n+\n+int\n+main ()\n+{\n+  foo (); /* { dg-message \"called from here\" } */\n+  c = a + b;\n+}"}, {"sha": "4c09b2166899897d3c2e949c1e8139389f11a422", "filename": "gcc/testsuite/gcc.target/powerpc/pr70010-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-2.c?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flto -mno-vsx\" } */\n+\n+vector int c, a, b;\n+\n+static inline void __attribute__ ((__always_inline__, target (\"no-vsx\")))\n+foo ()\n+{\n+  c = a + b;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  c = a + b;\n+}"}, {"sha": "bca3187563254e0405bd1d67693039d8b92860f2", "filename": "gcc/testsuite/gcc.target/powerpc/pr70010-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-3.c?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-vsx\" } */\n+\n+vector int c, a, b;\n+\n+static inline void __attribute__ ((__always_inline__, target (\"no-vsx\")))\n+foo ()\n+{\n+  c = a + b;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  c = a + b;\n+}"}, {"sha": "c575cff1b52906eace6ec0d2c91e8cd8da775757", "filename": "gcc/testsuite/gcc.target/powerpc/pr70010-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010-4.c?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+vector int c, a, b;\n+\n+static inline void __attribute__ ((__always_inline__, target (\"no-vsx\")))\n+foo () /* { dg-error \"inlining failed in call to .* target specific option mismatch\" } */\n+{\n+  c = a + b;\n+}\n+\n+int\n+main ()\n+{\n+  foo (); /* { dg-message \"called from here\" } */\n+  c = a + b;\n+}"}, {"sha": "257ac297a8adbc3239776e8207bc3c5d3fd334fc", "filename": "gcc/testsuite/gcc.target/powerpc/pr70010.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1624d351f14049bfe08bc2c86c63a9cccfb43ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70010.c?ref=1624d351f14049bfe08bc2c86c63a9cccfb43ab8", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -finline-functions\" } */\n+/* { dg-final { scan-assembler {\\mbl vadd_no_vsx\\M} } } */\n+\n+typedef int vec_t __attribute__((vector_size(16)));\n+\n+static vec_t\n+__attribute__((__target__(\"no-vsx\")))\n+vadd_no_vsx (vec_t a, vec_t b)\n+{\n+  return a + b;\n+}\n+\n+vec_t\n+__attribute__((__target__(\"vsx\")))\n+call_vadd_no_vsx (vec_t x, vec_t y, vec_t z)\n+{\n+  return vadd_no_vsx (x, y) - z;\n+}"}]}