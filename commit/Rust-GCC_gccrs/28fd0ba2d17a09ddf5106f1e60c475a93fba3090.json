{"sha": "28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmZDBiYTJkMTdhMDlkZGY1MTA2ZjFlNjBjNDc1YTkzZmJhMzA5MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-09-09T17:09:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-09-09T17:09:59Z"}, "message": "re PR tree-optimization/58364 (likely wrong code bug)\n\n\tPR tree-optimization/58364\n\t* tree-ssa-reassoc.c (init_range_entry): For BIT_NOT_EXPR on\n\tBOOLEAN_TYPE, only invert in_p and continue with arg0 if\n\tthe current range can't be an unconditional true or false.\n\n\t* gcc.c-torture/execute/pr58364.c: New test.\n\nFrom-SVN: r202409", "tree": {"sha": "0a438d585a5e277f8a5489576bb8698c82b76786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a438d585a5e277f8a5489576bb8698c82b76786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "552d99fe881c262ec96235e9e8f00fc54809f458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552d99fe881c262ec96235e9e8f00fc54809f458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552d99fe881c262ec96235e9e8f00fc54809f458"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "dd9a3e0cbc1b21ee161804182ad3bb8b99303326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "patch": "@@ -1,3 +1,10 @@\n+2013-09-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/58364\n+\t* tree-ssa-reassoc.c (init_range_entry): For BIT_NOT_EXPR on\n+\tBOOLEAN_TYPE, only invert in_p and continue with arg0 if\n+\tthe current range can't be an unconditional true or false.\n+\n 2013-09-09  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/arm_neon.h (vrsqrte_f64): Fix parameter type."}, {"sha": "befd28d26909e9639a6db3c96952b069d7955f80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "patch": "@@ -1,3 +1,8 @@\n+2013-09-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/58364\n+\t* gcc.c-torture/execute/pr58364.c: New test.\n+\n 2013-09-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/43452"}, {"sha": "59ad7b47a166b031203d61ec29f2c730f8d42e82", "filename": "gcc/testsuite/gcc.c-torture/execute/pr58364.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58364.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58364.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58364.c?ref=28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/58364 */\n+\n+int a = 1, b, c;\n+\n+int\n+foo (int x)\n+{\n+  return x < 0 ? 1 : x;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (a > c == (b = 0)))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "b4a3b0a2df9fc7762ffe6644a4b6d7207725b3e1", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28fd0ba2d17a09ddf5106f1e60c475a93fba3090/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=28fd0ba2d17a09ddf5106f1e60c475a93fba3090", "patch": "@@ -1801,7 +1801,14 @@ init_range_entry (struct range_entry *r, tree exp, gimple stmt)\n       switch (code)\n \t{\n \tcase BIT_NOT_EXPR:\n-\t  if (TREE_CODE (TREE_TYPE (exp)) == BOOLEAN_TYPE)\n+\t  if (TREE_CODE (TREE_TYPE (exp)) == BOOLEAN_TYPE\n+\t      /* Ensure the range is either +[-,0], +[0,0],\n+\t\t -[-,0], -[0,0] or +[1,-], +[1,1], -[1,-] or\n+\t\t -[1,1].  If it is e.g. +[-,-] or -[-,-]\n+\t\t or similar expression of unconditional true or\n+\t\t false, it should not be negated.  */\n+\t      && ((high && integer_zerop (high))\n+\t\t  || (low && integer_onep (low))))\n \t    {\n \t      in_p = !in_p;\n \t      exp = arg0;"}]}