{"sha": "17a7cb4e54857987e09c5fc4b305cd7a4b55a739", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhN2NiNGU1NDg1Nzk4N2UwOWM1ZmM0YjMwNWNkN2E0YjU1YTczOQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-03-16T17:17:33Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2010-03-16T17:17:33Z"}, "message": "sourcebuild.texi (Testsuites): Fix markup.\n\n2010-03-16  Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\t* doc/sourcebuild.texi (Testsuites): Fix markup.\n\tUse pathnames relative to gcc/testsuite.\n\t(Test Directives): Move description of how timeout is determined.\n\t(Ada Tests): Favor gnat.exp over ada/acats/tests/gcc.\n\t(C Tests): Correct gcc.misc-tests directory.\n\tFramework tests now live in gcc.test-framework.\n\nFrom-SVN: r157491", "tree": {"sha": "6febe74592a72157adb1d096c7f90461f074ef4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6febe74592a72157adb1d096c7f90461f074ef4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a7cb4e54857987e09c5fc4b305cd7a4b55a739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a7cb4e54857987e09c5fc4b305cd7a4b55a739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a7cb4e54857987e09c5fc4b305cd7a4b55a739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a7cb4e54857987e09c5fc4b305cd7a4b55a739/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3a9d094ef84c24446a78f65147205f7ace7ce68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a9d094ef84c24446a78f65147205f7ace7ce68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a9d094ef84c24446a78f65147205f7ace7ce68"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "7f4134c2b25a0ff4d27e095691d654fd68594e9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a7cb4e54857987e09c5fc4b305cd7a4b55a739/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a7cb4e54857987e09c5fc4b305cd7a4b55a739/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17a7cb4e54857987e09c5fc4b305cd7a4b55a739", "patch": "@@ -1,3 +1,12 @@\n+2010-03-16  Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* doc/sourcebuild.texi (Testsuites): Fix markup.\n+\tUse pathnames relative to gcc/testsuite.\n+\t(Test Directives): Move description of how timeout is determined.\n+\t(Ada Tests): Favor gnat.exp over ada/acats/tests/gcc.\n+\t(C Tests): Correct gcc.misc-tests directory.\n+\tFramework tests now live in gcc.test-framework.\n+\n 2010-03-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/43379"}, {"sha": "100b5206e12a7fa674738c0c1d24c77e09b68562", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a7cb4e54857987e09c5fc4b305cd7a4b55a739/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a7cb4e54857987e09c5fc4b305cd7a4b55a739/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=17a7cb4e54857987e09c5fc4b305cd7a4b55a739", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+@c Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -930,7 +930,7 @@ effective-target keyword; or a logical expression.  Depending on the\n context, the selector specifies whether a test is skipped and reported\n as unsupported or is expected to fail.  Use @samp{*-*-*} to match any\n target.\n-Effective-target keywords are defined in @file{target-supports.exp} in\n+Effective-target keywords are defined in @file{lib/target-supports.exp} in\n the GCC testsuite.\n \n A selector expression appears within curly braces and uses a single\n@@ -972,10 +972,10 @@ If the directive includes the optional @samp{@{ target @var{selector} @}}\n then the test is skipped unless the target system is included in the\n list of target triplets or matches the effective-target keyword.\n \n-If @samp{do-what-keyword} is @code{run} and the directive includes\n+If @var{do-what-keyword} is @code{run} and the directive includes\n the optional @samp{@{ xfail @var{selector} @}} and the selector is met\n then the test is expected to fail.  The @code{xfail} clause is ignored\n-for other values of @samp{do-what-keyword}; those tests can use\n+for other values of @var{do-what-keyword}; those tests can use\n directive @code{dg-xfail-if}.\n \n @item @{ dg-options @var{options} [@{ target @var{selector} @}] @}\n@@ -1001,11 +1001,7 @@ and only then in certain modes.\n \n @item @{ dg-timeout @var{n} [@{target @var{selector} @}] @}\n Set the time limit for the compilation and for the execution of the test\n-to the specified number of seconds.\n-\n-@item @{ dg-timeout-factor @var{x} [@{ target @var{selector} @}] @}\n-Multiply the normal time limit for compilation and execution of the test\n-by the specified floating-point factor.  The normal timeout limit, in\n+to the specified number of seconds.  The normal timeout limit, in\n seconds, is found by searching the following in order:\n \n @itemize @bullet\n@@ -1019,6 +1015,10 @@ the test\n @item 300\n @end itemize\n \n+@item @{ dg-timeout-factor @var{x} [@{ target @var{selector} @}] @}\n+Multiply the normal time limit for compilation and execution of the test\n+by the specified floating-point factor.\n+\n @item @{ dg-skip-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n Arguments @var{include-opts} and @var{exclude-opts} are lists in which\n each element is a string of zero or more GCC options.\n@@ -1075,11 +1075,11 @@ Expect the test to fail if the conditions (which are the same as for\n \n @item  @{ dg-xfail-run-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}\n Expect the execute step of a test to fail if the conditions (which are\n-the same as for @code{dg-skip-if}) and @code{dg-xfail-if}) are met.\n+the same as for @code{dg-skip-if} and @code{dg-xfail-if}) are met.\n \n @item @{ dg-require-@var{support} args @}\n Skip the test if the target does not provide the required support;\n-see @file{gcc-dg.exp} in the GCC testsuite for the actual directives.\n+see @file{lib/gcc-dg.exp} in the GCC testsuite for the actual directives.\n These directives must appear after any @code{dg-do} directive in the test\n and before any @code{dg-additional-sources} directive.\n They require at least one argument, which can be an empty string if the\n@@ -1241,7 +1241,7 @@ Check branch and/or call counts, in addition to line counts, in\n \n The Ada testsuite includes executable tests from the ACATS 2.5\n testsuite, publicly available at\n-@uref{http://www.adaic.org/compilers/acats/2.5}\n+@uref{http://www.adaic.org/compilers/acats/2.5}.\n \n These tests are integrated in the GCC testsuite in the\n @file{gcc/testsuite/ada/acats} directory, and\n@@ -1257,11 +1257,12 @@ $ make check-ada CHAPTERS=\"c3 c9\"\n @end smallexample\n \n The tests are organized by directory, each directory corresponding to\n-a chapter of the Ada Reference Manual.  So for example, c9 corresponds\n+a chapter of the Ada Reference Manual.  So for example, @file{c9} corresponds\n to chapter 9, which deals with tasking features of the language.\n \n There is also an extra chapter called @file{gcc} containing a template for\n-creating new executable tests.\n+creating new executable tests, although this is deprecated in favor of\n+the @file{gnat.dg} testsuite.\n \n The tests are run using two @command{sh} scripts: @file{run_acats} and\n @file{run_all.sh}.  To run the tests using a simulator or a cross\n@@ -1291,7 +1292,7 @@ unless other options are given in the test.  Except as noted below they\n are not run with multiple optimization options.\n @item gcc.dg/compat\n This subdirectory contains tests for binary compatibility using\n-@file{compat.exp}, which in turn uses the language-independent support\n+@file{lib/compat.exp}, which in turn uses the language-independent support\n (@pxref{compat Testing, , Support for testing binary compatibility}).\n @item gcc.dg/cpp\n This subdirectory contains tests of the preprocessor.\n@@ -1341,21 +1342,19 @@ This contains tests which are specific to IEEE floating point.\n FIXME: describe this.\n \n This directory should probably not be used for new tests.\n-@item gcc.c-torture/misc-tests\n+@item gcc.misc-tests\n This directory contains C tests that require special handling.  Some\n of these tests have individual expect files, and others share\n special-purpose expect files:\n \n @table @file\n @item @code{bprob*.c}\n-Test @option{-fbranch-probabilities} using @file{bprob.exp}, which\n+Test @option{-fbranch-probabilities} using\n+@file{gcc.misc-tests/bprob.exp}, which\n in turn uses the generic, language-independent framework\n (@pxref{profopt Testing, , Support for testing profile-directed\n optimizations}).\n \n-@item @code{dg-*.c}\n-Test the testsuite itself using @file{dg-test.exp}.\n-\n @item @code{gcov*.c}\n Test @command{gcov} output using @file{gcov.exp}, which in turn uses the\n language-independent support (@pxref{gcov Testing, , Support for testing gcov}).\n@@ -1364,6 +1363,12 @@ language-independent support (@pxref{gcov Testing, , Support for testing gcov}).\n Test i386-specific support for data prefetch using @file{i386-prefetch.exp}.\n @end table\n \n+@item gcc.test-framework\n+@table @file\n+@item @code{dg-*.c}\n+Test the testsuite itself using @file{gcc.test-framework/test-framework.exp}.\n+@end table\n+\n @end table\n \n FIXME: merge in @file{testsuite/README.gcc} and discuss the format of\n@@ -1433,8 +1438,8 @@ each of these sets of options.\n \n Language-independent support for testing @command{gcov}, and for checking\n that branch profiling produces expected values, is provided by the\n-expect file @file{gcov.exp}.  @command{gcov} tests also rely on procedures\n-in @file{gcc.dg.exp} to compile and run the test program.  A typical\n+expect file @file{lib/gcov.exp}.  @command{gcov} tests also rely on procedures\n+in @file{lib/gcc-dg.exp} to compile and run the test program.  A typical\n @command{gcov} test contains the following DejaGnu commands within comments:\n \n @smallexample\n@@ -1607,7 +1612,7 @@ following from @file{@var{objdir}/gcc}:\n rm site.exp\n make -k \\\n   ALT_CXX_UNDER_TEST=$@{alt_prefix@}/bin/g++ \\\n-  COMPAT_OPTIONS=\"lists as shown above\" \\\n+  COMPAT_OPTIONS=\"@var{lists as shown above}\" \\\n   check-c++ \\\n   RUNTESTFLAGS=\"compat.exp\"\n @end smallexample\n@@ -1646,7 +1651,7 @@ targets.\n Throughout the compiler testsuite there are several directories whose\n tests are run multiple times, each with a different set of options.\n These are known as torture tests.\n-@file{gcc/testsuite/lib/torture-options.exp} defines procedures to\n+@file{lib/torture-options.exp} defines procedures to\n set up these lists:\n \n @table @code"}]}