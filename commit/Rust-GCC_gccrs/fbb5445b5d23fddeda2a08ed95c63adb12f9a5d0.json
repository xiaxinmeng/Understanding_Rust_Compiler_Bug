{"sha": "fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJiNTQ0NWI1ZDIzZmRkZWRhMmEwOGVkOTVjNjNhZGIxMmY5YTVkMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-12-01T14:49:15Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-12-01T14:49:15Z"}, "message": "[multiple changes]\n\n2006-12-01  Zdenek Dvorak <dvorakz@suse.cz>\n\n\tPR tree-optimization/29921\n\t* tree-ssa-ccp.c (canonicalize_float_value): New function.\n\t(set_lattice_value): Use canonicalize_float_value.\n\n2006-12-01  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Zdenek Dvorak <dvorakz@suse.cz>\n\n\tPR tree-optimization/29921\n\t* gcc.dg/pr29921-2.c: New test.\n\nFrom-SVN: r119401", "tree": {"sha": "aa1dba69bcd0e050b46624384b26f68ddf848913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa1dba69bcd0e050b46624384b26f68ddf848913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/comments", "author": null, "committer": null, "parents": [{"sha": "b66b813d47ff264118b496f2e086591813049ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66b813d47ff264118b496f2e086591813049ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66b813d47ff264118b496f2e086591813049ba8"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "52452d5162929ccb1d75a430ba54ba4335fae7f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "patch": "@@ -1,3 +1,9 @@\n+2006-12-01  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/29921\n+\t* tree-ssa-ccp.c (canonicalize_float_value): New function.\n+\t(set_lattice_value): Use canonicalize_float_value.\n+\n 2006-11-30  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* config/spu/spu.c (spu_builtin_range): Move from spu-c.c"}, {"sha": "a7149088e55957c58e356e1983c09a3978e27923", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "patch": "@@ -1,3 +1,9 @@\n+2006-12-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/29921\n+\t* gcc.dg/pr29921-2.c: New test.\n+\n 2006-11-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/i386-cpuid.h (bit_SSE3): New."}, {"sha": "8cf665eede04eb799154ec1ce2e48e98769cd55d", "filename": "gcc/testsuite/gcc.dg/pr29921-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29921-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29921-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29921-2.c?ref=fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "patch": "@@ -0,0 +1,27 @@\n+/* With -ffast-math, the latice value for sum2 used to change from NaN to\n+   VARYING, in turn causing the lattice value of sum1 * sum2 change from\n+   NaN to 0 (since sum1 is believed to be 0 at that moment, and\n+   0 * VARYING = 0 with -ffast-math), which caused an ICE.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+int\n+foo (float *array, int end)\n+{\n+  int i;\n+  float sum1, sum2;\n+\n+  sum2 = 0;\n+  for (i = 0; i < end; i++)\n+    sum2 = sum2+array[i];\n+  sum2 = 1./sum2;\n+  sum1 = 0.;\n+  for (i = 0; i < end; i++)\n+    sum1 = sum1+array[i];\n+  sum1 = sum1 * sum2;\n+  if (-10.0 / sum1 < 5.E-5)\n+    end = 0;\n+  return end;\n+}\n+"}, {"sha": "8da29e4be51ffea9a020ce6f8140c1f861f0c2b7", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=fbb5445b5d23fddeda2a08ed95c63adb12f9a5d0", "patch": "@@ -418,6 +418,54 @@ set_value_varying (tree var)\n   val->mem_ref = NULL_TREE;\n }\n \n+/* For float types, modify the value of VAL to make ccp work correctly\n+   for non-standard values (-0, NaN):\n+\n+   If HONOR_SIGNED_ZEROS is false, and VAL = -0, we canonicalize it to 0.\n+   If HONOR_NANS is false, and VAL is NaN, we canonicalize it to UNDEFINED.\n+     This is to fix the following problem (see PR 29921): Suppose we have\n+\n+     x = 0.0 * y\n+\n+     and we set value of y to NaN.  This causes value of x to be set to NaN.\n+     When we later determine that y is in fact VARYING, fold uses the fact\n+     that HONOR_NANS is false, and we try to change the value of x to 0,\n+     causing an ICE.  With HONOR_NANS being false, the real appearance of\n+     NaN would cause undefined behavior, though, so claiming that y (and x)\n+     are UNDEFINED initially is correct.  */\n+\n+static void\n+canonicalize_float_value (prop_value_t *val)\n+{\n+  enum machine_mode mode;\n+  tree type;\n+  REAL_VALUE_TYPE d;\n+\n+  if (val->lattice_val != CONSTANT\n+      || TREE_CODE (val->value) != REAL_CST)\n+    return;\n+\n+  d = TREE_REAL_CST (val->value);\n+  type = TREE_TYPE (val->value);\n+  mode = TYPE_MODE (type);\n+\n+  if (!HONOR_SIGNED_ZEROS (mode)\n+      && REAL_VALUE_MINUS_ZERO (d))\n+    {\n+      val->value = build_real (type, dconst0);\n+      return;\n+    }\n+\n+  if (!HONOR_NANS (mode)\n+      && REAL_VALUE_ISNAN (d))\n+    {\n+      val->lattice_val = UNDEFINED;\n+      val->value = NULL;\n+      val->mem_ref = NULL;\n+      return;\n+    }\n+}\n+\n /* Set the value for variable VAR to NEW_VAL.  Return true if the new\n    value is different from VAR's previous value.  */\n \n@@ -426,6 +474,8 @@ set_lattice_value (tree var, prop_value_t new_val)\n {\n   prop_value_t *old_val = get_value (var);\n \n+  canonicalize_float_value (&new_val);\n+\n   /* Lattice transitions must always be monotonically increasing in\n      value.  If *OLD_VAL and NEW_VAL are the same, return false to\n      inform the caller that this was a non-transition.  */"}]}