{"sha": "3e0ab430c0441ea3921e8b3a3987f73156412088", "node_id": "C_kwDOANBUbNoAKDNlMGFiNDMwYzA0NDFlYTM5MjFlOGIzYTM5ODdmNzMxNTY0MTIwODg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-07T13:18:57Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-08T15:53:40Z"}, "message": "Provide normalized and denormal format version of real_isdenormal.\n\nImplement a variant of real_isdenormal() to be used within real.cc\nwhere the argument is known to be in denormal format.  Rewrite\nreal_isdenormal() for use outside of real.cc where the argument is\nknown to be normalized.\n\ngcc/ChangeLog:\n\n\t* real.cc (real_isdenormal): New.\n\t(encode_ieee_single): Call real_isdenormal.\n\t(encode_ieee_double): Same.\n\t(encode_ieee_extended): Same.\n\t(encode_ieee_quad): Same.\n\t(encode_ieee_half): Same.\n\t(encode_arm_bfloat_half): Same.\n\t* real.h (real_isdenormal): Add mode argument.  Rewrite for\n\tnormalized values.\n\t* value-range.cc (frange::flush_denormals_to_zero): Pass mode to\n\treal_isdenormal.", "tree": {"sha": "42fda900a29c88cb34c1be2422ceb431fe89a4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42fda900a29c88cb34c1be2422ceb431fe89a4ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0ab430c0441ea3921e8b3a3987f73156412088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0ab430c0441ea3921e8b3a3987f73156412088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0ab430c0441ea3921e8b3a3987f73156412088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0ab430c0441ea3921e8b3a3987f73156412088/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7899582a059a9d8c25bfff305cd236d219dc4f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7899582a059a9d8c25bfff305cd236d219dc4f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7899582a059a9d8c25bfff305cd236d219dc4f20"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "1c71858dd016d476030f95eeeed0030884d1e6e4", "filename": "gcc/real.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0ab430c0441ea3921e8b3a3987f73156412088/gcc%2Freal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0ab430c0441ea3921e8b3a3987f73156412088/gcc%2Freal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.cc?ref=3e0ab430c0441ea3921e8b3a3987f73156412088", "patch": "@@ -111,6 +111,16 @@ static const REAL_VALUE_TYPE * real_digit (int);\n static void times_pten (REAL_VALUE_TYPE *, int);\n \n static void round_for_format (const struct real_format *, REAL_VALUE_TYPE *);\n+\n+/* Determine whether a floating-point value X is a denormal.  R is\n+   expected to be in denormal form, so this function is only\n+   meaningful after a call to round_for_format.  */\n+\n+static inline bool\n+real_isdenormal (const REAL_VALUE_TYPE *r)\n+{\n+  return r->cl == rvc_normal && (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+}\n \f\n /* Initialize R with a positive zero.  */\n \n@@ -2962,7 +2972,6 @@ encode_ieee_single (const struct real_format *fmt, long *buf,\n {\n   unsigned long image, sig, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = real_isdenormal (r);\n \n   image = sign << 31;\n   sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 24)) & 0x7fffff;\n@@ -3002,7 +3011,7 @@ encode_ieee_single (const struct real_format *fmt, long *buf,\n       /* Recall that IEEE numbers are interpreted as 1.F x 2**exp,\n \t whereas the intermediate representation is 0.F x 2**exp.\n \t Which means we're off by one.  */\n-      if (denormal)\n+      if (real_isdenormal (r))\n \texp = 0;\n       else\n       exp = REAL_EXP (r) + 127 - 1;\n@@ -3183,7 +3192,6 @@ encode_ieee_double (const struct real_format *fmt, long *buf,\n {\n   unsigned long image_lo, image_hi, sig_lo, sig_hi, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = real_isdenormal (r);\n \n   image_hi = sign << 31;\n   image_lo = 0;\n@@ -3255,7 +3263,7 @@ encode_ieee_double (const struct real_format *fmt, long *buf,\n       /* Recall that IEEE numbers are interpreted as 1.F x 2**exp,\n \t whereas the intermediate representation is 0.F x 2**exp.\n \t Which means we're off by one.  */\n-      if (denormal)\n+      if (real_isdenormal (r))\n \texp = 0;\n       else\n \texp = REAL_EXP (r) + 1023 - 1;\n@@ -3441,7 +3449,6 @@ encode_ieee_extended (const struct real_format *fmt, long *buf,\n \t\t      const REAL_VALUE_TYPE *r)\n {\n   unsigned long image_hi, sig_hi, sig_lo;\n-  bool denormal = real_isdenormal (r);\n \n   image_hi = r->sign << 15;\n   sig_hi = sig_lo = 0;\n@@ -3523,7 +3530,7 @@ encode_ieee_extended (const struct real_format *fmt, long *buf,\n \t   this discrepancy has been taken care of by the difference\n \t   in fmt->emin in round_for_format.  */\n \n-\tif (denormal)\n+\tif (real_isdenormal (r))\n \t  exp = 0;\n \telse\n \t  {\n@@ -3972,7 +3979,6 @@ encode_ieee_quad (const struct real_format *fmt, long *buf,\n {\n   unsigned long image3, image2, image1, image0, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = real_isdenormal (r);\n   REAL_VALUE_TYPE u;\n \n   image3 = sign << 31;\n@@ -4048,7 +4054,7 @@ encode_ieee_quad (const struct real_format *fmt, long *buf,\n       /* Recall that IEEE numbers are interpreted as 1.F x 2**exp,\n \t whereas the intermediate representation is 0.F x 2**exp.\n \t Which means we're off by one.  */\n-      if (denormal)\n+      if (real_isdenormal (r))\n \texp = 0;\n       else\n \texp = REAL_EXP (r) + 16383 - 1;\n@@ -4729,7 +4735,6 @@ encode_ieee_half (const struct real_format *fmt, long *buf,\n {\n   unsigned long image, sig, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = real_isdenormal (r);\n \n   image = sign << 15;\n   sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 11)) & 0x3ff;\n@@ -4769,7 +4774,7 @@ encode_ieee_half (const struct real_format *fmt, long *buf,\n       /* Recall that IEEE numbers are interpreted as 1.F x 2**exp,\n \t whereas the intermediate representation is 0.F x 2**exp.\n \t Which means we're off by one.  */\n-      if (denormal)\n+      if (real_isdenormal (r))\n \texp = 0;\n       else\n \texp = REAL_EXP (r) + 15 - 1;\n@@ -4843,7 +4848,6 @@ encode_arm_bfloat_half (const struct real_format *fmt, long *buf,\n {\n   unsigned long image, sig, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = real_isdenormal (r);\n \n   image = sign << 15;\n   sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 8)) & 0x7f;\n@@ -4880,7 +4884,7 @@ encode_arm_bfloat_half (const struct real_format *fmt, long *buf,\n       break;\n \n     case rvc_normal:\n-      if (denormal)\n+      if (real_isdenormal (r))\n \texp = 0;\n       else\n       exp = REAL_EXP (r) + 127 - 1;"}, {"sha": "b14bcdd3fdefe45844d5352e55407da4d12cd369", "filename": "gcc/real.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0ab430c0441ea3921e8b3a3987f73156412088/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0ab430c0441ea3921e8b3a3987f73156412088/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=3e0ab430c0441ea3921e8b3a3987f73156412088", "patch": "@@ -286,11 +286,12 @@ extern bool real_isnan (const REAL_VALUE_TYPE *);\n /* Determine whether a floating-point value X is a signaling NaN.  */\n extern bool real_issignaling_nan (const REAL_VALUE_TYPE *);\n \n-/* Determine whether a floating-point value X is a denormal.  */\n+/* Determine whether floating-point value R is a denormal.  This\n+   function is only valid for normalized values.  */\n inline bool\n-real_isdenormal (const REAL_VALUE_TYPE *r)\n+real_isdenormal (const REAL_VALUE_TYPE *r, machine_mode mode)\n {\n-  return r->cl == rvc_normal && (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+  return r->cl == rvc_normal && REAL_EXP (r) < REAL_MODE_FORMAT (mode)->emin;\n }\n \n /* Determine whether a floating-point value X is finite.  */"}, {"sha": "859c7fb4af9877870ec59a7599ec13ac61eec37c", "filename": "gcc/value-range.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0ab430c0441ea3921e8b3a3987f73156412088/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0ab430c0441ea3921e8b3a3987f73156412088/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=3e0ab430c0441ea3921e8b3a3987f73156412088", "patch": "@@ -266,15 +266,16 @@ frange::flush_denormals_to_zero ()\n   if (undefined_p () || known_isnan ())\n     return;\n \n+  machine_mode mode = TYPE_MODE (type ());\n   // Flush [x, -DENORMAL] to [x, -0.0].\n-  if (real_isdenormal (&m_max) && real_isneg (&m_max))\n+  if (real_isdenormal (&m_max, mode) && real_isneg (&m_max))\n     {\n       m_max = dconst0;\n       if (HONOR_SIGNED_ZEROS (m_type))\n \tm_max.sign = 1;\n     }\n   // Flush [+DENORMAL, x] to [+0.0, x].\n-  if (real_isdenormal (&m_min) && !real_isneg (&m_min))\n+  if (real_isdenormal (&m_min, mode) && !real_isneg (&m_min))\n     m_min = dconst0;\n }\n "}]}