{"sha": "dda71670514e88dcd9b913c44c0ee64d8c3d6da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRhNzE2NzA1MTRlODhkY2Q5YjkxM2M0NGMwZWU2NGQ4YzNkNmRhOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-03T10:03:40Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-03T10:10:22Z"}, "message": "Cleanup LTO tag streaming.\n\nthis patch cleanups a bit the way LTO tags are assigned (so we do not use magic\nnumbers of 2) and reorders them approximately by their frequency so the stream\ngets little bit smaller because of uleb coding.\n\nFrom:\n\n[WPA] Compression: 111213968 input bytes, 293801489 uncompressed bytes (ratio: 2.641768)\n[WPA] Size of mmap'd section decls: 85983129 bytes\n[WPA] Size of mmap'd section function_body: 14058627 bytes\n\nto:\n\n[WPA] Compression: 110593119 input bytes, 287696614 uncompressed bytes (ratio: 2.601397)\n[WPA] Size of mmap'd section decls: 85628556 bytes\n[WPA] Size of mmap'd section function_body: 13842928 bytes\n\nlto-bootstrapped/regtested x86_64-linux, will commit it shortly.\n\n\t* lto-streamer.h (LTO_tags): Reorder so frequent tags has small indexes;\n\tadd LTO_first_tree_tag and LTO_first_gimple_tag.\n\t(lto_tag_is_tree_code_p): Update.\n\t(lto_tag_is_gimple_code_p): Update.\n\t(lto_gimple_code_to_tag): Update.\n\t(lto_tag_to_gimple_code): Update.\n\t(lto_tree_code_to_tag): Update.\n\t(lto_tag_to_tree_code): Update.", "tree": {"sha": "bb9ec41f37986163716c4cf3d5a0d3a921c0767d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9ec41f37986163716c4cf3d5a0d3a921c0767d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dda71670514e88dcd9b913c44c0ee64d8c3d6da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda71670514e88dcd9b913c44c0ee64d8c3d6da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda71670514e88dcd9b913c44c0ee64d8c3d6da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda71670514e88dcd9b913c44c0ee64d8c3d6da9/comments", "author": null, "committer": null, "parents": [{"sha": "4fc2610a8301198367c590759a578b03167a1868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc2610a8301198367c590759a578b03167a1868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc2610a8301198367c590759a578b03167a1868"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "9e0031e5ba3f1a35b8a62f3c76013e3c0dc8b900", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda71670514e88dcd9b913c44c0ee64d8c3d6da9/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda71670514e88dcd9b913c44c0ee64d8c3d6da9/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=dda71670514e88dcd9b913c44c0ee64d8c3d6da9", "patch": "@@ -137,29 +137,43 @@ enum LTO_tags\n {\n   LTO_null = 0,\n \n-  /* Special for streamer.  Reference to previously-streamed node.  */\n+  /* Reference to previously-streamed node.  */\n   LTO_tree_pickle_reference,\n \n-  /* Reserve enough entries to fit all the tree and gimple codes handled\n-     by the streamer.  This guarantees that:\n+  /* References to indexable tree nodes.  These objects are stored in\n+     tables that are written separately from the function bodies\n+     and variable constructors that reference them.  This way they can be\n+     instantiated even when the referencing functions aren't (e.g., during WPA)\n+     and it also allows functions to be copied from one file to another without\n+     having to unpickle the body first (the references are location\n+     independent).  */\n+  LTO_global_stream_ref,\n \n-     1- Given a tree code C:\n-     \t\tenum LTO_tags tag == C + 1\n+  LTO_ssa_name_ref,\n \n-     2- Given a gimple code C:\n-\t\tenum LTO_tags tag == C + NUM_TREE_CODES + 1\n+  /* Special for global streamer.  A blob of unnamed tree nodes.  */\n+  LTO_tree_scc,\n \n-     Conversely, to map between LTO tags and tree/gimple codes, the\n-     reverse operation must be applied.  */\n-  LTO_bb0 = 1 + MAX_TREE_CODES + LAST_AND_UNUSED_GIMPLE_CODE,\n+  /* Sequence of trees.  */\n+  LTO_trees,\n+\n+  /* Shared INTEGER_CST node.  */\n+  LTO_integer_cst,\n+\n+  /* Tags of trees are encoded as\n+     LTO_first_tree_tag + TREE_CODE.  */\n+  LTO_first_tree_tag,\n+  /* Tags of gimple typles are encoded as\n+     LTO_first_gimple_tag + gimple_code.  */\n+  LTO_first_gimple_tag = LTO_first_tree_tag + MAX_TREE_CODES,\n+\n+  /* Entry and exit basic blocks.  */\n+  LTO_bb0 = LTO_first_gimple_tag + LAST_AND_UNUSED_GIMPLE_CODE,\n   LTO_bb1,\n \n   /* EH region holding the previous statement.  */\n   LTO_eh_region,\n \n-  /* Shared INTEGER_CST node.  */\n-  LTO_integer_cst,\n-\n   /* Function body.  */\n   LTO_function,\n \n@@ -178,23 +192,6 @@ enum LTO_tags\n   /* EH try/catch node.  */\n   LTO_eh_catch,\n \n-  /* Special for global streamer.  A blob of unnamed tree nodes.  */\n-  LTO_tree_scc,\n-\n-  /* Sequence of trees.  */\n-  LTO_trees,\n-\n-  /* References to indexable tree nodes.  These objects are stored in\n-     tables that are written separately from the function bodies\n-     and variable constructors that reference them.  This way they can be\n-     instantiated even when the referencing functions aren't (e.g., during WPA)\n-     and it also allows functions to be copied from one file to another without\n-     having to unpickle the body first (the references are location\n-     independent).  */\n-  LTO_global_stream_ref,\n-\n-  LTO_ssa_name_ref,\n-\n   /* This tag must always be last.  */\n   LTO_NUM_TAGS\n };\n@@ -953,16 +950,17 @@ extern vec<lto_out_decl_state_ptr> lto_function_decl_states;\n static inline bool\n lto_tag_is_tree_code_p (enum LTO_tags tag)\n {\n-  return tag > LTO_tree_pickle_reference && (unsigned) tag <= MAX_TREE_CODES;\n+  return tag > LTO_first_tree_tag && (unsigned) tag <= MAX_TREE_CODES;\n }\n \n \n /* Return true if LTO tag TAG corresponds to a gimple code.  */\n static inline bool\n lto_tag_is_gimple_code_p (enum LTO_tags tag)\n {\n-  return (unsigned) tag >= NUM_TREE_CODES + 2\n-\t && (unsigned) tag < 2 + NUM_TREE_CODES + LAST_AND_UNUSED_GIMPLE_CODE;\n+  return (unsigned) tag >= LTO_first_gimple_tag\n+\t && (unsigned) tag\n+\t    < LTO_first_gimple_tag + LAST_AND_UNUSED_GIMPLE_CODE;\n }\n \n \n@@ -971,7 +969,7 @@ lto_tag_is_gimple_code_p (enum LTO_tags tag)\n static inline enum LTO_tags\n lto_gimple_code_to_tag (enum gimple_code code)\n {\n-  return (enum LTO_tags) ((unsigned) code + NUM_TREE_CODES + 2);\n+  return (enum LTO_tags) ((unsigned) code + LTO_first_gimple_tag);\n }\n \n \n@@ -981,7 +979,7 @@ static inline enum gimple_code\n lto_tag_to_gimple_code (enum LTO_tags tag)\n {\n   gcc_assert (lto_tag_is_gimple_code_p (tag));\n-  return (enum gimple_code) ((unsigned) tag - NUM_TREE_CODES - 2);\n+  return (enum gimple_code) ((unsigned) tag - LTO_first_gimple_tag);\n }\n \n \n@@ -990,7 +988,7 @@ lto_tag_to_gimple_code (enum LTO_tags tag)\n static inline enum LTO_tags\n lto_tree_code_to_tag (enum tree_code code)\n {\n-  return (enum LTO_tags) ((unsigned) code + 2);\n+  return (enum LTO_tags) ((unsigned) code + LTO_first_tree_tag);\n }\n \n \n@@ -1000,7 +998,7 @@ static inline enum tree_code\n lto_tag_to_tree_code (enum LTO_tags tag)\n {\n   gcc_assert (lto_tag_is_tree_code_p (tag));\n-  return (enum tree_code) ((unsigned) tag - 2);\n+  return (enum tree_code) ((unsigned) tag - LTO_first_tree_tag);\n }\n \n /* Check that tag ACTUAL == EXPECTED.  */"}]}