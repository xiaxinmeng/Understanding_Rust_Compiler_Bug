{"sha": "e1a5ccf7e6174cbe245af105a75223a285927407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFhNWNjZjdlNjE3NGNiZTI0NWFmMTA1YTc1MjIzYTI4NTkyNzQwNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-29T02:27:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-29T02:27:55Z"}, "message": "pt.c (push_template_decl_real): Generalize check for incorrect number of template parms.\n\n\t* pt.c (push_template_decl_real): Generalize check for incorrect\n\tnumber of template parms.\n\nFrom-SVN: r23422", "tree": {"sha": "14694d5f0722e2598d195787ca208158791f38c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14694d5f0722e2598d195787ca208158791f38c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1a5ccf7e6174cbe245af105a75223a285927407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a5ccf7e6174cbe245af105a75223a285927407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a5ccf7e6174cbe245af105a75223a285927407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a5ccf7e6174cbe245af105a75223a285927407/comments", "author": null, "committer": null, "parents": [{"sha": "1d194eae1947775305d609896097d74039334b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d194eae1947775305d609896097d74039334b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d194eae1947775305d609896097d74039334b97"}], "stats": {"total": 124, "additions": 61, "deletions": 63}, "files": [{"sha": "64fa422843560b9d5bbe5fecc3e798196066a9df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a5ccf7e6174cbe245af105a75223a285927407/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a5ccf7e6174cbe245af105a75223a285927407/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1a5ccf7e6174cbe245af105a75223a285927407", "patch": "@@ -1,3 +1,8 @@\n+1998-10-29  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (push_template_decl_real): Generalize check for incorrect\n+\tnumber of template parms.\n+\n 1998-10-29  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (cc1plus): Put CXX_OBJS, and thence @extra_cxx_objs@,"}, {"sha": "71d080bde65125248317384f2811db5c622aeab6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 56, "deletions": 63, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a5ccf7e6174cbe245af105a75223a285927407/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a5ccf7e6174cbe245af105a75223a285927407/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e1a5ccf7e6174cbe245af105a75223a285927407", "patch": "@@ -2166,8 +2166,8 @@ push_template_decl_real (decl, is_friend)\n     }\n   else\n     {\n-      tree t;\n-      tree a;\n+      tree a, t, current, parms;\n+      int mem, i;\n \n       if (CLASSTYPE_TEMPLATE_INSTANTIATION (ctx))\n \tcp_error (\"must specialize `%#T' before defining member `%#D'\",\n@@ -2193,75 +2193,68 @@ push_template_decl_real (decl, is_friend)\n       else\n \ttmpl = DECL_TI_TEMPLATE (decl);\n       \n-      if (is_member_template (tmpl) || is_member_template_class (tmpl))\n+      if (is_member_template (tmpl)\n+\t  && DECL_FUNCTION_TEMPLATE_P (tmpl)\n+\t  && DECL_TEMPLATE_INFO (decl) && DECL_TI_ARGS (decl) \n+\t  && DECL_TEMPLATE_SPECIALIZATION (decl))\n \t{\n-\t  if (DECL_FUNCTION_TEMPLATE_P (tmpl)\n-\t      && DECL_TEMPLATE_INFO (decl) && DECL_TI_ARGS (decl) \n-\t      && DECL_TEMPLATE_SPECIALIZATION (decl))\n-\t    {\n-\t      tree new_tmpl;\n-\n-\t      /* The declaration is a specialization of a member\n-\t\t template, declared outside the class.  Therefore, the\n-\t\t innermost template arguments will be NULL, so we\n-\t\t replace them with the arguments determined by the\n-\t\t earlier call to check_explicit_specialization.  */\n-\t      args = DECL_TI_ARGS (decl);\n-\n-\t      new_tmpl \n-\t\t= build_template_decl (decl, current_template_parms);\n-\t      DECL_TEMPLATE_RESULT (new_tmpl) = decl;\n-\t      TREE_TYPE (new_tmpl) = TREE_TYPE (decl);\n-\t      DECL_TI_TEMPLATE (decl) = new_tmpl;\n-\t      SET_DECL_TEMPLATE_SPECIALIZATION (new_tmpl);\n-\t      DECL_TEMPLATE_INFO (new_tmpl) = \n-\t\tperm_tree_cons (tmpl, args, NULL_TREE);\n-\n-\t      register_specialization (new_tmpl, tmpl, args);\n-\t      return decl;\n-\t    }\n-\t  \n-\t  a = innermost_args (args);\n-\t  t = DECL_INNERMOST_TEMPLATE_PARMS (tmpl);\n-\t  if (TREE_VEC_LENGTH (t) != TREE_VEC_LENGTH (a))\n-\t    {\n-\t      cp_error (\"got %d template parameters for `%#D'\",\n-\t\t\tTREE_VEC_LENGTH (a), decl);\n-\t      cp_error (\"  but %d required\", TREE_VEC_LENGTH (t));\n-\t    }\n-\t  if (TMPL_ARGS_DEPTH (args) > 1)\n-\t    /* Get the template parameters for the enclosing template\n-\t       class.  */ \n-\t    a = TMPL_ARGS_LEVEL (args, TMPL_ARGS_DEPTH (args) - 1);\n-\t  else\n-\t    a = NULL_TREE;\n+\t  tree new_tmpl;\n+\n+\t  /* The declaration is a specialization of a member\n+\t     template, declared outside the class.  Therefore, the\n+\t     innermost template arguments will be NULL, so we\n+\t     replace them with the arguments determined by the\n+\t     earlier call to check_explicit_specialization.  */\n+\t  args = DECL_TI_ARGS (decl);\n+\n+\t  new_tmpl \n+\t    = build_template_decl (decl, current_template_parms);\n+\t  DECL_TEMPLATE_RESULT (new_tmpl) = decl;\n+\t  TREE_TYPE (new_tmpl) = TREE_TYPE (decl);\n+\t  DECL_TI_TEMPLATE (decl) = new_tmpl;\n+\t  SET_DECL_TEMPLATE_SPECIALIZATION (new_tmpl);\n+\t  DECL_TEMPLATE_INFO (new_tmpl) = \n+\t    perm_tree_cons (tmpl, args, NULL_TREE);\n+\n+\t  register_specialization (new_tmpl, tmpl, args);\n+\t  return decl;\n \t}\n-      else \n-\ta = innermost_args (args);\n \n-      t = NULL_TREE;\n+      /* Make sure the template headers we got make sense.  */\n \n-      if (CLASSTYPE_TEMPLATE_SPECIALIZATION (ctx))\n+      mem = (is_member_template (tmpl) || is_member_template_class (tmpl));\n+      parms = DECL_TEMPLATE_PARMS (tmpl);\n+      i = TMPL_PARMS_DEPTH (parms);\n+      if (TMPL_ARGS_DEPTH (args) != i)\n \t{\n-\t  /* When processing an inline member template of a\n-\t     specialized class, there is no CLASSTYPE_TI_SPEC_INFO.  */\n-\t  if (CLASSTYPE_TI_SPEC_INFO (ctx))\n-\t    t = TREE_VALUE (CLASSTYPE_TI_SPEC_INFO (ctx));\n+\t  cp_error (\"expected %d levels of template parms for `%#D', got %d\",\n+\t\t    i, decl, TMPL_ARGS_DEPTH (args));\n \t}\n-      else if (CLASSTYPE_TEMPLATE_INFO (ctx))\n-\tt = DECL_INNERMOST_TEMPLATE_PARMS (CLASSTYPE_TI_TEMPLATE (ctx));\n+      else\n+\tfor (current = decl; i > 0; --i, parms = TREE_CHAIN (parms))\n+\t  {\n+\t    a = TMPL_ARGS_LEVEL (args, i);\n+\t    t = INNERMOST_TEMPLATE_PARMS (parms);\n+\n+\t    if (TREE_VEC_LENGTH (t) != TREE_VEC_LENGTH (a))\n+\t      {\n+\t\tif (current == decl)\n+\t\t  cp_error (\"got %d template parameters for `%#D'\",\n+\t\t\t    TREE_VEC_LENGTH (a), decl);\n+\t\telse\n+\t\t  cp_error (\"got %d template parameters for `%#T'\",\n+\t\t\t    TREE_VEC_LENGTH (a), current);\n+\t\tcp_error (\"  but %d required\", TREE_VEC_LENGTH (t));\n+\t      }\n \n-      /* There should be template arguments if and only if there is a\n-\t template class.  */\n-      my_friendly_assert((a != NULL_TREE) == (t != NULL_TREE), 0);\n+\t    /* Perhaps we should also check that the parms are used in the\n+               appropriate qualifying scopes in the declarator?  */\n \n-      if (t != NULL_TREE \n-\t  && TREE_VEC_LENGTH (t) != TREE_VEC_LENGTH (a))\n-\t{\n-\t  cp_error (\"got %d template parameters for `%#D'\",\n-\t\t    TREE_VEC_LENGTH (a), decl);\n-\t  cp_error (\"  but `%#T' has %d\", ctx, TREE_VEC_LENGTH (t));\n-\t}\n+\t    if (current == decl)\n+\t      current = ctx;\n+\t    else\n+\t      current = TYPE_CONTEXT (current);\n+\t  }\n     }\n \n   DECL_TEMPLATE_RESULT (tmpl) = decl;"}]}