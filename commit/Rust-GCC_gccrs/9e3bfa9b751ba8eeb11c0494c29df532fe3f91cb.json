{"sha": "9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzYmZhOWI3NTFiYThlZWIxMWMwNDk0YzI5ZGY1MzJmZTNmOTFjYg==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2003-09-19T19:21:53Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2003-09-19T19:21:53Z"}, "message": "closure_fn0.c: Xfail mips, arm, strongarm, xscale.\n\n2003-09-19  Andreas Tobler  <a.tobler@schweiz.ch>\n\n\t* testsuite/libffi.call/closure_fn0.c: Xfail mips, arm,\n\tstrongarm, xscale. Cleanup whitespaces.\n\t* testsuite/libffi.call/closure_fn1.c: Likewise.\n\t* testsuite/libffi.call/closure_fn2.c: Likewise.\n\t* testsuite/libffi.call/closure_fn3.c: Likewise.\n\t* testsuite/libffi.call/cls_12byte.c: Likewise.\n\t* testsuite/libffi.call/cls_16byte.c: Likewise.\n\t* testsuite/libffi.call/cls_1_1byte.c: Likewise.\n\t* testsuite/libffi.call/cls_20byte.c: Likewise.\n\t* testsuite/libffi.call/cls_24byte.c: Likewise.\n\t* testsuite/libffi.call/cls_2byte.c: Likewise.\n\t* testsuite/libffi.call/cls_3_1byte.c: Likewise.\n\t* testsuite/libffi.call/cls_3byte1.c: Likewise.\n\t* testsuite/libffi.call/cls_3byte2.c: Likewise.\n\t* testsuite/libffi.call/cls_4_1byte.c: Likewise.\n\t* testsuite/libffi.call/cls_4byte.c: Likewise.\n\t* testsuite/libffi.call/cls_5byte.c: Likewise.\n\t* testsuite/libffi.call/cls_6byte.c: Likewise.\n\t* testsuite/libffi.call/cls_7byte.c: Likewise.\n\t* testsuite/libffi.call/cls_8byte.c: Likewise.\n\t* testsuite/libffi.call/cls_double.c: Likewise.\n\t* testsuite/libffi.call/cls_float.c: Likewise.\n\t* testsuite/libffi.call/cls_uchar.c: Likewise.\n\t* testsuite/libffi.call/cls_uint.c: Likewise.\n\t* testsuite/libffi.call/cls_ulonglong.c: Likewise.\n\t* testsuite/libffi.call/cls_ushort.c: Likewise.\n\t* testsuite/libffi.call/nested_struct.c: Likewise.\n\t* testsuite/libffi.call/nested_struct1.c: Likewise.\n\t* testsuite/libffi.call/problem1.c: Likewise.\n\t* testsuite/libffi.special/unwindtest.cc: Likewise.\n\t* testsuite/libffi.call/pyobjc-tc.c: Cleanup whitespaces.\n\nFrom-SVN: r71584", "tree": {"sha": "50047fa5abbdabba0a9bfd84d3caee76ba77604b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50047fa5abbdabba0a9bfd84d3caee76ba77604b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/comments", "author": null, "committer": null, "parents": [{"sha": "e08737dc0ea1175988212f3cb36fec6d4b948bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08737dc0ea1175988212f3cb36fec6d4b948bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08737dc0ea1175988212f3cb36fec6d4b948bfb"}], "stats": {"total": 732, "additions": 383, "deletions": 349}, "files": [{"sha": "d505dcc6b92e4ad6fe160bf12d6b157fe5981f78", "filename": "libffi/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -1,3 +1,37 @@\n+2003-09-19  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* testsuite/libffi.call/closure_fn0.c: Xfail mips, arm,\n+\tstrongarm, xscale. Cleanup whitespaces.\n+\t* testsuite/libffi.call/closure_fn1.c: Likewise.\n+\t* testsuite/libffi.call/closure_fn2.c: Likewise.\n+\t* testsuite/libffi.call/closure_fn3.c: Likewise.\n+\t* testsuite/libffi.call/cls_12byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_16byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_1_1byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_20byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_24byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_2byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_3_1byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_3byte1.c: Likewise.\n+\t* testsuite/libffi.call/cls_3byte2.c: Likewise.\n+\t* testsuite/libffi.call/cls_4_1byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_4byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_5byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_6byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_7byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_8byte.c: Likewise.\n+\t* testsuite/libffi.call/cls_double.c: Likewise.\n+\t* testsuite/libffi.call/cls_float.c: Likewise.\n+\t* testsuite/libffi.call/cls_uchar.c: Likewise.\n+\t* testsuite/libffi.call/cls_uint.c: Likewise.\n+\t* testsuite/libffi.call/cls_ulonglong.c: Likewise.\n+\t* testsuite/libffi.call/cls_ushort.c: Likewise.\n+\t* testsuite/libffi.call/nested_struct.c: Likewise.\n+\t* testsuite/libffi.call/nested_struct1.c: Likewise.\n+\t* testsuite/libffi.call/problem1.c: Likewise.\n+\t* testsuite/libffi.special/unwindtest.cc: Likewise.\n+\t* testsuite/libffi.call/pyobjc-tc.c: Cleanup whitespaces.\n+\n 2003-09-18  David Edelsohn  <edelsohn@gnu.org>\n \n \t* src/powerpc/aix.S: Cleanup whitespaces."}, {"sha": "fd6593c644917c312488ffb091947e68544185df", "filename": "libffi/testsuite/libffi.call/closure_fn0.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn0.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -1,12 +1,12 @@\n /* Area:\tclosure_call\n    Purpose:\tCheck multiple values passing from different type.\n-\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC \n+\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC\n \t\tDarwin.\n    Limitations:\tnone.\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n-\t\n-/* { dg-do run } */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void\n@@ -24,31 +24,31 @@ closure_test_fn0(ffi_cif* cif,void* resp,void** args, void* userdata)\n     (int)(*(int *)args[14]) +  *(int *)args[15] + (int)(long)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n-\t (int)*(unsigned long long *)args[0], (int)(*(int *)args[1]), \n+\t (int)*(unsigned long long *)args[0], (int)(*(int *)args[1]),\n \t (int)(*(unsigned long long *)args[2]),\n-\t (int)*(int *)args[3], (int)(*(signed short *)args[4]), \n+\t (int)*(int *)args[3], (int)(*(signed short *)args[4]),\n \t (int)(*(unsigned long long *)args[5]),\n-\t (int)*(int *)args[6], (int)(*(int *)args[7]), \n+\t (int)*(int *)args[6], (int)(*(int *)args[7]),\n \t (int)(*(double *)args[8]), (int)*(int *)args[9],\n \t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n-\t (int)*(int *)args[12], (int)(*(int *)args[13]), \n+\t (int)*(int *)args[12], (int)(*(int *)args[13]),\n \t (int)(*(int *)args[14]),*(int *)args[15],\n \t (int)(long)userdata, (int)*(ffi_arg *)resp);\n-  \n+\n }\n \n-typedef int (*closure_test_type0)(unsigned long long, int, unsigned long long, \n-\t\t\t\t  int, signed short, unsigned long long, int, \n-\t\t\t\t  int, double, int, int, float, int, int, \n+typedef int (*closure_test_type0)(unsigned long long, int, unsigned long long,\n+\t\t\t\t  int, signed short, unsigned long long, int,\n+\t\t\t\t  int, double, int, int, float, int, int,\n \t\t\t\t  int, int);\n \n int main (void)\n-{ \n+{\n   ffi_cif cif;\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[17];\n-  \n+\n   cl_arg_types[0] = &ffi_type_uint64;\n   cl_arg_types[1] = &ffi_type_uint;\n   cl_arg_types[2] = &ffi_type_uint64;\n@@ -65,17 +65,17 @@ int main (void)\n   cl_arg_types[13] = &ffi_type_uint;\n   cl_arg_types[14] = &ffi_type_uint;\n   cl_arg_types[15] = &ffi_type_uint;\n-  cl_arg_types[16] = NULL;   \n-  \n+  cl_arg_types[16] = NULL;\n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 16,\n \t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, closure_test_fn0,\n \t\t\t (void *) 3 /* userdata */) == FFI_OK);\n-     \n+\n   (*((closure_test_type0)pcl))\n-\t(1LL, 2, 3LL, 4, 127, 429LL, 7, 8, 9.5, 10, 11, 12, 13, \n+\t(1LL, 2, 3LL, 4, 127, 429LL, 7, 8, 9.5, 10, 11, 12, 13,\n \t 19, 21, 1);\n   /* { dg-output \"1 2 3 4 127 429 7 8 9 10 11 12 13 19 21 1 3: 680\" } */\n      exit(0);"}, {"sha": "83734783ee16e64acb4af10202bab19dbc77d53e", "filename": "libffi/testsuite/libffi.call/closure_fn1.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn1.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -1,30 +1,30 @@\n /* Area:\tclosure_call.\n    Purpose:\tCheck multiple values passing from different type.\n-\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC \n+\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC\n \t\tDarwin.\n    Limitations:\tnone.\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n-static void closure_test_fn1(ffi_cif* cif,void* resp,void** args, \n+static void closure_test_fn1(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n {\n   *(ffi_arg*)resp =\n-    (int)*(float *)args[0] +(int)(*(float *)args[1]) + \n+    (int)*(float *)args[0] +(int)(*(float *)args[1]) +\n     (int)(*(float *)args[2]) + (int)*(float *)args[3] +\n     (int)(*(signed short *)args[4]) + (int)(*(float *)args[5]) +\n-    (int)*(float *)args[6] + (int)(*(int *)args[7]) + \n-    (int)(*(double*)args[8]) + (int)*(int *)args[9] + \n-    (int)(*(int *)args[10]) + (int)(*(float *)args[11]) + \n-    (int)*(int *)args[12] + (int)(*(int *)args[13]) + \n+    (int)*(float *)args[6] + (int)(*(int *)args[7]) +\n+    (int)(*(double*)args[8]) + (int)*(int *)args[9] +\n+    (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n+    (int)*(int *)args[12] + (int)(*(int *)args[13]) +\n     (int)(*(int *)args[14]) + *(int *)args[15] + (int)(long)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n-\t (int)*(float *)args[0], (int)(*(float *)args[1]), \n-\t (int)(*(float *)args[2]), (int)*(float *)args[3], \n+\t (int)*(float *)args[0], (int)(*(float *)args[1]),\n+\t (int)(*(float *)args[2]), (int)*(float *)args[3],\n \t (int)(*(signed short *)args[4]), (int)(*(float *)args[5]),\n \t (int)*(float *)args[6], (int)(*(int *)args[7]),\n \t (int)(*(double *)args[8]), (int)*(int *)args[9],\n@@ -34,7 +34,7 @@ static void closure_test_fn1(ffi_cif* cif,void* resp,void** args,\n \t (int)(long)userdata, (int)*(ffi_arg *)resp);\n }\n \n-typedef int (*closure_test_type1)(float, float, float, float, signed short, \n+typedef int (*closure_test_type1)(float, float, float, float, signed short,\n \t\t\t\t  float, float, int, double, int, int, float,\n \t\t\t\t  int, int, int, int);\n int main (void)\n@@ -43,7 +43,7 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[17];\n-  \n+\n   cl_arg_types[0] = &ffi_type_float;\n   cl_arg_types[1] = &ffi_type_float;\n   cl_arg_types[2] = &ffi_type_float;\n@@ -61,14 +61,14 @@ int main (void)\n   cl_arg_types[14] = &ffi_type_uint;\n   cl_arg_types[15] = &ffi_type_uint;\n   cl_arg_types[16] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 16,\n \t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, closure_test_fn1,\n \t\t\t (void *) 3 /* userdata */)  == FFI_OK);\n-  \n+\n   (*((closure_test_type1)pcl))\n \t(1.1, 2.2, 3.3, 4.4, 127, 5.5, 6.6, 8, 9, 10, 11, 12.0, 13,\n \t 19, 21, 1);"}, {"sha": "8ca5ad7bd63d6d35724eeaebb9bde5cd5988910e", "filename": "libffi/testsuite/libffi.call/closure_fn2.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn2.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -1,36 +1,36 @@\n /* Area:\tclosure_call\n    Purpose:\tCheck multiple values passing from different type.\n-\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC \n+\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC\n \t\tDarwin.\n    Limitations:\tnone.\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n-static void closure_test_fn2(ffi_cif* cif,void* resp,void** args, \n+static void closure_test_fn2(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n {\n   *(ffi_arg*)resp =\n-    (int)*(double *)args[0] +(int)(*(double *)args[1]) + \n+    (int)*(double *)args[0] +(int)(*(double *)args[1]) +\n     (int)(*(double *)args[2]) + (int)*(double *)args[3] +\n     (int)(*(signed short *)args[4]) + (int)(*(double *)args[5]) +\n-    (int)*(double *)args[6] + (int)(*(int *)args[7]) + \n+    (int)*(double *)args[6] + (int)(*(int *)args[7]) +\n     (int)(*(double *)args[8]) + (int)*(int *)args[9] +\n-    (int)(*(int *)args[10]) + (int)(*(float *)args[11]) + \n+    (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n     (int)*(int *)args[12] + (int)(*(float *)args[13]) +\n     (int)(*(int *)args[14]) + *(int *)args[15] + (int)(long)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n-\t (int)*(double *)args[0], (int)(*(double *)args[1]), \n-\t (int)(*(double *)args[2]), (int)*(double *)args[3], \n+\t (int)*(double *)args[0], (int)(*(double *)args[1]),\n+\t (int)(*(double *)args[2]), (int)*(double *)args[3],\n \t (int)(*(signed short *)args[4]), (int)(*(double *)args[5]),\n-\t (int)*(double *)args[6], (int)(*(int *)args[7]), \n-\t (int)(*(double*)args[8]), (int)*(int *)args[9], \n+\t (int)*(double *)args[6], (int)(*(int *)args[7]),\n+\t (int)(*(double*)args[8]), (int)*(int *)args[9],\n \t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n-\t (int)*(int *)args[12], (int)(*(float *)args[13]), \n-\t (int)(*(int *)args[14]), *(int *)args[15], (int)(long)userdata, \n+\t (int)*(int *)args[12], (int)(*(float *)args[13]),\n+\t (int)(*(int *)args[14]), *(int *)args[15], (int)(long)userdata,\n \t (int)*(ffi_arg *)resp);\n }\n \n@@ -44,7 +44,7 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[17];\n-  \n+\n   cl_arg_types[0] = &ffi_type_double;\n   cl_arg_types[1] = &ffi_type_double;\n   cl_arg_types[2] = &ffi_type_double;\n@@ -62,17 +62,17 @@ int main (void)\n   cl_arg_types[14] = &ffi_type_uint;\n   cl_arg_types[15] = &ffi_type_uint;\n   cl_arg_types[16] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 16,\n \t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, closure_test_fn2,\n \t\t\t (void *) 3 /* userdata */) == FFI_OK);\n-  \n+\n   (*((closure_test_type2)pcl))\n \t(1, 2, 3, 4, 127, 5, 6, 8, 9, 10, 11, 12.0, 13,\n \t 19.0, 21, 1);\n   /* { dg-output \"1 2 3 4 127 5 6 8 9 10 11 12 13 19 21 1 3: 255\" } */\n-  exit(0);  \n+  exit(0);\n }"}, {"sha": "27b964cd6917c2efa0fbb5dc352663d49859eff6", "filename": "libffi/testsuite/libffi.call/closure_fn3.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn3.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -1,38 +1,38 @@\n /* Area:\tclosure_call\n    Purpose:\tCheck multiple values passing from different type.\n-\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC \n+\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC\n \t\tDarwin.\n    Limitations:\tnone.\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void closure_test_fn3(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n  {\n    *(ffi_arg*)resp =\n-     (int)*(float *)args[0] +(int)(*(float *)args[1]) + \n+     (int)*(float *)args[0] +(int)(*(float *)args[1]) +\n      (int)(*(float *)args[2]) + (int)*(float *)args[3] +\n      (int)(*(float *)args[4]) + (int)(*(float *)args[5]) +\n-     (int)*(float *)args[6] + (int)(*(float *)args[7]) + \n+     (int)*(float *)args[6] + (int)(*(float *)args[7]) +\n      (int)(*(double *)args[8]) + (int)*(int *)args[9] +\n-     (int)(*(float *)args[10]) + (int)(*(float *)args[11]) + \n+     (int)(*(float *)args[10]) + (int)(*(float *)args[11]) +\n      (int)*(int *)args[12] + (int)(*(float *)args[13]) +\n      (int)(*(float *)args[14]) +  *(int *)args[15] + (int)(long)userdata;\n \n    printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n-\t  (int)*(float *)args[0], (int)(*(float *)args[1]), \n-\t  (int)(*(float *)args[2]), (int)*(float *)args[3], \n+\t  (int)*(float *)args[0], (int)(*(float *)args[1]),\n+\t  (int)(*(float *)args[2]), (int)*(float *)args[3],\n \t  (int)(*(float *)args[4]), (int)(*(float *)args[5]),\n-\t  (int)*(float *)args[6], (int)(*(float *)args[7]), \n-\t  (int)(*(double *)args[8]), (int)*(int *)args[9], \n+\t  (int)*(float *)args[6], (int)(*(float *)args[7]),\n+\t  (int)(*(double *)args[8]), (int)*(int *)args[9],\n \t  (int)(*(float *)args[10]), (int)(*(float *)args[11]),\n-\t  (int)*(int *)args[12], (int)(*(float *)args[13]), \n+\t  (int)*(int *)args[12], (int)(*(float *)args[13]),\n \t  (int)(*(float *)args[14]), *(int *)args[15], (int)(long)userdata,\n \t  (int)*(ffi_arg *)resp);\n-   \n+\n  }\n \n typedef int (*closure_test_type3)(float, float, float, float, float, float,\n@@ -45,8 +45,8 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[17];\n-  \n-  \n+\n+\n   cl_arg_types[0] = &ffi_type_float;\n   cl_arg_types[1] = &ffi_type_float;\n   cl_arg_types[2] = &ffi_type_float;\n@@ -64,17 +64,17 @@ int main (void)\n   cl_arg_types[14] = &ffi_type_float;\n   cl_arg_types[15] = &ffi_type_uint;\n   cl_arg_types[16] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 16,\n \t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, closure_test_fn3,\n \t\t\t (void *) 3 /* userdata */)  == FFI_OK);\n-  \n+\n   (*((closure_test_type3)pcl))\n \t(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9, 10, 11.11, 12.0, 13,\n \t 19.19, 21.21, 1);\n   /* { dg-output \"1 2 3 4 5 6 7 8 9 10 11 12 13 19 21 1 3: 135\" } */\n-  exit(0);  \n+  exit(0);\n }"}, {"sha": "d44a3344e08eb92c34510bad953d589d22fcf95f", "filename": "libffi/testsuite/libffi.call/cls_12byte.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_12byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_12byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_12byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,7 +4,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_12byte {\n@@ -29,12 +29,12 @@ cls_struct_12byte cls_struct_12byte_fn(struct cls_struct_12byte b1,\n }\n \n static void cls_struct_12byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n+{\n   struct cls_struct_12byte b1, b2;\n-  \n+\n   b1 = *(struct cls_struct_12byte*)(args[0]);\n   b2 = *(struct cls_struct_12byte*)(args[1]);\n-  \n+\n   *(cls_struct_12byte*)resp = cls_struct_12byte_fn(b1, b2);\n }\n \n@@ -52,23 +52,23 @@ int main (void)\n   cls_struct_type.alignment = 0;\n   cls_struct_type.type = FFI_TYPE_STRUCT;\n   cls_struct_type.elements = cls_struct_fields;\n-  \n+\n   struct cls_struct_12byte h_dbl = { 7, 4, 9 };\n   struct cls_struct_12byte j_dbl = { 1, 5, 3 };\n   struct cls_struct_12byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uint32;\n   cls_struct_fields[1] = &ffi_type_uint32;\n   cls_struct_fields[2] = &ffi_type_uint32;\n   cls_struct_fields[3] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n-  \n+\n   args_dbl[0] = &h_dbl;\n   args_dbl[1] = &j_dbl;\n   args_dbl[2] = NULL;\n@@ -78,14 +78,14 @@ int main (void)\n   CHECK( res_dbl.a == (h_dbl.a + j_dbl.a));\n   CHECK( res_dbl.b == (h_dbl.b + j_dbl.b));\n   CHECK( res_dbl.c == (h_dbl.c + j_dbl.c));\n- \n+\n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_12byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_12byte(*)(cls_struct_12byte, cls_struct_12byte))(pcl))(h_dbl, j_dbl);\n   /* { dg-output \"\\n7 4 9 1 5 3: 8 9 12\" } */\n   CHECK( res_dbl.a == (h_dbl.a + j_dbl.a));\n   CHECK( res_dbl.b == (h_dbl.b + j_dbl.b));\n   CHECK( res_dbl.c == (h_dbl.c + j_dbl.c));\n \n   exit(0);\n-}  \n+}"}, {"sha": "2481196402a5e3ebf8251d125b42eea3703772c5", "filename": "libffi/testsuite/libffi.call/cls_16byte.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_16byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_16byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_16byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_16byte {\n@@ -30,12 +30,12 @@ cls_struct_16byte cls_struct_16byte_fn(struct cls_struct_16byte b1,\n }\n \n static void cls_struct_16byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n+{\n   struct cls_struct_16byte b1, b2;\n-  \n+\n   b1 = *(struct cls_struct_16byte*)(args[0]);\n   b2 = *(struct cls_struct_16byte*)(args[1]);\n-  \n+\n   *(cls_struct_16byte*)resp = cls_struct_16byte_fn(b1, b2);\n }\n \n@@ -53,23 +53,23 @@ int main (void)\n   cls_struct_type.alignment = 0;\n   cls_struct_type.type = FFI_TYPE_STRUCT;\n   cls_struct_type.elements = cls_struct_fields;\n-  \n+\n   struct cls_struct_16byte h_dbl = { 7, 8.0, 9 };\n   struct cls_struct_16byte j_dbl = { 1, 9.0, 3 };\n   struct cls_struct_16byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uint32;\n   cls_struct_fields[1] = &ffi_type_double;\n   cls_struct_fields[2] = &ffi_type_uint32;\n   cls_struct_fields[3] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n-  \n+\n   args_dbl[0] = &h_dbl;\n   args_dbl[1] = &j_dbl;\n   args_dbl[2] = NULL;\n@@ -79,14 +79,14 @@ int main (void)\n   CHECK( res_dbl.a == (h_dbl.a + j_dbl.a));\n   CHECK( res_dbl.b == (h_dbl.b + j_dbl.b));\n   CHECK( res_dbl.c == (h_dbl.c + j_dbl.c));\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_16byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_16byte(*)(cls_struct_16byte, cls_struct_16byte))(pcl))(h_dbl, j_dbl);\n   /* { dg-output \"\\n7 8 9 1 9 3: 8 17 12\" } */\n   CHECK( res_dbl.a == (h_dbl.a + j_dbl.a));\n   CHECK( res_dbl.b == (h_dbl.b + j_dbl.b));\n   CHECK( res_dbl.c == (h_dbl.c + j_dbl.c));\n \n   exit(0);\n-}  \n+}"}, {"sha": "11defc80e97ca89199e8631a199aab7d4937e2f4", "filename": "libffi/testsuite/libffi.call/cls_1_1byte.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_1_1byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_1_1byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_1_1byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -6,7 +6,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030902\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_1_1byte {\n@@ -25,10 +25,10 @@ cls_struct_1_1byte cls_struct_1_1byte_fn(struct cls_struct_1_1byte a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_1_1byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_1_1byte a1, a2;\n \n   a1 = *(struct cls_struct_1_1byte*)(args[0]);\n@@ -55,15 +55,15 @@ int main (void)\n   struct cls_struct_1_1byte g_dbl = { 12 };\n   struct cls_struct_1_1byte f_dbl = { 178 };\n   struct cls_struct_1_1byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uchar;\n   cls_struct_fields[1] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -75,7 +75,7 @@ int main (void)\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_1_1byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_1_1byte(*)(cls_struct_1_1byte, cls_struct_1_1byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n12 178: 190\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "d81df4d5c383b3f1272f060887a52ae297f8998b", "filename": "libffi/testsuite/libffi.call/cls_20byte.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_20byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_20byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_20byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_20byte {\n@@ -22,20 +22,20 @@ cls_struct_20byte cls_struct_20byte_fn(struct cls_struct_20byte a1,\n   result.a = a1.a + a2.a;\n   result.b = a1.b + a2.b;\n   result.c = a1.c + a2.c;\n-  \n+\n   printf(\"%g %g %d %g %g %d: %g %g %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c,\n \t result.a, result.b, result.c);\n   return result;\n }\n \n-static void \n+static void\n cls_struct_20byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n+{\n   struct cls_struct_20byte a1, a2;\n-  \n+\n   a1 = *(struct cls_struct_20byte*)(args[0]);\n   a2 = *(struct cls_struct_20byte*)(args[1]);\n-  \n+\n   *(cls_struct_20byte*)resp = cls_struct_20byte_fn(a1, a2);\n }\n \n@@ -53,21 +53,21 @@ int main (void)\n   cls_struct_type.alignment = 0;\n   cls_struct_type.type = FFI_TYPE_STRUCT;\n   cls_struct_type.elements = cls_struct_fields;\n-  \n+\n   struct cls_struct_20byte g_dbl = { 1.0, 2.0, 3 };\n   struct cls_struct_20byte f_dbl = { 4.0, 5.0, 7 };\n   struct cls_struct_20byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_double;\n   cls_struct_fields[1] = &ffi_type_double;\n   cls_struct_fields[2] = &ffi_type_uint32;\n   cls_struct_fields[3] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -81,12 +81,12 @@ int main (void)\n   CHECK( res_dbl.c == (g_dbl.c + f_dbl.c));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_20byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_20byte(*)(cls_struct_20byte, cls_struct_20byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n1 2 3 4 5 7: 5 7 10\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));\n   CHECK( res_dbl.b == (g_dbl.b + f_dbl.b));\n   CHECK( res_dbl.c == (g_dbl.c + f_dbl.c));\n \n   exit(0);\n-} \n+}"}, {"sha": "6c86115e41c9fe26c77d45683ac1a70de338048c", "filename": "libffi/testsuite/libffi.call/cls_24byte.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_24byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_24byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_24byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_24byte {\n@@ -27,7 +27,7 @@ cls_struct_24byte cls_struct_24byte_fn(struct cls_struct_24byte b0,\n   result.c = b0.c + b1.c + b2.c + b3.c;\n   result.d = b0.d + b1.d + b2.d + b3.d;\n \n-  printf(\"%g %g %d %g %g %g %d %g %g %g %d %g %g %g %d %g: %g %g %d %g\\n\", \n+  printf(\"%g %g %d %g %g %g %d %g %g %g %d %g %g %g %d %g: %g %g %d %g\\n\",\n \t b0.a, b0.b, b0.c, b0.d,\n \t b1.a, b1.b, b1.c, b1.d,\n \t b2.a, b2.b, b2.c, b2.d,\n@@ -37,16 +37,16 @@ cls_struct_24byte cls_struct_24byte_fn(struct cls_struct_24byte b0,\n   return result;\n }\n \n-static void \n+static void\n cls_struct_24byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n+{\n   struct cls_struct_24byte b0, b1, b2, b3;\n-  \n+\n   b0 = *(struct cls_struct_24byte*)(args[0]);\n   b1 = *(struct cls_struct_24byte*)(args[1]);\n   b2 = *(struct cls_struct_24byte*)(args[2]);\n   b3 = *(struct cls_struct_24byte*)(args[3]);\n-  \n+\n   *(cls_struct_24byte*)resp = cls_struct_24byte_fn(b0, b1, b2, b3);\n }\n \n@@ -59,31 +59,31 @@ int main (void)\n   ffi_type* cls_struct_fields[5];\n   ffi_type cls_struct_type;\n   ffi_type* dbl_arg_types[5];\n-  \n+\n   cls_struct_type.size = 0;\n   cls_struct_type.alignment = 0;\n   cls_struct_type.type = FFI_TYPE_STRUCT;\n   cls_struct_type.elements = cls_struct_fields;\n-  \n+\n   struct cls_struct_24byte e_dbl = { 9.0, 2.0, 6, 5.0 };\n   struct cls_struct_24byte f_dbl = { 1.0, 2.0, 3, 7.0 };\n   struct cls_struct_24byte g_dbl = { 4.0, 5.0, 7, 9.0 };\n   struct cls_struct_24byte h_dbl = { 8.0, 6.0, 1, 4.0 };\n   struct cls_struct_24byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_double;\n   cls_struct_fields[1] = &ffi_type_double;\n   cls_struct_fields[2] = &ffi_type_uint32;\n   cls_struct_fields[3] = &ffi_type_float;\n   cls_struct_fields[4] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = &cls_struct_type;\n   dbl_arg_types[3] = &cls_struct_type;\n   dbl_arg_types[4] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &e_dbl;\n@@ -100,10 +100,10 @@ int main (void)\n   CHECK( res_dbl.d == (e_dbl.d + f_dbl.d + g_dbl.d + h_dbl.d));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_24byte_gn, NULL) == FFI_OK);\n-  \n-  res_dbl = ((cls_struct_24byte(*)(cls_struct_24byte, \n+\n+  res_dbl = ((cls_struct_24byte(*)(cls_struct_24byte,\n+\t\t\t\t     cls_struct_24byte,\n \t\t\t\t     cls_struct_24byte,\n-\t\t\t\t     cls_struct_24byte, \n \t\t\t\t     cls_struct_24byte))\n \t     (pcl))(e_dbl, f_dbl, g_dbl, h_dbl);\n   /* { dg-output \"\\n9 2 6 5 1 2 3 7 4 5 7 9 8 6 1 9: 22 15 17 25\" } */\n@@ -112,4 +112,4 @@ int main (void)\n   CHECK( res_dbl.c == (e_dbl.c + f_dbl.c + g_dbl.c + h_dbl.c));\n   CHECK( res_dbl.d == (e_dbl.d + f_dbl.d + g_dbl.d + h_dbl.d));\n   exit(0);\n-}   \n+}"}, {"sha": "2198ee821cbbf0826e75b781e74f3da1e908d19b", "filename": "libffi/testsuite/libffi.call/cls_2byte.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_2byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_2byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_2byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -6,7 +6,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_2byte {\n@@ -27,10 +27,10 @@ cls_struct_2byte cls_struct_2byte_fn(struct cls_struct_2byte a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_2byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_2byte a1, a2;\n \n   a1 = *(struct cls_struct_2byte*)(args[0]);\n@@ -57,16 +57,16 @@ int main (void)\n   struct cls_struct_2byte g_dbl = { 12, 127 };\n   struct cls_struct_2byte f_dbl = { 1, 13 };\n   struct cls_struct_2byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uchar;\n   cls_struct_fields[1] = &ffi_type_uchar;\n   cls_struct_fields[2] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -79,7 +79,7 @@ int main (void)\n   CHECK( res_dbl.b == (g_dbl.b + f_dbl.b));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_2byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_2byte(*)(cls_struct_2byte, cls_struct_2byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n12 127 1 13: 13 140\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "e4bda2fa026e1b5a6dae1ac5fbfac5d9549d386e", "filename": "libffi/testsuite/libffi.call/cls_3_1byte.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3_1byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3_1byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3_1byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -6,7 +6,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030902\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_3_1byte {\n@@ -31,10 +31,10 @@ cls_struct_3_1byte cls_struct_3_1byte_fn(struct cls_struct_3_1byte a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_3_1byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_3_1byte a1, a2;\n \n   a1 = *(struct cls_struct_3_1byte*)(args[0]);\n@@ -61,17 +61,17 @@ int main (void)\n   struct cls_struct_3_1byte g_dbl = { 12, 13, 14 };\n   struct cls_struct_3_1byte f_dbl = { 178, 179, 180 };\n   struct cls_struct_3_1byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uchar;\n   cls_struct_fields[1] = &ffi_type_uchar;\n   cls_struct_fields[2] = &ffi_type_uchar;\n   cls_struct_fields[3] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -86,7 +86,7 @@ int main (void)\n \n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_3_1byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_3_1byte(*)(cls_struct_3_1byte, cls_struct_3_1byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n12 13 14 178 179 180: 190 192 194\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "b03fa86cd70b120d142549c6aea7d9fd6391563b", "filename": "libffi/testsuite/libffi.call/cls_3byte1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3byte1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3byte1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3byte1.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -6,7 +6,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_3byte {\n@@ -27,10 +27,10 @@ cls_struct_3byte cls_struct_3byte_fn(struct cls_struct_3byte a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_3byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_3byte a1, a2;\n \n   a1 = *(struct cls_struct_3byte*)(args[0]);\n@@ -57,16 +57,16 @@ int main (void)\n   struct cls_struct_3byte g_dbl = { 12, 119 };\n   struct cls_struct_3byte f_dbl = { 1, 15 };\n   struct cls_struct_3byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_ushort;\n   cls_struct_fields[1] = &ffi_type_uchar;\n   cls_struct_fields[2] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -79,7 +79,7 @@ int main (void)\n   CHECK( res_dbl.b == (g_dbl.b + f_dbl.b));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_3byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_3byte(*)(cls_struct_3byte, cls_struct_3byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n12 119 1 15: 13 134\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "d750869bc4fc748b48e260c3a0825d7d6e985e68", "filename": "libffi/testsuite/libffi.call/cls_3byte2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3byte2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3byte2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_3byte2.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -6,7 +6,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_3byte_1 {\n@@ -27,10 +27,10 @@ cls_struct_3byte_1 cls_struct_3byte_fn1(struct cls_struct_3byte_1 a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_3byte_gn1(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_3byte_1 a1, a2;\n \n   a1 = *(struct cls_struct_3byte_1*)(args[0]);\n@@ -57,16 +57,16 @@ int main (void)\n   struct cls_struct_3byte_1 g_dbl = { 15, 125 };\n   struct cls_struct_3byte_1 f_dbl = { 9, 19 };\n   struct cls_struct_3byte_1 res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uchar;\n   cls_struct_fields[1] = &ffi_type_ushort;\n   cls_struct_fields[2] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -79,7 +79,7 @@ int main (void)\n   CHECK( res_dbl.b == (g_dbl.b + f_dbl.b));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_3byte_gn1, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_3byte_1(*)(cls_struct_3byte_1, cls_struct_3byte_1))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n15 125 9 19: 24 144\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "195d8cc6cdda1812a596a73ab0a701398546e614", "filename": "libffi/testsuite/libffi.call/cls_4_1byte.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_4_1byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_4_1byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_4_1byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -6,7 +6,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030902\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_4_1byte {\n@@ -33,10 +33,10 @@ cls_struct_4_1byte cls_struct_4_1byte_fn(struct cls_struct_4_1byte a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_4_1byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_4_1byte a1, a2;\n \n   a1 = *(struct cls_struct_4_1byte*)(args[0]);\n@@ -63,18 +63,18 @@ int main (void)\n   struct cls_struct_4_1byte g_dbl = { 12, 13, 14, 15 };\n   struct cls_struct_4_1byte f_dbl = { 178, 179, 180, 181 };\n   struct cls_struct_4_1byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uchar;\n   cls_struct_fields[1] = &ffi_type_uchar;\n   cls_struct_fields[2] = &ffi_type_uchar;\n   cls_struct_fields[3] = &ffi_type_uchar;\n   cls_struct_fields[4] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -89,7 +89,7 @@ int main (void)\n   CHECK( res_dbl.d == (g_dbl.d + f_dbl.d));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_4_1byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_4_1byte(*)(cls_struct_4_1byte, cls_struct_4_1byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n12 13 14 15 178 179 180 181: 190 192 194 196\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "8eb9ad958007819f31907e802beea336fe94d259", "filename": "libffi/testsuite/libffi.call/cls_4byte.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_4byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_4byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_4byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n \n #include \"ffitest.h\"\n \n@@ -27,10 +27,10 @@ cls_struct_4byte cls_struct_4byte_fn(struct cls_struct_4byte a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_4byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_4byte a1, a2;\n \n   a1 = *(struct cls_struct_4byte*)(args[0]);\n@@ -57,16 +57,16 @@ int main (void)\n   struct cls_struct_4byte g_dbl = { 127, 120 };\n   struct cls_struct_4byte f_dbl = { 12, 128 };\n   struct cls_struct_4byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_ushort;\n   cls_struct_fields[1] = &ffi_type_ushort;\n   cls_struct_fields[2] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -79,7 +79,7 @@ int main (void)\n   CHECK( res_dbl.b == (g_dbl.b + f_dbl.b));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_4byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_4byte(*)(cls_struct_4byte, cls_struct_4byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n127 120 12 128: 139 248\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "821d653fd292e3296b6f8adecbcceeeea1aad1fb", "filename": "libffi/testsuite/libffi.call/cls_5byte.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_5byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_5byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_5byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_5byte {\n@@ -24,16 +24,16 @@ cls_struct_5byte cls_struct_5byte_fn(struct cls_struct_5byte a1,\n   result.c = a1.c + a2.c;\n \n   printf(\"%d %d %d %d %d %d: %d %d %d\\n\", a1.a, a1.b, a1.c,\n-\t a2.a, a2.b, a2.c, \n+\t a2.a, a2.b, a2.c,\n \t result.a, result.b, result.c);\n \n   return  result;\n }\n \n-static void \n+static void\n cls_struct_5byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_5byte a1, a2;\n \n   a1 = *(struct cls_struct_5byte*)(args[0]);\n@@ -60,17 +60,17 @@ int main (void)\n   struct cls_struct_5byte g_dbl = { 127, 120, 1 };\n   struct cls_struct_5byte f_dbl = { 12, 128, 9 };\n   struct cls_struct_5byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_ushort;\n   cls_struct_fields[1] = &ffi_type_ushort;\n   cls_struct_fields[2] = &ffi_type_uchar;\n   cls_struct_fields[3] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -84,7 +84,7 @@ int main (void)\n   CHECK( res_dbl.c == (g_dbl.c + f_dbl.c));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_5byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_5byte(*)(cls_struct_5byte, cls_struct_5byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n127 120 1 12 128 9: 139 248 10\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "c1cb278f749a7b32b22926e75fdfc35a845c90c2", "filename": "libffi/testsuite/libffi.call/cls_6byte.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_6byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_6byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_6byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_6byte {\n@@ -26,16 +26,16 @@ cls_struct_6byte cls_struct_6byte_fn(struct cls_struct_6byte a1,\n   result.d = a1.d + a2.d;\n \n   printf(\"%d %d %d %d %d %d %d %d: %d %d %d %d\\n\", a1.a, a1.b, a1.c, a1.d,\n-\t a2.a, a2.b, a2.c, a2.d, \n+\t a2.a, a2.b, a2.c, a2.d,\n \t result.a, result.b, result.c, result.d);\n \n   return  result;\n }\n \n-static void \n+static void\n cls_struct_6byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_6byte a1, a2;\n \n   a1 = *(struct cls_struct_6byte*)(args[0]);\n@@ -62,18 +62,18 @@ int main (void)\n   struct cls_struct_6byte g_dbl = { 127, 120, 1, 128 };\n   struct cls_struct_6byte f_dbl = { 12, 128, 9, 127 };\n   struct cls_struct_6byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_ushort;\n   cls_struct_fields[1] = &ffi_type_ushort;\n   cls_struct_fields[2] = &ffi_type_uchar;\n   cls_struct_fields[3] = &ffi_type_uchar;\n   cls_struct_fields[4] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -88,7 +88,7 @@ int main (void)\n   CHECK( res_dbl.d == (g_dbl.d + f_dbl.d));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_6byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_6byte(*)(cls_struct_6byte, cls_struct_6byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n127 120 1 128 12 128 9 127: 139 248 10 255\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "253534dfbeeaf5730eb8e6a9877af266cb04fd4c", "filename": "libffi/testsuite/libffi.call/cls_7byte.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_7byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_7byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_7byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_7byte {\n@@ -26,16 +26,16 @@ cls_struct_7byte cls_struct_7byte_fn(struct cls_struct_7byte a1,\n   result.d = a1.d + a2.d;\n \n   printf(\"%d %d %d %d %d %d %d %d: %d %d %d %d\\n\", a1.a, a1.b, a1.c, a1.d,\n-\t a2.a, a2.b, a2.c, a2.d, \n+\t a2.a, a2.b, a2.c, a2.d,\n \t result.a, result.b, result.c, result.d);\n \n   return  result;\n }\n \n-static void \n+static void\n cls_struct_7byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_7byte a1, a2;\n \n   a1 = *(struct cls_struct_7byte*)(args[0]);\n@@ -62,24 +62,24 @@ int main (void)\n   struct cls_struct_7byte g_dbl = { 127, 120, 1, 254 };\n   struct cls_struct_7byte f_dbl = { 12, 128, 9, 255 };\n   struct cls_struct_7byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_ushort;\n   cls_struct_fields[1] = &ffi_type_ushort;\n   cls_struct_fields[2] = &ffi_type_uchar;\n   cls_struct_fields[3] = &ffi_type_ushort;\n   cls_struct_fields[4] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n   args_dbl[1] = &f_dbl;\n   args_dbl[2] = NULL;\n-  \n+\n   ffi_call(&cif, FFI_FN(cls_struct_7byte_fn), &res_dbl, args_dbl);\n   /* { dg-output \"127 120 1 254 12 128 9 255: 139 248 10 509\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));\n@@ -88,7 +88,7 @@ int main (void)\n   CHECK( res_dbl.d == (g_dbl.d + f_dbl.d));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_7byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_7byte(*)(cls_struct_7byte, cls_struct_7byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n127 120 1 254 12 128 9 255: 139 248 10 509\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));"}, {"sha": "3746a696c125b17d67eb5382dd6b3b62ba73a113", "filename": "libffi/testsuite/libffi.call/cls_8byte.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_8byte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_8byte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_8byte.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_8byte {\n@@ -26,10 +26,10 @@ cls_struct_8byte cls_struct_8byte_fn(struct cls_struct_8byte a1,\n   return  result;\n }\n \n-static void \n+static void\n cls_struct_8byte_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n-  \n+{\n+\n   struct cls_struct_8byte a1, a2;\n \n   a1 = *(struct cls_struct_8byte*)(args[0]);\n@@ -56,16 +56,16 @@ int main (void)\n   struct cls_struct_8byte g_dbl = { 1, 2.0 };\n   struct cls_struct_8byte f_dbl = { 4, 5.0 };\n   struct cls_struct_8byte res_dbl;\n-  \n+\n   cls_struct_fields[0] = &ffi_type_uint32;\n   cls_struct_fields[1] = &ffi_type_float;\n   cls_struct_fields[2] = NULL;\n-  \n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type;\n   dbl_arg_types[2] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &g_dbl;\n@@ -78,11 +78,11 @@ int main (void)\n   CHECK( res_dbl.b == (g_dbl.b + f_dbl.b));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_8byte_gn, NULL) == FFI_OK);\n-  \n+\n   res_dbl = ((cls_struct_8byte(*)(cls_struct_8byte, cls_struct_8byte))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n1 2 4 5: 5 7\" } */\n   CHECK( res_dbl.a == (g_dbl.a + f_dbl.a));\n   CHECK( res_dbl.b == (g_dbl.b + f_dbl.b));\n \n   exit(0);\n-} \n+}"}, {"sha": "76a1df7a34014351e2edb5d5d01b953ccf2ad7f2", "filename": "libffi/testsuite/libffi.call/cls_double.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_double.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,15 +4,15 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void cls_ret_double_fn(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n  {\n    *(double *)resp = *(double *)args[0];\n-   \n-   printf(\"%f: %f\\n\",*(double *)args[0], \n+\n+   printf(\"%f: %f\\n\",*(double *)args[0],\n \t  *(double *)resp);\n  }\n typedef double (*cls_ret_double)(double);\n@@ -23,18 +23,18 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[2];\n-  \n-  \n+\n+\n   cl_arg_types[0] = &ffi_type_double;\n   cl_arg_types[1] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n \t\t     &ffi_type_double, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, cls_ret_double_fn, NULL)  == FFI_OK);\n-  \n+\n   (*((cls_ret_double)pcl))(21474.789);\n   /* { dg-output \"21474.789000: 21474.789000\" } */\n-  exit(0);  \n+  exit(0);\n }"}, {"sha": "dd0a48bd2cc4ca29e3857a8f6e7d1d5bd5d33f50", "filename": "libffi/testsuite/libffi.call/cls_float.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_float.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,15 +4,15 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void cls_ret_float_fn(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n  {\n    *(float *)resp = *(float *)args[0];\n-   \n-   printf(\"%g: %g\\n\",*(float *)args[0], \n+\n+   printf(\"%g: %g\\n\",*(float *)args[0],\n \t  *(float *)resp);\n  }\n \n@@ -24,20 +24,20 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[2];\n-  \n-  \n+\n+\n   cl_arg_types[0] = &ffi_type_float;\n   cl_arg_types[1] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n \t\t     &ffi_type_float, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, cls_ret_float_fn, NULL)  == FFI_OK);\n   ((((cls_ret_float)pcl)(-2122.12)));\n   /* { dg-output \"\\\\-2122.12: \\\\-2122.12\\n\" } */\n   printf(\"%f \\n\",(((cls_ret_float)pcl)(-2122.12)));\n   /* { dg-output \"\\\\-2122.12: \\\\-2122.12\" } */\n   /* { dg-output \"\\n\\-2122.120117\" } */\n-  exit(0);  \n+  exit(0);\n }"}, {"sha": "28fb1e3c232aee940ec1e6ce661a99efbd91042f", "filename": "libffi/testsuite/libffi.call/cls_uchar.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_uchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_uchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_uchar.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,14 +4,14 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void cls_ret_uchar_fn(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n {\n   *(ffi_arg*)resp = *(unsigned char *)args[0];\n-  printf(\"%d: %d\\n\",*(unsigned char *)args[0], \n+  printf(\"%d: %d\\n\",*(unsigned char *)args[0],\n \t *(ffi_arg*)resp);\n }\n typedef unsigned char (*cls_ret_uchar)(unsigned char);\n@@ -22,19 +22,19 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[2];\n-  \n-  \n+\n+\n   cl_arg_types[0] = &ffi_type_uchar;\n   cl_arg_types[1] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n \t\t     &ffi_type_uchar, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, cls_ret_uchar_fn, NULL)  == FFI_OK);\n-  \n+\n   (*((cls_ret_uchar)pcl))(127);\n   /* { dg-output \"127: 127\" } */\n \n-  exit(0);  \n+  exit(0);\n }"}, {"sha": "f0977ab23080c7a5dbdd010836ccd01fb0e27036", "filename": "libffi/testsuite/libffi.call/cls_uint.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_uint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_uint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_uint.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,15 +4,15 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void cls_ret_uint_fn(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n  {\n    *(unsigned int*)resp = *(unsigned int *)args[0];\n-   \n-   printf(\"%d: %d\\n\",*(unsigned int *)args[0], \n+\n+   printf(\"%d: %d\\n\",*(unsigned int *)args[0],\n \t  *(unsigned int *)resp);\n  }\n typedef unsigned int (*cls_ret_uint)(unsigned int);\n@@ -23,19 +23,19 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[2];\n-  \n-  \n+\n+\n   cl_arg_types[0] = &ffi_type_uint32;\n   cl_arg_types[1] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n \t\t     &ffi_type_uint32, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, cls_ret_uint_fn, NULL)  == FFI_OK);\n-  \n+\n   (*((cls_ret_uint)pcl))(2147483647);\n   /* { dg-output \"2147483647: 2147483647\" } */\n \n-  exit(0);  \n+  exit(0);\n }"}, {"sha": "7c98d757fd0462f89220880f97280c1162aeaf70", "filename": "libffi/testsuite/libffi.call/cls_ulonglong.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_ulonglong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_ulonglong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_ulonglong.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,15 +4,15 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void cls_ret_ulonglong_fn(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n  {\n    *(unsigned long long *)resp=  *(unsigned long long *)args[0];\n-  \n-   printf(\"%llu: %llu\\n\",*(unsigned long long *)args[0], \n+\n+   printf(\"%llu: %llu\\n\",*(unsigned long long *)args[0],\n \t  *(unsigned long long *)resp);\n  }\n typedef unsigned long long (*cls_ret_ulonglong)(unsigned long long);\n@@ -23,10 +23,10 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[2];\n-  \n+\n   cl_arg_types[0] = &ffi_type_uint64;\n   cl_arg_types[1] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n \t\t     &ffi_type_uint64, cl_arg_types) == FFI_OK);\n@@ -35,6 +35,6 @@ int main (void)\n   /* { dg-output \"214: 214\" } */\n   (*((cls_ret_ulonglong)pcl))(9223372035854775808LL);\n   /* { dg-output \"\\n9223372035854775808: 9223372035854775808\" } */\n-  \n-  exit(0);  \n+\n+  exit(0);\n }"}, {"sha": "e3acc1529aa261cd16b213812df18e2c0a345ebc", "filename": "libffi/testsuite/libffi.call/cls_ushort.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_ushort.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fcls_ushort.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_ushort.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,15 +4,15 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n static void cls_ret_ushort_fn(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n  {\n    *(ffi_arg*)resp = *(unsigned short *)args[0];\n-   \n-   printf(\"%d: %d\\n\",*(unsigned short *)args[0], \n+\n+   printf(\"%d: %d\\n\",*(unsigned short *)args[0],\n \t  *(ffi_arg*)resp);\n  }\n typedef unsigned short (*cls_ret_ushort)(unsigned short);\n@@ -23,19 +23,19 @@ int main (void)\n   static ffi_closure cl;\n   ffi_closure *pcl = &cl;\n   ffi_type * cl_arg_types[2];\n-  \n-  \n+\n+\n   cl_arg_types[0] = &ffi_type_ushort;\n   cl_arg_types[1] = NULL;\n-  \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n \t\t     &ffi_type_ushort, cl_arg_types) == FFI_OK);\n-  \n+\n   CHECK(ffi_prep_closure(pcl, &cif, cls_ret_ushort_fn, NULL)  == FFI_OK);\n-  \n+\n   (*((cls_ret_ushort)pcl))(65535);\n   /* { dg-output \"65535: 65535\" } */\n \n-  exit(0);  \n+  exit(0);\n }"}, {"sha": "e9fb4f9dfa49273d0db8e2da3cff255b3b327057", "filename": "libffi/testsuite/libffi.call/nested_struct.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fnested_struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fnested_struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fnested_struct.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_16byte1 {\n@@ -38,29 +38,29 @@ cls_struct_combined cls_struct_combined_fn(struct cls_struct_16byte1 b0,\n   result.e.dd = b0.a + b1.dd + b2.e.dd;\n   result.e.ff = b0.b + b1.ff + b2.e.ff;\n \n-  printf(\"%g %g %d %d %g %g %g %g %d %d %g %g: %g %g %d %d %g %g\\n\", \n+  printf(\"%g %g %d %d %g %g %g %g %d %d %g %g: %g %g %d %d %g %g\\n\",\n \t b0.a, b0.b, b0.c,\n \t b1.ii, b1.dd, b1.ff,\n \t b2.d.a, b2.d.b, b2.d.c,\n-\t b2.e.ii, b2.e.dd, b2.e.ff, \n+\t b2.e.ii, b2.e.dd, b2.e.ff,\n \t result.d.a, result.d.b, result.d.c,\n \t result.e.ii, result.e.dd, result.e.ff);\n \n   return result;\n }\n \n-static void \n+static void\n cls_struct_combined_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n+{\n   struct cls_struct_16byte1 b0;\n   struct cls_struct_16byte2 b1;\n   struct cls_struct_combined b2;\n-  \n+\n   b0 = *(struct cls_struct_16byte1*)(args[0]);\n   b1 = *(struct cls_struct_16byte2*)(args[1]);\n   b2 = *(struct cls_struct_combined*)(args[2]);\n \n-  \n+\n   *(cls_struct_combined*)resp = cls_struct_combined_fn(b0, b1, b2);\n }\n \n@@ -75,7 +75,7 @@ int main (void)\n   ffi_type* cls_struct_fields2[5];\n   ffi_type cls_struct_type, cls_struct_type1, cls_struct_type2;\n   ffi_type* dbl_arg_types[5];\n-  \n+\n   cls_struct_type.size = 0;\n   cls_struct_type.alignment = 0;\n   cls_struct_type.type = FFI_TYPE_STRUCT;\n@@ -85,18 +85,18 @@ int main (void)\n   cls_struct_type1.alignment = 0;\n   cls_struct_type1.type = FFI_TYPE_STRUCT;\n   cls_struct_type1.elements = cls_struct_fields1;\n-  \n+\n   cls_struct_type2.size = 0;\n   cls_struct_type2.alignment = 0;\n   cls_struct_type2.type = FFI_TYPE_STRUCT;\n   cls_struct_type2.elements = cls_struct_fields2;\n-  \n+\n   struct cls_struct_16byte1 e_dbl = { 9.0, 2.0, 6};\n   struct cls_struct_16byte2 f_dbl = { 1, 2.0, 3.0};\n-  struct cls_struct_combined g_dbl = {{4.0, 5.0, 6}, \n+  struct cls_struct_combined g_dbl = {{4.0, 5.0, 6},\n \t\t\t\t      {3, 1.0, 8.0}};\n   struct cls_struct_combined res_dbl;\n-    \n+\n   cls_struct_fields[0] = &ffi_type_double;\n   cls_struct_fields[1] = &ffi_type_float;\n   cls_struct_fields[2] = &ffi_type_uint32;\n@@ -110,14 +110,14 @@ int main (void)\n   cls_struct_fields2[0] = &cls_struct_type;\n   cls_struct_fields2[1] = &cls_struct_type1;\n   cls_struct_fields2[2] = NULL;\n-  \n-  \n+\n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type1;\n   dbl_arg_types[2] = &cls_struct_type2;\n   dbl_arg_types[3] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 3, &cls_struct_type2, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 3, &cls_struct_type2,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &e_dbl;\n@@ -135,8 +135,8 @@ int main (void)\n   CHECK( res_dbl.e.ff == (e_dbl.b + f_dbl.ff + g_dbl.e.ff));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_combined_gn, NULL) == FFI_OK);\n-  \n-  res_dbl = ((cls_struct_combined(*)(cls_struct_16byte1, \n+\n+  res_dbl = ((cls_struct_combined(*)(cls_struct_16byte1,\n \t\t\t\t     cls_struct_16byte2,\n \t\t\t\t     cls_struct_combined))\n \t     (pcl))(e_dbl, f_dbl, g_dbl);\n@@ -148,4 +148,4 @@ int main (void)\n   CHECK( res_dbl.e.dd == (e_dbl.a + f_dbl.dd + g_dbl.e.dd));\n   CHECK( res_dbl.e.ff == (e_dbl.b + f_dbl.ff + g_dbl.e.ff));\n   exit(0);\n-}   \n+}"}, {"sha": "57373fb7b74dcf067e9b38096f376d118250321e", "filename": "libffi/testsuite/libffi.call/nested_struct1.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fnested_struct1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fnested_struct1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fnested_struct1.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -5,7 +5,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct cls_struct_16byte1 {\n@@ -39,7 +39,7 @@ cls_struct_combined cls_struct_combined_fn(struct cls_struct_16byte1 b0,\n   result.e.dd = b0.a + b1.dd + b2.e.dd;\n   result.e.ff = b0.b + b1.ff + b2.e.ff;\n \n-  printf(\"%g %g %d %d %g %g %g %g %d %d %g %g %g %g %d: %g %g %d %d %g %g\\n\", \n+  printf(\"%g %g %d %d %g %g %g %g %d %d %g %g %g %g %d: %g %g %d %d %g %g\\n\",\n \t b0.a, b0.b, b0.c,\n \t b1.ii, b1.dd, b1.ff,\n \t b2.d.a, b2.d.b, b2.d.c,\n@@ -51,20 +51,20 @@ cls_struct_combined cls_struct_combined_fn(struct cls_struct_16byte1 b0,\n   return result;\n }\n \n-static void \n+static void\n cls_struct_combined_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n+{\n   struct cls_struct_16byte1 b0;\n   struct cls_struct_16byte2 b1;\n   struct cls_struct_combined b2;\n   struct cls_struct_16byte1 b3;\n-  \n+\n   b0 = *(struct cls_struct_16byte1*)(args[0]);\n   b1 = *(struct cls_struct_16byte2*)(args[1]);\n   b2 = *(struct cls_struct_combined*)(args[2]);\n   b3 = *(struct cls_struct_16byte1*)(args[3]);\n \n-  \n+\n   *(cls_struct_combined*)resp = cls_struct_combined_fn(b0, b1, b2, b3);\n }\n \n@@ -79,7 +79,7 @@ int main (void)\n   ffi_type* cls_struct_fields2[5];\n   ffi_type cls_struct_type, cls_struct_type1, cls_struct_type2;\n   ffi_type* dbl_arg_types[5];\n-  \n+\n   cls_struct_type.size = 0;\n   cls_struct_type.alignment = 0;\n   cls_struct_type.type = FFI_TYPE_STRUCT;\n@@ -89,19 +89,19 @@ int main (void)\n   cls_struct_type1.alignment = 0;\n   cls_struct_type1.type = FFI_TYPE_STRUCT;\n   cls_struct_type1.elements = cls_struct_fields1;\n-  \n+\n   cls_struct_type2.size = 0;\n   cls_struct_type2.alignment = 0;\n   cls_struct_type2.type = FFI_TYPE_STRUCT;\n   cls_struct_type2.elements = cls_struct_fields2;\n-  \n+\n   struct cls_struct_16byte1 e_dbl = { 9.0, 2.0, 6};\n   struct cls_struct_16byte2 f_dbl = { 1, 2.0, 3.0};\n-  struct cls_struct_combined g_dbl = {{4.0, 5.0, 6}, \n+  struct cls_struct_combined g_dbl = {{4.0, 5.0, 6},\n \t\t\t\t      {3, 1.0, 8.0}};\n   struct cls_struct_16byte1 h_dbl = { 3.0, 2.0, 4};\n   struct cls_struct_combined res_dbl;\n-    \n+\n   cls_struct_fields[0] = &ffi_type_double;\n   cls_struct_fields[1] = &ffi_type_float;\n   cls_struct_fields[2] = &ffi_type_uint32;\n@@ -115,15 +115,15 @@ int main (void)\n   cls_struct_fields2[0] = &cls_struct_type;\n   cls_struct_fields2[1] = &cls_struct_type1;\n   cls_struct_fields2[2] = NULL;\n-  \n-  \n+\n+\n   dbl_arg_types[0] = &cls_struct_type;\n   dbl_arg_types[1] = &cls_struct_type1;\n   dbl_arg_types[2] = &cls_struct_type2;\n   dbl_arg_types[3] = &cls_struct_type;\n   dbl_arg_types[4] = NULL;\n-  \n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type2, \n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type2,\n \t\t     dbl_arg_types) == FFI_OK);\n \n   args_dbl[0] = &e_dbl;\n@@ -142,8 +142,8 @@ int main (void)\n   CHECK( res_dbl.e.ff == (e_dbl.b + f_dbl.ff + g_dbl.e.ff));\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_combined_gn, NULL) == FFI_OK);\n-  \n-  res_dbl = ((cls_struct_combined(*)(cls_struct_16byte1, \n+\n+  res_dbl = ((cls_struct_combined(*)(cls_struct_16byte1,\n \t\t\t\t     cls_struct_16byte2,\n \t\t\t\t     cls_struct_combined,\n \t\t\t\t     cls_struct_16byte1))\n@@ -157,4 +157,4 @@ int main (void)\n   CHECK( res_dbl.e.ff == (e_dbl.b + f_dbl.ff + g_dbl.e.ff));\n   //  CHECK( 1 == 0);\n   exit(0);\n-}   \n+}"}, {"sha": "6cbdb2c4c9ad406e7108fe134f0dba24bdb5e5c7", "filename": "libffi/testsuite/libffi.call/problem1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fproblem1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fproblem1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fproblem1.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,7 +4,7 @@\n    PR:\t\tnone.\n    Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitest.h\"\n \n typedef struct my_ffi_struct {\n@@ -19,19 +19,19 @@ my_ffi_struct callee(struct my_ffi_struct a1, struct my_ffi_struct a2)\n   result.a = a1.a + a2.a;\n   result.b = a1.b + a2.b;\n   result.c = a1.c + a2.c;\n-  \n \n-  printf(\"%g %g %g %g %g %g: %g %g %g\\n\", a1.a, a1.b, a1.c, \n+\n+  printf(\"%g %g %g %g %g %g: %g %g %g\\n\", a1.a, a1.b, a1.c,\n \t a2.a, a2.b, a2.c, result.a, result.b, result.c);\n-  \n+\n   return result;\n }\n \n void stub(ffi_cif* cif, void* resp, void** args, void* userdata)\n-{   \n+{\n     struct my_ffi_struct a1;\n     struct my_ffi_struct a2;\n-    \n+\n     a1 = *(struct my_ffi_struct*)(args[0]);\n     a2 = *(struct my_ffi_struct*)(args[1]);\n \n@@ -48,7 +48,7 @@ int main(void)\n     ffi_closure *pcl = &cl;\n     void* args[4];\n     ffi_type* arg_types[3];\n-    \n+\n     struct my_ffi_struct g = { 1.0, 2.0, 3.0 };\n     struct my_ffi_struct f = { 1.0, 2.0, 3.0 };\n     struct my_ffi_struct res;\n@@ -67,7 +67,7 @@ int main(void)\n     arg_types[1] = &my_ffi_struct_type;\n     arg_types[2] = NULL;\n \n-    CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &my_ffi_struct_type, \n+    CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &my_ffi_struct_type,\n \t\t       arg_types) == FFI_OK);\n \n     args[0] = &g;\n@@ -79,15 +79,15 @@ int main(void)\n     CHECK(res.a == 2.0);\n     CHECK(res.b == 4.0);\n     CHECK(res.c == 6.0);\n-    \n+\n     CHECK(ffi_prep_closure(pcl, &cif, stub, NULL) == FFI_OK);\n- \n+\n     res = ((my_ffi_struct(*)(struct my_ffi_struct, struct my_ffi_struct))(pcl))(g, f);\n     /* { dg-output \"\\n1 2 3 1 2 3: 2 4 6\" } */\n-    \n+\n     CHECK(res.a == 2.0);\n     CHECK(res.b == 4.0);\n     CHECK(res.c == 6.0);\n \n     exit(0);;\n-} \n+}"}, {"sha": "ac092de332728366e7da0d3ca98360df622efdfd", "filename": "libffi/testsuite/libffi.call/pyobjc-tc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fpyobjc-tc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.call%2Fpyobjc-tc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fpyobjc-tc.c?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -69,7 +69,7 @@ int main(void)\n \trect_type.elements[2] = NULL;\n \n \t/*\n-\t * Create a CIF \n+\t * Create a CIF\n \t */\n \targlist[0] = &ffi_type_sint;\n \targlist[1] = &ffi_type_pointer;"}, {"sha": "ee6806effe11e82986e590f067597d12fabd9c89", "filename": "libffi/testsuite/libffi.special/unwindtest.cc", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.special%2Funwindtest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb/libffi%2Ftestsuite%2Flibffi.special%2Funwindtest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.special%2Funwindtest.cc?ref=9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "patch": "@@ -4,7 +4,7 @@\n    PR:\t\tnone.\n    Originator:\tJeff Sturm <jsturm@one-point.com>  */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n #include \"ffitestcxx.h\"\n \n void\n@@ -15,34 +15,34 @@ closure_test_fn(ffi_cif* cif, void* resp, void** args, void* userdata)\n \n typedef void (*closure_test_type)();\n \n-void closure_test_fn1(ffi_cif* cif,void* resp,void** args, \n+void closure_test_fn1(ffi_cif* cif,void* resp,void** args,\n \t\t\t     void* userdata)\n  {\n     *(ffi_arg*)resp =\n-      (int)*(float *)args[0] +(int)(*(float *)args[1]) + \n+      (int)*(float *)args[0] +(int)(*(float *)args[1]) +\n       (int)(*(float *)args[2]) + (int)*(float *)args[3] +\n       (int)(*(signed short *)args[4]) + (int)(*(float *)args[5]) +\n-      (int)*(float *)args[6] + (int)(*(int *)args[7]) + \n-      (int)(*(double*)args[8]) + (int)*(int *)args[9] + \n-      (int)(*(int *)args[10]) + (int)(*(float *)args[11]) + \n-      (int)*(int *)args[12] + (int)(*(int *)args[13]) + \n+      (int)*(float *)args[6] + (int)(*(int *)args[7]) +\n+      (int)(*(double*)args[8]) + (int)*(int *)args[9] +\n+      (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n+      (int)*(int *)args[12] + (int)(*(int *)args[13]) +\n       (int)(*(int *)args[14]) + *(int *)args[15] + (int)(long)userdata;\n \n     printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n-    \t   (int)*(float *)args[0], (int)(*(float *)args[1]), \n-    \t   (int)(*(float *)args[2]), (int)*(float *)args[3], \n-    \t   (int)(*(signed short *)args[4]), (int)(*(float *)args[5]),\n-    \t   (int)*(float *)args[6], (int)(*(int *)args[7]),\n-    \t   (int)(*(double *)args[8]), (int)*(int *)args[9],\n-    \t   (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n-    \t   (int)*(int *)args[12], (int)(*(int *)args[13]),\n-    \t   (int)(*(int *)args[14]), *(int *)args[15],\n-    \t   (int)(long)userdata, (int)*(ffi_arg*)resp);\n-    \n+\t   (int)*(float *)args[0], (int)(*(float *)args[1]),\n+\t   (int)(*(float *)args[2]), (int)*(float *)args[3],\n+\t   (int)(*(signed short *)args[4]), (int)(*(float *)args[5]),\n+\t   (int)*(float *)args[6], (int)(*(int *)args[7]),\n+\t   (int)(*(double *)args[8]), (int)*(int *)args[9],\n+\t   (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n+\t   (int)*(int *)args[12], (int)(*(int *)args[13]),\n+\t   (int)(*(int *)args[14]), *(int *)args[15],\n+\t   (int)(long)userdata, (int)*(ffi_arg*)resp);\n+\n     throw (int)*(ffi_arg*)resp;\n }\n \n-typedef int (*closure_test_type1)(float, float, float, float, signed short, \n+typedef int (*closure_test_type1)(float, float, float, float, signed short,\n \t\t\t\t  float, float, int, double, int, int, float,\n \t\t\t\t  int, int, int, int);\n \n@@ -53,19 +53,19 @@ int main (void)\n   ffi_type * cl_arg_types[17];\n   {\n     cl_arg_types[1] = NULL;\n-    \n+\n     CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 0,\n \t\t       &ffi_type_void, cl_arg_types) == FFI_OK);\n     CHECK(ffi_prep_closure(&cl, &cif, closure_test_fn, NULL) == FFI_OK);\n-    \n+\n     try\n       {\n \t(*((closure_test_type)(&cl)))();\n       } catch (int exception_code)\n       {\n \tCHECK(exception_code == 9);\n       }\n-    \n+\n     printf(\"part one OK\\n\");\n     /* { dg-output \"part one OK\" } */\n     }\n@@ -89,7 +89,7 @@ int main (void)\n       cl_arg_types[14] = &ffi_type_uint;\n       cl_arg_types[15] = &ffi_type_uint;\n       cl_arg_types[16] = NULL;\n-      \n+\n       /* Initialize the cif */\n       CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 16,\n \t\t\t &ffi_type_sint, cl_arg_types) == FFI_OK);\n@@ -105,7 +105,7 @@ int main (void)\n \t} catch (int exception_code)\n \t{\n \t  CHECK(exception_code == 255);\n-\t}      \n+\t}\n       printf(\"part two OK\\n\");\n       /* { dg-output \"\\npart two OK\" } */\n     }"}]}