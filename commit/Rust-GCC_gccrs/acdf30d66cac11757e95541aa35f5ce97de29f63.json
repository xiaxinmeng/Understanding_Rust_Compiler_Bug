{"sha": "acdf30d66cac11757e95541aa35f5ce97de29f63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkZjMwZDY2Y2FjMTE3NTdlOTU1NDFhYTM1ZjVjZTk3ZGUyOWY2Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-26T08:47:01Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-26T08:50:33Z"}, "message": "i386: Use SDWIM mode iterator for abs and maxmin [PR97873]\n\nGenerate special double mode sequence also for QImode and HImode.\n\nWithout QImode and HImode patterns, middle-end extends operands to SImode\nand emits SImode conditional move instruction with paradoxical SImode output\nregister.  This form is not recognized by STV pass, but a single abs with\ninput operand in a register would not be converted anyway due to relatively\nhigh register conversion cost.\n\n2020-11-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\tPR target/97873\n\ngcc/\n\t* config/i386/i386.md (abs<mode>2): Use SDWIM mode iterator.\n\t(*abs<mode>2_1): Use SWI mode iterator.\n\n\t(<maxmin:code><mode>3): Use SDWIM mode iterator.\n\t(*<maxmin:code><mode>3_1): Use SWI mode iterator.\n\ngcc/testsuite/\n\t* gcc.target/i386/pr97873-3.c: New test.", "tree": {"sha": "732c84d94d538a3feb2b6662d34c44a5314b760b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/732c84d94d538a3feb2b6662d34c44a5314b760b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acdf30d66cac11757e95541aa35f5ce97de29f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdf30d66cac11757e95541aa35f5ce97de29f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acdf30d66cac11757e95541aa35f5ce97de29f63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdf30d66cac11757e95541aa35f5ce97de29f63/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3068952d7540c51764d1e4e31ef8988492064cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3068952d7540c51764d1e4e31ef8988492064cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3068952d7540c51764d1e4e31ef8988492064cf"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "7c25ae2078d1337d505c82fc49e65b11617cd4f1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdf30d66cac11757e95541aa35f5ce97de29f63/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdf30d66cac11757e95541aa35f5ce97de29f63/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=acdf30d66cac11757e95541aa35f5ce97de29f63", "patch": "@@ -10180,9 +10180,9 @@\n \n (define_expand \"abs<mode>2\"\n   [(parallel\n-    [(set (match_operand:SWI48DWI 0 \"register_operand\")\n-\t  (abs:SWI48DWI\n-\t    (match_operand:SWI48DWI 1 \"general_operand\")))\n+    [(set (match_operand:SDWIM 0 \"register_operand\")\n+\t  (abs:SDWIM\n+\t    (match_operand:SDWIM 1 \"general_operand\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_CMOVE\"\n {\n@@ -10252,9 +10252,9 @@\n })\n \n (define_insn_and_split \"*abs<mode>2_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\")\n-\t(abs:SWI48\n-\t  (match_operand:SWI48 1 \"general_operand\")))\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(abs:SWI\n+\t  (match_operand:SWI 1 \"general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_CMOVE\n    && ix86_pre_reload_split ()\"\n@@ -10263,12 +10263,12 @@\n   [(parallel\n      [(set (reg:CCGOC FLAGS_REG)\n \t   (compare:CCGOC\n-\t     (neg:SWI48 (match_dup 1))\n+\t     (neg:SWI (match_dup 1))\n \t     (const_int 0)))\n       (set (match_dup 2)\n-\t   (neg:SWI48 (match_dup 1)))])\n+\t   (neg:SWI (match_dup 1)))])\n    (set (match_dup 0)\n-        (if_then_else:SWI48\n+        (if_then_else:SWI\n \t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n \t  (match_dup 2)\n \t  (match_dup 1)))]\n@@ -18967,10 +18967,10 @@\n \n (define_expand \"<code><mode>3\"\n   [(parallel\n-    [(set (match_operand:SWI48DWI 0 \"register_operand\")\n-\t  (maxmin:SWI48DWI\n-\t    (match_operand:SWI48DWI 1 \"register_operand\")\n-\t    (match_operand:SWI48DWI 2 \"general_operand\")))\n+    [(set (match_operand:SDWIM 0 \"register_operand\")\n+\t  (maxmin:SDWIM\n+\t    (match_operand:SDWIM 1 \"register_operand\")\n+\t    (match_operand:SDWIM 2 \"general_operand\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_CMOVE\")\n \n@@ -19033,17 +19033,17 @@\n })\n \n (define_insn_and_split \"*<code><mode>3_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\")\n-\t(maxmin:SWI48\n-\t  (match_operand:SWI48 1 \"register_operand\")\n-\t  (match_operand:SWI48 2 \"general_operand\")))\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(maxmin:SWI\n+\t  (match_operand:SWI 1 \"register_operand\")\n+\t  (match_operand:SWI 2 \"general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_CMOVE\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n-\t(if_then_else:SWI48 (match_dup 3)\n+\t(if_then_else:SWI (match_dup 3)\n \t  (match_dup 1)\n \t  (match_dup 2)))]\n {"}, {"sha": "e682f14c87c5dd6b999319d1d7f0c576b466c5ad", "filename": "gcc/testsuite/gcc.target/i386/pr97873-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdf30d66cac11757e95541aa35f5ce97de29f63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdf30d66cac11757e95541aa35f5ce97de29f63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-3.c?ref=acdf30d66cac11757e95541aa35f5ce97de29f63", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/97873 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-sse3 -mtune=generic\" } */\n+\n+short test_absw (short x)\n+{\n+  return (x < 0) ? -x : x;\n+}\n+\n+short test_sminw (short x, short y)\n+{\n+  return (x < y) ? x : y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movswl\" } } */\n+\n+char test_absb (char x)\n+{\n+  return (x < 0) ? -x : x;\n+}\n+\n+char test_sminb (char x, char y)\n+{\n+  return (x < y) ? x : y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"movsbl\" } } */"}]}