{"sha": "3a2bd2f4650f6d4703febd0756d4819359213eed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyYmQyZjQ2NTBmNmQ0NzAzZmViZDA3NTZkNDgxOTM1OTIxM2VlZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-08T13:20:07Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-08T13:20:07Z"}, "message": "score-protos.h (score_function_arg): Delete.\n\n\t* config/score/score-protos.h (score_function_arg): Delete.\n\t(score_function_arg_advance): Delete.\n\t* config/score/score3.h (score3_function_arg_advance): Take a\n\tconst_tree and a bool.\n\t(score3_function_arg): Likewise.\n\t* config/score/score7.h (score7_function_arg_advance): Likewise.\n\t(score7_function_arg): Likewise.\n\t* config/score/score3.c (score3_classify_arg): Likewise.\n\t(score3_function_arg_advance, score3_function_arg): Likewise.\n\t* config/score/score7.c (score7_classify_arg): Likewise.\n\t(score7_function_arg_advance, score7_function_arg): Likewise.\n\t* config/score/score.c (score_function_arg_advance): Likewise.\n\t(score_function_arg): Likewise.  De-const-ify `cum' argument.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165181", "tree": {"sha": "a56697760259628bdf377bdc66617481e0988105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a56697760259628bdf377bdc66617481e0988105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2bd2f4650f6d4703febd0756d4819359213eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2bd2f4650f6d4703febd0756d4819359213eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2bd2f4650f6d4703febd0756d4819359213eed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2bd2f4650f6d4703febd0756d4819359213eed/comments", "author": null, "committer": null, "parents": [{"sha": "3cb1da52cb6eef3eeec78ef672799b972d9db48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb1da52cb6eef3eeec78ef672799b972d9db48a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb1da52cb6eef3eeec78ef672799b972d9db48a"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "4b0150365a50f4ada78d4a3b336703cd08787241", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a2bd2f4650f6d4703febd0756d4819359213eed", "patch": "@@ -1,3 +1,20 @@\n+2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/score/score-protos.h (score_function_arg): Delete.\n+\t(score_function_arg_advance): Delete.\n+\t* config/score/score3.h (score3_function_arg_advance): Take a\n+\tconst_tree and a bool.\n+\t(score3_function_arg): Likewise.\n+\t* config/score/score7.h (score7_function_arg_advance): Likewise.\n+\t(score7_function_arg): Likewise.\n+\t* config/score/score3.c (score3_classify_arg): Likewise.\n+\t(score3_function_arg_advance, score3_function_arg): Likewise.\n+\t* config/score/score7.c (score7_classify_arg): Likewise.\n+\t(score7_function_arg_advance, score7_function_arg): Likewise.\n+\t* config/score/score.c (score_function_arg_advance): Likewise.\n+\t(score_function_arg): Likewise.  De-const-ify `cum' argument.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/s390/s390-protos.h (s390_function_arg_advance): Delete."}, {"sha": "7a82212dcdf6732e041f54339681a85c586a9ce4", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=3a2bd2f4650f6d4703febd0756d4819359213eed", "patch": "@@ -39,9 +39,6 @@ extern bool score_unaligned_load (rtx* ops);\n extern bool score_unaligned_store (rtx* ops);\n extern bool score_block_move (rtx* ops);\n extern int score_address_cost (rtx addr, bool speed);\n-extern rtx score_function_arg (const CUMULATIVE_ARGS *cum,\n-                               enum machine_mode mode,\n-                               tree type, int named);\n extern int score_address_p (enum machine_mode mode, rtx x, int strict);\n extern int score_reg_class (int regno);\n extern int score_register_move_cost (enum machine_mode mode, enum reg_class to,\n@@ -51,9 +48,6 @@ extern int score_const_ok_for_letter_p (HOST_WIDE_INT value, char c);\n extern int score_extra_constraint (rtx op, char c);\n extern rtx score_return_addr (int count, rtx frame);\n extern int score_regno_mode_ok_for_base_p (int regno, int strict);\n-extern void score_function_arg_advance (CUMULATIVE_ARGS *cum,\n-                                        enum machine_mode mode,\n-                                        tree type, int named);\n extern void score_init_cumulative_args (CUMULATIVE_ARGS *cum,\n                                         tree fntype, rtx libname);\n extern void score_declare_object (FILE *stream, const char *name,"}, {"sha": "7af8374cf26e665c22a19de3e17c08e626b03d84", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=3a2bd2f4650f6d4703febd0756d4819359213eed", "patch": "@@ -105,6 +105,12 @@ static void score_option_override (void);\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES        score_arg_partial_bytes\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG             score_function_arg\n+\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE     score_function_arg_advance\n+\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE        score_pass_by_reference\n \n@@ -474,10 +480,10 @@ score_init_cumulative_args (CUMULATIVE_ARGS *cum,\n   memset (cum, 0, sizeof (CUMULATIVE_ARGS));\n }\n \n-/* Implement FUNCTION_ARG_ADVANCE macro.  */\n+/* Implement TARGET_FUNCTION_ARG_ADVANCE hook.  */\n void\n score_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                            tree type, int named)\n+                            const_tree type, bool named)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n     return score7_function_arg_advance (cum, mode, type, named);\n@@ -500,10 +506,10 @@ score_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n   gcc_unreachable ();\n }\n \n-/* Implement FUNCTION_ARG macro.  */\n+/* Implement TARGET_FUNCTION_ARG hook.  */\n rtx\n-score_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                    tree type, int named)\n+score_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+                    const_tree type, bool named)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n     return score7_function_arg (cum, mode, type, named);"}, {"sha": "9349c68431e5ab575fd1edcb81545f7ef8901aee", "filename": "gcc/config/score/score3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.c?ref=3a2bd2f4650f6d4703febd0756d4819359213eed", "patch": "@@ -440,7 +440,7 @@ score3_legitimize_address (rtx x)\n    is a named (fixed) argument rather than a variable one.  */\n static void\n score3_classify_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                     tree type, int named, struct score3_arg_info *info)\n+                     const_tree type, bool named, struct score3_arg_info *info)\n {\n   int even_reg_p;\n   unsigned int num_words, max_regs;\n@@ -800,10 +800,10 @@ score3_initial_elimination_offset (int from,\n     }\n }\n \n-/* Implement FUNCTION_ARG_ADVANCE macro.  */\n+/* Implement TARGET_FUNCTION_ARG_ADVANCE hook.  */\n void\n score3_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                             tree type, int named)\n+                             const_tree type, bool named)\n {\n   struct score3_arg_info info;\n   score3_classify_arg (cum, mode, type, named, &info);\n@@ -823,10 +823,10 @@ score3_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n   return info.stack_words > 0 ? info.reg_words * UNITS_PER_WORD : 0;\n }\n \n-/* Implement FUNCTION_ARG macro.  */\n+/* Implement TARGET_FUNCTION_ARG hook.  */\n rtx\n score3_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                     tree type, int named)\n+                     const_tree type, bool named)\n {\n   struct score3_arg_info info;\n "}, {"sha": "a89f1d7f705d77d708bdf862ec0050e12fb61980", "filename": "gcc/config/score/score3.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.h?ref=3a2bd2f4650f6d4703febd0756d4819359213eed", "patch": "@@ -107,16 +107,16 @@ score3_initial_elimination_offset (int from,\n                                    int to ATTRIBUTE_UNUSED);\n extern void score3_function_arg_advance (CUMULATIVE_ARGS *cum,\n                                          enum machine_mode mode,\n-                                         tree type,\n-                                         int named);\n+                                         const_tree type,\n+                                         bool named);\n extern int score3_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n                                      enum machine_mode mode,\n                                      tree type,\n                                      bool named);\n extern rtx score3_function_arg (const CUMULATIVE_ARGS *cum,\n                                 enum machine_mode mode,\n-                                tree type,\n-                                int named);\n+                                const_tree type,\n+                                bool named);\n extern rtx score3_function_value (tree valtype,\n                                   tree func ATTRIBUTE_UNUSED,\n                                   enum machine_mode mode);"}, {"sha": "82a04364c3951b69b261694188befc094dd056c4", "filename": "gcc/config/score/score7.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.c?ref=3a2bd2f4650f6d4703febd0756d4819359213eed", "patch": "@@ -439,7 +439,7 @@ score7_legitimize_address (rtx x)\n    is a named (fixed) argument rather than a variable one.  */\n static void\n score7_classify_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                     tree type, int named, struct score7_arg_info *info)\n+                     const_tree type, bool named, struct score7_arg_info *info)\n {\n   int even_reg_p;\n   unsigned int num_words, max_regs;\n@@ -791,10 +791,10 @@ score7_initial_elimination_offset (int from,\n     }\n }\n \n-/* Implement FUNCTION_ARG_ADVANCE macro.  */\n+/* Implement TARGET_FUNCTION_ARG_ADVANCE hook.  */\n void\n score7_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                             tree type, int named)\n+                             const_tree type, bool named)\n {\n   struct score7_arg_info info;\n   score7_classify_arg (cum, mode, type, named, &info);\n@@ -814,10 +814,10 @@ score7_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n   return info.stack_words > 0 ? info.reg_words * UNITS_PER_WORD : 0;\n }\n \n-/* Implement FUNCTION_ARG macro.  */\n+/* Implement TARGET_FUNCTION_ARG hook.  */\n rtx\n score7_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                     tree type, int named)\n+                     const_tree type, bool named)\n {\n   struct score7_arg_info info;\n "}, {"sha": "f3d95af8c244943e812507af836ab8d16fb9301f", "filename": "gcc/config/score/score7.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2bd2f4650f6d4703febd0756d4819359213eed/gcc%2Fconfig%2Fscore%2Fscore7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.h?ref=3a2bd2f4650f6d4703febd0756d4819359213eed", "patch": "@@ -107,16 +107,16 @@ score7_initial_elimination_offset (int from,\n                                    int to ATTRIBUTE_UNUSED);\n extern void score7_function_arg_advance (CUMULATIVE_ARGS *cum,\n                                          enum machine_mode mode,\n-                                         tree type,\n-                                         int named);\n+                                         const_tree type,\n+                                         bool named);\n extern int score7_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n                                      enum machine_mode mode,\n                                      tree type,\n                                      bool named);\n extern rtx score7_function_arg (const CUMULATIVE_ARGS *cum,\n                                 enum machine_mode mode,\n-                                tree type,\n-                                int named);\n+                                const_tree type,\n+                                bool named);\n extern rtx score7_function_value (tree valtype,\n                                   tree func ATTRIBUTE_UNUSED,\n                                   enum machine_mode mode);"}]}