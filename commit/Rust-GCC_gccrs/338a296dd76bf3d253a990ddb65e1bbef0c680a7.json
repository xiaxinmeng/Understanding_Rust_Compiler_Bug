{"sha": "338a296dd76bf3d253a990ddb65e1bbef0c680a7", "node_id": "C_kwDOANBUbNoAKDMzOGEyOTZkZDc2YmYzZDI1M2E5OTBkZGI2NWUxYmJlZjBjNjgwYTc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-18T15:55:19Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-19T10:29:05Z"}, "message": "Remove path_range_query constructor that takes an edge.\n\nThe path_range_query constructor that takes an edge is really a\nconvenience function for the loop-ch pass.  It feels wrong to pollute\nthe API with such a specialized function that could be done with\na small inline function closer to its user.\n\nAs an added benefit, we remove one use of reset_path.  The last\nremaining one is the forward threader one.\n\nTested, thread-counted, and benchmarked on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::path_range_query):\n\tRemove constructor that takes edge.\n\t* gimple-range-path.h (class path_range_query): Same.\n\t* tree-ssa-loop-ch.cc (edge_range_query): New.\n\t(entry_loop_condition_is_static): Call edge_range_query.", "tree": {"sha": "3993a735445686c2eb1887757c4562e2be8ebff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3993a735445686c2eb1887757c4562e2be8ebff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338a296dd76bf3d253a990ddb65e1bbef0c680a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338a296dd76bf3d253a990ddb65e1bbef0c680a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338a296dd76bf3d253a990ddb65e1bbef0c680a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338a296dd76bf3d253a990ddb65e1bbef0c680a7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e20a6eb9e6b7eb62a09ac58811387f0343bd14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e20a6eb9e6b7eb62a09ac58811387f0343bd14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81e20a6eb9e6b7eb62a09ac58811387f0343bd14"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "bc2879c0c57053bbbb5540d85ebf26d3de7b5b6f", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338a296dd76bf3d253a990ddb65e1bbef0c680a7/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338a296dd76bf3d253a990ddb65e1bbef0c680a7/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=338a296dd76bf3d253a990ddb65e1bbef0c680a7", "patch": "@@ -59,21 +59,6 @@ path_range_query::path_range_query (gimple_ranger &ranger, bool resolve)\n   m_oracle = new path_oracle (m_ranger.oracle ());\n }\n \n-path_range_query::path_range_query (gimple_ranger &ranger,\n-\t\t\t\t    edge e,\n-\t\t\t\t    bool resolve)\n-  : m_cache (new ssa_global_cache),\n-    m_has_cache_entry (BITMAP_ALLOC (NULL)),\n-    m_ranger (ranger),\n-    m_resolve (resolve)\n-{\n-  m_oracle = new path_oracle (m_ranger.oracle ());\n-  auto_vec<basic_block> bbs (2);\n-  bbs.quick_push (e->dest);\n-  bbs.quick_push (e->src);\n-  reset_path (bbs, NULL);\n-}\n-\n path_range_query::~path_range_query ()\n {\n   delete m_oracle;"}, {"sha": "9f2d6d92dab9e434046363f9c9f0db3e26b4a2e1", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338a296dd76bf3d253a990ddb65e1bbef0c680a7/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338a296dd76bf3d253a990ddb65e1bbef0c680a7/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=338a296dd76bf3d253a990ddb65e1bbef0c680a7", "patch": "@@ -37,7 +37,6 @@ class path_range_query : public range_query\n \t\t    const bitmap_head *dependencies = NULL,\n \t\t    bool resolve = true);\n   path_range_query (gimple_ranger &ranger, bool resolve = true);\n-  path_range_query (gimple_ranger &ranger, edge e, bool resolve = true);\n   virtual ~path_range_query ();\n   void reset_path (const vec<basic_block> &, const bitmap_head *dependencies);\n   bool range_of_expr (vrange &r, tree name, gimple * = NULL) override;"}, {"sha": "9c316887d5b9dd99b772bedcb106b646f378f71a", "filename": "gcc/tree-ssa-loop-ch.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338a296dd76bf3d253a990ddb65e1bbef0c680a7/gcc%2Ftree-ssa-loop-ch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338a296dd76bf3d253a990ddb65e1bbef0c680a7/gcc%2Ftree-ssa-loop-ch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.cc?ref=338a296dd76bf3d253a990ddb65e1bbef0c680a7", "patch": "@@ -45,6 +45,20 @@ along with GCC; see the file COPYING3.  If not see\n    increases effectiveness of code motion optimizations, and reduces the need\n    for loop preconditioning.  */\n \n+/* Given a path through edge E, whose last statement is COND, return\n+   the range of the solved conditional in R.  */\n+\n+static void\n+edge_range_query (irange &r, edge e, gcond *cond, gimple_ranger &ranger)\n+{\n+  auto_vec<basic_block> path (2);\n+  path.safe_push (e->dest);\n+  path.safe_push (e->src);\n+  path_range_query query (ranger, path);\n+  if (!query.range_of_stmt (r, cond))\n+    r.set_varying (boolean_type_node);\n+}\n+\n /* Return true if the condition on the first iteration of the loop can\n    be statically determined.  */\n \n@@ -72,8 +86,7 @@ entry_loop_condition_is_static (class loop *l, gimple_ranger *ranger)\n     desired_static_value = boolean_true_node;\n \n   int_range<2> r;\n-  path_range_query query (*ranger, e);\n-  query.range_of_stmt (r, last);\n+  edge_range_query (r, e, last, *ranger);\n   return r == int_range<2> (desired_static_value, desired_static_value);\n }\n "}]}