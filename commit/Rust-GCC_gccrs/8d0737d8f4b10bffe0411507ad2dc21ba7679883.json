{"sha": "8d0737d8f4b10bffe0411507ad2dc21ba7679883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQwNzM3ZDhmNGIxMGJmZmUwNDExNTA3YWQyZGMyMWJhNzY3OTg4Mw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-01-07T02:15:33Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-02-05T01:59:36Z"}, "message": "Fix ICE: Don't generate integer mask comparision for 128/256-bits vector when op_true/op_false are NULL or constm1_rtx/const0_rtx [PR98537]\n\navx512vl-pr92686-vpcmp-{1,2,intelasm-1}.c are used to guard code\ngeneration of integer mask comparison, but for vector comparison to\nvector dest, integer mask comparison is disliked, so delete these\nuseless tests.\n\ngcc/ChangeLog:\n\n\tPR target/98537\n\t* config/i386/i386-expand.c (ix86_expand_sse_cmp): Don't\n\tgenerate integer mask comparison for 128/256-bits vector when\n\top_true/op_false is NULL_RTX or CONSTM1_RTX/CONST0_RTX. Also\n\tdelete redundant !maskcmp condition.\n\t(ix86_expand_int_vec_cmp): Ditto but no redundant deletion\n\there.\n\t(ix86_expand_sse_movcc): Delete definition of maskcmp, add the\n\tcondition directly to if (maskcmp), add extra check for\n\tcmpmode, it should be MODE_INT.\n\t(ix86_expand_fp_vec_cmp): Pass NULL to ix86_expand_sse_cmp's\n\tparameters op_true/op_false.\n\t(ix86_use_mask_cmp_p): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/98537\n\t* g++.target/i386/avx512bw-pr98537-1.C: New test.\n\t* g++.target/i386/avx512vl-pr98537-1.C: New test.\n\t* g++.target/i386/avx512vl-pr98537-2.C: New test.\n\t* gcc.target/i386/avx512vl-pr88547-1.c: Adjust testcase,\n\tinteger mask comparison should not be generated.\n\t* gcc.target/i386/avx512vl-pr92686-vpcmp-1.c: Remove.\n\t* gcc.target/i386/avx512vl-pr92686-vpcmp-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr92686-vpcmp-intelasm-1.c: Ditto.", "tree": {"sha": "b8310687e1fb97a2470128173382fc12e3a81b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8310687e1fb97a2470128173382fc12e3a81b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d0737d8f4b10bffe0411507ad2dc21ba7679883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0737d8f4b10bffe0411507ad2dc21ba7679883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0737d8f4b10bffe0411507ad2dc21ba7679883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0737d8f4b10bffe0411507ad2dc21ba7679883/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80fefd626460fb8924248622ba59dd56246703e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80fefd626460fb8924248622ba59dd56246703e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b80fefd626460fb8924248622ba59dd56246703e"}], "stats": {"total": 426, "additions": 100, "deletions": 326}, "files": [{"sha": "02d314226d16e90fd35c961fe7b3234c1f5cc81f", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=8d0737d8f4b10bffe0411507ad2dc21ba7679883", "patch": "@@ -3469,6 +3469,33 @@ ix86_valid_mask_cmp_mode (machine_mode mode)\n   return vector_size == 64 || TARGET_AVX512VL;\n }\n \n+/* Return true if integer mask comparison should be used.  */\n+static bool\n+ix86_use_mask_cmp_p (machine_mode mode, machine_mode cmp_mode,\n+\t\t     rtx op_true, rtx op_false)\n+{\n+  if (GET_MODE_SIZE (mode) == 64)\n+    return true;\n+\n+  /* When op_true is NULL, op_false must be NULL, or vice versa.  */\n+  gcc_assert (!op_true == !op_false);\n+\n+  /* When op_true/op_false is NULL or cmp_mode is not valid mask cmp mode,\n+     vector dest is required.  */\n+  if (!op_true || !ix86_valid_mask_cmp_mode (cmp_mode))\n+    return false;\n+\n+  /* Exclude those that could be optimized in ix86_expand_sse_movcc.  */\n+  if (op_false == CONST0_RTX (mode)\n+      || op_true == CONST0_RTX (mode)\n+      || (INTEGRAL_MODE_P (mode)\n+\t  && (op_true == CONSTM1_RTX (mode)\n+\t      || op_false == CONSTM1_RTX (mode))))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Expand an SSE comparison.  Return the register with the result.  */\n \n static rtx\n@@ -3485,7 +3512,7 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n   bool maskcmp = false;\n   rtx x;\n \n-  if (ix86_valid_mask_cmp_mode (cmp_ops_mode))\n+  if (ix86_use_mask_cmp_p (mode, cmp_ops_mode, op_true, op_false))\n     {\n       unsigned int nbits = GET_MODE_NUNITS (cmp_ops_mode);\n       maskcmp = true;\n@@ -3517,7 +3544,7 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n \n   x = gen_rtx_fmt_ee (code, cmp_mode, cmp_op0, cmp_op1);\n \n-  if (cmp_mode != mode && !maskcmp)\n+  if (cmp_mode != mode)\n     {\n       x = force_reg (cmp_ops_mode, x);\n       convert_move (dest, x, false);\n@@ -3544,9 +3571,6 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       return;\n     }\n \n-  /* In AVX512F the result of comparison is an integer mask.  */\n-  bool maskcmp = mode != cmpmode && ix86_valid_mask_cmp_mode (mode);\n-\n   rtx t2, t3, x;\n \n   /* If we have an integer mask and FP value then we need\n@@ -3557,8 +3581,11 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       cmp = gen_rtx_SUBREG (mode, cmp, 0);\n     }\n \n-  if (maskcmp)\n+  /* In AVX512F the result of comparison is an integer mask.  */\n+  if (mode != cmpmode\n+      && GET_MODE_CLASS (cmpmode) == MODE_INT)\n     {\n+      gcc_assert (ix86_valid_mask_cmp_mode (mode));\n       /* Using vector move with mask register.  */\n       cmp = force_reg (cmpmode, cmp);\n       /* Optimize for mask zero.  */\n@@ -4016,7 +4043,7 @@ ix86_expand_fp_vec_cmp (rtx operands[])\n     }\n   else\n     cmp = ix86_expand_sse_cmp (operands[0], code, operands[2], operands[3],\n-\t\t\t       operands[1], operands[2]);\n+\t\t\t       NULL, NULL);\n \n   if (operands[0] != cmp)\n     emit_move_insn (operands[0], cmp);\n@@ -4041,7 +4068,7 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n     ;\n   /* AVX512F supports all of the comparsions\n      on all 128/256/512-bit vector int types.  */\n-  else if (ix86_valid_mask_cmp_mode (mode))\n+  else if (ix86_use_mask_cmp_p (data_mode, mode, op_true, op_false))\n     ;\n   else\n     {"}, {"sha": "969684a222b35ecf8d52d9ed398e3b2e6ecf5eab", "filename": "gcc/testsuite/g++.target/i386/avx512bw-pr98537-1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512bw-pr98537-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512bw-pr98537-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512bw-pr98537-1.C?ref=8d0737d8f4b10bffe0411507ad2dc21ba7679883", "patch": "@@ -0,0 +1,11 @@\n+/* PR target/98537 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -std=c++11\" } */\n+\n+#define TYPEV char\n+#define TYPEW short\n+\n+#define T_ARR\t\t\t\t\t\t\\\n+  __attribute__ ((target (\"avx512vl,avx512bw\")))\n+\n+#include \"avx512vl-pr98537-1.C\""}, {"sha": "b2ba91111da55f99745a978471830f7abe90f844", "filename": "gcc/testsuite/g++.target/i386/avx512vl-pr98537-1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr98537-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr98537-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr98537-1.C?ref=8d0737d8f4b10bffe0411507ad2dc21ba7679883", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/98537 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -std=c++11\" } */\n+\n+#ifndef TYPEV\n+#define TYPEV int\n+#endif\n+\n+#ifndef TYPEW\n+#define TYPEW long long\n+#endif\n+\n+#ifndef T_ARR\n+#define T_ARR\t\t\t\t\t\\\n+  __attribute__ ((target (\"avx512vl\")))\n+#endif\n+\n+typedef TYPEV V __attribute__((__vector_size__(32)));\n+typedef TYPEW W __attribute__((__vector_size__(32)));\n+\n+W c, d;\n+struct B {};\n+B e;\n+struct C { W i; };\n+void foo (C);\n+\n+C\n+operator== (B, B)\n+{\n+  W r = (V)c == (V)d;\n+  return {r};\n+}\n+\n+void\n+T_ARR\n+bar ()\n+{\n+  B a;\n+  foo (a == e);\n+}"}, {"sha": "42c9682746d6cea1abb23db8ee9abd9385eb78e3", "filename": "gcc/testsuite/g++.target/i386/avx512vl-pr98537-2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr98537-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr98537-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr98537-2.C?ref=8d0737d8f4b10bffe0411507ad2dc21ba7679883", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/98537 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -std=c++11\" } */\n+\n+#define TYPEV float\n+#define TYPEW double\n+\n+#include \"avx512vl-pr98537-1.C\""}, {"sha": "af15a6364a4a56e7338b914671e1aded0d82c87f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr88547-1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0737d8f4b10bffe0411507ad2dc21ba7679883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c?ref=8d0737d8f4b10bffe0411507ad2dc21ba7679883", "patch": "@@ -1,12 +1,14 @@\n /* PR target/88547 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mno-xop -mavx512vl -mno-avx512bw -mno-avx512dq\" } */\n+/* { dg-options \"-O2 -mno-xop -mavx512vl -mavx512bw -mavx512dq\" } */\n /* { dg-final { scan-assembler-not \"vpmingt\\[bwdq]\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-not \"%k\\[0-9\\]\" } } */\n /* { dg-final { scan-assembler-times \"vpminub\\[\\t ]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpminsb\\[\\t ]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpminuw\\[\\t ]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpminsw\\[\\t ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpcmp\\[dq\\]\\[\\t ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpu\\[dq\\]\\[\\t ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vpternlog\\[qd\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpminud\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsd\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminuq\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsq\\[\\t ]\" 2 } } */\n #include \"avx2-pr88547-1.c\""}, {"sha": "5b79d4d36f912927ad87a8e2e63a755b5ad11fa1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-vpcmp-1.c", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80fefd626460fb8924248622ba59dd56246703e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80fefd626460fb8924248622ba59dd56246703e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-1.c?ref=b80fefd626460fb8924248622ba59dd56246703e", "patch": "@@ -1,112 +0,0 @@\n-/* PR target/88547 */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx512bw -mavx512vl -mno-avx512dq -mno-xop\" } */\n-/* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vpmovm2\\[bw\\]\\[\\t ]\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vpternlog\\[dq\\]\\[\\t ]\" 8 } } */\n-\n-typedef signed char v32qi __attribute__((vector_size(32)));\n-typedef unsigned char v32uqi __attribute__((vector_size(32)));\n-typedef short v16hi __attribute__((vector_size(32)));\n-typedef unsigned short v16uhi __attribute__((vector_size(32)));\n-typedef int v8si __attribute__((vector_size(32)));\n-typedef unsigned v8usi __attribute__((vector_size(32)));\n-typedef long long v4di __attribute__((vector_size(32)));\n-typedef unsigned long long v4udi __attribute__((vector_size(32)));\n-\n-__attribute__((noipa)) v32qi\n-f1 (v32qi x, v32qi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v32uqi\n-f2 (v32uqi x, v32uqi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v32qi\n-f3 (v32qi x, v32qi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v32uqi\n-f4 (v32uqi x, v32uqi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v16hi\n-f5 (v16hi x, v16hi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v16uhi\n-f6 (v16uhi x, v16uhi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v16hi\n-f7 (v16hi x, v16hi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v16uhi\n-f8 (v16uhi x, v16uhi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v8si\n-f9 (v8si x, v8si y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v8usi\n-f10 (v8usi x, v8usi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v8si\n-f11 (v8si x, v8si y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v8usi\n-f12 (v8usi x, v8usi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v4di\n-f13 (v4di x, v4di y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v4udi\n-f14 (v4udi x, v4udi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v4di\n-f15 (v4di x, v4di y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v4udi\n-f16 (v4udi x, v4udi y)\n-{\n-  return x <= y;\n-}"}, {"sha": "6be24ff30f401d86b7f8e291b3c01ef7f08ba006", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-vpcmp-2.c", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80fefd626460fb8924248622ba59dd56246703e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80fefd626460fb8924248622ba59dd56246703e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-2.c?ref=b80fefd626460fb8924248622ba59dd56246703e", "patch": "@@ -1,91 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target avx512bw } */\n-/* { dg-require-effective-target avx512vl } */\n-/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n-\n-#ifndef CHECK\n-#define CHECK \"avx512f-helper.h\"\n-#endif\n-\n-#include CHECK\n-\n-#ifndef TEST\n-#define TEST avx512vl_test\n-#endif\n-\n-#include \"avx512vl-pr92686-vpcmp-1.c\"\n-\n-#define NUM 256\n-\n-#define TEST_SIGNED(vtype, type, N, fn, op) \\\n-do\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n-    int i, sign = 1;\t\t\t\t\t\t\\\n-    type res;\t\t\t\t\t\t\t\\\n-    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tsrc1.i[i] = i * i * sign;\t\t\t\t\\\n-\tsrc2.i[i] = (i + 20) * sign;\t\t\t\t\\\n-\tsign = -sign;\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n-      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n-\tif (res != dst.i[i])\t\t\t\t\t\\\n-\t  abort ();\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-#define TEST_UNSIGNED(vtype, type, N, fn, op) \\\n-do\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n-    int i;\t\t\t\t\t\t\t\\\n-    type res;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tsrc1.i[i] = i * i;\t\t\t\t\t\\\n-\tsrc2.i[i] = i + 20;\t\t\t\t\t\\\n-\tif ((i % 4))\t\t\t\t\t\t\\\n-\t  src2.i[i] |= (1ULL << (sizeof (type)\t\t\t\\\n-\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n-      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n-\tif (res != dst.i[i])\t\t\t\t\t\\\n-\t  abort ();\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-static void\n-TEST (void)\n-{\n-  TEST_SIGNED (v32qi, signed char, 32, f1, >=);\n-  TEST_UNSIGNED (v32uqi, unsigned char, 32, f2, >=);\n-  TEST_SIGNED (v32qi, signed char, 32, f3, <=);\n-  TEST_UNSIGNED (v32uqi, unsigned char, 32, f4, <=);\n-  TEST_SIGNED (v16hi, short int, 16, f5, >=);\n-  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f6, >=);\n-  TEST_SIGNED (v16hi, short int, 16, f7, <=);\n-  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f8, <=);\n-  TEST_SIGNED (v8si, int, 8, f9, >=);\n-  TEST_UNSIGNED (v8usi, unsigned int, 8, f10, >=);\n-  TEST_SIGNED (v8si, int, 8, f11, <=);\n-  TEST_UNSIGNED (v8usi, unsigned int, 8, f12, <=);\n-  TEST_SIGNED (v4di, long long int, 4, f13, >=);\n-  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f14, >=);\n-  TEST_SIGNED (v4di, long long int, 4, f15, <=);\n-  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f16, <=);\n-}"}, {"sha": "907386db08b20fe0fd9b9b0317cfdfd6ad1aebd0", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-vpcmp-intelasm-1.c", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80fefd626460fb8924248622ba59dd56246703e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-intelasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80fefd626460fb8924248622ba59dd56246703e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-intelasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-intelasm-1.c?ref=b80fefd626460fb8924248622ba59dd56246703e", "patch": "@@ -1,111 +0,0 @@\n-/* PR target/88547 */\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target masm_intel } */\n-/* { dg-options \"-O2 -mavx512bw -mavx512vl -mno-avx512dq -mno-xop -masm=intel\" } */\n-/* { dg-require-effective-target avx512bw } */\n-/* { dg-require-effective-target avx512vl } */\n-\n-typedef signed char v32qi __attribute__((vector_size(32)));\n-typedef unsigned char v32uqi __attribute__((vector_size(32)));\n-typedef short v16hi __attribute__((vector_size(32)));\n-typedef unsigned short v16uhi __attribute__((vector_size(32)));\n-typedef int v8si __attribute__((vector_size(32)));\n-typedef unsigned v8usi __attribute__((vector_size(32)));\n-typedef long long v4di __attribute__((vector_size(32)));\n-typedef unsigned long long v4udi __attribute__((vector_size(32)));\n-\n-__attribute__((noipa)) v32qi\n-f1 (v32qi x, v32qi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v32uqi\n-f2 (v32uqi x, v32uqi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v32qi\n-f3 (v32qi x, v32qi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v32uqi\n-f4 (v32uqi x, v32uqi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v16hi\n-f5 (v16hi x, v16hi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v16uhi\n-f6 (v16uhi x, v16uhi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v16hi\n-f7 (v16hi x, v16hi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v16uhi\n-f8 (v16uhi x, v16uhi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v8si\n-f9 (v8si x, v8si y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v8usi\n-f10 (v8usi x, v8usi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v8si\n-f11 (v8si x, v8si y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v8usi\n-f12 (v8usi x, v8usi y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v4di\n-f13 (v4di x, v4di y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v4udi\n-f14 (v4udi x, v4udi y)\n-{\n-  return x >= y;\n-}\n-\n-__attribute__((noipa)) v4di\n-f15 (v4di x, v4di y)\n-{\n-  return x <= y;\n-}\n-\n-__attribute__((noipa)) v4udi\n-f16 (v4udi x, v4udi y)\n-{\n-  return x <= y;\n-}"}]}